; ModuleID = 'std::core::string'
source_filename = "std::core::string"
target datalayout = "e-m:w-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-windows-msvc"

%.introspect = type { i8, i64, ptr, i64, i64, i64, [0 x i64] }
%"char[]" = type { ptr, i64 }
%any = type { ptr, i64 }
%"char[][]" = type { ptr, i64 }
%"any[]" = type { ptr, i64 }
%"ushort[]" = type { ptr, i64 }
%"uint[]" = type { ptr, i64 }
%Splitter = type { %"char[]", %"char[]", i64, i32, i32 }
%StringIterator = type { %"char[]", i64 }
%ArenaAllocator = type { %"char[]", i64 }

$std.core.String.replace = comdat any

$std.core.String.treplace = comdat any

$std.core.String.trim = comdat any

$std.core.String.trim_left = comdat any

$std.core.String.trim_right = comdat any

$std.core.String.starts_with = comdat any

$std.core.String.ends_with = comdat any

$std.core.String.strip = comdat any

$std.core.String.strip_end = comdat any

$std.core.String.split = comdat any

$std.core.String.tsplit = comdat any

$std.core.String.split_to_buffer = comdat any

$std.core.String.contains = comdat any

$std.core.String.count = comdat any

$std.core.String.index_of_char = comdat any

$std.core.String.index_of_chars = comdat any

$std.core.String.index_of_char_from = comdat any

$std.core.String.rindex_of_char = comdat any

$std.core.String.index_of = comdat any

$std.core.String.rindex_of = comdat any

$std.core.string.ZString.eq = comdat any

$std.core.string.ZString.str_view = comdat any

$std.core.string.ZString.char_len = comdat any

$std.core.string.ZString.len = comdat any

$std.core.string.WString.len = comdat any

$std.core.String.zstr_copy = comdat any

$std.core.String.concat = comdat any

$std.core.String.tconcat = comdat any

$std.core.String.zstr_tcopy = comdat any

$std.core.String.copy = comdat any

$std.core.String.free = comdat any

$std.core.String.tcopy = comdat any

$std.core.string.ZString.copy = comdat any

$std.core.string.ZString.tcopy = comdat any

$std.core.String.to_utf16 = comdat any

$std.core.String.to_temp_utf16 = comdat any

$std.core.String.to_wstring = comdat any

$std.core.String.to_temp_wstring = comdat any

$std.core.String.to_utf32 = comdat any

$std.core.String.to_temp_utf32 = comdat any

$std.core.String.convert_to_lower = comdat any

$std.core.String.to_lower_copy = comdat any

$std.core.String.to_lower_tcopy = comdat any

$std.core.String.convert_to_upper = comdat any

$std.core.String.to_upper_copy = comdat any

$std.core.String.capitalize_copy = comdat any

$std.core.String.snake_to_pascal_copy = comdat any

$std.core.String.convert_snake_to_pascal = comdat any

$std.core.String.pascal_to_snake_copy = comdat any

$std.core.String.iterator = comdat any

$std.core.String.to_upper_tcopy = comdat any

$std.core.String.utf8_codepoints = comdat any

$std.core.String.is_zstr = comdat any

$std.core.String.quick_zstr = comdat any

$std.core.String.to_int128 = comdat any

$std.core.String.to_long = comdat any

$std.core.String.to_int = comdat any

$std.core.String.to_short = comdat any

$std.core.String.to_ichar = comdat any

$std.core.String.to_uint128 = comdat any

$std.core.String.to_ulong = comdat any

$std.core.String.to_uint = comdat any

$std.core.String.to_ushort = comdat any

$std.core.String.to_uchar = comdat any

$std.core.String.to_double = comdat any

$std.core.String.to_float = comdat any

$std.core.String.tokenize = comdat any

$std.core.String.tokenize_all = comdat any

$std.core.String.splitter = comdat any

$std.core.string.Splitter.reset = comdat any

$std.core.string.Splitter.next = comdat any

$std.core.string.tformat_zstr = comdat any

$std.core.string.format = comdat any

$std.core.string.bformat = comdat any

$std.core.string.tformat = comdat any

$std.core.string.join = comdat any

$std.core.string.from_utf32 = comdat any

$std.core.string.from_utf16 = comdat any

$std.core.string.from_wstring = comdat any

$std.core.string.tfrom_wstring = comdat any

$std.core.string.tfrom_utf16 = comdat any

$std.core.String.escape = comdat any

$std.core.String.tescape = comdat any

$std.core.String.unescape = comdat any

$std.core.String.tunescape = comdat any

$std.core.string.escape_len = comdat any

$std.core.string.needs_escape = comdat any

$.dyn_search = comdat any

$"$ct.std.core.string.ZString" = comdat any

$"$ct.p$char" = comdat any

$"$ct.char" = comdat any

$"$ct.std.core.string.WString" = comdat any

$"$ct.p$ushort" = comdat any

$"$ct.ushort" = comdat any

$"$ct.std.core.string.Splitter" = comdat any

$"$ct.int" = comdat any

$"$ct.std.core.string.SplitterType" = comdat any

$"$ct.std.core.mem.allocator.ArenaAllocator" = comdat any

$"$sel.acquire" = comdat any

$"$ct.ulong" = comdat any

$"$ct.fault" = comdat any

$"$ct.long" = comdat any

$"$sel.release" = comdat any

$std.core.builtin.NOT_FOUND = comdat any

$"$sel.resize" = comdat any

$std.core.string.BUFFER_EXCEEDED = comdat any

$std.core.string.EMPTY_STRING = comdat any

$std.core.string.MALFORMED_INTEGER = comdat any

$std.core.string.INTEGER_OVERFLOW = comdat any

$std.core.string.NEGATIVE_VALUE = comdat any

$std.core.string.MALFORMED_FLOAT = comdat any

$std.core.string.FLOAT_OUT_OF_RANGE = comdat any

$"$ct.uint" = comdat any

$std.core.builtin.NO_MORE_ELEMENT = comdat any

$std.core.string.UNTERMINATED_STRING = comdat any

$std.core.string.INVALID_ESCAPE_SEQUENCE = comdat any

$std.core.string.INVALID_HEX_ESCAPE = comdat any

$std.core.string.INVALID_UNICODE_ESCAPE = comdat any

$std.core.string.KMAX = comdat any

$std.core.string.MASK = comdat any

$std.core.string.B1B_DIG = comdat any

$std.core.string.B1B_MAX = comdat any

@"$ct.std.core.string.ZString" = linkonce global %.introspect { i8 18, i64 ptrtoint (ptr @"$ct.p$char" to i64), ptr null, i64 8, i64 ptrtoint (ptr @"$ct.p$char" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.p$char" = linkonce global %.introspect { i8 19, i64 0, ptr null, i64 8, i64 ptrtoint (ptr @"$ct.char" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.char" = linkonce global %.introspect { i8 3, i64 0, ptr null, i64 1, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.core.string.WString" = linkonce global %.introspect { i8 18, i64 ptrtoint (ptr @"$ct.p$ushort" to i64), ptr null, i64 8, i64 ptrtoint (ptr @"$ct.p$ushort" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.p$ushort" = linkonce global %.introspect { i8 19, i64 0, ptr null, i64 8, i64 ptrtoint (ptr @"$ct.ushort" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.ushort" = linkonce global %.introspect { i8 3, i64 0, ptr null, i64 2, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.core.string.Splitter" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 48, i64 0, i64 5, [0 x i64] zeroinitializer }, comdat, align 8
@.enum.TOKENIZE = internal constant [9 x i8] c"TOKENIZE\00", align 1
@.enum.TOKENIZE_ALL = internal constant [13 x i8] c"TOKENIZE_ALL\00", align 1
@.enum.TOKENIZE_ALL_SKIP_LAST = internal constant [23 x i8] c"TOKENIZE_ALL_SKIP_LAST\00", align 1
@"$ct.int" = linkonce global %.introspect { i8 2, i64 0, ptr null, i64 4, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.core.string.SplitterType" = linkonce global { i8, i64, ptr, i64, i64, i64, [3 x %"char[]"] } { i8 8, i64 0, ptr null, i64 4, i64 ptrtoint (ptr @"$ct.int" to i64), i64 3, [3 x %"char[]"] [%"char[]" { ptr @.enum.TOKENIZE, i64 8 }, %"char[]" { ptr @.enum.TOKENIZE_ALL, i64 12 }, %"char[]" { ptr @.enum.TOKENIZE_ALL_SKIP_LAST, i64 22 }] }, comdat, align 8
@std.core.string.SURROGATE_OFFSET = internal unnamed_addr constant i32 65536, align 4, !dbg !0
@std.core.string.SURROGATE_GENERIC_MASK = internal unnamed_addr constant i32 63488, align 4, !dbg !4
@std.core.string.SURROGATE_MASK = internal unnamed_addr constant i32 64512, align 4, !dbg !6
@std.core.string.SURROGATE_CODEPOINT_MASK = internal unnamed_addr constant i32 1023, align 4, !dbg !8
@std.core.string.SURROGATE_BITS = internal unnamed_addr constant i32 10, align 4, !dbg !10
@std.core.string.SURROGATE_LOW_VALUE = internal unnamed_addr constant i32 56320, align 4, !dbg !12
@std.core.string.SURROGATE_HIGH_VALUE = internal unnamed_addr constant i32 55296, align 4, !dbg !14
@"$ct.std.core.mem.allocator.ArenaAllocator" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 24, i64 0, i64 2, [0 x i64] zeroinitializer }, comdat, align 8
@"$sel.acquire" = linkonce_odr constant [8 x i8] c"acquire\00", comdat, align 1
@.panic_msg = internal constant [66 x i8] c"@require \22!alignment || math::is_power_of_2(alignment)\22 violated.\00", align 1
@.file = internal constant [17 x i8] c"mem_allocator.c3\00", align 1
@.func = internal constant [5 x i8] c"join\00", align 1
@std.core.builtin.panic = external global ptr, align 8
@.panic_msg.7 = internal constant [81 x i8] c"@require \22alignment <= mem::MAX_MEMORY_ALIGNMENT\22 violated: 'alignment too big'.\00", align 1
@.panic_msg.8 = internal constant [60 x i8] c"@require \22size > 0\22 violated: 'The size must be 1 or more'.\00", align 1
@.panic_msg.9 = internal constant [45 x i8] c"No method 'acquire' could be found on target\00", align 1
@"$ct.ulong" = linkonce global %.introspect { i8 3, i64 0, ptr null, i64 8, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@.panic_msg.10 = internal constant [44 x i8] c"Negative value (%d) given for slice length.\00", align 1
@"$ct.fault" = linkonce global %.introspect { i8 6, i64 0, ptr null, i64 8, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@.panic_msg.11 = internal constant [37 x i8] c"Unexpected fault '%s' was unwrapped!\00", align 1
@"$ct.long" = linkonce global %.introspect { i8 2, i64 0, ptr null, i64 8, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@.panic_msg.12 = internal constant [62 x i8] c"Index exceeds array length (array had size %d, index was %d).\00", align 1
@.file.13 = internal constant [10 x i8] c"string.c3\00", align 1
@.panic_msg.14 = internal constant [61 x i8] c"End index out of bounds (end index of %d exceeds size of %d)\00", align 1
@.panic_msg.15 = internal constant [60 x i8] c"Array index out of bounds (array had size %d, index was %d)\00", align 1
@.panic_msg.16 = internal constant [45 x i8] c"Dereference of null pointer, 'str' was null.\00", align 1
@.panic_msg.17 = internal constant [95 x i8] c"Unaligned access: ptr %% %s = %s, use @unaligned_load / @unaligned_store for unaligned access.\00", align 1
@.panic_msg.18 = internal constant [33 x i8] c"Called a method on a null value.\00", align 1
@.file.19 = internal constant [11 x i8] c"dstring.c3\00", align 1
@.func.20 = internal constant [11 x i8] c"from_utf32\00", align 1
@.func.21 = internal constant [11 x i8] c"from_utf16\00", align 1
@"$sel.release" = linkonce_odr constant [8 x i8] c"release\00", comdat, align 1
@.panic_msg.22 = internal constant [76 x i8] c"@require \22ptr != null\22 violated: 'Empty pointers should never be released'.\00", align 1
@.panic_msg.23 = internal constant [45 x i8] c"No method 'release' could be found on target\00", align 1
@.func.24 = internal constant [13 x i8] c"from_wstring\00", align 1
@std.core.mem.allocator.current_temp = external thread_local global %any, align 8
@std.core.mem.allocator.thread_allocator = external thread_local global %any, align 8
@.func.25 = internal constant [10 x i8] c"trim_left\00", align 1
@.panic_msg.26 = internal constant [39 x i8] c"Negative array indexing (index was %d)\00", align 1
@.func.27 = internal constant [11 x i8] c"trim_right\00", align 1
@.func.28 = internal constant [12 x i8] c"starts_with\00", align 1
@.func.29 = internal constant [10 x i8] c"ends_with\00", align 1
@.func.30 = internal constant [6 x i8] c"strip\00", align 1
@.func.31 = internal constant [10 x i8] c"strip_end\00", align 1
@.panic_msg.32 = internal constant [90 x i8] c"@require \22delimiter.len > 0\22 violated: 'The delimiter must be at least 1 character long'.\00", align 1
@.func.33 = internal constant [6 x i8] c"split\00", align 1
@std.core.builtin.NOT_FOUND = linkonce constant %"char[]" { ptr @std.core.builtin.NOT_FOUND.nameof, i64 18 }, comdat, align 8
@std.core.builtin.NOT_FOUND.nameof = internal constant [19 x i8] c"builtin::NOT_FOUND\00", align 1
@.panic_msg.34 = internal constant [72 x i8] c"@require \22substr.len > 0\22 violated: 'The string must be len 1 or more'.\00", align 1
@"$sel.resize" = linkonce_odr constant [7 x i8] c"resize\00", comdat, align 1
@.panic_msg.35 = internal constant [33 x i8] c"@require \22ptr != null\22 violated.\00", align 1
@.panic_msg.36 = internal constant [34 x i8] c"@require \22new_size > 0\22 violated.\00", align 1
@.panic_msg.37 = internal constant [44 x i8] c"No method 'resize' could be found on target\00", align 1
@.panic_msg.38 = internal constant [49 x i8] c"@ensure \22return.len > 0 || skip_empty\22 violated.\00", align 1
@.func.39 = internal constant [7 x i8] c"tsplit\00", align 1
@.func.40 = internal constant [16 x i8] c"split_to_buffer\00", align 1
@std.core.string.BUFFER_EXCEEDED = linkonce constant %"char[]" { ptr @std.core.string.BUFFER_EXCEEDED.nameof, i64 23 }, comdat, align 8
@std.core.string.BUFFER_EXCEEDED.nameof = internal constant [24 x i8] c"string::BUFFER_EXCEEDED\00", align 1
@.file.41 = internal constant [11 x i8] c"builtin.c3\00", align 1
@.func.42 = internal constant [9 x i8] c"contains\00", align 1
@.func.43 = internal constant [6 x i8] c"count\00", align 1
@.panic_msg.44 = internal constant [45 x i8] c"Negative size (start %d is less than end %d)\00", align 1
@.func.45 = internal constant [14 x i8] c"index_of_char\00", align 1
@.panic_msg.46 = internal constant [38 x i8] c"@ensure \22return < self.len\22 violated.\00", align 1
@.func.47 = internal constant [15 x i8] c"index_of_chars\00", align 1
@.func.48 = internal constant [19 x i8] c"index_of_char_from\00", align 1
@.func.49 = internal constant [15 x i8] c"rindex_of_char\00", align 1
@.func.50 = internal constant [9 x i8] c"index_of\00", align 1
@.panic_msg.51 = internal constant [75 x i8] c"@require \22substr.len > 0\22 violated: 'The substring must be len 1 or more'.\00", align 1
@.func.52 = internal constant [10 x i8] c"rindex_of\00", align 1
@.panic_msg.53 = internal constant [43 x i8] c"Dereference of null pointer, 'a' was null.\00", align 1
@.func.54 = internal constant [3 x i8] c"eq\00", align 1
@.panic_msg.55 = internal constant [43 x i8] c"Dereference of null pointer, 'b' was null.\00", align 1
@.func.56 = internal constant [9 x i8] c"str_view\00", align 1
@.panic_msg.57 = internal constant [45 x i8] c"Dereference of null pointer, 'ptr' was null.\00", align 1
@.func.58 = internal constant [4 x i8] c"len\00", align 1
@.func.59 = internal constant [10 x i8] c"zstr_copy\00", align 1
@.panic_msg.60 = internal constant [38 x i8] c"Passed null to a ref ('&') parameter.\00", align 1
@.file.61 = internal constant [7 x i8] c"mem.c3\00", align 1
@.panic_msg.62 = internal constant [95 x i8] c"@require \22src != null || len == 0\22 violated: 'Copying a null with non-zero length is invalid'.\00", align 1
@.panic_msg.63 = internal constant [96 x i8] c"@require \22len == 0 || dst + len <= src || src + len <= dst\22 violated: 'Ranges may not overlap'.\00", align 1
@.func.64 = internal constant [7 x i8] c"concat\00", align 1
@.func.65 = internal constant [5 x i8] c"copy\00", align 1
@.panic_msg.66 = internal constant [63 x i8] c"Reference parameter 'self' was passed a null pointer argument.\00", align 1
@.func.67 = internal constant [5 x i8] c"free\00", align 1
@.panic_msg.68 = internal constant [46 x i8] c"Dereference of null pointer, 'self' was null.\00", align 1
@.emptystr = internal constant [1 x i8] zeroinitializer, align 1
@.func.69 = internal constant [9 x i8] c"to_utf16\00", align 1
@.func.70 = internal constant [9 x i8] c"to_utf32\00", align 1
@.func.71 = internal constant [17 x i8] c"convert_to_lower\00", align 1
@.panic_msg.72 = internal constant [43 x i8] c"Dereference of null pointer, 'c' was null.\00", align 1
@std.core.ascii.ASCII_LOOKUP = external constant [256 x i16], align 16
@.file.73 = internal constant [9 x i8] c"ascii.c3\00", align 1
@.func.74 = internal constant [17 x i8] c"convert_to_upper\00", align 1
@.func.75 = internal constant [16 x i8] c"capitalize_copy\00", align 1
@.str = private unnamed_addr constant [2 x i8] c"_\00", align 1
@.func.76 = internal constant [21 x i8] c"snake_to_pascal_copy\00", align 1
@.panic_msg.77 = internal constant [27 x i8] c"Assert \22s.len > 0\22 failed.\00", align 1
@std.core.ascii.TO_UPPER = external constant [256 x i8], align 16
@.panic_msg.78 = internal constant [39 x i8] c"Slice copy length mismatch (%d != %d).\00", align 1
@.func.79 = internal constant [24 x i8] c"convert_snake_to_pascal\00", align 1
@.str.80 = private unnamed_addr constant [2 x i8] c"_\00", align 1
@.func.81 = internal constant [21 x i8] c"pascal_to_snake_copy\00", align 1
@.panic_msg.82 = internal constant [64 x i8] c"@require \22!self.data()\22 violated: 'String already initialized'.\00", align 1
@std.core.ascii.TO_LOWER = external constant [256 x i8], align 16
@.func.83 = internal constant [16 x i8] c"utf8_codepoints\00", align 1
@.panic_msg.84 = internal constant [61 x i8] c"Dereference of null pointer, 'self.ptr + self.len' was null.\00", align 1
@.func.85 = internal constant [8 x i8] c"is_zstr\00", align 1
@.panic_msg.86 = internal constant [42 x i8] c"@ensure \22return[self.len] == 0\22 violated.\00", align 1
@.func.87 = internal constant [11 x i8] c"quick_zstr\00", align 1
@.panic_msg.88 = internal constant [64 x i8] c"@require \22base > 0 && base <= 16\22 violated: 'Unsupported base'.\00", align 1
@.func.89 = internal constant [10 x i8] c"to_int128\00", align 1
@std.core.string.EMPTY_STRING = linkonce constant %"char[]" { ptr @std.core.string.EMPTY_STRING.nameof, i64 20 }, comdat, align 8
@std.core.string.EMPTY_STRING.nameof = internal constant [21 x i8] c"string::EMPTY_STRING\00", align 1
@std.core.string.MALFORMED_INTEGER = linkonce constant %"char[]" { ptr @std.core.string.MALFORMED_INTEGER.nameof, i64 25 }, comdat, align 8
@std.core.string.MALFORMED_INTEGER.nameof = internal constant [26 x i8] c"string::MALFORMED_INTEGER\00", align 1
@std.core.string.INTEGER_OVERFLOW = linkonce constant %"char[]" { ptr @std.core.string.INTEGER_OVERFLOW.nameof, i64 24 }, comdat, align 8
@std.core.string.INTEGER_OVERFLOW.nameof = internal constant [25 x i8] c"string::INTEGER_OVERFLOW\00", align 1
@.func.90 = internal constant [8 x i8] c"to_long\00", align 1
@.func.91 = internal constant [7 x i8] c"to_int\00", align 1
@.func.92 = internal constant [9 x i8] c"to_short\00", align 1
@.func.93 = internal constant [9 x i8] c"to_ichar\00", align 1
@.func.94 = internal constant [11 x i8] c"to_uint128\00", align 1
@std.core.string.NEGATIVE_VALUE = linkonce constant %"char[]" { ptr @std.core.string.NEGATIVE_VALUE.nameof, i64 22 }, comdat, align 8
@std.core.string.NEGATIVE_VALUE.nameof = internal constant [23 x i8] c"string::NEGATIVE_VALUE\00", align 1
@.func.95 = internal constant [9 x i8] c"to_ulong\00", align 1
@.func.96 = internal constant [8 x i8] c"to_uint\00", align 1
@.func.97 = internal constant [10 x i8] c"to_ushort\00", align 1
@.func.98 = internal constant [9 x i8] c"to_uchar\00", align 1
@to_double.BITS = internal unnamed_addr constant i32 53, align 4, !dbg !16
@to_double.EMIN = internal unnamed_addr constant i32 -1074, align 4, !dbg !19
@.str.99 = private unnamed_addr constant [5 x i8] c"\09\0A\0D \00", align 1
@std.core.string.MALFORMED_FLOAT = linkonce constant %"char[]" { ptr @std.core.string.MALFORMED_FLOAT.nameof, i64 23 }, comdat, align 8
@std.core.string.MALFORMED_FLOAT.nameof = internal constant [24 x i8] c"string::MALFORMED_FLOAT\00", align 1
@.file.100 = internal constant [18 x i8] c"string_to_real.c3\00", align 1
@.func.101 = internal constant [10 x i8] c"to_double\00", align 1
@.str.102 = private unnamed_addr constant [5 x i8] c"\09\0A\0D \00", align 1
@.str.103 = private unnamed_addr constant [9 x i8] c"infinity\00", align 1
@.str.104 = private unnamed_addr constant [9 x i8] c"INFINITY\00", align 1
@.str.105 = private unnamed_addr constant [4 x i8] c"NAN\00", align 1
@.str.106 = private unnamed_addr constant [4 x i8] c"nan\00", align 1
@.panic_msg.107 = internal constant [23 x i8] c"Negative indexing (%d)\00", align 1
@std.core.string.FLOAT_OUT_OF_RANGE = linkonce constant %"char[]" { ptr @std.core.string.FLOAT_OUT_OF_RANGE.nameof, i64 26 }, comdat, align 8
@std.core.string.FLOAT_OUT_OF_RANGE.nameof = internal constant [27 x i8] c"string::FLOAT_OUT_OF_RANGE\00", align 1
@.panic_msg.108 = internal constant [35 x i8] c"@require \22chars.len > 0\22 violated.\00", align 1
@to_double.TH = internal unnamed_addr constant [2 x i32] [i32 9007199, i32 254740991], align 4, !dbg !21
@to_double.P10S = internal unnamed_addr constant [8 x i32] [i32 10, i32 100, i32 1000, i32 10000, i32 100000, i32 1000000, i32 10000000, i32 100000000], align 16, !dbg !26
@.panic_msg.109 = internal constant [21 x i8] c"Assert \22len\22 failed.\00", align 1
@.panic_msg.110 = internal constant [35 x i8] c"Assert \22index < last_char\22 failed.\00", align 1
@.panic_msg.111 = internal constant [18 x i8] c"Division by zero.\00", align 1
@"$ct.uint" = linkonce global %.introspect { i8 3, i64 0, ptr null, i64 4, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@.panic_msg.112 = internal constant [36 x i8] c"Shift amount out of range (was %s).\00", align 1
@.panic_msg.113 = internal constant [11 x i8] c"% by zero.\00", align 1
@to_float.BITS = internal unnamed_addr constant i32 24, align 4, !dbg !31
@to_float.EMIN = internal unnamed_addr constant i32 -149, align 4, !dbg !33
@.str.114 = private unnamed_addr constant [5 x i8] c"\09\0A\0D \00", align 1
@.func.115 = internal constant [9 x i8] c"to_float\00", align 1
@.str.116 = private unnamed_addr constant [5 x i8] c"\09\0A\0D \00", align 1
@.str.117 = private unnamed_addr constant [9 x i8] c"infinity\00", align 1
@.str.118 = private unnamed_addr constant [9 x i8] c"INFINITY\00", align 1
@.str.119 = private unnamed_addr constant [4 x i8] c"NAN\00", align 1
@.str.120 = private unnamed_addr constant [4 x i8] c"nan\00", align 1
@to_float.TH = internal unnamed_addr constant [2 x i32] [i32 9007199, i32 254740991], align 4, !dbg !35
@to_float.P10S = internal unnamed_addr constant [8 x i32] [i32 10, i32 100, i32 1000, i32 10000, i32 100000, i32 1000000, i32 10000000, i32 100000000], align 16, !dbg !37
@.func.121 = internal constant [6 x i8] c"reset\00", align 1
@.func.122 = internal constant [5 x i8] c"next\00", align 1
@std.core.builtin.NO_MORE_ELEMENT = linkonce constant %"char[]" { ptr @std.core.builtin.NO_MORE_ELEMENT.nameof, i64 24 }, comdat, align 8
@std.core.builtin.NO_MORE_ELEMENT.nameof = internal constant [25 x i8] c"builtin::NO_MORE_ELEMENT\00", align 1
@.file.123 = internal constant [17 x i8] c"string_escape.c3\00", align 1
@.func.124 = internal constant [11 x i8] c"escape_len\00", align 1
@.func.125 = internal constant [7 x i8] c"escape\00", align 1
@.str.126 = private unnamed_addr constant [3 x i8] c"\\\22\00", align 1
@.str.127 = private unnamed_addr constant [3 x i8] c"\\\\\00", align 1
@.str.128 = private unnamed_addr constant [3 x i8] c"\\b\00", align 1
@.str.129 = private unnamed_addr constant [3 x i8] c"\\f\00", align 1
@.str.130 = private unnamed_addr constant [3 x i8] c"\\n\00", align 1
@.str.131 = private unnamed_addr constant [3 x i8] c"\\r\00", align 1
@.str.132 = private unnamed_addr constant [3 x i8] c"\\t\00", align 1
@.str.133 = private unnamed_addr constant [3 x i8] c"\\v\00", align 1
@.str.134 = private unnamed_addr constant [3 x i8] c"\\0\00", align 1
@.str.135 = private unnamed_addr constant [7 x i8] c"\\x%02x\00", align 1
@.func.136 = internal constant [9 x i8] c"unescape\00", align 1
@std.core.string.UNTERMINATED_STRING = linkonce constant %"char[]" { ptr @std.core.string.UNTERMINATED_STRING.nameof, i64 27 }, comdat, align 8
@std.core.string.UNTERMINATED_STRING.nameof = internal constant [28 x i8] c"string::UNTERMINATED_STRING\00", align 1
@std.core.string.INVALID_ESCAPE_SEQUENCE = linkonce constant %"char[]" { ptr @std.core.string.INVALID_ESCAPE_SEQUENCE.nameof, i64 31 }, comdat, align 8
@std.core.string.INVALID_ESCAPE_SEQUENCE.nameof = internal constant [32 x i8] c"string::INVALID_ESCAPE_SEQUENCE\00", align 1
@std.core.string.INVALID_HEX_ESCAPE = linkonce constant %"char[]" { ptr @std.core.string.INVALID_HEX_ESCAPE.nameof, i64 26 }, comdat, align 8
@std.core.string.INVALID_HEX_ESCAPE.nameof = internal constant [27 x i8] c"string::INVALID_HEX_ESCAPE\00", align 1
@std.core.string.INVALID_UNICODE_ESCAPE = linkonce constant %"char[]" { ptr @std.core.string.INVALID_UNICODE_ESCAPE.nameof, i64 30 }, comdat, align 8
@std.core.string.INVALID_UNICODE_ESCAPE.nameof = internal constant [31 x i8] c"string::INVALID_UNICODE_ESCAPE\00", align 1
@.panic_msg.137 = internal constant [35 x i8] c"@require \22c <= 0x10ffff\22 violated.\00", align 1
@std.core.string.KMAX = weak_odr local_unnamed_addr constant i32 128, comdat, align 4, !dbg !39
@std.core.string.MASK = weak_odr local_unnamed_addr constant i32 127, comdat, align 4, !dbg !42
@std.core.string.B1B_DIG = weak_odr local_unnamed_addr constant i32 2, comdat, align 4, !dbg !44
@std.core.string.B1B_MAX = weak_odr local_unnamed_addr constant [2 x i32] [i32 9007199, i32 254740991], comdat, align 4, !dbg !46

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.core.String.replace(ptr noalias sret(%"char[]") align 8 %0, ptr align 8 %1, ptr align 8 %2, ptr align 8 %3, ptr align 8 %4) #0 comdat !dbg !78 {
entry:
  %reserve = alloca i64, align 8
  %state = alloca ptr, align 8
  %split = alloca %"char[][]", align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %any, align 8
  %indirectarg3 = alloca %"char[][]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %sretparam = alloca %"char[]", align 8
  %indirectarg5 = alloca %any, align 8
    #dbg_declare(ptr %1, !88, !DIExpression(), !89)
    #dbg_declare(ptr %2, !90, !DIExpression(), !89)
    #dbg_declare(ptr %3, !91, !DIExpression(), !89)
    #dbg_declare(ptr %4, !92, !DIExpression(), !89)
  store i64 0, ptr %reserve, align 8
    #dbg_declare(ptr %state, !93, !DIExpression(), !123)
  %5 = load i64, ptr %reserve, align 8, !dbg !123
  %6 = call ptr @std.core.mem.allocator.push_pool(i64 %5) #5, !dbg !123
  store ptr %6, ptr %state, align 8, !dbg !123
    #dbg_declare(ptr %split, !125, !DIExpression(), !132)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg, ptr align 8 %1, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg1, ptr align 8 %3, i32 16, i1 false)
  call void @std.core.String.tsplit(ptr sret(%"char[][]") align 8 %split, ptr align 8 %indirectarg, ptr align 8 %indirectarg1, i64 0, i8 zeroext 0), !dbg !132
  %7 = call ptr @llvm.threadlocal.address.p0(ptr @std.core.mem.allocator.current_temp), !dbg !133
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg2, ptr align 8 %7, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg3, ptr align 8 %split, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg4, ptr align 8 %4, i32 16, i1 false)
  %8 = call ptr @std.core.dstring.join(ptr align 8 %indirectarg2, ptr align 8 %indirectarg3, ptr align 8 %indirectarg4), !dbg !133
  %9 = call ptr @llvm.threadlocal.address.p0(ptr @std.core.mem.allocator.thread_allocator), !dbg !133
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg5, ptr align 8 %9, i32 16, i1 false)
  call void @std.core.dstring.DString.copy_str(ptr sret(%"char[]") align 8 %sretparam, ptr %8, ptr align 8 %indirectarg5), !dbg !133
  %10 = load %"char[]", ptr %sretparam, align 8, !dbg !133
  %11 = load ptr, ptr %state, align 8, !dbg !134
  call void @std.core.mem.allocator.pop_pool(ptr %11) #5, !dbg !134
  store %"char[]" %10, ptr %0, align 8, !dbg !134
  ret void, !dbg !134
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.core.String.treplace(ptr noalias sret(%"char[]") align 8 %0, ptr align 8 %1, ptr align 8 %2, ptr align 8 %3) #0 comdat !dbg !136 {
entry:
  %split = alloca %"char[][]", align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %any, align 8
  %indirectarg3 = alloca %"char[][]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %sretparam = alloca %"char[]", align 8
    #dbg_declare(ptr %1, !139, !DIExpression(), !140)
    #dbg_declare(ptr %2, !141, !DIExpression(), !140)
    #dbg_declare(ptr %3, !142, !DIExpression(), !140)
    #dbg_declare(ptr %split, !143, !DIExpression(), !144)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg, ptr align 8 %1, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg1, ptr align 8 %2, i32 16, i1 false)
  call void @std.core.String.tsplit(ptr sret(%"char[][]") align 8 %split, ptr align 8 %indirectarg, ptr align 8 %indirectarg1, i64 0, i8 zeroext 0), !dbg !144
  %4 = call ptr @llvm.threadlocal.address.p0(ptr @std.core.mem.allocator.current_temp), !dbg !145
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg2, ptr align 8 %4, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg3, ptr align 8 %split, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg4, ptr align 8 %3, i32 16, i1 false)
  %5 = call ptr @std.core.dstring.join(ptr align 8 %indirectarg2, ptr align 8 %indirectarg3, ptr align 8 %indirectarg4), !dbg !145
  call void @std.core.dstring.DString.str_view(ptr sret(%"char[]") align 8 %sretparam, ptr %5), !dbg !145
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %sretparam, i32 16, i1 false), !dbg !145
  ret void, !dbg !145
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.core.String.trim(ptr noalias sret(%"char[]") align 8 %0, ptr align 8 %1, ptr align 8 %2) #0 comdat !dbg !146 {
entry:
  %sretparam = alloca %"char[]", align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %sretparam2 = alloca %"char[]", align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
    #dbg_declare(ptr %1, !149, !DIExpression(), !150)
    #dbg_declare(ptr %2, !151, !DIExpression(), !150)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg, ptr align 8 %1, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg1, ptr align 8 %2, i32 16, i1 false)
  call void @std.core.String.trim_left(ptr sret(%"char[]") align 8 %sretparam, ptr align 8 %indirectarg, ptr align 8 %indirectarg1), !dbg !152
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg3, ptr align 8 %sretparam, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg4, ptr align 8 %2, i32 16, i1 false)
  call void @std.core.String.trim_right(ptr sret(%"char[]") align 8 %sretparam2, ptr align 8 %indirectarg3, ptr align 8 %indirectarg4), !dbg !152
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %sretparam2, i32 16, i1 false), !dbg !152
  ret void, !dbg !152
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.core.String.trim_left(ptr noalias sret(%"char[]") align 8 %0, ptr align 8 %1, ptr align 8 %2) #0 comdat !dbg !153 {
entry:
  %start = alloca i64, align 8
  %len = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr2 = alloca i64, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg6 = alloca %"any[]", align 8
  %c = alloca i8, align 1
  %set = alloca %"char[]", align 8
  %blockret = alloca i8, align 1
  %.anon = alloca i64, align 8
  %ch = alloca i8, align 1
  %taddr14 = alloca i64, align 8
  %taddr15 = alloca i64, align 8
  %indirectarg16 = alloca %"char[]", align 8
  %indirectarg17 = alloca %"char[]", align 8
  %indirectarg18 = alloca %"char[]", align 8
  %varargslots19 = alloca [2 x %any], align 16
  %indirectarg22 = alloca %"any[]", align 8
  %taddr30 = alloca i64, align 8
  %taddr31 = alloca i64, align 8
  %indirectarg32 = alloca %"char[]", align 8
  %indirectarg33 = alloca %"char[]", align 8
  %indirectarg34 = alloca %"char[]", align 8
  %varargslots35 = alloca [2 x %any], align 16
  %indirectarg38 = alloca %"any[]", align 8
  %taddr42 = alloca i64, align 8
  %taddr43 = alloca i64, align 8
  %indirectarg44 = alloca %"char[]", align 8
  %indirectarg45 = alloca %"char[]", align 8
  %indirectarg46 = alloca %"char[]", align 8
  %varargslots47 = alloca [2 x %any], align 16
  %indirectarg50 = alloca %"any[]", align 8
  %taddr55 = alloca i64, align 8
  %taddr56 = alloca i64, align 8
  %indirectarg57 = alloca %"char[]", align 8
  %indirectarg58 = alloca %"char[]", align 8
  %indirectarg59 = alloca %"char[]", align 8
  %varargslots60 = alloca [2 x %any], align 16
  %indirectarg63 = alloca %"any[]", align 8
    #dbg_declare(ptr %1, !154, !DIExpression(), !155)
    #dbg_declare(ptr %2, !156, !DIExpression(), !155)
    #dbg_declare(ptr %start, !157, !DIExpression(), !158)
  store i64 0, ptr %start, align 8, !dbg !158
    #dbg_declare(ptr %len, !159, !DIExpression(), !160)
  %ptradd = getelementptr inbounds i8, ptr %1, i64 8, !dbg !160
  %3 = load i64, ptr %ptradd, align 8, !dbg !160
  store i64 %3, ptr %len, align 8, !dbg !160
  br label %loop.cond, !dbg !161

loop.cond:                                        ; preds = %loop.body25, %entry
  %4 = load i64, ptr %start, align 8, !dbg !162
  %5 = load i64, ptr %len, align 8, !dbg !162
  %lt = icmp ult i64 %4, %5, !dbg !162
  br i1 %lt, label %and.rhs, label %and.phi, !dbg !162

and.rhs:                                          ; preds = %loop.cond
  %ptradd1 = getelementptr inbounds i8, ptr %1, i64 8, !dbg !162
  %6 = load i64, ptr %ptradd1, align 8, !dbg !162
  %7 = load ptr, ptr %1, align 8, !dbg !162
  %8 = load i64, ptr %start, align 8, !dbg !162
  %ge = icmp uge i64 %8, %6, !dbg !162
  %9 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !162
  br i1 %9, label %panic, label %checkok, !dbg !162

checkok:                                          ; preds = %and.rhs
  %ptradd7 = getelementptr inbounds i8, ptr %7, i64 %8, !dbg !162
  %10 = load i8, ptr %ptradd7, align 1
  store i8 %10, ptr %c, align 1
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %set, ptr align 8 %2, i32 16, i1 false)
  %ptradd8 = getelementptr inbounds i8, ptr %set, i64 8, !dbg !164
  %11 = load i64, ptr %ptradd8, align 8, !dbg !164
    #dbg_declare(ptr %.anon, !167, !DIExpression(), !164)
  store i64 0, ptr %.anon, align 8, !dbg !164
  br label %loop.cond9, !dbg !164

loop.cond9:                                       ; preds = %if.exit, %checkok
  %12 = load i64, ptr %.anon, align 8, !dbg !164
  %lt10 = icmp ult i64 %12, %11, !dbg !164
  br i1 %lt10, label %loop.body, label %loop.exit, !dbg !164

loop.body:                                        ; preds = %loop.cond9
    #dbg_declare(ptr %ch, !168, !DIExpression(), !170)
  %ptradd11 = getelementptr inbounds i8, ptr %set, i64 8, !dbg !170
  %13 = load i64, ptr %ptradd11, align 8, !dbg !170
  %14 = load ptr, ptr %set, align 8, !dbg !170
  %15 = load i64, ptr %.anon, align 8, !dbg !170
  %ge12 = icmp uge i64 %15, %13, !dbg !170
  %16 = call i1 @llvm.expect.i1(i1 %ge12, i1 false), !dbg !170
  br i1 %16, label %panic13, label %checkok23, !dbg !170

checkok23:                                        ; preds = %loop.body
  %ptradd24 = getelementptr inbounds i8, ptr %14, i64 %15, !dbg !170
  %17 = load i8, ptr %ptradd24, align 1, !dbg !170
  store i8 %17, ptr %ch, align 1, !dbg !170
  %18 = load i8, ptr %ch, align 1, !dbg !170
  %19 = load i8, ptr %c, align 1, !dbg !170
  %eq = icmp eq i8 %18, %19, !dbg !170
  br i1 %eq, label %if.then, label %if.exit, !dbg !170

if.then:                                          ; preds = %checkok23
  store i8 1, ptr %blockret, align 1, !dbg !170
  br label %expr_block.exit, !dbg !170

if.exit:                                          ; preds = %checkok23
  %20 = load i64, ptr %.anon, align 8, !dbg !164
  %addnuw = add nuw i64 %20, 1, !dbg !164
  store i64 %addnuw, ptr %.anon, align 8, !dbg !164
  br label %loop.cond9, !dbg !164

loop.exit:                                        ; preds = %loop.cond9
  store i8 0, ptr %blockret, align 1, !dbg !171
  br label %expr_block.exit, !dbg !171

expr_block.exit:                                  ; preds = %loop.exit, %if.then
  %21 = load i8, ptr %blockret, align 1, !dbg !171
  %22 = trunc i8 %21 to i1, !dbg !171
  br label %and.phi, !dbg !171

and.phi:                                          ; preds = %expr_block.exit, %loop.cond
  %val = phi i1 [ false, %loop.cond ], [ %22, %expr_block.exit ], !dbg !171
  br i1 %val, label %loop.body25, label %loop.exit26, !dbg !171

loop.body25:                                      ; preds = %and.phi
  %23 = load i64, ptr %start, align 8, !dbg !162
  %add = add i64 %23, 1, !dbg !162
  store i64 %add, ptr %start, align 8, !dbg !162
  br label %loop.cond, !dbg !162

loop.exit26:                                      ; preds = %and.phi
  %24 = load i64, ptr %start, align 8, !dbg !172
  %25 = load i64, ptr %len, align 8, !dbg !172
  %eq27 = icmp eq i64 %24, %25, !dbg !172
  br i1 %eq27, label %if.then28, label %if.exit52, !dbg !172

if.then28:                                        ; preds = %loop.exit26
  %26 = load %"char[]", ptr %1, align 8, !dbg !172
  %27 = extractvalue %"char[]" %26, 0, !dbg !172
  %28 = extractvalue %"char[]" %26, 1, !dbg !172
  %gt = icmp sgt i64 0, %28, !dbg !172
  %29 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !172
  br i1 %29, label %panic29, label %checkok39, !dbg !172

checkok39:                                        ; preds = %if.then28
  %lt40 = icmp slt i64 %28, 0, !dbg !172
  %30 = call i1 @llvm.expect.i1(i1 %lt40, i1 false), !dbg !172
  br i1 %30, label %panic41, label %checkok51, !dbg !172

checkok51:                                        ; preds = %checkok39
  %31 = insertvalue %"char[]" undef, ptr %27, 0, !dbg !172
  %32 = insertvalue %"char[]" %31, i64 0, 1, !dbg !172
  store %"char[]" %32, ptr %0, align 8, !dbg !172
  ret void, !dbg !172

if.exit52:                                        ; preds = %loop.exit26
  %33 = load %"char[]", ptr %1, align 8, !dbg !173
  %34 = extractvalue %"char[]" %33, 0, !dbg !173
  %35 = load i64, ptr %start, align 8, !dbg !173
  %36 = extractvalue %"char[]" %33, 1, !dbg !173
  %gt53 = icmp ugt i64 %35, %36, !dbg !173
  %37 = call i1 @llvm.expect.i1(i1 %gt53, i1 false), !dbg !173
  br i1 %37, label %panic54, label %checkok64, !dbg !173

checkok64:                                        ; preds = %if.exit52
  %size = sub i64 %36, %35, !dbg !173
  %ptradd65 = getelementptr inbounds i8, ptr %34, i64 %35, !dbg !173
  %38 = insertvalue %"char[]" undef, ptr %ptradd65, 0, !dbg !173
  %39 = insertvalue %"char[]" %38, i64 %size, 1, !dbg !173
  store %"char[]" %39, ptr %0, align 8, !dbg !173
  ret void, !dbg !173

panic:                                            ; preds = %and.rhs
  store i64 %6, ptr %taddr, align 8
  %40 = insertvalue %any undef, ptr %taddr, 0
  %41 = insertvalue %any %40, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %8, ptr %taddr2, align 8
  %42 = insertvalue %any undef, ptr %taddr2, 0
  %43 = insertvalue %any %42, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.func.25, i64 9 }, ptr %indirectarg4, align 8
  store %any %41, ptr %varargslots, align 16
  %ptradd5 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %43, ptr %ptradd5, align 16
  %44 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %44, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg6, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg, ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, i32 234, ptr align 8 %indirectarg6) #6, !dbg !162
  unreachable, !dbg !162

panic13:                                          ; preds = %loop.body
  store i64 %13, ptr %taddr14, align 8
  %45 = insertvalue %any undef, ptr %taddr14, 0
  %46 = insertvalue %any %45, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %15, ptr %taddr15, align 8
  %47 = insertvalue %any undef, ptr %taddr15, 0
  %48 = insertvalue %any %47, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg16, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg17, align 8
  store %"char[]" { ptr @.func.25, i64 9 }, ptr %indirectarg18, align 8
  store %any %46, ptr %varargslots19, align 16
  %ptradd20 = getelementptr inbounds i8, ptr %varargslots19, i64 16
  store %any %48, ptr %ptradd20, align 16
  %49 = insertvalue %"any[]" undef, ptr %varargslots19, 0
  %"$$temp21" = insertvalue %"any[]" %49, i64 2, 1
  store %"any[]" %"$$temp21", ptr %indirectarg22, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg16, ptr align 8 %indirectarg17, ptr align 8 %indirectarg18, i32 147, ptr align 8 %indirectarg22) #6, !dbg !170
  unreachable, !dbg !170

panic29:                                          ; preds = %if.then28
  store i64 %28, ptr %taddr30, align 8
  %50 = insertvalue %any undef, ptr %taddr30, 0
  %51 = insertvalue %any %50, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr31, align 8
  %52 = insertvalue %any undef, ptr %taddr31, 0
  %53 = insertvalue %any %52, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.12, i64 61 }, ptr %indirectarg32, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg33, align 8
  store %"char[]" { ptr @.func.25, i64 9 }, ptr %indirectarg34, align 8
  store %any %51, ptr %varargslots35, align 16
  %ptradd36 = getelementptr inbounds i8, ptr %varargslots35, i64 16
  store %any %53, ptr %ptradd36, align 16
  %54 = insertvalue %"any[]" undef, ptr %varargslots35, 0
  %"$$temp37" = insertvalue %"any[]" %54, i64 2, 1
  store %"any[]" %"$$temp37", ptr %indirectarg38, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg32, ptr align 8 %indirectarg33, ptr align 8 %indirectarg34, i32 235, ptr align 8 %indirectarg38) #6, !dbg !172
  unreachable, !dbg !172

panic41:                                          ; preds = %checkok39
  store i64 -1, ptr %taddr42, align 8
  %55 = insertvalue %any undef, ptr %taddr42, 0
  %56 = insertvalue %any %55, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %28, ptr %taddr43, align 8
  %57 = insertvalue %any undef, ptr %taddr43, 0
  %58 = insertvalue %any %57, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.14, i64 60 }, ptr %indirectarg44, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg45, align 8
  store %"char[]" { ptr @.func.25, i64 9 }, ptr %indirectarg46, align 8
  store %any %56, ptr %varargslots47, align 16
  %ptradd48 = getelementptr inbounds i8, ptr %varargslots47, i64 16
  store %any %58, ptr %ptradd48, align 16
  %59 = insertvalue %"any[]" undef, ptr %varargslots47, 0
  %"$$temp49" = insertvalue %"any[]" %59, i64 2, 1
  store %"any[]" %"$$temp49", ptr %indirectarg50, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg44, ptr align 8 %indirectarg45, ptr align 8 %indirectarg46, i32 235, ptr align 8 %indirectarg50) #6, !dbg !172
  unreachable, !dbg !172

panic54:                                          ; preds = %if.exit52
  store i64 %36, ptr %taddr55, align 8
  %60 = insertvalue %any undef, ptr %taddr55, 0
  %61 = insertvalue %any %60, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %35, ptr %taddr56, align 8
  %62 = insertvalue %any undef, ptr %taddr56, 0
  %63 = insertvalue %any %62, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.12, i64 61 }, ptr %indirectarg57, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg58, align 8
  store %"char[]" { ptr @.func.25, i64 9 }, ptr %indirectarg59, align 8
  store %any %61, ptr %varargslots60, align 16
  %ptradd61 = getelementptr inbounds i8, ptr %varargslots60, i64 16
  store %any %63, ptr %ptradd61, align 16
  %64 = insertvalue %"any[]" undef, ptr %varargslots60, 0
  %"$$temp62" = insertvalue %"any[]" %64, i64 2, 1
  store %"any[]" %"$$temp62", ptr %indirectarg63, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg57, ptr align 8 %indirectarg58, ptr align 8 %indirectarg59, i32 236, ptr align 8 %indirectarg63) #6, !dbg !173
  unreachable, !dbg !173
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.core.String.trim_right(ptr noalias sret(%"char[]") align 8 %0, ptr align 8 %1, ptr align 8 %2) #0 comdat !dbg !174 {
entry:
  %len = alloca i64, align 8
  %taddr = alloca i64, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg5 = alloca %"any[]", align 8
  %taddr7 = alloca i64, align 8
  %taddr8 = alloca i64, align 8
  %indirectarg9 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %varargslots12 = alloca [2 x %any], align 16
  %indirectarg15 = alloca %"any[]", align 8
  %c = alloca i8, align 1
  %set = alloca %"char[]", align 8
  %blockret = alloca i8, align 1
  %.anon = alloca i64, align 8
  %ch = alloca i8, align 1
  %taddr24 = alloca i64, align 8
  %taddr25 = alloca i64, align 8
  %indirectarg26 = alloca %"char[]", align 8
  %indirectarg27 = alloca %"char[]", align 8
  %indirectarg28 = alloca %"char[]", align 8
  %varargslots29 = alloca [2 x %any], align 16
  %indirectarg32 = alloca %"any[]", align 8
  %taddr39 = alloca i64, align 8
  %taddr40 = alloca i64, align 8
  %indirectarg41 = alloca %"char[]", align 8
  %indirectarg42 = alloca %"char[]", align 8
  %indirectarg43 = alloca %"char[]", align 8
  %varargslots44 = alloca [2 x %any], align 16
  %indirectarg47 = alloca %"any[]", align 8
  %taddr52 = alloca i64, align 8
  %indirectarg53 = alloca %"char[]", align 8
  %indirectarg54 = alloca %"char[]", align 8
  %indirectarg55 = alloca %"char[]", align 8
  %varargslots56 = alloca [1 x %any], align 16
  %indirectarg58 = alloca %"any[]", align 8
  %taddr63 = alloca i64, align 8
  %taddr64 = alloca i64, align 8
  %indirectarg65 = alloca %"char[]", align 8
  %indirectarg66 = alloca %"char[]", align 8
  %indirectarg67 = alloca %"char[]", align 8
  %varargslots68 = alloca [2 x %any], align 16
  %indirectarg71 = alloca %"any[]", align 8
    #dbg_declare(ptr %1, !175, !DIExpression(), !176)
    #dbg_declare(ptr %2, !177, !DIExpression(), !176)
    #dbg_declare(ptr %len, !178, !DIExpression(), !179)
  %ptradd = getelementptr inbounds i8, ptr %1, i64 8, !dbg !179
  %3 = load i64, ptr %ptradd, align 8, !dbg !179
  store i64 %3, ptr %len, align 8, !dbg !179
  br label %loop.cond, !dbg !180

loop.cond:                                        ; preds = %loop.body35, %entry
  %4 = load i64, ptr %len, align 8, !dbg !181
  %lt = icmp ult i64 0, %4, !dbg !181
  br i1 %lt, label %and.rhs, label %and.phi, !dbg !181

and.rhs:                                          ; preds = %loop.cond
  %ptradd1 = getelementptr inbounds i8, ptr %1, i64 8, !dbg !181
  %5 = load i64, ptr %ptradd1, align 8, !dbg !181
  %6 = load ptr, ptr %1, align 8, !dbg !181
  %7 = load i64, ptr %len, align 8, !dbg !181
  %sub = sub i64 %7, 1, !dbg !181
  %lt2 = icmp slt i64 %sub, 0, !dbg !181
  %8 = call i1 @llvm.expect.i1(i1 %lt2, i1 false), !dbg !181
  br i1 %8, label %panic, label %checkok, !dbg !181

checkok:                                          ; preds = %and.rhs
  %ge = icmp sge i64 %sub, %5, !dbg !181
  %9 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !181
  br i1 %9, label %panic6, label %checkok16, !dbg !181

checkok16:                                        ; preds = %checkok
  %ptradd17 = getelementptr inbounds i8, ptr %6, i64 %sub, !dbg !181
  %10 = load i8, ptr %ptradd17, align 1
  store i8 %10, ptr %c, align 1
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %set, ptr align 8 %2, i32 16, i1 false)
  %ptradd18 = getelementptr inbounds i8, ptr %set, i64 8, !dbg !183
  %11 = load i64, ptr %ptradd18, align 8, !dbg !183
    #dbg_declare(ptr %.anon, !186, !DIExpression(), !183)
  store i64 0, ptr %.anon, align 8, !dbg !183
  br label %loop.cond19, !dbg !183

loop.cond19:                                      ; preds = %if.exit, %checkok16
  %12 = load i64, ptr %.anon, align 8, !dbg !183
  %lt20 = icmp ult i64 %12, %11, !dbg !183
  br i1 %lt20, label %loop.body, label %loop.exit, !dbg !183

loop.body:                                        ; preds = %loop.cond19
    #dbg_declare(ptr %ch, !187, !DIExpression(), !189)
  %ptradd21 = getelementptr inbounds i8, ptr %set, i64 8, !dbg !189
  %13 = load i64, ptr %ptradd21, align 8, !dbg !189
  %14 = load ptr, ptr %set, align 8, !dbg !189
  %15 = load i64, ptr %.anon, align 8, !dbg !189
  %ge22 = icmp uge i64 %15, %13, !dbg !189
  %16 = call i1 @llvm.expect.i1(i1 %ge22, i1 false), !dbg !189
  br i1 %16, label %panic23, label %checkok33, !dbg !189

checkok33:                                        ; preds = %loop.body
  %ptradd34 = getelementptr inbounds i8, ptr %14, i64 %15, !dbg !189
  %17 = load i8, ptr %ptradd34, align 1, !dbg !189
  store i8 %17, ptr %ch, align 1, !dbg !189
  %18 = load i8, ptr %ch, align 1, !dbg !189
  %19 = load i8, ptr %c, align 1, !dbg !189
  %eq = icmp eq i8 %18, %19, !dbg !189
  br i1 %eq, label %if.then, label %if.exit, !dbg !189

if.then:                                          ; preds = %checkok33
  store i8 1, ptr %blockret, align 1, !dbg !189
  br label %expr_block.exit, !dbg !189

if.exit:                                          ; preds = %checkok33
  %20 = load i64, ptr %.anon, align 8, !dbg !183
  %addnuw = add nuw i64 %20, 1, !dbg !183
  store i64 %addnuw, ptr %.anon, align 8, !dbg !183
  br label %loop.cond19, !dbg !183

loop.exit:                                        ; preds = %loop.cond19
  store i8 0, ptr %blockret, align 1, !dbg !190
  br label %expr_block.exit, !dbg !190

expr_block.exit:                                  ; preds = %loop.exit, %if.then
  %21 = load i8, ptr %blockret, align 1, !dbg !190
  %22 = trunc i8 %21 to i1, !dbg !190
  br label %and.phi, !dbg !190

and.phi:                                          ; preds = %expr_block.exit, %loop.cond
  %val = phi i1 [ false, %loop.cond ], [ %22, %expr_block.exit ], !dbg !190
  br i1 %val, label %loop.body35, label %loop.exit37, !dbg !190

loop.body35:                                      ; preds = %and.phi
  %23 = load i64, ptr %len, align 8, !dbg !181
  %sub36 = sub i64 %23, 1, !dbg !181
  store i64 %sub36, ptr %len, align 8, !dbg !181
  br label %loop.cond, !dbg !181

loop.exit37:                                      ; preds = %and.phi
  %24 = load %"char[]", ptr %1, align 8, !dbg !191
  %25 = extractvalue %"char[]" %24, 0, !dbg !191
  %26 = extractvalue %"char[]" %24, 1, !dbg !191
  %gt = icmp ugt i64 0, %26, !dbg !191
  %27 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !191
  br i1 %27, label %panic38, label %checkok48, !dbg !191

checkok48:                                        ; preds = %loop.exit37
  %28 = load i64, ptr %len, align 8, !dbg !191
  %add = add i64 0, %28, !dbg !191
  %gt49 = icmp ugt i64 0, %add, !dbg !191
  %sub50 = sub i64 %add, 0, !dbg !191
  %29 = call i1 @llvm.expect.i1(i1 %gt49, i1 false), !dbg !191
  br i1 %29, label %panic51, label %checkok59, !dbg !191

checkok59:                                        ; preds = %checkok48
  %lt60 = icmp ult i64 %26, %add, !dbg !191
  %sub61 = sub i64 %add, 1, !dbg !191
  %30 = call i1 @llvm.expect.i1(i1 %lt60, i1 false), !dbg !191
  br i1 %30, label %panic62, label %checkok72, !dbg !191

checkok72:                                        ; preds = %checkok59
  %size = sub i64 %add, 0, !dbg !191
  %31 = insertvalue %"char[]" undef, ptr %25, 0, !dbg !191
  %32 = insertvalue %"char[]" %31, i64 %size, 1, !dbg !191
  store %"char[]" %32, ptr %0, align 8, !dbg !191
  ret void, !dbg !191

panic:                                            ; preds = %and.rhs
  store i64 %sub, ptr %taddr, align 8
  %33 = insertvalue %any undef, ptr %taddr, 0
  %34 = insertvalue %any %33, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.26, i64 38 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.func.27, i64 10 }, ptr %indirectarg4, align 8
  store %any %34, ptr %varargslots, align 16
  %35 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %35, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg5, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg, ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, i32 250, ptr align 8 %indirectarg5) #6, !dbg !181
  unreachable, !dbg !181

panic6:                                           ; preds = %checkok
  store i64 %5, ptr %taddr7, align 8
  %36 = insertvalue %any undef, ptr %taddr7, 0
  %37 = insertvalue %any %36, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sub, ptr %taddr8, align 8
  %38 = insertvalue %any undef, ptr %taddr8, 0
  %39 = insertvalue %any %38, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg9, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.func.27, i64 10 }, ptr %indirectarg11, align 8
  store %any %37, ptr %varargslots12, align 16
  %ptradd13 = getelementptr inbounds i8, ptr %varargslots12, i64 16
  store %any %39, ptr %ptradd13, align 16
  %40 = insertvalue %"any[]" undef, ptr %varargslots12, 0
  %"$$temp14" = insertvalue %"any[]" %40, i64 2, 1
  store %"any[]" %"$$temp14", ptr %indirectarg15, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg9, ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, i32 250, ptr align 8 %indirectarg15) #6, !dbg !181
  unreachable, !dbg !181

panic23:                                          ; preds = %loop.body
  store i64 %13, ptr %taddr24, align 8
  %41 = insertvalue %any undef, ptr %taddr24, 0
  %42 = insertvalue %any %41, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %15, ptr %taddr25, align 8
  %43 = insertvalue %any undef, ptr %taddr25, 0
  %44 = insertvalue %any %43, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg26, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg27, align 8
  store %"char[]" { ptr @.func.27, i64 10 }, ptr %indirectarg28, align 8
  store %any %42, ptr %varargslots29, align 16
  %ptradd30 = getelementptr inbounds i8, ptr %varargslots29, i64 16
  store %any %44, ptr %ptradd30, align 16
  %45 = insertvalue %"any[]" undef, ptr %varargslots29, 0
  %"$$temp31" = insertvalue %"any[]" %45, i64 2, 1
  store %"any[]" %"$$temp31", ptr %indirectarg32, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg26, ptr align 8 %indirectarg27, ptr align 8 %indirectarg28, i32 147, ptr align 8 %indirectarg32) #6, !dbg !189
  unreachable, !dbg !189

panic38:                                          ; preds = %loop.exit37
  store i64 %26, ptr %taddr39, align 8
  %46 = insertvalue %any undef, ptr %taddr39, 0
  %47 = insertvalue %any %46, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr40, align 8
  %48 = insertvalue %any undef, ptr %taddr40, 0
  %49 = insertvalue %any %48, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.12, i64 61 }, ptr %indirectarg41, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg42, align 8
  store %"char[]" { ptr @.func.27, i64 10 }, ptr %indirectarg43, align 8
  store %any %47, ptr %varargslots44, align 16
  %ptradd45 = getelementptr inbounds i8, ptr %varargslots44, i64 16
  store %any %49, ptr %ptradd45, align 16
  %50 = insertvalue %"any[]" undef, ptr %varargslots44, 0
  %"$$temp46" = insertvalue %"any[]" %50, i64 2, 1
  store %"any[]" %"$$temp46", ptr %indirectarg47, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg41, ptr align 8 %indirectarg42, ptr align 8 %indirectarg43, i32 251, ptr align 8 %indirectarg47) #6, !dbg !191
  unreachable, !dbg !191

panic51:                                          ; preds = %checkok48
  store i64 %sub50, ptr %taddr52, align 8
  %51 = insertvalue %any undef, ptr %taddr52, 0
  %52 = insertvalue %any %51, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.10, i64 43 }, ptr %indirectarg53, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg54, align 8
  store %"char[]" { ptr @.func.27, i64 10 }, ptr %indirectarg55, align 8
  store %any %52, ptr %varargslots56, align 16
  %53 = insertvalue %"any[]" undef, ptr %varargslots56, 0
  %"$$temp57" = insertvalue %"any[]" %53, i64 1, 1
  store %"any[]" %"$$temp57", ptr %indirectarg58, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg53, ptr align 8 %indirectarg54, ptr align 8 %indirectarg55, i32 251, ptr align 8 %indirectarg58) #6, !dbg !191
  unreachable, !dbg !191

panic62:                                          ; preds = %checkok59
  store i64 %sub61, ptr %taddr63, align 8
  %54 = insertvalue %any undef, ptr %taddr63, 0
  %55 = insertvalue %any %54, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %26, ptr %taddr64, align 8
  %56 = insertvalue %any undef, ptr %taddr64, 0
  %57 = insertvalue %any %56, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.14, i64 60 }, ptr %indirectarg65, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg66, align 8
  store %"char[]" { ptr @.func.27, i64 10 }, ptr %indirectarg67, align 8
  store %any %55, ptr %varargslots68, align 16
  %ptradd69 = getelementptr inbounds i8, ptr %varargslots68, i64 16
  store %any %57, ptr %ptradd69, align 16
  %58 = insertvalue %"any[]" undef, ptr %varargslots68, 0
  %"$$temp70" = insertvalue %"any[]" %58, i64 2, 1
  store %"any[]" %"$$temp70", ptr %indirectarg71, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg65, ptr align 8 %indirectarg66, ptr align 8 %indirectarg67, i32 251, ptr align 8 %indirectarg71) #6, !dbg !191
  unreachable, !dbg !191
}

; Function Attrs: nounwind ssp uwtable
define weak_odr zeroext i8 @std.core.String.starts_with(ptr align 8 %0, ptr align 8 %1) #0 comdat !dbg !192 {
entry:
  %taddr = alloca i64, align 8
  %taddr6 = alloca i64, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg7 = alloca %"char[]", align 8
  %indirectarg8 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg10 = alloca %"any[]", align 8
  %taddr14 = alloca i64, align 8
  %indirectarg15 = alloca %"char[]", align 8
  %indirectarg16 = alloca %"char[]", align 8
  %indirectarg17 = alloca %"char[]", align 8
  %varargslots18 = alloca [1 x %any], align 16
  %indirectarg20 = alloca %"any[]", align 8
  %taddr24 = alloca i64, align 8
  %taddr25 = alloca i64, align 8
  %indirectarg26 = alloca %"char[]", align 8
  %indirectarg27 = alloca %"char[]", align 8
  %indirectarg28 = alloca %"char[]", align 8
  %varargslots29 = alloca [2 x %any], align 16
  %indirectarg32 = alloca %"any[]", align 8
  %cmp.idx = alloca i64, align 8
    #dbg_declare(ptr %0, !195, !DIExpression(), !196)
    #dbg_declare(ptr %1, !197, !DIExpression(), !196)
  %ptradd = getelementptr inbounds i8, ptr %1, i64 8, !dbg !198
  %2 = load i64, ptr %ptradd, align 8, !dbg !198
  %ptradd1 = getelementptr inbounds i8, ptr %0, i64 8, !dbg !198
  %3 = load i64, ptr %ptradd1, align 8, !dbg !198
  %gt = icmp ugt i64 %2, %3, !dbg !198
  br i1 %gt, label %if.then, label %if.exit, !dbg !198

if.then:                                          ; preds = %entry
  ret i8 0, !dbg !198

if.exit:                                          ; preds = %entry
  %ptradd2 = getelementptr inbounds i8, ptr %1, i64 8, !dbg !199
  %4 = load i64, ptr %ptradd2, align 8, !dbg !199
  %i2nb = icmp eq i64 %4, 0, !dbg !199
  br i1 %i2nb, label %if.then3, label %if.exit4, !dbg !199

if.then3:                                         ; preds = %if.exit
  ret i8 1, !dbg !199

if.exit4:                                         ; preds = %if.exit
  %5 = load %"char[]", ptr %0, align 8, !dbg !200
  %6 = extractvalue %"char[]" %5, 0, !dbg !200
  %7 = extractvalue %"char[]" %5, 1, !dbg !200
  %gt5 = icmp ugt i64 0, %7, !dbg !200
  %8 = call i1 @llvm.expect.i1(i1 %gt5, i1 false), !dbg !200
  br i1 %8, label %panic, label %checkok, !dbg !200

checkok:                                          ; preds = %if.exit4
  %ptradd11 = getelementptr inbounds i8, ptr %1, i64 8, !dbg !200
  %9 = load i64, ptr %ptradd11, align 8, !dbg !200
  %add = add i64 0, %9, !dbg !200
  %gt12 = icmp ugt i64 0, %add, !dbg !200
  %sub = sub i64 %add, 0, !dbg !200
  %10 = call i1 @llvm.expect.i1(i1 %gt12, i1 false), !dbg !200
  br i1 %10, label %panic13, label %checkok21, !dbg !200

checkok21:                                        ; preds = %checkok
  %lt = icmp ult i64 %7, %add, !dbg !200
  %sub22 = sub i64 %add, 1, !dbg !200
  %11 = call i1 @llvm.expect.i1(i1 %lt, i1 false), !dbg !200
  br i1 %11, label %panic23, label %checkok33, !dbg !200

checkok33:                                        ; preds = %checkok21
  %size = sub i64 %add, 0, !dbg !200
  %12 = insertvalue %"char[]" undef, ptr %6, 0, !dbg !200
  %13 = insertvalue %"char[]" %12, i64 %size, 1, !dbg !200
  %14 = load %"char[]", ptr %1, align 8, !dbg !200
  %15 = extractvalue %"char[]" %13, 1, !dbg !200
  %16 = extractvalue %"char[]" %14, 1, !dbg !200
  %17 = extractvalue %"char[]" %13, 0, !dbg !200
  %18 = extractvalue %"char[]" %14, 0, !dbg !200
  %eq = icmp eq i64 %15, %16, !dbg !200
  br i1 %eq, label %slice_cmp_values, label %slice_cmp_exit, !dbg !200

slice_cmp_values:                                 ; preds = %checkok33
  store i64 0, ptr %cmp.idx, align 8
  br label %slice_loop_start

slice_loop_start:                                 ; preds = %slice_loop_comparison, %slice_cmp_values
  %19 = load i64, ptr %cmp.idx, align 8
  %lt34 = icmp slt i64 %19, %15
  br i1 %lt34, label %slice_loop_comparison, label %slice_cmp_exit

slice_loop_comparison:                            ; preds = %slice_loop_start
  %ptradd35 = getelementptr inbounds i8, ptr %17, i64 %19
  %ptradd36 = getelementptr inbounds i8, ptr %18, i64 %19
  %20 = load i8, ptr %ptradd35, align 1
  %21 = load i8, ptr %ptradd36, align 1
  %eq37 = icmp eq i8 %20, %21
  %22 = add i64 %19, 1
  store i64 %22, ptr %cmp.idx, align 8
  br i1 %eq37, label %slice_loop_start, label %slice_cmp_exit

slice_cmp_exit:                                   ; preds = %slice_loop_comparison, %slice_loop_start, %checkok33
  %slice_cmp_phi = phi i1 [ true, %slice_loop_start ], [ false, %checkok33 ], [ false, %slice_loop_comparison ]
  %23 = zext i1 %slice_cmp_phi to i8
  ret i8 %23

panic:                                            ; preds = %if.exit4
  store i64 %7, ptr %taddr, align 8
  %24 = insertvalue %any undef, ptr %taddr, 0
  %25 = insertvalue %any %24, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr6, align 8
  %26 = insertvalue %any undef, ptr %taddr6, 0
  %27 = insertvalue %any %26, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.12, i64 61 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg7, align 8
  store %"char[]" { ptr @.func.28, i64 11 }, ptr %indirectarg8, align 8
  store %any %25, ptr %varargslots, align 16
  %ptradd9 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %27, ptr %ptradd9, align 16
  %28 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %28, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg10, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg, ptr align 8 %indirectarg7, ptr align 8 %indirectarg8, i32 266, ptr align 8 %indirectarg10) #6, !dbg !200
  unreachable, !dbg !200

panic13:                                          ; preds = %checkok
  store i64 %sub, ptr %taddr14, align 8
  %29 = insertvalue %any undef, ptr %taddr14, 0
  %30 = insertvalue %any %29, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.10, i64 43 }, ptr %indirectarg15, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg16, align 8
  store %"char[]" { ptr @.func.28, i64 11 }, ptr %indirectarg17, align 8
  store %any %30, ptr %varargslots18, align 16
  %31 = insertvalue %"any[]" undef, ptr %varargslots18, 0
  %"$$temp19" = insertvalue %"any[]" %31, i64 1, 1
  store %"any[]" %"$$temp19", ptr %indirectarg20, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg15, ptr align 8 %indirectarg16, ptr align 8 %indirectarg17, i32 266, ptr align 8 %indirectarg20) #6, !dbg !200
  unreachable, !dbg !200

panic23:                                          ; preds = %checkok21
  store i64 %sub22, ptr %taddr24, align 8
  %32 = insertvalue %any undef, ptr %taddr24, 0
  %33 = insertvalue %any %32, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %7, ptr %taddr25, align 8
  %34 = insertvalue %any undef, ptr %taddr25, 0
  %35 = insertvalue %any %34, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.14, i64 60 }, ptr %indirectarg26, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg27, align 8
  store %"char[]" { ptr @.func.28, i64 11 }, ptr %indirectarg28, align 8
  store %any %33, ptr %varargslots29, align 16
  %ptradd30 = getelementptr inbounds i8, ptr %varargslots29, i64 16
  store %any %35, ptr %ptradd30, align 16
  %36 = insertvalue %"any[]" undef, ptr %varargslots29, 0
  %"$$temp31" = insertvalue %"any[]" %36, i64 2, 1
  store %"any[]" %"$$temp31", ptr %indirectarg32, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg26, ptr align 8 %indirectarg27, ptr align 8 %indirectarg28, i32 266, ptr align 8 %indirectarg32) #6, !dbg !200
  unreachable, !dbg !200
}

; Function Attrs: nounwind ssp uwtable
define weak_odr zeroext i8 @std.core.String.ends_with(ptr align 8 %0, ptr align 8 %1) #0 comdat !dbg !201 {
entry:
  %taddr = alloca i64, align 8
  %taddr7 = alloca i64, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg11 = alloca %"any[]", align 8
  %cmp.idx = alloca i64, align 8
    #dbg_declare(ptr %0, !202, !DIExpression(), !203)
    #dbg_declare(ptr %1, !204, !DIExpression(), !203)
  %ptradd = getelementptr inbounds i8, ptr %1, i64 8, !dbg !205
  %2 = load i64, ptr %ptradd, align 8, !dbg !205
  %ptradd1 = getelementptr inbounds i8, ptr %0, i64 8, !dbg !205
  %3 = load i64, ptr %ptradd1, align 8, !dbg !205
  %gt = icmp ugt i64 %2, %3, !dbg !205
  br i1 %gt, label %if.then, label %if.exit, !dbg !205

if.then:                                          ; preds = %entry
  ret i8 0, !dbg !205

if.exit:                                          ; preds = %entry
  %ptradd2 = getelementptr inbounds i8, ptr %1, i64 8, !dbg !206
  %4 = load i64, ptr %ptradd2, align 8, !dbg !206
  %i2nb = icmp eq i64 %4, 0, !dbg !206
  br i1 %i2nb, label %if.then3, label %if.exit4, !dbg !206

if.then3:                                         ; preds = %if.exit
  ret i8 1, !dbg !206

if.exit4:                                         ; preds = %if.exit
  %5 = load %"char[]", ptr %0, align 8, !dbg !207
  %6 = extractvalue %"char[]" %5, 0, !dbg !207
  %ptradd5 = getelementptr inbounds i8, ptr %1, i64 8, !dbg !207
  %7 = load i64, ptr %ptradd5, align 8, !dbg !207
  %8 = extractvalue %"char[]" %5, 1, !dbg !207
  %sub = sub i64 %8, %7, !dbg !207
  %gt6 = icmp ugt i64 %sub, %8, !dbg !207
  %9 = call i1 @llvm.expect.i1(i1 %gt6, i1 false), !dbg !207
  br i1 %9, label %panic, label %checkok, !dbg !207

checkok:                                          ; preds = %if.exit4
  %size = sub i64 %8, %sub, !dbg !207
  %ptradd12 = getelementptr inbounds i8, ptr %6, i64 %sub, !dbg !207
  %10 = insertvalue %"char[]" undef, ptr %ptradd12, 0, !dbg !207
  %11 = insertvalue %"char[]" %10, i64 %size, 1, !dbg !207
  %12 = load %"char[]", ptr %1, align 8, !dbg !207
  %13 = extractvalue %"char[]" %11, 1, !dbg !207
  %14 = extractvalue %"char[]" %12, 1, !dbg !207
  %15 = extractvalue %"char[]" %11, 0, !dbg !207
  %16 = extractvalue %"char[]" %12, 0, !dbg !207
  %eq = icmp eq i64 %13, %14, !dbg !207
  br i1 %eq, label %slice_cmp_values, label %slice_cmp_exit, !dbg !207

slice_cmp_values:                                 ; preds = %checkok
  store i64 0, ptr %cmp.idx, align 8
  br label %slice_loop_start

slice_loop_start:                                 ; preds = %slice_loop_comparison, %slice_cmp_values
  %17 = load i64, ptr %cmp.idx, align 8
  %lt = icmp slt i64 %17, %13
  br i1 %lt, label %slice_loop_comparison, label %slice_cmp_exit

slice_loop_comparison:                            ; preds = %slice_loop_start
  %ptradd13 = getelementptr inbounds i8, ptr %15, i64 %17
  %ptradd14 = getelementptr inbounds i8, ptr %16, i64 %17
  %18 = load i8, ptr %ptradd13, align 1
  %19 = load i8, ptr %ptradd14, align 1
  %eq15 = icmp eq i8 %18, %19
  %20 = add i64 %17, 1
  store i64 %20, ptr %cmp.idx, align 8
  br i1 %eq15, label %slice_loop_start, label %slice_cmp_exit

slice_cmp_exit:                                   ; preds = %slice_loop_comparison, %slice_loop_start, %checkok
  %slice_cmp_phi = phi i1 [ true, %slice_loop_start ], [ false, %checkok ], [ false, %slice_loop_comparison ]
  %21 = zext i1 %slice_cmp_phi to i8
  ret i8 %21

panic:                                            ; preds = %if.exit4
  store i64 %8, ptr %taddr, align 8
  %22 = insertvalue %any undef, ptr %taddr, 0
  %23 = insertvalue %any %22, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %sub, ptr %taddr7, align 8
  %24 = insertvalue %any undef, ptr %taddr7, 0
  %25 = insertvalue %any %24, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.12, i64 61 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg8, align 8
  store %"char[]" { ptr @.func.29, i64 9 }, ptr %indirectarg9, align 8
  store %any %23, ptr %varargslots, align 16
  %ptradd10 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %25, ptr %ptradd10, align 16
  %26 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %26, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg11, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg, ptr align 8 %indirectarg8, ptr align 8 %indirectarg9, i32 281, ptr align 8 %indirectarg11) #6, !dbg !207
  unreachable, !dbg !207
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.core.String.strip(ptr noalias sret(%"char[]") align 8 %0, ptr align 8 %1, ptr align 8 %2) #0 comdat !dbg !208 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr3 = alloca i64, align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg8 = alloca %"any[]", align 8
    #dbg_declare(ptr %1, !209, !DIExpression(), !210)
    #dbg_declare(ptr %2, !211, !DIExpression(), !210)
  %ptradd = getelementptr inbounds i8, ptr %2, i64 8, !dbg !212
  %3 = load i64, ptr %ptradd, align 8, !dbg !212
  %i2nb = icmp eq i64 %3, 0, !dbg !212
  br i1 %i2nb, label %or.phi, label %or.rhs, !dbg !212

or.rhs:                                           ; preds = %entry
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg, ptr align 8 %1, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg1, ptr align 8 %2, i32 16, i1 false)
  %4 = call i8 @std.core.String.starts_with(ptr align 8 %indirectarg, ptr align 8 %indirectarg1), !dbg !212
  %5 = trunc i8 %4 to i1, !dbg !212
  %not = xor i1 %5, true, !dbg !212
  br label %or.phi, !dbg !212

or.phi:                                           ; preds = %or.rhs, %entry
  %val = phi i1 [ true, %entry ], [ %not, %or.rhs ], !dbg !212
  br i1 %val, label %if.then, label %if.exit, !dbg !212

if.then:                                          ; preds = %or.phi
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %1, i32 16, i1 false), !dbg !212
  ret void, !dbg !212

if.exit:                                          ; preds = %or.phi
  %6 = load %"char[]", ptr %1, align 8, !dbg !213
  %7 = extractvalue %"char[]" %6, 0, !dbg !213
  %ptradd2 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !213
  %8 = load i64, ptr %ptradd2, align 8, !dbg !213
  %9 = extractvalue %"char[]" %6, 1, !dbg !213
  %gt = icmp ugt i64 %8, %9, !dbg !213
  %10 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !213
  br i1 %10, label %panic, label %checkok, !dbg !213

checkok:                                          ; preds = %if.exit
  %size = sub i64 %9, %8, !dbg !213
  %ptradd9 = getelementptr inbounds i8, ptr %7, i64 %8, !dbg !213
  %11 = insertvalue %"char[]" undef, ptr %ptradd9, 0, !dbg !213
  %12 = insertvalue %"char[]" %11, i64 %size, 1, !dbg !213
  store %"char[]" %12, ptr %0, align 8, !dbg !213
  ret void, !dbg !213

panic:                                            ; preds = %if.exit
  store i64 %9, ptr %taddr, align 8
  %13 = insertvalue %any undef, ptr %taddr, 0
  %14 = insertvalue %any %13, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %8, ptr %taddr3, align 8
  %15 = insertvalue %any undef, ptr %taddr3, 0
  %16 = insertvalue %any %15, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.12, i64 61 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.30, i64 5 }, ptr %indirectarg6, align 8
  store %any %14, ptr %varargslots, align 16
  %ptradd7 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %16, ptr %ptradd7, align 16
  %17 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %17, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg8, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 295, ptr align 8 %indirectarg8) #6, !dbg !213
  unreachable, !dbg !213
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.core.String.strip_end(ptr noalias sret(%"char[]") align 8 %0, ptr align 8 %1, ptr align 8 %2) #0 comdat !dbg !214 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr2 = alloca i64, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg7 = alloca %"any[]", align 8
  %taddr13 = alloca i64, align 8
  %indirectarg14 = alloca %"char[]", align 8
  %indirectarg15 = alloca %"char[]", align 8
  %indirectarg16 = alloca %"char[]", align 8
  %varargslots17 = alloca [1 x %any], align 16
  %indirectarg19 = alloca %"any[]", align 8
  %taddr23 = alloca i64, align 8
  %taddr24 = alloca i64, align 8
  %indirectarg25 = alloca %"char[]", align 8
  %indirectarg26 = alloca %"char[]", align 8
  %indirectarg27 = alloca %"char[]", align 8
  %varargslots28 = alloca [2 x %any], align 16
  %indirectarg31 = alloca %"any[]", align 8
    #dbg_declare(ptr %1, !215, !DIExpression(), !216)
    #dbg_declare(ptr %2, !217, !DIExpression(), !216)
  %ptradd = getelementptr inbounds i8, ptr %2, i64 8, !dbg !218
  %3 = load i64, ptr %ptradd, align 8, !dbg !218
  %i2nb = icmp eq i64 %3, 0, !dbg !218
  br i1 %i2nb, label %or.phi, label %or.rhs, !dbg !218

or.rhs:                                           ; preds = %entry
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg, ptr align 8 %1, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg1, ptr align 8 %2, i32 16, i1 false)
  %4 = call i8 @std.core.String.ends_with(ptr align 8 %indirectarg, ptr align 8 %indirectarg1), !dbg !218
  %5 = trunc i8 %4 to i1, !dbg !218
  %not = xor i1 %5, true, !dbg !218
  br label %or.phi, !dbg !218

or.phi:                                           ; preds = %or.rhs, %entry
  %val = phi i1 [ true, %entry ], [ %not, %or.rhs ], !dbg !218
  br i1 %val, label %if.then, label %if.exit, !dbg !218

if.then:                                          ; preds = %or.phi
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %1, i32 16, i1 false), !dbg !218
  ret void, !dbg !218

if.exit:                                          ; preds = %or.phi
  %6 = load %"char[]", ptr %1, align 8, !dbg !219
  %7 = extractvalue %"char[]" %6, 0, !dbg !219
  %8 = extractvalue %"char[]" %6, 1, !dbg !219
  %gt = icmp ugt i64 0, %8, !dbg !219
  %9 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !219
  br i1 %9, label %panic, label %checkok, !dbg !219

checkok:                                          ; preds = %if.exit
  %ptradd8 = getelementptr inbounds i8, ptr %1, i64 8, !dbg !219
  %10 = load i64, ptr %ptradd8, align 8, !dbg !219
  %ptradd9 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !219
  %11 = load i64, ptr %ptradd9, align 8, !dbg !219
  %sub = sub i64 %10, %11, !dbg !219
  %add = add i64 0, %sub, !dbg !219
  %gt10 = icmp ugt i64 0, %add, !dbg !219
  %sub11 = sub i64 %add, 0, !dbg !219
  %12 = call i1 @llvm.expect.i1(i1 %gt10, i1 false), !dbg !219
  br i1 %12, label %panic12, label %checkok20, !dbg !219

checkok20:                                        ; preds = %checkok
  %lt = icmp ult i64 %8, %add, !dbg !219
  %sub21 = sub i64 %add, 1, !dbg !219
  %13 = call i1 @llvm.expect.i1(i1 %lt, i1 false), !dbg !219
  br i1 %13, label %panic22, label %checkok32, !dbg !219

checkok32:                                        ; preds = %checkok20
  %size = sub i64 %add, 0, !dbg !219
  %14 = insertvalue %"char[]" undef, ptr %7, 0, !dbg !219
  %15 = insertvalue %"char[]" %14, i64 %size, 1, !dbg !219
  store %"char[]" %15, ptr %0, align 8, !dbg !219
  ret void, !dbg !219

panic:                                            ; preds = %if.exit
  store i64 %8, ptr %taddr, align 8
  %16 = insertvalue %any undef, ptr %taddr, 0
  %17 = insertvalue %any %16, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr2, align 8
  %18 = insertvalue %any undef, ptr %taddr2, 0
  %19 = insertvalue %any %18, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.12, i64 61 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.func.31, i64 9 }, ptr %indirectarg5, align 8
  store %any %17, ptr %varargslots, align 16
  %ptradd6 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %19, ptr %ptradd6, align 16
  %20 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %20, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg7, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, i32 310, ptr align 8 %indirectarg7) #6, !dbg !219
  unreachable, !dbg !219

panic12:                                          ; preds = %checkok
  store i64 %sub11, ptr %taddr13, align 8
  %21 = insertvalue %any undef, ptr %taddr13, 0
  %22 = insertvalue %any %21, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.10, i64 43 }, ptr %indirectarg14, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg15, align 8
  store %"char[]" { ptr @.func.31, i64 9 }, ptr %indirectarg16, align 8
  store %any %22, ptr %varargslots17, align 16
  %23 = insertvalue %"any[]" undef, ptr %varargslots17, 0
  %"$$temp18" = insertvalue %"any[]" %23, i64 1, 1
  store %"any[]" %"$$temp18", ptr %indirectarg19, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg14, ptr align 8 %indirectarg15, ptr align 8 %indirectarg16, i32 310, ptr align 8 %indirectarg19) #6, !dbg !219
  unreachable, !dbg !219

panic22:                                          ; preds = %checkok20
  store i64 %sub21, ptr %taddr23, align 8
  %24 = insertvalue %any undef, ptr %taddr23, 0
  %25 = insertvalue %any %24, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %8, ptr %taddr24, align 8
  %26 = insertvalue %any undef, ptr %taddr24, 0
  %27 = insertvalue %any %26, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.14, i64 60 }, ptr %indirectarg25, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg26, align 8
  store %"char[]" { ptr @.func.31, i64 9 }, ptr %indirectarg27, align 8
  store %any %25, ptr %varargslots28, align 16
  %ptradd29 = getelementptr inbounds i8, ptr %varargslots28, i64 16
  store %any %27, ptr %ptradd29, align 16
  %28 = insertvalue %"any[]" undef, ptr %varargslots28, 0
  %"$$temp30" = insertvalue %"any[]" %28, i64 2, 1
  store %"any[]" %"$$temp30", ptr %indirectarg31, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg25, ptr align 8 %indirectarg26, ptr align 8 %indirectarg27, i32 310, ptr align 8 %indirectarg31) #6, !dbg !219
  unreachable, !dbg !219
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.core.String.split(ptr noalias sret(%"char[][]") align 8 %0, ptr align 8 %1, ptr align 8 %2, ptr align 8 %3, i64 %4, i8 zeroext %5) #0 comdat !dbg !220 {
entry:
  %max = alloca i64, align 8
  %skip_empty = alloca i8, align 1
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %capacity = alloca i64, align 8
  %i = alloca i64, align 8
  %holder = alloca ptr, align 8
  %allocator = alloca %any, align 8
  %elements = alloca i64, align 8
  %error_var = alloca i64, align 8
  %allocator3 = alloca %any, align 8
  %elements4 = alloca i64, align 8
  %allocator5 = alloca %any, align 8
  %size = alloca i64, align 8
  %blockret = alloca ptr, align 8
  %x = alloca i64, align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg13 = alloca %"char[]", align 8
  %indirectarg14 = alloca %"char[]", align 8
  %indirectarg15 = alloca %"char[]", align 8
  %indirectarg19 = alloca %"char[]", align 8
  %indirectarg20 = alloca %"char[]", align 8
  %indirectarg21 = alloca %"char[]", align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %indirectarg25 = alloca %"char[]", align 8
  %indirectarg26 = alloca %"char[]", align 8
  %indirectarg27 = alloca %"char[]", align 8
  %retparam = alloca ptr, align 8
  %taddr = alloca ptr, align 8
  %taddr29 = alloca i64, align 8
  %indirectarg30 = alloca %"char[]", align 8
  %indirectarg31 = alloca %"char[]", align 8
  %indirectarg32 = alloca %"char[]", align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg33 = alloca %"any[]", align 8
  %indirectarg35 = alloca %"char[]", align 8
  %indirectarg36 = alloca %"char[]", align 8
  %indirectarg37 = alloca %"char[]", align 8
  %varargslots38 = alloca [1 x %any], align 16
  %indirectarg40 = alloca %"any[]", align 8
  %no_more = alloca i8, align 1
  %index = alloca i64, align 8
  %index.f = alloca i64, align 8
  %indirectarg45 = alloca %"char[]", align 8
  %indirectarg46 = alloca %"char[]", align 8
  %indirectarg47 = alloca %"char[]", align 8
  %retparam49 = alloca i64, align 8
  %indirectarg50 = alloca %"char[]", align 8
  %indirectarg51 = alloca %"char[]", align 8
  %res = alloca %"char[]", align 8
  %taddr58 = alloca i64, align 8
  %taddr59 = alloca i64, align 8
  %indirectarg60 = alloca %"char[]", align 8
  %indirectarg61 = alloca %"char[]", align 8
  %indirectarg62 = alloca %"char[]", align 8
  %varargslots63 = alloca [2 x %any], align 16
  %indirectarg66 = alloca %"any[]", align 8
  %taddr72 = alloca i64, align 8
  %indirectarg73 = alloca %"char[]", align 8
  %indirectarg74 = alloca %"char[]", align 8
  %indirectarg75 = alloca %"char[]", align 8
  %varargslots76 = alloca [1 x %any], align 16
  %indirectarg78 = alloca %"any[]", align 8
  %taddr83 = alloca i64, align 8
  %taddr84 = alloca i64, align 8
  %indirectarg85 = alloca %"char[]", align 8
  %indirectarg86 = alloca %"char[]", align 8
  %indirectarg87 = alloca %"char[]", align 8
  %varargslots88 = alloca [2 x %any], align 16
  %indirectarg91 = alloca %"any[]", align 8
  %taddr98 = alloca i64, align 8
  %taddr99 = alloca i64, align 8
  %indirectarg100 = alloca %"char[]", align 8
  %indirectarg101 = alloca %"char[]", align 8
  %indirectarg102 = alloca %"char[]", align 8
  %varargslots103 = alloca [2 x %any], align 16
  %indirectarg106 = alloca %"any[]", align 8
  %allocator121 = alloca %any, align 8
  %ptr = alloca ptr, align 8
  %new_size = alloca i64, align 8
  %error_var123 = alloca i64, align 8
  %allocator124 = alloca %any, align 8
  %ptr125 = alloca ptr, align 8
  %new_size126 = alloca i64, align 8
  %blockret127 = alloca ptr, align 8
  %allocator130 = alloca %any, align 8
  %ptr131 = alloca ptr, align 8
  %indirectarg137 = alloca %"char[]", align 8
  %indirectarg138 = alloca %"char[]", align 8
  %indirectarg139 = alloca %"char[]", align 8
  %.inlinecache142 = alloca ptr, align 8
  %.cachedtype143 = alloca ptr, align 8
  %indirectarg151 = alloca %"char[]", align 8
  %indirectarg152 = alloca %"char[]", align 8
  %indirectarg153 = alloca %"char[]", align 8
  %x160 = alloca i64, align 8
  %indirectarg171 = alloca %"char[]", align 8
  %indirectarg172 = alloca %"char[]", align 8
  %indirectarg173 = alloca %"char[]", align 8
  %indirectarg176 = alloca %"char[]", align 8
  %indirectarg177 = alloca %"char[]", align 8
  %indirectarg178 = alloca %"char[]", align 8
  %indirectarg182 = alloca %"char[]", align 8
  %indirectarg183 = alloca %"char[]", align 8
  %indirectarg184 = alloca %"char[]", align 8
  %.inlinecache187 = alloca ptr, align 8
  %.cachedtype188 = alloca ptr, align 8
  %indirectarg196 = alloca %"char[]", align 8
  %indirectarg197 = alloca %"char[]", align 8
  %indirectarg198 = alloca %"char[]", align 8
  %retparam200 = alloca ptr, align 8
  %x206 = alloca i64, align 8
  %indirectarg217 = alloca %"char[]", align 8
  %indirectarg218 = alloca %"char[]", align 8
  %indirectarg219 = alloca %"char[]", align 8
  %indirectarg222 = alloca %"char[]", align 8
  %indirectarg223 = alloca %"char[]", align 8
  %indirectarg224 = alloca %"char[]", align 8
  %indirectarg228 = alloca %"char[]", align 8
  %indirectarg229 = alloca %"char[]", align 8
  %indirectarg230 = alloca %"char[]", align 8
  %indirectarg234 = alloca %"char[]", align 8
  %indirectarg235 = alloca %"char[]", align 8
  %indirectarg236 = alloca %"char[]", align 8
  %.inlinecache239 = alloca ptr, align 8
  %.cachedtype240 = alloca ptr, align 8
  %indirectarg248 = alloca %"char[]", align 8
  %indirectarg249 = alloca %"char[]", align 8
  %indirectarg250 = alloca %"char[]", align 8
  %retparam252 = alloca ptr, align 8
  %indirectarg258 = alloca %"char[]", align 8
  %indirectarg259 = alloca %"char[]", align 8
  %indirectarg260 = alloca %"char[]", align 8
  %varargslots261 = alloca [1 x %any], align 16
  %indirectarg263 = alloca %"any[]", align 8
  %taddr268 = alloca i64, align 8
  %taddr269 = alloca i64, align 8
  %indirectarg270 = alloca %"char[]", align 8
  %indirectarg271 = alloca %"char[]", align 8
  %indirectarg272 = alloca %"char[]", align 8
  %varargslots273 = alloca [2 x %any], align 16
  %indirectarg276 = alloca %"any[]", align 8
  %taddr282 = alloca i64, align 8
  %indirectarg283 = alloca %"char[]", align 8
  %indirectarg284 = alloca %"char[]", align 8
  %indirectarg285 = alloca %"char[]", align 8
  %varargslots286 = alloca [1 x %any], align 16
  %indirectarg288 = alloca %"any[]", align 8
  %indirectarg296 = alloca %"char[]", align 8
  %indirectarg297 = alloca %"char[]", align 8
  %indirectarg298 = alloca %"char[]", align 8
    #dbg_declare(ptr %1, !223, !DIExpression(), !224)
    #dbg_declare(ptr %2, !225, !DIExpression(), !224)
    #dbg_declare(ptr %3, !226, !DIExpression(), !224)
  store ptr null, ptr %.cachedtype240, align 8
  store ptr null, ptr %.cachedtype188, align 8
  store ptr null, ptr %.cachedtype143, align 8
  store ptr null, ptr %.cachedtype, align 8
  store i64 %4, ptr %max, align 8
    #dbg_declare(ptr %max, !227, !DIExpression(), !224)
  store i8 %5, ptr %skip_empty, align 1
    #dbg_declare(ptr %skip_empty, !228, !DIExpression(), !224)
  %ptradd = getelementptr inbounds i8, ptr %3, i64 8, !dbg !229
  %6 = load i64, ptr %ptradd, align 8, !dbg !229
  %lt = icmp ult i64 0, %6, !dbg !229
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !229

assert_fail:                                      ; preds = %entry
  store %"char[]" { ptr @.panic_msg.32, i64 89 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.33, i64 5 }, ptr %indirectarg2, align 8
  %7 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %7(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 322) #6, !dbg !229
  unreachable, !dbg !229

assert_ok:                                        ; preds = %entry
    #dbg_declare(ptr %capacity, !231, !DIExpression(), !232)
  store i64 16, ptr %capacity, align 8, !dbg !232
    #dbg_declare(ptr %i, !233, !DIExpression(), !234)
  store i64 0, ptr %i, align 8, !dbg !234
    #dbg_declare(ptr %holder, !235, !DIExpression(), !236)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator, ptr align 8 %2, i32 16, i1 false)
  %8 = load i64, ptr %capacity, align 8
  store i64 %8, ptr %elements, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator3, ptr align 8 %allocator, i32 16, i1 false)
  %9 = load i64, ptr %elements, align 8
  store i64 %9, ptr %elements4, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator5, ptr align 8 %allocator3, i32 16, i1 false)
  %10 = load i64, ptr %elements4, align 8, !dbg !237
  %mul = mul i64 16, %10, !dbg !237
  store i64 %mul, ptr %size, align 8
  %11 = load i64, ptr %size, align 8, !dbg !242
  %i2nb = icmp eq i64 %11, 0, !dbg !242
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !242

if.then:                                          ; preds = %assert_ok
  store ptr null, ptr %blockret, align 8, !dbg !242
  br label %expr_block.exit, !dbg !242

if.exit:                                          ; preds = %assert_ok
  %12 = load i64, ptr %size, align 8, !dbg !244
  br i1 true, label %or.phi, label %or.rhs, !dbg !245

or.rhs:                                           ; preds = %if.exit
  store i64 0, ptr %x, align 8
  %13 = load i64, ptr %x, align 8, !dbg !246
  %neq = icmp ne i64 0, %13, !dbg !246
  br i1 %neq, label %and.rhs, label %and.phi, !dbg !246

and.rhs:                                          ; preds = %or.rhs
  %14 = load i64, ptr %x, align 8, !dbg !246
  %15 = load i64, ptr %x, align 8, !dbg !246
  %sub = sub i64 %15, 1, !dbg !246
  %and = and i64 %14, %sub, !dbg !246
  %eq = icmp eq i64 %and, 0, !dbg !246
  br label %and.phi, !dbg !246

and.phi:                                          ; preds = %and.rhs, %or.rhs
  %val = phi i1 [ false, %or.rhs ], [ %eq, %and.rhs ], !dbg !246
  br label %or.phi, !dbg !246

or.phi:                                           ; preds = %and.phi, %if.exit
  %val6 = phi i1 [ true, %if.exit ], [ %val, %and.phi ], !dbg !246
  br i1 %val6, label %assert_ok11, label %assert_fail7, !dbg !246

assert_fail7:                                     ; preds = %or.phi
  store %"char[]" { ptr @.panic_msg, i64 65 }, ptr %indirectarg8, align 8
  store %"char[]" { ptr @.file, i64 16 }, ptr %indirectarg9, align 8
  store %"char[]" { ptr @.func.33, i64 5 }, ptr %indirectarg10, align 8
  %16 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %16(ptr align 8 %indirectarg8, ptr align 8 %indirectarg9, ptr align 8 %indirectarg10, i32 86) #6, !dbg !244
  unreachable, !dbg !244

assert_ok11:                                      ; preds = %or.phi
  br i1 true, label %assert_ok16, label %assert_fail12, !dbg !244

assert_fail12:                                    ; preds = %assert_ok11
  store %"char[]" { ptr @.panic_msg.7, i64 80 }, ptr %indirectarg13, align 8
  store %"char[]" { ptr @.file, i64 16 }, ptr %indirectarg14, align 8
  store %"char[]" { ptr @.func.33, i64 5 }, ptr %indirectarg15, align 8
  %17 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %17(ptr align 8 %indirectarg13, ptr align 8 %indirectarg14, ptr align 8 %indirectarg15, i32 86) #6, !dbg !244
  unreachable, !dbg !244

assert_ok16:                                      ; preds = %assert_ok11
  %lt17 = icmp ult i64 0, %12, !dbg !244
  br i1 %lt17, label %assert_ok22, label %assert_fail18, !dbg !244

assert_fail18:                                    ; preds = %assert_ok16
  store %"char[]" { ptr @.panic_msg.8, i64 59 }, ptr %indirectarg19, align 8
  store %"char[]" { ptr @.file, i64 16 }, ptr %indirectarg20, align 8
  store %"char[]" { ptr @.func.33, i64 5 }, ptr %indirectarg21, align 8
  %18 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %18(ptr align 8 %indirectarg19, ptr align 8 %indirectarg20, ptr align 8 %indirectarg21, i32 86) #6, !dbg !244
  unreachable, !dbg !244

assert_ok22:                                      ; preds = %assert_ok16
  %ptradd23 = getelementptr inbounds i8, ptr %allocator5, i64 8, !dbg !244
  %19 = load i64, ptr %ptradd23, align 8, !dbg !244
  %20 = inttoptr i64 %19 to ptr, !dbg !244
  %type = load ptr, ptr %.cachedtype, align 8
  %21 = icmp eq ptr %20, %type
  br i1 %21, label %cache_hit, label %cache_miss

cache_miss:                                       ; preds = %assert_ok22
  %ptradd24 = getelementptr inbounds i8, ptr %20, i64 16
  %22 = load ptr, ptr %ptradd24, align 8
  %23 = call ptr @.dyn_search(ptr %22, ptr @"$sel.acquire")
  store ptr %23, ptr %.inlinecache, align 8
  store ptr %20, ptr %.cachedtype, align 8
  br label %24

cache_hit:                                        ; preds = %assert_ok22
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8
  br label %24

24:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %23, %cache_miss ]
  %25 = icmp eq ptr %fn_phi, null
  br i1 %25, label %missing_function, label %match

missing_function:                                 ; preds = %24
  store %"char[]" { ptr @.panic_msg.9, i64 44 }, ptr %indirectarg25, align 8
  store %"char[]" { ptr @.file, i64 16 }, ptr %indirectarg26, align 8
  store %"char[]" { ptr @.func.33, i64 5 }, ptr %indirectarg27, align 8
  %26 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %26(ptr align 8 %indirectarg25, ptr align 8 %indirectarg26, ptr align 8 %indirectarg27, i32 86) #6, !dbg !244
  unreachable, !dbg !244

match:                                            ; preds = %24
  %27 = load ptr, ptr %allocator5, align 8
  %28 = call i64 %fn_phi(ptr %retparam, ptr %27, i64 %12, i32 0, i64 0), !dbg !244
  %not_err = icmp eq i64 %28, 0, !dbg !244
  %29 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !244
  br i1 %29, label %after_check, label %assign_optional, !dbg !244

assign_optional:                                  ; preds = %match
  store i64 %28, ptr %error_var, align 8, !dbg !244
  br label %panic_block, !dbg !244

after_check:                                      ; preds = %match
  %30 = load ptr, ptr %retparam, align 8, !dbg !244
  store ptr %30, ptr %blockret, align 8, !dbg !244
  br label %expr_block.exit, !dbg !244

expr_block.exit:                                  ; preds = %after_check, %if.then
  %31 = load ptr, ptr %blockret, align 8, !dbg !244
  store ptr %31, ptr %taddr, align 8
  %32 = load ptr, ptr %taddr, align 8
  %33 = load i64, ptr %elements4, align 8, !dbg !237
  %add = add i64 0, %33, !dbg !237
  %gt = icmp ugt i64 0, %add, !dbg !237
  %sub28 = sub i64 %add, 0, !dbg !237
  %34 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !237
  br i1 %34, label %panic, label %checkok, !dbg !237

checkok:                                          ; preds = %expr_block.exit
  %size34 = sub i64 %add, 0, !dbg !237
  %35 = insertvalue %"char[][]" undef, ptr %32, 0, !dbg !237
  %36 = insertvalue %"char[][]" %35, i64 %size34, 1, !dbg !237
  br label %noerr_block, !dbg !237

panic_block:                                      ; preds = %assign_optional
  %37 = insertvalue %any undef, ptr %error_var, 0, !dbg !237
  %38 = insertvalue %any %37, i64 ptrtoint (ptr @"$ct.fault" to i64), 1, !dbg !237
  store %"char[]" { ptr @.panic_msg.11, i64 36 }, ptr %indirectarg35, align 8
  store %"char[]" { ptr @.file, i64 16 }, ptr %indirectarg36, align 8
  store %"char[]" { ptr @.func.33, i64 5 }, ptr %indirectarg37, align 8
  store %any %38, ptr %varargslots38, align 16
  %39 = insertvalue %"any[]" undef, ptr %varargslots38, 0
  %"$$temp39" = insertvalue %"any[]" %39, i64 1, 1
  store %"any[]" %"$$temp39", ptr %indirectarg40, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg35, ptr align 8 %indirectarg36, ptr align 8 %indirectarg37, i32 287, ptr align 8 %indirectarg40) #6, !dbg !240
  unreachable, !dbg !240

noerr_block:                                      ; preds = %checkok
  %40 = extractvalue %"char[][]" %36, 0, !dbg !240
  store ptr %40, ptr %holder, align 8, !dbg !240
    #dbg_declare(ptr %no_more, !249, !DIExpression(), !250)
  store i8 0, ptr %no_more, align 1, !dbg !250
  br label %loop.cond, !dbg !251

loop.cond:                                        ; preds = %checkok277, %if.then116, %noerr_block
  %41 = load i8, ptr %no_more, align 1, !dbg !252
  %42 = trunc i8 %41 to i1, !dbg !252
  %not = xor i1 %42, true, !dbg !252
  br i1 %not, label %loop.body, label %loop.exit, !dbg !252

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %index, !254, !DIExpression(), !256)
  %43 = load i64, ptr %i, align 8, !dbg !256
  %44 = load i64, ptr %max, align 8, !dbg !256
  %sub41 = sub i64 %44, 1, !dbg !256
  %eq42 = icmp eq i64 %sub41, %43, !dbg !256
  %check = icmp sge i64 %sub41, 0, !dbg !256
  %siui-eq = and i1 %check, %eq42, !dbg !256
  br i1 %siui-eq, label %cond.lhs, label %cond.rhs, !dbg !256

cond.lhs:                                         ; preds = %loop.body
  store i64 ptrtoint (ptr @std.core.builtin.NOT_FOUND to i64), ptr %index.f, align 8, !dbg !256
  br label %after_assign, !dbg !256

cond.rhs:                                         ; preds = %loop.body
  %45 = load %"char[]", ptr %1, align 8, !dbg !256
  %46 = load %"char[]", ptr %3, align 8, !dbg !256
  %47 = extractvalue %"char[]" %46, 1, !dbg !257
  %lt43 = icmp ult i64 0, %47, !dbg !256
  br i1 %lt43, label %assert_ok48, label %assert_fail44, !dbg !256

assert_fail44:                                    ; preds = %cond.rhs
  store %"char[]" { ptr @.panic_msg.34, i64 71 }, ptr %indirectarg45, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg46, align 8
  store %"char[]" { ptr @.func.33, i64 5 }, ptr %indirectarg47, align 8
  %48 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %48(ptr align 8 %indirectarg45, ptr align 8 %indirectarg46, ptr align 8 %indirectarg47, i32 333) #6, !dbg !256
  unreachable, !dbg !256

assert_ok48:                                      ; preds = %cond.rhs
  store %"char[]" %45, ptr %indirectarg50, align 8
  store %"char[]" %46, ptr %indirectarg51, align 8
  %49 = call i64 @std.core.String.index_of(ptr %retparam49, ptr align 8 %indirectarg50, ptr align 8 %indirectarg51), !dbg !256
  %not_err52 = icmp eq i64 %49, 0, !dbg !256
  %50 = call i1 @llvm.expect.i1(i1 %not_err52, i1 true), !dbg !256
  br i1 %50, label %after_check54, label %assign_optional53, !dbg !256

assign_optional53:                                ; preds = %assert_ok48
  store i64 %49, ptr %index.f, align 8, !dbg !256
  br label %after_assign, !dbg !256

after_check54:                                    ; preds = %assert_ok48
  %51 = load i64, ptr %retparam49, align 8, !dbg !256
  br label %cond.phi, !dbg !256

cond.phi:                                         ; preds = %after_check54
  store i64 %51, ptr %index, align 8, !dbg !256
  store i64 0, ptr %index.f, align 8, !dbg !256
  br label %after_assign, !dbg !256

after_assign:                                     ; preds = %cond.phi, %assign_optional53, %cond.lhs
    #dbg_declare(ptr %res, !258, !DIExpression(), !259)
  %load.err = load i64, ptr %index.f, align 8, !dbg !260
  %result = icmp eq i64 %load.err, 0, !dbg !260
  br i1 %result, label %if.then55, label %if.else, !dbg !260

if.then55:                                        ; preds = %after_assign
  %52 = load %"char[]", ptr %1, align 8, !dbg !261
  %53 = extractvalue %"char[]" %52, 0, !dbg !261
  %54 = extractvalue %"char[]" %52, 1, !dbg !261
  %gt56 = icmp ugt i64 0, %54, !dbg !261
  %55 = call i1 @llvm.expect.i1(i1 %gt56, i1 false), !dbg !261
  br i1 %55, label %panic57, label %checkok67, !dbg !261

checkok67:                                        ; preds = %if.then55
  %56 = load i64, ptr %index, align 8, !dbg !261
  %add68 = add i64 0, %56, !dbg !261
  %gt69 = icmp ugt i64 0, %add68, !dbg !261
  %sub70 = sub i64 %add68, 0, !dbg !261
  %57 = call i1 @llvm.expect.i1(i1 %gt69, i1 false), !dbg !261
  br i1 %57, label %panic71, label %checkok79, !dbg !261

checkok79:                                        ; preds = %checkok67
  %lt80 = icmp ult i64 %54, %add68, !dbg !261
  %sub81 = sub i64 %add68, 1, !dbg !261
  %58 = call i1 @llvm.expect.i1(i1 %lt80, i1 false), !dbg !261
  br i1 %58, label %panic82, label %checkok92, !dbg !261

checkok92:                                        ; preds = %checkok79
  %size93 = sub i64 %add68, 0, !dbg !261
  %59 = insertvalue %"char[]" undef, ptr %53, 0, !dbg !261
  %60 = insertvalue %"char[]" %59, i64 %size93, 1, !dbg !261
  store %"char[]" %60, ptr %res, align 8, !dbg !261
  %61 = load %"char[]", ptr %1, align 8, !dbg !263
  %62 = extractvalue %"char[]" %61, 0, !dbg !263
  %63 = load i64, ptr %index, align 8, !dbg !263
  %ptradd94 = getelementptr inbounds i8, ptr %3, i64 8, !dbg !263
  %64 = load i64, ptr %ptradd94, align 8, !dbg !263
  %add95 = add i64 %63, %64, !dbg !263
  %65 = extractvalue %"char[]" %61, 1, !dbg !263
  %gt96 = icmp ugt i64 %add95, %65, !dbg !263
  %66 = call i1 @llvm.expect.i1(i1 %gt96, i1 false), !dbg !263
  br i1 %66, label %panic97, label %checkok107, !dbg !263

checkok107:                                       ; preds = %checkok92
  %size108 = sub i64 %65, %add95, !dbg !263
  %ptradd109 = getelementptr inbounds i8, ptr %62, i64 %add95, !dbg !263
  %67 = insertvalue %"char[]" undef, ptr %ptradd109, 0, !dbg !263
  %68 = insertvalue %"char[]" %67, i64 %size108, 1, !dbg !263
  store %"char[]" %68, ptr %1, align 8, !dbg !263
  br label %if.exit110, !dbg !263

if.else:                                          ; preds = %after_assign
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %res, ptr align 8 %1, i32 16, i1 false), !dbg !264
  store i8 1, ptr %no_more, align 1, !dbg !266
  br label %if.exit110, !dbg !266

if.exit110:                                       ; preds = %if.else, %checkok107
  %ptradd111 = getelementptr inbounds i8, ptr %res, i64 8, !dbg !267
  %69 = load i64, ptr %ptradd111, align 8, !dbg !267
  %i2nb112 = icmp eq i64 %69, 0, !dbg !267
  br i1 %i2nb112, label %and.rhs113, label %and.phi114, !dbg !267

and.rhs113:                                       ; preds = %if.exit110
  %70 = load i8, ptr %skip_empty, align 1, !dbg !267
  %71 = trunc i8 %70 to i1, !dbg !267
  br label %and.phi114, !dbg !267

and.phi114:                                       ; preds = %and.rhs113, %if.exit110
  %val115 = phi i1 [ false, %if.exit110 ], [ %71, %and.rhs113 ], !dbg !267
  br i1 %val115, label %if.then116, label %if.exit117, !dbg !267

if.then116:                                       ; preds = %and.phi114
  br label %loop.cond, !dbg !268

if.exit117:                                       ; preds = %and.phi114
  %72 = load i64, ptr %i, align 8, !dbg !270
  %73 = load i64, ptr %capacity, align 8, !dbg !270
  %eq118 = icmp eq i64 %72, %73, !dbg !270
  br i1 %eq118, label %if.then119, label %if.exit265, !dbg !270

if.then119:                                       ; preds = %if.exit117
  %74 = load i64, ptr %capacity, align 8, !dbg !271
  %mul120 = mul i64 %74, 2, !dbg !271
  store i64 %mul120, ptr %capacity, align 8, !dbg !271
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator121, ptr align 8 %2, i32 16, i1 false)
  %75 = load ptr, ptr %holder, align 8, !dbg !273
  store ptr %75, ptr %ptr, align 8
  %76 = load i64, ptr %capacity, align 8, !dbg !273
  %mul122 = mul i64 16, %76, !dbg !273
  store i64 %mul122, ptr %new_size, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator124, ptr align 8 %allocator121, i32 16, i1 false)
  %77 = load ptr, ptr %ptr, align 8
  store ptr %77, ptr %ptr125, align 8
  %78 = load i64, ptr %new_size, align 8
  store i64 %78, ptr %new_size126, align 8
  %79 = load i64, ptr %new_size126, align 8, !dbg !274
  %i2nb128 = icmp eq i64 %79, 0, !dbg !274
  br i1 %i2nb128, label %if.then129, label %if.exit156, !dbg !274

if.then129:                                       ; preds = %if.then119
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator130, ptr align 8 %allocator124, i32 16, i1 false)
  %80 = load ptr, ptr %ptr125, align 8
  store ptr %80, ptr %ptr131, align 8
  %81 = load ptr, ptr %ptr131, align 8, !dbg !278
  %i2nb132 = icmp eq ptr %81, null, !dbg !278
  br i1 %i2nb132, label %if.then133, label %if.exit134, !dbg !278

if.then133:                                       ; preds = %if.then129
  br label %expr_block.exit155, !dbg !278

if.exit134:                                       ; preds = %if.then129
  %82 = load ptr, ptr %ptr131, align 8, !dbg !282
  %neq135 = icmp ne ptr %82, null, !dbg !282
  br i1 %neq135, label %assert_ok140, label %assert_fail136, !dbg !282

assert_fail136:                                   ; preds = %if.exit134
  store %"char[]" { ptr @.panic_msg.22, i64 75 }, ptr %indirectarg137, align 8
  store %"char[]" { ptr @.file, i64 16 }, ptr %indirectarg138, align 8
  store %"char[]" { ptr @.func.33, i64 5 }, ptr %indirectarg139, align 8
  %83 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %83(ptr align 8 %indirectarg137, ptr align 8 %indirectarg138, ptr align 8 %indirectarg139, i32 123) #6, !dbg !282
  unreachable, !dbg !282

assert_ok140:                                     ; preds = %if.exit134
  %ptradd141 = getelementptr inbounds i8, ptr %allocator130, i64 8, !dbg !282
  %84 = load i64, ptr %ptradd141, align 8, !dbg !282
  %85 = inttoptr i64 %84 to ptr, !dbg !282
  %type144 = load ptr, ptr %.cachedtype143, align 8
  %86 = icmp eq ptr %85, %type144
  br i1 %86, label %cache_hit147, label %cache_miss145

cache_miss145:                                    ; preds = %assert_ok140
  %ptradd146 = getelementptr inbounds i8, ptr %85, i64 16
  %87 = load ptr, ptr %ptradd146, align 8
  %88 = call ptr @.dyn_search(ptr %87, ptr @"$sel.release")
  store ptr %88, ptr %.inlinecache142, align 8
  store ptr %85, ptr %.cachedtype143, align 8
  br label %89

cache_hit147:                                     ; preds = %assert_ok140
  %cache_hit_fn148 = load ptr, ptr %.inlinecache142, align 8
  br label %89

89:                                               ; preds = %cache_hit147, %cache_miss145
  %fn_phi149 = phi ptr [ %cache_hit_fn148, %cache_hit147 ], [ %88, %cache_miss145 ]
  %90 = icmp eq ptr %fn_phi149, null
  br i1 %90, label %missing_function150, label %match154

missing_function150:                              ; preds = %89
  store %"char[]" { ptr @.panic_msg.23, i64 44 }, ptr %indirectarg151, align 8
  store %"char[]" { ptr @.file, i64 16 }, ptr %indirectarg152, align 8
  store %"char[]" { ptr @.func.33, i64 5 }, ptr %indirectarg153, align 8
  %91 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %91(ptr align 8 %indirectarg151, ptr align 8 %indirectarg152, ptr align 8 %indirectarg153, i32 123) #6, !dbg !282
  unreachable, !dbg !282

match154:                                         ; preds = %89
  %92 = load ptr, ptr %allocator130, align 8, !dbg !282
  call void %fn_phi149(ptr %92, ptr %82, i8 zeroext 0), !dbg !282
  br label %expr_block.exit155, !dbg !282

expr_block.exit155:                               ; preds = %match154, %if.then133
  store ptr null, ptr %blockret127, align 8, !dbg !283
  br label %expr_block.exit256, !dbg !283

if.exit156:                                       ; preds = %if.then119
  %93 = load ptr, ptr %ptr125, align 8, !dbg !284
  %i2nb157 = icmp eq ptr %93, null, !dbg !284
  br i1 %i2nb157, label %if.then158, label %if.exit204, !dbg !284

if.then158:                                       ; preds = %if.exit156
  %94 = load i64, ptr %new_size126, align 8, !dbg !284
  br i1 true, label %or.phi168, label %or.rhs159, !dbg !285

or.rhs159:                                        ; preds = %if.then158
  store i64 0, ptr %x160, align 8
  %95 = load i64, ptr %x160, align 8, !dbg !286
  %neq161 = icmp ne i64 0, %95, !dbg !286
  br i1 %neq161, label %and.rhs162, label %and.phi166, !dbg !286

and.rhs162:                                       ; preds = %or.rhs159
  %96 = load i64, ptr %x160, align 8, !dbg !286
  %97 = load i64, ptr %x160, align 8, !dbg !286
  %sub163 = sub i64 %97, 1, !dbg !286
  %and164 = and i64 %96, %sub163, !dbg !286
  %eq165 = icmp eq i64 %and164, 0, !dbg !286
  br label %and.phi166, !dbg !286

and.phi166:                                       ; preds = %and.rhs162, %or.rhs159
  %val167 = phi i1 [ false, %or.rhs159 ], [ %eq165, %and.rhs162 ], !dbg !286
  br label %or.phi168, !dbg !286

or.phi168:                                        ; preds = %and.phi166, %if.then158
  %val169 = phi i1 [ true, %if.then158 ], [ %val167, %and.phi166 ], !dbg !286
  br i1 %val169, label %assert_ok174, label %assert_fail170, !dbg !286

assert_fail170:                                   ; preds = %or.phi168
  store %"char[]" { ptr @.panic_msg, i64 65 }, ptr %indirectarg171, align 8
  store %"char[]" { ptr @.file, i64 16 }, ptr %indirectarg172, align 8
  store %"char[]" { ptr @.func.33, i64 5 }, ptr %indirectarg173, align 8
  %98 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %98(ptr align 8 %indirectarg171, ptr align 8 %indirectarg172, ptr align 8 %indirectarg173, i32 113) #6, !dbg !284
  unreachable, !dbg !284

assert_ok174:                                     ; preds = %or.phi168
  br i1 true, label %assert_ok179, label %assert_fail175, !dbg !284

assert_fail175:                                   ; preds = %assert_ok174
  store %"char[]" { ptr @.panic_msg.7, i64 80 }, ptr %indirectarg176, align 8
  store %"char[]" { ptr @.file, i64 16 }, ptr %indirectarg177, align 8
  store %"char[]" { ptr @.func.33, i64 5 }, ptr %indirectarg178, align 8
  %99 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %99(ptr align 8 %indirectarg176, ptr align 8 %indirectarg177, ptr align 8 %indirectarg178, i32 113) #6, !dbg !284
  unreachable, !dbg !284

assert_ok179:                                     ; preds = %assert_ok174
  %lt180 = icmp ult i64 0, %94, !dbg !284
  br i1 %lt180, label %assert_ok185, label %assert_fail181, !dbg !284

assert_fail181:                                   ; preds = %assert_ok179
  store %"char[]" { ptr @.panic_msg.8, i64 59 }, ptr %indirectarg182, align 8
  store %"char[]" { ptr @.file, i64 16 }, ptr %indirectarg183, align 8
  store %"char[]" { ptr @.func.33, i64 5 }, ptr %indirectarg184, align 8
  %100 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %100(ptr align 8 %indirectarg182, ptr align 8 %indirectarg183, ptr align 8 %indirectarg184, i32 113) #6, !dbg !284
  unreachable, !dbg !284

assert_ok185:                                     ; preds = %assert_ok179
  %ptradd186 = getelementptr inbounds i8, ptr %allocator124, i64 8, !dbg !284
  %101 = load i64, ptr %ptradd186, align 8, !dbg !284
  %102 = inttoptr i64 %101 to ptr, !dbg !284
  %type189 = load ptr, ptr %.cachedtype188, align 8
  %103 = icmp eq ptr %102, %type189
  br i1 %103, label %cache_hit192, label %cache_miss190

cache_miss190:                                    ; preds = %assert_ok185
  %ptradd191 = getelementptr inbounds i8, ptr %102, i64 16
  %104 = load ptr, ptr %ptradd191, align 8
  %105 = call ptr @.dyn_search(ptr %104, ptr @"$sel.acquire")
  store ptr %105, ptr %.inlinecache187, align 8
  store ptr %102, ptr %.cachedtype188, align 8
  br label %106

cache_hit192:                                     ; preds = %assert_ok185
  %cache_hit_fn193 = load ptr, ptr %.inlinecache187, align 8
  br label %106

106:                                              ; preds = %cache_hit192, %cache_miss190
  %fn_phi194 = phi ptr [ %cache_hit_fn193, %cache_hit192 ], [ %105, %cache_miss190 ]
  %107 = icmp eq ptr %fn_phi194, null
  br i1 %107, label %missing_function195, label %match199

missing_function195:                              ; preds = %106
  store %"char[]" { ptr @.panic_msg.9, i64 44 }, ptr %indirectarg196, align 8
  store %"char[]" { ptr @.file, i64 16 }, ptr %indirectarg197, align 8
  store %"char[]" { ptr @.func.33, i64 5 }, ptr %indirectarg198, align 8
  %108 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %108(ptr align 8 %indirectarg196, ptr align 8 %indirectarg197, ptr align 8 %indirectarg198, i32 113) #6, !dbg !284
  unreachable, !dbg !284

match199:                                         ; preds = %106
  %109 = load ptr, ptr %allocator124, align 8
  %110 = call i64 %fn_phi194(ptr %retparam200, ptr %109, i64 %94, i32 0, i64 0), !dbg !284
  %not_err201 = icmp eq i64 %110, 0, !dbg !284
  %111 = call i1 @llvm.expect.i1(i1 %not_err201, i1 true), !dbg !284
  br i1 %111, label %after_check203, label %assign_optional202, !dbg !284

assign_optional202:                               ; preds = %match199
  store i64 %110, ptr %error_var123, align 8, !dbg !284
  br label %panic_block257, !dbg !284

after_check203:                                   ; preds = %match199
  %112 = load ptr, ptr %retparam200, align 8, !dbg !284
  store ptr %112, ptr %blockret127, align 8, !dbg !284
  br label %expr_block.exit256, !dbg !284

if.exit204:                                       ; preds = %if.exit156
  %113 = load ptr, ptr %ptr125, align 8, !dbg !288
  %114 = load i64, ptr %new_size126, align 8, !dbg !288
  br i1 true, label %or.phi214, label %or.rhs205, !dbg !289

or.rhs205:                                        ; preds = %if.exit204
  store i64 0, ptr %x206, align 8
  %115 = load i64, ptr %x206, align 8, !dbg !290
  %neq207 = icmp ne i64 0, %115, !dbg !290
  br i1 %neq207, label %and.rhs208, label %and.phi212, !dbg !290

and.rhs208:                                       ; preds = %or.rhs205
  %116 = load i64, ptr %x206, align 8, !dbg !290
  %117 = load i64, ptr %x206, align 8, !dbg !290
  %sub209 = sub i64 %117, 1, !dbg !290
  %and210 = and i64 %116, %sub209, !dbg !290
  %eq211 = icmp eq i64 %and210, 0, !dbg !290
  br label %and.phi212, !dbg !290

and.phi212:                                       ; preds = %and.rhs208, %or.rhs205
  %val213 = phi i1 [ false, %or.rhs205 ], [ %eq211, %and.rhs208 ], !dbg !290
  br label %or.phi214, !dbg !290

or.phi214:                                        ; preds = %and.phi212, %if.exit204
  %val215 = phi i1 [ true, %if.exit204 ], [ %val213, %and.phi212 ], !dbg !290
  br i1 %val215, label %assert_ok220, label %assert_fail216, !dbg !290

assert_fail216:                                   ; preds = %or.phi214
  store %"char[]" { ptr @.panic_msg, i64 65 }, ptr %indirectarg217, align 8
  store %"char[]" { ptr @.file, i64 16 }, ptr %indirectarg218, align 8
  store %"char[]" { ptr @.func.33, i64 5 }, ptr %indirectarg219, align 8
  %118 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %118(ptr align 8 %indirectarg217, ptr align 8 %indirectarg218, ptr align 8 %indirectarg219, i32 114) #6, !dbg !288
  unreachable, !dbg !288

assert_ok220:                                     ; preds = %or.phi214
  br i1 true, label %assert_ok225, label %assert_fail221, !dbg !288

assert_fail221:                                   ; preds = %assert_ok220
  store %"char[]" { ptr @.panic_msg.7, i64 80 }, ptr %indirectarg222, align 8
  store %"char[]" { ptr @.file, i64 16 }, ptr %indirectarg223, align 8
  store %"char[]" { ptr @.func.33, i64 5 }, ptr %indirectarg224, align 8
  %119 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %119(ptr align 8 %indirectarg222, ptr align 8 %indirectarg223, ptr align 8 %indirectarg224, i32 114) #6, !dbg !288
  unreachable, !dbg !288

assert_ok225:                                     ; preds = %assert_ok220
  %neq226 = icmp ne ptr %113, null, !dbg !288
  br i1 %neq226, label %assert_ok231, label %assert_fail227, !dbg !288

assert_fail227:                                   ; preds = %assert_ok225
  store %"char[]" { ptr @.panic_msg.35, i64 32 }, ptr %indirectarg228, align 8
  store %"char[]" { ptr @.file, i64 16 }, ptr %indirectarg229, align 8
  store %"char[]" { ptr @.func.33, i64 5 }, ptr %indirectarg230, align 8
  %120 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %120(ptr align 8 %indirectarg228, ptr align 8 %indirectarg229, ptr align 8 %indirectarg230, i32 114) #6, !dbg !288
  unreachable, !dbg !288

assert_ok231:                                     ; preds = %assert_ok225
  %lt232 = icmp ult i64 0, %114, !dbg !288
  br i1 %lt232, label %assert_ok237, label %assert_fail233, !dbg !288

assert_fail233:                                   ; preds = %assert_ok231
  store %"char[]" { ptr @.panic_msg.36, i64 33 }, ptr %indirectarg234, align 8
  store %"char[]" { ptr @.file, i64 16 }, ptr %indirectarg235, align 8
  store %"char[]" { ptr @.func.33, i64 5 }, ptr %indirectarg236, align 8
  %121 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %121(ptr align 8 %indirectarg234, ptr align 8 %indirectarg235, ptr align 8 %indirectarg236, i32 114) #6, !dbg !288
  unreachable, !dbg !288

assert_ok237:                                     ; preds = %assert_ok231
  %ptradd238 = getelementptr inbounds i8, ptr %allocator124, i64 8, !dbg !288
  %122 = load i64, ptr %ptradd238, align 8, !dbg !288
  %123 = inttoptr i64 %122 to ptr, !dbg !288
  %type241 = load ptr, ptr %.cachedtype240, align 8
  %124 = icmp eq ptr %123, %type241
  br i1 %124, label %cache_hit244, label %cache_miss242

cache_miss242:                                    ; preds = %assert_ok237
  %ptradd243 = getelementptr inbounds i8, ptr %123, i64 16
  %125 = load ptr, ptr %ptradd243, align 8
  %126 = call ptr @.dyn_search(ptr %125, ptr @"$sel.resize")
  store ptr %126, ptr %.inlinecache239, align 8
  store ptr %123, ptr %.cachedtype240, align 8
  br label %127

cache_hit244:                                     ; preds = %assert_ok237
  %cache_hit_fn245 = load ptr, ptr %.inlinecache239, align 8
  br label %127

127:                                              ; preds = %cache_hit244, %cache_miss242
  %fn_phi246 = phi ptr [ %cache_hit_fn245, %cache_hit244 ], [ %126, %cache_miss242 ]
  %128 = icmp eq ptr %fn_phi246, null
  br i1 %128, label %missing_function247, label %match251

missing_function247:                              ; preds = %127
  store %"char[]" { ptr @.panic_msg.37, i64 43 }, ptr %indirectarg248, align 8
  store %"char[]" { ptr @.file, i64 16 }, ptr %indirectarg249, align 8
  store %"char[]" { ptr @.func.33, i64 5 }, ptr %indirectarg250, align 8
  %129 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %129(ptr align 8 %indirectarg248, ptr align 8 %indirectarg249, ptr align 8 %indirectarg250, i32 114) #6, !dbg !288
  unreachable, !dbg !288

match251:                                         ; preds = %127
  %130 = load ptr, ptr %allocator124, align 8
  %131 = call i64 %fn_phi246(ptr %retparam252, ptr %130, ptr %113, i64 %114, i64 0), !dbg !288
  %not_err253 = icmp eq i64 %131, 0, !dbg !288
  %132 = call i1 @llvm.expect.i1(i1 %not_err253, i1 true), !dbg !288
  br i1 %132, label %after_check255, label %assign_optional254, !dbg !288

assign_optional254:                               ; preds = %match251
  store i64 %131, ptr %error_var123, align 8, !dbg !288
  br label %panic_block257, !dbg !288

after_check255:                                   ; preds = %match251
  %133 = load ptr, ptr %retparam252, align 8, !dbg !288
  store ptr %133, ptr %blockret127, align 8, !dbg !288
  br label %expr_block.exit256, !dbg !288

expr_block.exit256:                               ; preds = %after_check255, %after_check203, %expr_block.exit155
  br label %noerr_block264, !dbg !288

panic_block257:                                   ; preds = %assign_optional254, %assign_optional202
  %134 = insertvalue %any undef, ptr %error_var123, 0, !dbg !288
  %135 = insertvalue %any %134, i64 ptrtoint (ptr @"$ct.fault" to i64), 1, !dbg !288
  store %"char[]" { ptr @.panic_msg.11, i64 36 }, ptr %indirectarg258, align 8
  store %"char[]" { ptr @.file, i64 16 }, ptr %indirectarg259, align 8
  store %"char[]" { ptr @.func.33, i64 5 }, ptr %indirectarg260, align 8
  store %any %135, ptr %varargslots261, align 16
  %136 = insertvalue %"any[]" undef, ptr %varargslots261, 0
  %"$$temp262" = insertvalue %"any[]" %136, i64 1, 1
  store %"any[]" %"$$temp262", ptr %indirectarg263, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg258, ptr align 8 %indirectarg259, ptr align 8 %indirectarg260, i32 103, ptr align 8 %indirectarg263) #6, !dbg !276
  unreachable, !dbg !276

noerr_block264:                                   ; preds = %expr_block.exit256
  %137 = load ptr, ptr %blockret127, align 8, !dbg !276
  store ptr %137, ptr %holder, align 8, !dbg !276
  br label %if.exit265, !dbg !276

if.exit265:                                       ; preds = %noerr_block264, %if.exit117
  %138 = load ptr, ptr %holder, align 8, !dbg !292
  %139 = load i64, ptr %i, align 8, !dbg !292
  %add266 = add i64 %139, 1, !dbg !292
  store i64 %add266, ptr %i, align 8, !dbg !292
  %ptroffset = getelementptr inbounds [16 x i8], ptr %138, i64 %139, !dbg !292
  %140 = ptrtoint ptr %ptroffset to i64, !dbg !292
  %141 = urem i64 %140, 8, !dbg !292
  %142 = icmp ne i64 %141, 0, !dbg !292
  %143 = call i1 @llvm.expect.i1(i1 %142, i1 false), !dbg !292
  br i1 %143, label %panic267, label %checkok277, !dbg !292

checkok277:                                       ; preds = %if.exit265
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %ptroffset, ptr align 8 %res, i32 16, i1 false), !dbg !292
  br label %loop.cond, !dbg !292

loop.exit:                                        ; preds = %loop.cond
  %144 = load ptr, ptr %holder, align 8, !dbg !293
  %145 = load i64, ptr %i, align 8, !dbg !293
  %add278 = add i64 0, %145, !dbg !293
  %gt279 = icmp ugt i64 0, %add278, !dbg !293
  %sub280 = sub i64 %add278, 0, !dbg !293
  %146 = call i1 @llvm.expect.i1(i1 %gt279, i1 false), !dbg !293
  br i1 %146, label %panic281, label %checkok289, !dbg !293

checkok289:                                       ; preds = %loop.exit
  %size290 = sub i64 %add278, 0, !dbg !293
  %147 = insertvalue %"char[][]" undef, ptr %144, 0, !dbg !293
  %148 = insertvalue %"char[][]" %147, i64 %size290, 1, !dbg !293
  %149 = extractvalue %"char[][]" %148, 1, !dbg !294
  %lt291 = icmp ult i64 0, %149, !dbg !294
  br i1 %lt291, label %or.phi293, label %or.rhs292, !dbg !294

or.rhs292:                                        ; preds = %checkok289
  %150 = load i8, ptr %skip_empty, align 1, !dbg !294
  %151 = trunc i8 %150 to i1, !dbg !294
  br label %or.phi293, !dbg !294

or.phi293:                                        ; preds = %or.rhs292, %checkok289
  %val294 = phi i1 [ true, %checkok289 ], [ %151, %or.rhs292 ], !dbg !294
  br i1 %val294, label %assert_ok299, label %assert_fail295, !dbg !294

assert_fail295:                                   ; preds = %or.phi293
  store %"char[]" { ptr @.panic_msg.38, i64 48 }, ptr %indirectarg296, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg297, align 8
  store %"char[]" { ptr @.func.33, i64 5 }, ptr %indirectarg298, align 8
  %152 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %152(ptr align 8 %indirectarg296, ptr align 8 %indirectarg297, ptr align 8 %indirectarg298, i32 357) #6, !dbg !293
  unreachable, !dbg !293

assert_ok299:                                     ; preds = %or.phi293
  store %"char[][]" %148, ptr %0, align 8, !dbg !293
  ret void, !dbg !293

panic:                                            ; preds = %expr_block.exit
  store i64 %sub28, ptr %taddr29, align 8
  %153 = insertvalue %any undef, ptr %taddr29, 0
  %154 = insertvalue %any %153, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.10, i64 43 }, ptr %indirectarg30, align 8
  store %"char[]" { ptr @.file, i64 16 }, ptr %indirectarg31, align 8
  store %"char[]" { ptr @.func.33, i64 5 }, ptr %indirectarg32, align 8
  store %any %154, ptr %varargslots, align 16
  %155 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %155, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg33, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg30, ptr align 8 %indirectarg31, ptr align 8 %indirectarg32, i32 304, ptr align 8 %indirectarg33) #6, !dbg !237
  unreachable, !dbg !237

panic57:                                          ; preds = %if.then55
  store i64 %54, ptr %taddr58, align 8
  %156 = insertvalue %any undef, ptr %taddr58, 0
  %157 = insertvalue %any %156, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr59, align 8
  %158 = insertvalue %any undef, ptr %taddr59, 0
  %159 = insertvalue %any %158, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.12, i64 61 }, ptr %indirectarg60, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg61, align 8
  store %"char[]" { ptr @.func.33, i64 5 }, ptr %indirectarg62, align 8
  store %any %157, ptr %varargslots63, align 16
  %ptradd64 = getelementptr inbounds i8, ptr %varargslots63, i64 16
  store %any %159, ptr %ptradd64, align 16
  %160 = insertvalue %"any[]" undef, ptr %varargslots63, 0
  %"$$temp65" = insertvalue %"any[]" %160, i64 2, 1
  store %"any[]" %"$$temp65", ptr %indirectarg66, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg60, ptr align 8 %indirectarg61, ptr align 8 %indirectarg62, i32 337, ptr align 8 %indirectarg66) #6, !dbg !261
  unreachable, !dbg !261

panic71:                                          ; preds = %checkok67
  store i64 %sub70, ptr %taddr72, align 8
  %161 = insertvalue %any undef, ptr %taddr72, 0
  %162 = insertvalue %any %161, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.10, i64 43 }, ptr %indirectarg73, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg74, align 8
  store %"char[]" { ptr @.func.33, i64 5 }, ptr %indirectarg75, align 8
  store %any %162, ptr %varargslots76, align 16
  %163 = insertvalue %"any[]" undef, ptr %varargslots76, 0
  %"$$temp77" = insertvalue %"any[]" %163, i64 1, 1
  store %"any[]" %"$$temp77", ptr %indirectarg78, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg73, ptr align 8 %indirectarg74, ptr align 8 %indirectarg75, i32 337, ptr align 8 %indirectarg78) #6, !dbg !261
  unreachable, !dbg !261

panic82:                                          ; preds = %checkok79
  store i64 %sub81, ptr %taddr83, align 8
  %164 = insertvalue %any undef, ptr %taddr83, 0
  %165 = insertvalue %any %164, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %54, ptr %taddr84, align 8
  %166 = insertvalue %any undef, ptr %taddr84, 0
  %167 = insertvalue %any %166, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.14, i64 60 }, ptr %indirectarg85, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg86, align 8
  store %"char[]" { ptr @.func.33, i64 5 }, ptr %indirectarg87, align 8
  store %any %165, ptr %varargslots88, align 16
  %ptradd89 = getelementptr inbounds i8, ptr %varargslots88, i64 16
  store %any %167, ptr %ptradd89, align 16
  %168 = insertvalue %"any[]" undef, ptr %varargslots88, 0
  %"$$temp90" = insertvalue %"any[]" %168, i64 2, 1
  store %"any[]" %"$$temp90", ptr %indirectarg91, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg85, ptr align 8 %indirectarg86, ptr align 8 %indirectarg87, i32 337, ptr align 8 %indirectarg91) #6, !dbg !261
  unreachable, !dbg !261

panic97:                                          ; preds = %checkok92
  store i64 %65, ptr %taddr98, align 8
  %169 = insertvalue %any undef, ptr %taddr98, 0
  %170 = insertvalue %any %169, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %add95, ptr %taddr99, align 8
  %171 = insertvalue %any undef, ptr %taddr99, 0
  %172 = insertvalue %any %171, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.12, i64 61 }, ptr %indirectarg100, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg101, align 8
  store %"char[]" { ptr @.func.33, i64 5 }, ptr %indirectarg102, align 8
  store %any %170, ptr %varargslots103, align 16
  %ptradd104 = getelementptr inbounds i8, ptr %varargslots103, i64 16
  store %any %172, ptr %ptradd104, align 16
  %173 = insertvalue %"any[]" undef, ptr %varargslots103, 0
  %"$$temp105" = insertvalue %"any[]" %173, i64 2, 1
  store %"any[]" %"$$temp105", ptr %indirectarg106, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg100, ptr align 8 %indirectarg101, ptr align 8 %indirectarg102, i32 338, ptr align 8 %indirectarg106) #6, !dbg !263
  unreachable, !dbg !263

panic267:                                         ; preds = %if.exit265
  store i64 8, ptr %taddr268, align 8
  %174 = insertvalue %any undef, ptr %taddr268, 0
  %175 = insertvalue %any %174, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %141, ptr %taddr269, align 8
  %176 = insertvalue %any undef, ptr %taddr269, 0
  %177 = insertvalue %any %176, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 94 }, ptr %indirectarg270, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg271, align 8
  store %"char[]" { ptr @.func.33, i64 5 }, ptr %indirectarg272, align 8
  store %any %175, ptr %varargslots273, align 16
  %ptradd274 = getelementptr inbounds i8, ptr %varargslots273, i64 16
  store %any %177, ptr %ptradd274, align 16
  %178 = insertvalue %"any[]" undef, ptr %varargslots273, 0
  %"$$temp275" = insertvalue %"any[]" %178, i64 2, 1
  store %"any[]" %"$$temp275", ptr %indirectarg276, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg270, ptr align 8 %indirectarg271, ptr align 8 %indirectarg272, i32 355, ptr align 8 %indirectarg276) #6, !dbg !292
  unreachable, !dbg !292

panic281:                                         ; preds = %loop.exit
  store i64 %sub280, ptr %taddr282, align 8
  %179 = insertvalue %any undef, ptr %taddr282, 0
  %180 = insertvalue %any %179, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.10, i64 43 }, ptr %indirectarg283, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg284, align 8
  store %"char[]" { ptr @.func.33, i64 5 }, ptr %indirectarg285, align 8
  store %any %180, ptr %varargslots286, align 16
  %181 = insertvalue %"any[]" undef, ptr %varargslots286, 0
  %"$$temp287" = insertvalue %"any[]" %181, i64 1, 1
  store %"any[]" %"$$temp287", ptr %indirectarg288, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg283, ptr align 8 %indirectarg284, ptr align 8 %indirectarg285, i32 357, ptr align 8 %indirectarg288) #6, !dbg !293
  unreachable, !dbg !293
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.core.String.tsplit(ptr noalias sret(%"char[][]") align 8 %0, ptr align 8 %1, ptr align 8 %2, i64 %3, i8 zeroext %4) #0 comdat !dbg !295 {
entry:
  %max = alloca i64, align 8
  %skip_empty = alloca i8, align 1
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %sretparam = alloca %"char[][]", align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %any, align 8
  %indirectarg5 = alloca %"char[]", align 8
    #dbg_declare(ptr %1, !298, !DIExpression(), !299)
    #dbg_declare(ptr %2, !300, !DIExpression(), !299)
  store i64 %3, ptr %max, align 8
    #dbg_declare(ptr %max, !301, !DIExpression(), !299)
  store i8 %4, ptr %skip_empty, align 1
    #dbg_declare(ptr %skip_empty, !302, !DIExpression(), !299)
  %5 = load %"char[]", ptr %1, align 8, !dbg !299
  %6 = call ptr @llvm.threadlocal.address.p0(ptr @std.core.mem.allocator.current_temp), !dbg !299
  %7 = load %any, ptr %6, align 8, !dbg !299
  %8 = load %"char[]", ptr %2, align 8, !dbg !299
  %9 = load i64, ptr %max, align 8, !dbg !299
  %10 = load i8, ptr %skip_empty, align 1, !dbg !299
  %11 = trunc i8 %10 to i1, !dbg !299
  %12 = extractvalue %"char[]" %8, 1, !dbg !303
  %lt = icmp ult i64 0, %12, !dbg !299
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !299

assert_fail:                                      ; preds = %entry
  store %"char[]" { ptr @.panic_msg.32, i64 89 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.39, i64 6 }, ptr %indirectarg2, align 8
  %13 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %13(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 370) #6, !dbg !299
  unreachable, !dbg !299

assert_ok:                                        ; preds = %entry
  store %"char[]" %5, ptr %indirectarg3, align 8
  store %any %7, ptr %indirectarg4, align 8
  store %"char[]" %8, ptr %indirectarg5, align 8
  %14 = zext i1 %11 to i8
  call void @std.core.String.split(ptr sret(%"char[][]") align 8 %sretparam, ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, i64 %9, i8 zeroext %14) #5, !dbg !299
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %sretparam, i32 16, i1 false), !dbg !299
  ret void, !dbg !299
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.core.String.split_to_buffer(ptr %0, ptr align 8 %1, ptr align 8 %2, ptr align 8 %3, i64 %4, i8 zeroext %5) #0 comdat !dbg !304 {
entry:
  %max = alloca i64, align 8
  %skip_empty = alloca i8, align 1
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %max_capacity = alloca i64, align 8
  %i = alloca i64, align 8
  %no_more = alloca i8, align 1
  %index = alloca i64, align 8
  %index.f = alloca i64, align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg7 = alloca %"char[]", align 8
  %indirectarg8 = alloca %"char[]", align 8
  %retparam = alloca i64, align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %res = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr12 = alloca i64, align 8
  %indirectarg13 = alloca %"char[]", align 8
  %indirectarg14 = alloca %"char[]", align 8
  %indirectarg15 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg17 = alloca %"any[]", align 8
  %taddr21 = alloca i64, align 8
  %indirectarg22 = alloca %"char[]", align 8
  %indirectarg23 = alloca %"char[]", align 8
  %indirectarg24 = alloca %"char[]", align 8
  %varargslots25 = alloca [1 x %any], align 16
  %indirectarg27 = alloca %"any[]", align 8
  %taddr32 = alloca i64, align 8
  %taddr33 = alloca i64, align 8
  %indirectarg34 = alloca %"char[]", align 8
  %indirectarg35 = alloca %"char[]", align 8
  %indirectarg36 = alloca %"char[]", align 8
  %varargslots37 = alloca [2 x %any], align 16
  %indirectarg40 = alloca %"any[]", align 8
  %taddr46 = alloca i64, align 8
  %taddr47 = alloca i64, align 8
  %indirectarg48 = alloca %"char[]", align 8
  %indirectarg49 = alloca %"char[]", align 8
  %indirectarg50 = alloca %"char[]", align 8
  %varargslots51 = alloca [2 x %any], align 16
  %indirectarg54 = alloca %"any[]", align 8
  %taddr67 = alloca i64, align 8
  %taddr68 = alloca i64, align 8
  %indirectarg69 = alloca %"char[]", align 8
  %indirectarg70 = alloca %"char[]", align 8
  %indirectarg71 = alloca %"char[]", align 8
  %varargslots72 = alloca [2 x %any], align 16
  %indirectarg75 = alloca %"any[]", align 8
  %taddr78 = alloca i64, align 8
  %taddr79 = alloca i64, align 8
  %indirectarg80 = alloca %"char[]", align 8
  %indirectarg81 = alloca %"char[]", align 8
  %indirectarg82 = alloca %"char[]", align 8
  %varargslots83 = alloca [2 x %any], align 16
  %indirectarg86 = alloca %"any[]", align 8
  %reterr = alloca i64, align 8
  %taddr90 = alloca i64, align 8
  %taddr91 = alloca i64, align 8
  %indirectarg92 = alloca %"char[]", align 8
  %indirectarg93 = alloca %"char[]", align 8
  %indirectarg94 = alloca %"char[]", align 8
  %varargslots95 = alloca [2 x %any], align 16
  %indirectarg98 = alloca %"any[]", align 8
  %taddr104 = alloca i64, align 8
  %indirectarg105 = alloca %"char[]", align 8
  %indirectarg106 = alloca %"char[]", align 8
  %indirectarg107 = alloca %"char[]", align 8
  %varargslots108 = alloca [1 x %any], align 16
  %indirectarg110 = alloca %"any[]", align 8
  %taddr115 = alloca i64, align 8
  %taddr116 = alloca i64, align 8
  %indirectarg117 = alloca %"char[]", align 8
  %indirectarg118 = alloca %"char[]", align 8
  %indirectarg119 = alloca %"char[]", align 8
  %varargslots120 = alloca [2 x %any], align 16
  %indirectarg123 = alloca %"any[]", align 8
  %indirectarg129 = alloca %"char[]", align 8
  %indirectarg130 = alloca %"char[]", align 8
  %indirectarg131 = alloca %"char[]", align 8
    #dbg_declare(ptr %1, !310, !DIExpression(), !311)
    #dbg_declare(ptr %2, !312, !DIExpression(), !311)
    #dbg_declare(ptr %3, !313, !DIExpression(), !311)
  store i64 %4, ptr %max, align 8
    #dbg_declare(ptr %max, !314, !DIExpression(), !311)
  store i8 %5, ptr %skip_empty, align 1
    #dbg_declare(ptr %skip_empty, !315, !DIExpression(), !311)
  %ptradd = getelementptr inbounds i8, ptr %2, i64 8, !dbg !316
  %6 = load i64, ptr %ptradd, align 8, !dbg !316
  %lt = icmp ult i64 0, %6, !dbg !316
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !316

assert_fail:                                      ; preds = %entry
  store %"char[]" { ptr @.panic_msg.32, i64 89 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.40, i64 15 }, ptr %indirectarg2, align 8
  %7 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %7(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 381) #6, !dbg !316
  unreachable, !dbg !316

assert_ok:                                        ; preds = %entry
    #dbg_declare(ptr %max_capacity, !318, !DIExpression(), !319)
  %ptradd3 = getelementptr inbounds i8, ptr %3, i64 8, !dbg !319
  %8 = load i64, ptr %ptradd3, align 8, !dbg !319
  store i64 %8, ptr %max_capacity, align 8, !dbg !319
    #dbg_declare(ptr %i, !320, !DIExpression(), !321)
  store i64 0, ptr %i, align 8, !dbg !321
    #dbg_declare(ptr %no_more, !322, !DIExpression(), !323)
  store i8 0, ptr %no_more, align 1, !dbg !323
  br label %loop.cond, !dbg !324

loop.cond:                                        ; preds = %checkok87, %if.then59, %assert_ok
  %9 = load i8, ptr %no_more, align 1, !dbg !325
  %10 = trunc i8 %9 to i1, !dbg !325
  %not = xor i1 %10, true, !dbg !325
  br i1 %not, label %loop.body, label %loop.exit, !dbg !325

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %index, !327, !DIExpression(), !329)
  %11 = load i64, ptr %i, align 8, !dbg !329
  %12 = load i64, ptr %max, align 8, !dbg !329
  %sub = sub i64 %12, 1, !dbg !329
  %eq = icmp eq i64 %sub, %11, !dbg !329
  %check = icmp sge i64 %sub, 0, !dbg !329
  %siui-eq = and i1 %check, %eq, !dbg !329
  br i1 %siui-eq, label %cond.lhs, label %cond.rhs, !dbg !329

cond.lhs:                                         ; preds = %loop.body
  store i64 ptrtoint (ptr @std.core.builtin.NOT_FOUND to i64), ptr %index.f, align 8, !dbg !329
  br label %after_assign, !dbg !329

cond.rhs:                                         ; preds = %loop.body
  %13 = load %"char[]", ptr %1, align 8, !dbg !329
  %14 = load %"char[]", ptr %2, align 8, !dbg !329
  %15 = extractvalue %"char[]" %14, 1, !dbg !330
  %lt4 = icmp ult i64 0, %15, !dbg !329
  br i1 %lt4, label %assert_ok9, label %assert_fail5, !dbg !329

assert_fail5:                                     ; preds = %cond.rhs
  store %"char[]" { ptr @.panic_msg.34, i64 71 }, ptr %indirectarg6, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg7, align 8
  store %"char[]" { ptr @.func.40, i64 15 }, ptr %indirectarg8, align 8
  %16 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %16(ptr align 8 %indirectarg6, ptr align 8 %indirectarg7, ptr align 8 %indirectarg8, i32 392) #6, !dbg !329
  unreachable, !dbg !329

assert_ok9:                                       ; preds = %cond.rhs
  store %"char[]" %13, ptr %indirectarg10, align 8
  store %"char[]" %14, ptr %indirectarg11, align 8
  %17 = call i64 @std.core.String.index_of(ptr %retparam, ptr align 8 %indirectarg10, ptr align 8 %indirectarg11), !dbg !329
  %not_err = icmp eq i64 %17, 0, !dbg !329
  %18 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !329
  br i1 %18, label %after_check, label %assign_optional, !dbg !329

assign_optional:                                  ; preds = %assert_ok9
  store i64 %17, ptr %index.f, align 8, !dbg !329
  br label %after_assign, !dbg !329

after_check:                                      ; preds = %assert_ok9
  %19 = load i64, ptr %retparam, align 8, !dbg !329
  br label %cond.phi, !dbg !329

cond.phi:                                         ; preds = %after_check
  store i64 %19, ptr %index, align 8, !dbg !329
  store i64 0, ptr %index.f, align 8, !dbg !329
  br label %after_assign, !dbg !329

after_assign:                                     ; preds = %cond.phi, %assign_optional, %cond.lhs
    #dbg_declare(ptr %res, !331, !DIExpression(), !332)
  %load.err = load i64, ptr %index.f, align 8, !dbg !333
  %result = icmp eq i64 %load.err, 0, !dbg !333
  br i1 %result, label %if.then, label %if.else, !dbg !333

if.then:                                          ; preds = %after_assign
  %20 = load %"char[]", ptr %1, align 8, !dbg !334
  %21 = extractvalue %"char[]" %20, 0, !dbg !334
  %22 = extractvalue %"char[]" %20, 1, !dbg !334
  %gt = icmp ugt i64 0, %22, !dbg !334
  %23 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !334
  br i1 %23, label %panic, label %checkok, !dbg !334

checkok:                                          ; preds = %if.then
  %24 = load i64, ptr %index, align 8, !dbg !334
  %add = add i64 0, %24, !dbg !334
  %gt18 = icmp ugt i64 0, %add, !dbg !334
  %sub19 = sub i64 %add, 0, !dbg !334
  %25 = call i1 @llvm.expect.i1(i1 %gt18, i1 false), !dbg !334
  br i1 %25, label %panic20, label %checkok28, !dbg !334

checkok28:                                        ; preds = %checkok
  %lt29 = icmp ult i64 %22, %add, !dbg !334
  %sub30 = sub i64 %add, 1, !dbg !334
  %26 = call i1 @llvm.expect.i1(i1 %lt29, i1 false), !dbg !334
  br i1 %26, label %panic31, label %checkok41, !dbg !334

checkok41:                                        ; preds = %checkok28
  %size = sub i64 %add, 0, !dbg !334
  %27 = insertvalue %"char[]" undef, ptr %21, 0, !dbg !334
  %28 = insertvalue %"char[]" %27, i64 %size, 1, !dbg !334
  store %"char[]" %28, ptr %res, align 8, !dbg !334
  %29 = load %"char[]", ptr %1, align 8, !dbg !336
  %30 = extractvalue %"char[]" %29, 0, !dbg !336
  %31 = load i64, ptr %index, align 8, !dbg !336
  %ptradd42 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !336
  %32 = load i64, ptr %ptradd42, align 8, !dbg !336
  %add43 = add i64 %31, %32, !dbg !336
  %33 = extractvalue %"char[]" %29, 1, !dbg !336
  %gt44 = icmp ugt i64 %add43, %33, !dbg !336
  %34 = call i1 @llvm.expect.i1(i1 %gt44, i1 false), !dbg !336
  br i1 %34, label %panic45, label %checkok55, !dbg !336

checkok55:                                        ; preds = %checkok41
  %size56 = sub i64 %33, %add43, !dbg !336
  %ptradd57 = getelementptr inbounds i8, ptr %30, i64 %add43, !dbg !336
  %35 = insertvalue %"char[]" undef, ptr %ptradd57, 0, !dbg !336
  %36 = insertvalue %"char[]" %35, i64 %size56, 1, !dbg !336
  store %"char[]" %36, ptr %1, align 8, !dbg !336
  br label %if.exit, !dbg !336

if.else:                                          ; preds = %after_assign
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %res, ptr align 8 %1, i32 16, i1 false), !dbg !337
  store i8 1, ptr %no_more, align 1, !dbg !339
  br label %if.exit, !dbg !339

if.exit:                                          ; preds = %if.else, %checkok55
  %ptradd58 = getelementptr inbounds i8, ptr %res, i64 8, !dbg !340
  %37 = load i64, ptr %ptradd58, align 8, !dbg !340
  %i2nb = icmp eq i64 %37, 0, !dbg !340
  br i1 %i2nb, label %and.rhs, label %and.phi, !dbg !340

and.rhs:                                          ; preds = %if.exit
  %38 = load i8, ptr %skip_empty, align 1, !dbg !340
  %39 = trunc i8 %38 to i1, !dbg !340
  br label %and.phi, !dbg !340

and.phi:                                          ; preds = %and.rhs, %if.exit
  %val = phi i1 [ false, %if.exit ], [ %39, %and.rhs ], !dbg !340
  br i1 %val, label %if.then59, label %if.exit60, !dbg !340

if.then59:                                        ; preds = %and.phi
  br label %loop.cond, !dbg !341

if.exit60:                                        ; preds = %and.phi
  %40 = load i64, ptr %i, align 8, !dbg !343
  %41 = load i64, ptr %max_capacity, align 8, !dbg !343
  %eq61 = icmp eq i64 %40, %41, !dbg !343
  br i1 %eq61, label %if.then62, label %if.exit63, !dbg !343

if.then62:                                        ; preds = %if.exit60
  ret i64 ptrtoint (ptr @std.core.string.BUFFER_EXCEEDED to i64), !dbg !344

if.exit63:                                        ; preds = %if.exit60
  %ptradd64 = getelementptr inbounds i8, ptr %3, i64 8, !dbg !346
  %42 = load i64, ptr %ptradd64, align 8, !dbg !346
  %43 = load ptr, ptr %3, align 8, !dbg !346
  %44 = load i64, ptr %i, align 8, !dbg !346
  %add65 = add i64 %44, 1, !dbg !346
  store i64 %add65, ptr %i, align 8, !dbg !346
  %ge = icmp uge i64 %44, %42, !dbg !346
  %45 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !346
  br i1 %45, label %panic66, label %checkok76, !dbg !346

checkok76:                                        ; preds = %if.exit63
  %ptroffset = getelementptr inbounds [16 x i8], ptr %43, i64 %44, !dbg !346
  %46 = ptrtoint ptr %ptroffset to i64, !dbg !346
  %47 = urem i64 %46, 8, !dbg !346
  %48 = icmp ne i64 %47, 0, !dbg !346
  %49 = call i1 @llvm.expect.i1(i1 %48, i1 false), !dbg !346
  br i1 %49, label %panic77, label %checkok87, !dbg !346

checkok87:                                        ; preds = %checkok76
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %ptroffset, ptr align 8 %res, i32 16, i1 false), !dbg !346
  br label %loop.cond, !dbg !346

loop.exit:                                        ; preds = %loop.cond
  %50 = load %"char[][]", ptr %3, align 8, !dbg !347
  %51 = extractvalue %"char[][]" %50, 0, !dbg !347
  %52 = extractvalue %"char[][]" %50, 1, !dbg !347
  %gt88 = icmp ugt i64 0, %52, !dbg !347
  %53 = call i1 @llvm.expect.i1(i1 %gt88, i1 false), !dbg !347
  br i1 %53, label %panic89, label %checkok99, !dbg !347

checkok99:                                        ; preds = %loop.exit
  %54 = load i64, ptr %i, align 8, !dbg !347
  %add100 = add i64 0, %54, !dbg !347
  %gt101 = icmp ugt i64 0, %add100, !dbg !347
  %sub102 = sub i64 %add100, 0, !dbg !347
  %55 = call i1 @llvm.expect.i1(i1 %gt101, i1 false), !dbg !347
  br i1 %55, label %panic103, label %checkok111, !dbg !347

checkok111:                                       ; preds = %checkok99
  %lt112 = icmp ult i64 %52, %add100, !dbg !347
  %sub113 = sub i64 %add100, 1, !dbg !347
  %56 = call i1 @llvm.expect.i1(i1 %lt112, i1 false), !dbg !347
  br i1 %56, label %panic114, label %checkok124, !dbg !347

checkok124:                                       ; preds = %checkok111
  %size125 = sub i64 %add100, 0, !dbg !347
  %57 = insertvalue %"char[][]" undef, ptr %51, 0, !dbg !347
  %58 = insertvalue %"char[][]" %57, i64 %size125, 1, !dbg !347
  %59 = extractvalue %"char[][]" %58, 1, !dbg !348
  %lt126 = icmp ult i64 0, %59, !dbg !348
  br i1 %lt126, label %or.phi, label %or.rhs, !dbg !348

or.rhs:                                           ; preds = %checkok124
  %60 = load i8, ptr %skip_empty, align 1, !dbg !348
  %61 = trunc i8 %60 to i1, !dbg !348
  br label %or.phi, !dbg !348

or.phi:                                           ; preds = %or.rhs, %checkok124
  %val127 = phi i1 [ true, %checkok124 ], [ %61, %or.rhs ], !dbg !348
  br i1 %val127, label %assert_ok132, label %assert_fail128, !dbg !348

assert_fail128:                                   ; preds = %or.phi
  store %"char[]" { ptr @.panic_msg.38, i64 48 }, ptr %indirectarg129, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg130, align 8
  store %"char[]" { ptr @.func.40, i64 15 }, ptr %indirectarg131, align 8
  %62 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %62(ptr align 8 %indirectarg129, ptr align 8 %indirectarg130, ptr align 8 %indirectarg131, i32 414) #6, !dbg !347
  unreachable, !dbg !347

assert_ok132:                                     ; preds = %or.phi
  store %"char[][]" %58, ptr %0, align 8, !dbg !347
  ret i64 0, !dbg !347

panic:                                            ; preds = %if.then
  store i64 %22, ptr %taddr, align 8
  %63 = insertvalue %any undef, ptr %taddr, 0
  %64 = insertvalue %any %63, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr12, align 8
  %65 = insertvalue %any undef, ptr %taddr12, 0
  %66 = insertvalue %any %65, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.12, i64 61 }, ptr %indirectarg13, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg14, align 8
  store %"char[]" { ptr @.func.40, i64 15 }, ptr %indirectarg15, align 8
  store %any %64, ptr %varargslots, align 16
  %ptradd16 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %66, ptr %ptradd16, align 16
  %67 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %67, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg17, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg13, ptr align 8 %indirectarg14, ptr align 8 %indirectarg15, i32 396, ptr align 8 %indirectarg17) #6, !dbg !334
  unreachable, !dbg !334

panic20:                                          ; preds = %checkok
  store i64 %sub19, ptr %taddr21, align 8
  %68 = insertvalue %any undef, ptr %taddr21, 0
  %69 = insertvalue %any %68, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.10, i64 43 }, ptr %indirectarg22, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg23, align 8
  store %"char[]" { ptr @.func.40, i64 15 }, ptr %indirectarg24, align 8
  store %any %69, ptr %varargslots25, align 16
  %70 = insertvalue %"any[]" undef, ptr %varargslots25, 0
  %"$$temp26" = insertvalue %"any[]" %70, i64 1, 1
  store %"any[]" %"$$temp26", ptr %indirectarg27, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg22, ptr align 8 %indirectarg23, ptr align 8 %indirectarg24, i32 396, ptr align 8 %indirectarg27) #6, !dbg !334
  unreachable, !dbg !334

panic31:                                          ; preds = %checkok28
  store i64 %sub30, ptr %taddr32, align 8
  %71 = insertvalue %any undef, ptr %taddr32, 0
  %72 = insertvalue %any %71, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %22, ptr %taddr33, align 8
  %73 = insertvalue %any undef, ptr %taddr33, 0
  %74 = insertvalue %any %73, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.14, i64 60 }, ptr %indirectarg34, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg35, align 8
  store %"char[]" { ptr @.func.40, i64 15 }, ptr %indirectarg36, align 8
  store %any %72, ptr %varargslots37, align 16
  %ptradd38 = getelementptr inbounds i8, ptr %varargslots37, i64 16
  store %any %74, ptr %ptradd38, align 16
  %75 = insertvalue %"any[]" undef, ptr %varargslots37, 0
  %"$$temp39" = insertvalue %"any[]" %75, i64 2, 1
  store %"any[]" %"$$temp39", ptr %indirectarg40, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg34, ptr align 8 %indirectarg35, ptr align 8 %indirectarg36, i32 396, ptr align 8 %indirectarg40) #6, !dbg !334
  unreachable, !dbg !334

panic45:                                          ; preds = %checkok41
  store i64 %33, ptr %taddr46, align 8
  %76 = insertvalue %any undef, ptr %taddr46, 0
  %77 = insertvalue %any %76, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %add43, ptr %taddr47, align 8
  %78 = insertvalue %any undef, ptr %taddr47, 0
  %79 = insertvalue %any %78, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.12, i64 61 }, ptr %indirectarg48, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg49, align 8
  store %"char[]" { ptr @.func.40, i64 15 }, ptr %indirectarg50, align 8
  store %any %77, ptr %varargslots51, align 16
  %ptradd52 = getelementptr inbounds i8, ptr %varargslots51, i64 16
  store %any %79, ptr %ptradd52, align 16
  %80 = insertvalue %"any[]" undef, ptr %varargslots51, 0
  %"$$temp53" = insertvalue %"any[]" %80, i64 2, 1
  store %"any[]" %"$$temp53", ptr %indirectarg54, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg48, ptr align 8 %indirectarg49, ptr align 8 %indirectarg50, i32 397, ptr align 8 %indirectarg54) #6, !dbg !336
  unreachable, !dbg !336

panic66:                                          ; preds = %if.exit63
  store i64 %42, ptr %taddr67, align 8
  %81 = insertvalue %any undef, ptr %taddr67, 0
  %82 = insertvalue %any %81, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %44, ptr %taddr68, align 8
  %83 = insertvalue %any undef, ptr %taddr68, 0
  %84 = insertvalue %any %83, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg69, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg70, align 8
  store %"char[]" { ptr @.func.40, i64 15 }, ptr %indirectarg71, align 8
  store %any %82, ptr %varargslots72, align 16
  %ptradd73 = getelementptr inbounds i8, ptr %varargslots72, i64 16
  store %any %84, ptr %ptradd73, align 16
  %85 = insertvalue %"any[]" undef, ptr %varargslots72, 0
  %"$$temp74" = insertvalue %"any[]" %85, i64 2, 1
  store %"any[]" %"$$temp74", ptr %indirectarg75, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg69, ptr align 8 %indirectarg70, ptr align 8 %indirectarg71, i32 412, ptr align 8 %indirectarg75) #6, !dbg !346
  unreachable, !dbg !346

panic77:                                          ; preds = %checkok76
  store i64 8, ptr %taddr78, align 8
  %86 = insertvalue %any undef, ptr %taddr78, 0
  %87 = insertvalue %any %86, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %47, ptr %taddr79, align 8
  %88 = insertvalue %any undef, ptr %taddr79, 0
  %89 = insertvalue %any %88, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 94 }, ptr %indirectarg80, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg81, align 8
  store %"char[]" { ptr @.func.40, i64 15 }, ptr %indirectarg82, align 8
  store %any %87, ptr %varargslots83, align 16
  %ptradd84 = getelementptr inbounds i8, ptr %varargslots83, i64 16
  store %any %89, ptr %ptradd84, align 16
  %90 = insertvalue %"any[]" undef, ptr %varargslots83, 0
  %"$$temp85" = insertvalue %"any[]" %90, i64 2, 1
  store %"any[]" %"$$temp85", ptr %indirectarg86, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg80, ptr align 8 %indirectarg81, ptr align 8 %indirectarg82, i32 412, ptr align 8 %indirectarg86) #6, !dbg !346
  unreachable, !dbg !346

panic89:                                          ; preds = %loop.exit
  store i64 %52, ptr %taddr90, align 8
  %91 = insertvalue %any undef, ptr %taddr90, 0
  %92 = insertvalue %any %91, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr91, align 8
  %93 = insertvalue %any undef, ptr %taddr91, 0
  %94 = insertvalue %any %93, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.12, i64 61 }, ptr %indirectarg92, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg93, align 8
  store %"char[]" { ptr @.func.40, i64 15 }, ptr %indirectarg94, align 8
  store %any %92, ptr %varargslots95, align 16
  %ptradd96 = getelementptr inbounds i8, ptr %varargslots95, i64 16
  store %any %94, ptr %ptradd96, align 16
  %95 = insertvalue %"any[]" undef, ptr %varargslots95, 0
  %"$$temp97" = insertvalue %"any[]" %95, i64 2, 1
  store %"any[]" %"$$temp97", ptr %indirectarg98, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg92, ptr align 8 %indirectarg93, ptr align 8 %indirectarg94, i32 414, ptr align 8 %indirectarg98) #6, !dbg !347
  unreachable, !dbg !347

panic103:                                         ; preds = %checkok99
  store i64 %sub102, ptr %taddr104, align 8
  %96 = insertvalue %any undef, ptr %taddr104, 0
  %97 = insertvalue %any %96, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.10, i64 43 }, ptr %indirectarg105, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg106, align 8
  store %"char[]" { ptr @.func.40, i64 15 }, ptr %indirectarg107, align 8
  store %any %97, ptr %varargslots108, align 16
  %98 = insertvalue %"any[]" undef, ptr %varargslots108, 0
  %"$$temp109" = insertvalue %"any[]" %98, i64 1, 1
  store %"any[]" %"$$temp109", ptr %indirectarg110, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg105, ptr align 8 %indirectarg106, ptr align 8 %indirectarg107, i32 414, ptr align 8 %indirectarg110) #6, !dbg !347
  unreachable, !dbg !347

panic114:                                         ; preds = %checkok111
  store i64 %sub113, ptr %taddr115, align 8
  %99 = insertvalue %any undef, ptr %taddr115, 0
  %100 = insertvalue %any %99, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %52, ptr %taddr116, align 8
  %101 = insertvalue %any undef, ptr %taddr116, 0
  %102 = insertvalue %any %101, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.14, i64 60 }, ptr %indirectarg117, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg118, align 8
  store %"char[]" { ptr @.func.40, i64 15 }, ptr %indirectarg119, align 8
  store %any %100, ptr %varargslots120, align 16
  %ptradd121 = getelementptr inbounds i8, ptr %varargslots120, i64 16
  store %any %102, ptr %ptradd121, align 16
  %103 = insertvalue %"any[]" undef, ptr %varargslots120, 0
  %"$$temp122" = insertvalue %"any[]" %103, i64 2, 1
  store %"any[]" %"$$temp122", ptr %indirectarg123, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg117, ptr align 8 %indirectarg118, ptr align 8 %indirectarg119, i32 414, ptr align 8 %indirectarg123) #6, !dbg !347
  unreachable, !dbg !347
}

; Function Attrs: nounwind ssp uwtable
define weak_odr zeroext i8 @std.core.String.contains(ptr align 8 %0, ptr align 8 %1) #0 comdat !dbg !349 {
entry:
  %blockret = alloca i8, align 1
  %temp_err = alloca i64, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %retparam = alloca i64, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
    #dbg_declare(ptr %0, !350, !DIExpression(), !351)
    #dbg_declare(ptr %1, !352, !DIExpression(), !351)
  br label %testblock

testblock:                                        ; preds = %entry
  %2 = load %"char[]", ptr %0, align 8, !dbg !353
  %3 = load %"char[]", ptr %1, align 8, !dbg !353
  %4 = extractvalue %"char[]" %3, 1, !dbg !357
  %lt = icmp ult i64 0, %4, !dbg !358
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !358

assert_fail:                                      ; preds = %testblock
  store %"char[]" { ptr @.panic_msg.34, i64 71 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.41, i64 10 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.42, i64 8 }, ptr %indirectarg2, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 434) #6, !dbg !358
  unreachable, !dbg !358

assert_ok:                                        ; preds = %testblock
  store %"char[]" %2, ptr %indirectarg3, align 8
  store %"char[]" %3, ptr %indirectarg4, align 8
  %6 = call i64 @std.core.String.index_of(ptr %retparam, ptr align 8 %indirectarg3, ptr align 8 %indirectarg4), !dbg !358
  %not_err = icmp eq i64 %6, 0, !dbg !358
  %7 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !358
  br i1 %7, label %after_check, label %assign_optional, !dbg !358

assign_optional:                                  ; preds = %assert_ok
  store i64 %6, ptr %temp_err, align 8, !dbg !358
  br label %end_block, !dbg !358

after_check:                                      ; preds = %assert_ok
  store i64 0, ptr %temp_err, align 8, !dbg !358
  br label %end_block, !dbg !358

end_block:                                        ; preds = %after_check, %assign_optional
  %8 = load i64, ptr %temp_err, align 8, !dbg !358
  %i2b = icmp ne i64 %8, 0, !dbg !358
  br i1 %i2b, label %if.then, label %if.exit, !dbg !358

if.then:                                          ; preds = %end_block
  store i8 0, ptr %blockret, align 1, !dbg !358
  br label %expr_block.exit, !dbg !358

if.exit:                                          ; preds = %end_block
  store i8 1, ptr %blockret, align 1, !dbg !359
  br label %expr_block.exit, !dbg !359

expr_block.exit:                                  ; preds = %if.exit, %if.then
  %9 = load i8, ptr %blockret, align 1, !dbg !359
  ret i8 %9, !dbg !359
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.core.String.count(ptr align 8 %0, ptr align 8 %1) #0 comdat !dbg !360 {
entry:
  %count = alloca i64, align 8
  %needed = alloca i64, align 8
  %first = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr2 = alloca i64, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg6 = alloca %"any[]", align 8
  %taddr10 = alloca i64, align 8
  %taddr11 = alloca i64, align 8
  %indirectarg12 = alloca %"char[]", align 8
  %indirectarg13 = alloca %"char[]", align 8
  %indirectarg14 = alloca %"char[]", align 8
  %varargslots15 = alloca [2 x %any], align 16
  %indirectarg18 = alloca %"any[]", align 8
  %taddr22 = alloca i64, align 8
  %taddr23 = alloca i64, align 8
  %indirectarg24 = alloca %"char[]", align 8
  %indirectarg25 = alloca %"char[]", align 8
  %indirectarg26 = alloca %"char[]", align 8
  %varargslots27 = alloca [2 x %any], align 16
  %indirectarg30 = alloca %"any[]", align 8
  %taddr33 = alloca i64, align 8
  %taddr34 = alloca i64, align 8
  %indirectarg35 = alloca %"char[]", align 8
  %indirectarg36 = alloca %"char[]", align 8
  %indirectarg37 = alloca %"char[]", align 8
  %varargslots38 = alloca [2 x %any], align 16
  %indirectarg41 = alloca %"any[]", align 8
  %.anon = alloca i64, align 8
  %i = alloca i64, align 8
  %c = alloca i8, align 1
  %taddr47 = alloca i64, align 8
  %taddr48 = alloca i64, align 8
  %indirectarg49 = alloca %"char[]", align 8
  %indirectarg50 = alloca %"char[]", align 8
  %indirectarg51 = alloca %"char[]", align 8
  %varargslots52 = alloca [2 x %any], align 16
  %indirectarg55 = alloca %"any[]", align 8
  %taddr61 = alloca i64, align 8
  %taddr62 = alloca i64, align 8
  %indirectarg63 = alloca %"char[]", align 8
  %indirectarg64 = alloca %"char[]", align 8
  %indirectarg65 = alloca %"char[]", align 8
  %varargslots66 = alloca [2 x %any], align 16
  %indirectarg69 = alloca %"any[]", align 8
  %taddr74 = alloca i64, align 8
  %indirectarg75 = alloca %"char[]", align 8
  %indirectarg76 = alloca %"char[]", align 8
  %indirectarg77 = alloca %"char[]", align 8
  %varargslots78 = alloca [1 x %any], align 16
  %indirectarg80 = alloca %"any[]", align 8
  %taddr85 = alloca i64, align 8
  %taddr86 = alloca i64, align 8
  %indirectarg87 = alloca %"char[]", align 8
  %indirectarg88 = alloca %"char[]", align 8
  %indirectarg89 = alloca %"char[]", align 8
  %varargslots90 = alloca [2 x %any], align 16
  %indirectarg93 = alloca %"any[]", align 8
  %cmp.idx = alloca i64, align 8
  %taddr107 = alloca i64, align 8
  %taddr108 = alloca i64, align 8
  %indirectarg109 = alloca %"char[]", align 8
  %indirectarg110 = alloca %"char[]", align 8
  %indirectarg111 = alloca %"char[]", align 8
  %varargslots112 = alloca [2 x %any], align 16
  %indirectarg115 = alloca %"any[]", align 8
    #dbg_declare(ptr %0, !363, !DIExpression(), !364)
    #dbg_declare(ptr %1, !365, !DIExpression(), !364)
    #dbg_declare(ptr %count, !366, !DIExpression(), !367)
  store i64 0, ptr %count, align 8, !dbg !367
    #dbg_declare(ptr %needed, !368, !DIExpression(), !369)
  %ptradd = getelementptr inbounds i8, ptr %1, i64 8, !dbg !369
  %2 = load i64, ptr %ptradd, align 8, !dbg !369
  store i64 %2, ptr %needed, align 8, !dbg !369
  %3 = load i64, ptr %needed, align 8, !dbg !370
  %eq = icmp eq i64 0, %3, !dbg !370
  br i1 %eq, label %if.then, label %if.exit, !dbg !370

if.then:                                          ; preds = %entry
  ret i64 0, !dbg !370

if.exit:                                          ; preds = %entry
    #dbg_declare(ptr %first, !371, !DIExpression(), !372)
  %ptradd1 = getelementptr inbounds i8, ptr %1, i64 8, !dbg !372
  %4 = load i64, ptr %ptradd1, align 8, !dbg !372
  %5 = load ptr, ptr %1, align 8, !dbg !372
  %ge = icmp sge i64 0, %4, !dbg !372
  %6 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !372
  br i1 %6, label %panic, label %checkok, !dbg !372

checkok:                                          ; preds = %if.exit
  %7 = load i8, ptr %5, align 1, !dbg !372
  store i8 %7, ptr %first, align 1, !dbg !372
  br label %loop.cond, !dbg !373

loop.cond:                                        ; preds = %checkok116, %checkok
  %ptradd7 = getelementptr inbounds i8, ptr %0, i64 8, !dbg !374
  %8 = load i64, ptr %ptradd7, align 8, !dbg !374
  %9 = load i64, ptr %needed, align 8, !dbg !374
  %ge8 = icmp uge i64 %8, %9, !dbg !374
  br i1 %ge8, label %loop.body, label %loop.exit120, !dbg !374

loop.body:                                        ; preds = %loop.cond
  %10 = load %"char[]", ptr %0, align 8, !dbg !376
  %11 = extractvalue %"char[]" %10, 0, !dbg !376
  %12 = extractvalue %"char[]" %10, 1, !dbg !376
  %gt = icmp ugt i64 0, %12, !dbg !376
  %13 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !376
  br i1 %13, label %panic9, label %checkok19, !dbg !376

checkok19:                                        ; preds = %loop.body
  %14 = load i64, ptr %needed, align 8, !dbg !376
  %sub = sub i64 %12, %14, !dbg !376
  %gt20 = icmp ugt i64 0, %sub, !dbg !376
  %15 = call i1 @llvm.expect.i1(i1 %gt20, i1 false), !dbg !376
  br i1 %15, label %panic21, label %checkok31, !dbg !376

checkok31:                                        ; preds = %checkok19
  %le = icmp ule i64 %12, %sub, !dbg !376
  %16 = call i1 @llvm.expect.i1(i1 %le, i1 false), !dbg !376
  br i1 %16, label %panic32, label %checkok42, !dbg !376

checkok42:                                        ; preds = %checkok31
  %17 = add i64 %sub, 1, !dbg !376
  %size = sub i64 %17, 0, !dbg !376
  %18 = insertvalue %"char[]" undef, ptr %11, 0, !dbg !376
  %19 = insertvalue %"char[]" %18, i64 %size, 1, !dbg !376
  %20 = extractvalue %"char[]" %19, 1, !dbg !376
    #dbg_declare(ptr %.anon, !379, !DIExpression(), !376)
  store i64 0, ptr %.anon, align 8, !dbg !376
  br label %loop.cond43, !dbg !376

loop.cond43:                                      ; preds = %if.exit119, %checkok42
  %21 = load i64, ptr %.anon, align 8, !dbg !376
  %lt = icmp ult i64 %21, %20, !dbg !376
  br i1 %lt, label %loop.body44, label %loop.exit, !dbg !376

loop.body44:                                      ; preds = %loop.cond43
    #dbg_declare(ptr %i, !380, !DIExpression(), !382)
  %22 = load i64, ptr %.anon, align 8, !dbg !382
  store i64 %22, ptr %i, align 8, !dbg !382
    #dbg_declare(ptr %c, !383, !DIExpression(), !382)
  %23 = extractvalue %"char[]" %19, 1, !dbg !382
  %24 = extractvalue %"char[]" %19, 0, !dbg !382
  %25 = load i64, ptr %.anon, align 8, !dbg !382
  %ge45 = icmp uge i64 %25, %23, !dbg !382
  %26 = call i1 @llvm.expect.i1(i1 %ge45, i1 false), !dbg !382
  br i1 %26, label %panic46, label %checkok56, !dbg !382

checkok56:                                        ; preds = %loop.body44
  %ptradd57 = getelementptr inbounds i8, ptr %24, i64 %25, !dbg !382
  %27 = load i8, ptr %ptradd57, align 1, !dbg !382
  store i8 %27, ptr %c, align 1, !dbg !382
  %28 = load i8, ptr %c, align 1, !dbg !384
  %29 = load i8, ptr %first, align 1, !dbg !384
  %eq58 = icmp eq i8 %28, %29, !dbg !384
  br i1 %eq58, label %and.rhs, label %and.phi, !dbg !384

and.rhs:                                          ; preds = %checkok56
  %30 = load %"char[]", ptr %0, align 8, !dbg !384
  %31 = extractvalue %"char[]" %30, 0, !dbg !384
  %32 = load i64, ptr %i, align 8, !dbg !384
  %33 = extractvalue %"char[]" %30, 1, !dbg !384
  %gt59 = icmp ugt i64 %32, %33, !dbg !384
  %34 = call i1 @llvm.expect.i1(i1 %gt59, i1 false), !dbg !384
  br i1 %34, label %panic60, label %checkok70, !dbg !384

checkok70:                                        ; preds = %and.rhs
  %35 = load i64, ptr %needed, align 8, !dbg !384
  %add = add i64 %32, %35, !dbg !384
  %gt71 = icmp ugt i64 %32, %add, !dbg !384
  %sub72 = sub i64 %add, %32, !dbg !384
  %36 = call i1 @llvm.expect.i1(i1 %gt71, i1 false), !dbg !384
  br i1 %36, label %panic73, label %checkok81, !dbg !384

checkok81:                                        ; preds = %checkok70
  %lt82 = icmp ult i64 %33, %add, !dbg !384
  %sub83 = sub i64 %add, 1, !dbg !384
  %37 = call i1 @llvm.expect.i1(i1 %lt82, i1 false), !dbg !384
  br i1 %37, label %panic84, label %checkok94, !dbg !384

checkok94:                                        ; preds = %checkok81
  %size95 = sub i64 %add, %32, !dbg !384
  %ptradd96 = getelementptr inbounds i8, ptr %31, i64 %32, !dbg !384
  %38 = insertvalue %"char[]" undef, ptr %ptradd96, 0, !dbg !384
  %39 = insertvalue %"char[]" %38, i64 %size95, 1, !dbg !384
  %40 = load %"char[]", ptr %1, align 8, !dbg !384
  %41 = extractvalue %"char[]" %39, 1, !dbg !384
  %42 = extractvalue %"char[]" %40, 1, !dbg !384
  %43 = extractvalue %"char[]" %39, 0, !dbg !384
  %44 = extractvalue %"char[]" %40, 0, !dbg !384
  %eq97 = icmp eq i64 %41, %42, !dbg !384
  br i1 %eq97, label %slice_cmp_values, label %slice_cmp_exit, !dbg !384

slice_cmp_values:                                 ; preds = %checkok94
  store i64 0, ptr %cmp.idx, align 8
  br label %slice_loop_start

slice_loop_start:                                 ; preds = %slice_loop_comparison, %slice_cmp_values
  %45 = load i64, ptr %cmp.idx, align 8
  %lt98 = icmp slt i64 %45, %41
  br i1 %lt98, label %slice_loop_comparison, label %slice_cmp_exit

slice_loop_comparison:                            ; preds = %slice_loop_start
  %ptradd99 = getelementptr inbounds i8, ptr %43, i64 %45
  %ptradd100 = getelementptr inbounds i8, ptr %44, i64 %45
  %46 = load i8, ptr %ptradd99, align 1
  %47 = load i8, ptr %ptradd100, align 1
  %eq101 = icmp eq i8 %46, %47
  %48 = add i64 %45, 1
  store i64 %48, ptr %cmp.idx, align 8
  br i1 %eq101, label %slice_loop_start, label %slice_cmp_exit

slice_cmp_exit:                                   ; preds = %slice_loop_comparison, %slice_loop_start, %checkok94
  %slice_cmp_phi = phi i1 [ true, %slice_loop_start ], [ false, %checkok94 ], [ false, %slice_loop_comparison ]
  br label %and.phi

and.phi:                                          ; preds = %slice_cmp_exit, %checkok56
  %val = phi i1 [ false, %checkok56 ], [ %slice_cmp_phi, %slice_cmp_exit ]
  br i1 %val, label %if.then102, label %if.exit119

if.then102:                                       ; preds = %and.phi
  %49 = load i64, ptr %count, align 8, !dbg !386
  %add103 = add i64 %49, 1, !dbg !386
  store i64 %add103, ptr %count, align 8, !dbg !386
  %50 = load %"char[]", ptr %0, align 8, !dbg !388
  %51 = extractvalue %"char[]" %50, 0, !dbg !388
  %52 = load i64, ptr %i, align 8, !dbg !388
  %53 = load i64, ptr %needed, align 8, !dbg !388
  %add104 = add i64 %52, %53, !dbg !388
  %54 = extractvalue %"char[]" %50, 1, !dbg !388
  %gt105 = icmp ugt i64 %add104, %54, !dbg !388
  %55 = call i1 @llvm.expect.i1(i1 %gt105, i1 false), !dbg !388
  br i1 %55, label %panic106, label %checkok116, !dbg !388

checkok116:                                       ; preds = %if.then102
  %size117 = sub i64 %54, %add104, !dbg !388
  %ptradd118 = getelementptr inbounds i8, ptr %51, i64 %add104, !dbg !388
  %56 = insertvalue %"char[]" undef, ptr %ptradd118, 0, !dbg !388
  %57 = insertvalue %"char[]" %56, i64 %size117, 1, !dbg !388
  store %"char[]" %57, ptr %0, align 8, !dbg !388
  br label %loop.cond, !dbg !389

if.exit119:                                       ; preds = %and.phi
  %58 = load i64, ptr %.anon, align 8, !dbg !376
  %addnuw = add nuw i64 %58, 1, !dbg !376
  store i64 %addnuw, ptr %.anon, align 8, !dbg !376
  br label %loop.cond43, !dbg !376

loop.exit:                                        ; preds = %loop.cond43
  br label %loop.exit120, !dbg !390

loop.exit120:                                     ; preds = %loop.exit, %loop.cond
  %59 = load i64, ptr %count, align 8, !dbg !391
  ret i64 %59, !dbg !391

panic:                                            ; preds = %if.exit
  store i64 %4, ptr %taddr, align 8
  %60 = insertvalue %any undef, ptr %taddr, 0
  %61 = insertvalue %any %60, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr2, align 8
  %62 = insertvalue %any undef, ptr %taddr2, 0
  %63 = insertvalue %any %62, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.func.43, i64 5 }, ptr %indirectarg4, align 8
  store %any %61, ptr %varargslots, align 16
  %ptradd5 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %63, ptr %ptradd5, align 16
  %64 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %64, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg6, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg, ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, i32 445, ptr align 8 %indirectarg6) #6, !dbg !372
  unreachable, !dbg !372

panic9:                                           ; preds = %loop.body
  store i64 %12, ptr %taddr10, align 8
  %65 = insertvalue %any undef, ptr %taddr10, 0
  %66 = insertvalue %any %65, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr11, align 8
  %67 = insertvalue %any undef, ptr %taddr11, 0
  %68 = insertvalue %any %67, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.12, i64 61 }, ptr %indirectarg12, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg13, align 8
  store %"char[]" { ptr @.func.43, i64 5 }, ptr %indirectarg14, align 8
  store %any %66, ptr %varargslots15, align 16
  %ptradd16 = getelementptr inbounds i8, ptr %varargslots15, i64 16
  store %any %68, ptr %ptradd16, align 16
  %69 = insertvalue %"any[]" undef, ptr %varargslots15, 0
  %"$$temp17" = insertvalue %"any[]" %69, i64 2, 1
  store %"any[]" %"$$temp17", ptr %indirectarg18, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg12, ptr align 8 %indirectarg13, ptr align 8 %indirectarg14, i32 448, ptr align 8 %indirectarg18) #6, !dbg !376
  unreachable, !dbg !376

panic21:                                          ; preds = %checkok19
  store i64 0, ptr %taddr22, align 8
  %70 = insertvalue %any undef, ptr %taddr22, 0
  %71 = insertvalue %any %70, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %sub, ptr %taddr23, align 8
  %72 = insertvalue %any undef, ptr %taddr23, 0
  %73 = insertvalue %any %72, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.44, i64 44 }, ptr %indirectarg24, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg25, align 8
  store %"char[]" { ptr @.func.43, i64 5 }, ptr %indirectarg26, align 8
  store %any %71, ptr %varargslots27, align 16
  %ptradd28 = getelementptr inbounds i8, ptr %varargslots27, i64 16
  store %any %73, ptr %ptradd28, align 16
  %74 = insertvalue %"any[]" undef, ptr %varargslots27, 0
  %"$$temp29" = insertvalue %"any[]" %74, i64 2, 1
  store %"any[]" %"$$temp29", ptr %indirectarg30, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg24, ptr align 8 %indirectarg25, ptr align 8 %indirectarg26, i32 448, ptr align 8 %indirectarg30) #6, !dbg !376
  unreachable, !dbg !376

panic32:                                          ; preds = %checkok31
  store i64 %sub, ptr %taddr33, align 8
  %75 = insertvalue %any undef, ptr %taddr33, 0
  %76 = insertvalue %any %75, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %12, ptr %taddr34, align 8
  %77 = insertvalue %any undef, ptr %taddr34, 0
  %78 = insertvalue %any %77, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.14, i64 60 }, ptr %indirectarg35, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg36, align 8
  store %"char[]" { ptr @.func.43, i64 5 }, ptr %indirectarg37, align 8
  store %any %76, ptr %varargslots38, align 16
  %ptradd39 = getelementptr inbounds i8, ptr %varargslots38, i64 16
  store %any %78, ptr %ptradd39, align 16
  %79 = insertvalue %"any[]" undef, ptr %varargslots38, 0
  %"$$temp40" = insertvalue %"any[]" %79, i64 2, 1
  store %"any[]" %"$$temp40", ptr %indirectarg41, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg35, ptr align 8 %indirectarg36, ptr align 8 %indirectarg37, i32 448, ptr align 8 %indirectarg41) #6, !dbg !376
  unreachable, !dbg !376

panic46:                                          ; preds = %loop.body44
  store i64 %23, ptr %taddr47, align 8
  %80 = insertvalue %any undef, ptr %taddr47, 0
  %81 = insertvalue %any %80, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %25, ptr %taddr48, align 8
  %82 = insertvalue %any undef, ptr %taddr48, 0
  %83 = insertvalue %any %82, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg49, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg50, align 8
  store %"char[]" { ptr @.func.43, i64 5 }, ptr %indirectarg51, align 8
  store %any %81, ptr %varargslots52, align 16
  %ptradd53 = getelementptr inbounds i8, ptr %varargslots52, i64 16
  store %any %83, ptr %ptradd53, align 16
  %84 = insertvalue %"any[]" undef, ptr %varargslots52, 0
  %"$$temp54" = insertvalue %"any[]" %84, i64 2, 1
  store %"any[]" %"$$temp54", ptr %indirectarg55, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg49, ptr align 8 %indirectarg50, ptr align 8 %indirectarg51, i32 448, ptr align 8 %indirectarg55) #6, !dbg !382
  unreachable, !dbg !382

panic60:                                          ; preds = %and.rhs
  store i64 %33, ptr %taddr61, align 8
  %85 = insertvalue %any undef, ptr %taddr61, 0
  %86 = insertvalue %any %85, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %32, ptr %taddr62, align 8
  %87 = insertvalue %any undef, ptr %taddr62, 0
  %88 = insertvalue %any %87, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.12, i64 61 }, ptr %indirectarg63, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg64, align 8
  store %"char[]" { ptr @.func.43, i64 5 }, ptr %indirectarg65, align 8
  store %any %86, ptr %varargslots66, align 16
  %ptradd67 = getelementptr inbounds i8, ptr %varargslots66, i64 16
  store %any %88, ptr %ptradd67, align 16
  %89 = insertvalue %"any[]" undef, ptr %varargslots66, 0
  %"$$temp68" = insertvalue %"any[]" %89, i64 2, 1
  store %"any[]" %"$$temp68", ptr %indirectarg69, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg63, ptr align 8 %indirectarg64, ptr align 8 %indirectarg65, i32 450, ptr align 8 %indirectarg69) #6, !dbg !384
  unreachable, !dbg !384

panic73:                                          ; preds = %checkok70
  store i64 %sub72, ptr %taddr74, align 8
  %90 = insertvalue %any undef, ptr %taddr74, 0
  %91 = insertvalue %any %90, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.10, i64 43 }, ptr %indirectarg75, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg76, align 8
  store %"char[]" { ptr @.func.43, i64 5 }, ptr %indirectarg77, align 8
  store %any %91, ptr %varargslots78, align 16
  %92 = insertvalue %"any[]" undef, ptr %varargslots78, 0
  %"$$temp79" = insertvalue %"any[]" %92, i64 1, 1
  store %"any[]" %"$$temp79", ptr %indirectarg80, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg75, ptr align 8 %indirectarg76, ptr align 8 %indirectarg77, i32 450, ptr align 8 %indirectarg80) #6, !dbg !384
  unreachable, !dbg !384

panic84:                                          ; preds = %checkok81
  store i64 %sub83, ptr %taddr85, align 8
  %93 = insertvalue %any undef, ptr %taddr85, 0
  %94 = insertvalue %any %93, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %33, ptr %taddr86, align 8
  %95 = insertvalue %any undef, ptr %taddr86, 0
  %96 = insertvalue %any %95, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.14, i64 60 }, ptr %indirectarg87, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg88, align 8
  store %"char[]" { ptr @.func.43, i64 5 }, ptr %indirectarg89, align 8
  store %any %94, ptr %varargslots90, align 16
  %ptradd91 = getelementptr inbounds i8, ptr %varargslots90, i64 16
  store %any %96, ptr %ptradd91, align 16
  %97 = insertvalue %"any[]" undef, ptr %varargslots90, 0
  %"$$temp92" = insertvalue %"any[]" %97, i64 2, 1
  store %"any[]" %"$$temp92", ptr %indirectarg93, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg87, ptr align 8 %indirectarg88, ptr align 8 %indirectarg89, i32 450, ptr align 8 %indirectarg93) #6, !dbg !384
  unreachable, !dbg !384

panic106:                                         ; preds = %if.then102
  store i64 %54, ptr %taddr107, align 8
  %98 = insertvalue %any undef, ptr %taddr107, 0
  %99 = insertvalue %any %98, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %add104, ptr %taddr108, align 8
  %100 = insertvalue %any undef, ptr %taddr108, 0
  %101 = insertvalue %any %100, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.12, i64 61 }, ptr %indirectarg109, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg110, align 8
  store %"char[]" { ptr @.func.43, i64 5 }, ptr %indirectarg111, align 8
  store %any %99, ptr %varargslots112, align 16
  %ptradd113 = getelementptr inbounds i8, ptr %varargslots112, i64 16
  store %any %101, ptr %ptradd113, align 16
  %102 = insertvalue %"any[]" undef, ptr %varargslots112, 0
  %"$$temp114" = insertvalue %"any[]" %102, i64 2, 1
  store %"any[]" %"$$temp114", ptr %indirectarg115, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg109, ptr align 8 %indirectarg110, ptr align 8 %indirectarg111, i32 453, ptr align 8 %indirectarg115) #6, !dbg !388
  unreachable, !dbg !388
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.core.String.index_of_char(ptr %0, ptr align 8 %1, i8 %2) #0 comdat !dbg !392 {
entry:
  %character = alloca i8, align 1
  %.anon = alloca i64, align 8
  %i = alloca i64, align 8
  %c = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr2 = alloca i64, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg6 = alloca %"any[]", align 8
  %reterr = alloca i64, align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
    #dbg_declare(ptr %1, !396, !DIExpression(), !397)
  store i8 %2, ptr %character, align 1
    #dbg_declare(ptr %character, !398, !DIExpression(), !397)
  %ptradd = getelementptr inbounds i8, ptr %1, i64 8, !dbg !399
  %3 = load i64, ptr %ptradd, align 8, !dbg !399
    #dbg_declare(ptr %.anon, !401, !DIExpression(), !399)
  store i64 0, ptr %.anon, align 8, !dbg !399
  br label %loop.cond, !dbg !399

loop.cond:                                        ; preds = %if.exit, %entry
  %4 = load i64, ptr %.anon, align 8, !dbg !399
  %lt = icmp ult i64 %4, %3, !dbg !399
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !399

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %i, !402, !DIExpression(), !404)
  %5 = load i64, ptr %.anon, align 8, !dbg !404
  store i64 %5, ptr %i, align 8, !dbg !404
    #dbg_declare(ptr %c, !405, !DIExpression(), !404)
  %ptradd1 = getelementptr inbounds i8, ptr %1, i64 8, !dbg !404
  %6 = load i64, ptr %ptradd1, align 8, !dbg !404
  %7 = load ptr, ptr %1, align 8, !dbg !404
  %8 = load i64, ptr %.anon, align 8, !dbg !404
  %ge = icmp uge i64 %8, %6, !dbg !404
  %9 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !404
  br i1 %9, label %panic, label %checkok, !dbg !404

checkok:                                          ; preds = %loop.body
  %ptradd7 = getelementptr inbounds i8, ptr %7, i64 %8, !dbg !404
  %10 = load i8, ptr %ptradd7, align 1, !dbg !404
  store i8 %10, ptr %c, align 1, !dbg !404
  %11 = load i8, ptr %c, align 1, !dbg !406
  %12 = load i8, ptr %character, align 1, !dbg !406
  %eq = icmp eq i8 %11, %12, !dbg !406
  br i1 %eq, label %if.then, label %if.exit, !dbg !406

if.then:                                          ; preds = %checkok
  %13 = load i64, ptr %i, align 8, !dbg !406
  %14 = load i64, ptr %i, align 8, !dbg !408
  %ptradd8 = getelementptr inbounds i8, ptr %1, i64 8, !dbg !408
  %15 = load i64, ptr %ptradd8, align 8, !dbg !408
  %lt9 = icmp ult i64 %14, %15, !dbg !406
  br i1 %lt9, label %assert_ok, label %assert_fail, !dbg !406

assert_fail:                                      ; preds = %if.then
  store %"char[]" { ptr @.panic_msg.46, i64 37 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.func.45, i64 13 }, ptr %indirectarg12, align 8
  %16 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %16(ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, i32 476) #6, !dbg !406
  unreachable, !dbg !406

assert_ok:                                        ; preds = %if.then
  store i64 %13, ptr %0, align 8, !dbg !406
  ret i64 0, !dbg !406

if.exit:                                          ; preds = %checkok
  %17 = load i64, ptr %.anon, align 8, !dbg !399
  %addnuw = add nuw i64 %17, 1, !dbg !399
  store i64 %addnuw, ptr %.anon, align 8, !dbg !399
  br label %loop.cond, !dbg !399

loop.exit:                                        ; preds = %loop.cond
  ret i64 ptrtoint (ptr @std.core.builtin.NOT_FOUND to i64), !dbg !409

panic:                                            ; preds = %loop.body
  store i64 %6, ptr %taddr, align 8
  %18 = insertvalue %any undef, ptr %taddr, 0
  %19 = insertvalue %any %18, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %8, ptr %taddr2, align 8
  %20 = insertvalue %any undef, ptr %taddr2, 0
  %21 = insertvalue %any %20, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.func.45, i64 13 }, ptr %indirectarg4, align 8
  store %any %19, ptr %varargslots, align 16
  %ptradd5 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %21, ptr %ptradd5, align 16
  %22 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %22, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg6, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg, ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, i32 474, ptr align 8 %indirectarg6) #6, !dbg !404
  unreachable, !dbg !404
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.core.String.index_of_chars(ptr %0, ptr align 8 %1, ptr align 8 %2) #0 comdat !dbg !410 {
entry:
  %.anon = alloca i64, align 8
  %i = alloca i64, align 8
  %c = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr2 = alloca i64, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg6 = alloca %"any[]", align 8
  %.anon9 = alloca i64, align 8
  %j = alloca i64, align 8
  %pin = alloca i8, align 1
  %taddr16 = alloca i64, align 8
  %taddr17 = alloca i64, align 8
  %indirectarg18 = alloca %"char[]", align 8
  %indirectarg19 = alloca %"char[]", align 8
  %indirectarg20 = alloca %"char[]", align 8
  %varargslots21 = alloca [2 x %any], align 16
  %indirectarg24 = alloca %"any[]", align 8
  %reterr = alloca i64, align 8
  %indirectarg29 = alloca %"char[]", align 8
  %indirectarg30 = alloca %"char[]", align 8
  %indirectarg31 = alloca %"char[]", align 8
    #dbg_declare(ptr %1, !413, !DIExpression(), !414)
    #dbg_declare(ptr %2, !415, !DIExpression(), !414)
  %ptradd = getelementptr inbounds i8, ptr %1, i64 8, !dbg !416
  %3 = load i64, ptr %ptradd, align 8, !dbg !416
    #dbg_declare(ptr %.anon, !418, !DIExpression(), !416)
  store i64 0, ptr %.anon, align 8, !dbg !416
  br label %loop.cond, !dbg !416

loop.cond:                                        ; preds = %loop.exit, %entry
  %4 = load i64, ptr %.anon, align 8, !dbg !416
  %lt = icmp ult i64 %4, %3, !dbg !416
  br i1 %lt, label %loop.body, label %loop.exit33, !dbg !416

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %i, !419, !DIExpression(), !421)
  %5 = load i64, ptr %.anon, align 8, !dbg !421
  store i64 %5, ptr %i, align 8, !dbg !421
    #dbg_declare(ptr %c, !422, !DIExpression(), !421)
  %ptradd1 = getelementptr inbounds i8, ptr %1, i64 8, !dbg !421
  %6 = load i64, ptr %ptradd1, align 8, !dbg !421
  %7 = load ptr, ptr %1, align 8, !dbg !421
  %8 = load i64, ptr %.anon, align 8, !dbg !421
  %ge = icmp uge i64 %8, %6, !dbg !421
  %9 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !421
  br i1 %9, label %panic, label %checkok, !dbg !421

checkok:                                          ; preds = %loop.body
  %ptradd7 = getelementptr inbounds i8, ptr %7, i64 %8, !dbg !421
  %10 = load i8, ptr %ptradd7, align 1, !dbg !421
  store i8 %10, ptr %c, align 1, !dbg !421
  %ptradd8 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !423
  %11 = load i64, ptr %ptradd8, align 8, !dbg !423
    #dbg_declare(ptr %.anon9, !426, !DIExpression(), !423)
  store i64 0, ptr %.anon9, align 8, !dbg !423
  br label %loop.cond10, !dbg !423

loop.cond10:                                      ; preds = %if.exit, %checkok
  %12 = load i64, ptr %.anon9, align 8, !dbg !423
  %lt11 = icmp ult i64 %12, %11, !dbg !423
  br i1 %lt11, label %loop.body12, label %loop.exit, !dbg !423

loop.body12:                                      ; preds = %loop.cond10
    #dbg_declare(ptr %j, !427, !DIExpression(), !429)
  %13 = load i64, ptr %.anon9, align 8, !dbg !429
  store i64 %13, ptr %j, align 8, !dbg !429
    #dbg_declare(ptr %pin, !430, !DIExpression(), !429)
  %ptradd13 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !429
  %14 = load i64, ptr %ptradd13, align 8, !dbg !429
  %15 = load ptr, ptr %2, align 8, !dbg !429
  %16 = load i64, ptr %.anon9, align 8, !dbg !429
  %ge14 = icmp uge i64 %16, %14, !dbg !429
  %17 = call i1 @llvm.expect.i1(i1 %ge14, i1 false), !dbg !429
  br i1 %17, label %panic15, label %checkok25, !dbg !429

checkok25:                                        ; preds = %loop.body12
  %ptradd26 = getelementptr inbounds i8, ptr %15, i64 %16, !dbg !429
  %18 = load i8, ptr %ptradd26, align 1, !dbg !429
  store i8 %18, ptr %pin, align 1, !dbg !429
  %19 = load i8, ptr %c, align 1, !dbg !431
  %20 = load i8, ptr %pin, align 1, !dbg !431
  %eq = icmp eq i8 %19, %20, !dbg !431
  br i1 %eq, label %if.then, label %if.exit, !dbg !431

if.then:                                          ; preds = %checkok25
  %21 = load i64, ptr %i, align 8, !dbg !431
  %22 = load i64, ptr %i, align 8, !dbg !433
  %ptradd27 = getelementptr inbounds i8, ptr %1, i64 8, !dbg !433
  %23 = load i64, ptr %ptradd27, align 8, !dbg !433
  %lt28 = icmp ult i64 %22, %23, !dbg !431
  br i1 %lt28, label %assert_ok, label %assert_fail, !dbg !431

assert_fail:                                      ; preds = %if.then
  store %"char[]" { ptr @.panic_msg.46, i64 37 }, ptr %indirectarg29, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg30, align 8
  store %"char[]" { ptr @.func.47, i64 14 }, ptr %indirectarg31, align 8
  %24 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %24(ptr align 8 %indirectarg29, ptr align 8 %indirectarg30, ptr align 8 %indirectarg31, i32 497) #6, !dbg !431
  unreachable, !dbg !431

assert_ok:                                        ; preds = %if.then
  store i64 %21, ptr %0, align 8, !dbg !431
  ret i64 0, !dbg !431

if.exit:                                          ; preds = %checkok25
  %25 = load i64, ptr %.anon9, align 8, !dbg !423
  %addnuw = add nuw i64 %25, 1, !dbg !423
  store i64 %addnuw, ptr %.anon9, align 8, !dbg !423
  br label %loop.cond10, !dbg !423

loop.exit:                                        ; preds = %loop.cond10
  %26 = load i64, ptr %.anon, align 8, !dbg !416
  %addnuw32 = add nuw i64 %26, 1, !dbg !416
  store i64 %addnuw32, ptr %.anon, align 8, !dbg !416
  br label %loop.cond, !dbg !416

loop.exit33:                                      ; preds = %loop.cond
  ret i64 ptrtoint (ptr @std.core.builtin.NOT_FOUND to i64), !dbg !434

panic:                                            ; preds = %loop.body
  store i64 %6, ptr %taddr, align 8
  %27 = insertvalue %any undef, ptr %taddr, 0
  %28 = insertvalue %any %27, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %8, ptr %taddr2, align 8
  %29 = insertvalue %any undef, ptr %taddr2, 0
  %30 = insertvalue %any %29, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.func.47, i64 14 }, ptr %indirectarg4, align 8
  store %any %28, ptr %varargslots, align 16
  %ptradd5 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %30, ptr %ptradd5, align 16
  %31 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %31, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg6, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg, ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, i32 493, ptr align 8 %indirectarg6) #6, !dbg !421
  unreachable, !dbg !421

panic15:                                          ; preds = %loop.body12
  store i64 %14, ptr %taddr16, align 8
  %32 = insertvalue %any undef, ptr %taddr16, 0
  %33 = insertvalue %any %32, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %16, ptr %taddr17, align 8
  %34 = insertvalue %any undef, ptr %taddr17, 0
  %35 = insertvalue %any %34, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg18, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg19, align 8
  store %"char[]" { ptr @.func.47, i64 14 }, ptr %indirectarg20, align 8
  store %any %33, ptr %varargslots21, align 16
  %ptradd22 = getelementptr inbounds i8, ptr %varargslots21, i64 16
  store %any %35, ptr %ptradd22, align 16
  %36 = insertvalue %"any[]" undef, ptr %varargslots21, 0
  %"$$temp23" = insertvalue %"any[]" %36, i64 2, 1
  store %"any[]" %"$$temp23", ptr %indirectarg24, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg18, ptr align 8 %indirectarg19, ptr align 8 %indirectarg20, i32 495, ptr align 8 %indirectarg24) #6, !dbg !429
  unreachable, !dbg !429
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.core.String.index_of_char_from(ptr %0, ptr align 8 %1, i8 %2, i64 %3) #0 comdat !dbg !435 {
entry:
  %character = alloca i8, align 1
  %start_index = alloca i64, align 8
  %len = alloca i64, align 8
  %i = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr2 = alloca i64, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg6 = alloca %"any[]", align 8
  %reterr = alloca i64, align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %indirectarg13 = alloca %"char[]", align 8
    #dbg_declare(ptr %1, !438, !DIExpression(), !439)
  store i8 %2, ptr %character, align 1
    #dbg_declare(ptr %character, !440, !DIExpression(), !439)
  store i64 %3, ptr %start_index, align 8
    #dbg_declare(ptr %start_index, !441, !DIExpression(), !439)
    #dbg_declare(ptr %len, !442, !DIExpression(), !443)
  %ptradd = getelementptr inbounds i8, ptr %1, i64 8, !dbg !443
  %4 = load i64, ptr %ptradd, align 8, !dbg !443
  store i64 %4, ptr %len, align 8, !dbg !443
  %5 = load i64, ptr %len, align 8, !dbg !444
  %6 = load i64, ptr %start_index, align 8, !dbg !444
  %le = icmp ule i64 %5, %6, !dbg !444
  br i1 %le, label %if.then, label %if.exit, !dbg !444

if.then:                                          ; preds = %entry
  ret i64 ptrtoint (ptr @std.core.builtin.NOT_FOUND to i64), !dbg !444

if.exit:                                          ; preds = %entry
    #dbg_declare(ptr %i, !445, !DIExpression(), !447)
  %7 = load i64, ptr %start_index, align 8, !dbg !447
  store i64 %7, ptr %i, align 8, !dbg !447
  br label %loop.cond, !dbg !447

loop.cond:                                        ; preds = %if.exit14, %if.exit
  %8 = load i64, ptr %i, align 8, !dbg !447
  %9 = load i64, ptr %len, align 8, !dbg !447
  %lt = icmp ult i64 %8, %9, !dbg !447
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !447

loop.body:                                        ; preds = %loop.cond
  %ptradd1 = getelementptr inbounds i8, ptr %1, i64 8, !dbg !448
  %10 = load i64, ptr %ptradd1, align 8, !dbg !448
  %11 = load ptr, ptr %1, align 8, !dbg !448
  %12 = load i64, ptr %i, align 8, !dbg !448
  %ge = icmp uge i64 %12, %10, !dbg !448
  %13 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !448
  br i1 %13, label %panic, label %checkok, !dbg !448

checkok:                                          ; preds = %loop.body
  %ptradd7 = getelementptr inbounds i8, ptr %11, i64 %12, !dbg !448
  %14 = load i8, ptr %ptradd7, align 1, !dbg !448
  %15 = load i8, ptr %character, align 1, !dbg !448
  %eq = icmp eq i8 %14, %15, !dbg !448
  br i1 %eq, label %if.then8, label %if.exit14, !dbg !448

if.then8:                                         ; preds = %checkok
  %16 = load i64, ptr %i, align 8, !dbg !448
  %17 = load i64, ptr %i, align 8, !dbg !450
  %ptradd9 = getelementptr inbounds i8, ptr %1, i64 8, !dbg !450
  %18 = load i64, ptr %ptradd9, align 8, !dbg !450
  %lt10 = icmp ult i64 %17, %18, !dbg !448
  br i1 %lt10, label %assert_ok, label %assert_fail, !dbg !448

assert_fail:                                      ; preds = %if.then8
  store %"char[]" { ptr @.panic_msg.46, i64 37 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg12, align 8
  store %"char[]" { ptr @.func.48, i64 18 }, ptr %indirectarg13, align 8
  %19 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %19(ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, ptr align 8 %indirectarg13, i32 521) #6, !dbg !448
  unreachable, !dbg !448

assert_ok:                                        ; preds = %if.then8
  store i64 %16, ptr %0, align 8, !dbg !448
  ret i64 0, !dbg !448

if.exit14:                                        ; preds = %checkok
  %20 = load i64, ptr %i, align 8, !dbg !447
  %add = add i64 %20, 1, !dbg !447
  store i64 %add, ptr %i, align 8, !dbg !447
  br label %loop.cond, !dbg !447

loop.exit:                                        ; preds = %loop.cond
  ret i64 ptrtoint (ptr @std.core.builtin.NOT_FOUND to i64), !dbg !451

panic:                                            ; preds = %loop.body
  store i64 %10, ptr %taddr, align 8
  %21 = insertvalue %any undef, ptr %taddr, 0
  %22 = insertvalue %any %21, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %12, ptr %taddr2, align 8
  %23 = insertvalue %any undef, ptr %taddr2, 0
  %24 = insertvalue %any %23, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.func.48, i64 18 }, ptr %indirectarg4, align 8
  store %any %22, ptr %varargslots, align 16
  %ptradd5 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %24, ptr %ptradd5, align 16
  %25 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %25, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg6, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg, ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, i32 521, ptr align 8 %indirectarg6) #6, !dbg !448
  unreachable, !dbg !448
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.core.String.rindex_of_char(ptr %0, ptr align 8 %1, i8 %2) #0 comdat !dbg !452 {
entry:
  %character = alloca i8, align 1
  %.anon = alloca i64, align 8
  %i = alloca i64, align 8
  %c = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr2 = alloca i64, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg6 = alloca %"any[]", align 8
  %reterr = alloca i64, align 8
  %indirectarg9 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
    #dbg_declare(ptr %1, !453, !DIExpression(), !454)
  store i8 %2, ptr %character, align 1
    #dbg_declare(ptr %character, !455, !DIExpression(), !454)
    #dbg_declare(ptr %.anon, !456, !DIExpression(), !458)
  %ptradd = getelementptr inbounds i8, ptr %1, i64 8, !dbg !458
  %3 = load i64, ptr %ptradd, align 8, !dbg !458
  store i64 %3, ptr %.anon, align 8, !dbg !458
  br label %loop.cond, !dbg !458

loop.cond:                                        ; preds = %if.exit, %entry
  %4 = load i64, ptr %.anon, align 8, !dbg !458
  %gt = icmp ugt i64 %4, 0, !dbg !458
  br i1 %gt, label %loop.body, label %loop.exit, !dbg !458

loop.body:                                        ; preds = %loop.cond
  %5 = load i64, ptr %.anon, align 8, !dbg !459
  %subnuw = sub nuw i64 %5, 1, !dbg !459
  store i64 %subnuw, ptr %.anon, align 8, !dbg !459
    #dbg_declare(ptr %i, !461, !DIExpression(), !459)
  %6 = load i64, ptr %.anon, align 8, !dbg !459
  store i64 %6, ptr %i, align 8, !dbg !459
    #dbg_declare(ptr %c, !462, !DIExpression(), !459)
  %ptradd1 = getelementptr inbounds i8, ptr %1, i64 8, !dbg !459
  %7 = load i64, ptr %ptradd1, align 8, !dbg !459
  %8 = load ptr, ptr %1, align 8, !dbg !459
  %9 = load i64, ptr %.anon, align 8, !dbg !459
  %ge = icmp uge i64 %9, %7, !dbg !459
  %10 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !459
  br i1 %10, label %panic, label %checkok, !dbg !459

checkok:                                          ; preds = %loop.body
  %ptradd7 = getelementptr inbounds i8, ptr %8, i64 %9, !dbg !459
  %11 = load i8, ptr %ptradd7, align 1, !dbg !459
  store i8 %11, ptr %c, align 1, !dbg !459
  %12 = load i8, ptr %c, align 1, !dbg !463
  %13 = load i8, ptr %character, align 1, !dbg !463
  %eq = icmp eq i8 %12, %13, !dbg !463
  br i1 %eq, label %if.then, label %if.exit, !dbg !463

if.then:                                          ; preds = %checkok
  %14 = load i64, ptr %i, align 8, !dbg !463
  %15 = load i64, ptr %i, align 8, !dbg !465
  %ptradd8 = getelementptr inbounds i8, ptr %1, i64 8, !dbg !465
  %16 = load i64, ptr %ptradd8, align 8, !dbg !465
  %lt = icmp ult i64 %15, %16, !dbg !463
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !463

assert_fail:                                      ; preds = %if.then
  store %"char[]" { ptr @.panic_msg.46, i64 37 }, ptr %indirectarg9, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.func.49, i64 14 }, ptr %indirectarg11, align 8
  %17 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %17(ptr align 8 %indirectarg9, ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, i32 540) #6, !dbg !463
  unreachable, !dbg !463

assert_ok:                                        ; preds = %if.then
  store i64 %14, ptr %0, align 8, !dbg !463
  ret i64 0, !dbg !463

if.exit:                                          ; preds = %checkok
  br label %loop.cond, !dbg !463

loop.exit:                                        ; preds = %loop.cond
  ret i64 ptrtoint (ptr @std.core.builtin.NOT_FOUND to i64), !dbg !466

panic:                                            ; preds = %loop.body
  store i64 %7, ptr %taddr, align 8
  %18 = insertvalue %any undef, ptr %taddr, 0
  %19 = insertvalue %any %18, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %9, ptr %taddr2, align 8
  %20 = insertvalue %any undef, ptr %taddr2, 0
  %21 = insertvalue %any %20, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.func.49, i64 14 }, ptr %indirectarg4, align 8
  store %any %19, ptr %varargslots, align 16
  %ptradd5 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %21, ptr %ptradd5, align 16
  %22 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %22, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg6, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg, ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, i32 538, ptr align 8 %indirectarg6) #6, !dbg !459
  unreachable, !dbg !459
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.core.String.index_of(ptr %0, ptr align 8 %1, ptr align 8 %2) #0 comdat !dbg !467 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %needed = alloca i64, align 8
  %first = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr8 = alloca i64, align 8
  %indirectarg9 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg13 = alloca %"any[]", align 8
  %taddr15 = alloca i64, align 8
  %taddr16 = alloca i64, align 8
  %indirectarg17 = alloca %"char[]", align 8
  %indirectarg18 = alloca %"char[]", align 8
  %indirectarg19 = alloca %"char[]", align 8
  %varargslots20 = alloca [2 x %any], align 16
  %indirectarg23 = alloca %"any[]", align 8
  %taddr27 = alloca i64, align 8
  %taddr28 = alloca i64, align 8
  %indirectarg29 = alloca %"char[]", align 8
  %indirectarg30 = alloca %"char[]", align 8
  %indirectarg31 = alloca %"char[]", align 8
  %varargslots32 = alloca [2 x %any], align 16
  %indirectarg35 = alloca %"any[]", align 8
  %taddr38 = alloca i64, align 8
  %taddr39 = alloca i64, align 8
  %indirectarg40 = alloca %"char[]", align 8
  %indirectarg41 = alloca %"char[]", align 8
  %indirectarg42 = alloca %"char[]", align 8
  %varargslots43 = alloca [2 x %any], align 16
  %indirectarg46 = alloca %"any[]", align 8
  %.anon = alloca i64, align 8
  %i = alloca i64, align 8
  %c = alloca i8, align 1
  %taddr51 = alloca i64, align 8
  %taddr52 = alloca i64, align 8
  %indirectarg53 = alloca %"char[]", align 8
  %indirectarg54 = alloca %"char[]", align 8
  %indirectarg55 = alloca %"char[]", align 8
  %varargslots56 = alloca [2 x %any], align 16
  %indirectarg59 = alloca %"any[]", align 8
  %taddr65 = alloca i64, align 8
  %taddr66 = alloca i64, align 8
  %indirectarg67 = alloca %"char[]", align 8
  %indirectarg68 = alloca %"char[]", align 8
  %indirectarg69 = alloca %"char[]", align 8
  %varargslots70 = alloca [2 x %any], align 16
  %indirectarg73 = alloca %"any[]", align 8
  %taddr78 = alloca i64, align 8
  %indirectarg79 = alloca %"char[]", align 8
  %indirectarg80 = alloca %"char[]", align 8
  %indirectarg81 = alloca %"char[]", align 8
  %varargslots82 = alloca [1 x %any], align 16
  %indirectarg84 = alloca %"any[]", align 8
  %taddr89 = alloca i64, align 8
  %taddr90 = alloca i64, align 8
  %indirectarg91 = alloca %"char[]", align 8
  %indirectarg92 = alloca %"char[]", align 8
  %indirectarg93 = alloca %"char[]", align 8
  %varargslots94 = alloca [2 x %any], align 16
  %indirectarg97 = alloca %"any[]", align 8
  %cmp.idx = alloca i64, align 8
  %reterr = alloca i64, align 8
  %indirectarg112 = alloca %"char[]", align 8
  %indirectarg113 = alloca %"char[]", align 8
  %indirectarg114 = alloca %"char[]", align 8
    #dbg_declare(ptr %1, !470, !DIExpression(), !471)
    #dbg_declare(ptr %2, !472, !DIExpression(), !471)
  %ptradd = getelementptr inbounds i8, ptr %2, i64 8, !dbg !473
  %3 = load i64, ptr %ptradd, align 8, !dbg !473
  %lt = icmp ult i64 0, %3, !dbg !473
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !473

assert_fail:                                      ; preds = %entry
  store %"char[]" { ptr @.panic_msg.34, i64 71 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.50, i64 8 }, ptr %indirectarg2, align 8
  %4 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %4(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 552) #6, !dbg !473
  unreachable, !dbg !473

assert_ok:                                        ; preds = %entry
    #dbg_declare(ptr %needed, !475, !DIExpression(), !476)
  %ptradd3 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !476
  %5 = load i64, ptr %ptradd3, align 8, !dbg !476
  store i64 %5, ptr %needed, align 8, !dbg !476
  %6 = load i64, ptr %needed, align 8, !dbg !477
  %lt4 = icmp ult i64 0, %6, !dbg !477
  br i1 %lt4, label %and.rhs, label %and.phi, !dbg !477

and.rhs:                                          ; preds = %assert_ok
  %ptradd5 = getelementptr inbounds i8, ptr %1, i64 8, !dbg !477
  %7 = load i64, ptr %ptradd5, align 8, !dbg !477
  %8 = load i64, ptr %needed, align 8, !dbg !477
  %ge = icmp uge i64 %7, %8, !dbg !477
  br label %and.phi, !dbg !477

and.phi:                                          ; preds = %and.rhs, %assert_ok
  %val = phi i1 [ false, %assert_ok ], [ %ge, %and.rhs ], !dbg !477
  br i1 %val, label %if.then, label %if.exit116, !dbg !477

if.then:                                          ; preds = %and.phi
    #dbg_declare(ptr %first, !478, !DIExpression(), !480)
  %ptradd6 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !480
  %9 = load i64, ptr %ptradd6, align 8, !dbg !480
  %10 = load ptr, ptr %2, align 8, !dbg !480
  %ge7 = icmp sge i64 0, %9, !dbg !480
  %11 = call i1 @llvm.expect.i1(i1 %ge7, i1 false), !dbg !480
  br i1 %11, label %panic, label %checkok, !dbg !480

checkok:                                          ; preds = %if.then
  %12 = load i8, ptr %10, align 1, !dbg !480
  store i8 %12, ptr %first, align 1, !dbg !480
  %13 = load %"char[]", ptr %1, align 8, !dbg !481
  %14 = extractvalue %"char[]" %13, 0, !dbg !481
  %15 = extractvalue %"char[]" %13, 1, !dbg !481
  %gt = icmp ugt i64 0, %15, !dbg !481
  %16 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !481
  br i1 %16, label %panic14, label %checkok24, !dbg !481

checkok24:                                        ; preds = %checkok
  %17 = load i64, ptr %needed, align 8, !dbg !481
  %sub = sub i64 %15, %17, !dbg !481
  %gt25 = icmp ugt i64 0, %sub, !dbg !481
  %18 = call i1 @llvm.expect.i1(i1 %gt25, i1 false), !dbg !481
  br i1 %18, label %panic26, label %checkok36, !dbg !481

checkok36:                                        ; preds = %checkok24
  %le = icmp ule i64 %15, %sub, !dbg !481
  %19 = call i1 @llvm.expect.i1(i1 %le, i1 false), !dbg !481
  br i1 %19, label %panic37, label %checkok47, !dbg !481

checkok47:                                        ; preds = %checkok36
  %20 = add i64 %sub, 1, !dbg !481
  %size = sub i64 %20, 0, !dbg !481
  %21 = insertvalue %"char[]" undef, ptr %14, 0, !dbg !481
  %22 = insertvalue %"char[]" %21, i64 %size, 1, !dbg !481
  %23 = extractvalue %"char[]" %22, 1, !dbg !481
    #dbg_declare(ptr %.anon, !483, !DIExpression(), !481)
  store i64 0, ptr %.anon, align 8, !dbg !481
  br label %loop.cond, !dbg !481

loop.cond:                                        ; preds = %if.exit, %checkok47
  %24 = load i64, ptr %.anon, align 8, !dbg !481
  %lt48 = icmp ult i64 %24, %23, !dbg !481
  br i1 %lt48, label %loop.body, label %loop.exit, !dbg !481

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %i, !484, !DIExpression(), !486)
  %25 = load i64, ptr %.anon, align 8, !dbg !486
  store i64 %25, ptr %i, align 8, !dbg !486
    #dbg_declare(ptr %c, !487, !DIExpression(), !486)
  %26 = extractvalue %"char[]" %22, 1, !dbg !486
  %27 = extractvalue %"char[]" %22, 0, !dbg !486
  %28 = load i64, ptr %.anon, align 8, !dbg !486
  %ge49 = icmp uge i64 %28, %26, !dbg !486
  %29 = call i1 @llvm.expect.i1(i1 %ge49, i1 false), !dbg !486
  br i1 %29, label %panic50, label %checkok60, !dbg !486

checkok60:                                        ; preds = %loop.body
  %ptradd61 = getelementptr inbounds i8, ptr %27, i64 %28, !dbg !486
  %30 = load i8, ptr %ptradd61, align 1, !dbg !486
  store i8 %30, ptr %c, align 1, !dbg !486
  %31 = load i8, ptr %c, align 1, !dbg !488
  %32 = load i8, ptr %first, align 1, !dbg !488
  %eq = icmp eq i8 %31, %32, !dbg !488
  br i1 %eq, label %and.rhs62, label %and.phi106, !dbg !488

and.rhs62:                                        ; preds = %checkok60
  %33 = load %"char[]", ptr %1, align 8, !dbg !488
  %34 = extractvalue %"char[]" %33, 0, !dbg !488
  %35 = load i64, ptr %i, align 8, !dbg !488
  %36 = extractvalue %"char[]" %33, 1, !dbg !488
  %gt63 = icmp ugt i64 %35, %36, !dbg !488
  %37 = call i1 @llvm.expect.i1(i1 %gt63, i1 false), !dbg !488
  br i1 %37, label %panic64, label %checkok74, !dbg !488

checkok74:                                        ; preds = %and.rhs62
  %38 = load i64, ptr %needed, align 8, !dbg !488
  %add = add i64 %35, %38, !dbg !488
  %gt75 = icmp ugt i64 %35, %add, !dbg !488
  %sub76 = sub i64 %add, %35, !dbg !488
  %39 = call i1 @llvm.expect.i1(i1 %gt75, i1 false), !dbg !488
  br i1 %39, label %panic77, label %checkok85, !dbg !488

checkok85:                                        ; preds = %checkok74
  %lt86 = icmp ult i64 %36, %add, !dbg !488
  %sub87 = sub i64 %add, 1, !dbg !488
  %40 = call i1 @llvm.expect.i1(i1 %lt86, i1 false), !dbg !488
  br i1 %40, label %panic88, label %checkok98, !dbg !488

checkok98:                                        ; preds = %checkok85
  %size99 = sub i64 %add, %35, !dbg !488
  %ptradd100 = getelementptr inbounds i8, ptr %34, i64 %35, !dbg !488
  %41 = insertvalue %"char[]" undef, ptr %ptradd100, 0, !dbg !488
  %42 = insertvalue %"char[]" %41, i64 %size99, 1, !dbg !488
  %43 = load %"char[]", ptr %2, align 8, !dbg !488
  %44 = extractvalue %"char[]" %42, 1, !dbg !488
  %45 = extractvalue %"char[]" %43, 1, !dbg !488
  %46 = extractvalue %"char[]" %42, 0, !dbg !488
  %47 = extractvalue %"char[]" %43, 0, !dbg !488
  %eq101 = icmp eq i64 %44, %45, !dbg !488
  br i1 %eq101, label %slice_cmp_values, label %slice_cmp_exit, !dbg !488

slice_cmp_values:                                 ; preds = %checkok98
  store i64 0, ptr %cmp.idx, align 8
  br label %slice_loop_start

slice_loop_start:                                 ; preds = %slice_loop_comparison, %slice_cmp_values
  %48 = load i64, ptr %cmp.idx, align 8
  %lt102 = icmp slt i64 %48, %44
  br i1 %lt102, label %slice_loop_comparison, label %slice_cmp_exit

slice_loop_comparison:                            ; preds = %slice_loop_start
  %ptradd103 = getelementptr inbounds i8, ptr %46, i64 %48
  %ptradd104 = getelementptr inbounds i8, ptr %47, i64 %48
  %49 = load i8, ptr %ptradd103, align 1
  %50 = load i8, ptr %ptradd104, align 1
  %eq105 = icmp eq i8 %49, %50
  %51 = add i64 %48, 1
  store i64 %51, ptr %cmp.idx, align 8
  br i1 %eq105, label %slice_loop_start, label %slice_cmp_exit

slice_cmp_exit:                                   ; preds = %slice_loop_comparison, %slice_loop_start, %checkok98
  %slice_cmp_phi = phi i1 [ true, %slice_loop_start ], [ false, %checkok98 ], [ false, %slice_loop_comparison ]
  br label %and.phi106

and.phi106:                                       ; preds = %slice_cmp_exit, %checkok60
  %val107 = phi i1 [ false, %checkok60 ], [ %slice_cmp_phi, %slice_cmp_exit ]
  br i1 %val107, label %if.then108, label %if.exit

if.then108:                                       ; preds = %and.phi106
  %52 = load i64, ptr %i, align 8, !dbg !488
  %53 = load i64, ptr %i, align 8, !dbg !490
  %ptradd109 = getelementptr inbounds i8, ptr %1, i64 8, !dbg !490
  %54 = load i64, ptr %ptradd109, align 8, !dbg !490
  %lt110 = icmp ult i64 %53, %54, !dbg !488
  br i1 %lt110, label %assert_ok115, label %assert_fail111, !dbg !488

assert_fail111:                                   ; preds = %if.then108
  store %"char[]" { ptr @.panic_msg.46, i64 37 }, ptr %indirectarg112, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg113, align 8
  store %"char[]" { ptr @.func.50, i64 8 }, ptr %indirectarg114, align 8
  %55 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %55(ptr align 8 %indirectarg112, ptr align 8 %indirectarg113, ptr align 8 %indirectarg114, i32 564) #6, !dbg !488
  unreachable, !dbg !488

assert_ok115:                                     ; preds = %if.then108
  store i64 %52, ptr %0, align 8, !dbg !488
  ret i64 0, !dbg !488

if.exit:                                          ; preds = %and.phi106
  %56 = load i64, ptr %.anon, align 8, !dbg !481
  %addnuw = add nuw i64 %56, 1, !dbg !481
  store i64 %addnuw, ptr %.anon, align 8, !dbg !481
  br label %loop.cond, !dbg !481

loop.exit:                                        ; preds = %loop.cond
  br label %if.exit116, !dbg !481

if.exit116:                                       ; preds = %loop.exit, %and.phi
  ret i64 ptrtoint (ptr @std.core.builtin.NOT_FOUND to i64), !dbg !491

panic:                                            ; preds = %if.then
  store i64 %9, ptr %taddr, align 8
  %57 = insertvalue %any undef, ptr %taddr, 0
  %58 = insertvalue %any %57, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr8, align 8
  %59 = insertvalue %any undef, ptr %taddr8, 0
  %60 = insertvalue %any %59, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg9, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.func.50, i64 8 }, ptr %indirectarg11, align 8
  store %any %58, ptr %varargslots, align 16
  %ptradd12 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %60, ptr %ptradd12, align 16
  %61 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %61, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg13, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg9, ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, i32 561, ptr align 8 %indirectarg13) #6, !dbg !480
  unreachable, !dbg !480

panic14:                                          ; preds = %checkok
  store i64 %15, ptr %taddr15, align 8
  %62 = insertvalue %any undef, ptr %taddr15, 0
  %63 = insertvalue %any %62, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr16, align 8
  %64 = insertvalue %any undef, ptr %taddr16, 0
  %65 = insertvalue %any %64, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.12, i64 61 }, ptr %indirectarg17, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg18, align 8
  store %"char[]" { ptr @.func.50, i64 8 }, ptr %indirectarg19, align 8
  store %any %63, ptr %varargslots20, align 16
  %ptradd21 = getelementptr inbounds i8, ptr %varargslots20, i64 16
  store %any %65, ptr %ptradd21, align 16
  %66 = insertvalue %"any[]" undef, ptr %varargslots20, 0
  %"$$temp22" = insertvalue %"any[]" %66, i64 2, 1
  store %"any[]" %"$$temp22", ptr %indirectarg23, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg17, ptr align 8 %indirectarg18, ptr align 8 %indirectarg19, i32 562, ptr align 8 %indirectarg23) #6, !dbg !481
  unreachable, !dbg !481

panic26:                                          ; preds = %checkok24
  store i64 0, ptr %taddr27, align 8
  %67 = insertvalue %any undef, ptr %taddr27, 0
  %68 = insertvalue %any %67, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %sub, ptr %taddr28, align 8
  %69 = insertvalue %any undef, ptr %taddr28, 0
  %70 = insertvalue %any %69, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.44, i64 44 }, ptr %indirectarg29, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg30, align 8
  store %"char[]" { ptr @.func.50, i64 8 }, ptr %indirectarg31, align 8
  store %any %68, ptr %varargslots32, align 16
  %ptradd33 = getelementptr inbounds i8, ptr %varargslots32, i64 16
  store %any %70, ptr %ptradd33, align 16
  %71 = insertvalue %"any[]" undef, ptr %varargslots32, 0
  %"$$temp34" = insertvalue %"any[]" %71, i64 2, 1
  store %"any[]" %"$$temp34", ptr %indirectarg35, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg29, ptr align 8 %indirectarg30, ptr align 8 %indirectarg31, i32 562, ptr align 8 %indirectarg35) #6, !dbg !481
  unreachable, !dbg !481

panic37:                                          ; preds = %checkok36
  store i64 %sub, ptr %taddr38, align 8
  %72 = insertvalue %any undef, ptr %taddr38, 0
  %73 = insertvalue %any %72, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %15, ptr %taddr39, align 8
  %74 = insertvalue %any undef, ptr %taddr39, 0
  %75 = insertvalue %any %74, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.14, i64 60 }, ptr %indirectarg40, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg41, align 8
  store %"char[]" { ptr @.func.50, i64 8 }, ptr %indirectarg42, align 8
  store %any %73, ptr %varargslots43, align 16
  %ptradd44 = getelementptr inbounds i8, ptr %varargslots43, i64 16
  store %any %75, ptr %ptradd44, align 16
  %76 = insertvalue %"any[]" undef, ptr %varargslots43, 0
  %"$$temp45" = insertvalue %"any[]" %76, i64 2, 1
  store %"any[]" %"$$temp45", ptr %indirectarg46, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg40, ptr align 8 %indirectarg41, ptr align 8 %indirectarg42, i32 562, ptr align 8 %indirectarg46) #6, !dbg !481
  unreachable, !dbg !481

panic50:                                          ; preds = %loop.body
  store i64 %26, ptr %taddr51, align 8
  %77 = insertvalue %any undef, ptr %taddr51, 0
  %78 = insertvalue %any %77, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %28, ptr %taddr52, align 8
  %79 = insertvalue %any undef, ptr %taddr52, 0
  %80 = insertvalue %any %79, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg53, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg54, align 8
  store %"char[]" { ptr @.func.50, i64 8 }, ptr %indirectarg55, align 8
  store %any %78, ptr %varargslots56, align 16
  %ptradd57 = getelementptr inbounds i8, ptr %varargslots56, i64 16
  store %any %80, ptr %ptradd57, align 16
  %81 = insertvalue %"any[]" undef, ptr %varargslots56, 0
  %"$$temp58" = insertvalue %"any[]" %81, i64 2, 1
  store %"any[]" %"$$temp58", ptr %indirectarg59, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg53, ptr align 8 %indirectarg54, ptr align 8 %indirectarg55, i32 562, ptr align 8 %indirectarg59) #6, !dbg !486
  unreachable, !dbg !486

panic64:                                          ; preds = %and.rhs62
  store i64 %36, ptr %taddr65, align 8
  %82 = insertvalue %any undef, ptr %taddr65, 0
  %83 = insertvalue %any %82, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %35, ptr %taddr66, align 8
  %84 = insertvalue %any undef, ptr %taddr66, 0
  %85 = insertvalue %any %84, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.12, i64 61 }, ptr %indirectarg67, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg68, align 8
  store %"char[]" { ptr @.func.50, i64 8 }, ptr %indirectarg69, align 8
  store %any %83, ptr %varargslots70, align 16
  %ptradd71 = getelementptr inbounds i8, ptr %varargslots70, i64 16
  store %any %85, ptr %ptradd71, align 16
  %86 = insertvalue %"any[]" undef, ptr %varargslots70, 0
  %"$$temp72" = insertvalue %"any[]" %86, i64 2, 1
  store %"any[]" %"$$temp72", ptr %indirectarg73, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg67, ptr align 8 %indirectarg68, ptr align 8 %indirectarg69, i32 564, ptr align 8 %indirectarg73) #6, !dbg !488
  unreachable, !dbg !488

panic77:                                          ; preds = %checkok74
  store i64 %sub76, ptr %taddr78, align 8
  %87 = insertvalue %any undef, ptr %taddr78, 0
  %88 = insertvalue %any %87, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.10, i64 43 }, ptr %indirectarg79, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg80, align 8
  store %"char[]" { ptr @.func.50, i64 8 }, ptr %indirectarg81, align 8
  store %any %88, ptr %varargslots82, align 16
  %89 = insertvalue %"any[]" undef, ptr %varargslots82, 0
  %"$$temp83" = insertvalue %"any[]" %89, i64 1, 1
  store %"any[]" %"$$temp83", ptr %indirectarg84, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg79, ptr align 8 %indirectarg80, ptr align 8 %indirectarg81, i32 564, ptr align 8 %indirectarg84) #6, !dbg !488
  unreachable, !dbg !488

panic88:                                          ; preds = %checkok85
  store i64 %sub87, ptr %taddr89, align 8
  %90 = insertvalue %any undef, ptr %taddr89, 0
  %91 = insertvalue %any %90, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %36, ptr %taddr90, align 8
  %92 = insertvalue %any undef, ptr %taddr90, 0
  %93 = insertvalue %any %92, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.14, i64 60 }, ptr %indirectarg91, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg92, align 8
  store %"char[]" { ptr @.func.50, i64 8 }, ptr %indirectarg93, align 8
  store %any %91, ptr %varargslots94, align 16
  %ptradd95 = getelementptr inbounds i8, ptr %varargslots94, i64 16
  store %any %93, ptr %ptradd95, align 16
  %94 = insertvalue %"any[]" undef, ptr %varargslots94, 0
  %"$$temp96" = insertvalue %"any[]" %94, i64 2, 1
  store %"any[]" %"$$temp96", ptr %indirectarg97, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg91, ptr align 8 %indirectarg92, ptr align 8 %indirectarg93, i32 564, ptr align 8 %indirectarg97) #6, !dbg !488
  unreachable, !dbg !488
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.core.String.rindex_of(ptr %0, ptr align 8 %1, ptr align 8 %2) #0 comdat !dbg !492 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %needed = alloca i64, align 8
  %first = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr8 = alloca i64, align 8
  %indirectarg9 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg13 = alloca %"any[]", align 8
  %taddr15 = alloca i64, align 8
  %taddr16 = alloca i64, align 8
  %indirectarg17 = alloca %"char[]", align 8
  %indirectarg18 = alloca %"char[]", align 8
  %indirectarg19 = alloca %"char[]", align 8
  %varargslots20 = alloca [2 x %any], align 16
  %indirectarg23 = alloca %"any[]", align 8
  %taddr27 = alloca i64, align 8
  %taddr28 = alloca i64, align 8
  %indirectarg29 = alloca %"char[]", align 8
  %indirectarg30 = alloca %"char[]", align 8
  %indirectarg31 = alloca %"char[]", align 8
  %varargslots32 = alloca [2 x %any], align 16
  %indirectarg35 = alloca %"any[]", align 8
  %taddr38 = alloca i64, align 8
  %taddr39 = alloca i64, align 8
  %indirectarg40 = alloca %"char[]", align 8
  %indirectarg41 = alloca %"char[]", align 8
  %indirectarg42 = alloca %"char[]", align 8
  %varargslots43 = alloca [2 x %any], align 16
  %indirectarg46 = alloca %"any[]", align 8
  %.anon = alloca i64, align 8
  %i = alloca i64, align 8
  %c = alloca i8, align 1
  %taddr51 = alloca i64, align 8
  %taddr52 = alloca i64, align 8
  %indirectarg53 = alloca %"char[]", align 8
  %indirectarg54 = alloca %"char[]", align 8
  %indirectarg55 = alloca %"char[]", align 8
  %varargslots56 = alloca [2 x %any], align 16
  %indirectarg59 = alloca %"any[]", align 8
  %taddr65 = alloca i64, align 8
  %taddr66 = alloca i64, align 8
  %indirectarg67 = alloca %"char[]", align 8
  %indirectarg68 = alloca %"char[]", align 8
  %indirectarg69 = alloca %"char[]", align 8
  %varargslots70 = alloca [2 x %any], align 16
  %indirectarg73 = alloca %"any[]", align 8
  %taddr78 = alloca i64, align 8
  %indirectarg79 = alloca %"char[]", align 8
  %indirectarg80 = alloca %"char[]", align 8
  %indirectarg81 = alloca %"char[]", align 8
  %varargslots82 = alloca [1 x %any], align 16
  %indirectarg84 = alloca %"any[]", align 8
  %taddr89 = alloca i64, align 8
  %taddr90 = alloca i64, align 8
  %indirectarg91 = alloca %"char[]", align 8
  %indirectarg92 = alloca %"char[]", align 8
  %indirectarg93 = alloca %"char[]", align 8
  %varargslots94 = alloca [2 x %any], align 16
  %indirectarg97 = alloca %"any[]", align 8
  %cmp.idx = alloca i64, align 8
  %reterr = alloca i64, align 8
  %indirectarg112 = alloca %"char[]", align 8
  %indirectarg113 = alloca %"char[]", align 8
  %indirectarg114 = alloca %"char[]", align 8
    #dbg_declare(ptr %1, !493, !DIExpression(), !494)
    #dbg_declare(ptr %2, !495, !DIExpression(), !494)
  %ptradd = getelementptr inbounds i8, ptr %2, i64 8, !dbg !496
  %3 = load i64, ptr %ptradd, align 8, !dbg !496
  %lt = icmp ult i64 0, %3, !dbg !496
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !496

assert_fail:                                      ; preds = %entry
  store %"char[]" { ptr @.panic_msg.51, i64 74 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.52, i64 9 }, ptr %indirectarg2, align 8
  %4 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %4(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 577) #6, !dbg !496
  unreachable, !dbg !496

assert_ok:                                        ; preds = %entry
    #dbg_declare(ptr %needed, !498, !DIExpression(), !499)
  %ptradd3 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !499
  %5 = load i64, ptr %ptradd3, align 8, !dbg !499
  store i64 %5, ptr %needed, align 8, !dbg !499
  %6 = load i64, ptr %needed, align 8, !dbg !500
  %lt4 = icmp ult i64 0, %6, !dbg !500
  br i1 %lt4, label %and.rhs, label %and.phi, !dbg !500

and.rhs:                                          ; preds = %assert_ok
  %ptradd5 = getelementptr inbounds i8, ptr %1, i64 8, !dbg !500
  %7 = load i64, ptr %ptradd5, align 8, !dbg !500
  %8 = load i64, ptr %needed, align 8, !dbg !500
  %ge = icmp uge i64 %7, %8, !dbg !500
  br label %and.phi, !dbg !500

and.phi:                                          ; preds = %and.rhs, %assert_ok
  %val = phi i1 [ false, %assert_ok ], [ %ge, %and.rhs ], !dbg !500
  br i1 %val, label %if.then, label %if.exit116, !dbg !500

if.then:                                          ; preds = %and.phi
    #dbg_declare(ptr %first, !501, !DIExpression(), !503)
  %ptradd6 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !503
  %9 = load i64, ptr %ptradd6, align 8, !dbg !503
  %10 = load ptr, ptr %2, align 8, !dbg !503
  %ge7 = icmp sge i64 0, %9, !dbg !503
  %11 = call i1 @llvm.expect.i1(i1 %ge7, i1 false), !dbg !503
  br i1 %11, label %panic, label %checkok, !dbg !503

checkok:                                          ; preds = %if.then
  %12 = load i8, ptr %10, align 1, !dbg !503
  store i8 %12, ptr %first, align 1, !dbg !503
  %13 = load %"char[]", ptr %1, align 8, !dbg !504
  %14 = extractvalue %"char[]" %13, 0, !dbg !504
  %15 = extractvalue %"char[]" %13, 1, !dbg !504
  %gt = icmp ugt i64 0, %15, !dbg !504
  %16 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !504
  br i1 %16, label %panic14, label %checkok24, !dbg !504

checkok24:                                        ; preds = %checkok
  %17 = load i64, ptr %needed, align 8, !dbg !504
  %sub = sub i64 %15, %17, !dbg !504
  %gt25 = icmp ugt i64 0, %sub, !dbg !504
  %18 = call i1 @llvm.expect.i1(i1 %gt25, i1 false), !dbg !504
  br i1 %18, label %panic26, label %checkok36, !dbg !504

checkok36:                                        ; preds = %checkok24
  %le = icmp ule i64 %15, %sub, !dbg !504
  %19 = call i1 @llvm.expect.i1(i1 %le, i1 false), !dbg !504
  br i1 %19, label %panic37, label %checkok47, !dbg !504

checkok47:                                        ; preds = %checkok36
  %20 = add i64 %sub, 1, !dbg !504
  %size = sub i64 %20, 0, !dbg !504
  %21 = insertvalue %"char[]" undef, ptr %14, 0, !dbg !504
  %22 = insertvalue %"char[]" %21, i64 %size, 1, !dbg !504
    #dbg_declare(ptr %.anon, !506, !DIExpression(), !504)
  %23 = extractvalue %"char[]" %22, 1, !dbg !504
  store i64 %23, ptr %.anon, align 8, !dbg !504
  br label %loop.cond, !dbg !504

loop.cond:                                        ; preds = %if.exit, %checkok47
  %24 = load i64, ptr %.anon, align 8, !dbg !504
  %gt48 = icmp ugt i64 %24, 0, !dbg !504
  br i1 %gt48, label %loop.body, label %loop.exit, !dbg !504

loop.body:                                        ; preds = %loop.cond
  %25 = load i64, ptr %.anon, align 8, !dbg !507
  %subnuw = sub nuw i64 %25, 1, !dbg !507
  store i64 %subnuw, ptr %.anon, align 8, !dbg !507
    #dbg_declare(ptr %i, !509, !DIExpression(), !507)
  %26 = load i64, ptr %.anon, align 8, !dbg !507
  store i64 %26, ptr %i, align 8, !dbg !507
    #dbg_declare(ptr %c, !510, !DIExpression(), !507)
  %27 = extractvalue %"char[]" %22, 1, !dbg !507
  %28 = extractvalue %"char[]" %22, 0, !dbg !507
  %29 = load i64, ptr %.anon, align 8, !dbg !507
  %ge49 = icmp uge i64 %29, %27, !dbg !507
  %30 = call i1 @llvm.expect.i1(i1 %ge49, i1 false), !dbg !507
  br i1 %30, label %panic50, label %checkok60, !dbg !507

checkok60:                                        ; preds = %loop.body
  %ptradd61 = getelementptr inbounds i8, ptr %28, i64 %29, !dbg !507
  %31 = load i8, ptr %ptradd61, align 1, !dbg !507
  store i8 %31, ptr %c, align 1, !dbg !507
  %32 = load i8, ptr %c, align 1, !dbg !511
  %33 = load i8, ptr %first, align 1, !dbg !511
  %eq = icmp eq i8 %32, %33, !dbg !511
  br i1 %eq, label %and.rhs62, label %and.phi106, !dbg !511

and.rhs62:                                        ; preds = %checkok60
  %34 = load %"char[]", ptr %1, align 8, !dbg !511
  %35 = extractvalue %"char[]" %34, 0, !dbg !511
  %36 = load i64, ptr %i, align 8, !dbg !511
  %37 = extractvalue %"char[]" %34, 1, !dbg !511
  %gt63 = icmp ugt i64 %36, %37, !dbg !511
  %38 = call i1 @llvm.expect.i1(i1 %gt63, i1 false), !dbg !511
  br i1 %38, label %panic64, label %checkok74, !dbg !511

checkok74:                                        ; preds = %and.rhs62
  %39 = load i64, ptr %needed, align 8, !dbg !511
  %add = add i64 %36, %39, !dbg !511
  %gt75 = icmp ugt i64 %36, %add, !dbg !511
  %sub76 = sub i64 %add, %36, !dbg !511
  %40 = call i1 @llvm.expect.i1(i1 %gt75, i1 false), !dbg !511
  br i1 %40, label %panic77, label %checkok85, !dbg !511

checkok85:                                        ; preds = %checkok74
  %lt86 = icmp ult i64 %37, %add, !dbg !511
  %sub87 = sub i64 %add, 1, !dbg !511
  %41 = call i1 @llvm.expect.i1(i1 %lt86, i1 false), !dbg !511
  br i1 %41, label %panic88, label %checkok98, !dbg !511

checkok98:                                        ; preds = %checkok85
  %size99 = sub i64 %add, %36, !dbg !511
  %ptradd100 = getelementptr inbounds i8, ptr %35, i64 %36, !dbg !511
  %42 = insertvalue %"char[]" undef, ptr %ptradd100, 0, !dbg !511
  %43 = insertvalue %"char[]" %42, i64 %size99, 1, !dbg !511
  %44 = load %"char[]", ptr %2, align 8, !dbg !511
  %45 = extractvalue %"char[]" %43, 1, !dbg !511
  %46 = extractvalue %"char[]" %44, 1, !dbg !511
  %47 = extractvalue %"char[]" %43, 0, !dbg !511
  %48 = extractvalue %"char[]" %44, 0, !dbg !511
  %eq101 = icmp eq i64 %45, %46, !dbg !511
  br i1 %eq101, label %slice_cmp_values, label %slice_cmp_exit, !dbg !511

slice_cmp_values:                                 ; preds = %checkok98
  store i64 0, ptr %cmp.idx, align 8
  br label %slice_loop_start

slice_loop_start:                                 ; preds = %slice_loop_comparison, %slice_cmp_values
  %49 = load i64, ptr %cmp.idx, align 8
  %lt102 = icmp slt i64 %49, %45
  br i1 %lt102, label %slice_loop_comparison, label %slice_cmp_exit

slice_loop_comparison:                            ; preds = %slice_loop_start
  %ptradd103 = getelementptr inbounds i8, ptr %47, i64 %49
  %ptradd104 = getelementptr inbounds i8, ptr %48, i64 %49
  %50 = load i8, ptr %ptradd103, align 1
  %51 = load i8, ptr %ptradd104, align 1
  %eq105 = icmp eq i8 %50, %51
  %52 = add i64 %49, 1
  store i64 %52, ptr %cmp.idx, align 8
  br i1 %eq105, label %slice_loop_start, label %slice_cmp_exit

slice_cmp_exit:                                   ; preds = %slice_loop_comparison, %slice_loop_start, %checkok98
  %slice_cmp_phi = phi i1 [ true, %slice_loop_start ], [ false, %checkok98 ], [ false, %slice_loop_comparison ]
  br label %and.phi106

and.phi106:                                       ; preds = %slice_cmp_exit, %checkok60
  %val107 = phi i1 [ false, %checkok60 ], [ %slice_cmp_phi, %slice_cmp_exit ]
  br i1 %val107, label %if.then108, label %if.exit

if.then108:                                       ; preds = %and.phi106
  %53 = load i64, ptr %i, align 8, !dbg !511
  %54 = load i64, ptr %i, align 8, !dbg !513
  %ptradd109 = getelementptr inbounds i8, ptr %1, i64 8, !dbg !513
  %55 = load i64, ptr %ptradd109, align 8, !dbg !513
  %lt110 = icmp ult i64 %54, %55, !dbg !511
  br i1 %lt110, label %assert_ok115, label %assert_fail111, !dbg !511

assert_fail111:                                   ; preds = %if.then108
  store %"char[]" { ptr @.panic_msg.46, i64 37 }, ptr %indirectarg112, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg113, align 8
  store %"char[]" { ptr @.func.52, i64 9 }, ptr %indirectarg114, align 8
  %56 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %56(ptr align 8 %indirectarg112, ptr align 8 %indirectarg113, ptr align 8 %indirectarg114, i32 589) #6, !dbg !511
  unreachable, !dbg !511

assert_ok115:                                     ; preds = %if.then108
  store i64 %53, ptr %0, align 8, !dbg !511
  ret i64 0, !dbg !511

if.exit:                                          ; preds = %and.phi106
  br label %loop.cond, !dbg !511

loop.exit:                                        ; preds = %loop.cond
  br label %if.exit116, !dbg !511

if.exit116:                                       ; preds = %loop.exit, %and.phi
  ret i64 ptrtoint (ptr @std.core.builtin.NOT_FOUND to i64), !dbg !514

panic:                                            ; preds = %if.then
  store i64 %9, ptr %taddr, align 8
  %57 = insertvalue %any undef, ptr %taddr, 0
  %58 = insertvalue %any %57, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr8, align 8
  %59 = insertvalue %any undef, ptr %taddr8, 0
  %60 = insertvalue %any %59, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg9, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.func.52, i64 9 }, ptr %indirectarg11, align 8
  store %any %58, ptr %varargslots, align 16
  %ptradd12 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %60, ptr %ptradd12, align 16
  %61 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %61, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg13, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg9, ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, i32 586, ptr align 8 %indirectarg13) #6, !dbg !503
  unreachable, !dbg !503

panic14:                                          ; preds = %checkok
  store i64 %15, ptr %taddr15, align 8
  %62 = insertvalue %any undef, ptr %taddr15, 0
  %63 = insertvalue %any %62, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr16, align 8
  %64 = insertvalue %any undef, ptr %taddr16, 0
  %65 = insertvalue %any %64, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.12, i64 61 }, ptr %indirectarg17, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg18, align 8
  store %"char[]" { ptr @.func.52, i64 9 }, ptr %indirectarg19, align 8
  store %any %63, ptr %varargslots20, align 16
  %ptradd21 = getelementptr inbounds i8, ptr %varargslots20, i64 16
  store %any %65, ptr %ptradd21, align 16
  %66 = insertvalue %"any[]" undef, ptr %varargslots20, 0
  %"$$temp22" = insertvalue %"any[]" %66, i64 2, 1
  store %"any[]" %"$$temp22", ptr %indirectarg23, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg17, ptr align 8 %indirectarg18, ptr align 8 %indirectarg19, i32 587, ptr align 8 %indirectarg23) #6, !dbg !504
  unreachable, !dbg !504

panic26:                                          ; preds = %checkok24
  store i64 0, ptr %taddr27, align 8
  %67 = insertvalue %any undef, ptr %taddr27, 0
  %68 = insertvalue %any %67, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %sub, ptr %taddr28, align 8
  %69 = insertvalue %any undef, ptr %taddr28, 0
  %70 = insertvalue %any %69, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.44, i64 44 }, ptr %indirectarg29, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg30, align 8
  store %"char[]" { ptr @.func.52, i64 9 }, ptr %indirectarg31, align 8
  store %any %68, ptr %varargslots32, align 16
  %ptradd33 = getelementptr inbounds i8, ptr %varargslots32, i64 16
  store %any %70, ptr %ptradd33, align 16
  %71 = insertvalue %"any[]" undef, ptr %varargslots32, 0
  %"$$temp34" = insertvalue %"any[]" %71, i64 2, 1
  store %"any[]" %"$$temp34", ptr %indirectarg35, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg29, ptr align 8 %indirectarg30, ptr align 8 %indirectarg31, i32 587, ptr align 8 %indirectarg35) #6, !dbg !504
  unreachable, !dbg !504

panic37:                                          ; preds = %checkok36
  store i64 %sub, ptr %taddr38, align 8
  %72 = insertvalue %any undef, ptr %taddr38, 0
  %73 = insertvalue %any %72, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %15, ptr %taddr39, align 8
  %74 = insertvalue %any undef, ptr %taddr39, 0
  %75 = insertvalue %any %74, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.14, i64 60 }, ptr %indirectarg40, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg41, align 8
  store %"char[]" { ptr @.func.52, i64 9 }, ptr %indirectarg42, align 8
  store %any %73, ptr %varargslots43, align 16
  %ptradd44 = getelementptr inbounds i8, ptr %varargslots43, i64 16
  store %any %75, ptr %ptradd44, align 16
  %76 = insertvalue %"any[]" undef, ptr %varargslots43, 0
  %"$$temp45" = insertvalue %"any[]" %76, i64 2, 1
  store %"any[]" %"$$temp45", ptr %indirectarg46, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg40, ptr align 8 %indirectarg41, ptr align 8 %indirectarg42, i32 587, ptr align 8 %indirectarg46) #6, !dbg !504
  unreachable, !dbg !504

panic50:                                          ; preds = %loop.body
  store i64 %27, ptr %taddr51, align 8
  %77 = insertvalue %any undef, ptr %taddr51, 0
  %78 = insertvalue %any %77, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %29, ptr %taddr52, align 8
  %79 = insertvalue %any undef, ptr %taddr52, 0
  %80 = insertvalue %any %79, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg53, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg54, align 8
  store %"char[]" { ptr @.func.52, i64 9 }, ptr %indirectarg55, align 8
  store %any %78, ptr %varargslots56, align 16
  %ptradd57 = getelementptr inbounds i8, ptr %varargslots56, i64 16
  store %any %80, ptr %ptradd57, align 16
  %81 = insertvalue %"any[]" undef, ptr %varargslots56, 0
  %"$$temp58" = insertvalue %"any[]" %81, i64 2, 1
  store %"any[]" %"$$temp58", ptr %indirectarg59, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg53, ptr align 8 %indirectarg54, ptr align 8 %indirectarg55, i32 587, ptr align 8 %indirectarg59) #6, !dbg !507
  unreachable, !dbg !507

panic64:                                          ; preds = %and.rhs62
  store i64 %37, ptr %taddr65, align 8
  %82 = insertvalue %any undef, ptr %taddr65, 0
  %83 = insertvalue %any %82, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %36, ptr %taddr66, align 8
  %84 = insertvalue %any undef, ptr %taddr66, 0
  %85 = insertvalue %any %84, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.12, i64 61 }, ptr %indirectarg67, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg68, align 8
  store %"char[]" { ptr @.func.52, i64 9 }, ptr %indirectarg69, align 8
  store %any %83, ptr %varargslots70, align 16
  %ptradd71 = getelementptr inbounds i8, ptr %varargslots70, i64 16
  store %any %85, ptr %ptradd71, align 16
  %86 = insertvalue %"any[]" undef, ptr %varargslots70, 0
  %"$$temp72" = insertvalue %"any[]" %86, i64 2, 1
  store %"any[]" %"$$temp72", ptr %indirectarg73, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg67, ptr align 8 %indirectarg68, ptr align 8 %indirectarg69, i32 589, ptr align 8 %indirectarg73) #6, !dbg !511
  unreachable, !dbg !511

panic77:                                          ; preds = %checkok74
  store i64 %sub76, ptr %taddr78, align 8
  %87 = insertvalue %any undef, ptr %taddr78, 0
  %88 = insertvalue %any %87, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.10, i64 43 }, ptr %indirectarg79, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg80, align 8
  store %"char[]" { ptr @.func.52, i64 9 }, ptr %indirectarg81, align 8
  store %any %88, ptr %varargslots82, align 16
  %89 = insertvalue %"any[]" undef, ptr %varargslots82, 0
  %"$$temp83" = insertvalue %"any[]" %89, i64 1, 1
  store %"any[]" %"$$temp83", ptr %indirectarg84, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg79, ptr align 8 %indirectarg80, ptr align 8 %indirectarg81, i32 589, ptr align 8 %indirectarg84) #6, !dbg !511
  unreachable, !dbg !511

panic88:                                          ; preds = %checkok85
  store i64 %sub87, ptr %taddr89, align 8
  %90 = insertvalue %any undef, ptr %taddr89, 0
  %91 = insertvalue %any %90, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %37, ptr %taddr90, align 8
  %92 = insertvalue %any undef, ptr %taddr90, 0
  %93 = insertvalue %any %92, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.14, i64 60 }, ptr %indirectarg91, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg92, align 8
  store %"char[]" { ptr @.func.52, i64 9 }, ptr %indirectarg93, align 8
  store %any %91, ptr %varargslots94, align 16
  %ptradd95 = getelementptr inbounds i8, ptr %varargslots94, i64 16
  store %any %93, ptr %ptradd95, align 16
  %94 = insertvalue %"any[]" undef, ptr %varargslots94, 0
  %"$$temp96" = insertvalue %"any[]" %94, i64 2, 1
  store %"any[]" %"$$temp96", ptr %indirectarg97, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg91, ptr align 8 %indirectarg92, ptr align 8 %indirectarg93, i32 589, ptr align 8 %indirectarg97) #6, !dbg !511
  unreachable, !dbg !511
}

; Function Attrs: nounwind ssp uwtable
define weak_odr zeroext i8 @std.core.string.ZString.eq(ptr %0, ptr %1) #0 comdat !dbg !515 {
entry:
  %self = alloca ptr, align 8
  %other = alloca ptr, align 8
  %a = alloca ptr, align 8
  %b = alloca ptr, align 8
  %c = alloca i8, align 1
  %indirectarg = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !519, !DIExpression(), !520)
  store ptr %1, ptr %other, align 8
    #dbg_declare(ptr %other, !521, !DIExpression(), !520)
    #dbg_declare(ptr %a, !522, !DIExpression(), !523)
  %2 = load ptr, ptr %self, align 8, !dbg !523
  store ptr %2, ptr %a, align 8, !dbg !523
    #dbg_declare(ptr %b, !524, !DIExpression(), !525)
  %3 = load ptr, ptr %other, align 8, !dbg !525
  store ptr %3, ptr %b, align 8, !dbg !525
  %4 = load ptr, ptr %a, align 8, !dbg !526
  %5 = load ptr, ptr %b, align 8, !dbg !526
  %eq = icmp eq ptr %4, %5, !dbg !526
  br i1 %eq, label %if.then, label %if.exit, !dbg !526

if.then:                                          ; preds = %entry
  ret i8 1, !dbg !526

if.exit:                                          ; preds = %entry
  %6 = load ptr, ptr %a, align 8, !dbg !527
  %i2nb = icmp eq ptr %6, null, !dbg !527
  br i1 %i2nb, label %or.phi, label %or.rhs, !dbg !527

or.rhs:                                           ; preds = %if.exit
  %7 = load ptr, ptr %b, align 8, !dbg !527
  %i2nb1 = icmp eq ptr %7, null, !dbg !527
  br label %or.phi, !dbg !527

or.phi:                                           ; preds = %or.rhs, %if.exit
  %val = phi i1 [ true, %if.exit ], [ %i2nb1, %or.rhs ], !dbg !527
  br i1 %val, label %if.then2, label %if.exit3, !dbg !527

if.then2:                                         ; preds = %or.phi
  ret i8 0, !dbg !527

if.exit3:                                         ; preds = %or.phi
  br label %loop.body, !dbg !528

loop.body:                                        ; preds = %if.exit16, %if.exit3
    #dbg_declare(ptr %c, !529, !DIExpression(), !532)
  %8 = load ptr, ptr %a, align 8, !dbg !532
  %checknull = icmp eq ptr %8, null, !dbg !532
  %9 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !532
  br i1 %9, label %panic, label %checkok, !dbg !532

checkok:                                          ; preds = %loop.body
  %10 = load i8, ptr %8, align 1, !dbg !532
  store i8 %10, ptr %c, align 1, !dbg !532
  %11 = load i8, ptr %c, align 1, !dbg !533
  %12 = load ptr, ptr %b, align 8, !dbg !533
  %checknull6 = icmp eq ptr %12, null, !dbg !533
  %13 = call i1 @llvm.expect.i1(i1 %checknull6, i1 false), !dbg !533
  br i1 %13, label %panic7, label %checkok11, !dbg !533

checkok11:                                        ; preds = %checkok
  %14 = load i8, ptr %12, align 1, !dbg !533
  %neq = icmp ne i8 %11, %14, !dbg !533
  br i1 %neq, label %if.then12, label %if.exit13, !dbg !533

if.then12:                                        ; preds = %checkok11
  ret i8 0, !dbg !533

if.exit13:                                        ; preds = %checkok11
  %15 = load i8, ptr %c, align 1, !dbg !534
  %i2nb14 = icmp eq i8 %15, 0, !dbg !534
  br i1 %i2nb14, label %if.then15, label %if.exit16, !dbg !534

if.then15:                                        ; preds = %if.exit13
  ret i8 1, !dbg !534

if.exit16:                                        ; preds = %if.exit13
  %16 = load ptr, ptr %a, align 8, !dbg !535
  %ptradd_any = getelementptr i8, ptr %16, i64 1, !dbg !535
  store ptr %ptradd_any, ptr %a, align 8, !dbg !535
  %17 = load ptr, ptr %b, align 8, !dbg !535
  %ptradd_any17 = getelementptr i8, ptr %17, i64 1, !dbg !535
  store ptr %ptradd_any17, ptr %b, align 8, !dbg !535
  br label %loop.body, !dbg !535

panic:                                            ; preds = %loop.body
  store %"char[]" { ptr @.panic_msg.53, i64 42 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.func.54, i64 2 }, ptr %indirectarg5, align 8
  %18 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %18(ptr align 8 %indirectarg, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, i32 603) #6, !dbg !532
  unreachable, !dbg !532

panic7:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.55, i64 42 }, ptr %indirectarg8, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg9, align 8
  store %"char[]" { ptr @.func.54, i64 2 }, ptr %indirectarg10, align 8
  %19 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %19(ptr align 8 %indirectarg8, ptr align 8 %indirectarg9, ptr align 8 %indirectarg10, i32 604) #6, !dbg !533
  unreachable, !dbg !533
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.core.string.ZString.str_view(ptr noalias sret(%"char[]") align 8 %0, ptr %1) #0 comdat !dbg !536 {
entry:
  %self = alloca ptr, align 8
  %taddr = alloca i64, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg3 = alloca %"any[]", align 8
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !539, !DIExpression(), !540)
  %2 = load ptr, ptr %self, align 8, !dbg !541
  %3 = load ptr, ptr %self, align 8, !dbg !541
  %4 = call i64 @std.core.string.ZString.len(ptr %3), !dbg !541
  %add = add i64 0, %4, !dbg !541
  %gt = icmp ugt i64 0, %add, !dbg !541
  %sub = sub i64 %add, 0, !dbg !541
  %5 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !541
  br i1 %5, label %panic, label %checkok, !dbg !541

checkok:                                          ; preds = %entry
  %size = sub i64 %add, 0, !dbg !541
  %6 = insertvalue %"char[]" undef, ptr %2, 0, !dbg !541
  %7 = insertvalue %"char[]" %6, i64 %size, 1, !dbg !541
  store %"char[]" %7, ptr %0, align 8, !dbg !541
  ret void, !dbg !541

panic:                                            ; preds = %entry
  store i64 %sub, ptr %taddr, align 8
  %8 = insertvalue %any undef, ptr %taddr, 0
  %9 = insertvalue %any %8, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.10, i64 43 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.56, i64 8 }, ptr %indirectarg2, align 8
  store %any %9, ptr %varargslots, align 16
  %10 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %10, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg3, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 611, ptr align 8 %indirectarg3) #6, !dbg !541
  unreachable, !dbg !541
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.core.string.ZString.char_len(ptr %0) #0 comdat !dbg !542 {
entry:
  %str = alloca ptr, align 8
  %len = alloca i64, align 8
  %ptr = alloca ptr, align 8
  %c = alloca i8, align 1
  store ptr %0, ptr %str, align 8
    #dbg_declare(ptr %str, !545, !DIExpression(), !546)
    #dbg_declare(ptr %len, !547, !DIExpression(), !548)
  store i64 0, ptr %len, align 8, !dbg !548
    #dbg_declare(ptr %ptr, !549, !DIExpression(), !550)
  %1 = load ptr, ptr %str, align 8, !dbg !550
  store ptr %1, ptr %ptr, align 8, !dbg !550
  br label %loop.cond, !dbg !551

loop.cond:                                        ; preds = %if.exit, %entry
    #dbg_declare(ptr %c, !552, !DIExpression(), !554)
  %2 = load ptr, ptr %ptr, align 8, !dbg !554
  %ptradd_any = getelementptr i8, ptr %2, i64 1, !dbg !554
  store ptr %ptradd_any, ptr %ptr, align 8, !dbg !554
  %3 = load i8, ptr %2, align 1, !dbg !554
  store i8 %3, ptr %c, align 1, !dbg !554
  %i2b = icmp ne i8 %3, 0, !dbg !554
  br i1 %i2b, label %loop.body, label %loop.exit, !dbg !554

loop.body:                                        ; preds = %loop.cond
  %4 = load i8, ptr %c, align 1, !dbg !555
  %zext = zext i8 %4 to i32, !dbg !555
  %and = and i32 %zext, 192, !dbg !555
  %neq = icmp ne i32 %and, 128, !dbg !555
  br i1 %neq, label %if.then, label %if.exit, !dbg !555

if.then:                                          ; preds = %loop.body
  %5 = load i64, ptr %len, align 8, !dbg !555
  %add = add i64 %5, 1, !dbg !555
  store i64 %add, ptr %len, align 8, !dbg !555
  br label %if.exit, !dbg !555

if.exit:                                          ; preds = %if.then, %loop.body
  br label %loop.cond, !dbg !555

loop.exit:                                        ; preds = %loop.cond
  %6 = load i64, ptr %len, align 8, !dbg !557
  ret i64 %6, !dbg !557
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.core.string.ZString.len(ptr %0) #0 comdat !dbg !558 {
entry:
  %self = alloca ptr, align 8
  %len = alloca i64, align 8
  %ptr = alloca ptr, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !559, !DIExpression(), !560)
    #dbg_declare(ptr %len, !561, !DIExpression(), !562)
  store i64 0, ptr %len, align 8, !dbg !562
    #dbg_declare(ptr %ptr, !563, !DIExpression(), !565)
  %1 = load ptr, ptr %self, align 8, !dbg !565
  store ptr %1, ptr %ptr, align 8, !dbg !565
  br label %loop.cond, !dbg !565

loop.cond:                                        ; preds = %loop.body, %entry
  %2 = load ptr, ptr %ptr, align 8, !dbg !565
  %checknull = icmp eq ptr %2, null, !dbg !565
  %3 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !565
  br i1 %3, label %panic, label %checkok, !dbg !565

checkok:                                          ; preds = %loop.cond
  %4 = load i8, ptr %2, align 1, !dbg !565
  %i2b = icmp ne i8 %4, 0, !dbg !565
  br i1 %i2b, label %loop.body, label %loop.exit, !dbg !565

loop.body:                                        ; preds = %checkok
  %5 = load i64, ptr %len, align 8, !dbg !565
  %add = add i64 %5, 1, !dbg !565
  store i64 %add, ptr %len, align 8, !dbg !565
  %6 = load ptr, ptr %ptr, align 8, !dbg !565
  %ptradd_any = getelementptr i8, ptr %6, i64 1, !dbg !565
  store ptr %ptradd_any, ptr %ptr, align 8, !dbg !565
  br label %loop.cond, !dbg !565

loop.exit:                                        ; preds = %checkok
  %7 = load i64, ptr %len, align 8, !dbg !566
  ret i64 %7, !dbg !566

panic:                                            ; preds = %loop.cond
  store %"char[]" { ptr @.panic_msg.57, i64 44 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.58, i64 3 }, ptr %indirectarg2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 628) #6, !dbg !565
  unreachable, !dbg !565
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.core.string.WString.len(ptr %0) #0 comdat !dbg !567 {
entry:
  %self = alloca ptr, align 8
  %len = alloca i64, align 8
  %ptr = alloca ptr, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr4 = alloca i64, align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg7 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg8 = alloca %"any[]", align 8
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !573, !DIExpression(), !574)
    #dbg_declare(ptr %len, !575, !DIExpression(), !576)
  store i64 0, ptr %len, align 8, !dbg !576
    #dbg_declare(ptr %ptr, !577, !DIExpression(), !581)
  %1 = load ptr, ptr %self, align 8, !dbg !581
  store ptr %1, ptr %ptr, align 8, !dbg !581
  br label %loop.cond, !dbg !581

loop.cond:                                        ; preds = %loop.body, %entry
  %2 = load ptr, ptr %ptr, align 8, !dbg !581
  %checknull = icmp eq ptr %2, null, !dbg !581
  %3 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !581
  br i1 %3, label %panic, label %checkok, !dbg !581

checkok:                                          ; preds = %loop.cond
  %4 = ptrtoint ptr %2 to i64, !dbg !581
  %5 = urem i64 %4, 2, !dbg !581
  %6 = icmp ne i64 %5, 0, !dbg !581
  %7 = call i1 @llvm.expect.i1(i1 %6, i1 false), !dbg !581
  br i1 %7, label %panic3, label %checkok9, !dbg !581

checkok9:                                         ; preds = %checkok
  %8 = load i16, ptr %2, align 2, !dbg !581
  %i2b = icmp ne i16 %8, 0, !dbg !581
  br i1 %i2b, label %loop.body, label %loop.exit, !dbg !581

loop.body:                                        ; preds = %checkok9
  %9 = load i64, ptr %len, align 8, !dbg !581
  %add = add i64 %9, 1, !dbg !581
  store i64 %add, ptr %len, align 8, !dbg !581
  %10 = load ptr, ptr %ptr, align 8, !dbg !581
  %ptradd_any = getelementptr i8, ptr %10, i64 2, !dbg !581
  store ptr %ptradd_any, ptr %ptr, align 8, !dbg !581
  br label %loop.cond, !dbg !581

loop.exit:                                        ; preds = %checkok9
  %11 = load i64, ptr %len, align 8, !dbg !582
  ret i64 %11, !dbg !582

panic:                                            ; preds = %loop.cond
  store %"char[]" { ptr @.panic_msg.57, i64 44 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.58, i64 3 }, ptr %indirectarg2, align 8
  %12 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %12(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 635) #6, !dbg !581
  unreachable, !dbg !581

panic3:                                           ; preds = %checkok
  store i64 2, ptr %taddr, align 8
  %13 = insertvalue %any undef, ptr %taddr, 0
  %14 = insertvalue %any %13, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %5, ptr %taddr4, align 8
  %15 = insertvalue %any undef, ptr %taddr4, 0
  %16 = insertvalue %any %15, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 94 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg6, align 8
  store %"char[]" { ptr @.func.58, i64 3 }, ptr %indirectarg7, align 8
  store %any %14, ptr %varargslots, align 16
  %ptradd = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %16, ptr %ptradd, align 16
  %17 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %17, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg8, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, ptr align 8 %indirectarg7, i32 635, ptr align 8 %indirectarg8) #6, !dbg !581
  unreachable, !dbg !581
}

; Function Attrs: nounwind ssp uwtable
define weak_odr ptr @std.core.String.zstr_copy(ptr align 8 %0, ptr align 8 %1) #0 comdat !dbg !583 {
entry:
  %len = alloca i64, align 8
  %str = alloca ptr, align 8
  %allocator = alloca %any, align 8
  %size = alloca i64, align 8
  %error_var = alloca i64, align 8
  %allocator1 = alloca %any, align 8
  %size2 = alloca i64, align 8
  %blockret = alloca ptr, align 8
  %x = alloca i64, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg7 = alloca %"char[]", align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %indirectarg13 = alloca %"char[]", align 8
  %indirectarg14 = alloca %"char[]", align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %indirectarg18 = alloca %"char[]", align 8
  %indirectarg19 = alloca %"char[]", align 8
  %indirectarg20 = alloca %"char[]", align 8
  %retparam = alloca ptr, align 8
  %indirectarg21 = alloca %"char[]", align 8
  %indirectarg22 = alloca %"char[]", align 8
  %indirectarg23 = alloca %"char[]", align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg24 = alloca %"any[]", align 8
  %dst = alloca ptr, align 8
  %src = alloca ptr, align 8
  %len25 = alloca i64, align 8
  %indirectarg28 = alloca %"char[]", align 8
  %indirectarg29 = alloca %"char[]", align 8
  %indirectarg30 = alloca %"char[]", align 8
  %indirectarg38 = alloca %"char[]", align 8
  %indirectarg39 = alloca %"char[]", align 8
  %indirectarg40 = alloca %"char[]", align 8
  %indirectarg52 = alloca %"char[]", align 8
  %indirectarg53 = alloca %"char[]", align 8
  %indirectarg54 = alloca %"char[]", align 8
    #dbg_declare(ptr %0, !586, !DIExpression(), !587)
    #dbg_declare(ptr %1, !588, !DIExpression(), !587)
    #dbg_declare(ptr %len, !589, !DIExpression(), !590)
  store ptr null, ptr %.cachedtype, align 8, !dbg !590
  %ptradd = getelementptr inbounds i8, ptr %0, i64 8, !dbg !590
  %2 = load i64, ptr %ptradd, align 8, !dbg !590
  store i64 %2, ptr %len, align 8, !dbg !590
    #dbg_declare(ptr %str, !591, !DIExpression(), !592)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator, ptr align 8 %1, i32 16, i1 false)
  %3 = load i64, ptr %len, align 8, !dbg !592
  %add = add i64 %3, 1, !dbg !592
  store i64 %add, ptr %size, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator1, ptr align 8 %allocator, i32 16, i1 false)
  %4 = load i64, ptr %size, align 8
  store i64 %4, ptr %size2, align 8
  %5 = load i64, ptr %size2, align 8, !dbg !593
  %i2nb = icmp eq i64 %5, 0, !dbg !593
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !593

if.then:                                          ; preds = %entry
  store ptr null, ptr %blockret, align 8, !dbg !593
  br label %expr_block.exit, !dbg !593

if.exit:                                          ; preds = %entry
  %6 = load i64, ptr %size2, align 8, !dbg !597
  br i1 true, label %or.phi, label %or.rhs, !dbg !598

or.rhs:                                           ; preds = %if.exit
  store i64 0, ptr %x, align 8
  %7 = load i64, ptr %x, align 8, !dbg !599
  %neq = icmp ne i64 0, %7, !dbg !599
  br i1 %neq, label %and.rhs, label %and.phi, !dbg !599

and.rhs:                                          ; preds = %or.rhs
  %8 = load i64, ptr %x, align 8, !dbg !599
  %9 = load i64, ptr %x, align 8, !dbg !599
  %sub = sub i64 %9, 1, !dbg !599
  %and = and i64 %8, %sub, !dbg !599
  %eq = icmp eq i64 %and, 0, !dbg !599
  br label %and.phi, !dbg !599

and.phi:                                          ; preds = %and.rhs, %or.rhs
  %val = phi i1 [ false, %or.rhs ], [ %eq, %and.rhs ], !dbg !599
  br label %or.phi, !dbg !599

or.phi:                                           ; preds = %and.phi, %if.exit
  %val3 = phi i1 [ true, %if.exit ], [ %val, %and.phi ], !dbg !599
  br i1 %val3, label %assert_ok, label %assert_fail, !dbg !599

assert_fail:                                      ; preds = %or.phi
  store %"char[]" { ptr @.panic_msg, i64 65 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file, i64 16 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.func.59, i64 9 }, ptr %indirectarg5, align 8
  %10 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %10(ptr align 8 %indirectarg, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, i32 86) #6, !dbg !597
  unreachable, !dbg !597

assert_ok:                                        ; preds = %or.phi
  br i1 true, label %assert_ok10, label %assert_fail6, !dbg !597

assert_fail6:                                     ; preds = %assert_ok
  store %"char[]" { ptr @.panic_msg.7, i64 80 }, ptr %indirectarg7, align 8
  store %"char[]" { ptr @.file, i64 16 }, ptr %indirectarg8, align 8
  store %"char[]" { ptr @.func.59, i64 9 }, ptr %indirectarg9, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11(ptr align 8 %indirectarg7, ptr align 8 %indirectarg8, ptr align 8 %indirectarg9, i32 86) #6, !dbg !597
  unreachable, !dbg !597

assert_ok10:                                      ; preds = %assert_ok
  %lt = icmp ult i64 0, %6, !dbg !597
  br i1 %lt, label %assert_ok15, label %assert_fail11, !dbg !597

assert_fail11:                                    ; preds = %assert_ok10
  store %"char[]" { ptr @.panic_msg.8, i64 59 }, ptr %indirectarg12, align 8
  store %"char[]" { ptr @.file, i64 16 }, ptr %indirectarg13, align 8
  store %"char[]" { ptr @.func.59, i64 9 }, ptr %indirectarg14, align 8
  %12 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %12(ptr align 8 %indirectarg12, ptr align 8 %indirectarg13, ptr align 8 %indirectarg14, i32 86) #6, !dbg !597
  unreachable, !dbg !597

assert_ok15:                                      ; preds = %assert_ok10
  %ptradd16 = getelementptr inbounds i8, ptr %allocator1, i64 8, !dbg !597
  %13 = load i64, ptr %ptradd16, align 8, !dbg !597
  %14 = inttoptr i64 %13 to ptr, !dbg !597
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !590
  %15 = icmp eq ptr %14, %type, !dbg !590
  br i1 %15, label %cache_hit, label %cache_miss, !dbg !590

cache_miss:                                       ; preds = %assert_ok15
  %ptradd17 = getelementptr inbounds i8, ptr %14, i64 16, !dbg !590
  %16 = load ptr, ptr %ptradd17, align 8, !dbg !590
  %17 = call ptr @.dyn_search(ptr %16, ptr @"$sel.acquire"), !dbg !590
  store ptr %17, ptr %.inlinecache, align 8, !dbg !590
  store ptr %14, ptr %.cachedtype, align 8, !dbg !590
  br label %18, !dbg !590

cache_hit:                                        ; preds = %assert_ok15
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !590
  br label %18, !dbg !590

18:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %17, %cache_miss ], !dbg !590
  %19 = icmp eq ptr %fn_phi, null, !dbg !590
  br i1 %19, label %missing_function, label %match, !dbg !590

missing_function:                                 ; preds = %18
  store %"char[]" { ptr @.panic_msg.9, i64 44 }, ptr %indirectarg18, align 8
  store %"char[]" { ptr @.file, i64 16 }, ptr %indirectarg19, align 8
  store %"char[]" { ptr @.func.59, i64 9 }, ptr %indirectarg20, align 8
  %20 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %20(ptr align 8 %indirectarg18, ptr align 8 %indirectarg19, ptr align 8 %indirectarg20, i32 86) #6, !dbg !597
  unreachable, !dbg !597

match:                                            ; preds = %18
  %21 = load ptr, ptr %allocator1, align 8
  %22 = call i64 %fn_phi(ptr %retparam, ptr %21, i64 %6, i32 0, i64 0), !dbg !597
  %not_err = icmp eq i64 %22, 0, !dbg !597
  %23 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !597
  br i1 %23, label %after_check, label %assign_optional, !dbg !597

assign_optional:                                  ; preds = %match
  store i64 %22, ptr %error_var, align 8, !dbg !597
  br label %panic_block, !dbg !597

after_check:                                      ; preds = %match
  %24 = load ptr, ptr %retparam, align 8, !dbg !597
  store ptr %24, ptr %blockret, align 8, !dbg !597
  br label %expr_block.exit, !dbg !597

expr_block.exit:                                  ; preds = %after_check, %if.then
  br label %noerr_block, !dbg !597

panic_block:                                      ; preds = %assign_optional
  %25 = insertvalue %any undef, ptr %error_var, 0, !dbg !597
  %26 = insertvalue %any %25, i64 ptrtoint (ptr @"$ct.fault" to i64), 1, !dbg !597
  store %"char[]" { ptr @.panic_msg.11, i64 36 }, ptr %indirectarg21, align 8
  store %"char[]" { ptr @.file, i64 16 }, ptr %indirectarg22, align 8
  store %"char[]" { ptr @.func.59, i64 9 }, ptr %indirectarg23, align 8
  store %any %26, ptr %varargslots, align 16
  %27 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %27, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg24, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg21, ptr align 8 %indirectarg22, ptr align 8 %indirectarg23, i32 75, ptr align 8 %indirectarg24) #6, !dbg !595
  unreachable, !dbg !595

noerr_block:                                      ; preds = %expr_block.exit
  %28 = load ptr, ptr %blockret, align 8, !dbg !595
  store ptr %28, ptr %str, align 8, !dbg !595
  %29 = load ptr, ptr %str, align 8, !dbg !601
  store ptr %29, ptr %dst, align 8
  %30 = load ptr, ptr %0, align 8, !dbg !601
  store ptr %30, ptr %src, align 8
  %31 = load i64, ptr %len, align 8
  store i64 %31, ptr %len25, align 8
  %32 = load ptr, ptr %dst, align 8, !dbg !602
  %neq26 = icmp ne ptr %32, null, !dbg !602
  br i1 %neq26, label %assert_ok31, label %assert_fail27, !dbg !602

assert_fail27:                                    ; preds = %noerr_block
  store %"char[]" { ptr @.panic_msg.60, i64 37 }, ptr %indirectarg28, align 8
  store %"char[]" { ptr @.file.61, i64 6 }, ptr %indirectarg29, align 8
  store %"char[]" { ptr @.func.59, i64 9 }, ptr %indirectarg30, align 8
  %33 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %33(ptr align 8 %indirectarg28, ptr align 8 %indirectarg29, ptr align 8 %indirectarg30, i32 357) #6, !dbg !602
  unreachable, !dbg !602

assert_ok31:                                      ; preds = %noerr_block
  %34 = load ptr, ptr %src, align 8, !dbg !605
  %neq32 = icmp ne ptr %34, null, !dbg !605
  br i1 %neq32, label %or.phi35, label %or.rhs33, !dbg !605

or.rhs33:                                         ; preds = %assert_ok31
  %35 = load i64, ptr %len25, align 8, !dbg !605
  %eq34 = icmp eq i64 0, %35, !dbg !605
  br label %or.phi35, !dbg !605

or.phi35:                                         ; preds = %or.rhs33, %assert_ok31
  %val36 = phi i1 [ true, %assert_ok31 ], [ %eq34, %or.rhs33 ], !dbg !605
  br i1 %val36, label %assert_ok41, label %assert_fail37, !dbg !605

assert_fail37:                                    ; preds = %or.phi35
  store %"char[]" { ptr @.panic_msg.62, i64 94 }, ptr %indirectarg38, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg39, align 8
  store %"char[]" { ptr @.func.59, i64 9 }, ptr %indirectarg40, align 8
  %36 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %36(ptr align 8 %indirectarg38, ptr align 8 %indirectarg39, ptr align 8 %indirectarg40, i32 643) #6, !dbg !606
  unreachable, !dbg !606

assert_ok41:                                      ; preds = %or.phi35
  %37 = load i64, ptr %len25, align 8, !dbg !607
  %eq42 = icmp eq i64 0, %37, !dbg !607
  br i1 %eq42, label %or.phi44, label %or.rhs43, !dbg !607

or.rhs43:                                         ; preds = %assert_ok41
  %38 = load ptr, ptr %dst, align 8, !dbg !607
  %39 = load i64, ptr %len25, align 8, !dbg !607
  %ptradd_any = getelementptr i8, ptr %38, i64 %39, !dbg !607
  %40 = load ptr, ptr %src, align 8, !dbg !607
  %le = icmp ule ptr %ptradd_any, %40, !dbg !607
  br label %or.phi44, !dbg !607

or.phi44:                                         ; preds = %or.rhs43, %assert_ok41
  %val45 = phi i1 [ true, %assert_ok41 ], [ %le, %or.rhs43 ], !dbg !607
  br i1 %val45, label %or.phi49, label %or.rhs46, !dbg !607

or.rhs46:                                         ; preds = %or.phi44
  %41 = load ptr, ptr %src, align 8, !dbg !607
  %42 = load i64, ptr %len25, align 8, !dbg !607
  %ptradd_any47 = getelementptr i8, ptr %41, i64 %42, !dbg !607
  %43 = load ptr, ptr %dst, align 8, !dbg !607
  %le48 = icmp ule ptr %ptradd_any47, %43, !dbg !607
  br label %or.phi49, !dbg !607

or.phi49:                                         ; preds = %or.rhs46, %or.phi44
  %val50 = phi i1 [ true, %or.phi44 ], [ %le48, %or.rhs46 ], !dbg !607
  br i1 %val50, label %assert_ok55, label %assert_fail51, !dbg !607

assert_fail51:                                    ; preds = %or.phi49
  store %"char[]" { ptr @.panic_msg.63, i64 95 }, ptr %indirectarg52, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg53, align 8
  store %"char[]" { ptr @.func.59, i64 9 }, ptr %indirectarg54, align 8
  %44 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %44(ptr align 8 %indirectarg52, ptr align 8 %indirectarg53, ptr align 8 %indirectarg54, i32 643) #6, !dbg !606
  unreachable, !dbg !606

assert_ok55:                                      ; preds = %or.phi49
  %45 = load ptr, ptr %dst, align 8, !dbg !608
  %46 = load ptr, ptr %src, align 8, !dbg !608
  %47 = load i64, ptr %len25, align 8, !dbg !608
  call void @llvm.memcpy.p0.p0.i64(ptr %45, ptr %46, i64 %47, i1 false), !dbg !608
  %48 = load ptr, ptr %str, align 8, !dbg !609
  %49 = load i64, ptr %len, align 8, !dbg !609
  %ptradd56 = getelementptr inbounds i8, ptr %48, i64 %49, !dbg !609
  store i8 0, ptr %ptradd56, align 1, !dbg !609
  %50 = load ptr, ptr %str, align 8, !dbg !610
  ret ptr %50, !dbg !610
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.core.String.concat(ptr noalias sret(%"char[]") align 8 %0, ptr align 8 %1, ptr align 8 %2, ptr align 8 %3) #0 comdat !dbg !611 {
entry:
  %full_len = alloca i64, align 8
  %str = alloca ptr, align 8
  %allocator = alloca %any, align 8
  %size = alloca i64, align 8
  %error_var = alloca i64, align 8
  %allocator3 = alloca %any, align 8
  %size4 = alloca i64, align 8
  %blockret = alloca ptr, align 8
  %x = alloca i64, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg7 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg14 = alloca %"char[]", align 8
  %indirectarg15 = alloca %"char[]", align 8
  %indirectarg16 = alloca %"char[]", align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %indirectarg20 = alloca %"char[]", align 8
  %indirectarg21 = alloca %"char[]", align 8
  %indirectarg22 = alloca %"char[]", align 8
  %retparam = alloca ptr, align 8
  %indirectarg23 = alloca %"char[]", align 8
  %indirectarg24 = alloca %"char[]", align 8
  %indirectarg25 = alloca %"char[]", align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg26 = alloca %"any[]", align 8
  %self_len = alloca i64, align 8
  %dst = alloca ptr, align 8
  %src = alloca ptr, align 8
  %len = alloca i64, align 8
  %indirectarg30 = alloca %"char[]", align 8
  %indirectarg31 = alloca %"char[]", align 8
  %indirectarg32 = alloca %"char[]", align 8
  %indirectarg40 = alloca %"char[]", align 8
  %indirectarg41 = alloca %"char[]", align 8
  %indirectarg42 = alloca %"char[]", align 8
  %indirectarg54 = alloca %"char[]", align 8
  %indirectarg55 = alloca %"char[]", align 8
  %indirectarg56 = alloca %"char[]", align 8
  %dst59 = alloca ptr, align 8
  %src60 = alloca ptr, align 8
  %len62 = alloca i64, align 8
  %indirectarg65 = alloca %"char[]", align 8
  %indirectarg66 = alloca %"char[]", align 8
  %indirectarg67 = alloca %"char[]", align 8
  %indirectarg75 = alloca %"char[]", align 8
  %indirectarg76 = alloca %"char[]", align 8
  %indirectarg77 = alloca %"char[]", align 8
  %indirectarg91 = alloca %"char[]", align 8
  %indirectarg92 = alloca %"char[]", align 8
  %indirectarg93 = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %indirectarg98 = alloca %"char[]", align 8
  %indirectarg99 = alloca %"char[]", align 8
  %indirectarg100 = alloca %"char[]", align 8
  %varargslots101 = alloca [1 x %any], align 16
  %indirectarg103 = alloca %"any[]", align 8
    #dbg_declare(ptr %1, !614, !DIExpression(), !615)
    #dbg_declare(ptr %2, !616, !DIExpression(), !615)
    #dbg_declare(ptr %3, !617, !DIExpression(), !615)
    #dbg_declare(ptr %full_len, !618, !DIExpression(), !619)
  store ptr null, ptr %.cachedtype, align 8, !dbg !619
  %ptradd = getelementptr inbounds i8, ptr %1, i64 8, !dbg !619
  %4 = load i64, ptr %ptradd, align 8, !dbg !619
  %ptradd1 = getelementptr inbounds i8, ptr %3, i64 8, !dbg !619
  %5 = load i64, ptr %ptradd1, align 8, !dbg !619
  %add = add i64 %4, %5, !dbg !619
  store i64 %add, ptr %full_len, align 8, !dbg !619
    #dbg_declare(ptr %str, !620, !DIExpression(), !621)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator, ptr align 8 %2, i32 16, i1 false)
  %6 = load i64, ptr %full_len, align 8, !dbg !621
  %add2 = add i64 %6, 1, !dbg !621
  store i64 %add2, ptr %size, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator3, ptr align 8 %allocator, i32 16, i1 false)
  %7 = load i64, ptr %size, align 8
  store i64 %7, ptr %size4, align 8
  %8 = load i64, ptr %size4, align 8, !dbg !622
  %i2nb = icmp eq i64 %8, 0, !dbg !622
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !622

if.then:                                          ; preds = %entry
  store ptr null, ptr %blockret, align 8, !dbg !622
  br label %expr_block.exit, !dbg !622

if.exit:                                          ; preds = %entry
  %9 = load i64, ptr %size4, align 8, !dbg !626
  br i1 true, label %or.phi, label %or.rhs, !dbg !627

or.rhs:                                           ; preds = %if.exit
  store i64 0, ptr %x, align 8
  %10 = load i64, ptr %x, align 8, !dbg !628
  %neq = icmp ne i64 0, %10, !dbg !628
  br i1 %neq, label %and.rhs, label %and.phi, !dbg !628

and.rhs:                                          ; preds = %or.rhs
  %11 = load i64, ptr %x, align 8, !dbg !628
  %12 = load i64, ptr %x, align 8, !dbg !628
  %sub = sub i64 %12, 1, !dbg !628
  %and = and i64 %11, %sub, !dbg !628
  %eq = icmp eq i64 %and, 0, !dbg !628
  br label %and.phi, !dbg !628

and.phi:                                          ; preds = %and.rhs, %or.rhs
  %val = phi i1 [ false, %or.rhs ], [ %eq, %and.rhs ], !dbg !628
  br label %or.phi, !dbg !628

or.phi:                                           ; preds = %and.phi, %if.exit
  %val5 = phi i1 [ true, %if.exit ], [ %val, %and.phi ], !dbg !628
  br i1 %val5, label %assert_ok, label %assert_fail, !dbg !628

assert_fail:                                      ; preds = %or.phi
  store %"char[]" { ptr @.panic_msg, i64 65 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file, i64 16 }, ptr %indirectarg6, align 8
  store %"char[]" { ptr @.func.64, i64 6 }, ptr %indirectarg7, align 8
  %13 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %13(ptr align 8 %indirectarg, ptr align 8 %indirectarg6, ptr align 8 %indirectarg7, i32 86) #6, !dbg !626
  unreachable, !dbg !626

assert_ok:                                        ; preds = %or.phi
  br i1 true, label %assert_ok12, label %assert_fail8, !dbg !626

assert_fail8:                                     ; preds = %assert_ok
  store %"char[]" { ptr @.panic_msg.7, i64 80 }, ptr %indirectarg9, align 8
  store %"char[]" { ptr @.file, i64 16 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.func.64, i64 6 }, ptr %indirectarg11, align 8
  %14 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %14(ptr align 8 %indirectarg9, ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, i32 86) #6, !dbg !626
  unreachable, !dbg !626

assert_ok12:                                      ; preds = %assert_ok
  %lt = icmp ult i64 0, %9, !dbg !626
  br i1 %lt, label %assert_ok17, label %assert_fail13, !dbg !626

assert_fail13:                                    ; preds = %assert_ok12
  store %"char[]" { ptr @.panic_msg.8, i64 59 }, ptr %indirectarg14, align 8
  store %"char[]" { ptr @.file, i64 16 }, ptr %indirectarg15, align 8
  store %"char[]" { ptr @.func.64, i64 6 }, ptr %indirectarg16, align 8
  %15 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %15(ptr align 8 %indirectarg14, ptr align 8 %indirectarg15, ptr align 8 %indirectarg16, i32 86) #6, !dbg !626
  unreachable, !dbg !626

assert_ok17:                                      ; preds = %assert_ok12
  %ptradd18 = getelementptr inbounds i8, ptr %allocator3, i64 8, !dbg !626
  %16 = load i64, ptr %ptradd18, align 8, !dbg !626
  %17 = inttoptr i64 %16 to ptr, !dbg !626
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !619
  %18 = icmp eq ptr %17, %type, !dbg !619
  br i1 %18, label %cache_hit, label %cache_miss, !dbg !619

cache_miss:                                       ; preds = %assert_ok17
  %ptradd19 = getelementptr inbounds i8, ptr %17, i64 16, !dbg !619
  %19 = load ptr, ptr %ptradd19, align 8, !dbg !619
  %20 = call ptr @.dyn_search(ptr %19, ptr @"$sel.acquire"), !dbg !619
  store ptr %20, ptr %.inlinecache, align 8, !dbg !619
  store ptr %17, ptr %.cachedtype, align 8, !dbg !619
  br label %21, !dbg !619

cache_hit:                                        ; preds = %assert_ok17
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !619
  br label %21, !dbg !619

21:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %20, %cache_miss ], !dbg !619
  %22 = icmp eq ptr %fn_phi, null, !dbg !619
  br i1 %22, label %missing_function, label %match, !dbg !619

missing_function:                                 ; preds = %21
  store %"char[]" { ptr @.panic_msg.9, i64 44 }, ptr %indirectarg20, align 8
  store %"char[]" { ptr @.file, i64 16 }, ptr %indirectarg21, align 8
  store %"char[]" { ptr @.func.64, i64 6 }, ptr %indirectarg22, align 8
  %23 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %23(ptr align 8 %indirectarg20, ptr align 8 %indirectarg21, ptr align 8 %indirectarg22, i32 86) #6, !dbg !626
  unreachable, !dbg !626

match:                                            ; preds = %21
  %24 = load ptr, ptr %allocator3, align 8
  %25 = call i64 %fn_phi(ptr %retparam, ptr %24, i64 %9, i32 0, i64 0), !dbg !626
  %not_err = icmp eq i64 %25, 0, !dbg !626
  %26 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !626
  br i1 %26, label %after_check, label %assign_optional, !dbg !626

assign_optional:                                  ; preds = %match
  store i64 %25, ptr %error_var, align 8, !dbg !626
  br label %panic_block, !dbg !626

after_check:                                      ; preds = %match
  %27 = load ptr, ptr %retparam, align 8, !dbg !626
  store ptr %27, ptr %blockret, align 8, !dbg !626
  br label %expr_block.exit, !dbg !626

expr_block.exit:                                  ; preds = %after_check, %if.then
  br label %noerr_block, !dbg !626

panic_block:                                      ; preds = %assign_optional
  %28 = insertvalue %any undef, ptr %error_var, 0, !dbg !626
  %29 = insertvalue %any %28, i64 ptrtoint (ptr @"$ct.fault" to i64), 1, !dbg !626
  store %"char[]" { ptr @.panic_msg.11, i64 36 }, ptr %indirectarg23, align 8
  store %"char[]" { ptr @.file, i64 16 }, ptr %indirectarg24, align 8
  store %"char[]" { ptr @.func.64, i64 6 }, ptr %indirectarg25, align 8
  store %any %29, ptr %varargslots, align 16
  %30 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %30, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg26, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg23, ptr align 8 %indirectarg24, ptr align 8 %indirectarg25, i32 75, ptr align 8 %indirectarg26) #6, !dbg !624
  unreachable, !dbg !624

noerr_block:                                      ; preds = %expr_block.exit
  %31 = load ptr, ptr %blockret, align 8, !dbg !624
  store ptr %31, ptr %str, align 8, !dbg !624
    #dbg_declare(ptr %self_len, !630, !DIExpression(), !631)
  %ptradd27 = getelementptr inbounds i8, ptr %1, i64 8, !dbg !631
  %32 = load i64, ptr %ptradd27, align 8, !dbg !631
  store i64 %32, ptr %self_len, align 8, !dbg !631
  %33 = load ptr, ptr %str, align 8, !dbg !632
  store ptr %33, ptr %dst, align 8
  %34 = load ptr, ptr %1, align 8, !dbg !632
  store ptr %34, ptr %src, align 8
  %35 = load i64, ptr %self_len, align 8
  store i64 %35, ptr %len, align 8
  %36 = load ptr, ptr %dst, align 8, !dbg !633
  %neq28 = icmp ne ptr %36, null, !dbg !633
  br i1 %neq28, label %assert_ok33, label %assert_fail29, !dbg !633

assert_fail29:                                    ; preds = %noerr_block
  store %"char[]" { ptr @.panic_msg.60, i64 37 }, ptr %indirectarg30, align 8
  store %"char[]" { ptr @.file.61, i64 6 }, ptr %indirectarg31, align 8
  store %"char[]" { ptr @.func.64, i64 6 }, ptr %indirectarg32, align 8
  %37 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %37(ptr align 8 %indirectarg30, ptr align 8 %indirectarg31, ptr align 8 %indirectarg32, i32 357) #6, !dbg !633
  unreachable, !dbg !633

assert_ok33:                                      ; preds = %noerr_block
  %38 = load ptr, ptr %src, align 8, !dbg !636
  %neq34 = icmp ne ptr %38, null, !dbg !636
  br i1 %neq34, label %or.phi37, label %or.rhs35, !dbg !636

or.rhs35:                                         ; preds = %assert_ok33
  %39 = load i64, ptr %len, align 8, !dbg !636
  %eq36 = icmp eq i64 0, %39, !dbg !636
  br label %or.phi37, !dbg !636

or.phi37:                                         ; preds = %or.rhs35, %assert_ok33
  %val38 = phi i1 [ true, %assert_ok33 ], [ %eq36, %or.rhs35 ], !dbg !636
  br i1 %val38, label %assert_ok43, label %assert_fail39, !dbg !636

assert_fail39:                                    ; preds = %or.phi37
  store %"char[]" { ptr @.panic_msg.62, i64 94 }, ptr %indirectarg40, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg41, align 8
  store %"char[]" { ptr @.func.64, i64 6 }, ptr %indirectarg42, align 8
  %40 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %40(ptr align 8 %indirectarg40, ptr align 8 %indirectarg41, ptr align 8 %indirectarg42, i32 653) #6, !dbg !637
  unreachable, !dbg !637

assert_ok43:                                      ; preds = %or.phi37
  %41 = load i64, ptr %len, align 8, !dbg !638
  %eq44 = icmp eq i64 0, %41, !dbg !638
  br i1 %eq44, label %or.phi46, label %or.rhs45, !dbg !638

or.rhs45:                                         ; preds = %assert_ok43
  %42 = load ptr, ptr %dst, align 8, !dbg !638
  %43 = load i64, ptr %len, align 8, !dbg !638
  %ptradd_any = getelementptr i8, ptr %42, i64 %43, !dbg !638
  %44 = load ptr, ptr %src, align 8, !dbg !638
  %le = icmp ule ptr %ptradd_any, %44, !dbg !638
  br label %or.phi46, !dbg !638

or.phi46:                                         ; preds = %or.rhs45, %assert_ok43
  %val47 = phi i1 [ true, %assert_ok43 ], [ %le, %or.rhs45 ], !dbg !638
  br i1 %val47, label %or.phi51, label %or.rhs48, !dbg !638

or.rhs48:                                         ; preds = %or.phi46
  %45 = load ptr, ptr %src, align 8, !dbg !638
  %46 = load i64, ptr %len, align 8, !dbg !638
  %ptradd_any49 = getelementptr i8, ptr %45, i64 %46, !dbg !638
  %47 = load ptr, ptr %dst, align 8, !dbg !638
  %le50 = icmp ule ptr %ptradd_any49, %47, !dbg !638
  br label %or.phi51, !dbg !638

or.phi51:                                         ; preds = %or.rhs48, %or.phi46
  %val52 = phi i1 [ true, %or.phi46 ], [ %le50, %or.rhs48 ], !dbg !638
  br i1 %val52, label %assert_ok57, label %assert_fail53, !dbg !638

assert_fail53:                                    ; preds = %or.phi51
  store %"char[]" { ptr @.panic_msg.63, i64 95 }, ptr %indirectarg54, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg55, align 8
  store %"char[]" { ptr @.func.64, i64 6 }, ptr %indirectarg56, align 8
  %48 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %48(ptr align 8 %indirectarg54, ptr align 8 %indirectarg55, ptr align 8 %indirectarg56, i32 653) #6, !dbg !637
  unreachable, !dbg !637

assert_ok57:                                      ; preds = %or.phi51
  %49 = load ptr, ptr %dst, align 8, !dbg !639
  %50 = load ptr, ptr %src, align 8, !dbg !639
  %51 = load i64, ptr %len, align 8, !dbg !639
  call void @llvm.memcpy.p0.p0.i64(ptr %49, ptr %50, i64 %51, i1 false), !dbg !639
  %52 = load ptr, ptr %str, align 8, !dbg !640
  %53 = load i64, ptr %self_len, align 8, !dbg !640
  %ptradd_any58 = getelementptr i8, ptr %52, i64 %53, !dbg !640
  store ptr %ptradd_any58, ptr %dst59, align 8
  %54 = load ptr, ptr %3, align 8, !dbg !640
  store ptr %54, ptr %src60, align 8
  %ptradd61 = getelementptr inbounds i8, ptr %3, i64 8, !dbg !640
  %55 = load i64, ptr %ptradd61, align 8
  store i64 %55, ptr %len62, align 8
  %56 = load ptr, ptr %dst59, align 8, !dbg !641
  %neq63 = icmp ne ptr %56, null, !dbg !641
  br i1 %neq63, label %assert_ok68, label %assert_fail64, !dbg !641

assert_fail64:                                    ; preds = %assert_ok57
  store %"char[]" { ptr @.panic_msg.60, i64 37 }, ptr %indirectarg65, align 8
  store %"char[]" { ptr @.file.61, i64 6 }, ptr %indirectarg66, align 8
  store %"char[]" { ptr @.func.64, i64 6 }, ptr %indirectarg67, align 8
  %57 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %57(ptr align 8 %indirectarg65, ptr align 8 %indirectarg66, ptr align 8 %indirectarg67, i32 357) #6, !dbg !641
  unreachable, !dbg !641

assert_ok68:                                      ; preds = %assert_ok57
  %58 = load ptr, ptr %src60, align 8, !dbg !644
  %neq69 = icmp ne ptr %58, null, !dbg !644
  br i1 %neq69, label %or.phi72, label %or.rhs70, !dbg !644

or.rhs70:                                         ; preds = %assert_ok68
  %59 = load i64, ptr %len62, align 8, !dbg !644
  %eq71 = icmp eq i64 0, %59, !dbg !644
  br label %or.phi72, !dbg !644

or.phi72:                                         ; preds = %or.rhs70, %assert_ok68
  %val73 = phi i1 [ true, %assert_ok68 ], [ %eq71, %or.rhs70 ], !dbg !644
  br i1 %val73, label %assert_ok78, label %assert_fail74, !dbg !644

assert_fail74:                                    ; preds = %or.phi72
  store %"char[]" { ptr @.panic_msg.62, i64 94 }, ptr %indirectarg75, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg76, align 8
  store %"char[]" { ptr @.func.64, i64 6 }, ptr %indirectarg77, align 8
  %60 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %60(ptr align 8 %indirectarg75, ptr align 8 %indirectarg76, ptr align 8 %indirectarg77, i32 654) #6, !dbg !645
  unreachable, !dbg !645

assert_ok78:                                      ; preds = %or.phi72
  %61 = load i64, ptr %len62, align 8, !dbg !646
  %eq79 = icmp eq i64 0, %61, !dbg !646
  br i1 %eq79, label %or.phi83, label %or.rhs80, !dbg !646

or.rhs80:                                         ; preds = %assert_ok78
  %62 = load ptr, ptr %dst59, align 8, !dbg !646
  %63 = load i64, ptr %len62, align 8, !dbg !646
  %ptradd_any81 = getelementptr i8, ptr %62, i64 %63, !dbg !646
  %64 = load ptr, ptr %src60, align 8, !dbg !646
  %le82 = icmp ule ptr %ptradd_any81, %64, !dbg !646
  br label %or.phi83, !dbg !646

or.phi83:                                         ; preds = %or.rhs80, %assert_ok78
  %val84 = phi i1 [ true, %assert_ok78 ], [ %le82, %or.rhs80 ], !dbg !646
  br i1 %val84, label %or.phi88, label %or.rhs85, !dbg !646

or.rhs85:                                         ; preds = %or.phi83
  %65 = load ptr, ptr %src60, align 8, !dbg !646
  %66 = load i64, ptr %len62, align 8, !dbg !646
  %ptradd_any86 = getelementptr i8, ptr %65, i64 %66, !dbg !646
  %67 = load ptr, ptr %dst59, align 8, !dbg !646
  %le87 = icmp ule ptr %ptradd_any86, %67, !dbg !646
  br label %or.phi88, !dbg !646

or.phi88:                                         ; preds = %or.rhs85, %or.phi83
  %val89 = phi i1 [ true, %or.phi83 ], [ %le87, %or.rhs85 ], !dbg !646
  br i1 %val89, label %assert_ok94, label %assert_fail90, !dbg !646

assert_fail90:                                    ; preds = %or.phi88
  store %"char[]" { ptr @.panic_msg.63, i64 95 }, ptr %indirectarg91, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg92, align 8
  store %"char[]" { ptr @.func.64, i64 6 }, ptr %indirectarg93, align 8
  %68 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %68(ptr align 8 %indirectarg91, ptr align 8 %indirectarg92, ptr align 8 %indirectarg93, i32 654) #6, !dbg !645
  unreachable, !dbg !645

assert_ok94:                                      ; preds = %or.phi88
  %69 = load ptr, ptr %dst59, align 8, !dbg !647
  %70 = load ptr, ptr %src60, align 8, !dbg !647
  %71 = load i64, ptr %len62, align 8, !dbg !647
  call void @llvm.memcpy.p0.p0.i64(ptr %69, ptr %70, i64 %71, i1 false), !dbg !647
  %72 = load ptr, ptr %str, align 8, !dbg !648
  %73 = load i64, ptr %full_len, align 8, !dbg !648
  %ptradd95 = getelementptr inbounds i8, ptr %72, i64 %73, !dbg !648
  store i8 0, ptr %ptradd95, align 1, !dbg !648
  %74 = load ptr, ptr %str, align 8, !dbg !649
  %75 = load i64, ptr %full_len, align 8, !dbg !649
  %add96 = add i64 0, %75, !dbg !649
  %gt = icmp ugt i64 0, %add96, !dbg !649
  %sub97 = sub i64 %add96, 0, !dbg !649
  %76 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !649
  br i1 %76, label %panic, label %checkok, !dbg !649

checkok:                                          ; preds = %assert_ok94
  %size104 = sub i64 %add96, 0, !dbg !649
  %77 = insertvalue %"char[]" undef, ptr %74, 0, !dbg !649
  %78 = insertvalue %"char[]" %77, i64 %size104, 1, !dbg !649
  store %"char[]" %78, ptr %0, align 8, !dbg !649
  ret void, !dbg !649

panic:                                            ; preds = %assert_ok94
  store i64 %sub97, ptr %taddr, align 8
  %79 = insertvalue %any undef, ptr %taddr, 0
  %80 = insertvalue %any %79, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.10, i64 43 }, ptr %indirectarg98, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg99, align 8
  store %"char[]" { ptr @.func.64, i64 6 }, ptr %indirectarg100, align 8
  store %any %80, ptr %varargslots101, align 16
  %81 = insertvalue %"any[]" undef, ptr %varargslots101, 0
  %"$$temp102" = insertvalue %"any[]" %81, i64 1, 1
  store %"any[]" %"$$temp102", ptr %indirectarg103, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg98, ptr align 8 %indirectarg99, ptr align 8 %indirectarg100, i32 656, ptr align 8 %indirectarg103) #6, !dbg !649
  unreachable, !dbg !649
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.core.String.tconcat(ptr noalias sret(%"char[]") align 8 %0, ptr align 8 %1, ptr align 8 %2) #0 comdat !dbg !650 {
entry:
  %sretparam = alloca %"char[]", align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %any, align 8
  %indirectarg2 = alloca %"char[]", align 8
    #dbg_declare(ptr %1, !651, !DIExpression(), !652)
    #dbg_declare(ptr %2, !653, !DIExpression(), !652)
  %3 = call ptr @llvm.threadlocal.address.p0(ptr @std.core.mem.allocator.current_temp), !dbg !652
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg, ptr align 8 %1, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg1, ptr align 8 %3, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg2, ptr align 8 %2, i32 16, i1 false)
  call void @std.core.String.concat(ptr sret(%"char[]") align 8 %sretparam, ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2), !dbg !652
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %sretparam, i32 16, i1 false), !dbg !652
  ret void, !dbg !652
}

; Function Attrs: nounwind ssp uwtable
define weak_odr ptr @std.core.String.zstr_tcopy(ptr align 8 %0) #0 comdat !dbg !654 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %any, align 8
    #dbg_declare(ptr %0, !657, !DIExpression(), !658)
  %1 = call ptr @llvm.threadlocal.address.p0(ptr @std.core.mem.allocator.current_temp), !dbg !658
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg, ptr align 8 %0, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg1, ptr align 8 %1, i32 16, i1 false)
  %2 = call ptr @std.core.String.zstr_copy(ptr align 8 %indirectarg, ptr align 8 %indirectarg1) #5, !dbg !658
  ret ptr %2, !dbg !658
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.core.String.copy(ptr noalias sret(%"char[]") align 8 %0, ptr align 8 %1, ptr align 8 %2) #0 comdat !dbg !659 {
entry:
  %len = alloca i64, align 8
  %str = alloca ptr, align 8
  %allocator = alloca %any, align 8
  %size = alloca i64, align 8
  %error_var = alloca i64, align 8
  %allocator1 = alloca %any, align 8
  %size2 = alloca i64, align 8
  %blockret = alloca ptr, align 8
  %x = alloca i64, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg7 = alloca %"char[]", align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %indirectarg13 = alloca %"char[]", align 8
  %indirectarg14 = alloca %"char[]", align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %indirectarg18 = alloca %"char[]", align 8
  %indirectarg19 = alloca %"char[]", align 8
  %indirectarg20 = alloca %"char[]", align 8
  %retparam = alloca ptr, align 8
  %indirectarg21 = alloca %"char[]", align 8
  %indirectarg22 = alloca %"char[]", align 8
  %indirectarg23 = alloca %"char[]", align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg24 = alloca %"any[]", align 8
  %dst = alloca ptr, align 8
  %src = alloca ptr, align 8
  %len25 = alloca i64, align 8
  %indirectarg28 = alloca %"char[]", align 8
  %indirectarg29 = alloca %"char[]", align 8
  %indirectarg30 = alloca %"char[]", align 8
  %indirectarg38 = alloca %"char[]", align 8
  %indirectarg39 = alloca %"char[]", align 8
  %indirectarg40 = alloca %"char[]", align 8
  %indirectarg52 = alloca %"char[]", align 8
  %indirectarg53 = alloca %"char[]", align 8
  %indirectarg54 = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %indirectarg59 = alloca %"char[]", align 8
  %indirectarg60 = alloca %"char[]", align 8
  %indirectarg61 = alloca %"char[]", align 8
  %varargslots62 = alloca [1 x %any], align 16
  %indirectarg64 = alloca %"any[]", align 8
    #dbg_declare(ptr %1, !662, !DIExpression(), !663)
    #dbg_declare(ptr %2, !664, !DIExpression(), !663)
    #dbg_declare(ptr %len, !665, !DIExpression(), !666)
  store ptr null, ptr %.cachedtype, align 8, !dbg !666
  %ptradd = getelementptr inbounds i8, ptr %1, i64 8, !dbg !666
  %3 = load i64, ptr %ptradd, align 8, !dbg !666
  store i64 %3, ptr %len, align 8, !dbg !666
    #dbg_declare(ptr %str, !667, !DIExpression(), !668)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator, ptr align 8 %2, i32 16, i1 false)
  %4 = load i64, ptr %len, align 8, !dbg !668
  %add = add i64 %4, 1, !dbg !668
  store i64 %add, ptr %size, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator1, ptr align 8 %allocator, i32 16, i1 false)
  %5 = load i64, ptr %size, align 8
  store i64 %5, ptr %size2, align 8
  %6 = load i64, ptr %size2, align 8, !dbg !669
  %i2nb = icmp eq i64 %6, 0, !dbg !669
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !669

if.then:                                          ; preds = %entry
  store ptr null, ptr %blockret, align 8, !dbg !669
  br label %expr_block.exit, !dbg !669

if.exit:                                          ; preds = %entry
  %7 = load i64, ptr %size2, align 8, !dbg !673
  br i1 true, label %or.phi, label %or.rhs, !dbg !674

or.rhs:                                           ; preds = %if.exit
  store i64 0, ptr %x, align 8
  %8 = load i64, ptr %x, align 8, !dbg !675
  %neq = icmp ne i64 0, %8, !dbg !675
  br i1 %neq, label %and.rhs, label %and.phi, !dbg !675

and.rhs:                                          ; preds = %or.rhs
  %9 = load i64, ptr %x, align 8, !dbg !675
  %10 = load i64, ptr %x, align 8, !dbg !675
  %sub = sub i64 %10, 1, !dbg !675
  %and = and i64 %9, %sub, !dbg !675
  %eq = icmp eq i64 %and, 0, !dbg !675
  br label %and.phi, !dbg !675

and.phi:                                          ; preds = %and.rhs, %or.rhs
  %val = phi i1 [ false, %or.rhs ], [ %eq, %and.rhs ], !dbg !675
  br label %or.phi, !dbg !675

or.phi:                                           ; preds = %and.phi, %if.exit
  %val3 = phi i1 [ true, %if.exit ], [ %val, %and.phi ], !dbg !675
  br i1 %val3, label %assert_ok, label %assert_fail, !dbg !675

assert_fail:                                      ; preds = %or.phi
  store %"char[]" { ptr @.panic_msg, i64 65 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file, i64 16 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.func.65, i64 4 }, ptr %indirectarg5, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11(ptr align 8 %indirectarg, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, i32 86) #6, !dbg !673
  unreachable, !dbg !673

assert_ok:                                        ; preds = %or.phi
  br i1 true, label %assert_ok10, label %assert_fail6, !dbg !673

assert_fail6:                                     ; preds = %assert_ok
  store %"char[]" { ptr @.panic_msg.7, i64 80 }, ptr %indirectarg7, align 8
  store %"char[]" { ptr @.file, i64 16 }, ptr %indirectarg8, align 8
  store %"char[]" { ptr @.func.65, i64 4 }, ptr %indirectarg9, align 8
  %12 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %12(ptr align 8 %indirectarg7, ptr align 8 %indirectarg8, ptr align 8 %indirectarg9, i32 86) #6, !dbg !673
  unreachable, !dbg !673

assert_ok10:                                      ; preds = %assert_ok
  %lt = icmp ult i64 0, %7, !dbg !673
  br i1 %lt, label %assert_ok15, label %assert_fail11, !dbg !673

assert_fail11:                                    ; preds = %assert_ok10
  store %"char[]" { ptr @.panic_msg.8, i64 59 }, ptr %indirectarg12, align 8
  store %"char[]" { ptr @.file, i64 16 }, ptr %indirectarg13, align 8
  store %"char[]" { ptr @.func.65, i64 4 }, ptr %indirectarg14, align 8
  %13 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %13(ptr align 8 %indirectarg12, ptr align 8 %indirectarg13, ptr align 8 %indirectarg14, i32 86) #6, !dbg !673
  unreachable, !dbg !673

assert_ok15:                                      ; preds = %assert_ok10
  %ptradd16 = getelementptr inbounds i8, ptr %allocator1, i64 8, !dbg !673
  %14 = load i64, ptr %ptradd16, align 8, !dbg !673
  %15 = inttoptr i64 %14 to ptr, !dbg !673
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !666
  %16 = icmp eq ptr %15, %type, !dbg !666
  br i1 %16, label %cache_hit, label %cache_miss, !dbg !666

cache_miss:                                       ; preds = %assert_ok15
  %ptradd17 = getelementptr inbounds i8, ptr %15, i64 16, !dbg !666
  %17 = load ptr, ptr %ptradd17, align 8, !dbg !666
  %18 = call ptr @.dyn_search(ptr %17, ptr @"$sel.acquire"), !dbg !666
  store ptr %18, ptr %.inlinecache, align 8, !dbg !666
  store ptr %15, ptr %.cachedtype, align 8, !dbg !666
  br label %19, !dbg !666

cache_hit:                                        ; preds = %assert_ok15
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !666
  br label %19, !dbg !666

19:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %18, %cache_miss ], !dbg !666
  %20 = icmp eq ptr %fn_phi, null, !dbg !666
  br i1 %20, label %missing_function, label %match, !dbg !666

missing_function:                                 ; preds = %19
  store %"char[]" { ptr @.panic_msg.9, i64 44 }, ptr %indirectarg18, align 8
  store %"char[]" { ptr @.file, i64 16 }, ptr %indirectarg19, align 8
  store %"char[]" { ptr @.func.65, i64 4 }, ptr %indirectarg20, align 8
  %21 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %21(ptr align 8 %indirectarg18, ptr align 8 %indirectarg19, ptr align 8 %indirectarg20, i32 86) #6, !dbg !673
  unreachable, !dbg !673

match:                                            ; preds = %19
  %22 = load ptr, ptr %allocator1, align 8
  %23 = call i64 %fn_phi(ptr %retparam, ptr %22, i64 %7, i32 0, i64 0), !dbg !673
  %not_err = icmp eq i64 %23, 0, !dbg !673
  %24 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !673
  br i1 %24, label %after_check, label %assign_optional, !dbg !673

assign_optional:                                  ; preds = %match
  store i64 %23, ptr %error_var, align 8, !dbg !673
  br label %panic_block, !dbg !673

after_check:                                      ; preds = %match
  %25 = load ptr, ptr %retparam, align 8, !dbg !673
  store ptr %25, ptr %blockret, align 8, !dbg !673
  br label %expr_block.exit, !dbg !673

expr_block.exit:                                  ; preds = %after_check, %if.then
  br label %noerr_block, !dbg !673

panic_block:                                      ; preds = %assign_optional
  %26 = insertvalue %any undef, ptr %error_var, 0, !dbg !673
  %27 = insertvalue %any %26, i64 ptrtoint (ptr @"$ct.fault" to i64), 1, !dbg !673
  store %"char[]" { ptr @.panic_msg.11, i64 36 }, ptr %indirectarg21, align 8
  store %"char[]" { ptr @.file, i64 16 }, ptr %indirectarg22, align 8
  store %"char[]" { ptr @.func.65, i64 4 }, ptr %indirectarg23, align 8
  store %any %27, ptr %varargslots, align 16
  %28 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %28, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg24, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg21, ptr align 8 %indirectarg22, ptr align 8 %indirectarg23, i32 75, ptr align 8 %indirectarg24) #6, !dbg !671
  unreachable, !dbg !671

noerr_block:                                      ; preds = %expr_block.exit
  %29 = load ptr, ptr %blockret, align 8, !dbg !671
  store ptr %29, ptr %str, align 8, !dbg !671
  %30 = load ptr, ptr %str, align 8, !dbg !677
  store ptr %30, ptr %dst, align 8
  %31 = load ptr, ptr %1, align 8, !dbg !677
  store ptr %31, ptr %src, align 8
  %32 = load i64, ptr %len, align 8
  store i64 %32, ptr %len25, align 8
  %33 = load ptr, ptr %dst, align 8, !dbg !678
  %neq26 = icmp ne ptr %33, null, !dbg !678
  br i1 %neq26, label %assert_ok31, label %assert_fail27, !dbg !678

assert_fail27:                                    ; preds = %noerr_block
  store %"char[]" { ptr @.panic_msg.60, i64 37 }, ptr %indirectarg28, align 8
  store %"char[]" { ptr @.file.61, i64 6 }, ptr %indirectarg29, align 8
  store %"char[]" { ptr @.func.65, i64 4 }, ptr %indirectarg30, align 8
  %34 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %34(ptr align 8 %indirectarg28, ptr align 8 %indirectarg29, ptr align 8 %indirectarg30, i32 357) #6, !dbg !678
  unreachable, !dbg !678

assert_ok31:                                      ; preds = %noerr_block
  %35 = load ptr, ptr %src, align 8, !dbg !681
  %neq32 = icmp ne ptr %35, null, !dbg !681
  br i1 %neq32, label %or.phi35, label %or.rhs33, !dbg !681

or.rhs33:                                         ; preds = %assert_ok31
  %36 = load i64, ptr %len25, align 8, !dbg !681
  %eq34 = icmp eq i64 0, %36, !dbg !681
  br label %or.phi35, !dbg !681

or.phi35:                                         ; preds = %or.rhs33, %assert_ok31
  %val36 = phi i1 [ true, %assert_ok31 ], [ %eq34, %or.rhs33 ], !dbg !681
  br i1 %val36, label %assert_ok41, label %assert_fail37, !dbg !681

assert_fail37:                                    ; preds = %or.phi35
  store %"char[]" { ptr @.panic_msg.62, i64 94 }, ptr %indirectarg38, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg39, align 8
  store %"char[]" { ptr @.func.65, i64 4 }, ptr %indirectarg40, align 8
  %37 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %37(ptr align 8 %indirectarg38, ptr align 8 %indirectarg39, ptr align 8 %indirectarg40, i32 673) #6, !dbg !682
  unreachable, !dbg !682

assert_ok41:                                      ; preds = %or.phi35
  %38 = load i64, ptr %len25, align 8, !dbg !683
  %eq42 = icmp eq i64 0, %38, !dbg !683
  br i1 %eq42, label %or.phi44, label %or.rhs43, !dbg !683

or.rhs43:                                         ; preds = %assert_ok41
  %39 = load ptr, ptr %dst, align 8, !dbg !683
  %40 = load i64, ptr %len25, align 8, !dbg !683
  %ptradd_any = getelementptr i8, ptr %39, i64 %40, !dbg !683
  %41 = load ptr, ptr %src, align 8, !dbg !683
  %le = icmp ule ptr %ptradd_any, %41, !dbg !683
  br label %or.phi44, !dbg !683

or.phi44:                                         ; preds = %or.rhs43, %assert_ok41
  %val45 = phi i1 [ true, %assert_ok41 ], [ %le, %or.rhs43 ], !dbg !683
  br i1 %val45, label %or.phi49, label %or.rhs46, !dbg !683

or.rhs46:                                         ; preds = %or.phi44
  %42 = load ptr, ptr %src, align 8, !dbg !683
  %43 = load i64, ptr %len25, align 8, !dbg !683
  %ptradd_any47 = getelementptr i8, ptr %42, i64 %43, !dbg !683
  %44 = load ptr, ptr %dst, align 8, !dbg !683
  %le48 = icmp ule ptr %ptradd_any47, %44, !dbg !683
  br label %or.phi49, !dbg !683

or.phi49:                                         ; preds = %or.rhs46, %or.phi44
  %val50 = phi i1 [ true, %or.phi44 ], [ %le48, %or.rhs46 ], !dbg !683
  br i1 %val50, label %assert_ok55, label %assert_fail51, !dbg !683

assert_fail51:                                    ; preds = %or.phi49
  store %"char[]" { ptr @.panic_msg.63, i64 95 }, ptr %indirectarg52, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg53, align 8
  store %"char[]" { ptr @.func.65, i64 4 }, ptr %indirectarg54, align 8
  %45 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %45(ptr align 8 %indirectarg52, ptr align 8 %indirectarg53, ptr align 8 %indirectarg54, i32 673) #6, !dbg !682
  unreachable, !dbg !682

assert_ok55:                                      ; preds = %or.phi49
  %46 = load ptr, ptr %dst, align 8, !dbg !684
  %47 = load ptr, ptr %src, align 8, !dbg !684
  %48 = load i64, ptr %len25, align 8, !dbg !684
  call void @llvm.memcpy.p0.p0.i64(ptr %46, ptr %47, i64 %48, i1 false), !dbg !684
  %49 = load ptr, ptr %str, align 8, !dbg !685
  %50 = load i64, ptr %len, align 8, !dbg !685
  %ptradd56 = getelementptr inbounds i8, ptr %49, i64 %50, !dbg !685
  store i8 0, ptr %ptradd56, align 1, !dbg !685
  %51 = load ptr, ptr %str, align 8, !dbg !686
  %52 = load i64, ptr %len, align 8, !dbg !686
  %add57 = add i64 0, %52, !dbg !686
  %gt = icmp ugt i64 0, %add57, !dbg !686
  %sub58 = sub i64 %add57, 0, !dbg !686
  %53 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !686
  br i1 %53, label %panic, label %checkok, !dbg !686

checkok:                                          ; preds = %assert_ok55
  %size65 = sub i64 %add57, 0, !dbg !686
  %54 = insertvalue %"char[]" undef, ptr %51, 0, !dbg !686
  %55 = insertvalue %"char[]" %54, i64 %size65, 1, !dbg !686
  store %"char[]" %55, ptr %0, align 8, !dbg !686
  ret void, !dbg !686

panic:                                            ; preds = %assert_ok55
  store i64 %sub58, ptr %taddr, align 8
  %56 = insertvalue %any undef, ptr %taddr, 0
  %57 = insertvalue %any %56, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.10, i64 43 }, ptr %indirectarg59, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg60, align 8
  store %"char[]" { ptr @.func.65, i64 4 }, ptr %indirectarg61, align 8
  store %any %57, ptr %varargslots62, align 16
  %58 = insertvalue %"any[]" undef, ptr %varargslots62, 0
  %"$$temp63" = insertvalue %"any[]" %58, i64 1, 1
  store %"any[]" %"$$temp63", ptr %indirectarg64, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg59, ptr align 8 %indirectarg60, ptr align 8 %indirectarg61, i32 675, ptr align 8 %indirectarg64) #6, !dbg !686
  unreachable, !dbg !686
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.core.String.free(ptr %0, ptr align 8 %1) #0 comdat !dbg !687 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr9 = alloca i64, align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg13 = alloca %"any[]", align 8
  %allocator = alloca %any, align 8
  %indirectarg17 = alloca %"char[]", align 8
  %indirectarg18 = alloca %"char[]", align 8
  %indirectarg19 = alloca %"char[]", align 8
  %taddr22 = alloca i64, align 8
  %taddr23 = alloca i64, align 8
  %indirectarg24 = alloca %"char[]", align 8
  %indirectarg25 = alloca %"char[]", align 8
  %indirectarg26 = alloca %"char[]", align 8
  %varargslots27 = alloca [2 x %any], align 16
  %indirectarg30 = alloca %"any[]", align 8
  %ptr = alloca ptr, align 8
  %indirectarg35 = alloca %"char[]", align 8
  %indirectarg36 = alloca %"char[]", align 8
  %indirectarg37 = alloca %"char[]", align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %indirectarg40 = alloca %"char[]", align 8
  %indirectarg41 = alloca %"char[]", align 8
  %indirectarg42 = alloca %"char[]", align 8
  %indirectarg45 = alloca %"char[]", align 8
  %indirectarg46 = alloca %"char[]", align 8
  %indirectarg47 = alloca %"char[]", align 8
  %taddr50 = alloca i64, align 8
  %taddr51 = alloca i64, align 8
  %indirectarg52 = alloca %"char[]", align 8
  %indirectarg53 = alloca %"char[]", align 8
  %indirectarg54 = alloca %"char[]", align 8
  %varargslots55 = alloca [2 x %any], align 16
  %indirectarg58 = alloca %"any[]", align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !690
  %2 = icmp eq ptr %0, null, !dbg !690
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !690
  br i1 %3, label %panic, label %checkok, !dbg !690

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !691, !DIExpression(), !692)
    #dbg_declare(ptr %1, !693, !DIExpression(), !692)
  %4 = load ptr, ptr %self, align 8, !dbg !694
  %checknull = icmp eq ptr %4, null, !dbg !694
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !694
  br i1 %5, label %panic3, label %checkok7, !dbg !694

checkok7:                                         ; preds = %checkok
  %6 = ptrtoint ptr %4 to i64, !dbg !694
  %7 = urem i64 %6, 8, !dbg !694
  %8 = icmp ne i64 %7, 0, !dbg !694
  %9 = call i1 @llvm.expect.i1(i1 %8, i1 false), !dbg !694
  br i1 %9, label %panic8, label %checkok14, !dbg !694

checkok14:                                        ; preds = %checkok7
  %10 = load ptr, ptr %4, align 8, !dbg !694
  %i2nb = icmp eq ptr %10, null, !dbg !694
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !694

if.then:                                          ; preds = %checkok14
  ret void, !dbg !694

if.exit:                                          ; preds = %checkok14
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator, ptr align 8 %1, i32 16, i1 false)
  %11 = load ptr, ptr %self, align 8, !dbg !695
  %checknull15 = icmp eq ptr %11, null, !dbg !695
  %12 = call i1 @llvm.expect.i1(i1 %checknull15, i1 false), !dbg !695
  br i1 %12, label %panic16, label %checkok20, !dbg !695

checkok20:                                        ; preds = %if.exit
  %13 = ptrtoint ptr %11 to i64, !dbg !695
  %14 = urem i64 %13, 8, !dbg !695
  %15 = icmp ne i64 %14, 0, !dbg !695
  %16 = call i1 @llvm.expect.i1(i1 %15, i1 false), !dbg !695
  br i1 %16, label %panic21, label %checkok31, !dbg !695

checkok31:                                        ; preds = %checkok20
  %17 = load ptr, ptr %11, align 8, !dbg !695
  store ptr %17, ptr %ptr, align 8
  %18 = load ptr, ptr %ptr, align 8, !dbg !696
  %i2nb32 = icmp eq ptr %18, null, !dbg !696
  br i1 %i2nb32, label %if.then33, label %if.exit34, !dbg !696

if.then33:                                        ; preds = %checkok31
  br label %expr_block.exit, !dbg !696

if.exit34:                                        ; preds = %checkok31
  %19 = load ptr, ptr %ptr, align 8, !dbg !698
  %neq = icmp ne ptr %19, null, !dbg !698
  br i1 %neq, label %assert_ok, label %assert_fail, !dbg !698

assert_fail:                                      ; preds = %if.exit34
  store %"char[]" { ptr @.panic_msg.22, i64 75 }, ptr %indirectarg35, align 8
  store %"char[]" { ptr @.file, i64 16 }, ptr %indirectarg36, align 8
  store %"char[]" { ptr @.func.67, i64 4 }, ptr %indirectarg37, align 8
  %20 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %20(ptr align 8 %indirectarg35, ptr align 8 %indirectarg36, ptr align 8 %indirectarg37, i32 123) #6, !dbg !698
  unreachable, !dbg !698

assert_ok:                                        ; preds = %if.exit34
  %ptradd38 = getelementptr inbounds i8, ptr %allocator, i64 8, !dbg !698
  %21 = load i64, ptr %ptradd38, align 8, !dbg !698
  %22 = inttoptr i64 %21 to ptr, !dbg !698
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !690
  %23 = icmp eq ptr %22, %type, !dbg !690
  br i1 %23, label %cache_hit, label %cache_miss, !dbg !690

cache_miss:                                       ; preds = %assert_ok
  %ptradd39 = getelementptr inbounds i8, ptr %22, i64 16, !dbg !690
  %24 = load ptr, ptr %ptradd39, align 8, !dbg !690
  %25 = call ptr @.dyn_search(ptr %24, ptr @"$sel.release"), !dbg !690
  store ptr %25, ptr %.inlinecache, align 8, !dbg !690
  store ptr %22, ptr %.cachedtype, align 8, !dbg !690
  br label %26, !dbg !690

cache_hit:                                        ; preds = %assert_ok
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !690
  br label %26, !dbg !690

26:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %25, %cache_miss ], !dbg !690
  %27 = icmp eq ptr %fn_phi, null, !dbg !690
  br i1 %27, label %missing_function, label %match, !dbg !690

missing_function:                                 ; preds = %26
  store %"char[]" { ptr @.panic_msg.23, i64 44 }, ptr %indirectarg40, align 8
  store %"char[]" { ptr @.file, i64 16 }, ptr %indirectarg41, align 8
  store %"char[]" { ptr @.func.67, i64 4 }, ptr %indirectarg42, align 8
  %28 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %28(ptr align 8 %indirectarg40, ptr align 8 %indirectarg41, ptr align 8 %indirectarg42, i32 123) #6, !dbg !698
  unreachable, !dbg !698

match:                                            ; preds = %26
  %29 = load ptr, ptr %allocator, align 8, !dbg !698
  call void %fn_phi(ptr %29, ptr %19, i8 zeroext 0), !dbg !698
  br label %expr_block.exit, !dbg !698

expr_block.exit:                                  ; preds = %match, %if.then33
  %30 = load ptr, ptr %self, align 8, !dbg !699
  %checknull43 = icmp eq ptr %30, null, !dbg !699
  %31 = call i1 @llvm.expect.i1(i1 %checknull43, i1 false), !dbg !699
  br i1 %31, label %panic44, label %checkok48, !dbg !699

checkok48:                                        ; preds = %expr_block.exit
  %32 = ptrtoint ptr %30 to i64, !dbg !699
  %33 = urem i64 %32, 8, !dbg !699
  %34 = icmp ne i64 %33, 0, !dbg !699
  %35 = call i1 @llvm.expect.i1(i1 %34, i1 false), !dbg !699
  br i1 %35, label %panic49, label %checkok59, !dbg !699

checkok59:                                        ; preds = %checkok48
  store %"char[]" { ptr @.emptystr, i64 0 }, ptr %30, align 8, !dbg !699
  ret void, !dbg !699

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.66, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.67, i64 4 }, ptr %indirectarg2, align 8
  %36 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %36(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 678) #6, !dbg !692
  unreachable, !dbg !692

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.68, i64 45 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.67, i64 4 }, ptr %indirectarg6, align 8
  %37 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %37(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 680) #6, !dbg !694
  unreachable, !dbg !694

panic8:                                           ; preds = %checkok7
  store i64 8, ptr %taddr, align 8
  %38 = insertvalue %any undef, ptr %taddr, 0
  %39 = insertvalue %any %38, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %7, ptr %taddr9, align 8
  %40 = insertvalue %any undef, ptr %taddr9, 0
  %41 = insertvalue %any %40, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 94 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.func.67, i64 4 }, ptr %indirectarg12, align 8
  store %any %39, ptr %varargslots, align 16
  %ptradd = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %41, ptr %ptradd, align 16
  %42 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %42, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg13, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, i32 680, ptr align 8 %indirectarg13) #6, !dbg !694
  unreachable, !dbg !694

panic16:                                          ; preds = %if.exit
  store %"char[]" { ptr @.panic_msg.68, i64 45 }, ptr %indirectarg17, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg18, align 8
  store %"char[]" { ptr @.func.67, i64 4 }, ptr %indirectarg19, align 8
  %43 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %43(ptr align 8 %indirectarg17, ptr align 8 %indirectarg18, ptr align 8 %indirectarg19, i32 681) #6, !dbg !695
  unreachable, !dbg !695

panic21:                                          ; preds = %checkok20
  store i64 8, ptr %taddr22, align 8
  %44 = insertvalue %any undef, ptr %taddr22, 0
  %45 = insertvalue %any %44, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %14, ptr %taddr23, align 8
  %46 = insertvalue %any undef, ptr %taddr23, 0
  %47 = insertvalue %any %46, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 94 }, ptr %indirectarg24, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg25, align 8
  store %"char[]" { ptr @.func.67, i64 4 }, ptr %indirectarg26, align 8
  store %any %45, ptr %varargslots27, align 16
  %ptradd28 = getelementptr inbounds i8, ptr %varargslots27, i64 16
  store %any %47, ptr %ptradd28, align 16
  %48 = insertvalue %"any[]" undef, ptr %varargslots27, 0
  %"$$temp29" = insertvalue %"any[]" %48, i64 2, 1
  store %"any[]" %"$$temp29", ptr %indirectarg30, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg24, ptr align 8 %indirectarg25, ptr align 8 %indirectarg26, i32 681, ptr align 8 %indirectarg30) #6, !dbg !695
  unreachable, !dbg !695

panic44:                                          ; preds = %expr_block.exit
  store %"char[]" { ptr @.panic_msg.68, i64 45 }, ptr %indirectarg45, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg46, align 8
  store %"char[]" { ptr @.func.67, i64 4 }, ptr %indirectarg47, align 8
  %49 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %49(ptr align 8 %indirectarg45, ptr align 8 %indirectarg46, ptr align 8 %indirectarg47, i32 682) #6, !dbg !699
  unreachable, !dbg !699

panic49:                                          ; preds = %checkok48
  store i64 8, ptr %taddr50, align 8
  %50 = insertvalue %any undef, ptr %taddr50, 0
  %51 = insertvalue %any %50, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %33, ptr %taddr51, align 8
  %52 = insertvalue %any undef, ptr %taddr51, 0
  %53 = insertvalue %any %52, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 94 }, ptr %indirectarg52, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg53, align 8
  store %"char[]" { ptr @.func.67, i64 4 }, ptr %indirectarg54, align 8
  store %any %51, ptr %varargslots55, align 16
  %ptradd56 = getelementptr inbounds i8, ptr %varargslots55, i64 16
  store %any %53, ptr %ptradd56, align 16
  %54 = insertvalue %"any[]" undef, ptr %varargslots55, 0
  %"$$temp57" = insertvalue %"any[]" %54, i64 2, 1
  store %"any[]" %"$$temp57", ptr %indirectarg58, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg52, ptr align 8 %indirectarg53, ptr align 8 %indirectarg54, i32 682, ptr align 8 %indirectarg58) #6, !dbg !699
  unreachable, !dbg !699
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.core.String.tcopy(ptr noalias sret(%"char[]") align 8 %0, ptr align 8 %1) #0 comdat !dbg !700 {
entry:
  %sretparam = alloca %"char[]", align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %any, align 8
    #dbg_declare(ptr %1, !703, !DIExpression(), !704)
  %2 = call ptr @llvm.threadlocal.address.p0(ptr @std.core.mem.allocator.current_temp), !dbg !704
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg, ptr align 8 %1, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg1, ptr align 8 %2, i32 16, i1 false)
  call void @std.core.String.copy(ptr sret(%"char[]") align 8 %sretparam, ptr align 8 %indirectarg, ptr align 8 %indirectarg1) #5, !dbg !704
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %sretparam, i32 16, i1 false), !dbg !704
  ret void, !dbg !704
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.core.string.ZString.copy(ptr noalias sret(%"char[]") align 8 %0, ptr %1, ptr align 8 %2) #0 comdat !dbg !705 {
entry:
  %self = alloca ptr, align 8
  %sretparam = alloca %"char[]", align 8
  %sretparam1 = alloca %"char[]", align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg2 = alloca %any, align 8
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !708, !DIExpression(), !709)
    #dbg_declare(ptr %2, !710, !DIExpression(), !709)
  %3 = load ptr, ptr %self, align 8
  call void @std.core.string.ZString.str_view(ptr sret(%"char[]") align 8 %sretparam, ptr %3), !dbg !711
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg, ptr align 8 %sretparam, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg2, ptr align 8 %2, i32 16, i1 false)
  call void @std.core.String.copy(ptr sret(%"char[]") align 8 %sretparam1, ptr align 8 %indirectarg, ptr align 8 %indirectarg2) #5, !dbg !711
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %sretparam1, i32 16, i1 false), !dbg !711
  ret void, !dbg !711
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.core.string.ZString.tcopy(ptr noalias sret(%"char[]") align 8 %0, ptr %1) #0 comdat !dbg !712 {
entry:
  %self = alloca ptr, align 8
  %sretparam = alloca %"char[]", align 8
  %sretparam1 = alloca %"char[]", align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg2 = alloca %any, align 8
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !713, !DIExpression(), !714)
  %2 = load ptr, ptr %self, align 8
  call void @std.core.string.ZString.str_view(ptr sret(%"char[]") align 8 %sretparam, ptr %2), !dbg !715
  %3 = call ptr @llvm.threadlocal.address.p0(ptr @std.core.mem.allocator.current_temp), !dbg !715
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg, ptr align 8 %sretparam, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg2, ptr align 8 %3, i32 16, i1 false)
  call void @std.core.String.copy(ptr sret(%"char[]") align 8 %sretparam1, ptr align 8 %indirectarg, ptr align 8 %indirectarg2) #5, !dbg !715
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %sretparam1, i32 16, i1 false), !dbg !715
  ret void, !dbg !715
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.core.String.to_utf16(ptr %0, ptr align 8 %1, ptr align 8 %2) #0 comdat !dbg !716 {
entry:
  %len16 = alloca i64, align 8
  %indirectarg = alloca %"char[]", align 8
  %data = alloca ptr, align 8
  %error_var = alloca i64, align 8
  %allocator = alloca %any, align 8
  %elements = alloca i64, align 8
  %allocator1 = alloca %any, align 8
  %size = alloca i64, align 8
  %blockret = alloca ptr, align 8
  %x = alloca i64, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg7 = alloca %"char[]", align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %indirectarg13 = alloca %"char[]", align 8
  %indirectarg14 = alloca %"char[]", align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %indirectarg17 = alloca %"char[]", align 8
  %indirectarg18 = alloca %"char[]", align 8
  %indirectarg19 = alloca %"char[]", align 8
  %retparam = alloca ptr, align 8
  %taddr = alloca ptr, align 8
  %taddr22 = alloca i64, align 8
  %indirectarg23 = alloca %"char[]", align 8
  %indirectarg24 = alloca %"char[]", align 8
  %indirectarg25 = alloca %"char[]", align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg26 = alloca %"any[]", align 8
  %error_var28 = alloca i64, align 8
  %indirectarg29 = alloca %"char[]", align 8
  %taddr36 = alloca i64, align 8
  %taddr37 = alloca i64, align 8
  %indirectarg38 = alloca %"char[]", align 8
  %indirectarg39 = alloca %"char[]", align 8
  %indirectarg40 = alloca %"char[]", align 8
  %varargslots41 = alloca [2 x %any], align 16
  %indirectarg44 = alloca %"any[]", align 8
  %reterr = alloca i64, align 8
  %taddr50 = alloca i64, align 8
  %indirectarg51 = alloca %"char[]", align 8
  %indirectarg52 = alloca %"char[]", align 8
  %indirectarg53 = alloca %"char[]", align 8
  %varargslots54 = alloca [1 x %any], align 16
  %indirectarg56 = alloca %"any[]", align 8
    #dbg_declare(ptr %1, !724, !DIExpression(), !725)
    #dbg_declare(ptr %2, !726, !DIExpression(), !725)
    #dbg_declare(ptr %len16, !727, !DIExpression(), !728)
  store ptr null, ptr %.cachedtype, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg, ptr align 8 %1, i32 16, i1 false)
  %3 = call i64 @std.core.string.conv.utf16len_for_utf8(ptr align 8 %indirectarg), !dbg !728
  store i64 %3, ptr %len16, align 8, !dbg !728
    #dbg_declare(ptr %data, !729, !DIExpression(), !730)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator, ptr align 8 %2, i32 16, i1 false)
  %4 = load i64, ptr %len16, align 8, !dbg !730
  %add = add i64 %4, 1, !dbg !730
  store i64 %add, ptr %elements, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator1, ptr align 8 %allocator, i32 16, i1 false)
  %5 = load i64, ptr %elements, align 8, !dbg !731
  %mul = mul i64 2, %5, !dbg !731
  store i64 %mul, ptr %size, align 8
  %6 = load i64, ptr %size, align 8, !dbg !733
  %i2nb = icmp eq i64 %6, 0, !dbg !733
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !733

if.then:                                          ; preds = %entry
  store ptr null, ptr %blockret, align 8, !dbg !733
  br label %expr_block.exit, !dbg !733

if.exit:                                          ; preds = %entry
  %7 = load i64, ptr %size, align 8, !dbg !735
  br i1 true, label %or.phi, label %or.rhs, !dbg !736

or.rhs:                                           ; preds = %if.exit
  store i64 0, ptr %x, align 8
  %8 = load i64, ptr %x, align 8, !dbg !737
  %neq = icmp ne i64 0, %8, !dbg !737
  br i1 %neq, label %and.rhs, label %and.phi, !dbg !737

and.rhs:                                          ; preds = %or.rhs
  %9 = load i64, ptr %x, align 8, !dbg !737
  %10 = load i64, ptr %x, align 8, !dbg !737
  %sub = sub i64 %10, 1, !dbg !737
  %and = and i64 %9, %sub, !dbg !737
  %eq = icmp eq i64 %and, 0, !dbg !737
  br label %and.phi, !dbg !737

and.phi:                                          ; preds = %and.rhs, %or.rhs
  %val = phi i1 [ false, %or.rhs ], [ %eq, %and.rhs ], !dbg !737
  br label %or.phi, !dbg !737

or.phi:                                           ; preds = %and.phi, %if.exit
  %val2 = phi i1 [ true, %if.exit ], [ %val, %and.phi ], !dbg !737
  br i1 %val2, label %assert_ok, label %assert_fail, !dbg !737

assert_fail:                                      ; preds = %or.phi
  store %"char[]" { ptr @.panic_msg, i64 65 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.file, i64 16 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.func.69, i64 8 }, ptr %indirectarg5, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, i32 86) #6, !dbg !735
  unreachable, !dbg !735

assert_ok:                                        ; preds = %or.phi
  br i1 true, label %assert_ok10, label %assert_fail6, !dbg !735

assert_fail6:                                     ; preds = %assert_ok
  store %"char[]" { ptr @.panic_msg.7, i64 80 }, ptr %indirectarg7, align 8
  store %"char[]" { ptr @.file, i64 16 }, ptr %indirectarg8, align 8
  store %"char[]" { ptr @.func.69, i64 8 }, ptr %indirectarg9, align 8
  %12 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %12(ptr align 8 %indirectarg7, ptr align 8 %indirectarg8, ptr align 8 %indirectarg9, i32 86) #6, !dbg !735
  unreachable, !dbg !735

assert_ok10:                                      ; preds = %assert_ok
  %lt = icmp ult i64 0, %7, !dbg !735
  br i1 %lt, label %assert_ok15, label %assert_fail11, !dbg !735

assert_fail11:                                    ; preds = %assert_ok10
  store %"char[]" { ptr @.panic_msg.8, i64 59 }, ptr %indirectarg12, align 8
  store %"char[]" { ptr @.file, i64 16 }, ptr %indirectarg13, align 8
  store %"char[]" { ptr @.func.69, i64 8 }, ptr %indirectarg14, align 8
  %13 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %13(ptr align 8 %indirectarg12, ptr align 8 %indirectarg13, ptr align 8 %indirectarg14, i32 86) #6, !dbg !735
  unreachable, !dbg !735

assert_ok15:                                      ; preds = %assert_ok10
  %ptradd = getelementptr inbounds i8, ptr %allocator1, i64 8, !dbg !735
  %14 = load i64, ptr %ptradd, align 8, !dbg !735
  %15 = inttoptr i64 %14 to ptr, !dbg !735
  %type = load ptr, ptr %.cachedtype, align 8
  %16 = icmp eq ptr %15, %type
  br i1 %16, label %cache_hit, label %cache_miss

cache_miss:                                       ; preds = %assert_ok15
  %ptradd16 = getelementptr inbounds i8, ptr %15, i64 16
  %17 = load ptr, ptr %ptradd16, align 8
  %18 = call ptr @.dyn_search(ptr %17, ptr @"$sel.acquire")
  store ptr %18, ptr %.inlinecache, align 8
  store ptr %15, ptr %.cachedtype, align 8
  br label %19

cache_hit:                                        ; preds = %assert_ok15
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8
  br label %19

19:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %18, %cache_miss ]
  %20 = icmp eq ptr %fn_phi, null
  br i1 %20, label %missing_function, label %match

missing_function:                                 ; preds = %19
  store %"char[]" { ptr @.panic_msg.9, i64 44 }, ptr %indirectarg17, align 8
  store %"char[]" { ptr @.file, i64 16 }, ptr %indirectarg18, align 8
  store %"char[]" { ptr @.func.69, i64 8 }, ptr %indirectarg19, align 8
  %21 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %21(ptr align 8 %indirectarg17, ptr align 8 %indirectarg18, ptr align 8 %indirectarg19, i32 86) #6, !dbg !735
  unreachable, !dbg !735

match:                                            ; preds = %19
  %22 = load ptr, ptr %allocator1, align 8
  %23 = call i64 %fn_phi(ptr %retparam, ptr %22, i64 %7, i32 0, i64 0), !dbg !735
  %not_err = icmp eq i64 %23, 0, !dbg !735
  %24 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !735
  br i1 %24, label %after_check, label %assign_optional, !dbg !735

assign_optional:                                  ; preds = %match
  store i64 %23, ptr %error_var, align 8, !dbg !735
  br label %guard_block, !dbg !735

after_check:                                      ; preds = %match
  %25 = load ptr, ptr %retparam, align 8, !dbg !735
  store ptr %25, ptr %blockret, align 8, !dbg !735
  br label %expr_block.exit, !dbg !735

expr_block.exit:                                  ; preds = %after_check, %if.then
  %26 = load ptr, ptr %blockret, align 8, !dbg !735
  store ptr %26, ptr %taddr, align 8
  %27 = load ptr, ptr %taddr, align 8
  %28 = load i64, ptr %elements, align 8, !dbg !731
  %add20 = add i64 0, %28, !dbg !731
  %gt = icmp ugt i64 0, %add20, !dbg !731
  %sub21 = sub i64 %add20, 0, !dbg !731
  %29 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !731
  br i1 %29, label %panic, label %checkok, !dbg !731

checkok:                                          ; preds = %expr_block.exit
  %size27 = sub i64 %add20, 0, !dbg !731
  %30 = insertvalue %"ushort[]" undef, ptr %27, 0, !dbg !731
  %31 = insertvalue %"ushort[]" %30, i64 %size27, 1, !dbg !731
  br label %noerr_block, !dbg !731

guard_block:                                      ; preds = %assign_optional
  %32 = load i64, ptr %error_var, align 8, !dbg !731
  ret i64 %32, !dbg !731

noerr_block:                                      ; preds = %checkok
  %33 = extractvalue %"ushort[]" %31, 0, !dbg !731
  store ptr %33, ptr %data, align 8, !dbg !731
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg29, ptr align 8 %1, i32 16, i1 false)
  %34 = load ptr, ptr %data, align 8
  %35 = call i64 @std.core.string.conv.utf8to16_unsafe(ptr align 8 %indirectarg29, ptr %34), !dbg !739
  %not_err30 = icmp eq i64 %35, 0, !dbg !739
  %36 = call i1 @llvm.expect.i1(i1 %not_err30, i1 true), !dbg !739
  br i1 %36, label %after_check32, label %assign_optional31, !dbg !739

assign_optional31:                                ; preds = %noerr_block
  store i64 %35, ptr %error_var28, align 8, !dbg !739
  br label %guard_block33, !dbg !739

after_check32:                                    ; preds = %noerr_block
  br label %noerr_block34, !dbg !739

guard_block33:                                    ; preds = %assign_optional31
  %37 = load i64, ptr %error_var28, align 8, !dbg !739
  ret i64 %37, !dbg !739

noerr_block34:                                    ; preds = %after_check32
  %38 = load ptr, ptr %data, align 8, !dbg !740
  %39 = load i64, ptr %len16, align 8, !dbg !740
  %ptroffset = getelementptr inbounds [2 x i8], ptr %38, i64 %39, !dbg !740
  %40 = ptrtoint ptr %ptroffset to i64, !dbg !740
  %41 = urem i64 %40, 2, !dbg !740
  %42 = icmp ne i64 %41, 0, !dbg !740
  %43 = call i1 @llvm.expect.i1(i1 %42, i1 false), !dbg !740
  br i1 %43, label %panic35, label %checkok45, !dbg !740

checkok45:                                        ; preds = %noerr_block34
  store i16 0, ptr %ptroffset, align 2, !dbg !740
  %44 = load ptr, ptr %data, align 8, !dbg !741
  %45 = load i64, ptr %len16, align 8, !dbg !741
  %add46 = add i64 0, %45, !dbg !741
  %gt47 = icmp ugt i64 0, %add46, !dbg !741
  %sub48 = sub i64 %add46, 0, !dbg !741
  %46 = call i1 @llvm.expect.i1(i1 %gt47, i1 false), !dbg !741
  br i1 %46, label %panic49, label %checkok57, !dbg !741

checkok57:                                        ; preds = %checkok45
  %size58 = sub i64 %add46, 0, !dbg !741
  %47 = insertvalue %"ushort[]" undef, ptr %44, 0, !dbg !741
  %48 = insertvalue %"ushort[]" %47, i64 %size58, 1, !dbg !741
  store %"ushort[]" %48, ptr %0, align 8, !dbg !741
  ret i64 0, !dbg !741

panic:                                            ; preds = %expr_block.exit
  store i64 %sub21, ptr %taddr22, align 8
  %49 = insertvalue %any undef, ptr %taddr22, 0
  %50 = insertvalue %any %49, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.10, i64 43 }, ptr %indirectarg23, align 8
  store %"char[]" { ptr @.file, i64 16 }, ptr %indirectarg24, align 8
  store %"char[]" { ptr @.func.69, i64 8 }, ptr %indirectarg25, align 8
  store %any %50, ptr %varargslots, align 16
  %51 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %51, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg26, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg23, ptr align 8 %indirectarg24, ptr align 8 %indirectarg25, i32 304, ptr align 8 %indirectarg26) #6, !dbg !731
  unreachable, !dbg !731

panic35:                                          ; preds = %noerr_block34
  store i64 2, ptr %taddr36, align 8
  %52 = insertvalue %any undef, ptr %taddr36, 0
  %53 = insertvalue %any %52, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %41, ptr %taddr37, align 8
  %54 = insertvalue %any undef, ptr %taddr37, 0
  %55 = insertvalue %any %54, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 94 }, ptr %indirectarg38, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg39, align 8
  store %"char[]" { ptr @.func.69, i64 8 }, ptr %indirectarg40, align 8
  store %any %53, ptr %varargslots41, align 16
  %ptradd42 = getelementptr inbounds i8, ptr %varargslots41, i64 16
  store %any %55, ptr %ptradd42, align 16
  %56 = insertvalue %"any[]" undef, ptr %varargslots41, 0
  %"$$temp43" = insertvalue %"any[]" %56, i64 2, 1
  store %"any[]" %"$$temp43", ptr %indirectarg44, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg38, ptr align 8 %indirectarg39, ptr align 8 %indirectarg40, i32 707, ptr align 8 %indirectarg44) #6, !dbg !740
  unreachable, !dbg !740

panic49:                                          ; preds = %checkok45
  store i64 %sub48, ptr %taddr50, align 8
  %57 = insertvalue %any undef, ptr %taddr50, 0
  %58 = insertvalue %any %57, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.10, i64 43 }, ptr %indirectarg51, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg52, align 8
  store %"char[]" { ptr @.func.69, i64 8 }, ptr %indirectarg53, align 8
  store %any %58, ptr %varargslots54, align 16
  %59 = insertvalue %"any[]" undef, ptr %varargslots54, 0
  %"$$temp55" = insertvalue %"any[]" %59, i64 1, 1
  store %"any[]" %"$$temp55", ptr %indirectarg56, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg51, ptr align 8 %indirectarg52, ptr align 8 %indirectarg53, i32 708, ptr align 8 %indirectarg56) #6, !dbg !741
  unreachable, !dbg !741
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.core.String.to_temp_utf16(ptr %0, ptr align 8 %1) #0 comdat !dbg !742 {
entry:
  %reterr = alloca i64, align 8
  %retparam = alloca %"ushort[]", align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %any, align 8
    #dbg_declare(ptr %1, !745, !DIExpression(), !746)
  %2 = call ptr @llvm.threadlocal.address.p0(ptr @std.core.mem.allocator.current_temp), !dbg !746
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg, ptr align 8 %1, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg1, ptr align 8 %2, i32 16, i1 false)
  %3 = call i64 @std.core.String.to_utf16(ptr %retparam, ptr align 8 %indirectarg, ptr align 8 %indirectarg1), !dbg !746
  %not_err = icmp eq i64 %3, 0, !dbg !746
  %4 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !746
  br i1 %4, label %after_check, label %assign_optional, !dbg !746

assign_optional:                                  ; preds = %entry
  store i64 %3, ptr %reterr, align 8, !dbg !746
  br label %err_retblock, !dbg !746

after_check:                                      ; preds = %entry
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %retparam, i32 16, i1 false), !dbg !746
  ret i64 0, !dbg !746

err_retblock:                                     ; preds = %assign_optional
  %5 = load i64, ptr %reterr, align 8, !dbg !746
  ret i64 %5, !dbg !746
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.core.String.to_wstring(ptr %0, ptr align 8 %1, ptr align 8 %2) #0 comdat !dbg !747 {
entry:
  %reterr = alloca i64, align 8
  %retparam = alloca %"ushort[]", align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %any, align 8
    #dbg_declare(ptr %1, !751, !DIExpression(), !752)
    #dbg_declare(ptr %2, !753, !DIExpression(), !752)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg, ptr align 8 %1, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg1, ptr align 8 %2, i32 16, i1 false)
  %3 = call i64 @std.core.String.to_utf16(ptr %retparam, ptr align 8 %indirectarg, ptr align 8 %indirectarg1), !dbg !754
  %not_err = icmp eq i64 %3, 0, !dbg !754
  %4 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !754
  br i1 %4, label %after_check, label %assign_optional, !dbg !754

assign_optional:                                  ; preds = %entry
  store i64 %3, ptr %reterr, align 8, !dbg !754
  br label %err_retblock, !dbg !754

after_check:                                      ; preds = %entry
  %5 = load ptr, ptr %retparam, align 8, !dbg !754
  store ptr %5, ptr %0, align 8, !dbg !754
  ret i64 0, !dbg !754

err_retblock:                                     ; preds = %assign_optional
  %6 = load i64, ptr %reterr, align 8, !dbg !754
  ret i64 %6, !dbg !754
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.core.String.to_temp_wstring(ptr %0, ptr align 8 %1) #0 comdat !dbg !755 {
entry:
  %reterr = alloca i64, align 8
  %retparam = alloca ptr, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %any, align 8
    #dbg_declare(ptr %1, !758, !DIExpression(), !759)
  %2 = call ptr @llvm.threadlocal.address.p0(ptr @std.core.mem.allocator.current_temp), !dbg !759
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg, ptr align 8 %1, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg1, ptr align 8 %2, i32 16, i1 false)
  %3 = call i64 @std.core.String.to_wstring(ptr %retparam, ptr align 8 %indirectarg, ptr align 8 %indirectarg1), !dbg !759
  %not_err = icmp eq i64 %3, 0, !dbg !759
  %4 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !759
  br i1 %4, label %after_check, label %assign_optional, !dbg !759

assign_optional:                                  ; preds = %entry
  store i64 %3, ptr %reterr, align 8, !dbg !759
  br label %err_retblock, !dbg !759

after_check:                                      ; preds = %entry
  %5 = load ptr, ptr %retparam, align 8, !dbg !759
  store ptr %5, ptr %0, align 8, !dbg !759
  ret i64 0, !dbg !759

err_retblock:                                     ; preds = %assign_optional
  %6 = load i64, ptr %reterr, align 8, !dbg !759
  ret i64 %6, !dbg !759
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.core.String.to_utf32(ptr %0, ptr align 8 %1, ptr align 8 %2) #0 comdat !dbg !760 {
entry:
  %codepoints = alloca i64, align 8
  %indirectarg = alloca %"char[]", align 8
  %data = alloca ptr, align 8
  %error_var = alloca i64, align 8
  %allocator = alloca %any, align 8
  %elements = alloca i64, align 8
  %allocator1 = alloca %any, align 8
  %size = alloca i64, align 8
  %blockret = alloca ptr, align 8
  %x = alloca i64, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg7 = alloca %"char[]", align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %indirectarg13 = alloca %"char[]", align 8
  %indirectarg14 = alloca %"char[]", align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %indirectarg17 = alloca %"char[]", align 8
  %indirectarg18 = alloca %"char[]", align 8
  %indirectarg19 = alloca %"char[]", align 8
  %retparam = alloca ptr, align 8
  %taddr = alloca ptr, align 8
  %taddr22 = alloca i64, align 8
  %indirectarg23 = alloca %"char[]", align 8
  %indirectarg24 = alloca %"char[]", align 8
  %indirectarg25 = alloca %"char[]", align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg26 = alloca %"any[]", align 8
  %error_var28 = alloca i64, align 8
  %indirectarg29 = alloca %"char[]", align 8
  %taddr36 = alloca i64, align 8
  %taddr37 = alloca i64, align 8
  %indirectarg38 = alloca %"char[]", align 8
  %indirectarg39 = alloca %"char[]", align 8
  %indirectarg40 = alloca %"char[]", align 8
  %varargslots41 = alloca [2 x %any], align 16
  %indirectarg44 = alloca %"any[]", align 8
  %reterr = alloca i64, align 8
  %taddr50 = alloca i64, align 8
  %indirectarg51 = alloca %"char[]", align 8
  %indirectarg52 = alloca %"char[]", align 8
  %indirectarg53 = alloca %"char[]", align 8
  %varargslots54 = alloca [1 x %any], align 16
  %indirectarg56 = alloca %"any[]", align 8
    #dbg_declare(ptr %1, !770, !DIExpression(), !771)
    #dbg_declare(ptr %2, !772, !DIExpression(), !771)
    #dbg_declare(ptr %codepoints, !773, !DIExpression(), !774)
  store ptr null, ptr %.cachedtype, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg, ptr align 8 %1, i32 16, i1 false)
  %3 = call i64 @std.core.string.conv.utf8_codepoints(ptr align 8 %indirectarg), !dbg !774
  store i64 %3, ptr %codepoints, align 8, !dbg !774
    #dbg_declare(ptr %data, !775, !DIExpression(), !776)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator, ptr align 8 %2, i32 16, i1 false)
  %4 = load i64, ptr %codepoints, align 8, !dbg !776
  %add = add i64 %4, 1, !dbg !776
  store i64 %add, ptr %elements, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator1, ptr align 8 %allocator, i32 16, i1 false)
  %5 = load i64, ptr %elements, align 8, !dbg !777
  %mul = mul i64 4, %5, !dbg !777
  store i64 %mul, ptr %size, align 8
  %6 = load i64, ptr %size, align 8, !dbg !779
  %i2nb = icmp eq i64 %6, 0, !dbg !779
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !779

if.then:                                          ; preds = %entry
  store ptr null, ptr %blockret, align 8, !dbg !779
  br label %expr_block.exit, !dbg !779

if.exit:                                          ; preds = %entry
  %7 = load i64, ptr %size, align 8, !dbg !781
  br i1 true, label %or.phi, label %or.rhs, !dbg !782

or.rhs:                                           ; preds = %if.exit
  store i64 0, ptr %x, align 8
  %8 = load i64, ptr %x, align 8, !dbg !783
  %neq = icmp ne i64 0, %8, !dbg !783
  br i1 %neq, label %and.rhs, label %and.phi, !dbg !783

and.rhs:                                          ; preds = %or.rhs
  %9 = load i64, ptr %x, align 8, !dbg !783
  %10 = load i64, ptr %x, align 8, !dbg !783
  %sub = sub i64 %10, 1, !dbg !783
  %and = and i64 %9, %sub, !dbg !783
  %eq = icmp eq i64 %and, 0, !dbg !783
  br label %and.phi, !dbg !783

and.phi:                                          ; preds = %and.rhs, %or.rhs
  %val = phi i1 [ false, %or.rhs ], [ %eq, %and.rhs ], !dbg !783
  br label %or.phi, !dbg !783

or.phi:                                           ; preds = %and.phi, %if.exit
  %val2 = phi i1 [ true, %if.exit ], [ %val, %and.phi ], !dbg !783
  br i1 %val2, label %assert_ok, label %assert_fail, !dbg !783

assert_fail:                                      ; preds = %or.phi
  store %"char[]" { ptr @.panic_msg, i64 65 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.file, i64 16 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.func.70, i64 8 }, ptr %indirectarg5, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, i32 86) #6, !dbg !781
  unreachable, !dbg !781

assert_ok:                                        ; preds = %or.phi
  br i1 true, label %assert_ok10, label %assert_fail6, !dbg !781

assert_fail6:                                     ; preds = %assert_ok
  store %"char[]" { ptr @.panic_msg.7, i64 80 }, ptr %indirectarg7, align 8
  store %"char[]" { ptr @.file, i64 16 }, ptr %indirectarg8, align 8
  store %"char[]" { ptr @.func.70, i64 8 }, ptr %indirectarg9, align 8
  %12 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %12(ptr align 8 %indirectarg7, ptr align 8 %indirectarg8, ptr align 8 %indirectarg9, i32 86) #6, !dbg !781
  unreachable, !dbg !781

assert_ok10:                                      ; preds = %assert_ok
  %lt = icmp ult i64 0, %7, !dbg !781
  br i1 %lt, label %assert_ok15, label %assert_fail11, !dbg !781

assert_fail11:                                    ; preds = %assert_ok10
  store %"char[]" { ptr @.panic_msg.8, i64 59 }, ptr %indirectarg12, align 8
  store %"char[]" { ptr @.file, i64 16 }, ptr %indirectarg13, align 8
  store %"char[]" { ptr @.func.70, i64 8 }, ptr %indirectarg14, align 8
  %13 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %13(ptr align 8 %indirectarg12, ptr align 8 %indirectarg13, ptr align 8 %indirectarg14, i32 86) #6, !dbg !781
  unreachable, !dbg !781

assert_ok15:                                      ; preds = %assert_ok10
  %ptradd = getelementptr inbounds i8, ptr %allocator1, i64 8, !dbg !781
  %14 = load i64, ptr %ptradd, align 8, !dbg !781
  %15 = inttoptr i64 %14 to ptr, !dbg !781
  %type = load ptr, ptr %.cachedtype, align 8
  %16 = icmp eq ptr %15, %type
  br i1 %16, label %cache_hit, label %cache_miss

cache_miss:                                       ; preds = %assert_ok15
  %ptradd16 = getelementptr inbounds i8, ptr %15, i64 16
  %17 = load ptr, ptr %ptradd16, align 8
  %18 = call ptr @.dyn_search(ptr %17, ptr @"$sel.acquire")
  store ptr %18, ptr %.inlinecache, align 8
  store ptr %15, ptr %.cachedtype, align 8
  br label %19

cache_hit:                                        ; preds = %assert_ok15
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8
  br label %19

19:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %18, %cache_miss ]
  %20 = icmp eq ptr %fn_phi, null
  br i1 %20, label %missing_function, label %match

missing_function:                                 ; preds = %19
  store %"char[]" { ptr @.panic_msg.9, i64 44 }, ptr %indirectarg17, align 8
  store %"char[]" { ptr @.file, i64 16 }, ptr %indirectarg18, align 8
  store %"char[]" { ptr @.func.70, i64 8 }, ptr %indirectarg19, align 8
  %21 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %21(ptr align 8 %indirectarg17, ptr align 8 %indirectarg18, ptr align 8 %indirectarg19, i32 86) #6, !dbg !781
  unreachable, !dbg !781

match:                                            ; preds = %19
  %22 = load ptr, ptr %allocator1, align 8
  %23 = call i64 %fn_phi(ptr %retparam, ptr %22, i64 %7, i32 0, i64 0), !dbg !781
  %not_err = icmp eq i64 %23, 0, !dbg !781
  %24 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !781
  br i1 %24, label %after_check, label %assign_optional, !dbg !781

assign_optional:                                  ; preds = %match
  store i64 %23, ptr %error_var, align 8, !dbg !781
  br label %guard_block, !dbg !781

after_check:                                      ; preds = %match
  %25 = load ptr, ptr %retparam, align 8, !dbg !781
  store ptr %25, ptr %blockret, align 8, !dbg !781
  br label %expr_block.exit, !dbg !781

expr_block.exit:                                  ; preds = %after_check, %if.then
  %26 = load ptr, ptr %blockret, align 8, !dbg !781
  store ptr %26, ptr %taddr, align 8
  %27 = load ptr, ptr %taddr, align 8
  %28 = load i64, ptr %elements, align 8, !dbg !777
  %add20 = add i64 0, %28, !dbg !777
  %gt = icmp ugt i64 0, %add20, !dbg !777
  %sub21 = sub i64 %add20, 0, !dbg !777
  %29 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !777
  br i1 %29, label %panic, label %checkok, !dbg !777

checkok:                                          ; preds = %expr_block.exit
  %size27 = sub i64 %add20, 0, !dbg !777
  %30 = insertvalue %"uint[]" undef, ptr %27, 0, !dbg !777
  %31 = insertvalue %"uint[]" %30, i64 %size27, 1, !dbg !777
  br label %noerr_block, !dbg !777

guard_block:                                      ; preds = %assign_optional
  %32 = load i64, ptr %error_var, align 8, !dbg !777
  ret i64 %32, !dbg !777

noerr_block:                                      ; preds = %checkok
  %33 = extractvalue %"uint[]" %31, 0, !dbg !777
  store ptr %33, ptr %data, align 8, !dbg !777
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg29, ptr align 8 %1, i32 16, i1 false)
  %34 = load ptr, ptr %data, align 8
  %35 = call i64 @std.core.string.conv.utf8to32_unsafe(ptr align 8 %indirectarg29, ptr %34), !dbg !785
  %not_err30 = icmp eq i64 %35, 0, !dbg !785
  %36 = call i1 @llvm.expect.i1(i1 %not_err30, i1 true), !dbg !785
  br i1 %36, label %after_check32, label %assign_optional31, !dbg !785

assign_optional31:                                ; preds = %noerr_block
  store i64 %35, ptr %error_var28, align 8, !dbg !785
  br label %guard_block33, !dbg !785

after_check32:                                    ; preds = %noerr_block
  br label %noerr_block34, !dbg !785

guard_block33:                                    ; preds = %assign_optional31
  %37 = load i64, ptr %error_var28, align 8, !dbg !785
  ret i64 %37, !dbg !785

noerr_block34:                                    ; preds = %after_check32
  %38 = load ptr, ptr %data, align 8, !dbg !786
  %39 = load i64, ptr %codepoints, align 8, !dbg !786
  %ptroffset = getelementptr inbounds [4 x i8], ptr %38, i64 %39, !dbg !786
  %40 = ptrtoint ptr %ptroffset to i64, !dbg !786
  %41 = urem i64 %40, 4, !dbg !786
  %42 = icmp ne i64 %41, 0, !dbg !786
  %43 = call i1 @llvm.expect.i1(i1 %42, i1 false), !dbg !786
  br i1 %43, label %panic35, label %checkok45, !dbg !786

checkok45:                                        ; preds = %noerr_block34
  store i32 0, ptr %ptroffset, align 4, !dbg !786
  %44 = load ptr, ptr %data, align 8, !dbg !787
  %45 = load i64, ptr %codepoints, align 8, !dbg !787
  %add46 = add i64 0, %45, !dbg !787
  %gt47 = icmp ugt i64 0, %add46, !dbg !787
  %sub48 = sub i64 %add46, 0, !dbg !787
  %46 = call i1 @llvm.expect.i1(i1 %gt47, i1 false), !dbg !787
  br i1 %46, label %panic49, label %checkok57, !dbg !787

checkok57:                                        ; preds = %checkok45
  %size58 = sub i64 %add46, 0, !dbg !787
  %47 = insertvalue %"uint[]" undef, ptr %44, 0, !dbg !787
  %48 = insertvalue %"uint[]" %47, i64 %size58, 1, !dbg !787
  store %"uint[]" %48, ptr %0, align 8, !dbg !787
  ret i64 0, !dbg !787

panic:                                            ; preds = %expr_block.exit
  store i64 %sub21, ptr %taddr22, align 8
  %49 = insertvalue %any undef, ptr %taddr22, 0
  %50 = insertvalue %any %49, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.10, i64 43 }, ptr %indirectarg23, align 8
  store %"char[]" { ptr @.file, i64 16 }, ptr %indirectarg24, align 8
  store %"char[]" { ptr @.func.70, i64 8 }, ptr %indirectarg25, align 8
  store %any %50, ptr %varargslots, align 16
  %51 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %51, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg26, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg23, ptr align 8 %indirectarg24, ptr align 8 %indirectarg25, i32 304, ptr align 8 %indirectarg26) #6, !dbg !777
  unreachable, !dbg !777

panic35:                                          ; preds = %noerr_block34
  store i64 4, ptr %taddr36, align 8
  %52 = insertvalue %any undef, ptr %taddr36, 0
  %53 = insertvalue %any %52, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %41, ptr %taddr37, align 8
  %54 = insertvalue %any undef, ptr %taddr37, 0
  %55 = insertvalue %any %54, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 94 }, ptr %indirectarg38, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg39, align 8
  store %"char[]" { ptr @.func.70, i64 8 }, ptr %indirectarg40, align 8
  store %any %53, ptr %varargslots41, align 16
  %ptradd42 = getelementptr inbounds i8, ptr %varargslots41, i64 16
  store %any %55, ptr %ptradd42, align 16
  %56 = insertvalue %"any[]" undef, ptr %varargslots41, 0
  %"$$temp43" = insertvalue %"any[]" %56, i64 2, 1
  store %"any[]" %"$$temp43", ptr %indirectarg44, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg38, ptr align 8 %indirectarg39, ptr align 8 %indirectarg40, i32 725, ptr align 8 %indirectarg44) #6, !dbg !786
  unreachable, !dbg !786

panic49:                                          ; preds = %checkok45
  store i64 %sub48, ptr %taddr50, align 8
  %57 = insertvalue %any undef, ptr %taddr50, 0
  %58 = insertvalue %any %57, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.10, i64 43 }, ptr %indirectarg51, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg52, align 8
  store %"char[]" { ptr @.func.70, i64 8 }, ptr %indirectarg53, align 8
  store %any %58, ptr %varargslots54, align 16
  %59 = insertvalue %"any[]" undef, ptr %varargslots54, 0
  %"$$temp55" = insertvalue %"any[]" %59, i64 1, 1
  store %"any[]" %"$$temp55", ptr %indirectarg56, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg51, ptr align 8 %indirectarg52, ptr align 8 %indirectarg53, i32 726, ptr align 8 %indirectarg56) #6, !dbg !787
  unreachable, !dbg !787
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.core.String.to_temp_utf32(ptr %0, ptr align 8 %1) #0 comdat !dbg !788 {
entry:
  %reterr = alloca i64, align 8
  %retparam = alloca %"uint[]", align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %any, align 8
    #dbg_declare(ptr %1, !791, !DIExpression(), !792)
  %2 = call ptr @llvm.threadlocal.address.p0(ptr @std.core.mem.allocator.current_temp), !dbg !792
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg, ptr align 8 %1, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg1, ptr align 8 %2, i32 16, i1 false)
  %3 = call i64 @std.core.String.to_utf32(ptr %retparam, ptr align 8 %indirectarg, ptr align 8 %indirectarg1), !dbg !792
  %not_err = icmp eq i64 %3, 0, !dbg !792
  %4 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !792
  br i1 %4, label %after_check, label %assign_optional, !dbg !792

assign_optional:                                  ; preds = %entry
  store i64 %3, ptr %reterr, align 8, !dbg !792
  br label %err_retblock, !dbg !792

after_check:                                      ; preds = %entry
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %retparam, i32 16, i1 false), !dbg !792
  ret i64 0, !dbg !792

err_retblock:                                     ; preds = %assign_optional
  %5 = load i64, ptr %reterr, align 8, !dbg !792
  ret i64 %5, !dbg !792
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.core.String.convert_to_lower(ptr align 8 %0) #0 comdat !dbg !793 {
entry:
  %.anon = alloca i64, align 8
  %c = alloca ptr, align 8
  %taddr = alloca i64, align 8
  %taddr2 = alloca i64, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg6 = alloca %"any[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %c13 = alloca i8, align 1
  %c14 = alloca i8, align 1
  %taddr17 = alloca i64, align 8
  %taddr18 = alloca i64, align 8
  %indirectarg19 = alloca %"char[]", align 8
  %indirectarg20 = alloca %"char[]", align 8
  %indirectarg21 = alloca %"char[]", align 8
  %varargslots22 = alloca [2 x %any], align 16
  %indirectarg25 = alloca %"any[]", align 8
  %indirectarg29 = alloca %"char[]", align 8
  %indirectarg30 = alloca %"char[]", align 8
  %indirectarg31 = alloca %"char[]", align 8
    #dbg_declare(ptr %0, !796, !DIExpression(), !797)
  %ptradd = getelementptr inbounds i8, ptr %0, i64 8, !dbg !798
  %1 = load i64, ptr %ptradd, align 8, !dbg !798
    #dbg_declare(ptr %.anon, !800, !DIExpression(), !798)
  store i64 0, ptr %.anon, align 8, !dbg !798
  br label %loop.cond, !dbg !798

loop.cond:                                        ; preds = %if.exit, %entry
  %2 = load i64, ptr %.anon, align 8, !dbg !798
  %lt = icmp ult i64 %2, %1, !dbg !798
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !798

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %c, !801, !DIExpression(), !803)
  %ptradd1 = getelementptr inbounds i8, ptr %0, i64 8, !dbg !803
  %3 = load i64, ptr %ptradd1, align 8, !dbg !803
  %4 = load ptr, ptr %0, align 8, !dbg !803
  %5 = load i64, ptr %.anon, align 8, !dbg !803
  %ge = icmp uge i64 %5, %3, !dbg !803
  %6 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !803
  br i1 %6, label %panic, label %checkok, !dbg !803

checkok:                                          ; preds = %loop.body
  %ptradd7 = getelementptr inbounds i8, ptr %4, i64 %5, !dbg !803
  store ptr %ptradd7, ptr %c, align 8, !dbg !803
  %7 = load ptr, ptr %c, align 8, !dbg !803
  %checknull = icmp eq ptr %7, null, !dbg !803
  %8 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !803
  br i1 %8, label %panic8, label %checkok12, !dbg !803

checkok12:                                        ; preds = %checkok
  %9 = load i8, ptr %7, align 1
  store i8 %9, ptr %c13, align 1
  %10 = load i8, ptr %c13, align 1
  store i8 %10, ptr %c14, align 1
  %11 = load i8, ptr %c14, align 1, !dbg !804
  %zext = zext i8 %11 to i64, !dbg !804
  %ge15 = icmp uge i64 %zext, 256, !dbg !804
  %12 = call i1 @llvm.expect.i1(i1 %ge15, i1 false), !dbg !804
  br i1 %12, label %panic16, label %checkok26, !dbg !804

checkok26:                                        ; preds = %checkok12
  %ptroffset = getelementptr inbounds [2 x i8], ptr @std.core.ascii.ASCII_LOOKUP, i64 %zext, !dbg !804
  %13 = load i16, ptr %ptroffset, align 2, !dbg !804
  %lshrl = lshr i16 %13, 1, !dbg !804
  %14 = and i16 1, %lshrl, !dbg !804
  %trunc = trunc i16 %14 to i8, !dbg !804
  %15 = trunc i8 %trunc to i1, !dbg !804
  br i1 %15, label %if.then, label %if.exit, !dbg !804

if.then:                                          ; preds = %checkok26
  %16 = load ptr, ptr %c, align 8, !dbg !803
  %checknull27 = icmp eq ptr %16, null, !dbg !803
  %17 = call i1 @llvm.expect.i1(i1 %checknull27, i1 false), !dbg !803
  br i1 %17, label %panic28, label %checkok32, !dbg !803

checkok32:                                        ; preds = %if.then
  %18 = load i8, ptr %16, align 1, !dbg !803
  %add = add i8 %18, 32, !dbg !803
  store i8 %add, ptr %16, align 1, !dbg !803
  br label %if.exit, !dbg !803

if.exit:                                          ; preds = %checkok32, %checkok26
  %19 = load i64, ptr %.anon, align 8, !dbg !798
  %addnuw = add nuw i64 %19, 1, !dbg !798
  store i64 %addnuw, ptr %.anon, align 8, !dbg !798
  br label %loop.cond, !dbg !798

loop.exit:                                        ; preds = %loop.cond
  ret void, !dbg !798

panic:                                            ; preds = %loop.body
  store i64 %3, ptr %taddr, align 8
  %20 = insertvalue %any undef, ptr %taddr, 0
  %21 = insertvalue %any %20, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %5, ptr %taddr2, align 8
  %22 = insertvalue %any undef, ptr %taddr2, 0
  %23 = insertvalue %any %22, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.func.71, i64 16 }, ptr %indirectarg4, align 8
  store %any %21, ptr %varargslots, align 16
  %ptradd5 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %23, ptr %ptradd5, align 16
  %24 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %24, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg6, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg, ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, i32 739, ptr align 8 %indirectarg6) #6, !dbg !803
  unreachable, !dbg !803

panic8:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.72, i64 42 }, ptr %indirectarg9, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.func.71, i64 16 }, ptr %indirectarg11, align 8
  %25 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %25(ptr align 8 %indirectarg9, ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, i32 739) #6, !dbg !803
  unreachable, !dbg !803

panic16:                                          ; preds = %checkok12
  store i64 256, ptr %taddr17, align 8
  %26 = insertvalue %any undef, ptr %taddr17, 0
  %27 = insertvalue %any %26, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %zext, ptr %taddr18, align 8
  %28 = insertvalue %any undef, ptr %taddr18, 0
  %29 = insertvalue %any %28, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg19, align 8
  store %"char[]" { ptr @.file.73, i64 8 }, ptr %indirectarg20, align 8
  store %"char[]" { ptr @.func.71, i64 16 }, ptr %indirectarg21, align 8
  store %any %27, ptr %varargslots22, align 16
  %ptradd23 = getelementptr inbounds i8, ptr %varargslots22, i64 16
  store %any %29, ptr %ptradd23, align 16
  %30 = insertvalue %"any[]" undef, ptr %varargslots22, 0
  %"$$temp24" = insertvalue %"any[]" %30, i64 2, 1
  store %"any[]" %"$$temp24", ptr %indirectarg25, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg19, ptr align 8 %indirectarg20, ptr align 8 %indirectarg21, i32 8, ptr align 8 %indirectarg25) #6, !dbg !804
  unreachable, !dbg !804

panic28:                                          ; preds = %if.then
  store %"char[]" { ptr @.panic_msg.72, i64 42 }, ptr %indirectarg29, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg30, align 8
  store %"char[]" { ptr @.func.71, i64 16 }, ptr %indirectarg31, align 8
  %31 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %31(ptr align 8 %indirectarg29, ptr align 8 %indirectarg30, ptr align 8 %indirectarg31, i32 739) #6, !dbg !803
  unreachable, !dbg !803
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.core.String.to_lower_copy(ptr noalias sret(%"char[]") align 8 %0, ptr align 8 %1, ptr align 8 %2) #0 comdat !dbg !809 {
entry:
  %copy = alloca %"char[]", align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %any, align 8
  %indirectarg2 = alloca %"char[]", align 8
    #dbg_declare(ptr %1, !810, !DIExpression(), !811)
    #dbg_declare(ptr %2, !812, !DIExpression(), !811)
    #dbg_declare(ptr %copy, !813, !DIExpression(), !814)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg, ptr align 8 %1, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg1, ptr align 8 %2, i32 16, i1 false)
  call void @std.core.String.copy(ptr sret(%"char[]") align 8 %copy, ptr align 8 %indirectarg, ptr align 8 %indirectarg1), !dbg !814
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg2, ptr align 8 %copy, i32 16, i1 false)
  call void @std.core.String.convert_to_lower(ptr align 8 %indirectarg2), !dbg !815
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %copy, i32 16, i1 false), !dbg !816
  ret void, !dbg !816
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.core.String.to_lower_tcopy(ptr noalias sret(%"char[]") align 8 %0, ptr align 8 %1) #0 comdat !dbg !817 {
entry:
  %sretparam = alloca %"char[]", align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %any, align 8
    #dbg_declare(ptr %1, !818, !DIExpression(), !819)
  %2 = call ptr @llvm.threadlocal.address.p0(ptr @std.core.mem.allocator.current_temp), !dbg !820
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg, ptr align 8 %1, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg1, ptr align 8 %2, i32 16, i1 false)
  call void @std.core.String.to_lower_copy(ptr sret(%"char[]") align 8 %sretparam, ptr align 8 %indirectarg, ptr align 8 %indirectarg1), !dbg !820
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %sretparam, i32 16, i1 false), !dbg !820
  ret void, !dbg !820
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.core.String.convert_to_upper(ptr align 8 %0) #0 comdat !dbg !821 {
entry:
  %.anon = alloca i64, align 8
  %c = alloca ptr, align 8
  %taddr = alloca i64, align 8
  %taddr2 = alloca i64, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg6 = alloca %"any[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %c13 = alloca i8, align 1
  %c14 = alloca i8, align 1
  %taddr17 = alloca i64, align 8
  %taddr18 = alloca i64, align 8
  %indirectarg19 = alloca %"char[]", align 8
  %indirectarg20 = alloca %"char[]", align 8
  %indirectarg21 = alloca %"char[]", align 8
  %varargslots22 = alloca [2 x %any], align 16
  %indirectarg25 = alloca %"any[]", align 8
  %indirectarg29 = alloca %"char[]", align 8
  %indirectarg30 = alloca %"char[]", align 8
  %indirectarg31 = alloca %"char[]", align 8
    #dbg_declare(ptr %0, !822, !DIExpression(), !823)
  %ptradd = getelementptr inbounds i8, ptr %0, i64 8, !dbg !824
  %1 = load i64, ptr %ptradd, align 8, !dbg !824
    #dbg_declare(ptr %.anon, !826, !DIExpression(), !824)
  store i64 0, ptr %.anon, align 8, !dbg !824
  br label %loop.cond, !dbg !824

loop.cond:                                        ; preds = %if.exit, %entry
  %2 = load i64, ptr %.anon, align 8, !dbg !824
  %lt = icmp ult i64 %2, %1, !dbg !824
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !824

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %c, !827, !DIExpression(), !829)
  %ptradd1 = getelementptr inbounds i8, ptr %0, i64 8, !dbg !829
  %3 = load i64, ptr %ptradd1, align 8, !dbg !829
  %4 = load ptr, ptr %0, align 8, !dbg !829
  %5 = load i64, ptr %.anon, align 8, !dbg !829
  %ge = icmp uge i64 %5, %3, !dbg !829
  %6 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !829
  br i1 %6, label %panic, label %checkok, !dbg !829

checkok:                                          ; preds = %loop.body
  %ptradd7 = getelementptr inbounds i8, ptr %4, i64 %5, !dbg !829
  store ptr %ptradd7, ptr %c, align 8, !dbg !829
  %7 = load ptr, ptr %c, align 8, !dbg !829
  %checknull = icmp eq ptr %7, null, !dbg !829
  %8 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !829
  br i1 %8, label %panic8, label %checkok12, !dbg !829

checkok12:                                        ; preds = %checkok
  %9 = load i8, ptr %7, align 1
  store i8 %9, ptr %c13, align 1
  %10 = load i8, ptr %c13, align 1
  store i8 %10, ptr %c14, align 1
  %11 = load i8, ptr %c14, align 1, !dbg !830
  %zext = zext i8 %11 to i64, !dbg !830
  %ge15 = icmp uge i64 %zext, 256, !dbg !830
  %12 = call i1 @llvm.expect.i1(i1 %ge15, i1 false), !dbg !830
  br i1 %12, label %panic16, label %checkok26, !dbg !830

checkok26:                                        ; preds = %checkok12
  %ptroffset = getelementptr inbounds [2 x i8], ptr @std.core.ascii.ASCII_LOOKUP, i64 %zext, !dbg !830
  %13 = load i16, ptr %ptroffset, align 2, !dbg !830
  %14 = and i16 1, %13, !dbg !830
  %trunc = trunc i16 %14 to i8, !dbg !830
  %15 = trunc i8 %trunc to i1, !dbg !830
  br i1 %15, label %if.then, label %if.exit, !dbg !830

if.then:                                          ; preds = %checkok26
  %16 = load ptr, ptr %c, align 8, !dbg !829
  %checknull27 = icmp eq ptr %16, null, !dbg !829
  %17 = call i1 @llvm.expect.i1(i1 %checknull27, i1 false), !dbg !829
  br i1 %17, label %panic28, label %checkok32, !dbg !829

checkok32:                                        ; preds = %if.then
  %18 = load i8, ptr %16, align 1, !dbg !829
  %sub = sub i8 %18, 32, !dbg !829
  store i8 %sub, ptr %16, align 1, !dbg !829
  br label %if.exit, !dbg !829

if.exit:                                          ; preds = %checkok32, %checkok26
  %19 = load i64, ptr %.anon, align 8, !dbg !824
  %addnuw = add nuw i64 %19, 1, !dbg !824
  store i64 %addnuw, ptr %.anon, align 8, !dbg !824
  br label %loop.cond, !dbg !824

loop.exit:                                        ; preds = %loop.cond
  ret void, !dbg !824

panic:                                            ; preds = %loop.body
  store i64 %3, ptr %taddr, align 8
  %20 = insertvalue %any undef, ptr %taddr, 0
  %21 = insertvalue %any %20, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %5, ptr %taddr2, align 8
  %22 = insertvalue %any undef, ptr %taddr2, 0
  %23 = insertvalue %any %22, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.func.74, i64 16 }, ptr %indirectarg4, align 8
  store %any %21, ptr %varargslots, align 16
  %ptradd5 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %23, ptr %ptradd5, align 16
  %24 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %24, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg6, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg, ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, i32 762, ptr align 8 %indirectarg6) #6, !dbg !829
  unreachable, !dbg !829

panic8:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.72, i64 42 }, ptr %indirectarg9, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.func.74, i64 16 }, ptr %indirectarg11, align 8
  %25 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %25(ptr align 8 %indirectarg9, ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, i32 762) #6, !dbg !829
  unreachable, !dbg !829

panic16:                                          ; preds = %checkok12
  store i64 256, ptr %taddr17, align 8
  %26 = insertvalue %any undef, ptr %taddr17, 0
  %27 = insertvalue %any %26, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %zext, ptr %taddr18, align 8
  %28 = insertvalue %any undef, ptr %taddr18, 0
  %29 = insertvalue %any %28, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg19, align 8
  store %"char[]" { ptr @.file.73, i64 8 }, ptr %indirectarg20, align 8
  store %"char[]" { ptr @.func.74, i64 16 }, ptr %indirectarg21, align 8
  store %any %27, ptr %varargslots22, align 16
  %ptradd23 = getelementptr inbounds i8, ptr %varargslots22, i64 16
  store %any %29, ptr %ptradd23, align 16
  %30 = insertvalue %"any[]" undef, ptr %varargslots22, 0
  %"$$temp24" = insertvalue %"any[]" %30, i64 2, 1
  store %"any[]" %"$$temp24", ptr %indirectarg25, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg19, ptr align 8 %indirectarg20, ptr align 8 %indirectarg21, i32 7, ptr align 8 %indirectarg25) #6, !dbg !830
  unreachable, !dbg !830

panic28:                                          ; preds = %if.then
  store %"char[]" { ptr @.panic_msg.72, i64 42 }, ptr %indirectarg29, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg30, align 8
  store %"char[]" { ptr @.func.74, i64 16 }, ptr %indirectarg31, align 8
  %31 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %31(ptr align 8 %indirectarg29, ptr align 8 %indirectarg30, ptr align 8 %indirectarg31, i32 762) #6, !dbg !829
  unreachable, !dbg !829
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.core.String.to_upper_copy(ptr noalias sret(%"char[]") align 8 %0, ptr align 8 %1, ptr align 8 %2) #0 comdat !dbg !834 {
entry:
  %copy = alloca %"char[]", align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %any, align 8
  %indirectarg2 = alloca %"char[]", align 8
    #dbg_declare(ptr %1, !835, !DIExpression(), !836)
    #dbg_declare(ptr %2, !837, !DIExpression(), !836)
    #dbg_declare(ptr %copy, !838, !DIExpression(), !839)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg, ptr align 8 %1, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg1, ptr align 8 %2, i32 16, i1 false)
  call void @std.core.String.copy(ptr sret(%"char[]") align 8 %copy, ptr align 8 %indirectarg, ptr align 8 %indirectarg1), !dbg !839
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg2, ptr align 8 %copy, i32 16, i1 false)
  call void @std.core.String.convert_to_upper(ptr align 8 %indirectarg2), !dbg !840
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %copy, i32 16, i1 false), !dbg !841
  ret void, !dbg !841
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.core.String.capitalize_copy(ptr noalias sret(%"char[]") align 8 %0, ptr align 8 %1, ptr align 8 %2) #0 comdat !dbg !842 {
entry:
  %s = alloca %"char[]", align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %any, align 8
  %taddr = alloca i64, align 8
  %taddr3 = alloca i64, align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg8 = alloca %"any[]", align 8
  %c = alloca i8, align 1
  %c9 = alloca i8, align 1
  %taddr12 = alloca i64, align 8
  %taddr13 = alloca i64, align 8
  %indirectarg14 = alloca %"char[]", align 8
  %indirectarg15 = alloca %"char[]", align 8
  %indirectarg16 = alloca %"char[]", align 8
  %varargslots17 = alloca [2 x %any], align 16
  %indirectarg20 = alloca %"any[]", align 8
  %taddr25 = alloca i64, align 8
  %taddr26 = alloca i64, align 8
  %indirectarg27 = alloca %"char[]", align 8
  %indirectarg28 = alloca %"char[]", align 8
  %indirectarg29 = alloca %"char[]", align 8
  %varargslots30 = alloca [2 x %any], align 16
  %indirectarg33 = alloca %"any[]", align 8
    #dbg_declare(ptr %1, !843, !DIExpression(), !844)
    #dbg_declare(ptr %2, !845, !DIExpression(), !844)
    #dbg_declare(ptr %s, !846, !DIExpression(), !847)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg, ptr align 8 %1, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg1, ptr align 8 %2, i32 16, i1 false)
  call void @std.core.String.copy(ptr sret(%"char[]") align 8 %s, ptr align 8 %indirectarg, ptr align 8 %indirectarg1), !dbg !847
  %ptradd = getelementptr inbounds i8, ptr %s, i64 8, !dbg !848
  %3 = load i64, ptr %ptradd, align 8, !dbg !848
  %lt = icmp ult i64 0, %3, !dbg !848
  br i1 %lt, label %and.rhs, label %and.phi, !dbg !848

and.rhs:                                          ; preds = %entry
  %ptradd2 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !848
  %4 = load i64, ptr %ptradd2, align 8, !dbg !848
  %5 = load ptr, ptr %s, align 8, !dbg !848
  %ge = icmp sge i64 0, %4, !dbg !848
  %6 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !848
  br i1 %6, label %panic, label %checkok, !dbg !848

checkok:                                          ; preds = %and.rhs
  %7 = load i8, ptr %5, align 1
  store i8 %7, ptr %c, align 1
  %8 = load i8, ptr %c, align 1
  store i8 %8, ptr %c9, align 1
  %9 = load i8, ptr %c9, align 1, !dbg !849
  %zext = zext i8 %9 to i64, !dbg !849
  %ge10 = icmp uge i64 %zext, 256, !dbg !849
  %10 = call i1 @llvm.expect.i1(i1 %ge10, i1 false), !dbg !849
  br i1 %10, label %panic11, label %checkok21, !dbg !849

checkok21:                                        ; preds = %checkok
  %ptroffset = getelementptr inbounds [2 x i8], ptr @std.core.ascii.ASCII_LOOKUP, i64 %zext, !dbg !849
  %11 = load i16, ptr %ptroffset, align 2, !dbg !849
  %12 = and i16 1, %11, !dbg !849
  %trunc = trunc i16 %12 to i8, !dbg !849
  %13 = trunc i8 %trunc to i1, !dbg !849
  br label %and.phi, !dbg !849

and.phi:                                          ; preds = %checkok21, %entry
  %val = phi i1 [ false, %entry ], [ %13, %checkok21 ], !dbg !849
  br i1 %val, label %if.then, label %if.exit, !dbg !849

if.then:                                          ; preds = %and.phi
  %ptradd22 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !853
  %14 = load i64, ptr %ptradd22, align 8, !dbg !853
  %15 = load ptr, ptr %s, align 8, !dbg !853
  %ge23 = icmp sge i64 0, %14, !dbg !853
  %16 = call i1 @llvm.expect.i1(i1 %ge23, i1 false), !dbg !853
  br i1 %16, label %panic24, label %checkok34, !dbg !853

checkok34:                                        ; preds = %if.then
  %17 = load i8, ptr %15, align 1, !dbg !853
  %and = and i8 %17, -33, !dbg !853
  store i8 %and, ptr %15, align 1, !dbg !853
  br label %if.exit, !dbg !853

if.exit:                                          ; preds = %checkok34, %and.phi
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %s, i32 16, i1 false), !dbg !855
  ret void, !dbg !855

panic:                                            ; preds = %and.rhs
  store i64 %4, ptr %taddr, align 8
  %18 = insertvalue %any undef, ptr %taddr, 0
  %19 = insertvalue %any %18, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr3, align 8
  %20 = insertvalue %any undef, ptr %taddr3, 0
  %21 = insertvalue %any %20, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.75, i64 15 }, ptr %indirectarg6, align 8
  store %any %19, ptr %varargslots, align 16
  %ptradd7 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %21, ptr %ptradd7, align 16
  %22 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %22, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg8, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 783, ptr align 8 %indirectarg8) #6, !dbg !848
  unreachable, !dbg !848

panic11:                                          ; preds = %checkok
  store i64 256, ptr %taddr12, align 8
  %23 = insertvalue %any undef, ptr %taddr12, 0
  %24 = insertvalue %any %23, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %zext, ptr %taddr13, align 8
  %25 = insertvalue %any undef, ptr %taddr13, 0
  %26 = insertvalue %any %25, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg14, align 8
  store %"char[]" { ptr @.file.73, i64 8 }, ptr %indirectarg15, align 8
  store %"char[]" { ptr @.func.75, i64 15 }, ptr %indirectarg16, align 8
  store %any %24, ptr %varargslots17, align 16
  %ptradd18 = getelementptr inbounds i8, ptr %varargslots17, i64 16
  store %any %26, ptr %ptradd18, align 16
  %27 = insertvalue %"any[]" undef, ptr %varargslots17, 0
  %"$$temp19" = insertvalue %"any[]" %27, i64 2, 1
  store %"any[]" %"$$temp19", ptr %indirectarg20, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg14, ptr align 8 %indirectarg15, ptr align 8 %indirectarg16, i32 7, ptr align 8 %indirectarg20) #6, !dbg !849
  unreachable, !dbg !849

panic24:                                          ; preds = %if.then
  store i64 %14, ptr %taddr25, align 8
  %28 = insertvalue %any undef, ptr %taddr25, 0
  %29 = insertvalue %any %28, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr26, align 8
  %30 = insertvalue %any undef, ptr %taddr26, 0
  %31 = insertvalue %any %30, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg27, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg28, align 8
  store %"char[]" { ptr @.func.75, i64 15 }, ptr %indirectarg29, align 8
  store %any %29, ptr %varargslots30, align 16
  %ptradd31 = getelementptr inbounds i8, ptr %varargslots30, i64 16
  store %any %31, ptr %ptradd31, align 16
  %32 = insertvalue %"any[]" undef, ptr %varargslots30, 0
  %"$$temp32" = insertvalue %"any[]" %32, i64 2, 1
  store %"any[]" %"$$temp32", ptr %indirectarg33, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg27, ptr align 8 %indirectarg28, ptr align 8 %indirectarg29, i32 785, ptr align 8 %indirectarg33) #6, !dbg !853
  unreachable, !dbg !853
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.core.String.snake_to_pascal_copy(ptr noalias sret(%"char[]") align 8 %0, ptr align 8 %1, ptr align 8 %2) #0 comdat !dbg !856 {
entry:
  %splitter = alloca %Splitter, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %new_string = alloca %"char[]", align 8
  %allocator = alloca %any, align 8
  %elements = alloca i64, align 8
  %error_var = alloca i64, align 8
  %allocator2 = alloca %any, align 8
  %elements3 = alloca i64, align 8
  %allocator4 = alloca %any, align 8
  %size = alloca i64, align 8
  %blockret = alloca ptr, align 8
  %x = alloca i64, align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg7 = alloca %"char[]", align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %indirectarg15 = alloca %"char[]", align 8
  %indirectarg16 = alloca %"char[]", align 8
  %indirectarg17 = alloca %"char[]", align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %indirectarg21 = alloca %"char[]", align 8
  %indirectarg22 = alloca %"char[]", align 8
  %indirectarg23 = alloca %"char[]", align 8
  %retparam = alloca ptr, align 8
  %taddr = alloca ptr, align 8
  %taddr26 = alloca i64, align 8
  %indirectarg27 = alloca %"char[]", align 8
  %indirectarg28 = alloca %"char[]", align 8
  %indirectarg29 = alloca %"char[]", align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg30 = alloca %"any[]", align 8
  %indirectarg32 = alloca %"char[]", align 8
  %indirectarg33 = alloca %"char[]", align 8
  %indirectarg34 = alloca %"char[]", align 8
  %varargslots35 = alloca [1 x %any], align 16
  %indirectarg37 = alloca %"any[]", align 8
  %index = alloca i64, align 8
  %s = alloca %"char[]", align 8
  %retparam38 = alloca %"char[]", align 8
  %indirectarg45 = alloca %"char[]", align 8
  %indirectarg46 = alloca %"char[]", align 8
  %indirectarg47 = alloca %"char[]", align 8
  %c = alloca i8, align 1
  %taddr51 = alloca i64, align 8
  %taddr52 = alloca i64, align 8
  %indirectarg53 = alloca %"char[]", align 8
  %indirectarg54 = alloca %"char[]", align 8
  %indirectarg55 = alloca %"char[]", align 8
  %varargslots56 = alloca [2 x %any], align 16
  %indirectarg59 = alloca %"any[]", align 8
  %c61 = alloca i8, align 1
  %c62 = alloca i8, align 1
  %taddr65 = alloca i64, align 8
  %taddr66 = alloca i64, align 8
  %indirectarg67 = alloca %"char[]", align 8
  %indirectarg68 = alloca %"char[]", align 8
  %indirectarg69 = alloca %"char[]", align 8
  %varargslots70 = alloca [2 x %any], align 16
  %indirectarg73 = alloca %"any[]", align 8
  %c76 = alloca i8, align 1
  %c77 = alloca i8, align 1
  %taddr82 = alloca i64, align 8
  %taddr83 = alloca i64, align 8
  %indirectarg84 = alloca %"char[]", align 8
  %indirectarg85 = alloca %"char[]", align 8
  %indirectarg86 = alloca %"char[]", align 8
  %varargslots87 = alloca [2 x %any], align 16
  %indirectarg90 = alloca %"any[]", align 8
  %taddr101 = alloca i64, align 8
  %taddr102 = alloca i64, align 8
  %indirectarg103 = alloca %"char[]", align 8
  %indirectarg104 = alloca %"char[]", align 8
  %indirectarg105 = alloca %"char[]", align 8
  %varargslots106 = alloca [2 x %any], align 16
  %indirectarg109 = alloca %"any[]", align 8
  %taddr114 = alloca i64, align 8
  %taddr115 = alloca i64, align 8
  %indirectarg116 = alloca %"char[]", align 8
  %indirectarg117 = alloca %"char[]", align 8
  %indirectarg118 = alloca %"char[]", align 8
  %varargslots119 = alloca [2 x %any], align 16
  %indirectarg122 = alloca %"any[]", align 8
  %taddr128 = alloca i64, align 8
  %taddr129 = alloca i64, align 8
  %indirectarg130 = alloca %"char[]", align 8
  %indirectarg131 = alloca %"char[]", align 8
  %indirectarg132 = alloca %"char[]", align 8
  %varargslots133 = alloca [2 x %any], align 16
  %indirectarg136 = alloca %"any[]", align 8
  %taddr141 = alloca i64, align 8
  %taddr142 = alloca i64, align 8
  %indirectarg143 = alloca %"char[]", align 8
  %indirectarg144 = alloca %"char[]", align 8
  %indirectarg145 = alloca %"char[]", align 8
  %varargslots146 = alloca [2 x %any], align 16
  %indirectarg149 = alloca %"any[]", align 8
  %taddr156 = alloca i64, align 8
  %indirectarg157 = alloca %"char[]", align 8
  %indirectarg158 = alloca %"char[]", align 8
  %indirectarg159 = alloca %"char[]", align 8
  %varargslots160 = alloca [1 x %any], align 16
  %indirectarg162 = alloca %"any[]", align 8
  %taddr167 = alloca i64, align 8
  %taddr168 = alloca i64, align 8
  %indirectarg169 = alloca %"char[]", align 8
  %indirectarg170 = alloca %"char[]", align 8
  %indirectarg171 = alloca %"char[]", align 8
  %varargslots172 = alloca [2 x %any], align 16
  %indirectarg175 = alloca %"any[]", align 8
  %taddr181 = alloca i64, align 8
  %taddr182 = alloca i64, align 8
  %indirectarg183 = alloca %"char[]", align 8
  %indirectarg184 = alloca %"char[]", align 8
  %indirectarg185 = alloca %"char[]", align 8
  %varargslots186 = alloca [2 x %any], align 16
  %indirectarg189 = alloca %"any[]", align 8
  %taddr196 = alloca i64, align 8
  %taddr197 = alloca i64, align 8
  %indirectarg198 = alloca %"char[]", align 8
  %indirectarg199 = alloca %"char[]", align 8
  %indirectarg200 = alloca %"char[]", align 8
  %varargslots201 = alloca [2 x %any], align 16
  %indirectarg204 = alloca %"any[]", align 8
  %taddr209 = alloca i64, align 8
  %taddr210 = alloca i64, align 8
  %indirectarg211 = alloca %"char[]", align 8
  %indirectarg212 = alloca %"char[]", align 8
  %indirectarg213 = alloca %"char[]", align 8
  %varargslots214 = alloca [2 x %any], align 16
  %indirectarg217 = alloca %"any[]", align 8
  %taddr223 = alloca i64, align 8
  %indirectarg224 = alloca %"char[]", align 8
  %indirectarg225 = alloca %"char[]", align 8
  %indirectarg226 = alloca %"char[]", align 8
  %varargslots227 = alloca [1 x %any], align 16
  %indirectarg229 = alloca %"any[]", align 8
  %taddr234 = alloca i64, align 8
  %taddr235 = alloca i64, align 8
  %indirectarg236 = alloca %"char[]", align 8
  %indirectarg237 = alloca %"char[]", align 8
  %indirectarg238 = alloca %"char[]", align 8
  %varargslots239 = alloca [2 x %any], align 16
  %indirectarg242 = alloca %"any[]", align 8
    #dbg_declare(ptr %1, !857, !DIExpression(), !858)
    #dbg_declare(ptr %2, !859, !DIExpression(), !858)
    #dbg_declare(ptr %splitter, !860, !DIExpression(), !861)
  store ptr null, ptr %.cachedtype, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg, ptr align 8 %1, i32 16, i1 false)
  store %"char[]" { ptr @.str, i64 1 }, ptr %indirectarg1, align 8
  call void @std.core.String.tokenize(ptr sret(%Splitter) align 8 %splitter, ptr align 8 %indirectarg, ptr align 8 %indirectarg1), !dbg !861
    #dbg_declare(ptr %new_string, !862, !DIExpression(), !863)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator, ptr align 8 %2, i32 16, i1 false)
  %ptradd = getelementptr inbounds i8, ptr %1, i64 8, !dbg !863
  %3 = load i64, ptr %ptradd, align 8, !dbg !863
  %add = add i64 %3, 1, !dbg !863
  store i64 %add, ptr %elements, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator2, ptr align 8 %allocator, i32 16, i1 false)
  %4 = load i64, ptr %elements, align 8
  store i64 %4, ptr %elements3, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator4, ptr align 8 %allocator2, i32 16, i1 false)
  %5 = load i64, ptr %elements3, align 8, !dbg !864
  %mul = mul i64 1, %5, !dbg !864
  store i64 %mul, ptr %size, align 8
  %6 = load i64, ptr %size, align 8, !dbg !868
  %i2nb = icmp eq i64 %6, 0, !dbg !868
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !868

if.then:                                          ; preds = %entry
  store ptr null, ptr %blockret, align 8, !dbg !868
  br label %expr_block.exit, !dbg !868

if.exit:                                          ; preds = %entry
  %7 = load i64, ptr %size, align 8, !dbg !870
  br i1 true, label %or.phi, label %or.rhs, !dbg !871

or.rhs:                                           ; preds = %if.exit
  store i64 0, ptr %x, align 8
  %8 = load i64, ptr %x, align 8, !dbg !872
  %neq = icmp ne i64 0, %8, !dbg !872
  br i1 %neq, label %and.rhs, label %and.phi, !dbg !872

and.rhs:                                          ; preds = %or.rhs
  %9 = load i64, ptr %x, align 8, !dbg !872
  %10 = load i64, ptr %x, align 8, !dbg !872
  %sub = sub i64 %10, 1, !dbg !872
  %and = and i64 %9, %sub, !dbg !872
  %eq = icmp eq i64 %and, 0, !dbg !872
  br label %and.phi, !dbg !872

and.phi:                                          ; preds = %and.rhs, %or.rhs
  %val = phi i1 [ false, %or.rhs ], [ %eq, %and.rhs ], !dbg !872
  br label %or.phi, !dbg !872

or.phi:                                           ; preds = %and.phi, %if.exit
  %val5 = phi i1 [ true, %if.exit ], [ %val, %and.phi ], !dbg !872
  br i1 %val5, label %assert_ok, label %assert_fail, !dbg !872

assert_fail:                                      ; preds = %or.phi
  store %"char[]" { ptr @.panic_msg, i64 65 }, ptr %indirectarg6, align 8
  store %"char[]" { ptr @.file, i64 16 }, ptr %indirectarg7, align 8
  store %"char[]" { ptr @.func.76, i64 20 }, ptr %indirectarg8, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11(ptr align 8 %indirectarg6, ptr align 8 %indirectarg7, ptr align 8 %indirectarg8, i32 86) #6, !dbg !870
  unreachable, !dbg !870

assert_ok:                                        ; preds = %or.phi
  br i1 true, label %assert_ok13, label %assert_fail9, !dbg !870

assert_fail9:                                     ; preds = %assert_ok
  store %"char[]" { ptr @.panic_msg.7, i64 80 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.file, i64 16 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.func.76, i64 20 }, ptr %indirectarg12, align 8
  %12 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %12(ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, i32 86) #6, !dbg !870
  unreachable, !dbg !870

assert_ok13:                                      ; preds = %assert_ok
  %lt = icmp ult i64 0, %7, !dbg !870
  br i1 %lt, label %assert_ok18, label %assert_fail14, !dbg !870

assert_fail14:                                    ; preds = %assert_ok13
  store %"char[]" { ptr @.panic_msg.8, i64 59 }, ptr %indirectarg15, align 8
  store %"char[]" { ptr @.file, i64 16 }, ptr %indirectarg16, align 8
  store %"char[]" { ptr @.func.76, i64 20 }, ptr %indirectarg17, align 8
  %13 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %13(ptr align 8 %indirectarg15, ptr align 8 %indirectarg16, ptr align 8 %indirectarg17, i32 86) #6, !dbg !870
  unreachable, !dbg !870

assert_ok18:                                      ; preds = %assert_ok13
  %ptradd19 = getelementptr inbounds i8, ptr %allocator4, i64 8, !dbg !870
  %14 = load i64, ptr %ptradd19, align 8, !dbg !870
  %15 = inttoptr i64 %14 to ptr, !dbg !870
  %type = load ptr, ptr %.cachedtype, align 8
  %16 = icmp eq ptr %15, %type
  br i1 %16, label %cache_hit, label %cache_miss

cache_miss:                                       ; preds = %assert_ok18
  %ptradd20 = getelementptr inbounds i8, ptr %15, i64 16
  %17 = load ptr, ptr %ptradd20, align 8
  %18 = call ptr @.dyn_search(ptr %17, ptr @"$sel.acquire")
  store ptr %18, ptr %.inlinecache, align 8
  store ptr %15, ptr %.cachedtype, align 8
  br label %19

cache_hit:                                        ; preds = %assert_ok18
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8
  br label %19

19:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %18, %cache_miss ]
  %20 = icmp eq ptr %fn_phi, null
  br i1 %20, label %missing_function, label %match

missing_function:                                 ; preds = %19
  store %"char[]" { ptr @.panic_msg.9, i64 44 }, ptr %indirectarg21, align 8
  store %"char[]" { ptr @.file, i64 16 }, ptr %indirectarg22, align 8
  store %"char[]" { ptr @.func.76, i64 20 }, ptr %indirectarg23, align 8
  %21 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %21(ptr align 8 %indirectarg21, ptr align 8 %indirectarg22, ptr align 8 %indirectarg23, i32 86) #6, !dbg !870
  unreachable, !dbg !870

match:                                            ; preds = %19
  %22 = load ptr, ptr %allocator4, align 8
  %23 = call i64 %fn_phi(ptr %retparam, ptr %22, i64 %7, i32 0, i64 0), !dbg !870
  %not_err = icmp eq i64 %23, 0, !dbg !870
  %24 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !870
  br i1 %24, label %after_check, label %assign_optional, !dbg !870

assign_optional:                                  ; preds = %match
  store i64 %23, ptr %error_var, align 8, !dbg !870
  br label %panic_block, !dbg !870

after_check:                                      ; preds = %match
  %25 = load ptr, ptr %retparam, align 8, !dbg !870
  store ptr %25, ptr %blockret, align 8, !dbg !870
  br label %expr_block.exit, !dbg !870

expr_block.exit:                                  ; preds = %after_check, %if.then
  %26 = load ptr, ptr %blockret, align 8, !dbg !870
  store ptr %26, ptr %taddr, align 8
  %27 = load ptr, ptr %taddr, align 8
  %28 = load i64, ptr %elements3, align 8, !dbg !864
  %add24 = add i64 0, %28, !dbg !864
  %gt = icmp ugt i64 0, %add24, !dbg !864
  %sub25 = sub i64 %add24, 0, !dbg !864
  %29 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !864
  br i1 %29, label %panic, label %checkok, !dbg !864

checkok:                                          ; preds = %expr_block.exit
  %size31 = sub i64 %add24, 0, !dbg !864
  %30 = insertvalue %"char[]" undef, ptr %27, 0, !dbg !864
  %31 = insertvalue %"char[]" %30, i64 %size31, 1, !dbg !864
  br label %noerr_block, !dbg !864

panic_block:                                      ; preds = %assign_optional
  %32 = insertvalue %any undef, ptr %error_var, 0, !dbg !864
  %33 = insertvalue %any %32, i64 ptrtoint (ptr @"$ct.fault" to i64), 1, !dbg !864
  store %"char[]" { ptr @.panic_msg.11, i64 36 }, ptr %indirectarg32, align 8
  store %"char[]" { ptr @.file, i64 16 }, ptr %indirectarg33, align 8
  store %"char[]" { ptr @.func.76, i64 20 }, ptr %indirectarg34, align 8
  store %any %33, ptr %varargslots35, align 16
  %34 = insertvalue %"any[]" undef, ptr %varargslots35, 0
  %"$$temp36" = insertvalue %"any[]" %34, i64 1, 1
  store %"any[]" %"$$temp36", ptr %indirectarg37, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg32, ptr align 8 %indirectarg33, ptr align 8 %indirectarg34, i32 287, ptr align 8 %indirectarg37) #6, !dbg !866
  unreachable, !dbg !866

noerr_block:                                      ; preds = %checkok
  store %"char[]" %31, ptr %new_string, align 8, !dbg !866
    #dbg_declare(ptr %index, !874, !DIExpression(), !875)
  store i64 0, ptr %index, align 8, !dbg !875
  br label %loop.cond, !dbg !876

loop.cond:                                        ; preds = %checkok190, %noerr_block
    #dbg_declare(ptr %s, !877, !DIExpression(), !879)
  call void @llvm.memset.p0.i64(ptr align 8 %s, i8 0, i64 16, i1 false), !dbg !879
  %35 = call i64 @std.core.string.Splitter.next(ptr %retparam38, ptr %splitter), !dbg !879
  %not_err39 = icmp eq i64 %35, 0, !dbg !879
  %36 = call i1 @llvm.expect.i1(i1 %not_err39, i1 true), !dbg !879
  br i1 %36, label %after_check40, label %catch_landing, !dbg !879

after_check40:                                    ; preds = %loop.cond
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %s, ptr align 8 %retparam38, i32 16, i1 false), !dbg !879
  br label %phi_try_catch, !dbg !879

catch_landing:                                    ; preds = %loop.cond
  br label %phi_try_catch, !dbg !879

phi_try_catch:                                    ; preds = %catch_landing, %after_check40
  %val41 = phi i1 [ true, %after_check40 ], [ false, %catch_landing ], !dbg !879
  br i1 %val41, label %loop.body, label %loop.exit, !dbg !879

loop.body:                                        ; preds = %phi_try_catch
  %ptradd42 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !880
  %37 = load i64, ptr %ptradd42, align 8, !dbg !880
  %lt43 = icmp ult i64 0, %37, !dbg !880
  br i1 %lt43, label %assert_ok48, label %assert_fail44, !dbg !880

assert_fail44:                                    ; preds = %loop.body
  store %"char[]" { ptr @.panic_msg.77, i64 26 }, ptr %indirectarg45, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg46, align 8
  store %"char[]" { ptr @.func.76, i64 20 }, ptr %indirectarg47, align 8
  %38 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %38(ptr align 8 %indirectarg45, ptr align 8 %indirectarg46, ptr align 8 %indirectarg47, i32 803) #6, !dbg !880
  unreachable, !dbg !880

assert_ok48:                                      ; preds = %loop.body
    #dbg_declare(ptr %c, !882, !DIExpression(), !883)
  %ptradd49 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !883
  %39 = load i64, ptr %ptradd49, align 8, !dbg !883
  %40 = load ptr, ptr %s, align 8, !dbg !883
  %ge = icmp sge i64 0, %39, !dbg !883
  %41 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !883
  br i1 %41, label %panic50, label %checkok60, !dbg !883

checkok60:                                        ; preds = %assert_ok48
  %42 = load i8, ptr %40, align 1, !dbg !883
  store i8 %42, ptr %c, align 1, !dbg !883
  %43 = load i8, ptr %c, align 1
  store i8 %43, ptr %c61, align 1
  %44 = load i8, ptr %c61, align 1
  store i8 %44, ptr %c62, align 1
  %45 = load i8, ptr %c62, align 1, !dbg !884
  %zext = zext i8 %45 to i64, !dbg !884
  %ge63 = icmp uge i64 %zext, 256, !dbg !884
  %46 = call i1 @llvm.expect.i1(i1 %ge63, i1 false), !dbg !884
  br i1 %46, label %panic64, label %checkok74, !dbg !884

checkok74:                                        ; preds = %checkok60
  %ptroffset = getelementptr inbounds [2 x i8], ptr @std.core.ascii.ASCII_LOOKUP, i64 %zext, !dbg !884
  %47 = load i16, ptr %ptroffset, align 2, !dbg !884
  %48 = and i16 1, %47, !dbg !884
  %trunc = trunc i16 %48 to i8, !dbg !884
  %49 = trunc i8 %trunc to i1, !dbg !884
  br i1 %49, label %if.then75, label %if.exit96, !dbg !884

if.then75:                                        ; preds = %checkok74
  %50 = load i8, ptr %c, align 1
  store i8 %50, ptr %c76, align 1
  %51 = load i8, ptr %c76, align 1
  store i8 %51, ptr %c77, align 1
  %52 = load i8, ptr %c77, align 1, !dbg !889
  %zext78 = zext i8 %52 to i32, !dbg !889
  %53 = load i8, ptr %c77, align 1, !dbg !889
  %zext79 = zext i8 %53 to i64, !dbg !889
  %ge80 = icmp uge i64 %zext79, 256, !dbg !889
  %54 = call i1 @llvm.expect.i1(i1 %ge80, i1 false), !dbg !889
  br i1 %54, label %panic81, label %checkok91, !dbg !889

checkok91:                                        ; preds = %if.then75
  %ptradd92 = getelementptr inbounds i8, ptr @std.core.ascii.TO_UPPER, i64 %zext79, !dbg !889
  %55 = load i8, ptr %ptradd92, align 1, !dbg !889
  %zext93 = zext i8 %55 to i32, !dbg !889
  %sub94 = sub i32 %zext78, %zext93, !dbg !889
  %trunc95 = trunc i32 %sub94 to i8, !dbg !889
  store i8 %trunc95, ptr %c, align 1, !dbg !889
  br label %if.exit96, !dbg !889

if.exit96:                                        ; preds = %checkok91, %checkok74
  %ptradd97 = getelementptr inbounds i8, ptr %new_string, i64 8, !dbg !893
  %56 = load i64, ptr %ptradd97, align 8, !dbg !893
  %57 = load ptr, ptr %new_string, align 8, !dbg !893
  %58 = load i64, ptr %index, align 8, !dbg !893
  %add98 = add i64 %58, 1, !dbg !893
  store i64 %add98, ptr %index, align 8, !dbg !893
  %ge99 = icmp uge i64 %58, %56, !dbg !893
  %59 = call i1 @llvm.expect.i1(i1 %ge99, i1 false), !dbg !893
  br i1 %59, label %panic100, label %checkok110, !dbg !893

checkok110:                                       ; preds = %if.exit96
  %ptradd111 = getelementptr inbounds i8, ptr %57, i64 %58, !dbg !893
  %60 = load i8, ptr %c, align 1, !dbg !893
  store i8 %60, ptr %ptradd111, align 1, !dbg !893
  %61 = load %"char[]", ptr %s, align 8, !dbg !894
  %62 = extractvalue %"char[]" %61, 0, !dbg !894
  %63 = extractvalue %"char[]" %61, 1, !dbg !894
  %gt112 = icmp sgt i64 1, %63, !dbg !894
  %64 = call i1 @llvm.expect.i1(i1 %gt112, i1 false), !dbg !894
  br i1 %64, label %panic113, label %checkok123, !dbg !894

checkok123:                                       ; preds = %checkok110
  %size124 = sub i64 %63, 1, !dbg !894
  %ptradd125 = getelementptr inbounds i8, ptr %62, i64 1, !dbg !894
  %65 = insertvalue %"char[]" undef, ptr %ptradd125, 0, !dbg !894
  %66 = insertvalue %"char[]" %65, i64 %size124, 1, !dbg !894
  store %"char[]" %66, ptr %s, align 8, !dbg !894
  %67 = load %"char[]", ptr %s, align 8, !dbg !895
  %68 = extractvalue %"char[]" %67, 0, !dbg !895
  %69 = extractvalue %"char[]" %67, 1, !dbg !895
  %gt126 = icmp ugt i64 0, %69, !dbg !895
  %70 = call i1 @llvm.expect.i1(i1 %gt126, i1 false), !dbg !895
  br i1 %70, label %panic127, label %checkok137, !dbg !895

checkok137:                                       ; preds = %checkok123
  %size138 = sub i64 %69, 0, !dbg !895
  %71 = insertvalue %"char[]" undef, ptr %68, 0, !dbg !895
  %72 = insertvalue %"char[]" %71, i64 %size138, 1, !dbg !895
  %73 = load %"char[]", ptr %new_string, align 8, !dbg !895
  %74 = extractvalue %"char[]" %73, 0, !dbg !895
  %75 = load i64, ptr %index, align 8, !dbg !895
  %76 = extractvalue %"char[]" %73, 1, !dbg !895
  %gt139 = icmp ugt i64 %75, %76, !dbg !895
  %77 = call i1 @llvm.expect.i1(i1 %gt139, i1 false), !dbg !895
  br i1 %77, label %panic140, label %checkok150, !dbg !895

checkok150:                                       ; preds = %checkok137
  %ptradd151 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !895
  %78 = load i64, ptr %ptradd151, align 8, !dbg !895
  %add152 = add i64 %75, %78, !dbg !895
  %gt153 = icmp ugt i64 %75, %add152, !dbg !895
  %sub154 = sub i64 %add152, %75, !dbg !895
  %79 = call i1 @llvm.expect.i1(i1 %gt153, i1 false), !dbg !895
  br i1 %79, label %panic155, label %checkok163, !dbg !895

checkok163:                                       ; preds = %checkok150
  %lt164 = icmp ult i64 %76, %add152, !dbg !895
  %sub165 = sub i64 %add152, 1, !dbg !895
  %80 = call i1 @llvm.expect.i1(i1 %lt164, i1 false), !dbg !895
  br i1 %80, label %panic166, label %checkok176, !dbg !895

checkok176:                                       ; preds = %checkok163
  %size177 = sub i64 %add152, %75, !dbg !895
  %ptradd178 = getelementptr inbounds i8, ptr %74, i64 %75, !dbg !895
  %81 = insertvalue %"char[]" undef, ptr %ptradd178, 0, !dbg !895
  %82 = insertvalue %"char[]" %81, i64 %size177, 1, !dbg !895
  %83 = extractvalue %"char[]" %82, 0, !dbg !895
  %84 = extractvalue %"char[]" %72, 0, !dbg !895
  %85 = extractvalue %"char[]" %72, 1, !dbg !895
  %86 = extractvalue %"char[]" %82, 1, !dbg !895
  %neq179 = icmp ne i64 %86, %85, !dbg !895
  %87 = call i1 @llvm.expect.i1(i1 %neq179, i1 false), !dbg !895
  br i1 %87, label %panic180, label %checkok190, !dbg !895

checkok190:                                       ; preds = %checkok176
  %88 = mul i64 %85, 1, !dbg !895
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %83, ptr align 1 %84, i64 %88, i1 false), !dbg !895
  %89 = load i64, ptr %index, align 8, !dbg !896
  %ptradd191 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !896
  %90 = load i64, ptr %ptradd191, align 8, !dbg !896
  %add192 = add i64 %89, %90, !dbg !896
  store i64 %add192, ptr %index, align 8, !dbg !896
  br label %loop.cond, !dbg !896

loop.exit:                                        ; preds = %phi_try_catch
  %ptradd193 = getelementptr inbounds i8, ptr %new_string, i64 8, !dbg !897
  %91 = load i64, ptr %ptradd193, align 8, !dbg !897
  %92 = load ptr, ptr %new_string, align 8, !dbg !897
  %93 = load i64, ptr %index, align 8, !dbg !897
  %ge194 = icmp uge i64 %93, %91, !dbg !897
  %94 = call i1 @llvm.expect.i1(i1 %ge194, i1 false), !dbg !897
  br i1 %94, label %panic195, label %checkok205, !dbg !897

checkok205:                                       ; preds = %loop.exit
  %ptradd206 = getelementptr inbounds i8, ptr %92, i64 %93, !dbg !897
  store i8 0, ptr %ptradd206, align 1, !dbg !897
  %95 = load %"char[]", ptr %new_string, align 8, !dbg !898
  %96 = extractvalue %"char[]" %95, 0, !dbg !898
  %97 = extractvalue %"char[]" %95, 1, !dbg !898
  %gt207 = icmp ugt i64 0, %97, !dbg !898
  %98 = call i1 @llvm.expect.i1(i1 %gt207, i1 false), !dbg !898
  br i1 %98, label %panic208, label %checkok218, !dbg !898

checkok218:                                       ; preds = %checkok205
  %99 = load i64, ptr %index, align 8, !dbg !898
  %add219 = add i64 0, %99, !dbg !898
  %gt220 = icmp ugt i64 0, %add219, !dbg !898
  %sub221 = sub i64 %add219, 0, !dbg !898
  %100 = call i1 @llvm.expect.i1(i1 %gt220, i1 false), !dbg !898
  br i1 %100, label %panic222, label %checkok230, !dbg !898

checkok230:                                       ; preds = %checkok218
  %lt231 = icmp ult i64 %97, %add219, !dbg !898
  %sub232 = sub i64 %add219, 1, !dbg !898
  %101 = call i1 @llvm.expect.i1(i1 %lt231, i1 false), !dbg !898
  br i1 %101, label %panic233, label %checkok243, !dbg !898

checkok243:                                       ; preds = %checkok230
  %size244 = sub i64 %add219, 0, !dbg !898
  %102 = insertvalue %"char[]" undef, ptr %96, 0, !dbg !898
  %103 = insertvalue %"char[]" %102, i64 %size244, 1, !dbg !898
  store %"char[]" %103, ptr %0, align 8, !dbg !898
  ret void, !dbg !898

panic:                                            ; preds = %expr_block.exit
  store i64 %sub25, ptr %taddr26, align 8
  %104 = insertvalue %any undef, ptr %taddr26, 0
  %105 = insertvalue %any %104, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.10, i64 43 }, ptr %indirectarg27, align 8
  store %"char[]" { ptr @.file, i64 16 }, ptr %indirectarg28, align 8
  store %"char[]" { ptr @.func.76, i64 20 }, ptr %indirectarg29, align 8
  store %any %105, ptr %varargslots, align 16
  %106 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %106, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg30, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg27, ptr align 8 %indirectarg28, ptr align 8 %indirectarg29, i32 304, ptr align 8 %indirectarg30) #6, !dbg !864
  unreachable, !dbg !864

panic50:                                          ; preds = %assert_ok48
  store i64 %39, ptr %taddr51, align 8
  %107 = insertvalue %any undef, ptr %taddr51, 0
  %108 = insertvalue %any %107, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr52, align 8
  %109 = insertvalue %any undef, ptr %taddr52, 0
  %110 = insertvalue %any %109, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg53, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg54, align 8
  store %"char[]" { ptr @.func.76, i64 20 }, ptr %indirectarg55, align 8
  store %any %108, ptr %varargslots56, align 16
  %ptradd57 = getelementptr inbounds i8, ptr %varargslots56, i64 16
  store %any %110, ptr %ptradd57, align 16
  %111 = insertvalue %"any[]" undef, ptr %varargslots56, 0
  %"$$temp58" = insertvalue %"any[]" %111, i64 2, 1
  store %"any[]" %"$$temp58", ptr %indirectarg59, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg53, ptr align 8 %indirectarg54, ptr align 8 %indirectarg55, i32 804, ptr align 8 %indirectarg59) #6, !dbg !883
  unreachable, !dbg !883

panic64:                                          ; preds = %checkok60
  store i64 256, ptr %taddr65, align 8
  %112 = insertvalue %any undef, ptr %taddr65, 0
  %113 = insertvalue %any %112, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %zext, ptr %taddr66, align 8
  %114 = insertvalue %any undef, ptr %taddr66, 0
  %115 = insertvalue %any %114, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg67, align 8
  store %"char[]" { ptr @.file.73, i64 8 }, ptr %indirectarg68, align 8
  store %"char[]" { ptr @.func.76, i64 20 }, ptr %indirectarg69, align 8
  store %any %113, ptr %varargslots70, align 16
  %ptradd71 = getelementptr inbounds i8, ptr %varargslots70, i64 16
  store %any %115, ptr %ptradd71, align 16
  %116 = insertvalue %"any[]" undef, ptr %varargslots70, 0
  %"$$temp72" = insertvalue %"any[]" %116, i64 2, 1
  store %"any[]" %"$$temp72", ptr %indirectarg73, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg67, ptr align 8 %indirectarg68, ptr align 8 %indirectarg69, i32 7, ptr align 8 %indirectarg73) #6, !dbg !884
  unreachable, !dbg !884

panic81:                                          ; preds = %if.then75
  store i64 256, ptr %taddr82, align 8
  %117 = insertvalue %any undef, ptr %taddr82, 0
  %118 = insertvalue %any %117, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %zext79, ptr %taddr83, align 8
  %119 = insertvalue %any undef, ptr %taddr83, 0
  %120 = insertvalue %any %119, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg84, align 8
  store %"char[]" { ptr @.file.73, i64 8 }, ptr %indirectarg85, align 8
  store %"char[]" { ptr @.func.76, i64 20 }, ptr %indirectarg86, align 8
  store %any %118, ptr %varargslots87, align 16
  %ptradd88 = getelementptr inbounds i8, ptr %varargslots87, i64 16
  store %any %120, ptr %ptradd88, align 16
  %121 = insertvalue %"any[]" undef, ptr %varargslots87, 0
  %"$$temp89" = insertvalue %"any[]" %121, i64 2, 1
  store %"any[]" %"$$temp89", ptr %indirectarg90, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg84, ptr align 8 %indirectarg85, ptr align 8 %indirectarg86, i32 22, ptr align 8 %indirectarg90) #6, !dbg !889
  unreachable, !dbg !889

panic100:                                         ; preds = %if.exit96
  store i64 %56, ptr %taddr101, align 8
  %122 = insertvalue %any undef, ptr %taddr101, 0
  %123 = insertvalue %any %122, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %58, ptr %taddr102, align 8
  %124 = insertvalue %any undef, ptr %taddr102, 0
  %125 = insertvalue %any %124, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg103, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg104, align 8
  store %"char[]" { ptr @.func.76, i64 20 }, ptr %indirectarg105, align 8
  store %any %123, ptr %varargslots106, align 16
  %ptradd107 = getelementptr inbounds i8, ptr %varargslots106, i64 16
  store %any %125, ptr %ptradd107, align 16
  %126 = insertvalue %"any[]" undef, ptr %varargslots106, 0
  %"$$temp108" = insertvalue %"any[]" %126, i64 2, 1
  store %"any[]" %"$$temp108", ptr %indirectarg109, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg103, ptr align 8 %indirectarg104, ptr align 8 %indirectarg105, i32 806, ptr align 8 %indirectarg109) #6, !dbg !893
  unreachable, !dbg !893

panic113:                                         ; preds = %checkok110
  store i64 %63, ptr %taddr114, align 8
  %127 = insertvalue %any undef, ptr %taddr114, 0
  %128 = insertvalue %any %127, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 1, ptr %taddr115, align 8
  %129 = insertvalue %any undef, ptr %taddr115, 0
  %130 = insertvalue %any %129, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.12, i64 61 }, ptr %indirectarg116, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg117, align 8
  store %"char[]" { ptr @.func.76, i64 20 }, ptr %indirectarg118, align 8
  store %any %128, ptr %varargslots119, align 16
  %ptradd120 = getelementptr inbounds i8, ptr %varargslots119, i64 16
  store %any %130, ptr %ptradd120, align 16
  %131 = insertvalue %"any[]" undef, ptr %varargslots119, 0
  %"$$temp121" = insertvalue %"any[]" %131, i64 2, 1
  store %"any[]" %"$$temp121", ptr %indirectarg122, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg116, ptr align 8 %indirectarg117, ptr align 8 %indirectarg118, i32 807, ptr align 8 %indirectarg122) #6, !dbg !894
  unreachable, !dbg !894

panic127:                                         ; preds = %checkok123
  store i64 %69, ptr %taddr128, align 8
  %132 = insertvalue %any undef, ptr %taddr128, 0
  %133 = insertvalue %any %132, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr129, align 8
  %134 = insertvalue %any undef, ptr %taddr129, 0
  %135 = insertvalue %any %134, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.12, i64 61 }, ptr %indirectarg130, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg131, align 8
  store %"char[]" { ptr @.func.76, i64 20 }, ptr %indirectarg132, align 8
  store %any %133, ptr %varargslots133, align 16
  %ptradd134 = getelementptr inbounds i8, ptr %varargslots133, i64 16
  store %any %135, ptr %ptradd134, align 16
  %136 = insertvalue %"any[]" undef, ptr %varargslots133, 0
  %"$$temp135" = insertvalue %"any[]" %136, i64 2, 1
  store %"any[]" %"$$temp135", ptr %indirectarg136, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg130, ptr align 8 %indirectarg131, ptr align 8 %indirectarg132, i32 808, ptr align 8 %indirectarg136) #6, !dbg !895
  unreachable, !dbg !895

panic140:                                         ; preds = %checkok137
  store i64 %76, ptr %taddr141, align 8
  %137 = insertvalue %any undef, ptr %taddr141, 0
  %138 = insertvalue %any %137, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %75, ptr %taddr142, align 8
  %139 = insertvalue %any undef, ptr %taddr142, 0
  %140 = insertvalue %any %139, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.12, i64 61 }, ptr %indirectarg143, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg144, align 8
  store %"char[]" { ptr @.func.76, i64 20 }, ptr %indirectarg145, align 8
  store %any %138, ptr %varargslots146, align 16
  %ptradd147 = getelementptr inbounds i8, ptr %varargslots146, i64 16
  store %any %140, ptr %ptradd147, align 16
  %141 = insertvalue %"any[]" undef, ptr %varargslots146, 0
  %"$$temp148" = insertvalue %"any[]" %141, i64 2, 1
  store %"any[]" %"$$temp148", ptr %indirectarg149, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg143, ptr align 8 %indirectarg144, ptr align 8 %indirectarg145, i32 808, ptr align 8 %indirectarg149) #6, !dbg !895
  unreachable, !dbg !895

panic155:                                         ; preds = %checkok150
  store i64 %sub154, ptr %taddr156, align 8
  %142 = insertvalue %any undef, ptr %taddr156, 0
  %143 = insertvalue %any %142, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.10, i64 43 }, ptr %indirectarg157, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg158, align 8
  store %"char[]" { ptr @.func.76, i64 20 }, ptr %indirectarg159, align 8
  store %any %143, ptr %varargslots160, align 16
  %144 = insertvalue %"any[]" undef, ptr %varargslots160, 0
  %"$$temp161" = insertvalue %"any[]" %144, i64 1, 1
  store %"any[]" %"$$temp161", ptr %indirectarg162, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg157, ptr align 8 %indirectarg158, ptr align 8 %indirectarg159, i32 808, ptr align 8 %indirectarg162) #6, !dbg !895
  unreachable, !dbg !895

panic166:                                         ; preds = %checkok163
  store i64 %sub165, ptr %taddr167, align 8
  %145 = insertvalue %any undef, ptr %taddr167, 0
  %146 = insertvalue %any %145, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %76, ptr %taddr168, align 8
  %147 = insertvalue %any undef, ptr %taddr168, 0
  %148 = insertvalue %any %147, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.14, i64 60 }, ptr %indirectarg169, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg170, align 8
  store %"char[]" { ptr @.func.76, i64 20 }, ptr %indirectarg171, align 8
  store %any %146, ptr %varargslots172, align 16
  %ptradd173 = getelementptr inbounds i8, ptr %varargslots172, i64 16
  store %any %148, ptr %ptradd173, align 16
  %149 = insertvalue %"any[]" undef, ptr %varargslots172, 0
  %"$$temp174" = insertvalue %"any[]" %149, i64 2, 1
  store %"any[]" %"$$temp174", ptr %indirectarg175, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg169, ptr align 8 %indirectarg170, ptr align 8 %indirectarg171, i32 808, ptr align 8 %indirectarg175) #6, !dbg !895
  unreachable, !dbg !895

panic180:                                         ; preds = %checkok176
  store i64 %86, ptr %taddr181, align 8
  %150 = insertvalue %any undef, ptr %taddr181, 0
  %151 = insertvalue %any %150, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %85, ptr %taddr182, align 8
  %152 = insertvalue %any undef, ptr %taddr182, 0
  %153 = insertvalue %any %152, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.78, i64 38 }, ptr %indirectarg183, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg184, align 8
  store %"char[]" { ptr @.func.76, i64 20 }, ptr %indirectarg185, align 8
  store %any %151, ptr %varargslots186, align 16
  %ptradd187 = getelementptr inbounds i8, ptr %varargslots186, i64 16
  store %any %153, ptr %ptradd187, align 16
  %154 = insertvalue %"any[]" undef, ptr %varargslots186, 0
  %"$$temp188" = insertvalue %"any[]" %154, i64 2, 1
  store %"any[]" %"$$temp188", ptr %indirectarg189, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg183, ptr align 8 %indirectarg184, ptr align 8 %indirectarg185, i32 808, ptr align 8 %indirectarg189) #6, !dbg !895
  unreachable, !dbg !895

panic195:                                         ; preds = %loop.exit
  store i64 %91, ptr %taddr196, align 8
  %155 = insertvalue %any undef, ptr %taddr196, 0
  %156 = insertvalue %any %155, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %93, ptr %taddr197, align 8
  %157 = insertvalue %any undef, ptr %taddr197, 0
  %158 = insertvalue %any %157, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg198, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg199, align 8
  store %"char[]" { ptr @.func.76, i64 20 }, ptr %indirectarg200, align 8
  store %any %156, ptr %varargslots201, align 16
  %ptradd202 = getelementptr inbounds i8, ptr %varargslots201, i64 16
  store %any %158, ptr %ptradd202, align 16
  %159 = insertvalue %"any[]" undef, ptr %varargslots201, 0
  %"$$temp203" = insertvalue %"any[]" %159, i64 2, 1
  store %"any[]" %"$$temp203", ptr %indirectarg204, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg198, ptr align 8 %indirectarg199, ptr align 8 %indirectarg200, i32 811, ptr align 8 %indirectarg204) #6, !dbg !897
  unreachable, !dbg !897

panic208:                                         ; preds = %checkok205
  store i64 %97, ptr %taddr209, align 8
  %160 = insertvalue %any undef, ptr %taddr209, 0
  %161 = insertvalue %any %160, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr210, align 8
  %162 = insertvalue %any undef, ptr %taddr210, 0
  %163 = insertvalue %any %162, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.12, i64 61 }, ptr %indirectarg211, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg212, align 8
  store %"char[]" { ptr @.func.76, i64 20 }, ptr %indirectarg213, align 8
  store %any %161, ptr %varargslots214, align 16
  %ptradd215 = getelementptr inbounds i8, ptr %varargslots214, i64 16
  store %any %163, ptr %ptradd215, align 16
  %164 = insertvalue %"any[]" undef, ptr %varargslots214, 0
  %"$$temp216" = insertvalue %"any[]" %164, i64 2, 1
  store %"any[]" %"$$temp216", ptr %indirectarg217, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg211, ptr align 8 %indirectarg212, ptr align 8 %indirectarg213, i32 812, ptr align 8 %indirectarg217) #6, !dbg !898
  unreachable, !dbg !898

panic222:                                         ; preds = %checkok218
  store i64 %sub221, ptr %taddr223, align 8
  %165 = insertvalue %any undef, ptr %taddr223, 0
  %166 = insertvalue %any %165, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.10, i64 43 }, ptr %indirectarg224, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg225, align 8
  store %"char[]" { ptr @.func.76, i64 20 }, ptr %indirectarg226, align 8
  store %any %166, ptr %varargslots227, align 16
  %167 = insertvalue %"any[]" undef, ptr %varargslots227, 0
  %"$$temp228" = insertvalue %"any[]" %167, i64 1, 1
  store %"any[]" %"$$temp228", ptr %indirectarg229, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg224, ptr align 8 %indirectarg225, ptr align 8 %indirectarg226, i32 812, ptr align 8 %indirectarg229) #6, !dbg !898
  unreachable, !dbg !898

panic233:                                         ; preds = %checkok230
  store i64 %sub232, ptr %taddr234, align 8
  %168 = insertvalue %any undef, ptr %taddr234, 0
  %169 = insertvalue %any %168, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %97, ptr %taddr235, align 8
  %170 = insertvalue %any undef, ptr %taddr235, 0
  %171 = insertvalue %any %170, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.14, i64 60 }, ptr %indirectarg236, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg237, align 8
  store %"char[]" { ptr @.func.76, i64 20 }, ptr %indirectarg238, align 8
  store %any %169, ptr %varargslots239, align 16
  %ptradd240 = getelementptr inbounds i8, ptr %varargslots239, i64 16
  store %any %171, ptr %ptradd240, align 16
  %172 = insertvalue %"any[]" undef, ptr %varargslots239, 0
  %"$$temp241" = insertvalue %"any[]" %172, i64 2, 1
  store %"any[]" %"$$temp241", ptr %indirectarg242, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg236, ptr align 8 %indirectarg237, ptr align 8 %indirectarg238, i32 812, ptr align 8 %indirectarg242) #6, !dbg !898
  unreachable, !dbg !898
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.core.String.convert_snake_to_pascal(ptr %0) #0 comdat !dbg !899 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %splitter = alloca %Splitter, align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr9 = alloca i64, align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg13 = alloca %"any[]", align 8
  %indirectarg15 = alloca %"char[]", align 8
  %indirectarg16 = alloca %"char[]", align 8
  %new_string = alloca %"char[]", align 8
  %indirectarg19 = alloca %"char[]", align 8
  %indirectarg20 = alloca %"char[]", align 8
  %indirectarg21 = alloca %"char[]", align 8
  %taddr24 = alloca i64, align 8
  %taddr25 = alloca i64, align 8
  %indirectarg26 = alloca %"char[]", align 8
  %indirectarg27 = alloca %"char[]", align 8
  %indirectarg28 = alloca %"char[]", align 8
  %varargslots29 = alloca [2 x %any], align 16
  %indirectarg32 = alloca %"any[]", align 8
  %index = alloca i64, align 8
  %s = alloca %"char[]", align 8
  %retparam = alloca %"char[]", align 8
  %indirectarg35 = alloca %"char[]", align 8
  %indirectarg36 = alloca %"char[]", align 8
  %indirectarg37 = alloca %"char[]", align 8
  %c = alloca i8, align 1
  %taddr40 = alloca i64, align 8
  %taddr41 = alloca i64, align 8
  %indirectarg42 = alloca %"char[]", align 8
  %indirectarg43 = alloca %"char[]", align 8
  %indirectarg44 = alloca %"char[]", align 8
  %varargslots45 = alloca [2 x %any], align 16
  %indirectarg48 = alloca %"any[]", align 8
  %c50 = alloca i8, align 1
  %c51 = alloca i8, align 1
  %taddr54 = alloca i64, align 8
  %taddr55 = alloca i64, align 8
  %indirectarg56 = alloca %"char[]", align 8
  %indirectarg57 = alloca %"char[]", align 8
  %indirectarg58 = alloca %"char[]", align 8
  %varargslots59 = alloca [2 x %any], align 16
  %indirectarg62 = alloca %"any[]", align 8
  %c64 = alloca i8, align 1
  %c65 = alloca i8, align 1
  %taddr70 = alloca i64, align 8
  %taddr71 = alloca i64, align 8
  %indirectarg72 = alloca %"char[]", align 8
  %indirectarg73 = alloca %"char[]", align 8
  %indirectarg74 = alloca %"char[]", align 8
  %varargslots75 = alloca [2 x %any], align 16
  %indirectarg78 = alloca %"any[]", align 8
  %taddr86 = alloca i64, align 8
  %taddr87 = alloca i64, align 8
  %indirectarg88 = alloca %"char[]", align 8
  %indirectarg89 = alloca %"char[]", align 8
  %indirectarg90 = alloca %"char[]", align 8
  %varargslots91 = alloca [2 x %any], align 16
  %indirectarg94 = alloca %"any[]", align 8
  %taddr98 = alloca i64, align 8
  %taddr99 = alloca i64, align 8
  %indirectarg100 = alloca %"char[]", align 8
  %indirectarg101 = alloca %"char[]", align 8
  %indirectarg102 = alloca %"char[]", align 8
  %varargslots103 = alloca [2 x %any], align 16
  %indirectarg106 = alloca %"any[]", align 8
  %taddr111 = alloca i64, align 8
  %taddr112 = alloca i64, align 8
  %indirectarg113 = alloca %"char[]", align 8
  %indirectarg114 = alloca %"char[]", align 8
  %indirectarg115 = alloca %"char[]", align 8
  %varargslots116 = alloca [2 x %any], align 16
  %indirectarg119 = alloca %"any[]", align 8
  %taddr124 = alloca i64, align 8
  %taddr125 = alloca i64, align 8
  %indirectarg126 = alloca %"char[]", align 8
  %indirectarg127 = alloca %"char[]", align 8
  %indirectarg128 = alloca %"char[]", align 8
  %varargslots129 = alloca [2 x %any], align 16
  %indirectarg132 = alloca %"any[]", align 8
  %taddr139 = alloca i64, align 8
  %indirectarg140 = alloca %"char[]", align 8
  %indirectarg141 = alloca %"char[]", align 8
  %indirectarg142 = alloca %"char[]", align 8
  %varargslots143 = alloca [1 x %any], align 16
  %indirectarg145 = alloca %"any[]", align 8
  %taddr150 = alloca i64, align 8
  %taddr151 = alloca i64, align 8
  %indirectarg152 = alloca %"char[]", align 8
  %indirectarg153 = alloca %"char[]", align 8
  %indirectarg154 = alloca %"char[]", align 8
  %varargslots155 = alloca [2 x %any], align 16
  %indirectarg158 = alloca %"any[]", align 8
  %taddr163 = alloca i64, align 8
  %taddr164 = alloca i64, align 8
  %indirectarg165 = alloca %"char[]", align 8
  %indirectarg166 = alloca %"char[]", align 8
  %indirectarg167 = alloca %"char[]", align 8
  %varargslots168 = alloca [2 x %any], align 16
  %indirectarg171 = alloca %"any[]", align 8
  %taddr177 = alloca i64, align 8
  %taddr178 = alloca i64, align 8
  %indirectarg179 = alloca %"char[]", align 8
  %indirectarg180 = alloca %"char[]", align 8
  %indirectarg181 = alloca %"char[]", align 8
  %varargslots182 = alloca [2 x %any], align 16
  %indirectarg185 = alloca %"any[]", align 8
  %taddr191 = alloca i64, align 8
  %indirectarg192 = alloca %"char[]", align 8
  %indirectarg193 = alloca %"char[]", align 8
  %indirectarg194 = alloca %"char[]", align 8
  %varargslots195 = alloca [1 x %any], align 16
  %indirectarg197 = alloca %"any[]", align 8
  %taddr202 = alloca i64, align 8
  %taddr203 = alloca i64, align 8
  %indirectarg204 = alloca %"char[]", align 8
  %indirectarg205 = alloca %"char[]", align 8
  %indirectarg206 = alloca %"char[]", align 8
  %varargslots207 = alloca [2 x %any], align 16
  %indirectarg210 = alloca %"any[]", align 8
  %indirectarg215 = alloca %"char[]", align 8
  %indirectarg216 = alloca %"char[]", align 8
  %indirectarg217 = alloca %"char[]", align 8
  %taddr220 = alloca i64, align 8
  %taddr221 = alloca i64, align 8
  %indirectarg222 = alloca %"char[]", align 8
  %indirectarg223 = alloca %"char[]", align 8
  %indirectarg224 = alloca %"char[]", align 8
  %varargslots225 = alloca [2 x %any], align 16
  %indirectarg228 = alloca %"any[]", align 8
  %1 = icmp eq ptr %0, null, !dbg !902
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !902
  br i1 %2, label %panic, label %checkok, !dbg !902

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !903, !DIExpression(), !904)
    #dbg_declare(ptr %splitter, !905, !DIExpression(), !906)
  %3 = load ptr, ptr %self, align 8, !dbg !906
  %checknull = icmp eq ptr %3, null, !dbg !906
  %4 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !906
  br i1 %4, label %panic3, label %checkok7, !dbg !906

checkok7:                                         ; preds = %checkok
  %5 = ptrtoint ptr %3 to i64, !dbg !906
  %6 = urem i64 %5, 8, !dbg !906
  %7 = icmp ne i64 %6, 0, !dbg !906
  %8 = call i1 @llvm.expect.i1(i1 %7, i1 false), !dbg !906
  br i1 %8, label %panic8, label %checkok14, !dbg !906

checkok14:                                        ; preds = %checkok7
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg15, ptr align 8 %3, i32 16, i1 false)
  store %"char[]" { ptr @.str.80, i64 1 }, ptr %indirectarg16, align 8
  call void @std.core.String.tokenize(ptr sret(%Splitter) align 8 %splitter, ptr align 8 %indirectarg15, ptr align 8 %indirectarg16), !dbg !906
    #dbg_declare(ptr %new_string, !907, !DIExpression(), !908)
  %9 = load ptr, ptr %self, align 8, !dbg !908
  %checknull17 = icmp eq ptr %9, null, !dbg !908
  %10 = call i1 @llvm.expect.i1(i1 %checknull17, i1 false), !dbg !908
  br i1 %10, label %panic18, label %checkok22, !dbg !908

checkok22:                                        ; preds = %checkok14
  %11 = ptrtoint ptr %9 to i64, !dbg !908
  %12 = urem i64 %11, 8, !dbg !908
  %13 = icmp ne i64 %12, 0, !dbg !908
  %14 = call i1 @llvm.expect.i1(i1 %13, i1 false), !dbg !908
  br i1 %14, label %panic23, label %checkok33, !dbg !908

checkok33:                                        ; preds = %checkok22
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %new_string, ptr align 8 %9, i32 16, i1 false), !dbg !908
    #dbg_declare(ptr %index, !909, !DIExpression(), !910)
  store i64 0, ptr %index, align 8, !dbg !910
  br label %loop.cond, !dbg !911

loop.cond:                                        ; preds = %checkok172, %checkok33
    #dbg_declare(ptr %s, !912, !DIExpression(), !914)
  call void @llvm.memset.p0.i64(ptr align 8 %s, i8 0, i64 16, i1 false), !dbg !914
  %15 = call i64 @std.core.string.Splitter.next(ptr %retparam, ptr %splitter), !dbg !914
  %not_err = icmp eq i64 %15, 0, !dbg !914
  %16 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !914
  br i1 %16, label %after_check, label %catch_landing, !dbg !914

after_check:                                      ; preds = %loop.cond
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %s, ptr align 8 %retparam, i32 16, i1 false), !dbg !914
  br label %phi_try_catch, !dbg !914

catch_landing:                                    ; preds = %loop.cond
  br label %phi_try_catch, !dbg !914

phi_try_catch:                                    ; preds = %catch_landing, %after_check
  %val = phi i1 [ true, %after_check ], [ false, %catch_landing ], !dbg !914
  br i1 %val, label %loop.body, label %loop.exit, !dbg !914

loop.body:                                        ; preds = %phi_try_catch
  %ptradd34 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !915
  %17 = load i64, ptr %ptradd34, align 8, !dbg !915
  %lt = icmp ult i64 0, %17, !dbg !915
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !915

assert_fail:                                      ; preds = %loop.body
  store %"char[]" { ptr @.panic_msg.77, i64 26 }, ptr %indirectarg35, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg36, align 8
  store %"char[]" { ptr @.func.79, i64 23 }, ptr %indirectarg37, align 8
  %18 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %18(ptr align 8 %indirectarg35, ptr align 8 %indirectarg36, ptr align 8 %indirectarg37, i32 827) #6, !dbg !915
  unreachable, !dbg !915

assert_ok:                                        ; preds = %loop.body
    #dbg_declare(ptr %c, !917, !DIExpression(), !918)
  %ptradd38 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !918
  %19 = load i64, ptr %ptradd38, align 8, !dbg !918
  %20 = load ptr, ptr %s, align 8, !dbg !918
  %ge = icmp sge i64 0, %19, !dbg !918
  %21 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !918
  br i1 %21, label %panic39, label %checkok49, !dbg !918

checkok49:                                        ; preds = %assert_ok
  %22 = load i8, ptr %20, align 1, !dbg !918
  store i8 %22, ptr %c, align 1, !dbg !918
  %23 = load i8, ptr %c, align 1
  store i8 %23, ptr %c50, align 1
  %24 = load i8, ptr %c50, align 1
  store i8 %24, ptr %c51, align 1
  %25 = load i8, ptr %c51, align 1, !dbg !919
  %zext = zext i8 %25 to i64, !dbg !919
  %ge52 = icmp uge i64 %zext, 256, !dbg !919
  %26 = call i1 @llvm.expect.i1(i1 %ge52, i1 false), !dbg !919
  br i1 %26, label %panic53, label %checkok63, !dbg !919

checkok63:                                        ; preds = %checkok49
  %ptroffset = getelementptr inbounds [2 x i8], ptr @std.core.ascii.ASCII_LOOKUP, i64 %zext, !dbg !919
  %27 = load i16, ptr %ptroffset, align 2, !dbg !919
  %28 = and i16 1, %27, !dbg !919
  %trunc = trunc i16 %28 to i8, !dbg !919
  %29 = trunc i8 %trunc to i1, !dbg !919
  br i1 %29, label %if.then, label %if.exit, !dbg !919

if.then:                                          ; preds = %checkok63
  %30 = load i8, ptr %c, align 1
  store i8 %30, ptr %c64, align 1
  %31 = load i8, ptr %c64, align 1
  store i8 %31, ptr %c65, align 1
  %32 = load i8, ptr %c65, align 1, !dbg !924
  %zext66 = zext i8 %32 to i32, !dbg !924
  %33 = load i8, ptr %c65, align 1, !dbg !924
  %zext67 = zext i8 %33 to i64, !dbg !924
  %ge68 = icmp uge i64 %zext67, 256, !dbg !924
  %34 = call i1 @llvm.expect.i1(i1 %ge68, i1 false), !dbg !924
  br i1 %34, label %panic69, label %checkok79, !dbg !924

checkok79:                                        ; preds = %if.then
  %ptradd80 = getelementptr inbounds i8, ptr @std.core.ascii.TO_UPPER, i64 %zext67, !dbg !924
  %35 = load i8, ptr %ptradd80, align 1, !dbg !924
  %zext81 = zext i8 %35 to i32, !dbg !924
  %sub = sub i32 %zext66, %zext81, !dbg !924
  %trunc82 = trunc i32 %sub to i8, !dbg !924
  store i8 %trunc82, ptr %c, align 1, !dbg !924
  br label %if.exit, !dbg !924

if.exit:                                          ; preds = %checkok79, %checkok63
  %ptradd83 = getelementptr inbounds i8, ptr %new_string, i64 8, !dbg !928
  %36 = load i64, ptr %ptradd83, align 8, !dbg !928
  %37 = load ptr, ptr %new_string, align 8, !dbg !928
  %38 = load i64, ptr %index, align 8, !dbg !928
  %add = add i64 %38, 1, !dbg !928
  store i64 %add, ptr %index, align 8, !dbg !928
  %ge84 = icmp uge i64 %38, %36, !dbg !928
  %39 = call i1 @llvm.expect.i1(i1 %ge84, i1 false), !dbg !928
  br i1 %39, label %panic85, label %checkok95, !dbg !928

checkok95:                                        ; preds = %if.exit
  %ptradd96 = getelementptr inbounds i8, ptr %37, i64 %38, !dbg !928
  %40 = load i8, ptr %c, align 1, !dbg !928
  store i8 %40, ptr %ptradd96, align 1, !dbg !928
  %41 = load %"char[]", ptr %s, align 8, !dbg !929
  %42 = extractvalue %"char[]" %41, 0, !dbg !929
  %43 = extractvalue %"char[]" %41, 1, !dbg !929
  %gt = icmp sgt i64 1, %43, !dbg !929
  %44 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !929
  br i1 %44, label %panic97, label %checkok107, !dbg !929

checkok107:                                       ; preds = %checkok95
  %size = sub i64 %43, 1, !dbg !929
  %ptradd108 = getelementptr inbounds i8, ptr %42, i64 1, !dbg !929
  %45 = insertvalue %"char[]" undef, ptr %ptradd108, 0, !dbg !929
  %46 = insertvalue %"char[]" %45, i64 %size, 1, !dbg !929
  store %"char[]" %46, ptr %s, align 8, !dbg !929
  %47 = load %"char[]", ptr %s, align 8, !dbg !930
  %48 = extractvalue %"char[]" %47, 0, !dbg !930
  %49 = extractvalue %"char[]" %47, 1, !dbg !930
  %gt109 = icmp ugt i64 0, %49, !dbg !930
  %50 = call i1 @llvm.expect.i1(i1 %gt109, i1 false), !dbg !930
  br i1 %50, label %panic110, label %checkok120, !dbg !930

checkok120:                                       ; preds = %checkok107
  %size121 = sub i64 %49, 0, !dbg !930
  %51 = insertvalue %"char[]" undef, ptr %48, 0, !dbg !930
  %52 = insertvalue %"char[]" %51, i64 %size121, 1, !dbg !930
  %53 = load %"char[]", ptr %new_string, align 8, !dbg !930
  %54 = extractvalue %"char[]" %53, 0, !dbg !930
  %55 = load i64, ptr %index, align 8, !dbg !930
  %56 = extractvalue %"char[]" %53, 1, !dbg !930
  %gt122 = icmp ugt i64 %55, %56, !dbg !930
  %57 = call i1 @llvm.expect.i1(i1 %gt122, i1 false), !dbg !930
  br i1 %57, label %panic123, label %checkok133, !dbg !930

checkok133:                                       ; preds = %checkok120
  %ptradd134 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !930
  %58 = load i64, ptr %ptradd134, align 8, !dbg !930
  %add135 = add i64 %55, %58, !dbg !930
  %gt136 = icmp ugt i64 %55, %add135, !dbg !930
  %sub137 = sub i64 %add135, %55, !dbg !930
  %59 = call i1 @llvm.expect.i1(i1 %gt136, i1 false), !dbg !930
  br i1 %59, label %panic138, label %checkok146, !dbg !930

checkok146:                                       ; preds = %checkok133
  %lt147 = icmp ult i64 %56, %add135, !dbg !930
  %sub148 = sub i64 %add135, 1, !dbg !930
  %60 = call i1 @llvm.expect.i1(i1 %lt147, i1 false), !dbg !930
  br i1 %60, label %panic149, label %checkok159, !dbg !930

checkok159:                                       ; preds = %checkok146
  %size160 = sub i64 %add135, %55, !dbg !930
  %ptradd161 = getelementptr inbounds i8, ptr %54, i64 %55, !dbg !930
  %61 = insertvalue %"char[]" undef, ptr %ptradd161, 0, !dbg !930
  %62 = insertvalue %"char[]" %61, i64 %size160, 1, !dbg !930
  %63 = extractvalue %"char[]" %62, 0, !dbg !930
  %64 = extractvalue %"char[]" %52, 0, !dbg !930
  %65 = extractvalue %"char[]" %52, 1, !dbg !930
  %66 = extractvalue %"char[]" %62, 1, !dbg !930
  %neq = icmp ne i64 %66, %65, !dbg !930
  %67 = call i1 @llvm.expect.i1(i1 %neq, i1 false), !dbg !930
  br i1 %67, label %panic162, label %checkok172, !dbg !930

checkok172:                                       ; preds = %checkok159
  %68 = mul i64 %65, 1, !dbg !930
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %63, ptr align 1 %64, i64 %68, i1 false), !dbg !930
  %69 = load i64, ptr %index, align 8, !dbg !931
  %ptradd173 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !931
  %70 = load i64, ptr %ptradd173, align 8, !dbg !931
  %add174 = add i64 %69, %70, !dbg !931
  store i64 %add174, ptr %index, align 8, !dbg !931
  br label %loop.cond, !dbg !931

loop.exit:                                        ; preds = %phi_try_catch
  %71 = load %"char[]", ptr %new_string, align 8, !dbg !932
  %72 = extractvalue %"char[]" %71, 0, !dbg !932
  %73 = extractvalue %"char[]" %71, 1, !dbg !932
  %gt175 = icmp ugt i64 0, %73, !dbg !932
  %74 = call i1 @llvm.expect.i1(i1 %gt175, i1 false), !dbg !932
  br i1 %74, label %panic176, label %checkok186, !dbg !932

checkok186:                                       ; preds = %loop.exit
  %75 = load i64, ptr %index, align 8, !dbg !932
  %add187 = add i64 0, %75, !dbg !932
  %gt188 = icmp ugt i64 0, %add187, !dbg !932
  %sub189 = sub i64 %add187, 0, !dbg !932
  %76 = call i1 @llvm.expect.i1(i1 %gt188, i1 false), !dbg !932
  br i1 %76, label %panic190, label %checkok198, !dbg !932

checkok198:                                       ; preds = %checkok186
  %lt199 = icmp ult i64 %73, %add187, !dbg !932
  %sub200 = sub i64 %add187, 1, !dbg !932
  %77 = call i1 @llvm.expect.i1(i1 %lt199, i1 false), !dbg !932
  br i1 %77, label %panic201, label %checkok211, !dbg !932

checkok211:                                       ; preds = %checkok198
  %size212 = sub i64 %add187, 0, !dbg !932
  %78 = insertvalue %"char[]" undef, ptr %72, 0, !dbg !932
  %79 = insertvalue %"char[]" %78, i64 %size212, 1, !dbg !932
  %80 = load ptr, ptr %self, align 8, !dbg !932
  %checknull213 = icmp eq ptr %80, null, !dbg !932
  %81 = call i1 @llvm.expect.i1(i1 %checknull213, i1 false), !dbg !932
  br i1 %81, label %panic214, label %checkok218, !dbg !932

checkok218:                                       ; preds = %checkok211
  %82 = ptrtoint ptr %80 to i64, !dbg !932
  %83 = urem i64 %82, 8, !dbg !932
  %84 = icmp ne i64 %83, 0, !dbg !932
  %85 = call i1 @llvm.expect.i1(i1 %84, i1 false), !dbg !932
  br i1 %85, label %panic219, label %checkok229, !dbg !932

checkok229:                                       ; preds = %checkok218
  store %"char[]" %79, ptr %80, align 8, !dbg !932
  ret void, !dbg !932

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.66, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.79, i64 23 }, ptr %indirectarg2, align 8
  %86 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %86(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 820) #6, !dbg !904
  unreachable, !dbg !904

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.68, i64 45 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.79, i64 23 }, ptr %indirectarg6, align 8
  %87 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %87(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 822) #6, !dbg !906
  unreachable, !dbg !906

panic8:                                           ; preds = %checkok7
  store i64 8, ptr %taddr, align 8
  %88 = insertvalue %any undef, ptr %taddr, 0
  %89 = insertvalue %any %88, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %6, ptr %taddr9, align 8
  %90 = insertvalue %any undef, ptr %taddr9, 0
  %91 = insertvalue %any %90, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 94 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.func.79, i64 23 }, ptr %indirectarg12, align 8
  store %any %89, ptr %varargslots, align 16
  %ptradd = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %91, ptr %ptradd, align 16
  %92 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %92, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg13, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, i32 822, ptr align 8 %indirectarg13) #6, !dbg !906
  unreachable, !dbg !906

panic18:                                          ; preds = %checkok14
  store %"char[]" { ptr @.panic_msg.68, i64 45 }, ptr %indirectarg19, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg20, align 8
  store %"char[]" { ptr @.func.79, i64 23 }, ptr %indirectarg21, align 8
  %93 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %93(ptr align 8 %indirectarg19, ptr align 8 %indirectarg20, ptr align 8 %indirectarg21, i32 823) #6, !dbg !908
  unreachable, !dbg !908

panic23:                                          ; preds = %checkok22
  store i64 8, ptr %taddr24, align 8
  %94 = insertvalue %any undef, ptr %taddr24, 0
  %95 = insertvalue %any %94, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %12, ptr %taddr25, align 8
  %96 = insertvalue %any undef, ptr %taddr25, 0
  %97 = insertvalue %any %96, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 94 }, ptr %indirectarg26, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg27, align 8
  store %"char[]" { ptr @.func.79, i64 23 }, ptr %indirectarg28, align 8
  store %any %95, ptr %varargslots29, align 16
  %ptradd30 = getelementptr inbounds i8, ptr %varargslots29, i64 16
  store %any %97, ptr %ptradd30, align 16
  %98 = insertvalue %"any[]" undef, ptr %varargslots29, 0
  %"$$temp31" = insertvalue %"any[]" %98, i64 2, 1
  store %"any[]" %"$$temp31", ptr %indirectarg32, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg26, ptr align 8 %indirectarg27, ptr align 8 %indirectarg28, i32 823, ptr align 8 %indirectarg32) #6, !dbg !908
  unreachable, !dbg !908

panic39:                                          ; preds = %assert_ok
  store i64 %19, ptr %taddr40, align 8
  %99 = insertvalue %any undef, ptr %taddr40, 0
  %100 = insertvalue %any %99, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr41, align 8
  %101 = insertvalue %any undef, ptr %taddr41, 0
  %102 = insertvalue %any %101, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg42, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg43, align 8
  store %"char[]" { ptr @.func.79, i64 23 }, ptr %indirectarg44, align 8
  store %any %100, ptr %varargslots45, align 16
  %ptradd46 = getelementptr inbounds i8, ptr %varargslots45, i64 16
  store %any %102, ptr %ptradd46, align 16
  %103 = insertvalue %"any[]" undef, ptr %varargslots45, 0
  %"$$temp47" = insertvalue %"any[]" %103, i64 2, 1
  store %"any[]" %"$$temp47", ptr %indirectarg48, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg42, ptr align 8 %indirectarg43, ptr align 8 %indirectarg44, i32 828, ptr align 8 %indirectarg48) #6, !dbg !918
  unreachable, !dbg !918

panic53:                                          ; preds = %checkok49
  store i64 256, ptr %taddr54, align 8
  %104 = insertvalue %any undef, ptr %taddr54, 0
  %105 = insertvalue %any %104, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %zext, ptr %taddr55, align 8
  %106 = insertvalue %any undef, ptr %taddr55, 0
  %107 = insertvalue %any %106, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg56, align 8
  store %"char[]" { ptr @.file.73, i64 8 }, ptr %indirectarg57, align 8
  store %"char[]" { ptr @.func.79, i64 23 }, ptr %indirectarg58, align 8
  store %any %105, ptr %varargslots59, align 16
  %ptradd60 = getelementptr inbounds i8, ptr %varargslots59, i64 16
  store %any %107, ptr %ptradd60, align 16
  %108 = insertvalue %"any[]" undef, ptr %varargslots59, 0
  %"$$temp61" = insertvalue %"any[]" %108, i64 2, 1
  store %"any[]" %"$$temp61", ptr %indirectarg62, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg56, ptr align 8 %indirectarg57, ptr align 8 %indirectarg58, i32 7, ptr align 8 %indirectarg62) #6, !dbg !919
  unreachable, !dbg !919

panic69:                                          ; preds = %if.then
  store i64 256, ptr %taddr70, align 8
  %109 = insertvalue %any undef, ptr %taddr70, 0
  %110 = insertvalue %any %109, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %zext67, ptr %taddr71, align 8
  %111 = insertvalue %any undef, ptr %taddr71, 0
  %112 = insertvalue %any %111, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg72, align 8
  store %"char[]" { ptr @.file.73, i64 8 }, ptr %indirectarg73, align 8
  store %"char[]" { ptr @.func.79, i64 23 }, ptr %indirectarg74, align 8
  store %any %110, ptr %varargslots75, align 16
  %ptradd76 = getelementptr inbounds i8, ptr %varargslots75, i64 16
  store %any %112, ptr %ptradd76, align 16
  %113 = insertvalue %"any[]" undef, ptr %varargslots75, 0
  %"$$temp77" = insertvalue %"any[]" %113, i64 2, 1
  store %"any[]" %"$$temp77", ptr %indirectarg78, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg72, ptr align 8 %indirectarg73, ptr align 8 %indirectarg74, i32 22, ptr align 8 %indirectarg78) #6, !dbg !924
  unreachable, !dbg !924

panic85:                                          ; preds = %if.exit
  store i64 %36, ptr %taddr86, align 8
  %114 = insertvalue %any undef, ptr %taddr86, 0
  %115 = insertvalue %any %114, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %38, ptr %taddr87, align 8
  %116 = insertvalue %any undef, ptr %taddr87, 0
  %117 = insertvalue %any %116, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg88, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg89, align 8
  store %"char[]" { ptr @.func.79, i64 23 }, ptr %indirectarg90, align 8
  store %any %115, ptr %varargslots91, align 16
  %ptradd92 = getelementptr inbounds i8, ptr %varargslots91, i64 16
  store %any %117, ptr %ptradd92, align 16
  %118 = insertvalue %"any[]" undef, ptr %varargslots91, 0
  %"$$temp93" = insertvalue %"any[]" %118, i64 2, 1
  store %"any[]" %"$$temp93", ptr %indirectarg94, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg88, ptr align 8 %indirectarg89, ptr align 8 %indirectarg90, i32 830, ptr align 8 %indirectarg94) #6, !dbg !928
  unreachable, !dbg !928

panic97:                                          ; preds = %checkok95
  store i64 %43, ptr %taddr98, align 8
  %119 = insertvalue %any undef, ptr %taddr98, 0
  %120 = insertvalue %any %119, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 1, ptr %taddr99, align 8
  %121 = insertvalue %any undef, ptr %taddr99, 0
  %122 = insertvalue %any %121, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.12, i64 61 }, ptr %indirectarg100, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg101, align 8
  store %"char[]" { ptr @.func.79, i64 23 }, ptr %indirectarg102, align 8
  store %any %120, ptr %varargslots103, align 16
  %ptradd104 = getelementptr inbounds i8, ptr %varargslots103, i64 16
  store %any %122, ptr %ptradd104, align 16
  %123 = insertvalue %"any[]" undef, ptr %varargslots103, 0
  %"$$temp105" = insertvalue %"any[]" %123, i64 2, 1
  store %"any[]" %"$$temp105", ptr %indirectarg106, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg100, ptr align 8 %indirectarg101, ptr align 8 %indirectarg102, i32 831, ptr align 8 %indirectarg106) #6, !dbg !929
  unreachable, !dbg !929

panic110:                                         ; preds = %checkok107
  store i64 %49, ptr %taddr111, align 8
  %124 = insertvalue %any undef, ptr %taddr111, 0
  %125 = insertvalue %any %124, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr112, align 8
  %126 = insertvalue %any undef, ptr %taddr112, 0
  %127 = insertvalue %any %126, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.12, i64 61 }, ptr %indirectarg113, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg114, align 8
  store %"char[]" { ptr @.func.79, i64 23 }, ptr %indirectarg115, align 8
  store %any %125, ptr %varargslots116, align 16
  %ptradd117 = getelementptr inbounds i8, ptr %varargslots116, i64 16
  store %any %127, ptr %ptradd117, align 16
  %128 = insertvalue %"any[]" undef, ptr %varargslots116, 0
  %"$$temp118" = insertvalue %"any[]" %128, i64 2, 1
  store %"any[]" %"$$temp118", ptr %indirectarg119, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg113, ptr align 8 %indirectarg114, ptr align 8 %indirectarg115, i32 832, ptr align 8 %indirectarg119) #6, !dbg !930
  unreachable, !dbg !930

panic123:                                         ; preds = %checkok120
  store i64 %56, ptr %taddr124, align 8
  %129 = insertvalue %any undef, ptr %taddr124, 0
  %130 = insertvalue %any %129, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %55, ptr %taddr125, align 8
  %131 = insertvalue %any undef, ptr %taddr125, 0
  %132 = insertvalue %any %131, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.12, i64 61 }, ptr %indirectarg126, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg127, align 8
  store %"char[]" { ptr @.func.79, i64 23 }, ptr %indirectarg128, align 8
  store %any %130, ptr %varargslots129, align 16
  %ptradd130 = getelementptr inbounds i8, ptr %varargslots129, i64 16
  store %any %132, ptr %ptradd130, align 16
  %133 = insertvalue %"any[]" undef, ptr %varargslots129, 0
  %"$$temp131" = insertvalue %"any[]" %133, i64 2, 1
  store %"any[]" %"$$temp131", ptr %indirectarg132, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg126, ptr align 8 %indirectarg127, ptr align 8 %indirectarg128, i32 832, ptr align 8 %indirectarg132) #6, !dbg !930
  unreachable, !dbg !930

panic138:                                         ; preds = %checkok133
  store i64 %sub137, ptr %taddr139, align 8
  %134 = insertvalue %any undef, ptr %taddr139, 0
  %135 = insertvalue %any %134, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.10, i64 43 }, ptr %indirectarg140, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg141, align 8
  store %"char[]" { ptr @.func.79, i64 23 }, ptr %indirectarg142, align 8
  store %any %135, ptr %varargslots143, align 16
  %136 = insertvalue %"any[]" undef, ptr %varargslots143, 0
  %"$$temp144" = insertvalue %"any[]" %136, i64 1, 1
  store %"any[]" %"$$temp144", ptr %indirectarg145, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg140, ptr align 8 %indirectarg141, ptr align 8 %indirectarg142, i32 832, ptr align 8 %indirectarg145) #6, !dbg !930
  unreachable, !dbg !930

panic149:                                         ; preds = %checkok146
  store i64 %sub148, ptr %taddr150, align 8
  %137 = insertvalue %any undef, ptr %taddr150, 0
  %138 = insertvalue %any %137, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %56, ptr %taddr151, align 8
  %139 = insertvalue %any undef, ptr %taddr151, 0
  %140 = insertvalue %any %139, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.14, i64 60 }, ptr %indirectarg152, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg153, align 8
  store %"char[]" { ptr @.func.79, i64 23 }, ptr %indirectarg154, align 8
  store %any %138, ptr %varargslots155, align 16
  %ptradd156 = getelementptr inbounds i8, ptr %varargslots155, i64 16
  store %any %140, ptr %ptradd156, align 16
  %141 = insertvalue %"any[]" undef, ptr %varargslots155, 0
  %"$$temp157" = insertvalue %"any[]" %141, i64 2, 1
  store %"any[]" %"$$temp157", ptr %indirectarg158, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg152, ptr align 8 %indirectarg153, ptr align 8 %indirectarg154, i32 832, ptr align 8 %indirectarg158) #6, !dbg !930
  unreachable, !dbg !930

panic162:                                         ; preds = %checkok159
  store i64 %66, ptr %taddr163, align 8
  %142 = insertvalue %any undef, ptr %taddr163, 0
  %143 = insertvalue %any %142, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %65, ptr %taddr164, align 8
  %144 = insertvalue %any undef, ptr %taddr164, 0
  %145 = insertvalue %any %144, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.78, i64 38 }, ptr %indirectarg165, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg166, align 8
  store %"char[]" { ptr @.func.79, i64 23 }, ptr %indirectarg167, align 8
  store %any %143, ptr %varargslots168, align 16
  %ptradd169 = getelementptr inbounds i8, ptr %varargslots168, i64 16
  store %any %145, ptr %ptradd169, align 16
  %146 = insertvalue %"any[]" undef, ptr %varargslots168, 0
  %"$$temp170" = insertvalue %"any[]" %146, i64 2, 1
  store %"any[]" %"$$temp170", ptr %indirectarg171, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg165, ptr align 8 %indirectarg166, ptr align 8 %indirectarg167, i32 832, ptr align 8 %indirectarg171) #6, !dbg !930
  unreachable, !dbg !930

panic176:                                         ; preds = %loop.exit
  store i64 %73, ptr %taddr177, align 8
  %147 = insertvalue %any undef, ptr %taddr177, 0
  %148 = insertvalue %any %147, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr178, align 8
  %149 = insertvalue %any undef, ptr %taddr178, 0
  %150 = insertvalue %any %149, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.12, i64 61 }, ptr %indirectarg179, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg180, align 8
  store %"char[]" { ptr @.func.79, i64 23 }, ptr %indirectarg181, align 8
  store %any %148, ptr %varargslots182, align 16
  %ptradd183 = getelementptr inbounds i8, ptr %varargslots182, i64 16
  store %any %150, ptr %ptradd183, align 16
  %151 = insertvalue %"any[]" undef, ptr %varargslots182, 0
  %"$$temp184" = insertvalue %"any[]" %151, i64 2, 1
  store %"any[]" %"$$temp184", ptr %indirectarg185, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg179, ptr align 8 %indirectarg180, ptr align 8 %indirectarg181, i32 835, ptr align 8 %indirectarg185) #6, !dbg !932
  unreachable, !dbg !932

panic190:                                         ; preds = %checkok186
  store i64 %sub189, ptr %taddr191, align 8
  %152 = insertvalue %any undef, ptr %taddr191, 0
  %153 = insertvalue %any %152, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.10, i64 43 }, ptr %indirectarg192, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg193, align 8
  store %"char[]" { ptr @.func.79, i64 23 }, ptr %indirectarg194, align 8
  store %any %153, ptr %varargslots195, align 16
  %154 = insertvalue %"any[]" undef, ptr %varargslots195, 0
  %"$$temp196" = insertvalue %"any[]" %154, i64 1, 1
  store %"any[]" %"$$temp196", ptr %indirectarg197, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg192, ptr align 8 %indirectarg193, ptr align 8 %indirectarg194, i32 835, ptr align 8 %indirectarg197) #6, !dbg !932
  unreachable, !dbg !932

panic201:                                         ; preds = %checkok198
  store i64 %sub200, ptr %taddr202, align 8
  %155 = insertvalue %any undef, ptr %taddr202, 0
  %156 = insertvalue %any %155, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %73, ptr %taddr203, align 8
  %157 = insertvalue %any undef, ptr %taddr203, 0
  %158 = insertvalue %any %157, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.14, i64 60 }, ptr %indirectarg204, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg205, align 8
  store %"char[]" { ptr @.func.79, i64 23 }, ptr %indirectarg206, align 8
  store %any %156, ptr %varargslots207, align 16
  %ptradd208 = getelementptr inbounds i8, ptr %varargslots207, i64 16
  store %any %158, ptr %ptradd208, align 16
  %159 = insertvalue %"any[]" undef, ptr %varargslots207, 0
  %"$$temp209" = insertvalue %"any[]" %159, i64 2, 1
  store %"any[]" %"$$temp209", ptr %indirectarg210, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg204, ptr align 8 %indirectarg205, ptr align 8 %indirectarg206, i32 835, ptr align 8 %indirectarg210) #6, !dbg !932
  unreachable, !dbg !932

panic214:                                         ; preds = %checkok211
  store %"char[]" { ptr @.panic_msg.68, i64 45 }, ptr %indirectarg215, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg216, align 8
  store %"char[]" { ptr @.func.79, i64 23 }, ptr %indirectarg217, align 8
  %160 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %160(ptr align 8 %indirectarg215, ptr align 8 %indirectarg216, ptr align 8 %indirectarg217, i32 835) #6, !dbg !932
  unreachable, !dbg !932

panic219:                                         ; preds = %checkok218
  store i64 8, ptr %taddr220, align 8
  %161 = insertvalue %any undef, ptr %taddr220, 0
  %162 = insertvalue %any %161, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %83, ptr %taddr221, align 8
  %163 = insertvalue %any undef, ptr %taddr221, 0
  %164 = insertvalue %any %163, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 94 }, ptr %indirectarg222, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg223, align 8
  store %"char[]" { ptr @.func.79, i64 23 }, ptr %indirectarg224, align 8
  store %any %162, ptr %varargslots225, align 16
  %ptradd226 = getelementptr inbounds i8, ptr %varargslots225, i64 16
  store %any %164, ptr %ptradd226, align 16
  %165 = insertvalue %"any[]" undef, ptr %varargslots225, 0
  %"$$temp227" = insertvalue %"any[]" %165, i64 2, 1
  store %"any[]" %"$$temp227", ptr %indirectarg228, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg222, ptr align 8 %indirectarg223, ptr align 8 %indirectarg224, i32 835, ptr align 8 %indirectarg228) #6, !dbg !932
  unreachable, !dbg !932
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.core.String.pascal_to_snake_copy(ptr noalias sret(%"char[]") align 8 %0, ptr align 8 %1, ptr align 8 %2) #0 comdat !dbg !933 {
entry:
  %reserve = alloca i64, align 8
  %state = alloca ptr, align 8
  %d = alloca ptr, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr4 = alloca i64, align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg7 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg9 = alloca %"any[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %indirectarg13 = alloca %"char[]", align 8
  %indirectarg14 = alloca %any, align 8
  %index = alloca i64, align 8
  %.anon = alloca i64, align 8
  %i = alloca i64, align 8
  %c = alloca i8, align 1
  %taddr18 = alloca i64, align 8
  %taddr19 = alloca i64, align 8
  %indirectarg20 = alloca %"char[]", align 8
  %indirectarg21 = alloca %"char[]", align 8
  %indirectarg22 = alloca %"char[]", align 8
  %varargslots23 = alloca [2 x %any], align 16
  %indirectarg26 = alloca %"any[]", align 8
  %c29 = alloca i8, align 1
  %c30 = alloca i8, align 1
  %taddr33 = alloca i64, align 8
  %taddr34 = alloca i64, align 8
  %indirectarg35 = alloca %"char[]", align 8
  %indirectarg36 = alloca %"char[]", align 8
  %indirectarg37 = alloca %"char[]", align 8
  %varargslots38 = alloca [2 x %any], align 16
  %indirectarg41 = alloca %"any[]", align 8
  %taddr47 = alloca i64, align 8
  %indirectarg48 = alloca %"char[]", align 8
  %indirectarg49 = alloca %"char[]", align 8
  %indirectarg50 = alloca %"char[]", align 8
  %varargslots51 = alloca [1 x %any], align 16
  %indirectarg53 = alloca %"any[]", align 8
  %taddr57 = alloca i64, align 8
  %taddr58 = alloca i64, align 8
  %indirectarg59 = alloca %"char[]", align 8
  %indirectarg60 = alloca %"char[]", align 8
  %indirectarg61 = alloca %"char[]", align 8
  %varargslots62 = alloca [2 x %any], align 16
  %indirectarg65 = alloca %"any[]", align 8
  %c68 = alloca i8, align 1
  %c69 = alloca i8, align 1
  %taddr73 = alloca i64, align 8
  %taddr74 = alloca i64, align 8
  %indirectarg75 = alloca %"char[]", align 8
  %indirectarg76 = alloca %"char[]", align 8
  %indirectarg77 = alloca %"char[]", align 8
  %varargslots78 = alloca [2 x %any], align 16
  %indirectarg81 = alloca %"any[]", align 8
  %taddr89 = alloca i64, align 8
  %indirectarg90 = alloca %"char[]", align 8
  %indirectarg91 = alloca %"char[]", align 8
  %indirectarg92 = alloca %"char[]", align 8
  %varargslots93 = alloca [1 x %any], align 16
  %indirectarg95 = alloca %"any[]", align 8
  %taddr99 = alloca i64, align 8
  %taddr100 = alloca i64, align 8
  %indirectarg101 = alloca %"char[]", align 8
  %indirectarg102 = alloca %"char[]", align 8
  %indirectarg103 = alloca %"char[]", align 8
  %varargslots104 = alloca [2 x %any], align 16
  %indirectarg107 = alloca %"any[]", align 8
  %c110 = alloca i8, align 1
  %c111 = alloca i8, align 1
  %taddr115 = alloca i64, align 8
  %taddr116 = alloca i64, align 8
  %indirectarg117 = alloca %"char[]", align 8
  %indirectarg118 = alloca %"char[]", align 8
  %indirectarg119 = alloca %"char[]", align 8
  %varargslots120 = alloca [2 x %any], align 16
  %indirectarg123 = alloca %"any[]", align 8
  %taddr135 = alloca i64, align 8
  %indirectarg136 = alloca %"char[]", align 8
  %indirectarg137 = alloca %"char[]", align 8
  %indirectarg138 = alloca %"char[]", align 8
  %varargslots139 = alloca [1 x %any], align 16
  %indirectarg141 = alloca %"any[]", align 8
  %taddr145 = alloca i64, align 8
  %taddr146 = alloca i64, align 8
  %indirectarg147 = alloca %"char[]", align 8
  %indirectarg148 = alloca %"char[]", align 8
  %indirectarg149 = alloca %"char[]", align 8
  %varargslots150 = alloca [2 x %any], align 16
  %indirectarg153 = alloca %"any[]", align 8
  %c156 = alloca i8, align 1
  %c157 = alloca i8, align 1
  %taddr161 = alloca i64, align 8
  %taddr162 = alloca i64, align 8
  %indirectarg163 = alloca %"char[]", align 8
  %indirectarg164 = alloca %"char[]", align 8
  %indirectarg165 = alloca %"char[]", align 8
  %varargslots166 = alloca [2 x %any], align 16
  %indirectarg169 = alloca %"any[]", align 8
  %c179 = alloca i8, align 1
  %c180 = alloca i8, align 1
  %taddr185 = alloca i64, align 8
  %taddr186 = alloca i64, align 8
  %indirectarg187 = alloca %"char[]", align 8
  %indirectarg188 = alloca %"char[]", align 8
  %indirectarg189 = alloca %"char[]", align 8
  %varargslots190 = alloca [2 x %any], align 16
  %indirectarg193 = alloca %"any[]", align 8
  %sretparam = alloca %"char[]", align 8
  %indirectarg200 = alloca %any, align 8
    #dbg_declare(ptr %1, !934, !DIExpression(), !935)
    #dbg_declare(ptr %2, !936, !DIExpression(), !935)
  store i64 0, ptr %reserve, align 8
    #dbg_declare(ptr %state, !937, !DIExpression(), !939)
  %3 = load i64, ptr %reserve, align 8, !dbg !939
  %4 = call ptr @std.core.mem.allocator.push_pool(i64 %3) #5, !dbg !939
  store ptr %4, ptr %state, align 8, !dbg !939
    #dbg_declare(ptr %d, !940, !DIExpression(), !945)
  store ptr null, ptr %d, align 8, !dbg !945
  %5 = call ptr @llvm.threadlocal.address.p0(ptr @std.core.mem.allocator.current_temp), !dbg !946
  %6 = load %any, ptr %5, align 8, !dbg !946
  %ptradd = getelementptr inbounds i8, ptr %1, i64 8, !dbg !946
  %7 = load i64, ptr %ptradd, align 8, !dbg !946
  %uifp = uitofp i64 %7 to double, !dbg !946
  %fmul = fmul double %uifp, 1.500000e+00, !dbg !946
  %fpui = fptoui double %fmul to i64, !dbg !946
  %checknull = icmp eq ptr %d, null, !dbg !947
  %8 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !947
  br i1 %8, label %panic, label %checkok, !dbg !947

checkok:                                          ; preds = %entry
  %9 = ptrtoint ptr %d to i64, !dbg !947
  %10 = urem i64 %9, 8, !dbg !947
  %11 = icmp ne i64 %10, 0, !dbg !947
  %12 = call i1 @llvm.expect.i1(i1 %11, i1 false), !dbg !947
  br i1 %12, label %panic3, label %checkok10, !dbg !947

checkok10:                                        ; preds = %checkok
  %13 = load ptr, ptr %d, align 8, !dbg !947
  %14 = call ptr @std.core.dstring.DString.data(ptr %13) #5, !dbg !947
  %i2nb = icmp eq ptr %14, null, !dbg !947
  br i1 %i2nb, label %assert_ok, label %assert_fail, !dbg !947

assert_fail:                                      ; preds = %checkok10
  store %"char[]" { ptr @.panic_msg.82, i64 63 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg12, align 8
  store %"char[]" { ptr @.func.81, i64 20 }, ptr %indirectarg13, align 8
  %15 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %15(ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, ptr align 8 %indirectarg13, i32 847) #6, !dbg !946
  unreachable, !dbg !946

assert_ok:                                        ; preds = %checkok10
  store %any %6, ptr %indirectarg14, align 8
  %16 = call ptr @std.core.dstring.DString.init(ptr %d, ptr align 8 %indirectarg14, i64 %fpui), !dbg !946
    #dbg_declare(ptr %index, !948, !DIExpression(), !949)
  store i64 0, ptr %index, align 8, !dbg !949
  %ptradd15 = getelementptr inbounds i8, ptr %1, i64 8, !dbg !950
  %17 = load i64, ptr %ptradd15, align 8, !dbg !950
    #dbg_declare(ptr %.anon, !952, !DIExpression(), !950)
  store i64 0, ptr %.anon, align 8, !dbg !950
  br label %loop.cond, !dbg !950

loop.cond:                                        ; preds = %loop.inc, %assert_ok
  %18 = load i64, ptr %.anon, align 8, !dbg !950
  %lt = icmp ult i64 %18, %17, !dbg !950
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !950

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %i, !953, !DIExpression(), !955)
  %19 = load i64, ptr %.anon, align 8, !dbg !955
  store i64 %19, ptr %i, align 8, !dbg !955
    #dbg_declare(ptr %c, !956, !DIExpression(), !955)
  %ptradd16 = getelementptr inbounds i8, ptr %1, i64 8, !dbg !955
  %20 = load i64, ptr %ptradd16, align 8, !dbg !955
  %21 = load ptr, ptr %1, align 8, !dbg !955
  %22 = load i64, ptr %.anon, align 8, !dbg !955
  %ge = icmp uge i64 %22, %20, !dbg !955
  %23 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !955
  br i1 %23, label %panic17, label %checkok27, !dbg !955

checkok27:                                        ; preds = %loop.body
  %ptradd28 = getelementptr inbounds i8, ptr %21, i64 %22, !dbg !955
  %24 = load i8, ptr %ptradd28, align 1, !dbg !955
  store i8 %24, ptr %c, align 1, !dbg !955
  %25 = load i8, ptr %c, align 1
  store i8 %25, ptr %c29, align 1
  %26 = load i8, ptr %c29, align 1
  store i8 %26, ptr %c30, align 1
  %27 = load i8, ptr %c30, align 1, !dbg !957
  %zext = zext i8 %27 to i64, !dbg !957
  %ge31 = icmp uge i64 %zext, 256, !dbg !957
  %28 = call i1 @llvm.expect.i1(i1 %ge31, i1 false), !dbg !957
  br i1 %28, label %panic32, label %checkok42, !dbg !957

checkok42:                                        ; preds = %checkok27
  %ptroffset = getelementptr inbounds [2 x i8], ptr @std.core.ascii.ASCII_LOOKUP, i64 %zext, !dbg !957
  %29 = load i16, ptr %ptroffset, align 2, !dbg !957
  %lshrl = lshr i16 %29, 1, !dbg !957
  %30 = and i16 1, %lshrl, !dbg !957
  %trunc = trunc i16 %30 to i8, !dbg !957
  %31 = trunc i8 %trunc to i1, !dbg !957
  br i1 %31, label %if.then, label %if.exit199, !dbg !957

if.then:                                          ; preds = %checkok42
  %32 = load i64, ptr %i, align 8, !dbg !963
  %lt43 = icmp ult i64 0, %32, !dbg !963
  br i1 %lt43, label %and.rhs, label %and.phi176, !dbg !963

and.rhs:                                          ; preds = %if.then
  %ptradd44 = getelementptr inbounds i8, ptr %1, i64 8, !dbg !963
  %33 = load i64, ptr %ptradd44, align 8, !dbg !963
  %34 = load ptr, ptr %1, align 8, !dbg !963
  %35 = load i64, ptr %i, align 8, !dbg !963
  %sub = sub i64 %35, 1, !dbg !963
  %lt45 = icmp slt i64 %sub, 0, !dbg !963
  %36 = call i1 @llvm.expect.i1(i1 %lt45, i1 false), !dbg !963
  br i1 %36, label %panic46, label %checkok54, !dbg !963

checkok54:                                        ; preds = %and.rhs
  %ge55 = icmp sge i64 %sub, %33, !dbg !963
  %37 = call i1 @llvm.expect.i1(i1 %ge55, i1 false), !dbg !963
  br i1 %37, label %panic56, label %checkok66, !dbg !963

checkok66:                                        ; preds = %checkok54
  %ptradd67 = getelementptr inbounds i8, ptr %34, i64 %sub, !dbg !963
  %38 = load i8, ptr %ptradd67, align 1
  store i8 %38, ptr %c68, align 1
  %39 = load i8, ptr %c68, align 1
  store i8 %39, ptr %c69, align 1
  %40 = load i8, ptr %c69, align 1, !dbg !965
  %zext70 = zext i8 %40 to i64, !dbg !965
  %ge71 = icmp uge i64 %zext70, 256, !dbg !965
  %41 = call i1 @llvm.expect.i1(i1 %ge71, i1 false), !dbg !965
  br i1 %41, label %panic72, label %checkok82, !dbg !965

checkok82:                                        ; preds = %checkok66
  %ptroffset83 = getelementptr inbounds [2 x i8], ptr @std.core.ascii.ASCII_LOOKUP, i64 %zext70, !dbg !965
  %42 = load i16, ptr %ptroffset83, align 2, !dbg !965
  %43 = and i16 1, %42, !dbg !965
  %trunc84 = trunc i16 %43 to i8, !dbg !965
  %44 = trunc i8 %trunc84 to i1, !dbg !965
  br i1 %44, label %or.phi, label %or.rhs, !dbg !965

or.rhs:                                           ; preds = %checkok82
  %ptradd85 = getelementptr inbounds i8, ptr %1, i64 8, !dbg !963
  %45 = load i64, ptr %ptradd85, align 8, !dbg !963
  %46 = load ptr, ptr %1, align 8, !dbg !963
  %47 = load i64, ptr %i, align 8, !dbg !963
  %sub86 = sub i64 %47, 1, !dbg !963
  %lt87 = icmp slt i64 %sub86, 0, !dbg !963
  %48 = call i1 @llvm.expect.i1(i1 %lt87, i1 false), !dbg !963
  br i1 %48, label %panic88, label %checkok96, !dbg !963

checkok96:                                        ; preds = %or.rhs
  %ge97 = icmp sge i64 %sub86, %45, !dbg !963
  %49 = call i1 @llvm.expect.i1(i1 %ge97, i1 false), !dbg !963
  br i1 %49, label %panic98, label %checkok108, !dbg !963

checkok108:                                       ; preds = %checkok96
  %ptradd109 = getelementptr inbounds i8, ptr %46, i64 %sub86, !dbg !963
  %50 = load i8, ptr %ptradd109, align 1
  store i8 %50, ptr %c110, align 1
  %51 = load i8, ptr %c110, align 1
  store i8 %51, ptr %c111, align 1
  %52 = load i8, ptr %c111, align 1, !dbg !969
  %zext112 = zext i8 %52 to i64, !dbg !969
  %ge113 = icmp uge i64 %zext112, 256, !dbg !969
  %53 = call i1 @llvm.expect.i1(i1 %ge113, i1 false), !dbg !969
  br i1 %53, label %panic114, label %checkok124, !dbg !969

checkok124:                                       ; preds = %checkok108
  %ptroffset125 = getelementptr inbounds [2 x i8], ptr @std.core.ascii.ASCII_LOOKUP, i64 %zext112, !dbg !969
  %54 = load i16, ptr %ptroffset125, align 2, !dbg !969
  %lshrl126 = lshr i16 %54, 2, !dbg !969
  %55 = and i16 1, %lshrl126, !dbg !969
  %trunc127 = trunc i16 %55 to i8, !dbg !969
  %56 = trunc i8 %trunc127 to i1, !dbg !969
  br label %or.phi, !dbg !969

or.phi:                                           ; preds = %checkok124, %checkok82
  %val = phi i1 [ true, %checkok82 ], [ %56, %checkok124 ], !dbg !969
  br i1 %val, label %or.phi174, label %or.rhs128, !dbg !969

or.rhs128:                                        ; preds = %or.phi
  %57 = load i64, ptr %i, align 8, !dbg !963
  %ptradd129 = getelementptr inbounds i8, ptr %1, i64 8, !dbg !963
  %58 = load i64, ptr %ptradd129, align 8, !dbg !963
  %sub130 = sub i64 %58, 1, !dbg !963
  %gt = icmp sgt i64 %sub130, %57, !dbg !963
  %check = icmp sge i64 %57, 0, !dbg !963
  %siui-gt = and i1 %check, %gt, !dbg !963
  br i1 %siui-gt, label %and.rhs131, label %and.phi, !dbg !963

and.rhs131:                                       ; preds = %or.rhs128
  %ptradd132 = getelementptr inbounds i8, ptr %1, i64 8, !dbg !963
  %59 = load i64, ptr %ptradd132, align 8, !dbg !963
  %60 = load ptr, ptr %1, align 8, !dbg !963
  %61 = load i64, ptr %i, align 8, !dbg !963
  %add = add i64 %61, 1, !dbg !963
  %lt133 = icmp slt i64 %add, 0, !dbg !963
  %62 = call i1 @llvm.expect.i1(i1 %lt133, i1 false), !dbg !963
  br i1 %62, label %panic134, label %checkok142, !dbg !963

checkok142:                                       ; preds = %and.rhs131
  %ge143 = icmp sge i64 %add, %59, !dbg !963
  %63 = call i1 @llvm.expect.i1(i1 %ge143, i1 false), !dbg !963
  br i1 %63, label %panic144, label %checkok154, !dbg !963

checkok154:                                       ; preds = %checkok142
  %ptradd155 = getelementptr inbounds i8, ptr %60, i64 %add, !dbg !963
  %64 = load i8, ptr %ptradd155, align 1
  store i8 %64, ptr %c156, align 1
  %65 = load i8, ptr %c156, align 1
  store i8 %65, ptr %c157, align 1
  %66 = load i8, ptr %c157, align 1, !dbg !973
  %zext158 = zext i8 %66 to i64, !dbg !973
  %ge159 = icmp uge i64 %zext158, 256, !dbg !973
  %67 = call i1 @llvm.expect.i1(i1 %ge159, i1 false), !dbg !973
  br i1 %67, label %panic160, label %checkok170, !dbg !973

checkok170:                                       ; preds = %checkok154
  %ptroffset171 = getelementptr inbounds [2 x i8], ptr @std.core.ascii.ASCII_LOOKUP, i64 %zext158, !dbg !973
  %68 = load i16, ptr %ptroffset171, align 2, !dbg !973
  %69 = and i16 1, %68, !dbg !973
  %trunc172 = trunc i16 %69 to i8, !dbg !973
  %70 = trunc i8 %trunc172 to i1, !dbg !973
  br label %and.phi, !dbg !973

and.phi:                                          ; preds = %checkok170, %or.rhs128
  %val173 = phi i1 [ false, %or.rhs128 ], [ %70, %checkok170 ], !dbg !973
  br label %or.phi174, !dbg !973

or.phi174:                                        ; preds = %and.phi, %or.phi
  %val175 = phi i1 [ true, %or.phi ], [ %val173, %and.phi ], !dbg !973
  br label %and.phi176, !dbg !973

and.phi176:                                       ; preds = %or.phi174, %if.then
  %val177 = phi i1 [ false, %if.then ], [ %val175, %or.phi174 ], !dbg !973
  br i1 %val177, label %if.then178, label %if.exit, !dbg !973

if.then178:                                       ; preds = %and.phi176
  call void @std.core.dstring.DString.append_char(ptr %d, i8 95), !dbg !977
  br label %if.exit, !dbg !977

if.exit:                                          ; preds = %if.then178, %and.phi176
  %71 = load i8, ptr %c, align 1
  store i8 %71, ptr %c179, align 1
  %72 = load i8, ptr %c179, align 1
  store i8 %72, ptr %c180, align 1
  %73 = load i8, ptr %c180, align 1, !dbg !979
  %zext181 = zext i8 %73 to i32, !dbg !979
  %74 = load i8, ptr %c180, align 1, !dbg !979
  %zext182 = zext i8 %74 to i64, !dbg !979
  %ge183 = icmp uge i64 %zext182, 256, !dbg !979
  %75 = call i1 @llvm.expect.i1(i1 %ge183, i1 false), !dbg !979
  br i1 %75, label %panic184, label %checkok194, !dbg !979

checkok194:                                       ; preds = %if.exit
  %ptradd195 = getelementptr inbounds i8, ptr @std.core.ascii.TO_LOWER, i64 %zext182, !dbg !979
  %76 = load i8, ptr %ptradd195, align 1, !dbg !979
  %zext196 = zext i8 %76 to i32, !dbg !979
  %add197 = add i32 %zext181, %zext196, !dbg !979
  %trunc198 = trunc i32 %add197 to i8, !dbg !979
  call void @std.core.dstring.DString.append_char(ptr %d, i8 %trunc198), !dbg !983
  br label %loop.inc, !dbg !984

if.exit199:                                       ; preds = %checkok42
  %77 = load i8, ptr %c, align 1, !dbg !985
  call void @std.core.dstring.DString.append_char(ptr %d, i8 %77), !dbg !985
  br label %loop.inc, !dbg !985

loop.inc:                                         ; preds = %if.exit199, %checkok194
  %78 = load i64, ptr %.anon, align 8, !dbg !950
  %addnuw = add nuw i64 %78, 1, !dbg !950
  store i64 %addnuw, ptr %.anon, align 8, !dbg !950
  br label %loop.cond, !dbg !950

loop.exit:                                        ; preds = %loop.cond
  %79 = load ptr, ptr %d, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg200, ptr align 8 %2, i32 16, i1 false)
  call void @std.core.dstring.DString.copy_str(ptr sret(%"char[]") align 8 %sretparam, ptr %79, ptr align 8 %indirectarg200), !dbg !986
  %80 = load %"char[]", ptr %sretparam, align 8, !dbg !986
  %81 = load ptr, ptr %state, align 8, !dbg !987
  call void @std.core.mem.allocator.pop_pool(ptr %81) #5, !dbg !987
  store %"char[]" %80, ptr %0, align 8, !dbg !987
  ret void, !dbg !987

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.68, i64 45 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.19, i64 10 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.81, i64 20 }, ptr %indirectarg2, align 8
  %82 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %82(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 18) #6, !dbg !947
  unreachable, !dbg !947

panic3:                                           ; preds = %checkok
  store i64 8, ptr %taddr, align 8
  %83 = insertvalue %any undef, ptr %taddr, 0
  %84 = insertvalue %any %83, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %10, ptr %taddr4, align 8
  %85 = insertvalue %any undef, ptr %taddr4, 0
  %86 = insertvalue %any %85, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 94 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.file.19, i64 10 }, ptr %indirectarg6, align 8
  store %"char[]" { ptr @.func.81, i64 20 }, ptr %indirectarg7, align 8
  store %any %84, ptr %varargslots, align 16
  %ptradd8 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %86, ptr %ptradd8, align 16
  %87 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %87, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg9, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, ptr align 8 %indirectarg7, i32 18, ptr align 8 %indirectarg9) #6, !dbg !947
  unreachable, !dbg !947

panic17:                                          ; preds = %loop.body
  store i64 %20, ptr %taddr18, align 8
  %88 = insertvalue %any undef, ptr %taddr18, 0
  %89 = insertvalue %any %88, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %22, ptr %taddr19, align 8
  %90 = insertvalue %any undef, ptr %taddr19, 0
  %91 = insertvalue %any %90, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg20, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg21, align 8
  store %"char[]" { ptr @.func.81, i64 20 }, ptr %indirectarg22, align 8
  store %any %89, ptr %varargslots23, align 16
  %ptradd24 = getelementptr inbounds i8, ptr %varargslots23, i64 16
  store %any %91, ptr %ptradd24, align 16
  %92 = insertvalue %"any[]" undef, ptr %varargslots23, 0
  %"$$temp25" = insertvalue %"any[]" %92, i64 2, 1
  store %"any[]" %"$$temp25", ptr %indirectarg26, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg20, ptr align 8 %indirectarg21, ptr align 8 %indirectarg22, i32 849, ptr align 8 %indirectarg26) #6, !dbg !955
  unreachable, !dbg !955

panic32:                                          ; preds = %checkok27
  store i64 256, ptr %taddr33, align 8
  %93 = insertvalue %any undef, ptr %taddr33, 0
  %94 = insertvalue %any %93, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %zext, ptr %taddr34, align 8
  %95 = insertvalue %any undef, ptr %taddr34, 0
  %96 = insertvalue %any %95, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg35, align 8
  store %"char[]" { ptr @.file.73, i64 8 }, ptr %indirectarg36, align 8
  store %"char[]" { ptr @.func.81, i64 20 }, ptr %indirectarg37, align 8
  store %any %94, ptr %varargslots38, align 16
  %ptradd39 = getelementptr inbounds i8, ptr %varargslots38, i64 16
  store %any %96, ptr %ptradd39, align 16
  %97 = insertvalue %"any[]" undef, ptr %varargslots38, 0
  %"$$temp40" = insertvalue %"any[]" %97, i64 2, 1
  store %"any[]" %"$$temp40", ptr %indirectarg41, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg35, ptr align 8 %indirectarg36, ptr align 8 %indirectarg37, i32 8, ptr align 8 %indirectarg41) #6, !dbg !957
  unreachable, !dbg !957

panic46:                                          ; preds = %and.rhs
  store i64 %sub, ptr %taddr47, align 8
  %98 = insertvalue %any undef, ptr %taddr47, 0
  %99 = insertvalue %any %98, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.26, i64 38 }, ptr %indirectarg48, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg49, align 8
  store %"char[]" { ptr @.func.81, i64 20 }, ptr %indirectarg50, align 8
  store %any %99, ptr %varargslots51, align 16
  %100 = insertvalue %"any[]" undef, ptr %varargslots51, 0
  %"$$temp52" = insertvalue %"any[]" %100, i64 1, 1
  store %"any[]" %"$$temp52", ptr %indirectarg53, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg48, ptr align 8 %indirectarg49, ptr align 8 %indirectarg50, i32 853, ptr align 8 %indirectarg53) #6, !dbg !963
  unreachable, !dbg !963

panic56:                                          ; preds = %checkok54
  store i64 %33, ptr %taddr57, align 8
  %101 = insertvalue %any undef, ptr %taddr57, 0
  %102 = insertvalue %any %101, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sub, ptr %taddr58, align 8
  %103 = insertvalue %any undef, ptr %taddr58, 0
  %104 = insertvalue %any %103, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg59, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg60, align 8
  store %"char[]" { ptr @.func.81, i64 20 }, ptr %indirectarg61, align 8
  store %any %102, ptr %varargslots62, align 16
  %ptradd63 = getelementptr inbounds i8, ptr %varargslots62, i64 16
  store %any %104, ptr %ptradd63, align 16
  %105 = insertvalue %"any[]" undef, ptr %varargslots62, 0
  %"$$temp64" = insertvalue %"any[]" %105, i64 2, 1
  store %"any[]" %"$$temp64", ptr %indirectarg65, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg59, ptr align 8 %indirectarg60, ptr align 8 %indirectarg61, i32 853, ptr align 8 %indirectarg65) #6, !dbg !963
  unreachable, !dbg !963

panic72:                                          ; preds = %checkok66
  store i64 256, ptr %taddr73, align 8
  %106 = insertvalue %any undef, ptr %taddr73, 0
  %107 = insertvalue %any %106, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %zext70, ptr %taddr74, align 8
  %108 = insertvalue %any undef, ptr %taddr74, 0
  %109 = insertvalue %any %108, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg75, align 8
  store %"char[]" { ptr @.file.73, i64 8 }, ptr %indirectarg76, align 8
  store %"char[]" { ptr @.func.81, i64 20 }, ptr %indirectarg77, align 8
  store %any %107, ptr %varargslots78, align 16
  %ptradd79 = getelementptr inbounds i8, ptr %varargslots78, i64 16
  store %any %109, ptr %ptradd79, align 16
  %110 = insertvalue %"any[]" undef, ptr %varargslots78, 0
  %"$$temp80" = insertvalue %"any[]" %110, i64 2, 1
  store %"any[]" %"$$temp80", ptr %indirectarg81, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg75, ptr align 8 %indirectarg76, ptr align 8 %indirectarg77, i32 7, ptr align 8 %indirectarg81) #6, !dbg !965
  unreachable, !dbg !965

panic88:                                          ; preds = %or.rhs
  store i64 %sub86, ptr %taddr89, align 8
  %111 = insertvalue %any undef, ptr %taddr89, 0
  %112 = insertvalue %any %111, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.26, i64 38 }, ptr %indirectarg90, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg91, align 8
  store %"char[]" { ptr @.func.81, i64 20 }, ptr %indirectarg92, align 8
  store %any %112, ptr %varargslots93, align 16
  %113 = insertvalue %"any[]" undef, ptr %varargslots93, 0
  %"$$temp94" = insertvalue %"any[]" %113, i64 1, 1
  store %"any[]" %"$$temp94", ptr %indirectarg95, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg90, ptr align 8 %indirectarg91, ptr align 8 %indirectarg92, i32 853, ptr align 8 %indirectarg95) #6, !dbg !963
  unreachable, !dbg !963

panic98:                                          ; preds = %checkok96
  store i64 %45, ptr %taddr99, align 8
  %114 = insertvalue %any undef, ptr %taddr99, 0
  %115 = insertvalue %any %114, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sub86, ptr %taddr100, align 8
  %116 = insertvalue %any undef, ptr %taddr100, 0
  %117 = insertvalue %any %116, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg101, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg102, align 8
  store %"char[]" { ptr @.func.81, i64 20 }, ptr %indirectarg103, align 8
  store %any %115, ptr %varargslots104, align 16
  %ptradd105 = getelementptr inbounds i8, ptr %varargslots104, i64 16
  store %any %117, ptr %ptradd105, align 16
  %118 = insertvalue %"any[]" undef, ptr %varargslots104, 0
  %"$$temp106" = insertvalue %"any[]" %118, i64 2, 1
  store %"any[]" %"$$temp106", ptr %indirectarg107, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg101, ptr align 8 %indirectarg102, ptr align 8 %indirectarg103, i32 853, ptr align 8 %indirectarg107) #6, !dbg !963
  unreachable, !dbg !963

panic114:                                         ; preds = %checkok108
  store i64 256, ptr %taddr115, align 8
  %119 = insertvalue %any undef, ptr %taddr115, 0
  %120 = insertvalue %any %119, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %zext112, ptr %taddr116, align 8
  %121 = insertvalue %any undef, ptr %taddr116, 0
  %122 = insertvalue %any %121, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg117, align 8
  store %"char[]" { ptr @.file.73, i64 8 }, ptr %indirectarg118, align 8
  store %"char[]" { ptr @.func.81, i64 20 }, ptr %indirectarg119, align 8
  store %any %120, ptr %varargslots120, align 16
  %ptradd121 = getelementptr inbounds i8, ptr %varargslots120, i64 16
  store %any %122, ptr %ptradd121, align 16
  %123 = insertvalue %"any[]" undef, ptr %varargslots120, 0
  %"$$temp122" = insertvalue %"any[]" %123, i64 2, 1
  store %"any[]" %"$$temp122", ptr %indirectarg123, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg117, ptr align 8 %indirectarg118, ptr align 8 %indirectarg119, i32 9, ptr align 8 %indirectarg123) #6, !dbg !969
  unreachable, !dbg !969

panic134:                                         ; preds = %and.rhs131
  store i64 %add, ptr %taddr135, align 8
  %124 = insertvalue %any undef, ptr %taddr135, 0
  %125 = insertvalue %any %124, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.26, i64 38 }, ptr %indirectarg136, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg137, align 8
  store %"char[]" { ptr @.func.81, i64 20 }, ptr %indirectarg138, align 8
  store %any %125, ptr %varargslots139, align 16
  %126 = insertvalue %"any[]" undef, ptr %varargslots139, 0
  %"$$temp140" = insertvalue %"any[]" %126, i64 1, 1
  store %"any[]" %"$$temp140", ptr %indirectarg141, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg136, ptr align 8 %indirectarg137, ptr align 8 %indirectarg138, i32 853, ptr align 8 %indirectarg141) #6, !dbg !963
  unreachable, !dbg !963

panic144:                                         ; preds = %checkok142
  store i64 %59, ptr %taddr145, align 8
  %127 = insertvalue %any undef, ptr %taddr145, 0
  %128 = insertvalue %any %127, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %add, ptr %taddr146, align 8
  %129 = insertvalue %any undef, ptr %taddr146, 0
  %130 = insertvalue %any %129, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg147, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg148, align 8
  store %"char[]" { ptr @.func.81, i64 20 }, ptr %indirectarg149, align 8
  store %any %128, ptr %varargslots150, align 16
  %ptradd151 = getelementptr inbounds i8, ptr %varargslots150, i64 16
  store %any %130, ptr %ptradd151, align 16
  %131 = insertvalue %"any[]" undef, ptr %varargslots150, 0
  %"$$temp152" = insertvalue %"any[]" %131, i64 2, 1
  store %"any[]" %"$$temp152", ptr %indirectarg153, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg147, ptr align 8 %indirectarg148, ptr align 8 %indirectarg149, i32 853, ptr align 8 %indirectarg153) #6, !dbg !963
  unreachable, !dbg !963

panic160:                                         ; preds = %checkok154
  store i64 256, ptr %taddr161, align 8
  %132 = insertvalue %any undef, ptr %taddr161, 0
  %133 = insertvalue %any %132, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %zext158, ptr %taddr162, align 8
  %134 = insertvalue %any undef, ptr %taddr162, 0
  %135 = insertvalue %any %134, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg163, align 8
  store %"char[]" { ptr @.file.73, i64 8 }, ptr %indirectarg164, align 8
  store %"char[]" { ptr @.func.81, i64 20 }, ptr %indirectarg165, align 8
  store %any %133, ptr %varargslots166, align 16
  %ptradd167 = getelementptr inbounds i8, ptr %varargslots166, i64 16
  store %any %135, ptr %ptradd167, align 16
  %136 = insertvalue %"any[]" undef, ptr %varargslots166, 0
  %"$$temp168" = insertvalue %"any[]" %136, i64 2, 1
  store %"any[]" %"$$temp168", ptr %indirectarg169, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg163, ptr align 8 %indirectarg164, ptr align 8 %indirectarg165, i32 7, ptr align 8 %indirectarg169) #6, !dbg !973
  unreachable, !dbg !973

panic184:                                         ; preds = %if.exit
  store i64 256, ptr %taddr185, align 8
  %137 = insertvalue %any undef, ptr %taddr185, 0
  %138 = insertvalue %any %137, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %zext182, ptr %taddr186, align 8
  %139 = insertvalue %any undef, ptr %taddr186, 0
  %140 = insertvalue %any %139, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg187, align 8
  store %"char[]" { ptr @.file.73, i64 8 }, ptr %indirectarg188, align 8
  store %"char[]" { ptr @.func.81, i64 20 }, ptr %indirectarg189, align 8
  store %any %138, ptr %varargslots190, align 16
  %ptradd191 = getelementptr inbounds i8, ptr %varargslots190, i64 16
  store %any %140, ptr %ptradd191, align 16
  %141 = insertvalue %"any[]" undef, ptr %varargslots190, 0
  %"$$temp192" = insertvalue %"any[]" %141, i64 2, 1
  store %"any[]" %"$$temp192", ptr %indirectarg193, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg187, ptr align 8 %indirectarg188, ptr align 8 %indirectarg189, i32 21, ptr align 8 %indirectarg193) #6, !dbg !979
  unreachable, !dbg !979
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.core.String.iterator(ptr noalias sret(%StringIterator) align 8 %0, ptr align 8 %1) #0 comdat !dbg !989 {
entry:
  %literal = alloca %StringIterator, align 8
    #dbg_declare(ptr %1, !996, !DIExpression(), !997)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %literal, ptr align 8 %1, i32 16, i1 false), !dbg !998
  %ptradd = getelementptr inbounds i8, ptr %literal, i64 16, !dbg !998
  store i64 0, ptr %ptradd, align 8, !dbg !998
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %literal, i32 24, i1 false), !dbg !998
  ret void, !dbg !998
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.core.String.to_upper_tcopy(ptr noalias sret(%"char[]") align 8 %0, ptr align 8 %1) #0 comdat !dbg !999 {
entry:
  %sretparam = alloca %"char[]", align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %any, align 8
    #dbg_declare(ptr %1, !1000, !DIExpression(), !1001)
  %2 = call ptr @llvm.threadlocal.address.p0(ptr @std.core.mem.allocator.current_temp), !dbg !1002
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg, ptr align 8 %1, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg1, ptr align 8 %2, i32 16, i1 false)
  call void @std.core.String.to_upper_copy(ptr sret(%"char[]") align 8 %sretparam, ptr align 8 %indirectarg, ptr align 8 %indirectarg1), !dbg !1002
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %sretparam, i32 16, i1 false), !dbg !1002
  ret void, !dbg !1002
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.core.String.utf8_codepoints(ptr align 8 %0) #0 comdat !dbg !1003 {
entry:
  %len = alloca i64, align 8
  %.anon = alloca i64, align 8
  %c = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr2 = alloca i64, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg6 = alloca %"any[]", align 8
    #dbg_declare(ptr %0, !1006, !DIExpression(), !1007)
    #dbg_declare(ptr %len, !1008, !DIExpression(), !1009)
  store i64 0, ptr %len, align 8, !dbg !1009
  %ptradd = getelementptr inbounds i8, ptr %0, i64 8, !dbg !1010
  %1 = load i64, ptr %ptradd, align 8, !dbg !1010
    #dbg_declare(ptr %.anon, !1012, !DIExpression(), !1010)
  store i64 0, ptr %.anon, align 8, !dbg !1010
  br label %loop.cond, !dbg !1010

loop.cond:                                        ; preds = %if.exit, %entry
  %2 = load i64, ptr %.anon, align 8, !dbg !1010
  %lt = icmp ult i64 %2, %1, !dbg !1010
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !1010

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %c, !1013, !DIExpression(), !1015)
  %ptradd1 = getelementptr inbounds i8, ptr %0, i64 8, !dbg !1015
  %3 = load i64, ptr %ptradd1, align 8, !dbg !1015
  %4 = load ptr, ptr %0, align 8, !dbg !1015
  %5 = load i64, ptr %.anon, align 8, !dbg !1015
  %ge = icmp uge i64 %5, %3, !dbg !1015
  %6 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !1015
  br i1 %6, label %panic, label %checkok, !dbg !1015

checkok:                                          ; preds = %loop.body
  %ptradd7 = getelementptr inbounds i8, ptr %4, i64 %5, !dbg !1015
  %7 = load i8, ptr %ptradd7, align 1, !dbg !1015
  store i8 %7, ptr %c, align 1, !dbg !1015
  %8 = load i8, ptr %c, align 1, !dbg !1016
  %zext = zext i8 %8 to i32, !dbg !1016
  %and = and i32 %zext, 192, !dbg !1016
  %neq = icmp ne i32 %and, 128, !dbg !1016
  br i1 %neq, label %if.then, label %if.exit, !dbg !1016

if.then:                                          ; preds = %checkok
  %9 = load i64, ptr %len, align 8, !dbg !1016
  %add = add i64 %9, 1, !dbg !1016
  store i64 %add, ptr %len, align 8, !dbg !1016
  br label %if.exit, !dbg !1016

if.exit:                                          ; preds = %if.then, %checkok
  %10 = load i64, ptr %.anon, align 8, !dbg !1010
  %addnuw = add nuw i64 %10, 1, !dbg !1010
  store i64 %addnuw, ptr %.anon, align 8, !dbg !1010
  br label %loop.cond, !dbg !1010

loop.exit:                                        ; preds = %loop.cond
  %11 = load i64, ptr %len, align 8, !dbg !1018
  ret i64 %11, !dbg !1018

panic:                                            ; preds = %loop.body
  store i64 %3, ptr %taddr, align 8
  %12 = insertvalue %any undef, ptr %taddr, 0
  %13 = insertvalue %any %12, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %5, ptr %taddr2, align 8
  %14 = insertvalue %any undef, ptr %taddr2, 0
  %15 = insertvalue %any %14, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.func.83, i64 15 }, ptr %indirectarg4, align 8
  store %any %13, ptr %varargslots, align 16
  %ptradd5 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %15, ptr %ptradd5, align 16
  %16 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %16, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg6, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg, ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, i32 914, ptr align 8 %indirectarg6) #6, !dbg !1015
  unreachable, !dbg !1015
}

; Function Attrs: nounwind ssp uwtable
define weak_odr zeroext i8 @std.core.String.is_zstr(ptr align 8 %0) #0 comdat !dbg !1019 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
    #dbg_declare(ptr %0, !1022, !DIExpression(), !1023)
  %1 = load ptr, ptr %0, align 8, !dbg !1024
  %i2b = icmp ne ptr %1, null, !dbg !1024
  br i1 %i2b, label %and.rhs, label %and.phi, !dbg !1024

and.rhs:                                          ; preds = %entry
  %2 = load ptr, ptr %0, align 8, !dbg !1024
  %ptradd = getelementptr inbounds i8, ptr %0, i64 8, !dbg !1024
  %3 = load i64, ptr %ptradd, align 8, !dbg !1024
  %ptradd_any = getelementptr i8, ptr %2, i64 %3, !dbg !1024
  %checknull = icmp eq ptr %ptradd_any, null, !dbg !1024
  %4 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1024
  br i1 %4, label %panic, label %checkok, !dbg !1024

checkok:                                          ; preds = %and.rhs
  %5 = load i8, ptr %ptradd_any, align 1, !dbg !1024
  %zext = zext i8 %5 to i32, !dbg !1024
  %eq = icmp eq i32 0, %zext, !dbg !1024
  br label %and.phi, !dbg !1024

and.phi:                                          ; preds = %checkok, %entry
  %val = phi i1 [ false, %entry ], [ %eq, %checkok ], !dbg !1024
  %6 = zext i1 %val to i8, !dbg !1024
  ret i8 %6, !dbg !1024

panic:                                            ; preds = %and.rhs
  store %"char[]" { ptr @.panic_msg.84, i64 60 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.85, i64 7 }, ptr %indirectarg2, align 8
  %7 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %7(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 932) #6, !dbg !1024
  unreachable, !dbg !1024
}

; Function Attrs: nounwind ssp uwtable
define weak_odr ptr @std.core.String.quick_zstr(ptr align 8 %0) #0 comdat !dbg !1025 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
    #dbg_declare(ptr %0, !1026, !DIExpression(), !1027)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg, ptr align 8 %0, i32 16, i1 false)
  %1 = call ptr @std.core.String.zstr_tcopy(ptr align 8 %indirectarg), !dbg !1028
  %ptradd = getelementptr inbounds i8, ptr %0, i64 8, !dbg !1029
  %2 = load i64, ptr %ptradd, align 8, !dbg !1029
  %ptradd1 = getelementptr inbounds i8, ptr %1, i64 %2, !dbg !1029
  %3 = load i8, ptr %ptradd1, align 1, !dbg !1029
  %zext = zext i8 %3 to i32, !dbg !1029
  %eq = icmp eq i32 0, %zext, !dbg !1028
  br i1 %eq, label %assert_ok, label %assert_fail, !dbg !1028

assert_fail:                                      ; preds = %entry
  store %"char[]" { ptr @.panic_msg.86, i64 41 }, ptr %indirectarg2, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.func.87, i64 10 }, ptr %indirectarg4, align 8
  %4 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %4(ptr align 8 %indirectarg2, ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, i32 953) #6, !dbg !1028
  unreachable, !dbg !1028

assert_ok:                                        ; preds = %entry
  ret ptr %1, !dbg !1028
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.core.String.to_int128(ptr %0, ptr align 8 %1, i32 %2) #0 comdat !dbg !1030 {
entry:
  %base = alloca i32, align 4
  %reterr = alloca i64, align 8
  %self = alloca %"char[]", align 8
  %base1 = alloca i32, align 4
  %blockret = alloca i128, align 16
  %indirectarg = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %indirectarg3 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %index = alloca i64, align 8
  %ptr = alloca ptr, align 8
  %c = alloca i8, align 1
  %c6 = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr7 = alloca i64, align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg12 = alloca %"any[]", align 8
  %is_negative = alloca i8, align 1
  %taddr18 = alloca i64, align 8
  %taddr19 = alloca i64, align 8
  %indirectarg20 = alloca %"char[]", align 8
  %indirectarg21 = alloca %"char[]", align 8
  %indirectarg22 = alloca %"char[]", align 8
  %varargslots23 = alloca [2 x %any], align 16
  %indirectarg26 = alloca %"any[]", align 8
  %switch = alloca i8, align 1
  %base_used = alloca i128, align 16
  %taddr39 = alloca i64, align 8
  %taddr40 = alloca i64, align 8
  %indirectarg41 = alloca %"char[]", align 8
  %indirectarg42 = alloca %"char[]", align 8
  %indirectarg43 = alloca %"char[]", align 8
  %varargslots44 = alloca [2 x %any], align 16
  %indirectarg47 = alloca %"any[]", align 8
  %taddr63 = alloca i64, align 8
  %taddr64 = alloca i64, align 8
  %indirectarg65 = alloca %"char[]", align 8
  %indirectarg66 = alloca %"char[]", align 8
  %indirectarg67 = alloca %"char[]", align 8
  %varargslots68 = alloca [2 x %any], align 16
  %indirectarg71 = alloca %"any[]", align 8
  %switch74 = alloca i8, align 1
  %value = alloca i128, align 16
  %c90 = alloca i8, align 1
  %taddr95 = alloca i64, align 8
  %taddr96 = alloca i64, align 8
  %indirectarg97 = alloca %"char[]", align 8
  %indirectarg98 = alloca %"char[]", align 8
  %indirectarg99 = alloca %"char[]", align 8
  %varargslots100 = alloca [2 x %any], align 16
  %indirectarg103 = alloca %"any[]", align 8
  %switch106 = alloca i8, align 1
  %new_value = alloca i128, align 16
  %new_value140 = alloca i128, align 16
    #dbg_declare(ptr %1, !1035, !DIExpression(), !1036)
  store i32 %2, ptr %base, align 4
    #dbg_declare(ptr %base, !1037, !DIExpression(), !1036)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %self, ptr align 8 %1, i32 16, i1 false)
  %3 = load i32, ptr %base, align 4
  store i32 %3, ptr %base1, align 4
  %4 = load i32, ptr %base1, align 4, !dbg !1038
  %gt = icmp sgt i32 %4, 0, !dbg !1038
  br i1 %gt, label %and.rhs, label %and.phi, !dbg !1038

and.rhs:                                          ; preds = %entry
  %5 = load i32, ptr %base1, align 4, !dbg !1038
  %le = icmp sle i32 %5, 16, !dbg !1038
  br label %and.phi, !dbg !1038

and.phi:                                          ; preds = %and.rhs, %entry
  %val = phi i1 [ false, %entry ], [ %le, %and.rhs ], !dbg !1038
  br i1 %val, label %assert_ok, label %assert_fail, !dbg !1038

assert_fail:                                      ; preds = %and.phi
  store %"char[]" { ptr @.panic_msg.88, i64 63 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg2, align 8
  store %"char[]" { ptr @.func.89, i64 9 }, ptr %indirectarg3, align 8
  %6 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %6(ptr align 8 %indirectarg, ptr align 8 %indirectarg2, ptr align 8 %indirectarg3, i32 1045) #6, !dbg !1041
  unreachable, !dbg !1041

assert_ok:                                        ; preds = %and.phi
    #dbg_declare(ptr %len, !1042, !DIExpression(), !1043)
  %ptradd = getelementptr inbounds i8, ptr %self, i64 8, !dbg !1043
  %7 = load i64, ptr %ptradd, align 8, !dbg !1043
  store i64 %7, ptr %len, align 8, !dbg !1043
    #dbg_declare(ptr %index, !1044, !DIExpression(), !1045)
  store i64 0, ptr %index, align 8, !dbg !1045
    #dbg_declare(ptr %ptr, !1046, !DIExpression(), !1047)
  %8 = load ptr, ptr %self, align 8, !dbg !1047
  store ptr %8, ptr %ptr, align 8, !dbg !1047
  br label %loop.cond, !dbg !1048

loop.cond:                                        ; preds = %loop.body, %assert_ok
  %9 = load i64, ptr %index, align 8, !dbg !1049
  %10 = load i64, ptr %len, align 8, !dbg !1049
  %lt = icmp ult i64 %9, %10, !dbg !1049
  br i1 %lt, label %and.rhs4, label %and.phi13, !dbg !1049

and.rhs4:                                         ; preds = %loop.cond
  %11 = load ptr, ptr %ptr, align 8, !dbg !1049
  %12 = load i64, ptr %index, align 8, !dbg !1049
  %ptradd5 = getelementptr inbounds i8, ptr %11, i64 %12, !dbg !1049
  %13 = load i8, ptr %ptradd5, align 1
  store i8 %13, ptr %c, align 1
  %14 = load i8, ptr %c, align 1
  store i8 %14, ptr %c6, align 1
  %15 = load i8, ptr %c6, align 1, !dbg !1051
  %zext = zext i8 %15 to i64, !dbg !1051
  %ge = icmp uge i64 %zext, 256, !dbg !1051
  %16 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !1051
  br i1 %16, label %panic, label %checkok, !dbg !1051

checkok:                                          ; preds = %and.rhs4
  %ptroffset = getelementptr inbounds [2 x i8], ptr @std.core.ascii.ASCII_LOOKUP, i64 %zext, !dbg !1051
  %17 = load i16, ptr %ptroffset, align 2, !dbg !1051
  %lshrl = lshr i16 %17, 10, !dbg !1051
  %18 = and i16 1, %lshrl, !dbg !1051
  %trunc = trunc i16 %18 to i8, !dbg !1051
  %19 = trunc i8 %trunc to i1, !dbg !1051
  br label %and.phi13, !dbg !1051

and.phi13:                                        ; preds = %checkok, %loop.cond
  %val14 = phi i1 [ false, %loop.cond ], [ %19, %checkok ], !dbg !1051
  br i1 %val14, label %loop.body, label %loop.exit, !dbg !1051

loop.body:                                        ; preds = %and.phi13
  %20 = load i64, ptr %index, align 8, !dbg !1049
  %add = add i64 %20, 1, !dbg !1049
  store i64 %add, ptr %index, align 8, !dbg !1049
  br label %loop.cond, !dbg !1049

loop.exit:                                        ; preds = %and.phi13
  %21 = load i64, ptr %len, align 8, !dbg !1055
  %22 = load i64, ptr %index, align 8, !dbg !1055
  %eq = icmp eq i64 %21, %22, !dbg !1055
  br i1 %eq, label %if.then, label %if.exit, !dbg !1055

if.then:                                          ; preds = %loop.exit
  store i64 ptrtoint (ptr @std.core.string.EMPTY_STRING to i64), ptr %reterr, align 8, !dbg !1055
  br label %err_retblock, !dbg !1055

if.exit:                                          ; preds = %loop.exit
    #dbg_declare(ptr %is_negative, !1056, !DIExpression(), !1057)
  store i8 0, ptr %is_negative, align 1, !dbg !1057
  %ptradd15 = getelementptr inbounds i8, ptr %self, i64 8, !dbg !1058
  %23 = load i64, ptr %ptradd15, align 8, !dbg !1058
  %24 = load ptr, ptr %self, align 8, !dbg !1058
  %25 = load i64, ptr %index, align 8, !dbg !1058
  %ge16 = icmp uge i64 %25, %23, !dbg !1058
  %26 = call i1 @llvm.expect.i1(i1 %ge16, i1 false), !dbg !1058
  br i1 %26, label %panic17, label %checkok27, !dbg !1058

checkok27:                                        ; preds = %if.exit
  %ptradd28 = getelementptr inbounds i8, ptr %24, i64 %25, !dbg !1058
  %27 = load i8, ptr %ptradd28, align 1
  store i8 %27, ptr %switch, align 1
  br label %switch.entry

switch.entry:                                     ; preds = %checkok27
  %28 = load i8, ptr %switch, align 1
  switch i8 %28, label %switch.default [
    i8 45, label %switch.case
    i8 43, label %switch.case31
  ]

switch.case:                                      ; preds = %switch.entry
  br label %if.exit29, !dbg !1060

if.exit29:                                        ; preds = %switch.case
  store i8 1, ptr %is_negative, align 1, !dbg !1062
  %29 = load i64, ptr %index, align 8, !dbg !1063
  %add30 = add i64 %29, 1, !dbg !1063
  store i64 %add30, ptr %index, align 8, !dbg !1063
  br label %switch.exit, !dbg !1063

switch.case31:                                    ; preds = %switch.entry
  %30 = load i64, ptr %index, align 8, !dbg !1064
  %add32 = add i64 %30, 1, !dbg !1064
  store i64 %add32, ptr %index, align 8, !dbg !1064
  br label %switch.exit, !dbg !1064

switch.default:                                   ; preds = %switch.entry
  br label %switch.exit, !dbg !1066

switch.exit:                                      ; preds = %switch.default, %switch.case31, %if.exit29
  %31 = load i64, ptr %len, align 8, !dbg !1068
  %32 = load i64, ptr %index, align 8, !dbg !1068
  %eq33 = icmp eq i64 %31, %32, !dbg !1068
  br i1 %eq33, label %if.then34, label %if.exit35, !dbg !1068

if.then34:                                        ; preds = %switch.exit
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_INTEGER to i64), ptr %reterr, align 8, !dbg !1068
  br label %err_retblock, !dbg !1068

if.exit35:                                        ; preds = %switch.exit
    #dbg_declare(ptr %base_used, !1069, !DIExpression(), !1070)
  %33 = load i32, ptr %base1, align 4, !dbg !1070
  %sext = sext i32 %33 to i128, !dbg !1070
  store i128 %sext, ptr %base_used, align 16, !dbg !1070
  %ptradd36 = getelementptr inbounds i8, ptr %self, i64 8, !dbg !1071
  %34 = load i64, ptr %ptradd36, align 8, !dbg !1071
  %35 = load ptr, ptr %self, align 8, !dbg !1071
  %36 = load i64, ptr %index, align 8, !dbg !1071
  %ge37 = icmp uge i64 %36, %34, !dbg !1071
  %37 = call i1 @llvm.expect.i1(i1 %ge37, i1 false), !dbg !1071
  br i1 %37, label %panic38, label %checkok48, !dbg !1071

checkok48:                                        ; preds = %if.exit35
  %ptradd49 = getelementptr inbounds i8, ptr %35, i64 %36, !dbg !1071
  %38 = load i8, ptr %ptradd49, align 1, !dbg !1071
  %eq50 = icmp eq i8 %38, 48, !dbg !1071
  br i1 %eq50, label %and.rhs51, label %and.phi53, !dbg !1071

and.rhs51:                                        ; preds = %checkok48
  %39 = load i32, ptr %base1, align 4, !dbg !1071
  %eq52 = icmp eq i32 %39, 10, !dbg !1071
  br label %and.phi53, !dbg !1071

and.phi53:                                        ; preds = %and.rhs51, %checkok48
  %val54 = phi i1 [ false, %checkok48 ], [ %eq52, %and.rhs51 ], !dbg !1071
  br i1 %val54, label %if.then55, label %if.exit87, !dbg !1071

if.then55:                                        ; preds = %and.phi53
  %40 = load i64, ptr %index, align 8, !dbg !1072
  %add56 = add i64 %40, 1, !dbg !1072
  store i64 %add56, ptr %index, align 8, !dbg !1072
  %41 = load i64, ptr %index, align 8, !dbg !1074
  %42 = load i64, ptr %len, align 8, !dbg !1074
  %eq57 = icmp eq i64 %41, %42, !dbg !1074
  br i1 %eq57, label %if.then58, label %if.exit59, !dbg !1074

if.then58:                                        ; preds = %if.then55
  store i128 0, ptr %blockret, align 16, !dbg !1074
  br label %expr_block.exit, !dbg !1074

if.exit59:                                        ; preds = %if.then55
  %ptradd60 = getelementptr inbounds i8, ptr %self, i64 8, !dbg !1075
  %43 = load i64, ptr %ptradd60, align 8, !dbg !1075
  %44 = load ptr, ptr %self, align 8, !dbg !1075
  %45 = load i64, ptr %index, align 8, !dbg !1075
  %ge61 = icmp uge i64 %45, %43, !dbg !1075
  %46 = call i1 @llvm.expect.i1(i1 %ge61, i1 false), !dbg !1075
  br i1 %46, label %panic62, label %checkok72, !dbg !1075

checkok72:                                        ; preds = %if.exit59
  %ptradd73 = getelementptr inbounds i8, ptr %44, i64 %45, !dbg !1075
  %47 = load i8, ptr %ptradd73, align 1
  store i8 %47, ptr %switch74, align 1
  br label %switch.entry75

switch.entry75:                                   ; preds = %checkok72
  %48 = load i8, ptr %switch74, align 1
  switch i8 %48, label %switch.default82 [
    i8 120, label %switch.case76
    i8 88, label %switch.case76
    i8 98, label %switch.case78
    i8 66, label %switch.case78
    i8 111, label %switch.case80
    i8 79, label %switch.case80
  ]

switch.case76:                                    ; preds = %switch.entry75, %switch.entry75
  store i128 16, ptr %base_used, align 16, !dbg !1077
  %49 = load i64, ptr %index, align 8, !dbg !1079
  %add77 = add i64 %49, 1, !dbg !1079
  store i64 %add77, ptr %index, align 8, !dbg !1079
  br label %switch.exit83, !dbg !1079

switch.case78:                                    ; preds = %switch.entry75, %switch.entry75
  store i128 2, ptr %base_used, align 16, !dbg !1080
  %50 = load i64, ptr %index, align 8, !dbg !1082
  %add79 = add i64 %50, 1, !dbg !1082
  store i64 %add79, ptr %index, align 8, !dbg !1082
  br label %switch.exit83, !dbg !1082

switch.case80:                                    ; preds = %switch.entry75, %switch.entry75
  store i128 8, ptr %base_used, align 16, !dbg !1083
  %51 = load i64, ptr %index, align 8, !dbg !1085
  %add81 = add i64 %51, 1, !dbg !1085
  store i64 %add81, ptr %index, align 8, !dbg !1085
  br label %switch.exit83, !dbg !1085

switch.default82:                                 ; preds = %switch.entry75
  br label %switch.exit83, !dbg !1086

switch.exit83:                                    ; preds = %switch.default82, %switch.case80, %switch.case78, %switch.case76
  %52 = load i64, ptr %len, align 8, !dbg !1088
  %53 = load i64, ptr %index, align 8, !dbg !1088
  %eq84 = icmp eq i64 %52, %53, !dbg !1088
  br i1 %eq84, label %if.then85, label %if.exit86, !dbg !1088

if.then85:                                        ; preds = %switch.exit83
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_INTEGER to i64), ptr %reterr, align 8, !dbg !1088
  br label %err_retblock, !dbg !1088

if.exit86:                                        ; preds = %switch.exit83
  br label %if.exit87, !dbg !1088

if.exit87:                                        ; preds = %if.exit86, %and.phi53
    #dbg_declare(ptr %value, !1089, !DIExpression(), !1090)
  store i128 0, ptr %value, align 16, !dbg !1090
  br label %loop.cond88, !dbg !1091

loop.cond88:                                      ; preds = %loop.exit147, %if.exit87
  %54 = load i64, ptr %index, align 8, !dbg !1092
  %55 = load i64, ptr %len, align 8, !dbg !1092
  %neq = icmp ne i64 %54, %55, !dbg !1092
  br i1 %neq, label %loop.body89, label %loop.exit148, !dbg !1092

loop.body89:                                      ; preds = %loop.cond88
    #dbg_declare(ptr %c90, !1094, !DIExpression(), !1096)
  %ptradd91 = getelementptr inbounds i8, ptr %self, i64 8, !dbg !1096
  %56 = load i64, ptr %ptradd91, align 8, !dbg !1096
  %57 = load ptr, ptr %self, align 8, !dbg !1096
  %58 = load i64, ptr %index, align 8, !dbg !1096
  %add92 = add i64 %58, 1, !dbg !1096
  store i64 %add92, ptr %index, align 8, !dbg !1096
  %ge93 = icmp uge i64 %58, %56, !dbg !1096
  %59 = call i1 @llvm.expect.i1(i1 %ge93, i1 false), !dbg !1096
  br i1 %59, label %panic94, label %checkok104, !dbg !1096

checkok104:                                       ; preds = %loop.body89
  %ptradd105 = getelementptr inbounds i8, ptr %57, i64 %58, !dbg !1096
  %60 = load i8, ptr %ptradd105, align 1, !dbg !1096
  store i8 %60, ptr %c90, align 1, !dbg !1096
  store i8 1, ptr %switch106, align 1
  br label %switch.entry107

switch.entry107:                                  ; preds = %checkok104
  %61 = load i8, ptr %switch106, align 1
  %62 = trunc i8 %61 to i1
  %63 = load i128, ptr %base_used, align 16, !dbg !1097
  %lt108 = icmp slt i128 %63, 10, !dbg !1097
  br i1 %lt108, label %or.phi, label %or.rhs, !dbg !1097

or.rhs:                                           ; preds = %switch.entry107
  %64 = load i8, ptr %c90, align 1, !dbg !1097
  %lt109 = icmp ult i8 %64, 65, !dbg !1097
  br label %or.phi, !dbg !1097

or.phi:                                           ; preds = %or.rhs, %switch.entry107
  %val110 = phi i1 [ true, %switch.entry107 ], [ %lt109, %or.rhs ], !dbg !1097
  %eq111 = icmp eq i1 %val110, %62, !dbg !1097
  br i1 %eq111, label %switch.case112, label %next_if, !dbg !1097

switch.case112:                                   ; preds = %or.phi
  %65 = load i8, ptr %c90, align 1, !dbg !1099
  %sub = sub i8 %65, 48, !dbg !1099
  store i8 %sub, ptr %c90, align 1, !dbg !1099
  br label %switch.exit128, !dbg !1099

next_if:                                          ; preds = %or.phi
  %66 = load i8, ptr %c90, align 1, !dbg !1101
  %le113 = icmp ule i8 %66, 70, !dbg !1101
  %eq114 = icmp eq i1 %le113, %62, !dbg !1101
  br i1 %eq114, label %switch.case115, label %next_if117, !dbg !1101

switch.case115:                                   ; preds = %next_if
  %67 = load i8, ptr %c90, align 1, !dbg !1102
  %sub116 = sub i8 %67, 55, !dbg !1102
  store i8 %sub116, ptr %c90, align 1, !dbg !1102
  br label %switch.exit128, !dbg !1102

next_if117:                                       ; preds = %next_if
  %68 = load i8, ptr %c90, align 1, !dbg !1104
  %lt118 = icmp ult i8 %68, 97, !dbg !1104
  br i1 %lt118, label %or.phi121, label %or.rhs119, !dbg !1104

or.rhs119:                                        ; preds = %next_if117
  %69 = load i8, ptr %c90, align 1, !dbg !1104
  %gt120 = icmp ugt i8 %69, 102, !dbg !1104
  br label %or.phi121, !dbg !1104

or.phi121:                                        ; preds = %or.rhs119, %next_if117
  %val122 = phi i1 [ true, %next_if117 ], [ %gt120, %or.rhs119 ], !dbg !1104
  %eq123 = icmp eq i1 %val122, %62, !dbg !1104
  br i1 %eq123, label %switch.case124, label %next_if125, !dbg !1104

switch.case124:                                   ; preds = %or.phi121
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_INTEGER to i64), ptr %reterr, align 8, !dbg !1105
  br label %err_retblock, !dbg !1105

next_if125:                                       ; preds = %or.phi121
  br label %switch.default126, !dbg !1105

switch.default126:                                ; preds = %next_if125
  %70 = load i8, ptr %c90, align 1, !dbg !1107
  %sub127 = sub i8 %70, 87, !dbg !1107
  store i8 %sub127, ptr %c90, align 1, !dbg !1107
  br label %switch.exit128, !dbg !1107

switch.exit128:                                   ; preds = %switch.default126, %switch.case115, %switch.case112
  %71 = load i8, ptr %c90, align 1, !dbg !1109
  %zext129 = zext i8 %71 to i128, !dbg !1109
  %72 = load i128, ptr %base_used, align 16, !dbg !1109
  %le130 = icmp sle i128 %72, %zext129, !dbg !1109
  %check = icmp slt i128 %zext129, 0, !dbg !1109
  %siui-le = or i1 %check, %le130, !dbg !1109
  br i1 %siui-le, label %if.then131, label %if.exit132, !dbg !1109

if.then131:                                       ; preds = %switch.exit128
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_INTEGER to i64), ptr %reterr, align 8, !dbg !1109
  br label %err_retblock, !dbg !1109

if.exit132:                                       ; preds = %switch.exit128
  %73 = load i8, ptr %is_negative, align 1, !dbg !1110
  %74 = trunc i8 %73 to i1, !dbg !1110
  br i1 %74, label %if.then133, label %if.exit139, !dbg !1110

if.then133:                                       ; preds = %if.exit132
    #dbg_declare(ptr %new_value, !1113, !DIExpression(), !1115)
  %75 = load i128, ptr %value, align 16, !dbg !1115
  %76 = load i128, ptr %base_used, align 16, !dbg !1115
  %mul = mul i128 %75, %76, !dbg !1115
  %77 = load i8, ptr %c90, align 1, !dbg !1115
  %zext134 = zext i8 %77 to i128, !dbg !1115
  %sub135 = sub i128 %mul, %zext134, !dbg !1115
  store i128 %sub135, ptr %new_value, align 16, !dbg !1115
  %78 = load i128, ptr %new_value, align 16, !dbg !1116
  %79 = load i128, ptr %value, align 16, !dbg !1116
  %gt136 = icmp sgt i128 %78, %79, !dbg !1116
  br i1 %gt136, label %if.then137, label %if.exit138, !dbg !1116

if.then137:                                       ; preds = %if.then133
  store i64 ptrtoint (ptr @std.core.string.INTEGER_OVERFLOW to i64), ptr %reterr, align 8, !dbg !1116
  br label %err_retblock, !dbg !1116

if.exit138:                                       ; preds = %if.then133
  %80 = load i128, ptr %new_value, align 16, !dbg !1117
  store i128 %80, ptr %value, align 16, !dbg !1117
  br label %loop.exit147, !dbg !1118

if.exit139:                                       ; preds = %if.exit132
    #dbg_declare(ptr %new_value140, !1119, !DIExpression(), !1120)
  %81 = load i128, ptr %value, align 16, !dbg !1120
  %82 = load i128, ptr %base_used, align 16, !dbg !1120
  %mul141 = mul i128 %81, %82, !dbg !1120
  %83 = load i8, ptr %c90, align 1, !dbg !1120
  %zext142 = zext i8 %83 to i128, !dbg !1120
  %add143 = add i128 %mul141, %zext142, !dbg !1120
  store i128 %add143, ptr %new_value140, align 16, !dbg !1120
  %84 = load i128, ptr %new_value140, align 16, !dbg !1121
  %85 = load i128, ptr %value, align 16, !dbg !1121
  %lt144 = icmp slt i128 %84, %85, !dbg !1121
  br i1 %lt144, label %if.then145, label %if.exit146, !dbg !1121

if.then145:                                       ; preds = %if.exit139
  store i64 ptrtoint (ptr @std.core.string.INTEGER_OVERFLOW to i64), ptr %reterr, align 8, !dbg !1121
  br label %err_retblock, !dbg !1121

if.exit146:                                       ; preds = %if.exit139
  %86 = load i128, ptr %new_value140, align 16, !dbg !1122
  store i128 %86, ptr %value, align 16, !dbg !1122
  br label %loop.exit147, !dbg !1122

loop.exit147:                                     ; preds = %if.exit146, %if.exit138
  br label %loop.cond88, !dbg !1122

loop.exit148:                                     ; preds = %loop.cond88
  %87 = load i128, ptr %value, align 16, !dbg !1123
  store i128 %87, ptr %blockret, align 16, !dbg !1123
  br label %expr_block.exit, !dbg !1123

expr_block.exit:                                  ; preds = %loop.exit148, %if.then58
  %88 = load i128, ptr %blockret, align 16, !dbg !1123
  store i128 %88, ptr %0, align 16, !dbg !1123
  ret i64 0, !dbg !1123

err_retblock:                                     ; preds = %if.then145, %if.then137, %if.then131, %switch.case124, %if.then85, %if.then34, %if.then
  %89 = load i64, ptr %reterr, align 8, !dbg !1123
  ret i64 %89, !dbg !1123

panic:                                            ; preds = %and.rhs4
  store i64 256, ptr %taddr, align 8
  %90 = insertvalue %any undef, ptr %taddr, 0
  %91 = insertvalue %any %90, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %zext, ptr %taddr7, align 8
  %92 = insertvalue %any undef, ptr %taddr7, 0
  %93 = insertvalue %any %92, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg8, align 8
  store %"char[]" { ptr @.file.73, i64 8 }, ptr %indirectarg9, align 8
  store %"char[]" { ptr @.func.89, i64 9 }, ptr %indirectarg10, align 8
  store %any %91, ptr %varargslots, align 16
  %ptradd11 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %93, ptr %ptradd11, align 16
  %94 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %94, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg12, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg8, ptr align 8 %indirectarg9, ptr align 8 %indirectarg10, i32 19, ptr align 8 %indirectarg12) #6, !dbg !1051
  unreachable, !dbg !1051

panic17:                                          ; preds = %if.exit
  store i64 %23, ptr %taddr18, align 8
  %95 = insertvalue %any undef, ptr %taddr18, 0
  %96 = insertvalue %any %95, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %25, ptr %taddr19, align 8
  %97 = insertvalue %any undef, ptr %taddr19, 0
  %98 = insertvalue %any %97, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg20, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg21, align 8
  store %"char[]" { ptr @.func.89, i64 9 }, ptr %indirectarg22, align 8
  store %any %96, ptr %varargslots23, align 16
  %ptradd24 = getelementptr inbounds i8, ptr %varargslots23, i64 16
  store %any %98, ptr %ptradd24, align 16
  %99 = insertvalue %"any[]" undef, ptr %varargslots23, 0
  %"$$temp25" = insertvalue %"any[]" %99, i64 2, 1
  store %"any[]" %"$$temp25", ptr %indirectarg26, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg20, ptr align 8 %indirectarg21, ptr align 8 %indirectarg22, i32 980, ptr align 8 %indirectarg26) #6, !dbg !1058
  unreachable, !dbg !1058

panic38:                                          ; preds = %if.exit35
  store i64 %34, ptr %taddr39, align 8
  %100 = insertvalue %any undef, ptr %taddr39, 0
  %101 = insertvalue %any %100, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %36, ptr %taddr40, align 8
  %102 = insertvalue %any undef, ptr %taddr40, 0
  %103 = insertvalue %any %102, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg41, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg42, align 8
  store %"char[]" { ptr @.func.89, i64 9 }, ptr %indirectarg43, align 8
  store %any %101, ptr %varargslots44, align 16
  %ptradd45 = getelementptr inbounds i8, ptr %varargslots44, i64 16
  store %any %103, ptr %ptradd45, align 16
  %104 = insertvalue %"any[]" undef, ptr %varargslots44, 0
  %"$$temp46" = insertvalue %"any[]" %104, i64 2, 1
  store %"any[]" %"$$temp46", ptr %indirectarg47, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg41, ptr align 8 %indirectarg42, ptr align 8 %indirectarg43, i32 993, ptr align 8 %indirectarg47) #6, !dbg !1071
  unreachable, !dbg !1071

panic62:                                          ; preds = %if.exit59
  store i64 %43, ptr %taddr63, align 8
  %105 = insertvalue %any undef, ptr %taddr63, 0
  %106 = insertvalue %any %105, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %45, ptr %taddr64, align 8
  %107 = insertvalue %any undef, ptr %taddr64, 0
  %108 = insertvalue %any %107, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg65, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg66, align 8
  store %"char[]" { ptr @.func.89, i64 9 }, ptr %indirectarg67, align 8
  store %any %106, ptr %varargslots68, align 16
  %ptradd69 = getelementptr inbounds i8, ptr %varargslots68, i64 16
  store %any %108, ptr %ptradd69, align 16
  %109 = insertvalue %"any[]" undef, ptr %varargslots68, 0
  %"$$temp70" = insertvalue %"any[]" %109, i64 2, 1
  store %"any[]" %"$$temp70", ptr %indirectarg71, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg65, ptr align 8 %indirectarg66, ptr align 8 %indirectarg67, i32 997, ptr align 8 %indirectarg71) #6, !dbg !1075
  unreachable, !dbg !1075

panic94:                                          ; preds = %loop.body89
  store i64 %56, ptr %taddr95, align 8
  %110 = insertvalue %any undef, ptr %taddr95, 0
  %111 = insertvalue %any %110, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %58, ptr %taddr96, align 8
  %112 = insertvalue %any undef, ptr %taddr96, 0
  %113 = insertvalue %any %112, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg97, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg98, align 8
  store %"char[]" { ptr @.func.89, i64 9 }, ptr %indirectarg99, align 8
  store %any %111, ptr %varargslots100, align 16
  %ptradd101 = getelementptr inbounds i8, ptr %varargslots100, i64 16
  store %any %113, ptr %ptradd101, align 16
  %114 = insertvalue %"any[]" undef, ptr %varargslots100, 0
  %"$$temp102" = insertvalue %"any[]" %114, i64 2, 1
  store %"any[]" %"$$temp102", ptr %indirectarg103, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg97, ptr align 8 %indirectarg98, ptr align 8 %indirectarg99, i32 1019, ptr align 8 %indirectarg103) #6, !dbg !1096
  unreachable, !dbg !1096
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.core.String.to_long(ptr %0, ptr align 8 %1, i32 %2) #0 comdat !dbg !1124 {
entry:
  %base = alloca i32, align 4
  %reterr = alloca i64, align 8
  %self = alloca %"char[]", align 8
  %base1 = alloca i32, align 4
  %blockret = alloca i64, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %indirectarg3 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %index = alloca i64, align 8
  %ptr = alloca ptr, align 8
  %c = alloca i8, align 1
  %c6 = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr7 = alloca i64, align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg12 = alloca %"any[]", align 8
  %is_negative = alloca i8, align 1
  %taddr18 = alloca i64, align 8
  %taddr19 = alloca i64, align 8
  %indirectarg20 = alloca %"char[]", align 8
  %indirectarg21 = alloca %"char[]", align 8
  %indirectarg22 = alloca %"char[]", align 8
  %varargslots23 = alloca [2 x %any], align 16
  %indirectarg26 = alloca %"any[]", align 8
  %switch = alloca i8, align 1
  %base_used = alloca i64, align 8
  %taddr39 = alloca i64, align 8
  %taddr40 = alloca i64, align 8
  %indirectarg41 = alloca %"char[]", align 8
  %indirectarg42 = alloca %"char[]", align 8
  %indirectarg43 = alloca %"char[]", align 8
  %varargslots44 = alloca [2 x %any], align 16
  %indirectarg47 = alloca %"any[]", align 8
  %taddr63 = alloca i64, align 8
  %taddr64 = alloca i64, align 8
  %indirectarg65 = alloca %"char[]", align 8
  %indirectarg66 = alloca %"char[]", align 8
  %indirectarg67 = alloca %"char[]", align 8
  %varargslots68 = alloca [2 x %any], align 16
  %indirectarg71 = alloca %"any[]", align 8
  %switch74 = alloca i8, align 1
  %value = alloca i64, align 8
  %c90 = alloca i8, align 1
  %taddr95 = alloca i64, align 8
  %taddr96 = alloca i64, align 8
  %indirectarg97 = alloca %"char[]", align 8
  %indirectarg98 = alloca %"char[]", align 8
  %indirectarg99 = alloca %"char[]", align 8
  %varargslots100 = alloca [2 x %any], align 16
  %indirectarg103 = alloca %"any[]", align 8
  %switch106 = alloca i8, align 1
  %new_value = alloca i64, align 8
  %new_value140 = alloca i64, align 8
    #dbg_declare(ptr %1, !1128, !DIExpression(), !1129)
  store i32 %2, ptr %base, align 4
    #dbg_declare(ptr %base, !1130, !DIExpression(), !1129)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %self, ptr align 8 %1, i32 16, i1 false)
  %3 = load i32, ptr %base, align 4
  store i32 %3, ptr %base1, align 4
  %4 = load i32, ptr %base1, align 4, !dbg !1131
  %gt = icmp sgt i32 %4, 0, !dbg !1131
  br i1 %gt, label %and.rhs, label %and.phi, !dbg !1131

and.rhs:                                          ; preds = %entry
  %5 = load i32, ptr %base1, align 4, !dbg !1131
  %le = icmp sle i32 %5, 16, !dbg !1131
  br label %and.phi, !dbg !1131

and.phi:                                          ; preds = %and.rhs, %entry
  %val = phi i1 [ false, %entry ], [ %le, %and.rhs ], !dbg !1131
  br i1 %val, label %assert_ok, label %assert_fail, !dbg !1131

assert_fail:                                      ; preds = %and.phi
  store %"char[]" { ptr @.panic_msg.88, i64 63 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg2, align 8
  store %"char[]" { ptr @.func.90, i64 7 }, ptr %indirectarg3, align 8
  %6 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %6(ptr align 8 %indirectarg, ptr align 8 %indirectarg2, ptr align 8 %indirectarg3, i32 1046) #6, !dbg !1134
  unreachable, !dbg !1134

assert_ok:                                        ; preds = %and.phi
    #dbg_declare(ptr %len, !1135, !DIExpression(), !1136)
  %ptradd = getelementptr inbounds i8, ptr %self, i64 8, !dbg !1136
  %7 = load i64, ptr %ptradd, align 8, !dbg !1136
  store i64 %7, ptr %len, align 8, !dbg !1136
    #dbg_declare(ptr %index, !1137, !DIExpression(), !1138)
  store i64 0, ptr %index, align 8, !dbg !1138
    #dbg_declare(ptr %ptr, !1139, !DIExpression(), !1140)
  %8 = load ptr, ptr %self, align 8, !dbg !1140
  store ptr %8, ptr %ptr, align 8, !dbg !1140
  br label %loop.cond, !dbg !1141

loop.cond:                                        ; preds = %loop.body, %assert_ok
  %9 = load i64, ptr %index, align 8, !dbg !1142
  %10 = load i64, ptr %len, align 8, !dbg !1142
  %lt = icmp ult i64 %9, %10, !dbg !1142
  br i1 %lt, label %and.rhs4, label %and.phi13, !dbg !1142

and.rhs4:                                         ; preds = %loop.cond
  %11 = load ptr, ptr %ptr, align 8, !dbg !1142
  %12 = load i64, ptr %index, align 8, !dbg !1142
  %ptradd5 = getelementptr inbounds i8, ptr %11, i64 %12, !dbg !1142
  %13 = load i8, ptr %ptradd5, align 1
  store i8 %13, ptr %c, align 1
  %14 = load i8, ptr %c, align 1
  store i8 %14, ptr %c6, align 1
  %15 = load i8, ptr %c6, align 1, !dbg !1144
  %zext = zext i8 %15 to i64, !dbg !1144
  %ge = icmp uge i64 %zext, 256, !dbg !1144
  %16 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !1144
  br i1 %16, label %panic, label %checkok, !dbg !1144

checkok:                                          ; preds = %and.rhs4
  %ptroffset = getelementptr inbounds [2 x i8], ptr @std.core.ascii.ASCII_LOOKUP, i64 %zext, !dbg !1144
  %17 = load i16, ptr %ptroffset, align 2, !dbg !1144
  %lshrl = lshr i16 %17, 10, !dbg !1144
  %18 = and i16 1, %lshrl, !dbg !1144
  %trunc = trunc i16 %18 to i8, !dbg !1144
  %19 = trunc i8 %trunc to i1, !dbg !1144
  br label %and.phi13, !dbg !1144

and.phi13:                                        ; preds = %checkok, %loop.cond
  %val14 = phi i1 [ false, %loop.cond ], [ %19, %checkok ], !dbg !1144
  br i1 %val14, label %loop.body, label %loop.exit, !dbg !1144

loop.body:                                        ; preds = %and.phi13
  %20 = load i64, ptr %index, align 8, !dbg !1142
  %add = add i64 %20, 1, !dbg !1142
  store i64 %add, ptr %index, align 8, !dbg !1142
  br label %loop.cond, !dbg !1142

loop.exit:                                        ; preds = %and.phi13
  %21 = load i64, ptr %len, align 8, !dbg !1148
  %22 = load i64, ptr %index, align 8, !dbg !1148
  %eq = icmp eq i64 %21, %22, !dbg !1148
  br i1 %eq, label %if.then, label %if.exit, !dbg !1148

if.then:                                          ; preds = %loop.exit
  store i64 ptrtoint (ptr @std.core.string.EMPTY_STRING to i64), ptr %reterr, align 8, !dbg !1148
  br label %err_retblock, !dbg !1148

if.exit:                                          ; preds = %loop.exit
    #dbg_declare(ptr %is_negative, !1149, !DIExpression(), !1150)
  store i8 0, ptr %is_negative, align 1, !dbg !1150
  %ptradd15 = getelementptr inbounds i8, ptr %self, i64 8, !dbg !1151
  %23 = load i64, ptr %ptradd15, align 8, !dbg !1151
  %24 = load ptr, ptr %self, align 8, !dbg !1151
  %25 = load i64, ptr %index, align 8, !dbg !1151
  %ge16 = icmp uge i64 %25, %23, !dbg !1151
  %26 = call i1 @llvm.expect.i1(i1 %ge16, i1 false), !dbg !1151
  br i1 %26, label %panic17, label %checkok27, !dbg !1151

checkok27:                                        ; preds = %if.exit
  %ptradd28 = getelementptr inbounds i8, ptr %24, i64 %25, !dbg !1151
  %27 = load i8, ptr %ptradd28, align 1
  store i8 %27, ptr %switch, align 1
  br label %switch.entry

switch.entry:                                     ; preds = %checkok27
  %28 = load i8, ptr %switch, align 1
  switch i8 %28, label %switch.default [
    i8 45, label %switch.case
    i8 43, label %switch.case31
  ]

switch.case:                                      ; preds = %switch.entry
  br label %if.exit29, !dbg !1153

if.exit29:                                        ; preds = %switch.case
  store i8 1, ptr %is_negative, align 1, !dbg !1155
  %29 = load i64, ptr %index, align 8, !dbg !1156
  %add30 = add i64 %29, 1, !dbg !1156
  store i64 %add30, ptr %index, align 8, !dbg !1156
  br label %switch.exit, !dbg !1156

switch.case31:                                    ; preds = %switch.entry
  %30 = load i64, ptr %index, align 8, !dbg !1157
  %add32 = add i64 %30, 1, !dbg !1157
  store i64 %add32, ptr %index, align 8, !dbg !1157
  br label %switch.exit, !dbg !1157

switch.default:                                   ; preds = %switch.entry
  br label %switch.exit, !dbg !1159

switch.exit:                                      ; preds = %switch.default, %switch.case31, %if.exit29
  %31 = load i64, ptr %len, align 8, !dbg !1161
  %32 = load i64, ptr %index, align 8, !dbg !1161
  %eq33 = icmp eq i64 %31, %32, !dbg !1161
  br i1 %eq33, label %if.then34, label %if.exit35, !dbg !1161

if.then34:                                        ; preds = %switch.exit
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_INTEGER to i64), ptr %reterr, align 8, !dbg !1161
  br label %err_retblock, !dbg !1161

if.exit35:                                        ; preds = %switch.exit
    #dbg_declare(ptr %base_used, !1162, !DIExpression(), !1163)
  %33 = load i32, ptr %base1, align 4, !dbg !1163
  %sext = sext i32 %33 to i64, !dbg !1163
  store i64 %sext, ptr %base_used, align 8, !dbg !1163
  %ptradd36 = getelementptr inbounds i8, ptr %self, i64 8, !dbg !1164
  %34 = load i64, ptr %ptradd36, align 8, !dbg !1164
  %35 = load ptr, ptr %self, align 8, !dbg !1164
  %36 = load i64, ptr %index, align 8, !dbg !1164
  %ge37 = icmp uge i64 %36, %34, !dbg !1164
  %37 = call i1 @llvm.expect.i1(i1 %ge37, i1 false), !dbg !1164
  br i1 %37, label %panic38, label %checkok48, !dbg !1164

checkok48:                                        ; preds = %if.exit35
  %ptradd49 = getelementptr inbounds i8, ptr %35, i64 %36, !dbg !1164
  %38 = load i8, ptr %ptradd49, align 1, !dbg !1164
  %eq50 = icmp eq i8 %38, 48, !dbg !1164
  br i1 %eq50, label %and.rhs51, label %and.phi53, !dbg !1164

and.rhs51:                                        ; preds = %checkok48
  %39 = load i32, ptr %base1, align 4, !dbg !1164
  %eq52 = icmp eq i32 %39, 10, !dbg !1164
  br label %and.phi53, !dbg !1164

and.phi53:                                        ; preds = %and.rhs51, %checkok48
  %val54 = phi i1 [ false, %checkok48 ], [ %eq52, %and.rhs51 ], !dbg !1164
  br i1 %val54, label %if.then55, label %if.exit87, !dbg !1164

if.then55:                                        ; preds = %and.phi53
  %40 = load i64, ptr %index, align 8, !dbg !1165
  %add56 = add i64 %40, 1, !dbg !1165
  store i64 %add56, ptr %index, align 8, !dbg !1165
  %41 = load i64, ptr %index, align 8, !dbg !1167
  %42 = load i64, ptr %len, align 8, !dbg !1167
  %eq57 = icmp eq i64 %41, %42, !dbg !1167
  br i1 %eq57, label %if.then58, label %if.exit59, !dbg !1167

if.then58:                                        ; preds = %if.then55
  store i64 0, ptr %blockret, align 8, !dbg !1167
  br label %expr_block.exit, !dbg !1167

if.exit59:                                        ; preds = %if.then55
  %ptradd60 = getelementptr inbounds i8, ptr %self, i64 8, !dbg !1168
  %43 = load i64, ptr %ptradd60, align 8, !dbg !1168
  %44 = load ptr, ptr %self, align 8, !dbg !1168
  %45 = load i64, ptr %index, align 8, !dbg !1168
  %ge61 = icmp uge i64 %45, %43, !dbg !1168
  %46 = call i1 @llvm.expect.i1(i1 %ge61, i1 false), !dbg !1168
  br i1 %46, label %panic62, label %checkok72, !dbg !1168

checkok72:                                        ; preds = %if.exit59
  %ptradd73 = getelementptr inbounds i8, ptr %44, i64 %45, !dbg !1168
  %47 = load i8, ptr %ptradd73, align 1
  store i8 %47, ptr %switch74, align 1
  br label %switch.entry75

switch.entry75:                                   ; preds = %checkok72
  %48 = load i8, ptr %switch74, align 1
  switch i8 %48, label %switch.default82 [
    i8 120, label %switch.case76
    i8 88, label %switch.case76
    i8 98, label %switch.case78
    i8 66, label %switch.case78
    i8 111, label %switch.case80
    i8 79, label %switch.case80
  ]

switch.case76:                                    ; preds = %switch.entry75, %switch.entry75
  store i64 16, ptr %base_used, align 8, !dbg !1170
  %49 = load i64, ptr %index, align 8, !dbg !1172
  %add77 = add i64 %49, 1, !dbg !1172
  store i64 %add77, ptr %index, align 8, !dbg !1172
  br label %switch.exit83, !dbg !1172

switch.case78:                                    ; preds = %switch.entry75, %switch.entry75
  store i64 2, ptr %base_used, align 8, !dbg !1173
  %50 = load i64, ptr %index, align 8, !dbg !1175
  %add79 = add i64 %50, 1, !dbg !1175
  store i64 %add79, ptr %index, align 8, !dbg !1175
  br label %switch.exit83, !dbg !1175

switch.case80:                                    ; preds = %switch.entry75, %switch.entry75
  store i64 8, ptr %base_used, align 8, !dbg !1176
  %51 = load i64, ptr %index, align 8, !dbg !1178
  %add81 = add i64 %51, 1, !dbg !1178
  store i64 %add81, ptr %index, align 8, !dbg !1178
  br label %switch.exit83, !dbg !1178

switch.default82:                                 ; preds = %switch.entry75
  br label %switch.exit83, !dbg !1179

switch.exit83:                                    ; preds = %switch.default82, %switch.case80, %switch.case78, %switch.case76
  %52 = load i64, ptr %len, align 8, !dbg !1181
  %53 = load i64, ptr %index, align 8, !dbg !1181
  %eq84 = icmp eq i64 %52, %53, !dbg !1181
  br i1 %eq84, label %if.then85, label %if.exit86, !dbg !1181

if.then85:                                        ; preds = %switch.exit83
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_INTEGER to i64), ptr %reterr, align 8, !dbg !1181
  br label %err_retblock, !dbg !1181

if.exit86:                                        ; preds = %switch.exit83
  br label %if.exit87, !dbg !1181

if.exit87:                                        ; preds = %if.exit86, %and.phi53
    #dbg_declare(ptr %value, !1182, !DIExpression(), !1183)
  store i64 0, ptr %value, align 8, !dbg !1183
  br label %loop.cond88, !dbg !1184

loop.cond88:                                      ; preds = %loop.exit147, %if.exit87
  %54 = load i64, ptr %index, align 8, !dbg !1185
  %55 = load i64, ptr %len, align 8, !dbg !1185
  %neq = icmp ne i64 %54, %55, !dbg !1185
  br i1 %neq, label %loop.body89, label %loop.exit148, !dbg !1185

loop.body89:                                      ; preds = %loop.cond88
    #dbg_declare(ptr %c90, !1187, !DIExpression(), !1189)
  %ptradd91 = getelementptr inbounds i8, ptr %self, i64 8, !dbg !1189
  %56 = load i64, ptr %ptradd91, align 8, !dbg !1189
  %57 = load ptr, ptr %self, align 8, !dbg !1189
  %58 = load i64, ptr %index, align 8, !dbg !1189
  %add92 = add i64 %58, 1, !dbg !1189
  store i64 %add92, ptr %index, align 8, !dbg !1189
  %ge93 = icmp uge i64 %58, %56, !dbg !1189
  %59 = call i1 @llvm.expect.i1(i1 %ge93, i1 false), !dbg !1189
  br i1 %59, label %panic94, label %checkok104, !dbg !1189

checkok104:                                       ; preds = %loop.body89
  %ptradd105 = getelementptr inbounds i8, ptr %57, i64 %58, !dbg !1189
  %60 = load i8, ptr %ptradd105, align 1, !dbg !1189
  store i8 %60, ptr %c90, align 1, !dbg !1189
  store i8 1, ptr %switch106, align 1
  br label %switch.entry107

switch.entry107:                                  ; preds = %checkok104
  %61 = load i8, ptr %switch106, align 1
  %62 = trunc i8 %61 to i1
  %63 = load i64, ptr %base_used, align 8, !dbg !1190
  %lt108 = icmp slt i64 %63, 10, !dbg !1190
  br i1 %lt108, label %or.phi, label %or.rhs, !dbg !1190

or.rhs:                                           ; preds = %switch.entry107
  %64 = load i8, ptr %c90, align 1, !dbg !1190
  %lt109 = icmp ult i8 %64, 65, !dbg !1190
  br label %or.phi, !dbg !1190

or.phi:                                           ; preds = %or.rhs, %switch.entry107
  %val110 = phi i1 [ true, %switch.entry107 ], [ %lt109, %or.rhs ], !dbg !1190
  %eq111 = icmp eq i1 %val110, %62, !dbg !1190
  br i1 %eq111, label %switch.case112, label %next_if, !dbg !1190

switch.case112:                                   ; preds = %or.phi
  %65 = load i8, ptr %c90, align 1, !dbg !1192
  %sub = sub i8 %65, 48, !dbg !1192
  store i8 %sub, ptr %c90, align 1, !dbg !1192
  br label %switch.exit128, !dbg !1192

next_if:                                          ; preds = %or.phi
  %66 = load i8, ptr %c90, align 1, !dbg !1194
  %le113 = icmp ule i8 %66, 70, !dbg !1194
  %eq114 = icmp eq i1 %le113, %62, !dbg !1194
  br i1 %eq114, label %switch.case115, label %next_if117, !dbg !1194

switch.case115:                                   ; preds = %next_if
  %67 = load i8, ptr %c90, align 1, !dbg !1195
  %sub116 = sub i8 %67, 55, !dbg !1195
  store i8 %sub116, ptr %c90, align 1, !dbg !1195
  br label %switch.exit128, !dbg !1195

next_if117:                                       ; preds = %next_if
  %68 = load i8, ptr %c90, align 1, !dbg !1197
  %lt118 = icmp ult i8 %68, 97, !dbg !1197
  br i1 %lt118, label %or.phi121, label %or.rhs119, !dbg !1197

or.rhs119:                                        ; preds = %next_if117
  %69 = load i8, ptr %c90, align 1, !dbg !1197
  %gt120 = icmp ugt i8 %69, 102, !dbg !1197
  br label %or.phi121, !dbg !1197

or.phi121:                                        ; preds = %or.rhs119, %next_if117
  %val122 = phi i1 [ true, %next_if117 ], [ %gt120, %or.rhs119 ], !dbg !1197
  %eq123 = icmp eq i1 %val122, %62, !dbg !1197
  br i1 %eq123, label %switch.case124, label %next_if125, !dbg !1197

switch.case124:                                   ; preds = %or.phi121
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_INTEGER to i64), ptr %reterr, align 8, !dbg !1198
  br label %err_retblock, !dbg !1198

next_if125:                                       ; preds = %or.phi121
  br label %switch.default126, !dbg !1198

switch.default126:                                ; preds = %next_if125
  %70 = load i8, ptr %c90, align 1, !dbg !1200
  %sub127 = sub i8 %70, 87, !dbg !1200
  store i8 %sub127, ptr %c90, align 1, !dbg !1200
  br label %switch.exit128, !dbg !1200

switch.exit128:                                   ; preds = %switch.default126, %switch.case115, %switch.case112
  %71 = load i8, ptr %c90, align 1, !dbg !1202
  %zext129 = zext i8 %71 to i64, !dbg !1202
  %72 = load i64, ptr %base_used, align 8, !dbg !1202
  %le130 = icmp sle i64 %72, %zext129, !dbg !1202
  %check = icmp slt i64 %zext129, 0, !dbg !1202
  %siui-le = or i1 %check, %le130, !dbg !1202
  br i1 %siui-le, label %if.then131, label %if.exit132, !dbg !1202

if.then131:                                       ; preds = %switch.exit128
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_INTEGER to i64), ptr %reterr, align 8, !dbg !1202
  br label %err_retblock, !dbg !1202

if.exit132:                                       ; preds = %switch.exit128
  %73 = load i8, ptr %is_negative, align 1, !dbg !1203
  %74 = trunc i8 %73 to i1, !dbg !1203
  br i1 %74, label %if.then133, label %if.exit139, !dbg !1203

if.then133:                                       ; preds = %if.exit132
    #dbg_declare(ptr %new_value, !1206, !DIExpression(), !1208)
  %75 = load i64, ptr %value, align 8, !dbg !1208
  %76 = load i64, ptr %base_used, align 8, !dbg !1208
  %mul = mul i64 %75, %76, !dbg !1208
  %77 = load i8, ptr %c90, align 1, !dbg !1208
  %zext134 = zext i8 %77 to i64, !dbg !1208
  %sub135 = sub i64 %mul, %zext134, !dbg !1208
  store i64 %sub135, ptr %new_value, align 8, !dbg !1208
  %78 = load i64, ptr %new_value, align 8, !dbg !1209
  %79 = load i64, ptr %value, align 8, !dbg !1209
  %gt136 = icmp sgt i64 %78, %79, !dbg !1209
  br i1 %gt136, label %if.then137, label %if.exit138, !dbg !1209

if.then137:                                       ; preds = %if.then133
  store i64 ptrtoint (ptr @std.core.string.INTEGER_OVERFLOW to i64), ptr %reterr, align 8, !dbg !1209
  br label %err_retblock, !dbg !1209

if.exit138:                                       ; preds = %if.then133
  %80 = load i64, ptr %new_value, align 8, !dbg !1210
  store i64 %80, ptr %value, align 8, !dbg !1210
  br label %loop.exit147, !dbg !1211

if.exit139:                                       ; preds = %if.exit132
    #dbg_declare(ptr %new_value140, !1212, !DIExpression(), !1213)
  %81 = load i64, ptr %value, align 8, !dbg !1213
  %82 = load i64, ptr %base_used, align 8, !dbg !1213
  %mul141 = mul i64 %81, %82, !dbg !1213
  %83 = load i8, ptr %c90, align 1, !dbg !1213
  %zext142 = zext i8 %83 to i64, !dbg !1213
  %add143 = add i64 %mul141, %zext142, !dbg !1213
  store i64 %add143, ptr %new_value140, align 8, !dbg !1213
  %84 = load i64, ptr %new_value140, align 8, !dbg !1214
  %85 = load i64, ptr %value, align 8, !dbg !1214
  %lt144 = icmp slt i64 %84, %85, !dbg !1214
  br i1 %lt144, label %if.then145, label %if.exit146, !dbg !1214

if.then145:                                       ; preds = %if.exit139
  store i64 ptrtoint (ptr @std.core.string.INTEGER_OVERFLOW to i64), ptr %reterr, align 8, !dbg !1214
  br label %err_retblock, !dbg !1214

if.exit146:                                       ; preds = %if.exit139
  %86 = load i64, ptr %new_value140, align 8, !dbg !1215
  store i64 %86, ptr %value, align 8, !dbg !1215
  br label %loop.exit147, !dbg !1215

loop.exit147:                                     ; preds = %if.exit146, %if.exit138
  br label %loop.cond88, !dbg !1215

loop.exit148:                                     ; preds = %loop.cond88
  %87 = load i64, ptr %value, align 8, !dbg !1216
  store i64 %87, ptr %blockret, align 8, !dbg !1216
  br label %expr_block.exit, !dbg !1216

expr_block.exit:                                  ; preds = %loop.exit148, %if.then58
  %88 = load i64, ptr %blockret, align 8, !dbg !1216
  store i64 %88, ptr %0, align 8, !dbg !1216
  ret i64 0, !dbg !1216

err_retblock:                                     ; preds = %if.then145, %if.then137, %if.then131, %switch.case124, %if.then85, %if.then34, %if.then
  %89 = load i64, ptr %reterr, align 8, !dbg !1216
  ret i64 %89, !dbg !1216

panic:                                            ; preds = %and.rhs4
  store i64 256, ptr %taddr, align 8
  %90 = insertvalue %any undef, ptr %taddr, 0
  %91 = insertvalue %any %90, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %zext, ptr %taddr7, align 8
  %92 = insertvalue %any undef, ptr %taddr7, 0
  %93 = insertvalue %any %92, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg8, align 8
  store %"char[]" { ptr @.file.73, i64 8 }, ptr %indirectarg9, align 8
  store %"char[]" { ptr @.func.90, i64 7 }, ptr %indirectarg10, align 8
  store %any %91, ptr %varargslots, align 16
  %ptradd11 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %93, ptr %ptradd11, align 16
  %94 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %94, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg12, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg8, ptr align 8 %indirectarg9, ptr align 8 %indirectarg10, i32 19, ptr align 8 %indirectarg12) #6, !dbg !1144
  unreachable, !dbg !1144

panic17:                                          ; preds = %if.exit
  store i64 %23, ptr %taddr18, align 8
  %95 = insertvalue %any undef, ptr %taddr18, 0
  %96 = insertvalue %any %95, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %25, ptr %taddr19, align 8
  %97 = insertvalue %any undef, ptr %taddr19, 0
  %98 = insertvalue %any %97, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg20, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg21, align 8
  store %"char[]" { ptr @.func.90, i64 7 }, ptr %indirectarg22, align 8
  store %any %96, ptr %varargslots23, align 16
  %ptradd24 = getelementptr inbounds i8, ptr %varargslots23, i64 16
  store %any %98, ptr %ptradd24, align 16
  %99 = insertvalue %"any[]" undef, ptr %varargslots23, 0
  %"$$temp25" = insertvalue %"any[]" %99, i64 2, 1
  store %"any[]" %"$$temp25", ptr %indirectarg26, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg20, ptr align 8 %indirectarg21, ptr align 8 %indirectarg22, i32 980, ptr align 8 %indirectarg26) #6, !dbg !1151
  unreachable, !dbg !1151

panic38:                                          ; preds = %if.exit35
  store i64 %34, ptr %taddr39, align 8
  %100 = insertvalue %any undef, ptr %taddr39, 0
  %101 = insertvalue %any %100, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %36, ptr %taddr40, align 8
  %102 = insertvalue %any undef, ptr %taddr40, 0
  %103 = insertvalue %any %102, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg41, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg42, align 8
  store %"char[]" { ptr @.func.90, i64 7 }, ptr %indirectarg43, align 8
  store %any %101, ptr %varargslots44, align 16
  %ptradd45 = getelementptr inbounds i8, ptr %varargslots44, i64 16
  store %any %103, ptr %ptradd45, align 16
  %104 = insertvalue %"any[]" undef, ptr %varargslots44, 0
  %"$$temp46" = insertvalue %"any[]" %104, i64 2, 1
  store %"any[]" %"$$temp46", ptr %indirectarg47, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg41, ptr align 8 %indirectarg42, ptr align 8 %indirectarg43, i32 993, ptr align 8 %indirectarg47) #6, !dbg !1164
  unreachable, !dbg !1164

panic62:                                          ; preds = %if.exit59
  store i64 %43, ptr %taddr63, align 8
  %105 = insertvalue %any undef, ptr %taddr63, 0
  %106 = insertvalue %any %105, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %45, ptr %taddr64, align 8
  %107 = insertvalue %any undef, ptr %taddr64, 0
  %108 = insertvalue %any %107, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg65, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg66, align 8
  store %"char[]" { ptr @.func.90, i64 7 }, ptr %indirectarg67, align 8
  store %any %106, ptr %varargslots68, align 16
  %ptradd69 = getelementptr inbounds i8, ptr %varargslots68, i64 16
  store %any %108, ptr %ptradd69, align 16
  %109 = insertvalue %"any[]" undef, ptr %varargslots68, 0
  %"$$temp70" = insertvalue %"any[]" %109, i64 2, 1
  store %"any[]" %"$$temp70", ptr %indirectarg71, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg65, ptr align 8 %indirectarg66, ptr align 8 %indirectarg67, i32 997, ptr align 8 %indirectarg71) #6, !dbg !1168
  unreachable, !dbg !1168

panic94:                                          ; preds = %loop.body89
  store i64 %56, ptr %taddr95, align 8
  %110 = insertvalue %any undef, ptr %taddr95, 0
  %111 = insertvalue %any %110, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %58, ptr %taddr96, align 8
  %112 = insertvalue %any undef, ptr %taddr96, 0
  %113 = insertvalue %any %112, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg97, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg98, align 8
  store %"char[]" { ptr @.func.90, i64 7 }, ptr %indirectarg99, align 8
  store %any %111, ptr %varargslots100, align 16
  %ptradd101 = getelementptr inbounds i8, ptr %varargslots100, i64 16
  store %any %113, ptr %ptradd101, align 16
  %114 = insertvalue %"any[]" undef, ptr %varargslots100, 0
  %"$$temp102" = insertvalue %"any[]" %114, i64 2, 1
  store %"any[]" %"$$temp102", ptr %indirectarg103, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg97, ptr align 8 %indirectarg98, ptr align 8 %indirectarg99, i32 1019, ptr align 8 %indirectarg103) #6, !dbg !1189
  unreachable, !dbg !1189
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.core.String.to_int(ptr %0, ptr align 8 %1, i32 %2) #0 comdat !dbg !1217 {
entry:
  %base = alloca i32, align 4
  %reterr = alloca i64, align 8
  %self = alloca %"char[]", align 8
  %base1 = alloca i32, align 4
  %blockret = alloca i32, align 4
  %indirectarg = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %indirectarg3 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %index = alloca i64, align 8
  %ptr = alloca ptr, align 8
  %c = alloca i8, align 1
  %c6 = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr7 = alloca i64, align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg12 = alloca %"any[]", align 8
  %is_negative = alloca i8, align 1
  %taddr18 = alloca i64, align 8
  %taddr19 = alloca i64, align 8
  %indirectarg20 = alloca %"char[]", align 8
  %indirectarg21 = alloca %"char[]", align 8
  %indirectarg22 = alloca %"char[]", align 8
  %varargslots23 = alloca [2 x %any], align 16
  %indirectarg26 = alloca %"any[]", align 8
  %switch = alloca i8, align 1
  %base_used = alloca i32, align 4
  %taddr39 = alloca i64, align 8
  %taddr40 = alloca i64, align 8
  %indirectarg41 = alloca %"char[]", align 8
  %indirectarg42 = alloca %"char[]", align 8
  %indirectarg43 = alloca %"char[]", align 8
  %varargslots44 = alloca [2 x %any], align 16
  %indirectarg47 = alloca %"any[]", align 8
  %taddr63 = alloca i64, align 8
  %taddr64 = alloca i64, align 8
  %indirectarg65 = alloca %"char[]", align 8
  %indirectarg66 = alloca %"char[]", align 8
  %indirectarg67 = alloca %"char[]", align 8
  %varargslots68 = alloca [2 x %any], align 16
  %indirectarg71 = alloca %"any[]", align 8
  %switch74 = alloca i8, align 1
  %value = alloca i32, align 4
  %c90 = alloca i8, align 1
  %taddr95 = alloca i64, align 8
  %taddr96 = alloca i64, align 8
  %indirectarg97 = alloca %"char[]", align 8
  %indirectarg98 = alloca %"char[]", align 8
  %indirectarg99 = alloca %"char[]", align 8
  %varargslots100 = alloca [2 x %any], align 16
  %indirectarg103 = alloca %"any[]", align 8
  %switch106 = alloca i8, align 1
  %new_value = alloca i32, align 4
  %new_value140 = alloca i32, align 4
    #dbg_declare(ptr %1, !1221, !DIExpression(), !1222)
  store i32 %2, ptr %base, align 4
    #dbg_declare(ptr %base, !1223, !DIExpression(), !1222)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %self, ptr align 8 %1, i32 16, i1 false)
  %3 = load i32, ptr %base, align 4
  store i32 %3, ptr %base1, align 4
  %4 = load i32, ptr %base1, align 4, !dbg !1224
  %gt = icmp sgt i32 %4, 0, !dbg !1224
  br i1 %gt, label %and.rhs, label %and.phi, !dbg !1224

and.rhs:                                          ; preds = %entry
  %5 = load i32, ptr %base1, align 4, !dbg !1224
  %le = icmp sle i32 %5, 16, !dbg !1224
  br label %and.phi, !dbg !1224

and.phi:                                          ; preds = %and.rhs, %entry
  %val = phi i1 [ false, %entry ], [ %le, %and.rhs ], !dbg !1224
  br i1 %val, label %assert_ok, label %assert_fail, !dbg !1224

assert_fail:                                      ; preds = %and.phi
  store %"char[]" { ptr @.panic_msg.88, i64 63 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg2, align 8
  store %"char[]" { ptr @.func.91, i64 6 }, ptr %indirectarg3, align 8
  %6 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %6(ptr align 8 %indirectarg, ptr align 8 %indirectarg2, ptr align 8 %indirectarg3, i32 1047) #6, !dbg !1227
  unreachable, !dbg !1227

assert_ok:                                        ; preds = %and.phi
    #dbg_declare(ptr %len, !1228, !DIExpression(), !1229)
  %ptradd = getelementptr inbounds i8, ptr %self, i64 8, !dbg !1229
  %7 = load i64, ptr %ptradd, align 8, !dbg !1229
  store i64 %7, ptr %len, align 8, !dbg !1229
    #dbg_declare(ptr %index, !1230, !DIExpression(), !1231)
  store i64 0, ptr %index, align 8, !dbg !1231
    #dbg_declare(ptr %ptr, !1232, !DIExpression(), !1233)
  %8 = load ptr, ptr %self, align 8, !dbg !1233
  store ptr %8, ptr %ptr, align 8, !dbg !1233
  br label %loop.cond, !dbg !1234

loop.cond:                                        ; preds = %loop.body, %assert_ok
  %9 = load i64, ptr %index, align 8, !dbg !1235
  %10 = load i64, ptr %len, align 8, !dbg !1235
  %lt = icmp ult i64 %9, %10, !dbg !1235
  br i1 %lt, label %and.rhs4, label %and.phi13, !dbg !1235

and.rhs4:                                         ; preds = %loop.cond
  %11 = load ptr, ptr %ptr, align 8, !dbg !1235
  %12 = load i64, ptr %index, align 8, !dbg !1235
  %ptradd5 = getelementptr inbounds i8, ptr %11, i64 %12, !dbg !1235
  %13 = load i8, ptr %ptradd5, align 1
  store i8 %13, ptr %c, align 1
  %14 = load i8, ptr %c, align 1
  store i8 %14, ptr %c6, align 1
  %15 = load i8, ptr %c6, align 1, !dbg !1237
  %zext = zext i8 %15 to i64, !dbg !1237
  %ge = icmp uge i64 %zext, 256, !dbg !1237
  %16 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !1237
  br i1 %16, label %panic, label %checkok, !dbg !1237

checkok:                                          ; preds = %and.rhs4
  %ptroffset = getelementptr inbounds [2 x i8], ptr @std.core.ascii.ASCII_LOOKUP, i64 %zext, !dbg !1237
  %17 = load i16, ptr %ptroffset, align 2, !dbg !1237
  %lshrl = lshr i16 %17, 10, !dbg !1237
  %18 = and i16 1, %lshrl, !dbg !1237
  %trunc = trunc i16 %18 to i8, !dbg !1237
  %19 = trunc i8 %trunc to i1, !dbg !1237
  br label %and.phi13, !dbg !1237

and.phi13:                                        ; preds = %checkok, %loop.cond
  %val14 = phi i1 [ false, %loop.cond ], [ %19, %checkok ], !dbg !1237
  br i1 %val14, label %loop.body, label %loop.exit, !dbg !1237

loop.body:                                        ; preds = %and.phi13
  %20 = load i64, ptr %index, align 8, !dbg !1235
  %add = add i64 %20, 1, !dbg !1235
  store i64 %add, ptr %index, align 8, !dbg !1235
  br label %loop.cond, !dbg !1235

loop.exit:                                        ; preds = %and.phi13
  %21 = load i64, ptr %len, align 8, !dbg !1241
  %22 = load i64, ptr %index, align 8, !dbg !1241
  %eq = icmp eq i64 %21, %22, !dbg !1241
  br i1 %eq, label %if.then, label %if.exit, !dbg !1241

if.then:                                          ; preds = %loop.exit
  store i64 ptrtoint (ptr @std.core.string.EMPTY_STRING to i64), ptr %reterr, align 8, !dbg !1241
  br label %err_retblock, !dbg !1241

if.exit:                                          ; preds = %loop.exit
    #dbg_declare(ptr %is_negative, !1242, !DIExpression(), !1243)
  store i8 0, ptr %is_negative, align 1, !dbg !1243
  %ptradd15 = getelementptr inbounds i8, ptr %self, i64 8, !dbg !1244
  %23 = load i64, ptr %ptradd15, align 8, !dbg !1244
  %24 = load ptr, ptr %self, align 8, !dbg !1244
  %25 = load i64, ptr %index, align 8, !dbg !1244
  %ge16 = icmp uge i64 %25, %23, !dbg !1244
  %26 = call i1 @llvm.expect.i1(i1 %ge16, i1 false), !dbg !1244
  br i1 %26, label %panic17, label %checkok27, !dbg !1244

checkok27:                                        ; preds = %if.exit
  %ptradd28 = getelementptr inbounds i8, ptr %24, i64 %25, !dbg !1244
  %27 = load i8, ptr %ptradd28, align 1
  store i8 %27, ptr %switch, align 1
  br label %switch.entry

switch.entry:                                     ; preds = %checkok27
  %28 = load i8, ptr %switch, align 1
  switch i8 %28, label %switch.default [
    i8 45, label %switch.case
    i8 43, label %switch.case31
  ]

switch.case:                                      ; preds = %switch.entry
  br label %if.exit29, !dbg !1246

if.exit29:                                        ; preds = %switch.case
  store i8 1, ptr %is_negative, align 1, !dbg !1248
  %29 = load i64, ptr %index, align 8, !dbg !1249
  %add30 = add i64 %29, 1, !dbg !1249
  store i64 %add30, ptr %index, align 8, !dbg !1249
  br label %switch.exit, !dbg !1249

switch.case31:                                    ; preds = %switch.entry
  %30 = load i64, ptr %index, align 8, !dbg !1250
  %add32 = add i64 %30, 1, !dbg !1250
  store i64 %add32, ptr %index, align 8, !dbg !1250
  br label %switch.exit, !dbg !1250

switch.default:                                   ; preds = %switch.entry
  br label %switch.exit, !dbg !1252

switch.exit:                                      ; preds = %switch.default, %switch.case31, %if.exit29
  %31 = load i64, ptr %len, align 8, !dbg !1254
  %32 = load i64, ptr %index, align 8, !dbg !1254
  %eq33 = icmp eq i64 %31, %32, !dbg !1254
  br i1 %eq33, label %if.then34, label %if.exit35, !dbg !1254

if.then34:                                        ; preds = %switch.exit
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_INTEGER to i64), ptr %reterr, align 8, !dbg !1254
  br label %err_retblock, !dbg !1254

if.exit35:                                        ; preds = %switch.exit
    #dbg_declare(ptr %base_used, !1255, !DIExpression(), !1256)
  %33 = load i32, ptr %base1, align 4, !dbg !1256
  store i32 %33, ptr %base_used, align 4, !dbg !1256
  %ptradd36 = getelementptr inbounds i8, ptr %self, i64 8, !dbg !1257
  %34 = load i64, ptr %ptradd36, align 8, !dbg !1257
  %35 = load ptr, ptr %self, align 8, !dbg !1257
  %36 = load i64, ptr %index, align 8, !dbg !1257
  %ge37 = icmp uge i64 %36, %34, !dbg !1257
  %37 = call i1 @llvm.expect.i1(i1 %ge37, i1 false), !dbg !1257
  br i1 %37, label %panic38, label %checkok48, !dbg !1257

checkok48:                                        ; preds = %if.exit35
  %ptradd49 = getelementptr inbounds i8, ptr %35, i64 %36, !dbg !1257
  %38 = load i8, ptr %ptradd49, align 1, !dbg !1257
  %eq50 = icmp eq i8 %38, 48, !dbg !1257
  br i1 %eq50, label %and.rhs51, label %and.phi53, !dbg !1257

and.rhs51:                                        ; preds = %checkok48
  %39 = load i32, ptr %base1, align 4, !dbg !1257
  %eq52 = icmp eq i32 %39, 10, !dbg !1257
  br label %and.phi53, !dbg !1257

and.phi53:                                        ; preds = %and.rhs51, %checkok48
  %val54 = phi i1 [ false, %checkok48 ], [ %eq52, %and.rhs51 ], !dbg !1257
  br i1 %val54, label %if.then55, label %if.exit87, !dbg !1257

if.then55:                                        ; preds = %and.phi53
  %40 = load i64, ptr %index, align 8, !dbg !1258
  %add56 = add i64 %40, 1, !dbg !1258
  store i64 %add56, ptr %index, align 8, !dbg !1258
  %41 = load i64, ptr %index, align 8, !dbg !1260
  %42 = load i64, ptr %len, align 8, !dbg !1260
  %eq57 = icmp eq i64 %41, %42, !dbg !1260
  br i1 %eq57, label %if.then58, label %if.exit59, !dbg !1260

if.then58:                                        ; preds = %if.then55
  store i32 0, ptr %blockret, align 4, !dbg !1260
  br label %expr_block.exit, !dbg !1260

if.exit59:                                        ; preds = %if.then55
  %ptradd60 = getelementptr inbounds i8, ptr %self, i64 8, !dbg !1261
  %43 = load i64, ptr %ptradd60, align 8, !dbg !1261
  %44 = load ptr, ptr %self, align 8, !dbg !1261
  %45 = load i64, ptr %index, align 8, !dbg !1261
  %ge61 = icmp uge i64 %45, %43, !dbg !1261
  %46 = call i1 @llvm.expect.i1(i1 %ge61, i1 false), !dbg !1261
  br i1 %46, label %panic62, label %checkok72, !dbg !1261

checkok72:                                        ; preds = %if.exit59
  %ptradd73 = getelementptr inbounds i8, ptr %44, i64 %45, !dbg !1261
  %47 = load i8, ptr %ptradd73, align 1
  store i8 %47, ptr %switch74, align 1
  br label %switch.entry75

switch.entry75:                                   ; preds = %checkok72
  %48 = load i8, ptr %switch74, align 1
  switch i8 %48, label %switch.default82 [
    i8 120, label %switch.case76
    i8 88, label %switch.case76
    i8 98, label %switch.case78
    i8 66, label %switch.case78
    i8 111, label %switch.case80
    i8 79, label %switch.case80
  ]

switch.case76:                                    ; preds = %switch.entry75, %switch.entry75
  store i32 16, ptr %base_used, align 4, !dbg !1263
  %49 = load i64, ptr %index, align 8, !dbg !1265
  %add77 = add i64 %49, 1, !dbg !1265
  store i64 %add77, ptr %index, align 8, !dbg !1265
  br label %switch.exit83, !dbg !1265

switch.case78:                                    ; preds = %switch.entry75, %switch.entry75
  store i32 2, ptr %base_used, align 4, !dbg !1266
  %50 = load i64, ptr %index, align 8, !dbg !1268
  %add79 = add i64 %50, 1, !dbg !1268
  store i64 %add79, ptr %index, align 8, !dbg !1268
  br label %switch.exit83, !dbg !1268

switch.case80:                                    ; preds = %switch.entry75, %switch.entry75
  store i32 8, ptr %base_used, align 4, !dbg !1269
  %51 = load i64, ptr %index, align 8, !dbg !1271
  %add81 = add i64 %51, 1, !dbg !1271
  store i64 %add81, ptr %index, align 8, !dbg !1271
  br label %switch.exit83, !dbg !1271

switch.default82:                                 ; preds = %switch.entry75
  br label %switch.exit83, !dbg !1272

switch.exit83:                                    ; preds = %switch.default82, %switch.case80, %switch.case78, %switch.case76
  %52 = load i64, ptr %len, align 8, !dbg !1274
  %53 = load i64, ptr %index, align 8, !dbg !1274
  %eq84 = icmp eq i64 %52, %53, !dbg !1274
  br i1 %eq84, label %if.then85, label %if.exit86, !dbg !1274

if.then85:                                        ; preds = %switch.exit83
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_INTEGER to i64), ptr %reterr, align 8, !dbg !1274
  br label %err_retblock, !dbg !1274

if.exit86:                                        ; preds = %switch.exit83
  br label %if.exit87, !dbg !1274

if.exit87:                                        ; preds = %if.exit86, %and.phi53
    #dbg_declare(ptr %value, !1275, !DIExpression(), !1276)
  store i32 0, ptr %value, align 4, !dbg !1276
  br label %loop.cond88, !dbg !1277

loop.cond88:                                      ; preds = %loop.exit147, %if.exit87
  %54 = load i64, ptr %index, align 8, !dbg !1278
  %55 = load i64, ptr %len, align 8, !dbg !1278
  %neq = icmp ne i64 %54, %55, !dbg !1278
  br i1 %neq, label %loop.body89, label %loop.exit148, !dbg !1278

loop.body89:                                      ; preds = %loop.cond88
    #dbg_declare(ptr %c90, !1280, !DIExpression(), !1282)
  %ptradd91 = getelementptr inbounds i8, ptr %self, i64 8, !dbg !1282
  %56 = load i64, ptr %ptradd91, align 8, !dbg !1282
  %57 = load ptr, ptr %self, align 8, !dbg !1282
  %58 = load i64, ptr %index, align 8, !dbg !1282
  %add92 = add i64 %58, 1, !dbg !1282
  store i64 %add92, ptr %index, align 8, !dbg !1282
  %ge93 = icmp uge i64 %58, %56, !dbg !1282
  %59 = call i1 @llvm.expect.i1(i1 %ge93, i1 false), !dbg !1282
  br i1 %59, label %panic94, label %checkok104, !dbg !1282

checkok104:                                       ; preds = %loop.body89
  %ptradd105 = getelementptr inbounds i8, ptr %57, i64 %58, !dbg !1282
  %60 = load i8, ptr %ptradd105, align 1, !dbg !1282
  store i8 %60, ptr %c90, align 1, !dbg !1282
  store i8 1, ptr %switch106, align 1
  br label %switch.entry107

switch.entry107:                                  ; preds = %checkok104
  %61 = load i8, ptr %switch106, align 1
  %62 = trunc i8 %61 to i1
  %63 = load i32, ptr %base_used, align 4, !dbg !1283
  %lt108 = icmp slt i32 %63, 10, !dbg !1283
  br i1 %lt108, label %or.phi, label %or.rhs, !dbg !1283

or.rhs:                                           ; preds = %switch.entry107
  %64 = load i8, ptr %c90, align 1, !dbg !1283
  %lt109 = icmp ult i8 %64, 65, !dbg !1283
  br label %or.phi, !dbg !1283

or.phi:                                           ; preds = %or.rhs, %switch.entry107
  %val110 = phi i1 [ true, %switch.entry107 ], [ %lt109, %or.rhs ], !dbg !1283
  %eq111 = icmp eq i1 %val110, %62, !dbg !1283
  br i1 %eq111, label %switch.case112, label %next_if, !dbg !1283

switch.case112:                                   ; preds = %or.phi
  %65 = load i8, ptr %c90, align 1, !dbg !1285
  %sub = sub i8 %65, 48, !dbg !1285
  store i8 %sub, ptr %c90, align 1, !dbg !1285
  br label %switch.exit128, !dbg !1285

next_if:                                          ; preds = %or.phi
  %66 = load i8, ptr %c90, align 1, !dbg !1287
  %le113 = icmp ule i8 %66, 70, !dbg !1287
  %eq114 = icmp eq i1 %le113, %62, !dbg !1287
  br i1 %eq114, label %switch.case115, label %next_if117, !dbg !1287

switch.case115:                                   ; preds = %next_if
  %67 = load i8, ptr %c90, align 1, !dbg !1288
  %sub116 = sub i8 %67, 55, !dbg !1288
  store i8 %sub116, ptr %c90, align 1, !dbg !1288
  br label %switch.exit128, !dbg !1288

next_if117:                                       ; preds = %next_if
  %68 = load i8, ptr %c90, align 1, !dbg !1290
  %lt118 = icmp ult i8 %68, 97, !dbg !1290
  br i1 %lt118, label %or.phi121, label %or.rhs119, !dbg !1290

or.rhs119:                                        ; preds = %next_if117
  %69 = load i8, ptr %c90, align 1, !dbg !1290
  %gt120 = icmp ugt i8 %69, 102, !dbg !1290
  br label %or.phi121, !dbg !1290

or.phi121:                                        ; preds = %or.rhs119, %next_if117
  %val122 = phi i1 [ true, %next_if117 ], [ %gt120, %or.rhs119 ], !dbg !1290
  %eq123 = icmp eq i1 %val122, %62, !dbg !1290
  br i1 %eq123, label %switch.case124, label %next_if125, !dbg !1290

switch.case124:                                   ; preds = %or.phi121
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_INTEGER to i64), ptr %reterr, align 8, !dbg !1291
  br label %err_retblock, !dbg !1291

next_if125:                                       ; preds = %or.phi121
  br label %switch.default126, !dbg !1291

switch.default126:                                ; preds = %next_if125
  %70 = load i8, ptr %c90, align 1, !dbg !1293
  %sub127 = sub i8 %70, 87, !dbg !1293
  store i8 %sub127, ptr %c90, align 1, !dbg !1293
  br label %switch.exit128, !dbg !1293

switch.exit128:                                   ; preds = %switch.default126, %switch.case115, %switch.case112
  %71 = load i8, ptr %c90, align 1, !dbg !1295
  %zext129 = zext i8 %71 to i32, !dbg !1295
  %72 = load i32, ptr %base_used, align 4, !dbg !1295
  %le130 = icmp sle i32 %72, %zext129, !dbg !1295
  %check = icmp slt i32 %zext129, 0, !dbg !1295
  %siui-le = or i1 %check, %le130, !dbg !1295
  br i1 %siui-le, label %if.then131, label %if.exit132, !dbg !1295

if.then131:                                       ; preds = %switch.exit128
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_INTEGER to i64), ptr %reterr, align 8, !dbg !1295
  br label %err_retblock, !dbg !1295

if.exit132:                                       ; preds = %switch.exit128
  %73 = load i8, ptr %is_negative, align 1, !dbg !1296
  %74 = trunc i8 %73 to i1, !dbg !1296
  br i1 %74, label %if.then133, label %if.exit139, !dbg !1296

if.then133:                                       ; preds = %if.exit132
    #dbg_declare(ptr %new_value, !1299, !DIExpression(), !1301)
  %75 = load i32, ptr %value, align 4, !dbg !1301
  %76 = load i32, ptr %base_used, align 4, !dbg !1301
  %mul = mul i32 %75, %76, !dbg !1301
  %77 = load i8, ptr %c90, align 1, !dbg !1301
  %zext134 = zext i8 %77 to i32, !dbg !1301
  %sub135 = sub i32 %mul, %zext134, !dbg !1301
  store i32 %sub135, ptr %new_value, align 4, !dbg !1301
  %78 = load i32, ptr %new_value, align 4, !dbg !1302
  %79 = load i32, ptr %value, align 4, !dbg !1302
  %gt136 = icmp sgt i32 %78, %79, !dbg !1302
  br i1 %gt136, label %if.then137, label %if.exit138, !dbg !1302

if.then137:                                       ; preds = %if.then133
  store i64 ptrtoint (ptr @std.core.string.INTEGER_OVERFLOW to i64), ptr %reterr, align 8, !dbg !1302
  br label %err_retblock, !dbg !1302

if.exit138:                                       ; preds = %if.then133
  %80 = load i32, ptr %new_value, align 4, !dbg !1303
  store i32 %80, ptr %value, align 4, !dbg !1303
  br label %loop.exit147, !dbg !1304

if.exit139:                                       ; preds = %if.exit132
    #dbg_declare(ptr %new_value140, !1305, !DIExpression(), !1306)
  %81 = load i32, ptr %value, align 4, !dbg !1306
  %82 = load i32, ptr %base_used, align 4, !dbg !1306
  %mul141 = mul i32 %81, %82, !dbg !1306
  %83 = load i8, ptr %c90, align 1, !dbg !1306
  %zext142 = zext i8 %83 to i32, !dbg !1306
  %add143 = add i32 %mul141, %zext142, !dbg !1306
  store i32 %add143, ptr %new_value140, align 4, !dbg !1306
  %84 = load i32, ptr %new_value140, align 4, !dbg !1307
  %85 = load i32, ptr %value, align 4, !dbg !1307
  %lt144 = icmp slt i32 %84, %85, !dbg !1307
  br i1 %lt144, label %if.then145, label %if.exit146, !dbg !1307

if.then145:                                       ; preds = %if.exit139
  store i64 ptrtoint (ptr @std.core.string.INTEGER_OVERFLOW to i64), ptr %reterr, align 8, !dbg !1307
  br label %err_retblock, !dbg !1307

if.exit146:                                       ; preds = %if.exit139
  %86 = load i32, ptr %new_value140, align 4, !dbg !1308
  store i32 %86, ptr %value, align 4, !dbg !1308
  br label %loop.exit147, !dbg !1308

loop.exit147:                                     ; preds = %if.exit146, %if.exit138
  br label %loop.cond88, !dbg !1308

loop.exit148:                                     ; preds = %loop.cond88
  %87 = load i32, ptr %value, align 4, !dbg !1309
  store i32 %87, ptr %blockret, align 4, !dbg !1309
  br label %expr_block.exit, !dbg !1309

expr_block.exit:                                  ; preds = %loop.exit148, %if.then58
  %88 = load i32, ptr %blockret, align 4, !dbg !1309
  store i32 %88, ptr %0, align 4, !dbg !1309
  ret i64 0, !dbg !1309

err_retblock:                                     ; preds = %if.then145, %if.then137, %if.then131, %switch.case124, %if.then85, %if.then34, %if.then
  %89 = load i64, ptr %reterr, align 8, !dbg !1309
  ret i64 %89, !dbg !1309

panic:                                            ; preds = %and.rhs4
  store i64 256, ptr %taddr, align 8
  %90 = insertvalue %any undef, ptr %taddr, 0
  %91 = insertvalue %any %90, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %zext, ptr %taddr7, align 8
  %92 = insertvalue %any undef, ptr %taddr7, 0
  %93 = insertvalue %any %92, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg8, align 8
  store %"char[]" { ptr @.file.73, i64 8 }, ptr %indirectarg9, align 8
  store %"char[]" { ptr @.func.91, i64 6 }, ptr %indirectarg10, align 8
  store %any %91, ptr %varargslots, align 16
  %ptradd11 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %93, ptr %ptradd11, align 16
  %94 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %94, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg12, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg8, ptr align 8 %indirectarg9, ptr align 8 %indirectarg10, i32 19, ptr align 8 %indirectarg12) #6, !dbg !1237
  unreachable, !dbg !1237

panic17:                                          ; preds = %if.exit
  store i64 %23, ptr %taddr18, align 8
  %95 = insertvalue %any undef, ptr %taddr18, 0
  %96 = insertvalue %any %95, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %25, ptr %taddr19, align 8
  %97 = insertvalue %any undef, ptr %taddr19, 0
  %98 = insertvalue %any %97, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg20, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg21, align 8
  store %"char[]" { ptr @.func.91, i64 6 }, ptr %indirectarg22, align 8
  store %any %96, ptr %varargslots23, align 16
  %ptradd24 = getelementptr inbounds i8, ptr %varargslots23, i64 16
  store %any %98, ptr %ptradd24, align 16
  %99 = insertvalue %"any[]" undef, ptr %varargslots23, 0
  %"$$temp25" = insertvalue %"any[]" %99, i64 2, 1
  store %"any[]" %"$$temp25", ptr %indirectarg26, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg20, ptr align 8 %indirectarg21, ptr align 8 %indirectarg22, i32 980, ptr align 8 %indirectarg26) #6, !dbg !1244
  unreachable, !dbg !1244

panic38:                                          ; preds = %if.exit35
  store i64 %34, ptr %taddr39, align 8
  %100 = insertvalue %any undef, ptr %taddr39, 0
  %101 = insertvalue %any %100, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %36, ptr %taddr40, align 8
  %102 = insertvalue %any undef, ptr %taddr40, 0
  %103 = insertvalue %any %102, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg41, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg42, align 8
  store %"char[]" { ptr @.func.91, i64 6 }, ptr %indirectarg43, align 8
  store %any %101, ptr %varargslots44, align 16
  %ptradd45 = getelementptr inbounds i8, ptr %varargslots44, i64 16
  store %any %103, ptr %ptradd45, align 16
  %104 = insertvalue %"any[]" undef, ptr %varargslots44, 0
  %"$$temp46" = insertvalue %"any[]" %104, i64 2, 1
  store %"any[]" %"$$temp46", ptr %indirectarg47, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg41, ptr align 8 %indirectarg42, ptr align 8 %indirectarg43, i32 993, ptr align 8 %indirectarg47) #6, !dbg !1257
  unreachable, !dbg !1257

panic62:                                          ; preds = %if.exit59
  store i64 %43, ptr %taddr63, align 8
  %105 = insertvalue %any undef, ptr %taddr63, 0
  %106 = insertvalue %any %105, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %45, ptr %taddr64, align 8
  %107 = insertvalue %any undef, ptr %taddr64, 0
  %108 = insertvalue %any %107, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg65, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg66, align 8
  store %"char[]" { ptr @.func.91, i64 6 }, ptr %indirectarg67, align 8
  store %any %106, ptr %varargslots68, align 16
  %ptradd69 = getelementptr inbounds i8, ptr %varargslots68, i64 16
  store %any %108, ptr %ptradd69, align 16
  %109 = insertvalue %"any[]" undef, ptr %varargslots68, 0
  %"$$temp70" = insertvalue %"any[]" %109, i64 2, 1
  store %"any[]" %"$$temp70", ptr %indirectarg71, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg65, ptr align 8 %indirectarg66, ptr align 8 %indirectarg67, i32 997, ptr align 8 %indirectarg71) #6, !dbg !1261
  unreachable, !dbg !1261

panic94:                                          ; preds = %loop.body89
  store i64 %56, ptr %taddr95, align 8
  %110 = insertvalue %any undef, ptr %taddr95, 0
  %111 = insertvalue %any %110, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %58, ptr %taddr96, align 8
  %112 = insertvalue %any undef, ptr %taddr96, 0
  %113 = insertvalue %any %112, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg97, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg98, align 8
  store %"char[]" { ptr @.func.91, i64 6 }, ptr %indirectarg99, align 8
  store %any %111, ptr %varargslots100, align 16
  %ptradd101 = getelementptr inbounds i8, ptr %varargslots100, i64 16
  store %any %113, ptr %ptradd101, align 16
  %114 = insertvalue %"any[]" undef, ptr %varargslots100, 0
  %"$$temp102" = insertvalue %"any[]" %114, i64 2, 1
  store %"any[]" %"$$temp102", ptr %indirectarg103, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg97, ptr align 8 %indirectarg98, ptr align 8 %indirectarg99, i32 1019, ptr align 8 %indirectarg103) #6, !dbg !1282
  unreachable, !dbg !1282
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.core.String.to_short(ptr %0, ptr align 8 %1, i32 %2) #0 comdat !dbg !1310 {
entry:
  %base = alloca i32, align 4
  %reterr = alloca i64, align 8
  %self = alloca %"char[]", align 8
  %base1 = alloca i32, align 4
  %blockret = alloca i16, align 2
  %indirectarg = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %indirectarg3 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %index = alloca i64, align 8
  %ptr = alloca ptr, align 8
  %c = alloca i8, align 1
  %c6 = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr7 = alloca i64, align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg12 = alloca %"any[]", align 8
  %is_negative = alloca i8, align 1
  %taddr18 = alloca i64, align 8
  %taddr19 = alloca i64, align 8
  %indirectarg20 = alloca %"char[]", align 8
  %indirectarg21 = alloca %"char[]", align 8
  %indirectarg22 = alloca %"char[]", align 8
  %varargslots23 = alloca [2 x %any], align 16
  %indirectarg26 = alloca %"any[]", align 8
  %switch = alloca i8, align 1
  %base_used = alloca i16, align 2
  %taddr40 = alloca i64, align 8
  %taddr41 = alloca i64, align 8
  %indirectarg42 = alloca %"char[]", align 8
  %indirectarg43 = alloca %"char[]", align 8
  %indirectarg44 = alloca %"char[]", align 8
  %varargslots45 = alloca [2 x %any], align 16
  %indirectarg48 = alloca %"any[]", align 8
  %taddr64 = alloca i64, align 8
  %taddr65 = alloca i64, align 8
  %indirectarg66 = alloca %"char[]", align 8
  %indirectarg67 = alloca %"char[]", align 8
  %indirectarg68 = alloca %"char[]", align 8
  %varargslots69 = alloca [2 x %any], align 16
  %indirectarg72 = alloca %"any[]", align 8
  %switch75 = alloca i8, align 1
  %value = alloca i16, align 2
  %c91 = alloca i8, align 1
  %taddr96 = alloca i64, align 8
  %taddr97 = alloca i64, align 8
  %indirectarg98 = alloca %"char[]", align 8
  %indirectarg99 = alloca %"char[]", align 8
  %indirectarg100 = alloca %"char[]", align 8
  %varargslots101 = alloca [2 x %any], align 16
  %indirectarg104 = alloca %"any[]", align 8
  %switch107 = alloca i8, align 1
  %new_value = alloca i16, align 2
  %new_value144 = alloca i16, align 2
    #dbg_declare(ptr %1, !1315, !DIExpression(), !1316)
  store i32 %2, ptr %base, align 4
    #dbg_declare(ptr %base, !1317, !DIExpression(), !1316)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %self, ptr align 8 %1, i32 16, i1 false)
  %3 = load i32, ptr %base, align 4
  store i32 %3, ptr %base1, align 4
  %4 = load i32, ptr %base1, align 4, !dbg !1318
  %gt = icmp sgt i32 %4, 0, !dbg !1318
  br i1 %gt, label %and.rhs, label %and.phi, !dbg !1318

and.rhs:                                          ; preds = %entry
  %5 = load i32, ptr %base1, align 4, !dbg !1318
  %le = icmp sle i32 %5, 16, !dbg !1318
  br label %and.phi, !dbg !1318

and.phi:                                          ; preds = %and.rhs, %entry
  %val = phi i1 [ false, %entry ], [ %le, %and.rhs ], !dbg !1318
  br i1 %val, label %assert_ok, label %assert_fail, !dbg !1318

assert_fail:                                      ; preds = %and.phi
  store %"char[]" { ptr @.panic_msg.88, i64 63 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg2, align 8
  store %"char[]" { ptr @.func.92, i64 8 }, ptr %indirectarg3, align 8
  %6 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %6(ptr align 8 %indirectarg, ptr align 8 %indirectarg2, ptr align 8 %indirectarg3, i32 1048) #6, !dbg !1321
  unreachable, !dbg !1321

assert_ok:                                        ; preds = %and.phi
    #dbg_declare(ptr %len, !1322, !DIExpression(), !1323)
  %ptradd = getelementptr inbounds i8, ptr %self, i64 8, !dbg !1323
  %7 = load i64, ptr %ptradd, align 8, !dbg !1323
  store i64 %7, ptr %len, align 8, !dbg !1323
    #dbg_declare(ptr %index, !1324, !DIExpression(), !1325)
  store i64 0, ptr %index, align 8, !dbg !1325
    #dbg_declare(ptr %ptr, !1326, !DIExpression(), !1327)
  %8 = load ptr, ptr %self, align 8, !dbg !1327
  store ptr %8, ptr %ptr, align 8, !dbg !1327
  br label %loop.cond, !dbg !1328

loop.cond:                                        ; preds = %loop.body, %assert_ok
  %9 = load i64, ptr %index, align 8, !dbg !1329
  %10 = load i64, ptr %len, align 8, !dbg !1329
  %lt = icmp ult i64 %9, %10, !dbg !1329
  br i1 %lt, label %and.rhs4, label %and.phi13, !dbg !1329

and.rhs4:                                         ; preds = %loop.cond
  %11 = load ptr, ptr %ptr, align 8, !dbg !1329
  %12 = load i64, ptr %index, align 8, !dbg !1329
  %ptradd5 = getelementptr inbounds i8, ptr %11, i64 %12, !dbg !1329
  %13 = load i8, ptr %ptradd5, align 1
  store i8 %13, ptr %c, align 1
  %14 = load i8, ptr %c, align 1
  store i8 %14, ptr %c6, align 1
  %15 = load i8, ptr %c6, align 1, !dbg !1331
  %zext = zext i8 %15 to i64, !dbg !1331
  %ge = icmp uge i64 %zext, 256, !dbg !1331
  %16 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !1331
  br i1 %16, label %panic, label %checkok, !dbg !1331

checkok:                                          ; preds = %and.rhs4
  %ptroffset = getelementptr inbounds [2 x i8], ptr @std.core.ascii.ASCII_LOOKUP, i64 %zext, !dbg !1331
  %17 = load i16, ptr %ptroffset, align 2, !dbg !1331
  %lshrl = lshr i16 %17, 10, !dbg !1331
  %18 = and i16 1, %lshrl, !dbg !1331
  %trunc = trunc i16 %18 to i8, !dbg !1331
  %19 = trunc i8 %trunc to i1, !dbg !1331
  br label %and.phi13, !dbg !1331

and.phi13:                                        ; preds = %checkok, %loop.cond
  %val14 = phi i1 [ false, %loop.cond ], [ %19, %checkok ], !dbg !1331
  br i1 %val14, label %loop.body, label %loop.exit, !dbg !1331

loop.body:                                        ; preds = %and.phi13
  %20 = load i64, ptr %index, align 8, !dbg !1329
  %add = add i64 %20, 1, !dbg !1329
  store i64 %add, ptr %index, align 8, !dbg !1329
  br label %loop.cond, !dbg !1329

loop.exit:                                        ; preds = %and.phi13
  %21 = load i64, ptr %len, align 8, !dbg !1335
  %22 = load i64, ptr %index, align 8, !dbg !1335
  %eq = icmp eq i64 %21, %22, !dbg !1335
  br i1 %eq, label %if.then, label %if.exit, !dbg !1335

if.then:                                          ; preds = %loop.exit
  store i64 ptrtoint (ptr @std.core.string.EMPTY_STRING to i64), ptr %reterr, align 8, !dbg !1335
  br label %err_retblock, !dbg !1335

if.exit:                                          ; preds = %loop.exit
    #dbg_declare(ptr %is_negative, !1336, !DIExpression(), !1337)
  store i8 0, ptr %is_negative, align 1, !dbg !1337
  %ptradd15 = getelementptr inbounds i8, ptr %self, i64 8, !dbg !1338
  %23 = load i64, ptr %ptradd15, align 8, !dbg !1338
  %24 = load ptr, ptr %self, align 8, !dbg !1338
  %25 = load i64, ptr %index, align 8, !dbg !1338
  %ge16 = icmp uge i64 %25, %23, !dbg !1338
  %26 = call i1 @llvm.expect.i1(i1 %ge16, i1 false), !dbg !1338
  br i1 %26, label %panic17, label %checkok27, !dbg !1338

checkok27:                                        ; preds = %if.exit
  %ptradd28 = getelementptr inbounds i8, ptr %24, i64 %25, !dbg !1338
  %27 = load i8, ptr %ptradd28, align 1
  store i8 %27, ptr %switch, align 1
  br label %switch.entry

switch.entry:                                     ; preds = %checkok27
  %28 = load i8, ptr %switch, align 1
  switch i8 %28, label %switch.default [
    i8 45, label %switch.case
    i8 43, label %switch.case31
  ]

switch.case:                                      ; preds = %switch.entry
  br label %if.exit29, !dbg !1340

if.exit29:                                        ; preds = %switch.case
  store i8 1, ptr %is_negative, align 1, !dbg !1342
  %29 = load i64, ptr %index, align 8, !dbg !1343
  %add30 = add i64 %29, 1, !dbg !1343
  store i64 %add30, ptr %index, align 8, !dbg !1343
  br label %switch.exit, !dbg !1343

switch.case31:                                    ; preds = %switch.entry
  %30 = load i64, ptr %index, align 8, !dbg !1344
  %add32 = add i64 %30, 1, !dbg !1344
  store i64 %add32, ptr %index, align 8, !dbg !1344
  br label %switch.exit, !dbg !1344

switch.default:                                   ; preds = %switch.entry
  br label %switch.exit, !dbg !1346

switch.exit:                                      ; preds = %switch.default, %switch.case31, %if.exit29
  %31 = load i64, ptr %len, align 8, !dbg !1348
  %32 = load i64, ptr %index, align 8, !dbg !1348
  %eq33 = icmp eq i64 %31, %32, !dbg !1348
  br i1 %eq33, label %if.then34, label %if.exit35, !dbg !1348

if.then34:                                        ; preds = %switch.exit
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_INTEGER to i64), ptr %reterr, align 8, !dbg !1348
  br label %err_retblock, !dbg !1348

if.exit35:                                        ; preds = %switch.exit
    #dbg_declare(ptr %base_used, !1349, !DIExpression(), !1350)
  %33 = load i32, ptr %base1, align 4, !dbg !1350
  %trunc36 = trunc i32 %33 to i16, !dbg !1350
  store i16 %trunc36, ptr %base_used, align 2, !dbg !1350
  %ptradd37 = getelementptr inbounds i8, ptr %self, i64 8, !dbg !1351
  %34 = load i64, ptr %ptradd37, align 8, !dbg !1351
  %35 = load ptr, ptr %self, align 8, !dbg !1351
  %36 = load i64, ptr %index, align 8, !dbg !1351
  %ge38 = icmp uge i64 %36, %34, !dbg !1351
  %37 = call i1 @llvm.expect.i1(i1 %ge38, i1 false), !dbg !1351
  br i1 %37, label %panic39, label %checkok49, !dbg !1351

checkok49:                                        ; preds = %if.exit35
  %ptradd50 = getelementptr inbounds i8, ptr %35, i64 %36, !dbg !1351
  %38 = load i8, ptr %ptradd50, align 1, !dbg !1351
  %eq51 = icmp eq i8 %38, 48, !dbg !1351
  br i1 %eq51, label %and.rhs52, label %and.phi54, !dbg !1351

and.rhs52:                                        ; preds = %checkok49
  %39 = load i32, ptr %base1, align 4, !dbg !1351
  %eq53 = icmp eq i32 %39, 10, !dbg !1351
  br label %and.phi54, !dbg !1351

and.phi54:                                        ; preds = %and.rhs52, %checkok49
  %val55 = phi i1 [ false, %checkok49 ], [ %eq53, %and.rhs52 ], !dbg !1351
  br i1 %val55, label %if.then56, label %if.exit88, !dbg !1351

if.then56:                                        ; preds = %and.phi54
  %40 = load i64, ptr %index, align 8, !dbg !1352
  %add57 = add i64 %40, 1, !dbg !1352
  store i64 %add57, ptr %index, align 8, !dbg !1352
  %41 = load i64, ptr %index, align 8, !dbg !1354
  %42 = load i64, ptr %len, align 8, !dbg !1354
  %eq58 = icmp eq i64 %41, %42, !dbg !1354
  br i1 %eq58, label %if.then59, label %if.exit60, !dbg !1354

if.then59:                                        ; preds = %if.then56
  store i16 0, ptr %blockret, align 2, !dbg !1354
  br label %expr_block.exit, !dbg !1354

if.exit60:                                        ; preds = %if.then56
  %ptradd61 = getelementptr inbounds i8, ptr %self, i64 8, !dbg !1355
  %43 = load i64, ptr %ptradd61, align 8, !dbg !1355
  %44 = load ptr, ptr %self, align 8, !dbg !1355
  %45 = load i64, ptr %index, align 8, !dbg !1355
  %ge62 = icmp uge i64 %45, %43, !dbg !1355
  %46 = call i1 @llvm.expect.i1(i1 %ge62, i1 false), !dbg !1355
  br i1 %46, label %panic63, label %checkok73, !dbg !1355

checkok73:                                        ; preds = %if.exit60
  %ptradd74 = getelementptr inbounds i8, ptr %44, i64 %45, !dbg !1355
  %47 = load i8, ptr %ptradd74, align 1
  store i8 %47, ptr %switch75, align 1
  br label %switch.entry76

switch.entry76:                                   ; preds = %checkok73
  %48 = load i8, ptr %switch75, align 1
  switch i8 %48, label %switch.default83 [
    i8 120, label %switch.case77
    i8 88, label %switch.case77
    i8 98, label %switch.case79
    i8 66, label %switch.case79
    i8 111, label %switch.case81
    i8 79, label %switch.case81
  ]

switch.case77:                                    ; preds = %switch.entry76, %switch.entry76
  store i16 16, ptr %base_used, align 2, !dbg !1357
  %49 = load i64, ptr %index, align 8, !dbg !1359
  %add78 = add i64 %49, 1, !dbg !1359
  store i64 %add78, ptr %index, align 8, !dbg !1359
  br label %switch.exit84, !dbg !1359

switch.case79:                                    ; preds = %switch.entry76, %switch.entry76
  store i16 2, ptr %base_used, align 2, !dbg !1360
  %50 = load i64, ptr %index, align 8, !dbg !1362
  %add80 = add i64 %50, 1, !dbg !1362
  store i64 %add80, ptr %index, align 8, !dbg !1362
  br label %switch.exit84, !dbg !1362

switch.case81:                                    ; preds = %switch.entry76, %switch.entry76
  store i16 8, ptr %base_used, align 2, !dbg !1363
  %51 = load i64, ptr %index, align 8, !dbg !1365
  %add82 = add i64 %51, 1, !dbg !1365
  store i64 %add82, ptr %index, align 8, !dbg !1365
  br label %switch.exit84, !dbg !1365

switch.default83:                                 ; preds = %switch.entry76
  br label %switch.exit84, !dbg !1366

switch.exit84:                                    ; preds = %switch.default83, %switch.case81, %switch.case79, %switch.case77
  %52 = load i64, ptr %len, align 8, !dbg !1368
  %53 = load i64, ptr %index, align 8, !dbg !1368
  %eq85 = icmp eq i64 %52, %53, !dbg !1368
  br i1 %eq85, label %if.then86, label %if.exit87, !dbg !1368

if.then86:                                        ; preds = %switch.exit84
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_INTEGER to i64), ptr %reterr, align 8, !dbg !1368
  br label %err_retblock, !dbg !1368

if.exit87:                                        ; preds = %switch.exit84
  br label %if.exit88, !dbg !1368

if.exit88:                                        ; preds = %if.exit87, %and.phi54
    #dbg_declare(ptr %value, !1369, !DIExpression(), !1370)
  store i16 0, ptr %value, align 2, !dbg !1370
  br label %loop.cond89, !dbg !1371

loop.cond89:                                      ; preds = %loop.exit154, %if.exit88
  %54 = load i64, ptr %index, align 8, !dbg !1372
  %55 = load i64, ptr %len, align 8, !dbg !1372
  %neq = icmp ne i64 %54, %55, !dbg !1372
  br i1 %neq, label %loop.body90, label %loop.exit155, !dbg !1372

loop.body90:                                      ; preds = %loop.cond89
    #dbg_declare(ptr %c91, !1374, !DIExpression(), !1376)
  %ptradd92 = getelementptr inbounds i8, ptr %self, i64 8, !dbg !1376
  %56 = load i64, ptr %ptradd92, align 8, !dbg !1376
  %57 = load ptr, ptr %self, align 8, !dbg !1376
  %58 = load i64, ptr %index, align 8, !dbg !1376
  %add93 = add i64 %58, 1, !dbg !1376
  store i64 %add93, ptr %index, align 8, !dbg !1376
  %ge94 = icmp uge i64 %58, %56, !dbg !1376
  %59 = call i1 @llvm.expect.i1(i1 %ge94, i1 false), !dbg !1376
  br i1 %59, label %panic95, label %checkok105, !dbg !1376

checkok105:                                       ; preds = %loop.body90
  %ptradd106 = getelementptr inbounds i8, ptr %57, i64 %58, !dbg !1376
  %60 = load i8, ptr %ptradd106, align 1, !dbg !1376
  store i8 %60, ptr %c91, align 1, !dbg !1376
  store i8 1, ptr %switch107, align 1
  br label %switch.entry108

switch.entry108:                                  ; preds = %checkok105
  %61 = load i8, ptr %switch107, align 1
  %62 = trunc i8 %61 to i1
  %63 = load i16, ptr %base_used, align 2, !dbg !1377
  %sext = sext i16 %63 to i32, !dbg !1377
  %lt109 = icmp slt i32 %sext, 10, !dbg !1377
  br i1 %lt109, label %or.phi, label %or.rhs, !dbg !1377

or.rhs:                                           ; preds = %switch.entry108
  %64 = load i8, ptr %c91, align 1, !dbg !1377
  %lt110 = icmp ult i8 %64, 65, !dbg !1377
  br label %or.phi, !dbg !1377

or.phi:                                           ; preds = %or.rhs, %switch.entry108
  %val111 = phi i1 [ true, %switch.entry108 ], [ %lt110, %or.rhs ], !dbg !1377
  %eq112 = icmp eq i1 %val111, %62, !dbg !1377
  br i1 %eq112, label %switch.case113, label %next_if, !dbg !1377

switch.case113:                                   ; preds = %or.phi
  %65 = load i8, ptr %c91, align 1, !dbg !1379
  %sub = sub i8 %65, 48, !dbg !1379
  store i8 %sub, ptr %c91, align 1, !dbg !1379
  br label %switch.exit129, !dbg !1379

next_if:                                          ; preds = %or.phi
  %66 = load i8, ptr %c91, align 1, !dbg !1381
  %le114 = icmp ule i8 %66, 70, !dbg !1381
  %eq115 = icmp eq i1 %le114, %62, !dbg !1381
  br i1 %eq115, label %switch.case116, label %next_if118, !dbg !1381

switch.case116:                                   ; preds = %next_if
  %67 = load i8, ptr %c91, align 1, !dbg !1382
  %sub117 = sub i8 %67, 55, !dbg !1382
  store i8 %sub117, ptr %c91, align 1, !dbg !1382
  br label %switch.exit129, !dbg !1382

next_if118:                                       ; preds = %next_if
  %68 = load i8, ptr %c91, align 1, !dbg !1384
  %lt119 = icmp ult i8 %68, 97, !dbg !1384
  br i1 %lt119, label %or.phi122, label %or.rhs120, !dbg !1384

or.rhs120:                                        ; preds = %next_if118
  %69 = load i8, ptr %c91, align 1, !dbg !1384
  %gt121 = icmp ugt i8 %69, 102, !dbg !1384
  br label %or.phi122, !dbg !1384

or.phi122:                                        ; preds = %or.rhs120, %next_if118
  %val123 = phi i1 [ true, %next_if118 ], [ %gt121, %or.rhs120 ], !dbg !1384
  %eq124 = icmp eq i1 %val123, %62, !dbg !1384
  br i1 %eq124, label %switch.case125, label %next_if126, !dbg !1384

switch.case125:                                   ; preds = %or.phi122
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_INTEGER to i64), ptr %reterr, align 8, !dbg !1385
  br label %err_retblock, !dbg !1385

next_if126:                                       ; preds = %or.phi122
  br label %switch.default127, !dbg !1385

switch.default127:                                ; preds = %next_if126
  %70 = load i8, ptr %c91, align 1, !dbg !1387
  %sub128 = sub i8 %70, 87, !dbg !1387
  store i8 %sub128, ptr %c91, align 1, !dbg !1387
  br label %switch.exit129, !dbg !1387

switch.exit129:                                   ; preds = %switch.default127, %switch.case116, %switch.case113
  %71 = load i8, ptr %c91, align 1, !dbg !1389
  %zext130 = zext i8 %71 to i16, !dbg !1389
  %72 = load i16, ptr %base_used, align 2, !dbg !1389
  %le131 = icmp sle i16 %72, %zext130, !dbg !1389
  %check = icmp slt i16 %zext130, 0, !dbg !1389
  %siui-le = or i1 %check, %le131, !dbg !1389
  br i1 %siui-le, label %if.then132, label %if.exit133, !dbg !1389

if.then132:                                       ; preds = %switch.exit129
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_INTEGER to i64), ptr %reterr, align 8, !dbg !1389
  br label %err_retblock, !dbg !1389

if.exit133:                                       ; preds = %switch.exit129
  %73 = load i8, ptr %is_negative, align 1, !dbg !1390
  %74 = trunc i8 %73 to i1, !dbg !1390
  br i1 %74, label %if.then134, label %if.exit143, !dbg !1390

if.then134:                                       ; preds = %if.exit133
    #dbg_declare(ptr %new_value, !1393, !DIExpression(), !1395)
  %75 = load i16, ptr %value, align 2, !dbg !1395
  %sext135 = sext i16 %75 to i32, !dbg !1395
  %76 = load i16, ptr %base_used, align 2, !dbg !1395
  %sext136 = sext i16 %76 to i32, !dbg !1395
  %mul = mul i32 %sext135, %sext136, !dbg !1395
  %77 = load i8, ptr %c91, align 1, !dbg !1395
  %zext137 = zext i8 %77 to i32, !dbg !1395
  %sub138 = sub i32 %mul, %zext137, !dbg !1395
  %trunc139 = trunc i32 %sub138 to i16, !dbg !1395
  store i16 %trunc139, ptr %new_value, align 2, !dbg !1395
  %78 = load i16, ptr %new_value, align 2, !dbg !1396
  %79 = load i16, ptr %value, align 2, !dbg !1396
  %gt140 = icmp sgt i16 %78, %79, !dbg !1396
  br i1 %gt140, label %if.then141, label %if.exit142, !dbg !1396

if.then141:                                       ; preds = %if.then134
  store i64 ptrtoint (ptr @std.core.string.INTEGER_OVERFLOW to i64), ptr %reterr, align 8, !dbg !1396
  br label %err_retblock, !dbg !1396

if.exit142:                                       ; preds = %if.then134
  %80 = load i16, ptr %new_value, align 2, !dbg !1397
  store i16 %80, ptr %value, align 2, !dbg !1397
  br label %loop.exit154, !dbg !1398

if.exit143:                                       ; preds = %if.exit133
    #dbg_declare(ptr %new_value144, !1399, !DIExpression(), !1400)
  %81 = load i16, ptr %value, align 2, !dbg !1400
  %sext145 = sext i16 %81 to i32, !dbg !1400
  %82 = load i16, ptr %base_used, align 2, !dbg !1400
  %sext146 = sext i16 %82 to i32, !dbg !1400
  %mul147 = mul i32 %sext145, %sext146, !dbg !1400
  %83 = load i8, ptr %c91, align 1, !dbg !1400
  %zext148 = zext i8 %83 to i32, !dbg !1400
  %add149 = add i32 %mul147, %zext148, !dbg !1400
  %trunc150 = trunc i32 %add149 to i16, !dbg !1400
  store i16 %trunc150, ptr %new_value144, align 2, !dbg !1400
  %84 = load i16, ptr %new_value144, align 2, !dbg !1401
  %85 = load i16, ptr %value, align 2, !dbg !1401
  %lt151 = icmp slt i16 %84, %85, !dbg !1401
  br i1 %lt151, label %if.then152, label %if.exit153, !dbg !1401

if.then152:                                       ; preds = %if.exit143
  store i64 ptrtoint (ptr @std.core.string.INTEGER_OVERFLOW to i64), ptr %reterr, align 8, !dbg !1401
  br label %err_retblock, !dbg !1401

if.exit153:                                       ; preds = %if.exit143
  %86 = load i16, ptr %new_value144, align 2, !dbg !1402
  store i16 %86, ptr %value, align 2, !dbg !1402
  br label %loop.exit154, !dbg !1402

loop.exit154:                                     ; preds = %if.exit153, %if.exit142
  br label %loop.cond89, !dbg !1402

loop.exit155:                                     ; preds = %loop.cond89
  %87 = load i16, ptr %value, align 2, !dbg !1403
  store i16 %87, ptr %blockret, align 2, !dbg !1403
  br label %expr_block.exit, !dbg !1403

expr_block.exit:                                  ; preds = %loop.exit155, %if.then59
  %88 = load i16, ptr %blockret, align 2, !dbg !1403
  store i16 %88, ptr %0, align 2, !dbg !1403
  ret i64 0, !dbg !1403

err_retblock:                                     ; preds = %if.then152, %if.then141, %if.then132, %switch.case125, %if.then86, %if.then34, %if.then
  %89 = load i64, ptr %reterr, align 8, !dbg !1403
  ret i64 %89, !dbg !1403

panic:                                            ; preds = %and.rhs4
  store i64 256, ptr %taddr, align 8
  %90 = insertvalue %any undef, ptr %taddr, 0
  %91 = insertvalue %any %90, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %zext, ptr %taddr7, align 8
  %92 = insertvalue %any undef, ptr %taddr7, 0
  %93 = insertvalue %any %92, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg8, align 8
  store %"char[]" { ptr @.file.73, i64 8 }, ptr %indirectarg9, align 8
  store %"char[]" { ptr @.func.92, i64 8 }, ptr %indirectarg10, align 8
  store %any %91, ptr %varargslots, align 16
  %ptradd11 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %93, ptr %ptradd11, align 16
  %94 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %94, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg12, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg8, ptr align 8 %indirectarg9, ptr align 8 %indirectarg10, i32 19, ptr align 8 %indirectarg12) #6, !dbg !1331
  unreachable, !dbg !1331

panic17:                                          ; preds = %if.exit
  store i64 %23, ptr %taddr18, align 8
  %95 = insertvalue %any undef, ptr %taddr18, 0
  %96 = insertvalue %any %95, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %25, ptr %taddr19, align 8
  %97 = insertvalue %any undef, ptr %taddr19, 0
  %98 = insertvalue %any %97, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg20, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg21, align 8
  store %"char[]" { ptr @.func.92, i64 8 }, ptr %indirectarg22, align 8
  store %any %96, ptr %varargslots23, align 16
  %ptradd24 = getelementptr inbounds i8, ptr %varargslots23, i64 16
  store %any %98, ptr %ptradd24, align 16
  %99 = insertvalue %"any[]" undef, ptr %varargslots23, 0
  %"$$temp25" = insertvalue %"any[]" %99, i64 2, 1
  store %"any[]" %"$$temp25", ptr %indirectarg26, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg20, ptr align 8 %indirectarg21, ptr align 8 %indirectarg22, i32 980, ptr align 8 %indirectarg26) #6, !dbg !1338
  unreachable, !dbg !1338

panic39:                                          ; preds = %if.exit35
  store i64 %34, ptr %taddr40, align 8
  %100 = insertvalue %any undef, ptr %taddr40, 0
  %101 = insertvalue %any %100, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %36, ptr %taddr41, align 8
  %102 = insertvalue %any undef, ptr %taddr41, 0
  %103 = insertvalue %any %102, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg42, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg43, align 8
  store %"char[]" { ptr @.func.92, i64 8 }, ptr %indirectarg44, align 8
  store %any %101, ptr %varargslots45, align 16
  %ptradd46 = getelementptr inbounds i8, ptr %varargslots45, i64 16
  store %any %103, ptr %ptradd46, align 16
  %104 = insertvalue %"any[]" undef, ptr %varargslots45, 0
  %"$$temp47" = insertvalue %"any[]" %104, i64 2, 1
  store %"any[]" %"$$temp47", ptr %indirectarg48, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg42, ptr align 8 %indirectarg43, ptr align 8 %indirectarg44, i32 993, ptr align 8 %indirectarg48) #6, !dbg !1351
  unreachable, !dbg !1351

panic63:                                          ; preds = %if.exit60
  store i64 %43, ptr %taddr64, align 8
  %105 = insertvalue %any undef, ptr %taddr64, 0
  %106 = insertvalue %any %105, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %45, ptr %taddr65, align 8
  %107 = insertvalue %any undef, ptr %taddr65, 0
  %108 = insertvalue %any %107, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg66, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg67, align 8
  store %"char[]" { ptr @.func.92, i64 8 }, ptr %indirectarg68, align 8
  store %any %106, ptr %varargslots69, align 16
  %ptradd70 = getelementptr inbounds i8, ptr %varargslots69, i64 16
  store %any %108, ptr %ptradd70, align 16
  %109 = insertvalue %"any[]" undef, ptr %varargslots69, 0
  %"$$temp71" = insertvalue %"any[]" %109, i64 2, 1
  store %"any[]" %"$$temp71", ptr %indirectarg72, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg66, ptr align 8 %indirectarg67, ptr align 8 %indirectarg68, i32 997, ptr align 8 %indirectarg72) #6, !dbg !1355
  unreachable, !dbg !1355

panic95:                                          ; preds = %loop.body90
  store i64 %56, ptr %taddr96, align 8
  %110 = insertvalue %any undef, ptr %taddr96, 0
  %111 = insertvalue %any %110, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %58, ptr %taddr97, align 8
  %112 = insertvalue %any undef, ptr %taddr97, 0
  %113 = insertvalue %any %112, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg98, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg99, align 8
  store %"char[]" { ptr @.func.92, i64 8 }, ptr %indirectarg100, align 8
  store %any %111, ptr %varargslots101, align 16
  %ptradd102 = getelementptr inbounds i8, ptr %varargslots101, i64 16
  store %any %113, ptr %ptradd102, align 16
  %114 = insertvalue %"any[]" undef, ptr %varargslots101, 0
  %"$$temp103" = insertvalue %"any[]" %114, i64 2, 1
  store %"any[]" %"$$temp103", ptr %indirectarg104, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg98, ptr align 8 %indirectarg99, ptr align 8 %indirectarg100, i32 1019, ptr align 8 %indirectarg104) #6, !dbg !1376
  unreachable, !dbg !1376
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.core.String.to_ichar(ptr %0, ptr align 8 %1, i32 %2) #0 comdat !dbg !1404 {
entry:
  %base = alloca i32, align 4
  %reterr = alloca i64, align 8
  %self = alloca %"char[]", align 8
  %base1 = alloca i32, align 4
  %blockret = alloca i8, align 1
  %indirectarg = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %indirectarg3 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %index = alloca i64, align 8
  %ptr = alloca ptr, align 8
  %c = alloca i8, align 1
  %c6 = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr7 = alloca i64, align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg12 = alloca %"any[]", align 8
  %is_negative = alloca i8, align 1
  %taddr18 = alloca i64, align 8
  %taddr19 = alloca i64, align 8
  %indirectarg20 = alloca %"char[]", align 8
  %indirectarg21 = alloca %"char[]", align 8
  %indirectarg22 = alloca %"char[]", align 8
  %varargslots23 = alloca [2 x %any], align 16
  %indirectarg26 = alloca %"any[]", align 8
  %switch = alloca i8, align 1
  %base_used = alloca i8, align 1
  %taddr40 = alloca i64, align 8
  %taddr41 = alloca i64, align 8
  %indirectarg42 = alloca %"char[]", align 8
  %indirectarg43 = alloca %"char[]", align 8
  %indirectarg44 = alloca %"char[]", align 8
  %varargslots45 = alloca [2 x %any], align 16
  %indirectarg48 = alloca %"any[]", align 8
  %taddr64 = alloca i64, align 8
  %taddr65 = alloca i64, align 8
  %indirectarg66 = alloca %"char[]", align 8
  %indirectarg67 = alloca %"char[]", align 8
  %indirectarg68 = alloca %"char[]", align 8
  %varargslots69 = alloca [2 x %any], align 16
  %indirectarg72 = alloca %"any[]", align 8
  %switch75 = alloca i8, align 1
  %value = alloca i8, align 1
  %c91 = alloca i8, align 1
  %taddr96 = alloca i64, align 8
  %taddr97 = alloca i64, align 8
  %indirectarg98 = alloca %"char[]", align 8
  %indirectarg99 = alloca %"char[]", align 8
  %indirectarg100 = alloca %"char[]", align 8
  %varargslots101 = alloca [2 x %any], align 16
  %indirectarg104 = alloca %"any[]", align 8
  %switch107 = alloca i8, align 1
  %new_value = alloca i8, align 1
  %new_value143 = alloca i8, align 1
    #dbg_declare(ptr %1, !1409, !DIExpression(), !1410)
  store i32 %2, ptr %base, align 4
    #dbg_declare(ptr %base, !1411, !DIExpression(), !1410)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %self, ptr align 8 %1, i32 16, i1 false)
  %3 = load i32, ptr %base, align 4
  store i32 %3, ptr %base1, align 4
  %4 = load i32, ptr %base1, align 4, !dbg !1412
  %gt = icmp sgt i32 %4, 0, !dbg !1412
  br i1 %gt, label %and.rhs, label %and.phi, !dbg !1412

and.rhs:                                          ; preds = %entry
  %5 = load i32, ptr %base1, align 4, !dbg !1412
  %le = icmp sle i32 %5, 16, !dbg !1412
  br label %and.phi, !dbg !1412

and.phi:                                          ; preds = %and.rhs, %entry
  %val = phi i1 [ false, %entry ], [ %le, %and.rhs ], !dbg !1412
  br i1 %val, label %assert_ok, label %assert_fail, !dbg !1412

assert_fail:                                      ; preds = %and.phi
  store %"char[]" { ptr @.panic_msg.88, i64 63 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg2, align 8
  store %"char[]" { ptr @.func.93, i64 8 }, ptr %indirectarg3, align 8
  %6 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %6(ptr align 8 %indirectarg, ptr align 8 %indirectarg2, ptr align 8 %indirectarg3, i32 1049) #6, !dbg !1415
  unreachable, !dbg !1415

assert_ok:                                        ; preds = %and.phi
    #dbg_declare(ptr %len, !1416, !DIExpression(), !1417)
  %ptradd = getelementptr inbounds i8, ptr %self, i64 8, !dbg !1417
  %7 = load i64, ptr %ptradd, align 8, !dbg !1417
  store i64 %7, ptr %len, align 8, !dbg !1417
    #dbg_declare(ptr %index, !1418, !DIExpression(), !1419)
  store i64 0, ptr %index, align 8, !dbg !1419
    #dbg_declare(ptr %ptr, !1420, !DIExpression(), !1421)
  %8 = load ptr, ptr %self, align 8, !dbg !1421
  store ptr %8, ptr %ptr, align 8, !dbg !1421
  br label %loop.cond, !dbg !1422

loop.cond:                                        ; preds = %loop.body, %assert_ok
  %9 = load i64, ptr %index, align 8, !dbg !1423
  %10 = load i64, ptr %len, align 8, !dbg !1423
  %lt = icmp ult i64 %9, %10, !dbg !1423
  br i1 %lt, label %and.rhs4, label %and.phi13, !dbg !1423

and.rhs4:                                         ; preds = %loop.cond
  %11 = load ptr, ptr %ptr, align 8, !dbg !1423
  %12 = load i64, ptr %index, align 8, !dbg !1423
  %ptradd5 = getelementptr inbounds i8, ptr %11, i64 %12, !dbg !1423
  %13 = load i8, ptr %ptradd5, align 1
  store i8 %13, ptr %c, align 1
  %14 = load i8, ptr %c, align 1
  store i8 %14, ptr %c6, align 1
  %15 = load i8, ptr %c6, align 1, !dbg !1425
  %zext = zext i8 %15 to i64, !dbg !1425
  %ge = icmp uge i64 %zext, 256, !dbg !1425
  %16 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !1425
  br i1 %16, label %panic, label %checkok, !dbg !1425

checkok:                                          ; preds = %and.rhs4
  %ptroffset = getelementptr inbounds [2 x i8], ptr @std.core.ascii.ASCII_LOOKUP, i64 %zext, !dbg !1425
  %17 = load i16, ptr %ptroffset, align 2, !dbg !1425
  %lshrl = lshr i16 %17, 10, !dbg !1425
  %18 = and i16 1, %lshrl, !dbg !1425
  %trunc = trunc i16 %18 to i8, !dbg !1425
  %19 = trunc i8 %trunc to i1, !dbg !1425
  br label %and.phi13, !dbg !1425

and.phi13:                                        ; preds = %checkok, %loop.cond
  %val14 = phi i1 [ false, %loop.cond ], [ %19, %checkok ], !dbg !1425
  br i1 %val14, label %loop.body, label %loop.exit, !dbg !1425

loop.body:                                        ; preds = %and.phi13
  %20 = load i64, ptr %index, align 8, !dbg !1423
  %add = add i64 %20, 1, !dbg !1423
  store i64 %add, ptr %index, align 8, !dbg !1423
  br label %loop.cond, !dbg !1423

loop.exit:                                        ; preds = %and.phi13
  %21 = load i64, ptr %len, align 8, !dbg !1429
  %22 = load i64, ptr %index, align 8, !dbg !1429
  %eq = icmp eq i64 %21, %22, !dbg !1429
  br i1 %eq, label %if.then, label %if.exit, !dbg !1429

if.then:                                          ; preds = %loop.exit
  store i64 ptrtoint (ptr @std.core.string.EMPTY_STRING to i64), ptr %reterr, align 8, !dbg !1429
  br label %err_retblock, !dbg !1429

if.exit:                                          ; preds = %loop.exit
    #dbg_declare(ptr %is_negative, !1430, !DIExpression(), !1431)
  store i8 0, ptr %is_negative, align 1, !dbg !1431
  %ptradd15 = getelementptr inbounds i8, ptr %self, i64 8, !dbg !1432
  %23 = load i64, ptr %ptradd15, align 8, !dbg !1432
  %24 = load ptr, ptr %self, align 8, !dbg !1432
  %25 = load i64, ptr %index, align 8, !dbg !1432
  %ge16 = icmp uge i64 %25, %23, !dbg !1432
  %26 = call i1 @llvm.expect.i1(i1 %ge16, i1 false), !dbg !1432
  br i1 %26, label %panic17, label %checkok27, !dbg !1432

checkok27:                                        ; preds = %if.exit
  %ptradd28 = getelementptr inbounds i8, ptr %24, i64 %25, !dbg !1432
  %27 = load i8, ptr %ptradd28, align 1
  store i8 %27, ptr %switch, align 1
  br label %switch.entry

switch.entry:                                     ; preds = %checkok27
  %28 = load i8, ptr %switch, align 1
  switch i8 %28, label %switch.default [
    i8 45, label %switch.case
    i8 43, label %switch.case31
  ]

switch.case:                                      ; preds = %switch.entry
  br label %if.exit29, !dbg !1434

if.exit29:                                        ; preds = %switch.case
  store i8 1, ptr %is_negative, align 1, !dbg !1436
  %29 = load i64, ptr %index, align 8, !dbg !1437
  %add30 = add i64 %29, 1, !dbg !1437
  store i64 %add30, ptr %index, align 8, !dbg !1437
  br label %switch.exit, !dbg !1437

switch.case31:                                    ; preds = %switch.entry
  %30 = load i64, ptr %index, align 8, !dbg !1438
  %add32 = add i64 %30, 1, !dbg !1438
  store i64 %add32, ptr %index, align 8, !dbg !1438
  br label %switch.exit, !dbg !1438

switch.default:                                   ; preds = %switch.entry
  br label %switch.exit, !dbg !1440

switch.exit:                                      ; preds = %switch.default, %switch.case31, %if.exit29
  %31 = load i64, ptr %len, align 8, !dbg !1442
  %32 = load i64, ptr %index, align 8, !dbg !1442
  %eq33 = icmp eq i64 %31, %32, !dbg !1442
  br i1 %eq33, label %if.then34, label %if.exit35, !dbg !1442

if.then34:                                        ; preds = %switch.exit
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_INTEGER to i64), ptr %reterr, align 8, !dbg !1442
  br label %err_retblock, !dbg !1442

if.exit35:                                        ; preds = %switch.exit
    #dbg_declare(ptr %base_used, !1443, !DIExpression(), !1444)
  %33 = load i32, ptr %base1, align 4, !dbg !1444
  %trunc36 = trunc i32 %33 to i8, !dbg !1444
  store i8 %trunc36, ptr %base_used, align 1, !dbg !1444
  %ptradd37 = getelementptr inbounds i8, ptr %self, i64 8, !dbg !1445
  %34 = load i64, ptr %ptradd37, align 8, !dbg !1445
  %35 = load ptr, ptr %self, align 8, !dbg !1445
  %36 = load i64, ptr %index, align 8, !dbg !1445
  %ge38 = icmp uge i64 %36, %34, !dbg !1445
  %37 = call i1 @llvm.expect.i1(i1 %ge38, i1 false), !dbg !1445
  br i1 %37, label %panic39, label %checkok49, !dbg !1445

checkok49:                                        ; preds = %if.exit35
  %ptradd50 = getelementptr inbounds i8, ptr %35, i64 %36, !dbg !1445
  %38 = load i8, ptr %ptradd50, align 1, !dbg !1445
  %eq51 = icmp eq i8 %38, 48, !dbg !1445
  br i1 %eq51, label %and.rhs52, label %and.phi54, !dbg !1445

and.rhs52:                                        ; preds = %checkok49
  %39 = load i32, ptr %base1, align 4, !dbg !1445
  %eq53 = icmp eq i32 %39, 10, !dbg !1445
  br label %and.phi54, !dbg !1445

and.phi54:                                        ; preds = %and.rhs52, %checkok49
  %val55 = phi i1 [ false, %checkok49 ], [ %eq53, %and.rhs52 ], !dbg !1445
  br i1 %val55, label %if.then56, label %if.exit88, !dbg !1445

if.then56:                                        ; preds = %and.phi54
  %40 = load i64, ptr %index, align 8, !dbg !1446
  %add57 = add i64 %40, 1, !dbg !1446
  store i64 %add57, ptr %index, align 8, !dbg !1446
  %41 = load i64, ptr %index, align 8, !dbg !1448
  %42 = load i64, ptr %len, align 8, !dbg !1448
  %eq58 = icmp eq i64 %41, %42, !dbg !1448
  br i1 %eq58, label %if.then59, label %if.exit60, !dbg !1448

if.then59:                                        ; preds = %if.then56
  store i8 0, ptr %blockret, align 1, !dbg !1448
  br label %expr_block.exit, !dbg !1448

if.exit60:                                        ; preds = %if.then56
  %ptradd61 = getelementptr inbounds i8, ptr %self, i64 8, !dbg !1449
  %43 = load i64, ptr %ptradd61, align 8, !dbg !1449
  %44 = load ptr, ptr %self, align 8, !dbg !1449
  %45 = load i64, ptr %index, align 8, !dbg !1449
  %ge62 = icmp uge i64 %45, %43, !dbg !1449
  %46 = call i1 @llvm.expect.i1(i1 %ge62, i1 false), !dbg !1449
  br i1 %46, label %panic63, label %checkok73, !dbg !1449

checkok73:                                        ; preds = %if.exit60
  %ptradd74 = getelementptr inbounds i8, ptr %44, i64 %45, !dbg !1449
  %47 = load i8, ptr %ptradd74, align 1
  store i8 %47, ptr %switch75, align 1
  br label %switch.entry76

switch.entry76:                                   ; preds = %checkok73
  %48 = load i8, ptr %switch75, align 1
  switch i8 %48, label %switch.default83 [
    i8 120, label %switch.case77
    i8 88, label %switch.case77
    i8 98, label %switch.case79
    i8 66, label %switch.case79
    i8 111, label %switch.case81
    i8 79, label %switch.case81
  ]

switch.case77:                                    ; preds = %switch.entry76, %switch.entry76
  store i8 16, ptr %base_used, align 1, !dbg !1451
  %49 = load i64, ptr %index, align 8, !dbg !1453
  %add78 = add i64 %49, 1, !dbg !1453
  store i64 %add78, ptr %index, align 8, !dbg !1453
  br label %switch.exit84, !dbg !1453

switch.case79:                                    ; preds = %switch.entry76, %switch.entry76
  store i8 2, ptr %base_used, align 1, !dbg !1454
  %50 = load i64, ptr %index, align 8, !dbg !1456
  %add80 = add i64 %50, 1, !dbg !1456
  store i64 %add80, ptr %index, align 8, !dbg !1456
  br label %switch.exit84, !dbg !1456

switch.case81:                                    ; preds = %switch.entry76, %switch.entry76
  store i8 8, ptr %base_used, align 1, !dbg !1457
  %51 = load i64, ptr %index, align 8, !dbg !1459
  %add82 = add i64 %51, 1, !dbg !1459
  store i64 %add82, ptr %index, align 8, !dbg !1459
  br label %switch.exit84, !dbg !1459

switch.default83:                                 ; preds = %switch.entry76
  br label %switch.exit84, !dbg !1460

switch.exit84:                                    ; preds = %switch.default83, %switch.case81, %switch.case79, %switch.case77
  %52 = load i64, ptr %len, align 8, !dbg !1462
  %53 = load i64, ptr %index, align 8, !dbg !1462
  %eq85 = icmp eq i64 %52, %53, !dbg !1462
  br i1 %eq85, label %if.then86, label %if.exit87, !dbg !1462

if.then86:                                        ; preds = %switch.exit84
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_INTEGER to i64), ptr %reterr, align 8, !dbg !1462
  br label %err_retblock, !dbg !1462

if.exit87:                                        ; preds = %switch.exit84
  br label %if.exit88, !dbg !1462

if.exit88:                                        ; preds = %if.exit87, %and.phi54
    #dbg_declare(ptr %value, !1463, !DIExpression(), !1464)
  store i8 0, ptr %value, align 1, !dbg !1464
  br label %loop.cond89, !dbg !1465

loop.cond89:                                      ; preds = %loop.exit153, %if.exit88
  %54 = load i64, ptr %index, align 8, !dbg !1466
  %55 = load i64, ptr %len, align 8, !dbg !1466
  %neq = icmp ne i64 %54, %55, !dbg !1466
  br i1 %neq, label %loop.body90, label %loop.exit154, !dbg !1466

loop.body90:                                      ; preds = %loop.cond89
    #dbg_declare(ptr %c91, !1468, !DIExpression(), !1470)
  %ptradd92 = getelementptr inbounds i8, ptr %self, i64 8, !dbg !1470
  %56 = load i64, ptr %ptradd92, align 8, !dbg !1470
  %57 = load ptr, ptr %self, align 8, !dbg !1470
  %58 = load i64, ptr %index, align 8, !dbg !1470
  %add93 = add i64 %58, 1, !dbg !1470
  store i64 %add93, ptr %index, align 8, !dbg !1470
  %ge94 = icmp uge i64 %58, %56, !dbg !1470
  %59 = call i1 @llvm.expect.i1(i1 %ge94, i1 false), !dbg !1470
  br i1 %59, label %panic95, label %checkok105, !dbg !1470

checkok105:                                       ; preds = %loop.body90
  %ptradd106 = getelementptr inbounds i8, ptr %57, i64 %58, !dbg !1470
  %60 = load i8, ptr %ptradd106, align 1, !dbg !1470
  store i8 %60, ptr %c91, align 1, !dbg !1470
  store i8 1, ptr %switch107, align 1
  br label %switch.entry108

switch.entry108:                                  ; preds = %checkok105
  %61 = load i8, ptr %switch107, align 1
  %62 = trunc i8 %61 to i1
  %63 = load i8, ptr %base_used, align 1, !dbg !1471
  %sext = sext i8 %63 to i32, !dbg !1471
  %lt109 = icmp slt i32 %sext, 10, !dbg !1471
  br i1 %lt109, label %or.phi, label %or.rhs, !dbg !1471

or.rhs:                                           ; preds = %switch.entry108
  %64 = load i8, ptr %c91, align 1, !dbg !1471
  %lt110 = icmp ult i8 %64, 65, !dbg !1471
  br label %or.phi, !dbg !1471

or.phi:                                           ; preds = %or.rhs, %switch.entry108
  %val111 = phi i1 [ true, %switch.entry108 ], [ %lt110, %or.rhs ], !dbg !1471
  %eq112 = icmp eq i1 %val111, %62, !dbg !1471
  br i1 %eq112, label %switch.case113, label %next_if, !dbg !1471

switch.case113:                                   ; preds = %or.phi
  %65 = load i8, ptr %c91, align 1, !dbg !1473
  %sub = sub i8 %65, 48, !dbg !1473
  store i8 %sub, ptr %c91, align 1, !dbg !1473
  br label %switch.exit129, !dbg !1473

next_if:                                          ; preds = %or.phi
  %66 = load i8, ptr %c91, align 1, !dbg !1475
  %le114 = icmp ule i8 %66, 70, !dbg !1475
  %eq115 = icmp eq i1 %le114, %62, !dbg !1475
  br i1 %eq115, label %switch.case116, label %next_if118, !dbg !1475

switch.case116:                                   ; preds = %next_if
  %67 = load i8, ptr %c91, align 1, !dbg !1476
  %sub117 = sub i8 %67, 55, !dbg !1476
  store i8 %sub117, ptr %c91, align 1, !dbg !1476
  br label %switch.exit129, !dbg !1476

next_if118:                                       ; preds = %next_if
  %68 = load i8, ptr %c91, align 1, !dbg !1478
  %lt119 = icmp ult i8 %68, 97, !dbg !1478
  br i1 %lt119, label %or.phi122, label %or.rhs120, !dbg !1478

or.rhs120:                                        ; preds = %next_if118
  %69 = load i8, ptr %c91, align 1, !dbg !1478
  %gt121 = icmp ugt i8 %69, 102, !dbg !1478
  br label %or.phi122, !dbg !1478

or.phi122:                                        ; preds = %or.rhs120, %next_if118
  %val123 = phi i1 [ true, %next_if118 ], [ %gt121, %or.rhs120 ], !dbg !1478
  %eq124 = icmp eq i1 %val123, %62, !dbg !1478
  br i1 %eq124, label %switch.case125, label %next_if126, !dbg !1478

switch.case125:                                   ; preds = %or.phi122
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_INTEGER to i64), ptr %reterr, align 8, !dbg !1479
  br label %err_retblock, !dbg !1479

next_if126:                                       ; preds = %or.phi122
  br label %switch.default127, !dbg !1479

switch.default127:                                ; preds = %next_if126
  %70 = load i8, ptr %c91, align 1, !dbg !1481
  %sub128 = sub i8 %70, 87, !dbg !1481
  store i8 %sub128, ptr %c91, align 1, !dbg !1481
  br label %switch.exit129, !dbg !1481

switch.exit129:                                   ; preds = %switch.default127, %switch.case116, %switch.case113
  %71 = load i8, ptr %c91, align 1, !dbg !1483
  %72 = load i8, ptr %base_used, align 1, !dbg !1483
  %le130 = icmp sle i8 %72, %71, !dbg !1483
  %check = icmp slt i8 %71, 0, !dbg !1483
  %siui-le = or i1 %check, %le130, !dbg !1483
  br i1 %siui-le, label %if.then131, label %if.exit132, !dbg !1483

if.then131:                                       ; preds = %switch.exit129
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_INTEGER to i64), ptr %reterr, align 8, !dbg !1483
  br label %err_retblock, !dbg !1483

if.exit132:                                       ; preds = %switch.exit129
  %73 = load i8, ptr %is_negative, align 1, !dbg !1484
  %74 = trunc i8 %73 to i1, !dbg !1484
  br i1 %74, label %if.then133, label %if.exit142, !dbg !1484

if.then133:                                       ; preds = %if.exit132
    #dbg_declare(ptr %new_value, !1487, !DIExpression(), !1489)
  %75 = load i8, ptr %value, align 1, !dbg !1489
  %sext134 = sext i8 %75 to i32, !dbg !1489
  %76 = load i8, ptr %base_used, align 1, !dbg !1489
  %sext135 = sext i8 %76 to i32, !dbg !1489
  %mul = mul i32 %sext134, %sext135, !dbg !1489
  %77 = load i8, ptr %c91, align 1, !dbg !1489
  %zext136 = zext i8 %77 to i32, !dbg !1489
  %sub137 = sub i32 %mul, %zext136, !dbg !1489
  %trunc138 = trunc i32 %sub137 to i8, !dbg !1489
  store i8 %trunc138, ptr %new_value, align 1, !dbg !1489
  %78 = load i8, ptr %new_value, align 1, !dbg !1490
  %79 = load i8, ptr %value, align 1, !dbg !1490
  %gt139 = icmp sgt i8 %78, %79, !dbg !1490
  br i1 %gt139, label %if.then140, label %if.exit141, !dbg !1490

if.then140:                                       ; preds = %if.then133
  store i64 ptrtoint (ptr @std.core.string.INTEGER_OVERFLOW to i64), ptr %reterr, align 8, !dbg !1490
  br label %err_retblock, !dbg !1490

if.exit141:                                       ; preds = %if.then133
  %80 = load i8, ptr %new_value, align 1, !dbg !1491
  store i8 %80, ptr %value, align 1, !dbg !1491
  br label %loop.exit153, !dbg !1492

if.exit142:                                       ; preds = %if.exit132
    #dbg_declare(ptr %new_value143, !1493, !DIExpression(), !1494)
  %81 = load i8, ptr %value, align 1, !dbg !1494
  %sext144 = sext i8 %81 to i32, !dbg !1494
  %82 = load i8, ptr %base_used, align 1, !dbg !1494
  %sext145 = sext i8 %82 to i32, !dbg !1494
  %mul146 = mul i32 %sext144, %sext145, !dbg !1494
  %83 = load i8, ptr %c91, align 1, !dbg !1494
  %zext147 = zext i8 %83 to i32, !dbg !1494
  %add148 = add i32 %mul146, %zext147, !dbg !1494
  %trunc149 = trunc i32 %add148 to i8, !dbg !1494
  store i8 %trunc149, ptr %new_value143, align 1, !dbg !1494
  %84 = load i8, ptr %new_value143, align 1, !dbg !1495
  %85 = load i8, ptr %value, align 1, !dbg !1495
  %lt150 = icmp slt i8 %84, %85, !dbg !1495
  br i1 %lt150, label %if.then151, label %if.exit152, !dbg !1495

if.then151:                                       ; preds = %if.exit142
  store i64 ptrtoint (ptr @std.core.string.INTEGER_OVERFLOW to i64), ptr %reterr, align 8, !dbg !1495
  br label %err_retblock, !dbg !1495

if.exit152:                                       ; preds = %if.exit142
  %86 = load i8, ptr %new_value143, align 1, !dbg !1496
  store i8 %86, ptr %value, align 1, !dbg !1496
  br label %loop.exit153, !dbg !1496

loop.exit153:                                     ; preds = %if.exit152, %if.exit141
  br label %loop.cond89, !dbg !1496

loop.exit154:                                     ; preds = %loop.cond89
  %87 = load i8, ptr %value, align 1, !dbg !1497
  store i8 %87, ptr %blockret, align 1, !dbg !1497
  br label %expr_block.exit, !dbg !1497

expr_block.exit:                                  ; preds = %loop.exit154, %if.then59
  %88 = load i8, ptr %blockret, align 1, !dbg !1497
  store i8 %88, ptr %0, align 1, !dbg !1497
  ret i64 0, !dbg !1497

err_retblock:                                     ; preds = %if.then151, %if.then140, %if.then131, %switch.case125, %if.then86, %if.then34, %if.then
  %89 = load i64, ptr %reterr, align 8, !dbg !1497
  ret i64 %89, !dbg !1497

panic:                                            ; preds = %and.rhs4
  store i64 256, ptr %taddr, align 8
  %90 = insertvalue %any undef, ptr %taddr, 0
  %91 = insertvalue %any %90, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %zext, ptr %taddr7, align 8
  %92 = insertvalue %any undef, ptr %taddr7, 0
  %93 = insertvalue %any %92, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg8, align 8
  store %"char[]" { ptr @.file.73, i64 8 }, ptr %indirectarg9, align 8
  store %"char[]" { ptr @.func.93, i64 8 }, ptr %indirectarg10, align 8
  store %any %91, ptr %varargslots, align 16
  %ptradd11 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %93, ptr %ptradd11, align 16
  %94 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %94, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg12, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg8, ptr align 8 %indirectarg9, ptr align 8 %indirectarg10, i32 19, ptr align 8 %indirectarg12) #6, !dbg !1425
  unreachable, !dbg !1425

panic17:                                          ; preds = %if.exit
  store i64 %23, ptr %taddr18, align 8
  %95 = insertvalue %any undef, ptr %taddr18, 0
  %96 = insertvalue %any %95, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %25, ptr %taddr19, align 8
  %97 = insertvalue %any undef, ptr %taddr19, 0
  %98 = insertvalue %any %97, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg20, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg21, align 8
  store %"char[]" { ptr @.func.93, i64 8 }, ptr %indirectarg22, align 8
  store %any %96, ptr %varargslots23, align 16
  %ptradd24 = getelementptr inbounds i8, ptr %varargslots23, i64 16
  store %any %98, ptr %ptradd24, align 16
  %99 = insertvalue %"any[]" undef, ptr %varargslots23, 0
  %"$$temp25" = insertvalue %"any[]" %99, i64 2, 1
  store %"any[]" %"$$temp25", ptr %indirectarg26, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg20, ptr align 8 %indirectarg21, ptr align 8 %indirectarg22, i32 980, ptr align 8 %indirectarg26) #6, !dbg !1432
  unreachable, !dbg !1432

panic39:                                          ; preds = %if.exit35
  store i64 %34, ptr %taddr40, align 8
  %100 = insertvalue %any undef, ptr %taddr40, 0
  %101 = insertvalue %any %100, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %36, ptr %taddr41, align 8
  %102 = insertvalue %any undef, ptr %taddr41, 0
  %103 = insertvalue %any %102, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg42, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg43, align 8
  store %"char[]" { ptr @.func.93, i64 8 }, ptr %indirectarg44, align 8
  store %any %101, ptr %varargslots45, align 16
  %ptradd46 = getelementptr inbounds i8, ptr %varargslots45, i64 16
  store %any %103, ptr %ptradd46, align 16
  %104 = insertvalue %"any[]" undef, ptr %varargslots45, 0
  %"$$temp47" = insertvalue %"any[]" %104, i64 2, 1
  store %"any[]" %"$$temp47", ptr %indirectarg48, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg42, ptr align 8 %indirectarg43, ptr align 8 %indirectarg44, i32 993, ptr align 8 %indirectarg48) #6, !dbg !1445
  unreachable, !dbg !1445

panic63:                                          ; preds = %if.exit60
  store i64 %43, ptr %taddr64, align 8
  %105 = insertvalue %any undef, ptr %taddr64, 0
  %106 = insertvalue %any %105, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %45, ptr %taddr65, align 8
  %107 = insertvalue %any undef, ptr %taddr65, 0
  %108 = insertvalue %any %107, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg66, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg67, align 8
  store %"char[]" { ptr @.func.93, i64 8 }, ptr %indirectarg68, align 8
  store %any %106, ptr %varargslots69, align 16
  %ptradd70 = getelementptr inbounds i8, ptr %varargslots69, i64 16
  store %any %108, ptr %ptradd70, align 16
  %109 = insertvalue %"any[]" undef, ptr %varargslots69, 0
  %"$$temp71" = insertvalue %"any[]" %109, i64 2, 1
  store %"any[]" %"$$temp71", ptr %indirectarg72, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg66, ptr align 8 %indirectarg67, ptr align 8 %indirectarg68, i32 997, ptr align 8 %indirectarg72) #6, !dbg !1449
  unreachable, !dbg !1449

panic95:                                          ; preds = %loop.body90
  store i64 %56, ptr %taddr96, align 8
  %110 = insertvalue %any undef, ptr %taddr96, 0
  %111 = insertvalue %any %110, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %58, ptr %taddr97, align 8
  %112 = insertvalue %any undef, ptr %taddr97, 0
  %113 = insertvalue %any %112, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg98, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg99, align 8
  store %"char[]" { ptr @.func.93, i64 8 }, ptr %indirectarg100, align 8
  store %any %111, ptr %varargslots101, align 16
  %ptradd102 = getelementptr inbounds i8, ptr %varargslots101, i64 16
  store %any %113, ptr %ptradd102, align 16
  %114 = insertvalue %"any[]" undef, ptr %varargslots101, 0
  %"$$temp103" = insertvalue %"any[]" %114, i64 2, 1
  store %"any[]" %"$$temp103", ptr %indirectarg104, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg98, ptr align 8 %indirectarg99, ptr align 8 %indirectarg100, i32 1019, ptr align 8 %indirectarg104) #6, !dbg !1470
  unreachable, !dbg !1470
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.core.String.to_uint128(ptr %0, ptr align 8 %1, i32 %2) #0 comdat !dbg !1498 {
entry:
  %base = alloca i32, align 4
  %reterr = alloca i64, align 8
  %self = alloca %"char[]", align 8
  %base1 = alloca i32, align 4
  %blockret = alloca i128, align 16
  %indirectarg = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %indirectarg3 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %index = alloca i64, align 8
  %ptr = alloca ptr, align 8
  %c = alloca i8, align 1
  %c6 = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr7 = alloca i64, align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg12 = alloca %"any[]", align 8
  %is_negative = alloca i8, align 1
  %taddr18 = alloca i64, align 8
  %taddr19 = alloca i64, align 8
  %indirectarg20 = alloca %"char[]", align 8
  %indirectarg21 = alloca %"char[]", align 8
  %indirectarg22 = alloca %"char[]", align 8
  %varargslots23 = alloca [2 x %any], align 16
  %indirectarg26 = alloca %"any[]", align 8
  %switch = alloca i8, align 1
  %base_used = alloca i128, align 16
  %taddr39 = alloca i64, align 8
  %taddr40 = alloca i64, align 8
  %indirectarg41 = alloca %"char[]", align 8
  %indirectarg42 = alloca %"char[]", align 8
  %indirectarg43 = alloca %"char[]", align 8
  %varargslots44 = alloca [2 x %any], align 16
  %indirectarg47 = alloca %"any[]", align 8
  %taddr63 = alloca i64, align 8
  %taddr64 = alloca i64, align 8
  %indirectarg65 = alloca %"char[]", align 8
  %indirectarg66 = alloca %"char[]", align 8
  %indirectarg67 = alloca %"char[]", align 8
  %varargslots68 = alloca [2 x %any], align 16
  %indirectarg71 = alloca %"any[]", align 8
  %switch74 = alloca i8, align 1
  %value = alloca i128, align 16
  %c90 = alloca i8, align 1
  %taddr95 = alloca i64, align 8
  %taddr96 = alloca i64, align 8
  %indirectarg97 = alloca %"char[]", align 8
  %indirectarg98 = alloca %"char[]", align 8
  %indirectarg99 = alloca %"char[]", align 8
  %varargslots100 = alloca [2 x %any], align 16
  %indirectarg103 = alloca %"any[]", align 8
  %switch106 = alloca i8, align 1
  %new_value = alloca i128, align 16
  %new_value140 = alloca i128, align 16
    #dbg_declare(ptr %1, !1503, !DIExpression(), !1504)
  store i32 %2, ptr %base, align 4
    #dbg_declare(ptr %base, !1505, !DIExpression(), !1504)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %self, ptr align 8 %1, i32 16, i1 false)
  %3 = load i32, ptr %base, align 4
  store i32 %3, ptr %base1, align 4
  %4 = load i32, ptr %base1, align 4, !dbg !1506
  %gt = icmp sgt i32 %4, 0, !dbg !1506
  br i1 %gt, label %and.rhs, label %and.phi, !dbg !1506

and.rhs:                                          ; preds = %entry
  %5 = load i32, ptr %base1, align 4, !dbg !1506
  %le = icmp sle i32 %5, 16, !dbg !1506
  br label %and.phi, !dbg !1506

and.phi:                                          ; preds = %and.rhs, %entry
  %val = phi i1 [ false, %entry ], [ %le, %and.rhs ], !dbg !1506
  br i1 %val, label %assert_ok, label %assert_fail, !dbg !1506

assert_fail:                                      ; preds = %and.phi
  store %"char[]" { ptr @.panic_msg.88, i64 63 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg2, align 8
  store %"char[]" { ptr @.func.94, i64 10 }, ptr %indirectarg3, align 8
  %6 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %6(ptr align 8 %indirectarg, ptr align 8 %indirectarg2, ptr align 8 %indirectarg3, i32 1051) #6, !dbg !1509
  unreachable, !dbg !1509

assert_ok:                                        ; preds = %and.phi
    #dbg_declare(ptr %len, !1510, !DIExpression(), !1511)
  %ptradd = getelementptr inbounds i8, ptr %self, i64 8, !dbg !1511
  %7 = load i64, ptr %ptradd, align 8, !dbg !1511
  store i64 %7, ptr %len, align 8, !dbg !1511
    #dbg_declare(ptr %index, !1512, !DIExpression(), !1513)
  store i64 0, ptr %index, align 8, !dbg !1513
    #dbg_declare(ptr %ptr, !1514, !DIExpression(), !1515)
  %8 = load ptr, ptr %self, align 8, !dbg !1515
  store ptr %8, ptr %ptr, align 8, !dbg !1515
  br label %loop.cond, !dbg !1516

loop.cond:                                        ; preds = %loop.body, %assert_ok
  %9 = load i64, ptr %index, align 8, !dbg !1517
  %10 = load i64, ptr %len, align 8, !dbg !1517
  %lt = icmp ult i64 %9, %10, !dbg !1517
  br i1 %lt, label %and.rhs4, label %and.phi13, !dbg !1517

and.rhs4:                                         ; preds = %loop.cond
  %11 = load ptr, ptr %ptr, align 8, !dbg !1517
  %12 = load i64, ptr %index, align 8, !dbg !1517
  %ptradd5 = getelementptr inbounds i8, ptr %11, i64 %12, !dbg !1517
  %13 = load i8, ptr %ptradd5, align 1
  store i8 %13, ptr %c, align 1
  %14 = load i8, ptr %c, align 1
  store i8 %14, ptr %c6, align 1
  %15 = load i8, ptr %c6, align 1, !dbg !1519
  %zext = zext i8 %15 to i64, !dbg !1519
  %ge = icmp uge i64 %zext, 256, !dbg !1519
  %16 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !1519
  br i1 %16, label %panic, label %checkok, !dbg !1519

checkok:                                          ; preds = %and.rhs4
  %ptroffset = getelementptr inbounds [2 x i8], ptr @std.core.ascii.ASCII_LOOKUP, i64 %zext, !dbg !1519
  %17 = load i16, ptr %ptroffset, align 2, !dbg !1519
  %lshrl = lshr i16 %17, 10, !dbg !1519
  %18 = and i16 1, %lshrl, !dbg !1519
  %trunc = trunc i16 %18 to i8, !dbg !1519
  %19 = trunc i8 %trunc to i1, !dbg !1519
  br label %and.phi13, !dbg !1519

and.phi13:                                        ; preds = %checkok, %loop.cond
  %val14 = phi i1 [ false, %loop.cond ], [ %19, %checkok ], !dbg !1519
  br i1 %val14, label %loop.body, label %loop.exit, !dbg !1519

loop.body:                                        ; preds = %and.phi13
  %20 = load i64, ptr %index, align 8, !dbg !1517
  %add = add i64 %20, 1, !dbg !1517
  store i64 %add, ptr %index, align 8, !dbg !1517
  br label %loop.cond, !dbg !1517

loop.exit:                                        ; preds = %and.phi13
  %21 = load i64, ptr %len, align 8, !dbg !1523
  %22 = load i64, ptr %index, align 8, !dbg !1523
  %eq = icmp eq i64 %21, %22, !dbg !1523
  br i1 %eq, label %if.then, label %if.exit, !dbg !1523

if.then:                                          ; preds = %loop.exit
  store i64 ptrtoint (ptr @std.core.string.EMPTY_STRING to i64), ptr %reterr, align 8, !dbg !1523
  br label %err_retblock, !dbg !1523

if.exit:                                          ; preds = %loop.exit
    #dbg_declare(ptr %is_negative, !1524, !DIExpression(), !1525)
  store i8 0, ptr %is_negative, align 1, !dbg !1525
  %ptradd15 = getelementptr inbounds i8, ptr %self, i64 8, !dbg !1526
  %23 = load i64, ptr %ptradd15, align 8, !dbg !1526
  %24 = load ptr, ptr %self, align 8, !dbg !1526
  %25 = load i64, ptr %index, align 8, !dbg !1526
  %ge16 = icmp uge i64 %25, %23, !dbg !1526
  %26 = call i1 @llvm.expect.i1(i1 %ge16, i1 false), !dbg !1526
  br i1 %26, label %panic17, label %checkok27, !dbg !1526

checkok27:                                        ; preds = %if.exit
  %ptradd28 = getelementptr inbounds i8, ptr %24, i64 %25, !dbg !1526
  %27 = load i8, ptr %ptradd28, align 1
  store i8 %27, ptr %switch, align 1
  br label %switch.entry

switch.entry:                                     ; preds = %checkok27
  %28 = load i8, ptr %switch, align 1
  switch i8 %28, label %switch.default [
    i8 45, label %switch.case
    i8 43, label %switch.case31
  ]

switch.case:                                      ; preds = %switch.entry
  br label %if.then29, !dbg !1528

if.then29:                                        ; preds = %switch.case
  store i64 ptrtoint (ptr @std.core.string.NEGATIVE_VALUE to i64), ptr %reterr, align 8, !dbg !1528
  br label %err_retblock, !dbg !1528

switch.case31:                                    ; preds = %switch.entry
  %29 = load i64, ptr %index, align 8, !dbg !1530
  %add32 = add i64 %29, 1, !dbg !1530
  store i64 %add32, ptr %index, align 8, !dbg !1530
  br label %switch.exit, !dbg !1530

switch.default:                                   ; preds = %switch.entry
  br label %switch.exit, !dbg !1532

switch.exit:                                      ; preds = %switch.default, %switch.case31
  %30 = load i64, ptr %len, align 8, !dbg !1534
  %31 = load i64, ptr %index, align 8, !dbg !1534
  %eq33 = icmp eq i64 %30, %31, !dbg !1534
  br i1 %eq33, label %if.then34, label %if.exit35, !dbg !1534

if.then34:                                        ; preds = %switch.exit
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_INTEGER to i64), ptr %reterr, align 8, !dbg !1534
  br label %err_retblock, !dbg !1534

if.exit35:                                        ; preds = %switch.exit
    #dbg_declare(ptr %base_used, !1535, !DIExpression(), !1536)
  %32 = load i32, ptr %base1, align 4, !dbg !1536
  %sext = sext i32 %32 to i128, !dbg !1536
  store i128 %sext, ptr %base_used, align 16, !dbg !1536
  %ptradd36 = getelementptr inbounds i8, ptr %self, i64 8, !dbg !1537
  %33 = load i64, ptr %ptradd36, align 8, !dbg !1537
  %34 = load ptr, ptr %self, align 8, !dbg !1537
  %35 = load i64, ptr %index, align 8, !dbg !1537
  %ge37 = icmp uge i64 %35, %33, !dbg !1537
  %36 = call i1 @llvm.expect.i1(i1 %ge37, i1 false), !dbg !1537
  br i1 %36, label %panic38, label %checkok48, !dbg !1537

checkok48:                                        ; preds = %if.exit35
  %ptradd49 = getelementptr inbounds i8, ptr %34, i64 %35, !dbg !1537
  %37 = load i8, ptr %ptradd49, align 1, !dbg !1537
  %eq50 = icmp eq i8 %37, 48, !dbg !1537
  br i1 %eq50, label %and.rhs51, label %and.phi53, !dbg !1537

and.rhs51:                                        ; preds = %checkok48
  %38 = load i32, ptr %base1, align 4, !dbg !1537
  %eq52 = icmp eq i32 %38, 10, !dbg !1537
  br label %and.phi53, !dbg !1537

and.phi53:                                        ; preds = %and.rhs51, %checkok48
  %val54 = phi i1 [ false, %checkok48 ], [ %eq52, %and.rhs51 ], !dbg !1537
  br i1 %val54, label %if.then55, label %if.exit87, !dbg !1537

if.then55:                                        ; preds = %and.phi53
  %39 = load i64, ptr %index, align 8, !dbg !1538
  %add56 = add i64 %39, 1, !dbg !1538
  store i64 %add56, ptr %index, align 8, !dbg !1538
  %40 = load i64, ptr %index, align 8, !dbg !1540
  %41 = load i64, ptr %len, align 8, !dbg !1540
  %eq57 = icmp eq i64 %40, %41, !dbg !1540
  br i1 %eq57, label %if.then58, label %if.exit59, !dbg !1540

if.then58:                                        ; preds = %if.then55
  store i128 0, ptr %blockret, align 16, !dbg !1540
  br label %expr_block.exit, !dbg !1540

if.exit59:                                        ; preds = %if.then55
  %ptradd60 = getelementptr inbounds i8, ptr %self, i64 8, !dbg !1541
  %42 = load i64, ptr %ptradd60, align 8, !dbg !1541
  %43 = load ptr, ptr %self, align 8, !dbg !1541
  %44 = load i64, ptr %index, align 8, !dbg !1541
  %ge61 = icmp uge i64 %44, %42, !dbg !1541
  %45 = call i1 @llvm.expect.i1(i1 %ge61, i1 false), !dbg !1541
  br i1 %45, label %panic62, label %checkok72, !dbg !1541

checkok72:                                        ; preds = %if.exit59
  %ptradd73 = getelementptr inbounds i8, ptr %43, i64 %44, !dbg !1541
  %46 = load i8, ptr %ptradd73, align 1
  store i8 %46, ptr %switch74, align 1
  br label %switch.entry75

switch.entry75:                                   ; preds = %checkok72
  %47 = load i8, ptr %switch74, align 1
  switch i8 %47, label %switch.default82 [
    i8 120, label %switch.case76
    i8 88, label %switch.case76
    i8 98, label %switch.case78
    i8 66, label %switch.case78
    i8 111, label %switch.case80
    i8 79, label %switch.case80
  ]

switch.case76:                                    ; preds = %switch.entry75, %switch.entry75
  store i128 16, ptr %base_used, align 16, !dbg !1543
  %48 = load i64, ptr %index, align 8, !dbg !1545
  %add77 = add i64 %48, 1, !dbg !1545
  store i64 %add77, ptr %index, align 8, !dbg !1545
  br label %switch.exit83, !dbg !1545

switch.case78:                                    ; preds = %switch.entry75, %switch.entry75
  store i128 2, ptr %base_used, align 16, !dbg !1546
  %49 = load i64, ptr %index, align 8, !dbg !1548
  %add79 = add i64 %49, 1, !dbg !1548
  store i64 %add79, ptr %index, align 8, !dbg !1548
  br label %switch.exit83, !dbg !1548

switch.case80:                                    ; preds = %switch.entry75, %switch.entry75
  store i128 8, ptr %base_used, align 16, !dbg !1549
  %50 = load i64, ptr %index, align 8, !dbg !1551
  %add81 = add i64 %50, 1, !dbg !1551
  store i64 %add81, ptr %index, align 8, !dbg !1551
  br label %switch.exit83, !dbg !1551

switch.default82:                                 ; preds = %switch.entry75
  br label %switch.exit83, !dbg !1552

switch.exit83:                                    ; preds = %switch.default82, %switch.case80, %switch.case78, %switch.case76
  %51 = load i64, ptr %len, align 8, !dbg !1554
  %52 = load i64, ptr %index, align 8, !dbg !1554
  %eq84 = icmp eq i64 %51, %52, !dbg !1554
  br i1 %eq84, label %if.then85, label %if.exit86, !dbg !1554

if.then85:                                        ; preds = %switch.exit83
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_INTEGER to i64), ptr %reterr, align 8, !dbg !1554
  br label %err_retblock, !dbg !1554

if.exit86:                                        ; preds = %switch.exit83
  br label %if.exit87, !dbg !1554

if.exit87:                                        ; preds = %if.exit86, %and.phi53
    #dbg_declare(ptr %value, !1555, !DIExpression(), !1556)
  store i128 0, ptr %value, align 16, !dbg !1556
  br label %loop.cond88, !dbg !1557

loop.cond88:                                      ; preds = %loop.exit147, %if.exit87
  %53 = load i64, ptr %index, align 8, !dbg !1558
  %54 = load i64, ptr %len, align 8, !dbg !1558
  %neq = icmp ne i64 %53, %54, !dbg !1558
  br i1 %neq, label %loop.body89, label %loop.exit148, !dbg !1558

loop.body89:                                      ; preds = %loop.cond88
    #dbg_declare(ptr %c90, !1560, !DIExpression(), !1562)
  %ptradd91 = getelementptr inbounds i8, ptr %self, i64 8, !dbg !1562
  %55 = load i64, ptr %ptradd91, align 8, !dbg !1562
  %56 = load ptr, ptr %self, align 8, !dbg !1562
  %57 = load i64, ptr %index, align 8, !dbg !1562
  %add92 = add i64 %57, 1, !dbg !1562
  store i64 %add92, ptr %index, align 8, !dbg !1562
  %ge93 = icmp uge i64 %57, %55, !dbg !1562
  %58 = call i1 @llvm.expect.i1(i1 %ge93, i1 false), !dbg !1562
  br i1 %58, label %panic94, label %checkok104, !dbg !1562

checkok104:                                       ; preds = %loop.body89
  %ptradd105 = getelementptr inbounds i8, ptr %56, i64 %57, !dbg !1562
  %59 = load i8, ptr %ptradd105, align 1, !dbg !1562
  store i8 %59, ptr %c90, align 1, !dbg !1562
  store i8 1, ptr %switch106, align 1
  br label %switch.entry107

switch.entry107:                                  ; preds = %checkok104
  %60 = load i8, ptr %switch106, align 1
  %61 = trunc i8 %60 to i1
  %62 = load i128, ptr %base_used, align 16, !dbg !1563
  %gt108 = icmp sgt i128 10, %62, !dbg !1563
  %check = icmp sge i128 %62, 0, !dbg !1563
  %siui-gt = and i1 %check, %gt108, !dbg !1563
  br i1 %siui-gt, label %or.phi, label %or.rhs, !dbg !1563

or.rhs:                                           ; preds = %switch.entry107
  %63 = load i8, ptr %c90, align 1, !dbg !1563
  %lt109 = icmp ult i8 %63, 65, !dbg !1563
  br label %or.phi, !dbg !1563

or.phi:                                           ; preds = %or.rhs, %switch.entry107
  %val110 = phi i1 [ true, %switch.entry107 ], [ %lt109, %or.rhs ], !dbg !1563
  %eq111 = icmp eq i1 %val110, %61, !dbg !1563
  br i1 %eq111, label %switch.case112, label %next_if, !dbg !1563

switch.case112:                                   ; preds = %or.phi
  %64 = load i8, ptr %c90, align 1, !dbg !1565
  %sub = sub i8 %64, 48, !dbg !1565
  store i8 %sub, ptr %c90, align 1, !dbg !1565
  br label %switch.exit128, !dbg !1565

next_if:                                          ; preds = %or.phi
  %65 = load i8, ptr %c90, align 1, !dbg !1567
  %le113 = icmp ule i8 %65, 70, !dbg !1567
  %eq114 = icmp eq i1 %le113, %61, !dbg !1567
  br i1 %eq114, label %switch.case115, label %next_if117, !dbg !1567

switch.case115:                                   ; preds = %next_if
  %66 = load i8, ptr %c90, align 1, !dbg !1568
  %sub116 = sub i8 %66, 55, !dbg !1568
  store i8 %sub116, ptr %c90, align 1, !dbg !1568
  br label %switch.exit128, !dbg !1568

next_if117:                                       ; preds = %next_if
  %67 = load i8, ptr %c90, align 1, !dbg !1570
  %lt118 = icmp ult i8 %67, 97, !dbg !1570
  br i1 %lt118, label %or.phi121, label %or.rhs119, !dbg !1570

or.rhs119:                                        ; preds = %next_if117
  %68 = load i8, ptr %c90, align 1, !dbg !1570
  %gt120 = icmp ugt i8 %68, 102, !dbg !1570
  br label %or.phi121, !dbg !1570

or.phi121:                                        ; preds = %or.rhs119, %next_if117
  %val122 = phi i1 [ true, %next_if117 ], [ %gt120, %or.rhs119 ], !dbg !1570
  %eq123 = icmp eq i1 %val122, %61, !dbg !1570
  br i1 %eq123, label %switch.case124, label %next_if125, !dbg !1570

switch.case124:                                   ; preds = %or.phi121
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_INTEGER to i64), ptr %reterr, align 8, !dbg !1571
  br label %err_retblock, !dbg !1571

next_if125:                                       ; preds = %or.phi121
  br label %switch.default126, !dbg !1571

switch.default126:                                ; preds = %next_if125
  %69 = load i8, ptr %c90, align 1, !dbg !1573
  %sub127 = sub i8 %69, 87, !dbg !1573
  store i8 %sub127, ptr %c90, align 1, !dbg !1573
  br label %switch.exit128, !dbg !1573

switch.exit128:                                   ; preds = %switch.default126, %switch.case115, %switch.case112
  %70 = load i8, ptr %c90, align 1, !dbg !1575
  %zext129 = zext i8 %70 to i128, !dbg !1575
  %71 = load i128, ptr %base_used, align 16, !dbg !1575
  %ge130 = icmp uge i128 %zext129, %71, !dbg !1575
  br i1 %ge130, label %if.then131, label %if.exit132, !dbg !1575

if.then131:                                       ; preds = %switch.exit128
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_INTEGER to i64), ptr %reterr, align 8, !dbg !1575
  br label %err_retblock, !dbg !1575

if.exit132:                                       ; preds = %switch.exit128
  %72 = load i8, ptr %is_negative, align 1, !dbg !1576
  %73 = trunc i8 %72 to i1, !dbg !1576
  br i1 %73, label %if.then133, label %if.exit139, !dbg !1576

if.then133:                                       ; preds = %if.exit132
    #dbg_declare(ptr %new_value, !1579, !DIExpression(), !1581)
  %74 = load i128, ptr %value, align 16, !dbg !1581
  %75 = load i128, ptr %base_used, align 16, !dbg !1581
  %mul = mul i128 %74, %75, !dbg !1581
  %76 = load i8, ptr %c90, align 1, !dbg !1581
  %zext134 = zext i8 %76 to i128, !dbg !1581
  %sub135 = sub i128 %mul, %zext134, !dbg !1581
  store i128 %sub135, ptr %new_value, align 16, !dbg !1581
  %77 = load i128, ptr %new_value, align 16, !dbg !1582
  %78 = load i128, ptr %value, align 16, !dbg !1582
  %gt136 = icmp ugt i128 %77, %78, !dbg !1582
  br i1 %gt136, label %if.then137, label %if.exit138, !dbg !1582

if.then137:                                       ; preds = %if.then133
  store i64 ptrtoint (ptr @std.core.string.INTEGER_OVERFLOW to i64), ptr %reterr, align 8, !dbg !1582
  br label %err_retblock, !dbg !1582

if.exit138:                                       ; preds = %if.then133
  %79 = load i128, ptr %new_value, align 16, !dbg !1583
  store i128 %79, ptr %value, align 16, !dbg !1583
  br label %loop.exit147, !dbg !1584

if.exit139:                                       ; preds = %if.exit132
    #dbg_declare(ptr %new_value140, !1585, !DIExpression(), !1586)
  %80 = load i128, ptr %value, align 16, !dbg !1586
  %81 = load i128, ptr %base_used, align 16, !dbg !1586
  %mul141 = mul i128 %80, %81, !dbg !1586
  %82 = load i8, ptr %c90, align 1, !dbg !1586
  %zext142 = zext i8 %82 to i128, !dbg !1586
  %add143 = add i128 %mul141, %zext142, !dbg !1586
  store i128 %add143, ptr %new_value140, align 16, !dbg !1586
  %83 = load i128, ptr %new_value140, align 16, !dbg !1587
  %84 = load i128, ptr %value, align 16, !dbg !1587
  %lt144 = icmp ult i128 %83, %84, !dbg !1587
  br i1 %lt144, label %if.then145, label %if.exit146, !dbg !1587

if.then145:                                       ; preds = %if.exit139
  store i64 ptrtoint (ptr @std.core.string.INTEGER_OVERFLOW to i64), ptr %reterr, align 8, !dbg !1587
  br label %err_retblock, !dbg !1587

if.exit146:                                       ; preds = %if.exit139
  %85 = load i128, ptr %new_value140, align 16, !dbg !1588
  store i128 %85, ptr %value, align 16, !dbg !1588
  br label %loop.exit147, !dbg !1588

loop.exit147:                                     ; preds = %if.exit146, %if.exit138
  br label %loop.cond88, !dbg !1588

loop.exit148:                                     ; preds = %loop.cond88
  %86 = load i128, ptr %value, align 16, !dbg !1589
  store i128 %86, ptr %blockret, align 16, !dbg !1589
  br label %expr_block.exit, !dbg !1589

expr_block.exit:                                  ; preds = %loop.exit148, %if.then58
  %87 = load i128, ptr %blockret, align 16, !dbg !1589
  store i128 %87, ptr %0, align 16, !dbg !1589
  ret i64 0, !dbg !1589

err_retblock:                                     ; preds = %if.then145, %if.then137, %if.then131, %switch.case124, %if.then85, %if.then34, %if.then29, %if.then
  %88 = load i64, ptr %reterr, align 8, !dbg !1589
  ret i64 %88, !dbg !1589

panic:                                            ; preds = %and.rhs4
  store i64 256, ptr %taddr, align 8
  %89 = insertvalue %any undef, ptr %taddr, 0
  %90 = insertvalue %any %89, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %zext, ptr %taddr7, align 8
  %91 = insertvalue %any undef, ptr %taddr7, 0
  %92 = insertvalue %any %91, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg8, align 8
  store %"char[]" { ptr @.file.73, i64 8 }, ptr %indirectarg9, align 8
  store %"char[]" { ptr @.func.94, i64 10 }, ptr %indirectarg10, align 8
  store %any %90, ptr %varargslots, align 16
  %ptradd11 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %92, ptr %ptradd11, align 16
  %93 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %93, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg12, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg8, ptr align 8 %indirectarg9, ptr align 8 %indirectarg10, i32 19, ptr align 8 %indirectarg12) #6, !dbg !1519
  unreachable, !dbg !1519

panic17:                                          ; preds = %if.exit
  store i64 %23, ptr %taddr18, align 8
  %94 = insertvalue %any undef, ptr %taddr18, 0
  %95 = insertvalue %any %94, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %25, ptr %taddr19, align 8
  %96 = insertvalue %any undef, ptr %taddr19, 0
  %97 = insertvalue %any %96, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg20, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg21, align 8
  store %"char[]" { ptr @.func.94, i64 10 }, ptr %indirectarg22, align 8
  store %any %95, ptr %varargslots23, align 16
  %ptradd24 = getelementptr inbounds i8, ptr %varargslots23, i64 16
  store %any %97, ptr %ptradd24, align 16
  %98 = insertvalue %"any[]" undef, ptr %varargslots23, 0
  %"$$temp25" = insertvalue %"any[]" %98, i64 2, 1
  store %"any[]" %"$$temp25", ptr %indirectarg26, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg20, ptr align 8 %indirectarg21, ptr align 8 %indirectarg22, i32 980, ptr align 8 %indirectarg26) #6, !dbg !1526
  unreachable, !dbg !1526

panic38:                                          ; preds = %if.exit35
  store i64 %33, ptr %taddr39, align 8
  %99 = insertvalue %any undef, ptr %taddr39, 0
  %100 = insertvalue %any %99, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %35, ptr %taddr40, align 8
  %101 = insertvalue %any undef, ptr %taddr40, 0
  %102 = insertvalue %any %101, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg41, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg42, align 8
  store %"char[]" { ptr @.func.94, i64 10 }, ptr %indirectarg43, align 8
  store %any %100, ptr %varargslots44, align 16
  %ptradd45 = getelementptr inbounds i8, ptr %varargslots44, i64 16
  store %any %102, ptr %ptradd45, align 16
  %103 = insertvalue %"any[]" undef, ptr %varargslots44, 0
  %"$$temp46" = insertvalue %"any[]" %103, i64 2, 1
  store %"any[]" %"$$temp46", ptr %indirectarg47, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg41, ptr align 8 %indirectarg42, ptr align 8 %indirectarg43, i32 993, ptr align 8 %indirectarg47) #6, !dbg !1537
  unreachable, !dbg !1537

panic62:                                          ; preds = %if.exit59
  store i64 %42, ptr %taddr63, align 8
  %104 = insertvalue %any undef, ptr %taddr63, 0
  %105 = insertvalue %any %104, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %44, ptr %taddr64, align 8
  %106 = insertvalue %any undef, ptr %taddr64, 0
  %107 = insertvalue %any %106, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg65, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg66, align 8
  store %"char[]" { ptr @.func.94, i64 10 }, ptr %indirectarg67, align 8
  store %any %105, ptr %varargslots68, align 16
  %ptradd69 = getelementptr inbounds i8, ptr %varargslots68, i64 16
  store %any %107, ptr %ptradd69, align 16
  %108 = insertvalue %"any[]" undef, ptr %varargslots68, 0
  %"$$temp70" = insertvalue %"any[]" %108, i64 2, 1
  store %"any[]" %"$$temp70", ptr %indirectarg71, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg65, ptr align 8 %indirectarg66, ptr align 8 %indirectarg67, i32 997, ptr align 8 %indirectarg71) #6, !dbg !1541
  unreachable, !dbg !1541

panic94:                                          ; preds = %loop.body89
  store i64 %55, ptr %taddr95, align 8
  %109 = insertvalue %any undef, ptr %taddr95, 0
  %110 = insertvalue %any %109, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %57, ptr %taddr96, align 8
  %111 = insertvalue %any undef, ptr %taddr96, 0
  %112 = insertvalue %any %111, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg97, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg98, align 8
  store %"char[]" { ptr @.func.94, i64 10 }, ptr %indirectarg99, align 8
  store %any %110, ptr %varargslots100, align 16
  %ptradd101 = getelementptr inbounds i8, ptr %varargslots100, i64 16
  store %any %112, ptr %ptradd101, align 16
  %113 = insertvalue %"any[]" undef, ptr %varargslots100, 0
  %"$$temp102" = insertvalue %"any[]" %113, i64 2, 1
  store %"any[]" %"$$temp102", ptr %indirectarg103, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg97, ptr align 8 %indirectarg98, ptr align 8 %indirectarg99, i32 1019, ptr align 8 %indirectarg103) #6, !dbg !1562
  unreachable, !dbg !1562
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.core.String.to_ulong(ptr %0, ptr align 8 %1, i32 %2) #0 comdat !dbg !1590 {
entry:
  %base = alloca i32, align 4
  %reterr = alloca i64, align 8
  %self = alloca %"char[]", align 8
  %base1 = alloca i32, align 4
  %blockret = alloca i64, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %indirectarg3 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %index = alloca i64, align 8
  %ptr = alloca ptr, align 8
  %c = alloca i8, align 1
  %c6 = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr7 = alloca i64, align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg12 = alloca %"any[]", align 8
  %is_negative = alloca i8, align 1
  %taddr18 = alloca i64, align 8
  %taddr19 = alloca i64, align 8
  %indirectarg20 = alloca %"char[]", align 8
  %indirectarg21 = alloca %"char[]", align 8
  %indirectarg22 = alloca %"char[]", align 8
  %varargslots23 = alloca [2 x %any], align 16
  %indirectarg26 = alloca %"any[]", align 8
  %switch = alloca i8, align 1
  %base_used = alloca i64, align 8
  %taddr39 = alloca i64, align 8
  %taddr40 = alloca i64, align 8
  %indirectarg41 = alloca %"char[]", align 8
  %indirectarg42 = alloca %"char[]", align 8
  %indirectarg43 = alloca %"char[]", align 8
  %varargslots44 = alloca [2 x %any], align 16
  %indirectarg47 = alloca %"any[]", align 8
  %taddr63 = alloca i64, align 8
  %taddr64 = alloca i64, align 8
  %indirectarg65 = alloca %"char[]", align 8
  %indirectarg66 = alloca %"char[]", align 8
  %indirectarg67 = alloca %"char[]", align 8
  %varargslots68 = alloca [2 x %any], align 16
  %indirectarg71 = alloca %"any[]", align 8
  %switch74 = alloca i8, align 1
  %value = alloca i64, align 8
  %c90 = alloca i8, align 1
  %taddr95 = alloca i64, align 8
  %taddr96 = alloca i64, align 8
  %indirectarg97 = alloca %"char[]", align 8
  %indirectarg98 = alloca %"char[]", align 8
  %indirectarg99 = alloca %"char[]", align 8
  %varargslots100 = alloca [2 x %any], align 16
  %indirectarg103 = alloca %"any[]", align 8
  %switch106 = alloca i8, align 1
  %new_value = alloca i64, align 8
  %new_value140 = alloca i64, align 8
    #dbg_declare(ptr %1, !1594, !DIExpression(), !1595)
  store i32 %2, ptr %base, align 4
    #dbg_declare(ptr %base, !1596, !DIExpression(), !1595)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %self, ptr align 8 %1, i32 16, i1 false)
  %3 = load i32, ptr %base, align 4
  store i32 %3, ptr %base1, align 4
  %4 = load i32, ptr %base1, align 4, !dbg !1597
  %gt = icmp sgt i32 %4, 0, !dbg !1597
  br i1 %gt, label %and.rhs, label %and.phi, !dbg !1597

and.rhs:                                          ; preds = %entry
  %5 = load i32, ptr %base1, align 4, !dbg !1597
  %le = icmp sle i32 %5, 16, !dbg !1597
  br label %and.phi, !dbg !1597

and.phi:                                          ; preds = %and.rhs, %entry
  %val = phi i1 [ false, %entry ], [ %le, %and.rhs ], !dbg !1597
  br i1 %val, label %assert_ok, label %assert_fail, !dbg !1597

assert_fail:                                      ; preds = %and.phi
  store %"char[]" { ptr @.panic_msg.88, i64 63 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg2, align 8
  store %"char[]" { ptr @.func.95, i64 8 }, ptr %indirectarg3, align 8
  %6 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %6(ptr align 8 %indirectarg, ptr align 8 %indirectarg2, ptr align 8 %indirectarg3, i32 1052) #6, !dbg !1600
  unreachable, !dbg !1600

assert_ok:                                        ; preds = %and.phi
    #dbg_declare(ptr %len, !1601, !DIExpression(), !1602)
  %ptradd = getelementptr inbounds i8, ptr %self, i64 8, !dbg !1602
  %7 = load i64, ptr %ptradd, align 8, !dbg !1602
  store i64 %7, ptr %len, align 8, !dbg !1602
    #dbg_declare(ptr %index, !1603, !DIExpression(), !1604)
  store i64 0, ptr %index, align 8, !dbg !1604
    #dbg_declare(ptr %ptr, !1605, !DIExpression(), !1606)
  %8 = load ptr, ptr %self, align 8, !dbg !1606
  store ptr %8, ptr %ptr, align 8, !dbg !1606
  br label %loop.cond, !dbg !1607

loop.cond:                                        ; preds = %loop.body, %assert_ok
  %9 = load i64, ptr %index, align 8, !dbg !1608
  %10 = load i64, ptr %len, align 8, !dbg !1608
  %lt = icmp ult i64 %9, %10, !dbg !1608
  br i1 %lt, label %and.rhs4, label %and.phi13, !dbg !1608

and.rhs4:                                         ; preds = %loop.cond
  %11 = load ptr, ptr %ptr, align 8, !dbg !1608
  %12 = load i64, ptr %index, align 8, !dbg !1608
  %ptradd5 = getelementptr inbounds i8, ptr %11, i64 %12, !dbg !1608
  %13 = load i8, ptr %ptradd5, align 1
  store i8 %13, ptr %c, align 1
  %14 = load i8, ptr %c, align 1
  store i8 %14, ptr %c6, align 1
  %15 = load i8, ptr %c6, align 1, !dbg !1610
  %zext = zext i8 %15 to i64, !dbg !1610
  %ge = icmp uge i64 %zext, 256, !dbg !1610
  %16 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !1610
  br i1 %16, label %panic, label %checkok, !dbg !1610

checkok:                                          ; preds = %and.rhs4
  %ptroffset = getelementptr inbounds [2 x i8], ptr @std.core.ascii.ASCII_LOOKUP, i64 %zext, !dbg !1610
  %17 = load i16, ptr %ptroffset, align 2, !dbg !1610
  %lshrl = lshr i16 %17, 10, !dbg !1610
  %18 = and i16 1, %lshrl, !dbg !1610
  %trunc = trunc i16 %18 to i8, !dbg !1610
  %19 = trunc i8 %trunc to i1, !dbg !1610
  br label %and.phi13, !dbg !1610

and.phi13:                                        ; preds = %checkok, %loop.cond
  %val14 = phi i1 [ false, %loop.cond ], [ %19, %checkok ], !dbg !1610
  br i1 %val14, label %loop.body, label %loop.exit, !dbg !1610

loop.body:                                        ; preds = %and.phi13
  %20 = load i64, ptr %index, align 8, !dbg !1608
  %add = add i64 %20, 1, !dbg !1608
  store i64 %add, ptr %index, align 8, !dbg !1608
  br label %loop.cond, !dbg !1608

loop.exit:                                        ; preds = %and.phi13
  %21 = load i64, ptr %len, align 8, !dbg !1614
  %22 = load i64, ptr %index, align 8, !dbg !1614
  %eq = icmp eq i64 %21, %22, !dbg !1614
  br i1 %eq, label %if.then, label %if.exit, !dbg !1614

if.then:                                          ; preds = %loop.exit
  store i64 ptrtoint (ptr @std.core.string.EMPTY_STRING to i64), ptr %reterr, align 8, !dbg !1614
  br label %err_retblock, !dbg !1614

if.exit:                                          ; preds = %loop.exit
    #dbg_declare(ptr %is_negative, !1615, !DIExpression(), !1616)
  store i8 0, ptr %is_negative, align 1, !dbg !1616
  %ptradd15 = getelementptr inbounds i8, ptr %self, i64 8, !dbg !1617
  %23 = load i64, ptr %ptradd15, align 8, !dbg !1617
  %24 = load ptr, ptr %self, align 8, !dbg !1617
  %25 = load i64, ptr %index, align 8, !dbg !1617
  %ge16 = icmp uge i64 %25, %23, !dbg !1617
  %26 = call i1 @llvm.expect.i1(i1 %ge16, i1 false), !dbg !1617
  br i1 %26, label %panic17, label %checkok27, !dbg !1617

checkok27:                                        ; preds = %if.exit
  %ptradd28 = getelementptr inbounds i8, ptr %24, i64 %25, !dbg !1617
  %27 = load i8, ptr %ptradd28, align 1
  store i8 %27, ptr %switch, align 1
  br label %switch.entry

switch.entry:                                     ; preds = %checkok27
  %28 = load i8, ptr %switch, align 1
  switch i8 %28, label %switch.default [
    i8 45, label %switch.case
    i8 43, label %switch.case31
  ]

switch.case:                                      ; preds = %switch.entry
  br label %if.then29, !dbg !1619

if.then29:                                        ; preds = %switch.case
  store i64 ptrtoint (ptr @std.core.string.NEGATIVE_VALUE to i64), ptr %reterr, align 8, !dbg !1619
  br label %err_retblock, !dbg !1619

switch.case31:                                    ; preds = %switch.entry
  %29 = load i64, ptr %index, align 8, !dbg !1621
  %add32 = add i64 %29, 1, !dbg !1621
  store i64 %add32, ptr %index, align 8, !dbg !1621
  br label %switch.exit, !dbg !1621

switch.default:                                   ; preds = %switch.entry
  br label %switch.exit, !dbg !1623

switch.exit:                                      ; preds = %switch.default, %switch.case31
  %30 = load i64, ptr %len, align 8, !dbg !1625
  %31 = load i64, ptr %index, align 8, !dbg !1625
  %eq33 = icmp eq i64 %30, %31, !dbg !1625
  br i1 %eq33, label %if.then34, label %if.exit35, !dbg !1625

if.then34:                                        ; preds = %switch.exit
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_INTEGER to i64), ptr %reterr, align 8, !dbg !1625
  br label %err_retblock, !dbg !1625

if.exit35:                                        ; preds = %switch.exit
    #dbg_declare(ptr %base_used, !1626, !DIExpression(), !1627)
  %32 = load i32, ptr %base1, align 4, !dbg !1627
  %sext = sext i32 %32 to i64, !dbg !1627
  store i64 %sext, ptr %base_used, align 8, !dbg !1627
  %ptradd36 = getelementptr inbounds i8, ptr %self, i64 8, !dbg !1628
  %33 = load i64, ptr %ptradd36, align 8, !dbg !1628
  %34 = load ptr, ptr %self, align 8, !dbg !1628
  %35 = load i64, ptr %index, align 8, !dbg !1628
  %ge37 = icmp uge i64 %35, %33, !dbg !1628
  %36 = call i1 @llvm.expect.i1(i1 %ge37, i1 false), !dbg !1628
  br i1 %36, label %panic38, label %checkok48, !dbg !1628

checkok48:                                        ; preds = %if.exit35
  %ptradd49 = getelementptr inbounds i8, ptr %34, i64 %35, !dbg !1628
  %37 = load i8, ptr %ptradd49, align 1, !dbg !1628
  %eq50 = icmp eq i8 %37, 48, !dbg !1628
  br i1 %eq50, label %and.rhs51, label %and.phi53, !dbg !1628

and.rhs51:                                        ; preds = %checkok48
  %38 = load i32, ptr %base1, align 4, !dbg !1628
  %eq52 = icmp eq i32 %38, 10, !dbg !1628
  br label %and.phi53, !dbg !1628

and.phi53:                                        ; preds = %and.rhs51, %checkok48
  %val54 = phi i1 [ false, %checkok48 ], [ %eq52, %and.rhs51 ], !dbg !1628
  br i1 %val54, label %if.then55, label %if.exit87, !dbg !1628

if.then55:                                        ; preds = %and.phi53
  %39 = load i64, ptr %index, align 8, !dbg !1629
  %add56 = add i64 %39, 1, !dbg !1629
  store i64 %add56, ptr %index, align 8, !dbg !1629
  %40 = load i64, ptr %index, align 8, !dbg !1631
  %41 = load i64, ptr %len, align 8, !dbg !1631
  %eq57 = icmp eq i64 %40, %41, !dbg !1631
  br i1 %eq57, label %if.then58, label %if.exit59, !dbg !1631

if.then58:                                        ; preds = %if.then55
  store i64 0, ptr %blockret, align 8, !dbg !1631
  br label %expr_block.exit, !dbg !1631

if.exit59:                                        ; preds = %if.then55
  %ptradd60 = getelementptr inbounds i8, ptr %self, i64 8, !dbg !1632
  %42 = load i64, ptr %ptradd60, align 8, !dbg !1632
  %43 = load ptr, ptr %self, align 8, !dbg !1632
  %44 = load i64, ptr %index, align 8, !dbg !1632
  %ge61 = icmp uge i64 %44, %42, !dbg !1632
  %45 = call i1 @llvm.expect.i1(i1 %ge61, i1 false), !dbg !1632
  br i1 %45, label %panic62, label %checkok72, !dbg !1632

checkok72:                                        ; preds = %if.exit59
  %ptradd73 = getelementptr inbounds i8, ptr %43, i64 %44, !dbg !1632
  %46 = load i8, ptr %ptradd73, align 1
  store i8 %46, ptr %switch74, align 1
  br label %switch.entry75

switch.entry75:                                   ; preds = %checkok72
  %47 = load i8, ptr %switch74, align 1
  switch i8 %47, label %switch.default82 [
    i8 120, label %switch.case76
    i8 88, label %switch.case76
    i8 98, label %switch.case78
    i8 66, label %switch.case78
    i8 111, label %switch.case80
    i8 79, label %switch.case80
  ]

switch.case76:                                    ; preds = %switch.entry75, %switch.entry75
  store i64 16, ptr %base_used, align 8, !dbg !1634
  %48 = load i64, ptr %index, align 8, !dbg !1636
  %add77 = add i64 %48, 1, !dbg !1636
  store i64 %add77, ptr %index, align 8, !dbg !1636
  br label %switch.exit83, !dbg !1636

switch.case78:                                    ; preds = %switch.entry75, %switch.entry75
  store i64 2, ptr %base_used, align 8, !dbg !1637
  %49 = load i64, ptr %index, align 8, !dbg !1639
  %add79 = add i64 %49, 1, !dbg !1639
  store i64 %add79, ptr %index, align 8, !dbg !1639
  br label %switch.exit83, !dbg !1639

switch.case80:                                    ; preds = %switch.entry75, %switch.entry75
  store i64 8, ptr %base_used, align 8, !dbg !1640
  %50 = load i64, ptr %index, align 8, !dbg !1642
  %add81 = add i64 %50, 1, !dbg !1642
  store i64 %add81, ptr %index, align 8, !dbg !1642
  br label %switch.exit83, !dbg !1642

switch.default82:                                 ; preds = %switch.entry75
  br label %switch.exit83, !dbg !1643

switch.exit83:                                    ; preds = %switch.default82, %switch.case80, %switch.case78, %switch.case76
  %51 = load i64, ptr %len, align 8, !dbg !1645
  %52 = load i64, ptr %index, align 8, !dbg !1645
  %eq84 = icmp eq i64 %51, %52, !dbg !1645
  br i1 %eq84, label %if.then85, label %if.exit86, !dbg !1645

if.then85:                                        ; preds = %switch.exit83
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_INTEGER to i64), ptr %reterr, align 8, !dbg !1645
  br label %err_retblock, !dbg !1645

if.exit86:                                        ; preds = %switch.exit83
  br label %if.exit87, !dbg !1645

if.exit87:                                        ; preds = %if.exit86, %and.phi53
    #dbg_declare(ptr %value, !1646, !DIExpression(), !1647)
  store i64 0, ptr %value, align 8, !dbg !1647
  br label %loop.cond88, !dbg !1648

loop.cond88:                                      ; preds = %loop.exit147, %if.exit87
  %53 = load i64, ptr %index, align 8, !dbg !1649
  %54 = load i64, ptr %len, align 8, !dbg !1649
  %neq = icmp ne i64 %53, %54, !dbg !1649
  br i1 %neq, label %loop.body89, label %loop.exit148, !dbg !1649

loop.body89:                                      ; preds = %loop.cond88
    #dbg_declare(ptr %c90, !1651, !DIExpression(), !1653)
  %ptradd91 = getelementptr inbounds i8, ptr %self, i64 8, !dbg !1653
  %55 = load i64, ptr %ptradd91, align 8, !dbg !1653
  %56 = load ptr, ptr %self, align 8, !dbg !1653
  %57 = load i64, ptr %index, align 8, !dbg !1653
  %add92 = add i64 %57, 1, !dbg !1653
  store i64 %add92, ptr %index, align 8, !dbg !1653
  %ge93 = icmp uge i64 %57, %55, !dbg !1653
  %58 = call i1 @llvm.expect.i1(i1 %ge93, i1 false), !dbg !1653
  br i1 %58, label %panic94, label %checkok104, !dbg !1653

checkok104:                                       ; preds = %loop.body89
  %ptradd105 = getelementptr inbounds i8, ptr %56, i64 %57, !dbg !1653
  %59 = load i8, ptr %ptradd105, align 1, !dbg !1653
  store i8 %59, ptr %c90, align 1, !dbg !1653
  store i8 1, ptr %switch106, align 1
  br label %switch.entry107

switch.entry107:                                  ; preds = %checkok104
  %60 = load i8, ptr %switch106, align 1
  %61 = trunc i8 %60 to i1
  %62 = load i64, ptr %base_used, align 8, !dbg !1654
  %gt108 = icmp ugt i64 10, %62, !dbg !1654
  br i1 %gt108, label %or.phi, label %or.rhs, !dbg !1654

or.rhs:                                           ; preds = %switch.entry107
  %63 = load i8, ptr %c90, align 1, !dbg !1654
  %lt109 = icmp ult i8 %63, 65, !dbg !1654
  br label %or.phi, !dbg !1654

or.phi:                                           ; preds = %or.rhs, %switch.entry107
  %val110 = phi i1 [ true, %switch.entry107 ], [ %lt109, %or.rhs ], !dbg !1654
  %eq111 = icmp eq i1 %val110, %61, !dbg !1654
  br i1 %eq111, label %switch.case112, label %next_if, !dbg !1654

switch.case112:                                   ; preds = %or.phi
  %64 = load i8, ptr %c90, align 1, !dbg !1656
  %sub = sub i8 %64, 48, !dbg !1656
  store i8 %sub, ptr %c90, align 1, !dbg !1656
  br label %switch.exit128, !dbg !1656

next_if:                                          ; preds = %or.phi
  %65 = load i8, ptr %c90, align 1, !dbg !1658
  %le113 = icmp ule i8 %65, 70, !dbg !1658
  %eq114 = icmp eq i1 %le113, %61, !dbg !1658
  br i1 %eq114, label %switch.case115, label %next_if117, !dbg !1658

switch.case115:                                   ; preds = %next_if
  %66 = load i8, ptr %c90, align 1, !dbg !1659
  %sub116 = sub i8 %66, 55, !dbg !1659
  store i8 %sub116, ptr %c90, align 1, !dbg !1659
  br label %switch.exit128, !dbg !1659

next_if117:                                       ; preds = %next_if
  %67 = load i8, ptr %c90, align 1, !dbg !1661
  %lt118 = icmp ult i8 %67, 97, !dbg !1661
  br i1 %lt118, label %or.phi121, label %or.rhs119, !dbg !1661

or.rhs119:                                        ; preds = %next_if117
  %68 = load i8, ptr %c90, align 1, !dbg !1661
  %gt120 = icmp ugt i8 %68, 102, !dbg !1661
  br label %or.phi121, !dbg !1661

or.phi121:                                        ; preds = %or.rhs119, %next_if117
  %val122 = phi i1 [ true, %next_if117 ], [ %gt120, %or.rhs119 ], !dbg !1661
  %eq123 = icmp eq i1 %val122, %61, !dbg !1661
  br i1 %eq123, label %switch.case124, label %next_if125, !dbg !1661

switch.case124:                                   ; preds = %or.phi121
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_INTEGER to i64), ptr %reterr, align 8, !dbg !1662
  br label %err_retblock, !dbg !1662

next_if125:                                       ; preds = %or.phi121
  br label %switch.default126, !dbg !1662

switch.default126:                                ; preds = %next_if125
  %69 = load i8, ptr %c90, align 1, !dbg !1664
  %sub127 = sub i8 %69, 87, !dbg !1664
  store i8 %sub127, ptr %c90, align 1, !dbg !1664
  br label %switch.exit128, !dbg !1664

switch.exit128:                                   ; preds = %switch.default126, %switch.case115, %switch.case112
  %70 = load i8, ptr %c90, align 1, !dbg !1666
  %zext129 = zext i8 %70 to i64, !dbg !1666
  %71 = load i64, ptr %base_used, align 8, !dbg !1666
  %ge130 = icmp uge i64 %zext129, %71, !dbg !1666
  br i1 %ge130, label %if.then131, label %if.exit132, !dbg !1666

if.then131:                                       ; preds = %switch.exit128
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_INTEGER to i64), ptr %reterr, align 8, !dbg !1666
  br label %err_retblock, !dbg !1666

if.exit132:                                       ; preds = %switch.exit128
  %72 = load i8, ptr %is_negative, align 1, !dbg !1667
  %73 = trunc i8 %72 to i1, !dbg !1667
  br i1 %73, label %if.then133, label %if.exit139, !dbg !1667

if.then133:                                       ; preds = %if.exit132
    #dbg_declare(ptr %new_value, !1670, !DIExpression(), !1672)
  %74 = load i64, ptr %value, align 8, !dbg !1672
  %75 = load i64, ptr %base_used, align 8, !dbg !1672
  %mul = mul i64 %74, %75, !dbg !1672
  %76 = load i8, ptr %c90, align 1, !dbg !1672
  %zext134 = zext i8 %76 to i64, !dbg !1672
  %sub135 = sub i64 %mul, %zext134, !dbg !1672
  store i64 %sub135, ptr %new_value, align 8, !dbg !1672
  %77 = load i64, ptr %new_value, align 8, !dbg !1673
  %78 = load i64, ptr %value, align 8, !dbg !1673
  %gt136 = icmp ugt i64 %77, %78, !dbg !1673
  br i1 %gt136, label %if.then137, label %if.exit138, !dbg !1673

if.then137:                                       ; preds = %if.then133
  store i64 ptrtoint (ptr @std.core.string.INTEGER_OVERFLOW to i64), ptr %reterr, align 8, !dbg !1673
  br label %err_retblock, !dbg !1673

if.exit138:                                       ; preds = %if.then133
  %79 = load i64, ptr %new_value, align 8, !dbg !1674
  store i64 %79, ptr %value, align 8, !dbg !1674
  br label %loop.exit147, !dbg !1675

if.exit139:                                       ; preds = %if.exit132
    #dbg_declare(ptr %new_value140, !1676, !DIExpression(), !1677)
  %80 = load i64, ptr %value, align 8, !dbg !1677
  %81 = load i64, ptr %base_used, align 8, !dbg !1677
  %mul141 = mul i64 %80, %81, !dbg !1677
  %82 = load i8, ptr %c90, align 1, !dbg !1677
  %zext142 = zext i8 %82 to i64, !dbg !1677
  %add143 = add i64 %mul141, %zext142, !dbg !1677
  store i64 %add143, ptr %new_value140, align 8, !dbg !1677
  %83 = load i64, ptr %new_value140, align 8, !dbg !1678
  %84 = load i64, ptr %value, align 8, !dbg !1678
  %lt144 = icmp ult i64 %83, %84, !dbg !1678
  br i1 %lt144, label %if.then145, label %if.exit146, !dbg !1678

if.then145:                                       ; preds = %if.exit139
  store i64 ptrtoint (ptr @std.core.string.INTEGER_OVERFLOW to i64), ptr %reterr, align 8, !dbg !1678
  br label %err_retblock, !dbg !1678

if.exit146:                                       ; preds = %if.exit139
  %85 = load i64, ptr %new_value140, align 8, !dbg !1679
  store i64 %85, ptr %value, align 8, !dbg !1679
  br label %loop.exit147, !dbg !1679

loop.exit147:                                     ; preds = %if.exit146, %if.exit138
  br label %loop.cond88, !dbg !1679

loop.exit148:                                     ; preds = %loop.cond88
  %86 = load i64, ptr %value, align 8, !dbg !1680
  store i64 %86, ptr %blockret, align 8, !dbg !1680
  br label %expr_block.exit, !dbg !1680

expr_block.exit:                                  ; preds = %loop.exit148, %if.then58
  %87 = load i64, ptr %blockret, align 8, !dbg !1680
  store i64 %87, ptr %0, align 8, !dbg !1680
  ret i64 0, !dbg !1680

err_retblock:                                     ; preds = %if.then145, %if.then137, %if.then131, %switch.case124, %if.then85, %if.then34, %if.then29, %if.then
  %88 = load i64, ptr %reterr, align 8, !dbg !1680
  ret i64 %88, !dbg !1680

panic:                                            ; preds = %and.rhs4
  store i64 256, ptr %taddr, align 8
  %89 = insertvalue %any undef, ptr %taddr, 0
  %90 = insertvalue %any %89, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %zext, ptr %taddr7, align 8
  %91 = insertvalue %any undef, ptr %taddr7, 0
  %92 = insertvalue %any %91, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg8, align 8
  store %"char[]" { ptr @.file.73, i64 8 }, ptr %indirectarg9, align 8
  store %"char[]" { ptr @.func.95, i64 8 }, ptr %indirectarg10, align 8
  store %any %90, ptr %varargslots, align 16
  %ptradd11 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %92, ptr %ptradd11, align 16
  %93 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %93, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg12, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg8, ptr align 8 %indirectarg9, ptr align 8 %indirectarg10, i32 19, ptr align 8 %indirectarg12) #6, !dbg !1610
  unreachable, !dbg !1610

panic17:                                          ; preds = %if.exit
  store i64 %23, ptr %taddr18, align 8
  %94 = insertvalue %any undef, ptr %taddr18, 0
  %95 = insertvalue %any %94, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %25, ptr %taddr19, align 8
  %96 = insertvalue %any undef, ptr %taddr19, 0
  %97 = insertvalue %any %96, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg20, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg21, align 8
  store %"char[]" { ptr @.func.95, i64 8 }, ptr %indirectarg22, align 8
  store %any %95, ptr %varargslots23, align 16
  %ptradd24 = getelementptr inbounds i8, ptr %varargslots23, i64 16
  store %any %97, ptr %ptradd24, align 16
  %98 = insertvalue %"any[]" undef, ptr %varargslots23, 0
  %"$$temp25" = insertvalue %"any[]" %98, i64 2, 1
  store %"any[]" %"$$temp25", ptr %indirectarg26, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg20, ptr align 8 %indirectarg21, ptr align 8 %indirectarg22, i32 980, ptr align 8 %indirectarg26) #6, !dbg !1617
  unreachable, !dbg !1617

panic38:                                          ; preds = %if.exit35
  store i64 %33, ptr %taddr39, align 8
  %99 = insertvalue %any undef, ptr %taddr39, 0
  %100 = insertvalue %any %99, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %35, ptr %taddr40, align 8
  %101 = insertvalue %any undef, ptr %taddr40, 0
  %102 = insertvalue %any %101, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg41, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg42, align 8
  store %"char[]" { ptr @.func.95, i64 8 }, ptr %indirectarg43, align 8
  store %any %100, ptr %varargslots44, align 16
  %ptradd45 = getelementptr inbounds i8, ptr %varargslots44, i64 16
  store %any %102, ptr %ptradd45, align 16
  %103 = insertvalue %"any[]" undef, ptr %varargslots44, 0
  %"$$temp46" = insertvalue %"any[]" %103, i64 2, 1
  store %"any[]" %"$$temp46", ptr %indirectarg47, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg41, ptr align 8 %indirectarg42, ptr align 8 %indirectarg43, i32 993, ptr align 8 %indirectarg47) #6, !dbg !1628
  unreachable, !dbg !1628

panic62:                                          ; preds = %if.exit59
  store i64 %42, ptr %taddr63, align 8
  %104 = insertvalue %any undef, ptr %taddr63, 0
  %105 = insertvalue %any %104, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %44, ptr %taddr64, align 8
  %106 = insertvalue %any undef, ptr %taddr64, 0
  %107 = insertvalue %any %106, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg65, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg66, align 8
  store %"char[]" { ptr @.func.95, i64 8 }, ptr %indirectarg67, align 8
  store %any %105, ptr %varargslots68, align 16
  %ptradd69 = getelementptr inbounds i8, ptr %varargslots68, i64 16
  store %any %107, ptr %ptradd69, align 16
  %108 = insertvalue %"any[]" undef, ptr %varargslots68, 0
  %"$$temp70" = insertvalue %"any[]" %108, i64 2, 1
  store %"any[]" %"$$temp70", ptr %indirectarg71, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg65, ptr align 8 %indirectarg66, ptr align 8 %indirectarg67, i32 997, ptr align 8 %indirectarg71) #6, !dbg !1632
  unreachable, !dbg !1632

panic94:                                          ; preds = %loop.body89
  store i64 %55, ptr %taddr95, align 8
  %109 = insertvalue %any undef, ptr %taddr95, 0
  %110 = insertvalue %any %109, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %57, ptr %taddr96, align 8
  %111 = insertvalue %any undef, ptr %taddr96, 0
  %112 = insertvalue %any %111, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg97, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg98, align 8
  store %"char[]" { ptr @.func.95, i64 8 }, ptr %indirectarg99, align 8
  store %any %110, ptr %varargslots100, align 16
  %ptradd101 = getelementptr inbounds i8, ptr %varargslots100, i64 16
  store %any %112, ptr %ptradd101, align 16
  %113 = insertvalue %"any[]" undef, ptr %varargslots100, 0
  %"$$temp102" = insertvalue %"any[]" %113, i64 2, 1
  store %"any[]" %"$$temp102", ptr %indirectarg103, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg97, ptr align 8 %indirectarg98, ptr align 8 %indirectarg99, i32 1019, ptr align 8 %indirectarg103) #6, !dbg !1653
  unreachable, !dbg !1653
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.core.String.to_uint(ptr %0, ptr align 8 %1, i32 %2) #0 comdat !dbg !1681 {
entry:
  %base = alloca i32, align 4
  %reterr = alloca i64, align 8
  %self = alloca %"char[]", align 8
  %base1 = alloca i32, align 4
  %blockret = alloca i32, align 4
  %indirectarg = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %indirectarg3 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %index = alloca i64, align 8
  %ptr = alloca ptr, align 8
  %c = alloca i8, align 1
  %c6 = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr7 = alloca i64, align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg12 = alloca %"any[]", align 8
  %is_negative = alloca i8, align 1
  %taddr18 = alloca i64, align 8
  %taddr19 = alloca i64, align 8
  %indirectarg20 = alloca %"char[]", align 8
  %indirectarg21 = alloca %"char[]", align 8
  %indirectarg22 = alloca %"char[]", align 8
  %varargslots23 = alloca [2 x %any], align 16
  %indirectarg26 = alloca %"any[]", align 8
  %switch = alloca i8, align 1
  %base_used = alloca i32, align 4
  %taddr39 = alloca i64, align 8
  %taddr40 = alloca i64, align 8
  %indirectarg41 = alloca %"char[]", align 8
  %indirectarg42 = alloca %"char[]", align 8
  %indirectarg43 = alloca %"char[]", align 8
  %varargslots44 = alloca [2 x %any], align 16
  %indirectarg47 = alloca %"any[]", align 8
  %taddr63 = alloca i64, align 8
  %taddr64 = alloca i64, align 8
  %indirectarg65 = alloca %"char[]", align 8
  %indirectarg66 = alloca %"char[]", align 8
  %indirectarg67 = alloca %"char[]", align 8
  %varargslots68 = alloca [2 x %any], align 16
  %indirectarg71 = alloca %"any[]", align 8
  %switch74 = alloca i8, align 1
  %value = alloca i32, align 4
  %c90 = alloca i8, align 1
  %taddr95 = alloca i64, align 8
  %taddr96 = alloca i64, align 8
  %indirectarg97 = alloca %"char[]", align 8
  %indirectarg98 = alloca %"char[]", align 8
  %indirectarg99 = alloca %"char[]", align 8
  %varargslots100 = alloca [2 x %any], align 16
  %indirectarg103 = alloca %"any[]", align 8
  %switch106 = alloca i8, align 1
  %new_value = alloca i32, align 4
  %new_value140 = alloca i32, align 4
    #dbg_declare(ptr %1, !1685, !DIExpression(), !1686)
  store i32 %2, ptr %base, align 4
    #dbg_declare(ptr %base, !1687, !DIExpression(), !1686)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %self, ptr align 8 %1, i32 16, i1 false)
  %3 = load i32, ptr %base, align 4
  store i32 %3, ptr %base1, align 4
  %4 = load i32, ptr %base1, align 4, !dbg !1688
  %gt = icmp sgt i32 %4, 0, !dbg !1688
  br i1 %gt, label %and.rhs, label %and.phi, !dbg !1688

and.rhs:                                          ; preds = %entry
  %5 = load i32, ptr %base1, align 4, !dbg !1688
  %le = icmp sle i32 %5, 16, !dbg !1688
  br label %and.phi, !dbg !1688

and.phi:                                          ; preds = %and.rhs, %entry
  %val = phi i1 [ false, %entry ], [ %le, %and.rhs ], !dbg !1688
  br i1 %val, label %assert_ok, label %assert_fail, !dbg !1688

assert_fail:                                      ; preds = %and.phi
  store %"char[]" { ptr @.panic_msg.88, i64 63 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg2, align 8
  store %"char[]" { ptr @.func.96, i64 7 }, ptr %indirectarg3, align 8
  %6 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %6(ptr align 8 %indirectarg, ptr align 8 %indirectarg2, ptr align 8 %indirectarg3, i32 1053) #6, !dbg !1691
  unreachable, !dbg !1691

assert_ok:                                        ; preds = %and.phi
    #dbg_declare(ptr %len, !1692, !DIExpression(), !1693)
  %ptradd = getelementptr inbounds i8, ptr %self, i64 8, !dbg !1693
  %7 = load i64, ptr %ptradd, align 8, !dbg !1693
  store i64 %7, ptr %len, align 8, !dbg !1693
    #dbg_declare(ptr %index, !1694, !DIExpression(), !1695)
  store i64 0, ptr %index, align 8, !dbg !1695
    #dbg_declare(ptr %ptr, !1696, !DIExpression(), !1697)
  %8 = load ptr, ptr %self, align 8, !dbg !1697
  store ptr %8, ptr %ptr, align 8, !dbg !1697
  br label %loop.cond, !dbg !1698

loop.cond:                                        ; preds = %loop.body, %assert_ok
  %9 = load i64, ptr %index, align 8, !dbg !1699
  %10 = load i64, ptr %len, align 8, !dbg !1699
  %lt = icmp ult i64 %9, %10, !dbg !1699
  br i1 %lt, label %and.rhs4, label %and.phi13, !dbg !1699

and.rhs4:                                         ; preds = %loop.cond
  %11 = load ptr, ptr %ptr, align 8, !dbg !1699
  %12 = load i64, ptr %index, align 8, !dbg !1699
  %ptradd5 = getelementptr inbounds i8, ptr %11, i64 %12, !dbg !1699
  %13 = load i8, ptr %ptradd5, align 1
  store i8 %13, ptr %c, align 1
  %14 = load i8, ptr %c, align 1
  store i8 %14, ptr %c6, align 1
  %15 = load i8, ptr %c6, align 1, !dbg !1701
  %zext = zext i8 %15 to i64, !dbg !1701
  %ge = icmp uge i64 %zext, 256, !dbg !1701
  %16 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !1701
  br i1 %16, label %panic, label %checkok, !dbg !1701

checkok:                                          ; preds = %and.rhs4
  %ptroffset = getelementptr inbounds [2 x i8], ptr @std.core.ascii.ASCII_LOOKUP, i64 %zext, !dbg !1701
  %17 = load i16, ptr %ptroffset, align 2, !dbg !1701
  %lshrl = lshr i16 %17, 10, !dbg !1701
  %18 = and i16 1, %lshrl, !dbg !1701
  %trunc = trunc i16 %18 to i8, !dbg !1701
  %19 = trunc i8 %trunc to i1, !dbg !1701
  br label %and.phi13, !dbg !1701

and.phi13:                                        ; preds = %checkok, %loop.cond
  %val14 = phi i1 [ false, %loop.cond ], [ %19, %checkok ], !dbg !1701
  br i1 %val14, label %loop.body, label %loop.exit, !dbg !1701

loop.body:                                        ; preds = %and.phi13
  %20 = load i64, ptr %index, align 8, !dbg !1699
  %add = add i64 %20, 1, !dbg !1699
  store i64 %add, ptr %index, align 8, !dbg !1699
  br label %loop.cond, !dbg !1699

loop.exit:                                        ; preds = %and.phi13
  %21 = load i64, ptr %len, align 8, !dbg !1705
  %22 = load i64, ptr %index, align 8, !dbg !1705
  %eq = icmp eq i64 %21, %22, !dbg !1705
  br i1 %eq, label %if.then, label %if.exit, !dbg !1705

if.then:                                          ; preds = %loop.exit
  store i64 ptrtoint (ptr @std.core.string.EMPTY_STRING to i64), ptr %reterr, align 8, !dbg !1705
  br label %err_retblock, !dbg !1705

if.exit:                                          ; preds = %loop.exit
    #dbg_declare(ptr %is_negative, !1706, !DIExpression(), !1707)
  store i8 0, ptr %is_negative, align 1, !dbg !1707
  %ptradd15 = getelementptr inbounds i8, ptr %self, i64 8, !dbg !1708
  %23 = load i64, ptr %ptradd15, align 8, !dbg !1708
  %24 = load ptr, ptr %self, align 8, !dbg !1708
  %25 = load i64, ptr %index, align 8, !dbg !1708
  %ge16 = icmp uge i64 %25, %23, !dbg !1708
  %26 = call i1 @llvm.expect.i1(i1 %ge16, i1 false), !dbg !1708
  br i1 %26, label %panic17, label %checkok27, !dbg !1708

checkok27:                                        ; preds = %if.exit
  %ptradd28 = getelementptr inbounds i8, ptr %24, i64 %25, !dbg !1708
  %27 = load i8, ptr %ptradd28, align 1
  store i8 %27, ptr %switch, align 1
  br label %switch.entry

switch.entry:                                     ; preds = %checkok27
  %28 = load i8, ptr %switch, align 1
  switch i8 %28, label %switch.default [
    i8 45, label %switch.case
    i8 43, label %switch.case31
  ]

switch.case:                                      ; preds = %switch.entry
  br label %if.then29, !dbg !1710

if.then29:                                        ; preds = %switch.case
  store i64 ptrtoint (ptr @std.core.string.NEGATIVE_VALUE to i64), ptr %reterr, align 8, !dbg !1710
  br label %err_retblock, !dbg !1710

switch.case31:                                    ; preds = %switch.entry
  %29 = load i64, ptr %index, align 8, !dbg !1712
  %add32 = add i64 %29, 1, !dbg !1712
  store i64 %add32, ptr %index, align 8, !dbg !1712
  br label %switch.exit, !dbg !1712

switch.default:                                   ; preds = %switch.entry
  br label %switch.exit, !dbg !1714

switch.exit:                                      ; preds = %switch.default, %switch.case31
  %30 = load i64, ptr %len, align 8, !dbg !1716
  %31 = load i64, ptr %index, align 8, !dbg !1716
  %eq33 = icmp eq i64 %30, %31, !dbg !1716
  br i1 %eq33, label %if.then34, label %if.exit35, !dbg !1716

if.then34:                                        ; preds = %switch.exit
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_INTEGER to i64), ptr %reterr, align 8, !dbg !1716
  br label %err_retblock, !dbg !1716

if.exit35:                                        ; preds = %switch.exit
    #dbg_declare(ptr %base_used, !1717, !DIExpression(), !1718)
  %32 = load i32, ptr %base1, align 4, !dbg !1718
  store i32 %32, ptr %base_used, align 4, !dbg !1718
  %ptradd36 = getelementptr inbounds i8, ptr %self, i64 8, !dbg !1719
  %33 = load i64, ptr %ptradd36, align 8, !dbg !1719
  %34 = load ptr, ptr %self, align 8, !dbg !1719
  %35 = load i64, ptr %index, align 8, !dbg !1719
  %ge37 = icmp uge i64 %35, %33, !dbg !1719
  %36 = call i1 @llvm.expect.i1(i1 %ge37, i1 false), !dbg !1719
  br i1 %36, label %panic38, label %checkok48, !dbg !1719

checkok48:                                        ; preds = %if.exit35
  %ptradd49 = getelementptr inbounds i8, ptr %34, i64 %35, !dbg !1719
  %37 = load i8, ptr %ptradd49, align 1, !dbg !1719
  %eq50 = icmp eq i8 %37, 48, !dbg !1719
  br i1 %eq50, label %and.rhs51, label %and.phi53, !dbg !1719

and.rhs51:                                        ; preds = %checkok48
  %38 = load i32, ptr %base1, align 4, !dbg !1719
  %eq52 = icmp eq i32 %38, 10, !dbg !1719
  br label %and.phi53, !dbg !1719

and.phi53:                                        ; preds = %and.rhs51, %checkok48
  %val54 = phi i1 [ false, %checkok48 ], [ %eq52, %and.rhs51 ], !dbg !1719
  br i1 %val54, label %if.then55, label %if.exit87, !dbg !1719

if.then55:                                        ; preds = %and.phi53
  %39 = load i64, ptr %index, align 8, !dbg !1720
  %add56 = add i64 %39, 1, !dbg !1720
  store i64 %add56, ptr %index, align 8, !dbg !1720
  %40 = load i64, ptr %index, align 8, !dbg !1722
  %41 = load i64, ptr %len, align 8, !dbg !1722
  %eq57 = icmp eq i64 %40, %41, !dbg !1722
  br i1 %eq57, label %if.then58, label %if.exit59, !dbg !1722

if.then58:                                        ; preds = %if.then55
  store i32 0, ptr %blockret, align 4, !dbg !1722
  br label %expr_block.exit, !dbg !1722

if.exit59:                                        ; preds = %if.then55
  %ptradd60 = getelementptr inbounds i8, ptr %self, i64 8, !dbg !1723
  %42 = load i64, ptr %ptradd60, align 8, !dbg !1723
  %43 = load ptr, ptr %self, align 8, !dbg !1723
  %44 = load i64, ptr %index, align 8, !dbg !1723
  %ge61 = icmp uge i64 %44, %42, !dbg !1723
  %45 = call i1 @llvm.expect.i1(i1 %ge61, i1 false), !dbg !1723
  br i1 %45, label %panic62, label %checkok72, !dbg !1723

checkok72:                                        ; preds = %if.exit59
  %ptradd73 = getelementptr inbounds i8, ptr %43, i64 %44, !dbg !1723
  %46 = load i8, ptr %ptradd73, align 1
  store i8 %46, ptr %switch74, align 1
  br label %switch.entry75

switch.entry75:                                   ; preds = %checkok72
  %47 = load i8, ptr %switch74, align 1
  switch i8 %47, label %switch.default82 [
    i8 120, label %switch.case76
    i8 88, label %switch.case76
    i8 98, label %switch.case78
    i8 66, label %switch.case78
    i8 111, label %switch.case80
    i8 79, label %switch.case80
  ]

switch.case76:                                    ; preds = %switch.entry75, %switch.entry75
  store i32 16, ptr %base_used, align 4, !dbg !1725
  %48 = load i64, ptr %index, align 8, !dbg !1727
  %add77 = add i64 %48, 1, !dbg !1727
  store i64 %add77, ptr %index, align 8, !dbg !1727
  br label %switch.exit83, !dbg !1727

switch.case78:                                    ; preds = %switch.entry75, %switch.entry75
  store i32 2, ptr %base_used, align 4, !dbg !1728
  %49 = load i64, ptr %index, align 8, !dbg !1730
  %add79 = add i64 %49, 1, !dbg !1730
  store i64 %add79, ptr %index, align 8, !dbg !1730
  br label %switch.exit83, !dbg !1730

switch.case80:                                    ; preds = %switch.entry75, %switch.entry75
  store i32 8, ptr %base_used, align 4, !dbg !1731
  %50 = load i64, ptr %index, align 8, !dbg !1733
  %add81 = add i64 %50, 1, !dbg !1733
  store i64 %add81, ptr %index, align 8, !dbg !1733
  br label %switch.exit83, !dbg !1733

switch.default82:                                 ; preds = %switch.entry75
  br label %switch.exit83, !dbg !1734

switch.exit83:                                    ; preds = %switch.default82, %switch.case80, %switch.case78, %switch.case76
  %51 = load i64, ptr %len, align 8, !dbg !1736
  %52 = load i64, ptr %index, align 8, !dbg !1736
  %eq84 = icmp eq i64 %51, %52, !dbg !1736
  br i1 %eq84, label %if.then85, label %if.exit86, !dbg !1736

if.then85:                                        ; preds = %switch.exit83
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_INTEGER to i64), ptr %reterr, align 8, !dbg !1736
  br label %err_retblock, !dbg !1736

if.exit86:                                        ; preds = %switch.exit83
  br label %if.exit87, !dbg !1736

if.exit87:                                        ; preds = %if.exit86, %and.phi53
    #dbg_declare(ptr %value, !1737, !DIExpression(), !1738)
  store i32 0, ptr %value, align 4, !dbg !1738
  br label %loop.cond88, !dbg !1739

loop.cond88:                                      ; preds = %loop.exit147, %if.exit87
  %53 = load i64, ptr %index, align 8, !dbg !1740
  %54 = load i64, ptr %len, align 8, !dbg !1740
  %neq = icmp ne i64 %53, %54, !dbg !1740
  br i1 %neq, label %loop.body89, label %loop.exit148, !dbg !1740

loop.body89:                                      ; preds = %loop.cond88
    #dbg_declare(ptr %c90, !1742, !DIExpression(), !1744)
  %ptradd91 = getelementptr inbounds i8, ptr %self, i64 8, !dbg !1744
  %55 = load i64, ptr %ptradd91, align 8, !dbg !1744
  %56 = load ptr, ptr %self, align 8, !dbg !1744
  %57 = load i64, ptr %index, align 8, !dbg !1744
  %add92 = add i64 %57, 1, !dbg !1744
  store i64 %add92, ptr %index, align 8, !dbg !1744
  %ge93 = icmp uge i64 %57, %55, !dbg !1744
  %58 = call i1 @llvm.expect.i1(i1 %ge93, i1 false), !dbg !1744
  br i1 %58, label %panic94, label %checkok104, !dbg !1744

checkok104:                                       ; preds = %loop.body89
  %ptradd105 = getelementptr inbounds i8, ptr %56, i64 %57, !dbg !1744
  %59 = load i8, ptr %ptradd105, align 1, !dbg !1744
  store i8 %59, ptr %c90, align 1, !dbg !1744
  store i8 1, ptr %switch106, align 1
  br label %switch.entry107

switch.entry107:                                  ; preds = %checkok104
  %60 = load i8, ptr %switch106, align 1
  %61 = trunc i8 %60 to i1
  %62 = load i32, ptr %base_used, align 4, !dbg !1745
  %gt108 = icmp ugt i32 10, %62, !dbg !1745
  br i1 %gt108, label %or.phi, label %or.rhs, !dbg !1745

or.rhs:                                           ; preds = %switch.entry107
  %63 = load i8, ptr %c90, align 1, !dbg !1745
  %lt109 = icmp ult i8 %63, 65, !dbg !1745
  br label %or.phi, !dbg !1745

or.phi:                                           ; preds = %or.rhs, %switch.entry107
  %val110 = phi i1 [ true, %switch.entry107 ], [ %lt109, %or.rhs ], !dbg !1745
  %eq111 = icmp eq i1 %val110, %61, !dbg !1745
  br i1 %eq111, label %switch.case112, label %next_if, !dbg !1745

switch.case112:                                   ; preds = %or.phi
  %64 = load i8, ptr %c90, align 1, !dbg !1747
  %sub = sub i8 %64, 48, !dbg !1747
  store i8 %sub, ptr %c90, align 1, !dbg !1747
  br label %switch.exit128, !dbg !1747

next_if:                                          ; preds = %or.phi
  %65 = load i8, ptr %c90, align 1, !dbg !1749
  %le113 = icmp ule i8 %65, 70, !dbg !1749
  %eq114 = icmp eq i1 %le113, %61, !dbg !1749
  br i1 %eq114, label %switch.case115, label %next_if117, !dbg !1749

switch.case115:                                   ; preds = %next_if
  %66 = load i8, ptr %c90, align 1, !dbg !1750
  %sub116 = sub i8 %66, 55, !dbg !1750
  store i8 %sub116, ptr %c90, align 1, !dbg !1750
  br label %switch.exit128, !dbg !1750

next_if117:                                       ; preds = %next_if
  %67 = load i8, ptr %c90, align 1, !dbg !1752
  %lt118 = icmp ult i8 %67, 97, !dbg !1752
  br i1 %lt118, label %or.phi121, label %or.rhs119, !dbg !1752

or.rhs119:                                        ; preds = %next_if117
  %68 = load i8, ptr %c90, align 1, !dbg !1752
  %gt120 = icmp ugt i8 %68, 102, !dbg !1752
  br label %or.phi121, !dbg !1752

or.phi121:                                        ; preds = %or.rhs119, %next_if117
  %val122 = phi i1 [ true, %next_if117 ], [ %gt120, %or.rhs119 ], !dbg !1752
  %eq123 = icmp eq i1 %val122, %61, !dbg !1752
  br i1 %eq123, label %switch.case124, label %next_if125, !dbg !1752

switch.case124:                                   ; preds = %or.phi121
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_INTEGER to i64), ptr %reterr, align 8, !dbg !1753
  br label %err_retblock, !dbg !1753

next_if125:                                       ; preds = %or.phi121
  br label %switch.default126, !dbg !1753

switch.default126:                                ; preds = %next_if125
  %69 = load i8, ptr %c90, align 1, !dbg !1755
  %sub127 = sub i8 %69, 87, !dbg !1755
  store i8 %sub127, ptr %c90, align 1, !dbg !1755
  br label %switch.exit128, !dbg !1755

switch.exit128:                                   ; preds = %switch.default126, %switch.case115, %switch.case112
  %70 = load i8, ptr %c90, align 1, !dbg !1757
  %zext129 = zext i8 %70 to i32, !dbg !1757
  %71 = load i32, ptr %base_used, align 4, !dbg !1757
  %ge130 = icmp uge i32 %zext129, %71, !dbg !1757
  br i1 %ge130, label %if.then131, label %if.exit132, !dbg !1757

if.then131:                                       ; preds = %switch.exit128
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_INTEGER to i64), ptr %reterr, align 8, !dbg !1757
  br label %err_retblock, !dbg !1757

if.exit132:                                       ; preds = %switch.exit128
  %72 = load i8, ptr %is_negative, align 1, !dbg !1758
  %73 = trunc i8 %72 to i1, !dbg !1758
  br i1 %73, label %if.then133, label %if.exit139, !dbg !1758

if.then133:                                       ; preds = %if.exit132
    #dbg_declare(ptr %new_value, !1761, !DIExpression(), !1763)
  %74 = load i32, ptr %value, align 4, !dbg !1763
  %75 = load i32, ptr %base_used, align 4, !dbg !1763
  %mul = mul i32 %74, %75, !dbg !1763
  %76 = load i8, ptr %c90, align 1, !dbg !1763
  %zext134 = zext i8 %76 to i32, !dbg !1763
  %sub135 = sub i32 %mul, %zext134, !dbg !1763
  store i32 %sub135, ptr %new_value, align 4, !dbg !1763
  %77 = load i32, ptr %new_value, align 4, !dbg !1764
  %78 = load i32, ptr %value, align 4, !dbg !1764
  %gt136 = icmp ugt i32 %77, %78, !dbg !1764
  br i1 %gt136, label %if.then137, label %if.exit138, !dbg !1764

if.then137:                                       ; preds = %if.then133
  store i64 ptrtoint (ptr @std.core.string.INTEGER_OVERFLOW to i64), ptr %reterr, align 8, !dbg !1764
  br label %err_retblock, !dbg !1764

if.exit138:                                       ; preds = %if.then133
  %79 = load i32, ptr %new_value, align 4, !dbg !1765
  store i32 %79, ptr %value, align 4, !dbg !1765
  br label %loop.exit147, !dbg !1766

if.exit139:                                       ; preds = %if.exit132
    #dbg_declare(ptr %new_value140, !1767, !DIExpression(), !1768)
  %80 = load i32, ptr %value, align 4, !dbg !1768
  %81 = load i32, ptr %base_used, align 4, !dbg !1768
  %mul141 = mul i32 %80, %81, !dbg !1768
  %82 = load i8, ptr %c90, align 1, !dbg !1768
  %zext142 = zext i8 %82 to i32, !dbg !1768
  %add143 = add i32 %mul141, %zext142, !dbg !1768
  store i32 %add143, ptr %new_value140, align 4, !dbg !1768
  %83 = load i32, ptr %new_value140, align 4, !dbg !1769
  %84 = load i32, ptr %value, align 4, !dbg !1769
  %lt144 = icmp ult i32 %83, %84, !dbg !1769
  br i1 %lt144, label %if.then145, label %if.exit146, !dbg !1769

if.then145:                                       ; preds = %if.exit139
  store i64 ptrtoint (ptr @std.core.string.INTEGER_OVERFLOW to i64), ptr %reterr, align 8, !dbg !1769
  br label %err_retblock, !dbg !1769

if.exit146:                                       ; preds = %if.exit139
  %85 = load i32, ptr %new_value140, align 4, !dbg !1770
  store i32 %85, ptr %value, align 4, !dbg !1770
  br label %loop.exit147, !dbg !1770

loop.exit147:                                     ; preds = %if.exit146, %if.exit138
  br label %loop.cond88, !dbg !1770

loop.exit148:                                     ; preds = %loop.cond88
  %86 = load i32, ptr %value, align 4, !dbg !1771
  store i32 %86, ptr %blockret, align 4, !dbg !1771
  br label %expr_block.exit, !dbg !1771

expr_block.exit:                                  ; preds = %loop.exit148, %if.then58
  %87 = load i32, ptr %blockret, align 4, !dbg !1771
  store i32 %87, ptr %0, align 4, !dbg !1771
  ret i64 0, !dbg !1771

err_retblock:                                     ; preds = %if.then145, %if.then137, %if.then131, %switch.case124, %if.then85, %if.then34, %if.then29, %if.then
  %88 = load i64, ptr %reterr, align 8, !dbg !1771
  ret i64 %88, !dbg !1771

panic:                                            ; preds = %and.rhs4
  store i64 256, ptr %taddr, align 8
  %89 = insertvalue %any undef, ptr %taddr, 0
  %90 = insertvalue %any %89, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %zext, ptr %taddr7, align 8
  %91 = insertvalue %any undef, ptr %taddr7, 0
  %92 = insertvalue %any %91, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg8, align 8
  store %"char[]" { ptr @.file.73, i64 8 }, ptr %indirectarg9, align 8
  store %"char[]" { ptr @.func.96, i64 7 }, ptr %indirectarg10, align 8
  store %any %90, ptr %varargslots, align 16
  %ptradd11 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %92, ptr %ptradd11, align 16
  %93 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %93, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg12, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg8, ptr align 8 %indirectarg9, ptr align 8 %indirectarg10, i32 19, ptr align 8 %indirectarg12) #6, !dbg !1701
  unreachable, !dbg !1701

panic17:                                          ; preds = %if.exit
  store i64 %23, ptr %taddr18, align 8
  %94 = insertvalue %any undef, ptr %taddr18, 0
  %95 = insertvalue %any %94, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %25, ptr %taddr19, align 8
  %96 = insertvalue %any undef, ptr %taddr19, 0
  %97 = insertvalue %any %96, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg20, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg21, align 8
  store %"char[]" { ptr @.func.96, i64 7 }, ptr %indirectarg22, align 8
  store %any %95, ptr %varargslots23, align 16
  %ptradd24 = getelementptr inbounds i8, ptr %varargslots23, i64 16
  store %any %97, ptr %ptradd24, align 16
  %98 = insertvalue %"any[]" undef, ptr %varargslots23, 0
  %"$$temp25" = insertvalue %"any[]" %98, i64 2, 1
  store %"any[]" %"$$temp25", ptr %indirectarg26, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg20, ptr align 8 %indirectarg21, ptr align 8 %indirectarg22, i32 980, ptr align 8 %indirectarg26) #6, !dbg !1708
  unreachable, !dbg !1708

panic38:                                          ; preds = %if.exit35
  store i64 %33, ptr %taddr39, align 8
  %99 = insertvalue %any undef, ptr %taddr39, 0
  %100 = insertvalue %any %99, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %35, ptr %taddr40, align 8
  %101 = insertvalue %any undef, ptr %taddr40, 0
  %102 = insertvalue %any %101, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg41, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg42, align 8
  store %"char[]" { ptr @.func.96, i64 7 }, ptr %indirectarg43, align 8
  store %any %100, ptr %varargslots44, align 16
  %ptradd45 = getelementptr inbounds i8, ptr %varargslots44, i64 16
  store %any %102, ptr %ptradd45, align 16
  %103 = insertvalue %"any[]" undef, ptr %varargslots44, 0
  %"$$temp46" = insertvalue %"any[]" %103, i64 2, 1
  store %"any[]" %"$$temp46", ptr %indirectarg47, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg41, ptr align 8 %indirectarg42, ptr align 8 %indirectarg43, i32 993, ptr align 8 %indirectarg47) #6, !dbg !1719
  unreachable, !dbg !1719

panic62:                                          ; preds = %if.exit59
  store i64 %42, ptr %taddr63, align 8
  %104 = insertvalue %any undef, ptr %taddr63, 0
  %105 = insertvalue %any %104, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %44, ptr %taddr64, align 8
  %106 = insertvalue %any undef, ptr %taddr64, 0
  %107 = insertvalue %any %106, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg65, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg66, align 8
  store %"char[]" { ptr @.func.96, i64 7 }, ptr %indirectarg67, align 8
  store %any %105, ptr %varargslots68, align 16
  %ptradd69 = getelementptr inbounds i8, ptr %varargslots68, i64 16
  store %any %107, ptr %ptradd69, align 16
  %108 = insertvalue %"any[]" undef, ptr %varargslots68, 0
  %"$$temp70" = insertvalue %"any[]" %108, i64 2, 1
  store %"any[]" %"$$temp70", ptr %indirectarg71, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg65, ptr align 8 %indirectarg66, ptr align 8 %indirectarg67, i32 997, ptr align 8 %indirectarg71) #6, !dbg !1723
  unreachable, !dbg !1723

panic94:                                          ; preds = %loop.body89
  store i64 %55, ptr %taddr95, align 8
  %109 = insertvalue %any undef, ptr %taddr95, 0
  %110 = insertvalue %any %109, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %57, ptr %taddr96, align 8
  %111 = insertvalue %any undef, ptr %taddr96, 0
  %112 = insertvalue %any %111, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg97, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg98, align 8
  store %"char[]" { ptr @.func.96, i64 7 }, ptr %indirectarg99, align 8
  store %any %110, ptr %varargslots100, align 16
  %ptradd101 = getelementptr inbounds i8, ptr %varargslots100, i64 16
  store %any %112, ptr %ptradd101, align 16
  %113 = insertvalue %"any[]" undef, ptr %varargslots100, 0
  %"$$temp102" = insertvalue %"any[]" %113, i64 2, 1
  store %"any[]" %"$$temp102", ptr %indirectarg103, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg97, ptr align 8 %indirectarg98, ptr align 8 %indirectarg99, i32 1019, ptr align 8 %indirectarg103) #6, !dbg !1744
  unreachable, !dbg !1744
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.core.String.to_ushort(ptr %0, ptr align 8 %1, i32 %2) #0 comdat !dbg !1772 {
entry:
  %base = alloca i32, align 4
  %reterr = alloca i64, align 8
  %self = alloca %"char[]", align 8
  %base1 = alloca i32, align 4
  %blockret = alloca i16, align 2
  %indirectarg = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %indirectarg3 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %index = alloca i64, align 8
  %ptr = alloca ptr, align 8
  %c = alloca i8, align 1
  %c6 = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr7 = alloca i64, align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg12 = alloca %"any[]", align 8
  %is_negative = alloca i8, align 1
  %taddr18 = alloca i64, align 8
  %taddr19 = alloca i64, align 8
  %indirectarg20 = alloca %"char[]", align 8
  %indirectarg21 = alloca %"char[]", align 8
  %indirectarg22 = alloca %"char[]", align 8
  %varargslots23 = alloca [2 x %any], align 16
  %indirectarg26 = alloca %"any[]", align 8
  %switch = alloca i8, align 1
  %base_used = alloca i16, align 2
  %taddr40 = alloca i64, align 8
  %taddr41 = alloca i64, align 8
  %indirectarg42 = alloca %"char[]", align 8
  %indirectarg43 = alloca %"char[]", align 8
  %indirectarg44 = alloca %"char[]", align 8
  %varargslots45 = alloca [2 x %any], align 16
  %indirectarg48 = alloca %"any[]", align 8
  %taddr64 = alloca i64, align 8
  %taddr65 = alloca i64, align 8
  %indirectarg66 = alloca %"char[]", align 8
  %indirectarg67 = alloca %"char[]", align 8
  %indirectarg68 = alloca %"char[]", align 8
  %varargslots69 = alloca [2 x %any], align 16
  %indirectarg72 = alloca %"any[]", align 8
  %switch75 = alloca i8, align 1
  %value = alloca i16, align 2
  %c91 = alloca i8, align 1
  %taddr96 = alloca i64, align 8
  %taddr97 = alloca i64, align 8
  %indirectarg98 = alloca %"char[]", align 8
  %indirectarg99 = alloca %"char[]", align 8
  %indirectarg100 = alloca %"char[]", align 8
  %varargslots101 = alloca [2 x %any], align 16
  %indirectarg104 = alloca %"any[]", align 8
  %switch107 = alloca i8, align 1
  %new_value = alloca i16, align 2
  %new_value145 = alloca i16, align 2
    #dbg_declare(ptr %1, !1775, !DIExpression(), !1776)
  store i32 %2, ptr %base, align 4
    #dbg_declare(ptr %base, !1777, !DIExpression(), !1776)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %self, ptr align 8 %1, i32 16, i1 false)
  %3 = load i32, ptr %base, align 4
  store i32 %3, ptr %base1, align 4
  %4 = load i32, ptr %base1, align 4, !dbg !1778
  %gt = icmp sgt i32 %4, 0, !dbg !1778
  br i1 %gt, label %and.rhs, label %and.phi, !dbg !1778

and.rhs:                                          ; preds = %entry
  %5 = load i32, ptr %base1, align 4, !dbg !1778
  %le = icmp sle i32 %5, 16, !dbg !1778
  br label %and.phi, !dbg !1778

and.phi:                                          ; preds = %and.rhs, %entry
  %val = phi i1 [ false, %entry ], [ %le, %and.rhs ], !dbg !1778
  br i1 %val, label %assert_ok, label %assert_fail, !dbg !1778

assert_fail:                                      ; preds = %and.phi
  store %"char[]" { ptr @.panic_msg.88, i64 63 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg2, align 8
  store %"char[]" { ptr @.func.97, i64 9 }, ptr %indirectarg3, align 8
  %6 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %6(ptr align 8 %indirectarg, ptr align 8 %indirectarg2, ptr align 8 %indirectarg3, i32 1054) #6, !dbg !1781
  unreachable, !dbg !1781

assert_ok:                                        ; preds = %and.phi
    #dbg_declare(ptr %len, !1782, !DIExpression(), !1783)
  %ptradd = getelementptr inbounds i8, ptr %self, i64 8, !dbg !1783
  %7 = load i64, ptr %ptradd, align 8, !dbg !1783
  store i64 %7, ptr %len, align 8, !dbg !1783
    #dbg_declare(ptr %index, !1784, !DIExpression(), !1785)
  store i64 0, ptr %index, align 8, !dbg !1785
    #dbg_declare(ptr %ptr, !1786, !DIExpression(), !1787)
  %8 = load ptr, ptr %self, align 8, !dbg !1787
  store ptr %8, ptr %ptr, align 8, !dbg !1787
  br label %loop.cond, !dbg !1788

loop.cond:                                        ; preds = %loop.body, %assert_ok
  %9 = load i64, ptr %index, align 8, !dbg !1789
  %10 = load i64, ptr %len, align 8, !dbg !1789
  %lt = icmp ult i64 %9, %10, !dbg !1789
  br i1 %lt, label %and.rhs4, label %and.phi13, !dbg !1789

and.rhs4:                                         ; preds = %loop.cond
  %11 = load ptr, ptr %ptr, align 8, !dbg !1789
  %12 = load i64, ptr %index, align 8, !dbg !1789
  %ptradd5 = getelementptr inbounds i8, ptr %11, i64 %12, !dbg !1789
  %13 = load i8, ptr %ptradd5, align 1
  store i8 %13, ptr %c, align 1
  %14 = load i8, ptr %c, align 1
  store i8 %14, ptr %c6, align 1
  %15 = load i8, ptr %c6, align 1, !dbg !1791
  %zext = zext i8 %15 to i64, !dbg !1791
  %ge = icmp uge i64 %zext, 256, !dbg !1791
  %16 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !1791
  br i1 %16, label %panic, label %checkok, !dbg !1791

checkok:                                          ; preds = %and.rhs4
  %ptroffset = getelementptr inbounds [2 x i8], ptr @std.core.ascii.ASCII_LOOKUP, i64 %zext, !dbg !1791
  %17 = load i16, ptr %ptroffset, align 2, !dbg !1791
  %lshrl = lshr i16 %17, 10, !dbg !1791
  %18 = and i16 1, %lshrl, !dbg !1791
  %trunc = trunc i16 %18 to i8, !dbg !1791
  %19 = trunc i8 %trunc to i1, !dbg !1791
  br label %and.phi13, !dbg !1791

and.phi13:                                        ; preds = %checkok, %loop.cond
  %val14 = phi i1 [ false, %loop.cond ], [ %19, %checkok ], !dbg !1791
  br i1 %val14, label %loop.body, label %loop.exit, !dbg !1791

loop.body:                                        ; preds = %and.phi13
  %20 = load i64, ptr %index, align 8, !dbg !1789
  %add = add i64 %20, 1, !dbg !1789
  store i64 %add, ptr %index, align 8, !dbg !1789
  br label %loop.cond, !dbg !1789

loop.exit:                                        ; preds = %and.phi13
  %21 = load i64, ptr %len, align 8, !dbg !1795
  %22 = load i64, ptr %index, align 8, !dbg !1795
  %eq = icmp eq i64 %21, %22, !dbg !1795
  br i1 %eq, label %if.then, label %if.exit, !dbg !1795

if.then:                                          ; preds = %loop.exit
  store i64 ptrtoint (ptr @std.core.string.EMPTY_STRING to i64), ptr %reterr, align 8, !dbg !1795
  br label %err_retblock, !dbg !1795

if.exit:                                          ; preds = %loop.exit
    #dbg_declare(ptr %is_negative, !1796, !DIExpression(), !1797)
  store i8 0, ptr %is_negative, align 1, !dbg !1797
  %ptradd15 = getelementptr inbounds i8, ptr %self, i64 8, !dbg !1798
  %23 = load i64, ptr %ptradd15, align 8, !dbg !1798
  %24 = load ptr, ptr %self, align 8, !dbg !1798
  %25 = load i64, ptr %index, align 8, !dbg !1798
  %ge16 = icmp uge i64 %25, %23, !dbg !1798
  %26 = call i1 @llvm.expect.i1(i1 %ge16, i1 false), !dbg !1798
  br i1 %26, label %panic17, label %checkok27, !dbg !1798

checkok27:                                        ; preds = %if.exit
  %ptradd28 = getelementptr inbounds i8, ptr %24, i64 %25, !dbg !1798
  %27 = load i8, ptr %ptradd28, align 1
  store i8 %27, ptr %switch, align 1
  br label %switch.entry

switch.entry:                                     ; preds = %checkok27
  %28 = load i8, ptr %switch, align 1
  switch i8 %28, label %switch.default [
    i8 45, label %switch.case
    i8 43, label %switch.case31
  ]

switch.case:                                      ; preds = %switch.entry
  br label %if.then29, !dbg !1800

if.then29:                                        ; preds = %switch.case
  store i64 ptrtoint (ptr @std.core.string.NEGATIVE_VALUE to i64), ptr %reterr, align 8, !dbg !1800
  br label %err_retblock, !dbg !1800

switch.case31:                                    ; preds = %switch.entry
  %29 = load i64, ptr %index, align 8, !dbg !1802
  %add32 = add i64 %29, 1, !dbg !1802
  store i64 %add32, ptr %index, align 8, !dbg !1802
  br label %switch.exit, !dbg !1802

switch.default:                                   ; preds = %switch.entry
  br label %switch.exit, !dbg !1804

switch.exit:                                      ; preds = %switch.default, %switch.case31
  %30 = load i64, ptr %len, align 8, !dbg !1806
  %31 = load i64, ptr %index, align 8, !dbg !1806
  %eq33 = icmp eq i64 %30, %31, !dbg !1806
  br i1 %eq33, label %if.then34, label %if.exit35, !dbg !1806

if.then34:                                        ; preds = %switch.exit
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_INTEGER to i64), ptr %reterr, align 8, !dbg !1806
  br label %err_retblock, !dbg !1806

if.exit35:                                        ; preds = %switch.exit
    #dbg_declare(ptr %base_used, !1807, !DIExpression(), !1808)
  %32 = load i32, ptr %base1, align 4, !dbg !1808
  %trunc36 = trunc i32 %32 to i16, !dbg !1808
  store i16 %trunc36, ptr %base_used, align 2, !dbg !1808
  %ptradd37 = getelementptr inbounds i8, ptr %self, i64 8, !dbg !1809
  %33 = load i64, ptr %ptradd37, align 8, !dbg !1809
  %34 = load ptr, ptr %self, align 8, !dbg !1809
  %35 = load i64, ptr %index, align 8, !dbg !1809
  %ge38 = icmp uge i64 %35, %33, !dbg !1809
  %36 = call i1 @llvm.expect.i1(i1 %ge38, i1 false), !dbg !1809
  br i1 %36, label %panic39, label %checkok49, !dbg !1809

checkok49:                                        ; preds = %if.exit35
  %ptradd50 = getelementptr inbounds i8, ptr %34, i64 %35, !dbg !1809
  %37 = load i8, ptr %ptradd50, align 1, !dbg !1809
  %eq51 = icmp eq i8 %37, 48, !dbg !1809
  br i1 %eq51, label %and.rhs52, label %and.phi54, !dbg !1809

and.rhs52:                                        ; preds = %checkok49
  %38 = load i32, ptr %base1, align 4, !dbg !1809
  %eq53 = icmp eq i32 %38, 10, !dbg !1809
  br label %and.phi54, !dbg !1809

and.phi54:                                        ; preds = %and.rhs52, %checkok49
  %val55 = phi i1 [ false, %checkok49 ], [ %eq53, %and.rhs52 ], !dbg !1809
  br i1 %val55, label %if.then56, label %if.exit88, !dbg !1809

if.then56:                                        ; preds = %and.phi54
  %39 = load i64, ptr %index, align 8, !dbg !1810
  %add57 = add i64 %39, 1, !dbg !1810
  store i64 %add57, ptr %index, align 8, !dbg !1810
  %40 = load i64, ptr %index, align 8, !dbg !1812
  %41 = load i64, ptr %len, align 8, !dbg !1812
  %eq58 = icmp eq i64 %40, %41, !dbg !1812
  br i1 %eq58, label %if.then59, label %if.exit60, !dbg !1812

if.then59:                                        ; preds = %if.then56
  store i16 0, ptr %blockret, align 2, !dbg !1812
  br label %expr_block.exit, !dbg !1812

if.exit60:                                        ; preds = %if.then56
  %ptradd61 = getelementptr inbounds i8, ptr %self, i64 8, !dbg !1813
  %42 = load i64, ptr %ptradd61, align 8, !dbg !1813
  %43 = load ptr, ptr %self, align 8, !dbg !1813
  %44 = load i64, ptr %index, align 8, !dbg !1813
  %ge62 = icmp uge i64 %44, %42, !dbg !1813
  %45 = call i1 @llvm.expect.i1(i1 %ge62, i1 false), !dbg !1813
  br i1 %45, label %panic63, label %checkok73, !dbg !1813

checkok73:                                        ; preds = %if.exit60
  %ptradd74 = getelementptr inbounds i8, ptr %43, i64 %44, !dbg !1813
  %46 = load i8, ptr %ptradd74, align 1
  store i8 %46, ptr %switch75, align 1
  br label %switch.entry76

switch.entry76:                                   ; preds = %checkok73
  %47 = load i8, ptr %switch75, align 1
  switch i8 %47, label %switch.default83 [
    i8 120, label %switch.case77
    i8 88, label %switch.case77
    i8 98, label %switch.case79
    i8 66, label %switch.case79
    i8 111, label %switch.case81
    i8 79, label %switch.case81
  ]

switch.case77:                                    ; preds = %switch.entry76, %switch.entry76
  store i16 16, ptr %base_used, align 2, !dbg !1815
  %48 = load i64, ptr %index, align 8, !dbg !1817
  %add78 = add i64 %48, 1, !dbg !1817
  store i64 %add78, ptr %index, align 8, !dbg !1817
  br label %switch.exit84, !dbg !1817

switch.case79:                                    ; preds = %switch.entry76, %switch.entry76
  store i16 2, ptr %base_used, align 2, !dbg !1818
  %49 = load i64, ptr %index, align 8, !dbg !1820
  %add80 = add i64 %49, 1, !dbg !1820
  store i64 %add80, ptr %index, align 8, !dbg !1820
  br label %switch.exit84, !dbg !1820

switch.case81:                                    ; preds = %switch.entry76, %switch.entry76
  store i16 8, ptr %base_used, align 2, !dbg !1821
  %50 = load i64, ptr %index, align 8, !dbg !1823
  %add82 = add i64 %50, 1, !dbg !1823
  store i64 %add82, ptr %index, align 8, !dbg !1823
  br label %switch.exit84, !dbg !1823

switch.default83:                                 ; preds = %switch.entry76
  br label %switch.exit84, !dbg !1824

switch.exit84:                                    ; preds = %switch.default83, %switch.case81, %switch.case79, %switch.case77
  %51 = load i64, ptr %len, align 8, !dbg !1826
  %52 = load i64, ptr %index, align 8, !dbg !1826
  %eq85 = icmp eq i64 %51, %52, !dbg !1826
  br i1 %eq85, label %if.then86, label %if.exit87, !dbg !1826

if.then86:                                        ; preds = %switch.exit84
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_INTEGER to i64), ptr %reterr, align 8, !dbg !1826
  br label %err_retblock, !dbg !1826

if.exit87:                                        ; preds = %switch.exit84
  br label %if.exit88, !dbg !1826

if.exit88:                                        ; preds = %if.exit87, %and.phi54
    #dbg_declare(ptr %value, !1827, !DIExpression(), !1828)
  store i16 0, ptr %value, align 2, !dbg !1828
  br label %loop.cond89, !dbg !1829

loop.cond89:                                      ; preds = %loop.exit155, %if.exit88
  %53 = load i64, ptr %index, align 8, !dbg !1830
  %54 = load i64, ptr %len, align 8, !dbg !1830
  %neq = icmp ne i64 %53, %54, !dbg !1830
  br i1 %neq, label %loop.body90, label %loop.exit156, !dbg !1830

loop.body90:                                      ; preds = %loop.cond89
    #dbg_declare(ptr %c91, !1832, !DIExpression(), !1834)
  %ptradd92 = getelementptr inbounds i8, ptr %self, i64 8, !dbg !1834
  %55 = load i64, ptr %ptradd92, align 8, !dbg !1834
  %56 = load ptr, ptr %self, align 8, !dbg !1834
  %57 = load i64, ptr %index, align 8, !dbg !1834
  %add93 = add i64 %57, 1, !dbg !1834
  store i64 %add93, ptr %index, align 8, !dbg !1834
  %ge94 = icmp uge i64 %57, %55, !dbg !1834
  %58 = call i1 @llvm.expect.i1(i1 %ge94, i1 false), !dbg !1834
  br i1 %58, label %panic95, label %checkok105, !dbg !1834

checkok105:                                       ; preds = %loop.body90
  %ptradd106 = getelementptr inbounds i8, ptr %56, i64 %57, !dbg !1834
  %59 = load i8, ptr %ptradd106, align 1, !dbg !1834
  store i8 %59, ptr %c91, align 1, !dbg !1834
  store i8 1, ptr %switch107, align 1
  br label %switch.entry108

switch.entry108:                                  ; preds = %checkok105
  %60 = load i8, ptr %switch107, align 1
  %61 = trunc i8 %60 to i1
  %62 = load i16, ptr %base_used, align 2, !dbg !1835
  %zext109 = zext i16 %62 to i32, !dbg !1835
  %gt110 = icmp ugt i32 10, %zext109, !dbg !1835
  br i1 %gt110, label %or.phi, label %or.rhs, !dbg !1835

or.rhs:                                           ; preds = %switch.entry108
  %63 = load i8, ptr %c91, align 1, !dbg !1835
  %lt111 = icmp ult i8 %63, 65, !dbg !1835
  br label %or.phi, !dbg !1835

or.phi:                                           ; preds = %or.rhs, %switch.entry108
  %val112 = phi i1 [ true, %switch.entry108 ], [ %lt111, %or.rhs ], !dbg !1835
  %eq113 = icmp eq i1 %val112, %61, !dbg !1835
  br i1 %eq113, label %switch.case114, label %next_if, !dbg !1835

switch.case114:                                   ; preds = %or.phi
  %64 = load i8, ptr %c91, align 1, !dbg !1837
  %sub = sub i8 %64, 48, !dbg !1837
  store i8 %sub, ptr %c91, align 1, !dbg !1837
  br label %switch.exit130, !dbg !1837

next_if:                                          ; preds = %or.phi
  %65 = load i8, ptr %c91, align 1, !dbg !1839
  %le115 = icmp ule i8 %65, 70, !dbg !1839
  %eq116 = icmp eq i1 %le115, %61, !dbg !1839
  br i1 %eq116, label %switch.case117, label %next_if119, !dbg !1839

switch.case117:                                   ; preds = %next_if
  %66 = load i8, ptr %c91, align 1, !dbg !1840
  %sub118 = sub i8 %66, 55, !dbg !1840
  store i8 %sub118, ptr %c91, align 1, !dbg !1840
  br label %switch.exit130, !dbg !1840

next_if119:                                       ; preds = %next_if
  %67 = load i8, ptr %c91, align 1, !dbg !1842
  %lt120 = icmp ult i8 %67, 97, !dbg !1842
  br i1 %lt120, label %or.phi123, label %or.rhs121, !dbg !1842

or.rhs121:                                        ; preds = %next_if119
  %68 = load i8, ptr %c91, align 1, !dbg !1842
  %gt122 = icmp ugt i8 %68, 102, !dbg !1842
  br label %or.phi123, !dbg !1842

or.phi123:                                        ; preds = %or.rhs121, %next_if119
  %val124 = phi i1 [ true, %next_if119 ], [ %gt122, %or.rhs121 ], !dbg !1842
  %eq125 = icmp eq i1 %val124, %61, !dbg !1842
  br i1 %eq125, label %switch.case126, label %next_if127, !dbg !1842

switch.case126:                                   ; preds = %or.phi123
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_INTEGER to i64), ptr %reterr, align 8, !dbg !1843
  br label %err_retblock, !dbg !1843

next_if127:                                       ; preds = %or.phi123
  br label %switch.default128, !dbg !1843

switch.default128:                                ; preds = %next_if127
  %69 = load i8, ptr %c91, align 1, !dbg !1845
  %sub129 = sub i8 %69, 87, !dbg !1845
  store i8 %sub129, ptr %c91, align 1, !dbg !1845
  br label %switch.exit130, !dbg !1845

switch.exit130:                                   ; preds = %switch.default128, %switch.case117, %switch.case114
  %70 = load i8, ptr %c91, align 1, !dbg !1847
  %zext131 = zext i8 %70 to i16, !dbg !1847
  %71 = load i16, ptr %base_used, align 2, !dbg !1847
  %ge132 = icmp uge i16 %zext131, %71, !dbg !1847
  br i1 %ge132, label %if.then133, label %if.exit134, !dbg !1847

if.then133:                                       ; preds = %switch.exit130
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_INTEGER to i64), ptr %reterr, align 8, !dbg !1847
  br label %err_retblock, !dbg !1847

if.exit134:                                       ; preds = %switch.exit130
  %72 = load i8, ptr %is_negative, align 1, !dbg !1848
  %73 = trunc i8 %72 to i1, !dbg !1848
  br i1 %73, label %if.then135, label %if.exit144, !dbg !1848

if.then135:                                       ; preds = %if.exit134
    #dbg_declare(ptr %new_value, !1851, !DIExpression(), !1853)
  %74 = load i16, ptr %value, align 2, !dbg !1853
  %zext136 = zext i16 %74 to i32, !dbg !1853
  %75 = load i16, ptr %base_used, align 2, !dbg !1853
  %zext137 = zext i16 %75 to i32, !dbg !1853
  %mul = mul i32 %zext136, %zext137, !dbg !1853
  %76 = load i8, ptr %c91, align 1, !dbg !1853
  %zext138 = zext i8 %76 to i32, !dbg !1853
  %sub139 = sub i32 %mul, %zext138, !dbg !1853
  %trunc140 = trunc i32 %sub139 to i16, !dbg !1853
  store i16 %trunc140, ptr %new_value, align 2, !dbg !1853
  %77 = load i16, ptr %new_value, align 2, !dbg !1854
  %78 = load i16, ptr %value, align 2, !dbg !1854
  %gt141 = icmp ugt i16 %77, %78, !dbg !1854
  br i1 %gt141, label %if.then142, label %if.exit143, !dbg !1854

if.then142:                                       ; preds = %if.then135
  store i64 ptrtoint (ptr @std.core.string.INTEGER_OVERFLOW to i64), ptr %reterr, align 8, !dbg !1854
  br label %err_retblock, !dbg !1854

if.exit143:                                       ; preds = %if.then135
  %79 = load i16, ptr %new_value, align 2, !dbg !1855
  store i16 %79, ptr %value, align 2, !dbg !1855
  br label %loop.exit155, !dbg !1856

if.exit144:                                       ; preds = %if.exit134
    #dbg_declare(ptr %new_value145, !1857, !DIExpression(), !1858)
  %80 = load i16, ptr %value, align 2, !dbg !1858
  %zext146 = zext i16 %80 to i32, !dbg !1858
  %81 = load i16, ptr %base_used, align 2, !dbg !1858
  %zext147 = zext i16 %81 to i32, !dbg !1858
  %mul148 = mul i32 %zext146, %zext147, !dbg !1858
  %82 = load i8, ptr %c91, align 1, !dbg !1858
  %zext149 = zext i8 %82 to i32, !dbg !1858
  %add150 = add i32 %mul148, %zext149, !dbg !1858
  %trunc151 = trunc i32 %add150 to i16, !dbg !1858
  store i16 %trunc151, ptr %new_value145, align 2, !dbg !1858
  %83 = load i16, ptr %new_value145, align 2, !dbg !1859
  %84 = load i16, ptr %value, align 2, !dbg !1859
  %lt152 = icmp ult i16 %83, %84, !dbg !1859
  br i1 %lt152, label %if.then153, label %if.exit154, !dbg !1859

if.then153:                                       ; preds = %if.exit144
  store i64 ptrtoint (ptr @std.core.string.INTEGER_OVERFLOW to i64), ptr %reterr, align 8, !dbg !1859
  br label %err_retblock, !dbg !1859

if.exit154:                                       ; preds = %if.exit144
  %85 = load i16, ptr %new_value145, align 2, !dbg !1860
  store i16 %85, ptr %value, align 2, !dbg !1860
  br label %loop.exit155, !dbg !1860

loop.exit155:                                     ; preds = %if.exit154, %if.exit143
  br label %loop.cond89, !dbg !1860

loop.exit156:                                     ; preds = %loop.cond89
  %86 = load i16, ptr %value, align 2, !dbg !1861
  store i16 %86, ptr %blockret, align 2, !dbg !1861
  br label %expr_block.exit, !dbg !1861

expr_block.exit:                                  ; preds = %loop.exit156, %if.then59
  %87 = load i16, ptr %blockret, align 2, !dbg !1861
  store i16 %87, ptr %0, align 2, !dbg !1861
  ret i64 0, !dbg !1861

err_retblock:                                     ; preds = %if.then153, %if.then142, %if.then133, %switch.case126, %if.then86, %if.then34, %if.then29, %if.then
  %88 = load i64, ptr %reterr, align 8, !dbg !1861
  ret i64 %88, !dbg !1861

panic:                                            ; preds = %and.rhs4
  store i64 256, ptr %taddr, align 8
  %89 = insertvalue %any undef, ptr %taddr, 0
  %90 = insertvalue %any %89, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %zext, ptr %taddr7, align 8
  %91 = insertvalue %any undef, ptr %taddr7, 0
  %92 = insertvalue %any %91, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg8, align 8
  store %"char[]" { ptr @.file.73, i64 8 }, ptr %indirectarg9, align 8
  store %"char[]" { ptr @.func.97, i64 9 }, ptr %indirectarg10, align 8
  store %any %90, ptr %varargslots, align 16
  %ptradd11 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %92, ptr %ptradd11, align 16
  %93 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %93, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg12, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg8, ptr align 8 %indirectarg9, ptr align 8 %indirectarg10, i32 19, ptr align 8 %indirectarg12) #6, !dbg !1791
  unreachable, !dbg !1791

panic17:                                          ; preds = %if.exit
  store i64 %23, ptr %taddr18, align 8
  %94 = insertvalue %any undef, ptr %taddr18, 0
  %95 = insertvalue %any %94, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %25, ptr %taddr19, align 8
  %96 = insertvalue %any undef, ptr %taddr19, 0
  %97 = insertvalue %any %96, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg20, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg21, align 8
  store %"char[]" { ptr @.func.97, i64 9 }, ptr %indirectarg22, align 8
  store %any %95, ptr %varargslots23, align 16
  %ptradd24 = getelementptr inbounds i8, ptr %varargslots23, i64 16
  store %any %97, ptr %ptradd24, align 16
  %98 = insertvalue %"any[]" undef, ptr %varargslots23, 0
  %"$$temp25" = insertvalue %"any[]" %98, i64 2, 1
  store %"any[]" %"$$temp25", ptr %indirectarg26, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg20, ptr align 8 %indirectarg21, ptr align 8 %indirectarg22, i32 980, ptr align 8 %indirectarg26) #6, !dbg !1798
  unreachable, !dbg !1798

panic39:                                          ; preds = %if.exit35
  store i64 %33, ptr %taddr40, align 8
  %99 = insertvalue %any undef, ptr %taddr40, 0
  %100 = insertvalue %any %99, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %35, ptr %taddr41, align 8
  %101 = insertvalue %any undef, ptr %taddr41, 0
  %102 = insertvalue %any %101, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg42, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg43, align 8
  store %"char[]" { ptr @.func.97, i64 9 }, ptr %indirectarg44, align 8
  store %any %100, ptr %varargslots45, align 16
  %ptradd46 = getelementptr inbounds i8, ptr %varargslots45, i64 16
  store %any %102, ptr %ptradd46, align 16
  %103 = insertvalue %"any[]" undef, ptr %varargslots45, 0
  %"$$temp47" = insertvalue %"any[]" %103, i64 2, 1
  store %"any[]" %"$$temp47", ptr %indirectarg48, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg42, ptr align 8 %indirectarg43, ptr align 8 %indirectarg44, i32 993, ptr align 8 %indirectarg48) #6, !dbg !1809
  unreachable, !dbg !1809

panic63:                                          ; preds = %if.exit60
  store i64 %42, ptr %taddr64, align 8
  %104 = insertvalue %any undef, ptr %taddr64, 0
  %105 = insertvalue %any %104, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %44, ptr %taddr65, align 8
  %106 = insertvalue %any undef, ptr %taddr65, 0
  %107 = insertvalue %any %106, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg66, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg67, align 8
  store %"char[]" { ptr @.func.97, i64 9 }, ptr %indirectarg68, align 8
  store %any %105, ptr %varargslots69, align 16
  %ptradd70 = getelementptr inbounds i8, ptr %varargslots69, i64 16
  store %any %107, ptr %ptradd70, align 16
  %108 = insertvalue %"any[]" undef, ptr %varargslots69, 0
  %"$$temp71" = insertvalue %"any[]" %108, i64 2, 1
  store %"any[]" %"$$temp71", ptr %indirectarg72, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg66, ptr align 8 %indirectarg67, ptr align 8 %indirectarg68, i32 997, ptr align 8 %indirectarg72) #6, !dbg !1813
  unreachable, !dbg !1813

panic95:                                          ; preds = %loop.body90
  store i64 %55, ptr %taddr96, align 8
  %109 = insertvalue %any undef, ptr %taddr96, 0
  %110 = insertvalue %any %109, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %57, ptr %taddr97, align 8
  %111 = insertvalue %any undef, ptr %taddr97, 0
  %112 = insertvalue %any %111, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg98, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg99, align 8
  store %"char[]" { ptr @.func.97, i64 9 }, ptr %indirectarg100, align 8
  store %any %110, ptr %varargslots101, align 16
  %ptradd102 = getelementptr inbounds i8, ptr %varargslots101, i64 16
  store %any %112, ptr %ptradd102, align 16
  %113 = insertvalue %"any[]" undef, ptr %varargslots101, 0
  %"$$temp103" = insertvalue %"any[]" %113, i64 2, 1
  store %"any[]" %"$$temp103", ptr %indirectarg104, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg98, ptr align 8 %indirectarg99, ptr align 8 %indirectarg100, i32 1019, ptr align 8 %indirectarg104) #6, !dbg !1834
  unreachable, !dbg !1834
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.core.String.to_uchar(ptr %0, ptr align 8 %1, i32 %2) #0 comdat !dbg !1862 {
entry:
  %base = alloca i32, align 4
  %reterr = alloca i64, align 8
  %self = alloca %"char[]", align 8
  %base1 = alloca i32, align 4
  %blockret = alloca i8, align 1
  %indirectarg = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %indirectarg3 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %index = alloca i64, align 8
  %ptr = alloca ptr, align 8
  %c = alloca i8, align 1
  %c6 = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr7 = alloca i64, align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg12 = alloca %"any[]", align 8
  %is_negative = alloca i8, align 1
  %taddr18 = alloca i64, align 8
  %taddr19 = alloca i64, align 8
  %indirectarg20 = alloca %"char[]", align 8
  %indirectarg21 = alloca %"char[]", align 8
  %indirectarg22 = alloca %"char[]", align 8
  %varargslots23 = alloca [2 x %any], align 16
  %indirectarg26 = alloca %"any[]", align 8
  %switch = alloca i8, align 1
  %base_used = alloca i8, align 1
  %taddr40 = alloca i64, align 8
  %taddr41 = alloca i64, align 8
  %indirectarg42 = alloca %"char[]", align 8
  %indirectarg43 = alloca %"char[]", align 8
  %indirectarg44 = alloca %"char[]", align 8
  %varargslots45 = alloca [2 x %any], align 16
  %indirectarg48 = alloca %"any[]", align 8
  %taddr64 = alloca i64, align 8
  %taddr65 = alloca i64, align 8
  %indirectarg66 = alloca %"char[]", align 8
  %indirectarg67 = alloca %"char[]", align 8
  %indirectarg68 = alloca %"char[]", align 8
  %varargslots69 = alloca [2 x %any], align 16
  %indirectarg72 = alloca %"any[]", align 8
  %switch75 = alloca i8, align 1
  %value = alloca i8, align 1
  %c91 = alloca i8, align 1
  %taddr96 = alloca i64, align 8
  %taddr97 = alloca i64, align 8
  %indirectarg98 = alloca %"char[]", align 8
  %indirectarg99 = alloca %"char[]", align 8
  %indirectarg100 = alloca %"char[]", align 8
  %varargslots101 = alloca [2 x %any], align 16
  %indirectarg104 = alloca %"any[]", align 8
  %switch107 = alloca i8, align 1
  %new_value = alloca i8, align 1
  %new_value144 = alloca i8, align 1
    #dbg_declare(ptr %1, !1865, !DIExpression(), !1866)
  store i32 %2, ptr %base, align 4
    #dbg_declare(ptr %base, !1867, !DIExpression(), !1866)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %self, ptr align 8 %1, i32 16, i1 false)
  %3 = load i32, ptr %base, align 4
  store i32 %3, ptr %base1, align 4
  %4 = load i32, ptr %base1, align 4, !dbg !1868
  %gt = icmp sgt i32 %4, 0, !dbg !1868
  br i1 %gt, label %and.rhs, label %and.phi, !dbg !1868

and.rhs:                                          ; preds = %entry
  %5 = load i32, ptr %base1, align 4, !dbg !1868
  %le = icmp sle i32 %5, 16, !dbg !1868
  br label %and.phi, !dbg !1868

and.phi:                                          ; preds = %and.rhs, %entry
  %val = phi i1 [ false, %entry ], [ %le, %and.rhs ], !dbg !1868
  br i1 %val, label %assert_ok, label %assert_fail, !dbg !1868

assert_fail:                                      ; preds = %and.phi
  store %"char[]" { ptr @.panic_msg.88, i64 63 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg2, align 8
  store %"char[]" { ptr @.func.98, i64 8 }, ptr %indirectarg3, align 8
  %6 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %6(ptr align 8 %indirectarg, ptr align 8 %indirectarg2, ptr align 8 %indirectarg3, i32 1055) #6, !dbg !1871
  unreachable, !dbg !1871

assert_ok:                                        ; preds = %and.phi
    #dbg_declare(ptr %len, !1872, !DIExpression(), !1873)
  %ptradd = getelementptr inbounds i8, ptr %self, i64 8, !dbg !1873
  %7 = load i64, ptr %ptradd, align 8, !dbg !1873
  store i64 %7, ptr %len, align 8, !dbg !1873
    #dbg_declare(ptr %index, !1874, !DIExpression(), !1875)
  store i64 0, ptr %index, align 8, !dbg !1875
    #dbg_declare(ptr %ptr, !1876, !DIExpression(), !1877)
  %8 = load ptr, ptr %self, align 8, !dbg !1877
  store ptr %8, ptr %ptr, align 8, !dbg !1877
  br label %loop.cond, !dbg !1878

loop.cond:                                        ; preds = %loop.body, %assert_ok
  %9 = load i64, ptr %index, align 8, !dbg !1879
  %10 = load i64, ptr %len, align 8, !dbg !1879
  %lt = icmp ult i64 %9, %10, !dbg !1879
  br i1 %lt, label %and.rhs4, label %and.phi13, !dbg !1879

and.rhs4:                                         ; preds = %loop.cond
  %11 = load ptr, ptr %ptr, align 8, !dbg !1879
  %12 = load i64, ptr %index, align 8, !dbg !1879
  %ptradd5 = getelementptr inbounds i8, ptr %11, i64 %12, !dbg !1879
  %13 = load i8, ptr %ptradd5, align 1
  store i8 %13, ptr %c, align 1
  %14 = load i8, ptr %c, align 1
  store i8 %14, ptr %c6, align 1
  %15 = load i8, ptr %c6, align 1, !dbg !1881
  %zext = zext i8 %15 to i64, !dbg !1881
  %ge = icmp uge i64 %zext, 256, !dbg !1881
  %16 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !1881
  br i1 %16, label %panic, label %checkok, !dbg !1881

checkok:                                          ; preds = %and.rhs4
  %ptroffset = getelementptr inbounds [2 x i8], ptr @std.core.ascii.ASCII_LOOKUP, i64 %zext, !dbg !1881
  %17 = load i16, ptr %ptroffset, align 2, !dbg !1881
  %lshrl = lshr i16 %17, 10, !dbg !1881
  %18 = and i16 1, %lshrl, !dbg !1881
  %trunc = trunc i16 %18 to i8, !dbg !1881
  %19 = trunc i8 %trunc to i1, !dbg !1881
  br label %and.phi13, !dbg !1881

and.phi13:                                        ; preds = %checkok, %loop.cond
  %val14 = phi i1 [ false, %loop.cond ], [ %19, %checkok ], !dbg !1881
  br i1 %val14, label %loop.body, label %loop.exit, !dbg !1881

loop.body:                                        ; preds = %and.phi13
  %20 = load i64, ptr %index, align 8, !dbg !1879
  %add = add i64 %20, 1, !dbg !1879
  store i64 %add, ptr %index, align 8, !dbg !1879
  br label %loop.cond, !dbg !1879

loop.exit:                                        ; preds = %and.phi13
  %21 = load i64, ptr %len, align 8, !dbg !1885
  %22 = load i64, ptr %index, align 8, !dbg !1885
  %eq = icmp eq i64 %21, %22, !dbg !1885
  br i1 %eq, label %if.then, label %if.exit, !dbg !1885

if.then:                                          ; preds = %loop.exit
  store i64 ptrtoint (ptr @std.core.string.EMPTY_STRING to i64), ptr %reterr, align 8, !dbg !1885
  br label %err_retblock, !dbg !1885

if.exit:                                          ; preds = %loop.exit
    #dbg_declare(ptr %is_negative, !1886, !DIExpression(), !1887)
  store i8 0, ptr %is_negative, align 1, !dbg !1887
  %ptradd15 = getelementptr inbounds i8, ptr %self, i64 8, !dbg !1888
  %23 = load i64, ptr %ptradd15, align 8, !dbg !1888
  %24 = load ptr, ptr %self, align 8, !dbg !1888
  %25 = load i64, ptr %index, align 8, !dbg !1888
  %ge16 = icmp uge i64 %25, %23, !dbg !1888
  %26 = call i1 @llvm.expect.i1(i1 %ge16, i1 false), !dbg !1888
  br i1 %26, label %panic17, label %checkok27, !dbg !1888

checkok27:                                        ; preds = %if.exit
  %ptradd28 = getelementptr inbounds i8, ptr %24, i64 %25, !dbg !1888
  %27 = load i8, ptr %ptradd28, align 1
  store i8 %27, ptr %switch, align 1
  br label %switch.entry

switch.entry:                                     ; preds = %checkok27
  %28 = load i8, ptr %switch, align 1
  switch i8 %28, label %switch.default [
    i8 45, label %switch.case
    i8 43, label %switch.case31
  ]

switch.case:                                      ; preds = %switch.entry
  br label %if.then29, !dbg !1890

if.then29:                                        ; preds = %switch.case
  store i64 ptrtoint (ptr @std.core.string.NEGATIVE_VALUE to i64), ptr %reterr, align 8, !dbg !1890
  br label %err_retblock, !dbg !1890

switch.case31:                                    ; preds = %switch.entry
  %29 = load i64, ptr %index, align 8, !dbg !1892
  %add32 = add i64 %29, 1, !dbg !1892
  store i64 %add32, ptr %index, align 8, !dbg !1892
  br label %switch.exit, !dbg !1892

switch.default:                                   ; preds = %switch.entry
  br label %switch.exit, !dbg !1894

switch.exit:                                      ; preds = %switch.default, %switch.case31
  %30 = load i64, ptr %len, align 8, !dbg !1896
  %31 = load i64, ptr %index, align 8, !dbg !1896
  %eq33 = icmp eq i64 %30, %31, !dbg !1896
  br i1 %eq33, label %if.then34, label %if.exit35, !dbg !1896

if.then34:                                        ; preds = %switch.exit
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_INTEGER to i64), ptr %reterr, align 8, !dbg !1896
  br label %err_retblock, !dbg !1896

if.exit35:                                        ; preds = %switch.exit
    #dbg_declare(ptr %base_used, !1897, !DIExpression(), !1898)
  %32 = load i32, ptr %base1, align 4, !dbg !1898
  %trunc36 = trunc i32 %32 to i8, !dbg !1898
  store i8 %trunc36, ptr %base_used, align 1, !dbg !1898
  %ptradd37 = getelementptr inbounds i8, ptr %self, i64 8, !dbg !1899
  %33 = load i64, ptr %ptradd37, align 8, !dbg !1899
  %34 = load ptr, ptr %self, align 8, !dbg !1899
  %35 = load i64, ptr %index, align 8, !dbg !1899
  %ge38 = icmp uge i64 %35, %33, !dbg !1899
  %36 = call i1 @llvm.expect.i1(i1 %ge38, i1 false), !dbg !1899
  br i1 %36, label %panic39, label %checkok49, !dbg !1899

checkok49:                                        ; preds = %if.exit35
  %ptradd50 = getelementptr inbounds i8, ptr %34, i64 %35, !dbg !1899
  %37 = load i8, ptr %ptradd50, align 1, !dbg !1899
  %eq51 = icmp eq i8 %37, 48, !dbg !1899
  br i1 %eq51, label %and.rhs52, label %and.phi54, !dbg !1899

and.rhs52:                                        ; preds = %checkok49
  %38 = load i32, ptr %base1, align 4, !dbg !1899
  %eq53 = icmp eq i32 %38, 10, !dbg !1899
  br label %and.phi54, !dbg !1899

and.phi54:                                        ; preds = %and.rhs52, %checkok49
  %val55 = phi i1 [ false, %checkok49 ], [ %eq53, %and.rhs52 ], !dbg !1899
  br i1 %val55, label %if.then56, label %if.exit88, !dbg !1899

if.then56:                                        ; preds = %and.phi54
  %39 = load i64, ptr %index, align 8, !dbg !1900
  %add57 = add i64 %39, 1, !dbg !1900
  store i64 %add57, ptr %index, align 8, !dbg !1900
  %40 = load i64, ptr %index, align 8, !dbg !1902
  %41 = load i64, ptr %len, align 8, !dbg !1902
  %eq58 = icmp eq i64 %40, %41, !dbg !1902
  br i1 %eq58, label %if.then59, label %if.exit60, !dbg !1902

if.then59:                                        ; preds = %if.then56
  store i8 0, ptr %blockret, align 1, !dbg !1902
  br label %expr_block.exit, !dbg !1902

if.exit60:                                        ; preds = %if.then56
  %ptradd61 = getelementptr inbounds i8, ptr %self, i64 8, !dbg !1903
  %42 = load i64, ptr %ptradd61, align 8, !dbg !1903
  %43 = load ptr, ptr %self, align 8, !dbg !1903
  %44 = load i64, ptr %index, align 8, !dbg !1903
  %ge62 = icmp uge i64 %44, %42, !dbg !1903
  %45 = call i1 @llvm.expect.i1(i1 %ge62, i1 false), !dbg !1903
  br i1 %45, label %panic63, label %checkok73, !dbg !1903

checkok73:                                        ; preds = %if.exit60
  %ptradd74 = getelementptr inbounds i8, ptr %43, i64 %44, !dbg !1903
  %46 = load i8, ptr %ptradd74, align 1
  store i8 %46, ptr %switch75, align 1
  br label %switch.entry76

switch.entry76:                                   ; preds = %checkok73
  %47 = load i8, ptr %switch75, align 1
  switch i8 %47, label %switch.default83 [
    i8 120, label %switch.case77
    i8 88, label %switch.case77
    i8 98, label %switch.case79
    i8 66, label %switch.case79
    i8 111, label %switch.case81
    i8 79, label %switch.case81
  ]

switch.case77:                                    ; preds = %switch.entry76, %switch.entry76
  store i8 16, ptr %base_used, align 1, !dbg !1905
  %48 = load i64, ptr %index, align 8, !dbg !1907
  %add78 = add i64 %48, 1, !dbg !1907
  store i64 %add78, ptr %index, align 8, !dbg !1907
  br label %switch.exit84, !dbg !1907

switch.case79:                                    ; preds = %switch.entry76, %switch.entry76
  store i8 2, ptr %base_used, align 1, !dbg !1908
  %49 = load i64, ptr %index, align 8, !dbg !1910
  %add80 = add i64 %49, 1, !dbg !1910
  store i64 %add80, ptr %index, align 8, !dbg !1910
  br label %switch.exit84, !dbg !1910

switch.case81:                                    ; preds = %switch.entry76, %switch.entry76
  store i8 8, ptr %base_used, align 1, !dbg !1911
  %50 = load i64, ptr %index, align 8, !dbg !1913
  %add82 = add i64 %50, 1, !dbg !1913
  store i64 %add82, ptr %index, align 8, !dbg !1913
  br label %switch.exit84, !dbg !1913

switch.default83:                                 ; preds = %switch.entry76
  br label %switch.exit84, !dbg !1914

switch.exit84:                                    ; preds = %switch.default83, %switch.case81, %switch.case79, %switch.case77
  %51 = load i64, ptr %len, align 8, !dbg !1916
  %52 = load i64, ptr %index, align 8, !dbg !1916
  %eq85 = icmp eq i64 %51, %52, !dbg !1916
  br i1 %eq85, label %if.then86, label %if.exit87, !dbg !1916

if.then86:                                        ; preds = %switch.exit84
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_INTEGER to i64), ptr %reterr, align 8, !dbg !1916
  br label %err_retblock, !dbg !1916

if.exit87:                                        ; preds = %switch.exit84
  br label %if.exit88, !dbg !1916

if.exit88:                                        ; preds = %if.exit87, %and.phi54
    #dbg_declare(ptr %value, !1917, !DIExpression(), !1918)
  store i8 0, ptr %value, align 1, !dbg !1918
  br label %loop.cond89, !dbg !1919

loop.cond89:                                      ; preds = %loop.exit154, %if.exit88
  %53 = load i64, ptr %index, align 8, !dbg !1920
  %54 = load i64, ptr %len, align 8, !dbg !1920
  %neq = icmp ne i64 %53, %54, !dbg !1920
  br i1 %neq, label %loop.body90, label %loop.exit155, !dbg !1920

loop.body90:                                      ; preds = %loop.cond89
    #dbg_declare(ptr %c91, !1922, !DIExpression(), !1924)
  %ptradd92 = getelementptr inbounds i8, ptr %self, i64 8, !dbg !1924
  %55 = load i64, ptr %ptradd92, align 8, !dbg !1924
  %56 = load ptr, ptr %self, align 8, !dbg !1924
  %57 = load i64, ptr %index, align 8, !dbg !1924
  %add93 = add i64 %57, 1, !dbg !1924
  store i64 %add93, ptr %index, align 8, !dbg !1924
  %ge94 = icmp uge i64 %57, %55, !dbg !1924
  %58 = call i1 @llvm.expect.i1(i1 %ge94, i1 false), !dbg !1924
  br i1 %58, label %panic95, label %checkok105, !dbg !1924

checkok105:                                       ; preds = %loop.body90
  %ptradd106 = getelementptr inbounds i8, ptr %56, i64 %57, !dbg !1924
  %59 = load i8, ptr %ptradd106, align 1, !dbg !1924
  store i8 %59, ptr %c91, align 1, !dbg !1924
  store i8 1, ptr %switch107, align 1
  br label %switch.entry108

switch.entry108:                                  ; preds = %checkok105
  %60 = load i8, ptr %switch107, align 1
  %61 = trunc i8 %60 to i1
  %62 = load i8, ptr %base_used, align 1, !dbg !1925
  %zext109 = zext i8 %62 to i32, !dbg !1925
  %gt110 = icmp ugt i32 10, %zext109, !dbg !1925
  br i1 %gt110, label %or.phi, label %or.rhs, !dbg !1925

or.rhs:                                           ; preds = %switch.entry108
  %63 = load i8, ptr %c91, align 1, !dbg !1925
  %lt111 = icmp ult i8 %63, 65, !dbg !1925
  br label %or.phi, !dbg !1925

or.phi:                                           ; preds = %or.rhs, %switch.entry108
  %val112 = phi i1 [ true, %switch.entry108 ], [ %lt111, %or.rhs ], !dbg !1925
  %eq113 = icmp eq i1 %val112, %61, !dbg !1925
  br i1 %eq113, label %switch.case114, label %next_if, !dbg !1925

switch.case114:                                   ; preds = %or.phi
  %64 = load i8, ptr %c91, align 1, !dbg !1927
  %sub = sub i8 %64, 48, !dbg !1927
  store i8 %sub, ptr %c91, align 1, !dbg !1927
  br label %switch.exit130, !dbg !1927

next_if:                                          ; preds = %or.phi
  %65 = load i8, ptr %c91, align 1, !dbg !1929
  %le115 = icmp ule i8 %65, 70, !dbg !1929
  %eq116 = icmp eq i1 %le115, %61, !dbg !1929
  br i1 %eq116, label %switch.case117, label %next_if119, !dbg !1929

switch.case117:                                   ; preds = %next_if
  %66 = load i8, ptr %c91, align 1, !dbg !1930
  %sub118 = sub i8 %66, 55, !dbg !1930
  store i8 %sub118, ptr %c91, align 1, !dbg !1930
  br label %switch.exit130, !dbg !1930

next_if119:                                       ; preds = %next_if
  %67 = load i8, ptr %c91, align 1, !dbg !1932
  %lt120 = icmp ult i8 %67, 97, !dbg !1932
  br i1 %lt120, label %or.phi123, label %or.rhs121, !dbg !1932

or.rhs121:                                        ; preds = %next_if119
  %68 = load i8, ptr %c91, align 1, !dbg !1932
  %gt122 = icmp ugt i8 %68, 102, !dbg !1932
  br label %or.phi123, !dbg !1932

or.phi123:                                        ; preds = %or.rhs121, %next_if119
  %val124 = phi i1 [ true, %next_if119 ], [ %gt122, %or.rhs121 ], !dbg !1932
  %eq125 = icmp eq i1 %val124, %61, !dbg !1932
  br i1 %eq125, label %switch.case126, label %next_if127, !dbg !1932

switch.case126:                                   ; preds = %or.phi123
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_INTEGER to i64), ptr %reterr, align 8, !dbg !1933
  br label %err_retblock, !dbg !1933

next_if127:                                       ; preds = %or.phi123
  br label %switch.default128, !dbg !1933

switch.default128:                                ; preds = %next_if127
  %69 = load i8, ptr %c91, align 1, !dbg !1935
  %sub129 = sub i8 %69, 87, !dbg !1935
  store i8 %sub129, ptr %c91, align 1, !dbg !1935
  br label %switch.exit130, !dbg !1935

switch.exit130:                                   ; preds = %switch.default128, %switch.case117, %switch.case114
  %70 = load i8, ptr %c91, align 1, !dbg !1937
  %71 = load i8, ptr %base_used, align 1, !dbg !1937
  %ge131 = icmp uge i8 %70, %71, !dbg !1937
  br i1 %ge131, label %if.then132, label %if.exit133, !dbg !1937

if.then132:                                       ; preds = %switch.exit130
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_INTEGER to i64), ptr %reterr, align 8, !dbg !1937
  br label %err_retblock, !dbg !1937

if.exit133:                                       ; preds = %switch.exit130
  %72 = load i8, ptr %is_negative, align 1, !dbg !1938
  %73 = trunc i8 %72 to i1, !dbg !1938
  br i1 %73, label %if.then134, label %if.exit143, !dbg !1938

if.then134:                                       ; preds = %if.exit133
    #dbg_declare(ptr %new_value, !1941, !DIExpression(), !1943)
  %74 = load i8, ptr %value, align 1, !dbg !1943
  %zext135 = zext i8 %74 to i32, !dbg !1943
  %75 = load i8, ptr %base_used, align 1, !dbg !1943
  %zext136 = zext i8 %75 to i32, !dbg !1943
  %mul = mul i32 %zext135, %zext136, !dbg !1943
  %76 = load i8, ptr %c91, align 1, !dbg !1943
  %zext137 = zext i8 %76 to i32, !dbg !1943
  %sub138 = sub i32 %mul, %zext137, !dbg !1943
  %trunc139 = trunc i32 %sub138 to i8, !dbg !1943
  store i8 %trunc139, ptr %new_value, align 1, !dbg !1943
  %77 = load i8, ptr %new_value, align 1, !dbg !1944
  %78 = load i8, ptr %value, align 1, !dbg !1944
  %gt140 = icmp ugt i8 %77, %78, !dbg !1944
  br i1 %gt140, label %if.then141, label %if.exit142, !dbg !1944

if.then141:                                       ; preds = %if.then134
  store i64 ptrtoint (ptr @std.core.string.INTEGER_OVERFLOW to i64), ptr %reterr, align 8, !dbg !1944
  br label %err_retblock, !dbg !1944

if.exit142:                                       ; preds = %if.then134
  %79 = load i8, ptr %new_value, align 1, !dbg !1945
  store i8 %79, ptr %value, align 1, !dbg !1945
  br label %loop.exit154, !dbg !1946

if.exit143:                                       ; preds = %if.exit133
    #dbg_declare(ptr %new_value144, !1947, !DIExpression(), !1948)
  %80 = load i8, ptr %value, align 1, !dbg !1948
  %zext145 = zext i8 %80 to i32, !dbg !1948
  %81 = load i8, ptr %base_used, align 1, !dbg !1948
  %zext146 = zext i8 %81 to i32, !dbg !1948
  %mul147 = mul i32 %zext145, %zext146, !dbg !1948
  %82 = load i8, ptr %c91, align 1, !dbg !1948
  %zext148 = zext i8 %82 to i32, !dbg !1948
  %add149 = add i32 %mul147, %zext148, !dbg !1948
  %trunc150 = trunc i32 %add149 to i8, !dbg !1948
  store i8 %trunc150, ptr %new_value144, align 1, !dbg !1948
  %83 = load i8, ptr %new_value144, align 1, !dbg !1949
  %84 = load i8, ptr %value, align 1, !dbg !1949
  %lt151 = icmp ult i8 %83, %84, !dbg !1949
  br i1 %lt151, label %if.then152, label %if.exit153, !dbg !1949

if.then152:                                       ; preds = %if.exit143
  store i64 ptrtoint (ptr @std.core.string.INTEGER_OVERFLOW to i64), ptr %reterr, align 8, !dbg !1949
  br label %err_retblock, !dbg !1949

if.exit153:                                       ; preds = %if.exit143
  %85 = load i8, ptr %new_value144, align 1, !dbg !1950
  store i8 %85, ptr %value, align 1, !dbg !1950
  br label %loop.exit154, !dbg !1950

loop.exit154:                                     ; preds = %if.exit153, %if.exit142
  br label %loop.cond89, !dbg !1950

loop.exit155:                                     ; preds = %loop.cond89
  %86 = load i8, ptr %value, align 1, !dbg !1951
  store i8 %86, ptr %blockret, align 1, !dbg !1951
  br label %expr_block.exit, !dbg !1951

expr_block.exit:                                  ; preds = %loop.exit155, %if.then59
  %87 = load i8, ptr %blockret, align 1, !dbg !1951
  store i8 %87, ptr %0, align 1, !dbg !1951
  ret i64 0, !dbg !1951

err_retblock:                                     ; preds = %if.then152, %if.then141, %if.then132, %switch.case126, %if.then86, %if.then34, %if.then29, %if.then
  %88 = load i64, ptr %reterr, align 8, !dbg !1951
  ret i64 %88, !dbg !1951

panic:                                            ; preds = %and.rhs4
  store i64 256, ptr %taddr, align 8
  %89 = insertvalue %any undef, ptr %taddr, 0
  %90 = insertvalue %any %89, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %zext, ptr %taddr7, align 8
  %91 = insertvalue %any undef, ptr %taddr7, 0
  %92 = insertvalue %any %91, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg8, align 8
  store %"char[]" { ptr @.file.73, i64 8 }, ptr %indirectarg9, align 8
  store %"char[]" { ptr @.func.98, i64 8 }, ptr %indirectarg10, align 8
  store %any %90, ptr %varargslots, align 16
  %ptradd11 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %92, ptr %ptradd11, align 16
  %93 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %93, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg12, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg8, ptr align 8 %indirectarg9, ptr align 8 %indirectarg10, i32 19, ptr align 8 %indirectarg12) #6, !dbg !1881
  unreachable, !dbg !1881

panic17:                                          ; preds = %if.exit
  store i64 %23, ptr %taddr18, align 8
  %94 = insertvalue %any undef, ptr %taddr18, 0
  %95 = insertvalue %any %94, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %25, ptr %taddr19, align 8
  %96 = insertvalue %any undef, ptr %taddr19, 0
  %97 = insertvalue %any %96, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg20, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg21, align 8
  store %"char[]" { ptr @.func.98, i64 8 }, ptr %indirectarg22, align 8
  store %any %95, ptr %varargslots23, align 16
  %ptradd24 = getelementptr inbounds i8, ptr %varargslots23, i64 16
  store %any %97, ptr %ptradd24, align 16
  %98 = insertvalue %"any[]" undef, ptr %varargslots23, 0
  %"$$temp25" = insertvalue %"any[]" %98, i64 2, 1
  store %"any[]" %"$$temp25", ptr %indirectarg26, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg20, ptr align 8 %indirectarg21, ptr align 8 %indirectarg22, i32 980, ptr align 8 %indirectarg26) #6, !dbg !1888
  unreachable, !dbg !1888

panic39:                                          ; preds = %if.exit35
  store i64 %33, ptr %taddr40, align 8
  %99 = insertvalue %any undef, ptr %taddr40, 0
  %100 = insertvalue %any %99, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %35, ptr %taddr41, align 8
  %101 = insertvalue %any undef, ptr %taddr41, 0
  %102 = insertvalue %any %101, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg42, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg43, align 8
  store %"char[]" { ptr @.func.98, i64 8 }, ptr %indirectarg44, align 8
  store %any %100, ptr %varargslots45, align 16
  %ptradd46 = getelementptr inbounds i8, ptr %varargslots45, i64 16
  store %any %102, ptr %ptradd46, align 16
  %103 = insertvalue %"any[]" undef, ptr %varargslots45, 0
  %"$$temp47" = insertvalue %"any[]" %103, i64 2, 1
  store %"any[]" %"$$temp47", ptr %indirectarg48, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg42, ptr align 8 %indirectarg43, ptr align 8 %indirectarg44, i32 993, ptr align 8 %indirectarg48) #6, !dbg !1899
  unreachable, !dbg !1899

panic63:                                          ; preds = %if.exit60
  store i64 %42, ptr %taddr64, align 8
  %104 = insertvalue %any undef, ptr %taddr64, 0
  %105 = insertvalue %any %104, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %44, ptr %taddr65, align 8
  %106 = insertvalue %any undef, ptr %taddr65, 0
  %107 = insertvalue %any %106, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg66, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg67, align 8
  store %"char[]" { ptr @.func.98, i64 8 }, ptr %indirectarg68, align 8
  store %any %105, ptr %varargslots69, align 16
  %ptradd70 = getelementptr inbounds i8, ptr %varargslots69, i64 16
  store %any %107, ptr %ptradd70, align 16
  %108 = insertvalue %"any[]" undef, ptr %varargslots69, 0
  %"$$temp71" = insertvalue %"any[]" %108, i64 2, 1
  store %"any[]" %"$$temp71", ptr %indirectarg72, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg66, ptr align 8 %indirectarg67, ptr align 8 %indirectarg68, i32 997, ptr align 8 %indirectarg72) #6, !dbg !1903
  unreachable, !dbg !1903

panic95:                                          ; preds = %loop.body90
  store i64 %55, ptr %taddr96, align 8
  %109 = insertvalue %any undef, ptr %taddr96, 0
  %110 = insertvalue %any %109, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %57, ptr %taddr97, align 8
  %111 = insertvalue %any undef, ptr %taddr97, 0
  %112 = insertvalue %any %111, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg98, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg99, align 8
  store %"char[]" { ptr @.func.98, i64 8 }, ptr %indirectarg100, align 8
  store %any %110, ptr %varargslots101, align 16
  %ptradd102 = getelementptr inbounds i8, ptr %varargslots101, i64 16
  store %any %112, ptr %ptradd102, align 16
  %113 = insertvalue %"any[]" undef, ptr %varargslots101, 0
  %"$$temp103" = insertvalue %"any[]" %113, i64 2, 1
  store %"any[]" %"$$temp103", ptr %indirectarg104, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg98, ptr align 8 %indirectarg99, ptr align 8 %indirectarg100, i32 1019, ptr align 8 %indirectarg104) #6, !dbg !1924
  unreachable, !dbg !1924
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.core.String.to_double(ptr %0, ptr align 8 %1) #0 comdat !dbg !1952 {
entry:
  %reterr = alloca i64, align 8
  %chars = alloca %"char[]", align 8
  %blockret = alloca double, align 8
  %sign = alloca i32, align 4
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr5 = alloca i64, align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg7 = alloca %"char[]", align 8
  %indirectarg8 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg10 = alloca %"any[]", align 8
  %switch = alloca i8, align 1
  %taddr13 = alloca i64, align 8
  %taddr14 = alloca i64, align 8
  %indirectarg15 = alloca %"char[]", align 8
  %indirectarg16 = alloca %"char[]", align 8
  %indirectarg17 = alloca %"char[]", align 8
  %varargslots18 = alloca [2 x %any], align 16
  %indirectarg21 = alloca %"any[]", align 8
  %indirectarg25 = alloca %"char[]", align 8
  %indirectarg26 = alloca %"char[]", align 8
  %cmp.idx = alloca i64, align 8
  %cmp.idx36 = alloca i64, align 8
  %cmp.idx49 = alloca i64, align 8
  %cmp.idx61 = alloca i64, align 8
  %taddr79 = alloca i64, align 8
  %taddr80 = alloca i64, align 8
  %indirectarg81 = alloca %"char[]", align 8
  %indirectarg82 = alloca %"char[]", align 8
  %indirectarg83 = alloca %"char[]", align 8
  %varargslots84 = alloca [2 x %any], align 16
  %indirectarg87 = alloca %"any[]", align 8
  %taddr95 = alloca i64, align 8
  %taddr96 = alloca i64, align 8
  %indirectarg97 = alloca %"char[]", align 8
  %indirectarg98 = alloca %"char[]", align 8
  %indirectarg99 = alloca %"char[]", align 8
  %varargslots100 = alloca [2 x %any], align 16
  %indirectarg103 = alloca %"any[]", align 8
  %taddr112 = alloca i64, align 8
  %taddr113 = alloca i64, align 8
  %indirectarg114 = alloca %"char[]", align 8
  %indirectarg115 = alloca %"char[]", align 8
  %indirectarg116 = alloca %"char[]", align 8
  %varargslots117 = alloca [2 x %any], align 16
  %indirectarg120 = alloca %"any[]", align 8
  %chars124 = alloca %"char[]", align 8
  %sign125 = alloca i32, align 4
  %blockret126 = alloca double, align 8
  %scale = alloca double, align 8
  %x = alloca i32, align 4
  %rp = alloca i64, align 8
  %dc = alloca i64, align 8
  %c = alloca i8, align 1
  %got_rad = alloca i8, align 1
  %got_digit = alloca i8, align 1
  %got_tail = alloca i8, align 1
  %len = alloca i64, align 8
  %last_char = alloca i64, align 8
  %index = alloca i64, align 8
  %y = alloca double, align 8
  %taddr131 = alloca i64, align 8
  %taddr132 = alloca i64, align 8
  %indirectarg133 = alloca %"char[]", align 8
  %indirectarg134 = alloca %"char[]", align 8
  %indirectarg135 = alloca %"char[]", align 8
  %varargslots136 = alloca [2 x %any], align 16
  %indirectarg139 = alloca %"any[]", align 8
  %taddr160 = alloca i64, align 8
  %taddr161 = alloca i64, align 8
  %indirectarg162 = alloca %"char[]", align 8
  %indirectarg163 = alloca %"char[]", align 8
  %indirectarg164 = alloca %"char[]", align 8
  %varargslots165 = alloca [2 x %any], align 16
  %indirectarg168 = alloca %"any[]", align 8
  %taddr183 = alloca i64, align 8
  %taddr184 = alloca i64, align 8
  %indirectarg185 = alloca %"char[]", align 8
  %indirectarg186 = alloca %"char[]", align 8
  %indirectarg187 = alloca %"char[]", align 8
  %varargslots188 = alloca [2 x %any], align 16
  %indirectarg191 = alloca %"any[]", align 8
  %d = alloca i32, align 4
  %switch231 = alloca i8, align 1
  %taddr261 = alloca i64, align 8
  %taddr262 = alloca i64, align 8
  %indirectarg263 = alloca %"char[]", align 8
  %indirectarg264 = alloca %"char[]", align 8
  %indirectarg265 = alloca %"char[]", align 8
  %varargslots266 = alloca [2 x %any], align 16
  %indirectarg269 = alloca %"any[]", align 8
  %e2 = alloca i64, align 8
  %e2val = alloca i64, align 8
  %taddr292 = alloca i64, align 8
  %taddr293 = alloca i64, align 8
  %indirectarg294 = alloca %"char[]", align 8
  %indirectarg295 = alloca %"char[]", align 8
  %indirectarg296 = alloca %"char[]", align 8
  %varargslots297 = alloca [2 x %any], align 16
  %indirectarg300 = alloca %"any[]", align 8
  %taddr303 = alloca i64, align 8
  %indirectarg304 = alloca %"char[]", align 8
  %indirectarg305 = alloca %"char[]", align 8
  %indirectarg306 = alloca %"char[]", align 8
  %varargslots307 = alloca [1 x %any], align 16
  %indirectarg309 = alloca %"any[]", align 8
  %retparam = alloca i64, align 8
  %indirectarg313 = alloca %"char[]", align 8
  %error_var = alloca i64, align 8
  %bits = alloca i32, align 4
  %bias = alloca double, align 8
  %x355 = alloca double, align 8
  %n = alloca i32, align 4
  %mag = alloca double, align 8
  %sgn = alloca double, align 8
  %x359 = alloca double, align 8
  %y360 = alloca double, align 8
  %x385 = alloca double, align 8
  %n387 = alloca i32, align 4
  %chars390 = alloca %"char[]", align 8
  %sign391 = alloca i32, align 4
  %blockret392 = alloca double, align 8
  %indirectarg395 = alloca %"char[]", align 8
  %indirectarg396 = alloca %"char[]", align 8
  %indirectarg397 = alloca %"char[]", align 8
  %x398 = alloca [128 x i32], align 16
  %emax = alloca i32, align 4
  %index399 = alloca i64, align 8
  %got_digit400 = alloca i8, align 1
  %taddr404 = alloca i64, align 8
  %taddr405 = alloca i64, align 8
  %indirectarg406 = alloca %"char[]", align 8
  %indirectarg407 = alloca %"char[]", align 8
  %indirectarg408 = alloca %"char[]", align 8
  %varargslots409 = alloca [2 x %any], align 16
  %indirectarg412 = alloca %"any[]", align 8
  %got_rad415 = alloca i8, align 1
  %lrp = alloca i64, align 8
  %dc416 = alloca i64, align 8
  %k = alloca i32, align 4
  %j = alloca i32, align 4
  %lnz = alloca i32, align 4
  %len417 = alloca i64, align 8
  %last_char419 = alloca i64, align 8
  %indirectarg423 = alloca %"char[]", align 8
  %indirectarg424 = alloca %"char[]", align 8
  %indirectarg425 = alloca %"char[]", align 8
  %c427 = alloca i8, align 1
  %taddr432 = alloca i64, align 8
  %taddr433 = alloca i64, align 8
  %indirectarg434 = alloca %"char[]", align 8
  %indirectarg435 = alloca %"char[]", align 8
  %indirectarg436 = alloca %"char[]", align 8
  %varargslots437 = alloca [2 x %any], align 16
  %indirectarg440 = alloca %"any[]", align 8
  %taddr467 = alloca i64, align 8
  %taddr468 = alloca i64, align 8
  %indirectarg469 = alloca %"char[]", align 8
  %indirectarg470 = alloca %"char[]", align 8
  %indirectarg471 = alloca %"char[]", align 8
  %varargslots472 = alloca [2 x %any], align 16
  %indirectarg475 = alloca %"any[]", align 8
  %taddr490 = alloca i64, align 8
  %taddr491 = alloca i64, align 8
  %indirectarg492 = alloca %"char[]", align 8
  %indirectarg493 = alloca %"char[]", align 8
  %indirectarg494 = alloca %"char[]", align 8
  %varargslots495 = alloca [2 x %any], align 16
  %indirectarg498 = alloca %"any[]", align 8
  %switch518 = alloca i8, align 1
  %taddr538 = alloca i64, align 8
  %indirectarg539 = alloca %"char[]", align 8
  %indirectarg540 = alloca %"char[]", align 8
  %indirectarg541 = alloca %"char[]", align 8
  %varargslots542 = alloca [1 x %any], align 16
  %indirectarg544 = alloca %"any[]", align 8
  %taddr548 = alloca i64, align 8
  %taddr549 = alloca i64, align 8
  %indirectarg550 = alloca %"char[]", align 8
  %indirectarg551 = alloca %"char[]", align 8
  %indirectarg552 = alloca %"char[]", align 8
  %varargslots553 = alloca [2 x %any], align 16
  %indirectarg556 = alloca %"any[]", align 8
  %taddr565 = alloca i64, align 8
  %indirectarg566 = alloca %"char[]", align 8
  %indirectarg567 = alloca %"char[]", align 8
  %indirectarg568 = alloca %"char[]", align 8
  %varargslots569 = alloca [1 x %any], align 16
  %indirectarg571 = alloca %"any[]", align 8
  %taddr575 = alloca i64, align 8
  %taddr576 = alloca i64, align 8
  %indirectarg577 = alloca %"char[]", align 8
  %indirectarg578 = alloca %"char[]", align 8
  %indirectarg579 = alloca %"char[]", align 8
  %varargslots580 = alloca [2 x %any], align 16
  %indirectarg583 = alloca %"any[]", align 8
  %taddr592 = alloca i64, align 8
  %indirectarg593 = alloca %"char[]", align 8
  %indirectarg594 = alloca %"char[]", align 8
  %indirectarg595 = alloca %"char[]", align 8
  %varargslots596 = alloca [1 x %any], align 16
  %indirectarg598 = alloca %"any[]", align 8
  %taddr602 = alloca i64, align 8
  %taddr603 = alloca i64, align 8
  %indirectarg604 = alloca %"char[]", align 8
  %indirectarg605 = alloca %"char[]", align 8
  %indirectarg606 = alloca %"char[]", align 8
  %varargslots607 = alloca [2 x %any], align 16
  %indirectarg610 = alloca %"any[]", align 8
  %indirectarg632 = alloca %"char[]", align 8
  %indirectarg633 = alloca %"char[]", align 8
  %indirectarg634 = alloca %"char[]", align 8
  %taddr640 = alloca i64, align 8
  %taddr641 = alloca i64, align 8
  %indirectarg642 = alloca %"char[]", align 8
  %indirectarg643 = alloca %"char[]", align 8
  %indirectarg644 = alloca %"char[]", align 8
  %varargslots645 = alloca [2 x %any], align 16
  %indirectarg648 = alloca %"any[]", align 8
  %e10 = alloca i64, align 8
  %taddr668 = alloca i64, align 8
  %taddr669 = alloca i64, align 8
  %indirectarg670 = alloca %"char[]", align 8
  %indirectarg671 = alloca %"char[]", align 8
  %indirectarg672 = alloca %"char[]", align 8
  %varargslots673 = alloca [2 x %any], align 16
  %indirectarg676 = alloca %"any[]", align 8
  %taddr680 = alloca i64, align 8
  %indirectarg681 = alloca %"char[]", align 8
  %indirectarg682 = alloca %"char[]", align 8
  %indirectarg683 = alloca %"char[]", align 8
  %varargslots684 = alloca [1 x %any], align 16
  %indirectarg686 = alloca %"any[]", align 8
  %retparam690 = alloca i64, align 8
  %indirectarg691 = alloca %"char[]", align 8
  %error_var695 = alloca i64, align 8
  %taddr741 = alloca i64, align 8
  %indirectarg742 = alloca %"char[]", align 8
  %indirectarg743 = alloca %"char[]", align 8
  %indirectarg744 = alloca %"char[]", align 8
  %varargslots745 = alloca [1 x %any], align 16
  %indirectarg747 = alloca %"any[]", align 8
  %taddr751 = alloca i64, align 8
  %taddr752 = alloca i64, align 8
  %indirectarg753 = alloca %"char[]", align 8
  %indirectarg754 = alloca %"char[]", align 8
  %indirectarg755 = alloca %"char[]", align 8
  %varargslots756 = alloca [2 x %any], align 16
  %indirectarg759 = alloca %"any[]", align 8
  %a = alloca i32, align 4
  %z = alloca i32, align 4
  %e2767 = alloca i32, align 4
  %rp768 = alloca i64, align 8
  %taddr793 = alloca i64, align 8
  %indirectarg794 = alloca %"char[]", align 8
  %indirectarg795 = alloca %"char[]", align 8
  %indirectarg796 = alloca %"char[]", align 8
  %varargslots797 = alloca [1 x %any], align 16
  %indirectarg799 = alloca %"any[]", align 8
  %taddr803 = alloca i64, align 8
  %taddr804 = alloca i64, align 8
  %indirectarg805 = alloca %"char[]", align 8
  %indirectarg806 = alloca %"char[]", align 8
  %indirectarg807 = alloca %"char[]", align 8
  %varargslots808 = alloca [2 x %any], align 16
  %indirectarg811 = alloca %"any[]", align 8
  %indirectarg816 = alloca %"char[]", align 8
  %indirectarg817 = alloca %"char[]", align 8
  %indirectarg818 = alloca %"char[]", align 8
  %bitlim = alloca i32, align 4
  %taddr829 = alloca i32, align 4
  %indirectarg830 = alloca %"char[]", align 8
  %indirectarg831 = alloca %"char[]", align 8
  %indirectarg832 = alloca %"char[]", align 8
  %varargslots833 = alloca [1 x %any], align 16
  %indirectarg835 = alloca %"any[]", align 8
  %taddr848 = alloca i64, align 8
  %indirectarg849 = alloca %"char[]", align 8
  %indirectarg850 = alloca %"char[]", align 8
  %indirectarg851 = alloca %"char[]", align 8
  %varargslots852 = alloca [1 x %any], align 16
  %indirectarg854 = alloca %"any[]", align 8
  %taddr858 = alloca i64, align 8
  %taddr859 = alloca i64, align 8
  %indirectarg860 = alloca %"char[]", align 8
  %indirectarg861 = alloca %"char[]", align 8
  %indirectarg862 = alloca %"char[]", align 8
  %varargslots863 = alloca [2 x %any], align 16
  %indirectarg866 = alloca %"any[]", align 8
  %rpm9 = alloca i64, align 8
  %p10 = alloca i32, align 4
  %taddr886 = alloca i64, align 8
  %indirectarg887 = alloca %"char[]", align 8
  %indirectarg888 = alloca %"char[]", align 8
  %indirectarg889 = alloca %"char[]", align 8
  %varargslots890 = alloca [1 x %any], align 16
  %indirectarg892 = alloca %"any[]", align 8
  %taddr896 = alloca i64, align 8
  %taddr897 = alloca i64, align 8
  %indirectarg898 = alloca %"char[]", align 8
  %indirectarg899 = alloca %"char[]", align 8
  %indirectarg900 = alloca %"char[]", align 8
  %varargslots901 = alloca [2 x %any], align 16
  %indirectarg904 = alloca %"any[]", align 8
  %carry = alloca i32, align 4
  %tmp = alloca i32, align 4
  %taddr913 = alloca i64, align 8
  %indirectarg914 = alloca %"char[]", align 8
  %indirectarg915 = alloca %"char[]", align 8
  %indirectarg916 = alloca %"char[]", align 8
  %varargslots917 = alloca [1 x %any], align 16
  %indirectarg919 = alloca %"any[]", align 8
  %taddr923 = alloca i64, align 8
  %taddr924 = alloca i64, align 8
  %indirectarg925 = alloca %"char[]", align 8
  %indirectarg926 = alloca %"char[]", align 8
  %indirectarg927 = alloca %"char[]", align 8
  %varargslots928 = alloca [2 x %any], align 16
  %indirectarg931 = alloca %"any[]", align 8
  %indirectarg936 = alloca %"char[]", align 8
  %indirectarg937 = alloca %"char[]", align 8
  %indirectarg938 = alloca %"char[]", align 8
  %taddr944 = alloca i64, align 8
  %indirectarg945 = alloca %"char[]", align 8
  %indirectarg946 = alloca %"char[]", align 8
  %indirectarg947 = alloca %"char[]", align 8
  %varargslots948 = alloca [1 x %any], align 16
  %indirectarg950 = alloca %"any[]", align 8
  %taddr954 = alloca i64, align 8
  %taddr955 = alloca i64, align 8
  %indirectarg956 = alloca %"char[]", align 8
  %indirectarg957 = alloca %"char[]", align 8
  %indirectarg958 = alloca %"char[]", align 8
  %varargslots959 = alloca [2 x %any], align 16
  %indirectarg962 = alloca %"any[]", align 8
  %indirectarg967 = alloca %"char[]", align 8
  %indirectarg968 = alloca %"char[]", align 8
  %indirectarg969 = alloca %"char[]", align 8
  %taddr975 = alloca i64, align 8
  %indirectarg976 = alloca %"char[]", align 8
  %indirectarg977 = alloca %"char[]", align 8
  %indirectarg978 = alloca %"char[]", align 8
  %varargslots979 = alloca [1 x %any], align 16
  %indirectarg981 = alloca %"any[]", align 8
  %taddr985 = alloca i64, align 8
  %taddr986 = alloca i64, align 8
  %indirectarg987 = alloca %"char[]", align 8
  %indirectarg988 = alloca %"char[]", align 8
  %indirectarg989 = alloca %"char[]", align 8
  %varargslots990 = alloca [2 x %any], align 16
  %indirectarg993 = alloca %"any[]", align 8
  %indirectarg998 = alloca %"char[]", align 8
  %indirectarg999 = alloca %"char[]", align 8
  %indirectarg1000 = alloca %"char[]", align 8
  %taddr1009 = alloca i64, align 8
  %indirectarg1010 = alloca %"char[]", align 8
  %indirectarg1011 = alloca %"char[]", align 8
  %indirectarg1012 = alloca %"char[]", align 8
  %varargslots1013 = alloca [1 x %any], align 16
  %indirectarg1015 = alloca %"any[]", align 8
  %taddr1019 = alloca i64, align 8
  %taddr1020 = alloca i64, align 8
  %indirectarg1021 = alloca %"char[]", align 8
  %indirectarg1022 = alloca %"char[]", align 8
  %indirectarg1023 = alloca %"char[]", align 8
  %varargslots1024 = alloca [2 x %any], align 16
  %indirectarg1027 = alloca %"any[]", align 8
  %taddr1046 = alloca i64, align 8
  %indirectarg1047 = alloca %"char[]", align 8
  %indirectarg1048 = alloca %"char[]", align 8
  %indirectarg1049 = alloca %"char[]", align 8
  %varargslots1050 = alloca [1 x %any], align 16
  %indirectarg1052 = alloca %"any[]", align 8
  %taddr1056 = alloca i64, align 8
  %taddr1057 = alloca i64, align 8
  %indirectarg1058 = alloca %"char[]", align 8
  %indirectarg1059 = alloca %"char[]", align 8
  %indirectarg1060 = alloca %"char[]", align 8
  %varargslots1061 = alloca [2 x %any], align 16
  %indirectarg1064 = alloca %"any[]", align 8
  %taddr1079 = alloca i64, align 8
  %indirectarg1080 = alloca %"char[]", align 8
  %indirectarg1081 = alloca %"char[]", align 8
  %indirectarg1082 = alloca %"char[]", align 8
  %varargslots1083 = alloca [1 x %any], align 16
  %indirectarg1085 = alloca %"any[]", align 8
  %taddr1089 = alloca i64, align 8
  %taddr1090 = alloca i64, align 8
  %indirectarg1091 = alloca %"char[]", align 8
  %indirectarg1092 = alloca %"char[]", align 8
  %indirectarg1093 = alloca %"char[]", align 8
  %varargslots1094 = alloca [2 x %any], align 16
  %indirectarg1097 = alloca %"any[]", align 8
  %carry1106 = alloca i32, align 4
  %tmp1111 = alloca i64, align 8
  %taddr1115 = alloca i64, align 8
  %indirectarg1116 = alloca %"char[]", align 8
  %indirectarg1117 = alloca %"char[]", align 8
  %indirectarg1118 = alloca %"char[]", align 8
  %varargslots1119 = alloca [1 x %any], align 16
  %indirectarg1121 = alloca %"any[]", align 8
  %taddr1125 = alloca i64, align 8
  %taddr1126 = alloca i64, align 8
  %indirectarg1127 = alloca %"char[]", align 8
  %indirectarg1128 = alloca %"char[]", align 8
  %indirectarg1129 = alloca %"char[]", align 8
  %varargslots1130 = alloca [2 x %any], align 16
  %indirectarg1133 = alloca %"any[]", align 8
  %taddr1148 = alloca i64, align 8
  %indirectarg1149 = alloca %"char[]", align 8
  %indirectarg1150 = alloca %"char[]", align 8
  %indirectarg1151 = alloca %"char[]", align 8
  %varargslots1152 = alloca [1 x %any], align 16
  %indirectarg1154 = alloca %"any[]", align 8
  %taddr1158 = alloca i64, align 8
  %taddr1159 = alloca i64, align 8
  %indirectarg1160 = alloca %"char[]", align 8
  %indirectarg1161 = alloca %"char[]", align 8
  %indirectarg1162 = alloca %"char[]", align 8
  %varargslots1163 = alloca [2 x %any], align 16
  %indirectarg1166 = alloca %"any[]", align 8
  %taddr1174 = alloca i64, align 8
  %indirectarg1175 = alloca %"char[]", align 8
  %indirectarg1176 = alloca %"char[]", align 8
  %indirectarg1177 = alloca %"char[]", align 8
  %varargslots1178 = alloca [1 x %any], align 16
  %indirectarg1180 = alloca %"any[]", align 8
  %taddr1184 = alloca i64, align 8
  %taddr1185 = alloca i64, align 8
  %indirectarg1186 = alloca %"char[]", align 8
  %indirectarg1187 = alloca %"char[]", align 8
  %indirectarg1188 = alloca %"char[]", align 8
  %varargslots1189 = alloca [2 x %any], align 16
  %indirectarg1192 = alloca %"any[]", align 8
  %taddr1207 = alloca i64, align 8
  %indirectarg1208 = alloca %"char[]", align 8
  %indirectarg1209 = alloca %"char[]", align 8
  %indirectarg1210 = alloca %"char[]", align 8
  %varargslots1211 = alloca [1 x %any], align 16
  %indirectarg1213 = alloca %"any[]", align 8
  %taddr1217 = alloca i64, align 8
  %taddr1218 = alloca i64, align 8
  %indirectarg1219 = alloca %"char[]", align 8
  %indirectarg1220 = alloca %"char[]", align 8
  %indirectarg1221 = alloca %"char[]", align 8
  %varargslots1222 = alloca [2 x %any], align 16
  %indirectarg1225 = alloca %"any[]", align 8
  %taddr1253 = alloca i64, align 8
  %indirectarg1254 = alloca %"char[]", align 8
  %indirectarg1255 = alloca %"char[]", align 8
  %indirectarg1256 = alloca %"char[]", align 8
  %varargslots1257 = alloca [1 x %any], align 16
  %indirectarg1259 = alloca %"any[]", align 8
  %taddr1263 = alloca i64, align 8
  %taddr1264 = alloca i64, align 8
  %indirectarg1265 = alloca %"char[]", align 8
  %indirectarg1266 = alloca %"char[]", align 8
  %indirectarg1267 = alloca %"char[]", align 8
  %varargslots1268 = alloca [2 x %any], align 16
  %indirectarg1271 = alloca %"any[]", align 8
  %taddr1277 = alloca i64, align 8
  %indirectarg1278 = alloca %"char[]", align 8
  %indirectarg1279 = alloca %"char[]", align 8
  %indirectarg1280 = alloca %"char[]", align 8
  %varargslots1281 = alloca [1 x %any], align 16
  %indirectarg1283 = alloca %"any[]", align 8
  %taddr1287 = alloca i64, align 8
  %taddr1288 = alloca i64, align 8
  %indirectarg1289 = alloca %"char[]", align 8
  %indirectarg1290 = alloca %"char[]", align 8
  %indirectarg1291 = alloca %"char[]", align 8
  %varargslots1292 = alloca [2 x %any], align 16
  %indirectarg1295 = alloca %"any[]", align 8
  %taddr1303 = alloca i64, align 8
  %indirectarg1304 = alloca %"char[]", align 8
  %indirectarg1305 = alloca %"char[]", align 8
  %indirectarg1306 = alloca %"char[]", align 8
  %varargslots1307 = alloca [1 x %any], align 16
  %indirectarg1309 = alloca %"any[]", align 8
  %taddr1313 = alloca i64, align 8
  %taddr1314 = alloca i64, align 8
  %indirectarg1315 = alloca %"char[]", align 8
  %indirectarg1316 = alloca %"char[]", align 8
  %indirectarg1317 = alloca %"char[]", align 8
  %varargslots1318 = alloca [2 x %any], align 16
  %indirectarg1321 = alloca %"any[]", align 8
  %carry1327 = alloca i32, align 4
  %sh = alloca i32, align 4
  %i = alloca i32, align 4
  %taddr1338 = alloca i64, align 8
  %indirectarg1339 = alloca %"char[]", align 8
  %indirectarg1340 = alloca %"char[]", align 8
  %indirectarg1341 = alloca %"char[]", align 8
  %varargslots1342 = alloca [1 x %any], align 16
  %indirectarg1344 = alloca %"any[]", align 8
  %taddr1348 = alloca i64, align 8
  %taddr1349 = alloca i64, align 8
  %indirectarg1350 = alloca %"char[]", align 8
  %indirectarg1351 = alloca %"char[]", align 8
  %indirectarg1352 = alloca %"char[]", align 8
  %varargslots1353 = alloca [2 x %any], align 16
  %indirectarg1356 = alloca %"any[]", align 8
  %taddr1362 = alloca i64, align 8
  %indirectarg1363 = alloca %"char[]", align 8
  %indirectarg1364 = alloca %"char[]", align 8
  %indirectarg1365 = alloca %"char[]", align 8
  %varargslots1366 = alloca [1 x %any], align 16
  %indirectarg1368 = alloca %"any[]", align 8
  %taddr1372 = alloca i64, align 8
  %taddr1373 = alloca i64, align 8
  %indirectarg1374 = alloca %"char[]", align 8
  %indirectarg1375 = alloca %"char[]", align 8
  %indirectarg1376 = alloca %"char[]", align 8
  %varargslots1377 = alloca [2 x %any], align 16
  %indirectarg1380 = alloca %"any[]", align 8
  %taddr1393 = alloca i64, align 8
  %indirectarg1394 = alloca %"char[]", align 8
  %indirectarg1395 = alloca %"char[]", align 8
  %indirectarg1396 = alloca %"char[]", align 8
  %varargslots1397 = alloca [1 x %any], align 16
  %indirectarg1399 = alloca %"any[]", align 8
  %taddr1403 = alloca i64, align 8
  %taddr1404 = alloca i64, align 8
  %indirectarg1405 = alloca %"char[]", align 8
  %indirectarg1406 = alloca %"char[]", align 8
  %indirectarg1407 = alloca %"char[]", align 8
  %varargslots1408 = alloca [2 x %any], align 16
  %indirectarg1411 = alloca %"any[]", align 8
  %taddr1417 = alloca i64, align 8
  %indirectarg1418 = alloca %"char[]", align 8
  %indirectarg1419 = alloca %"char[]", align 8
  %indirectarg1420 = alloca %"char[]", align 8
  %varargslots1421 = alloca [1 x %any], align 16
  %indirectarg1423 = alloca %"any[]", align 8
  %taddr1427 = alloca i64, align 8
  %taddr1428 = alloca i64, align 8
  %indirectarg1429 = alloca %"char[]", align 8
  %indirectarg1430 = alloca %"char[]", align 8
  %indirectarg1431 = alloca %"char[]", align 8
  %varargslots1432 = alloca [2 x %any], align 16
  %indirectarg1435 = alloca %"any[]", align 8
  %tmp1457 = alloca i32, align 4
  %taddr1461 = alloca i64, align 8
  %indirectarg1462 = alloca %"char[]", align 8
  %indirectarg1463 = alloca %"char[]", align 8
  %indirectarg1464 = alloca %"char[]", align 8
  %varargslots1465 = alloca [1 x %any], align 16
  %indirectarg1467 = alloca %"any[]", align 8
  %taddr1471 = alloca i64, align 8
  %taddr1472 = alloca i64, align 8
  %indirectarg1473 = alloca %"char[]", align 8
  %indirectarg1474 = alloca %"char[]", align 8
  %indirectarg1475 = alloca %"char[]", align 8
  %varargslots1476 = alloca [2 x %any], align 16
  %indirectarg1479 = alloca %"any[]", align 8
  %taddr1483 = alloca i32, align 4
  %indirectarg1484 = alloca %"char[]", align 8
  %indirectarg1485 = alloca %"char[]", align 8
  %indirectarg1486 = alloca %"char[]", align 8
  %varargslots1487 = alloca [1 x %any], align 16
  %indirectarg1489 = alloca %"any[]", align 8
  %taddr1493 = alloca i32, align 4
  %indirectarg1494 = alloca %"char[]", align 8
  %indirectarg1495 = alloca %"char[]", align 8
  %indirectarg1496 = alloca %"char[]", align 8
  %varargslots1497 = alloca [1 x %any], align 16
  %indirectarg1499 = alloca %"any[]", align 8
  %taddr1507 = alloca i64, align 8
  %indirectarg1508 = alloca %"char[]", align 8
  %indirectarg1509 = alloca %"char[]", align 8
  %indirectarg1510 = alloca %"char[]", align 8
  %varargslots1511 = alloca [1 x %any], align 16
  %indirectarg1513 = alloca %"any[]", align 8
  %taddr1517 = alloca i64, align 8
  %taddr1518 = alloca i64, align 8
  %indirectarg1519 = alloca %"char[]", align 8
  %indirectarg1520 = alloca %"char[]", align 8
  %indirectarg1521 = alloca %"char[]", align 8
  %varargslots1522 = alloca [2 x %any], align 16
  %indirectarg1525 = alloca %"any[]", align 8
  %taddr1530 = alloca i32, align 4
  %indirectarg1531 = alloca %"char[]", align 8
  %indirectarg1532 = alloca %"char[]", align 8
  %indirectarg1533 = alloca %"char[]", align 8
  %varargslots1534 = alloca [1 x %any], align 16
  %indirectarg1536 = alloca %"any[]", align 8
  %taddr1543 = alloca i64, align 8
  %indirectarg1544 = alloca %"char[]", align 8
  %indirectarg1545 = alloca %"char[]", align 8
  %indirectarg1546 = alloca %"char[]", align 8
  %varargslots1547 = alloca [1 x %any], align 16
  %indirectarg1549 = alloca %"any[]", align 8
  %taddr1553 = alloca i64, align 8
  %taddr1554 = alloca i64, align 8
  %indirectarg1555 = alloca %"char[]", align 8
  %indirectarg1556 = alloca %"char[]", align 8
  %indirectarg1557 = alloca %"char[]", align 8
  %varargslots1558 = alloca [2 x %any], align 16
  %indirectarg1561 = alloca %"any[]", align 8
  %taddr1566 = alloca i32, align 4
  %indirectarg1567 = alloca %"char[]", align 8
  %indirectarg1568 = alloca %"char[]", align 8
  %indirectarg1569 = alloca %"char[]", align 8
  %varargslots1570 = alloca [1 x %any], align 16
  %indirectarg1572 = alloca %"any[]", align 8
  %taddr1576 = alloca i32, align 4
  %indirectarg1577 = alloca %"char[]", align 8
  %indirectarg1578 = alloca %"char[]", align 8
  %indirectarg1579 = alloca %"char[]", align 8
  %varargslots1580 = alloca [1 x %any], align 16
  %indirectarg1582 = alloca %"any[]", align 8
  %taddr1590 = alloca i64, align 8
  %indirectarg1591 = alloca %"char[]", align 8
  %indirectarg1592 = alloca %"char[]", align 8
  %indirectarg1593 = alloca %"char[]", align 8
  %varargslots1594 = alloca [1 x %any], align 16
  %indirectarg1596 = alloca %"any[]", align 8
  %taddr1600 = alloca i64, align 8
  %taddr1601 = alloca i64, align 8
  %indirectarg1602 = alloca %"char[]", align 8
  %indirectarg1603 = alloca %"char[]", align 8
  %indirectarg1604 = alloca %"char[]", align 8
  %varargslots1605 = alloca [2 x %any], align 16
  %indirectarg1608 = alloca %"any[]", align 8
  %taddr1632 = alloca i64, align 8
  %indirectarg1633 = alloca %"char[]", align 8
  %indirectarg1634 = alloca %"char[]", align 8
  %indirectarg1635 = alloca %"char[]", align 8
  %varargslots1636 = alloca [1 x %any], align 16
  %indirectarg1638 = alloca %"any[]", align 8
  %taddr1642 = alloca i64, align 8
  %taddr1643 = alloca i64, align 8
  %indirectarg1644 = alloca %"char[]", align 8
  %indirectarg1645 = alloca %"char[]", align 8
  %indirectarg1646 = alloca %"char[]", align 8
  %varargslots1647 = alloca [2 x %any], align 16
  %indirectarg1650 = alloca %"any[]", align 8
  %taddr1661 = alloca i64, align 8
  %indirectarg1662 = alloca %"char[]", align 8
  %indirectarg1663 = alloca %"char[]", align 8
  %indirectarg1664 = alloca %"char[]", align 8
  %varargslots1665 = alloca [1 x %any], align 16
  %indirectarg1667 = alloca %"any[]", align 8
  %taddr1671 = alloca i64, align 8
  %taddr1672 = alloca i64, align 8
  %indirectarg1673 = alloca %"char[]", align 8
  %indirectarg1674 = alloca %"char[]", align 8
  %indirectarg1675 = alloca %"char[]", align 8
  %varargslots1676 = alloca [2 x %any], align 16
  %indirectarg1679 = alloca %"any[]", align 8
  %y1686 = alloca double, align 8
  %i1687 = alloca i32, align 4
  %taddr1701 = alloca i64, align 8
  %indirectarg1702 = alloca %"char[]", align 8
  %indirectarg1703 = alloca %"char[]", align 8
  %indirectarg1704 = alloca %"char[]", align 8
  %varargslots1705 = alloca [1 x %any], align 16
  %indirectarg1707 = alloca %"any[]", align 8
  %taddr1711 = alloca i64, align 8
  %taddr1712 = alloca i64, align 8
  %indirectarg1713 = alloca %"char[]", align 8
  %indirectarg1714 = alloca %"char[]", align 8
  %indirectarg1715 = alloca %"char[]", align 8
  %varargslots1716 = alloca [2 x %any], align 16
  %indirectarg1719 = alloca %"any[]", align 8
  %taddr1729 = alloca i64, align 8
  %indirectarg1730 = alloca %"char[]", align 8
  %indirectarg1731 = alloca %"char[]", align 8
  %indirectarg1732 = alloca %"char[]", align 8
  %varargslots1733 = alloca [1 x %any], align 16
  %indirectarg1735 = alloca %"any[]", align 8
  %taddr1739 = alloca i64, align 8
  %taddr1740 = alloca i64, align 8
  %indirectarg1741 = alloca %"char[]", align 8
  %indirectarg1742 = alloca %"char[]", align 8
  %indirectarg1743 = alloca %"char[]", align 8
  %varargslots1744 = alloca [2 x %any], align 16
  %indirectarg1747 = alloca %"any[]", align 8
  %denormal = alloca i8, align 1
  %bits1756 = alloca i32, align 4
  %bias1769 = alloca double, align 8
  %frac = alloca double, align 8
  %x1772 = alloca double, align 8
  %n1775 = alloca i32, align 4
  %mag1776 = alloca double, align 8
  %sgn1777 = alloca double, align 8
  %x1778 = alloca double, align 8
  %y1779 = alloca double, align 8
  %x1781 = alloca double, align 8
  %n1783 = alloca i32, align 4
  %indirectarg1786 = alloca %"char[]", align 8
  %indirectarg1787 = alloca %"char[]", align 8
  %indirectarg1788 = alloca %"char[]", align 8
  %t = alloca i32, align 4
  %taddr1802 = alloca i64, align 8
  %indirectarg1803 = alloca %"char[]", align 8
  %indirectarg1804 = alloca %"char[]", align 8
  %indirectarg1805 = alloca %"char[]", align 8
  %varargslots1806 = alloca [1 x %any], align 16
  %indirectarg1808 = alloca %"any[]", align 8
  %taddr1812 = alloca i64, align 8
  %taddr1813 = alloca i64, align 8
  %indirectarg1814 = alloca %"char[]", align 8
  %indirectarg1815 = alloca %"char[]", align 8
  %indirectarg1816 = alloca %"char[]", align 8
  %varargslots1817 = alloca [2 x %any], align 16
  %indirectarg1820 = alloca %"any[]", align 8
  %switch1823 = alloca i8, align 1
  %x1886 = alloca double, align 8
  %x1914 = alloca double, align 8
  %n1915 = alloca i32, align 4
    #dbg_declare(ptr %1, !1957, !DIExpression(), !1958)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %chars, ptr align 8 %1, i32 16, i1 false)
    #dbg_declare(ptr %sign, !1959, !DIExpression(), !1961)
  store i32 1, ptr %sign, align 4, !dbg !1961
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg, ptr align 8 %chars, i32 16, i1 false)
  store %"char[]" { ptr @.str.99, i64 4 }, ptr %indirectarg1, align 8
  call void @std.core.String.trim(ptr sret(%"char[]") align 8 %chars, ptr align 8 %indirectarg, ptr align 8 %indirectarg1), !dbg !1962
  %ptradd = getelementptr inbounds i8, ptr %chars, i64 8, !dbg !1963
  %2 = load i64, ptr %ptradd, align 8, !dbg !1963
  %i2nb = icmp eq i64 %2, 0, !dbg !1963
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !1963

if.then:                                          ; preds = %entry
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_FLOAT to i64), ptr %reterr, align 8, !dbg !1963
  br label %err_retblock, !dbg !1963

if.exit:                                          ; preds = %entry
  %ptradd2 = getelementptr inbounds i8, ptr %chars, i64 8, !dbg !1964
  %3 = load i64, ptr %ptradd2, align 8, !dbg !1964
  %neq = icmp ne i64 1, %3, !dbg !1964
  br i1 %neq, label %if.then3, label %if.exit24, !dbg !1964

if.then3:                                         ; preds = %if.exit
  %ptradd4 = getelementptr inbounds i8, ptr %chars, i64 8, !dbg !1965
  %4 = load i64, ptr %ptradd4, align 8, !dbg !1965
  %5 = load ptr, ptr %chars, align 8, !dbg !1965
  %ge = icmp sge i64 0, %4, !dbg !1965
  %6 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !1965
  br i1 %6, label %panic, label %checkok, !dbg !1965

checkok:                                          ; preds = %if.then3
  %7 = load i8, ptr %5, align 1
  store i8 %7, ptr %switch, align 1
  br label %switch.entry

switch.entry:                                     ; preds = %checkok
  %8 = load i8, ptr %switch, align 1
  switch i8 %8, label %switch.exit [
    i8 45, label %switch.case
    i8 43, label %switch.case11
  ]

switch.case:                                      ; preds = %switch.entry
  store i32 -1, ptr %sign, align 4, !dbg !1968
  br label %switch.case11, !dbg !1970

switch.case11:                                    ; preds = %switch.entry, %switch.case
  %9 = load %"char[]", ptr %chars, align 8, !dbg !1971
  %10 = extractvalue %"char[]" %9, 0, !dbg !1971
  %11 = extractvalue %"char[]" %9, 1, !dbg !1971
  %gt = icmp sgt i64 1, %11, !dbg !1971
  %12 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !1971
  br i1 %12, label %panic12, label %checkok22, !dbg !1971

checkok22:                                        ; preds = %switch.case11
  %size = sub i64 %11, 1, !dbg !1971
  %ptradd23 = getelementptr inbounds i8, ptr %10, i64 1, !dbg !1971
  %13 = insertvalue %"char[]" undef, ptr %ptradd23, 0, !dbg !1971
  %14 = insertvalue %"char[]" %13, i64 %size, 1, !dbg !1971
  store %"char[]" %14, ptr %chars, align 8, !dbg !1971
  br label %switch.exit, !dbg !1971

switch.exit:                                      ; preds = %checkok22, %switch.entry
  br label %if.exit24, !dbg !1971

if.exit24:                                        ; preds = %switch.exit, %if.exit
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg25, ptr align 8 %chars, i32 16, i1 false)
  store %"char[]" { ptr @.str.102, i64 4 }, ptr %indirectarg26, align 8
  call void @std.core.String.trim(ptr sret(%"char[]") align 8 %chars, ptr align 8 %indirectarg25, ptr align 8 %indirectarg26), !dbg !1973
  %ptradd27 = getelementptr inbounds i8, ptr %chars, i64 8, !dbg !1974
  %15 = load i64, ptr %ptradd27, align 8, !dbg !1974
  %i2nb28 = icmp eq i64 %15, 0, !dbg !1974
  br i1 %i2nb28, label %if.then29, label %if.exit30, !dbg !1974

if.then29:                                        ; preds = %if.exit24
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_FLOAT to i64), ptr %reterr, align 8, !dbg !1974
  br label %err_retblock, !dbg !1974

if.exit30:                                        ; preds = %if.exit24
  %16 = load %"char[]", ptr %chars, align 8, !dbg !1975
  %17 = extractvalue %"char[]" %16, 1, !dbg !1975
  %18 = extractvalue %"char[]" %16, 0, !dbg !1975
  %eq = icmp eq i64 %17, 8, !dbg !1975
  br i1 %eq, label %slice_cmp_values, label %slice_cmp_exit, !dbg !1975

slice_cmp_values:                                 ; preds = %if.exit30
  store i64 0, ptr %cmp.idx, align 8
  br label %slice_loop_start

slice_loop_start:                                 ; preds = %slice_loop_comparison, %slice_cmp_values
  %19 = load i64, ptr %cmp.idx, align 8
  %lt = icmp slt i64 %19, %17
  br i1 %lt, label %slice_loop_comparison, label %slice_cmp_exit

slice_loop_comparison:                            ; preds = %slice_loop_start
  %ptradd31 = getelementptr inbounds i8, ptr %18, i64 %19
  %ptradd32 = getelementptr inbounds i8, ptr @.str.103, i64 %19
  %20 = load i8, ptr %ptradd31, align 1
  %21 = load i8, ptr %ptradd32, align 1
  %eq33 = icmp eq i8 %20, %21
  %22 = add i64 %19, 1
  store i64 %22, ptr %cmp.idx, align 8
  br i1 %eq33, label %slice_loop_start, label %slice_cmp_exit

slice_cmp_exit:                                   ; preds = %slice_loop_comparison, %slice_loop_start, %if.exit30
  %slice_cmp_phi = phi i1 [ true, %slice_loop_start ], [ false, %if.exit30 ], [ false, %slice_loop_comparison ]
  br i1 %slice_cmp_phi, label %or.phi, label %or.rhs

or.rhs:                                           ; preds = %slice_cmp_exit
  %23 = load %"char[]", ptr %chars, align 8, !dbg !1975
  %24 = extractvalue %"char[]" %23, 1, !dbg !1975
  %25 = extractvalue %"char[]" %23, 0, !dbg !1975
  %eq34 = icmp eq i64 %24, 8, !dbg !1975
  br i1 %eq34, label %slice_cmp_values35, label %slice_cmp_exit43, !dbg !1975

slice_cmp_values35:                               ; preds = %or.rhs
  store i64 0, ptr %cmp.idx36, align 8
  br label %slice_loop_start37

slice_loop_start37:                               ; preds = %slice_loop_comparison39, %slice_cmp_values35
  %26 = load i64, ptr %cmp.idx36, align 8
  %lt38 = icmp slt i64 %26, %24
  br i1 %lt38, label %slice_loop_comparison39, label %slice_cmp_exit43

slice_loop_comparison39:                          ; preds = %slice_loop_start37
  %ptradd40 = getelementptr inbounds i8, ptr %25, i64 %26
  %ptradd41 = getelementptr inbounds i8, ptr @.str.104, i64 %26
  %27 = load i8, ptr %ptradd40, align 1
  %28 = load i8, ptr %ptradd41, align 1
  %eq42 = icmp eq i8 %27, %28
  %29 = add i64 %26, 1
  store i64 %29, ptr %cmp.idx36, align 8
  br i1 %eq42, label %slice_loop_start37, label %slice_cmp_exit43

slice_cmp_exit43:                                 ; preds = %slice_loop_comparison39, %slice_loop_start37, %or.rhs
  %slice_cmp_phi44 = phi i1 [ true, %slice_loop_start37 ], [ false, %or.rhs ], [ false, %slice_loop_comparison39 ]
  br label %or.phi

or.phi:                                           ; preds = %slice_cmp_exit43, %slice_cmp_exit
  %val = phi i1 [ true, %slice_cmp_exit ], [ %slice_cmp_phi44, %slice_cmp_exit43 ]
  br i1 %val, label %if.then45, label %if.exit46

if.then45:                                        ; preds = %or.phi
  %30 = load i32, ptr %sign, align 4, !dbg !1975
  %sifp = sitofp i32 %30 to double, !dbg !1975
  %fmul = fmul double %sifp, 0x7FF0000000000000, !dbg !1975
  store double %fmul, ptr %blockret, align 8, !dbg !1975
  br label %expr_block.exit1918, !dbg !1975

if.exit46:                                        ; preds = %or.phi
  %31 = load %"char[]", ptr %chars, align 8, !dbg !1976
  %32 = extractvalue %"char[]" %31, 1, !dbg !1976
  %33 = extractvalue %"char[]" %31, 0, !dbg !1976
  %eq47 = icmp eq i64 %32, 3, !dbg !1976
  br i1 %eq47, label %slice_cmp_values48, label %slice_cmp_exit56, !dbg !1976

slice_cmp_values48:                               ; preds = %if.exit46
  store i64 0, ptr %cmp.idx49, align 8
  br label %slice_loop_start50

slice_loop_start50:                               ; preds = %slice_loop_comparison52, %slice_cmp_values48
  %34 = load i64, ptr %cmp.idx49, align 8
  %lt51 = icmp slt i64 %34, %32
  br i1 %lt51, label %slice_loop_comparison52, label %slice_cmp_exit56

slice_loop_comparison52:                          ; preds = %slice_loop_start50
  %ptradd53 = getelementptr inbounds i8, ptr %33, i64 %34
  %ptradd54 = getelementptr inbounds i8, ptr @.str.105, i64 %34
  %35 = load i8, ptr %ptradd53, align 1
  %36 = load i8, ptr %ptradd54, align 1
  %eq55 = icmp eq i8 %35, %36
  %37 = add i64 %34, 1
  store i64 %37, ptr %cmp.idx49, align 8
  br i1 %eq55, label %slice_loop_start50, label %slice_cmp_exit56

slice_cmp_exit56:                                 ; preds = %slice_loop_comparison52, %slice_loop_start50, %if.exit46
  %slice_cmp_phi57 = phi i1 [ true, %slice_loop_start50 ], [ false, %if.exit46 ], [ false, %slice_loop_comparison52 ]
  br i1 %slice_cmp_phi57, label %or.phi70, label %or.rhs58

or.rhs58:                                         ; preds = %slice_cmp_exit56
  %38 = load %"char[]", ptr %chars, align 8, !dbg !1976
  %39 = extractvalue %"char[]" %38, 1, !dbg !1976
  %40 = extractvalue %"char[]" %38, 0, !dbg !1976
  %eq59 = icmp eq i64 %39, 3, !dbg !1976
  br i1 %eq59, label %slice_cmp_values60, label %slice_cmp_exit68, !dbg !1976

slice_cmp_values60:                               ; preds = %or.rhs58
  store i64 0, ptr %cmp.idx61, align 8
  br label %slice_loop_start62

slice_loop_start62:                               ; preds = %slice_loop_comparison64, %slice_cmp_values60
  %41 = load i64, ptr %cmp.idx61, align 8
  %lt63 = icmp slt i64 %41, %39
  br i1 %lt63, label %slice_loop_comparison64, label %slice_cmp_exit68

slice_loop_comparison64:                          ; preds = %slice_loop_start62
  %ptradd65 = getelementptr inbounds i8, ptr %40, i64 %41
  %ptradd66 = getelementptr inbounds i8, ptr @.str.106, i64 %41
  %42 = load i8, ptr %ptradd65, align 1
  %43 = load i8, ptr %ptradd66, align 1
  %eq67 = icmp eq i8 %42, %43
  %44 = add i64 %41, 1
  store i64 %44, ptr %cmp.idx61, align 8
  br i1 %eq67, label %slice_loop_start62, label %slice_cmp_exit68

slice_cmp_exit68:                                 ; preds = %slice_loop_comparison64, %slice_loop_start62, %or.rhs58
  %slice_cmp_phi69 = phi i1 [ true, %slice_loop_start62 ], [ false, %or.rhs58 ], [ false, %slice_loop_comparison64 ]
  br label %or.phi70

or.phi70:                                         ; preds = %slice_cmp_exit68, %slice_cmp_exit56
  %val71 = phi i1 [ true, %slice_cmp_exit56 ], [ %slice_cmp_phi69, %slice_cmp_exit68 ]
  br i1 %val71, label %if.then72, label %if.exit73

if.then72:                                        ; preds = %or.phi70
  store double 0x7FF8000000000000, ptr %blockret, align 8, !dbg !1976
  br label %expr_block.exit1918, !dbg !1976

if.exit73:                                        ; preds = %or.phi70
  %ptradd74 = getelementptr inbounds i8, ptr %chars, i64 8, !dbg !1977
  %45 = load i64, ptr %ptradd74, align 8, !dbg !1977
  %lt75 = icmp ult i64 2, %45, !dbg !1977
  br i1 %lt75, label %and.rhs, label %and.phi, !dbg !1977

and.rhs:                                          ; preds = %if.exit73
  %ptradd76 = getelementptr inbounds i8, ptr %chars, i64 8, !dbg !1977
  %46 = load i64, ptr %ptradd76, align 8, !dbg !1977
  %47 = load ptr, ptr %chars, align 8, !dbg !1977
  %ge77 = icmp sge i64 0, %46, !dbg !1977
  %48 = call i1 @llvm.expect.i1(i1 %ge77, i1 false), !dbg !1977
  br i1 %48, label %panic78, label %checkok88, !dbg !1977

checkok88:                                        ; preds = %and.rhs
  %49 = load i8, ptr %47, align 1, !dbg !1977
  %eq89 = icmp eq i8 %49, 48, !dbg !1977
  br label %and.phi, !dbg !1977

and.phi:                                          ; preds = %checkok88, %if.exit73
  %val90 = phi i1 [ false, %if.exit73 ], [ %eq89, %checkok88 ], !dbg !1977
  br i1 %val90, label %and.rhs91, label %and.phi107, !dbg !1977

and.rhs91:                                        ; preds = %and.phi
  %ptradd92 = getelementptr inbounds i8, ptr %chars, i64 8, !dbg !1977
  %50 = load i64, ptr %ptradd92, align 8, !dbg !1977
  %51 = load ptr, ptr %chars, align 8, !dbg !1977
  %ge93 = icmp sge i64 1, %50, !dbg !1977
  %52 = call i1 @llvm.expect.i1(i1 %ge93, i1 false), !dbg !1977
  br i1 %52, label %panic94, label %checkok104, !dbg !1977

checkok104:                                       ; preds = %and.rhs91
  %ptradd105 = getelementptr inbounds i8, ptr %51, i64 1, !dbg !1977
  %53 = load i8, ptr %ptradd105, align 1, !dbg !1977
  %zext = zext i8 %53 to i32, !dbg !1977
  %or = or i32 %zext, 32, !dbg !1977
  %eq106 = icmp eq i32 %or, 120, !dbg !1977
  %check = icmp sge i32 %or, 0, !dbg !1977
  %siui-eq = and i1 %check, %eq106, !dbg !1977
  br label %and.phi107, !dbg !1977

and.phi107:                                       ; preds = %checkok104, %and.phi
  %val108 = phi i1 [ false, %and.phi ], [ %siui-eq, %checkok104 ], !dbg !1977
  br i1 %val108, label %if.then109, label %if.exit389, !dbg !1977

if.then109:                                       ; preds = %and.phi107
  %54 = load %"char[]", ptr %chars, align 8, !dbg !1978
  %55 = extractvalue %"char[]" %54, 0, !dbg !1978
  %56 = extractvalue %"char[]" %54, 1, !dbg !1978
  %gt110 = icmp sgt i64 2, %56, !dbg !1978
  %57 = call i1 @llvm.expect.i1(i1 %gt110, i1 false), !dbg !1978
  br i1 %57, label %panic111, label %checkok121, !dbg !1978

checkok121:                                       ; preds = %if.then109
  %size122 = sub i64 %56, 2, !dbg !1978
  %ptradd123 = getelementptr inbounds i8, ptr %55, i64 2, !dbg !1978
  %58 = insertvalue %"char[]" undef, ptr %ptradd123, 0, !dbg !1978
  %59 = insertvalue %"char[]" %58, i64 %size122, 1, !dbg !1978
  store %"char[]" %59, ptr %chars124, align 8
  %60 = load i32, ptr %sign, align 4
  store i32 %60, ptr %sign125, align 4
    #dbg_declare(ptr %scale, !1980, !DIExpression(), !1982)
  store double 1.000000e+00, ptr %scale, align 8, !dbg !1982
    #dbg_declare(ptr %x, !1983, !DIExpression(), !1984)
  store i32 0, ptr %x, align 4, !dbg !1984
    #dbg_declare(ptr %rp, !1985, !DIExpression(), !1986)
  store i64 0, ptr %rp, align 8, !dbg !1986
    #dbg_declare(ptr %dc, !1987, !DIExpression(), !1988)
  store i64 0, ptr %dc, align 8, !dbg !1988
    #dbg_declare(ptr %c, !1989, !DIExpression(), !1990)
    #dbg_declare(ptr %got_rad, !1991, !DIExpression(), !1992)
  store i8 0, ptr %got_rad, align 1, !dbg !1992
    #dbg_declare(ptr %got_digit, !1993, !DIExpression(), !1994)
  store i8 0, ptr %got_digit, align 1, !dbg !1994
    #dbg_declare(ptr %got_tail, !1995, !DIExpression(), !1996)
  store i8 0, ptr %got_tail, align 1, !dbg !1996
    #dbg_declare(ptr %len, !1997, !DIExpression(), !1998)
  %ptradd127 = getelementptr inbounds i8, ptr %chars124, i64 8, !dbg !1998
  %61 = load i64, ptr %ptradd127, align 8, !dbg !1998
  store i64 %61, ptr %len, align 8, !dbg !1998
    #dbg_declare(ptr %last_char, !1999, !DIExpression(), !2000)
  %62 = load i64, ptr %len, align 8, !dbg !2000
  %sub = sub i64 %62, 1, !dbg !2000
  store i64 %sub, ptr %last_char, align 8, !dbg !2000
    #dbg_declare(ptr %index, !2001, !DIExpression(), !2002)
  store i64 0, ptr %index, align 8, !dbg !2002
    #dbg_declare(ptr %y, !2003, !DIExpression(), !2004)
  store double 0.000000e+00, ptr %y, align 8, !dbg !2004
  br label %loop.cond, !dbg !2005

loop.cond:                                        ; preds = %if.exit145, %checkok121
  %ptradd128 = getelementptr inbounds i8, ptr %chars124, i64 8, !dbg !2006
  %63 = load i64, ptr %ptradd128, align 8, !dbg !2006
  %64 = load ptr, ptr %chars124, align 8, !dbg !2006
  %65 = load i64, ptr %index, align 8, !dbg !2006
  %ge129 = icmp uge i64 %65, %63, !dbg !2006
  %66 = call i1 @llvm.expect.i1(i1 %ge129, i1 false), !dbg !2006
  br i1 %66, label %panic130, label %checkok140, !dbg !2006

checkok140:                                       ; preds = %loop.cond
  %ptradd141 = getelementptr inbounds i8, ptr %64, i64 %65, !dbg !2006
  %67 = load i8, ptr %ptradd141, align 1, !dbg !2006
  store i8 %67, ptr %c, align 1, !dbg !2006
  %eq142 = icmp eq i8 %67, 48, !dbg !2006
  br i1 %eq142, label %loop.body, label %loop.exit, !dbg !2006

loop.body:                                        ; preds = %checkok140
  %68 = load i64, ptr %index, align 8, !dbg !2008
  %69 = load i64, ptr %last_char, align 8, !dbg !2008
  %eq143 = icmp eq i64 %68, %69, !dbg !2008
  br i1 %eq143, label %if.then144, label %if.exit145, !dbg !2008

if.then144:                                       ; preds = %loop.body
  store double 0.000000e+00, ptr %blockret126, align 8, !dbg !2008
  br label %expr_block.exit, !dbg !2008

if.exit145:                                       ; preds = %loop.body
  %70 = load i64, ptr %index, align 8, !dbg !2010
  %add = add i64 %70, 1, !dbg !2010
  store i64 %add, ptr %index, align 8, !dbg !2010
  br label %loop.cond, !dbg !2010

loop.exit:                                        ; preds = %checkok140
  %71 = load i8, ptr %c, align 1, !dbg !2011
  %eq146 = icmp eq i8 %71, 46, !dbg !2011
  br i1 %eq146, label %if.then147, label %if.exit201, !dbg !2011

if.then147:                                       ; preds = %loop.exit
  store i8 1, ptr %got_rad, align 1, !dbg !2012
  %72 = load i64, ptr %index, align 8, !dbg !2014
  %73 = load i64, ptr %last_char, align 8, !dbg !2014
  %eq148 = icmp eq i64 %72, %73, !dbg !2014
  br i1 %eq148, label %if.then149, label %if.exit153, !dbg !2014

if.then149:                                       ; preds = %if.then147
  %74 = load i8, ptr %got_digit, align 1, !dbg !2015
  %75 = trunc i8 %74 to i1, !dbg !2015
  br i1 %75, label %if.exit150, label %if.else, !dbg !2015

if.else:                                          ; preds = %if.then149
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_FLOAT to i64), ptr %reterr, align 8, !dbg !2015
  br label %err_retblock, !dbg !2015

if.exit150:                                       ; preds = %if.then149
  %76 = load i32, ptr %sign125, align 4, !dbg !2017
  %sifp151 = sitofp i32 %76 to double, !dbg !2017
  %fmul152 = fmul double %sifp151, 0.000000e+00, !dbg !2017
  store double %fmul152, ptr %blockret126, align 8, !dbg !2017
  br label %expr_block.exit, !dbg !2017

if.exit153:                                       ; preds = %if.then147
  %77 = load i64, ptr %index, align 8, !dbg !2018
  %78 = load i64, ptr %last_char, align 8, !dbg !2018
  %neq154 = icmp ne i64 %77, %78, !dbg !2018
  br i1 %neq154, label %and.rhs155, label %and.phi172, !dbg !2018

and.rhs155:                                       ; preds = %if.exit153
  %ptradd156 = getelementptr inbounds i8, ptr %chars124, i64 8, !dbg !2018
  %79 = load i64, ptr %ptradd156, align 8, !dbg !2018
  %80 = load ptr, ptr %chars124, align 8, !dbg !2018
  %81 = load i64, ptr %index, align 8, !dbg !2018
  %add157 = add i64 %81, 1, !dbg !2018
  store i64 %add157, ptr %index, align 8, !dbg !2018
  %ge158 = icmp uge i64 %add157, %79, !dbg !2018
  %82 = call i1 @llvm.expect.i1(i1 %ge158, i1 false), !dbg !2018
  br i1 %82, label %panic159, label %checkok169, !dbg !2018

checkok169:                                       ; preds = %and.rhs155
  %ptradd170 = getelementptr inbounds i8, ptr %80, i64 %add157, !dbg !2018
  %83 = load i8, ptr %ptradd170, align 1, !dbg !2018
  store i8 %83, ptr %c, align 1, !dbg !2018
  %eq171 = icmp eq i8 %83, 48, !dbg !2018
  br label %and.phi172, !dbg !2018

and.phi172:                                       ; preds = %checkok169, %if.exit153
  %val173 = phi i1 [ false, %if.exit153 ], [ %eq171, %checkok169 ], !dbg !2018
  br i1 %val173, label %if.then174, label %if.exit200, !dbg !2018

if.then174:                                       ; preds = %and.phi172
  %84 = load i64, ptr %rp, align 8, !dbg !2019
  %sub175 = sub i64 %84, 1, !dbg !2019
  store i64 %sub175, ptr %rp, align 8, !dbg !2019
  store i8 1, ptr %got_digit, align 1, !dbg !2021
  br label %loop.cond176, !dbg !2022

loop.cond176:                                     ; preds = %loop.body197, %if.then174
  %85 = load i64, ptr %last_char, align 8, !dbg !2023
  %86 = load i64, ptr %index, align 8, !dbg !2023
  %neq177 = icmp ne i64 %85, %86, !dbg !2023
  br i1 %neq177, label %and.rhs178, label %and.phi195, !dbg !2023

and.rhs178:                                       ; preds = %loop.cond176
  %ptradd179 = getelementptr inbounds i8, ptr %chars124, i64 8, !dbg !2023
  %87 = load i64, ptr %ptradd179, align 8, !dbg !2023
  %88 = load ptr, ptr %chars124, align 8, !dbg !2023
  %89 = load i64, ptr %index, align 8, !dbg !2023
  %add180 = add i64 %89, 1, !dbg !2023
  store i64 %add180, ptr %index, align 8, !dbg !2023
  %ge181 = icmp uge i64 %add180, %87, !dbg !2023
  %90 = call i1 @llvm.expect.i1(i1 %ge181, i1 false), !dbg !2023
  br i1 %90, label %panic182, label %checkok192, !dbg !2023

checkok192:                                       ; preds = %and.rhs178
  %ptradd193 = getelementptr inbounds i8, ptr %88, i64 %add180, !dbg !2023
  %91 = load i8, ptr %ptradd193, align 1, !dbg !2023
  store i8 %91, ptr %c, align 1, !dbg !2023
  %eq194 = icmp eq i8 %91, 48, !dbg !2023
  br label %and.phi195, !dbg !2023

and.phi195:                                       ; preds = %checkok192, %loop.cond176
  %val196 = phi i1 [ false, %loop.cond176 ], [ %eq194, %checkok192 ], !dbg !2023
  br i1 %val196, label %loop.body197, label %loop.exit199, !dbg !2023

loop.body197:                                     ; preds = %and.phi195
  %92 = load i64, ptr %rp, align 8, !dbg !2025
  %sub198 = sub i64 %92, 1, !dbg !2025
  store i64 %sub198, ptr %rp, align 8, !dbg !2025
  br label %loop.cond176, !dbg !2025

loop.exit199:                                     ; preds = %and.phi195
  br label %if.exit200, !dbg !2025

if.exit200:                                       ; preds = %loop.exit199, %and.phi172
  br label %if.exit201, !dbg !2025

if.exit201:                                       ; preds = %if.exit200, %loop.exit
  br label %loop.cond202, !dbg !2027

loop.cond202:                                     ; preds = %checkok270, %if.exit201
  %93 = load i8, ptr %c, align 1, !dbg !2028
  %zext203 = zext i8 %93 to i32, !dbg !2028
  %sub204 = sub i32 %zext203, 48, !dbg !2028
  %lt205 = icmp ult i32 %sub204, 10, !dbg !2028
  br i1 %lt205, label %or.phi211, label %or.rhs206, !dbg !2028

or.rhs206:                                        ; preds = %loop.cond202
  %94 = load i8, ptr %c, align 1, !dbg !2028
  %zext207 = zext i8 %94 to i32, !dbg !2028
  %or208 = or i32 %zext207, 32, !dbg !2028
  %sub209 = sub i32 %or208, 97, !dbg !2028
  %lt210 = icmp slt i32 %sub209, 6, !dbg !2028
  %siui-lt = or i1 false, %lt210, !dbg !2028
  br label %or.phi211, !dbg !2028

or.phi211:                                        ; preds = %or.rhs206, %loop.cond202
  %val212 = phi i1 [ true, %loop.cond202 ], [ %siui-lt, %or.rhs206 ], !dbg !2028
  br i1 %val212, label %or.phi215, label %or.rhs213, !dbg !2028

or.rhs213:                                        ; preds = %or.phi211
  %95 = load i8, ptr %c, align 1, !dbg !2028
  %eq214 = icmp eq i8 %95, 46, !dbg !2028
  br label %or.phi215, !dbg !2028

or.phi215:                                        ; preds = %or.rhs213, %or.phi211
  %val216 = phi i1 [ true, %or.phi211 ], [ %eq214, %or.rhs213 ], !dbg !2028
  br i1 %val216, label %loop.body217, label %loop.exit272, !dbg !2028

loop.body217:                                     ; preds = %or.phi215
  %96 = load i8, ptr %c, align 1, !dbg !2030
  %eq218 = icmp eq i8 %96, 46, !dbg !2030
  br i1 %eq218, label %if.then219, label %if.else222, !dbg !2030

if.then219:                                       ; preds = %loop.body217
  %97 = load i8, ptr %got_rad, align 1, !dbg !2032
  %98 = trunc i8 %97 to i1, !dbg !2032
  br i1 %98, label %if.then220, label %if.exit221, !dbg !2032

if.then220:                                       ; preds = %if.then219
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_FLOAT to i64), ptr %reterr, align 8, !dbg !2032
  br label %err_retblock, !dbg !2032

if.exit221:                                       ; preds = %if.then219
  store i8 1, ptr %got_rad, align 1, !dbg !2034
  %99 = load i64, ptr %dc, align 8, !dbg !2035
  store i64 %99, ptr %rp, align 8, !dbg !2035
  br label %if.exit253, !dbg !2035

if.else222:                                       ; preds = %loop.body217
  store i8 1, ptr %got_digit, align 1, !dbg !2036
    #dbg_declare(ptr %d, !2038, !DIExpression(), !2039)
  %100 = load i8, ptr %c, align 1, !dbg !2039
  %gt223 = icmp ugt i8 %100, 57, !dbg !2039
  br i1 %gt223, label %cond.lhs, label %cond.rhs, !dbg !2039

cond.lhs:                                         ; preds = %if.else222
  %101 = load i8, ptr %c, align 1, !dbg !2039
  %zext224 = zext i8 %101 to i32, !dbg !2039
  %or225 = or i32 %zext224, 32, !dbg !2039
  %add226 = add i32 %or225, 10, !dbg !2039
  %sub227 = sub i32 %add226, 97, !dbg !2039
  br label %cond.phi, !dbg !2039

cond.rhs:                                         ; preds = %if.else222
  %102 = load i8, ptr %c, align 1, !dbg !2039
  %zext228 = zext i8 %102 to i32, !dbg !2039
  %sub229 = sub i32 %zext228, 48, !dbg !2039
  br label %cond.phi, !dbg !2039

cond.phi:                                         ; preds = %cond.rhs, %cond.lhs
  %val230 = phi i32 [ %sub227, %cond.lhs ], [ %sub229, %cond.rhs ], !dbg !2039
  store i32 %val230, ptr %d, align 4, !dbg !2039
  store i8 1, ptr %switch231, align 1
  br label %switch.entry232

switch.entry232:                                  ; preds = %cond.phi
  %103 = load i8, ptr %switch231, align 1
  %104 = trunc i8 %103 to i1
  %105 = load i64, ptr %dc, align 8, !dbg !2040
  %lt233 = icmp slt i64 %105, 8, !dbg !2040
  %eq234 = icmp eq i1 %lt233, %104, !dbg !2040
  br i1 %eq234, label %switch.case235, label %next_if, !dbg !2040

switch.case235:                                   ; preds = %switch.entry232
  %106 = load i32, ptr %x, align 4, !dbg !2042
  %mul = mul i32 %106, 16, !dbg !2042
  %107 = load i32, ptr %d, align 4, !dbg !2042
  %add236 = add i32 %mul, %107, !dbg !2042
  store i32 %add236, ptr %x, align 4, !dbg !2042
  br label %switch.exit251, !dbg !2042

next_if:                                          ; preds = %switch.entry232
  %108 = load i64, ptr %dc, align 8, !dbg !2044
  %lt237 = icmp slt i64 %108, 14, !dbg !2044
  %eq238 = icmp eq i1 %lt237, %104, !dbg !2044
  br i1 %eq238, label %switch.case239, label %next_if242, !dbg !2044

switch.case239:                                   ; preds = %next_if
  %109 = load double, ptr %y, align 8, !dbg !2045
  %110 = load i32, ptr %d, align 4, !dbg !2045
  %sifp240 = sitofp i32 %110 to double, !dbg !2045
  %111 = load double, ptr %scale, align 8, !dbg !2045
  %fdiv = fdiv double %111, 1.600000e+01, !dbg !2045
  store double %fdiv, ptr %scale, align 8, !dbg !2045
  %fmul241 = fmul double %sifp240, %fdiv, !dbg !2045
  %fadd = fadd double %109, %fmul241, !dbg !2045
  store double %fadd, ptr %y, align 8, !dbg !2045
  store i8 1, ptr %got_tail, align 1, !dbg !2047
  br label %switch.exit251, !dbg !2047

next_if242:                                       ; preds = %next_if
  %112 = load i32, ptr %d, align 4, !dbg !2048
  %i2b = icmp ne i32 %112, 0, !dbg !2048
  br i1 %i2b, label %and.rhs243, label %and.phi244, !dbg !2048

and.rhs243:                                       ; preds = %next_if242
  %113 = load i8, ptr %got_tail, align 1, !dbg !2048
  %114 = trunc i8 %113 to i1, !dbg !2048
  %not = xor i1 %114, true, !dbg !2048
  br label %and.phi244, !dbg !2048

and.phi244:                                       ; preds = %and.rhs243, %next_if242
  %val245 = phi i1 [ false, %next_if242 ], [ %not, %and.rhs243 ], !dbg !2048
  %eq246 = icmp eq i1 %val245, %104, !dbg !2048
  br i1 %eq246, label %switch.case247, label %next_if250, !dbg !2048

switch.case247:                                   ; preds = %and.phi244
  %115 = load double, ptr %y, align 8, !dbg !2049
  %116 = load double, ptr %scale, align 8, !dbg !2049
  %fmul248 = fmul double 5.000000e-01, %116, !dbg !2049
  %fadd249 = fadd double %115, %fmul248, !dbg !2049
  store double %fadd249, ptr %y, align 8, !dbg !2049
  store i8 1, ptr %got_tail, align 1, !dbg !2051
  br label %switch.exit251, !dbg !2051

next_if250:                                       ; preds = %and.phi244
  br label %switch.exit251, !dbg !2051

switch.exit251:                                   ; preds = %next_if250, %switch.case247, %switch.case239, %switch.case235
  %117 = load i64, ptr %dc, align 8, !dbg !2052
  %add252 = add i64 %117, 1, !dbg !2052
  store i64 %add252, ptr %dc, align 8, !dbg !2052
  br label %if.exit253, !dbg !2052

if.exit253:                                       ; preds = %switch.exit251, %if.exit221
  %118 = load i64, ptr %index, align 8, !dbg !2053
  %119 = load i64, ptr %last_char, align 8, !dbg !2053
  %eq254 = icmp eq i64 %118, %119, !dbg !2053
  br i1 %eq254, label %if.then255, label %if.exit256, !dbg !2053

if.then255:                                       ; preds = %if.exit253
  br label %loop.exit272, !dbg !2053

if.exit256:                                       ; preds = %if.exit253
  %ptradd257 = getelementptr inbounds i8, ptr %chars124, i64 8, !dbg !2054
  %120 = load i64, ptr %ptradd257, align 8, !dbg !2054
  %121 = load ptr, ptr %chars124, align 8, !dbg !2054
  %122 = load i64, ptr %index, align 8, !dbg !2054
  %add258 = add i64 %122, 1, !dbg !2054
  store i64 %add258, ptr %index, align 8, !dbg !2054
  %ge259 = icmp uge i64 %add258, %120, !dbg !2054
  %123 = call i1 @llvm.expect.i1(i1 %ge259, i1 false), !dbg !2054
  br i1 %123, label %panic260, label %checkok270, !dbg !2054

checkok270:                                       ; preds = %if.exit256
  %ptradd271 = getelementptr inbounds i8, ptr %121, i64 %add258, !dbg !2054
  %124 = load i8, ptr %ptradd271, align 1, !dbg !2054
  store i8 %124, ptr %c, align 1, !dbg !2054
  br label %loop.cond202, !dbg !2054

loop.exit272:                                     ; preds = %if.then255, %or.phi215
  %125 = load i8, ptr %got_digit, align 1, !dbg !2055
  %126 = trunc i8 %125 to i1, !dbg !2055
  br i1 %126, label %if.exit274, label %if.else273, !dbg !2055

if.else273:                                       ; preds = %loop.exit272
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_FLOAT to i64), ptr %reterr, align 8, !dbg !2055
  br label %err_retblock, !dbg !2055

if.exit274:                                       ; preds = %loop.exit272
  %127 = load i8, ptr %got_rad, align 1, !dbg !2056
  %128 = trunc i8 %127 to i1, !dbg !2056
  br i1 %128, label %if.exit276, label %if.else275, !dbg !2056

if.else275:                                       ; preds = %if.exit274
  %129 = load i64, ptr %dc, align 8, !dbg !2056
  store i64 %129, ptr %rp, align 8, !dbg !2056
  br label %if.exit276, !dbg !2056

if.exit276:                                       ; preds = %if.else275, %if.exit274
  br label %loop.cond277, !dbg !2057

loop.cond277:                                     ; preds = %loop.body279, %if.exit276
  %130 = load i64, ptr %dc, align 8, !dbg !2058
  %lt278 = icmp slt i64 %130, 8, !dbg !2058
  br i1 %lt278, label %loop.body279, label %loop.exit282, !dbg !2058

loop.body279:                                     ; preds = %loop.cond277
  %131 = load i32, ptr %x, align 4, !dbg !2058
  %mul280 = mul i32 %131, 16, !dbg !2058
  store i32 %mul280, ptr %x, align 4, !dbg !2058
  %132 = load i64, ptr %dc, align 8, !dbg !2058
  %add281 = add i64 %132, 1, !dbg !2058
  store i64 %add281, ptr %dc, align 8, !dbg !2058
  br label %loop.cond277, !dbg !2058

loop.exit282:                                     ; preds = %loop.cond277
    #dbg_declare(ptr %e2, !2060, !DIExpression(), !2061)
  store i64 0, ptr %e2, align 8, !dbg !2061
  %133 = load i8, ptr %c, align 1, !dbg !2062
  %zext283 = zext i8 %133 to i32, !dbg !2062
  %or284 = or i32 %zext283, 32, !dbg !2062
  %eq285 = icmp eq i32 %or284, 112, !dbg !2062
  %check286 = icmp sge i32 %or284, 0, !dbg !2062
  %siui-eq287 = and i1 %check286, %eq285, !dbg !2062
  br i1 %siui-eq287, label %if.then288, label %if.exit314, !dbg !2062

if.then288:                                       ; preds = %loop.exit282
    #dbg_declare(ptr %e2val, !2063, !DIExpression(), !2065)
  %134 = load %"char[]", ptr %chars124, align 8, !dbg !2065
  %135 = extractvalue %"char[]" %134, 0, !dbg !2065
  %136 = load i64, ptr %index, align 8, !dbg !2065
  %add289 = add i64 %136, 1, !dbg !2065
  %137 = extractvalue %"char[]" %134, 1, !dbg !2065
  %gt290 = icmp sgt i64 %add289, %137, !dbg !2065
  %138 = call i1 @llvm.expect.i1(i1 %gt290, i1 false), !dbg !2065
  br i1 %138, label %panic291, label %checkok301, !dbg !2065

checkok301:                                       ; preds = %if.then288
  %underflow = icmp slt i64 %add289, 0, !dbg !2065
  %139 = call i1 @llvm.expect.i1(i1 %underflow, i1 false), !dbg !2065
  br i1 %139, label %panic302, label %checkok310, !dbg !2065

checkok310:                                       ; preds = %checkok301
  %size311 = sub i64 %137, %add289, !dbg !2065
  %ptradd312 = getelementptr inbounds i8, ptr %135, i64 %add289, !dbg !2065
  %140 = insertvalue %"char[]" undef, ptr %ptradd312, 0, !dbg !2065
  %141 = insertvalue %"char[]" %140, i64 %size311, 1, !dbg !2065
  store %"char[]" %141, ptr %indirectarg313, align 8
  %142 = call i64 @std.core.String.to_long(ptr %retparam, ptr align 8 %indirectarg313, i32 10), !dbg !2065
  %not_err = icmp eq i64 %142, 0, !dbg !2065
  %143 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !2065
  br i1 %143, label %after_check, label %else_block, !dbg !2065

after_check:                                      ; preds = %checkok310
  %144 = load i64, ptr %retparam, align 8, !dbg !2065
  br label %phi_block, !dbg !2065

else_block:                                       ; preds = %checkok310
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_FLOAT to i64), ptr %error_var, align 8, !dbg !2065
  br label %guard_block, !dbg !2065

guard_block:                                      ; preds = %else_block
  %145 = load i64, ptr %error_var, align 8, !dbg !2065
  store i64 %145, ptr %reterr, align 8, !dbg !2065
  br label %err_retblock, !dbg !2065

phi_block:                                        ; preds = %after_check
  store i64 %144, ptr %e2val, align 8, !dbg !2065
  %146 = load i64, ptr %e2val, align 8, !dbg !2066
  store i64 %146, ptr %e2, align 8, !dbg !2066
  br label %if.exit314, !dbg !2066

if.exit314:                                       ; preds = %phi_block, %loop.exit282
  %147 = load i64, ptr %e2, align 8, !dbg !2067
  %148 = load i64, ptr %rp, align 8, !dbg !2067
  %mul315 = mul i64 4, %148, !dbg !2067
  %sub316 = sub i64 %mul315, 32, !dbg !2067
  %add317 = add i64 %147, %sub316, !dbg !2067
  store i64 %add317, ptr %e2, align 8, !dbg !2067
  %149 = load i32, ptr %x, align 4, !dbg !2068
  %i2nb318 = icmp eq i32 %149, 0, !dbg !2068
  br i1 %i2nb318, label %if.then319, label %if.exit322, !dbg !2068

if.then319:                                       ; preds = %if.exit314
  %150 = load i32, ptr %sign125, align 4, !dbg !2068
  %sifp320 = sitofp i32 %150 to double, !dbg !2068
  %fmul321 = fmul double %sifp320, 0.000000e+00, !dbg !2068
  store double %fmul321, ptr %blockret126, align 8, !dbg !2068
  br label %expr_block.exit, !dbg !2068

if.exit322:                                       ; preds = %if.exit314
  %151 = load i64, ptr %e2, align 8, !dbg !2069
  %gt323 = icmp sgt i64 %151, 1074, !dbg !2069
  br i1 %gt323, label %if.then324, label %if.exit325, !dbg !2069

if.then324:                                       ; preds = %if.exit322
  store i64 ptrtoint (ptr @std.core.string.FLOAT_OUT_OF_RANGE to i64), ptr %reterr, align 8, !dbg !2069
  br label %err_retblock, !dbg !2069

if.exit325:                                       ; preds = %if.exit322
  %152 = load i64, ptr %e2, align 8, !dbg !2070
  %lt326 = icmp slt i64 %152, -1180, !dbg !2070
  br i1 %lt326, label %if.then327, label %if.exit328, !dbg !2070

if.then327:                                       ; preds = %if.exit325
  store i64 ptrtoint (ptr @std.core.string.FLOAT_OUT_OF_RANGE to i64), ptr %reterr, align 8, !dbg !2070
  br label %err_retblock, !dbg !2070

if.exit328:                                       ; preds = %if.exit325
  br label %loop.cond329, !dbg !2071

loop.cond329:                                     ; preds = %if.exit340, %if.exit328
  %153 = load i32, ptr %x, align 4, !dbg !2072
  %lt330 = icmp ult i32 %153, -2147483648, !dbg !2072
  br i1 %lt330, label %loop.body331, label %loop.exit342, !dbg !2072

loop.body331:                                     ; preds = %loop.cond329
  %154 = load double, ptr %y, align 8, !dbg !2074
  %ge332 = fcmp oge double %154, 5.000000e-01, !dbg !2074
  br i1 %ge332, label %if.then333, label %if.else337, !dbg !2074

if.then333:                                       ; preds = %loop.body331
  %155 = load i32, ptr %x, align 4, !dbg !2076
  %156 = load i32, ptr %x, align 4, !dbg !2076
  %add334 = add i32 %156, 1, !dbg !2076
  %add335 = add i32 %155, %add334, !dbg !2076
  store i32 %add335, ptr %x, align 4, !dbg !2076
  %157 = load double, ptr %y, align 8, !dbg !2078
  %158 = load double, ptr %y, align 8, !dbg !2078
  %fsub = fsub double %158, 1.000000e+00, !dbg !2078
  %fadd336 = fadd double %157, %fsub, !dbg !2078
  store double %fadd336, ptr %y, align 8, !dbg !2078
  br label %if.exit340, !dbg !2078

if.else337:                                       ; preds = %loop.body331
  %159 = load i32, ptr %x, align 4, !dbg !2079
  %160 = load i32, ptr %x, align 4, !dbg !2079
  %add338 = add i32 %159, %160, !dbg !2079
  store i32 %add338, ptr %x, align 4, !dbg !2079
  %161 = load double, ptr %y, align 8, !dbg !2081
  %162 = load double, ptr %y, align 8, !dbg !2081
  %fadd339 = fadd double %161, %162, !dbg !2081
  store double %fadd339, ptr %y, align 8, !dbg !2081
  br label %if.exit340, !dbg !2081

if.exit340:                                       ; preds = %if.else337, %if.then333
  %163 = load i64, ptr %e2, align 8, !dbg !2082
  %sub341 = sub i64 %163, 1, !dbg !2082
  store i64 %sub341, ptr %e2, align 8, !dbg !2082
  br label %loop.cond329, !dbg !2082

loop.exit342:                                     ; preds = %loop.cond329
    #dbg_declare(ptr %bits, !2083, !DIExpression(), !2084)
  store i32 53, ptr %bits, align 4, !dbg !2084
  %164 = load i64, ptr %e2, align 8, !dbg !2085
  %add343 = add i64 32, %164, !dbg !2085
  %sub344 = sub i64 %add343, -1074, !dbg !2085
  %gt345 = icmp sgt i64 53, %sub344, !dbg !2085
  br i1 %gt345, label %if.then346, label %if.exit352, !dbg !2085

if.then346:                                       ; preds = %loop.exit342
  %165 = load i64, ptr %e2, align 8, !dbg !2086
  %add347 = add i64 32, %165, !dbg !2086
  %sub348 = sub i64 %add347, -1074, !dbg !2086
  %trunc = trunc i64 %sub348 to i32, !dbg !2086
  store i32 %trunc, ptr %bits, align 4, !dbg !2086
  %166 = load i32, ptr %bits, align 4, !dbg !2088
  %lt349 = icmp slt i32 %166, 0, !dbg !2088
  br i1 %lt349, label %if.then350, label %if.exit351, !dbg !2088

if.then350:                                       ; preds = %if.then346
  store i32 0, ptr %bits, align 4, !dbg !2088
  br label %if.exit351, !dbg !2088

if.exit351:                                       ; preds = %if.then350, %if.then346
  br label %if.exit352, !dbg !2088

if.exit352:                                       ; preds = %if.exit351, %loop.exit342
    #dbg_declare(ptr %bias, !2089, !DIExpression(), !2090)
  store double 0.000000e+00, ptr %bias, align 8, !dbg !2090
  %167 = load i32, ptr %bits, align 4, !dbg !2091
  %lt353 = icmp slt i32 %167, 53, !dbg !2091
  br i1 %lt353, label %if.then354, label %if.exit362, !dbg !2091

if.then354:                                       ; preds = %if.exit352
  store double 1.000000e+00, ptr %x355, align 8
  %168 = load i32, ptr %bits, align 4, !dbg !2092
  %sub356 = sub i32 85, %168, !dbg !2092
  %sub357 = sub i32 %sub356, 1, !dbg !2092
  store i32 %sub357, ptr %n, align 4
  %169 = load double, ptr %x355, align 8, !dbg !2094
  %170 = load i32, ptr %n, align 4, !dbg !2094
  %171 = call double @scalbn(double %169, i32 %170), !dbg !2094
  store double %171, ptr %mag, align 8
  %172 = load i32, ptr %sign125, align 4, !dbg !2092
  %sifp358 = sitofp i32 %172 to double, !dbg !2092
  store double %sifp358, ptr %sgn, align 8
  %173 = load double, ptr %mag, align 8
  store double %173, ptr %x359, align 8
  %174 = load double, ptr %sgn, align 8
  store double %174, ptr %y360, align 8
  %175 = load double, ptr %x359, align 8, !dbg !2096
  %176 = load double, ptr %sgn, align 8, !dbg !2099
  %177 = call double @llvm.copysign.f64(double %175, double %176), !dbg !2099
  store double %177, ptr %bias, align 8, !dbg !2099
  br label %if.exit362, !dbg !2099

if.exit362:                                       ; preds = %if.then354, %if.exit352
  %178 = load i32, ptr %bits, align 4, !dbg !2101
  %lt363 = icmp slt i32 %178, 32, !dbg !2101
  br i1 %lt363, label %and.rhs364, label %and.phi366, !dbg !2101

and.rhs364:                                       ; preds = %if.exit362
  %179 = load double, ptr %y, align 8, !dbg !2101
  %neq365 = fcmp one double %179, 0.000000e+00, !dbg !2101
  br label %and.phi366, !dbg !2101

and.phi366:                                       ; preds = %and.rhs364, %if.exit362
  %val367 = phi i1 [ false, %if.exit362 ], [ %neq365, %and.rhs364 ], !dbg !2101
  br i1 %val367, label %and.rhs368, label %and.phi370, !dbg !2101

and.rhs368:                                       ; preds = %and.phi366
  %180 = load i32, ptr %x, align 4, !dbg !2101
  %and = and i32 %180, 1, !dbg !2101
  %i2nb369 = icmp eq i32 %and, 0, !dbg !2101
  br label %and.phi370, !dbg !2101

and.phi370:                                       ; preds = %and.rhs368, %and.phi366
  %val371 = phi i1 [ false, %and.phi366 ], [ %i2nb369, %and.rhs368 ], !dbg !2101
  br i1 %val371, label %if.then372, label %if.exit374, !dbg !2101

if.then372:                                       ; preds = %and.phi370
  %181 = load i32, ptr %x, align 4, !dbg !2102
  %add373 = add i32 %181, 1, !dbg !2102
  store i32 %add373, ptr %x, align 4, !dbg !2102
  store double 0.000000e+00, ptr %y, align 8, !dbg !2104
  br label %if.exit374, !dbg !2104

if.exit374:                                       ; preds = %if.then372, %and.phi370
  %182 = load double, ptr %bias, align 8, !dbg !2105
  %183 = load i32, ptr %sign125, align 4, !dbg !2105
  %sifp375 = sitofp i32 %183 to double, !dbg !2105
  %184 = load i32, ptr %x, align 4, !dbg !2105
  %uifp = uitofp i32 %184 to double, !dbg !2105
  %fmul376 = fmul double %sifp375, %uifp, !dbg !2105
  %fadd377 = fadd double %182, %fmul376, !dbg !2105
  %185 = load i32, ptr %sign125, align 4, !dbg !2105
  %sifp378 = sitofp i32 %185 to double, !dbg !2105
  %186 = load double, ptr %y, align 8, !dbg !2105
  %fmul379 = fmul double %sifp378, %186, !dbg !2105
  %fadd380 = fadd double %fadd377, %fmul379, !dbg !2105
  store double %fadd380, ptr %y, align 8, !dbg !2105
  %187 = load double, ptr %y, align 8, !dbg !2106
  %188 = load double, ptr %bias, align 8, !dbg !2106
  %fsub381 = fsub double %187, %188, !dbg !2106
  store double %fsub381, ptr %y, align 8, !dbg !2106
  %189 = load double, ptr %y, align 8, !dbg !2107
  %neq382 = fcmp one double %189, 0.000000e+00, !dbg !2107
  br i1 %neq382, label %if.exit384, label %if.else383, !dbg !2107

if.else383:                                       ; preds = %if.exit374
  store i64 ptrtoint (ptr @std.core.string.FLOAT_OUT_OF_RANGE to i64), ptr %reterr, align 8, !dbg !2107
  br label %err_retblock, !dbg !2107

if.exit384:                                       ; preds = %if.exit374
  %190 = load double, ptr %y, align 8
  store double %190, ptr %x385, align 8
  %191 = load i64, ptr %e2, align 8, !dbg !2108
  %trunc386 = trunc i64 %191 to i32, !dbg !2108
  store i32 %trunc386, ptr %n387, align 4
  %192 = load double, ptr %x385, align 8, !dbg !2109
  %193 = load i32, ptr %n387, align 4, !dbg !2109
  %194 = call double @scalbn(double %192, i32 %193), !dbg !2109
  store double %194, ptr %blockret126, align 8, !dbg !2109
  br label %expr_block.exit, !dbg !2109

expr_block.exit:                                  ; preds = %if.exit384, %if.then319, %if.exit150, %if.then144
  %195 = load double, ptr %blockret126, align 8, !dbg !2109
  store double %195, ptr %blockret, align 8, !dbg !2109
  br label %expr_block.exit1918, !dbg !2109

if.exit389:                                       ; preds = %and.phi107
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %chars390, ptr align 8 %chars, i32 16, i1 false)
  %196 = load i32, ptr %sign, align 4
  store i32 %196, ptr %sign391, align 4
  %ptradd393 = getelementptr inbounds i8, ptr %chars390, i64 8, !dbg !2111
  %197 = load i64, ptr %ptradd393, align 8, !dbg !2111
  %lt394 = icmp ult i64 0, %197, !dbg !2115
  br i1 %lt394, label %assert_ok, label %assert_fail, !dbg !2115

assert_fail:                                      ; preds = %if.exit389
  store %"char[]" { ptr @.panic_msg.108, i64 34 }, ptr %indirectarg395, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg396, align 8
  store %"char[]" { ptr @.func.101, i64 9 }, ptr %indirectarg397, align 8
  %198 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %198(ptr align 8 %indirectarg395, ptr align 8 %indirectarg396, ptr align 8 %indirectarg397, i32 489) #6, !dbg !2115
  unreachable, !dbg !2115

assert_ok:                                        ; preds = %if.exit389
    #dbg_declare(ptr %x398, !2116, !DIExpression(), !2120)
  call void @llvm.memset.p0.i64(ptr align 16 %x398, i8 0, i64 512, i1 false), !dbg !2120
    #dbg_declare(ptr %emax, !2121, !DIExpression(), !2122)
  store i32 1024, ptr %emax, align 4, !dbg !2122
    #dbg_declare(ptr %index399, !2123, !DIExpression(), !2124)
  store i64 0, ptr %index399, align 8, !dbg !2124
    #dbg_declare(ptr %got_digit400, !2125, !DIExpression(), !2126)
  %ptradd401 = getelementptr inbounds i8, ptr %chars390, i64 8, !dbg !2126
  %199 = load i64, ptr %ptradd401, align 8, !dbg !2126
  %200 = load ptr, ptr %chars390, align 8, !dbg !2126
  %ge402 = icmp sge i64 0, %199, !dbg !2126
  %201 = call i1 @llvm.expect.i1(i1 %ge402, i1 false), !dbg !2126
  br i1 %201, label %panic403, label %checkok413, !dbg !2126

checkok413:                                       ; preds = %assert_ok
  %202 = load i8, ptr %200, align 1, !dbg !2126
  %eq414 = icmp eq i8 %202, 48, !dbg !2126
  %203 = zext i1 %eq414 to i8, !dbg !2126
  store i8 %203, ptr %got_digit400, align 1, !dbg !2126
    #dbg_declare(ptr %got_rad415, !2127, !DIExpression(), !2128)
  store i8 0, ptr %got_rad415, align 1, !dbg !2128
    #dbg_declare(ptr %lrp, !2129, !DIExpression(), !2130)
  store i64 0, ptr %lrp, align 8, !dbg !2130
    #dbg_declare(ptr %dc416, !2131, !DIExpression(), !2130)
  store i64 0, ptr %dc416, align 8, !dbg !2130
    #dbg_declare(ptr %k, !2132, !DIExpression(), !2133)
  store i32 0, ptr %k, align 4, !dbg !2133
    #dbg_declare(ptr %j, !2134, !DIExpression(), !2133)
  store i32 0, ptr %j, align 4, !dbg !2133
    #dbg_declare(ptr %lnz, !2135, !DIExpression(), !2133)
  store i32 0, ptr %lnz, align 4, !dbg !2133
    #dbg_declare(ptr %len417, !2136, !DIExpression(), !2137)
  %ptradd418 = getelementptr inbounds i8, ptr %chars390, i64 8, !dbg !2137
  %204 = load i64, ptr %ptradd418, align 8, !dbg !2137
  store i64 %204, ptr %len417, align 8, !dbg !2137
    #dbg_declare(ptr %last_char419, !2138, !DIExpression(), !2139)
  %205 = load i64, ptr %len417, align 8, !dbg !2139
  %sub420 = sub i64 %205, 1, !dbg !2139
  store i64 %sub420, ptr %last_char419, align 8, !dbg !2139
  %206 = load i64, ptr %len417, align 8, !dbg !2140
  %i2b421 = icmp ne i64 %206, 0, !dbg !2140
  br i1 %i2b421, label %assert_ok426, label %assert_fail422, !dbg !2140

assert_fail422:                                   ; preds = %checkok413
  store %"char[]" { ptr @.panic_msg.109, i64 20 }, ptr %indirectarg423, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg424, align 8
  store %"char[]" { ptr @.func.101, i64 9 }, ptr %indirectarg425, align 8
  %207 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %207(ptr align 8 %indirectarg423, ptr align 8 %indirectarg424, ptr align 8 %indirectarg425, i32 52) #6, !dbg !2140
  unreachable, !dbg !2140

assert_ok426:                                     ; preds = %checkok413
    #dbg_declare(ptr %c427, !2141, !DIExpression(), !2142)
  br label %loop.cond428, !dbg !2143

loop.cond428:                                     ; preds = %if.exit449, %assert_ok426
  %ptradd429 = getelementptr inbounds i8, ptr %chars390, i64 8, !dbg !2144
  %208 = load i64, ptr %ptradd429, align 8, !dbg !2144
  %209 = load ptr, ptr %chars390, align 8, !dbg !2144
  %210 = load i64, ptr %index399, align 8, !dbg !2144
  %ge430 = icmp uge i64 %210, %208, !dbg !2144
  %211 = call i1 @llvm.expect.i1(i1 %ge430, i1 false), !dbg !2144
  br i1 %211, label %panic431, label %checkok441, !dbg !2144

checkok441:                                       ; preds = %loop.cond428
  %ptradd442 = getelementptr inbounds i8, ptr %209, i64 %210, !dbg !2144
  %212 = load i8, ptr %ptradd442, align 1, !dbg !2144
  store i8 %212, ptr %c427, align 1, !dbg !2144
  %eq443 = icmp eq i8 %212, 48, !dbg !2144
  br i1 %eq443, label %loop.body444, label %loop.exit451, !dbg !2144

loop.body444:                                     ; preds = %checkok441
  %213 = load i64, ptr %index399, align 8, !dbg !2146
  %214 = load i64, ptr %last_char419, align 8, !dbg !2146
  %eq445 = icmp eq i64 %213, %214, !dbg !2146
  br i1 %eq445, label %if.then446, label %if.exit449, !dbg !2146

if.then446:                                       ; preds = %loop.body444
  %215 = load i32, ptr %sign391, align 4, !dbg !2146
  %sifp447 = sitofp i32 %215 to double, !dbg !2146
  %fmul448 = fmul double %sifp447, 0.000000e+00, !dbg !2146
  store double %fmul448, ptr %blockret392, align 8, !dbg !2146
  br label %expr_block.exit1917, !dbg !2146

if.exit449:                                       ; preds = %loop.body444
  %216 = load i64, ptr %index399, align 8, !dbg !2148
  %add450 = add i64 %216, 1, !dbg !2148
  store i64 %add450, ptr %index399, align 8, !dbg !2148
  br label %loop.cond428, !dbg !2148

loop.exit451:                                     ; preds = %checkok441
  %217 = load i8, ptr %c427, align 1, !dbg !2149
  %eq452 = icmp eq i8 %217, 46, !dbg !2149
  br i1 %eq452, label %if.then453, label %if.exit508, !dbg !2149

if.then453:                                       ; preds = %loop.exit451
  store i8 1, ptr %got_rad415, align 1, !dbg !2150
  %218 = load i64, ptr %index399, align 8, !dbg !2152
  %219 = load i64, ptr %last_char419, align 8, !dbg !2152
  %eq454 = icmp eq i64 %218, %219, !dbg !2152
  br i1 %eq454, label %if.then455, label %if.exit460, !dbg !2152

if.then455:                                       ; preds = %if.then453
  %220 = load i8, ptr %got_digit400, align 1, !dbg !2153
  %221 = trunc i8 %220 to i1, !dbg !2153
  br i1 %221, label %if.exit457, label %if.else456, !dbg !2153

if.else456:                                       ; preds = %if.then455
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_FLOAT to i64), ptr %reterr, align 8, !dbg !2153
  br label %err_retblock, !dbg !2153

if.exit457:                                       ; preds = %if.then455
  %222 = load i32, ptr %sign391, align 4, !dbg !2155
  %sifp458 = sitofp i32 %222 to double, !dbg !2155
  %fmul459 = fmul double %sifp458, 0.000000e+00, !dbg !2155
  store double %fmul459, ptr %blockret392, align 8, !dbg !2155
  br label %expr_block.exit1917, !dbg !2155

if.exit460:                                       ; preds = %if.then453
  %223 = load i64, ptr %index399, align 8, !dbg !2156
  %224 = load i64, ptr %last_char419, align 8, !dbg !2156
  %neq461 = icmp ne i64 %223, %224, !dbg !2156
  br i1 %neq461, label %and.rhs462, label %and.phi479, !dbg !2156

and.rhs462:                                       ; preds = %if.exit460
  %ptradd463 = getelementptr inbounds i8, ptr %chars390, i64 8, !dbg !2156
  %225 = load i64, ptr %ptradd463, align 8, !dbg !2156
  %226 = load ptr, ptr %chars390, align 8, !dbg !2156
  %227 = load i64, ptr %index399, align 8, !dbg !2156
  %add464 = add i64 %227, 1, !dbg !2156
  store i64 %add464, ptr %index399, align 8, !dbg !2156
  %ge465 = icmp uge i64 %add464, %225, !dbg !2156
  %228 = call i1 @llvm.expect.i1(i1 %ge465, i1 false), !dbg !2156
  br i1 %228, label %panic466, label %checkok476, !dbg !2156

checkok476:                                       ; preds = %and.rhs462
  %ptradd477 = getelementptr inbounds i8, ptr %226, i64 %add464, !dbg !2156
  %229 = load i8, ptr %ptradd477, align 1, !dbg !2156
  store i8 %229, ptr %c427, align 1, !dbg !2156
  %eq478 = icmp eq i8 %229, 48, !dbg !2156
  br label %and.phi479, !dbg !2156

and.phi479:                                       ; preds = %checkok476, %if.exit460
  %val480 = phi i1 [ false, %if.exit460 ], [ %eq478, %checkok476 ], !dbg !2156
  br i1 %val480, label %if.then481, label %if.exit507, !dbg !2156

if.then481:                                       ; preds = %and.phi479
  %230 = load i64, ptr %lrp, align 8, !dbg !2157
  %sub482 = sub i64 %230, 1, !dbg !2157
  store i64 %sub482, ptr %lrp, align 8, !dbg !2157
  store i8 1, ptr %got_digit400, align 1, !dbg !2159
  br label %loop.cond483, !dbg !2160

loop.cond483:                                     ; preds = %loop.body504, %if.then481
  %231 = load i64, ptr %last_char419, align 8, !dbg !2161
  %232 = load i64, ptr %index399, align 8, !dbg !2161
  %neq484 = icmp ne i64 %231, %232, !dbg !2161
  br i1 %neq484, label %and.rhs485, label %and.phi502, !dbg !2161

and.rhs485:                                       ; preds = %loop.cond483
  %ptradd486 = getelementptr inbounds i8, ptr %chars390, i64 8, !dbg !2161
  %233 = load i64, ptr %ptradd486, align 8, !dbg !2161
  %234 = load ptr, ptr %chars390, align 8, !dbg !2161
  %235 = load i64, ptr %index399, align 8, !dbg !2161
  %add487 = add i64 %235, 1, !dbg !2161
  store i64 %add487, ptr %index399, align 8, !dbg !2161
  %ge488 = icmp uge i64 %add487, %233, !dbg !2161
  %236 = call i1 @llvm.expect.i1(i1 %ge488, i1 false), !dbg !2161
  br i1 %236, label %panic489, label %checkok499, !dbg !2161

checkok499:                                       ; preds = %and.rhs485
  %ptradd500 = getelementptr inbounds i8, ptr %234, i64 %add487, !dbg !2161
  %237 = load i8, ptr %ptradd500, align 1, !dbg !2161
  store i8 %237, ptr %c427, align 1, !dbg !2161
  %eq501 = icmp eq i8 %237, 48, !dbg !2161
  br label %and.phi502, !dbg !2161

and.phi502:                                       ; preds = %checkok499, %loop.cond483
  %val503 = phi i1 [ false, %loop.cond483 ], [ %eq501, %checkok499 ], !dbg !2161
  br i1 %val503, label %loop.body504, label %loop.exit506, !dbg !2161

loop.body504:                                     ; preds = %and.phi502
  %238 = load i64, ptr %lrp, align 8, !dbg !2163
  %sub505 = sub i64 %238, 1, !dbg !2163
  store i64 %sub505, ptr %lrp, align 8, !dbg !2163
  br label %loop.cond483, !dbg !2163

loop.exit506:                                     ; preds = %and.phi502
  br label %if.exit507, !dbg !2163

if.exit507:                                       ; preds = %loop.exit506, %and.phi479
  br label %if.exit508, !dbg !2163

if.exit508:                                       ; preds = %if.exit507, %loop.exit451
  br label %loop.cond509, !dbg !2165

loop.cond509:                                     ; preds = %checkok649, %if.exit508
  %239 = load i8, ptr %c427, align 1, !dbg !2166
  %zext510 = zext i8 %239 to i32, !dbg !2166
  %sub511 = sub i32 %zext510, 48, !dbg !2166
  %lt512 = icmp ult i32 %sub511, 10, !dbg !2166
  br i1 %lt512, label %or.phi515, label %or.rhs513, !dbg !2166

or.rhs513:                                        ; preds = %loop.cond509
  %240 = load i8, ptr %c427, align 1, !dbg !2166
  %eq514 = icmp eq i8 %240, 46, !dbg !2166
  br label %or.phi515, !dbg !2166

or.phi515:                                        ; preds = %or.rhs513, %loop.cond509
  %val516 = phi i1 [ true, %loop.cond509 ], [ %eq514, %or.rhs513 ], !dbg !2166
  br i1 %val516, label %loop.body517, label %loop.exit651, !dbg !2166

loop.body517:                                     ; preds = %or.phi515
  store i8 1, ptr %switch518, align 1
  br label %switch.entry519

switch.entry519:                                  ; preds = %loop.body517
  %241 = load i8, ptr %switch518, align 1
  %242 = trunc i8 %241 to i1
  %243 = load i8, ptr %c427, align 1, !dbg !2168
  %eq520 = icmp eq i8 %243, 46, !dbg !2168
  %eq521 = icmp eq i1 %eq520, %242, !dbg !2168
  br i1 %eq521, label %switch.case522, label %next_if525, !dbg !2168

switch.case522:                                   ; preds = %switch.entry519
  %244 = load i8, ptr %got_rad415, align 1, !dbg !2171
  %245 = trunc i8 %244 to i1, !dbg !2171
  br i1 %245, label %if.then523, label %if.exit524, !dbg !2171

if.then523:                                       ; preds = %switch.case522
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_FLOAT to i64), ptr %reterr, align 8, !dbg !2171
  br label %err_retblock, !dbg !2171

if.exit524:                                       ; preds = %switch.case522
  store i8 1, ptr %got_rad415, align 1, !dbg !2173
  %246 = load i64, ptr %dc416, align 8, !dbg !2174
  store i64 %246, ptr %lrp, align 8, !dbg !2174
  br label %switch.exit626, !dbg !2174

next_if525:                                       ; preds = %switch.entry519
  %247 = load i32, ptr %k, align 4, !dbg !2175
  %lt526 = icmp slt i32 %247, 125, !dbg !2175
  %eq527 = icmp eq i1 %lt526, %242, !dbg !2175
  br i1 %eq527, label %switch.case528, label %next_if619, !dbg !2175

switch.case528:                                   ; preds = %next_if525
  %248 = load i64, ptr %dc416, align 8, !dbg !2176
  %add529 = add i64 %248, 1, !dbg !2176
  store i64 %add529, ptr %dc416, align 8, !dbg !2176
  %249 = load i8, ptr %c427, align 1, !dbg !2178
  %neq530 = icmp ne i8 %249, 48, !dbg !2178
  br i1 %neq530, label %if.then531, label %if.exit533, !dbg !2178

if.then531:                                       ; preds = %switch.case528
  %250 = load i64, ptr %dc416, align 8, !dbg !2178
  %trunc532 = trunc i64 %250 to i32, !dbg !2178
  store i32 %trunc532, ptr %lnz, align 4, !dbg !2178
  br label %if.exit533, !dbg !2178

if.exit533:                                       ; preds = %if.then531, %switch.case528
  %251 = load i32, ptr %j, align 4, !dbg !2179
  %i2b534 = icmp ne i32 %251, 0, !dbg !2179
  br i1 %i2b534, label %if.then535, label %if.else586, !dbg !2179

if.then535:                                       ; preds = %if.exit533
  %252 = load i32, ptr %k, align 4, !dbg !2180
  %sext = sext i32 %252 to i64, !dbg !2180
  %lt536 = icmp slt i64 %sext, 0, !dbg !2180
  %253 = call i1 @llvm.expect.i1(i1 %lt536, i1 false), !dbg !2180
  br i1 %253, label %panic537, label %checkok545, !dbg !2180

checkok545:                                       ; preds = %if.then535
  %ge546 = icmp sge i64 %sext, 128, !dbg !2180
  %254 = call i1 @llvm.expect.i1(i1 %ge546, i1 false), !dbg !2180
  br i1 %254, label %panic547, label %checkok557, !dbg !2180

checkok557:                                       ; preds = %checkok545
  %ptroffset = getelementptr inbounds [4 x i8], ptr %x398, i64 %sext, !dbg !2180
  %255 = load i32, ptr %ptroffset, align 4, !dbg !2180
  %mul558 = mul i32 %255, 10, !dbg !2180
  %256 = load i8, ptr %c427, align 1, !dbg !2180
  %zext559 = zext i8 %256 to i32, !dbg !2180
  %add560 = add i32 %mul558, %zext559, !dbg !2180
  %sub561 = sub i32 %add560, 48, !dbg !2180
  %257 = load i32, ptr %k, align 4, !dbg !2180
  %sext562 = sext i32 %257 to i64, !dbg !2180
  %lt563 = icmp slt i64 %sext562, 0, !dbg !2180
  %258 = call i1 @llvm.expect.i1(i1 %lt563, i1 false), !dbg !2180
  br i1 %258, label %panic564, label %checkok572, !dbg !2180

checkok572:                                       ; preds = %checkok557
  %ge573 = icmp sge i64 %sext562, 128, !dbg !2180
  %259 = call i1 @llvm.expect.i1(i1 %ge573, i1 false), !dbg !2180
  br i1 %259, label %panic574, label %checkok584, !dbg !2180

checkok584:                                       ; preds = %checkok572
  %ptroffset585 = getelementptr inbounds [4 x i8], ptr %x398, i64 %sext562, !dbg !2180
  store i32 %sub561, ptr %ptroffset585, align 4, !dbg !2180
  br label %if.exit613, !dbg !2180

if.else586:                                       ; preds = %if.exit533
  %260 = load i8, ptr %c427, align 1, !dbg !2182
  %zext587 = zext i8 %260 to i32, !dbg !2182
  %sub588 = sub i32 %zext587, 48, !dbg !2182
  %261 = load i32, ptr %k, align 4, !dbg !2182
  %sext589 = sext i32 %261 to i64, !dbg !2182
  %lt590 = icmp slt i64 %sext589, 0, !dbg !2182
  %262 = call i1 @llvm.expect.i1(i1 %lt590, i1 false), !dbg !2182
  br i1 %262, label %panic591, label %checkok599, !dbg !2182

checkok599:                                       ; preds = %if.else586
  %ge600 = icmp sge i64 %sext589, 128, !dbg !2182
  %263 = call i1 @llvm.expect.i1(i1 %ge600, i1 false), !dbg !2182
  br i1 %263, label %panic601, label %checkok611, !dbg !2182

checkok611:                                       ; preds = %checkok599
  %ptroffset612 = getelementptr inbounds [4 x i8], ptr %x398, i64 %sext589, !dbg !2182
  store i32 %sub588, ptr %ptroffset612, align 4, !dbg !2182
  br label %if.exit613, !dbg !2182

if.exit613:                                       ; preds = %checkok611, %checkok584
  %264 = load i32, ptr %j, align 4, !dbg !2184
  %add614 = add i32 %264, 1, !dbg !2184
  store i32 %add614, ptr %j, align 4, !dbg !2184
  %eq615 = icmp eq i32 %add614, 9, !dbg !2184
  br i1 %eq615, label %if.then616, label %if.exit618, !dbg !2184

if.then616:                                       ; preds = %if.exit613
  %265 = load i32, ptr %k, align 4, !dbg !2185
  %add617 = add i32 %265, 1, !dbg !2185
  store i32 %add617, ptr %k, align 4, !dbg !2185
  store i32 0, ptr %j, align 4, !dbg !2187
  br label %if.exit618, !dbg !2187

if.exit618:                                       ; preds = %if.then616, %if.exit613
  store i8 1, ptr %got_digit400, align 1, !dbg !2188
  br label %switch.exit626, !dbg !2188

next_if619:                                       ; preds = %next_if525
  br label %switch.default, !dbg !2188

switch.default:                                   ; preds = %next_if619
  %266 = load i64, ptr %dc416, align 8, !dbg !2189
  %add620 = add i64 %266, 1, !dbg !2189
  store i64 %add620, ptr %dc416, align 8, !dbg !2189
  %267 = load i8, ptr %c427, align 1, !dbg !2191
  %neq621 = icmp ne i8 %267, 48, !dbg !2191
  br i1 %neq621, label %if.then622, label %if.exit625, !dbg !2191

if.then622:                                       ; preds = %switch.default
  %ptradd623 = getelementptr inbounds i8, ptr %x398, i64 496, !dbg !2191
  %268 = load i32, ptr %ptradd623, align 4, !dbg !2191
  %or624 = or i32 %268, 1, !dbg !2191
  store i32 %or624, ptr %ptradd623, align 4, !dbg !2191
  br label %if.exit625, !dbg !2191

if.exit625:                                       ; preds = %if.then622, %switch.default
  br label %switch.exit626, !dbg !2191

switch.exit626:                                   ; preds = %if.exit625, %if.exit618, %if.exit524
  %269 = load i64, ptr %index399, align 8, !dbg !2192
  %270 = load i64, ptr %last_char419, align 8, !dbg !2192
  %eq627 = icmp eq i64 %269, %270, !dbg !2192
  br i1 %eq627, label %if.then628, label %if.exit629, !dbg !2192

if.then628:                                       ; preds = %switch.exit626
  br label %loop.exit651, !dbg !2192

if.exit629:                                       ; preds = %switch.exit626
  %271 = load i64, ptr %index399, align 8, !dbg !2193
  %272 = load i64, ptr %last_char419, align 8, !dbg !2193
  %lt630 = icmp ult i64 %271, %272, !dbg !2193
  br i1 %lt630, label %assert_ok635, label %assert_fail631, !dbg !2193

assert_fail631:                                   ; preds = %if.exit629
  store %"char[]" { ptr @.panic_msg.110, i64 34 }, ptr %indirectarg632, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg633, align 8
  store %"char[]" { ptr @.func.101, i64 9 }, ptr %indirectarg634, align 8
  %273 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %273(ptr align 8 %indirectarg632, ptr align 8 %indirectarg633, ptr align 8 %indirectarg634, i32 112) #6, !dbg !2193
  unreachable, !dbg !2193

assert_ok635:                                     ; preds = %if.exit629
  %ptradd636 = getelementptr inbounds i8, ptr %chars390, i64 8, !dbg !2194
  %274 = load i64, ptr %ptradd636, align 8, !dbg !2194
  %275 = load ptr, ptr %chars390, align 8, !dbg !2194
  %276 = load i64, ptr %index399, align 8, !dbg !2194
  %add637 = add i64 %276, 1, !dbg !2194
  store i64 %add637, ptr %index399, align 8, !dbg !2194
  %ge638 = icmp uge i64 %add637, %274, !dbg !2194
  %277 = call i1 @llvm.expect.i1(i1 %ge638, i1 false), !dbg !2194
  br i1 %277, label %panic639, label %checkok649, !dbg !2194

checkok649:                                       ; preds = %assert_ok635
  %ptradd650 = getelementptr inbounds i8, ptr %275, i64 %add637, !dbg !2194
  %278 = load i8, ptr %ptradd650, align 1, !dbg !2194
  store i8 %278, ptr %c427, align 1, !dbg !2194
  br label %loop.cond509, !dbg !2194

loop.exit651:                                     ; preds = %if.then628, %or.phi515
  %279 = load i8, ptr %got_rad415, align 1, !dbg !2195
  %280 = trunc i8 %279 to i1, !dbg !2195
  br i1 %280, label %if.exit653, label %if.else652, !dbg !2195

if.else652:                                       ; preds = %loop.exit651
  %281 = load i64, ptr %dc416, align 8, !dbg !2195
  store i64 %281, ptr %lrp, align 8, !dbg !2195
  br label %if.exit653, !dbg !2195

if.exit653:                                       ; preds = %if.else652, %loop.exit651
  %282 = load i8, ptr %got_digit400, align 1, !dbg !2196
  %283 = trunc i8 %282 to i1, !dbg !2196
  br i1 %283, label %if.exit655, label %if.else654, !dbg !2196

if.else654:                                       ; preds = %if.exit653
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_FLOAT to i64), ptr %reterr, align 8, !dbg !2196
  br label %err_retblock, !dbg !2196

if.exit655:                                       ; preds = %if.exit653
  %284 = load i8, ptr %c427, align 1, !dbg !2197
  %zext656 = zext i8 %284 to i32, !dbg !2197
  %or657 = or i32 %zext656, 32, !dbg !2197
  %eq658 = icmp eq i32 %or657, 101, !dbg !2197
  %check659 = icmp sge i32 %or657, 0, !dbg !2197
  %siui-eq660 = and i1 %check659, %eq658, !dbg !2197
  br i1 %siui-eq660, label %if.then661, label %if.else699, !dbg !2197

if.then661:                                       ; preds = %if.exit655
  %285 = load i64, ptr %last_char419, align 8, !dbg !2198
  %286 = load i64, ptr %index399, align 8, !dbg !2198
  %eq662 = icmp eq i64 %285, %286, !dbg !2198
  br i1 %eq662, label %if.then663, label %if.exit664, !dbg !2198

if.then663:                                       ; preds = %if.then661
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_FLOAT to i64), ptr %reterr, align 8, !dbg !2198
  br label %err_retblock, !dbg !2198

if.exit664:                                       ; preds = %if.then661
    #dbg_declare(ptr %e10, !2200, !DIExpression(), !2201)
  %287 = load %"char[]", ptr %chars390, align 8, !dbg !2201
  %288 = extractvalue %"char[]" %287, 0, !dbg !2201
  %289 = load i64, ptr %index399, align 8, !dbg !2201
  %add665 = add i64 %289, 1, !dbg !2201
  %290 = extractvalue %"char[]" %287, 1, !dbg !2201
  %gt666 = icmp sgt i64 %add665, %290, !dbg !2201
  %291 = call i1 @llvm.expect.i1(i1 %gt666, i1 false), !dbg !2201
  br i1 %291, label %panic667, label %checkok677, !dbg !2201

checkok677:                                       ; preds = %if.exit664
  %underflow678 = icmp slt i64 %add665, 0, !dbg !2201
  %292 = call i1 @llvm.expect.i1(i1 %underflow678, i1 false), !dbg !2201
  br i1 %292, label %panic679, label %checkok687, !dbg !2201

checkok687:                                       ; preds = %checkok677
  %size688 = sub i64 %290, %add665, !dbg !2201
  %ptradd689 = getelementptr inbounds i8, ptr %288, i64 %add665, !dbg !2201
  %293 = insertvalue %"char[]" undef, ptr %ptradd689, 0, !dbg !2201
  %294 = insertvalue %"char[]" %293, i64 %size688, 1, !dbg !2201
  store %"char[]" %294, ptr %indirectarg691, align 8
  %295 = call i64 @std.core.String.to_long(ptr %retparam690, ptr align 8 %indirectarg691, i32 10), !dbg !2201
  %not_err692 = icmp eq i64 %295, 0, !dbg !2201
  %296 = call i1 @llvm.expect.i1(i1 %not_err692, i1 true), !dbg !2201
  br i1 %296, label %after_check693, label %else_block694, !dbg !2201

after_check693:                                   ; preds = %checkok687
  %297 = load i64, ptr %retparam690, align 8, !dbg !2201
  br label %phi_block697, !dbg !2201

else_block694:                                    ; preds = %checkok687
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_FLOAT to i64), ptr %error_var695, align 8, !dbg !2201
  br label %guard_block696, !dbg !2201

guard_block696:                                   ; preds = %else_block694
  %298 = load i64, ptr %error_var695, align 8, !dbg !2201
  store i64 %298, ptr %reterr, align 8, !dbg !2201
  br label %err_retblock, !dbg !2201

phi_block697:                                     ; preds = %after_check693
  store i64 %297, ptr %e10, align 8, !dbg !2201
  %299 = load i64, ptr %lrp, align 8, !dbg !2202
  %300 = load i64, ptr %e10, align 8, !dbg !2202
  %add698 = add i64 %299, %300, !dbg !2202
  store i64 %add698, ptr %lrp, align 8, !dbg !2202
  br label %if.exit703, !dbg !2202

if.else699:                                       ; preds = %if.exit655
  %301 = load i64, ptr %index399, align 8, !dbg !2203
  %302 = load i64, ptr %last_char419, align 8, !dbg !2203
  %neq700 = icmp ne i64 %301, %302, !dbg !2203
  br i1 %neq700, label %if.then701, label %if.exit702, !dbg !2203

if.then701:                                       ; preds = %if.else699
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_FLOAT to i64), ptr %reterr, align 8, !dbg !2204
  br label %err_retblock, !dbg !2204

if.exit702:                                       ; preds = %if.else699
  br label %if.exit703, !dbg !2204

if.exit703:                                       ; preds = %if.exit702, %phi_block697
  %303 = load i32, ptr %x398, align 4, !dbg !2206
  %i2nb704 = icmp eq i32 %303, 0, !dbg !2206
  br i1 %i2nb704, label %if.then705, label %if.exit708, !dbg !2206

if.then705:                                       ; preds = %if.exit703
  %304 = load i32, ptr %sign391, align 4, !dbg !2206
  %sifp706 = sitofp i32 %304 to double, !dbg !2206
  %fmul707 = fmul double %sifp706, 0.000000e+00, !dbg !2206
  store double %fmul707, ptr %blockret392, align 8, !dbg !2206
  br label %expr_block.exit1917, !dbg !2206

if.exit708:                                       ; preds = %if.exit703
  %305 = load i64, ptr %lrp, align 8, !dbg !2207
  %306 = load i64, ptr %dc416, align 8, !dbg !2207
  %eq709 = icmp eq i64 %305, %306, !dbg !2207
  br i1 %eq709, label %and.rhs710, label %and.phi712, !dbg !2207

and.rhs710:                                       ; preds = %if.exit708
  %307 = load i64, ptr %dc416, align 8, !dbg !2207
  %lt711 = icmp slt i64 %307, 10, !dbg !2207
  br label %and.phi712, !dbg !2207

and.phi712:                                       ; preds = %and.rhs710, %if.exit708
  %val713 = phi i1 [ false, %if.exit708 ], [ %lt711, %and.rhs710 ], !dbg !2207
  br i1 %val713, label %and.rhs714, label %and.phi720, !dbg !2207

and.rhs714:                                       ; preds = %and.phi712
  br i1 true, label %or.phi718, label %or.rhs715, !dbg !2207

or.rhs715:                                        ; preds = %and.rhs714
  %308 = load i32, ptr %x398, align 4, !dbg !2207
  %zext716 = zext i32 %308 to i64, !dbg !2207
  %lshr = lshr i64 %zext716, 53, !dbg !2207
  %309 = freeze i64 %lshr, !dbg !2207
  %eq717 = icmp eq i64 0, %309, !dbg !2207
  br label %or.phi718, !dbg !2207

or.phi718:                                        ; preds = %or.rhs715, %and.rhs714
  %val719 = phi i1 [ true, %and.rhs714 ], [ %eq717, %or.rhs715 ], !dbg !2207
  br label %and.phi720, !dbg !2207

and.phi720:                                       ; preds = %or.phi718, %and.phi712
  %val721 = phi i1 [ false, %and.phi712 ], [ %val719, %or.phi718 ], !dbg !2207
  br i1 %val721, label %if.then722, label %if.exit726, !dbg !2207

if.then722:                                       ; preds = %and.phi720
  %310 = load i32, ptr %sign391, align 4, !dbg !2207
  %sifp723 = sitofp i32 %310 to double, !dbg !2207
  %311 = load i32, ptr %x398, align 4, !dbg !2207
  %uifp724 = uitofp i32 %311 to double, !dbg !2207
  %fmul725 = fmul double %sifp723, %uifp724, !dbg !2207
  store double %fmul725, ptr %blockret392, align 8, !dbg !2207
  br label %expr_block.exit1917, !dbg !2207

if.exit726:                                       ; preds = %and.phi720
  %312 = load i64, ptr %lrp, align 8, !dbg !2208
  %gt727 = icmp sgt i64 %312, 537, !dbg !2208
  br i1 %gt727, label %if.then728, label %if.exit729, !dbg !2208

if.then728:                                       ; preds = %if.exit726
  store i64 ptrtoint (ptr @std.core.string.FLOAT_OUT_OF_RANGE to i64), ptr %reterr, align 8, !dbg !2208
  br label %err_retblock, !dbg !2208

if.exit729:                                       ; preds = %if.exit726
  %313 = load i64, ptr %lrp, align 8, !dbg !2209
  %lt730 = icmp slt i64 %313, -1180, !dbg !2209
  br i1 %lt730, label %if.then731, label %if.exit732, !dbg !2209

if.then731:                                       ; preds = %if.exit729
  store i64 ptrtoint (ptr @std.core.string.FLOAT_OUT_OF_RANGE to i64), ptr %reterr, align 8, !dbg !2209
  br label %err_retblock, !dbg !2209

if.exit732:                                       ; preds = %if.exit729
  %314 = load i32, ptr %j, align 4, !dbg !2210
  %i2b733 = icmp ne i32 %314, 0, !dbg !2210
  br i1 %i2b733, label %if.then734, label %if.exit766, !dbg !2210

if.then734:                                       ; preds = %if.exit732
  br label %loop.cond735, !dbg !2211

loop.cond735:                                     ; preds = %checkok760, %if.then734
  %315 = load i32, ptr %j, align 4, !dbg !2213
  %lt736 = icmp slt i32 %315, 9, !dbg !2213
  br i1 %lt736, label %loop.body737, label %loop.exit764, !dbg !2213

loop.body737:                                     ; preds = %loop.cond735
  %316 = load i32, ptr %k, align 4, !dbg !2213
  %sext738 = sext i32 %316 to i64, !dbg !2213
  %lt739 = icmp slt i64 %sext738, 0, !dbg !2213
  %317 = call i1 @llvm.expect.i1(i1 %lt739, i1 false), !dbg !2213
  br i1 %317, label %panic740, label %checkok748, !dbg !2213

checkok748:                                       ; preds = %loop.body737
  %ge749 = icmp sge i64 %sext738, 128, !dbg !2213
  %318 = call i1 @llvm.expect.i1(i1 %ge749, i1 false), !dbg !2213
  br i1 %318, label %panic750, label %checkok760, !dbg !2213

checkok760:                                       ; preds = %checkok748
  %ptroffset761 = getelementptr inbounds [4 x i8], ptr %x398, i64 %sext738, !dbg !2213
  %319 = load i32, ptr %ptroffset761, align 4, !dbg !2213
  %mul762 = mul i32 %319, 10, !dbg !2213
  store i32 %mul762, ptr %ptroffset761, align 4, !dbg !2213
  %320 = load i32, ptr %j, align 4, !dbg !2213
  %add763 = add i32 %320, 1, !dbg !2213
  store i32 %add763, ptr %j, align 4, !dbg !2213
  br label %loop.cond735, !dbg !2213

loop.exit764:                                     ; preds = %loop.cond735
  %321 = load i32, ptr %k, align 4, !dbg !2215
  %add765 = add i32 %321, 1, !dbg !2215
  store i32 %add765, ptr %k, align 4, !dbg !2215
  store i32 0, ptr %j, align 4, !dbg !2216
  br label %if.exit766, !dbg !2216

if.exit766:                                       ; preds = %loop.exit764, %if.exit732
    #dbg_declare(ptr %a, !2217, !DIExpression(), !2218)
  store i32 0, ptr %a, align 4, !dbg !2218
    #dbg_declare(ptr %z, !2219, !DIExpression(), !2220)
  %322 = load i32, ptr %k, align 4, !dbg !2220
  store i32 %322, ptr %z, align 4, !dbg !2220
    #dbg_declare(ptr %e2767, !2221, !DIExpression(), !2222)
  store i32 0, ptr %e2767, align 4, !dbg !2222
    #dbg_declare(ptr %rp768, !2223, !DIExpression(), !2224)
  %323 = load i64, ptr %lrp, align 8, !dbg !2224
  store i64 %323, ptr %rp768, align 8, !dbg !2224
  %324 = load i32, ptr %lnz, align 4, !dbg !2225
  %lt769 = icmp slt i32 %324, 9, !dbg !2225
  br i1 %lt769, label %and.rhs770, label %and.phi772, !dbg !2225

and.rhs770:                                       ; preds = %if.exit766
  %325 = load i32, ptr %lnz, align 4, !dbg !2225
  %sext771 = sext i32 %325 to i64, !dbg !2225
  %326 = load i64, ptr %rp768, align 8, !dbg !2225
  %le = icmp sle i64 %sext771, %326, !dbg !2225
  br label %and.phi772, !dbg !2225

and.phi772:                                       ; preds = %and.rhs770, %if.exit766
  %val773 = phi i1 [ false, %if.exit766 ], [ %le, %and.rhs770 ], !dbg !2225
  br i1 %val773, label %and.rhs774, label %and.phi776, !dbg !2225

and.rhs774:                                       ; preds = %and.phi772
  %327 = load i64, ptr %rp768, align 8, !dbg !2225
  %lt775 = icmp slt i64 %327, 18, !dbg !2225
  br label %and.phi776, !dbg !2225

and.phi776:                                       ; preds = %and.rhs774, %and.phi772
  %val777 = phi i1 [ false, %and.phi772 ], [ %lt775, %and.rhs774 ], !dbg !2225
  br i1 %val777, label %if.then778, label %if.exit872, !dbg !2225

if.then778:                                       ; preds = %and.phi776
  %328 = load i64, ptr %rp768, align 8, !dbg !2226
  %eq779 = icmp eq i64 %328, 9, !dbg !2226
  br i1 %eq779, label %if.then780, label %if.exit784, !dbg !2226

if.then780:                                       ; preds = %if.then778
  %329 = load i32, ptr %sign391, align 4, !dbg !2226
  %sifp781 = sitofp i32 %329 to double, !dbg !2226
  %330 = load i32, ptr %x398, align 4, !dbg !2226
  %uifp782 = uitofp i32 %330 to double, !dbg !2226
  %fmul783 = fmul double %sifp781, %uifp782, !dbg !2226
  store double %fmul783, ptr %blockret392, align 8, !dbg !2226
  br label %expr_block.exit1917, !dbg !2226

if.exit784:                                       ; preds = %if.then778
  %331 = load i64, ptr %rp768, align 8, !dbg !2228
  %lt785 = icmp slt i64 %331, 9, !dbg !2228
  br i1 %lt785, label %if.then786, label %if.exit821, !dbg !2228

if.then786:                                       ; preds = %if.exit784
  %332 = load i32, ptr %sign391, align 4, !dbg !2228
  %sifp787 = sitofp i32 %332 to double, !dbg !2228
  %333 = load i32, ptr %x398, align 4, !dbg !2228
  %uifp788 = uitofp i32 %333 to double, !dbg !2228
  %fmul789 = fmul double %sifp787, %uifp788, !dbg !2228
  %334 = load i64, ptr %rp768, align 8, !dbg !2228
  %sub790 = sub i64 8, %334, !dbg !2228
  %lt791 = icmp slt i64 %sub790, 0, !dbg !2228
  %335 = call i1 @llvm.expect.i1(i1 %lt791, i1 false), !dbg !2228
  br i1 %335, label %panic792, label %checkok800, !dbg !2228

checkok800:                                       ; preds = %if.then786
  %ge801 = icmp sge i64 %sub790, 8, !dbg !2228
  %336 = call i1 @llvm.expect.i1(i1 %ge801, i1 false), !dbg !2228
  br i1 %336, label %panic802, label %checkok812, !dbg !2228

checkok812:                                       ; preds = %checkok800
  %ptroffset813 = getelementptr inbounds [4 x i8], ptr @to_double.P10S, i64 %sub790, !dbg !2228
  %337 = load i32, ptr %ptroffset813, align 4, !dbg !2228
  %sifp814 = sitofp i32 %337 to double, !dbg !2228
  %zero = fcmp ueq double %sifp814, 0.000000e+00, !dbg !2228
  %338 = call i1 @llvm.expect.i1(i1 %zero, i1 false), !dbg !2228
  br i1 %338, label %panic815, label %checkok819, !dbg !2228

checkok819:                                       ; preds = %checkok812
  %fdiv820 = fdiv double %fmul789, %sifp814, !dbg !2228
  store double %fdiv820, ptr %blockret392, align 8, !dbg !2228
  br label %expr_block.exit1917, !dbg !2228

if.exit821:                                       ; preds = %if.exit784
    #dbg_declare(ptr %bitlim, !2229, !DIExpression(), !2230)
  %339 = load i64, ptr %rp768, align 8, !dbg !2230
  %sub822 = sub i64 %339, 9, !dbg !2230
  %trunc823 = trunc i64 %sub822 to i32, !dbg !2230
  %mul824 = mul i32 3, %trunc823, !dbg !2230
  %sub825 = sub i32 53, %mul824, !dbg !2230
  store i32 %sub825, ptr %bitlim, align 4, !dbg !2230
  %340 = load i32, ptr %bitlim, align 4, !dbg !2231
  %gt826 = icmp sgt i32 %340, 30, !dbg !2231
  br i1 %gt826, label %or.phi839, label %or.rhs827, !dbg !2231

or.rhs827:                                        ; preds = %if.exit821
  %341 = load i32, ptr %x398, align 4, !dbg !2231
  %342 = load i32, ptr %bitlim, align 4, !dbg !2231
  %shift_exceeds = icmp uge i32 %342, 32, !dbg !2231
  %343 = call i1 @llvm.expect.i1(i1 %shift_exceeds, i1 false), !dbg !2231
  br i1 %343, label %panic828, label %checkok836, !dbg !2231

checkok836:                                       ; preds = %or.rhs827
  %lshr837 = lshr i32 %341, %342, !dbg !2231
  %344 = freeze i32 %lshr837, !dbg !2231
  %eq838 = icmp eq i32 0, %344, !dbg !2231
  br label %or.phi839, !dbg !2231

or.phi839:                                        ; preds = %checkok836, %if.exit821
  %val840 = phi i1 [ true, %if.exit821 ], [ %eq838, %checkok836 ], !dbg !2231
  br i1 %val840, label %if.then841, label %if.exit871, !dbg !2231

if.then841:                                       ; preds = %or.phi839
  %345 = load i32, ptr %sign391, align 4, !dbg !2231
  %sifp842 = sitofp i32 %345 to double, !dbg !2231
  %346 = load i32, ptr %x398, align 4, !dbg !2231
  %uifp843 = uitofp i32 %346 to double, !dbg !2231
  %fmul844 = fmul double %sifp842, %uifp843, !dbg !2231
  %347 = load i64, ptr %rp768, align 8, !dbg !2231
  %sub845 = sub i64 %347, 10, !dbg !2231
  %lt846 = icmp slt i64 %sub845, 0, !dbg !2231
  %348 = call i1 @llvm.expect.i1(i1 %lt846, i1 false), !dbg !2231
  br i1 %348, label %panic847, label %checkok855, !dbg !2231

checkok855:                                       ; preds = %if.then841
  %ge856 = icmp sge i64 %sub845, 8, !dbg !2231
  %349 = call i1 @llvm.expect.i1(i1 %ge856, i1 false), !dbg !2231
  br i1 %349, label %panic857, label %checkok867, !dbg !2231

checkok867:                                       ; preds = %checkok855
  %ptroffset868 = getelementptr inbounds [4 x i8], ptr @to_double.P10S, i64 %sub845, !dbg !2231
  %350 = load i32, ptr %ptroffset868, align 4, !dbg !2231
  %sifp869 = sitofp i32 %350 to double, !dbg !2231
  %fmul870 = fmul double %fmul844, %sifp869, !dbg !2231
  store double %fmul870, ptr %blockret392, align 8, !dbg !2231
  br label %expr_block.exit1917, !dbg !2231

if.exit871:                                       ; preds = %or.phi839
  br label %if.exit872, !dbg !2231

if.exit872:                                       ; preds = %if.exit871, %and.phi776
  %351 = load i64, ptr %rp768, align 8, !dbg !2232
  %smod = srem i64 %351, 9, !dbg !2232
  %i2b873 = icmp ne i64 %smod, 0, !dbg !2232
  br i1 %i2b873, label %if.then874, label %if.exit1070, !dbg !2232

if.then874:                                       ; preds = %if.exit872
    #dbg_declare(ptr %rpm9, !2233, !DIExpression(), !2235)
  %352 = load i64, ptr %rp768, align 8, !dbg !2235
  %ge875 = icmp sge i64 %352, 0, !dbg !2235
  br i1 %ge875, label %cond.lhs876, label %cond.rhs878, !dbg !2235

cond.lhs876:                                      ; preds = %if.then874
  %353 = load i64, ptr %rp768, align 8, !dbg !2235
  %smod877 = srem i64 %353, 9, !dbg !2235
  br label %cond.phi881, !dbg !2235

cond.rhs878:                                      ; preds = %if.then874
  %354 = load i64, ptr %rp768, align 8, !dbg !2235
  %smod879 = srem i64 %354, 9, !dbg !2235
  %add880 = add i64 %smod879, 9, !dbg !2235
  br label %cond.phi881, !dbg !2235

cond.phi881:                                      ; preds = %cond.rhs878, %cond.lhs876
  %val882 = phi i64 [ %smod877, %cond.lhs876 ], [ %add880, %cond.rhs878 ], !dbg !2235
  store i64 %val882, ptr %rpm9, align 8, !dbg !2235
    #dbg_declare(ptr %p10, !2236, !DIExpression(), !2237)
  %355 = load i64, ptr %rpm9, align 8, !dbg !2237
  %sub883 = sub i64 8, %355, !dbg !2237
  %lt884 = icmp slt i64 %sub883, 0, !dbg !2237
  %356 = call i1 @llvm.expect.i1(i1 %lt884, i1 false), !dbg !2237
  br i1 %356, label %panic885, label %checkok893, !dbg !2237

checkok893:                                       ; preds = %cond.phi881
  %ge894 = icmp sge i64 %sub883, 8, !dbg !2237
  %357 = call i1 @llvm.expect.i1(i1 %ge894, i1 false), !dbg !2237
  br i1 %357, label %panic895, label %checkok905, !dbg !2237

checkok905:                                       ; preds = %checkok893
  %ptroffset906 = getelementptr inbounds [4 x i8], ptr @to_double.P10S, i64 %sub883, !dbg !2237
  %358 = load i32, ptr %ptroffset906, align 4, !dbg !2237
  store i32 %358, ptr %p10, align 4, !dbg !2237
    #dbg_declare(ptr %carry, !2238, !DIExpression(), !2239)
  store i32 0, ptr %carry, align 4, !dbg !2239
  %359 = load i32, ptr %a, align 4, !dbg !2240
  store i32 %359, ptr %k, align 4, !dbg !2240
  br label %loop.cond907, !dbg !2240

loop.cond907:                                     ; preds = %if.exit1037, %checkok905
  %360 = load i32, ptr %k, align 4, !dbg !2240
  %361 = load i32, ptr %z, align 4, !dbg !2240
  %neq908 = icmp ne i32 %360, %361, !dbg !2240
  br i1 %neq908, label %loop.body909, label %loop.exit1039, !dbg !2240

loop.body909:                                     ; preds = %loop.cond907
    #dbg_declare(ptr %tmp, !2242, !DIExpression(), !2244)
  %362 = load i32, ptr %k, align 4, !dbg !2244
  %sext910 = sext i32 %362 to i64, !dbg !2244
  %lt911 = icmp slt i64 %sext910, 0, !dbg !2244
  %363 = call i1 @llvm.expect.i1(i1 %lt911, i1 false), !dbg !2244
  br i1 %363, label %panic912, label %checkok920, !dbg !2244

checkok920:                                       ; preds = %loop.body909
  %ge921 = icmp sge i64 %sext910, 128, !dbg !2244
  %364 = call i1 @llvm.expect.i1(i1 %ge921, i1 false), !dbg !2244
  br i1 %364, label %panic922, label %checkok932, !dbg !2244

checkok932:                                       ; preds = %checkok920
  %ptroffset933 = getelementptr inbounds [4 x i8], ptr %x398, i64 %sext910, !dbg !2244
  %365 = load i32, ptr %ptroffset933, align 4, !dbg !2244
  %366 = load i32, ptr %p10, align 4, !dbg !2244
  %zero934 = icmp eq i32 %366, 0, !dbg !2244
  %367 = call i1 @llvm.expect.i1(i1 %zero934, i1 false), !dbg !2244
  br i1 %367, label %panic935, label %checkok939, !dbg !2244

checkok939:                                       ; preds = %checkok932
  %smod940 = srem i32 %365, %366, !dbg !2244
  store i32 %smod940, ptr %tmp, align 4, !dbg !2244
  %368 = load i32, ptr %k, align 4, !dbg !2245
  %sext941 = sext i32 %368 to i64, !dbg !2245
  %lt942 = icmp slt i64 %sext941, 0, !dbg !2245
  %369 = call i1 @llvm.expect.i1(i1 %lt942, i1 false), !dbg !2245
  br i1 %369, label %panic943, label %checkok951, !dbg !2245

checkok951:                                       ; preds = %checkok939
  %ge952 = icmp sge i64 %sext941, 128, !dbg !2245
  %370 = call i1 @llvm.expect.i1(i1 %ge952, i1 false), !dbg !2245
  br i1 %370, label %panic953, label %checkok963, !dbg !2245

checkok963:                                       ; preds = %checkok951
  %ptroffset964 = getelementptr inbounds [4 x i8], ptr %x398, i64 %sext941, !dbg !2245
  %371 = load i32, ptr %ptroffset964, align 4, !dbg !2245
  %372 = load i32, ptr %p10, align 4, !dbg !2245
  %zero965 = icmp eq i32 %372, 0, !dbg !2245
  %373 = call i1 @llvm.expect.i1(i1 %zero965, i1 false), !dbg !2245
  br i1 %373, label %panic966, label %checkok970, !dbg !2245

checkok970:                                       ; preds = %checkok963
  %sdiv = sdiv i32 %371, %372, !dbg !2245
  %374 = load i32, ptr %carry, align 4, !dbg !2245
  %add971 = add i32 %sdiv, %374, !dbg !2245
  %375 = load i32, ptr %k, align 4, !dbg !2245
  %sext972 = sext i32 %375 to i64, !dbg !2245
  %lt973 = icmp slt i64 %sext972, 0, !dbg !2245
  %376 = call i1 @llvm.expect.i1(i1 %lt973, i1 false), !dbg !2245
  br i1 %376, label %panic974, label %checkok982, !dbg !2245

checkok982:                                       ; preds = %checkok970
  %ge983 = icmp sge i64 %sext972, 128, !dbg !2245
  %377 = call i1 @llvm.expect.i1(i1 %ge983, i1 false), !dbg !2245
  br i1 %377, label %panic984, label %checkok994, !dbg !2245

checkok994:                                       ; preds = %checkok982
  %ptroffset995 = getelementptr inbounds [4 x i8], ptr %x398, i64 %sext972, !dbg !2245
  store i32 %add971, ptr %ptroffset995, align 4, !dbg !2245
  %378 = load i32, ptr %p10, align 4, !dbg !2246
  %zero996 = icmp eq i32 %378, 0, !dbg !2246
  %379 = call i1 @llvm.expect.i1(i1 %zero996, i1 false), !dbg !2246
  br i1 %379, label %panic997, label %checkok1001, !dbg !2246

checkok1001:                                      ; preds = %checkok994
  %sdiv1002 = sdiv i32 1000000000, %378, !dbg !2246
  %380 = load i32, ptr %tmp, align 4, !dbg !2246
  %mul1003 = mul i32 %sdiv1002, %380, !dbg !2246
  store i32 %mul1003, ptr %carry, align 4, !dbg !2246
  %381 = load i32, ptr %k, align 4, !dbg !2247
  %382 = load i32, ptr %a, align 4, !dbg !2247
  %eq1004 = icmp eq i32 %381, %382, !dbg !2247
  br i1 %eq1004, label %and.rhs1005, label %and.phi1031, !dbg !2247

and.rhs1005:                                      ; preds = %checkok1001
  %383 = load i32, ptr %k, align 4, !dbg !2247
  %sext1006 = sext i32 %383 to i64, !dbg !2247
  %lt1007 = icmp slt i64 %sext1006, 0, !dbg !2247
  %384 = call i1 @llvm.expect.i1(i1 %lt1007, i1 false), !dbg !2247
  br i1 %384, label %panic1008, label %checkok1016, !dbg !2247

checkok1016:                                      ; preds = %and.rhs1005
  %ge1017 = icmp sge i64 %sext1006, 128, !dbg !2247
  %385 = call i1 @llvm.expect.i1(i1 %ge1017, i1 false), !dbg !2247
  br i1 %385, label %panic1018, label %checkok1028, !dbg !2247

checkok1028:                                      ; preds = %checkok1016
  %ptroffset1029 = getelementptr inbounds [4 x i8], ptr %x398, i64 %sext1006, !dbg !2247
  %386 = load i32, ptr %ptroffset1029, align 4, !dbg !2247
  %i2nb1030 = icmp eq i32 %386, 0, !dbg !2247
  br label %and.phi1031, !dbg !2247

and.phi1031:                                      ; preds = %checkok1028, %checkok1001
  %val1032 = phi i1 [ false, %checkok1001 ], [ %i2nb1030, %checkok1028 ], !dbg !2247
  br i1 %val1032, label %if.then1033, label %if.exit1037, !dbg !2247

if.then1033:                                      ; preds = %and.phi1031
  %387 = load i32, ptr %a, align 4, !dbg !2248
  %add1034 = add i32 %387, 1, !dbg !2248
  %and1035 = and i32 %add1034, 127, !dbg !2248
  store i32 %and1035, ptr %a, align 4, !dbg !2248
  %388 = load i64, ptr %rp768, align 8, !dbg !2250
  %sub1036 = sub i64 %388, 9, !dbg !2250
  store i64 %sub1036, ptr %rp768, align 8, !dbg !2250
  br label %if.exit1037, !dbg !2250

if.exit1037:                                      ; preds = %if.then1033, %and.phi1031
  %389 = load i32, ptr %k, align 4, !dbg !2240
  %add1038 = add i32 %389, 1, !dbg !2240
  store i32 %add1038, ptr %k, align 4, !dbg !2240
  br label %loop.cond907, !dbg !2240

loop.exit1039:                                    ; preds = %loop.cond907
  %390 = load i32, ptr %carry, align 4, !dbg !2251
  %i2b1040 = icmp ne i32 %390, 0, !dbg !2251
  br i1 %i2b1040, label %if.then1041, label %if.exit1067, !dbg !2251

if.then1041:                                      ; preds = %loop.exit1039
  %391 = load i32, ptr %z, align 4, !dbg !2251
  %add1042 = add i32 %391, 1, !dbg !2251
  store i32 %add1042, ptr %z, align 4, !dbg !2251
  %sext1043 = sext i32 %391 to i64, !dbg !2251
  %lt1044 = icmp slt i64 %sext1043, 0, !dbg !2251
  %392 = call i1 @llvm.expect.i1(i1 %lt1044, i1 false), !dbg !2251
  br i1 %392, label %panic1045, label %checkok1053, !dbg !2251

checkok1053:                                      ; preds = %if.then1041
  %ge1054 = icmp sge i64 %sext1043, 128, !dbg !2251
  %393 = call i1 @llvm.expect.i1(i1 %ge1054, i1 false), !dbg !2251
  br i1 %393, label %panic1055, label %checkok1065, !dbg !2251

checkok1065:                                      ; preds = %checkok1053
  %ptroffset1066 = getelementptr inbounds [4 x i8], ptr %x398, i64 %sext1043, !dbg !2251
  %394 = load i32, ptr %carry, align 4, !dbg !2251
  store i32 %394, ptr %ptroffset1066, align 4, !dbg !2251
  br label %if.exit1067, !dbg !2251

if.exit1067:                                      ; preds = %checkok1065, %loop.exit1039
  %395 = load i64, ptr %rp768, align 8, !dbg !2252
  %396 = load i64, ptr %rpm9, align 8, !dbg !2252
  %sub1068 = sub i64 9, %396, !dbg !2252
  %add1069 = add i64 %395, %sub1068, !dbg !2252
  store i64 %add1069, ptr %rp768, align 8, !dbg !2252
  br label %if.exit1070, !dbg !2252

if.exit1070:                                      ; preds = %if.exit1067, %if.exit872
  br label %loop.cond1071, !dbg !2253

loop.cond1071:                                    ; preds = %if.exit1324, %if.exit1070
  %397 = load i64, ptr %rp768, align 8, !dbg !2254
  %lt1072 = icmp slt i64 %397, 18, !dbg !2254
  br i1 %lt1072, label %or.phi1103, label %or.rhs1073, !dbg !2254

or.rhs1073:                                       ; preds = %loop.cond1071
  %398 = load i64, ptr %rp768, align 8, !dbg !2254
  %eq1074 = icmp eq i64 %398, 18, !dbg !2254
  br i1 %eq1074, label %and.rhs1075, label %and.phi1101, !dbg !2254

and.rhs1075:                                      ; preds = %or.rhs1073
  %399 = load i32, ptr %a, align 4, !dbg !2254
  %sext1076 = sext i32 %399 to i64, !dbg !2254
  %lt1077 = icmp slt i64 %sext1076, 0, !dbg !2254
  %400 = call i1 @llvm.expect.i1(i1 %lt1077, i1 false), !dbg !2254
  br i1 %400, label %panic1078, label %checkok1086, !dbg !2254

checkok1086:                                      ; preds = %and.rhs1075
  %ge1087 = icmp sge i64 %sext1076, 128, !dbg !2254
  %401 = call i1 @llvm.expect.i1(i1 %ge1087, i1 false), !dbg !2254
  br i1 %401, label %panic1088, label %checkok1098, !dbg !2254

checkok1098:                                      ; preds = %checkok1086
  %ptroffset1099 = getelementptr inbounds [4 x i8], ptr %x398, i64 %sext1076, !dbg !2254
  %402 = load i32, ptr %ptroffset1099, align 4, !dbg !2254
  %lt1100 = icmp ult i32 %402, 9007199, !dbg !2254
  br label %and.phi1101, !dbg !2254

and.phi1101:                                      ; preds = %checkok1098, %or.rhs1073
  %val1102 = phi i1 [ false, %or.rhs1073 ], [ %lt1100, %checkok1098 ], !dbg !2254
  br label %or.phi1103, !dbg !2254

or.phi1103:                                       ; preds = %and.phi1101, %loop.cond1071
  %val1104 = phi i1 [ true, %loop.cond1071 ], [ %val1102, %and.phi1101 ], !dbg !2254
  br i1 %val1104, label %loop.body1105, label %loop.exit1325, !dbg !2254

loop.body1105:                                    ; preds = %or.phi1103
    #dbg_declare(ptr %carry1106, !2256, !DIExpression(), !2258)
  store i32 0, ptr %carry1106, align 4, !dbg !2258
  %403 = load i32, ptr %e2767, align 4, !dbg !2259
  %sub1107 = sub i32 %403, 29, !dbg !2259
  store i32 %sub1107, ptr %e2767, align 4, !dbg !2259
  %404 = load i32, ptr %z, align 4, !dbg !2260
  %sub1108 = sub i32 %404, 1, !dbg !2260
  %and1109 = and i32 %sub1108, 127, !dbg !2260
  store i32 %and1109, ptr %k, align 4, !dbg !2260
  br label %loop.body1110, !dbg !2260

loop.body1110:                                    ; preds = %if.exit1235, %loop.body1105
    #dbg_declare(ptr %tmp1111, !2262, !DIExpression(), !2264)
  %405 = load i32, ptr %k, align 4, !dbg !2264
  %sext1112 = sext i32 %405 to i64, !dbg !2264
  %lt1113 = icmp slt i64 %sext1112, 0, !dbg !2264
  %406 = call i1 @llvm.expect.i1(i1 %lt1113, i1 false), !dbg !2264
  br i1 %406, label %panic1114, label %checkok1122, !dbg !2264

checkok1122:                                      ; preds = %loop.body1110
  %ge1123 = icmp sge i64 %sext1112, 128, !dbg !2264
  %407 = call i1 @llvm.expect.i1(i1 %ge1123, i1 false), !dbg !2264
  br i1 %407, label %panic1124, label %checkok1134, !dbg !2264

checkok1134:                                      ; preds = %checkok1122
  %ptroffset1135 = getelementptr inbounds [4 x i8], ptr %x398, i64 %sext1112, !dbg !2264
  %408 = load i32, ptr %ptroffset1135, align 4, !dbg !2264
  %zext1136 = zext i32 %408 to i64, !dbg !2264
  %shl = shl i64 %zext1136, 29, !dbg !2264
  %409 = freeze i64 %shl, !dbg !2264
  %410 = load i32, ptr %carry1106, align 4, !dbg !2264
  %zext1137 = zext i32 %410 to i64, !dbg !2264
  %add1138 = add i64 %409, %zext1137, !dbg !2264
  store i64 %add1138, ptr %tmp1111, align 8, !dbg !2264
  %411 = load i64, ptr %tmp1111, align 8, !dbg !2265
  %lt1139 = icmp ult i64 1000000000, %411, !dbg !2265
  br i1 %lt1139, label %if.then1140, label %if.else1169, !dbg !2265

if.then1140:                                      ; preds = %checkok1134
  %412 = load i64, ptr %tmp1111, align 8, !dbg !2266
  %sdiv1141 = sdiv i64 %412, 1000000000, !dbg !2266
  %trunc1142 = trunc i64 %sdiv1141 to i32, !dbg !2266
  store i32 %trunc1142, ptr %carry1106, align 4, !dbg !2266
  %413 = load i64, ptr %tmp1111, align 8, !dbg !2268
  %smod1143 = srem i64 %413, 1000000000, !dbg !2268
  %trunc1144 = trunc i64 %smod1143 to i32, !dbg !2268
  %414 = load i32, ptr %k, align 4, !dbg !2268
  %sext1145 = sext i32 %414 to i64, !dbg !2268
  %lt1146 = icmp slt i64 %sext1145, 0, !dbg !2268
  %415 = call i1 @llvm.expect.i1(i1 %lt1146, i1 false), !dbg !2268
  br i1 %415, label %panic1147, label %checkok1155, !dbg !2268

checkok1155:                                      ; preds = %if.then1140
  %ge1156 = icmp sge i64 %sext1145, 128, !dbg !2268
  %416 = call i1 @llvm.expect.i1(i1 %ge1156, i1 false), !dbg !2268
  br i1 %416, label %panic1157, label %checkok1167, !dbg !2268

checkok1167:                                      ; preds = %checkok1155
  %ptroffset1168 = getelementptr inbounds [4 x i8], ptr %x398, i64 %sext1145, !dbg !2268
  store i32 %trunc1144, ptr %ptroffset1168, align 4, !dbg !2268
  br label %if.exit1195, !dbg !2268

if.else1169:                                      ; preds = %checkok1134
  store i32 0, ptr %carry1106, align 4, !dbg !2269
  %417 = load i64, ptr %tmp1111, align 8, !dbg !2271
  %trunc1170 = trunc i64 %417 to i32, !dbg !2271
  %418 = load i32, ptr %k, align 4, !dbg !2271
  %sext1171 = sext i32 %418 to i64, !dbg !2271
  %lt1172 = icmp slt i64 %sext1171, 0, !dbg !2271
  %419 = call i1 @llvm.expect.i1(i1 %lt1172, i1 false), !dbg !2271
  br i1 %419, label %panic1173, label %checkok1181, !dbg !2271

checkok1181:                                      ; preds = %if.else1169
  %ge1182 = icmp sge i64 %sext1171, 128, !dbg !2271
  %420 = call i1 @llvm.expect.i1(i1 %ge1182, i1 false), !dbg !2271
  br i1 %420, label %panic1183, label %checkok1193, !dbg !2271

checkok1193:                                      ; preds = %checkok1181
  %ptroffset1194 = getelementptr inbounds [4 x i8], ptr %x398, i64 %sext1171, !dbg !2271
  store i32 %trunc1170, ptr %ptroffset1194, align 4, !dbg !2271
  br label %if.exit1195, !dbg !2271

if.exit1195:                                      ; preds = %checkok1193, %checkok1167
  %421 = load i32, ptr %k, align 4, !dbg !2272
  %422 = load i32, ptr %z, align 4, !dbg !2272
  %sub1196 = sub i32 %422, 1, !dbg !2272
  %and1197 = and i32 %sub1196, 127, !dbg !2272
  %eq1198 = icmp eq i32 %421, %and1197, !dbg !2272
  br i1 %eq1198, label %and.rhs1199, label %and.phi1201, !dbg !2272

and.rhs1199:                                      ; preds = %if.exit1195
  %423 = load i32, ptr %k, align 4, !dbg !2272
  %424 = load i32, ptr %a, align 4, !dbg !2272
  %neq1200 = icmp ne i32 %423, %424, !dbg !2272
  br label %and.phi1201, !dbg !2272

and.phi1201:                                      ; preds = %and.rhs1199, %if.exit1195
  %val1202 = phi i1 [ false, %if.exit1195 ], [ %neq1200, %and.rhs1199 ], !dbg !2272
  br i1 %val1202, label %and.rhs1203, label %and.phi1229, !dbg !2272

and.rhs1203:                                      ; preds = %and.phi1201
  %425 = load i32, ptr %k, align 4, !dbg !2272
  %sext1204 = sext i32 %425 to i64, !dbg !2272
  %lt1205 = icmp slt i64 %sext1204, 0, !dbg !2272
  %426 = call i1 @llvm.expect.i1(i1 %lt1205, i1 false), !dbg !2272
  br i1 %426, label %panic1206, label %checkok1214, !dbg !2272

checkok1214:                                      ; preds = %and.rhs1203
  %ge1215 = icmp sge i64 %sext1204, 128, !dbg !2272
  %427 = call i1 @llvm.expect.i1(i1 %ge1215, i1 false), !dbg !2272
  br i1 %427, label %panic1216, label %checkok1226, !dbg !2272

checkok1226:                                      ; preds = %checkok1214
  %ptroffset1227 = getelementptr inbounds [4 x i8], ptr %x398, i64 %sext1204, !dbg !2272
  %428 = load i32, ptr %ptroffset1227, align 4, !dbg !2272
  %i2nb1228 = icmp eq i32 %428, 0, !dbg !2272
  br label %and.phi1229, !dbg !2272

and.phi1229:                                      ; preds = %checkok1226, %and.phi1201
  %val1230 = phi i1 [ false, %and.phi1201 ], [ %i2nb1228, %checkok1226 ], !dbg !2272
  br i1 %val1230, label %if.then1231, label %if.exit1232, !dbg !2272

if.then1231:                                      ; preds = %and.phi1229
  %429 = load i32, ptr %k, align 4, !dbg !2272
  store i32 %429, ptr %z, align 4, !dbg !2272
  br label %if.exit1232, !dbg !2272

if.exit1232:                                      ; preds = %if.then1231, %and.phi1229
  %430 = load i32, ptr %k, align 4, !dbg !2273
  %431 = load i32, ptr %a, align 4, !dbg !2273
  %eq1233 = icmp eq i32 %430, %431, !dbg !2273
  br i1 %eq1233, label %if.then1234, label %if.exit1235, !dbg !2273

if.then1234:                                      ; preds = %if.exit1232
  br label %loop.exit1238, !dbg !2273

if.exit1235:                                      ; preds = %if.exit1232
  %432 = load i32, ptr %k, align 4, !dbg !2260
  %sub1236 = sub i32 %432, 1, !dbg !2260
  %and1237 = and i32 %sub1236, 127, !dbg !2260
  store i32 %and1237, ptr %k, align 4, !dbg !2260
  br label %loop.body1110, !dbg !2260

loop.exit1238:                                    ; preds = %if.then1234
  %433 = load i32, ptr %carry1106, align 4, !dbg !2274
  %i2b1239 = icmp ne i32 %433, 0, !dbg !2274
  br i1 %i2b1239, label %if.then1240, label %if.exit1324, !dbg !2274

if.then1240:                                      ; preds = %loop.exit1238
  %434 = load i64, ptr %rp768, align 8, !dbg !2275
  %add1241 = add i64 %434, 9, !dbg !2275
  store i64 %add1241, ptr %rp768, align 8, !dbg !2275
  %435 = load i32, ptr %a, align 4, !dbg !2277
  %sub1242 = sub i32 %435, 1, !dbg !2277
  %and1243 = and i32 %sub1242, 127, !dbg !2277
  store i32 %and1243, ptr %a, align 4, !dbg !2277
  %436 = load i32, ptr %a, align 4, !dbg !2278
  %437 = load i32, ptr %z, align 4, !dbg !2278
  %eq1244 = icmp eq i32 %436, %437, !dbg !2278
  br i1 %eq1244, label %if.then1245, label %if.exit1299, !dbg !2278

if.then1245:                                      ; preds = %if.then1240
  %438 = load i32, ptr %z, align 4, !dbg !2279
  %sub1246 = sub i32 %438, 1, !dbg !2279
  %and1247 = and i32 %sub1246, 127, !dbg !2279
  store i32 %and1247, ptr %z, align 4, !dbg !2279
  %439 = load i32, ptr %z, align 4, !dbg !2281
  %sub1248 = sub i32 %439, 1, !dbg !2281
  %and1249 = and i32 %sub1248, 127, !dbg !2281
  %sext1250 = sext i32 %and1249 to i64, !dbg !2281
  %lt1251 = icmp slt i64 %sext1250, 0, !dbg !2281
  %440 = call i1 @llvm.expect.i1(i1 %lt1251, i1 false), !dbg !2281
  br i1 %440, label %panic1252, label %checkok1260, !dbg !2281

checkok1260:                                      ; preds = %if.then1245
  %ge1261 = icmp sge i64 %sext1250, 128, !dbg !2281
  %441 = call i1 @llvm.expect.i1(i1 %ge1261, i1 false), !dbg !2281
  br i1 %441, label %panic1262, label %checkok1272, !dbg !2281

checkok1272:                                      ; preds = %checkok1260
  %ptroffset1273 = getelementptr inbounds [4 x i8], ptr %x398, i64 %sext1250, !dbg !2281
  %442 = load i32, ptr %ptroffset1273, align 4, !dbg !2281
  %443 = load i32, ptr %z, align 4, !dbg !2281
  %sext1274 = sext i32 %443 to i64, !dbg !2281
  %lt1275 = icmp slt i64 %sext1274, 0, !dbg !2281
  %444 = call i1 @llvm.expect.i1(i1 %lt1275, i1 false), !dbg !2281
  br i1 %444, label %panic1276, label %checkok1284, !dbg !2281

checkok1284:                                      ; preds = %checkok1272
  %ge1285 = icmp sge i64 %sext1274, 128, !dbg !2281
  %445 = call i1 @llvm.expect.i1(i1 %ge1285, i1 false), !dbg !2281
  br i1 %445, label %panic1286, label %checkok1296, !dbg !2281

checkok1296:                                      ; preds = %checkok1284
  %ptroffset1297 = getelementptr inbounds [4 x i8], ptr %x398, i64 %sext1274, !dbg !2281
  %446 = load i32, ptr %ptroffset1297, align 4, !dbg !2281
  %or1298 = or i32 %442, %446, !dbg !2281
  store i32 %or1298, ptr %ptroffset1273, align 4, !dbg !2281
  br label %if.exit1299, !dbg !2281

if.exit1299:                                      ; preds = %checkok1296, %if.then1240
  %447 = load i32, ptr %a, align 4, !dbg !2282
  %sext1300 = sext i32 %447 to i64, !dbg !2282
  %lt1301 = icmp slt i64 %sext1300, 0, !dbg !2282
  %448 = call i1 @llvm.expect.i1(i1 %lt1301, i1 false), !dbg !2282
  br i1 %448, label %panic1302, label %checkok1310, !dbg !2282

checkok1310:                                      ; preds = %if.exit1299
  %ge1311 = icmp sge i64 %sext1300, 128, !dbg !2282
  %449 = call i1 @llvm.expect.i1(i1 %ge1311, i1 false), !dbg !2282
  br i1 %449, label %panic1312, label %checkok1322, !dbg !2282

checkok1322:                                      ; preds = %checkok1310
  %ptroffset1323 = getelementptr inbounds [4 x i8], ptr %x398, i64 %sext1300, !dbg !2282
  %450 = load i32, ptr %carry1106, align 4, !dbg !2282
  store i32 %450, ptr %ptroffset1323, align 4, !dbg !2282
  br label %if.exit1324, !dbg !2282

if.exit1324:                                      ; preds = %checkok1322, %loop.exit1238
  br label %loop.cond1071, !dbg !2282

loop.exit1325:                                    ; preds = %or.phi1103
  br label %loop.body1326, !dbg !2283

loop.body1326:                                    ; preds = %if.exit1684, %loop.exit1325
    #dbg_declare(ptr %carry1327, !2284, !DIExpression(), !2287)
  store i32 0, ptr %carry1327, align 4, !dbg !2287
    #dbg_declare(ptr %sh, !2288, !DIExpression(), !2289)
  store i32 1, ptr %sh, align 4, !dbg !2289
    #dbg_declare(ptr %i, !2290, !DIExpression(), !2291)
  store i32 0, ptr %i, align 4, !dbg !2291
  store i32 0, ptr %i, align 4, !dbg !2292
  br label %loop.cond1328, !dbg !2292

loop.cond1328:                                    ; preds = %if.exit1440, %loop.body1326
  %451 = load i32, ptr %i, align 4, !dbg !2292
  %lt1329 = icmp slt i32 %451, 2, !dbg !2292
  br i1 %lt1329, label %loop.body1330, label %loop.exit1442, !dbg !2292

loop.body1330:                                    ; preds = %loop.cond1328
  %452 = load i32, ptr %a, align 4, !dbg !2294
  %453 = load i32, ptr %i, align 4, !dbg !2294
  %add1331 = add i32 %452, %453, !dbg !2294
  %and1332 = and i32 %add1331, 127, !dbg !2294
  store i32 %and1332, ptr %k, align 4, !dbg !2294
  %454 = load i32, ptr %k, align 4, !dbg !2296
  %455 = load i32, ptr %z, align 4, !dbg !2296
  %eq1333 = icmp eq i32 %454, %455, !dbg !2296
  br i1 %eq1333, label %or.phi1384, label %or.rhs1334, !dbg !2296

or.rhs1334:                                       ; preds = %loop.body1330
  %456 = load i32, ptr %k, align 4, !dbg !2296
  %sext1335 = sext i32 %456 to i64, !dbg !2296
  %lt1336 = icmp slt i64 %sext1335, 0, !dbg !2296
  %457 = call i1 @llvm.expect.i1(i1 %lt1336, i1 false), !dbg !2296
  br i1 %457, label %panic1337, label %checkok1345, !dbg !2296

checkok1345:                                      ; preds = %or.rhs1334
  %ge1346 = icmp sge i64 %sext1335, 128, !dbg !2296
  %458 = call i1 @llvm.expect.i1(i1 %ge1346, i1 false), !dbg !2296
  br i1 %458, label %panic1347, label %checkok1357, !dbg !2296

checkok1357:                                      ; preds = %checkok1345
  %ptroffset1358 = getelementptr inbounds [4 x i8], ptr %x398, i64 %sext1335, !dbg !2296
  %459 = load i32, ptr %ptroffset1358, align 4, !dbg !2296
  %460 = load i32, ptr %i, align 4, !dbg !2296
  %sext1359 = sext i32 %460 to i64, !dbg !2296
  %lt1360 = icmp slt i64 %sext1359, 0, !dbg !2296
  %461 = call i1 @llvm.expect.i1(i1 %lt1360, i1 false), !dbg !2296
  br i1 %461, label %panic1361, label %checkok1369, !dbg !2296

checkok1369:                                      ; preds = %checkok1357
  %ge1370 = icmp sge i64 %sext1359, 2, !dbg !2296
  %462 = call i1 @llvm.expect.i1(i1 %ge1370, i1 false), !dbg !2296
  br i1 %462, label %panic1371, label %checkok1381, !dbg !2296

checkok1381:                                      ; preds = %checkok1369
  %ptroffset1382 = getelementptr inbounds [4 x i8], ptr @to_double.TH, i64 %sext1359, !dbg !2296
  %463 = load i32, ptr %ptroffset1382, align 4, !dbg !2296
  %lt1383 = icmp ult i32 %459, %463, !dbg !2296
  br label %or.phi1384, !dbg !2296

or.phi1384:                                       ; preds = %checkok1381, %loop.body1330
  %val1385 = phi i1 [ true, %loop.body1330 ], [ %lt1383, %checkok1381 ], !dbg !2296
  br i1 %val1385, label %if.then1386, label %if.exit1387, !dbg !2296

if.then1386:                                      ; preds = %or.phi1384
  store i32 2, ptr %i, align 4, !dbg !2297
  br label %loop.exit1442, !dbg !2299

if.exit1387:                                      ; preds = %or.phi1384
  %464 = load i32, ptr %a, align 4, !dbg !2300
  %465 = load i32, ptr %i, align 4, !dbg !2300
  %add1388 = add i32 %464, %465, !dbg !2300
  %and1389 = and i32 %add1388, 127, !dbg !2300
  %sext1390 = sext i32 %and1389 to i64, !dbg !2300
  %lt1391 = icmp slt i64 %sext1390, 0, !dbg !2300
  %466 = call i1 @llvm.expect.i1(i1 %lt1391, i1 false), !dbg !2300
  br i1 %466, label %panic1392, label %checkok1400, !dbg !2300

checkok1400:                                      ; preds = %if.exit1387
  %ge1401 = icmp sge i64 %sext1390, 128, !dbg !2300
  %467 = call i1 @llvm.expect.i1(i1 %ge1401, i1 false), !dbg !2300
  br i1 %467, label %panic1402, label %checkok1412, !dbg !2300

checkok1412:                                      ; preds = %checkok1400
  %ptroffset1413 = getelementptr inbounds [4 x i8], ptr %x398, i64 %sext1390, !dbg !2300
  %468 = load i32, ptr %ptroffset1413, align 4, !dbg !2300
  %469 = load i32, ptr %i, align 4, !dbg !2300
  %sext1414 = sext i32 %469 to i64, !dbg !2300
  %lt1415 = icmp slt i64 %sext1414, 0, !dbg !2300
  %470 = call i1 @llvm.expect.i1(i1 %lt1415, i1 false), !dbg !2300
  br i1 %470, label %panic1416, label %checkok1424, !dbg !2300

checkok1424:                                      ; preds = %checkok1412
  %ge1425 = icmp sge i64 %sext1414, 2, !dbg !2300
  %471 = call i1 @llvm.expect.i1(i1 %ge1425, i1 false), !dbg !2300
  br i1 %471, label %panic1426, label %checkok1436, !dbg !2300

checkok1436:                                      ; preds = %checkok1424
  %ptroffset1437 = getelementptr inbounds [4 x i8], ptr @to_double.TH, i64 %sext1414, !dbg !2300
  %472 = load i32, ptr %ptroffset1437, align 4, !dbg !2300
  %gt1438 = icmp ugt i32 %468, %472, !dbg !2300
  br i1 %gt1438, label %if.then1439, label %if.exit1440, !dbg !2300

if.then1439:                                      ; preds = %checkok1436
  br label %loop.exit1442, !dbg !2300

if.exit1440:                                      ; preds = %checkok1436
  %473 = load i32, ptr %i, align 4, !dbg !2292
  %add1441 = add i32 %473, 1, !dbg !2292
  store i32 %add1441, ptr %i, align 4, !dbg !2292
  br label %loop.cond1328, !dbg !2292

loop.exit1442:                                    ; preds = %if.then1439, %if.then1386, %loop.cond1328
  %474 = load i32, ptr %i, align 4, !dbg !2301
  %eq1443 = icmp eq i32 %474, 2, !dbg !2301
  br i1 %eq1443, label %and.rhs1444, label %and.phi1446, !dbg !2301

and.rhs1444:                                      ; preds = %loop.exit1442
  %475 = load i64, ptr %rp768, align 8, !dbg !2301
  %eq1445 = icmp eq i64 %475, 18, !dbg !2301
  br label %and.phi1446, !dbg !2301

and.phi1446:                                      ; preds = %and.rhs1444, %loop.exit1442
  %val1447 = phi i1 [ false, %loop.exit1442 ], [ %eq1445, %and.rhs1444 ], !dbg !2301
  br i1 %val1447, label %if.then1448, label %if.exit1449, !dbg !2301

if.then1448:                                      ; preds = %and.phi1446
  br label %loop.exit1685, !dbg !2301

if.exit1449:                                      ; preds = %and.phi1446
  %476 = load i64, ptr %rp768, align 8, !dbg !2302
  %gt1450 = icmp sgt i64 %476, 27, !dbg !2302
  br i1 %gt1450, label %if.then1451, label %if.exit1452, !dbg !2302

if.then1451:                                      ; preds = %if.exit1449
  store i32 9, ptr %sh, align 4, !dbg !2302
  br label %if.exit1452, !dbg !2302

if.exit1452:                                      ; preds = %if.then1451, %if.exit1449
  %477 = load i32, ptr %e2767, align 4, !dbg !2303
  %478 = load i32, ptr %sh, align 4, !dbg !2303
  %add1453 = add i32 %477, %478, !dbg !2303
  store i32 %add1453, ptr %e2767, align 4, !dbg !2303
  %479 = load i32, ptr %a, align 4, !dbg !2304
  store i32 %479, ptr %k, align 4, !dbg !2304
  br label %loop.cond1454, !dbg !2304

loop.cond1454:                                    ; preds = %if.exit1619, %if.exit1452
  %480 = load i32, ptr %k, align 4, !dbg !2304
  %481 = load i32, ptr %z, align 4, !dbg !2304
  %neq1455 = icmp ne i32 %480, %481, !dbg !2304
  br i1 %neq1455, label %loop.body1456, label %loop.exit1622, !dbg !2304

loop.body1456:                                    ; preds = %loop.cond1454
    #dbg_declare(ptr %tmp1457, !2306, !DIExpression(), !2308)
  %482 = load i32, ptr %k, align 4, !dbg !2308
  %sext1458 = sext i32 %482 to i64, !dbg !2308
  %lt1459 = icmp slt i64 %sext1458, 0, !dbg !2308
  %483 = call i1 @llvm.expect.i1(i1 %lt1459, i1 false), !dbg !2308
  br i1 %483, label %panic1460, label %checkok1468, !dbg !2308

checkok1468:                                      ; preds = %loop.body1456
  %ge1469 = icmp sge i64 %sext1458, 128, !dbg !2308
  %484 = call i1 @llvm.expect.i1(i1 %ge1469, i1 false), !dbg !2308
  br i1 %484, label %panic1470, label %checkok1480, !dbg !2308

checkok1480:                                      ; preds = %checkok1468
  %ptroffset1481 = getelementptr inbounds [4 x i8], ptr %x398, i64 %sext1458, !dbg !2308
  %485 = load i32, ptr %ptroffset1481, align 4, !dbg !2308
  %486 = load i32, ptr %sh, align 4, !dbg !2308
  %shift_underflow = icmp slt i32 %486, 0, !dbg !2308
  %487 = call i1 @llvm.expect.i1(i1 %shift_underflow, i1 false), !dbg !2308
  br i1 %487, label %panic1482, label %checkok1490, !dbg !2308

checkok1490:                                      ; preds = %checkok1480
  %shift_exceeds1491 = icmp sge i32 %486, 32, !dbg !2308
  %488 = call i1 @llvm.expect.i1(i1 %shift_exceeds1491, i1 false), !dbg !2308
  br i1 %488, label %panic1492, label %checkok1500, !dbg !2308

checkok1500:                                      ; preds = %checkok1490
  %shl1501 = shl i32 1, %486, !dbg !2308
  %489 = freeze i32 %shl1501, !dbg !2308
  %sub1502 = sub i32 %489, 1, !dbg !2308
  %and1503 = and i32 %485, %sub1502, !dbg !2308
  store i32 %and1503, ptr %tmp1457, align 4, !dbg !2308
  %490 = load i32, ptr %k, align 4, !dbg !2309
  %sext1504 = sext i32 %490 to i64, !dbg !2309
  %lt1505 = icmp slt i64 %sext1504, 0, !dbg !2309
  %491 = call i1 @llvm.expect.i1(i1 %lt1505, i1 false), !dbg !2309
  br i1 %491, label %panic1506, label %checkok1514, !dbg !2309

checkok1514:                                      ; preds = %checkok1500
  %ge1515 = icmp sge i64 %sext1504, 128, !dbg !2309
  %492 = call i1 @llvm.expect.i1(i1 %ge1515, i1 false), !dbg !2309
  br i1 %492, label %panic1516, label %checkok1526, !dbg !2309

checkok1526:                                      ; preds = %checkok1514
  %ptroffset1527 = getelementptr inbounds [4 x i8], ptr %x398, i64 %sext1504, !dbg !2309
  %493 = load i32, ptr %ptroffset1527, align 4, !dbg !2309
  %494 = load i32, ptr %sh, align 4, !dbg !2309
  %shift_exceeds1528 = icmp uge i32 %494, 32, !dbg !2309
  %495 = call i1 @llvm.expect.i1(i1 %shift_exceeds1528, i1 false), !dbg !2309
  br i1 %495, label %panic1529, label %checkok1537, !dbg !2309

checkok1537:                                      ; preds = %checkok1526
  %lshr1538 = lshr i32 %493, %494, !dbg !2309
  %496 = freeze i32 %lshr1538, !dbg !2309
  %497 = load i32, ptr %carry1327, align 4, !dbg !2309
  %add1539 = add i32 %496, %497, !dbg !2309
  %498 = load i32, ptr %k, align 4, !dbg !2309
  %sext1540 = sext i32 %498 to i64, !dbg !2309
  %lt1541 = icmp slt i64 %sext1540, 0, !dbg !2309
  %499 = call i1 @llvm.expect.i1(i1 %lt1541, i1 false), !dbg !2309
  br i1 %499, label %panic1542, label %checkok1550, !dbg !2309

checkok1550:                                      ; preds = %checkok1537
  %ge1551 = icmp sge i64 %sext1540, 128, !dbg !2309
  %500 = call i1 @llvm.expect.i1(i1 %ge1551, i1 false), !dbg !2309
  br i1 %500, label %panic1552, label %checkok1562, !dbg !2309

checkok1562:                                      ; preds = %checkok1550
  %ptroffset1563 = getelementptr inbounds [4 x i8], ptr %x398, i64 %sext1540, !dbg !2309
  store i32 %add1539, ptr %ptroffset1563, align 4, !dbg !2309
  %501 = load i32, ptr %sh, align 4, !dbg !2310
  %shift_underflow1564 = icmp slt i32 %501, 0, !dbg !2310
  %502 = call i1 @llvm.expect.i1(i1 %shift_underflow1564, i1 false), !dbg !2310
  br i1 %502, label %panic1565, label %checkok1573, !dbg !2310

checkok1573:                                      ; preds = %checkok1562
  %shift_exceeds1574 = icmp sge i32 %501, 32, !dbg !2310
  %503 = call i1 @llvm.expect.i1(i1 %shift_exceeds1574, i1 false), !dbg !2310
  br i1 %503, label %panic1575, label %checkok1583, !dbg !2310

checkok1583:                                      ; preds = %checkok1573
  %ashr = ashr i32 1000000000, %501, !dbg !2310
  %504 = freeze i32 %ashr, !dbg !2310
  %505 = load i32, ptr %tmp1457, align 4, !dbg !2310
  %mul1584 = mul i32 %504, %505, !dbg !2310
  store i32 %mul1584, ptr %carry1327, align 4, !dbg !2310
  %506 = load i32, ptr %k, align 4, !dbg !2311
  %507 = load i32, ptr %a, align 4, !dbg !2311
  %eq1585 = icmp eq i32 %506, %507, !dbg !2311
  br i1 %eq1585, label %and.rhs1586, label %and.phi1612, !dbg !2311

and.rhs1586:                                      ; preds = %checkok1583
  %508 = load i32, ptr %k, align 4, !dbg !2311
  %sext1587 = sext i32 %508 to i64, !dbg !2311
  %lt1588 = icmp slt i64 %sext1587, 0, !dbg !2311
  %509 = call i1 @llvm.expect.i1(i1 %lt1588, i1 false), !dbg !2311
  br i1 %509, label %panic1589, label %checkok1597, !dbg !2311

checkok1597:                                      ; preds = %and.rhs1586
  %ge1598 = icmp sge i64 %sext1587, 128, !dbg !2311
  %510 = call i1 @llvm.expect.i1(i1 %ge1598, i1 false), !dbg !2311
  br i1 %510, label %panic1599, label %checkok1609, !dbg !2311

checkok1609:                                      ; preds = %checkok1597
  %ptroffset1610 = getelementptr inbounds [4 x i8], ptr %x398, i64 %sext1587, !dbg !2311
  %511 = load i32, ptr %ptroffset1610, align 4, !dbg !2311
  %i2nb1611 = icmp eq i32 %511, 0, !dbg !2311
  br label %and.phi1612, !dbg !2311

and.phi1612:                                      ; preds = %checkok1609, %checkok1583
  %val1613 = phi i1 [ false, %checkok1583 ], [ %i2nb1611, %checkok1609 ], !dbg !2311
  br i1 %val1613, label %if.then1614, label %if.exit1619, !dbg !2311

if.then1614:                                      ; preds = %and.phi1612
  %512 = load i32, ptr %a, align 4, !dbg !2312
  %add1615 = add i32 %512, 1, !dbg !2312
  %and1616 = and i32 %add1615, 127, !dbg !2312
  store i32 %and1616, ptr %a, align 4, !dbg !2312
  %513 = load i32, ptr %i, align 4, !dbg !2314
  %sub1617 = sub i32 %513, 1, !dbg !2314
  store i32 %sub1617, ptr %i, align 4, !dbg !2314
  %514 = load i64, ptr %rp768, align 8, !dbg !2315
  %sub1618 = sub i64 %514, 9, !dbg !2315
  store i64 %sub1618, ptr %rp768, align 8, !dbg !2315
  br label %if.exit1619, !dbg !2315

if.exit1619:                                      ; preds = %if.then1614, %and.phi1612
  %515 = load i32, ptr %k, align 4, !dbg !2304
  %add1620 = add i32 %515, 1, !dbg !2304
  %and1621 = and i32 %add1620, 127, !dbg !2304
  store i32 %and1621, ptr %k, align 4, !dbg !2304
  br label %loop.cond1454, !dbg !2304

loop.exit1622:                                    ; preds = %loop.cond1454
  %516 = load i32, ptr %carry1327, align 4, !dbg !2316
  %i2b1623 = icmp ne i32 %516, 0, !dbg !2316
  br i1 %i2b1623, label %if.then1624, label %if.exit1684, !dbg !2316

if.then1624:                                      ; preds = %loop.exit1622
  %517 = load i32, ptr %z, align 4, !dbg !2317
  %add1625 = add i32 %517, 1, !dbg !2317
  %and1626 = and i32 %add1625, 127, !dbg !2317
  %518 = load i32, ptr %a, align 4, !dbg !2317
  %neq1627 = icmp ne i32 %and1626, %518, !dbg !2317
  br i1 %neq1627, label %if.then1628, label %if.else1655, !dbg !2317

if.then1628:                                      ; preds = %if.then1624
  %519 = load i32, ptr %z, align 4, !dbg !2319
  %sext1629 = sext i32 %519 to i64, !dbg !2319
  %lt1630 = icmp slt i64 %sext1629, 0, !dbg !2319
  %520 = call i1 @llvm.expect.i1(i1 %lt1630, i1 false), !dbg !2319
  br i1 %520, label %panic1631, label %checkok1639, !dbg !2319

checkok1639:                                      ; preds = %if.then1628
  %ge1640 = icmp sge i64 %sext1629, 128, !dbg !2319
  %521 = call i1 @llvm.expect.i1(i1 %ge1640, i1 false), !dbg !2319
  br i1 %521, label %panic1641, label %checkok1651, !dbg !2319

checkok1651:                                      ; preds = %checkok1639
  %ptroffset1652 = getelementptr inbounds [4 x i8], ptr %x398, i64 %sext1629, !dbg !2319
  %522 = load i32, ptr %carry1327, align 4, !dbg !2319
  store i32 %522, ptr %ptroffset1652, align 4, !dbg !2319
  %523 = load i32, ptr %z, align 4, !dbg !2321
  %add1653 = add i32 %523, 1, !dbg !2321
  %and1654 = and i32 %add1653, 127, !dbg !2321
  store i32 %and1654, ptr %z, align 4, !dbg !2321
  br label %if.exit1683, !dbg !2321

if.else1655:                                      ; preds = %if.then1624
  %524 = load i32, ptr %z, align 4, !dbg !2322
  %sub1656 = sub i32 %524, 1, !dbg !2322
  %and1657 = and i32 %sub1656, 127, !dbg !2322
  %sext1658 = sext i32 %and1657 to i64, !dbg !2322
  %lt1659 = icmp slt i64 %sext1658, 0, !dbg !2322
  %525 = call i1 @llvm.expect.i1(i1 %lt1659, i1 false), !dbg !2322
  br i1 %525, label %panic1660, label %checkok1668, !dbg !2322

checkok1668:                                      ; preds = %if.else1655
  %ge1669 = icmp sge i64 %sext1658, 128, !dbg !2322
  %526 = call i1 @llvm.expect.i1(i1 %ge1669, i1 false), !dbg !2322
  br i1 %526, label %panic1670, label %checkok1680, !dbg !2322

checkok1680:                                      ; preds = %checkok1668
  %ptroffset1681 = getelementptr inbounds [4 x i8], ptr %x398, i64 %sext1658, !dbg !2322
  %527 = load i32, ptr %ptroffset1681, align 4, !dbg !2322
  %or1682 = or i32 %527, 1, !dbg !2322
  store i32 %or1682, ptr %ptroffset1681, align 4, !dbg !2322
  br label %if.exit1683, !dbg !2322

if.exit1683:                                      ; preds = %checkok1680, %checkok1651
  br label %if.exit1684, !dbg !2322

if.exit1684:                                      ; preds = %if.exit1683, %loop.exit1622
  br label %loop.body1326, !dbg !2322

loop.exit1685:                                    ; preds = %if.then1448
    #dbg_declare(ptr %y1686, !2324, !DIExpression(), !2325)
  store double 0.000000e+00, ptr %y1686, align 8, !dbg !2325
    #dbg_declare(ptr %i1687, !2326, !DIExpression(), !2327)
  store i32 0, ptr %i1687, align 4, !dbg !2327
  store i32 0, ptr %i1687, align 4, !dbg !2328
  br label %loop.cond1688, !dbg !2328

loop.cond1688:                                    ; preds = %checkok1748, %loop.exit1685
  %528 = load i32, ptr %i1687, align 4, !dbg !2328
  %lt1689 = icmp slt i32 %528, 2, !dbg !2328
  br i1 %lt1689, label %loop.body1690, label %loop.exit1753, !dbg !2328

loop.body1690:                                    ; preds = %loop.cond1688
  %529 = load i32, ptr %a, align 4, !dbg !2330
  %530 = load i32, ptr %i1687, align 4, !dbg !2330
  %add1691 = add i32 %529, %530, !dbg !2330
  %and1692 = and i32 %add1691, 127, !dbg !2330
  %531 = load i32, ptr %z, align 4, !dbg !2330
  %eq1693 = icmp eq i32 %and1692, %531, !dbg !2330
  br i1 %eq1693, label %if.then1694, label %if.exit1722, !dbg !2330

if.then1694:                                      ; preds = %loop.body1690
  %532 = load i32, ptr %z, align 4, !dbg !2330
  %add1695 = add i32 %532, 1, !dbg !2330
  %and1696 = and i32 %add1695, 127, !dbg !2330
  store i32 %and1696, ptr %z, align 4, !dbg !2330
  %sub1697 = sub i32 %and1696, 1, !dbg !2330
  %sext1698 = sext i32 %sub1697 to i64, !dbg !2330
  %lt1699 = icmp slt i64 %sext1698, 0, !dbg !2330
  %533 = call i1 @llvm.expect.i1(i1 %lt1699, i1 false), !dbg !2330
  br i1 %533, label %panic1700, label %checkok1708, !dbg !2330

checkok1708:                                      ; preds = %if.then1694
  %ge1709 = icmp sge i64 %sext1698, 128, !dbg !2330
  %534 = call i1 @llvm.expect.i1(i1 %ge1709, i1 false), !dbg !2330
  br i1 %534, label %panic1710, label %checkok1720, !dbg !2330

checkok1720:                                      ; preds = %checkok1708
  %ptroffset1721 = getelementptr inbounds [4 x i8], ptr %x398, i64 %sext1698, !dbg !2330
  store i32 0, ptr %ptroffset1721, align 4, !dbg !2330
  br label %if.exit1722, !dbg !2330

if.exit1722:                                      ; preds = %checkok1720, %loop.body1690
  %535 = load double, ptr %y1686, align 8, !dbg !2332
  %fmul1723 = fmul double 1.000000e+09, %535, !dbg !2332
  %536 = load i32, ptr %a, align 4, !dbg !2332
  %537 = load i32, ptr %i1687, align 4, !dbg !2332
  %add1724 = add i32 %536, %537, !dbg !2332
  %and1725 = and i32 %add1724, 127, !dbg !2332
  %sext1726 = sext i32 %and1725 to i64, !dbg !2332
  %lt1727 = icmp slt i64 %sext1726, 0, !dbg !2332
  %538 = call i1 @llvm.expect.i1(i1 %lt1727, i1 false), !dbg !2332
  br i1 %538, label %panic1728, label %checkok1736, !dbg !2332

checkok1736:                                      ; preds = %if.exit1722
  %ge1737 = icmp sge i64 %sext1726, 128, !dbg !2332
  %539 = call i1 @llvm.expect.i1(i1 %ge1737, i1 false), !dbg !2332
  br i1 %539, label %panic1738, label %checkok1748, !dbg !2332

checkok1748:                                      ; preds = %checkok1736
  %ptroffset1749 = getelementptr inbounds [4 x i8], ptr %x398, i64 %sext1726, !dbg !2332
  %540 = load i32, ptr %ptroffset1749, align 4, !dbg !2332
  %uifp1750 = uitofp i32 %540 to double, !dbg !2332
  %fadd1751 = fadd double %fmul1723, %uifp1750, !dbg !2332
  store double %fadd1751, ptr %y1686, align 8, !dbg !2332
  %541 = load i32, ptr %i1687, align 4, !dbg !2328
  %add1752 = add i32 %541, 1, !dbg !2328
  store i32 %add1752, ptr %i1687, align 4, !dbg !2328
  br label %loop.cond1688, !dbg !2328

loop.exit1753:                                    ; preds = %loop.cond1688
  %542 = load double, ptr %y1686, align 8, !dbg !2333
  %543 = load i32, ptr %sign391, align 4, !dbg !2333
  %sifp1754 = sitofp i32 %543 to double, !dbg !2333
  %fmul1755 = fmul double %542, %sifp1754, !dbg !2333
  store double %fmul1755, ptr %y1686, align 8, !dbg !2333
    #dbg_declare(ptr %denormal, !2334, !DIExpression(), !2335)
  store i8 0, ptr %denormal, align 1, !dbg !2335
    #dbg_declare(ptr %bits1756, !2336, !DIExpression(), !2337)
  store i32 53, ptr %bits1756, align 4, !dbg !2337
  %544 = load i32, ptr %bits1756, align 4, !dbg !2338
  %545 = load i32, ptr %e2767, align 4, !dbg !2338
  %add1757 = add i32 53, %545, !dbg !2338
  %sub1758 = sub i32 %add1757, -1074, !dbg !2338
  %lt1759 = icmp slt i32 %sub1758, %544, !dbg !2338
  %check1760 = icmp slt i32 %544, 0, !dbg !2338
  %siui-lt1761 = or i1 %check1760, %lt1759, !dbg !2338
  br i1 %siui-lt1761, label %if.then1762, label %if.exit1768, !dbg !2338

if.then1762:                                      ; preds = %loop.exit1753
  %546 = load i32, ptr %e2767, align 4, !dbg !2339
  %add1763 = add i32 53, %546, !dbg !2339
  %sub1764 = sub i32 %add1763, -1074, !dbg !2339
  store i32 %sub1764, ptr %bits1756, align 4, !dbg !2339
  %547 = load i32, ptr %bits1756, align 4, !dbg !2341
  %gt1765 = icmp ugt i32 0, %547, !dbg !2341
  br i1 %gt1765, label %if.then1766, label %if.exit1767, !dbg !2341

if.then1766:                                      ; preds = %if.then1762
  store i32 0, ptr %bits1756, align 4, !dbg !2341
  br label %if.exit1767, !dbg !2341

if.exit1767:                                      ; preds = %if.then1766, %if.then1762
  store i8 1, ptr %denormal, align 1, !dbg !2342
  br label %if.exit1768, !dbg !2342

if.exit1768:                                      ; preds = %if.exit1767, %loop.exit1753
    #dbg_declare(ptr %bias1769, !2343, !DIExpression(), !2344)
  store double 0.000000e+00, ptr %bias1769, align 8, !dbg !2344
    #dbg_declare(ptr %frac, !2345, !DIExpression(), !2346)
  store double 0.000000e+00, ptr %frac, align 8, !dbg !2346
  %548 = load i32, ptr %bits1756, align 4, !dbg !2347
  %gt1770 = icmp ugt i32 53, %548, !dbg !2347
  br i1 %gt1770, label %if.then1771, label %if.exit1792, !dbg !2347

if.then1771:                                      ; preds = %if.exit1768
  store double 1.000000e+00, ptr %x1772, align 8
  %549 = load i32, ptr %bits1756, align 4, !dbg !2348
  %sub1773 = sub i32 106, %549, !dbg !2348
  %sub1774 = sub i32 %sub1773, 1, !dbg !2348
  store i32 %sub1774, ptr %n1775, align 4
  %550 = load double, ptr %x1772, align 8, !dbg !2350
  %551 = load i32, ptr %n1775, align 4, !dbg !2350
  %552 = call double @scalbn(double %550, i32 %551), !dbg !2350
  store double %552, ptr %mag1776, align 8
  %553 = load double, ptr %y1686, align 8
  store double %553, ptr %sgn1777, align 8
  %554 = load double, ptr %mag1776, align 8
  store double %554, ptr %x1778, align 8
  %555 = load double, ptr %sgn1777, align 8
  store double %555, ptr %y1779, align 8
  %556 = load double, ptr %x1778, align 8, !dbg !2352
  %557 = load double, ptr %sgn1777, align 8, !dbg !2354
  %558 = call double @llvm.copysign.f64(double %556, double %557), !dbg !2354
  store double %558, ptr %bias1769, align 8, !dbg !2354
  %559 = load double, ptr %y1686, align 8, !dbg !2356
  store double 1.000000e+00, ptr %x1781, align 8
  %560 = load i32, ptr %bits1756, align 4, !dbg !2356
  %sub1782 = sub i32 53, %560, !dbg !2356
  store i32 %sub1782, ptr %n1783, align 4
  %561 = load double, ptr %x1781, align 8, !dbg !2357
  %562 = load i32, ptr %n1783, align 4, !dbg !2357
  %563 = call double @scalbn(double %561, i32 %562), !dbg !2357
  %zero1784 = fcmp ueq double %563, 0.000000e+00, !dbg !2356
  %564 = call i1 @llvm.expect.i1(i1 %zero1784, i1 false), !dbg !2356
  br i1 %564, label %panic1785, label %checkok1789, !dbg !2356

checkok1789:                                      ; preds = %if.then1771
  %fmod = frem double %559, %563, !dbg !2356
  store double %fmod, ptr %frac, align 8, !dbg !2356
  %565 = load double, ptr %y1686, align 8, !dbg !2359
  %566 = load double, ptr %frac, align 8, !dbg !2359
  %fsub1790 = fsub double %565, %566, !dbg !2359
  store double %fsub1790, ptr %y1686, align 8, !dbg !2359
  %567 = load double, ptr %y1686, align 8, !dbg !2360
  %568 = load double, ptr %bias1769, align 8, !dbg !2360
  %fadd1791 = fadd double %567, %568, !dbg !2360
  store double %fadd1791, ptr %y1686, align 8, !dbg !2360
  br label %if.exit1792, !dbg !2360

if.exit1792:                                      ; preds = %checkok1789, %if.exit1768
  %569 = load i32, ptr %a, align 4, !dbg !2361
  %570 = load i32, ptr %i1687, align 4, !dbg !2361
  %add1793 = add i32 %569, %570, !dbg !2361
  %and1794 = and i32 %add1793, 127, !dbg !2361
  %571 = load i32, ptr %z, align 4, !dbg !2361
  %neq1795 = icmp ne i32 %and1794, %571, !dbg !2361
  br i1 %neq1795, label %if.then1796, label %if.exit1878, !dbg !2361

if.then1796:                                      ; preds = %if.exit1792
    #dbg_declare(ptr %t, !2362, !DIExpression(), !2364)
  %572 = load i32, ptr %a, align 4, !dbg !2364
  %573 = load i32, ptr %i1687, align 4, !dbg !2364
  %add1797 = add i32 %572, %573, !dbg !2364
  %and1798 = and i32 %add1797, 127, !dbg !2364
  %sext1799 = sext i32 %and1798 to i64, !dbg !2364
  %lt1800 = icmp slt i64 %sext1799, 0, !dbg !2364
  %574 = call i1 @llvm.expect.i1(i1 %lt1800, i1 false), !dbg !2364
  br i1 %574, label %panic1801, label %checkok1809, !dbg !2364

checkok1809:                                      ; preds = %if.then1796
  %ge1810 = icmp sge i64 %sext1799, 128, !dbg !2364
  %575 = call i1 @llvm.expect.i1(i1 %ge1810, i1 false), !dbg !2364
  br i1 %575, label %panic1811, label %checkok1821, !dbg !2364

checkok1821:                                      ; preds = %checkok1809
  %ptroffset1822 = getelementptr inbounds [4 x i8], ptr %x398, i64 %sext1799, !dbg !2364
  %576 = load i32, ptr %ptroffset1822, align 4, !dbg !2364
  store i32 %576, ptr %t, align 4, !dbg !2364
  store i8 1, ptr %switch1823, align 1
  br label %switch.entry1824

switch.entry1824:                                 ; preds = %checkok1821
  %577 = load i8, ptr %switch1823, align 1
  %578 = trunc i8 %577 to i1
  %579 = load i32, ptr %t, align 4, !dbg !2365
  %gt1825 = icmp ugt i32 500000000, %579, !dbg !2365
  br i1 %gt1825, label %and.rhs1826, label %and.phi1835, !dbg !2365

and.rhs1826:                                      ; preds = %switch.entry1824
  %580 = load i32, ptr %t, align 4, !dbg !2365
  %i2b1827 = icmp ne i32 %580, 0, !dbg !2365
  br i1 %i2b1827, label %or.phi1833, label %or.rhs1828, !dbg !2365

or.rhs1828:                                       ; preds = %and.rhs1826
  %581 = load i32, ptr %a, align 4, !dbg !2365
  %582 = load i32, ptr %i1687, align 4, !dbg !2365
  %add1829 = add i32 %581, %582, !dbg !2365
  %add1830 = add i32 %add1829, 1, !dbg !2365
  %and1831 = and i32 %add1830, 127, !dbg !2365
  %583 = load i32, ptr %z, align 4, !dbg !2365
  %neq1832 = icmp ne i32 %and1831, %583, !dbg !2365
  br label %or.phi1833, !dbg !2365

or.phi1833:                                       ; preds = %or.rhs1828, %and.rhs1826
  %val1834 = phi i1 [ true, %and.rhs1826 ], [ %neq1832, %or.rhs1828 ], !dbg !2365
  br label %and.phi1835, !dbg !2365

and.phi1835:                                      ; preds = %or.phi1833, %switch.entry1824
  %val1836 = phi i1 [ false, %switch.entry1824 ], [ %val1834, %or.phi1833 ], !dbg !2365
  %eq1837 = icmp eq i1 %val1836, %578, !dbg !2365
  br i1 %eq1837, label %switch.case1838, label %next_if1842, !dbg !2365

switch.case1838:                                  ; preds = %and.phi1835
  %584 = load double, ptr %frac, align 8, !dbg !2367
  %585 = load i32, ptr %sign391, align 4, !dbg !2367
  %sifp1839 = sitofp i32 %585 to double, !dbg !2367
  %fmul1840 = fmul double 2.500000e-01, %sifp1839, !dbg !2367
  %fadd1841 = fadd double %584, %fmul1840, !dbg !2367
  store double %fadd1841, ptr %frac, align 8, !dbg !2367
  br label %switch.exit1867, !dbg !2367

next_if1842:                                      ; preds = %and.phi1835
  %586 = load i32, ptr %t, align 4, !dbg !2369
  %lt1843 = icmp ult i32 500000000, %586, !dbg !2369
  %eq1844 = icmp eq i1 %lt1843, %578, !dbg !2369
  br i1 %eq1844, label %switch.case1845, label %next_if1849, !dbg !2369

switch.case1845:                                  ; preds = %next_if1842
  %587 = load double, ptr %frac, align 8, !dbg !2370
  %588 = load i32, ptr %sign391, align 4, !dbg !2370
  %sifp1846 = sitofp i32 %588 to double, !dbg !2370
  %fmul1847 = fmul double 7.500000e-01, %sifp1846, !dbg !2370
  %fadd1848 = fadd double %587, %fmul1847, !dbg !2370
  store double %fadd1848, ptr %frac, align 8, !dbg !2370
  br label %switch.exit1867, !dbg !2370

next_if1849:                                      ; preds = %next_if1842
  %589 = load i32, ptr %t, align 4, !dbg !2372
  %eq1850 = icmp eq i32 500000000, %589, !dbg !2372
  %eq1851 = icmp eq i1 %eq1850, %578, !dbg !2372
  br i1 %eq1851, label %switch.case1852, label %next_if1866, !dbg !2372

switch.case1852:                                  ; preds = %next_if1849
  %590 = load i32, ptr %a, align 4, !dbg !2373
  %591 = load i32, ptr %i1687, align 4, !dbg !2373
  %add1853 = add i32 %590, %591, !dbg !2373
  %add1854 = add i32 %add1853, 1, !dbg !2373
  %and1855 = and i32 %add1854, 127, !dbg !2373
  %592 = load i32, ptr %z, align 4, !dbg !2373
  %eq1856 = icmp eq i32 %and1855, %592, !dbg !2373
  br i1 %eq1856, label %if.then1857, label %if.else1861, !dbg !2373

if.then1857:                                      ; preds = %switch.case1852
  %593 = load double, ptr %frac, align 8, !dbg !2375
  %594 = load i32, ptr %sign391, align 4, !dbg !2375
  %sifp1858 = sitofp i32 %594 to double, !dbg !2375
  %fmul1859 = fmul double 5.000000e-01, %sifp1858, !dbg !2375
  %fadd1860 = fadd double %593, %fmul1859, !dbg !2375
  store double %fadd1860, ptr %frac, align 8, !dbg !2375
  br label %if.exit1865, !dbg !2375

if.else1861:                                      ; preds = %switch.case1852
  %595 = load double, ptr %frac, align 8, !dbg !2377
  %596 = load i32, ptr %sign391, align 4, !dbg !2377
  %sifp1862 = sitofp i32 %596 to double, !dbg !2377
  %fmul1863 = fmul double 7.500000e-01, %sifp1862, !dbg !2377
  %fadd1864 = fadd double %595, %fmul1863, !dbg !2377
  store double %fadd1864, ptr %frac, align 8, !dbg !2377
  br label %if.exit1865, !dbg !2377

if.exit1865:                                      ; preds = %if.else1861, %if.then1857
  br label %switch.exit1867, !dbg !2377

next_if1866:                                      ; preds = %next_if1849
  br label %switch.exit1867, !dbg !2377

switch.exit1867:                                  ; preds = %next_if1866, %if.exit1865, %switch.case1845, %switch.case1838
  %597 = load i32, ptr %bits1756, align 4, !dbg !2379
  %sub1868 = sub i32 53, %597, !dbg !2379
  %ge1869 = icmp sge i32 %sub1868, 2, !dbg !2379
  br i1 %ge1869, label %and.rhs1870, label %and.phi1874, !dbg !2379

and.rhs1870:                                      ; preds = %switch.exit1867
  %598 = load double, ptr %frac, align 8, !dbg !2379
  %fmod1871 = frem double %598, 1.000000e+00, !dbg !2379
  %neq1872 = fcmp one double %fmod1871, 0.000000e+00, !dbg !2379
  %not1873 = xor i1 %neq1872, true, !dbg !2379
  br label %and.phi1874, !dbg !2379

and.phi1874:                                      ; preds = %and.rhs1870, %switch.exit1867
  %val1875 = phi i1 [ false, %switch.exit1867 ], [ %not1873, %and.rhs1870 ], !dbg !2379
  br i1 %val1875, label %if.then1876, label %if.exit1877, !dbg !2379

if.then1876:                                      ; preds = %and.phi1874
  %599 = load double, ptr %frac, align 8, !dbg !2379
  %fincdec = fadd double %599, 1.000000e+00, !dbg !2379
  store double %fincdec, ptr %frac, align 8, !dbg !2379
  br label %if.exit1877, !dbg !2379

if.exit1877:                                      ; preds = %if.then1876, %and.phi1874
  br label %if.exit1878, !dbg !2379

if.exit1878:                                      ; preds = %if.exit1877, %if.exit1792
  %600 = load double, ptr %y1686, align 8, !dbg !2380
  %601 = load double, ptr %frac, align 8, !dbg !2380
  %fadd1879 = fadd double %600, %601, !dbg !2380
  store double %fadd1879, ptr %y1686, align 8, !dbg !2380
  %602 = load double, ptr %y1686, align 8, !dbg !2381
  %603 = load double, ptr %bias1769, align 8, !dbg !2381
  %fsub1880 = fsub double %602, %603, !dbg !2381
  store double %fsub1880, ptr %y1686, align 8, !dbg !2381
  %604 = load i32, ptr %e2767, align 4, !dbg !2382
  %add1881 = add i32 %604, 53, !dbg !2382
  %and1882 = and i32 %add1881, 2147483647, !dbg !2382
  %605 = load i32, ptr %emax, align 4, !dbg !2382
  %sub1883 = sub i32 %605, 5, !dbg !2382
  %gt1884 = icmp sgt i32 %and1882, %sub1883, !dbg !2382
  br i1 %gt1884, label %if.then1885, label %if.exit1913, !dbg !2382

if.then1885:                                      ; preds = %if.exit1878
  %606 = load double, ptr %y1686, align 8
  store double %606, ptr %x1886, align 8
  %607 = load double, ptr %x1886, align 8, !dbg !2383
  %608 = call double @llvm.fabs.f64(double %607), !dbg !2383
  %ge1887 = fcmp oge double %608, 0x4340000000000000, !dbg !2385
  br i1 %ge1887, label %if.then1888, label %if.exit1901, !dbg !2385

if.then1888:                                      ; preds = %if.then1885
  %609 = load i8, ptr %denormal, align 1, !dbg !2387
  %610 = trunc i8 %609 to i1, !dbg !2387
  br i1 %610, label %and.rhs1889, label %and.phi1895, !dbg !2387

and.rhs1889:                                      ; preds = %if.then1888
  %611 = load i32, ptr %bits1756, align 4, !dbg !2387
  %612 = load i32, ptr %e2767, align 4, !dbg !2387
  %add1890 = add i32 53, %612, !dbg !2387
  %sub1891 = sub i32 %add1890, -1074, !dbg !2387
  %eq1892 = icmp eq i32 %sub1891, %611, !dbg !2387
  %check1893 = icmp sge i32 %sub1891, 0, !dbg !2387
  %siui-eq1894 = and i1 %check1893, %eq1892, !dbg !2387
  br label %and.phi1895, !dbg !2387

and.phi1895:                                      ; preds = %and.rhs1889, %if.then1888
  %val1896 = phi i1 [ false, %if.then1888 ], [ %siui-eq1894, %and.rhs1889 ], !dbg !2387
  br i1 %val1896, label %if.then1897, label %if.exit1898, !dbg !2387

if.then1897:                                      ; preds = %and.phi1895
  store i8 0, ptr %denormal, align 1, !dbg !2387
  br label %if.exit1898, !dbg !2387

if.exit1898:                                      ; preds = %if.then1897, %and.phi1895
  %613 = load double, ptr %y1686, align 8, !dbg !2389
  %fmul1899 = fmul double %613, 5.000000e-01, !dbg !2389
  store double %fmul1899, ptr %y1686, align 8, !dbg !2389
  %614 = load i32, ptr %e2767, align 4, !dbg !2390
  %add1900 = add i32 %614, 1, !dbg !2390
  store i32 %add1900, ptr %e2767, align 4, !dbg !2390
  br label %if.exit1901, !dbg !2390

if.exit1901:                                      ; preds = %if.exit1898, %if.then1885
  %615 = load i32, ptr %e2767, align 4, !dbg !2391
  %add1902 = add i32 %615, 53, !dbg !2391
  %616 = load i32, ptr %emax, align 4, !dbg !2391
  %gt1903 = icmp sgt i32 %add1902, %616, !dbg !2391
  br i1 %gt1903, label %or.phi1909, label %or.rhs1904, !dbg !2391

or.rhs1904:                                       ; preds = %if.exit1901
  %617 = load i8, ptr %denormal, align 1, !dbg !2391
  %618 = trunc i8 %617 to i1, !dbg !2391
  br i1 %618, label %and.rhs1905, label %and.phi1907, !dbg !2391

and.rhs1905:                                      ; preds = %or.rhs1904
  %619 = load double, ptr %frac, align 8, !dbg !2391
  %neq1906 = fcmp one double %619, 0.000000e+00, !dbg !2391
  br label %and.phi1907, !dbg !2391

and.phi1907:                                      ; preds = %and.rhs1905, %or.rhs1904
  %val1908 = phi i1 [ false, %or.rhs1904 ], [ %neq1906, %and.rhs1905 ], !dbg !2391
  br label %or.phi1909, !dbg !2391

or.phi1909:                                       ; preds = %and.phi1907, %if.exit1901
  %val1910 = phi i1 [ true, %if.exit1901 ], [ %val1908, %and.phi1907 ], !dbg !2391
  br i1 %val1910, label %if.then1911, label %if.exit1912, !dbg !2391

if.then1911:                                      ; preds = %or.phi1909
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_FLOAT to i64), ptr %reterr, align 8, !dbg !2391
  br label %err_retblock, !dbg !2391

if.exit1912:                                      ; preds = %or.phi1909
  br label %if.exit1913, !dbg !2391

if.exit1913:                                      ; preds = %if.exit1912, %if.exit1878
  %620 = load double, ptr %y1686, align 8
  store double %620, ptr %x1914, align 8
  %621 = load i32, ptr %e2767, align 4
  store i32 %621, ptr %n1915, align 4
  %622 = load double, ptr %x1914, align 8, !dbg !2392
  %623 = load i32, ptr %n1915, align 4, !dbg !2392
  %624 = call double @scalbn(double %622, i32 %623), !dbg !2392
  store double %624, ptr %blockret392, align 8, !dbg !2392
  br label %expr_block.exit1917, !dbg !2392

expr_block.exit1917:                              ; preds = %if.exit1913, %checkok867, %checkok819, %if.then780, %if.then722, %if.then705, %if.exit457, %if.then446
  %625 = load double, ptr %blockret392, align 8, !dbg !2392
  store double %625, ptr %blockret, align 8, !dbg !2392
  br label %expr_block.exit1918, !dbg !2392

expr_block.exit1918:                              ; preds = %expr_block.exit1917, %expr_block.exit, %if.then72, %if.then45
  %626 = load double, ptr %blockret, align 8, !dbg !2392
  store double %626, ptr %0, align 8, !dbg !2392
  ret i64 0, !dbg !2392

err_retblock:                                     ; preds = %if.then1911, %if.then731, %if.then728, %if.then701, %guard_block696, %if.then663, %if.else654, %if.then523, %if.else456, %if.else383, %if.then327, %if.then324, %guard_block, %if.else273, %if.then220, %if.else, %if.then29, %if.then
  %627 = load i64, ptr %reterr, align 8, !dbg !2392
  ret i64 %627, !dbg !2392

panic:                                            ; preds = %if.then3
  store i64 %4, ptr %taddr, align 8
  %628 = insertvalue %any undef, ptr %taddr, 0
  %629 = insertvalue %any %628, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr5, align 8
  %630 = insertvalue %any undef, ptr %taddr5, 0
  %631 = insertvalue %any %630, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg6, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg7, align 8
  store %"char[]" { ptr @.func.101, i64 9 }, ptr %indirectarg8, align 8
  store %any %629, ptr %varargslots, align 16
  %ptradd9 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %631, ptr %ptradd9, align 16
  %632 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %632, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg10, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg6, ptr align 8 %indirectarg7, ptr align 8 %indirectarg8, i32 470, ptr align 8 %indirectarg10) #6, !dbg !1965
  unreachable, !dbg !1965

panic12:                                          ; preds = %switch.case11
  store i64 %11, ptr %taddr13, align 8
  %633 = insertvalue %any undef, ptr %taddr13, 0
  %634 = insertvalue %any %633, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 1, ptr %taddr14, align 8
  %635 = insertvalue %any undef, ptr %taddr14, 0
  %636 = insertvalue %any %635, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.12, i64 61 }, ptr %indirectarg15, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg16, align 8
  store %"char[]" { ptr @.func.101, i64 9 }, ptr %indirectarg17, align 8
  store %any %634, ptr %varargslots18, align 16
  %ptradd19 = getelementptr inbounds i8, ptr %varargslots18, i64 16
  store %any %636, ptr %ptradd19, align 16
  %637 = insertvalue %"any[]" undef, ptr %varargslots18, 0
  %"$$temp20" = insertvalue %"any[]" %637, i64 2, 1
  store %"any[]" %"$$temp20", ptr %indirectarg21, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg15, ptr align 8 %indirectarg16, ptr align 8 %indirectarg17, i32 476, ptr align 8 %indirectarg21) #6, !dbg !1971
  unreachable, !dbg !1971

panic78:                                          ; preds = %and.rhs
  store i64 %46, ptr %taddr79, align 8
  %638 = insertvalue %any undef, ptr %taddr79, 0
  %639 = insertvalue %any %638, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr80, align 8
  %640 = insertvalue %any undef, ptr %taddr80, 0
  %641 = insertvalue %any %640, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg81, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg82, align 8
  store %"char[]" { ptr @.func.101, i64 9 }, ptr %indirectarg83, align 8
  store %any %639, ptr %varargslots84, align 16
  %ptradd85 = getelementptr inbounds i8, ptr %varargslots84, i64 16
  store %any %641, ptr %ptradd85, align 16
  %642 = insertvalue %"any[]" undef, ptr %varargslots84, 0
  %"$$temp86" = insertvalue %"any[]" %642, i64 2, 1
  store %"any[]" %"$$temp86", ptr %indirectarg87, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg81, ptr align 8 %indirectarg82, ptr align 8 %indirectarg83, i32 485, ptr align 8 %indirectarg87) #6, !dbg !1977
  unreachable, !dbg !1977

panic94:                                          ; preds = %and.rhs91
  store i64 %50, ptr %taddr95, align 8
  %643 = insertvalue %any undef, ptr %taddr95, 0
  %644 = insertvalue %any %643, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 1, ptr %taddr96, align 8
  %645 = insertvalue %any undef, ptr %taddr96, 0
  %646 = insertvalue %any %645, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg97, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg98, align 8
  store %"char[]" { ptr @.func.101, i64 9 }, ptr %indirectarg99, align 8
  store %any %644, ptr %varargslots100, align 16
  %ptradd101 = getelementptr inbounds i8, ptr %varargslots100, i64 16
  store %any %646, ptr %ptradd101, align 16
  %647 = insertvalue %"any[]" undef, ptr %varargslots100, 0
  %"$$temp102" = insertvalue %"any[]" %647, i64 2, 1
  store %"any[]" %"$$temp102", ptr %indirectarg103, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg97, ptr align 8 %indirectarg98, ptr align 8 %indirectarg99, i32 485, ptr align 8 %indirectarg103) #6, !dbg !1977
  unreachable, !dbg !1977

panic111:                                         ; preds = %if.then109
  store i64 %56, ptr %taddr112, align 8
  %648 = insertvalue %any undef, ptr %taddr112, 0
  %649 = insertvalue %any %648, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 2, ptr %taddr113, align 8
  %650 = insertvalue %any undef, ptr %taddr113, 0
  %651 = insertvalue %any %650, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.12, i64 61 }, ptr %indirectarg114, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg115, align 8
  store %"char[]" { ptr @.func.101, i64 9 }, ptr %indirectarg116, align 8
  store %any %649, ptr %varargslots117, align 16
  %ptradd118 = getelementptr inbounds i8, ptr %varargslots117, i64 16
  store %any %651, ptr %ptradd118, align 16
  %652 = insertvalue %"any[]" undef, ptr %varargslots117, 0
  %"$$temp119" = insertvalue %"any[]" %652, i64 2, 1
  store %"any[]" %"$$temp119", ptr %indirectarg120, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg114, ptr align 8 %indirectarg115, ptr align 8 %indirectarg116, i32 487, ptr align 8 %indirectarg120) #6, !dbg !1978
  unreachable, !dbg !1978

panic130:                                         ; preds = %loop.cond
  store i64 %63, ptr %taddr131, align 8
  %653 = insertvalue %any undef, ptr %taddr131, 0
  %654 = insertvalue %any %653, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %65, ptr %taddr132, align 8
  %655 = insertvalue %any undef, ptr %taddr132, 0
  %656 = insertvalue %any %655, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg133, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg134, align 8
  store %"char[]" { ptr @.func.101, i64 9 }, ptr %indirectarg135, align 8
  store %any %654, ptr %varargslots136, align 16
  %ptradd137 = getelementptr inbounds i8, ptr %varargslots136, i64 16
  store %any %656, ptr %ptradd137, align 16
  %657 = insertvalue %"any[]" undef, ptr %varargslots136, 0
  %"$$temp138" = insertvalue %"any[]" %657, i64 2, 1
  store %"any[]" %"$$temp138", ptr %indirectarg139, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg133, ptr align 8 %indirectarg134, ptr align 8 %indirectarg135, i32 344, ptr align 8 %indirectarg139) #6, !dbg !2006
  unreachable, !dbg !2006

panic159:                                         ; preds = %and.rhs155
  store i64 %79, ptr %taddr160, align 8
  %658 = insertvalue %any undef, ptr %taddr160, 0
  %659 = insertvalue %any %658, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %add157, ptr %taddr161, align 8
  %660 = insertvalue %any undef, ptr %taddr161, 0
  %661 = insertvalue %any %660, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg162, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg163, align 8
  store %"char[]" { ptr @.func.101, i64 9 }, ptr %indirectarg164, align 8
  store %any %659, ptr %varargslots165, align 16
  %ptradd166 = getelementptr inbounds i8, ptr %varargslots165, i64 16
  store %any %661, ptr %ptradd166, align 16
  %662 = insertvalue %"any[]" undef, ptr %varargslots165, 0
  %"$$temp167" = insertvalue %"any[]" %662, i64 2, 1
  store %"any[]" %"$$temp167", ptr %indirectarg168, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg162, ptr align 8 %indirectarg163, ptr align 8 %indirectarg164, i32 357, ptr align 8 %indirectarg168) #6, !dbg !2018
  unreachable, !dbg !2018

panic182:                                         ; preds = %and.rhs178
  store i64 %87, ptr %taddr183, align 8
  %663 = insertvalue %any undef, ptr %taddr183, 0
  %664 = insertvalue %any %663, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %add180, ptr %taddr184, align 8
  %665 = insertvalue %any undef, ptr %taddr184, 0
  %666 = insertvalue %any %665, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg185, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg186, align 8
  store %"char[]" { ptr @.func.101, i64 9 }, ptr %indirectarg187, align 8
  store %any %664, ptr %varargslots188, align 16
  %ptradd189 = getelementptr inbounds i8, ptr %varargslots188, i64 16
  store %any %666, ptr %ptradd189, align 16
  %667 = insertvalue %"any[]" undef, ptr %varargslots188, 0
  %"$$temp190" = insertvalue %"any[]" %667, i64 2, 1
  store %"any[]" %"$$temp190", ptr %indirectarg191, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg185, ptr align 8 %indirectarg186, ptr align 8 %indirectarg187, i32 361, ptr align 8 %indirectarg191) #6, !dbg !2023
  unreachable, !dbg !2023

panic260:                                         ; preds = %if.exit256
  store i64 %120, ptr %taddr261, align 8
  %668 = insertvalue %any undef, ptr %taddr261, 0
  %669 = insertvalue %any %668, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %add258, ptr %taddr262, align 8
  %670 = insertvalue %any undef, ptr %taddr262, 0
  %671 = insertvalue %any %670, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg263, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg264, align 8
  store %"char[]" { ptr @.func.101, i64 9 }, ptr %indirectarg265, align 8
  store %any %669, ptr %varargslots266, align 16
  %ptradd267 = getelementptr inbounds i8, ptr %varargslots266, i64 16
  store %any %671, ptr %ptradd267, align 16
  %672 = insertvalue %"any[]" undef, ptr %varargslots266, 0
  %"$$temp268" = insertvalue %"any[]" %672, i64 2, 1
  store %"any[]" %"$$temp268", ptr %indirectarg269, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg263, ptr align 8 %indirectarg264, ptr align 8 %indirectarg265, i32 394, ptr align 8 %indirectarg269) #6, !dbg !2054
  unreachable, !dbg !2054

panic291:                                         ; preds = %if.then288
  store i64 %137, ptr %taddr292, align 8
  %673 = insertvalue %any undef, ptr %taddr292, 0
  %674 = insertvalue %any %673, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %add289, ptr %taddr293, align 8
  %675 = insertvalue %any undef, ptr %taddr293, 0
  %676 = insertvalue %any %675, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.12, i64 61 }, ptr %indirectarg294, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg295, align 8
  store %"char[]" { ptr @.func.101, i64 9 }, ptr %indirectarg296, align 8
  store %any %674, ptr %varargslots297, align 16
  %ptradd298 = getelementptr inbounds i8, ptr %varargslots297, i64 16
  store %any %676, ptr %ptradd298, align 16
  %677 = insertvalue %"any[]" undef, ptr %varargslots297, 0
  %"$$temp299" = insertvalue %"any[]" %677, i64 2, 1
  store %"any[]" %"$$temp299", ptr %indirectarg300, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg294, ptr align 8 %indirectarg295, ptr align 8 %indirectarg296, i32 403, ptr align 8 %indirectarg300) #6, !dbg !2065
  unreachable, !dbg !2065

panic302:                                         ; preds = %checkok301
  store i64 %add289, ptr %taddr303, align 8
  %678 = insertvalue %any undef, ptr %taddr303, 0
  %679 = insertvalue %any %678, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.107, i64 22 }, ptr %indirectarg304, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg305, align 8
  store %"char[]" { ptr @.func.101, i64 9 }, ptr %indirectarg306, align 8
  store %any %679, ptr %varargslots307, align 16
  %680 = insertvalue %"any[]" undef, ptr %varargslots307, 0
  %"$$temp308" = insertvalue %"any[]" %680, i64 1, 1
  store %"any[]" %"$$temp308", ptr %indirectarg309, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg304, ptr align 8 %indirectarg305, ptr align 8 %indirectarg306, i32 403, ptr align 8 %indirectarg309) #6, !dbg !2065
  unreachable, !dbg !2065

panic403:                                         ; preds = %assert_ok
  store i64 %199, ptr %taddr404, align 8
  %681 = insertvalue %any undef, ptr %taddr404, 0
  %682 = insertvalue %any %681, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr405, align 8
  %683 = insertvalue %any undef, ptr %taddr405, 0
  %684 = insertvalue %any %683, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg406, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg407, align 8
  store %"char[]" { ptr @.func.101, i64 9 }, ptr %indirectarg408, align 8
  store %any %682, ptr %varargslots409, align 16
  %ptradd410 = getelementptr inbounds i8, ptr %varargslots409, i64 16
  store %any %684, ptr %ptradd410, align 16
  %685 = insertvalue %"any[]" undef, ptr %varargslots409, 0
  %"$$temp411" = insertvalue %"any[]" %685, i64 2, 1
  store %"any[]" %"$$temp411", ptr %indirectarg412, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg406, ptr align 8 %indirectarg407, ptr align 8 %indirectarg408, i32 45, ptr align 8 %indirectarg412) #6, !dbg !2126
  unreachable, !dbg !2126

panic431:                                         ; preds = %loop.cond428
  store i64 %208, ptr %taddr432, align 8
  %686 = insertvalue %any undef, ptr %taddr432, 0
  %687 = insertvalue %any %686, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %210, ptr %taddr433, align 8
  %688 = insertvalue %any undef, ptr %taddr433, 0
  %689 = insertvalue %any %688, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg434, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg435, align 8
  store %"char[]" { ptr @.func.101, i64 9 }, ptr %indirectarg436, align 8
  store %any %687, ptr %varargslots437, align 16
  %ptradd438 = getelementptr inbounds i8, ptr %varargslots437, i64 16
  store %any %689, ptr %ptradd438, align 16
  %690 = insertvalue %"any[]" undef, ptr %varargslots437, 0
  %"$$temp439" = insertvalue %"any[]" %690, i64 2, 1
  store %"any[]" %"$$temp439", ptr %indirectarg440, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg434, ptr align 8 %indirectarg435, ptr align 8 %indirectarg436, i32 56, ptr align 8 %indirectarg440) #6, !dbg !2144
  unreachable, !dbg !2144

panic466:                                         ; preds = %and.rhs462
  store i64 %225, ptr %taddr467, align 8
  %691 = insertvalue %any undef, ptr %taddr467, 0
  %692 = insertvalue %any %691, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %add464, ptr %taddr468, align 8
  %693 = insertvalue %any undef, ptr %taddr468, 0
  %694 = insertvalue %any %693, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg469, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg470, align 8
  store %"char[]" { ptr @.func.101, i64 9 }, ptr %indirectarg471, align 8
  store %any %692, ptr %varargslots472, align 16
  %ptradd473 = getelementptr inbounds i8, ptr %varargslots472, i64 16
  store %any %694, ptr %ptradd473, align 16
  %695 = insertvalue %"any[]" undef, ptr %varargslots472, 0
  %"$$temp474" = insertvalue %"any[]" %695, i64 2, 1
  store %"any[]" %"$$temp474", ptr %indirectarg475, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg469, ptr align 8 %indirectarg470, ptr align 8 %indirectarg471, i32 70, ptr align 8 %indirectarg475) #6, !dbg !2156
  unreachable, !dbg !2156

panic489:                                         ; preds = %and.rhs485
  store i64 %233, ptr %taddr490, align 8
  %696 = insertvalue %any undef, ptr %taddr490, 0
  %697 = insertvalue %any %696, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %add487, ptr %taddr491, align 8
  %698 = insertvalue %any undef, ptr %taddr491, 0
  %699 = insertvalue %any %698, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg492, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg493, align 8
  store %"char[]" { ptr @.func.101, i64 9 }, ptr %indirectarg494, align 8
  store %any %697, ptr %varargslots495, align 16
  %ptradd496 = getelementptr inbounds i8, ptr %varargslots495, i64 16
  store %any %699, ptr %ptradd496, align 16
  %700 = insertvalue %"any[]" undef, ptr %varargslots495, 0
  %"$$temp497" = insertvalue %"any[]" %700, i64 2, 1
  store %"any[]" %"$$temp497", ptr %indirectarg498, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg492, ptr align 8 %indirectarg493, ptr align 8 %indirectarg494, i32 74, ptr align 8 %indirectarg498) #6, !dbg !2161
  unreachable, !dbg !2161

panic537:                                         ; preds = %if.then535
  store i64 %sext, ptr %taddr538, align 8
  %701 = insertvalue %any undef, ptr %taddr538, 0
  %702 = insertvalue %any %701, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.26, i64 38 }, ptr %indirectarg539, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg540, align 8
  store %"char[]" { ptr @.func.101, i64 9 }, ptr %indirectarg541, align 8
  store %any %702, ptr %varargslots542, align 16
  %703 = insertvalue %"any[]" undef, ptr %varargslots542, 0
  %"$$temp543" = insertvalue %"any[]" %703, i64 1, 1
  store %"any[]" %"$$temp543", ptr %indirectarg544, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg539, ptr align 8 %indirectarg540, ptr align 8 %indirectarg541, i32 94, ptr align 8 %indirectarg544) #6, !dbg !2180
  unreachable, !dbg !2180

panic547:                                         ; preds = %checkok545
  store i64 128, ptr %taddr548, align 8
  %704 = insertvalue %any undef, ptr %taddr548, 0
  %705 = insertvalue %any %704, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext, ptr %taddr549, align 8
  %706 = insertvalue %any undef, ptr %taddr549, 0
  %707 = insertvalue %any %706, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg550, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg551, align 8
  store %"char[]" { ptr @.func.101, i64 9 }, ptr %indirectarg552, align 8
  store %any %705, ptr %varargslots553, align 16
  %ptradd554 = getelementptr inbounds i8, ptr %varargslots553, i64 16
  store %any %707, ptr %ptradd554, align 16
  %708 = insertvalue %"any[]" undef, ptr %varargslots553, 0
  %"$$temp555" = insertvalue %"any[]" %708, i64 2, 1
  store %"any[]" %"$$temp555", ptr %indirectarg556, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg550, ptr align 8 %indirectarg551, ptr align 8 %indirectarg552, i32 94, ptr align 8 %indirectarg556) #6, !dbg !2180
  unreachable, !dbg !2180

panic564:                                         ; preds = %checkok557
  store i64 %sext562, ptr %taddr565, align 8
  %709 = insertvalue %any undef, ptr %taddr565, 0
  %710 = insertvalue %any %709, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.26, i64 38 }, ptr %indirectarg566, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg567, align 8
  store %"char[]" { ptr @.func.101, i64 9 }, ptr %indirectarg568, align 8
  store %any %710, ptr %varargslots569, align 16
  %711 = insertvalue %"any[]" undef, ptr %varargslots569, 0
  %"$$temp570" = insertvalue %"any[]" %711, i64 1, 1
  store %"any[]" %"$$temp570", ptr %indirectarg571, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg566, ptr align 8 %indirectarg567, ptr align 8 %indirectarg568, i32 94, ptr align 8 %indirectarg571) #6, !dbg !2180
  unreachable, !dbg !2180

panic574:                                         ; preds = %checkok572
  store i64 128, ptr %taddr575, align 8
  %712 = insertvalue %any undef, ptr %taddr575, 0
  %713 = insertvalue %any %712, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext562, ptr %taddr576, align 8
  %714 = insertvalue %any undef, ptr %taddr576, 0
  %715 = insertvalue %any %714, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg577, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg578, align 8
  store %"char[]" { ptr @.func.101, i64 9 }, ptr %indirectarg579, align 8
  store %any %713, ptr %varargslots580, align 16
  %ptradd581 = getelementptr inbounds i8, ptr %varargslots580, i64 16
  store %any %715, ptr %ptradd581, align 16
  %716 = insertvalue %"any[]" undef, ptr %varargslots580, 0
  %"$$temp582" = insertvalue %"any[]" %716, i64 2, 1
  store %"any[]" %"$$temp582", ptr %indirectarg583, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg577, ptr align 8 %indirectarg578, ptr align 8 %indirectarg579, i32 94, ptr align 8 %indirectarg583) #6, !dbg !2180
  unreachable, !dbg !2180

panic591:                                         ; preds = %if.else586
  store i64 %sext589, ptr %taddr592, align 8
  %717 = insertvalue %any undef, ptr %taddr592, 0
  %718 = insertvalue %any %717, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.26, i64 38 }, ptr %indirectarg593, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg594, align 8
  store %"char[]" { ptr @.func.101, i64 9 }, ptr %indirectarg595, align 8
  store %any %718, ptr %varargslots596, align 16
  %719 = insertvalue %"any[]" undef, ptr %varargslots596, 0
  %"$$temp597" = insertvalue %"any[]" %719, i64 1, 1
  store %"any[]" %"$$temp597", ptr %indirectarg598, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg593, ptr align 8 %indirectarg594, ptr align 8 %indirectarg595, i32 98, ptr align 8 %indirectarg598) #6, !dbg !2182
  unreachable, !dbg !2182

panic601:                                         ; preds = %checkok599
  store i64 128, ptr %taddr602, align 8
  %720 = insertvalue %any undef, ptr %taddr602, 0
  %721 = insertvalue %any %720, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext589, ptr %taddr603, align 8
  %722 = insertvalue %any undef, ptr %taddr603, 0
  %723 = insertvalue %any %722, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg604, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg605, align 8
  store %"char[]" { ptr @.func.101, i64 9 }, ptr %indirectarg606, align 8
  store %any %721, ptr %varargslots607, align 16
  %ptradd608 = getelementptr inbounds i8, ptr %varargslots607, i64 16
  store %any %723, ptr %ptradd608, align 16
  %724 = insertvalue %"any[]" undef, ptr %varargslots607, 0
  %"$$temp609" = insertvalue %"any[]" %724, i64 2, 1
  store %"any[]" %"$$temp609", ptr %indirectarg610, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg604, ptr align 8 %indirectarg605, ptr align 8 %indirectarg606, i32 98, ptr align 8 %indirectarg610) #6, !dbg !2182
  unreachable, !dbg !2182

panic639:                                         ; preds = %assert_ok635
  store i64 %274, ptr %taddr640, align 8
  %725 = insertvalue %any undef, ptr %taddr640, 0
  %726 = insertvalue %any %725, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %add637, ptr %taddr641, align 8
  %727 = insertvalue %any undef, ptr %taddr641, 0
  %728 = insertvalue %any %727, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg642, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg643, align 8
  store %"char[]" { ptr @.func.101, i64 9 }, ptr %indirectarg644, align 8
  store %any %726, ptr %varargslots645, align 16
  %ptradd646 = getelementptr inbounds i8, ptr %varargslots645, i64 16
  store %any %728, ptr %ptradd646, align 16
  %729 = insertvalue %"any[]" undef, ptr %varargslots645, 0
  %"$$temp647" = insertvalue %"any[]" %729, i64 2, 1
  store %"any[]" %"$$temp647", ptr %indirectarg648, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg642, ptr align 8 %indirectarg643, ptr align 8 %indirectarg644, i32 113, ptr align 8 %indirectarg648) #6, !dbg !2194
  unreachable, !dbg !2194

panic667:                                         ; preds = %if.exit664
  store i64 %290, ptr %taddr668, align 8
  %730 = insertvalue %any undef, ptr %taddr668, 0
  %731 = insertvalue %any %730, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %add665, ptr %taddr669, align 8
  %732 = insertvalue %any undef, ptr %taddr669, 0
  %733 = insertvalue %any %732, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.12, i64 61 }, ptr %indirectarg670, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg671, align 8
  store %"char[]" { ptr @.func.101, i64 9 }, ptr %indirectarg672, align 8
  store %any %731, ptr %varargslots673, align 16
  %ptradd674 = getelementptr inbounds i8, ptr %varargslots673, i64 16
  store %any %733, ptr %ptradd674, align 16
  %734 = insertvalue %"any[]" undef, ptr %varargslots673, 0
  %"$$temp675" = insertvalue %"any[]" %734, i64 2, 1
  store %"any[]" %"$$temp675", ptr %indirectarg676, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg670, ptr align 8 %indirectarg671, ptr align 8 %indirectarg672, i32 120, ptr align 8 %indirectarg676) #6, !dbg !2201
  unreachable, !dbg !2201

panic679:                                         ; preds = %checkok677
  store i64 %add665, ptr %taddr680, align 8
  %735 = insertvalue %any undef, ptr %taddr680, 0
  %736 = insertvalue %any %735, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.107, i64 22 }, ptr %indirectarg681, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg682, align 8
  store %"char[]" { ptr @.func.101, i64 9 }, ptr %indirectarg683, align 8
  store %any %736, ptr %varargslots684, align 16
  %737 = insertvalue %"any[]" undef, ptr %varargslots684, 0
  %"$$temp685" = insertvalue %"any[]" %737, i64 1, 1
  store %"any[]" %"$$temp685", ptr %indirectarg686, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg681, ptr align 8 %indirectarg682, ptr align 8 %indirectarg683, i32 120, ptr align 8 %indirectarg686) #6, !dbg !2201
  unreachable, !dbg !2201

panic740:                                         ; preds = %loop.body737
  store i64 %sext738, ptr %taddr741, align 8
  %738 = insertvalue %any undef, ptr %taddr741, 0
  %739 = insertvalue %any %738, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.26, i64 38 }, ptr %indirectarg742, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg743, align 8
  store %"char[]" { ptr @.func.101, i64 9 }, ptr %indirectarg744, align 8
  store %any %739, ptr %varargslots745, align 16
  %740 = insertvalue %"any[]" undef, ptr %varargslots745, 0
  %"$$temp746" = insertvalue %"any[]" %740, i64 1, 1
  store %"any[]" %"$$temp746", ptr %indirectarg747, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg742, ptr align 8 %indirectarg743, ptr align 8 %indirectarg744, i32 138, ptr align 8 %indirectarg747) #6, !dbg !2213
  unreachable, !dbg !2213

panic750:                                         ; preds = %checkok748
  store i64 128, ptr %taddr751, align 8
  %741 = insertvalue %any undef, ptr %taddr751, 0
  %742 = insertvalue %any %741, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext738, ptr %taddr752, align 8
  %743 = insertvalue %any undef, ptr %taddr752, 0
  %744 = insertvalue %any %743, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg753, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg754, align 8
  store %"char[]" { ptr @.func.101, i64 9 }, ptr %indirectarg755, align 8
  store %any %742, ptr %varargslots756, align 16
  %ptradd757 = getelementptr inbounds i8, ptr %varargslots756, i64 16
  store %any %744, ptr %ptradd757, align 16
  %745 = insertvalue %"any[]" undef, ptr %varargslots756, 0
  %"$$temp758" = insertvalue %"any[]" %745, i64 2, 1
  store %"any[]" %"$$temp758", ptr %indirectarg759, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg753, ptr align 8 %indirectarg754, ptr align 8 %indirectarg755, i32 138, ptr align 8 %indirectarg759) #6, !dbg !2213
  unreachable, !dbg !2213

panic792:                                         ; preds = %if.then786
  store i64 %sub790, ptr %taddr793, align 8
  %746 = insertvalue %any undef, ptr %taddr793, 0
  %747 = insertvalue %any %746, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.26, i64 38 }, ptr %indirectarg794, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg795, align 8
  store %"char[]" { ptr @.func.101, i64 9 }, ptr %indirectarg796, align 8
  store %any %747, ptr %varargslots797, align 16
  %748 = insertvalue %"any[]" undef, ptr %varargslots797, 0
  %"$$temp798" = insertvalue %"any[]" %748, i64 1, 1
  store %"any[]" %"$$temp798", ptr %indirectarg799, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg794, ptr align 8 %indirectarg795, ptr align 8 %indirectarg796, i32 152, ptr align 8 %indirectarg799) #6, !dbg !2228
  unreachable, !dbg !2228

panic802:                                         ; preds = %checkok800
  store i64 8, ptr %taddr803, align 8
  %749 = insertvalue %any undef, ptr %taddr803, 0
  %750 = insertvalue %any %749, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sub790, ptr %taddr804, align 8
  %751 = insertvalue %any undef, ptr %taddr804, 0
  %752 = insertvalue %any %751, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg805, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg806, align 8
  store %"char[]" { ptr @.func.101, i64 9 }, ptr %indirectarg807, align 8
  store %any %750, ptr %varargslots808, align 16
  %ptradd809 = getelementptr inbounds i8, ptr %varargslots808, i64 16
  store %any %752, ptr %ptradd809, align 16
  %753 = insertvalue %"any[]" undef, ptr %varargslots808, 0
  %"$$temp810" = insertvalue %"any[]" %753, i64 2, 1
  store %"any[]" %"$$temp810", ptr %indirectarg811, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg805, ptr align 8 %indirectarg806, ptr align 8 %indirectarg807, i32 152, ptr align 8 %indirectarg811) #6, !dbg !2228
  unreachable, !dbg !2228

panic815:                                         ; preds = %checkok812
  store %"char[]" { ptr @.panic_msg.111, i64 17 }, ptr %indirectarg816, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg817, align 8
  store %"char[]" { ptr @.func.101, i64 9 }, ptr %indirectarg818, align 8
  %754 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %754(ptr align 8 %indirectarg816, ptr align 8 %indirectarg817, ptr align 8 %indirectarg818, i32 152) #6, !dbg !2228
  unreachable, !dbg !2228

panic828:                                         ; preds = %or.rhs827
  store i32 %342, ptr %taddr829, align 4
  %755 = insertvalue %any undef, ptr %taddr829, 0
  %756 = insertvalue %any %755, i64 ptrtoint (ptr @"$ct.uint" to i64), 1
  store %"char[]" { ptr @.panic_msg.112, i64 35 }, ptr %indirectarg830, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg831, align 8
  store %"char[]" { ptr @.func.101, i64 9 }, ptr %indirectarg832, align 8
  store %any %756, ptr %varargslots833, align 16
  %757 = insertvalue %"any[]" undef, ptr %varargslots833, 0
  %"$$temp834" = insertvalue %"any[]" %757, i64 1, 1
  store %"any[]" %"$$temp834", ptr %indirectarg835, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg830, ptr align 8 %indirectarg831, ptr align 8 %indirectarg832, i32 154, ptr align 8 %indirectarg835) #6, !dbg !2231
  unreachable, !dbg !2231

panic847:                                         ; preds = %if.then841
  store i64 %sub845, ptr %taddr848, align 8
  %758 = insertvalue %any undef, ptr %taddr848, 0
  %759 = insertvalue %any %758, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.26, i64 38 }, ptr %indirectarg849, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg850, align 8
  store %"char[]" { ptr @.func.101, i64 9 }, ptr %indirectarg851, align 8
  store %any %759, ptr %varargslots852, align 16
  %760 = insertvalue %"any[]" undef, ptr %varargslots852, 0
  %"$$temp853" = insertvalue %"any[]" %760, i64 1, 1
  store %"any[]" %"$$temp853", ptr %indirectarg854, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg849, ptr align 8 %indirectarg850, ptr align 8 %indirectarg851, i32 154, ptr align 8 %indirectarg854) #6, !dbg !2231
  unreachable, !dbg !2231

panic857:                                         ; preds = %checkok855
  store i64 8, ptr %taddr858, align 8
  %761 = insertvalue %any undef, ptr %taddr858, 0
  %762 = insertvalue %any %761, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sub845, ptr %taddr859, align 8
  %763 = insertvalue %any undef, ptr %taddr859, 0
  %764 = insertvalue %any %763, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg860, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg861, align 8
  store %"char[]" { ptr @.func.101, i64 9 }, ptr %indirectarg862, align 8
  store %any %762, ptr %varargslots863, align 16
  %ptradd864 = getelementptr inbounds i8, ptr %varargslots863, i64 16
  store %any %764, ptr %ptradd864, align 16
  %765 = insertvalue %"any[]" undef, ptr %varargslots863, 0
  %"$$temp865" = insertvalue %"any[]" %765, i64 2, 1
  store %"any[]" %"$$temp865", ptr %indirectarg866, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg860, ptr align 8 %indirectarg861, ptr align 8 %indirectarg862, i32 154, ptr align 8 %indirectarg866) #6, !dbg !2231
  unreachable, !dbg !2231

panic885:                                         ; preds = %cond.phi881
  store i64 %sub883, ptr %taddr886, align 8
  %766 = insertvalue %any undef, ptr %taddr886, 0
  %767 = insertvalue %any %766, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.26, i64 38 }, ptr %indirectarg887, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg888, align 8
  store %"char[]" { ptr @.func.101, i64 9 }, ptr %indirectarg889, align 8
  store %any %767, ptr %varargslots890, align 16
  %768 = insertvalue %"any[]" undef, ptr %varargslots890, 0
  %"$$temp891" = insertvalue %"any[]" %768, i64 1, 1
  store %"any[]" %"$$temp891", ptr %indirectarg892, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg887, ptr align 8 %indirectarg888, ptr align 8 %indirectarg889, i32 161, ptr align 8 %indirectarg892) #6, !dbg !2237
  unreachable, !dbg !2237

panic895:                                         ; preds = %checkok893
  store i64 8, ptr %taddr896, align 8
  %769 = insertvalue %any undef, ptr %taddr896, 0
  %770 = insertvalue %any %769, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sub883, ptr %taddr897, align 8
  %771 = insertvalue %any undef, ptr %taddr897, 0
  %772 = insertvalue %any %771, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg898, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg899, align 8
  store %"char[]" { ptr @.func.101, i64 9 }, ptr %indirectarg900, align 8
  store %any %770, ptr %varargslots901, align 16
  %ptradd902 = getelementptr inbounds i8, ptr %varargslots901, i64 16
  store %any %772, ptr %ptradd902, align 16
  %773 = insertvalue %"any[]" undef, ptr %varargslots901, 0
  %"$$temp903" = insertvalue %"any[]" %773, i64 2, 1
  store %"any[]" %"$$temp903", ptr %indirectarg904, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg898, ptr align 8 %indirectarg899, ptr align 8 %indirectarg900, i32 161, ptr align 8 %indirectarg904) #6, !dbg !2237
  unreachable, !dbg !2237

panic912:                                         ; preds = %loop.body909
  store i64 %sext910, ptr %taddr913, align 8
  %774 = insertvalue %any undef, ptr %taddr913, 0
  %775 = insertvalue %any %774, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.26, i64 38 }, ptr %indirectarg914, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg915, align 8
  store %"char[]" { ptr @.func.101, i64 9 }, ptr %indirectarg916, align 8
  store %any %775, ptr %varargslots917, align 16
  %776 = insertvalue %"any[]" undef, ptr %varargslots917, 0
  %"$$temp918" = insertvalue %"any[]" %776, i64 1, 1
  store %"any[]" %"$$temp918", ptr %indirectarg919, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg914, ptr align 8 %indirectarg915, ptr align 8 %indirectarg916, i32 165, ptr align 8 %indirectarg919) #6, !dbg !2244
  unreachable, !dbg !2244

panic922:                                         ; preds = %checkok920
  store i64 128, ptr %taddr923, align 8
  %777 = insertvalue %any undef, ptr %taddr923, 0
  %778 = insertvalue %any %777, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext910, ptr %taddr924, align 8
  %779 = insertvalue %any undef, ptr %taddr924, 0
  %780 = insertvalue %any %779, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg925, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg926, align 8
  store %"char[]" { ptr @.func.101, i64 9 }, ptr %indirectarg927, align 8
  store %any %778, ptr %varargslots928, align 16
  %ptradd929 = getelementptr inbounds i8, ptr %varargslots928, i64 16
  store %any %780, ptr %ptradd929, align 16
  %781 = insertvalue %"any[]" undef, ptr %varargslots928, 0
  %"$$temp930" = insertvalue %"any[]" %781, i64 2, 1
  store %"any[]" %"$$temp930", ptr %indirectarg931, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg925, ptr align 8 %indirectarg926, ptr align 8 %indirectarg927, i32 165, ptr align 8 %indirectarg931) #6, !dbg !2244
  unreachable, !dbg !2244

panic935:                                         ; preds = %checkok932
  store %"char[]" { ptr @.panic_msg.113, i64 10 }, ptr %indirectarg936, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg937, align 8
  store %"char[]" { ptr @.func.101, i64 9 }, ptr %indirectarg938, align 8
  %782 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %782(ptr align 8 %indirectarg936, ptr align 8 %indirectarg937, ptr align 8 %indirectarg938, i32 165) #6, !dbg !2244
  unreachable, !dbg !2244

panic943:                                         ; preds = %checkok939
  store i64 %sext941, ptr %taddr944, align 8
  %783 = insertvalue %any undef, ptr %taddr944, 0
  %784 = insertvalue %any %783, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.26, i64 38 }, ptr %indirectarg945, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg946, align 8
  store %"char[]" { ptr @.func.101, i64 9 }, ptr %indirectarg947, align 8
  store %any %784, ptr %varargslots948, align 16
  %785 = insertvalue %"any[]" undef, ptr %varargslots948, 0
  %"$$temp949" = insertvalue %"any[]" %785, i64 1, 1
  store %"any[]" %"$$temp949", ptr %indirectarg950, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg945, ptr align 8 %indirectarg946, ptr align 8 %indirectarg947, i32 166, ptr align 8 %indirectarg950) #6, !dbg !2245
  unreachable, !dbg !2245

panic953:                                         ; preds = %checkok951
  store i64 128, ptr %taddr954, align 8
  %786 = insertvalue %any undef, ptr %taddr954, 0
  %787 = insertvalue %any %786, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext941, ptr %taddr955, align 8
  %788 = insertvalue %any undef, ptr %taddr955, 0
  %789 = insertvalue %any %788, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg956, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg957, align 8
  store %"char[]" { ptr @.func.101, i64 9 }, ptr %indirectarg958, align 8
  store %any %787, ptr %varargslots959, align 16
  %ptradd960 = getelementptr inbounds i8, ptr %varargslots959, i64 16
  store %any %789, ptr %ptradd960, align 16
  %790 = insertvalue %"any[]" undef, ptr %varargslots959, 0
  %"$$temp961" = insertvalue %"any[]" %790, i64 2, 1
  store %"any[]" %"$$temp961", ptr %indirectarg962, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg956, ptr align 8 %indirectarg957, ptr align 8 %indirectarg958, i32 166, ptr align 8 %indirectarg962) #6, !dbg !2245
  unreachable, !dbg !2245

panic966:                                         ; preds = %checkok963
  store %"char[]" { ptr @.panic_msg.111, i64 17 }, ptr %indirectarg967, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg968, align 8
  store %"char[]" { ptr @.func.101, i64 9 }, ptr %indirectarg969, align 8
  %791 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %791(ptr align 8 %indirectarg967, ptr align 8 %indirectarg968, ptr align 8 %indirectarg969, i32 166) #6, !dbg !2245
  unreachable, !dbg !2245

panic974:                                         ; preds = %checkok970
  store i64 %sext972, ptr %taddr975, align 8
  %792 = insertvalue %any undef, ptr %taddr975, 0
  %793 = insertvalue %any %792, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.26, i64 38 }, ptr %indirectarg976, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg977, align 8
  store %"char[]" { ptr @.func.101, i64 9 }, ptr %indirectarg978, align 8
  store %any %793, ptr %varargslots979, align 16
  %794 = insertvalue %"any[]" undef, ptr %varargslots979, 0
  %"$$temp980" = insertvalue %"any[]" %794, i64 1, 1
  store %"any[]" %"$$temp980", ptr %indirectarg981, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg976, ptr align 8 %indirectarg977, ptr align 8 %indirectarg978, i32 166, ptr align 8 %indirectarg981) #6, !dbg !2245
  unreachable, !dbg !2245

panic984:                                         ; preds = %checkok982
  store i64 128, ptr %taddr985, align 8
  %795 = insertvalue %any undef, ptr %taddr985, 0
  %796 = insertvalue %any %795, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext972, ptr %taddr986, align 8
  %797 = insertvalue %any undef, ptr %taddr986, 0
  %798 = insertvalue %any %797, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg987, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg988, align 8
  store %"char[]" { ptr @.func.101, i64 9 }, ptr %indirectarg989, align 8
  store %any %796, ptr %varargslots990, align 16
  %ptradd991 = getelementptr inbounds i8, ptr %varargslots990, i64 16
  store %any %798, ptr %ptradd991, align 16
  %799 = insertvalue %"any[]" undef, ptr %varargslots990, 0
  %"$$temp992" = insertvalue %"any[]" %799, i64 2, 1
  store %"any[]" %"$$temp992", ptr %indirectarg993, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg987, ptr align 8 %indirectarg988, ptr align 8 %indirectarg989, i32 166, ptr align 8 %indirectarg993) #6, !dbg !2245
  unreachable, !dbg !2245

panic997:                                         ; preds = %checkok994
  store %"char[]" { ptr @.panic_msg.111, i64 17 }, ptr %indirectarg998, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg999, align 8
  store %"char[]" { ptr @.func.101, i64 9 }, ptr %indirectarg1000, align 8
  %800 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %800(ptr align 8 %indirectarg998, ptr align 8 %indirectarg999, ptr align 8 %indirectarg1000, i32 167) #6, !dbg !2246
  unreachable, !dbg !2246

panic1008:                                        ; preds = %and.rhs1005
  store i64 %sext1006, ptr %taddr1009, align 8
  %801 = insertvalue %any undef, ptr %taddr1009, 0
  %802 = insertvalue %any %801, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.26, i64 38 }, ptr %indirectarg1010, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg1011, align 8
  store %"char[]" { ptr @.func.101, i64 9 }, ptr %indirectarg1012, align 8
  store %any %802, ptr %varargslots1013, align 16
  %803 = insertvalue %"any[]" undef, ptr %varargslots1013, 0
  %"$$temp1014" = insertvalue %"any[]" %803, i64 1, 1
  store %"any[]" %"$$temp1014", ptr %indirectarg1015, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1010, ptr align 8 %indirectarg1011, ptr align 8 %indirectarg1012, i32 168, ptr align 8 %indirectarg1015) #6, !dbg !2247
  unreachable, !dbg !2247

panic1018:                                        ; preds = %checkok1016
  store i64 128, ptr %taddr1019, align 8
  %804 = insertvalue %any undef, ptr %taddr1019, 0
  %805 = insertvalue %any %804, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1006, ptr %taddr1020, align 8
  %806 = insertvalue %any undef, ptr %taddr1020, 0
  %807 = insertvalue %any %806, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg1021, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg1022, align 8
  store %"char[]" { ptr @.func.101, i64 9 }, ptr %indirectarg1023, align 8
  store %any %805, ptr %varargslots1024, align 16
  %ptradd1025 = getelementptr inbounds i8, ptr %varargslots1024, i64 16
  store %any %807, ptr %ptradd1025, align 16
  %808 = insertvalue %"any[]" undef, ptr %varargslots1024, 0
  %"$$temp1026" = insertvalue %"any[]" %808, i64 2, 1
  store %"any[]" %"$$temp1026", ptr %indirectarg1027, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1021, ptr align 8 %indirectarg1022, ptr align 8 %indirectarg1023, i32 168, ptr align 8 %indirectarg1027) #6, !dbg !2247
  unreachable, !dbg !2247

panic1045:                                        ; preds = %if.then1041
  store i64 %sext1043, ptr %taddr1046, align 8
  %809 = insertvalue %any undef, ptr %taddr1046, 0
  %810 = insertvalue %any %809, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.26, i64 38 }, ptr %indirectarg1047, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg1048, align 8
  store %"char[]" { ptr @.func.101, i64 9 }, ptr %indirectarg1049, align 8
  store %any %810, ptr %varargslots1050, align 16
  %811 = insertvalue %"any[]" undef, ptr %varargslots1050, 0
  %"$$temp1051" = insertvalue %"any[]" %811, i64 1, 1
  store %"any[]" %"$$temp1051", ptr %indirectarg1052, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1047, ptr align 8 %indirectarg1048, ptr align 8 %indirectarg1049, i32 174, ptr align 8 %indirectarg1052) #6, !dbg !2251
  unreachable, !dbg !2251

panic1055:                                        ; preds = %checkok1053
  store i64 128, ptr %taddr1056, align 8
  %812 = insertvalue %any undef, ptr %taddr1056, 0
  %813 = insertvalue %any %812, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1043, ptr %taddr1057, align 8
  %814 = insertvalue %any undef, ptr %taddr1057, 0
  %815 = insertvalue %any %814, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg1058, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg1059, align 8
  store %"char[]" { ptr @.func.101, i64 9 }, ptr %indirectarg1060, align 8
  store %any %813, ptr %varargslots1061, align 16
  %ptradd1062 = getelementptr inbounds i8, ptr %varargslots1061, i64 16
  store %any %815, ptr %ptradd1062, align 16
  %816 = insertvalue %"any[]" undef, ptr %varargslots1061, 0
  %"$$temp1063" = insertvalue %"any[]" %816, i64 2, 1
  store %"any[]" %"$$temp1063", ptr %indirectarg1064, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1058, ptr align 8 %indirectarg1059, ptr align 8 %indirectarg1060, i32 174, ptr align 8 %indirectarg1064) #6, !dbg !2251
  unreachable, !dbg !2251

panic1078:                                        ; preds = %and.rhs1075
  store i64 %sext1076, ptr %taddr1079, align 8
  %817 = insertvalue %any undef, ptr %taddr1079, 0
  %818 = insertvalue %any %817, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.26, i64 38 }, ptr %indirectarg1080, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg1081, align 8
  store %"char[]" { ptr @.func.101, i64 9 }, ptr %indirectarg1082, align 8
  store %any %818, ptr %varargslots1083, align 16
  %819 = insertvalue %"any[]" undef, ptr %varargslots1083, 0
  %"$$temp1084" = insertvalue %"any[]" %819, i64 1, 1
  store %"any[]" %"$$temp1084", ptr %indirectarg1085, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1080, ptr align 8 %indirectarg1081, ptr align 8 %indirectarg1082, i32 179, ptr align 8 %indirectarg1085) #6, !dbg !2254
  unreachable, !dbg !2254

panic1088:                                        ; preds = %checkok1086
  store i64 128, ptr %taddr1089, align 8
  %820 = insertvalue %any undef, ptr %taddr1089, 0
  %821 = insertvalue %any %820, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1076, ptr %taddr1090, align 8
  %822 = insertvalue %any undef, ptr %taddr1090, 0
  %823 = insertvalue %any %822, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg1091, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg1092, align 8
  store %"char[]" { ptr @.func.101, i64 9 }, ptr %indirectarg1093, align 8
  store %any %821, ptr %varargslots1094, align 16
  %ptradd1095 = getelementptr inbounds i8, ptr %varargslots1094, i64 16
  store %any %823, ptr %ptradd1095, align 16
  %824 = insertvalue %"any[]" undef, ptr %varargslots1094, 0
  %"$$temp1096" = insertvalue %"any[]" %824, i64 2, 1
  store %"any[]" %"$$temp1096", ptr %indirectarg1097, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1091, ptr align 8 %indirectarg1092, ptr align 8 %indirectarg1093, i32 179, ptr align 8 %indirectarg1097) #6, !dbg !2254
  unreachable, !dbg !2254

panic1114:                                        ; preds = %loop.body1110
  store i64 %sext1112, ptr %taddr1115, align 8
  %825 = insertvalue %any undef, ptr %taddr1115, 0
  %826 = insertvalue %any %825, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.26, i64 38 }, ptr %indirectarg1116, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg1117, align 8
  store %"char[]" { ptr @.func.101, i64 9 }, ptr %indirectarg1118, align 8
  store %any %826, ptr %varargslots1119, align 16
  %827 = insertvalue %"any[]" undef, ptr %varargslots1119, 0
  %"$$temp1120" = insertvalue %"any[]" %827, i64 1, 1
  store %"any[]" %"$$temp1120", ptr %indirectarg1121, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1116, ptr align 8 %indirectarg1117, ptr align 8 %indirectarg1118, i32 185, ptr align 8 %indirectarg1121) #6, !dbg !2264
  unreachable, !dbg !2264

panic1124:                                        ; preds = %checkok1122
  store i64 128, ptr %taddr1125, align 8
  %828 = insertvalue %any undef, ptr %taddr1125, 0
  %829 = insertvalue %any %828, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1112, ptr %taddr1126, align 8
  %830 = insertvalue %any undef, ptr %taddr1126, 0
  %831 = insertvalue %any %830, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg1127, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg1128, align 8
  store %"char[]" { ptr @.func.101, i64 9 }, ptr %indirectarg1129, align 8
  store %any %829, ptr %varargslots1130, align 16
  %ptradd1131 = getelementptr inbounds i8, ptr %varargslots1130, i64 16
  store %any %831, ptr %ptradd1131, align 16
  %832 = insertvalue %"any[]" undef, ptr %varargslots1130, 0
  %"$$temp1132" = insertvalue %"any[]" %832, i64 2, 1
  store %"any[]" %"$$temp1132", ptr %indirectarg1133, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1127, ptr align 8 %indirectarg1128, ptr align 8 %indirectarg1129, i32 185, ptr align 8 %indirectarg1133) #6, !dbg !2264
  unreachable, !dbg !2264

panic1147:                                        ; preds = %if.then1140
  store i64 %sext1145, ptr %taddr1148, align 8
  %833 = insertvalue %any undef, ptr %taddr1148, 0
  %834 = insertvalue %any %833, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.26, i64 38 }, ptr %indirectarg1149, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg1150, align 8
  store %"char[]" { ptr @.func.101, i64 9 }, ptr %indirectarg1151, align 8
  store %any %834, ptr %varargslots1152, align 16
  %835 = insertvalue %"any[]" undef, ptr %varargslots1152, 0
  %"$$temp1153" = insertvalue %"any[]" %835, i64 1, 1
  store %"any[]" %"$$temp1153", ptr %indirectarg1154, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1149, ptr align 8 %indirectarg1150, ptr align 8 %indirectarg1151, i32 189, ptr align 8 %indirectarg1154) #6, !dbg !2268
  unreachable, !dbg !2268

panic1157:                                        ; preds = %checkok1155
  store i64 128, ptr %taddr1158, align 8
  %836 = insertvalue %any undef, ptr %taddr1158, 0
  %837 = insertvalue %any %836, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1145, ptr %taddr1159, align 8
  %838 = insertvalue %any undef, ptr %taddr1159, 0
  %839 = insertvalue %any %838, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg1160, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg1161, align 8
  store %"char[]" { ptr @.func.101, i64 9 }, ptr %indirectarg1162, align 8
  store %any %837, ptr %varargslots1163, align 16
  %ptradd1164 = getelementptr inbounds i8, ptr %varargslots1163, i64 16
  store %any %839, ptr %ptradd1164, align 16
  %840 = insertvalue %"any[]" undef, ptr %varargslots1163, 0
  %"$$temp1165" = insertvalue %"any[]" %840, i64 2, 1
  store %"any[]" %"$$temp1165", ptr %indirectarg1166, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1160, ptr align 8 %indirectarg1161, ptr align 8 %indirectarg1162, i32 189, ptr align 8 %indirectarg1166) #6, !dbg !2268
  unreachable, !dbg !2268

panic1173:                                        ; preds = %if.else1169
  store i64 %sext1171, ptr %taddr1174, align 8
  %841 = insertvalue %any undef, ptr %taddr1174, 0
  %842 = insertvalue %any %841, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.26, i64 38 }, ptr %indirectarg1175, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg1176, align 8
  store %"char[]" { ptr @.func.101, i64 9 }, ptr %indirectarg1177, align 8
  store %any %842, ptr %varargslots1178, align 16
  %843 = insertvalue %"any[]" undef, ptr %varargslots1178, 0
  %"$$temp1179" = insertvalue %"any[]" %843, i64 1, 1
  store %"any[]" %"$$temp1179", ptr %indirectarg1180, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1175, ptr align 8 %indirectarg1176, ptr align 8 %indirectarg1177, i32 194, ptr align 8 %indirectarg1180) #6, !dbg !2271
  unreachable, !dbg !2271

panic1183:                                        ; preds = %checkok1181
  store i64 128, ptr %taddr1184, align 8
  %844 = insertvalue %any undef, ptr %taddr1184, 0
  %845 = insertvalue %any %844, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1171, ptr %taddr1185, align 8
  %846 = insertvalue %any undef, ptr %taddr1185, 0
  %847 = insertvalue %any %846, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg1186, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg1187, align 8
  store %"char[]" { ptr @.func.101, i64 9 }, ptr %indirectarg1188, align 8
  store %any %845, ptr %varargslots1189, align 16
  %ptradd1190 = getelementptr inbounds i8, ptr %varargslots1189, i64 16
  store %any %847, ptr %ptradd1190, align 16
  %848 = insertvalue %"any[]" undef, ptr %varargslots1189, 0
  %"$$temp1191" = insertvalue %"any[]" %848, i64 2, 1
  store %"any[]" %"$$temp1191", ptr %indirectarg1192, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1186, ptr align 8 %indirectarg1187, ptr align 8 %indirectarg1188, i32 194, ptr align 8 %indirectarg1192) #6, !dbg !2271
  unreachable, !dbg !2271

panic1206:                                        ; preds = %and.rhs1203
  store i64 %sext1204, ptr %taddr1207, align 8
  %849 = insertvalue %any undef, ptr %taddr1207, 0
  %850 = insertvalue %any %849, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.26, i64 38 }, ptr %indirectarg1208, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg1209, align 8
  store %"char[]" { ptr @.func.101, i64 9 }, ptr %indirectarg1210, align 8
  store %any %850, ptr %varargslots1211, align 16
  %851 = insertvalue %"any[]" undef, ptr %varargslots1211, 0
  %"$$temp1212" = insertvalue %"any[]" %851, i64 1, 1
  store %"any[]" %"$$temp1212", ptr %indirectarg1213, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1208, ptr align 8 %indirectarg1209, ptr align 8 %indirectarg1210, i32 196, ptr align 8 %indirectarg1213) #6, !dbg !2272
  unreachable, !dbg !2272

panic1216:                                        ; preds = %checkok1214
  store i64 128, ptr %taddr1217, align 8
  %852 = insertvalue %any undef, ptr %taddr1217, 0
  %853 = insertvalue %any %852, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1204, ptr %taddr1218, align 8
  %854 = insertvalue %any undef, ptr %taddr1218, 0
  %855 = insertvalue %any %854, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg1219, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg1220, align 8
  store %"char[]" { ptr @.func.101, i64 9 }, ptr %indirectarg1221, align 8
  store %any %853, ptr %varargslots1222, align 16
  %ptradd1223 = getelementptr inbounds i8, ptr %varargslots1222, i64 16
  store %any %855, ptr %ptradd1223, align 16
  %856 = insertvalue %"any[]" undef, ptr %varargslots1222, 0
  %"$$temp1224" = insertvalue %"any[]" %856, i64 2, 1
  store %"any[]" %"$$temp1224", ptr %indirectarg1225, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1219, ptr align 8 %indirectarg1220, ptr align 8 %indirectarg1221, i32 196, ptr align 8 %indirectarg1225) #6, !dbg !2272
  unreachable, !dbg !2272

panic1252:                                        ; preds = %if.then1245
  store i64 %sext1250, ptr %taddr1253, align 8
  %857 = insertvalue %any undef, ptr %taddr1253, 0
  %858 = insertvalue %any %857, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.26, i64 38 }, ptr %indirectarg1254, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg1255, align 8
  store %"char[]" { ptr @.func.101, i64 9 }, ptr %indirectarg1256, align 8
  store %any %858, ptr %varargslots1257, align 16
  %859 = insertvalue %"any[]" undef, ptr %varargslots1257, 0
  %"$$temp1258" = insertvalue %"any[]" %859, i64 1, 1
  store %"any[]" %"$$temp1258", ptr %indirectarg1259, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1254, ptr align 8 %indirectarg1255, ptr align 8 %indirectarg1256, i32 206, ptr align 8 %indirectarg1259) #6, !dbg !2281
  unreachable, !dbg !2281

panic1262:                                        ; preds = %checkok1260
  store i64 128, ptr %taddr1263, align 8
  %860 = insertvalue %any undef, ptr %taddr1263, 0
  %861 = insertvalue %any %860, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1250, ptr %taddr1264, align 8
  %862 = insertvalue %any undef, ptr %taddr1264, 0
  %863 = insertvalue %any %862, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg1265, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg1266, align 8
  store %"char[]" { ptr @.func.101, i64 9 }, ptr %indirectarg1267, align 8
  store %any %861, ptr %varargslots1268, align 16
  %ptradd1269 = getelementptr inbounds i8, ptr %varargslots1268, i64 16
  store %any %863, ptr %ptradd1269, align 16
  %864 = insertvalue %"any[]" undef, ptr %varargslots1268, 0
  %"$$temp1270" = insertvalue %"any[]" %864, i64 2, 1
  store %"any[]" %"$$temp1270", ptr %indirectarg1271, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1265, ptr align 8 %indirectarg1266, ptr align 8 %indirectarg1267, i32 206, ptr align 8 %indirectarg1271) #6, !dbg !2281
  unreachable, !dbg !2281

panic1276:                                        ; preds = %checkok1272
  store i64 %sext1274, ptr %taddr1277, align 8
  %865 = insertvalue %any undef, ptr %taddr1277, 0
  %866 = insertvalue %any %865, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.26, i64 38 }, ptr %indirectarg1278, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg1279, align 8
  store %"char[]" { ptr @.func.101, i64 9 }, ptr %indirectarg1280, align 8
  store %any %866, ptr %varargslots1281, align 16
  %867 = insertvalue %"any[]" undef, ptr %varargslots1281, 0
  %"$$temp1282" = insertvalue %"any[]" %867, i64 1, 1
  store %"any[]" %"$$temp1282", ptr %indirectarg1283, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1278, ptr align 8 %indirectarg1279, ptr align 8 %indirectarg1280, i32 206, ptr align 8 %indirectarg1283) #6, !dbg !2281
  unreachable, !dbg !2281

panic1286:                                        ; preds = %checkok1284
  store i64 128, ptr %taddr1287, align 8
  %868 = insertvalue %any undef, ptr %taddr1287, 0
  %869 = insertvalue %any %868, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1274, ptr %taddr1288, align 8
  %870 = insertvalue %any undef, ptr %taddr1288, 0
  %871 = insertvalue %any %870, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg1289, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg1290, align 8
  store %"char[]" { ptr @.func.101, i64 9 }, ptr %indirectarg1291, align 8
  store %any %869, ptr %varargslots1292, align 16
  %ptradd1293 = getelementptr inbounds i8, ptr %varargslots1292, i64 16
  store %any %871, ptr %ptradd1293, align 16
  %872 = insertvalue %"any[]" undef, ptr %varargslots1292, 0
  %"$$temp1294" = insertvalue %"any[]" %872, i64 2, 1
  store %"any[]" %"$$temp1294", ptr %indirectarg1295, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1289, ptr align 8 %indirectarg1290, ptr align 8 %indirectarg1291, i32 206, ptr align 8 %indirectarg1295) #6, !dbg !2281
  unreachable, !dbg !2281

panic1302:                                        ; preds = %if.exit1299
  store i64 %sext1300, ptr %taddr1303, align 8
  %873 = insertvalue %any undef, ptr %taddr1303, 0
  %874 = insertvalue %any %873, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.26, i64 38 }, ptr %indirectarg1304, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg1305, align 8
  store %"char[]" { ptr @.func.101, i64 9 }, ptr %indirectarg1306, align 8
  store %any %874, ptr %varargslots1307, align 16
  %875 = insertvalue %"any[]" undef, ptr %varargslots1307, 0
  %"$$temp1308" = insertvalue %"any[]" %875, i64 1, 1
  store %"any[]" %"$$temp1308", ptr %indirectarg1309, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1304, ptr align 8 %indirectarg1305, ptr align 8 %indirectarg1306, i32 208, ptr align 8 %indirectarg1309) #6, !dbg !2282
  unreachable, !dbg !2282

panic1312:                                        ; preds = %checkok1310
  store i64 128, ptr %taddr1313, align 8
  %876 = insertvalue %any undef, ptr %taddr1313, 0
  %877 = insertvalue %any %876, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1300, ptr %taddr1314, align 8
  %878 = insertvalue %any undef, ptr %taddr1314, 0
  %879 = insertvalue %any %878, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg1315, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg1316, align 8
  store %"char[]" { ptr @.func.101, i64 9 }, ptr %indirectarg1317, align 8
  store %any %877, ptr %varargslots1318, align 16
  %ptradd1319 = getelementptr inbounds i8, ptr %varargslots1318, i64 16
  store %any %879, ptr %ptradd1319, align 16
  %880 = insertvalue %"any[]" undef, ptr %varargslots1318, 0
  %"$$temp1320" = insertvalue %"any[]" %880, i64 2, 1
  store %"any[]" %"$$temp1320", ptr %indirectarg1321, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1315, ptr align 8 %indirectarg1316, ptr align 8 %indirectarg1317, i32 208, ptr align 8 %indirectarg1321) #6, !dbg !2282
  unreachable, !dbg !2282

panic1337:                                        ; preds = %or.rhs1334
  store i64 %sext1335, ptr %taddr1338, align 8
  %881 = insertvalue %any undef, ptr %taddr1338, 0
  %882 = insertvalue %any %881, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.26, i64 38 }, ptr %indirectarg1339, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg1340, align 8
  store %"char[]" { ptr @.func.101, i64 9 }, ptr %indirectarg1341, align 8
  store %any %882, ptr %varargslots1342, align 16
  %883 = insertvalue %"any[]" undef, ptr %varargslots1342, 0
  %"$$temp1343" = insertvalue %"any[]" %883, i64 1, 1
  store %"any[]" %"$$temp1343", ptr %indirectarg1344, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1339, ptr align 8 %indirectarg1340, ptr align 8 %indirectarg1341, i32 221, ptr align 8 %indirectarg1344) #6, !dbg !2296
  unreachable, !dbg !2296

panic1347:                                        ; preds = %checkok1345
  store i64 128, ptr %taddr1348, align 8
  %884 = insertvalue %any undef, ptr %taddr1348, 0
  %885 = insertvalue %any %884, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1335, ptr %taddr1349, align 8
  %886 = insertvalue %any undef, ptr %taddr1349, 0
  %887 = insertvalue %any %886, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg1350, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg1351, align 8
  store %"char[]" { ptr @.func.101, i64 9 }, ptr %indirectarg1352, align 8
  store %any %885, ptr %varargslots1353, align 16
  %ptradd1354 = getelementptr inbounds i8, ptr %varargslots1353, i64 16
  store %any %887, ptr %ptradd1354, align 16
  %888 = insertvalue %"any[]" undef, ptr %varargslots1353, 0
  %"$$temp1355" = insertvalue %"any[]" %888, i64 2, 1
  store %"any[]" %"$$temp1355", ptr %indirectarg1356, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1350, ptr align 8 %indirectarg1351, ptr align 8 %indirectarg1352, i32 221, ptr align 8 %indirectarg1356) #6, !dbg !2296
  unreachable, !dbg !2296

panic1361:                                        ; preds = %checkok1357
  store i64 %sext1359, ptr %taddr1362, align 8
  %889 = insertvalue %any undef, ptr %taddr1362, 0
  %890 = insertvalue %any %889, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.26, i64 38 }, ptr %indirectarg1363, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg1364, align 8
  store %"char[]" { ptr @.func.101, i64 9 }, ptr %indirectarg1365, align 8
  store %any %890, ptr %varargslots1366, align 16
  %891 = insertvalue %"any[]" undef, ptr %varargslots1366, 0
  %"$$temp1367" = insertvalue %"any[]" %891, i64 1, 1
  store %"any[]" %"$$temp1367", ptr %indirectarg1368, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1363, ptr align 8 %indirectarg1364, ptr align 8 %indirectarg1365, i32 221, ptr align 8 %indirectarg1368) #6, !dbg !2296
  unreachable, !dbg !2296

panic1371:                                        ; preds = %checkok1369
  store i64 2, ptr %taddr1372, align 8
  %892 = insertvalue %any undef, ptr %taddr1372, 0
  %893 = insertvalue %any %892, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1359, ptr %taddr1373, align 8
  %894 = insertvalue %any undef, ptr %taddr1373, 0
  %895 = insertvalue %any %894, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg1374, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg1375, align 8
  store %"char[]" { ptr @.func.101, i64 9 }, ptr %indirectarg1376, align 8
  store %any %893, ptr %varargslots1377, align 16
  %ptradd1378 = getelementptr inbounds i8, ptr %varargslots1377, i64 16
  store %any %895, ptr %ptradd1378, align 16
  %896 = insertvalue %"any[]" undef, ptr %varargslots1377, 0
  %"$$temp1379" = insertvalue %"any[]" %896, i64 2, 1
  store %"any[]" %"$$temp1379", ptr %indirectarg1380, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1374, ptr align 8 %indirectarg1375, ptr align 8 %indirectarg1376, i32 221, ptr align 8 %indirectarg1380) #6, !dbg !2296
  unreachable, !dbg !2296

panic1392:                                        ; preds = %if.exit1387
  store i64 %sext1390, ptr %taddr1393, align 8
  %897 = insertvalue %any undef, ptr %taddr1393, 0
  %898 = insertvalue %any %897, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.26, i64 38 }, ptr %indirectarg1394, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg1395, align 8
  store %"char[]" { ptr @.func.101, i64 9 }, ptr %indirectarg1396, align 8
  store %any %898, ptr %varargslots1397, align 16
  %899 = insertvalue %"any[]" undef, ptr %varargslots1397, 0
  %"$$temp1398" = insertvalue %"any[]" %899, i64 1, 1
  store %"any[]" %"$$temp1398", ptr %indirectarg1399, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1394, ptr align 8 %indirectarg1395, ptr align 8 %indirectarg1396, i32 226, ptr align 8 %indirectarg1399) #6, !dbg !2300
  unreachable, !dbg !2300

panic1402:                                        ; preds = %checkok1400
  store i64 128, ptr %taddr1403, align 8
  %900 = insertvalue %any undef, ptr %taddr1403, 0
  %901 = insertvalue %any %900, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1390, ptr %taddr1404, align 8
  %902 = insertvalue %any undef, ptr %taddr1404, 0
  %903 = insertvalue %any %902, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg1405, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg1406, align 8
  store %"char[]" { ptr @.func.101, i64 9 }, ptr %indirectarg1407, align 8
  store %any %901, ptr %varargslots1408, align 16
  %ptradd1409 = getelementptr inbounds i8, ptr %varargslots1408, i64 16
  store %any %903, ptr %ptradd1409, align 16
  %904 = insertvalue %"any[]" undef, ptr %varargslots1408, 0
  %"$$temp1410" = insertvalue %"any[]" %904, i64 2, 1
  store %"any[]" %"$$temp1410", ptr %indirectarg1411, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1405, ptr align 8 %indirectarg1406, ptr align 8 %indirectarg1407, i32 226, ptr align 8 %indirectarg1411) #6, !dbg !2300
  unreachable, !dbg !2300

panic1416:                                        ; preds = %checkok1412
  store i64 %sext1414, ptr %taddr1417, align 8
  %905 = insertvalue %any undef, ptr %taddr1417, 0
  %906 = insertvalue %any %905, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.26, i64 38 }, ptr %indirectarg1418, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg1419, align 8
  store %"char[]" { ptr @.func.101, i64 9 }, ptr %indirectarg1420, align 8
  store %any %906, ptr %varargslots1421, align 16
  %907 = insertvalue %"any[]" undef, ptr %varargslots1421, 0
  %"$$temp1422" = insertvalue %"any[]" %907, i64 1, 1
  store %"any[]" %"$$temp1422", ptr %indirectarg1423, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1418, ptr align 8 %indirectarg1419, ptr align 8 %indirectarg1420, i32 226, ptr align 8 %indirectarg1423) #6, !dbg !2300
  unreachable, !dbg !2300

panic1426:                                        ; preds = %checkok1424
  store i64 2, ptr %taddr1427, align 8
  %908 = insertvalue %any undef, ptr %taddr1427, 0
  %909 = insertvalue %any %908, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1414, ptr %taddr1428, align 8
  %910 = insertvalue %any undef, ptr %taddr1428, 0
  %911 = insertvalue %any %910, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg1429, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg1430, align 8
  store %"char[]" { ptr @.func.101, i64 9 }, ptr %indirectarg1431, align 8
  store %any %909, ptr %varargslots1432, align 16
  %ptradd1433 = getelementptr inbounds i8, ptr %varargslots1432, i64 16
  store %any %911, ptr %ptradd1433, align 16
  %912 = insertvalue %"any[]" undef, ptr %varargslots1432, 0
  %"$$temp1434" = insertvalue %"any[]" %912, i64 2, 1
  store %"any[]" %"$$temp1434", ptr %indirectarg1435, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1429, ptr align 8 %indirectarg1430, ptr align 8 %indirectarg1431, i32 226, ptr align 8 %indirectarg1435) #6, !dbg !2300
  unreachable, !dbg !2300

panic1460:                                        ; preds = %loop.body1456
  store i64 %sext1458, ptr %taddr1461, align 8
  %913 = insertvalue %any undef, ptr %taddr1461, 0
  %914 = insertvalue %any %913, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.26, i64 38 }, ptr %indirectarg1462, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg1463, align 8
  store %"char[]" { ptr @.func.101, i64 9 }, ptr %indirectarg1464, align 8
  store %any %914, ptr %varargslots1465, align 16
  %915 = insertvalue %"any[]" undef, ptr %varargslots1465, 0
  %"$$temp1466" = insertvalue %"any[]" %915, i64 1, 1
  store %"any[]" %"$$temp1466", ptr %indirectarg1467, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1462, ptr align 8 %indirectarg1463, ptr align 8 %indirectarg1464, i32 233, ptr align 8 %indirectarg1467) #6, !dbg !2308
  unreachable, !dbg !2308

panic1470:                                        ; preds = %checkok1468
  store i64 128, ptr %taddr1471, align 8
  %916 = insertvalue %any undef, ptr %taddr1471, 0
  %917 = insertvalue %any %916, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1458, ptr %taddr1472, align 8
  %918 = insertvalue %any undef, ptr %taddr1472, 0
  %919 = insertvalue %any %918, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg1473, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg1474, align 8
  store %"char[]" { ptr @.func.101, i64 9 }, ptr %indirectarg1475, align 8
  store %any %917, ptr %varargslots1476, align 16
  %ptradd1477 = getelementptr inbounds i8, ptr %varargslots1476, i64 16
  store %any %919, ptr %ptradd1477, align 16
  %920 = insertvalue %"any[]" undef, ptr %varargslots1476, 0
  %"$$temp1478" = insertvalue %"any[]" %920, i64 2, 1
  store %"any[]" %"$$temp1478", ptr %indirectarg1479, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1473, ptr align 8 %indirectarg1474, ptr align 8 %indirectarg1475, i32 233, ptr align 8 %indirectarg1479) #6, !dbg !2308
  unreachable, !dbg !2308

panic1482:                                        ; preds = %checkok1480
  store i32 %486, ptr %taddr1483, align 4
  %921 = insertvalue %any undef, ptr %taddr1483, 0
  %922 = insertvalue %any %921, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  store %"char[]" { ptr @.panic_msg.112, i64 35 }, ptr %indirectarg1484, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg1485, align 8
  store %"char[]" { ptr @.func.101, i64 9 }, ptr %indirectarg1486, align 8
  store %any %922, ptr %varargslots1487, align 16
  %923 = insertvalue %"any[]" undef, ptr %varargslots1487, 0
  %"$$temp1488" = insertvalue %"any[]" %923, i64 1, 1
  store %"any[]" %"$$temp1488", ptr %indirectarg1489, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1484, ptr align 8 %indirectarg1485, ptr align 8 %indirectarg1486, i32 233, ptr align 8 %indirectarg1489) #6, !dbg !2308
  unreachable, !dbg !2308

panic1492:                                        ; preds = %checkok1490
  store i32 %486, ptr %taddr1493, align 4
  %924 = insertvalue %any undef, ptr %taddr1493, 0
  %925 = insertvalue %any %924, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  store %"char[]" { ptr @.panic_msg.112, i64 35 }, ptr %indirectarg1494, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg1495, align 8
  store %"char[]" { ptr @.func.101, i64 9 }, ptr %indirectarg1496, align 8
  store %any %925, ptr %varargslots1497, align 16
  %926 = insertvalue %"any[]" undef, ptr %varargslots1497, 0
  %"$$temp1498" = insertvalue %"any[]" %926, i64 1, 1
  store %"any[]" %"$$temp1498", ptr %indirectarg1499, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1494, ptr align 8 %indirectarg1495, ptr align 8 %indirectarg1496, i32 233, ptr align 8 %indirectarg1499) #6, !dbg !2308
  unreachable, !dbg !2308

panic1506:                                        ; preds = %checkok1500
  store i64 %sext1504, ptr %taddr1507, align 8
  %927 = insertvalue %any undef, ptr %taddr1507, 0
  %928 = insertvalue %any %927, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.26, i64 38 }, ptr %indirectarg1508, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg1509, align 8
  store %"char[]" { ptr @.func.101, i64 9 }, ptr %indirectarg1510, align 8
  store %any %928, ptr %varargslots1511, align 16
  %929 = insertvalue %"any[]" undef, ptr %varargslots1511, 0
  %"$$temp1512" = insertvalue %"any[]" %929, i64 1, 1
  store %"any[]" %"$$temp1512", ptr %indirectarg1513, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1508, ptr align 8 %indirectarg1509, ptr align 8 %indirectarg1510, i32 234, ptr align 8 %indirectarg1513) #6, !dbg !2309
  unreachable, !dbg !2309

panic1516:                                        ; preds = %checkok1514
  store i64 128, ptr %taddr1517, align 8
  %930 = insertvalue %any undef, ptr %taddr1517, 0
  %931 = insertvalue %any %930, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1504, ptr %taddr1518, align 8
  %932 = insertvalue %any undef, ptr %taddr1518, 0
  %933 = insertvalue %any %932, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg1519, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg1520, align 8
  store %"char[]" { ptr @.func.101, i64 9 }, ptr %indirectarg1521, align 8
  store %any %931, ptr %varargslots1522, align 16
  %ptradd1523 = getelementptr inbounds i8, ptr %varargslots1522, i64 16
  store %any %933, ptr %ptradd1523, align 16
  %934 = insertvalue %"any[]" undef, ptr %varargslots1522, 0
  %"$$temp1524" = insertvalue %"any[]" %934, i64 2, 1
  store %"any[]" %"$$temp1524", ptr %indirectarg1525, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1519, ptr align 8 %indirectarg1520, ptr align 8 %indirectarg1521, i32 234, ptr align 8 %indirectarg1525) #6, !dbg !2309
  unreachable, !dbg !2309

panic1529:                                        ; preds = %checkok1526
  store i32 %494, ptr %taddr1530, align 4
  %935 = insertvalue %any undef, ptr %taddr1530, 0
  %936 = insertvalue %any %935, i64 ptrtoint (ptr @"$ct.uint" to i64), 1
  store %"char[]" { ptr @.panic_msg.112, i64 35 }, ptr %indirectarg1531, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg1532, align 8
  store %"char[]" { ptr @.func.101, i64 9 }, ptr %indirectarg1533, align 8
  store %any %936, ptr %varargslots1534, align 16
  %937 = insertvalue %"any[]" undef, ptr %varargslots1534, 0
  %"$$temp1535" = insertvalue %"any[]" %937, i64 1, 1
  store %"any[]" %"$$temp1535", ptr %indirectarg1536, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1531, ptr align 8 %indirectarg1532, ptr align 8 %indirectarg1533, i32 234, ptr align 8 %indirectarg1536) #6, !dbg !2309
  unreachable, !dbg !2309

panic1542:                                        ; preds = %checkok1537
  store i64 %sext1540, ptr %taddr1543, align 8
  %938 = insertvalue %any undef, ptr %taddr1543, 0
  %939 = insertvalue %any %938, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.26, i64 38 }, ptr %indirectarg1544, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg1545, align 8
  store %"char[]" { ptr @.func.101, i64 9 }, ptr %indirectarg1546, align 8
  store %any %939, ptr %varargslots1547, align 16
  %940 = insertvalue %"any[]" undef, ptr %varargslots1547, 0
  %"$$temp1548" = insertvalue %"any[]" %940, i64 1, 1
  store %"any[]" %"$$temp1548", ptr %indirectarg1549, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1544, ptr align 8 %indirectarg1545, ptr align 8 %indirectarg1546, i32 234, ptr align 8 %indirectarg1549) #6, !dbg !2309
  unreachable, !dbg !2309

panic1552:                                        ; preds = %checkok1550
  store i64 128, ptr %taddr1553, align 8
  %941 = insertvalue %any undef, ptr %taddr1553, 0
  %942 = insertvalue %any %941, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1540, ptr %taddr1554, align 8
  %943 = insertvalue %any undef, ptr %taddr1554, 0
  %944 = insertvalue %any %943, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg1555, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg1556, align 8
  store %"char[]" { ptr @.func.101, i64 9 }, ptr %indirectarg1557, align 8
  store %any %942, ptr %varargslots1558, align 16
  %ptradd1559 = getelementptr inbounds i8, ptr %varargslots1558, i64 16
  store %any %944, ptr %ptradd1559, align 16
  %945 = insertvalue %"any[]" undef, ptr %varargslots1558, 0
  %"$$temp1560" = insertvalue %"any[]" %945, i64 2, 1
  store %"any[]" %"$$temp1560", ptr %indirectarg1561, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1555, ptr align 8 %indirectarg1556, ptr align 8 %indirectarg1557, i32 234, ptr align 8 %indirectarg1561) #6, !dbg !2309
  unreachable, !dbg !2309

panic1565:                                        ; preds = %checkok1562
  store i32 %501, ptr %taddr1566, align 4
  %946 = insertvalue %any undef, ptr %taddr1566, 0
  %947 = insertvalue %any %946, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  store %"char[]" { ptr @.panic_msg.112, i64 35 }, ptr %indirectarg1567, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg1568, align 8
  store %"char[]" { ptr @.func.101, i64 9 }, ptr %indirectarg1569, align 8
  store %any %947, ptr %varargslots1570, align 16
  %948 = insertvalue %"any[]" undef, ptr %varargslots1570, 0
  %"$$temp1571" = insertvalue %"any[]" %948, i64 1, 1
  store %"any[]" %"$$temp1571", ptr %indirectarg1572, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1567, ptr align 8 %indirectarg1568, ptr align 8 %indirectarg1569, i32 235, ptr align 8 %indirectarg1572) #6, !dbg !2310
  unreachable, !dbg !2310

panic1575:                                        ; preds = %checkok1573
  store i32 %501, ptr %taddr1576, align 4
  %949 = insertvalue %any undef, ptr %taddr1576, 0
  %950 = insertvalue %any %949, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  store %"char[]" { ptr @.panic_msg.112, i64 35 }, ptr %indirectarg1577, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg1578, align 8
  store %"char[]" { ptr @.func.101, i64 9 }, ptr %indirectarg1579, align 8
  store %any %950, ptr %varargslots1580, align 16
  %951 = insertvalue %"any[]" undef, ptr %varargslots1580, 0
  %"$$temp1581" = insertvalue %"any[]" %951, i64 1, 1
  store %"any[]" %"$$temp1581", ptr %indirectarg1582, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1577, ptr align 8 %indirectarg1578, ptr align 8 %indirectarg1579, i32 235, ptr align 8 %indirectarg1582) #6, !dbg !2310
  unreachable, !dbg !2310

panic1589:                                        ; preds = %and.rhs1586
  store i64 %sext1587, ptr %taddr1590, align 8
  %952 = insertvalue %any undef, ptr %taddr1590, 0
  %953 = insertvalue %any %952, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.26, i64 38 }, ptr %indirectarg1591, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg1592, align 8
  store %"char[]" { ptr @.func.101, i64 9 }, ptr %indirectarg1593, align 8
  store %any %953, ptr %varargslots1594, align 16
  %954 = insertvalue %"any[]" undef, ptr %varargslots1594, 0
  %"$$temp1595" = insertvalue %"any[]" %954, i64 1, 1
  store %"any[]" %"$$temp1595", ptr %indirectarg1596, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1591, ptr align 8 %indirectarg1592, ptr align 8 %indirectarg1593, i32 236, ptr align 8 %indirectarg1596) #6, !dbg !2311
  unreachable, !dbg !2311

panic1599:                                        ; preds = %checkok1597
  store i64 128, ptr %taddr1600, align 8
  %955 = insertvalue %any undef, ptr %taddr1600, 0
  %956 = insertvalue %any %955, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1587, ptr %taddr1601, align 8
  %957 = insertvalue %any undef, ptr %taddr1601, 0
  %958 = insertvalue %any %957, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg1602, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg1603, align 8
  store %"char[]" { ptr @.func.101, i64 9 }, ptr %indirectarg1604, align 8
  store %any %956, ptr %varargslots1605, align 16
  %ptradd1606 = getelementptr inbounds i8, ptr %varargslots1605, i64 16
  store %any %958, ptr %ptradd1606, align 16
  %959 = insertvalue %"any[]" undef, ptr %varargslots1605, 0
  %"$$temp1607" = insertvalue %"any[]" %959, i64 2, 1
  store %"any[]" %"$$temp1607", ptr %indirectarg1608, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1602, ptr align 8 %indirectarg1603, ptr align 8 %indirectarg1604, i32 236, ptr align 8 %indirectarg1608) #6, !dbg !2311
  unreachable, !dbg !2311

panic1631:                                        ; preds = %if.then1628
  store i64 %sext1629, ptr %taddr1632, align 8
  %960 = insertvalue %any undef, ptr %taddr1632, 0
  %961 = insertvalue %any %960, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.26, i64 38 }, ptr %indirectarg1633, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg1634, align 8
  store %"char[]" { ptr @.func.101, i64 9 }, ptr %indirectarg1635, align 8
  store %any %961, ptr %varargslots1636, align 16
  %962 = insertvalue %"any[]" undef, ptr %varargslots1636, 0
  %"$$temp1637" = insertvalue %"any[]" %962, i64 1, 1
  store %"any[]" %"$$temp1637", ptr %indirectarg1638, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1633, ptr align 8 %indirectarg1634, ptr align 8 %indirectarg1635, i32 247, ptr align 8 %indirectarg1638) #6, !dbg !2319
  unreachable, !dbg !2319

panic1641:                                        ; preds = %checkok1639
  store i64 128, ptr %taddr1642, align 8
  %963 = insertvalue %any undef, ptr %taddr1642, 0
  %964 = insertvalue %any %963, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1629, ptr %taddr1643, align 8
  %965 = insertvalue %any undef, ptr %taddr1643, 0
  %966 = insertvalue %any %965, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg1644, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg1645, align 8
  store %"char[]" { ptr @.func.101, i64 9 }, ptr %indirectarg1646, align 8
  store %any %964, ptr %varargslots1647, align 16
  %ptradd1648 = getelementptr inbounds i8, ptr %varargslots1647, i64 16
  store %any %966, ptr %ptradd1648, align 16
  %967 = insertvalue %"any[]" undef, ptr %varargslots1647, 0
  %"$$temp1649" = insertvalue %"any[]" %967, i64 2, 1
  store %"any[]" %"$$temp1649", ptr %indirectarg1650, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1644, ptr align 8 %indirectarg1645, ptr align 8 %indirectarg1646, i32 247, ptr align 8 %indirectarg1650) #6, !dbg !2319
  unreachable, !dbg !2319

panic1660:                                        ; preds = %if.else1655
  store i64 %sext1658, ptr %taddr1661, align 8
  %968 = insertvalue %any undef, ptr %taddr1661, 0
  %969 = insertvalue %any %968, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.26, i64 38 }, ptr %indirectarg1662, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg1663, align 8
  store %"char[]" { ptr @.func.101, i64 9 }, ptr %indirectarg1664, align 8
  store %any %969, ptr %varargslots1665, align 16
  %970 = insertvalue %"any[]" undef, ptr %varargslots1665, 0
  %"$$temp1666" = insertvalue %"any[]" %970, i64 1, 1
  store %"any[]" %"$$temp1666", ptr %indirectarg1667, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1662, ptr align 8 %indirectarg1663, ptr align 8 %indirectarg1664, i32 252, ptr align 8 %indirectarg1667) #6, !dbg !2322
  unreachable, !dbg !2322

panic1670:                                        ; preds = %checkok1668
  store i64 128, ptr %taddr1671, align 8
  %971 = insertvalue %any undef, ptr %taddr1671, 0
  %972 = insertvalue %any %971, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1658, ptr %taddr1672, align 8
  %973 = insertvalue %any undef, ptr %taddr1672, 0
  %974 = insertvalue %any %973, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg1673, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg1674, align 8
  store %"char[]" { ptr @.func.101, i64 9 }, ptr %indirectarg1675, align 8
  store %any %972, ptr %varargslots1676, align 16
  %ptradd1677 = getelementptr inbounds i8, ptr %varargslots1676, i64 16
  store %any %974, ptr %ptradd1677, align 16
  %975 = insertvalue %"any[]" undef, ptr %varargslots1676, 0
  %"$$temp1678" = insertvalue %"any[]" %975, i64 2, 1
  store %"any[]" %"$$temp1678", ptr %indirectarg1679, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1673, ptr align 8 %indirectarg1674, ptr align 8 %indirectarg1675, i32 252, ptr align 8 %indirectarg1679) #6, !dbg !2322
  unreachable, !dbg !2322

panic1700:                                        ; preds = %if.then1694
  store i64 %sext1698, ptr %taddr1701, align 8
  %976 = insertvalue %any undef, ptr %taddr1701, 0
  %977 = insertvalue %any %976, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.26, i64 38 }, ptr %indirectarg1702, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg1703, align 8
  store %"char[]" { ptr @.func.101, i64 9 }, ptr %indirectarg1704, align 8
  store %any %977, ptr %varargslots1705, align 16
  %978 = insertvalue %"any[]" undef, ptr %varargslots1705, 0
  %"$$temp1706" = insertvalue %"any[]" %978, i64 1, 1
  store %"any[]" %"$$temp1706", ptr %indirectarg1707, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1702, ptr align 8 %indirectarg1703, ptr align 8 %indirectarg1704, i32 262, ptr align 8 %indirectarg1707) #6, !dbg !2330
  unreachable, !dbg !2330

panic1710:                                        ; preds = %checkok1708
  store i64 128, ptr %taddr1711, align 8
  %979 = insertvalue %any undef, ptr %taddr1711, 0
  %980 = insertvalue %any %979, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1698, ptr %taddr1712, align 8
  %981 = insertvalue %any undef, ptr %taddr1712, 0
  %982 = insertvalue %any %981, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg1713, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg1714, align 8
  store %"char[]" { ptr @.func.101, i64 9 }, ptr %indirectarg1715, align 8
  store %any %980, ptr %varargslots1716, align 16
  %ptradd1717 = getelementptr inbounds i8, ptr %varargslots1716, i64 16
  store %any %982, ptr %ptradd1717, align 16
  %983 = insertvalue %"any[]" undef, ptr %varargslots1716, 0
  %"$$temp1718" = insertvalue %"any[]" %983, i64 2, 1
  store %"any[]" %"$$temp1718", ptr %indirectarg1719, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1713, ptr align 8 %indirectarg1714, ptr align 8 %indirectarg1715, i32 262, ptr align 8 %indirectarg1719) #6, !dbg !2330
  unreachable, !dbg !2330

panic1728:                                        ; preds = %if.exit1722
  store i64 %sext1726, ptr %taddr1729, align 8
  %984 = insertvalue %any undef, ptr %taddr1729, 0
  %985 = insertvalue %any %984, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.26, i64 38 }, ptr %indirectarg1730, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg1731, align 8
  store %"char[]" { ptr @.func.101, i64 9 }, ptr %indirectarg1732, align 8
  store %any %985, ptr %varargslots1733, align 16
  %986 = insertvalue %"any[]" undef, ptr %varargslots1733, 0
  %"$$temp1734" = insertvalue %"any[]" %986, i64 1, 1
  store %"any[]" %"$$temp1734", ptr %indirectarg1735, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1730, ptr align 8 %indirectarg1731, ptr align 8 %indirectarg1732, i32 263, ptr align 8 %indirectarg1735) #6, !dbg !2332
  unreachable, !dbg !2332

panic1738:                                        ; preds = %checkok1736
  store i64 128, ptr %taddr1739, align 8
  %987 = insertvalue %any undef, ptr %taddr1739, 0
  %988 = insertvalue %any %987, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1726, ptr %taddr1740, align 8
  %989 = insertvalue %any undef, ptr %taddr1740, 0
  %990 = insertvalue %any %989, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg1741, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg1742, align 8
  store %"char[]" { ptr @.func.101, i64 9 }, ptr %indirectarg1743, align 8
  store %any %988, ptr %varargslots1744, align 16
  %ptradd1745 = getelementptr inbounds i8, ptr %varargslots1744, i64 16
  store %any %990, ptr %ptradd1745, align 16
  %991 = insertvalue %"any[]" undef, ptr %varargslots1744, 0
  %"$$temp1746" = insertvalue %"any[]" %991, i64 2, 1
  store %"any[]" %"$$temp1746", ptr %indirectarg1747, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1741, ptr align 8 %indirectarg1742, ptr align 8 %indirectarg1743, i32 263, ptr align 8 %indirectarg1747) #6, !dbg !2332
  unreachable, !dbg !2332

panic1785:                                        ; preds = %if.then1771
  store %"char[]" { ptr @.panic_msg.113, i64 10 }, ptr %indirectarg1786, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg1787, align 8
  store %"char[]" { ptr @.func.101, i64 9 }, ptr %indirectarg1788, align 8
  %992 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %992(ptr align 8 %indirectarg1786, ptr align 8 %indirectarg1787, ptr align 8 %indirectarg1788, i32 284) #6, !dbg !2356
  unreachable, !dbg !2356

panic1801:                                        ; preds = %if.then1796
  store i64 %sext1799, ptr %taddr1802, align 8
  %993 = insertvalue %any undef, ptr %taddr1802, 0
  %994 = insertvalue %any %993, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.26, i64 38 }, ptr %indirectarg1803, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg1804, align 8
  store %"char[]" { ptr @.func.101, i64 9 }, ptr %indirectarg1805, align 8
  store %any %994, ptr %varargslots1806, align 16
  %995 = insertvalue %"any[]" undef, ptr %varargslots1806, 0
  %"$$temp1807" = insertvalue %"any[]" %995, i64 1, 1
  store %"any[]" %"$$temp1807", ptr %indirectarg1808, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1803, ptr align 8 %indirectarg1804, ptr align 8 %indirectarg1805, i32 292, ptr align 8 %indirectarg1808) #6, !dbg !2364
  unreachable, !dbg !2364

panic1811:                                        ; preds = %checkok1809
  store i64 128, ptr %taddr1812, align 8
  %996 = insertvalue %any undef, ptr %taddr1812, 0
  %997 = insertvalue %any %996, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1799, ptr %taddr1813, align 8
  %998 = insertvalue %any undef, ptr %taddr1813, 0
  %999 = insertvalue %any %998, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg1814, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg1815, align 8
  store %"char[]" { ptr @.func.101, i64 9 }, ptr %indirectarg1816, align 8
  store %any %997, ptr %varargslots1817, align 16
  %ptradd1818 = getelementptr inbounds i8, ptr %varargslots1817, i64 16
  store %any %999, ptr %ptradd1818, align 16
  %1000 = insertvalue %"any[]" undef, ptr %varargslots1817, 0
  %"$$temp1819" = insertvalue %"any[]" %1000, i64 2, 1
  store %"any[]" %"$$temp1819", ptr %indirectarg1820, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1814, ptr align 8 %indirectarg1815, ptr align 8 %indirectarg1816, i32 292, ptr align 8 %indirectarg1820) #6, !dbg !2364
  unreachable, !dbg !2364
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.core.String.to_float(ptr %0, ptr align 8 %1) #0 comdat !dbg !2395 {
entry:
  %reterr = alloca i64, align 8
  %chars = alloca %"char[]", align 8
  %blockret = alloca float, align 4
  %sign = alloca i32, align 4
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr5 = alloca i64, align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg7 = alloca %"char[]", align 8
  %indirectarg8 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg10 = alloca %"any[]", align 8
  %switch = alloca i8, align 1
  %taddr13 = alloca i64, align 8
  %taddr14 = alloca i64, align 8
  %indirectarg15 = alloca %"char[]", align 8
  %indirectarg16 = alloca %"char[]", align 8
  %indirectarg17 = alloca %"char[]", align 8
  %varargslots18 = alloca [2 x %any], align 16
  %indirectarg21 = alloca %"any[]", align 8
  %indirectarg25 = alloca %"char[]", align 8
  %indirectarg26 = alloca %"char[]", align 8
  %cmp.idx = alloca i64, align 8
  %cmp.idx36 = alloca i64, align 8
  %cmp.idx49 = alloca i64, align 8
  %cmp.idx61 = alloca i64, align 8
  %taddr79 = alloca i64, align 8
  %taddr80 = alloca i64, align 8
  %indirectarg81 = alloca %"char[]", align 8
  %indirectarg82 = alloca %"char[]", align 8
  %indirectarg83 = alloca %"char[]", align 8
  %varargslots84 = alloca [2 x %any], align 16
  %indirectarg87 = alloca %"any[]", align 8
  %taddr95 = alloca i64, align 8
  %taddr96 = alloca i64, align 8
  %indirectarg97 = alloca %"char[]", align 8
  %indirectarg98 = alloca %"char[]", align 8
  %indirectarg99 = alloca %"char[]", align 8
  %varargslots100 = alloca [2 x %any], align 16
  %indirectarg103 = alloca %"any[]", align 8
  %taddr112 = alloca i64, align 8
  %taddr113 = alloca i64, align 8
  %indirectarg114 = alloca %"char[]", align 8
  %indirectarg115 = alloca %"char[]", align 8
  %indirectarg116 = alloca %"char[]", align 8
  %varargslots117 = alloca [2 x %any], align 16
  %indirectarg120 = alloca %"any[]", align 8
  %chars124 = alloca %"char[]", align 8
  %sign125 = alloca i32, align 4
  %blockret126 = alloca double, align 8
  %scale = alloca double, align 8
  %x = alloca i32, align 4
  %rp = alloca i64, align 8
  %dc = alloca i64, align 8
  %c = alloca i8, align 1
  %got_rad = alloca i8, align 1
  %got_digit = alloca i8, align 1
  %got_tail = alloca i8, align 1
  %len = alloca i64, align 8
  %last_char = alloca i64, align 8
  %index = alloca i64, align 8
  %y = alloca double, align 8
  %taddr131 = alloca i64, align 8
  %taddr132 = alloca i64, align 8
  %indirectarg133 = alloca %"char[]", align 8
  %indirectarg134 = alloca %"char[]", align 8
  %indirectarg135 = alloca %"char[]", align 8
  %varargslots136 = alloca [2 x %any], align 16
  %indirectarg139 = alloca %"any[]", align 8
  %taddr160 = alloca i64, align 8
  %taddr161 = alloca i64, align 8
  %indirectarg162 = alloca %"char[]", align 8
  %indirectarg163 = alloca %"char[]", align 8
  %indirectarg164 = alloca %"char[]", align 8
  %varargslots165 = alloca [2 x %any], align 16
  %indirectarg168 = alloca %"any[]", align 8
  %taddr183 = alloca i64, align 8
  %taddr184 = alloca i64, align 8
  %indirectarg185 = alloca %"char[]", align 8
  %indirectarg186 = alloca %"char[]", align 8
  %indirectarg187 = alloca %"char[]", align 8
  %varargslots188 = alloca [2 x %any], align 16
  %indirectarg191 = alloca %"any[]", align 8
  %d = alloca i32, align 4
  %switch231 = alloca i8, align 1
  %taddr261 = alloca i64, align 8
  %taddr262 = alloca i64, align 8
  %indirectarg263 = alloca %"char[]", align 8
  %indirectarg264 = alloca %"char[]", align 8
  %indirectarg265 = alloca %"char[]", align 8
  %varargslots266 = alloca [2 x %any], align 16
  %indirectarg269 = alloca %"any[]", align 8
  %e2 = alloca i64, align 8
  %e2val = alloca i64, align 8
  %taddr292 = alloca i64, align 8
  %taddr293 = alloca i64, align 8
  %indirectarg294 = alloca %"char[]", align 8
  %indirectarg295 = alloca %"char[]", align 8
  %indirectarg296 = alloca %"char[]", align 8
  %varargslots297 = alloca [2 x %any], align 16
  %indirectarg300 = alloca %"any[]", align 8
  %taddr303 = alloca i64, align 8
  %indirectarg304 = alloca %"char[]", align 8
  %indirectarg305 = alloca %"char[]", align 8
  %indirectarg306 = alloca %"char[]", align 8
  %varargslots307 = alloca [1 x %any], align 16
  %indirectarg309 = alloca %"any[]", align 8
  %retparam = alloca i64, align 8
  %indirectarg313 = alloca %"char[]", align 8
  %error_var = alloca i64, align 8
  %bits = alloca i32, align 4
  %bias = alloca double, align 8
  %x355 = alloca double, align 8
  %n = alloca i32, align 4
  %mag = alloca double, align 8
  %sgn = alloca double, align 8
  %x359 = alloca double, align 8
  %y360 = alloca double, align 8
  %x385 = alloca double, align 8
  %n387 = alloca i32, align 4
  %chars390 = alloca %"char[]", align 8
  %sign391 = alloca i32, align 4
  %blockret392 = alloca double, align 8
  %indirectarg395 = alloca %"char[]", align 8
  %indirectarg396 = alloca %"char[]", align 8
  %indirectarg397 = alloca %"char[]", align 8
  %x398 = alloca [128 x i32], align 16
  %emax = alloca i32, align 4
  %index399 = alloca i64, align 8
  %got_digit400 = alloca i8, align 1
  %taddr404 = alloca i64, align 8
  %taddr405 = alloca i64, align 8
  %indirectarg406 = alloca %"char[]", align 8
  %indirectarg407 = alloca %"char[]", align 8
  %indirectarg408 = alloca %"char[]", align 8
  %varargslots409 = alloca [2 x %any], align 16
  %indirectarg412 = alloca %"any[]", align 8
  %got_rad415 = alloca i8, align 1
  %lrp = alloca i64, align 8
  %dc416 = alloca i64, align 8
  %k = alloca i32, align 4
  %j = alloca i32, align 4
  %lnz = alloca i32, align 4
  %len417 = alloca i64, align 8
  %last_char419 = alloca i64, align 8
  %indirectarg423 = alloca %"char[]", align 8
  %indirectarg424 = alloca %"char[]", align 8
  %indirectarg425 = alloca %"char[]", align 8
  %c427 = alloca i8, align 1
  %taddr432 = alloca i64, align 8
  %taddr433 = alloca i64, align 8
  %indirectarg434 = alloca %"char[]", align 8
  %indirectarg435 = alloca %"char[]", align 8
  %indirectarg436 = alloca %"char[]", align 8
  %varargslots437 = alloca [2 x %any], align 16
  %indirectarg440 = alloca %"any[]", align 8
  %taddr467 = alloca i64, align 8
  %taddr468 = alloca i64, align 8
  %indirectarg469 = alloca %"char[]", align 8
  %indirectarg470 = alloca %"char[]", align 8
  %indirectarg471 = alloca %"char[]", align 8
  %varargslots472 = alloca [2 x %any], align 16
  %indirectarg475 = alloca %"any[]", align 8
  %taddr490 = alloca i64, align 8
  %taddr491 = alloca i64, align 8
  %indirectarg492 = alloca %"char[]", align 8
  %indirectarg493 = alloca %"char[]", align 8
  %indirectarg494 = alloca %"char[]", align 8
  %varargslots495 = alloca [2 x %any], align 16
  %indirectarg498 = alloca %"any[]", align 8
  %switch518 = alloca i8, align 1
  %taddr538 = alloca i64, align 8
  %indirectarg539 = alloca %"char[]", align 8
  %indirectarg540 = alloca %"char[]", align 8
  %indirectarg541 = alloca %"char[]", align 8
  %varargslots542 = alloca [1 x %any], align 16
  %indirectarg544 = alloca %"any[]", align 8
  %taddr548 = alloca i64, align 8
  %taddr549 = alloca i64, align 8
  %indirectarg550 = alloca %"char[]", align 8
  %indirectarg551 = alloca %"char[]", align 8
  %indirectarg552 = alloca %"char[]", align 8
  %varargslots553 = alloca [2 x %any], align 16
  %indirectarg556 = alloca %"any[]", align 8
  %taddr565 = alloca i64, align 8
  %indirectarg566 = alloca %"char[]", align 8
  %indirectarg567 = alloca %"char[]", align 8
  %indirectarg568 = alloca %"char[]", align 8
  %varargslots569 = alloca [1 x %any], align 16
  %indirectarg571 = alloca %"any[]", align 8
  %taddr575 = alloca i64, align 8
  %taddr576 = alloca i64, align 8
  %indirectarg577 = alloca %"char[]", align 8
  %indirectarg578 = alloca %"char[]", align 8
  %indirectarg579 = alloca %"char[]", align 8
  %varargslots580 = alloca [2 x %any], align 16
  %indirectarg583 = alloca %"any[]", align 8
  %taddr592 = alloca i64, align 8
  %indirectarg593 = alloca %"char[]", align 8
  %indirectarg594 = alloca %"char[]", align 8
  %indirectarg595 = alloca %"char[]", align 8
  %varargslots596 = alloca [1 x %any], align 16
  %indirectarg598 = alloca %"any[]", align 8
  %taddr602 = alloca i64, align 8
  %taddr603 = alloca i64, align 8
  %indirectarg604 = alloca %"char[]", align 8
  %indirectarg605 = alloca %"char[]", align 8
  %indirectarg606 = alloca %"char[]", align 8
  %varargslots607 = alloca [2 x %any], align 16
  %indirectarg610 = alloca %"any[]", align 8
  %indirectarg632 = alloca %"char[]", align 8
  %indirectarg633 = alloca %"char[]", align 8
  %indirectarg634 = alloca %"char[]", align 8
  %taddr640 = alloca i64, align 8
  %taddr641 = alloca i64, align 8
  %indirectarg642 = alloca %"char[]", align 8
  %indirectarg643 = alloca %"char[]", align 8
  %indirectarg644 = alloca %"char[]", align 8
  %varargslots645 = alloca [2 x %any], align 16
  %indirectarg648 = alloca %"any[]", align 8
  %e10 = alloca i64, align 8
  %taddr668 = alloca i64, align 8
  %taddr669 = alloca i64, align 8
  %indirectarg670 = alloca %"char[]", align 8
  %indirectarg671 = alloca %"char[]", align 8
  %indirectarg672 = alloca %"char[]", align 8
  %varargslots673 = alloca [2 x %any], align 16
  %indirectarg676 = alloca %"any[]", align 8
  %taddr680 = alloca i64, align 8
  %indirectarg681 = alloca %"char[]", align 8
  %indirectarg682 = alloca %"char[]", align 8
  %indirectarg683 = alloca %"char[]", align 8
  %varargslots684 = alloca [1 x %any], align 16
  %indirectarg686 = alloca %"any[]", align 8
  %retparam690 = alloca i64, align 8
  %indirectarg691 = alloca %"char[]", align 8
  %error_var695 = alloca i64, align 8
  %taddr741 = alloca i64, align 8
  %indirectarg742 = alloca %"char[]", align 8
  %indirectarg743 = alloca %"char[]", align 8
  %indirectarg744 = alloca %"char[]", align 8
  %varargslots745 = alloca [1 x %any], align 16
  %indirectarg747 = alloca %"any[]", align 8
  %taddr751 = alloca i64, align 8
  %taddr752 = alloca i64, align 8
  %indirectarg753 = alloca %"char[]", align 8
  %indirectarg754 = alloca %"char[]", align 8
  %indirectarg755 = alloca %"char[]", align 8
  %varargslots756 = alloca [2 x %any], align 16
  %indirectarg759 = alloca %"any[]", align 8
  %a = alloca i32, align 4
  %z = alloca i32, align 4
  %e2767 = alloca i32, align 4
  %rp768 = alloca i64, align 8
  %taddr793 = alloca i64, align 8
  %indirectarg794 = alloca %"char[]", align 8
  %indirectarg795 = alloca %"char[]", align 8
  %indirectarg796 = alloca %"char[]", align 8
  %varargslots797 = alloca [1 x %any], align 16
  %indirectarg799 = alloca %"any[]", align 8
  %taddr803 = alloca i64, align 8
  %taddr804 = alloca i64, align 8
  %indirectarg805 = alloca %"char[]", align 8
  %indirectarg806 = alloca %"char[]", align 8
  %indirectarg807 = alloca %"char[]", align 8
  %varargslots808 = alloca [2 x %any], align 16
  %indirectarg811 = alloca %"any[]", align 8
  %indirectarg816 = alloca %"char[]", align 8
  %indirectarg817 = alloca %"char[]", align 8
  %indirectarg818 = alloca %"char[]", align 8
  %bitlim = alloca i32, align 4
  %taddr829 = alloca i32, align 4
  %indirectarg830 = alloca %"char[]", align 8
  %indirectarg831 = alloca %"char[]", align 8
  %indirectarg832 = alloca %"char[]", align 8
  %varargslots833 = alloca [1 x %any], align 16
  %indirectarg835 = alloca %"any[]", align 8
  %taddr848 = alloca i64, align 8
  %indirectarg849 = alloca %"char[]", align 8
  %indirectarg850 = alloca %"char[]", align 8
  %indirectarg851 = alloca %"char[]", align 8
  %varargslots852 = alloca [1 x %any], align 16
  %indirectarg854 = alloca %"any[]", align 8
  %taddr858 = alloca i64, align 8
  %taddr859 = alloca i64, align 8
  %indirectarg860 = alloca %"char[]", align 8
  %indirectarg861 = alloca %"char[]", align 8
  %indirectarg862 = alloca %"char[]", align 8
  %varargslots863 = alloca [2 x %any], align 16
  %indirectarg866 = alloca %"any[]", align 8
  %rpm9 = alloca i64, align 8
  %p10 = alloca i32, align 4
  %taddr886 = alloca i64, align 8
  %indirectarg887 = alloca %"char[]", align 8
  %indirectarg888 = alloca %"char[]", align 8
  %indirectarg889 = alloca %"char[]", align 8
  %varargslots890 = alloca [1 x %any], align 16
  %indirectarg892 = alloca %"any[]", align 8
  %taddr896 = alloca i64, align 8
  %taddr897 = alloca i64, align 8
  %indirectarg898 = alloca %"char[]", align 8
  %indirectarg899 = alloca %"char[]", align 8
  %indirectarg900 = alloca %"char[]", align 8
  %varargslots901 = alloca [2 x %any], align 16
  %indirectarg904 = alloca %"any[]", align 8
  %carry = alloca i32, align 4
  %tmp = alloca i32, align 4
  %taddr913 = alloca i64, align 8
  %indirectarg914 = alloca %"char[]", align 8
  %indirectarg915 = alloca %"char[]", align 8
  %indirectarg916 = alloca %"char[]", align 8
  %varargslots917 = alloca [1 x %any], align 16
  %indirectarg919 = alloca %"any[]", align 8
  %taddr923 = alloca i64, align 8
  %taddr924 = alloca i64, align 8
  %indirectarg925 = alloca %"char[]", align 8
  %indirectarg926 = alloca %"char[]", align 8
  %indirectarg927 = alloca %"char[]", align 8
  %varargslots928 = alloca [2 x %any], align 16
  %indirectarg931 = alloca %"any[]", align 8
  %indirectarg936 = alloca %"char[]", align 8
  %indirectarg937 = alloca %"char[]", align 8
  %indirectarg938 = alloca %"char[]", align 8
  %taddr944 = alloca i64, align 8
  %indirectarg945 = alloca %"char[]", align 8
  %indirectarg946 = alloca %"char[]", align 8
  %indirectarg947 = alloca %"char[]", align 8
  %varargslots948 = alloca [1 x %any], align 16
  %indirectarg950 = alloca %"any[]", align 8
  %taddr954 = alloca i64, align 8
  %taddr955 = alloca i64, align 8
  %indirectarg956 = alloca %"char[]", align 8
  %indirectarg957 = alloca %"char[]", align 8
  %indirectarg958 = alloca %"char[]", align 8
  %varargslots959 = alloca [2 x %any], align 16
  %indirectarg962 = alloca %"any[]", align 8
  %indirectarg967 = alloca %"char[]", align 8
  %indirectarg968 = alloca %"char[]", align 8
  %indirectarg969 = alloca %"char[]", align 8
  %taddr975 = alloca i64, align 8
  %indirectarg976 = alloca %"char[]", align 8
  %indirectarg977 = alloca %"char[]", align 8
  %indirectarg978 = alloca %"char[]", align 8
  %varargslots979 = alloca [1 x %any], align 16
  %indirectarg981 = alloca %"any[]", align 8
  %taddr985 = alloca i64, align 8
  %taddr986 = alloca i64, align 8
  %indirectarg987 = alloca %"char[]", align 8
  %indirectarg988 = alloca %"char[]", align 8
  %indirectarg989 = alloca %"char[]", align 8
  %varargslots990 = alloca [2 x %any], align 16
  %indirectarg993 = alloca %"any[]", align 8
  %indirectarg998 = alloca %"char[]", align 8
  %indirectarg999 = alloca %"char[]", align 8
  %indirectarg1000 = alloca %"char[]", align 8
  %taddr1009 = alloca i64, align 8
  %indirectarg1010 = alloca %"char[]", align 8
  %indirectarg1011 = alloca %"char[]", align 8
  %indirectarg1012 = alloca %"char[]", align 8
  %varargslots1013 = alloca [1 x %any], align 16
  %indirectarg1015 = alloca %"any[]", align 8
  %taddr1019 = alloca i64, align 8
  %taddr1020 = alloca i64, align 8
  %indirectarg1021 = alloca %"char[]", align 8
  %indirectarg1022 = alloca %"char[]", align 8
  %indirectarg1023 = alloca %"char[]", align 8
  %varargslots1024 = alloca [2 x %any], align 16
  %indirectarg1027 = alloca %"any[]", align 8
  %taddr1046 = alloca i64, align 8
  %indirectarg1047 = alloca %"char[]", align 8
  %indirectarg1048 = alloca %"char[]", align 8
  %indirectarg1049 = alloca %"char[]", align 8
  %varargslots1050 = alloca [1 x %any], align 16
  %indirectarg1052 = alloca %"any[]", align 8
  %taddr1056 = alloca i64, align 8
  %taddr1057 = alloca i64, align 8
  %indirectarg1058 = alloca %"char[]", align 8
  %indirectarg1059 = alloca %"char[]", align 8
  %indirectarg1060 = alloca %"char[]", align 8
  %varargslots1061 = alloca [2 x %any], align 16
  %indirectarg1064 = alloca %"any[]", align 8
  %taddr1079 = alloca i64, align 8
  %indirectarg1080 = alloca %"char[]", align 8
  %indirectarg1081 = alloca %"char[]", align 8
  %indirectarg1082 = alloca %"char[]", align 8
  %varargslots1083 = alloca [1 x %any], align 16
  %indirectarg1085 = alloca %"any[]", align 8
  %taddr1089 = alloca i64, align 8
  %taddr1090 = alloca i64, align 8
  %indirectarg1091 = alloca %"char[]", align 8
  %indirectarg1092 = alloca %"char[]", align 8
  %indirectarg1093 = alloca %"char[]", align 8
  %varargslots1094 = alloca [2 x %any], align 16
  %indirectarg1097 = alloca %"any[]", align 8
  %carry1106 = alloca i32, align 4
  %tmp1111 = alloca i64, align 8
  %taddr1115 = alloca i64, align 8
  %indirectarg1116 = alloca %"char[]", align 8
  %indirectarg1117 = alloca %"char[]", align 8
  %indirectarg1118 = alloca %"char[]", align 8
  %varargslots1119 = alloca [1 x %any], align 16
  %indirectarg1121 = alloca %"any[]", align 8
  %taddr1125 = alloca i64, align 8
  %taddr1126 = alloca i64, align 8
  %indirectarg1127 = alloca %"char[]", align 8
  %indirectarg1128 = alloca %"char[]", align 8
  %indirectarg1129 = alloca %"char[]", align 8
  %varargslots1130 = alloca [2 x %any], align 16
  %indirectarg1133 = alloca %"any[]", align 8
  %taddr1148 = alloca i64, align 8
  %indirectarg1149 = alloca %"char[]", align 8
  %indirectarg1150 = alloca %"char[]", align 8
  %indirectarg1151 = alloca %"char[]", align 8
  %varargslots1152 = alloca [1 x %any], align 16
  %indirectarg1154 = alloca %"any[]", align 8
  %taddr1158 = alloca i64, align 8
  %taddr1159 = alloca i64, align 8
  %indirectarg1160 = alloca %"char[]", align 8
  %indirectarg1161 = alloca %"char[]", align 8
  %indirectarg1162 = alloca %"char[]", align 8
  %varargslots1163 = alloca [2 x %any], align 16
  %indirectarg1166 = alloca %"any[]", align 8
  %taddr1174 = alloca i64, align 8
  %indirectarg1175 = alloca %"char[]", align 8
  %indirectarg1176 = alloca %"char[]", align 8
  %indirectarg1177 = alloca %"char[]", align 8
  %varargslots1178 = alloca [1 x %any], align 16
  %indirectarg1180 = alloca %"any[]", align 8
  %taddr1184 = alloca i64, align 8
  %taddr1185 = alloca i64, align 8
  %indirectarg1186 = alloca %"char[]", align 8
  %indirectarg1187 = alloca %"char[]", align 8
  %indirectarg1188 = alloca %"char[]", align 8
  %varargslots1189 = alloca [2 x %any], align 16
  %indirectarg1192 = alloca %"any[]", align 8
  %taddr1207 = alloca i64, align 8
  %indirectarg1208 = alloca %"char[]", align 8
  %indirectarg1209 = alloca %"char[]", align 8
  %indirectarg1210 = alloca %"char[]", align 8
  %varargslots1211 = alloca [1 x %any], align 16
  %indirectarg1213 = alloca %"any[]", align 8
  %taddr1217 = alloca i64, align 8
  %taddr1218 = alloca i64, align 8
  %indirectarg1219 = alloca %"char[]", align 8
  %indirectarg1220 = alloca %"char[]", align 8
  %indirectarg1221 = alloca %"char[]", align 8
  %varargslots1222 = alloca [2 x %any], align 16
  %indirectarg1225 = alloca %"any[]", align 8
  %taddr1253 = alloca i64, align 8
  %indirectarg1254 = alloca %"char[]", align 8
  %indirectarg1255 = alloca %"char[]", align 8
  %indirectarg1256 = alloca %"char[]", align 8
  %varargslots1257 = alloca [1 x %any], align 16
  %indirectarg1259 = alloca %"any[]", align 8
  %taddr1263 = alloca i64, align 8
  %taddr1264 = alloca i64, align 8
  %indirectarg1265 = alloca %"char[]", align 8
  %indirectarg1266 = alloca %"char[]", align 8
  %indirectarg1267 = alloca %"char[]", align 8
  %varargslots1268 = alloca [2 x %any], align 16
  %indirectarg1271 = alloca %"any[]", align 8
  %taddr1277 = alloca i64, align 8
  %indirectarg1278 = alloca %"char[]", align 8
  %indirectarg1279 = alloca %"char[]", align 8
  %indirectarg1280 = alloca %"char[]", align 8
  %varargslots1281 = alloca [1 x %any], align 16
  %indirectarg1283 = alloca %"any[]", align 8
  %taddr1287 = alloca i64, align 8
  %taddr1288 = alloca i64, align 8
  %indirectarg1289 = alloca %"char[]", align 8
  %indirectarg1290 = alloca %"char[]", align 8
  %indirectarg1291 = alloca %"char[]", align 8
  %varargslots1292 = alloca [2 x %any], align 16
  %indirectarg1295 = alloca %"any[]", align 8
  %taddr1303 = alloca i64, align 8
  %indirectarg1304 = alloca %"char[]", align 8
  %indirectarg1305 = alloca %"char[]", align 8
  %indirectarg1306 = alloca %"char[]", align 8
  %varargslots1307 = alloca [1 x %any], align 16
  %indirectarg1309 = alloca %"any[]", align 8
  %taddr1313 = alloca i64, align 8
  %taddr1314 = alloca i64, align 8
  %indirectarg1315 = alloca %"char[]", align 8
  %indirectarg1316 = alloca %"char[]", align 8
  %indirectarg1317 = alloca %"char[]", align 8
  %varargslots1318 = alloca [2 x %any], align 16
  %indirectarg1321 = alloca %"any[]", align 8
  %carry1327 = alloca i32, align 4
  %sh = alloca i32, align 4
  %i = alloca i32, align 4
  %taddr1338 = alloca i64, align 8
  %indirectarg1339 = alloca %"char[]", align 8
  %indirectarg1340 = alloca %"char[]", align 8
  %indirectarg1341 = alloca %"char[]", align 8
  %varargslots1342 = alloca [1 x %any], align 16
  %indirectarg1344 = alloca %"any[]", align 8
  %taddr1348 = alloca i64, align 8
  %taddr1349 = alloca i64, align 8
  %indirectarg1350 = alloca %"char[]", align 8
  %indirectarg1351 = alloca %"char[]", align 8
  %indirectarg1352 = alloca %"char[]", align 8
  %varargslots1353 = alloca [2 x %any], align 16
  %indirectarg1356 = alloca %"any[]", align 8
  %taddr1362 = alloca i64, align 8
  %indirectarg1363 = alloca %"char[]", align 8
  %indirectarg1364 = alloca %"char[]", align 8
  %indirectarg1365 = alloca %"char[]", align 8
  %varargslots1366 = alloca [1 x %any], align 16
  %indirectarg1368 = alloca %"any[]", align 8
  %taddr1372 = alloca i64, align 8
  %taddr1373 = alloca i64, align 8
  %indirectarg1374 = alloca %"char[]", align 8
  %indirectarg1375 = alloca %"char[]", align 8
  %indirectarg1376 = alloca %"char[]", align 8
  %varargslots1377 = alloca [2 x %any], align 16
  %indirectarg1380 = alloca %"any[]", align 8
  %taddr1393 = alloca i64, align 8
  %indirectarg1394 = alloca %"char[]", align 8
  %indirectarg1395 = alloca %"char[]", align 8
  %indirectarg1396 = alloca %"char[]", align 8
  %varargslots1397 = alloca [1 x %any], align 16
  %indirectarg1399 = alloca %"any[]", align 8
  %taddr1403 = alloca i64, align 8
  %taddr1404 = alloca i64, align 8
  %indirectarg1405 = alloca %"char[]", align 8
  %indirectarg1406 = alloca %"char[]", align 8
  %indirectarg1407 = alloca %"char[]", align 8
  %varargslots1408 = alloca [2 x %any], align 16
  %indirectarg1411 = alloca %"any[]", align 8
  %taddr1417 = alloca i64, align 8
  %indirectarg1418 = alloca %"char[]", align 8
  %indirectarg1419 = alloca %"char[]", align 8
  %indirectarg1420 = alloca %"char[]", align 8
  %varargslots1421 = alloca [1 x %any], align 16
  %indirectarg1423 = alloca %"any[]", align 8
  %taddr1427 = alloca i64, align 8
  %taddr1428 = alloca i64, align 8
  %indirectarg1429 = alloca %"char[]", align 8
  %indirectarg1430 = alloca %"char[]", align 8
  %indirectarg1431 = alloca %"char[]", align 8
  %varargslots1432 = alloca [2 x %any], align 16
  %indirectarg1435 = alloca %"any[]", align 8
  %tmp1457 = alloca i32, align 4
  %taddr1461 = alloca i64, align 8
  %indirectarg1462 = alloca %"char[]", align 8
  %indirectarg1463 = alloca %"char[]", align 8
  %indirectarg1464 = alloca %"char[]", align 8
  %varargslots1465 = alloca [1 x %any], align 16
  %indirectarg1467 = alloca %"any[]", align 8
  %taddr1471 = alloca i64, align 8
  %taddr1472 = alloca i64, align 8
  %indirectarg1473 = alloca %"char[]", align 8
  %indirectarg1474 = alloca %"char[]", align 8
  %indirectarg1475 = alloca %"char[]", align 8
  %varargslots1476 = alloca [2 x %any], align 16
  %indirectarg1479 = alloca %"any[]", align 8
  %taddr1483 = alloca i32, align 4
  %indirectarg1484 = alloca %"char[]", align 8
  %indirectarg1485 = alloca %"char[]", align 8
  %indirectarg1486 = alloca %"char[]", align 8
  %varargslots1487 = alloca [1 x %any], align 16
  %indirectarg1489 = alloca %"any[]", align 8
  %taddr1493 = alloca i32, align 4
  %indirectarg1494 = alloca %"char[]", align 8
  %indirectarg1495 = alloca %"char[]", align 8
  %indirectarg1496 = alloca %"char[]", align 8
  %varargslots1497 = alloca [1 x %any], align 16
  %indirectarg1499 = alloca %"any[]", align 8
  %taddr1507 = alloca i64, align 8
  %indirectarg1508 = alloca %"char[]", align 8
  %indirectarg1509 = alloca %"char[]", align 8
  %indirectarg1510 = alloca %"char[]", align 8
  %varargslots1511 = alloca [1 x %any], align 16
  %indirectarg1513 = alloca %"any[]", align 8
  %taddr1517 = alloca i64, align 8
  %taddr1518 = alloca i64, align 8
  %indirectarg1519 = alloca %"char[]", align 8
  %indirectarg1520 = alloca %"char[]", align 8
  %indirectarg1521 = alloca %"char[]", align 8
  %varargslots1522 = alloca [2 x %any], align 16
  %indirectarg1525 = alloca %"any[]", align 8
  %taddr1530 = alloca i32, align 4
  %indirectarg1531 = alloca %"char[]", align 8
  %indirectarg1532 = alloca %"char[]", align 8
  %indirectarg1533 = alloca %"char[]", align 8
  %varargslots1534 = alloca [1 x %any], align 16
  %indirectarg1536 = alloca %"any[]", align 8
  %taddr1543 = alloca i64, align 8
  %indirectarg1544 = alloca %"char[]", align 8
  %indirectarg1545 = alloca %"char[]", align 8
  %indirectarg1546 = alloca %"char[]", align 8
  %varargslots1547 = alloca [1 x %any], align 16
  %indirectarg1549 = alloca %"any[]", align 8
  %taddr1553 = alloca i64, align 8
  %taddr1554 = alloca i64, align 8
  %indirectarg1555 = alloca %"char[]", align 8
  %indirectarg1556 = alloca %"char[]", align 8
  %indirectarg1557 = alloca %"char[]", align 8
  %varargslots1558 = alloca [2 x %any], align 16
  %indirectarg1561 = alloca %"any[]", align 8
  %taddr1566 = alloca i32, align 4
  %indirectarg1567 = alloca %"char[]", align 8
  %indirectarg1568 = alloca %"char[]", align 8
  %indirectarg1569 = alloca %"char[]", align 8
  %varargslots1570 = alloca [1 x %any], align 16
  %indirectarg1572 = alloca %"any[]", align 8
  %taddr1576 = alloca i32, align 4
  %indirectarg1577 = alloca %"char[]", align 8
  %indirectarg1578 = alloca %"char[]", align 8
  %indirectarg1579 = alloca %"char[]", align 8
  %varargslots1580 = alloca [1 x %any], align 16
  %indirectarg1582 = alloca %"any[]", align 8
  %taddr1590 = alloca i64, align 8
  %indirectarg1591 = alloca %"char[]", align 8
  %indirectarg1592 = alloca %"char[]", align 8
  %indirectarg1593 = alloca %"char[]", align 8
  %varargslots1594 = alloca [1 x %any], align 16
  %indirectarg1596 = alloca %"any[]", align 8
  %taddr1600 = alloca i64, align 8
  %taddr1601 = alloca i64, align 8
  %indirectarg1602 = alloca %"char[]", align 8
  %indirectarg1603 = alloca %"char[]", align 8
  %indirectarg1604 = alloca %"char[]", align 8
  %varargslots1605 = alloca [2 x %any], align 16
  %indirectarg1608 = alloca %"any[]", align 8
  %taddr1632 = alloca i64, align 8
  %indirectarg1633 = alloca %"char[]", align 8
  %indirectarg1634 = alloca %"char[]", align 8
  %indirectarg1635 = alloca %"char[]", align 8
  %varargslots1636 = alloca [1 x %any], align 16
  %indirectarg1638 = alloca %"any[]", align 8
  %taddr1642 = alloca i64, align 8
  %taddr1643 = alloca i64, align 8
  %indirectarg1644 = alloca %"char[]", align 8
  %indirectarg1645 = alloca %"char[]", align 8
  %indirectarg1646 = alloca %"char[]", align 8
  %varargslots1647 = alloca [2 x %any], align 16
  %indirectarg1650 = alloca %"any[]", align 8
  %taddr1661 = alloca i64, align 8
  %indirectarg1662 = alloca %"char[]", align 8
  %indirectarg1663 = alloca %"char[]", align 8
  %indirectarg1664 = alloca %"char[]", align 8
  %varargslots1665 = alloca [1 x %any], align 16
  %indirectarg1667 = alloca %"any[]", align 8
  %taddr1671 = alloca i64, align 8
  %taddr1672 = alloca i64, align 8
  %indirectarg1673 = alloca %"char[]", align 8
  %indirectarg1674 = alloca %"char[]", align 8
  %indirectarg1675 = alloca %"char[]", align 8
  %varargslots1676 = alloca [2 x %any], align 16
  %indirectarg1679 = alloca %"any[]", align 8
  %y1686 = alloca double, align 8
  %i1687 = alloca i32, align 4
  %taddr1701 = alloca i64, align 8
  %indirectarg1702 = alloca %"char[]", align 8
  %indirectarg1703 = alloca %"char[]", align 8
  %indirectarg1704 = alloca %"char[]", align 8
  %varargslots1705 = alloca [1 x %any], align 16
  %indirectarg1707 = alloca %"any[]", align 8
  %taddr1711 = alloca i64, align 8
  %taddr1712 = alloca i64, align 8
  %indirectarg1713 = alloca %"char[]", align 8
  %indirectarg1714 = alloca %"char[]", align 8
  %indirectarg1715 = alloca %"char[]", align 8
  %varargslots1716 = alloca [2 x %any], align 16
  %indirectarg1719 = alloca %"any[]", align 8
  %taddr1729 = alloca i64, align 8
  %indirectarg1730 = alloca %"char[]", align 8
  %indirectarg1731 = alloca %"char[]", align 8
  %indirectarg1732 = alloca %"char[]", align 8
  %varargslots1733 = alloca [1 x %any], align 16
  %indirectarg1735 = alloca %"any[]", align 8
  %taddr1739 = alloca i64, align 8
  %taddr1740 = alloca i64, align 8
  %indirectarg1741 = alloca %"char[]", align 8
  %indirectarg1742 = alloca %"char[]", align 8
  %indirectarg1743 = alloca %"char[]", align 8
  %varargslots1744 = alloca [2 x %any], align 16
  %indirectarg1747 = alloca %"any[]", align 8
  %denormal = alloca i8, align 1
  %bits1756 = alloca i32, align 4
  %bias1769 = alloca double, align 8
  %frac = alloca double, align 8
  %x1772 = alloca double, align 8
  %n1775 = alloca i32, align 4
  %mag1776 = alloca double, align 8
  %sgn1777 = alloca double, align 8
  %x1778 = alloca double, align 8
  %y1779 = alloca double, align 8
  %x1781 = alloca double, align 8
  %n1783 = alloca i32, align 4
  %indirectarg1786 = alloca %"char[]", align 8
  %indirectarg1787 = alloca %"char[]", align 8
  %indirectarg1788 = alloca %"char[]", align 8
  %t = alloca i32, align 4
  %taddr1802 = alloca i64, align 8
  %indirectarg1803 = alloca %"char[]", align 8
  %indirectarg1804 = alloca %"char[]", align 8
  %indirectarg1805 = alloca %"char[]", align 8
  %varargslots1806 = alloca [1 x %any], align 16
  %indirectarg1808 = alloca %"any[]", align 8
  %taddr1812 = alloca i64, align 8
  %taddr1813 = alloca i64, align 8
  %indirectarg1814 = alloca %"char[]", align 8
  %indirectarg1815 = alloca %"char[]", align 8
  %indirectarg1816 = alloca %"char[]", align 8
  %varargslots1817 = alloca [2 x %any], align 16
  %indirectarg1820 = alloca %"any[]", align 8
  %switch1823 = alloca i8, align 1
  %x1886 = alloca double, align 8
  %x1914 = alloca double, align 8
  %n1915 = alloca i32, align 4
    #dbg_declare(ptr %1, !2400, !DIExpression(), !2401)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %chars, ptr align 8 %1, i32 16, i1 false)
    #dbg_declare(ptr %sign, !2402, !DIExpression(), !2404)
  store i32 1, ptr %sign, align 4, !dbg !2404
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg, ptr align 8 %chars, i32 16, i1 false)
  store %"char[]" { ptr @.str.114, i64 4 }, ptr %indirectarg1, align 8
  call void @std.core.String.trim(ptr sret(%"char[]") align 8 %chars, ptr align 8 %indirectarg, ptr align 8 %indirectarg1), !dbg !2405
  %ptradd = getelementptr inbounds i8, ptr %chars, i64 8, !dbg !2406
  %2 = load i64, ptr %ptradd, align 8, !dbg !2406
  %i2nb = icmp eq i64 %2, 0, !dbg !2406
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !2406

if.then:                                          ; preds = %entry
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_FLOAT to i64), ptr %reterr, align 8, !dbg !2406
  br label %err_retblock, !dbg !2406

if.exit:                                          ; preds = %entry
  %ptradd2 = getelementptr inbounds i8, ptr %chars, i64 8, !dbg !2407
  %3 = load i64, ptr %ptradd2, align 8, !dbg !2407
  %neq = icmp ne i64 1, %3, !dbg !2407
  br i1 %neq, label %if.then3, label %if.exit24, !dbg !2407

if.then3:                                         ; preds = %if.exit
  %ptradd4 = getelementptr inbounds i8, ptr %chars, i64 8, !dbg !2408
  %4 = load i64, ptr %ptradd4, align 8, !dbg !2408
  %5 = load ptr, ptr %chars, align 8, !dbg !2408
  %ge = icmp sge i64 0, %4, !dbg !2408
  %6 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !2408
  br i1 %6, label %panic, label %checkok, !dbg !2408

checkok:                                          ; preds = %if.then3
  %7 = load i8, ptr %5, align 1
  store i8 %7, ptr %switch, align 1
  br label %switch.entry

switch.entry:                                     ; preds = %checkok
  %8 = load i8, ptr %switch, align 1
  switch i8 %8, label %switch.exit [
    i8 45, label %switch.case
    i8 43, label %switch.case11
  ]

switch.case:                                      ; preds = %switch.entry
  store i32 -1, ptr %sign, align 4, !dbg !2411
  br label %switch.case11, !dbg !2413

switch.case11:                                    ; preds = %switch.entry, %switch.case
  %9 = load %"char[]", ptr %chars, align 8, !dbg !2414
  %10 = extractvalue %"char[]" %9, 0, !dbg !2414
  %11 = extractvalue %"char[]" %9, 1, !dbg !2414
  %gt = icmp sgt i64 1, %11, !dbg !2414
  %12 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !2414
  br i1 %12, label %panic12, label %checkok22, !dbg !2414

checkok22:                                        ; preds = %switch.case11
  %size = sub i64 %11, 1, !dbg !2414
  %ptradd23 = getelementptr inbounds i8, ptr %10, i64 1, !dbg !2414
  %13 = insertvalue %"char[]" undef, ptr %ptradd23, 0, !dbg !2414
  %14 = insertvalue %"char[]" %13, i64 %size, 1, !dbg !2414
  store %"char[]" %14, ptr %chars, align 8, !dbg !2414
  br label %switch.exit, !dbg !2414

switch.exit:                                      ; preds = %checkok22, %switch.entry
  br label %if.exit24, !dbg !2414

if.exit24:                                        ; preds = %switch.exit, %if.exit
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg25, ptr align 8 %chars, i32 16, i1 false)
  store %"char[]" { ptr @.str.116, i64 4 }, ptr %indirectarg26, align 8
  call void @std.core.String.trim(ptr sret(%"char[]") align 8 %chars, ptr align 8 %indirectarg25, ptr align 8 %indirectarg26), !dbg !2416
  %ptradd27 = getelementptr inbounds i8, ptr %chars, i64 8, !dbg !2417
  %15 = load i64, ptr %ptradd27, align 8, !dbg !2417
  %i2nb28 = icmp eq i64 %15, 0, !dbg !2417
  br i1 %i2nb28, label %if.then29, label %if.exit30, !dbg !2417

if.then29:                                        ; preds = %if.exit24
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_FLOAT to i64), ptr %reterr, align 8, !dbg !2417
  br label %err_retblock, !dbg !2417

if.exit30:                                        ; preds = %if.exit24
  %16 = load %"char[]", ptr %chars, align 8, !dbg !2418
  %17 = extractvalue %"char[]" %16, 1, !dbg !2418
  %18 = extractvalue %"char[]" %16, 0, !dbg !2418
  %eq = icmp eq i64 %17, 8, !dbg !2418
  br i1 %eq, label %slice_cmp_values, label %slice_cmp_exit, !dbg !2418

slice_cmp_values:                                 ; preds = %if.exit30
  store i64 0, ptr %cmp.idx, align 8
  br label %slice_loop_start

slice_loop_start:                                 ; preds = %slice_loop_comparison, %slice_cmp_values
  %19 = load i64, ptr %cmp.idx, align 8
  %lt = icmp slt i64 %19, %17
  br i1 %lt, label %slice_loop_comparison, label %slice_cmp_exit

slice_loop_comparison:                            ; preds = %slice_loop_start
  %ptradd31 = getelementptr inbounds i8, ptr %18, i64 %19
  %ptradd32 = getelementptr inbounds i8, ptr @.str.117, i64 %19
  %20 = load i8, ptr %ptradd31, align 1
  %21 = load i8, ptr %ptradd32, align 1
  %eq33 = icmp eq i8 %20, %21
  %22 = add i64 %19, 1
  store i64 %22, ptr %cmp.idx, align 8
  br i1 %eq33, label %slice_loop_start, label %slice_cmp_exit

slice_cmp_exit:                                   ; preds = %slice_loop_comparison, %slice_loop_start, %if.exit30
  %slice_cmp_phi = phi i1 [ true, %slice_loop_start ], [ false, %if.exit30 ], [ false, %slice_loop_comparison ]
  br i1 %slice_cmp_phi, label %or.phi, label %or.rhs

or.rhs:                                           ; preds = %slice_cmp_exit
  %23 = load %"char[]", ptr %chars, align 8, !dbg !2418
  %24 = extractvalue %"char[]" %23, 1, !dbg !2418
  %25 = extractvalue %"char[]" %23, 0, !dbg !2418
  %eq34 = icmp eq i64 %24, 8, !dbg !2418
  br i1 %eq34, label %slice_cmp_values35, label %slice_cmp_exit43, !dbg !2418

slice_cmp_values35:                               ; preds = %or.rhs
  store i64 0, ptr %cmp.idx36, align 8
  br label %slice_loop_start37

slice_loop_start37:                               ; preds = %slice_loop_comparison39, %slice_cmp_values35
  %26 = load i64, ptr %cmp.idx36, align 8
  %lt38 = icmp slt i64 %26, %24
  br i1 %lt38, label %slice_loop_comparison39, label %slice_cmp_exit43

slice_loop_comparison39:                          ; preds = %slice_loop_start37
  %ptradd40 = getelementptr inbounds i8, ptr %25, i64 %26
  %ptradd41 = getelementptr inbounds i8, ptr @.str.118, i64 %26
  %27 = load i8, ptr %ptradd40, align 1
  %28 = load i8, ptr %ptradd41, align 1
  %eq42 = icmp eq i8 %27, %28
  %29 = add i64 %26, 1
  store i64 %29, ptr %cmp.idx36, align 8
  br i1 %eq42, label %slice_loop_start37, label %slice_cmp_exit43

slice_cmp_exit43:                                 ; preds = %slice_loop_comparison39, %slice_loop_start37, %or.rhs
  %slice_cmp_phi44 = phi i1 [ true, %slice_loop_start37 ], [ false, %or.rhs ], [ false, %slice_loop_comparison39 ]
  br label %or.phi

or.phi:                                           ; preds = %slice_cmp_exit43, %slice_cmp_exit
  %val = phi i1 [ true, %slice_cmp_exit ], [ %slice_cmp_phi44, %slice_cmp_exit43 ]
  br i1 %val, label %if.then45, label %if.exit46

if.then45:                                        ; preds = %or.phi
  %30 = load i32, ptr %sign, align 4, !dbg !2418
  %sifp = sitofp i32 %30 to float, !dbg !2418
  %fmul = fmul float %sifp, 0x7FF0000000000000, !dbg !2418
  store float %fmul, ptr %blockret, align 4, !dbg !2418
  br label %expr_block.exit1919, !dbg !2418

if.exit46:                                        ; preds = %or.phi
  %31 = load %"char[]", ptr %chars, align 8, !dbg !2419
  %32 = extractvalue %"char[]" %31, 1, !dbg !2419
  %33 = extractvalue %"char[]" %31, 0, !dbg !2419
  %eq47 = icmp eq i64 %32, 3, !dbg !2419
  br i1 %eq47, label %slice_cmp_values48, label %slice_cmp_exit56, !dbg !2419

slice_cmp_values48:                               ; preds = %if.exit46
  store i64 0, ptr %cmp.idx49, align 8
  br label %slice_loop_start50

slice_loop_start50:                               ; preds = %slice_loop_comparison52, %slice_cmp_values48
  %34 = load i64, ptr %cmp.idx49, align 8
  %lt51 = icmp slt i64 %34, %32
  br i1 %lt51, label %slice_loop_comparison52, label %slice_cmp_exit56

slice_loop_comparison52:                          ; preds = %slice_loop_start50
  %ptradd53 = getelementptr inbounds i8, ptr %33, i64 %34
  %ptradd54 = getelementptr inbounds i8, ptr @.str.119, i64 %34
  %35 = load i8, ptr %ptradd53, align 1
  %36 = load i8, ptr %ptradd54, align 1
  %eq55 = icmp eq i8 %35, %36
  %37 = add i64 %34, 1
  store i64 %37, ptr %cmp.idx49, align 8
  br i1 %eq55, label %slice_loop_start50, label %slice_cmp_exit56

slice_cmp_exit56:                                 ; preds = %slice_loop_comparison52, %slice_loop_start50, %if.exit46
  %slice_cmp_phi57 = phi i1 [ true, %slice_loop_start50 ], [ false, %if.exit46 ], [ false, %slice_loop_comparison52 ]
  br i1 %slice_cmp_phi57, label %or.phi70, label %or.rhs58

or.rhs58:                                         ; preds = %slice_cmp_exit56
  %38 = load %"char[]", ptr %chars, align 8, !dbg !2419
  %39 = extractvalue %"char[]" %38, 1, !dbg !2419
  %40 = extractvalue %"char[]" %38, 0, !dbg !2419
  %eq59 = icmp eq i64 %39, 3, !dbg !2419
  br i1 %eq59, label %slice_cmp_values60, label %slice_cmp_exit68, !dbg !2419

slice_cmp_values60:                               ; preds = %or.rhs58
  store i64 0, ptr %cmp.idx61, align 8
  br label %slice_loop_start62

slice_loop_start62:                               ; preds = %slice_loop_comparison64, %slice_cmp_values60
  %41 = load i64, ptr %cmp.idx61, align 8
  %lt63 = icmp slt i64 %41, %39
  br i1 %lt63, label %slice_loop_comparison64, label %slice_cmp_exit68

slice_loop_comparison64:                          ; preds = %slice_loop_start62
  %ptradd65 = getelementptr inbounds i8, ptr %40, i64 %41
  %ptradd66 = getelementptr inbounds i8, ptr @.str.120, i64 %41
  %42 = load i8, ptr %ptradd65, align 1
  %43 = load i8, ptr %ptradd66, align 1
  %eq67 = icmp eq i8 %42, %43
  %44 = add i64 %41, 1
  store i64 %44, ptr %cmp.idx61, align 8
  br i1 %eq67, label %slice_loop_start62, label %slice_cmp_exit68

slice_cmp_exit68:                                 ; preds = %slice_loop_comparison64, %slice_loop_start62, %or.rhs58
  %slice_cmp_phi69 = phi i1 [ true, %slice_loop_start62 ], [ false, %or.rhs58 ], [ false, %slice_loop_comparison64 ]
  br label %or.phi70

or.phi70:                                         ; preds = %slice_cmp_exit68, %slice_cmp_exit56
  %val71 = phi i1 [ true, %slice_cmp_exit56 ], [ %slice_cmp_phi69, %slice_cmp_exit68 ]
  br i1 %val71, label %if.then72, label %if.exit73

if.then72:                                        ; preds = %or.phi70
  store float 0x7FF8000000000000, ptr %blockret, align 4, !dbg !2419
  br label %expr_block.exit1919, !dbg !2419

if.exit73:                                        ; preds = %or.phi70
  %ptradd74 = getelementptr inbounds i8, ptr %chars, i64 8, !dbg !2420
  %45 = load i64, ptr %ptradd74, align 8, !dbg !2420
  %lt75 = icmp ult i64 2, %45, !dbg !2420
  br i1 %lt75, label %and.rhs, label %and.phi, !dbg !2420

and.rhs:                                          ; preds = %if.exit73
  %ptradd76 = getelementptr inbounds i8, ptr %chars, i64 8, !dbg !2420
  %46 = load i64, ptr %ptradd76, align 8, !dbg !2420
  %47 = load ptr, ptr %chars, align 8, !dbg !2420
  %ge77 = icmp sge i64 0, %46, !dbg !2420
  %48 = call i1 @llvm.expect.i1(i1 %ge77, i1 false), !dbg !2420
  br i1 %48, label %panic78, label %checkok88, !dbg !2420

checkok88:                                        ; preds = %and.rhs
  %49 = load i8, ptr %47, align 1, !dbg !2420
  %eq89 = icmp eq i8 %49, 48, !dbg !2420
  br label %and.phi, !dbg !2420

and.phi:                                          ; preds = %checkok88, %if.exit73
  %val90 = phi i1 [ false, %if.exit73 ], [ %eq89, %checkok88 ], !dbg !2420
  br i1 %val90, label %and.rhs91, label %and.phi107, !dbg !2420

and.rhs91:                                        ; preds = %and.phi
  %ptradd92 = getelementptr inbounds i8, ptr %chars, i64 8, !dbg !2420
  %50 = load i64, ptr %ptradd92, align 8, !dbg !2420
  %51 = load ptr, ptr %chars, align 8, !dbg !2420
  %ge93 = icmp sge i64 1, %50, !dbg !2420
  %52 = call i1 @llvm.expect.i1(i1 %ge93, i1 false), !dbg !2420
  br i1 %52, label %panic94, label %checkok104, !dbg !2420

checkok104:                                       ; preds = %and.rhs91
  %ptradd105 = getelementptr inbounds i8, ptr %51, i64 1, !dbg !2420
  %53 = load i8, ptr %ptradd105, align 1, !dbg !2420
  %zext = zext i8 %53 to i32, !dbg !2420
  %or = or i32 %zext, 32, !dbg !2420
  %eq106 = icmp eq i32 %or, 120, !dbg !2420
  %check = icmp sge i32 %or, 0, !dbg !2420
  %siui-eq = and i1 %check, %eq106, !dbg !2420
  br label %and.phi107, !dbg !2420

and.phi107:                                       ; preds = %checkok104, %and.phi
  %val108 = phi i1 [ false, %and.phi ], [ %siui-eq, %checkok104 ], !dbg !2420
  br i1 %val108, label %if.then109, label %if.exit389, !dbg !2420

if.then109:                                       ; preds = %and.phi107
  %54 = load %"char[]", ptr %chars, align 8, !dbg !2421
  %55 = extractvalue %"char[]" %54, 0, !dbg !2421
  %56 = extractvalue %"char[]" %54, 1, !dbg !2421
  %gt110 = icmp sgt i64 2, %56, !dbg !2421
  %57 = call i1 @llvm.expect.i1(i1 %gt110, i1 false), !dbg !2421
  br i1 %57, label %panic111, label %checkok121, !dbg !2421

checkok121:                                       ; preds = %if.then109
  %size122 = sub i64 %56, 2, !dbg !2421
  %ptradd123 = getelementptr inbounds i8, ptr %55, i64 2, !dbg !2421
  %58 = insertvalue %"char[]" undef, ptr %ptradd123, 0, !dbg !2421
  %59 = insertvalue %"char[]" %58, i64 %size122, 1, !dbg !2421
  store %"char[]" %59, ptr %chars124, align 8
  %60 = load i32, ptr %sign, align 4
  store i32 %60, ptr %sign125, align 4
    #dbg_declare(ptr %scale, !2423, !DIExpression(), !2425)
  store double 1.000000e+00, ptr %scale, align 8, !dbg !2425
    #dbg_declare(ptr %x, !2426, !DIExpression(), !2427)
  store i32 0, ptr %x, align 4, !dbg !2427
    #dbg_declare(ptr %rp, !2428, !DIExpression(), !2429)
  store i64 0, ptr %rp, align 8, !dbg !2429
    #dbg_declare(ptr %dc, !2430, !DIExpression(), !2431)
  store i64 0, ptr %dc, align 8, !dbg !2431
    #dbg_declare(ptr %c, !2432, !DIExpression(), !2433)
    #dbg_declare(ptr %got_rad, !2434, !DIExpression(), !2435)
  store i8 0, ptr %got_rad, align 1, !dbg !2435
    #dbg_declare(ptr %got_digit, !2436, !DIExpression(), !2437)
  store i8 0, ptr %got_digit, align 1, !dbg !2437
    #dbg_declare(ptr %got_tail, !2438, !DIExpression(), !2439)
  store i8 0, ptr %got_tail, align 1, !dbg !2439
    #dbg_declare(ptr %len, !2440, !DIExpression(), !2441)
  %ptradd127 = getelementptr inbounds i8, ptr %chars124, i64 8, !dbg !2441
  %61 = load i64, ptr %ptradd127, align 8, !dbg !2441
  store i64 %61, ptr %len, align 8, !dbg !2441
    #dbg_declare(ptr %last_char, !2442, !DIExpression(), !2443)
  %62 = load i64, ptr %len, align 8, !dbg !2443
  %sub = sub i64 %62, 1, !dbg !2443
  store i64 %sub, ptr %last_char, align 8, !dbg !2443
    #dbg_declare(ptr %index, !2444, !DIExpression(), !2445)
  store i64 0, ptr %index, align 8, !dbg !2445
    #dbg_declare(ptr %y, !2446, !DIExpression(), !2447)
  store double 0.000000e+00, ptr %y, align 8, !dbg !2447
  br label %loop.cond, !dbg !2448

loop.cond:                                        ; preds = %if.exit145, %checkok121
  %ptradd128 = getelementptr inbounds i8, ptr %chars124, i64 8, !dbg !2449
  %63 = load i64, ptr %ptradd128, align 8, !dbg !2449
  %64 = load ptr, ptr %chars124, align 8, !dbg !2449
  %65 = load i64, ptr %index, align 8, !dbg !2449
  %ge129 = icmp uge i64 %65, %63, !dbg !2449
  %66 = call i1 @llvm.expect.i1(i1 %ge129, i1 false), !dbg !2449
  br i1 %66, label %panic130, label %checkok140, !dbg !2449

checkok140:                                       ; preds = %loop.cond
  %ptradd141 = getelementptr inbounds i8, ptr %64, i64 %65, !dbg !2449
  %67 = load i8, ptr %ptradd141, align 1, !dbg !2449
  store i8 %67, ptr %c, align 1, !dbg !2449
  %eq142 = icmp eq i8 %67, 48, !dbg !2449
  br i1 %eq142, label %loop.body, label %loop.exit, !dbg !2449

loop.body:                                        ; preds = %checkok140
  %68 = load i64, ptr %index, align 8, !dbg !2451
  %69 = load i64, ptr %last_char, align 8, !dbg !2451
  %eq143 = icmp eq i64 %68, %69, !dbg !2451
  br i1 %eq143, label %if.then144, label %if.exit145, !dbg !2451

if.then144:                                       ; preds = %loop.body
  store double 0.000000e+00, ptr %blockret126, align 8, !dbg !2451
  br label %expr_block.exit, !dbg !2451

if.exit145:                                       ; preds = %loop.body
  %70 = load i64, ptr %index, align 8, !dbg !2453
  %add = add i64 %70, 1, !dbg !2453
  store i64 %add, ptr %index, align 8, !dbg !2453
  br label %loop.cond, !dbg !2453

loop.exit:                                        ; preds = %checkok140
  %71 = load i8, ptr %c, align 1, !dbg !2454
  %eq146 = icmp eq i8 %71, 46, !dbg !2454
  br i1 %eq146, label %if.then147, label %if.exit201, !dbg !2454

if.then147:                                       ; preds = %loop.exit
  store i8 1, ptr %got_rad, align 1, !dbg !2455
  %72 = load i64, ptr %index, align 8, !dbg !2457
  %73 = load i64, ptr %last_char, align 8, !dbg !2457
  %eq148 = icmp eq i64 %72, %73, !dbg !2457
  br i1 %eq148, label %if.then149, label %if.exit153, !dbg !2457

if.then149:                                       ; preds = %if.then147
  %74 = load i8, ptr %got_digit, align 1, !dbg !2458
  %75 = trunc i8 %74 to i1, !dbg !2458
  br i1 %75, label %if.exit150, label %if.else, !dbg !2458

if.else:                                          ; preds = %if.then149
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_FLOAT to i64), ptr %reterr, align 8, !dbg !2458
  br label %err_retblock, !dbg !2458

if.exit150:                                       ; preds = %if.then149
  %76 = load i32, ptr %sign125, align 4, !dbg !2460
  %sifp151 = sitofp i32 %76 to double, !dbg !2460
  %fmul152 = fmul double %sifp151, 0.000000e+00, !dbg !2460
  store double %fmul152, ptr %blockret126, align 8, !dbg !2460
  br label %expr_block.exit, !dbg !2460

if.exit153:                                       ; preds = %if.then147
  %77 = load i64, ptr %index, align 8, !dbg !2461
  %78 = load i64, ptr %last_char, align 8, !dbg !2461
  %neq154 = icmp ne i64 %77, %78, !dbg !2461
  br i1 %neq154, label %and.rhs155, label %and.phi172, !dbg !2461

and.rhs155:                                       ; preds = %if.exit153
  %ptradd156 = getelementptr inbounds i8, ptr %chars124, i64 8, !dbg !2461
  %79 = load i64, ptr %ptradd156, align 8, !dbg !2461
  %80 = load ptr, ptr %chars124, align 8, !dbg !2461
  %81 = load i64, ptr %index, align 8, !dbg !2461
  %add157 = add i64 %81, 1, !dbg !2461
  store i64 %add157, ptr %index, align 8, !dbg !2461
  %ge158 = icmp uge i64 %add157, %79, !dbg !2461
  %82 = call i1 @llvm.expect.i1(i1 %ge158, i1 false), !dbg !2461
  br i1 %82, label %panic159, label %checkok169, !dbg !2461

checkok169:                                       ; preds = %and.rhs155
  %ptradd170 = getelementptr inbounds i8, ptr %80, i64 %add157, !dbg !2461
  %83 = load i8, ptr %ptradd170, align 1, !dbg !2461
  store i8 %83, ptr %c, align 1, !dbg !2461
  %eq171 = icmp eq i8 %83, 48, !dbg !2461
  br label %and.phi172, !dbg !2461

and.phi172:                                       ; preds = %checkok169, %if.exit153
  %val173 = phi i1 [ false, %if.exit153 ], [ %eq171, %checkok169 ], !dbg !2461
  br i1 %val173, label %if.then174, label %if.exit200, !dbg !2461

if.then174:                                       ; preds = %and.phi172
  %84 = load i64, ptr %rp, align 8, !dbg !2462
  %sub175 = sub i64 %84, 1, !dbg !2462
  store i64 %sub175, ptr %rp, align 8, !dbg !2462
  store i8 1, ptr %got_digit, align 1, !dbg !2464
  br label %loop.cond176, !dbg !2465

loop.cond176:                                     ; preds = %loop.body197, %if.then174
  %85 = load i64, ptr %last_char, align 8, !dbg !2466
  %86 = load i64, ptr %index, align 8, !dbg !2466
  %neq177 = icmp ne i64 %85, %86, !dbg !2466
  br i1 %neq177, label %and.rhs178, label %and.phi195, !dbg !2466

and.rhs178:                                       ; preds = %loop.cond176
  %ptradd179 = getelementptr inbounds i8, ptr %chars124, i64 8, !dbg !2466
  %87 = load i64, ptr %ptradd179, align 8, !dbg !2466
  %88 = load ptr, ptr %chars124, align 8, !dbg !2466
  %89 = load i64, ptr %index, align 8, !dbg !2466
  %add180 = add i64 %89, 1, !dbg !2466
  store i64 %add180, ptr %index, align 8, !dbg !2466
  %ge181 = icmp uge i64 %add180, %87, !dbg !2466
  %90 = call i1 @llvm.expect.i1(i1 %ge181, i1 false), !dbg !2466
  br i1 %90, label %panic182, label %checkok192, !dbg !2466

checkok192:                                       ; preds = %and.rhs178
  %ptradd193 = getelementptr inbounds i8, ptr %88, i64 %add180, !dbg !2466
  %91 = load i8, ptr %ptradd193, align 1, !dbg !2466
  store i8 %91, ptr %c, align 1, !dbg !2466
  %eq194 = icmp eq i8 %91, 48, !dbg !2466
  br label %and.phi195, !dbg !2466

and.phi195:                                       ; preds = %checkok192, %loop.cond176
  %val196 = phi i1 [ false, %loop.cond176 ], [ %eq194, %checkok192 ], !dbg !2466
  br i1 %val196, label %loop.body197, label %loop.exit199, !dbg !2466

loop.body197:                                     ; preds = %and.phi195
  %92 = load i64, ptr %rp, align 8, !dbg !2468
  %sub198 = sub i64 %92, 1, !dbg !2468
  store i64 %sub198, ptr %rp, align 8, !dbg !2468
  br label %loop.cond176, !dbg !2468

loop.exit199:                                     ; preds = %and.phi195
  br label %if.exit200, !dbg !2468

if.exit200:                                       ; preds = %loop.exit199, %and.phi172
  br label %if.exit201, !dbg !2468

if.exit201:                                       ; preds = %if.exit200, %loop.exit
  br label %loop.cond202, !dbg !2470

loop.cond202:                                     ; preds = %checkok270, %if.exit201
  %93 = load i8, ptr %c, align 1, !dbg !2471
  %zext203 = zext i8 %93 to i32, !dbg !2471
  %sub204 = sub i32 %zext203, 48, !dbg !2471
  %lt205 = icmp ult i32 %sub204, 10, !dbg !2471
  br i1 %lt205, label %or.phi211, label %or.rhs206, !dbg !2471

or.rhs206:                                        ; preds = %loop.cond202
  %94 = load i8, ptr %c, align 1, !dbg !2471
  %zext207 = zext i8 %94 to i32, !dbg !2471
  %or208 = or i32 %zext207, 32, !dbg !2471
  %sub209 = sub i32 %or208, 97, !dbg !2471
  %lt210 = icmp slt i32 %sub209, 6, !dbg !2471
  %siui-lt = or i1 false, %lt210, !dbg !2471
  br label %or.phi211, !dbg !2471

or.phi211:                                        ; preds = %or.rhs206, %loop.cond202
  %val212 = phi i1 [ true, %loop.cond202 ], [ %siui-lt, %or.rhs206 ], !dbg !2471
  br i1 %val212, label %or.phi215, label %or.rhs213, !dbg !2471

or.rhs213:                                        ; preds = %or.phi211
  %95 = load i8, ptr %c, align 1, !dbg !2471
  %eq214 = icmp eq i8 %95, 46, !dbg !2471
  br label %or.phi215, !dbg !2471

or.phi215:                                        ; preds = %or.rhs213, %or.phi211
  %val216 = phi i1 [ true, %or.phi211 ], [ %eq214, %or.rhs213 ], !dbg !2471
  br i1 %val216, label %loop.body217, label %loop.exit272, !dbg !2471

loop.body217:                                     ; preds = %or.phi215
  %96 = load i8, ptr %c, align 1, !dbg !2473
  %eq218 = icmp eq i8 %96, 46, !dbg !2473
  br i1 %eq218, label %if.then219, label %if.else222, !dbg !2473

if.then219:                                       ; preds = %loop.body217
  %97 = load i8, ptr %got_rad, align 1, !dbg !2475
  %98 = trunc i8 %97 to i1, !dbg !2475
  br i1 %98, label %if.then220, label %if.exit221, !dbg !2475

if.then220:                                       ; preds = %if.then219
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_FLOAT to i64), ptr %reterr, align 8, !dbg !2475
  br label %err_retblock, !dbg !2475

if.exit221:                                       ; preds = %if.then219
  store i8 1, ptr %got_rad, align 1, !dbg !2477
  %99 = load i64, ptr %dc, align 8, !dbg !2478
  store i64 %99, ptr %rp, align 8, !dbg !2478
  br label %if.exit253, !dbg !2478

if.else222:                                       ; preds = %loop.body217
  store i8 1, ptr %got_digit, align 1, !dbg !2479
    #dbg_declare(ptr %d, !2481, !DIExpression(), !2482)
  %100 = load i8, ptr %c, align 1, !dbg !2482
  %gt223 = icmp ugt i8 %100, 57, !dbg !2482
  br i1 %gt223, label %cond.lhs, label %cond.rhs, !dbg !2482

cond.lhs:                                         ; preds = %if.else222
  %101 = load i8, ptr %c, align 1, !dbg !2482
  %zext224 = zext i8 %101 to i32, !dbg !2482
  %or225 = or i32 %zext224, 32, !dbg !2482
  %add226 = add i32 %or225, 10, !dbg !2482
  %sub227 = sub i32 %add226, 97, !dbg !2482
  br label %cond.phi, !dbg !2482

cond.rhs:                                         ; preds = %if.else222
  %102 = load i8, ptr %c, align 1, !dbg !2482
  %zext228 = zext i8 %102 to i32, !dbg !2482
  %sub229 = sub i32 %zext228, 48, !dbg !2482
  br label %cond.phi, !dbg !2482

cond.phi:                                         ; preds = %cond.rhs, %cond.lhs
  %val230 = phi i32 [ %sub227, %cond.lhs ], [ %sub229, %cond.rhs ], !dbg !2482
  store i32 %val230, ptr %d, align 4, !dbg !2482
  store i8 1, ptr %switch231, align 1
  br label %switch.entry232

switch.entry232:                                  ; preds = %cond.phi
  %103 = load i8, ptr %switch231, align 1
  %104 = trunc i8 %103 to i1
  %105 = load i64, ptr %dc, align 8, !dbg !2483
  %lt233 = icmp slt i64 %105, 8, !dbg !2483
  %eq234 = icmp eq i1 %lt233, %104, !dbg !2483
  br i1 %eq234, label %switch.case235, label %next_if, !dbg !2483

switch.case235:                                   ; preds = %switch.entry232
  %106 = load i32, ptr %x, align 4, !dbg !2485
  %mul = mul i32 %106, 16, !dbg !2485
  %107 = load i32, ptr %d, align 4, !dbg !2485
  %add236 = add i32 %mul, %107, !dbg !2485
  store i32 %add236, ptr %x, align 4, !dbg !2485
  br label %switch.exit251, !dbg !2485

next_if:                                          ; preds = %switch.entry232
  %108 = load i64, ptr %dc, align 8, !dbg !2487
  %lt237 = icmp slt i64 %108, 14, !dbg !2487
  %eq238 = icmp eq i1 %lt237, %104, !dbg !2487
  br i1 %eq238, label %switch.case239, label %next_if242, !dbg !2487

switch.case239:                                   ; preds = %next_if
  %109 = load double, ptr %y, align 8, !dbg !2488
  %110 = load i32, ptr %d, align 4, !dbg !2488
  %sifp240 = sitofp i32 %110 to double, !dbg !2488
  %111 = load double, ptr %scale, align 8, !dbg !2488
  %fdiv = fdiv double %111, 1.600000e+01, !dbg !2488
  store double %fdiv, ptr %scale, align 8, !dbg !2488
  %fmul241 = fmul double %sifp240, %fdiv, !dbg !2488
  %fadd = fadd double %109, %fmul241, !dbg !2488
  store double %fadd, ptr %y, align 8, !dbg !2488
  store i8 1, ptr %got_tail, align 1, !dbg !2490
  br label %switch.exit251, !dbg !2490

next_if242:                                       ; preds = %next_if
  %112 = load i32, ptr %d, align 4, !dbg !2491
  %i2b = icmp ne i32 %112, 0, !dbg !2491
  br i1 %i2b, label %and.rhs243, label %and.phi244, !dbg !2491

and.rhs243:                                       ; preds = %next_if242
  %113 = load i8, ptr %got_tail, align 1, !dbg !2491
  %114 = trunc i8 %113 to i1, !dbg !2491
  %not = xor i1 %114, true, !dbg !2491
  br label %and.phi244, !dbg !2491

and.phi244:                                       ; preds = %and.rhs243, %next_if242
  %val245 = phi i1 [ false, %next_if242 ], [ %not, %and.rhs243 ], !dbg !2491
  %eq246 = icmp eq i1 %val245, %104, !dbg !2491
  br i1 %eq246, label %switch.case247, label %next_if250, !dbg !2491

switch.case247:                                   ; preds = %and.phi244
  %115 = load double, ptr %y, align 8, !dbg !2492
  %116 = load double, ptr %scale, align 8, !dbg !2492
  %fmul248 = fmul double 5.000000e-01, %116, !dbg !2492
  %fadd249 = fadd double %115, %fmul248, !dbg !2492
  store double %fadd249, ptr %y, align 8, !dbg !2492
  store i8 1, ptr %got_tail, align 1, !dbg !2494
  br label %switch.exit251, !dbg !2494

next_if250:                                       ; preds = %and.phi244
  br label %switch.exit251, !dbg !2494

switch.exit251:                                   ; preds = %next_if250, %switch.case247, %switch.case239, %switch.case235
  %117 = load i64, ptr %dc, align 8, !dbg !2495
  %add252 = add i64 %117, 1, !dbg !2495
  store i64 %add252, ptr %dc, align 8, !dbg !2495
  br label %if.exit253, !dbg !2495

if.exit253:                                       ; preds = %switch.exit251, %if.exit221
  %118 = load i64, ptr %index, align 8, !dbg !2496
  %119 = load i64, ptr %last_char, align 8, !dbg !2496
  %eq254 = icmp eq i64 %118, %119, !dbg !2496
  br i1 %eq254, label %if.then255, label %if.exit256, !dbg !2496

if.then255:                                       ; preds = %if.exit253
  br label %loop.exit272, !dbg !2496

if.exit256:                                       ; preds = %if.exit253
  %ptradd257 = getelementptr inbounds i8, ptr %chars124, i64 8, !dbg !2497
  %120 = load i64, ptr %ptradd257, align 8, !dbg !2497
  %121 = load ptr, ptr %chars124, align 8, !dbg !2497
  %122 = load i64, ptr %index, align 8, !dbg !2497
  %add258 = add i64 %122, 1, !dbg !2497
  store i64 %add258, ptr %index, align 8, !dbg !2497
  %ge259 = icmp uge i64 %add258, %120, !dbg !2497
  %123 = call i1 @llvm.expect.i1(i1 %ge259, i1 false), !dbg !2497
  br i1 %123, label %panic260, label %checkok270, !dbg !2497

checkok270:                                       ; preds = %if.exit256
  %ptradd271 = getelementptr inbounds i8, ptr %121, i64 %add258, !dbg !2497
  %124 = load i8, ptr %ptradd271, align 1, !dbg !2497
  store i8 %124, ptr %c, align 1, !dbg !2497
  br label %loop.cond202, !dbg !2497

loop.exit272:                                     ; preds = %if.then255, %or.phi215
  %125 = load i8, ptr %got_digit, align 1, !dbg !2498
  %126 = trunc i8 %125 to i1, !dbg !2498
  br i1 %126, label %if.exit274, label %if.else273, !dbg !2498

if.else273:                                       ; preds = %loop.exit272
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_FLOAT to i64), ptr %reterr, align 8, !dbg !2498
  br label %err_retblock, !dbg !2498

if.exit274:                                       ; preds = %loop.exit272
  %127 = load i8, ptr %got_rad, align 1, !dbg !2499
  %128 = trunc i8 %127 to i1, !dbg !2499
  br i1 %128, label %if.exit276, label %if.else275, !dbg !2499

if.else275:                                       ; preds = %if.exit274
  %129 = load i64, ptr %dc, align 8, !dbg !2499
  store i64 %129, ptr %rp, align 8, !dbg !2499
  br label %if.exit276, !dbg !2499

if.exit276:                                       ; preds = %if.else275, %if.exit274
  br label %loop.cond277, !dbg !2500

loop.cond277:                                     ; preds = %loop.body279, %if.exit276
  %130 = load i64, ptr %dc, align 8, !dbg !2501
  %lt278 = icmp slt i64 %130, 8, !dbg !2501
  br i1 %lt278, label %loop.body279, label %loop.exit282, !dbg !2501

loop.body279:                                     ; preds = %loop.cond277
  %131 = load i32, ptr %x, align 4, !dbg !2501
  %mul280 = mul i32 %131, 16, !dbg !2501
  store i32 %mul280, ptr %x, align 4, !dbg !2501
  %132 = load i64, ptr %dc, align 8, !dbg !2501
  %add281 = add i64 %132, 1, !dbg !2501
  store i64 %add281, ptr %dc, align 8, !dbg !2501
  br label %loop.cond277, !dbg !2501

loop.exit282:                                     ; preds = %loop.cond277
    #dbg_declare(ptr %e2, !2503, !DIExpression(), !2504)
  store i64 0, ptr %e2, align 8, !dbg !2504
  %133 = load i8, ptr %c, align 1, !dbg !2505
  %zext283 = zext i8 %133 to i32, !dbg !2505
  %or284 = or i32 %zext283, 32, !dbg !2505
  %eq285 = icmp eq i32 %or284, 112, !dbg !2505
  %check286 = icmp sge i32 %or284, 0, !dbg !2505
  %siui-eq287 = and i1 %check286, %eq285, !dbg !2505
  br i1 %siui-eq287, label %if.then288, label %if.exit314, !dbg !2505

if.then288:                                       ; preds = %loop.exit282
    #dbg_declare(ptr %e2val, !2506, !DIExpression(), !2508)
  %134 = load %"char[]", ptr %chars124, align 8, !dbg !2508
  %135 = extractvalue %"char[]" %134, 0, !dbg !2508
  %136 = load i64, ptr %index, align 8, !dbg !2508
  %add289 = add i64 %136, 1, !dbg !2508
  %137 = extractvalue %"char[]" %134, 1, !dbg !2508
  %gt290 = icmp sgt i64 %add289, %137, !dbg !2508
  %138 = call i1 @llvm.expect.i1(i1 %gt290, i1 false), !dbg !2508
  br i1 %138, label %panic291, label %checkok301, !dbg !2508

checkok301:                                       ; preds = %if.then288
  %underflow = icmp slt i64 %add289, 0, !dbg !2508
  %139 = call i1 @llvm.expect.i1(i1 %underflow, i1 false), !dbg !2508
  br i1 %139, label %panic302, label %checkok310, !dbg !2508

checkok310:                                       ; preds = %checkok301
  %size311 = sub i64 %137, %add289, !dbg !2508
  %ptradd312 = getelementptr inbounds i8, ptr %135, i64 %add289, !dbg !2508
  %140 = insertvalue %"char[]" undef, ptr %ptradd312, 0, !dbg !2508
  %141 = insertvalue %"char[]" %140, i64 %size311, 1, !dbg !2508
  store %"char[]" %141, ptr %indirectarg313, align 8
  %142 = call i64 @std.core.String.to_long(ptr %retparam, ptr align 8 %indirectarg313, i32 10), !dbg !2508
  %not_err = icmp eq i64 %142, 0, !dbg !2508
  %143 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !2508
  br i1 %143, label %after_check, label %else_block, !dbg !2508

after_check:                                      ; preds = %checkok310
  %144 = load i64, ptr %retparam, align 8, !dbg !2508
  br label %phi_block, !dbg !2508

else_block:                                       ; preds = %checkok310
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_FLOAT to i64), ptr %error_var, align 8, !dbg !2508
  br label %guard_block, !dbg !2508

guard_block:                                      ; preds = %else_block
  %145 = load i64, ptr %error_var, align 8, !dbg !2508
  store i64 %145, ptr %reterr, align 8, !dbg !2508
  br label %err_retblock, !dbg !2508

phi_block:                                        ; preds = %after_check
  store i64 %144, ptr %e2val, align 8, !dbg !2508
  %146 = load i64, ptr %e2val, align 8, !dbg !2509
  store i64 %146, ptr %e2, align 8, !dbg !2509
  br label %if.exit314, !dbg !2509

if.exit314:                                       ; preds = %phi_block, %loop.exit282
  %147 = load i64, ptr %e2, align 8, !dbg !2510
  %148 = load i64, ptr %rp, align 8, !dbg !2510
  %mul315 = mul i64 4, %148, !dbg !2510
  %sub316 = sub i64 %mul315, 32, !dbg !2510
  %add317 = add i64 %147, %sub316, !dbg !2510
  store i64 %add317, ptr %e2, align 8, !dbg !2510
  %149 = load i32, ptr %x, align 4, !dbg !2511
  %i2nb318 = icmp eq i32 %149, 0, !dbg !2511
  br i1 %i2nb318, label %if.then319, label %if.exit322, !dbg !2511

if.then319:                                       ; preds = %if.exit314
  %150 = load i32, ptr %sign125, align 4, !dbg !2511
  %sifp320 = sitofp i32 %150 to double, !dbg !2511
  %fmul321 = fmul double %sifp320, 0.000000e+00, !dbg !2511
  store double %fmul321, ptr %blockret126, align 8, !dbg !2511
  br label %expr_block.exit, !dbg !2511

if.exit322:                                       ; preds = %if.exit314
  %151 = load i64, ptr %e2, align 8, !dbg !2512
  %gt323 = icmp sgt i64 %151, 149, !dbg !2512
  br i1 %gt323, label %if.then324, label %if.exit325, !dbg !2512

if.then324:                                       ; preds = %if.exit322
  store i64 ptrtoint (ptr @std.core.string.FLOAT_OUT_OF_RANGE to i64), ptr %reterr, align 8, !dbg !2512
  br label %err_retblock, !dbg !2512

if.exit325:                                       ; preds = %if.exit322
  %152 = load i64, ptr %e2, align 8, !dbg !2513
  %lt326 = icmp slt i64 %152, -255, !dbg !2513
  br i1 %lt326, label %if.then327, label %if.exit328, !dbg !2513

if.then327:                                       ; preds = %if.exit325
  store i64 ptrtoint (ptr @std.core.string.FLOAT_OUT_OF_RANGE to i64), ptr %reterr, align 8, !dbg !2513
  br label %err_retblock, !dbg !2513

if.exit328:                                       ; preds = %if.exit325
  br label %loop.cond329, !dbg !2514

loop.cond329:                                     ; preds = %if.exit340, %if.exit328
  %153 = load i32, ptr %x, align 4, !dbg !2515
  %lt330 = icmp ult i32 %153, -2147483648, !dbg !2515
  br i1 %lt330, label %loop.body331, label %loop.exit342, !dbg !2515

loop.body331:                                     ; preds = %loop.cond329
  %154 = load double, ptr %y, align 8, !dbg !2517
  %ge332 = fcmp oge double %154, 5.000000e-01, !dbg !2517
  br i1 %ge332, label %if.then333, label %if.else337, !dbg !2517

if.then333:                                       ; preds = %loop.body331
  %155 = load i32, ptr %x, align 4, !dbg !2519
  %156 = load i32, ptr %x, align 4, !dbg !2519
  %add334 = add i32 %156, 1, !dbg !2519
  %add335 = add i32 %155, %add334, !dbg !2519
  store i32 %add335, ptr %x, align 4, !dbg !2519
  %157 = load double, ptr %y, align 8, !dbg !2521
  %158 = load double, ptr %y, align 8, !dbg !2521
  %fsub = fsub double %158, 1.000000e+00, !dbg !2521
  %fadd336 = fadd double %157, %fsub, !dbg !2521
  store double %fadd336, ptr %y, align 8, !dbg !2521
  br label %if.exit340, !dbg !2521

if.else337:                                       ; preds = %loop.body331
  %159 = load i32, ptr %x, align 4, !dbg !2522
  %160 = load i32, ptr %x, align 4, !dbg !2522
  %add338 = add i32 %159, %160, !dbg !2522
  store i32 %add338, ptr %x, align 4, !dbg !2522
  %161 = load double, ptr %y, align 8, !dbg !2524
  %162 = load double, ptr %y, align 8, !dbg !2524
  %fadd339 = fadd double %161, %162, !dbg !2524
  store double %fadd339, ptr %y, align 8, !dbg !2524
  br label %if.exit340, !dbg !2524

if.exit340:                                       ; preds = %if.else337, %if.then333
  %163 = load i64, ptr %e2, align 8, !dbg !2525
  %sub341 = sub i64 %163, 1, !dbg !2525
  store i64 %sub341, ptr %e2, align 8, !dbg !2525
  br label %loop.cond329, !dbg !2525

loop.exit342:                                     ; preds = %loop.cond329
    #dbg_declare(ptr %bits, !2526, !DIExpression(), !2527)
  store i32 24, ptr %bits, align 4, !dbg !2527
  %164 = load i64, ptr %e2, align 8, !dbg !2528
  %add343 = add i64 32, %164, !dbg !2528
  %sub344 = sub i64 %add343, -149, !dbg !2528
  %gt345 = icmp sgt i64 24, %sub344, !dbg !2528
  br i1 %gt345, label %if.then346, label %if.exit352, !dbg !2528

if.then346:                                       ; preds = %loop.exit342
  %165 = load i64, ptr %e2, align 8, !dbg !2529
  %add347 = add i64 32, %165, !dbg !2529
  %sub348 = sub i64 %add347, -149, !dbg !2529
  %trunc = trunc i64 %sub348 to i32, !dbg !2529
  store i32 %trunc, ptr %bits, align 4, !dbg !2529
  %166 = load i32, ptr %bits, align 4, !dbg !2531
  %lt349 = icmp slt i32 %166, 0, !dbg !2531
  br i1 %lt349, label %if.then350, label %if.exit351, !dbg !2531

if.then350:                                       ; preds = %if.then346
  store i32 0, ptr %bits, align 4, !dbg !2531
  br label %if.exit351, !dbg !2531

if.exit351:                                       ; preds = %if.then350, %if.then346
  br label %if.exit352, !dbg !2531

if.exit352:                                       ; preds = %if.exit351, %loop.exit342
    #dbg_declare(ptr %bias, !2532, !DIExpression(), !2533)
  store double 0.000000e+00, ptr %bias, align 8, !dbg !2533
  %167 = load i32, ptr %bits, align 4, !dbg !2534
  %lt353 = icmp slt i32 %167, 53, !dbg !2534
  br i1 %lt353, label %if.then354, label %if.exit362, !dbg !2534

if.then354:                                       ; preds = %if.exit352
  store double 1.000000e+00, ptr %x355, align 8
  %168 = load i32, ptr %bits, align 4, !dbg !2535
  %sub356 = sub i32 85, %168, !dbg !2535
  %sub357 = sub i32 %sub356, 1, !dbg !2535
  store i32 %sub357, ptr %n, align 4
  %169 = load double, ptr %x355, align 8, !dbg !2537
  %170 = load i32, ptr %n, align 4, !dbg !2537
  %171 = call double @scalbn(double %169, i32 %170), !dbg !2537
  store double %171, ptr %mag, align 8
  %172 = load i32, ptr %sign125, align 4, !dbg !2535
  %sifp358 = sitofp i32 %172 to double, !dbg !2535
  store double %sifp358, ptr %sgn, align 8
  %173 = load double, ptr %mag, align 8
  store double %173, ptr %x359, align 8
  %174 = load double, ptr %sgn, align 8
  store double %174, ptr %y360, align 8
  %175 = load double, ptr %x359, align 8, !dbg !2539
  %176 = load double, ptr %sgn, align 8, !dbg !2541
  %177 = call double @llvm.copysign.f64(double %175, double %176), !dbg !2541
  store double %177, ptr %bias, align 8, !dbg !2541
  br label %if.exit362, !dbg !2541

if.exit362:                                       ; preds = %if.then354, %if.exit352
  %178 = load i32, ptr %bits, align 4, !dbg !2543
  %lt363 = icmp slt i32 %178, 32, !dbg !2543
  br i1 %lt363, label %and.rhs364, label %and.phi366, !dbg !2543

and.rhs364:                                       ; preds = %if.exit362
  %179 = load double, ptr %y, align 8, !dbg !2543
  %neq365 = fcmp one double %179, 0.000000e+00, !dbg !2543
  br label %and.phi366, !dbg !2543

and.phi366:                                       ; preds = %and.rhs364, %if.exit362
  %val367 = phi i1 [ false, %if.exit362 ], [ %neq365, %and.rhs364 ], !dbg !2543
  br i1 %val367, label %and.rhs368, label %and.phi370, !dbg !2543

and.rhs368:                                       ; preds = %and.phi366
  %180 = load i32, ptr %x, align 4, !dbg !2543
  %and = and i32 %180, 1, !dbg !2543
  %i2nb369 = icmp eq i32 %and, 0, !dbg !2543
  br label %and.phi370, !dbg !2543

and.phi370:                                       ; preds = %and.rhs368, %and.phi366
  %val371 = phi i1 [ false, %and.phi366 ], [ %i2nb369, %and.rhs368 ], !dbg !2543
  br i1 %val371, label %if.then372, label %if.exit374, !dbg !2543

if.then372:                                       ; preds = %and.phi370
  %181 = load i32, ptr %x, align 4, !dbg !2544
  %add373 = add i32 %181, 1, !dbg !2544
  store i32 %add373, ptr %x, align 4, !dbg !2544
  store double 0.000000e+00, ptr %y, align 8, !dbg !2546
  br label %if.exit374, !dbg !2546

if.exit374:                                       ; preds = %if.then372, %and.phi370
  %182 = load double, ptr %bias, align 8, !dbg !2547
  %183 = load i32, ptr %sign125, align 4, !dbg !2547
  %sifp375 = sitofp i32 %183 to double, !dbg !2547
  %184 = load i32, ptr %x, align 4, !dbg !2547
  %uifp = uitofp i32 %184 to double, !dbg !2547
  %fmul376 = fmul double %sifp375, %uifp, !dbg !2547
  %fadd377 = fadd double %182, %fmul376, !dbg !2547
  %185 = load i32, ptr %sign125, align 4, !dbg !2547
  %sifp378 = sitofp i32 %185 to double, !dbg !2547
  %186 = load double, ptr %y, align 8, !dbg !2547
  %fmul379 = fmul double %sifp378, %186, !dbg !2547
  %fadd380 = fadd double %fadd377, %fmul379, !dbg !2547
  store double %fadd380, ptr %y, align 8, !dbg !2547
  %187 = load double, ptr %y, align 8, !dbg !2548
  %188 = load double, ptr %bias, align 8, !dbg !2548
  %fsub381 = fsub double %187, %188, !dbg !2548
  store double %fsub381, ptr %y, align 8, !dbg !2548
  %189 = load double, ptr %y, align 8, !dbg !2549
  %neq382 = fcmp one double %189, 0.000000e+00, !dbg !2549
  br i1 %neq382, label %if.exit384, label %if.else383, !dbg !2549

if.else383:                                       ; preds = %if.exit374
  store i64 ptrtoint (ptr @std.core.string.FLOAT_OUT_OF_RANGE to i64), ptr %reterr, align 8, !dbg !2549
  br label %err_retblock, !dbg !2549

if.exit384:                                       ; preds = %if.exit374
  %190 = load double, ptr %y, align 8
  store double %190, ptr %x385, align 8
  %191 = load i64, ptr %e2, align 8, !dbg !2550
  %trunc386 = trunc i64 %191 to i32, !dbg !2550
  store i32 %trunc386, ptr %n387, align 4
  %192 = load double, ptr %x385, align 8, !dbg !2551
  %193 = load i32, ptr %n387, align 4, !dbg !2551
  %194 = call double @scalbn(double %192, i32 %193), !dbg !2551
  store double %194, ptr %blockret126, align 8, !dbg !2551
  br label %expr_block.exit, !dbg !2551

expr_block.exit:                                  ; preds = %if.exit384, %if.then319, %if.exit150, %if.then144
  %195 = load double, ptr %blockret126, align 8, !dbg !2551
  %fpfptrunc = fptrunc double %195 to float, !dbg !2551
  store float %fpfptrunc, ptr %blockret, align 4, !dbg !2551
  br label %expr_block.exit1919, !dbg !2551

if.exit389:                                       ; preds = %and.phi107
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %chars390, ptr align 8 %chars, i32 16, i1 false)
  %196 = load i32, ptr %sign, align 4
  store i32 %196, ptr %sign391, align 4
  %ptradd393 = getelementptr inbounds i8, ptr %chars390, i64 8, !dbg !2553
  %197 = load i64, ptr %ptradd393, align 8, !dbg !2553
  %lt394 = icmp ult i64 0, %197, !dbg !2557
  br i1 %lt394, label %assert_ok, label %assert_fail, !dbg !2557

assert_fail:                                      ; preds = %if.exit389
  store %"char[]" { ptr @.panic_msg.108, i64 34 }, ptr %indirectarg395, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg396, align 8
  store %"char[]" { ptr @.func.115, i64 8 }, ptr %indirectarg397, align 8
  %198 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %198(ptr align 8 %indirectarg395, ptr align 8 %indirectarg396, ptr align 8 %indirectarg397, i32 489) #6, !dbg !2557
  unreachable, !dbg !2557

assert_ok:                                        ; preds = %if.exit389
    #dbg_declare(ptr %x398, !2558, !DIExpression(), !2559)
  call void @llvm.memset.p0.i64(ptr align 16 %x398, i8 0, i64 512, i1 false), !dbg !2559
    #dbg_declare(ptr %emax, !2560, !DIExpression(), !2561)
  store i32 128, ptr %emax, align 4, !dbg !2561
    #dbg_declare(ptr %index399, !2562, !DIExpression(), !2563)
  store i64 0, ptr %index399, align 8, !dbg !2563
    #dbg_declare(ptr %got_digit400, !2564, !DIExpression(), !2565)
  %ptradd401 = getelementptr inbounds i8, ptr %chars390, i64 8, !dbg !2565
  %199 = load i64, ptr %ptradd401, align 8, !dbg !2565
  %200 = load ptr, ptr %chars390, align 8, !dbg !2565
  %ge402 = icmp sge i64 0, %199, !dbg !2565
  %201 = call i1 @llvm.expect.i1(i1 %ge402, i1 false), !dbg !2565
  br i1 %201, label %panic403, label %checkok413, !dbg !2565

checkok413:                                       ; preds = %assert_ok
  %202 = load i8, ptr %200, align 1, !dbg !2565
  %eq414 = icmp eq i8 %202, 48, !dbg !2565
  %203 = zext i1 %eq414 to i8, !dbg !2565
  store i8 %203, ptr %got_digit400, align 1, !dbg !2565
    #dbg_declare(ptr %got_rad415, !2566, !DIExpression(), !2567)
  store i8 0, ptr %got_rad415, align 1, !dbg !2567
    #dbg_declare(ptr %lrp, !2568, !DIExpression(), !2569)
  store i64 0, ptr %lrp, align 8, !dbg !2569
    #dbg_declare(ptr %dc416, !2570, !DIExpression(), !2569)
  store i64 0, ptr %dc416, align 8, !dbg !2569
    #dbg_declare(ptr %k, !2571, !DIExpression(), !2572)
  store i32 0, ptr %k, align 4, !dbg !2572
    #dbg_declare(ptr %j, !2573, !DIExpression(), !2572)
  store i32 0, ptr %j, align 4, !dbg !2572
    #dbg_declare(ptr %lnz, !2574, !DIExpression(), !2572)
  store i32 0, ptr %lnz, align 4, !dbg !2572
    #dbg_declare(ptr %len417, !2575, !DIExpression(), !2576)
  %ptradd418 = getelementptr inbounds i8, ptr %chars390, i64 8, !dbg !2576
  %204 = load i64, ptr %ptradd418, align 8, !dbg !2576
  store i64 %204, ptr %len417, align 8, !dbg !2576
    #dbg_declare(ptr %last_char419, !2577, !DIExpression(), !2578)
  %205 = load i64, ptr %len417, align 8, !dbg !2578
  %sub420 = sub i64 %205, 1, !dbg !2578
  store i64 %sub420, ptr %last_char419, align 8, !dbg !2578
  %206 = load i64, ptr %len417, align 8, !dbg !2579
  %i2b421 = icmp ne i64 %206, 0, !dbg !2579
  br i1 %i2b421, label %assert_ok426, label %assert_fail422, !dbg !2579

assert_fail422:                                   ; preds = %checkok413
  store %"char[]" { ptr @.panic_msg.109, i64 20 }, ptr %indirectarg423, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg424, align 8
  store %"char[]" { ptr @.func.115, i64 8 }, ptr %indirectarg425, align 8
  %207 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %207(ptr align 8 %indirectarg423, ptr align 8 %indirectarg424, ptr align 8 %indirectarg425, i32 52) #6, !dbg !2579
  unreachable, !dbg !2579

assert_ok426:                                     ; preds = %checkok413
    #dbg_declare(ptr %c427, !2580, !DIExpression(), !2581)
  br label %loop.cond428, !dbg !2582

loop.cond428:                                     ; preds = %if.exit449, %assert_ok426
  %ptradd429 = getelementptr inbounds i8, ptr %chars390, i64 8, !dbg !2583
  %208 = load i64, ptr %ptradd429, align 8, !dbg !2583
  %209 = load ptr, ptr %chars390, align 8, !dbg !2583
  %210 = load i64, ptr %index399, align 8, !dbg !2583
  %ge430 = icmp uge i64 %210, %208, !dbg !2583
  %211 = call i1 @llvm.expect.i1(i1 %ge430, i1 false), !dbg !2583
  br i1 %211, label %panic431, label %checkok441, !dbg !2583

checkok441:                                       ; preds = %loop.cond428
  %ptradd442 = getelementptr inbounds i8, ptr %209, i64 %210, !dbg !2583
  %212 = load i8, ptr %ptradd442, align 1, !dbg !2583
  store i8 %212, ptr %c427, align 1, !dbg !2583
  %eq443 = icmp eq i8 %212, 48, !dbg !2583
  br i1 %eq443, label %loop.body444, label %loop.exit451, !dbg !2583

loop.body444:                                     ; preds = %checkok441
  %213 = load i64, ptr %index399, align 8, !dbg !2585
  %214 = load i64, ptr %last_char419, align 8, !dbg !2585
  %eq445 = icmp eq i64 %213, %214, !dbg !2585
  br i1 %eq445, label %if.then446, label %if.exit449, !dbg !2585

if.then446:                                       ; preds = %loop.body444
  %215 = load i32, ptr %sign391, align 4, !dbg !2585
  %sifp447 = sitofp i32 %215 to double, !dbg !2585
  %fmul448 = fmul double %sifp447, 0.000000e+00, !dbg !2585
  store double %fmul448, ptr %blockret392, align 8, !dbg !2585
  br label %expr_block.exit1917, !dbg !2585

if.exit449:                                       ; preds = %loop.body444
  %216 = load i64, ptr %index399, align 8, !dbg !2587
  %add450 = add i64 %216, 1, !dbg !2587
  store i64 %add450, ptr %index399, align 8, !dbg !2587
  br label %loop.cond428, !dbg !2587

loop.exit451:                                     ; preds = %checkok441
  %217 = load i8, ptr %c427, align 1, !dbg !2588
  %eq452 = icmp eq i8 %217, 46, !dbg !2588
  br i1 %eq452, label %if.then453, label %if.exit508, !dbg !2588

if.then453:                                       ; preds = %loop.exit451
  store i8 1, ptr %got_rad415, align 1, !dbg !2589
  %218 = load i64, ptr %index399, align 8, !dbg !2591
  %219 = load i64, ptr %last_char419, align 8, !dbg !2591
  %eq454 = icmp eq i64 %218, %219, !dbg !2591
  br i1 %eq454, label %if.then455, label %if.exit460, !dbg !2591

if.then455:                                       ; preds = %if.then453
  %220 = load i8, ptr %got_digit400, align 1, !dbg !2592
  %221 = trunc i8 %220 to i1, !dbg !2592
  br i1 %221, label %if.exit457, label %if.else456, !dbg !2592

if.else456:                                       ; preds = %if.then455
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_FLOAT to i64), ptr %reterr, align 8, !dbg !2592
  br label %err_retblock, !dbg !2592

if.exit457:                                       ; preds = %if.then455
  %222 = load i32, ptr %sign391, align 4, !dbg !2594
  %sifp458 = sitofp i32 %222 to double, !dbg !2594
  %fmul459 = fmul double %sifp458, 0.000000e+00, !dbg !2594
  store double %fmul459, ptr %blockret392, align 8, !dbg !2594
  br label %expr_block.exit1917, !dbg !2594

if.exit460:                                       ; preds = %if.then453
  %223 = load i64, ptr %index399, align 8, !dbg !2595
  %224 = load i64, ptr %last_char419, align 8, !dbg !2595
  %neq461 = icmp ne i64 %223, %224, !dbg !2595
  br i1 %neq461, label %and.rhs462, label %and.phi479, !dbg !2595

and.rhs462:                                       ; preds = %if.exit460
  %ptradd463 = getelementptr inbounds i8, ptr %chars390, i64 8, !dbg !2595
  %225 = load i64, ptr %ptradd463, align 8, !dbg !2595
  %226 = load ptr, ptr %chars390, align 8, !dbg !2595
  %227 = load i64, ptr %index399, align 8, !dbg !2595
  %add464 = add i64 %227, 1, !dbg !2595
  store i64 %add464, ptr %index399, align 8, !dbg !2595
  %ge465 = icmp uge i64 %add464, %225, !dbg !2595
  %228 = call i1 @llvm.expect.i1(i1 %ge465, i1 false), !dbg !2595
  br i1 %228, label %panic466, label %checkok476, !dbg !2595

checkok476:                                       ; preds = %and.rhs462
  %ptradd477 = getelementptr inbounds i8, ptr %226, i64 %add464, !dbg !2595
  %229 = load i8, ptr %ptradd477, align 1, !dbg !2595
  store i8 %229, ptr %c427, align 1, !dbg !2595
  %eq478 = icmp eq i8 %229, 48, !dbg !2595
  br label %and.phi479, !dbg !2595

and.phi479:                                       ; preds = %checkok476, %if.exit460
  %val480 = phi i1 [ false, %if.exit460 ], [ %eq478, %checkok476 ], !dbg !2595
  br i1 %val480, label %if.then481, label %if.exit507, !dbg !2595

if.then481:                                       ; preds = %and.phi479
  %230 = load i64, ptr %lrp, align 8, !dbg !2596
  %sub482 = sub i64 %230, 1, !dbg !2596
  store i64 %sub482, ptr %lrp, align 8, !dbg !2596
  store i8 1, ptr %got_digit400, align 1, !dbg !2598
  br label %loop.cond483, !dbg !2599

loop.cond483:                                     ; preds = %loop.body504, %if.then481
  %231 = load i64, ptr %last_char419, align 8, !dbg !2600
  %232 = load i64, ptr %index399, align 8, !dbg !2600
  %neq484 = icmp ne i64 %231, %232, !dbg !2600
  br i1 %neq484, label %and.rhs485, label %and.phi502, !dbg !2600

and.rhs485:                                       ; preds = %loop.cond483
  %ptradd486 = getelementptr inbounds i8, ptr %chars390, i64 8, !dbg !2600
  %233 = load i64, ptr %ptradd486, align 8, !dbg !2600
  %234 = load ptr, ptr %chars390, align 8, !dbg !2600
  %235 = load i64, ptr %index399, align 8, !dbg !2600
  %add487 = add i64 %235, 1, !dbg !2600
  store i64 %add487, ptr %index399, align 8, !dbg !2600
  %ge488 = icmp uge i64 %add487, %233, !dbg !2600
  %236 = call i1 @llvm.expect.i1(i1 %ge488, i1 false), !dbg !2600
  br i1 %236, label %panic489, label %checkok499, !dbg !2600

checkok499:                                       ; preds = %and.rhs485
  %ptradd500 = getelementptr inbounds i8, ptr %234, i64 %add487, !dbg !2600
  %237 = load i8, ptr %ptradd500, align 1, !dbg !2600
  store i8 %237, ptr %c427, align 1, !dbg !2600
  %eq501 = icmp eq i8 %237, 48, !dbg !2600
  br label %and.phi502, !dbg !2600

and.phi502:                                       ; preds = %checkok499, %loop.cond483
  %val503 = phi i1 [ false, %loop.cond483 ], [ %eq501, %checkok499 ], !dbg !2600
  br i1 %val503, label %loop.body504, label %loop.exit506, !dbg !2600

loop.body504:                                     ; preds = %and.phi502
  %238 = load i64, ptr %lrp, align 8, !dbg !2602
  %sub505 = sub i64 %238, 1, !dbg !2602
  store i64 %sub505, ptr %lrp, align 8, !dbg !2602
  br label %loop.cond483, !dbg !2602

loop.exit506:                                     ; preds = %and.phi502
  br label %if.exit507, !dbg !2602

if.exit507:                                       ; preds = %loop.exit506, %and.phi479
  br label %if.exit508, !dbg !2602

if.exit508:                                       ; preds = %if.exit507, %loop.exit451
  br label %loop.cond509, !dbg !2604

loop.cond509:                                     ; preds = %checkok649, %if.exit508
  %239 = load i8, ptr %c427, align 1, !dbg !2605
  %zext510 = zext i8 %239 to i32, !dbg !2605
  %sub511 = sub i32 %zext510, 48, !dbg !2605
  %lt512 = icmp ult i32 %sub511, 10, !dbg !2605
  br i1 %lt512, label %or.phi515, label %or.rhs513, !dbg !2605

or.rhs513:                                        ; preds = %loop.cond509
  %240 = load i8, ptr %c427, align 1, !dbg !2605
  %eq514 = icmp eq i8 %240, 46, !dbg !2605
  br label %or.phi515, !dbg !2605

or.phi515:                                        ; preds = %or.rhs513, %loop.cond509
  %val516 = phi i1 [ true, %loop.cond509 ], [ %eq514, %or.rhs513 ], !dbg !2605
  br i1 %val516, label %loop.body517, label %loop.exit651, !dbg !2605

loop.body517:                                     ; preds = %or.phi515
  store i8 1, ptr %switch518, align 1
  br label %switch.entry519

switch.entry519:                                  ; preds = %loop.body517
  %241 = load i8, ptr %switch518, align 1
  %242 = trunc i8 %241 to i1
  %243 = load i8, ptr %c427, align 1, !dbg !2607
  %eq520 = icmp eq i8 %243, 46, !dbg !2607
  %eq521 = icmp eq i1 %eq520, %242, !dbg !2607
  br i1 %eq521, label %switch.case522, label %next_if525, !dbg !2607

switch.case522:                                   ; preds = %switch.entry519
  %244 = load i8, ptr %got_rad415, align 1, !dbg !2610
  %245 = trunc i8 %244 to i1, !dbg !2610
  br i1 %245, label %if.then523, label %if.exit524, !dbg !2610

if.then523:                                       ; preds = %switch.case522
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_FLOAT to i64), ptr %reterr, align 8, !dbg !2610
  br label %err_retblock, !dbg !2610

if.exit524:                                       ; preds = %switch.case522
  store i8 1, ptr %got_rad415, align 1, !dbg !2612
  %246 = load i64, ptr %dc416, align 8, !dbg !2613
  store i64 %246, ptr %lrp, align 8, !dbg !2613
  br label %switch.exit626, !dbg !2613

next_if525:                                       ; preds = %switch.entry519
  %247 = load i32, ptr %k, align 4, !dbg !2614
  %lt526 = icmp slt i32 %247, 125, !dbg !2614
  %eq527 = icmp eq i1 %lt526, %242, !dbg !2614
  br i1 %eq527, label %switch.case528, label %next_if619, !dbg !2614

switch.case528:                                   ; preds = %next_if525
  %248 = load i64, ptr %dc416, align 8, !dbg !2615
  %add529 = add i64 %248, 1, !dbg !2615
  store i64 %add529, ptr %dc416, align 8, !dbg !2615
  %249 = load i8, ptr %c427, align 1, !dbg !2617
  %neq530 = icmp ne i8 %249, 48, !dbg !2617
  br i1 %neq530, label %if.then531, label %if.exit533, !dbg !2617

if.then531:                                       ; preds = %switch.case528
  %250 = load i64, ptr %dc416, align 8, !dbg !2617
  %trunc532 = trunc i64 %250 to i32, !dbg !2617
  store i32 %trunc532, ptr %lnz, align 4, !dbg !2617
  br label %if.exit533, !dbg !2617

if.exit533:                                       ; preds = %if.then531, %switch.case528
  %251 = load i32, ptr %j, align 4, !dbg !2618
  %i2b534 = icmp ne i32 %251, 0, !dbg !2618
  br i1 %i2b534, label %if.then535, label %if.else586, !dbg !2618

if.then535:                                       ; preds = %if.exit533
  %252 = load i32, ptr %k, align 4, !dbg !2619
  %sext = sext i32 %252 to i64, !dbg !2619
  %lt536 = icmp slt i64 %sext, 0, !dbg !2619
  %253 = call i1 @llvm.expect.i1(i1 %lt536, i1 false), !dbg !2619
  br i1 %253, label %panic537, label %checkok545, !dbg !2619

checkok545:                                       ; preds = %if.then535
  %ge546 = icmp sge i64 %sext, 128, !dbg !2619
  %254 = call i1 @llvm.expect.i1(i1 %ge546, i1 false), !dbg !2619
  br i1 %254, label %panic547, label %checkok557, !dbg !2619

checkok557:                                       ; preds = %checkok545
  %ptroffset = getelementptr inbounds [4 x i8], ptr %x398, i64 %sext, !dbg !2619
  %255 = load i32, ptr %ptroffset, align 4, !dbg !2619
  %mul558 = mul i32 %255, 10, !dbg !2619
  %256 = load i8, ptr %c427, align 1, !dbg !2619
  %zext559 = zext i8 %256 to i32, !dbg !2619
  %add560 = add i32 %mul558, %zext559, !dbg !2619
  %sub561 = sub i32 %add560, 48, !dbg !2619
  %257 = load i32, ptr %k, align 4, !dbg !2619
  %sext562 = sext i32 %257 to i64, !dbg !2619
  %lt563 = icmp slt i64 %sext562, 0, !dbg !2619
  %258 = call i1 @llvm.expect.i1(i1 %lt563, i1 false), !dbg !2619
  br i1 %258, label %panic564, label %checkok572, !dbg !2619

checkok572:                                       ; preds = %checkok557
  %ge573 = icmp sge i64 %sext562, 128, !dbg !2619
  %259 = call i1 @llvm.expect.i1(i1 %ge573, i1 false), !dbg !2619
  br i1 %259, label %panic574, label %checkok584, !dbg !2619

checkok584:                                       ; preds = %checkok572
  %ptroffset585 = getelementptr inbounds [4 x i8], ptr %x398, i64 %sext562, !dbg !2619
  store i32 %sub561, ptr %ptroffset585, align 4, !dbg !2619
  br label %if.exit613, !dbg !2619

if.else586:                                       ; preds = %if.exit533
  %260 = load i8, ptr %c427, align 1, !dbg !2621
  %zext587 = zext i8 %260 to i32, !dbg !2621
  %sub588 = sub i32 %zext587, 48, !dbg !2621
  %261 = load i32, ptr %k, align 4, !dbg !2621
  %sext589 = sext i32 %261 to i64, !dbg !2621
  %lt590 = icmp slt i64 %sext589, 0, !dbg !2621
  %262 = call i1 @llvm.expect.i1(i1 %lt590, i1 false), !dbg !2621
  br i1 %262, label %panic591, label %checkok599, !dbg !2621

checkok599:                                       ; preds = %if.else586
  %ge600 = icmp sge i64 %sext589, 128, !dbg !2621
  %263 = call i1 @llvm.expect.i1(i1 %ge600, i1 false), !dbg !2621
  br i1 %263, label %panic601, label %checkok611, !dbg !2621

checkok611:                                       ; preds = %checkok599
  %ptroffset612 = getelementptr inbounds [4 x i8], ptr %x398, i64 %sext589, !dbg !2621
  store i32 %sub588, ptr %ptroffset612, align 4, !dbg !2621
  br label %if.exit613, !dbg !2621

if.exit613:                                       ; preds = %checkok611, %checkok584
  %264 = load i32, ptr %j, align 4, !dbg !2623
  %add614 = add i32 %264, 1, !dbg !2623
  store i32 %add614, ptr %j, align 4, !dbg !2623
  %eq615 = icmp eq i32 %add614, 9, !dbg !2623
  br i1 %eq615, label %if.then616, label %if.exit618, !dbg !2623

if.then616:                                       ; preds = %if.exit613
  %265 = load i32, ptr %k, align 4, !dbg !2624
  %add617 = add i32 %265, 1, !dbg !2624
  store i32 %add617, ptr %k, align 4, !dbg !2624
  store i32 0, ptr %j, align 4, !dbg !2626
  br label %if.exit618, !dbg !2626

if.exit618:                                       ; preds = %if.then616, %if.exit613
  store i8 1, ptr %got_digit400, align 1, !dbg !2627
  br label %switch.exit626, !dbg !2627

next_if619:                                       ; preds = %next_if525
  br label %switch.default, !dbg !2627

switch.default:                                   ; preds = %next_if619
  %266 = load i64, ptr %dc416, align 8, !dbg !2628
  %add620 = add i64 %266, 1, !dbg !2628
  store i64 %add620, ptr %dc416, align 8, !dbg !2628
  %267 = load i8, ptr %c427, align 1, !dbg !2630
  %neq621 = icmp ne i8 %267, 48, !dbg !2630
  br i1 %neq621, label %if.then622, label %if.exit625, !dbg !2630

if.then622:                                       ; preds = %switch.default
  %ptradd623 = getelementptr inbounds i8, ptr %x398, i64 496, !dbg !2630
  %268 = load i32, ptr %ptradd623, align 4, !dbg !2630
  %or624 = or i32 %268, 1, !dbg !2630
  store i32 %or624, ptr %ptradd623, align 4, !dbg !2630
  br label %if.exit625, !dbg !2630

if.exit625:                                       ; preds = %if.then622, %switch.default
  br label %switch.exit626, !dbg !2630

switch.exit626:                                   ; preds = %if.exit625, %if.exit618, %if.exit524
  %269 = load i64, ptr %index399, align 8, !dbg !2631
  %270 = load i64, ptr %last_char419, align 8, !dbg !2631
  %eq627 = icmp eq i64 %269, %270, !dbg !2631
  br i1 %eq627, label %if.then628, label %if.exit629, !dbg !2631

if.then628:                                       ; preds = %switch.exit626
  br label %loop.exit651, !dbg !2631

if.exit629:                                       ; preds = %switch.exit626
  %271 = load i64, ptr %index399, align 8, !dbg !2632
  %272 = load i64, ptr %last_char419, align 8, !dbg !2632
  %lt630 = icmp ult i64 %271, %272, !dbg !2632
  br i1 %lt630, label %assert_ok635, label %assert_fail631, !dbg !2632

assert_fail631:                                   ; preds = %if.exit629
  store %"char[]" { ptr @.panic_msg.110, i64 34 }, ptr %indirectarg632, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg633, align 8
  store %"char[]" { ptr @.func.115, i64 8 }, ptr %indirectarg634, align 8
  %273 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %273(ptr align 8 %indirectarg632, ptr align 8 %indirectarg633, ptr align 8 %indirectarg634, i32 112) #6, !dbg !2632
  unreachable, !dbg !2632

assert_ok635:                                     ; preds = %if.exit629
  %ptradd636 = getelementptr inbounds i8, ptr %chars390, i64 8, !dbg !2633
  %274 = load i64, ptr %ptradd636, align 8, !dbg !2633
  %275 = load ptr, ptr %chars390, align 8, !dbg !2633
  %276 = load i64, ptr %index399, align 8, !dbg !2633
  %add637 = add i64 %276, 1, !dbg !2633
  store i64 %add637, ptr %index399, align 8, !dbg !2633
  %ge638 = icmp uge i64 %add637, %274, !dbg !2633
  %277 = call i1 @llvm.expect.i1(i1 %ge638, i1 false), !dbg !2633
  br i1 %277, label %panic639, label %checkok649, !dbg !2633

checkok649:                                       ; preds = %assert_ok635
  %ptradd650 = getelementptr inbounds i8, ptr %275, i64 %add637, !dbg !2633
  %278 = load i8, ptr %ptradd650, align 1, !dbg !2633
  store i8 %278, ptr %c427, align 1, !dbg !2633
  br label %loop.cond509, !dbg !2633

loop.exit651:                                     ; preds = %if.then628, %or.phi515
  %279 = load i8, ptr %got_rad415, align 1, !dbg !2634
  %280 = trunc i8 %279 to i1, !dbg !2634
  br i1 %280, label %if.exit653, label %if.else652, !dbg !2634

if.else652:                                       ; preds = %loop.exit651
  %281 = load i64, ptr %dc416, align 8, !dbg !2634
  store i64 %281, ptr %lrp, align 8, !dbg !2634
  br label %if.exit653, !dbg !2634

if.exit653:                                       ; preds = %if.else652, %loop.exit651
  %282 = load i8, ptr %got_digit400, align 1, !dbg !2635
  %283 = trunc i8 %282 to i1, !dbg !2635
  br i1 %283, label %if.exit655, label %if.else654, !dbg !2635

if.else654:                                       ; preds = %if.exit653
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_FLOAT to i64), ptr %reterr, align 8, !dbg !2635
  br label %err_retblock, !dbg !2635

if.exit655:                                       ; preds = %if.exit653
  %284 = load i8, ptr %c427, align 1, !dbg !2636
  %zext656 = zext i8 %284 to i32, !dbg !2636
  %or657 = or i32 %zext656, 32, !dbg !2636
  %eq658 = icmp eq i32 %or657, 101, !dbg !2636
  %check659 = icmp sge i32 %or657, 0, !dbg !2636
  %siui-eq660 = and i1 %check659, %eq658, !dbg !2636
  br i1 %siui-eq660, label %if.then661, label %if.else699, !dbg !2636

if.then661:                                       ; preds = %if.exit655
  %285 = load i64, ptr %last_char419, align 8, !dbg !2637
  %286 = load i64, ptr %index399, align 8, !dbg !2637
  %eq662 = icmp eq i64 %285, %286, !dbg !2637
  br i1 %eq662, label %if.then663, label %if.exit664, !dbg !2637

if.then663:                                       ; preds = %if.then661
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_FLOAT to i64), ptr %reterr, align 8, !dbg !2637
  br label %err_retblock, !dbg !2637

if.exit664:                                       ; preds = %if.then661
    #dbg_declare(ptr %e10, !2639, !DIExpression(), !2640)
  %287 = load %"char[]", ptr %chars390, align 8, !dbg !2640
  %288 = extractvalue %"char[]" %287, 0, !dbg !2640
  %289 = load i64, ptr %index399, align 8, !dbg !2640
  %add665 = add i64 %289, 1, !dbg !2640
  %290 = extractvalue %"char[]" %287, 1, !dbg !2640
  %gt666 = icmp sgt i64 %add665, %290, !dbg !2640
  %291 = call i1 @llvm.expect.i1(i1 %gt666, i1 false), !dbg !2640
  br i1 %291, label %panic667, label %checkok677, !dbg !2640

checkok677:                                       ; preds = %if.exit664
  %underflow678 = icmp slt i64 %add665, 0, !dbg !2640
  %292 = call i1 @llvm.expect.i1(i1 %underflow678, i1 false), !dbg !2640
  br i1 %292, label %panic679, label %checkok687, !dbg !2640

checkok687:                                       ; preds = %checkok677
  %size688 = sub i64 %290, %add665, !dbg !2640
  %ptradd689 = getelementptr inbounds i8, ptr %288, i64 %add665, !dbg !2640
  %293 = insertvalue %"char[]" undef, ptr %ptradd689, 0, !dbg !2640
  %294 = insertvalue %"char[]" %293, i64 %size688, 1, !dbg !2640
  store %"char[]" %294, ptr %indirectarg691, align 8
  %295 = call i64 @std.core.String.to_long(ptr %retparam690, ptr align 8 %indirectarg691, i32 10), !dbg !2640
  %not_err692 = icmp eq i64 %295, 0, !dbg !2640
  %296 = call i1 @llvm.expect.i1(i1 %not_err692, i1 true), !dbg !2640
  br i1 %296, label %after_check693, label %else_block694, !dbg !2640

after_check693:                                   ; preds = %checkok687
  %297 = load i64, ptr %retparam690, align 8, !dbg !2640
  br label %phi_block697, !dbg !2640

else_block694:                                    ; preds = %checkok687
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_FLOAT to i64), ptr %error_var695, align 8, !dbg !2640
  br label %guard_block696, !dbg !2640

guard_block696:                                   ; preds = %else_block694
  %298 = load i64, ptr %error_var695, align 8, !dbg !2640
  store i64 %298, ptr %reterr, align 8, !dbg !2640
  br label %err_retblock, !dbg !2640

phi_block697:                                     ; preds = %after_check693
  store i64 %297, ptr %e10, align 8, !dbg !2640
  %299 = load i64, ptr %lrp, align 8, !dbg !2641
  %300 = load i64, ptr %e10, align 8, !dbg !2641
  %add698 = add i64 %299, %300, !dbg !2641
  store i64 %add698, ptr %lrp, align 8, !dbg !2641
  br label %if.exit703, !dbg !2641

if.else699:                                       ; preds = %if.exit655
  %301 = load i64, ptr %index399, align 8, !dbg !2642
  %302 = load i64, ptr %last_char419, align 8, !dbg !2642
  %neq700 = icmp ne i64 %301, %302, !dbg !2642
  br i1 %neq700, label %if.then701, label %if.exit702, !dbg !2642

if.then701:                                       ; preds = %if.else699
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_FLOAT to i64), ptr %reterr, align 8, !dbg !2643
  br label %err_retblock, !dbg !2643

if.exit702:                                       ; preds = %if.else699
  br label %if.exit703, !dbg !2643

if.exit703:                                       ; preds = %if.exit702, %phi_block697
  %303 = load i32, ptr %x398, align 4, !dbg !2645
  %i2nb704 = icmp eq i32 %303, 0, !dbg !2645
  br i1 %i2nb704, label %if.then705, label %if.exit708, !dbg !2645

if.then705:                                       ; preds = %if.exit703
  %304 = load i32, ptr %sign391, align 4, !dbg !2645
  %sifp706 = sitofp i32 %304 to double, !dbg !2645
  %fmul707 = fmul double %sifp706, 0.000000e+00, !dbg !2645
  store double %fmul707, ptr %blockret392, align 8, !dbg !2645
  br label %expr_block.exit1917, !dbg !2645

if.exit708:                                       ; preds = %if.exit703
  %305 = load i64, ptr %lrp, align 8, !dbg !2646
  %306 = load i64, ptr %dc416, align 8, !dbg !2646
  %eq709 = icmp eq i64 %305, %306, !dbg !2646
  br i1 %eq709, label %and.rhs710, label %and.phi712, !dbg !2646

and.rhs710:                                       ; preds = %if.exit708
  %307 = load i64, ptr %dc416, align 8, !dbg !2646
  %lt711 = icmp slt i64 %307, 10, !dbg !2646
  br label %and.phi712, !dbg !2646

and.phi712:                                       ; preds = %and.rhs710, %if.exit708
  %val713 = phi i1 [ false, %if.exit708 ], [ %lt711, %and.rhs710 ], !dbg !2646
  br i1 %val713, label %and.rhs714, label %and.phi720, !dbg !2646

and.rhs714:                                       ; preds = %and.phi712
  br i1 false, label %or.phi718, label %or.rhs715, !dbg !2646

or.rhs715:                                        ; preds = %and.rhs714
  %308 = load i32, ptr %x398, align 4, !dbg !2646
  %zext716 = zext i32 %308 to i64, !dbg !2646
  %lshr = lshr i64 %zext716, 24, !dbg !2646
  %309 = freeze i64 %lshr, !dbg !2646
  %eq717 = icmp eq i64 0, %309, !dbg !2646
  br label %or.phi718, !dbg !2646

or.phi718:                                        ; preds = %or.rhs715, %and.rhs714
  %val719 = phi i1 [ true, %and.rhs714 ], [ %eq717, %or.rhs715 ], !dbg !2646
  br label %and.phi720, !dbg !2646

and.phi720:                                       ; preds = %or.phi718, %and.phi712
  %val721 = phi i1 [ false, %and.phi712 ], [ %val719, %or.phi718 ], !dbg !2646
  br i1 %val721, label %if.then722, label %if.exit726, !dbg !2646

if.then722:                                       ; preds = %and.phi720
  %310 = load i32, ptr %sign391, align 4, !dbg !2646
  %sifp723 = sitofp i32 %310 to double, !dbg !2646
  %311 = load i32, ptr %x398, align 4, !dbg !2646
  %uifp724 = uitofp i32 %311 to double, !dbg !2646
  %fmul725 = fmul double %sifp723, %uifp724, !dbg !2646
  store double %fmul725, ptr %blockret392, align 8, !dbg !2646
  br label %expr_block.exit1917, !dbg !2646

if.exit726:                                       ; preds = %and.phi720
  %312 = load i64, ptr %lrp, align 8, !dbg !2647
  %gt727 = icmp sgt i64 %312, 74, !dbg !2647
  br i1 %gt727, label %if.then728, label %if.exit729, !dbg !2647

if.then728:                                       ; preds = %if.exit726
  store i64 ptrtoint (ptr @std.core.string.FLOAT_OUT_OF_RANGE to i64), ptr %reterr, align 8, !dbg !2647
  br label %err_retblock, !dbg !2647

if.exit729:                                       ; preds = %if.exit726
  %313 = load i64, ptr %lrp, align 8, !dbg !2648
  %lt730 = icmp slt i64 %313, -255, !dbg !2648
  br i1 %lt730, label %if.then731, label %if.exit732, !dbg !2648

if.then731:                                       ; preds = %if.exit729
  store i64 ptrtoint (ptr @std.core.string.FLOAT_OUT_OF_RANGE to i64), ptr %reterr, align 8, !dbg !2648
  br label %err_retblock, !dbg !2648

if.exit732:                                       ; preds = %if.exit729
  %314 = load i32, ptr %j, align 4, !dbg !2649
  %i2b733 = icmp ne i32 %314, 0, !dbg !2649
  br i1 %i2b733, label %if.then734, label %if.exit766, !dbg !2649

if.then734:                                       ; preds = %if.exit732
  br label %loop.cond735, !dbg !2650

loop.cond735:                                     ; preds = %checkok760, %if.then734
  %315 = load i32, ptr %j, align 4, !dbg !2652
  %lt736 = icmp slt i32 %315, 9, !dbg !2652
  br i1 %lt736, label %loop.body737, label %loop.exit764, !dbg !2652

loop.body737:                                     ; preds = %loop.cond735
  %316 = load i32, ptr %k, align 4, !dbg !2652
  %sext738 = sext i32 %316 to i64, !dbg !2652
  %lt739 = icmp slt i64 %sext738, 0, !dbg !2652
  %317 = call i1 @llvm.expect.i1(i1 %lt739, i1 false), !dbg !2652
  br i1 %317, label %panic740, label %checkok748, !dbg !2652

checkok748:                                       ; preds = %loop.body737
  %ge749 = icmp sge i64 %sext738, 128, !dbg !2652
  %318 = call i1 @llvm.expect.i1(i1 %ge749, i1 false), !dbg !2652
  br i1 %318, label %panic750, label %checkok760, !dbg !2652

checkok760:                                       ; preds = %checkok748
  %ptroffset761 = getelementptr inbounds [4 x i8], ptr %x398, i64 %sext738, !dbg !2652
  %319 = load i32, ptr %ptroffset761, align 4, !dbg !2652
  %mul762 = mul i32 %319, 10, !dbg !2652
  store i32 %mul762, ptr %ptroffset761, align 4, !dbg !2652
  %320 = load i32, ptr %j, align 4, !dbg !2652
  %add763 = add i32 %320, 1, !dbg !2652
  store i32 %add763, ptr %j, align 4, !dbg !2652
  br label %loop.cond735, !dbg !2652

loop.exit764:                                     ; preds = %loop.cond735
  %321 = load i32, ptr %k, align 4, !dbg !2654
  %add765 = add i32 %321, 1, !dbg !2654
  store i32 %add765, ptr %k, align 4, !dbg !2654
  store i32 0, ptr %j, align 4, !dbg !2655
  br label %if.exit766, !dbg !2655

if.exit766:                                       ; preds = %loop.exit764, %if.exit732
    #dbg_declare(ptr %a, !2656, !DIExpression(), !2657)
  store i32 0, ptr %a, align 4, !dbg !2657
    #dbg_declare(ptr %z, !2658, !DIExpression(), !2659)
  %322 = load i32, ptr %k, align 4, !dbg !2659
  store i32 %322, ptr %z, align 4, !dbg !2659
    #dbg_declare(ptr %e2767, !2660, !DIExpression(), !2661)
  store i32 0, ptr %e2767, align 4, !dbg !2661
    #dbg_declare(ptr %rp768, !2662, !DIExpression(), !2663)
  %323 = load i64, ptr %lrp, align 8, !dbg !2663
  store i64 %323, ptr %rp768, align 8, !dbg !2663
  %324 = load i32, ptr %lnz, align 4, !dbg !2664
  %lt769 = icmp slt i32 %324, 9, !dbg !2664
  br i1 %lt769, label %and.rhs770, label %and.phi772, !dbg !2664

and.rhs770:                                       ; preds = %if.exit766
  %325 = load i32, ptr %lnz, align 4, !dbg !2664
  %sext771 = sext i32 %325 to i64, !dbg !2664
  %326 = load i64, ptr %rp768, align 8, !dbg !2664
  %le = icmp sle i64 %sext771, %326, !dbg !2664
  br label %and.phi772, !dbg !2664

and.phi772:                                       ; preds = %and.rhs770, %if.exit766
  %val773 = phi i1 [ false, %if.exit766 ], [ %le, %and.rhs770 ], !dbg !2664
  br i1 %val773, label %and.rhs774, label %and.phi776, !dbg !2664

and.rhs774:                                       ; preds = %and.phi772
  %327 = load i64, ptr %rp768, align 8, !dbg !2664
  %lt775 = icmp slt i64 %327, 18, !dbg !2664
  br label %and.phi776, !dbg !2664

and.phi776:                                       ; preds = %and.rhs774, %and.phi772
  %val777 = phi i1 [ false, %and.phi772 ], [ %lt775, %and.rhs774 ], !dbg !2664
  br i1 %val777, label %if.then778, label %if.exit872, !dbg !2664

if.then778:                                       ; preds = %and.phi776
  %328 = load i64, ptr %rp768, align 8, !dbg !2665
  %eq779 = icmp eq i64 %328, 9, !dbg !2665
  br i1 %eq779, label %if.then780, label %if.exit784, !dbg !2665

if.then780:                                       ; preds = %if.then778
  %329 = load i32, ptr %sign391, align 4, !dbg !2665
  %sifp781 = sitofp i32 %329 to double, !dbg !2665
  %330 = load i32, ptr %x398, align 4, !dbg !2665
  %uifp782 = uitofp i32 %330 to double, !dbg !2665
  %fmul783 = fmul double %sifp781, %uifp782, !dbg !2665
  store double %fmul783, ptr %blockret392, align 8, !dbg !2665
  br label %expr_block.exit1917, !dbg !2665

if.exit784:                                       ; preds = %if.then778
  %331 = load i64, ptr %rp768, align 8, !dbg !2667
  %lt785 = icmp slt i64 %331, 9, !dbg !2667
  br i1 %lt785, label %if.then786, label %if.exit821, !dbg !2667

if.then786:                                       ; preds = %if.exit784
  %332 = load i32, ptr %sign391, align 4, !dbg !2667
  %sifp787 = sitofp i32 %332 to double, !dbg !2667
  %333 = load i32, ptr %x398, align 4, !dbg !2667
  %uifp788 = uitofp i32 %333 to double, !dbg !2667
  %fmul789 = fmul double %sifp787, %uifp788, !dbg !2667
  %334 = load i64, ptr %rp768, align 8, !dbg !2667
  %sub790 = sub i64 8, %334, !dbg !2667
  %lt791 = icmp slt i64 %sub790, 0, !dbg !2667
  %335 = call i1 @llvm.expect.i1(i1 %lt791, i1 false), !dbg !2667
  br i1 %335, label %panic792, label %checkok800, !dbg !2667

checkok800:                                       ; preds = %if.then786
  %ge801 = icmp sge i64 %sub790, 8, !dbg !2667
  %336 = call i1 @llvm.expect.i1(i1 %ge801, i1 false), !dbg !2667
  br i1 %336, label %panic802, label %checkok812, !dbg !2667

checkok812:                                       ; preds = %checkok800
  %ptroffset813 = getelementptr inbounds [4 x i8], ptr @to_float.P10S, i64 %sub790, !dbg !2667
  %337 = load i32, ptr %ptroffset813, align 4, !dbg !2667
  %sifp814 = sitofp i32 %337 to double, !dbg !2667
  %zero = fcmp ueq double %sifp814, 0.000000e+00, !dbg !2667
  %338 = call i1 @llvm.expect.i1(i1 %zero, i1 false), !dbg !2667
  br i1 %338, label %panic815, label %checkok819, !dbg !2667

checkok819:                                       ; preds = %checkok812
  %fdiv820 = fdiv double %fmul789, %sifp814, !dbg !2667
  store double %fdiv820, ptr %blockret392, align 8, !dbg !2667
  br label %expr_block.exit1917, !dbg !2667

if.exit821:                                       ; preds = %if.exit784
    #dbg_declare(ptr %bitlim, !2668, !DIExpression(), !2669)
  %339 = load i64, ptr %rp768, align 8, !dbg !2669
  %sub822 = sub i64 %339, 9, !dbg !2669
  %trunc823 = trunc i64 %sub822 to i32, !dbg !2669
  %mul824 = mul i32 3, %trunc823, !dbg !2669
  %sub825 = sub i32 24, %mul824, !dbg !2669
  store i32 %sub825, ptr %bitlim, align 4, !dbg !2669
  %340 = load i32, ptr %bitlim, align 4, !dbg !2670
  %gt826 = icmp sgt i32 %340, 30, !dbg !2670
  br i1 %gt826, label %or.phi839, label %or.rhs827, !dbg !2670

or.rhs827:                                        ; preds = %if.exit821
  %341 = load i32, ptr %x398, align 4, !dbg !2670
  %342 = load i32, ptr %bitlim, align 4, !dbg !2670
  %shift_exceeds = icmp uge i32 %342, 32, !dbg !2670
  %343 = call i1 @llvm.expect.i1(i1 %shift_exceeds, i1 false), !dbg !2670
  br i1 %343, label %panic828, label %checkok836, !dbg !2670

checkok836:                                       ; preds = %or.rhs827
  %lshr837 = lshr i32 %341, %342, !dbg !2670
  %344 = freeze i32 %lshr837, !dbg !2670
  %eq838 = icmp eq i32 0, %344, !dbg !2670
  br label %or.phi839, !dbg !2670

or.phi839:                                        ; preds = %checkok836, %if.exit821
  %val840 = phi i1 [ true, %if.exit821 ], [ %eq838, %checkok836 ], !dbg !2670
  br i1 %val840, label %if.then841, label %if.exit871, !dbg !2670

if.then841:                                       ; preds = %or.phi839
  %345 = load i32, ptr %sign391, align 4, !dbg !2670
  %sifp842 = sitofp i32 %345 to double, !dbg !2670
  %346 = load i32, ptr %x398, align 4, !dbg !2670
  %uifp843 = uitofp i32 %346 to double, !dbg !2670
  %fmul844 = fmul double %sifp842, %uifp843, !dbg !2670
  %347 = load i64, ptr %rp768, align 8, !dbg !2670
  %sub845 = sub i64 %347, 10, !dbg !2670
  %lt846 = icmp slt i64 %sub845, 0, !dbg !2670
  %348 = call i1 @llvm.expect.i1(i1 %lt846, i1 false), !dbg !2670
  br i1 %348, label %panic847, label %checkok855, !dbg !2670

checkok855:                                       ; preds = %if.then841
  %ge856 = icmp sge i64 %sub845, 8, !dbg !2670
  %349 = call i1 @llvm.expect.i1(i1 %ge856, i1 false), !dbg !2670
  br i1 %349, label %panic857, label %checkok867, !dbg !2670

checkok867:                                       ; preds = %checkok855
  %ptroffset868 = getelementptr inbounds [4 x i8], ptr @to_float.P10S, i64 %sub845, !dbg !2670
  %350 = load i32, ptr %ptroffset868, align 4, !dbg !2670
  %sifp869 = sitofp i32 %350 to double, !dbg !2670
  %fmul870 = fmul double %fmul844, %sifp869, !dbg !2670
  store double %fmul870, ptr %blockret392, align 8, !dbg !2670
  br label %expr_block.exit1917, !dbg !2670

if.exit871:                                       ; preds = %or.phi839
  br label %if.exit872, !dbg !2670

if.exit872:                                       ; preds = %if.exit871, %and.phi776
  %351 = load i64, ptr %rp768, align 8, !dbg !2671
  %smod = srem i64 %351, 9, !dbg !2671
  %i2b873 = icmp ne i64 %smod, 0, !dbg !2671
  br i1 %i2b873, label %if.then874, label %if.exit1070, !dbg !2671

if.then874:                                       ; preds = %if.exit872
    #dbg_declare(ptr %rpm9, !2672, !DIExpression(), !2674)
  %352 = load i64, ptr %rp768, align 8, !dbg !2674
  %ge875 = icmp sge i64 %352, 0, !dbg !2674
  br i1 %ge875, label %cond.lhs876, label %cond.rhs878, !dbg !2674

cond.lhs876:                                      ; preds = %if.then874
  %353 = load i64, ptr %rp768, align 8, !dbg !2674
  %smod877 = srem i64 %353, 9, !dbg !2674
  br label %cond.phi881, !dbg !2674

cond.rhs878:                                      ; preds = %if.then874
  %354 = load i64, ptr %rp768, align 8, !dbg !2674
  %smod879 = srem i64 %354, 9, !dbg !2674
  %add880 = add i64 %smod879, 9, !dbg !2674
  br label %cond.phi881, !dbg !2674

cond.phi881:                                      ; preds = %cond.rhs878, %cond.lhs876
  %val882 = phi i64 [ %smod877, %cond.lhs876 ], [ %add880, %cond.rhs878 ], !dbg !2674
  store i64 %val882, ptr %rpm9, align 8, !dbg !2674
    #dbg_declare(ptr %p10, !2675, !DIExpression(), !2676)
  %355 = load i64, ptr %rpm9, align 8, !dbg !2676
  %sub883 = sub i64 8, %355, !dbg !2676
  %lt884 = icmp slt i64 %sub883, 0, !dbg !2676
  %356 = call i1 @llvm.expect.i1(i1 %lt884, i1 false), !dbg !2676
  br i1 %356, label %panic885, label %checkok893, !dbg !2676

checkok893:                                       ; preds = %cond.phi881
  %ge894 = icmp sge i64 %sub883, 8, !dbg !2676
  %357 = call i1 @llvm.expect.i1(i1 %ge894, i1 false), !dbg !2676
  br i1 %357, label %panic895, label %checkok905, !dbg !2676

checkok905:                                       ; preds = %checkok893
  %ptroffset906 = getelementptr inbounds [4 x i8], ptr @to_float.P10S, i64 %sub883, !dbg !2676
  %358 = load i32, ptr %ptroffset906, align 4, !dbg !2676
  store i32 %358, ptr %p10, align 4, !dbg !2676
    #dbg_declare(ptr %carry, !2677, !DIExpression(), !2678)
  store i32 0, ptr %carry, align 4, !dbg !2678
  %359 = load i32, ptr %a, align 4, !dbg !2679
  store i32 %359, ptr %k, align 4, !dbg !2679
  br label %loop.cond907, !dbg !2679

loop.cond907:                                     ; preds = %if.exit1037, %checkok905
  %360 = load i32, ptr %k, align 4, !dbg !2679
  %361 = load i32, ptr %z, align 4, !dbg !2679
  %neq908 = icmp ne i32 %360, %361, !dbg !2679
  br i1 %neq908, label %loop.body909, label %loop.exit1039, !dbg !2679

loop.body909:                                     ; preds = %loop.cond907
    #dbg_declare(ptr %tmp, !2681, !DIExpression(), !2683)
  %362 = load i32, ptr %k, align 4, !dbg !2683
  %sext910 = sext i32 %362 to i64, !dbg !2683
  %lt911 = icmp slt i64 %sext910, 0, !dbg !2683
  %363 = call i1 @llvm.expect.i1(i1 %lt911, i1 false), !dbg !2683
  br i1 %363, label %panic912, label %checkok920, !dbg !2683

checkok920:                                       ; preds = %loop.body909
  %ge921 = icmp sge i64 %sext910, 128, !dbg !2683
  %364 = call i1 @llvm.expect.i1(i1 %ge921, i1 false), !dbg !2683
  br i1 %364, label %panic922, label %checkok932, !dbg !2683

checkok932:                                       ; preds = %checkok920
  %ptroffset933 = getelementptr inbounds [4 x i8], ptr %x398, i64 %sext910, !dbg !2683
  %365 = load i32, ptr %ptroffset933, align 4, !dbg !2683
  %366 = load i32, ptr %p10, align 4, !dbg !2683
  %zero934 = icmp eq i32 %366, 0, !dbg !2683
  %367 = call i1 @llvm.expect.i1(i1 %zero934, i1 false), !dbg !2683
  br i1 %367, label %panic935, label %checkok939, !dbg !2683

checkok939:                                       ; preds = %checkok932
  %smod940 = srem i32 %365, %366, !dbg !2683
  store i32 %smod940, ptr %tmp, align 4, !dbg !2683
  %368 = load i32, ptr %k, align 4, !dbg !2684
  %sext941 = sext i32 %368 to i64, !dbg !2684
  %lt942 = icmp slt i64 %sext941, 0, !dbg !2684
  %369 = call i1 @llvm.expect.i1(i1 %lt942, i1 false), !dbg !2684
  br i1 %369, label %panic943, label %checkok951, !dbg !2684

checkok951:                                       ; preds = %checkok939
  %ge952 = icmp sge i64 %sext941, 128, !dbg !2684
  %370 = call i1 @llvm.expect.i1(i1 %ge952, i1 false), !dbg !2684
  br i1 %370, label %panic953, label %checkok963, !dbg !2684

checkok963:                                       ; preds = %checkok951
  %ptroffset964 = getelementptr inbounds [4 x i8], ptr %x398, i64 %sext941, !dbg !2684
  %371 = load i32, ptr %ptroffset964, align 4, !dbg !2684
  %372 = load i32, ptr %p10, align 4, !dbg !2684
  %zero965 = icmp eq i32 %372, 0, !dbg !2684
  %373 = call i1 @llvm.expect.i1(i1 %zero965, i1 false), !dbg !2684
  br i1 %373, label %panic966, label %checkok970, !dbg !2684

checkok970:                                       ; preds = %checkok963
  %sdiv = sdiv i32 %371, %372, !dbg !2684
  %374 = load i32, ptr %carry, align 4, !dbg !2684
  %add971 = add i32 %sdiv, %374, !dbg !2684
  %375 = load i32, ptr %k, align 4, !dbg !2684
  %sext972 = sext i32 %375 to i64, !dbg !2684
  %lt973 = icmp slt i64 %sext972, 0, !dbg !2684
  %376 = call i1 @llvm.expect.i1(i1 %lt973, i1 false), !dbg !2684
  br i1 %376, label %panic974, label %checkok982, !dbg !2684

checkok982:                                       ; preds = %checkok970
  %ge983 = icmp sge i64 %sext972, 128, !dbg !2684
  %377 = call i1 @llvm.expect.i1(i1 %ge983, i1 false), !dbg !2684
  br i1 %377, label %panic984, label %checkok994, !dbg !2684

checkok994:                                       ; preds = %checkok982
  %ptroffset995 = getelementptr inbounds [4 x i8], ptr %x398, i64 %sext972, !dbg !2684
  store i32 %add971, ptr %ptroffset995, align 4, !dbg !2684
  %378 = load i32, ptr %p10, align 4, !dbg !2685
  %zero996 = icmp eq i32 %378, 0, !dbg !2685
  %379 = call i1 @llvm.expect.i1(i1 %zero996, i1 false), !dbg !2685
  br i1 %379, label %panic997, label %checkok1001, !dbg !2685

checkok1001:                                      ; preds = %checkok994
  %sdiv1002 = sdiv i32 1000000000, %378, !dbg !2685
  %380 = load i32, ptr %tmp, align 4, !dbg !2685
  %mul1003 = mul i32 %sdiv1002, %380, !dbg !2685
  store i32 %mul1003, ptr %carry, align 4, !dbg !2685
  %381 = load i32, ptr %k, align 4, !dbg !2686
  %382 = load i32, ptr %a, align 4, !dbg !2686
  %eq1004 = icmp eq i32 %381, %382, !dbg !2686
  br i1 %eq1004, label %and.rhs1005, label %and.phi1031, !dbg !2686

and.rhs1005:                                      ; preds = %checkok1001
  %383 = load i32, ptr %k, align 4, !dbg !2686
  %sext1006 = sext i32 %383 to i64, !dbg !2686
  %lt1007 = icmp slt i64 %sext1006, 0, !dbg !2686
  %384 = call i1 @llvm.expect.i1(i1 %lt1007, i1 false), !dbg !2686
  br i1 %384, label %panic1008, label %checkok1016, !dbg !2686

checkok1016:                                      ; preds = %and.rhs1005
  %ge1017 = icmp sge i64 %sext1006, 128, !dbg !2686
  %385 = call i1 @llvm.expect.i1(i1 %ge1017, i1 false), !dbg !2686
  br i1 %385, label %panic1018, label %checkok1028, !dbg !2686

checkok1028:                                      ; preds = %checkok1016
  %ptroffset1029 = getelementptr inbounds [4 x i8], ptr %x398, i64 %sext1006, !dbg !2686
  %386 = load i32, ptr %ptroffset1029, align 4, !dbg !2686
  %i2nb1030 = icmp eq i32 %386, 0, !dbg !2686
  br label %and.phi1031, !dbg !2686

and.phi1031:                                      ; preds = %checkok1028, %checkok1001
  %val1032 = phi i1 [ false, %checkok1001 ], [ %i2nb1030, %checkok1028 ], !dbg !2686
  br i1 %val1032, label %if.then1033, label %if.exit1037, !dbg !2686

if.then1033:                                      ; preds = %and.phi1031
  %387 = load i32, ptr %a, align 4, !dbg !2687
  %add1034 = add i32 %387, 1, !dbg !2687
  %and1035 = and i32 %add1034, 127, !dbg !2687
  store i32 %and1035, ptr %a, align 4, !dbg !2687
  %388 = load i64, ptr %rp768, align 8, !dbg !2689
  %sub1036 = sub i64 %388, 9, !dbg !2689
  store i64 %sub1036, ptr %rp768, align 8, !dbg !2689
  br label %if.exit1037, !dbg !2689

if.exit1037:                                      ; preds = %if.then1033, %and.phi1031
  %389 = load i32, ptr %k, align 4, !dbg !2679
  %add1038 = add i32 %389, 1, !dbg !2679
  store i32 %add1038, ptr %k, align 4, !dbg !2679
  br label %loop.cond907, !dbg !2679

loop.exit1039:                                    ; preds = %loop.cond907
  %390 = load i32, ptr %carry, align 4, !dbg !2690
  %i2b1040 = icmp ne i32 %390, 0, !dbg !2690
  br i1 %i2b1040, label %if.then1041, label %if.exit1067, !dbg !2690

if.then1041:                                      ; preds = %loop.exit1039
  %391 = load i32, ptr %z, align 4, !dbg !2690
  %add1042 = add i32 %391, 1, !dbg !2690
  store i32 %add1042, ptr %z, align 4, !dbg !2690
  %sext1043 = sext i32 %391 to i64, !dbg !2690
  %lt1044 = icmp slt i64 %sext1043, 0, !dbg !2690
  %392 = call i1 @llvm.expect.i1(i1 %lt1044, i1 false), !dbg !2690
  br i1 %392, label %panic1045, label %checkok1053, !dbg !2690

checkok1053:                                      ; preds = %if.then1041
  %ge1054 = icmp sge i64 %sext1043, 128, !dbg !2690
  %393 = call i1 @llvm.expect.i1(i1 %ge1054, i1 false), !dbg !2690
  br i1 %393, label %panic1055, label %checkok1065, !dbg !2690

checkok1065:                                      ; preds = %checkok1053
  %ptroffset1066 = getelementptr inbounds [4 x i8], ptr %x398, i64 %sext1043, !dbg !2690
  %394 = load i32, ptr %carry, align 4, !dbg !2690
  store i32 %394, ptr %ptroffset1066, align 4, !dbg !2690
  br label %if.exit1067, !dbg !2690

if.exit1067:                                      ; preds = %checkok1065, %loop.exit1039
  %395 = load i64, ptr %rp768, align 8, !dbg !2691
  %396 = load i64, ptr %rpm9, align 8, !dbg !2691
  %sub1068 = sub i64 9, %396, !dbg !2691
  %add1069 = add i64 %395, %sub1068, !dbg !2691
  store i64 %add1069, ptr %rp768, align 8, !dbg !2691
  br label %if.exit1070, !dbg !2691

if.exit1070:                                      ; preds = %if.exit1067, %if.exit872
  br label %loop.cond1071, !dbg !2692

loop.cond1071:                                    ; preds = %if.exit1324, %if.exit1070
  %397 = load i64, ptr %rp768, align 8, !dbg !2693
  %lt1072 = icmp slt i64 %397, 18, !dbg !2693
  br i1 %lt1072, label %or.phi1103, label %or.rhs1073, !dbg !2693

or.rhs1073:                                       ; preds = %loop.cond1071
  %398 = load i64, ptr %rp768, align 8, !dbg !2693
  %eq1074 = icmp eq i64 %398, 18, !dbg !2693
  br i1 %eq1074, label %and.rhs1075, label %and.phi1101, !dbg !2693

and.rhs1075:                                      ; preds = %or.rhs1073
  %399 = load i32, ptr %a, align 4, !dbg !2693
  %sext1076 = sext i32 %399 to i64, !dbg !2693
  %lt1077 = icmp slt i64 %sext1076, 0, !dbg !2693
  %400 = call i1 @llvm.expect.i1(i1 %lt1077, i1 false), !dbg !2693
  br i1 %400, label %panic1078, label %checkok1086, !dbg !2693

checkok1086:                                      ; preds = %and.rhs1075
  %ge1087 = icmp sge i64 %sext1076, 128, !dbg !2693
  %401 = call i1 @llvm.expect.i1(i1 %ge1087, i1 false), !dbg !2693
  br i1 %401, label %panic1088, label %checkok1098, !dbg !2693

checkok1098:                                      ; preds = %checkok1086
  %ptroffset1099 = getelementptr inbounds [4 x i8], ptr %x398, i64 %sext1076, !dbg !2693
  %402 = load i32, ptr %ptroffset1099, align 4, !dbg !2693
  %lt1100 = icmp ult i32 %402, 9007199, !dbg !2693
  br label %and.phi1101, !dbg !2693

and.phi1101:                                      ; preds = %checkok1098, %or.rhs1073
  %val1102 = phi i1 [ false, %or.rhs1073 ], [ %lt1100, %checkok1098 ], !dbg !2693
  br label %or.phi1103, !dbg !2693

or.phi1103:                                       ; preds = %and.phi1101, %loop.cond1071
  %val1104 = phi i1 [ true, %loop.cond1071 ], [ %val1102, %and.phi1101 ], !dbg !2693
  br i1 %val1104, label %loop.body1105, label %loop.exit1325, !dbg !2693

loop.body1105:                                    ; preds = %or.phi1103
    #dbg_declare(ptr %carry1106, !2695, !DIExpression(), !2697)
  store i32 0, ptr %carry1106, align 4, !dbg !2697
  %403 = load i32, ptr %e2767, align 4, !dbg !2698
  %sub1107 = sub i32 %403, 29, !dbg !2698
  store i32 %sub1107, ptr %e2767, align 4, !dbg !2698
  %404 = load i32, ptr %z, align 4, !dbg !2699
  %sub1108 = sub i32 %404, 1, !dbg !2699
  %and1109 = and i32 %sub1108, 127, !dbg !2699
  store i32 %and1109, ptr %k, align 4, !dbg !2699
  br label %loop.body1110, !dbg !2699

loop.body1110:                                    ; preds = %if.exit1235, %loop.body1105
    #dbg_declare(ptr %tmp1111, !2701, !DIExpression(), !2703)
  %405 = load i32, ptr %k, align 4, !dbg !2703
  %sext1112 = sext i32 %405 to i64, !dbg !2703
  %lt1113 = icmp slt i64 %sext1112, 0, !dbg !2703
  %406 = call i1 @llvm.expect.i1(i1 %lt1113, i1 false), !dbg !2703
  br i1 %406, label %panic1114, label %checkok1122, !dbg !2703

checkok1122:                                      ; preds = %loop.body1110
  %ge1123 = icmp sge i64 %sext1112, 128, !dbg !2703
  %407 = call i1 @llvm.expect.i1(i1 %ge1123, i1 false), !dbg !2703
  br i1 %407, label %panic1124, label %checkok1134, !dbg !2703

checkok1134:                                      ; preds = %checkok1122
  %ptroffset1135 = getelementptr inbounds [4 x i8], ptr %x398, i64 %sext1112, !dbg !2703
  %408 = load i32, ptr %ptroffset1135, align 4, !dbg !2703
  %zext1136 = zext i32 %408 to i64, !dbg !2703
  %shl = shl i64 %zext1136, 29, !dbg !2703
  %409 = freeze i64 %shl, !dbg !2703
  %410 = load i32, ptr %carry1106, align 4, !dbg !2703
  %zext1137 = zext i32 %410 to i64, !dbg !2703
  %add1138 = add i64 %409, %zext1137, !dbg !2703
  store i64 %add1138, ptr %tmp1111, align 8, !dbg !2703
  %411 = load i64, ptr %tmp1111, align 8, !dbg !2704
  %lt1139 = icmp ult i64 1000000000, %411, !dbg !2704
  br i1 %lt1139, label %if.then1140, label %if.else1169, !dbg !2704

if.then1140:                                      ; preds = %checkok1134
  %412 = load i64, ptr %tmp1111, align 8, !dbg !2705
  %sdiv1141 = sdiv i64 %412, 1000000000, !dbg !2705
  %trunc1142 = trunc i64 %sdiv1141 to i32, !dbg !2705
  store i32 %trunc1142, ptr %carry1106, align 4, !dbg !2705
  %413 = load i64, ptr %tmp1111, align 8, !dbg !2707
  %smod1143 = srem i64 %413, 1000000000, !dbg !2707
  %trunc1144 = trunc i64 %smod1143 to i32, !dbg !2707
  %414 = load i32, ptr %k, align 4, !dbg !2707
  %sext1145 = sext i32 %414 to i64, !dbg !2707
  %lt1146 = icmp slt i64 %sext1145, 0, !dbg !2707
  %415 = call i1 @llvm.expect.i1(i1 %lt1146, i1 false), !dbg !2707
  br i1 %415, label %panic1147, label %checkok1155, !dbg !2707

checkok1155:                                      ; preds = %if.then1140
  %ge1156 = icmp sge i64 %sext1145, 128, !dbg !2707
  %416 = call i1 @llvm.expect.i1(i1 %ge1156, i1 false), !dbg !2707
  br i1 %416, label %panic1157, label %checkok1167, !dbg !2707

checkok1167:                                      ; preds = %checkok1155
  %ptroffset1168 = getelementptr inbounds [4 x i8], ptr %x398, i64 %sext1145, !dbg !2707
  store i32 %trunc1144, ptr %ptroffset1168, align 4, !dbg !2707
  br label %if.exit1195, !dbg !2707

if.else1169:                                      ; preds = %checkok1134
  store i32 0, ptr %carry1106, align 4, !dbg !2708
  %417 = load i64, ptr %tmp1111, align 8, !dbg !2710
  %trunc1170 = trunc i64 %417 to i32, !dbg !2710
  %418 = load i32, ptr %k, align 4, !dbg !2710
  %sext1171 = sext i32 %418 to i64, !dbg !2710
  %lt1172 = icmp slt i64 %sext1171, 0, !dbg !2710
  %419 = call i1 @llvm.expect.i1(i1 %lt1172, i1 false), !dbg !2710
  br i1 %419, label %panic1173, label %checkok1181, !dbg !2710

checkok1181:                                      ; preds = %if.else1169
  %ge1182 = icmp sge i64 %sext1171, 128, !dbg !2710
  %420 = call i1 @llvm.expect.i1(i1 %ge1182, i1 false), !dbg !2710
  br i1 %420, label %panic1183, label %checkok1193, !dbg !2710

checkok1193:                                      ; preds = %checkok1181
  %ptroffset1194 = getelementptr inbounds [4 x i8], ptr %x398, i64 %sext1171, !dbg !2710
  store i32 %trunc1170, ptr %ptroffset1194, align 4, !dbg !2710
  br label %if.exit1195, !dbg !2710

if.exit1195:                                      ; preds = %checkok1193, %checkok1167
  %421 = load i32, ptr %k, align 4, !dbg !2711
  %422 = load i32, ptr %z, align 4, !dbg !2711
  %sub1196 = sub i32 %422, 1, !dbg !2711
  %and1197 = and i32 %sub1196, 127, !dbg !2711
  %eq1198 = icmp eq i32 %421, %and1197, !dbg !2711
  br i1 %eq1198, label %and.rhs1199, label %and.phi1201, !dbg !2711

and.rhs1199:                                      ; preds = %if.exit1195
  %423 = load i32, ptr %k, align 4, !dbg !2711
  %424 = load i32, ptr %a, align 4, !dbg !2711
  %neq1200 = icmp ne i32 %423, %424, !dbg !2711
  br label %and.phi1201, !dbg !2711

and.phi1201:                                      ; preds = %and.rhs1199, %if.exit1195
  %val1202 = phi i1 [ false, %if.exit1195 ], [ %neq1200, %and.rhs1199 ], !dbg !2711
  br i1 %val1202, label %and.rhs1203, label %and.phi1229, !dbg !2711

and.rhs1203:                                      ; preds = %and.phi1201
  %425 = load i32, ptr %k, align 4, !dbg !2711
  %sext1204 = sext i32 %425 to i64, !dbg !2711
  %lt1205 = icmp slt i64 %sext1204, 0, !dbg !2711
  %426 = call i1 @llvm.expect.i1(i1 %lt1205, i1 false), !dbg !2711
  br i1 %426, label %panic1206, label %checkok1214, !dbg !2711

checkok1214:                                      ; preds = %and.rhs1203
  %ge1215 = icmp sge i64 %sext1204, 128, !dbg !2711
  %427 = call i1 @llvm.expect.i1(i1 %ge1215, i1 false), !dbg !2711
  br i1 %427, label %panic1216, label %checkok1226, !dbg !2711

checkok1226:                                      ; preds = %checkok1214
  %ptroffset1227 = getelementptr inbounds [4 x i8], ptr %x398, i64 %sext1204, !dbg !2711
  %428 = load i32, ptr %ptroffset1227, align 4, !dbg !2711
  %i2nb1228 = icmp eq i32 %428, 0, !dbg !2711
  br label %and.phi1229, !dbg !2711

and.phi1229:                                      ; preds = %checkok1226, %and.phi1201
  %val1230 = phi i1 [ false, %and.phi1201 ], [ %i2nb1228, %checkok1226 ], !dbg !2711
  br i1 %val1230, label %if.then1231, label %if.exit1232, !dbg !2711

if.then1231:                                      ; preds = %and.phi1229
  %429 = load i32, ptr %k, align 4, !dbg !2711
  store i32 %429, ptr %z, align 4, !dbg !2711
  br label %if.exit1232, !dbg !2711

if.exit1232:                                      ; preds = %if.then1231, %and.phi1229
  %430 = load i32, ptr %k, align 4, !dbg !2712
  %431 = load i32, ptr %a, align 4, !dbg !2712
  %eq1233 = icmp eq i32 %430, %431, !dbg !2712
  br i1 %eq1233, label %if.then1234, label %if.exit1235, !dbg !2712

if.then1234:                                      ; preds = %if.exit1232
  br label %loop.exit1238, !dbg !2712

if.exit1235:                                      ; preds = %if.exit1232
  %432 = load i32, ptr %k, align 4, !dbg !2699
  %sub1236 = sub i32 %432, 1, !dbg !2699
  %and1237 = and i32 %sub1236, 127, !dbg !2699
  store i32 %and1237, ptr %k, align 4, !dbg !2699
  br label %loop.body1110, !dbg !2699

loop.exit1238:                                    ; preds = %if.then1234
  %433 = load i32, ptr %carry1106, align 4, !dbg !2713
  %i2b1239 = icmp ne i32 %433, 0, !dbg !2713
  br i1 %i2b1239, label %if.then1240, label %if.exit1324, !dbg !2713

if.then1240:                                      ; preds = %loop.exit1238
  %434 = load i64, ptr %rp768, align 8, !dbg !2714
  %add1241 = add i64 %434, 9, !dbg !2714
  store i64 %add1241, ptr %rp768, align 8, !dbg !2714
  %435 = load i32, ptr %a, align 4, !dbg !2716
  %sub1242 = sub i32 %435, 1, !dbg !2716
  %and1243 = and i32 %sub1242, 127, !dbg !2716
  store i32 %and1243, ptr %a, align 4, !dbg !2716
  %436 = load i32, ptr %a, align 4, !dbg !2717
  %437 = load i32, ptr %z, align 4, !dbg !2717
  %eq1244 = icmp eq i32 %436, %437, !dbg !2717
  br i1 %eq1244, label %if.then1245, label %if.exit1299, !dbg !2717

if.then1245:                                      ; preds = %if.then1240
  %438 = load i32, ptr %z, align 4, !dbg !2718
  %sub1246 = sub i32 %438, 1, !dbg !2718
  %and1247 = and i32 %sub1246, 127, !dbg !2718
  store i32 %and1247, ptr %z, align 4, !dbg !2718
  %439 = load i32, ptr %z, align 4, !dbg !2720
  %sub1248 = sub i32 %439, 1, !dbg !2720
  %and1249 = and i32 %sub1248, 127, !dbg !2720
  %sext1250 = sext i32 %and1249 to i64, !dbg !2720
  %lt1251 = icmp slt i64 %sext1250, 0, !dbg !2720
  %440 = call i1 @llvm.expect.i1(i1 %lt1251, i1 false), !dbg !2720
  br i1 %440, label %panic1252, label %checkok1260, !dbg !2720

checkok1260:                                      ; preds = %if.then1245
  %ge1261 = icmp sge i64 %sext1250, 128, !dbg !2720
  %441 = call i1 @llvm.expect.i1(i1 %ge1261, i1 false), !dbg !2720
  br i1 %441, label %panic1262, label %checkok1272, !dbg !2720

checkok1272:                                      ; preds = %checkok1260
  %ptroffset1273 = getelementptr inbounds [4 x i8], ptr %x398, i64 %sext1250, !dbg !2720
  %442 = load i32, ptr %ptroffset1273, align 4, !dbg !2720
  %443 = load i32, ptr %z, align 4, !dbg !2720
  %sext1274 = sext i32 %443 to i64, !dbg !2720
  %lt1275 = icmp slt i64 %sext1274, 0, !dbg !2720
  %444 = call i1 @llvm.expect.i1(i1 %lt1275, i1 false), !dbg !2720
  br i1 %444, label %panic1276, label %checkok1284, !dbg !2720

checkok1284:                                      ; preds = %checkok1272
  %ge1285 = icmp sge i64 %sext1274, 128, !dbg !2720
  %445 = call i1 @llvm.expect.i1(i1 %ge1285, i1 false), !dbg !2720
  br i1 %445, label %panic1286, label %checkok1296, !dbg !2720

checkok1296:                                      ; preds = %checkok1284
  %ptroffset1297 = getelementptr inbounds [4 x i8], ptr %x398, i64 %sext1274, !dbg !2720
  %446 = load i32, ptr %ptroffset1297, align 4, !dbg !2720
  %or1298 = or i32 %442, %446, !dbg !2720
  store i32 %or1298, ptr %ptroffset1273, align 4, !dbg !2720
  br label %if.exit1299, !dbg !2720

if.exit1299:                                      ; preds = %checkok1296, %if.then1240
  %447 = load i32, ptr %a, align 4, !dbg !2721
  %sext1300 = sext i32 %447 to i64, !dbg !2721
  %lt1301 = icmp slt i64 %sext1300, 0, !dbg !2721
  %448 = call i1 @llvm.expect.i1(i1 %lt1301, i1 false), !dbg !2721
  br i1 %448, label %panic1302, label %checkok1310, !dbg !2721

checkok1310:                                      ; preds = %if.exit1299
  %ge1311 = icmp sge i64 %sext1300, 128, !dbg !2721
  %449 = call i1 @llvm.expect.i1(i1 %ge1311, i1 false), !dbg !2721
  br i1 %449, label %panic1312, label %checkok1322, !dbg !2721

checkok1322:                                      ; preds = %checkok1310
  %ptroffset1323 = getelementptr inbounds [4 x i8], ptr %x398, i64 %sext1300, !dbg !2721
  %450 = load i32, ptr %carry1106, align 4, !dbg !2721
  store i32 %450, ptr %ptroffset1323, align 4, !dbg !2721
  br label %if.exit1324, !dbg !2721

if.exit1324:                                      ; preds = %checkok1322, %loop.exit1238
  br label %loop.cond1071, !dbg !2721

loop.exit1325:                                    ; preds = %or.phi1103
  br label %loop.body1326, !dbg !2722

loop.body1326:                                    ; preds = %if.exit1684, %loop.exit1325
    #dbg_declare(ptr %carry1327, !2723, !DIExpression(), !2726)
  store i32 0, ptr %carry1327, align 4, !dbg !2726
    #dbg_declare(ptr %sh, !2727, !DIExpression(), !2728)
  store i32 1, ptr %sh, align 4, !dbg !2728
    #dbg_declare(ptr %i, !2729, !DIExpression(), !2730)
  store i32 0, ptr %i, align 4, !dbg !2730
  store i32 0, ptr %i, align 4, !dbg !2731
  br label %loop.cond1328, !dbg !2731

loop.cond1328:                                    ; preds = %if.exit1440, %loop.body1326
  %451 = load i32, ptr %i, align 4, !dbg !2731
  %lt1329 = icmp slt i32 %451, 2, !dbg !2731
  br i1 %lt1329, label %loop.body1330, label %loop.exit1442, !dbg !2731

loop.body1330:                                    ; preds = %loop.cond1328
  %452 = load i32, ptr %a, align 4, !dbg !2733
  %453 = load i32, ptr %i, align 4, !dbg !2733
  %add1331 = add i32 %452, %453, !dbg !2733
  %and1332 = and i32 %add1331, 127, !dbg !2733
  store i32 %and1332, ptr %k, align 4, !dbg !2733
  %454 = load i32, ptr %k, align 4, !dbg !2735
  %455 = load i32, ptr %z, align 4, !dbg !2735
  %eq1333 = icmp eq i32 %454, %455, !dbg !2735
  br i1 %eq1333, label %or.phi1384, label %or.rhs1334, !dbg !2735

or.rhs1334:                                       ; preds = %loop.body1330
  %456 = load i32, ptr %k, align 4, !dbg !2735
  %sext1335 = sext i32 %456 to i64, !dbg !2735
  %lt1336 = icmp slt i64 %sext1335, 0, !dbg !2735
  %457 = call i1 @llvm.expect.i1(i1 %lt1336, i1 false), !dbg !2735
  br i1 %457, label %panic1337, label %checkok1345, !dbg !2735

checkok1345:                                      ; preds = %or.rhs1334
  %ge1346 = icmp sge i64 %sext1335, 128, !dbg !2735
  %458 = call i1 @llvm.expect.i1(i1 %ge1346, i1 false), !dbg !2735
  br i1 %458, label %panic1347, label %checkok1357, !dbg !2735

checkok1357:                                      ; preds = %checkok1345
  %ptroffset1358 = getelementptr inbounds [4 x i8], ptr %x398, i64 %sext1335, !dbg !2735
  %459 = load i32, ptr %ptroffset1358, align 4, !dbg !2735
  %460 = load i32, ptr %i, align 4, !dbg !2735
  %sext1359 = sext i32 %460 to i64, !dbg !2735
  %lt1360 = icmp slt i64 %sext1359, 0, !dbg !2735
  %461 = call i1 @llvm.expect.i1(i1 %lt1360, i1 false), !dbg !2735
  br i1 %461, label %panic1361, label %checkok1369, !dbg !2735

checkok1369:                                      ; preds = %checkok1357
  %ge1370 = icmp sge i64 %sext1359, 2, !dbg !2735
  %462 = call i1 @llvm.expect.i1(i1 %ge1370, i1 false), !dbg !2735
  br i1 %462, label %panic1371, label %checkok1381, !dbg !2735

checkok1381:                                      ; preds = %checkok1369
  %ptroffset1382 = getelementptr inbounds [4 x i8], ptr @to_float.TH, i64 %sext1359, !dbg !2735
  %463 = load i32, ptr %ptroffset1382, align 4, !dbg !2735
  %lt1383 = icmp ult i32 %459, %463, !dbg !2735
  br label %or.phi1384, !dbg !2735

or.phi1384:                                       ; preds = %checkok1381, %loop.body1330
  %val1385 = phi i1 [ true, %loop.body1330 ], [ %lt1383, %checkok1381 ], !dbg !2735
  br i1 %val1385, label %if.then1386, label %if.exit1387, !dbg !2735

if.then1386:                                      ; preds = %or.phi1384
  store i32 2, ptr %i, align 4, !dbg !2736
  br label %loop.exit1442, !dbg !2738

if.exit1387:                                      ; preds = %or.phi1384
  %464 = load i32, ptr %a, align 4, !dbg !2739
  %465 = load i32, ptr %i, align 4, !dbg !2739
  %add1388 = add i32 %464, %465, !dbg !2739
  %and1389 = and i32 %add1388, 127, !dbg !2739
  %sext1390 = sext i32 %and1389 to i64, !dbg !2739
  %lt1391 = icmp slt i64 %sext1390, 0, !dbg !2739
  %466 = call i1 @llvm.expect.i1(i1 %lt1391, i1 false), !dbg !2739
  br i1 %466, label %panic1392, label %checkok1400, !dbg !2739

checkok1400:                                      ; preds = %if.exit1387
  %ge1401 = icmp sge i64 %sext1390, 128, !dbg !2739
  %467 = call i1 @llvm.expect.i1(i1 %ge1401, i1 false), !dbg !2739
  br i1 %467, label %panic1402, label %checkok1412, !dbg !2739

checkok1412:                                      ; preds = %checkok1400
  %ptroffset1413 = getelementptr inbounds [4 x i8], ptr %x398, i64 %sext1390, !dbg !2739
  %468 = load i32, ptr %ptroffset1413, align 4, !dbg !2739
  %469 = load i32, ptr %i, align 4, !dbg !2739
  %sext1414 = sext i32 %469 to i64, !dbg !2739
  %lt1415 = icmp slt i64 %sext1414, 0, !dbg !2739
  %470 = call i1 @llvm.expect.i1(i1 %lt1415, i1 false), !dbg !2739
  br i1 %470, label %panic1416, label %checkok1424, !dbg !2739

checkok1424:                                      ; preds = %checkok1412
  %ge1425 = icmp sge i64 %sext1414, 2, !dbg !2739
  %471 = call i1 @llvm.expect.i1(i1 %ge1425, i1 false), !dbg !2739
  br i1 %471, label %panic1426, label %checkok1436, !dbg !2739

checkok1436:                                      ; preds = %checkok1424
  %ptroffset1437 = getelementptr inbounds [4 x i8], ptr @to_float.TH, i64 %sext1414, !dbg !2739
  %472 = load i32, ptr %ptroffset1437, align 4, !dbg !2739
  %gt1438 = icmp ugt i32 %468, %472, !dbg !2739
  br i1 %gt1438, label %if.then1439, label %if.exit1440, !dbg !2739

if.then1439:                                      ; preds = %checkok1436
  br label %loop.exit1442, !dbg !2739

if.exit1440:                                      ; preds = %checkok1436
  %473 = load i32, ptr %i, align 4, !dbg !2731
  %add1441 = add i32 %473, 1, !dbg !2731
  store i32 %add1441, ptr %i, align 4, !dbg !2731
  br label %loop.cond1328, !dbg !2731

loop.exit1442:                                    ; preds = %if.then1439, %if.then1386, %loop.cond1328
  %474 = load i32, ptr %i, align 4, !dbg !2740
  %eq1443 = icmp eq i32 %474, 2, !dbg !2740
  br i1 %eq1443, label %and.rhs1444, label %and.phi1446, !dbg !2740

and.rhs1444:                                      ; preds = %loop.exit1442
  %475 = load i64, ptr %rp768, align 8, !dbg !2740
  %eq1445 = icmp eq i64 %475, 18, !dbg !2740
  br label %and.phi1446, !dbg !2740

and.phi1446:                                      ; preds = %and.rhs1444, %loop.exit1442
  %val1447 = phi i1 [ false, %loop.exit1442 ], [ %eq1445, %and.rhs1444 ], !dbg !2740
  br i1 %val1447, label %if.then1448, label %if.exit1449, !dbg !2740

if.then1448:                                      ; preds = %and.phi1446
  br label %loop.exit1685, !dbg !2740

if.exit1449:                                      ; preds = %and.phi1446
  %476 = load i64, ptr %rp768, align 8, !dbg !2741
  %gt1450 = icmp sgt i64 %476, 27, !dbg !2741
  br i1 %gt1450, label %if.then1451, label %if.exit1452, !dbg !2741

if.then1451:                                      ; preds = %if.exit1449
  store i32 9, ptr %sh, align 4, !dbg !2741
  br label %if.exit1452, !dbg !2741

if.exit1452:                                      ; preds = %if.then1451, %if.exit1449
  %477 = load i32, ptr %e2767, align 4, !dbg !2742
  %478 = load i32, ptr %sh, align 4, !dbg !2742
  %add1453 = add i32 %477, %478, !dbg !2742
  store i32 %add1453, ptr %e2767, align 4, !dbg !2742
  %479 = load i32, ptr %a, align 4, !dbg !2743
  store i32 %479, ptr %k, align 4, !dbg !2743
  br label %loop.cond1454, !dbg !2743

loop.cond1454:                                    ; preds = %if.exit1619, %if.exit1452
  %480 = load i32, ptr %k, align 4, !dbg !2743
  %481 = load i32, ptr %z, align 4, !dbg !2743
  %neq1455 = icmp ne i32 %480, %481, !dbg !2743
  br i1 %neq1455, label %loop.body1456, label %loop.exit1622, !dbg !2743

loop.body1456:                                    ; preds = %loop.cond1454
    #dbg_declare(ptr %tmp1457, !2745, !DIExpression(), !2747)
  %482 = load i32, ptr %k, align 4, !dbg !2747
  %sext1458 = sext i32 %482 to i64, !dbg !2747
  %lt1459 = icmp slt i64 %sext1458, 0, !dbg !2747
  %483 = call i1 @llvm.expect.i1(i1 %lt1459, i1 false), !dbg !2747
  br i1 %483, label %panic1460, label %checkok1468, !dbg !2747

checkok1468:                                      ; preds = %loop.body1456
  %ge1469 = icmp sge i64 %sext1458, 128, !dbg !2747
  %484 = call i1 @llvm.expect.i1(i1 %ge1469, i1 false), !dbg !2747
  br i1 %484, label %panic1470, label %checkok1480, !dbg !2747

checkok1480:                                      ; preds = %checkok1468
  %ptroffset1481 = getelementptr inbounds [4 x i8], ptr %x398, i64 %sext1458, !dbg !2747
  %485 = load i32, ptr %ptroffset1481, align 4, !dbg !2747
  %486 = load i32, ptr %sh, align 4, !dbg !2747
  %shift_underflow = icmp slt i32 %486, 0, !dbg !2747
  %487 = call i1 @llvm.expect.i1(i1 %shift_underflow, i1 false), !dbg !2747
  br i1 %487, label %panic1482, label %checkok1490, !dbg !2747

checkok1490:                                      ; preds = %checkok1480
  %shift_exceeds1491 = icmp sge i32 %486, 32, !dbg !2747
  %488 = call i1 @llvm.expect.i1(i1 %shift_exceeds1491, i1 false), !dbg !2747
  br i1 %488, label %panic1492, label %checkok1500, !dbg !2747

checkok1500:                                      ; preds = %checkok1490
  %shl1501 = shl i32 1, %486, !dbg !2747
  %489 = freeze i32 %shl1501, !dbg !2747
  %sub1502 = sub i32 %489, 1, !dbg !2747
  %and1503 = and i32 %485, %sub1502, !dbg !2747
  store i32 %and1503, ptr %tmp1457, align 4, !dbg !2747
  %490 = load i32, ptr %k, align 4, !dbg !2748
  %sext1504 = sext i32 %490 to i64, !dbg !2748
  %lt1505 = icmp slt i64 %sext1504, 0, !dbg !2748
  %491 = call i1 @llvm.expect.i1(i1 %lt1505, i1 false), !dbg !2748
  br i1 %491, label %panic1506, label %checkok1514, !dbg !2748

checkok1514:                                      ; preds = %checkok1500
  %ge1515 = icmp sge i64 %sext1504, 128, !dbg !2748
  %492 = call i1 @llvm.expect.i1(i1 %ge1515, i1 false), !dbg !2748
  br i1 %492, label %panic1516, label %checkok1526, !dbg !2748

checkok1526:                                      ; preds = %checkok1514
  %ptroffset1527 = getelementptr inbounds [4 x i8], ptr %x398, i64 %sext1504, !dbg !2748
  %493 = load i32, ptr %ptroffset1527, align 4, !dbg !2748
  %494 = load i32, ptr %sh, align 4, !dbg !2748
  %shift_exceeds1528 = icmp uge i32 %494, 32, !dbg !2748
  %495 = call i1 @llvm.expect.i1(i1 %shift_exceeds1528, i1 false), !dbg !2748
  br i1 %495, label %panic1529, label %checkok1537, !dbg !2748

checkok1537:                                      ; preds = %checkok1526
  %lshr1538 = lshr i32 %493, %494, !dbg !2748
  %496 = freeze i32 %lshr1538, !dbg !2748
  %497 = load i32, ptr %carry1327, align 4, !dbg !2748
  %add1539 = add i32 %496, %497, !dbg !2748
  %498 = load i32, ptr %k, align 4, !dbg !2748
  %sext1540 = sext i32 %498 to i64, !dbg !2748
  %lt1541 = icmp slt i64 %sext1540, 0, !dbg !2748
  %499 = call i1 @llvm.expect.i1(i1 %lt1541, i1 false), !dbg !2748
  br i1 %499, label %panic1542, label %checkok1550, !dbg !2748

checkok1550:                                      ; preds = %checkok1537
  %ge1551 = icmp sge i64 %sext1540, 128, !dbg !2748
  %500 = call i1 @llvm.expect.i1(i1 %ge1551, i1 false), !dbg !2748
  br i1 %500, label %panic1552, label %checkok1562, !dbg !2748

checkok1562:                                      ; preds = %checkok1550
  %ptroffset1563 = getelementptr inbounds [4 x i8], ptr %x398, i64 %sext1540, !dbg !2748
  store i32 %add1539, ptr %ptroffset1563, align 4, !dbg !2748
  %501 = load i32, ptr %sh, align 4, !dbg !2749
  %shift_underflow1564 = icmp slt i32 %501, 0, !dbg !2749
  %502 = call i1 @llvm.expect.i1(i1 %shift_underflow1564, i1 false), !dbg !2749
  br i1 %502, label %panic1565, label %checkok1573, !dbg !2749

checkok1573:                                      ; preds = %checkok1562
  %shift_exceeds1574 = icmp sge i32 %501, 32, !dbg !2749
  %503 = call i1 @llvm.expect.i1(i1 %shift_exceeds1574, i1 false), !dbg !2749
  br i1 %503, label %panic1575, label %checkok1583, !dbg !2749

checkok1583:                                      ; preds = %checkok1573
  %ashr = ashr i32 1000000000, %501, !dbg !2749
  %504 = freeze i32 %ashr, !dbg !2749
  %505 = load i32, ptr %tmp1457, align 4, !dbg !2749
  %mul1584 = mul i32 %504, %505, !dbg !2749
  store i32 %mul1584, ptr %carry1327, align 4, !dbg !2749
  %506 = load i32, ptr %k, align 4, !dbg !2750
  %507 = load i32, ptr %a, align 4, !dbg !2750
  %eq1585 = icmp eq i32 %506, %507, !dbg !2750
  br i1 %eq1585, label %and.rhs1586, label %and.phi1612, !dbg !2750

and.rhs1586:                                      ; preds = %checkok1583
  %508 = load i32, ptr %k, align 4, !dbg !2750
  %sext1587 = sext i32 %508 to i64, !dbg !2750
  %lt1588 = icmp slt i64 %sext1587, 0, !dbg !2750
  %509 = call i1 @llvm.expect.i1(i1 %lt1588, i1 false), !dbg !2750
  br i1 %509, label %panic1589, label %checkok1597, !dbg !2750

checkok1597:                                      ; preds = %and.rhs1586
  %ge1598 = icmp sge i64 %sext1587, 128, !dbg !2750
  %510 = call i1 @llvm.expect.i1(i1 %ge1598, i1 false), !dbg !2750
  br i1 %510, label %panic1599, label %checkok1609, !dbg !2750

checkok1609:                                      ; preds = %checkok1597
  %ptroffset1610 = getelementptr inbounds [4 x i8], ptr %x398, i64 %sext1587, !dbg !2750
  %511 = load i32, ptr %ptroffset1610, align 4, !dbg !2750
  %i2nb1611 = icmp eq i32 %511, 0, !dbg !2750
  br label %and.phi1612, !dbg !2750

and.phi1612:                                      ; preds = %checkok1609, %checkok1583
  %val1613 = phi i1 [ false, %checkok1583 ], [ %i2nb1611, %checkok1609 ], !dbg !2750
  br i1 %val1613, label %if.then1614, label %if.exit1619, !dbg !2750

if.then1614:                                      ; preds = %and.phi1612
  %512 = load i32, ptr %a, align 4, !dbg !2751
  %add1615 = add i32 %512, 1, !dbg !2751
  %and1616 = and i32 %add1615, 127, !dbg !2751
  store i32 %and1616, ptr %a, align 4, !dbg !2751
  %513 = load i32, ptr %i, align 4, !dbg !2753
  %sub1617 = sub i32 %513, 1, !dbg !2753
  store i32 %sub1617, ptr %i, align 4, !dbg !2753
  %514 = load i64, ptr %rp768, align 8, !dbg !2754
  %sub1618 = sub i64 %514, 9, !dbg !2754
  store i64 %sub1618, ptr %rp768, align 8, !dbg !2754
  br label %if.exit1619, !dbg !2754

if.exit1619:                                      ; preds = %if.then1614, %and.phi1612
  %515 = load i32, ptr %k, align 4, !dbg !2743
  %add1620 = add i32 %515, 1, !dbg !2743
  %and1621 = and i32 %add1620, 127, !dbg !2743
  store i32 %and1621, ptr %k, align 4, !dbg !2743
  br label %loop.cond1454, !dbg !2743

loop.exit1622:                                    ; preds = %loop.cond1454
  %516 = load i32, ptr %carry1327, align 4, !dbg !2755
  %i2b1623 = icmp ne i32 %516, 0, !dbg !2755
  br i1 %i2b1623, label %if.then1624, label %if.exit1684, !dbg !2755

if.then1624:                                      ; preds = %loop.exit1622
  %517 = load i32, ptr %z, align 4, !dbg !2756
  %add1625 = add i32 %517, 1, !dbg !2756
  %and1626 = and i32 %add1625, 127, !dbg !2756
  %518 = load i32, ptr %a, align 4, !dbg !2756
  %neq1627 = icmp ne i32 %and1626, %518, !dbg !2756
  br i1 %neq1627, label %if.then1628, label %if.else1655, !dbg !2756

if.then1628:                                      ; preds = %if.then1624
  %519 = load i32, ptr %z, align 4, !dbg !2758
  %sext1629 = sext i32 %519 to i64, !dbg !2758
  %lt1630 = icmp slt i64 %sext1629, 0, !dbg !2758
  %520 = call i1 @llvm.expect.i1(i1 %lt1630, i1 false), !dbg !2758
  br i1 %520, label %panic1631, label %checkok1639, !dbg !2758

checkok1639:                                      ; preds = %if.then1628
  %ge1640 = icmp sge i64 %sext1629, 128, !dbg !2758
  %521 = call i1 @llvm.expect.i1(i1 %ge1640, i1 false), !dbg !2758
  br i1 %521, label %panic1641, label %checkok1651, !dbg !2758

checkok1651:                                      ; preds = %checkok1639
  %ptroffset1652 = getelementptr inbounds [4 x i8], ptr %x398, i64 %sext1629, !dbg !2758
  %522 = load i32, ptr %carry1327, align 4, !dbg !2758
  store i32 %522, ptr %ptroffset1652, align 4, !dbg !2758
  %523 = load i32, ptr %z, align 4, !dbg !2760
  %add1653 = add i32 %523, 1, !dbg !2760
  %and1654 = and i32 %add1653, 127, !dbg !2760
  store i32 %and1654, ptr %z, align 4, !dbg !2760
  br label %if.exit1683, !dbg !2760

if.else1655:                                      ; preds = %if.then1624
  %524 = load i32, ptr %z, align 4, !dbg !2761
  %sub1656 = sub i32 %524, 1, !dbg !2761
  %and1657 = and i32 %sub1656, 127, !dbg !2761
  %sext1658 = sext i32 %and1657 to i64, !dbg !2761
  %lt1659 = icmp slt i64 %sext1658, 0, !dbg !2761
  %525 = call i1 @llvm.expect.i1(i1 %lt1659, i1 false), !dbg !2761
  br i1 %525, label %panic1660, label %checkok1668, !dbg !2761

checkok1668:                                      ; preds = %if.else1655
  %ge1669 = icmp sge i64 %sext1658, 128, !dbg !2761
  %526 = call i1 @llvm.expect.i1(i1 %ge1669, i1 false), !dbg !2761
  br i1 %526, label %panic1670, label %checkok1680, !dbg !2761

checkok1680:                                      ; preds = %checkok1668
  %ptroffset1681 = getelementptr inbounds [4 x i8], ptr %x398, i64 %sext1658, !dbg !2761
  %527 = load i32, ptr %ptroffset1681, align 4, !dbg !2761
  %or1682 = or i32 %527, 1, !dbg !2761
  store i32 %or1682, ptr %ptroffset1681, align 4, !dbg !2761
  br label %if.exit1683, !dbg !2761

if.exit1683:                                      ; preds = %checkok1680, %checkok1651
  br label %if.exit1684, !dbg !2761

if.exit1684:                                      ; preds = %if.exit1683, %loop.exit1622
  br label %loop.body1326, !dbg !2761

loop.exit1685:                                    ; preds = %if.then1448
    #dbg_declare(ptr %y1686, !2763, !DIExpression(), !2764)
  store double 0.000000e+00, ptr %y1686, align 8, !dbg !2764
    #dbg_declare(ptr %i1687, !2765, !DIExpression(), !2766)
  store i32 0, ptr %i1687, align 4, !dbg !2766
  store i32 0, ptr %i1687, align 4, !dbg !2767
  br label %loop.cond1688, !dbg !2767

loop.cond1688:                                    ; preds = %checkok1748, %loop.exit1685
  %528 = load i32, ptr %i1687, align 4, !dbg !2767
  %lt1689 = icmp slt i32 %528, 2, !dbg !2767
  br i1 %lt1689, label %loop.body1690, label %loop.exit1753, !dbg !2767

loop.body1690:                                    ; preds = %loop.cond1688
  %529 = load i32, ptr %a, align 4, !dbg !2769
  %530 = load i32, ptr %i1687, align 4, !dbg !2769
  %add1691 = add i32 %529, %530, !dbg !2769
  %and1692 = and i32 %add1691, 127, !dbg !2769
  %531 = load i32, ptr %z, align 4, !dbg !2769
  %eq1693 = icmp eq i32 %and1692, %531, !dbg !2769
  br i1 %eq1693, label %if.then1694, label %if.exit1722, !dbg !2769

if.then1694:                                      ; preds = %loop.body1690
  %532 = load i32, ptr %z, align 4, !dbg !2769
  %add1695 = add i32 %532, 1, !dbg !2769
  %and1696 = and i32 %add1695, 127, !dbg !2769
  store i32 %and1696, ptr %z, align 4, !dbg !2769
  %sub1697 = sub i32 %and1696, 1, !dbg !2769
  %sext1698 = sext i32 %sub1697 to i64, !dbg !2769
  %lt1699 = icmp slt i64 %sext1698, 0, !dbg !2769
  %533 = call i1 @llvm.expect.i1(i1 %lt1699, i1 false), !dbg !2769
  br i1 %533, label %panic1700, label %checkok1708, !dbg !2769

checkok1708:                                      ; preds = %if.then1694
  %ge1709 = icmp sge i64 %sext1698, 128, !dbg !2769
  %534 = call i1 @llvm.expect.i1(i1 %ge1709, i1 false), !dbg !2769
  br i1 %534, label %panic1710, label %checkok1720, !dbg !2769

checkok1720:                                      ; preds = %checkok1708
  %ptroffset1721 = getelementptr inbounds [4 x i8], ptr %x398, i64 %sext1698, !dbg !2769
  store i32 0, ptr %ptroffset1721, align 4, !dbg !2769
  br label %if.exit1722, !dbg !2769

if.exit1722:                                      ; preds = %checkok1720, %loop.body1690
  %535 = load double, ptr %y1686, align 8, !dbg !2771
  %fmul1723 = fmul double 1.000000e+09, %535, !dbg !2771
  %536 = load i32, ptr %a, align 4, !dbg !2771
  %537 = load i32, ptr %i1687, align 4, !dbg !2771
  %add1724 = add i32 %536, %537, !dbg !2771
  %and1725 = and i32 %add1724, 127, !dbg !2771
  %sext1726 = sext i32 %and1725 to i64, !dbg !2771
  %lt1727 = icmp slt i64 %sext1726, 0, !dbg !2771
  %538 = call i1 @llvm.expect.i1(i1 %lt1727, i1 false), !dbg !2771
  br i1 %538, label %panic1728, label %checkok1736, !dbg !2771

checkok1736:                                      ; preds = %if.exit1722
  %ge1737 = icmp sge i64 %sext1726, 128, !dbg !2771
  %539 = call i1 @llvm.expect.i1(i1 %ge1737, i1 false), !dbg !2771
  br i1 %539, label %panic1738, label %checkok1748, !dbg !2771

checkok1748:                                      ; preds = %checkok1736
  %ptroffset1749 = getelementptr inbounds [4 x i8], ptr %x398, i64 %sext1726, !dbg !2771
  %540 = load i32, ptr %ptroffset1749, align 4, !dbg !2771
  %uifp1750 = uitofp i32 %540 to double, !dbg !2771
  %fadd1751 = fadd double %fmul1723, %uifp1750, !dbg !2771
  store double %fadd1751, ptr %y1686, align 8, !dbg !2771
  %541 = load i32, ptr %i1687, align 4, !dbg !2767
  %add1752 = add i32 %541, 1, !dbg !2767
  store i32 %add1752, ptr %i1687, align 4, !dbg !2767
  br label %loop.cond1688, !dbg !2767

loop.exit1753:                                    ; preds = %loop.cond1688
  %542 = load double, ptr %y1686, align 8, !dbg !2772
  %543 = load i32, ptr %sign391, align 4, !dbg !2772
  %sifp1754 = sitofp i32 %543 to double, !dbg !2772
  %fmul1755 = fmul double %542, %sifp1754, !dbg !2772
  store double %fmul1755, ptr %y1686, align 8, !dbg !2772
    #dbg_declare(ptr %denormal, !2773, !DIExpression(), !2774)
  store i8 0, ptr %denormal, align 1, !dbg !2774
    #dbg_declare(ptr %bits1756, !2775, !DIExpression(), !2776)
  store i32 24, ptr %bits1756, align 4, !dbg !2776
  %544 = load i32, ptr %bits1756, align 4, !dbg !2777
  %545 = load i32, ptr %e2767, align 4, !dbg !2777
  %add1757 = add i32 53, %545, !dbg !2777
  %sub1758 = sub i32 %add1757, -149, !dbg !2777
  %lt1759 = icmp slt i32 %sub1758, %544, !dbg !2777
  %check1760 = icmp slt i32 %544, 0, !dbg !2777
  %siui-lt1761 = or i1 %check1760, %lt1759, !dbg !2777
  br i1 %siui-lt1761, label %if.then1762, label %if.exit1768, !dbg !2777

if.then1762:                                      ; preds = %loop.exit1753
  %546 = load i32, ptr %e2767, align 4, !dbg !2778
  %add1763 = add i32 53, %546, !dbg !2778
  %sub1764 = sub i32 %add1763, -149, !dbg !2778
  store i32 %sub1764, ptr %bits1756, align 4, !dbg !2778
  %547 = load i32, ptr %bits1756, align 4, !dbg !2780
  %gt1765 = icmp ugt i32 0, %547, !dbg !2780
  br i1 %gt1765, label %if.then1766, label %if.exit1767, !dbg !2780

if.then1766:                                      ; preds = %if.then1762
  store i32 0, ptr %bits1756, align 4, !dbg !2780
  br label %if.exit1767, !dbg !2780

if.exit1767:                                      ; preds = %if.then1766, %if.then1762
  store i8 1, ptr %denormal, align 1, !dbg !2781
  br label %if.exit1768, !dbg !2781

if.exit1768:                                      ; preds = %if.exit1767, %loop.exit1753
    #dbg_declare(ptr %bias1769, !2782, !DIExpression(), !2783)
  store double 0.000000e+00, ptr %bias1769, align 8, !dbg !2783
    #dbg_declare(ptr %frac, !2784, !DIExpression(), !2785)
  store double 0.000000e+00, ptr %frac, align 8, !dbg !2785
  %548 = load i32, ptr %bits1756, align 4, !dbg !2786
  %gt1770 = icmp ugt i32 53, %548, !dbg !2786
  br i1 %gt1770, label %if.then1771, label %if.exit1792, !dbg !2786

if.then1771:                                      ; preds = %if.exit1768
  store double 1.000000e+00, ptr %x1772, align 8
  %549 = load i32, ptr %bits1756, align 4, !dbg !2787
  %sub1773 = sub i32 106, %549, !dbg !2787
  %sub1774 = sub i32 %sub1773, 1, !dbg !2787
  store i32 %sub1774, ptr %n1775, align 4
  %550 = load double, ptr %x1772, align 8, !dbg !2789
  %551 = load i32, ptr %n1775, align 4, !dbg !2789
  %552 = call double @scalbn(double %550, i32 %551), !dbg !2789
  store double %552, ptr %mag1776, align 8
  %553 = load double, ptr %y1686, align 8
  store double %553, ptr %sgn1777, align 8
  %554 = load double, ptr %mag1776, align 8
  store double %554, ptr %x1778, align 8
  %555 = load double, ptr %sgn1777, align 8
  store double %555, ptr %y1779, align 8
  %556 = load double, ptr %x1778, align 8, !dbg !2791
  %557 = load double, ptr %sgn1777, align 8, !dbg !2793
  %558 = call double @llvm.copysign.f64(double %556, double %557), !dbg !2793
  store double %558, ptr %bias1769, align 8, !dbg !2793
  %559 = load double, ptr %y1686, align 8, !dbg !2795
  store double 1.000000e+00, ptr %x1781, align 8
  %560 = load i32, ptr %bits1756, align 4, !dbg !2795
  %sub1782 = sub i32 53, %560, !dbg !2795
  store i32 %sub1782, ptr %n1783, align 4
  %561 = load double, ptr %x1781, align 8, !dbg !2796
  %562 = load i32, ptr %n1783, align 4, !dbg !2796
  %563 = call double @scalbn(double %561, i32 %562), !dbg !2796
  %zero1784 = fcmp ueq double %563, 0.000000e+00, !dbg !2795
  %564 = call i1 @llvm.expect.i1(i1 %zero1784, i1 false), !dbg !2795
  br i1 %564, label %panic1785, label %checkok1789, !dbg !2795

checkok1789:                                      ; preds = %if.then1771
  %fmod = frem double %559, %563, !dbg !2795
  store double %fmod, ptr %frac, align 8, !dbg !2795
  %565 = load double, ptr %y1686, align 8, !dbg !2798
  %566 = load double, ptr %frac, align 8, !dbg !2798
  %fsub1790 = fsub double %565, %566, !dbg !2798
  store double %fsub1790, ptr %y1686, align 8, !dbg !2798
  %567 = load double, ptr %y1686, align 8, !dbg !2799
  %568 = load double, ptr %bias1769, align 8, !dbg !2799
  %fadd1791 = fadd double %567, %568, !dbg !2799
  store double %fadd1791, ptr %y1686, align 8, !dbg !2799
  br label %if.exit1792, !dbg !2799

if.exit1792:                                      ; preds = %checkok1789, %if.exit1768
  %569 = load i32, ptr %a, align 4, !dbg !2800
  %570 = load i32, ptr %i1687, align 4, !dbg !2800
  %add1793 = add i32 %569, %570, !dbg !2800
  %and1794 = and i32 %add1793, 127, !dbg !2800
  %571 = load i32, ptr %z, align 4, !dbg !2800
  %neq1795 = icmp ne i32 %and1794, %571, !dbg !2800
  br i1 %neq1795, label %if.then1796, label %if.exit1878, !dbg !2800

if.then1796:                                      ; preds = %if.exit1792
    #dbg_declare(ptr %t, !2801, !DIExpression(), !2803)
  %572 = load i32, ptr %a, align 4, !dbg !2803
  %573 = load i32, ptr %i1687, align 4, !dbg !2803
  %add1797 = add i32 %572, %573, !dbg !2803
  %and1798 = and i32 %add1797, 127, !dbg !2803
  %sext1799 = sext i32 %and1798 to i64, !dbg !2803
  %lt1800 = icmp slt i64 %sext1799, 0, !dbg !2803
  %574 = call i1 @llvm.expect.i1(i1 %lt1800, i1 false), !dbg !2803
  br i1 %574, label %panic1801, label %checkok1809, !dbg !2803

checkok1809:                                      ; preds = %if.then1796
  %ge1810 = icmp sge i64 %sext1799, 128, !dbg !2803
  %575 = call i1 @llvm.expect.i1(i1 %ge1810, i1 false), !dbg !2803
  br i1 %575, label %panic1811, label %checkok1821, !dbg !2803

checkok1821:                                      ; preds = %checkok1809
  %ptroffset1822 = getelementptr inbounds [4 x i8], ptr %x398, i64 %sext1799, !dbg !2803
  %576 = load i32, ptr %ptroffset1822, align 4, !dbg !2803
  store i32 %576, ptr %t, align 4, !dbg !2803
  store i8 1, ptr %switch1823, align 1
  br label %switch.entry1824

switch.entry1824:                                 ; preds = %checkok1821
  %577 = load i8, ptr %switch1823, align 1
  %578 = trunc i8 %577 to i1
  %579 = load i32, ptr %t, align 4, !dbg !2804
  %gt1825 = icmp ugt i32 500000000, %579, !dbg !2804
  br i1 %gt1825, label %and.rhs1826, label %and.phi1835, !dbg !2804

and.rhs1826:                                      ; preds = %switch.entry1824
  %580 = load i32, ptr %t, align 4, !dbg !2804
  %i2b1827 = icmp ne i32 %580, 0, !dbg !2804
  br i1 %i2b1827, label %or.phi1833, label %or.rhs1828, !dbg !2804

or.rhs1828:                                       ; preds = %and.rhs1826
  %581 = load i32, ptr %a, align 4, !dbg !2804
  %582 = load i32, ptr %i1687, align 4, !dbg !2804
  %add1829 = add i32 %581, %582, !dbg !2804
  %add1830 = add i32 %add1829, 1, !dbg !2804
  %and1831 = and i32 %add1830, 127, !dbg !2804
  %583 = load i32, ptr %z, align 4, !dbg !2804
  %neq1832 = icmp ne i32 %and1831, %583, !dbg !2804
  br label %or.phi1833, !dbg !2804

or.phi1833:                                       ; preds = %or.rhs1828, %and.rhs1826
  %val1834 = phi i1 [ true, %and.rhs1826 ], [ %neq1832, %or.rhs1828 ], !dbg !2804
  br label %and.phi1835, !dbg !2804

and.phi1835:                                      ; preds = %or.phi1833, %switch.entry1824
  %val1836 = phi i1 [ false, %switch.entry1824 ], [ %val1834, %or.phi1833 ], !dbg !2804
  %eq1837 = icmp eq i1 %val1836, %578, !dbg !2804
  br i1 %eq1837, label %switch.case1838, label %next_if1842, !dbg !2804

switch.case1838:                                  ; preds = %and.phi1835
  %584 = load double, ptr %frac, align 8, !dbg !2806
  %585 = load i32, ptr %sign391, align 4, !dbg !2806
  %sifp1839 = sitofp i32 %585 to double, !dbg !2806
  %fmul1840 = fmul double 2.500000e-01, %sifp1839, !dbg !2806
  %fadd1841 = fadd double %584, %fmul1840, !dbg !2806
  store double %fadd1841, ptr %frac, align 8, !dbg !2806
  br label %switch.exit1867, !dbg !2806

next_if1842:                                      ; preds = %and.phi1835
  %586 = load i32, ptr %t, align 4, !dbg !2808
  %lt1843 = icmp ult i32 500000000, %586, !dbg !2808
  %eq1844 = icmp eq i1 %lt1843, %578, !dbg !2808
  br i1 %eq1844, label %switch.case1845, label %next_if1849, !dbg !2808

switch.case1845:                                  ; preds = %next_if1842
  %587 = load double, ptr %frac, align 8, !dbg !2809
  %588 = load i32, ptr %sign391, align 4, !dbg !2809
  %sifp1846 = sitofp i32 %588 to double, !dbg !2809
  %fmul1847 = fmul double 7.500000e-01, %sifp1846, !dbg !2809
  %fadd1848 = fadd double %587, %fmul1847, !dbg !2809
  store double %fadd1848, ptr %frac, align 8, !dbg !2809
  br label %switch.exit1867, !dbg !2809

next_if1849:                                      ; preds = %next_if1842
  %589 = load i32, ptr %t, align 4, !dbg !2811
  %eq1850 = icmp eq i32 500000000, %589, !dbg !2811
  %eq1851 = icmp eq i1 %eq1850, %578, !dbg !2811
  br i1 %eq1851, label %switch.case1852, label %next_if1866, !dbg !2811

switch.case1852:                                  ; preds = %next_if1849
  %590 = load i32, ptr %a, align 4, !dbg !2812
  %591 = load i32, ptr %i1687, align 4, !dbg !2812
  %add1853 = add i32 %590, %591, !dbg !2812
  %add1854 = add i32 %add1853, 1, !dbg !2812
  %and1855 = and i32 %add1854, 127, !dbg !2812
  %592 = load i32, ptr %z, align 4, !dbg !2812
  %eq1856 = icmp eq i32 %and1855, %592, !dbg !2812
  br i1 %eq1856, label %if.then1857, label %if.else1861, !dbg !2812

if.then1857:                                      ; preds = %switch.case1852
  %593 = load double, ptr %frac, align 8, !dbg !2814
  %594 = load i32, ptr %sign391, align 4, !dbg !2814
  %sifp1858 = sitofp i32 %594 to double, !dbg !2814
  %fmul1859 = fmul double 5.000000e-01, %sifp1858, !dbg !2814
  %fadd1860 = fadd double %593, %fmul1859, !dbg !2814
  store double %fadd1860, ptr %frac, align 8, !dbg !2814
  br label %if.exit1865, !dbg !2814

if.else1861:                                      ; preds = %switch.case1852
  %595 = load double, ptr %frac, align 8, !dbg !2816
  %596 = load i32, ptr %sign391, align 4, !dbg !2816
  %sifp1862 = sitofp i32 %596 to double, !dbg !2816
  %fmul1863 = fmul double 7.500000e-01, %sifp1862, !dbg !2816
  %fadd1864 = fadd double %595, %fmul1863, !dbg !2816
  store double %fadd1864, ptr %frac, align 8, !dbg !2816
  br label %if.exit1865, !dbg !2816

if.exit1865:                                      ; preds = %if.else1861, %if.then1857
  br label %switch.exit1867, !dbg !2816

next_if1866:                                      ; preds = %next_if1849
  br label %switch.exit1867, !dbg !2816

switch.exit1867:                                  ; preds = %next_if1866, %if.exit1865, %switch.case1845, %switch.case1838
  %597 = load i32, ptr %bits1756, align 4, !dbg !2818
  %sub1868 = sub i32 53, %597, !dbg !2818
  %ge1869 = icmp sge i32 %sub1868, 2, !dbg !2818
  br i1 %ge1869, label %and.rhs1870, label %and.phi1874, !dbg !2818

and.rhs1870:                                      ; preds = %switch.exit1867
  %598 = load double, ptr %frac, align 8, !dbg !2818
  %fmod1871 = frem double %598, 1.000000e+00, !dbg !2818
  %neq1872 = fcmp one double %fmod1871, 0.000000e+00, !dbg !2818
  %not1873 = xor i1 %neq1872, true, !dbg !2818
  br label %and.phi1874, !dbg !2818

and.phi1874:                                      ; preds = %and.rhs1870, %switch.exit1867
  %val1875 = phi i1 [ false, %switch.exit1867 ], [ %not1873, %and.rhs1870 ], !dbg !2818
  br i1 %val1875, label %if.then1876, label %if.exit1877, !dbg !2818

if.then1876:                                      ; preds = %and.phi1874
  %599 = load double, ptr %frac, align 8, !dbg !2818
  %fincdec = fadd double %599, 1.000000e+00, !dbg !2818
  store double %fincdec, ptr %frac, align 8, !dbg !2818
  br label %if.exit1877, !dbg !2818

if.exit1877:                                      ; preds = %if.then1876, %and.phi1874
  br label %if.exit1878, !dbg !2818

if.exit1878:                                      ; preds = %if.exit1877, %if.exit1792
  %600 = load double, ptr %y1686, align 8, !dbg !2819
  %601 = load double, ptr %frac, align 8, !dbg !2819
  %fadd1879 = fadd double %600, %601, !dbg !2819
  store double %fadd1879, ptr %y1686, align 8, !dbg !2819
  %602 = load double, ptr %y1686, align 8, !dbg !2820
  %603 = load double, ptr %bias1769, align 8, !dbg !2820
  %fsub1880 = fsub double %602, %603, !dbg !2820
  store double %fsub1880, ptr %y1686, align 8, !dbg !2820
  %604 = load i32, ptr %e2767, align 4, !dbg !2821
  %add1881 = add i32 %604, 53, !dbg !2821
  %and1882 = and i32 %add1881, 2147483647, !dbg !2821
  %605 = load i32, ptr %emax, align 4, !dbg !2821
  %sub1883 = sub i32 %605, 5, !dbg !2821
  %gt1884 = icmp sgt i32 %and1882, %sub1883, !dbg !2821
  br i1 %gt1884, label %if.then1885, label %if.exit1913, !dbg !2821

if.then1885:                                      ; preds = %if.exit1878
  %606 = load double, ptr %y1686, align 8
  store double %606, ptr %x1886, align 8
  %607 = load double, ptr %x1886, align 8, !dbg !2822
  %608 = call double @llvm.fabs.f64(double %607), !dbg !2822
  %ge1887 = fcmp oge double %608, 0x4340000000000000, !dbg !2824
  br i1 %ge1887, label %if.then1888, label %if.exit1901, !dbg !2824

if.then1888:                                      ; preds = %if.then1885
  %609 = load i8, ptr %denormal, align 1, !dbg !2826
  %610 = trunc i8 %609 to i1, !dbg !2826
  br i1 %610, label %and.rhs1889, label %and.phi1895, !dbg !2826

and.rhs1889:                                      ; preds = %if.then1888
  %611 = load i32, ptr %bits1756, align 4, !dbg !2826
  %612 = load i32, ptr %e2767, align 4, !dbg !2826
  %add1890 = add i32 53, %612, !dbg !2826
  %sub1891 = sub i32 %add1890, -149, !dbg !2826
  %eq1892 = icmp eq i32 %sub1891, %611, !dbg !2826
  %check1893 = icmp sge i32 %sub1891, 0, !dbg !2826
  %siui-eq1894 = and i1 %check1893, %eq1892, !dbg !2826
  br label %and.phi1895, !dbg !2826

and.phi1895:                                      ; preds = %and.rhs1889, %if.then1888
  %val1896 = phi i1 [ false, %if.then1888 ], [ %siui-eq1894, %and.rhs1889 ], !dbg !2826
  br i1 %val1896, label %if.then1897, label %if.exit1898, !dbg !2826

if.then1897:                                      ; preds = %and.phi1895
  store i8 0, ptr %denormal, align 1, !dbg !2826
  br label %if.exit1898, !dbg !2826

if.exit1898:                                      ; preds = %if.then1897, %and.phi1895
  %613 = load double, ptr %y1686, align 8, !dbg !2828
  %fmul1899 = fmul double %613, 5.000000e-01, !dbg !2828
  store double %fmul1899, ptr %y1686, align 8, !dbg !2828
  %614 = load i32, ptr %e2767, align 4, !dbg !2829
  %add1900 = add i32 %614, 1, !dbg !2829
  store i32 %add1900, ptr %e2767, align 4, !dbg !2829
  br label %if.exit1901, !dbg !2829

if.exit1901:                                      ; preds = %if.exit1898, %if.then1885
  %615 = load i32, ptr %e2767, align 4, !dbg !2830
  %add1902 = add i32 %615, 53, !dbg !2830
  %616 = load i32, ptr %emax, align 4, !dbg !2830
  %gt1903 = icmp sgt i32 %add1902, %616, !dbg !2830
  br i1 %gt1903, label %or.phi1909, label %or.rhs1904, !dbg !2830

or.rhs1904:                                       ; preds = %if.exit1901
  %617 = load i8, ptr %denormal, align 1, !dbg !2830
  %618 = trunc i8 %617 to i1, !dbg !2830
  br i1 %618, label %and.rhs1905, label %and.phi1907, !dbg !2830

and.rhs1905:                                      ; preds = %or.rhs1904
  %619 = load double, ptr %frac, align 8, !dbg !2830
  %neq1906 = fcmp one double %619, 0.000000e+00, !dbg !2830
  br label %and.phi1907, !dbg !2830

and.phi1907:                                      ; preds = %and.rhs1905, %or.rhs1904
  %val1908 = phi i1 [ false, %or.rhs1904 ], [ %neq1906, %and.rhs1905 ], !dbg !2830
  br label %or.phi1909, !dbg !2830

or.phi1909:                                       ; preds = %and.phi1907, %if.exit1901
  %val1910 = phi i1 [ true, %if.exit1901 ], [ %val1908, %and.phi1907 ], !dbg !2830
  br i1 %val1910, label %if.then1911, label %if.exit1912, !dbg !2830

if.then1911:                                      ; preds = %or.phi1909
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_FLOAT to i64), ptr %reterr, align 8, !dbg !2830
  br label %err_retblock, !dbg !2830

if.exit1912:                                      ; preds = %or.phi1909
  br label %if.exit1913, !dbg !2830

if.exit1913:                                      ; preds = %if.exit1912, %if.exit1878
  %620 = load double, ptr %y1686, align 8
  store double %620, ptr %x1914, align 8
  %621 = load i32, ptr %e2767, align 4
  store i32 %621, ptr %n1915, align 4
  %622 = load double, ptr %x1914, align 8, !dbg !2831
  %623 = load i32, ptr %n1915, align 4, !dbg !2831
  %624 = call double @scalbn(double %622, i32 %623), !dbg !2831
  store double %624, ptr %blockret392, align 8, !dbg !2831
  br label %expr_block.exit1917, !dbg !2831

expr_block.exit1917:                              ; preds = %if.exit1913, %checkok867, %checkok819, %if.then780, %if.then722, %if.then705, %if.exit457, %if.then446
  %625 = load double, ptr %blockret392, align 8, !dbg !2831
  %fpfptrunc1918 = fptrunc double %625 to float, !dbg !2831
  store float %fpfptrunc1918, ptr %blockret, align 4, !dbg !2831
  br label %expr_block.exit1919, !dbg !2831

expr_block.exit1919:                              ; preds = %expr_block.exit1917, %expr_block.exit, %if.then72, %if.then45
  %626 = load float, ptr %blockret, align 4, !dbg !2831
  store float %626, ptr %0, align 4, !dbg !2831
  ret i64 0, !dbg !2831

err_retblock:                                     ; preds = %if.then1911, %if.then731, %if.then728, %if.then701, %guard_block696, %if.then663, %if.else654, %if.then523, %if.else456, %if.else383, %if.then327, %if.then324, %guard_block, %if.else273, %if.then220, %if.else, %if.then29, %if.then
  %627 = load i64, ptr %reterr, align 8, !dbg !2831
  ret i64 %627, !dbg !2831

panic:                                            ; preds = %if.then3
  store i64 %4, ptr %taddr, align 8
  %628 = insertvalue %any undef, ptr %taddr, 0
  %629 = insertvalue %any %628, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr5, align 8
  %630 = insertvalue %any undef, ptr %taddr5, 0
  %631 = insertvalue %any %630, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg6, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg7, align 8
  store %"char[]" { ptr @.func.115, i64 8 }, ptr %indirectarg8, align 8
  store %any %629, ptr %varargslots, align 16
  %ptradd9 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %631, ptr %ptradd9, align 16
  %632 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %632, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg10, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg6, ptr align 8 %indirectarg7, ptr align 8 %indirectarg8, i32 470, ptr align 8 %indirectarg10) #6, !dbg !2408
  unreachable, !dbg !2408

panic12:                                          ; preds = %switch.case11
  store i64 %11, ptr %taddr13, align 8
  %633 = insertvalue %any undef, ptr %taddr13, 0
  %634 = insertvalue %any %633, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 1, ptr %taddr14, align 8
  %635 = insertvalue %any undef, ptr %taddr14, 0
  %636 = insertvalue %any %635, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.12, i64 61 }, ptr %indirectarg15, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg16, align 8
  store %"char[]" { ptr @.func.115, i64 8 }, ptr %indirectarg17, align 8
  store %any %634, ptr %varargslots18, align 16
  %ptradd19 = getelementptr inbounds i8, ptr %varargslots18, i64 16
  store %any %636, ptr %ptradd19, align 16
  %637 = insertvalue %"any[]" undef, ptr %varargslots18, 0
  %"$$temp20" = insertvalue %"any[]" %637, i64 2, 1
  store %"any[]" %"$$temp20", ptr %indirectarg21, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg15, ptr align 8 %indirectarg16, ptr align 8 %indirectarg17, i32 476, ptr align 8 %indirectarg21) #6, !dbg !2414
  unreachable, !dbg !2414

panic78:                                          ; preds = %and.rhs
  store i64 %46, ptr %taddr79, align 8
  %638 = insertvalue %any undef, ptr %taddr79, 0
  %639 = insertvalue %any %638, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr80, align 8
  %640 = insertvalue %any undef, ptr %taddr80, 0
  %641 = insertvalue %any %640, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg81, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg82, align 8
  store %"char[]" { ptr @.func.115, i64 8 }, ptr %indirectarg83, align 8
  store %any %639, ptr %varargslots84, align 16
  %ptradd85 = getelementptr inbounds i8, ptr %varargslots84, i64 16
  store %any %641, ptr %ptradd85, align 16
  %642 = insertvalue %"any[]" undef, ptr %varargslots84, 0
  %"$$temp86" = insertvalue %"any[]" %642, i64 2, 1
  store %"any[]" %"$$temp86", ptr %indirectarg87, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg81, ptr align 8 %indirectarg82, ptr align 8 %indirectarg83, i32 485, ptr align 8 %indirectarg87) #6, !dbg !2420
  unreachable, !dbg !2420

panic94:                                          ; preds = %and.rhs91
  store i64 %50, ptr %taddr95, align 8
  %643 = insertvalue %any undef, ptr %taddr95, 0
  %644 = insertvalue %any %643, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 1, ptr %taddr96, align 8
  %645 = insertvalue %any undef, ptr %taddr96, 0
  %646 = insertvalue %any %645, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg97, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg98, align 8
  store %"char[]" { ptr @.func.115, i64 8 }, ptr %indirectarg99, align 8
  store %any %644, ptr %varargslots100, align 16
  %ptradd101 = getelementptr inbounds i8, ptr %varargslots100, i64 16
  store %any %646, ptr %ptradd101, align 16
  %647 = insertvalue %"any[]" undef, ptr %varargslots100, 0
  %"$$temp102" = insertvalue %"any[]" %647, i64 2, 1
  store %"any[]" %"$$temp102", ptr %indirectarg103, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg97, ptr align 8 %indirectarg98, ptr align 8 %indirectarg99, i32 485, ptr align 8 %indirectarg103) #6, !dbg !2420
  unreachable, !dbg !2420

panic111:                                         ; preds = %if.then109
  store i64 %56, ptr %taddr112, align 8
  %648 = insertvalue %any undef, ptr %taddr112, 0
  %649 = insertvalue %any %648, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 2, ptr %taddr113, align 8
  %650 = insertvalue %any undef, ptr %taddr113, 0
  %651 = insertvalue %any %650, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.12, i64 61 }, ptr %indirectarg114, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg115, align 8
  store %"char[]" { ptr @.func.115, i64 8 }, ptr %indirectarg116, align 8
  store %any %649, ptr %varargslots117, align 16
  %ptradd118 = getelementptr inbounds i8, ptr %varargslots117, i64 16
  store %any %651, ptr %ptradd118, align 16
  %652 = insertvalue %"any[]" undef, ptr %varargslots117, 0
  %"$$temp119" = insertvalue %"any[]" %652, i64 2, 1
  store %"any[]" %"$$temp119", ptr %indirectarg120, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg114, ptr align 8 %indirectarg115, ptr align 8 %indirectarg116, i32 487, ptr align 8 %indirectarg120) #6, !dbg !2421
  unreachable, !dbg !2421

panic130:                                         ; preds = %loop.cond
  store i64 %63, ptr %taddr131, align 8
  %653 = insertvalue %any undef, ptr %taddr131, 0
  %654 = insertvalue %any %653, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %65, ptr %taddr132, align 8
  %655 = insertvalue %any undef, ptr %taddr132, 0
  %656 = insertvalue %any %655, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg133, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg134, align 8
  store %"char[]" { ptr @.func.115, i64 8 }, ptr %indirectarg135, align 8
  store %any %654, ptr %varargslots136, align 16
  %ptradd137 = getelementptr inbounds i8, ptr %varargslots136, i64 16
  store %any %656, ptr %ptradd137, align 16
  %657 = insertvalue %"any[]" undef, ptr %varargslots136, 0
  %"$$temp138" = insertvalue %"any[]" %657, i64 2, 1
  store %"any[]" %"$$temp138", ptr %indirectarg139, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg133, ptr align 8 %indirectarg134, ptr align 8 %indirectarg135, i32 344, ptr align 8 %indirectarg139) #6, !dbg !2449
  unreachable, !dbg !2449

panic159:                                         ; preds = %and.rhs155
  store i64 %79, ptr %taddr160, align 8
  %658 = insertvalue %any undef, ptr %taddr160, 0
  %659 = insertvalue %any %658, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %add157, ptr %taddr161, align 8
  %660 = insertvalue %any undef, ptr %taddr161, 0
  %661 = insertvalue %any %660, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg162, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg163, align 8
  store %"char[]" { ptr @.func.115, i64 8 }, ptr %indirectarg164, align 8
  store %any %659, ptr %varargslots165, align 16
  %ptradd166 = getelementptr inbounds i8, ptr %varargslots165, i64 16
  store %any %661, ptr %ptradd166, align 16
  %662 = insertvalue %"any[]" undef, ptr %varargslots165, 0
  %"$$temp167" = insertvalue %"any[]" %662, i64 2, 1
  store %"any[]" %"$$temp167", ptr %indirectarg168, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg162, ptr align 8 %indirectarg163, ptr align 8 %indirectarg164, i32 357, ptr align 8 %indirectarg168) #6, !dbg !2461
  unreachable, !dbg !2461

panic182:                                         ; preds = %and.rhs178
  store i64 %87, ptr %taddr183, align 8
  %663 = insertvalue %any undef, ptr %taddr183, 0
  %664 = insertvalue %any %663, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %add180, ptr %taddr184, align 8
  %665 = insertvalue %any undef, ptr %taddr184, 0
  %666 = insertvalue %any %665, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg185, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg186, align 8
  store %"char[]" { ptr @.func.115, i64 8 }, ptr %indirectarg187, align 8
  store %any %664, ptr %varargslots188, align 16
  %ptradd189 = getelementptr inbounds i8, ptr %varargslots188, i64 16
  store %any %666, ptr %ptradd189, align 16
  %667 = insertvalue %"any[]" undef, ptr %varargslots188, 0
  %"$$temp190" = insertvalue %"any[]" %667, i64 2, 1
  store %"any[]" %"$$temp190", ptr %indirectarg191, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg185, ptr align 8 %indirectarg186, ptr align 8 %indirectarg187, i32 361, ptr align 8 %indirectarg191) #6, !dbg !2466
  unreachable, !dbg !2466

panic260:                                         ; preds = %if.exit256
  store i64 %120, ptr %taddr261, align 8
  %668 = insertvalue %any undef, ptr %taddr261, 0
  %669 = insertvalue %any %668, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %add258, ptr %taddr262, align 8
  %670 = insertvalue %any undef, ptr %taddr262, 0
  %671 = insertvalue %any %670, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg263, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg264, align 8
  store %"char[]" { ptr @.func.115, i64 8 }, ptr %indirectarg265, align 8
  store %any %669, ptr %varargslots266, align 16
  %ptradd267 = getelementptr inbounds i8, ptr %varargslots266, i64 16
  store %any %671, ptr %ptradd267, align 16
  %672 = insertvalue %"any[]" undef, ptr %varargslots266, 0
  %"$$temp268" = insertvalue %"any[]" %672, i64 2, 1
  store %"any[]" %"$$temp268", ptr %indirectarg269, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg263, ptr align 8 %indirectarg264, ptr align 8 %indirectarg265, i32 394, ptr align 8 %indirectarg269) #6, !dbg !2497
  unreachable, !dbg !2497

panic291:                                         ; preds = %if.then288
  store i64 %137, ptr %taddr292, align 8
  %673 = insertvalue %any undef, ptr %taddr292, 0
  %674 = insertvalue %any %673, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %add289, ptr %taddr293, align 8
  %675 = insertvalue %any undef, ptr %taddr293, 0
  %676 = insertvalue %any %675, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.12, i64 61 }, ptr %indirectarg294, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg295, align 8
  store %"char[]" { ptr @.func.115, i64 8 }, ptr %indirectarg296, align 8
  store %any %674, ptr %varargslots297, align 16
  %ptradd298 = getelementptr inbounds i8, ptr %varargslots297, i64 16
  store %any %676, ptr %ptradd298, align 16
  %677 = insertvalue %"any[]" undef, ptr %varargslots297, 0
  %"$$temp299" = insertvalue %"any[]" %677, i64 2, 1
  store %"any[]" %"$$temp299", ptr %indirectarg300, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg294, ptr align 8 %indirectarg295, ptr align 8 %indirectarg296, i32 403, ptr align 8 %indirectarg300) #6, !dbg !2508
  unreachable, !dbg !2508

panic302:                                         ; preds = %checkok301
  store i64 %add289, ptr %taddr303, align 8
  %678 = insertvalue %any undef, ptr %taddr303, 0
  %679 = insertvalue %any %678, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.107, i64 22 }, ptr %indirectarg304, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg305, align 8
  store %"char[]" { ptr @.func.115, i64 8 }, ptr %indirectarg306, align 8
  store %any %679, ptr %varargslots307, align 16
  %680 = insertvalue %"any[]" undef, ptr %varargslots307, 0
  %"$$temp308" = insertvalue %"any[]" %680, i64 1, 1
  store %"any[]" %"$$temp308", ptr %indirectarg309, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg304, ptr align 8 %indirectarg305, ptr align 8 %indirectarg306, i32 403, ptr align 8 %indirectarg309) #6, !dbg !2508
  unreachable, !dbg !2508

panic403:                                         ; preds = %assert_ok
  store i64 %199, ptr %taddr404, align 8
  %681 = insertvalue %any undef, ptr %taddr404, 0
  %682 = insertvalue %any %681, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr405, align 8
  %683 = insertvalue %any undef, ptr %taddr405, 0
  %684 = insertvalue %any %683, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg406, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg407, align 8
  store %"char[]" { ptr @.func.115, i64 8 }, ptr %indirectarg408, align 8
  store %any %682, ptr %varargslots409, align 16
  %ptradd410 = getelementptr inbounds i8, ptr %varargslots409, i64 16
  store %any %684, ptr %ptradd410, align 16
  %685 = insertvalue %"any[]" undef, ptr %varargslots409, 0
  %"$$temp411" = insertvalue %"any[]" %685, i64 2, 1
  store %"any[]" %"$$temp411", ptr %indirectarg412, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg406, ptr align 8 %indirectarg407, ptr align 8 %indirectarg408, i32 45, ptr align 8 %indirectarg412) #6, !dbg !2565
  unreachable, !dbg !2565

panic431:                                         ; preds = %loop.cond428
  store i64 %208, ptr %taddr432, align 8
  %686 = insertvalue %any undef, ptr %taddr432, 0
  %687 = insertvalue %any %686, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %210, ptr %taddr433, align 8
  %688 = insertvalue %any undef, ptr %taddr433, 0
  %689 = insertvalue %any %688, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg434, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg435, align 8
  store %"char[]" { ptr @.func.115, i64 8 }, ptr %indirectarg436, align 8
  store %any %687, ptr %varargslots437, align 16
  %ptradd438 = getelementptr inbounds i8, ptr %varargslots437, i64 16
  store %any %689, ptr %ptradd438, align 16
  %690 = insertvalue %"any[]" undef, ptr %varargslots437, 0
  %"$$temp439" = insertvalue %"any[]" %690, i64 2, 1
  store %"any[]" %"$$temp439", ptr %indirectarg440, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg434, ptr align 8 %indirectarg435, ptr align 8 %indirectarg436, i32 56, ptr align 8 %indirectarg440) #6, !dbg !2583
  unreachable, !dbg !2583

panic466:                                         ; preds = %and.rhs462
  store i64 %225, ptr %taddr467, align 8
  %691 = insertvalue %any undef, ptr %taddr467, 0
  %692 = insertvalue %any %691, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %add464, ptr %taddr468, align 8
  %693 = insertvalue %any undef, ptr %taddr468, 0
  %694 = insertvalue %any %693, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg469, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg470, align 8
  store %"char[]" { ptr @.func.115, i64 8 }, ptr %indirectarg471, align 8
  store %any %692, ptr %varargslots472, align 16
  %ptradd473 = getelementptr inbounds i8, ptr %varargslots472, i64 16
  store %any %694, ptr %ptradd473, align 16
  %695 = insertvalue %"any[]" undef, ptr %varargslots472, 0
  %"$$temp474" = insertvalue %"any[]" %695, i64 2, 1
  store %"any[]" %"$$temp474", ptr %indirectarg475, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg469, ptr align 8 %indirectarg470, ptr align 8 %indirectarg471, i32 70, ptr align 8 %indirectarg475) #6, !dbg !2595
  unreachable, !dbg !2595

panic489:                                         ; preds = %and.rhs485
  store i64 %233, ptr %taddr490, align 8
  %696 = insertvalue %any undef, ptr %taddr490, 0
  %697 = insertvalue %any %696, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %add487, ptr %taddr491, align 8
  %698 = insertvalue %any undef, ptr %taddr491, 0
  %699 = insertvalue %any %698, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg492, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg493, align 8
  store %"char[]" { ptr @.func.115, i64 8 }, ptr %indirectarg494, align 8
  store %any %697, ptr %varargslots495, align 16
  %ptradd496 = getelementptr inbounds i8, ptr %varargslots495, i64 16
  store %any %699, ptr %ptradd496, align 16
  %700 = insertvalue %"any[]" undef, ptr %varargslots495, 0
  %"$$temp497" = insertvalue %"any[]" %700, i64 2, 1
  store %"any[]" %"$$temp497", ptr %indirectarg498, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg492, ptr align 8 %indirectarg493, ptr align 8 %indirectarg494, i32 74, ptr align 8 %indirectarg498) #6, !dbg !2600
  unreachable, !dbg !2600

panic537:                                         ; preds = %if.then535
  store i64 %sext, ptr %taddr538, align 8
  %701 = insertvalue %any undef, ptr %taddr538, 0
  %702 = insertvalue %any %701, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.26, i64 38 }, ptr %indirectarg539, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg540, align 8
  store %"char[]" { ptr @.func.115, i64 8 }, ptr %indirectarg541, align 8
  store %any %702, ptr %varargslots542, align 16
  %703 = insertvalue %"any[]" undef, ptr %varargslots542, 0
  %"$$temp543" = insertvalue %"any[]" %703, i64 1, 1
  store %"any[]" %"$$temp543", ptr %indirectarg544, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg539, ptr align 8 %indirectarg540, ptr align 8 %indirectarg541, i32 94, ptr align 8 %indirectarg544) #6, !dbg !2619
  unreachable, !dbg !2619

panic547:                                         ; preds = %checkok545
  store i64 128, ptr %taddr548, align 8
  %704 = insertvalue %any undef, ptr %taddr548, 0
  %705 = insertvalue %any %704, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext, ptr %taddr549, align 8
  %706 = insertvalue %any undef, ptr %taddr549, 0
  %707 = insertvalue %any %706, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg550, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg551, align 8
  store %"char[]" { ptr @.func.115, i64 8 }, ptr %indirectarg552, align 8
  store %any %705, ptr %varargslots553, align 16
  %ptradd554 = getelementptr inbounds i8, ptr %varargslots553, i64 16
  store %any %707, ptr %ptradd554, align 16
  %708 = insertvalue %"any[]" undef, ptr %varargslots553, 0
  %"$$temp555" = insertvalue %"any[]" %708, i64 2, 1
  store %"any[]" %"$$temp555", ptr %indirectarg556, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg550, ptr align 8 %indirectarg551, ptr align 8 %indirectarg552, i32 94, ptr align 8 %indirectarg556) #6, !dbg !2619
  unreachable, !dbg !2619

panic564:                                         ; preds = %checkok557
  store i64 %sext562, ptr %taddr565, align 8
  %709 = insertvalue %any undef, ptr %taddr565, 0
  %710 = insertvalue %any %709, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.26, i64 38 }, ptr %indirectarg566, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg567, align 8
  store %"char[]" { ptr @.func.115, i64 8 }, ptr %indirectarg568, align 8
  store %any %710, ptr %varargslots569, align 16
  %711 = insertvalue %"any[]" undef, ptr %varargslots569, 0
  %"$$temp570" = insertvalue %"any[]" %711, i64 1, 1
  store %"any[]" %"$$temp570", ptr %indirectarg571, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg566, ptr align 8 %indirectarg567, ptr align 8 %indirectarg568, i32 94, ptr align 8 %indirectarg571) #6, !dbg !2619
  unreachable, !dbg !2619

panic574:                                         ; preds = %checkok572
  store i64 128, ptr %taddr575, align 8
  %712 = insertvalue %any undef, ptr %taddr575, 0
  %713 = insertvalue %any %712, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext562, ptr %taddr576, align 8
  %714 = insertvalue %any undef, ptr %taddr576, 0
  %715 = insertvalue %any %714, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg577, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg578, align 8
  store %"char[]" { ptr @.func.115, i64 8 }, ptr %indirectarg579, align 8
  store %any %713, ptr %varargslots580, align 16
  %ptradd581 = getelementptr inbounds i8, ptr %varargslots580, i64 16
  store %any %715, ptr %ptradd581, align 16
  %716 = insertvalue %"any[]" undef, ptr %varargslots580, 0
  %"$$temp582" = insertvalue %"any[]" %716, i64 2, 1
  store %"any[]" %"$$temp582", ptr %indirectarg583, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg577, ptr align 8 %indirectarg578, ptr align 8 %indirectarg579, i32 94, ptr align 8 %indirectarg583) #6, !dbg !2619
  unreachable, !dbg !2619

panic591:                                         ; preds = %if.else586
  store i64 %sext589, ptr %taddr592, align 8
  %717 = insertvalue %any undef, ptr %taddr592, 0
  %718 = insertvalue %any %717, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.26, i64 38 }, ptr %indirectarg593, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg594, align 8
  store %"char[]" { ptr @.func.115, i64 8 }, ptr %indirectarg595, align 8
  store %any %718, ptr %varargslots596, align 16
  %719 = insertvalue %"any[]" undef, ptr %varargslots596, 0
  %"$$temp597" = insertvalue %"any[]" %719, i64 1, 1
  store %"any[]" %"$$temp597", ptr %indirectarg598, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg593, ptr align 8 %indirectarg594, ptr align 8 %indirectarg595, i32 98, ptr align 8 %indirectarg598) #6, !dbg !2621
  unreachable, !dbg !2621

panic601:                                         ; preds = %checkok599
  store i64 128, ptr %taddr602, align 8
  %720 = insertvalue %any undef, ptr %taddr602, 0
  %721 = insertvalue %any %720, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext589, ptr %taddr603, align 8
  %722 = insertvalue %any undef, ptr %taddr603, 0
  %723 = insertvalue %any %722, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg604, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg605, align 8
  store %"char[]" { ptr @.func.115, i64 8 }, ptr %indirectarg606, align 8
  store %any %721, ptr %varargslots607, align 16
  %ptradd608 = getelementptr inbounds i8, ptr %varargslots607, i64 16
  store %any %723, ptr %ptradd608, align 16
  %724 = insertvalue %"any[]" undef, ptr %varargslots607, 0
  %"$$temp609" = insertvalue %"any[]" %724, i64 2, 1
  store %"any[]" %"$$temp609", ptr %indirectarg610, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg604, ptr align 8 %indirectarg605, ptr align 8 %indirectarg606, i32 98, ptr align 8 %indirectarg610) #6, !dbg !2621
  unreachable, !dbg !2621

panic639:                                         ; preds = %assert_ok635
  store i64 %274, ptr %taddr640, align 8
  %725 = insertvalue %any undef, ptr %taddr640, 0
  %726 = insertvalue %any %725, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %add637, ptr %taddr641, align 8
  %727 = insertvalue %any undef, ptr %taddr641, 0
  %728 = insertvalue %any %727, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg642, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg643, align 8
  store %"char[]" { ptr @.func.115, i64 8 }, ptr %indirectarg644, align 8
  store %any %726, ptr %varargslots645, align 16
  %ptradd646 = getelementptr inbounds i8, ptr %varargslots645, i64 16
  store %any %728, ptr %ptradd646, align 16
  %729 = insertvalue %"any[]" undef, ptr %varargslots645, 0
  %"$$temp647" = insertvalue %"any[]" %729, i64 2, 1
  store %"any[]" %"$$temp647", ptr %indirectarg648, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg642, ptr align 8 %indirectarg643, ptr align 8 %indirectarg644, i32 113, ptr align 8 %indirectarg648) #6, !dbg !2633
  unreachable, !dbg !2633

panic667:                                         ; preds = %if.exit664
  store i64 %290, ptr %taddr668, align 8
  %730 = insertvalue %any undef, ptr %taddr668, 0
  %731 = insertvalue %any %730, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %add665, ptr %taddr669, align 8
  %732 = insertvalue %any undef, ptr %taddr669, 0
  %733 = insertvalue %any %732, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.12, i64 61 }, ptr %indirectarg670, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg671, align 8
  store %"char[]" { ptr @.func.115, i64 8 }, ptr %indirectarg672, align 8
  store %any %731, ptr %varargslots673, align 16
  %ptradd674 = getelementptr inbounds i8, ptr %varargslots673, i64 16
  store %any %733, ptr %ptradd674, align 16
  %734 = insertvalue %"any[]" undef, ptr %varargslots673, 0
  %"$$temp675" = insertvalue %"any[]" %734, i64 2, 1
  store %"any[]" %"$$temp675", ptr %indirectarg676, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg670, ptr align 8 %indirectarg671, ptr align 8 %indirectarg672, i32 120, ptr align 8 %indirectarg676) #6, !dbg !2640
  unreachable, !dbg !2640

panic679:                                         ; preds = %checkok677
  store i64 %add665, ptr %taddr680, align 8
  %735 = insertvalue %any undef, ptr %taddr680, 0
  %736 = insertvalue %any %735, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.107, i64 22 }, ptr %indirectarg681, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg682, align 8
  store %"char[]" { ptr @.func.115, i64 8 }, ptr %indirectarg683, align 8
  store %any %736, ptr %varargslots684, align 16
  %737 = insertvalue %"any[]" undef, ptr %varargslots684, 0
  %"$$temp685" = insertvalue %"any[]" %737, i64 1, 1
  store %"any[]" %"$$temp685", ptr %indirectarg686, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg681, ptr align 8 %indirectarg682, ptr align 8 %indirectarg683, i32 120, ptr align 8 %indirectarg686) #6, !dbg !2640
  unreachable, !dbg !2640

panic740:                                         ; preds = %loop.body737
  store i64 %sext738, ptr %taddr741, align 8
  %738 = insertvalue %any undef, ptr %taddr741, 0
  %739 = insertvalue %any %738, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.26, i64 38 }, ptr %indirectarg742, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg743, align 8
  store %"char[]" { ptr @.func.115, i64 8 }, ptr %indirectarg744, align 8
  store %any %739, ptr %varargslots745, align 16
  %740 = insertvalue %"any[]" undef, ptr %varargslots745, 0
  %"$$temp746" = insertvalue %"any[]" %740, i64 1, 1
  store %"any[]" %"$$temp746", ptr %indirectarg747, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg742, ptr align 8 %indirectarg743, ptr align 8 %indirectarg744, i32 138, ptr align 8 %indirectarg747) #6, !dbg !2652
  unreachable, !dbg !2652

panic750:                                         ; preds = %checkok748
  store i64 128, ptr %taddr751, align 8
  %741 = insertvalue %any undef, ptr %taddr751, 0
  %742 = insertvalue %any %741, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext738, ptr %taddr752, align 8
  %743 = insertvalue %any undef, ptr %taddr752, 0
  %744 = insertvalue %any %743, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg753, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg754, align 8
  store %"char[]" { ptr @.func.115, i64 8 }, ptr %indirectarg755, align 8
  store %any %742, ptr %varargslots756, align 16
  %ptradd757 = getelementptr inbounds i8, ptr %varargslots756, i64 16
  store %any %744, ptr %ptradd757, align 16
  %745 = insertvalue %"any[]" undef, ptr %varargslots756, 0
  %"$$temp758" = insertvalue %"any[]" %745, i64 2, 1
  store %"any[]" %"$$temp758", ptr %indirectarg759, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg753, ptr align 8 %indirectarg754, ptr align 8 %indirectarg755, i32 138, ptr align 8 %indirectarg759) #6, !dbg !2652
  unreachable, !dbg !2652

panic792:                                         ; preds = %if.then786
  store i64 %sub790, ptr %taddr793, align 8
  %746 = insertvalue %any undef, ptr %taddr793, 0
  %747 = insertvalue %any %746, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.26, i64 38 }, ptr %indirectarg794, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg795, align 8
  store %"char[]" { ptr @.func.115, i64 8 }, ptr %indirectarg796, align 8
  store %any %747, ptr %varargslots797, align 16
  %748 = insertvalue %"any[]" undef, ptr %varargslots797, 0
  %"$$temp798" = insertvalue %"any[]" %748, i64 1, 1
  store %"any[]" %"$$temp798", ptr %indirectarg799, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg794, ptr align 8 %indirectarg795, ptr align 8 %indirectarg796, i32 152, ptr align 8 %indirectarg799) #6, !dbg !2667
  unreachable, !dbg !2667

panic802:                                         ; preds = %checkok800
  store i64 8, ptr %taddr803, align 8
  %749 = insertvalue %any undef, ptr %taddr803, 0
  %750 = insertvalue %any %749, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sub790, ptr %taddr804, align 8
  %751 = insertvalue %any undef, ptr %taddr804, 0
  %752 = insertvalue %any %751, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg805, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg806, align 8
  store %"char[]" { ptr @.func.115, i64 8 }, ptr %indirectarg807, align 8
  store %any %750, ptr %varargslots808, align 16
  %ptradd809 = getelementptr inbounds i8, ptr %varargslots808, i64 16
  store %any %752, ptr %ptradd809, align 16
  %753 = insertvalue %"any[]" undef, ptr %varargslots808, 0
  %"$$temp810" = insertvalue %"any[]" %753, i64 2, 1
  store %"any[]" %"$$temp810", ptr %indirectarg811, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg805, ptr align 8 %indirectarg806, ptr align 8 %indirectarg807, i32 152, ptr align 8 %indirectarg811) #6, !dbg !2667
  unreachable, !dbg !2667

panic815:                                         ; preds = %checkok812
  store %"char[]" { ptr @.panic_msg.111, i64 17 }, ptr %indirectarg816, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg817, align 8
  store %"char[]" { ptr @.func.115, i64 8 }, ptr %indirectarg818, align 8
  %754 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %754(ptr align 8 %indirectarg816, ptr align 8 %indirectarg817, ptr align 8 %indirectarg818, i32 152) #6, !dbg !2667
  unreachable, !dbg !2667

panic828:                                         ; preds = %or.rhs827
  store i32 %342, ptr %taddr829, align 4
  %755 = insertvalue %any undef, ptr %taddr829, 0
  %756 = insertvalue %any %755, i64 ptrtoint (ptr @"$ct.uint" to i64), 1
  store %"char[]" { ptr @.panic_msg.112, i64 35 }, ptr %indirectarg830, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg831, align 8
  store %"char[]" { ptr @.func.115, i64 8 }, ptr %indirectarg832, align 8
  store %any %756, ptr %varargslots833, align 16
  %757 = insertvalue %"any[]" undef, ptr %varargslots833, 0
  %"$$temp834" = insertvalue %"any[]" %757, i64 1, 1
  store %"any[]" %"$$temp834", ptr %indirectarg835, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg830, ptr align 8 %indirectarg831, ptr align 8 %indirectarg832, i32 154, ptr align 8 %indirectarg835) #6, !dbg !2670
  unreachable, !dbg !2670

panic847:                                         ; preds = %if.then841
  store i64 %sub845, ptr %taddr848, align 8
  %758 = insertvalue %any undef, ptr %taddr848, 0
  %759 = insertvalue %any %758, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.26, i64 38 }, ptr %indirectarg849, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg850, align 8
  store %"char[]" { ptr @.func.115, i64 8 }, ptr %indirectarg851, align 8
  store %any %759, ptr %varargslots852, align 16
  %760 = insertvalue %"any[]" undef, ptr %varargslots852, 0
  %"$$temp853" = insertvalue %"any[]" %760, i64 1, 1
  store %"any[]" %"$$temp853", ptr %indirectarg854, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg849, ptr align 8 %indirectarg850, ptr align 8 %indirectarg851, i32 154, ptr align 8 %indirectarg854) #6, !dbg !2670
  unreachable, !dbg !2670

panic857:                                         ; preds = %checkok855
  store i64 8, ptr %taddr858, align 8
  %761 = insertvalue %any undef, ptr %taddr858, 0
  %762 = insertvalue %any %761, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sub845, ptr %taddr859, align 8
  %763 = insertvalue %any undef, ptr %taddr859, 0
  %764 = insertvalue %any %763, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg860, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg861, align 8
  store %"char[]" { ptr @.func.115, i64 8 }, ptr %indirectarg862, align 8
  store %any %762, ptr %varargslots863, align 16
  %ptradd864 = getelementptr inbounds i8, ptr %varargslots863, i64 16
  store %any %764, ptr %ptradd864, align 16
  %765 = insertvalue %"any[]" undef, ptr %varargslots863, 0
  %"$$temp865" = insertvalue %"any[]" %765, i64 2, 1
  store %"any[]" %"$$temp865", ptr %indirectarg866, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg860, ptr align 8 %indirectarg861, ptr align 8 %indirectarg862, i32 154, ptr align 8 %indirectarg866) #6, !dbg !2670
  unreachable, !dbg !2670

panic885:                                         ; preds = %cond.phi881
  store i64 %sub883, ptr %taddr886, align 8
  %766 = insertvalue %any undef, ptr %taddr886, 0
  %767 = insertvalue %any %766, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.26, i64 38 }, ptr %indirectarg887, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg888, align 8
  store %"char[]" { ptr @.func.115, i64 8 }, ptr %indirectarg889, align 8
  store %any %767, ptr %varargslots890, align 16
  %768 = insertvalue %"any[]" undef, ptr %varargslots890, 0
  %"$$temp891" = insertvalue %"any[]" %768, i64 1, 1
  store %"any[]" %"$$temp891", ptr %indirectarg892, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg887, ptr align 8 %indirectarg888, ptr align 8 %indirectarg889, i32 161, ptr align 8 %indirectarg892) #6, !dbg !2676
  unreachable, !dbg !2676

panic895:                                         ; preds = %checkok893
  store i64 8, ptr %taddr896, align 8
  %769 = insertvalue %any undef, ptr %taddr896, 0
  %770 = insertvalue %any %769, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sub883, ptr %taddr897, align 8
  %771 = insertvalue %any undef, ptr %taddr897, 0
  %772 = insertvalue %any %771, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg898, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg899, align 8
  store %"char[]" { ptr @.func.115, i64 8 }, ptr %indirectarg900, align 8
  store %any %770, ptr %varargslots901, align 16
  %ptradd902 = getelementptr inbounds i8, ptr %varargslots901, i64 16
  store %any %772, ptr %ptradd902, align 16
  %773 = insertvalue %"any[]" undef, ptr %varargslots901, 0
  %"$$temp903" = insertvalue %"any[]" %773, i64 2, 1
  store %"any[]" %"$$temp903", ptr %indirectarg904, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg898, ptr align 8 %indirectarg899, ptr align 8 %indirectarg900, i32 161, ptr align 8 %indirectarg904) #6, !dbg !2676
  unreachable, !dbg !2676

panic912:                                         ; preds = %loop.body909
  store i64 %sext910, ptr %taddr913, align 8
  %774 = insertvalue %any undef, ptr %taddr913, 0
  %775 = insertvalue %any %774, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.26, i64 38 }, ptr %indirectarg914, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg915, align 8
  store %"char[]" { ptr @.func.115, i64 8 }, ptr %indirectarg916, align 8
  store %any %775, ptr %varargslots917, align 16
  %776 = insertvalue %"any[]" undef, ptr %varargslots917, 0
  %"$$temp918" = insertvalue %"any[]" %776, i64 1, 1
  store %"any[]" %"$$temp918", ptr %indirectarg919, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg914, ptr align 8 %indirectarg915, ptr align 8 %indirectarg916, i32 165, ptr align 8 %indirectarg919) #6, !dbg !2683
  unreachable, !dbg !2683

panic922:                                         ; preds = %checkok920
  store i64 128, ptr %taddr923, align 8
  %777 = insertvalue %any undef, ptr %taddr923, 0
  %778 = insertvalue %any %777, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext910, ptr %taddr924, align 8
  %779 = insertvalue %any undef, ptr %taddr924, 0
  %780 = insertvalue %any %779, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg925, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg926, align 8
  store %"char[]" { ptr @.func.115, i64 8 }, ptr %indirectarg927, align 8
  store %any %778, ptr %varargslots928, align 16
  %ptradd929 = getelementptr inbounds i8, ptr %varargslots928, i64 16
  store %any %780, ptr %ptradd929, align 16
  %781 = insertvalue %"any[]" undef, ptr %varargslots928, 0
  %"$$temp930" = insertvalue %"any[]" %781, i64 2, 1
  store %"any[]" %"$$temp930", ptr %indirectarg931, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg925, ptr align 8 %indirectarg926, ptr align 8 %indirectarg927, i32 165, ptr align 8 %indirectarg931) #6, !dbg !2683
  unreachable, !dbg !2683

panic935:                                         ; preds = %checkok932
  store %"char[]" { ptr @.panic_msg.113, i64 10 }, ptr %indirectarg936, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg937, align 8
  store %"char[]" { ptr @.func.115, i64 8 }, ptr %indirectarg938, align 8
  %782 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %782(ptr align 8 %indirectarg936, ptr align 8 %indirectarg937, ptr align 8 %indirectarg938, i32 165) #6, !dbg !2683
  unreachable, !dbg !2683

panic943:                                         ; preds = %checkok939
  store i64 %sext941, ptr %taddr944, align 8
  %783 = insertvalue %any undef, ptr %taddr944, 0
  %784 = insertvalue %any %783, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.26, i64 38 }, ptr %indirectarg945, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg946, align 8
  store %"char[]" { ptr @.func.115, i64 8 }, ptr %indirectarg947, align 8
  store %any %784, ptr %varargslots948, align 16
  %785 = insertvalue %"any[]" undef, ptr %varargslots948, 0
  %"$$temp949" = insertvalue %"any[]" %785, i64 1, 1
  store %"any[]" %"$$temp949", ptr %indirectarg950, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg945, ptr align 8 %indirectarg946, ptr align 8 %indirectarg947, i32 166, ptr align 8 %indirectarg950) #6, !dbg !2684
  unreachable, !dbg !2684

panic953:                                         ; preds = %checkok951
  store i64 128, ptr %taddr954, align 8
  %786 = insertvalue %any undef, ptr %taddr954, 0
  %787 = insertvalue %any %786, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext941, ptr %taddr955, align 8
  %788 = insertvalue %any undef, ptr %taddr955, 0
  %789 = insertvalue %any %788, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg956, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg957, align 8
  store %"char[]" { ptr @.func.115, i64 8 }, ptr %indirectarg958, align 8
  store %any %787, ptr %varargslots959, align 16
  %ptradd960 = getelementptr inbounds i8, ptr %varargslots959, i64 16
  store %any %789, ptr %ptradd960, align 16
  %790 = insertvalue %"any[]" undef, ptr %varargslots959, 0
  %"$$temp961" = insertvalue %"any[]" %790, i64 2, 1
  store %"any[]" %"$$temp961", ptr %indirectarg962, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg956, ptr align 8 %indirectarg957, ptr align 8 %indirectarg958, i32 166, ptr align 8 %indirectarg962) #6, !dbg !2684
  unreachable, !dbg !2684

panic966:                                         ; preds = %checkok963
  store %"char[]" { ptr @.panic_msg.111, i64 17 }, ptr %indirectarg967, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg968, align 8
  store %"char[]" { ptr @.func.115, i64 8 }, ptr %indirectarg969, align 8
  %791 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %791(ptr align 8 %indirectarg967, ptr align 8 %indirectarg968, ptr align 8 %indirectarg969, i32 166) #6, !dbg !2684
  unreachable, !dbg !2684

panic974:                                         ; preds = %checkok970
  store i64 %sext972, ptr %taddr975, align 8
  %792 = insertvalue %any undef, ptr %taddr975, 0
  %793 = insertvalue %any %792, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.26, i64 38 }, ptr %indirectarg976, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg977, align 8
  store %"char[]" { ptr @.func.115, i64 8 }, ptr %indirectarg978, align 8
  store %any %793, ptr %varargslots979, align 16
  %794 = insertvalue %"any[]" undef, ptr %varargslots979, 0
  %"$$temp980" = insertvalue %"any[]" %794, i64 1, 1
  store %"any[]" %"$$temp980", ptr %indirectarg981, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg976, ptr align 8 %indirectarg977, ptr align 8 %indirectarg978, i32 166, ptr align 8 %indirectarg981) #6, !dbg !2684
  unreachable, !dbg !2684

panic984:                                         ; preds = %checkok982
  store i64 128, ptr %taddr985, align 8
  %795 = insertvalue %any undef, ptr %taddr985, 0
  %796 = insertvalue %any %795, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext972, ptr %taddr986, align 8
  %797 = insertvalue %any undef, ptr %taddr986, 0
  %798 = insertvalue %any %797, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg987, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg988, align 8
  store %"char[]" { ptr @.func.115, i64 8 }, ptr %indirectarg989, align 8
  store %any %796, ptr %varargslots990, align 16
  %ptradd991 = getelementptr inbounds i8, ptr %varargslots990, i64 16
  store %any %798, ptr %ptradd991, align 16
  %799 = insertvalue %"any[]" undef, ptr %varargslots990, 0
  %"$$temp992" = insertvalue %"any[]" %799, i64 2, 1
  store %"any[]" %"$$temp992", ptr %indirectarg993, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg987, ptr align 8 %indirectarg988, ptr align 8 %indirectarg989, i32 166, ptr align 8 %indirectarg993) #6, !dbg !2684
  unreachable, !dbg !2684

panic997:                                         ; preds = %checkok994
  store %"char[]" { ptr @.panic_msg.111, i64 17 }, ptr %indirectarg998, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg999, align 8
  store %"char[]" { ptr @.func.115, i64 8 }, ptr %indirectarg1000, align 8
  %800 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %800(ptr align 8 %indirectarg998, ptr align 8 %indirectarg999, ptr align 8 %indirectarg1000, i32 167) #6, !dbg !2685
  unreachable, !dbg !2685

panic1008:                                        ; preds = %and.rhs1005
  store i64 %sext1006, ptr %taddr1009, align 8
  %801 = insertvalue %any undef, ptr %taddr1009, 0
  %802 = insertvalue %any %801, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.26, i64 38 }, ptr %indirectarg1010, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg1011, align 8
  store %"char[]" { ptr @.func.115, i64 8 }, ptr %indirectarg1012, align 8
  store %any %802, ptr %varargslots1013, align 16
  %803 = insertvalue %"any[]" undef, ptr %varargslots1013, 0
  %"$$temp1014" = insertvalue %"any[]" %803, i64 1, 1
  store %"any[]" %"$$temp1014", ptr %indirectarg1015, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1010, ptr align 8 %indirectarg1011, ptr align 8 %indirectarg1012, i32 168, ptr align 8 %indirectarg1015) #6, !dbg !2686
  unreachable, !dbg !2686

panic1018:                                        ; preds = %checkok1016
  store i64 128, ptr %taddr1019, align 8
  %804 = insertvalue %any undef, ptr %taddr1019, 0
  %805 = insertvalue %any %804, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1006, ptr %taddr1020, align 8
  %806 = insertvalue %any undef, ptr %taddr1020, 0
  %807 = insertvalue %any %806, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg1021, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg1022, align 8
  store %"char[]" { ptr @.func.115, i64 8 }, ptr %indirectarg1023, align 8
  store %any %805, ptr %varargslots1024, align 16
  %ptradd1025 = getelementptr inbounds i8, ptr %varargslots1024, i64 16
  store %any %807, ptr %ptradd1025, align 16
  %808 = insertvalue %"any[]" undef, ptr %varargslots1024, 0
  %"$$temp1026" = insertvalue %"any[]" %808, i64 2, 1
  store %"any[]" %"$$temp1026", ptr %indirectarg1027, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1021, ptr align 8 %indirectarg1022, ptr align 8 %indirectarg1023, i32 168, ptr align 8 %indirectarg1027) #6, !dbg !2686
  unreachable, !dbg !2686

panic1045:                                        ; preds = %if.then1041
  store i64 %sext1043, ptr %taddr1046, align 8
  %809 = insertvalue %any undef, ptr %taddr1046, 0
  %810 = insertvalue %any %809, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.26, i64 38 }, ptr %indirectarg1047, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg1048, align 8
  store %"char[]" { ptr @.func.115, i64 8 }, ptr %indirectarg1049, align 8
  store %any %810, ptr %varargslots1050, align 16
  %811 = insertvalue %"any[]" undef, ptr %varargslots1050, 0
  %"$$temp1051" = insertvalue %"any[]" %811, i64 1, 1
  store %"any[]" %"$$temp1051", ptr %indirectarg1052, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1047, ptr align 8 %indirectarg1048, ptr align 8 %indirectarg1049, i32 174, ptr align 8 %indirectarg1052) #6, !dbg !2690
  unreachable, !dbg !2690

panic1055:                                        ; preds = %checkok1053
  store i64 128, ptr %taddr1056, align 8
  %812 = insertvalue %any undef, ptr %taddr1056, 0
  %813 = insertvalue %any %812, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1043, ptr %taddr1057, align 8
  %814 = insertvalue %any undef, ptr %taddr1057, 0
  %815 = insertvalue %any %814, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg1058, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg1059, align 8
  store %"char[]" { ptr @.func.115, i64 8 }, ptr %indirectarg1060, align 8
  store %any %813, ptr %varargslots1061, align 16
  %ptradd1062 = getelementptr inbounds i8, ptr %varargslots1061, i64 16
  store %any %815, ptr %ptradd1062, align 16
  %816 = insertvalue %"any[]" undef, ptr %varargslots1061, 0
  %"$$temp1063" = insertvalue %"any[]" %816, i64 2, 1
  store %"any[]" %"$$temp1063", ptr %indirectarg1064, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1058, ptr align 8 %indirectarg1059, ptr align 8 %indirectarg1060, i32 174, ptr align 8 %indirectarg1064) #6, !dbg !2690
  unreachable, !dbg !2690

panic1078:                                        ; preds = %and.rhs1075
  store i64 %sext1076, ptr %taddr1079, align 8
  %817 = insertvalue %any undef, ptr %taddr1079, 0
  %818 = insertvalue %any %817, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.26, i64 38 }, ptr %indirectarg1080, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg1081, align 8
  store %"char[]" { ptr @.func.115, i64 8 }, ptr %indirectarg1082, align 8
  store %any %818, ptr %varargslots1083, align 16
  %819 = insertvalue %"any[]" undef, ptr %varargslots1083, 0
  %"$$temp1084" = insertvalue %"any[]" %819, i64 1, 1
  store %"any[]" %"$$temp1084", ptr %indirectarg1085, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1080, ptr align 8 %indirectarg1081, ptr align 8 %indirectarg1082, i32 179, ptr align 8 %indirectarg1085) #6, !dbg !2693
  unreachable, !dbg !2693

panic1088:                                        ; preds = %checkok1086
  store i64 128, ptr %taddr1089, align 8
  %820 = insertvalue %any undef, ptr %taddr1089, 0
  %821 = insertvalue %any %820, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1076, ptr %taddr1090, align 8
  %822 = insertvalue %any undef, ptr %taddr1090, 0
  %823 = insertvalue %any %822, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg1091, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg1092, align 8
  store %"char[]" { ptr @.func.115, i64 8 }, ptr %indirectarg1093, align 8
  store %any %821, ptr %varargslots1094, align 16
  %ptradd1095 = getelementptr inbounds i8, ptr %varargslots1094, i64 16
  store %any %823, ptr %ptradd1095, align 16
  %824 = insertvalue %"any[]" undef, ptr %varargslots1094, 0
  %"$$temp1096" = insertvalue %"any[]" %824, i64 2, 1
  store %"any[]" %"$$temp1096", ptr %indirectarg1097, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1091, ptr align 8 %indirectarg1092, ptr align 8 %indirectarg1093, i32 179, ptr align 8 %indirectarg1097) #6, !dbg !2693
  unreachable, !dbg !2693

panic1114:                                        ; preds = %loop.body1110
  store i64 %sext1112, ptr %taddr1115, align 8
  %825 = insertvalue %any undef, ptr %taddr1115, 0
  %826 = insertvalue %any %825, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.26, i64 38 }, ptr %indirectarg1116, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg1117, align 8
  store %"char[]" { ptr @.func.115, i64 8 }, ptr %indirectarg1118, align 8
  store %any %826, ptr %varargslots1119, align 16
  %827 = insertvalue %"any[]" undef, ptr %varargslots1119, 0
  %"$$temp1120" = insertvalue %"any[]" %827, i64 1, 1
  store %"any[]" %"$$temp1120", ptr %indirectarg1121, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1116, ptr align 8 %indirectarg1117, ptr align 8 %indirectarg1118, i32 185, ptr align 8 %indirectarg1121) #6, !dbg !2703
  unreachable, !dbg !2703

panic1124:                                        ; preds = %checkok1122
  store i64 128, ptr %taddr1125, align 8
  %828 = insertvalue %any undef, ptr %taddr1125, 0
  %829 = insertvalue %any %828, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1112, ptr %taddr1126, align 8
  %830 = insertvalue %any undef, ptr %taddr1126, 0
  %831 = insertvalue %any %830, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg1127, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg1128, align 8
  store %"char[]" { ptr @.func.115, i64 8 }, ptr %indirectarg1129, align 8
  store %any %829, ptr %varargslots1130, align 16
  %ptradd1131 = getelementptr inbounds i8, ptr %varargslots1130, i64 16
  store %any %831, ptr %ptradd1131, align 16
  %832 = insertvalue %"any[]" undef, ptr %varargslots1130, 0
  %"$$temp1132" = insertvalue %"any[]" %832, i64 2, 1
  store %"any[]" %"$$temp1132", ptr %indirectarg1133, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1127, ptr align 8 %indirectarg1128, ptr align 8 %indirectarg1129, i32 185, ptr align 8 %indirectarg1133) #6, !dbg !2703
  unreachable, !dbg !2703

panic1147:                                        ; preds = %if.then1140
  store i64 %sext1145, ptr %taddr1148, align 8
  %833 = insertvalue %any undef, ptr %taddr1148, 0
  %834 = insertvalue %any %833, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.26, i64 38 }, ptr %indirectarg1149, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg1150, align 8
  store %"char[]" { ptr @.func.115, i64 8 }, ptr %indirectarg1151, align 8
  store %any %834, ptr %varargslots1152, align 16
  %835 = insertvalue %"any[]" undef, ptr %varargslots1152, 0
  %"$$temp1153" = insertvalue %"any[]" %835, i64 1, 1
  store %"any[]" %"$$temp1153", ptr %indirectarg1154, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1149, ptr align 8 %indirectarg1150, ptr align 8 %indirectarg1151, i32 189, ptr align 8 %indirectarg1154) #6, !dbg !2707
  unreachable, !dbg !2707

panic1157:                                        ; preds = %checkok1155
  store i64 128, ptr %taddr1158, align 8
  %836 = insertvalue %any undef, ptr %taddr1158, 0
  %837 = insertvalue %any %836, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1145, ptr %taddr1159, align 8
  %838 = insertvalue %any undef, ptr %taddr1159, 0
  %839 = insertvalue %any %838, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg1160, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg1161, align 8
  store %"char[]" { ptr @.func.115, i64 8 }, ptr %indirectarg1162, align 8
  store %any %837, ptr %varargslots1163, align 16
  %ptradd1164 = getelementptr inbounds i8, ptr %varargslots1163, i64 16
  store %any %839, ptr %ptradd1164, align 16
  %840 = insertvalue %"any[]" undef, ptr %varargslots1163, 0
  %"$$temp1165" = insertvalue %"any[]" %840, i64 2, 1
  store %"any[]" %"$$temp1165", ptr %indirectarg1166, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1160, ptr align 8 %indirectarg1161, ptr align 8 %indirectarg1162, i32 189, ptr align 8 %indirectarg1166) #6, !dbg !2707
  unreachable, !dbg !2707

panic1173:                                        ; preds = %if.else1169
  store i64 %sext1171, ptr %taddr1174, align 8
  %841 = insertvalue %any undef, ptr %taddr1174, 0
  %842 = insertvalue %any %841, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.26, i64 38 }, ptr %indirectarg1175, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg1176, align 8
  store %"char[]" { ptr @.func.115, i64 8 }, ptr %indirectarg1177, align 8
  store %any %842, ptr %varargslots1178, align 16
  %843 = insertvalue %"any[]" undef, ptr %varargslots1178, 0
  %"$$temp1179" = insertvalue %"any[]" %843, i64 1, 1
  store %"any[]" %"$$temp1179", ptr %indirectarg1180, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1175, ptr align 8 %indirectarg1176, ptr align 8 %indirectarg1177, i32 194, ptr align 8 %indirectarg1180) #6, !dbg !2710
  unreachable, !dbg !2710

panic1183:                                        ; preds = %checkok1181
  store i64 128, ptr %taddr1184, align 8
  %844 = insertvalue %any undef, ptr %taddr1184, 0
  %845 = insertvalue %any %844, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1171, ptr %taddr1185, align 8
  %846 = insertvalue %any undef, ptr %taddr1185, 0
  %847 = insertvalue %any %846, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg1186, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg1187, align 8
  store %"char[]" { ptr @.func.115, i64 8 }, ptr %indirectarg1188, align 8
  store %any %845, ptr %varargslots1189, align 16
  %ptradd1190 = getelementptr inbounds i8, ptr %varargslots1189, i64 16
  store %any %847, ptr %ptradd1190, align 16
  %848 = insertvalue %"any[]" undef, ptr %varargslots1189, 0
  %"$$temp1191" = insertvalue %"any[]" %848, i64 2, 1
  store %"any[]" %"$$temp1191", ptr %indirectarg1192, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1186, ptr align 8 %indirectarg1187, ptr align 8 %indirectarg1188, i32 194, ptr align 8 %indirectarg1192) #6, !dbg !2710
  unreachable, !dbg !2710

panic1206:                                        ; preds = %and.rhs1203
  store i64 %sext1204, ptr %taddr1207, align 8
  %849 = insertvalue %any undef, ptr %taddr1207, 0
  %850 = insertvalue %any %849, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.26, i64 38 }, ptr %indirectarg1208, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg1209, align 8
  store %"char[]" { ptr @.func.115, i64 8 }, ptr %indirectarg1210, align 8
  store %any %850, ptr %varargslots1211, align 16
  %851 = insertvalue %"any[]" undef, ptr %varargslots1211, 0
  %"$$temp1212" = insertvalue %"any[]" %851, i64 1, 1
  store %"any[]" %"$$temp1212", ptr %indirectarg1213, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1208, ptr align 8 %indirectarg1209, ptr align 8 %indirectarg1210, i32 196, ptr align 8 %indirectarg1213) #6, !dbg !2711
  unreachable, !dbg !2711

panic1216:                                        ; preds = %checkok1214
  store i64 128, ptr %taddr1217, align 8
  %852 = insertvalue %any undef, ptr %taddr1217, 0
  %853 = insertvalue %any %852, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1204, ptr %taddr1218, align 8
  %854 = insertvalue %any undef, ptr %taddr1218, 0
  %855 = insertvalue %any %854, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg1219, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg1220, align 8
  store %"char[]" { ptr @.func.115, i64 8 }, ptr %indirectarg1221, align 8
  store %any %853, ptr %varargslots1222, align 16
  %ptradd1223 = getelementptr inbounds i8, ptr %varargslots1222, i64 16
  store %any %855, ptr %ptradd1223, align 16
  %856 = insertvalue %"any[]" undef, ptr %varargslots1222, 0
  %"$$temp1224" = insertvalue %"any[]" %856, i64 2, 1
  store %"any[]" %"$$temp1224", ptr %indirectarg1225, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1219, ptr align 8 %indirectarg1220, ptr align 8 %indirectarg1221, i32 196, ptr align 8 %indirectarg1225) #6, !dbg !2711
  unreachable, !dbg !2711

panic1252:                                        ; preds = %if.then1245
  store i64 %sext1250, ptr %taddr1253, align 8
  %857 = insertvalue %any undef, ptr %taddr1253, 0
  %858 = insertvalue %any %857, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.26, i64 38 }, ptr %indirectarg1254, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg1255, align 8
  store %"char[]" { ptr @.func.115, i64 8 }, ptr %indirectarg1256, align 8
  store %any %858, ptr %varargslots1257, align 16
  %859 = insertvalue %"any[]" undef, ptr %varargslots1257, 0
  %"$$temp1258" = insertvalue %"any[]" %859, i64 1, 1
  store %"any[]" %"$$temp1258", ptr %indirectarg1259, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1254, ptr align 8 %indirectarg1255, ptr align 8 %indirectarg1256, i32 206, ptr align 8 %indirectarg1259) #6, !dbg !2720
  unreachable, !dbg !2720

panic1262:                                        ; preds = %checkok1260
  store i64 128, ptr %taddr1263, align 8
  %860 = insertvalue %any undef, ptr %taddr1263, 0
  %861 = insertvalue %any %860, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1250, ptr %taddr1264, align 8
  %862 = insertvalue %any undef, ptr %taddr1264, 0
  %863 = insertvalue %any %862, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg1265, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg1266, align 8
  store %"char[]" { ptr @.func.115, i64 8 }, ptr %indirectarg1267, align 8
  store %any %861, ptr %varargslots1268, align 16
  %ptradd1269 = getelementptr inbounds i8, ptr %varargslots1268, i64 16
  store %any %863, ptr %ptradd1269, align 16
  %864 = insertvalue %"any[]" undef, ptr %varargslots1268, 0
  %"$$temp1270" = insertvalue %"any[]" %864, i64 2, 1
  store %"any[]" %"$$temp1270", ptr %indirectarg1271, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1265, ptr align 8 %indirectarg1266, ptr align 8 %indirectarg1267, i32 206, ptr align 8 %indirectarg1271) #6, !dbg !2720
  unreachable, !dbg !2720

panic1276:                                        ; preds = %checkok1272
  store i64 %sext1274, ptr %taddr1277, align 8
  %865 = insertvalue %any undef, ptr %taddr1277, 0
  %866 = insertvalue %any %865, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.26, i64 38 }, ptr %indirectarg1278, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg1279, align 8
  store %"char[]" { ptr @.func.115, i64 8 }, ptr %indirectarg1280, align 8
  store %any %866, ptr %varargslots1281, align 16
  %867 = insertvalue %"any[]" undef, ptr %varargslots1281, 0
  %"$$temp1282" = insertvalue %"any[]" %867, i64 1, 1
  store %"any[]" %"$$temp1282", ptr %indirectarg1283, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1278, ptr align 8 %indirectarg1279, ptr align 8 %indirectarg1280, i32 206, ptr align 8 %indirectarg1283) #6, !dbg !2720
  unreachable, !dbg !2720

panic1286:                                        ; preds = %checkok1284
  store i64 128, ptr %taddr1287, align 8
  %868 = insertvalue %any undef, ptr %taddr1287, 0
  %869 = insertvalue %any %868, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1274, ptr %taddr1288, align 8
  %870 = insertvalue %any undef, ptr %taddr1288, 0
  %871 = insertvalue %any %870, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg1289, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg1290, align 8
  store %"char[]" { ptr @.func.115, i64 8 }, ptr %indirectarg1291, align 8
  store %any %869, ptr %varargslots1292, align 16
  %ptradd1293 = getelementptr inbounds i8, ptr %varargslots1292, i64 16
  store %any %871, ptr %ptradd1293, align 16
  %872 = insertvalue %"any[]" undef, ptr %varargslots1292, 0
  %"$$temp1294" = insertvalue %"any[]" %872, i64 2, 1
  store %"any[]" %"$$temp1294", ptr %indirectarg1295, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1289, ptr align 8 %indirectarg1290, ptr align 8 %indirectarg1291, i32 206, ptr align 8 %indirectarg1295) #6, !dbg !2720
  unreachable, !dbg !2720

panic1302:                                        ; preds = %if.exit1299
  store i64 %sext1300, ptr %taddr1303, align 8
  %873 = insertvalue %any undef, ptr %taddr1303, 0
  %874 = insertvalue %any %873, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.26, i64 38 }, ptr %indirectarg1304, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg1305, align 8
  store %"char[]" { ptr @.func.115, i64 8 }, ptr %indirectarg1306, align 8
  store %any %874, ptr %varargslots1307, align 16
  %875 = insertvalue %"any[]" undef, ptr %varargslots1307, 0
  %"$$temp1308" = insertvalue %"any[]" %875, i64 1, 1
  store %"any[]" %"$$temp1308", ptr %indirectarg1309, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1304, ptr align 8 %indirectarg1305, ptr align 8 %indirectarg1306, i32 208, ptr align 8 %indirectarg1309) #6, !dbg !2721
  unreachable, !dbg !2721

panic1312:                                        ; preds = %checkok1310
  store i64 128, ptr %taddr1313, align 8
  %876 = insertvalue %any undef, ptr %taddr1313, 0
  %877 = insertvalue %any %876, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1300, ptr %taddr1314, align 8
  %878 = insertvalue %any undef, ptr %taddr1314, 0
  %879 = insertvalue %any %878, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg1315, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg1316, align 8
  store %"char[]" { ptr @.func.115, i64 8 }, ptr %indirectarg1317, align 8
  store %any %877, ptr %varargslots1318, align 16
  %ptradd1319 = getelementptr inbounds i8, ptr %varargslots1318, i64 16
  store %any %879, ptr %ptradd1319, align 16
  %880 = insertvalue %"any[]" undef, ptr %varargslots1318, 0
  %"$$temp1320" = insertvalue %"any[]" %880, i64 2, 1
  store %"any[]" %"$$temp1320", ptr %indirectarg1321, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1315, ptr align 8 %indirectarg1316, ptr align 8 %indirectarg1317, i32 208, ptr align 8 %indirectarg1321) #6, !dbg !2721
  unreachable, !dbg !2721

panic1337:                                        ; preds = %or.rhs1334
  store i64 %sext1335, ptr %taddr1338, align 8
  %881 = insertvalue %any undef, ptr %taddr1338, 0
  %882 = insertvalue %any %881, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.26, i64 38 }, ptr %indirectarg1339, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg1340, align 8
  store %"char[]" { ptr @.func.115, i64 8 }, ptr %indirectarg1341, align 8
  store %any %882, ptr %varargslots1342, align 16
  %883 = insertvalue %"any[]" undef, ptr %varargslots1342, 0
  %"$$temp1343" = insertvalue %"any[]" %883, i64 1, 1
  store %"any[]" %"$$temp1343", ptr %indirectarg1344, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1339, ptr align 8 %indirectarg1340, ptr align 8 %indirectarg1341, i32 221, ptr align 8 %indirectarg1344) #6, !dbg !2735
  unreachable, !dbg !2735

panic1347:                                        ; preds = %checkok1345
  store i64 128, ptr %taddr1348, align 8
  %884 = insertvalue %any undef, ptr %taddr1348, 0
  %885 = insertvalue %any %884, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1335, ptr %taddr1349, align 8
  %886 = insertvalue %any undef, ptr %taddr1349, 0
  %887 = insertvalue %any %886, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg1350, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg1351, align 8
  store %"char[]" { ptr @.func.115, i64 8 }, ptr %indirectarg1352, align 8
  store %any %885, ptr %varargslots1353, align 16
  %ptradd1354 = getelementptr inbounds i8, ptr %varargslots1353, i64 16
  store %any %887, ptr %ptradd1354, align 16
  %888 = insertvalue %"any[]" undef, ptr %varargslots1353, 0
  %"$$temp1355" = insertvalue %"any[]" %888, i64 2, 1
  store %"any[]" %"$$temp1355", ptr %indirectarg1356, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1350, ptr align 8 %indirectarg1351, ptr align 8 %indirectarg1352, i32 221, ptr align 8 %indirectarg1356) #6, !dbg !2735
  unreachable, !dbg !2735

panic1361:                                        ; preds = %checkok1357
  store i64 %sext1359, ptr %taddr1362, align 8
  %889 = insertvalue %any undef, ptr %taddr1362, 0
  %890 = insertvalue %any %889, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.26, i64 38 }, ptr %indirectarg1363, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg1364, align 8
  store %"char[]" { ptr @.func.115, i64 8 }, ptr %indirectarg1365, align 8
  store %any %890, ptr %varargslots1366, align 16
  %891 = insertvalue %"any[]" undef, ptr %varargslots1366, 0
  %"$$temp1367" = insertvalue %"any[]" %891, i64 1, 1
  store %"any[]" %"$$temp1367", ptr %indirectarg1368, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1363, ptr align 8 %indirectarg1364, ptr align 8 %indirectarg1365, i32 221, ptr align 8 %indirectarg1368) #6, !dbg !2735
  unreachable, !dbg !2735

panic1371:                                        ; preds = %checkok1369
  store i64 2, ptr %taddr1372, align 8
  %892 = insertvalue %any undef, ptr %taddr1372, 0
  %893 = insertvalue %any %892, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1359, ptr %taddr1373, align 8
  %894 = insertvalue %any undef, ptr %taddr1373, 0
  %895 = insertvalue %any %894, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg1374, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg1375, align 8
  store %"char[]" { ptr @.func.115, i64 8 }, ptr %indirectarg1376, align 8
  store %any %893, ptr %varargslots1377, align 16
  %ptradd1378 = getelementptr inbounds i8, ptr %varargslots1377, i64 16
  store %any %895, ptr %ptradd1378, align 16
  %896 = insertvalue %"any[]" undef, ptr %varargslots1377, 0
  %"$$temp1379" = insertvalue %"any[]" %896, i64 2, 1
  store %"any[]" %"$$temp1379", ptr %indirectarg1380, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1374, ptr align 8 %indirectarg1375, ptr align 8 %indirectarg1376, i32 221, ptr align 8 %indirectarg1380) #6, !dbg !2735
  unreachable, !dbg !2735

panic1392:                                        ; preds = %if.exit1387
  store i64 %sext1390, ptr %taddr1393, align 8
  %897 = insertvalue %any undef, ptr %taddr1393, 0
  %898 = insertvalue %any %897, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.26, i64 38 }, ptr %indirectarg1394, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg1395, align 8
  store %"char[]" { ptr @.func.115, i64 8 }, ptr %indirectarg1396, align 8
  store %any %898, ptr %varargslots1397, align 16
  %899 = insertvalue %"any[]" undef, ptr %varargslots1397, 0
  %"$$temp1398" = insertvalue %"any[]" %899, i64 1, 1
  store %"any[]" %"$$temp1398", ptr %indirectarg1399, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1394, ptr align 8 %indirectarg1395, ptr align 8 %indirectarg1396, i32 226, ptr align 8 %indirectarg1399) #6, !dbg !2739
  unreachable, !dbg !2739

panic1402:                                        ; preds = %checkok1400
  store i64 128, ptr %taddr1403, align 8
  %900 = insertvalue %any undef, ptr %taddr1403, 0
  %901 = insertvalue %any %900, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1390, ptr %taddr1404, align 8
  %902 = insertvalue %any undef, ptr %taddr1404, 0
  %903 = insertvalue %any %902, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg1405, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg1406, align 8
  store %"char[]" { ptr @.func.115, i64 8 }, ptr %indirectarg1407, align 8
  store %any %901, ptr %varargslots1408, align 16
  %ptradd1409 = getelementptr inbounds i8, ptr %varargslots1408, i64 16
  store %any %903, ptr %ptradd1409, align 16
  %904 = insertvalue %"any[]" undef, ptr %varargslots1408, 0
  %"$$temp1410" = insertvalue %"any[]" %904, i64 2, 1
  store %"any[]" %"$$temp1410", ptr %indirectarg1411, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1405, ptr align 8 %indirectarg1406, ptr align 8 %indirectarg1407, i32 226, ptr align 8 %indirectarg1411) #6, !dbg !2739
  unreachable, !dbg !2739

panic1416:                                        ; preds = %checkok1412
  store i64 %sext1414, ptr %taddr1417, align 8
  %905 = insertvalue %any undef, ptr %taddr1417, 0
  %906 = insertvalue %any %905, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.26, i64 38 }, ptr %indirectarg1418, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg1419, align 8
  store %"char[]" { ptr @.func.115, i64 8 }, ptr %indirectarg1420, align 8
  store %any %906, ptr %varargslots1421, align 16
  %907 = insertvalue %"any[]" undef, ptr %varargslots1421, 0
  %"$$temp1422" = insertvalue %"any[]" %907, i64 1, 1
  store %"any[]" %"$$temp1422", ptr %indirectarg1423, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1418, ptr align 8 %indirectarg1419, ptr align 8 %indirectarg1420, i32 226, ptr align 8 %indirectarg1423) #6, !dbg !2739
  unreachable, !dbg !2739

panic1426:                                        ; preds = %checkok1424
  store i64 2, ptr %taddr1427, align 8
  %908 = insertvalue %any undef, ptr %taddr1427, 0
  %909 = insertvalue %any %908, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1414, ptr %taddr1428, align 8
  %910 = insertvalue %any undef, ptr %taddr1428, 0
  %911 = insertvalue %any %910, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg1429, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg1430, align 8
  store %"char[]" { ptr @.func.115, i64 8 }, ptr %indirectarg1431, align 8
  store %any %909, ptr %varargslots1432, align 16
  %ptradd1433 = getelementptr inbounds i8, ptr %varargslots1432, i64 16
  store %any %911, ptr %ptradd1433, align 16
  %912 = insertvalue %"any[]" undef, ptr %varargslots1432, 0
  %"$$temp1434" = insertvalue %"any[]" %912, i64 2, 1
  store %"any[]" %"$$temp1434", ptr %indirectarg1435, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1429, ptr align 8 %indirectarg1430, ptr align 8 %indirectarg1431, i32 226, ptr align 8 %indirectarg1435) #6, !dbg !2739
  unreachable, !dbg !2739

panic1460:                                        ; preds = %loop.body1456
  store i64 %sext1458, ptr %taddr1461, align 8
  %913 = insertvalue %any undef, ptr %taddr1461, 0
  %914 = insertvalue %any %913, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.26, i64 38 }, ptr %indirectarg1462, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg1463, align 8
  store %"char[]" { ptr @.func.115, i64 8 }, ptr %indirectarg1464, align 8
  store %any %914, ptr %varargslots1465, align 16
  %915 = insertvalue %"any[]" undef, ptr %varargslots1465, 0
  %"$$temp1466" = insertvalue %"any[]" %915, i64 1, 1
  store %"any[]" %"$$temp1466", ptr %indirectarg1467, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1462, ptr align 8 %indirectarg1463, ptr align 8 %indirectarg1464, i32 233, ptr align 8 %indirectarg1467) #6, !dbg !2747
  unreachable, !dbg !2747

panic1470:                                        ; preds = %checkok1468
  store i64 128, ptr %taddr1471, align 8
  %916 = insertvalue %any undef, ptr %taddr1471, 0
  %917 = insertvalue %any %916, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1458, ptr %taddr1472, align 8
  %918 = insertvalue %any undef, ptr %taddr1472, 0
  %919 = insertvalue %any %918, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg1473, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg1474, align 8
  store %"char[]" { ptr @.func.115, i64 8 }, ptr %indirectarg1475, align 8
  store %any %917, ptr %varargslots1476, align 16
  %ptradd1477 = getelementptr inbounds i8, ptr %varargslots1476, i64 16
  store %any %919, ptr %ptradd1477, align 16
  %920 = insertvalue %"any[]" undef, ptr %varargslots1476, 0
  %"$$temp1478" = insertvalue %"any[]" %920, i64 2, 1
  store %"any[]" %"$$temp1478", ptr %indirectarg1479, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1473, ptr align 8 %indirectarg1474, ptr align 8 %indirectarg1475, i32 233, ptr align 8 %indirectarg1479) #6, !dbg !2747
  unreachable, !dbg !2747

panic1482:                                        ; preds = %checkok1480
  store i32 %486, ptr %taddr1483, align 4
  %921 = insertvalue %any undef, ptr %taddr1483, 0
  %922 = insertvalue %any %921, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  store %"char[]" { ptr @.panic_msg.112, i64 35 }, ptr %indirectarg1484, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg1485, align 8
  store %"char[]" { ptr @.func.115, i64 8 }, ptr %indirectarg1486, align 8
  store %any %922, ptr %varargslots1487, align 16
  %923 = insertvalue %"any[]" undef, ptr %varargslots1487, 0
  %"$$temp1488" = insertvalue %"any[]" %923, i64 1, 1
  store %"any[]" %"$$temp1488", ptr %indirectarg1489, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1484, ptr align 8 %indirectarg1485, ptr align 8 %indirectarg1486, i32 233, ptr align 8 %indirectarg1489) #6, !dbg !2747
  unreachable, !dbg !2747

panic1492:                                        ; preds = %checkok1490
  store i32 %486, ptr %taddr1493, align 4
  %924 = insertvalue %any undef, ptr %taddr1493, 0
  %925 = insertvalue %any %924, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  store %"char[]" { ptr @.panic_msg.112, i64 35 }, ptr %indirectarg1494, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg1495, align 8
  store %"char[]" { ptr @.func.115, i64 8 }, ptr %indirectarg1496, align 8
  store %any %925, ptr %varargslots1497, align 16
  %926 = insertvalue %"any[]" undef, ptr %varargslots1497, 0
  %"$$temp1498" = insertvalue %"any[]" %926, i64 1, 1
  store %"any[]" %"$$temp1498", ptr %indirectarg1499, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1494, ptr align 8 %indirectarg1495, ptr align 8 %indirectarg1496, i32 233, ptr align 8 %indirectarg1499) #6, !dbg !2747
  unreachable, !dbg !2747

panic1506:                                        ; preds = %checkok1500
  store i64 %sext1504, ptr %taddr1507, align 8
  %927 = insertvalue %any undef, ptr %taddr1507, 0
  %928 = insertvalue %any %927, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.26, i64 38 }, ptr %indirectarg1508, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg1509, align 8
  store %"char[]" { ptr @.func.115, i64 8 }, ptr %indirectarg1510, align 8
  store %any %928, ptr %varargslots1511, align 16
  %929 = insertvalue %"any[]" undef, ptr %varargslots1511, 0
  %"$$temp1512" = insertvalue %"any[]" %929, i64 1, 1
  store %"any[]" %"$$temp1512", ptr %indirectarg1513, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1508, ptr align 8 %indirectarg1509, ptr align 8 %indirectarg1510, i32 234, ptr align 8 %indirectarg1513) #6, !dbg !2748
  unreachable, !dbg !2748

panic1516:                                        ; preds = %checkok1514
  store i64 128, ptr %taddr1517, align 8
  %930 = insertvalue %any undef, ptr %taddr1517, 0
  %931 = insertvalue %any %930, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1504, ptr %taddr1518, align 8
  %932 = insertvalue %any undef, ptr %taddr1518, 0
  %933 = insertvalue %any %932, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg1519, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg1520, align 8
  store %"char[]" { ptr @.func.115, i64 8 }, ptr %indirectarg1521, align 8
  store %any %931, ptr %varargslots1522, align 16
  %ptradd1523 = getelementptr inbounds i8, ptr %varargslots1522, i64 16
  store %any %933, ptr %ptradd1523, align 16
  %934 = insertvalue %"any[]" undef, ptr %varargslots1522, 0
  %"$$temp1524" = insertvalue %"any[]" %934, i64 2, 1
  store %"any[]" %"$$temp1524", ptr %indirectarg1525, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1519, ptr align 8 %indirectarg1520, ptr align 8 %indirectarg1521, i32 234, ptr align 8 %indirectarg1525) #6, !dbg !2748
  unreachable, !dbg !2748

panic1529:                                        ; preds = %checkok1526
  store i32 %494, ptr %taddr1530, align 4
  %935 = insertvalue %any undef, ptr %taddr1530, 0
  %936 = insertvalue %any %935, i64 ptrtoint (ptr @"$ct.uint" to i64), 1
  store %"char[]" { ptr @.panic_msg.112, i64 35 }, ptr %indirectarg1531, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg1532, align 8
  store %"char[]" { ptr @.func.115, i64 8 }, ptr %indirectarg1533, align 8
  store %any %936, ptr %varargslots1534, align 16
  %937 = insertvalue %"any[]" undef, ptr %varargslots1534, 0
  %"$$temp1535" = insertvalue %"any[]" %937, i64 1, 1
  store %"any[]" %"$$temp1535", ptr %indirectarg1536, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1531, ptr align 8 %indirectarg1532, ptr align 8 %indirectarg1533, i32 234, ptr align 8 %indirectarg1536) #6, !dbg !2748
  unreachable, !dbg !2748

panic1542:                                        ; preds = %checkok1537
  store i64 %sext1540, ptr %taddr1543, align 8
  %938 = insertvalue %any undef, ptr %taddr1543, 0
  %939 = insertvalue %any %938, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.26, i64 38 }, ptr %indirectarg1544, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg1545, align 8
  store %"char[]" { ptr @.func.115, i64 8 }, ptr %indirectarg1546, align 8
  store %any %939, ptr %varargslots1547, align 16
  %940 = insertvalue %"any[]" undef, ptr %varargslots1547, 0
  %"$$temp1548" = insertvalue %"any[]" %940, i64 1, 1
  store %"any[]" %"$$temp1548", ptr %indirectarg1549, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1544, ptr align 8 %indirectarg1545, ptr align 8 %indirectarg1546, i32 234, ptr align 8 %indirectarg1549) #6, !dbg !2748
  unreachable, !dbg !2748

panic1552:                                        ; preds = %checkok1550
  store i64 128, ptr %taddr1553, align 8
  %941 = insertvalue %any undef, ptr %taddr1553, 0
  %942 = insertvalue %any %941, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1540, ptr %taddr1554, align 8
  %943 = insertvalue %any undef, ptr %taddr1554, 0
  %944 = insertvalue %any %943, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg1555, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg1556, align 8
  store %"char[]" { ptr @.func.115, i64 8 }, ptr %indirectarg1557, align 8
  store %any %942, ptr %varargslots1558, align 16
  %ptradd1559 = getelementptr inbounds i8, ptr %varargslots1558, i64 16
  store %any %944, ptr %ptradd1559, align 16
  %945 = insertvalue %"any[]" undef, ptr %varargslots1558, 0
  %"$$temp1560" = insertvalue %"any[]" %945, i64 2, 1
  store %"any[]" %"$$temp1560", ptr %indirectarg1561, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1555, ptr align 8 %indirectarg1556, ptr align 8 %indirectarg1557, i32 234, ptr align 8 %indirectarg1561) #6, !dbg !2748
  unreachable, !dbg !2748

panic1565:                                        ; preds = %checkok1562
  store i32 %501, ptr %taddr1566, align 4
  %946 = insertvalue %any undef, ptr %taddr1566, 0
  %947 = insertvalue %any %946, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  store %"char[]" { ptr @.panic_msg.112, i64 35 }, ptr %indirectarg1567, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg1568, align 8
  store %"char[]" { ptr @.func.115, i64 8 }, ptr %indirectarg1569, align 8
  store %any %947, ptr %varargslots1570, align 16
  %948 = insertvalue %"any[]" undef, ptr %varargslots1570, 0
  %"$$temp1571" = insertvalue %"any[]" %948, i64 1, 1
  store %"any[]" %"$$temp1571", ptr %indirectarg1572, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1567, ptr align 8 %indirectarg1568, ptr align 8 %indirectarg1569, i32 235, ptr align 8 %indirectarg1572) #6, !dbg !2749
  unreachable, !dbg !2749

panic1575:                                        ; preds = %checkok1573
  store i32 %501, ptr %taddr1576, align 4
  %949 = insertvalue %any undef, ptr %taddr1576, 0
  %950 = insertvalue %any %949, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  store %"char[]" { ptr @.panic_msg.112, i64 35 }, ptr %indirectarg1577, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg1578, align 8
  store %"char[]" { ptr @.func.115, i64 8 }, ptr %indirectarg1579, align 8
  store %any %950, ptr %varargslots1580, align 16
  %951 = insertvalue %"any[]" undef, ptr %varargslots1580, 0
  %"$$temp1581" = insertvalue %"any[]" %951, i64 1, 1
  store %"any[]" %"$$temp1581", ptr %indirectarg1582, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1577, ptr align 8 %indirectarg1578, ptr align 8 %indirectarg1579, i32 235, ptr align 8 %indirectarg1582) #6, !dbg !2749
  unreachable, !dbg !2749

panic1589:                                        ; preds = %and.rhs1586
  store i64 %sext1587, ptr %taddr1590, align 8
  %952 = insertvalue %any undef, ptr %taddr1590, 0
  %953 = insertvalue %any %952, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.26, i64 38 }, ptr %indirectarg1591, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg1592, align 8
  store %"char[]" { ptr @.func.115, i64 8 }, ptr %indirectarg1593, align 8
  store %any %953, ptr %varargslots1594, align 16
  %954 = insertvalue %"any[]" undef, ptr %varargslots1594, 0
  %"$$temp1595" = insertvalue %"any[]" %954, i64 1, 1
  store %"any[]" %"$$temp1595", ptr %indirectarg1596, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1591, ptr align 8 %indirectarg1592, ptr align 8 %indirectarg1593, i32 236, ptr align 8 %indirectarg1596) #6, !dbg !2750
  unreachable, !dbg !2750

panic1599:                                        ; preds = %checkok1597
  store i64 128, ptr %taddr1600, align 8
  %955 = insertvalue %any undef, ptr %taddr1600, 0
  %956 = insertvalue %any %955, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1587, ptr %taddr1601, align 8
  %957 = insertvalue %any undef, ptr %taddr1601, 0
  %958 = insertvalue %any %957, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg1602, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg1603, align 8
  store %"char[]" { ptr @.func.115, i64 8 }, ptr %indirectarg1604, align 8
  store %any %956, ptr %varargslots1605, align 16
  %ptradd1606 = getelementptr inbounds i8, ptr %varargslots1605, i64 16
  store %any %958, ptr %ptradd1606, align 16
  %959 = insertvalue %"any[]" undef, ptr %varargslots1605, 0
  %"$$temp1607" = insertvalue %"any[]" %959, i64 2, 1
  store %"any[]" %"$$temp1607", ptr %indirectarg1608, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1602, ptr align 8 %indirectarg1603, ptr align 8 %indirectarg1604, i32 236, ptr align 8 %indirectarg1608) #6, !dbg !2750
  unreachable, !dbg !2750

panic1631:                                        ; preds = %if.then1628
  store i64 %sext1629, ptr %taddr1632, align 8
  %960 = insertvalue %any undef, ptr %taddr1632, 0
  %961 = insertvalue %any %960, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.26, i64 38 }, ptr %indirectarg1633, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg1634, align 8
  store %"char[]" { ptr @.func.115, i64 8 }, ptr %indirectarg1635, align 8
  store %any %961, ptr %varargslots1636, align 16
  %962 = insertvalue %"any[]" undef, ptr %varargslots1636, 0
  %"$$temp1637" = insertvalue %"any[]" %962, i64 1, 1
  store %"any[]" %"$$temp1637", ptr %indirectarg1638, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1633, ptr align 8 %indirectarg1634, ptr align 8 %indirectarg1635, i32 247, ptr align 8 %indirectarg1638) #6, !dbg !2758
  unreachable, !dbg !2758

panic1641:                                        ; preds = %checkok1639
  store i64 128, ptr %taddr1642, align 8
  %963 = insertvalue %any undef, ptr %taddr1642, 0
  %964 = insertvalue %any %963, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1629, ptr %taddr1643, align 8
  %965 = insertvalue %any undef, ptr %taddr1643, 0
  %966 = insertvalue %any %965, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg1644, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg1645, align 8
  store %"char[]" { ptr @.func.115, i64 8 }, ptr %indirectarg1646, align 8
  store %any %964, ptr %varargslots1647, align 16
  %ptradd1648 = getelementptr inbounds i8, ptr %varargslots1647, i64 16
  store %any %966, ptr %ptradd1648, align 16
  %967 = insertvalue %"any[]" undef, ptr %varargslots1647, 0
  %"$$temp1649" = insertvalue %"any[]" %967, i64 2, 1
  store %"any[]" %"$$temp1649", ptr %indirectarg1650, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1644, ptr align 8 %indirectarg1645, ptr align 8 %indirectarg1646, i32 247, ptr align 8 %indirectarg1650) #6, !dbg !2758
  unreachable, !dbg !2758

panic1660:                                        ; preds = %if.else1655
  store i64 %sext1658, ptr %taddr1661, align 8
  %968 = insertvalue %any undef, ptr %taddr1661, 0
  %969 = insertvalue %any %968, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.26, i64 38 }, ptr %indirectarg1662, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg1663, align 8
  store %"char[]" { ptr @.func.115, i64 8 }, ptr %indirectarg1664, align 8
  store %any %969, ptr %varargslots1665, align 16
  %970 = insertvalue %"any[]" undef, ptr %varargslots1665, 0
  %"$$temp1666" = insertvalue %"any[]" %970, i64 1, 1
  store %"any[]" %"$$temp1666", ptr %indirectarg1667, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1662, ptr align 8 %indirectarg1663, ptr align 8 %indirectarg1664, i32 252, ptr align 8 %indirectarg1667) #6, !dbg !2761
  unreachable, !dbg !2761

panic1670:                                        ; preds = %checkok1668
  store i64 128, ptr %taddr1671, align 8
  %971 = insertvalue %any undef, ptr %taddr1671, 0
  %972 = insertvalue %any %971, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1658, ptr %taddr1672, align 8
  %973 = insertvalue %any undef, ptr %taddr1672, 0
  %974 = insertvalue %any %973, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg1673, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg1674, align 8
  store %"char[]" { ptr @.func.115, i64 8 }, ptr %indirectarg1675, align 8
  store %any %972, ptr %varargslots1676, align 16
  %ptradd1677 = getelementptr inbounds i8, ptr %varargslots1676, i64 16
  store %any %974, ptr %ptradd1677, align 16
  %975 = insertvalue %"any[]" undef, ptr %varargslots1676, 0
  %"$$temp1678" = insertvalue %"any[]" %975, i64 2, 1
  store %"any[]" %"$$temp1678", ptr %indirectarg1679, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1673, ptr align 8 %indirectarg1674, ptr align 8 %indirectarg1675, i32 252, ptr align 8 %indirectarg1679) #6, !dbg !2761
  unreachable, !dbg !2761

panic1700:                                        ; preds = %if.then1694
  store i64 %sext1698, ptr %taddr1701, align 8
  %976 = insertvalue %any undef, ptr %taddr1701, 0
  %977 = insertvalue %any %976, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.26, i64 38 }, ptr %indirectarg1702, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg1703, align 8
  store %"char[]" { ptr @.func.115, i64 8 }, ptr %indirectarg1704, align 8
  store %any %977, ptr %varargslots1705, align 16
  %978 = insertvalue %"any[]" undef, ptr %varargslots1705, 0
  %"$$temp1706" = insertvalue %"any[]" %978, i64 1, 1
  store %"any[]" %"$$temp1706", ptr %indirectarg1707, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1702, ptr align 8 %indirectarg1703, ptr align 8 %indirectarg1704, i32 262, ptr align 8 %indirectarg1707) #6, !dbg !2769
  unreachable, !dbg !2769

panic1710:                                        ; preds = %checkok1708
  store i64 128, ptr %taddr1711, align 8
  %979 = insertvalue %any undef, ptr %taddr1711, 0
  %980 = insertvalue %any %979, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1698, ptr %taddr1712, align 8
  %981 = insertvalue %any undef, ptr %taddr1712, 0
  %982 = insertvalue %any %981, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg1713, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg1714, align 8
  store %"char[]" { ptr @.func.115, i64 8 }, ptr %indirectarg1715, align 8
  store %any %980, ptr %varargslots1716, align 16
  %ptradd1717 = getelementptr inbounds i8, ptr %varargslots1716, i64 16
  store %any %982, ptr %ptradd1717, align 16
  %983 = insertvalue %"any[]" undef, ptr %varargslots1716, 0
  %"$$temp1718" = insertvalue %"any[]" %983, i64 2, 1
  store %"any[]" %"$$temp1718", ptr %indirectarg1719, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1713, ptr align 8 %indirectarg1714, ptr align 8 %indirectarg1715, i32 262, ptr align 8 %indirectarg1719) #6, !dbg !2769
  unreachable, !dbg !2769

panic1728:                                        ; preds = %if.exit1722
  store i64 %sext1726, ptr %taddr1729, align 8
  %984 = insertvalue %any undef, ptr %taddr1729, 0
  %985 = insertvalue %any %984, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.26, i64 38 }, ptr %indirectarg1730, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg1731, align 8
  store %"char[]" { ptr @.func.115, i64 8 }, ptr %indirectarg1732, align 8
  store %any %985, ptr %varargslots1733, align 16
  %986 = insertvalue %"any[]" undef, ptr %varargslots1733, 0
  %"$$temp1734" = insertvalue %"any[]" %986, i64 1, 1
  store %"any[]" %"$$temp1734", ptr %indirectarg1735, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1730, ptr align 8 %indirectarg1731, ptr align 8 %indirectarg1732, i32 263, ptr align 8 %indirectarg1735) #6, !dbg !2771
  unreachable, !dbg !2771

panic1738:                                        ; preds = %checkok1736
  store i64 128, ptr %taddr1739, align 8
  %987 = insertvalue %any undef, ptr %taddr1739, 0
  %988 = insertvalue %any %987, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1726, ptr %taddr1740, align 8
  %989 = insertvalue %any undef, ptr %taddr1740, 0
  %990 = insertvalue %any %989, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg1741, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg1742, align 8
  store %"char[]" { ptr @.func.115, i64 8 }, ptr %indirectarg1743, align 8
  store %any %988, ptr %varargslots1744, align 16
  %ptradd1745 = getelementptr inbounds i8, ptr %varargslots1744, i64 16
  store %any %990, ptr %ptradd1745, align 16
  %991 = insertvalue %"any[]" undef, ptr %varargslots1744, 0
  %"$$temp1746" = insertvalue %"any[]" %991, i64 2, 1
  store %"any[]" %"$$temp1746", ptr %indirectarg1747, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1741, ptr align 8 %indirectarg1742, ptr align 8 %indirectarg1743, i32 263, ptr align 8 %indirectarg1747) #6, !dbg !2771
  unreachable, !dbg !2771

panic1785:                                        ; preds = %if.then1771
  store %"char[]" { ptr @.panic_msg.113, i64 10 }, ptr %indirectarg1786, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg1787, align 8
  store %"char[]" { ptr @.func.115, i64 8 }, ptr %indirectarg1788, align 8
  %992 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %992(ptr align 8 %indirectarg1786, ptr align 8 %indirectarg1787, ptr align 8 %indirectarg1788, i32 284) #6, !dbg !2795
  unreachable, !dbg !2795

panic1801:                                        ; preds = %if.then1796
  store i64 %sext1799, ptr %taddr1802, align 8
  %993 = insertvalue %any undef, ptr %taddr1802, 0
  %994 = insertvalue %any %993, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.26, i64 38 }, ptr %indirectarg1803, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg1804, align 8
  store %"char[]" { ptr @.func.115, i64 8 }, ptr %indirectarg1805, align 8
  store %any %994, ptr %varargslots1806, align 16
  %995 = insertvalue %"any[]" undef, ptr %varargslots1806, 0
  %"$$temp1807" = insertvalue %"any[]" %995, i64 1, 1
  store %"any[]" %"$$temp1807", ptr %indirectarg1808, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1803, ptr align 8 %indirectarg1804, ptr align 8 %indirectarg1805, i32 292, ptr align 8 %indirectarg1808) #6, !dbg !2803
  unreachable, !dbg !2803

panic1811:                                        ; preds = %checkok1809
  store i64 128, ptr %taddr1812, align 8
  %996 = insertvalue %any undef, ptr %taddr1812, 0
  %997 = insertvalue %any %996, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1799, ptr %taddr1813, align 8
  %998 = insertvalue %any undef, ptr %taddr1813, 0
  %999 = insertvalue %any %998, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg1814, align 8
  store %"char[]" { ptr @.file.100, i64 17 }, ptr %indirectarg1815, align 8
  store %"char[]" { ptr @.func.115, i64 8 }, ptr %indirectarg1816, align 8
  store %any %997, ptr %varargslots1817, align 16
  %ptradd1818 = getelementptr inbounds i8, ptr %varargslots1817, i64 16
  store %any %999, ptr %ptradd1818, align 16
  %1000 = insertvalue %"any[]" undef, ptr %varargslots1817, 0
  %"$$temp1819" = insertvalue %"any[]" %1000, i64 2, 1
  store %"any[]" %"$$temp1819", ptr %indirectarg1820, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1814, ptr align 8 %indirectarg1815, ptr align 8 %indirectarg1816, i32 292, ptr align 8 %indirectarg1820) #6, !dbg !2803
  unreachable, !dbg !2803
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.core.String.tokenize(ptr noalias sret(%Splitter) align 8 %0, ptr align 8 %1, ptr align 8 %2) #0 comdat !dbg !2834 {
entry:
  %literal = alloca %Splitter, align 8
    #dbg_declare(ptr %1, !2837, !DIExpression(), !2838)
    #dbg_declare(ptr %2, !2839, !DIExpression(), !2838)
  call void @llvm.memset.p0.i64(ptr align 8 %literal, i8 0, i64 48, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %literal, ptr align 8 %1, i32 16, i1 false), !dbg !2840
  %ptradd = getelementptr inbounds i8, ptr %literal, i64 16, !dbg !2840
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %ptradd, ptr align 8 %2, i32 16, i1 false), !dbg !2840
  %ptradd1 = getelementptr inbounds i8, ptr %literal, i64 40, !dbg !2840
  store i32 0, ptr %ptradd1, align 8, !dbg !2840
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %literal, i32 48, i1 false), !dbg !2840
  ret void, !dbg !2840
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.core.String.tokenize_all(ptr noalias sret(%Splitter) align 8 %0, ptr align 8 %1, ptr align 8 %2, i8 zeroext %3) #0 comdat !dbg !2841 {
entry:
  %skip_last = alloca i8, align 1
  %literal = alloca %Splitter, align 8
    #dbg_declare(ptr %1, !2844, !DIExpression(), !2845)
    #dbg_declare(ptr %2, !2846, !DIExpression(), !2845)
  store i8 %3, ptr %skip_last, align 1
    #dbg_declare(ptr %skip_last, !2847, !DIExpression(), !2845)
  call void @llvm.memset.p0.i64(ptr align 8 %literal, i8 0, i64 48, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %literal, ptr align 8 %1, i32 16, i1 false), !dbg !2848
  %ptradd = getelementptr inbounds i8, ptr %literal, i64 16, !dbg !2848
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %ptradd, ptr align 8 %2, i32 16, i1 false), !dbg !2849
  %ptradd1 = getelementptr inbounds i8, ptr %literal, i64 40, !dbg !2849
  %4 = load i8, ptr %skip_last, align 1, !dbg !2850
  %5 = trunc i8 %4 to i1, !dbg !2850
  %ternary = select i1 %5, i32 2, i32 1, !dbg !2850
  store i32 %ternary, ptr %ptradd1, align 8, !dbg !2850
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %literal, i32 48, i1 false), !dbg !2850
  ret void, !dbg !2850
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.core.String.splitter(ptr noalias sret(%Splitter) align 8 %0, ptr align 8 %1, ptr align 8 %2) #0 comdat !dbg !2851 {
entry:
  %sretparam = alloca %Splitter, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
    #dbg_declare(ptr %1, !2852, !DIExpression(), !2853)
    #dbg_declare(ptr %2, !2854, !DIExpression(), !2853)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg, ptr align 8 %1, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg1, ptr align 8 %2, i32 16, i1 false)
  call void @std.core.String.tokenize_all(ptr sret(%Splitter) align 8 %sretparam, ptr align 8 %indirectarg, ptr align 8 %indirectarg1, i8 zeroext 1), !dbg !2855
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %sretparam, i32 48, i1 false), !dbg !2855
  ret void, !dbg !2855
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.core.string.Splitter.reset(ptr %0) #0 comdat !dbg !2856 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2860
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2860
  br i1 %2, label %panic, label %checkok, !dbg !2860

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2861, !DIExpression(), !2862)
  %3 = load ptr, ptr %self, align 8, !dbg !2863
  %ptradd = getelementptr inbounds i8, ptr %3, i64 32, !dbg !2863
  store i64 0, ptr %ptradd, align 8, !dbg !2863
  ret void, !dbg !2863

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.66, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.121, i64 5 }, ptr %indirectarg2, align 8
  %4 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %4(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 1148) #6, !dbg !2862
  unreachable, !dbg !2862
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.core.string.Splitter.next(ptr %0, ptr %1) #0 comdat !dbg !2864 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %len = alloca i64, align 8
  %current = alloca i64, align 8
  %reterr = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr11 = alloca i64, align 8
  %indirectarg12 = alloca %"char[]", align 8
  %indirectarg13 = alloca %"char[]", align 8
  %indirectarg14 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg16 = alloca %"any[]", align 8
  %taddr19 = alloca i64, align 8
  %indirectarg20 = alloca %"char[]", align 8
  %indirectarg21 = alloca %"char[]", align 8
  %indirectarg22 = alloca %"char[]", align 8
  %varargslots23 = alloca [1 x %any], align 16
  %indirectarg25 = alloca %"any[]", align 8
  %taddr31 = alloca i64, align 8
  %indirectarg32 = alloca %"char[]", align 8
  %indirectarg33 = alloca %"char[]", align 8
  %indirectarg34 = alloca %"char[]", align 8
  %varargslots35 = alloca [1 x %any], align 16
  %indirectarg37 = alloca %"any[]", align 8
  %taddr41 = alloca i64, align 8
  %taddr42 = alloca i64, align 8
  %indirectarg43 = alloca %"char[]", align 8
  %indirectarg44 = alloca %"char[]", align 8
  %indirectarg45 = alloca %"char[]", align 8
  %varargslots46 = alloca [2 x %any], align 16
  %indirectarg49 = alloca %"any[]", align 8
  %remaining = alloca %"char[]", align 8
  %taddr55 = alloca i64, align 8
  %taddr56 = alloca i64, align 8
  %indirectarg57 = alloca %"char[]", align 8
  %indirectarg58 = alloca %"char[]", align 8
  %indirectarg59 = alloca %"char[]", align 8
  %varargslots60 = alloca [2 x %any], align 16
  %indirectarg63 = alloca %"any[]", align 8
  %next = alloca i64, align 8
  %next.f = alloca i64, align 8
  %indirectarg69 = alloca %"char[]", align 8
  %indirectarg70 = alloca %"char[]", align 8
  %indirectarg71 = alloca %"char[]", align 8
  %retparam = alloca i64, align 8
  %indirectarg72 = alloca %"char[]", align 8
  %indirectarg73 = alloca %"char[]", align 8
  %reterr84 = alloca i64, align 8
  %taddr87 = alloca i64, align 8
  %taddr88 = alloca i64, align 8
  %indirectarg89 = alloca %"char[]", align 8
  %indirectarg90 = alloca %"char[]", align 8
  %indirectarg91 = alloca %"char[]", align 8
  %varargslots92 = alloca [2 x %any], align 16
  %indirectarg95 = alloca %"any[]", align 8
  %taddr101 = alloca i64, align 8
  %indirectarg102 = alloca %"char[]", align 8
  %indirectarg103 = alloca %"char[]", align 8
  %indirectarg104 = alloca %"char[]", align 8
  %varargslots105 = alloca [1 x %any], align 16
  %indirectarg107 = alloca %"any[]", align 8
  %taddr112 = alloca i64, align 8
  %taddr113 = alloca i64, align 8
  %indirectarg114 = alloca %"char[]", align 8
  %indirectarg115 = alloca %"char[]", align 8
  %indirectarg116 = alloca %"char[]", align 8
  %varargslots117 = alloca [2 x %any], align 16
  %indirectarg120 = alloca %"any[]", align 8
  %reterr125 = alloca i64, align 8
  %2 = icmp eq ptr %1, null, !dbg !2867
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !2867
  br i1 %3, label %panic, label %checkok, !dbg !2867

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !2868, !DIExpression(), !2869)
  br label %loop.body, !dbg !2870

loop.body:                                        ; preds = %if.then82, %checkok
    #dbg_declare(ptr %len, !2871, !DIExpression(), !2874)
  %4 = load ptr, ptr %self, align 8, !dbg !2874
  %ptradd = getelementptr inbounds i8, ptr %4, i64 8, !dbg !2874
  %5 = load i64, ptr %ptradd, align 8, !dbg !2874
  store i64 %5, ptr %len, align 8, !dbg !2874
    #dbg_declare(ptr %current, !2875, !DIExpression(), !2876)
  %6 = load ptr, ptr %self, align 8, !dbg !2876
  %ptradd3 = getelementptr inbounds i8, ptr %6, i64 32, !dbg !2876
  %7 = load i64, ptr %ptradd3, align 8, !dbg !2876
  store i64 %7, ptr %current, align 8, !dbg !2876
  %8 = load i64, ptr %current, align 8, !dbg !2877
  %9 = load i64, ptr %len, align 8, !dbg !2877
  %gt = icmp ugt i64 %8, %9, !dbg !2877
  br i1 %gt, label %if.then, label %if.exit, !dbg !2877

if.then:                                          ; preds = %loop.body
  ret i64 ptrtoint (ptr @std.core.builtin.NO_MORE_ELEMENT to i64), !dbg !2877

if.exit:                                          ; preds = %loop.body
  %10 = load i64, ptr %current, align 8, !dbg !2878
  %11 = load i64, ptr %len, align 8, !dbg !2878
  %eq = icmp eq i64 %10, %11, !dbg !2878
  br i1 %eq, label %if.then4, label %if.exit52, !dbg !2878

if.then4:                                         ; preds = %if.exit
  %12 = load ptr, ptr %self, align 8, !dbg !2879
  %ptradd5 = getelementptr inbounds i8, ptr %12, i64 40, !dbg !2879
  %13 = load i32, ptr %ptradd5, align 8, !dbg !2879
  %neq = icmp ne i32 %13, 1, !dbg !2879
  br i1 %neq, label %if.then6, label %if.exit7, !dbg !2879

if.then6:                                         ; preds = %if.then4
  ret i64 ptrtoint (ptr @std.core.builtin.NO_MORE_ELEMENT to i64), !dbg !2879

if.exit7:                                         ; preds = %if.then4
  %14 = load ptr, ptr %self, align 8, !dbg !2881
  %ptradd8 = getelementptr inbounds i8, ptr %14, i64 32, !dbg !2881
  %15 = load i64, ptr %ptradd8, align 8, !dbg !2881
  %add = add i64 %15, 1, !dbg !2881
  store i64 %add, ptr %ptradd8, align 8, !dbg !2881
  %16 = load ptr, ptr %self, align 8, !dbg !2882
  %17 = load %"char[]", ptr %16, align 8, !dbg !2882
  %18 = extractvalue %"char[]" %17, 0, !dbg !2882
  %19 = load i64, ptr %current, align 8, !dbg !2882
  %sub = sub i64 %19, 1, !dbg !2882
  %20 = extractvalue %"char[]" %17, 1, !dbg !2882
  %gt9 = icmp sgt i64 %sub, %20, !dbg !2882
  %21 = call i1 @llvm.expect.i1(i1 %gt9, i1 false), !dbg !2882
  br i1 %21, label %panic10, label %checkok17, !dbg !2882

checkok17:                                        ; preds = %if.exit7
  %underflow = icmp slt i64 %sub, 0, !dbg !2882
  %22 = call i1 @llvm.expect.i1(i1 %underflow, i1 false), !dbg !2882
  br i1 %22, label %panic18, label %checkok26, !dbg !2882

checkok26:                                        ; preds = %checkok17
  %add27 = add i64 %sub, 0, !dbg !2882
  %gt28 = icmp sgt i64 %sub, %add27, !dbg !2882
  %sub29 = sub i64 %add27, %sub, !dbg !2882
  %23 = call i1 @llvm.expect.i1(i1 %gt28, i1 false), !dbg !2882
  br i1 %23, label %panic30, label %checkok38, !dbg !2882

checkok38:                                        ; preds = %checkok26
  %lt = icmp slt i64 %20, %add27, !dbg !2882
  %sub39 = sub i64 %add27, 1, !dbg !2882
  %24 = call i1 @llvm.expect.i1(i1 %lt, i1 false), !dbg !2882
  br i1 %24, label %panic40, label %checkok50, !dbg !2882

checkok50:                                        ; preds = %checkok38
  %size = sub i64 %add27, %sub, !dbg !2882
  %ptradd51 = getelementptr inbounds i8, ptr %18, i64 %sub, !dbg !2882
  %25 = insertvalue %"char[]" undef, ptr %ptradd51, 0, !dbg !2882
  %26 = insertvalue %"char[]" %25, i64 %size, 1, !dbg !2882
  store %"char[]" %26, ptr %0, align 8, !dbg !2882
  ret i64 0, !dbg !2882

if.exit52:                                        ; preds = %if.exit
    #dbg_declare(ptr %remaining, !2883, !DIExpression(), !2884)
  %27 = load ptr, ptr %self, align 8, !dbg !2884
  %28 = load %"char[]", ptr %27, align 8, !dbg !2884
  %29 = extractvalue %"char[]" %28, 0, !dbg !2884
  %30 = load i64, ptr %current, align 8, !dbg !2884
  %31 = extractvalue %"char[]" %28, 1, !dbg !2884
  %gt53 = icmp ugt i64 %30, %31, !dbg !2884
  %32 = call i1 @llvm.expect.i1(i1 %gt53, i1 false), !dbg !2884
  br i1 %32, label %panic54, label %checkok64, !dbg !2884

checkok64:                                        ; preds = %if.exit52
  %size65 = sub i64 %31, %30, !dbg !2884
  %ptradd66 = getelementptr inbounds i8, ptr %29, i64 %30, !dbg !2884
  %33 = insertvalue %"char[]" undef, ptr %ptradd66, 0, !dbg !2884
  %34 = insertvalue %"char[]" %33, i64 %size65, 1, !dbg !2884
  store %"char[]" %34, ptr %remaining, align 8, !dbg !2884
    #dbg_declare(ptr %next, !2885, !DIExpression(), !2886)
  %35 = load %"char[]", ptr %remaining, align 8, !dbg !2886
  %36 = load ptr, ptr %self, align 8, !dbg !2886
  %ptradd67 = getelementptr inbounds i8, ptr %36, i64 16, !dbg !2886
  %37 = load %"char[]", ptr %ptradd67, align 8, !dbg !2886
  %38 = extractvalue %"char[]" %37, 1, !dbg !2887
  %lt68 = icmp ult i64 0, %38, !dbg !2886
  br i1 %lt68, label %assert_ok, label %assert_fail, !dbg !2886

assert_fail:                                      ; preds = %checkok64
  store %"char[]" { ptr @.panic_msg.34, i64 71 }, ptr %indirectarg69, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg70, align 8
  store %"char[]" { ptr @.func.122, i64 4 }, ptr %indirectarg71, align 8
  %39 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %39(ptr align 8 %indirectarg69, ptr align 8 %indirectarg70, ptr align 8 %indirectarg71, i32 1167) #6, !dbg !2886
  unreachable, !dbg !2886

assert_ok:                                        ; preds = %checkok64
  store %"char[]" %35, ptr %indirectarg72, align 8
  store %"char[]" %37, ptr %indirectarg73, align 8
  %40 = call i64 @std.core.String.index_of(ptr %retparam, ptr align 8 %indirectarg72, ptr align 8 %indirectarg73), !dbg !2886
  %not_err = icmp eq i64 %40, 0, !dbg !2886
  %41 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !2886
  br i1 %41, label %after_check, label %assign_optional, !dbg !2886

assign_optional:                                  ; preds = %assert_ok
  store i64 %40, ptr %next.f, align 8, !dbg !2886
  br label %after_assign, !dbg !2886

after_check:                                      ; preds = %assert_ok
  %42 = load i64, ptr %retparam, align 8, !dbg !2886
  store i64 %42, ptr %next, align 8, !dbg !2886
  store i64 0, ptr %next.f, align 8, !dbg !2886
  br label %after_assign, !dbg !2886

after_assign:                                     ; preds = %after_check, %assign_optional
  %load.err = load i64, ptr %next.f, align 8, !dbg !2888
  %result = icmp eq i64 %load.err, 0, !dbg !2888
  br i1 %result, label %if.then74, label %if.exit123, !dbg !2888

if.then74:                                        ; preds = %after_assign
  %43 = load i64, ptr %current, align 8, !dbg !2889
  %44 = load i64, ptr %next, align 8, !dbg !2889
  %add75 = add i64 %43, %44, !dbg !2889
  %45 = load ptr, ptr %self, align 8, !dbg !2889
  %ptradd76 = getelementptr inbounds i8, ptr %45, i64 16, !dbg !2889
  %ptradd77 = getelementptr inbounds i8, ptr %ptradd76, i64 8, !dbg !2889
  %46 = load i64, ptr %ptradd77, align 8, !dbg !2889
  %add78 = add i64 %add75, %46, !dbg !2889
  %47 = load ptr, ptr %self, align 8, !dbg !2889
  %ptradd79 = getelementptr inbounds i8, ptr %47, i64 32, !dbg !2889
  store i64 %add78, ptr %ptradd79, align 8, !dbg !2889
  %48 = load i64, ptr %next, align 8, !dbg !2891
  %i2nb = icmp eq i64 %48, 0, !dbg !2891
  br i1 %i2nb, label %and.rhs, label %and.phi, !dbg !2891

and.rhs:                                          ; preds = %if.then74
  %49 = load ptr, ptr %self, align 8, !dbg !2891
  %ptradd80 = getelementptr inbounds i8, ptr %49, i64 40, !dbg !2891
  %50 = load i32, ptr %ptradd80, align 8, !dbg !2891
  %eq81 = icmp eq i32 %50, 0, !dbg !2891
  br label %and.phi, !dbg !2891

and.phi:                                          ; preds = %and.rhs, %if.then74
  %val = phi i1 [ false, %if.then74 ], [ %eq81, %and.rhs ], !dbg !2891
  br i1 %val, label %if.then82, label %if.exit83, !dbg !2891

if.then82:                                        ; preds = %and.phi
  br label %loop.body, !dbg !2891

if.exit83:                                        ; preds = %and.phi
  %51 = load %"char[]", ptr %remaining, align 8, !dbg !2892
  %52 = extractvalue %"char[]" %51, 0, !dbg !2892
  %53 = extractvalue %"char[]" %51, 1, !dbg !2892
  %gt85 = icmp ugt i64 0, %53, !dbg !2892
  %54 = call i1 @llvm.expect.i1(i1 %gt85, i1 false), !dbg !2892
  br i1 %54, label %panic86, label %checkok96, !dbg !2892

checkok96:                                        ; preds = %if.exit83
  %55 = load i64, ptr %next, align 8, !dbg !2892
  %add97 = add i64 0, %55, !dbg !2892
  %gt98 = icmp ugt i64 0, %add97, !dbg !2892
  %sub99 = sub i64 %add97, 0, !dbg !2892
  %56 = call i1 @llvm.expect.i1(i1 %gt98, i1 false), !dbg !2892
  br i1 %56, label %panic100, label %checkok108, !dbg !2892

checkok108:                                       ; preds = %checkok96
  %lt109 = icmp ult i64 %53, %add97, !dbg !2892
  %sub110 = sub i64 %add97, 1, !dbg !2892
  %57 = call i1 @llvm.expect.i1(i1 %lt109, i1 false), !dbg !2892
  br i1 %57, label %panic111, label %checkok121, !dbg !2892

checkok121:                                       ; preds = %checkok108
  %size122 = sub i64 %add97, 0, !dbg !2892
  %58 = insertvalue %"char[]" undef, ptr %52, 0, !dbg !2892
  %59 = insertvalue %"char[]" %58, i64 %size122, 1, !dbg !2892
  store %"char[]" %59, ptr %0, align 8, !dbg !2892
  ret i64 0, !dbg !2892

if.exit123:                                       ; preds = %after_assign
  %60 = load ptr, ptr %self, align 8, !dbg !2893
  %ptradd124 = getelementptr inbounds i8, ptr %60, i64 32, !dbg !2893
  %61 = load i64, ptr %len, align 8, !dbg !2893
  store i64 %61, ptr %ptradd124, align 8, !dbg !2893
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %remaining, i32 16, i1 false), !dbg !2894
  ret i64 0, !dbg !2894

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.66, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.122, i64 4 }, ptr %indirectarg2, align 8
  %62 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %62(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 1153) #6, !dbg !2869
  unreachable, !dbg !2869

panic10:                                          ; preds = %if.exit7
  store i64 %20, ptr %taddr, align 8
  %63 = insertvalue %any undef, ptr %taddr, 0
  %64 = insertvalue %any %63, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sub, ptr %taddr11, align 8
  %65 = insertvalue %any undef, ptr %taddr11, 0
  %66 = insertvalue %any %65, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.12, i64 61 }, ptr %indirectarg12, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg13, align 8
  store %"char[]" { ptr @.func.122, i64 4 }, ptr %indirectarg14, align 8
  store %any %64, ptr %varargslots, align 16
  %ptradd15 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %66, ptr %ptradd15, align 16
  %67 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %67, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg16, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg12, ptr align 8 %indirectarg13, ptr align 8 %indirectarg14, i32 1164, ptr align 8 %indirectarg16) #6, !dbg !2882
  unreachable, !dbg !2882

panic18:                                          ; preds = %checkok17
  store i64 %sub, ptr %taddr19, align 8
  %68 = insertvalue %any undef, ptr %taddr19, 0
  %69 = insertvalue %any %68, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.107, i64 22 }, ptr %indirectarg20, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg21, align 8
  store %"char[]" { ptr @.func.122, i64 4 }, ptr %indirectarg22, align 8
  store %any %69, ptr %varargslots23, align 16
  %70 = insertvalue %"any[]" undef, ptr %varargslots23, 0
  %"$$temp24" = insertvalue %"any[]" %70, i64 1, 1
  store %"any[]" %"$$temp24", ptr %indirectarg25, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg20, ptr align 8 %indirectarg21, ptr align 8 %indirectarg22, i32 1164, ptr align 8 %indirectarg25) #6, !dbg !2882
  unreachable, !dbg !2882

panic30:                                          ; preds = %checkok26
  store i64 %sub29, ptr %taddr31, align 8
  %71 = insertvalue %any undef, ptr %taddr31, 0
  %72 = insertvalue %any %71, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.10, i64 43 }, ptr %indirectarg32, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg33, align 8
  store %"char[]" { ptr @.func.122, i64 4 }, ptr %indirectarg34, align 8
  store %any %72, ptr %varargslots35, align 16
  %73 = insertvalue %"any[]" undef, ptr %varargslots35, 0
  %"$$temp36" = insertvalue %"any[]" %73, i64 1, 1
  store %"any[]" %"$$temp36", ptr %indirectarg37, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg32, ptr align 8 %indirectarg33, ptr align 8 %indirectarg34, i32 1164, ptr align 8 %indirectarg37) #6, !dbg !2882
  unreachable, !dbg !2882

panic40:                                          ; preds = %checkok38
  store i64 %sub39, ptr %taddr41, align 8
  %74 = insertvalue %any undef, ptr %taddr41, 0
  %75 = insertvalue %any %74, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %20, ptr %taddr42, align 8
  %76 = insertvalue %any undef, ptr %taddr42, 0
  %77 = insertvalue %any %76, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.14, i64 60 }, ptr %indirectarg43, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg44, align 8
  store %"char[]" { ptr @.func.122, i64 4 }, ptr %indirectarg45, align 8
  store %any %75, ptr %varargslots46, align 16
  %ptradd47 = getelementptr inbounds i8, ptr %varargslots46, i64 16
  store %any %77, ptr %ptradd47, align 16
  %78 = insertvalue %"any[]" undef, ptr %varargslots46, 0
  %"$$temp48" = insertvalue %"any[]" %78, i64 2, 1
  store %"any[]" %"$$temp48", ptr %indirectarg49, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg43, ptr align 8 %indirectarg44, ptr align 8 %indirectarg45, i32 1164, ptr align 8 %indirectarg49) #6, !dbg !2882
  unreachable, !dbg !2882

panic54:                                          ; preds = %if.exit52
  store i64 %31, ptr %taddr55, align 8
  %79 = insertvalue %any undef, ptr %taddr55, 0
  %80 = insertvalue %any %79, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %30, ptr %taddr56, align 8
  %81 = insertvalue %any undef, ptr %taddr56, 0
  %82 = insertvalue %any %81, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.12, i64 61 }, ptr %indirectarg57, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg58, align 8
  store %"char[]" { ptr @.func.122, i64 4 }, ptr %indirectarg59, align 8
  store %any %80, ptr %varargslots60, align 16
  %ptradd61 = getelementptr inbounds i8, ptr %varargslots60, i64 16
  store %any %82, ptr %ptradd61, align 16
  %83 = insertvalue %"any[]" undef, ptr %varargslots60, 0
  %"$$temp62" = insertvalue %"any[]" %83, i64 2, 1
  store %"any[]" %"$$temp62", ptr %indirectarg63, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg57, ptr align 8 %indirectarg58, ptr align 8 %indirectarg59, i32 1166, ptr align 8 %indirectarg63) #6, !dbg !2884
  unreachable, !dbg !2884

panic86:                                          ; preds = %if.exit83
  store i64 %53, ptr %taddr87, align 8
  %84 = insertvalue %any undef, ptr %taddr87, 0
  %85 = insertvalue %any %84, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr88, align 8
  %86 = insertvalue %any undef, ptr %taddr88, 0
  %87 = insertvalue %any %86, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.12, i64 61 }, ptr %indirectarg89, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg90, align 8
  store %"char[]" { ptr @.func.122, i64 4 }, ptr %indirectarg91, align 8
  store %any %85, ptr %varargslots92, align 16
  %ptradd93 = getelementptr inbounds i8, ptr %varargslots92, i64 16
  store %any %87, ptr %ptradd93, align 16
  %88 = insertvalue %"any[]" undef, ptr %varargslots92, 0
  %"$$temp94" = insertvalue %"any[]" %88, i64 2, 1
  store %"any[]" %"$$temp94", ptr %indirectarg95, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg89, ptr align 8 %indirectarg90, ptr align 8 %indirectarg91, i32 1172, ptr align 8 %indirectarg95) #6, !dbg !2892
  unreachable, !dbg !2892

panic100:                                         ; preds = %checkok96
  store i64 %sub99, ptr %taddr101, align 8
  %89 = insertvalue %any undef, ptr %taddr101, 0
  %90 = insertvalue %any %89, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.10, i64 43 }, ptr %indirectarg102, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg103, align 8
  store %"char[]" { ptr @.func.122, i64 4 }, ptr %indirectarg104, align 8
  store %any %90, ptr %varargslots105, align 16
  %91 = insertvalue %"any[]" undef, ptr %varargslots105, 0
  %"$$temp106" = insertvalue %"any[]" %91, i64 1, 1
  store %"any[]" %"$$temp106", ptr %indirectarg107, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg102, ptr align 8 %indirectarg103, ptr align 8 %indirectarg104, i32 1172, ptr align 8 %indirectarg107) #6, !dbg !2892
  unreachable, !dbg !2892

panic111:                                         ; preds = %checkok108
  store i64 %sub110, ptr %taddr112, align 8
  %92 = insertvalue %any undef, ptr %taddr112, 0
  %93 = insertvalue %any %92, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %53, ptr %taddr113, align 8
  %94 = insertvalue %any undef, ptr %taddr113, 0
  %95 = insertvalue %any %94, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.14, i64 60 }, ptr %indirectarg114, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg115, align 8
  store %"char[]" { ptr @.func.122, i64 4 }, ptr %indirectarg116, align 8
  store %any %93, ptr %varargslots117, align 16
  %ptradd118 = getelementptr inbounds i8, ptr %varargslots117, i64 16
  store %any %95, ptr %ptradd118, align 16
  %96 = insertvalue %"any[]" undef, ptr %varargslots117, 0
  %"$$temp119" = insertvalue %"any[]" %96, i64 2, 1
  store %"any[]" %"$$temp119", ptr %indirectarg120, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg114, ptr align 8 %indirectarg115, ptr align 8 %indirectarg116, i32 1172, ptr align 8 %indirectarg120) #6, !dbg !2892
  unreachable, !dbg !2892
}

; Function Attrs: nounwind ssp uwtable
define weak_odr ptr @std.core.string.tformat_zstr(ptr align 8 %0, ptr align 8 %1) #0 comdat !dbg !2895 {
entry:
  %str = alloca ptr, align 8
  %retparam = alloca i64, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg2 = alloca %"any[]", align 8
    #dbg_declare(ptr %0, !2907, !DIExpression(), !2908)
    #dbg_declare(ptr %1, !2909, !DIExpression(), !2908)
    #dbg_declare(ptr %str, !2910, !DIExpression(), !2911)
  %ptradd = getelementptr inbounds i8, ptr %0, i64 8, !dbg !2911
  %2 = load i64, ptr %ptradd, align 8, !dbg !2911
  %ptradd1 = getelementptr inbounds i8, ptr %1, i64 8, !dbg !2911
  %3 = load i64, ptr %ptradd1, align 8, !dbg !2911
  %mul = mul i64 %3, 8, !dbg !2911
  %add = add i64 %2, %mul, !dbg !2911
  %4 = call ptr @std.core.dstring.temp_with_capacity(i64 %add), !dbg !2911
  store ptr %4, ptr %str, align 8, !dbg !2911
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg, ptr align 8 %0, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg2, ptr align 8 %1, i32 16, i1 false)
  %5 = call i64 @std.core.dstring.DString.appendf(ptr %retparam, ptr %str, ptr align 8 %indirectarg, ptr align 8 %indirectarg2), !dbg !2912
  %6 = call ptr @std.core.dstring.DString.zstr_view(ptr %str), !dbg !2913
  ret ptr %6, !dbg !2913
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.core.string.format(ptr noalias sret(%"char[]") align 8 %0, ptr align 8 %1, ptr align 8 %2, ptr align 8 %3) #0 comdat !dbg !2914 {
entry:
  %reserve = alloca i64, align 8
  %state = alloca ptr, align 8
  %str = alloca ptr, align 8
  %retparam = alloca i64, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg2 = alloca %"any[]", align 8
  %sretparam = alloca %"char[]", align 8
  %indirectarg3 = alloca %any, align 8
    #dbg_declare(ptr %1, !2917, !DIExpression(), !2918)
    #dbg_declare(ptr %2, !2919, !DIExpression(), !2918)
    #dbg_declare(ptr %3, !2920, !DIExpression(), !2918)
  store i64 0, ptr %reserve, align 8
    #dbg_declare(ptr %state, !2921, !DIExpression(), !2923)
  %4 = load i64, ptr %reserve, align 8, !dbg !2923
  %5 = call ptr @std.core.mem.allocator.push_pool(i64 %4) #5, !dbg !2923
  store ptr %5, ptr %state, align 8, !dbg !2923
    #dbg_declare(ptr %str, !2924, !DIExpression(), !2926)
  %ptradd = getelementptr inbounds i8, ptr %2, i64 8, !dbg !2926
  %6 = load i64, ptr %ptradd, align 8, !dbg !2926
  %ptradd1 = getelementptr inbounds i8, ptr %3, i64 8, !dbg !2926
  %7 = load i64, ptr %ptradd1, align 8, !dbg !2926
  %mul = mul i64 %7, 8, !dbg !2926
  %add = add i64 %6, %mul, !dbg !2926
  %8 = call ptr @std.core.dstring.temp_with_capacity(i64 %add), !dbg !2926
  store ptr %8, ptr %str, align 8, !dbg !2926
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg, ptr align 8 %2, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg2, ptr align 8 %3, i32 16, i1 false)
  %9 = call i64 @std.core.dstring.DString.appendf(ptr %retparam, ptr %str, ptr align 8 %indirectarg, ptr align 8 %indirectarg2), !dbg !2927
  %10 = load ptr, ptr %str, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg3, ptr align 8 %1, i32 16, i1 false)
  call void @std.core.dstring.DString.copy_str(ptr sret(%"char[]") align 8 %sretparam, ptr %10, ptr align 8 %indirectarg3), !dbg !2928
  %11 = load %"char[]", ptr %sretparam, align 8, !dbg !2928
  %12 = load ptr, ptr %state, align 8, !dbg !2929
  call void @std.core.mem.allocator.pop_pool(ptr %12) #5, !dbg !2929
  store %"char[]" %11, ptr %0, align 8, !dbg !2929
  ret void, !dbg !2929
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.core.string.bformat(ptr noalias sret(%"char[]") align 8 %0, ptr align 8 %1, ptr align 8 %2, ptr align 8 %3) #0 comdat !dbg !2931 {
entry:
  %str = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %literal = alloca %ArenaAllocator, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg2 = alloca %any, align 8
  %retparam = alloca i64, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"any[]", align 8
  %sretparam = alloca %"char[]", align 8
    #dbg_declare(ptr %1, !2934, !DIExpression(), !2935)
    #dbg_declare(ptr %2, !2936, !DIExpression(), !2935)
    #dbg_declare(ptr %3, !2937, !DIExpression(), !2935)
    #dbg_declare(ptr %str, !2938, !DIExpression(), !2939)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes, ptr align 8 %1, i32 16, i1 false)
  call void @llvm.memset.p0.i64(ptr align 8 %literal, i8 0, i64 24, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg, ptr align 8 %bytes, i32 16, i1 false)
  %4 = call ptr @std.core.mem.allocator.ArenaAllocator.init(ptr %literal, ptr align 8 %indirectarg), !dbg !2940
  %5 = insertvalue %any undef, ptr %4, 0, !dbg !2939
  %6 = insertvalue %any %5, i64 ptrtoint (ptr @"$ct.std.core.mem.allocator.ArenaAllocator" to i64), 1, !dbg !2939
  %ptradd = getelementptr inbounds i8, ptr %2, i64 8, !dbg !2939
  %7 = load i64, ptr %ptradd, align 8, !dbg !2939
  %ptradd1 = getelementptr inbounds i8, ptr %3, i64 8, !dbg !2939
  %8 = load i64, ptr %ptradd1, align 8, !dbg !2939
  %mul = mul i64 %8, 8, !dbg !2939
  %add = add i64 %7, %mul, !dbg !2939
  store %any %6, ptr %indirectarg2, align 8
  %9 = call ptr @std.core.dstring.new_with_capacity(ptr align 8 %indirectarg2, i64 %add), !dbg !2939
  store ptr %9, ptr %str, align 8, !dbg !2939
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg3, ptr align 8 %2, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg4, ptr align 8 %3, i32 16, i1 false)
  %10 = call i64 @std.core.dstring.DString.appendf(ptr %retparam, ptr %str, ptr align 8 %indirectarg3, ptr align 8 %indirectarg4), !dbg !2943
  %11 = load ptr, ptr %str, align 8
  call void @std.core.dstring.DString.str_view(ptr sret(%"char[]") align 8 %sretparam, ptr %11), !dbg !2944
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %sretparam, i32 16, i1 false), !dbg !2944
  ret void, !dbg !2944
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.core.string.tformat(ptr noalias sret(%"char[]") align 8 %0, ptr align 8 %1, ptr align 8 %2) #0 comdat !dbg !2945 {
entry:
  %str = alloca ptr, align 8
  %retparam = alloca i64, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg2 = alloca %"any[]", align 8
  %sretparam = alloca %"char[]", align 8
    #dbg_declare(ptr %1, !2948, !DIExpression(), !2949)
    #dbg_declare(ptr %2, !2950, !DIExpression(), !2949)
    #dbg_declare(ptr %str, !2951, !DIExpression(), !2952)
  %ptradd = getelementptr inbounds i8, ptr %1, i64 8, !dbg !2952
  %3 = load i64, ptr %ptradd, align 8, !dbg !2952
  %ptradd1 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !2952
  %4 = load i64, ptr %ptradd1, align 8, !dbg !2952
  %mul = mul i64 %4, 8, !dbg !2952
  %add = add i64 %3, %mul, !dbg !2952
  %5 = call ptr @std.core.dstring.temp_with_capacity(i64 %add), !dbg !2952
  store ptr %5, ptr %str, align 8, !dbg !2952
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg, ptr align 8 %1, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg2, ptr align 8 %2, i32 16, i1 false)
  %6 = call i64 @std.core.dstring.DString.appendf(ptr %retparam, ptr %str, ptr align 8 %indirectarg, ptr align 8 %indirectarg2), !dbg !2953
  %7 = load ptr, ptr %str, align 8
  call void @std.core.dstring.DString.str_view(ptr sret(%"char[]") align 8 %sretparam, ptr %7), !dbg !2954
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %sretparam, i32 16, i1 false), !dbg !2954
  ret void, !dbg !2954
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.core.string.join(ptr noalias sret(%"char[]") align 8 %0, ptr align 8 %1, ptr align 8 %2, ptr align 8 %3) #0 comdat !dbg !2955 {
entry:
  %allocator = alloca %any, align 8
  %elements = alloca i64, align 8
  %error_var = alloca i64, align 8
  %allocator1 = alloca %any, align 8
  %elements2 = alloca i64, align 8
  %allocator3 = alloca %any, align 8
  %size = alloca i64, align 8
  %blockret = alloca ptr, align 8
  %x = alloca i64, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg7 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg14 = alloca %"char[]", align 8
  %indirectarg15 = alloca %"char[]", align 8
  %indirectarg16 = alloca %"char[]", align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %indirectarg20 = alloca %"char[]", align 8
  %indirectarg21 = alloca %"char[]", align 8
  %indirectarg22 = alloca %"char[]", align 8
  %retparam = alloca ptr, align 8
  %taddr = alloca ptr, align 8
  %taddr24 = alloca i64, align 8
  %indirectarg25 = alloca %"char[]", align 8
  %indirectarg26 = alloca %"char[]", align 8
  %indirectarg27 = alloca %"char[]", align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg28 = alloca %"any[]", align 8
  %indirectarg30 = alloca %"char[]", align 8
  %indirectarg31 = alloca %"char[]", align 8
  %indirectarg32 = alloca %"char[]", align 8
  %varargslots33 = alloca [1 x %any], align 16
  %indirectarg35 = alloca %"any[]", align 8
  %taddr36 = alloca %"char[]", align 8
  %taddr39 = alloca i64, align 8
  %taddr40 = alloca i64, align 8
  %indirectarg41 = alloca %"char[]", align 8
  %indirectarg42 = alloca %"char[]", align 8
  %indirectarg43 = alloca %"char[]", align 8
  %varargslots44 = alloca [2 x %any], align 16
  %indirectarg47 = alloca %"any[]", align 8
  %taddr51 = alloca i64, align 8
  %taddr52 = alloca i64, align 8
  %indirectarg53 = alloca %"char[]", align 8
  %indirectarg54 = alloca %"char[]", align 8
  %indirectarg55 = alloca %"char[]", align 8
  %varargslots56 = alloca [2 x %any], align 16
  %indirectarg59 = alloca %"any[]", align 8
  %total_size = alloca i64, align 8
  %.anon = alloca i64, align 8
  %str = alloca ptr, align 8
  %taddr69 = alloca i64, align 8
  %taddr70 = alloca i64, align 8
  %indirectarg71 = alloca %"char[]", align 8
  %indirectarg72 = alloca %"char[]", align 8
  %indirectarg73 = alloca %"char[]", align 8
  %varargslots74 = alloca [2 x %any], align 16
  %indirectarg77 = alloca %"any[]", align 8
  %indirectarg80 = alloca %"char[]", align 8
  %indirectarg81 = alloca %"char[]", align 8
  %indirectarg82 = alloca %"char[]", align 8
  %taddr85 = alloca i64, align 8
  %taddr86 = alloca i64, align 8
  %indirectarg87 = alloca %"char[]", align 8
  %indirectarg88 = alloca %"char[]", align 8
  %indirectarg89 = alloca %"char[]", align 8
  %varargslots90 = alloca [2 x %any], align 16
  %indirectarg93 = alloca %"any[]", align 8
  %reserve = alloca i64, align 8
  %state = alloca ptr, align 8
  %res = alloca ptr, align 8
  %self = alloca ptr, align 8
  %taddr100 = alloca i64, align 8
  %taddr101 = alloca i64, align 8
  %indirectarg102 = alloca %"char[]", align 8
  %indirectarg103 = alloca %"char[]", align 8
  %indirectarg104 = alloca %"char[]", align 8
  %varargslots105 = alloca [2 x %any], align 16
  %indirectarg108 = alloca %"any[]", align 8
  %taddr111 = alloca i64, align 8
  %taddr112 = alloca i64, align 8
  %indirectarg113 = alloca %"char[]", align 8
  %indirectarg114 = alloca %"char[]", align 8
  %indirectarg115 = alloca %"char[]", align 8
  %varargslots116 = alloca [2 x %any], align 16
  %indirectarg119 = alloca %"any[]", align 8
  %value = alloca %"char[]", align 8
  %indirectarg123 = alloca %"char[]", align 8
  %indirectarg124 = alloca %"char[]", align 8
  %indirectarg125 = alloca %"char[]", align 8
  %indirectarg127 = alloca %"char[]", align 8
  %taddr130 = alloca i64, align 8
  %taddr131 = alloca i64, align 8
  %indirectarg132 = alloca %"char[]", align 8
  %indirectarg133 = alloca %"char[]", align 8
  %indirectarg134 = alloca %"char[]", align 8
  %varargslots135 = alloca [2 x %any], align 16
  %indirectarg138 = alloca %"any[]", align 8
  %.anon142 = alloca i64, align 8
  %str146 = alloca ptr, align 8
  %taddr149 = alloca i64, align 8
  %taddr150 = alloca i64, align 8
  %indirectarg151 = alloca %"char[]", align 8
  %indirectarg152 = alloca %"char[]", align 8
  %indirectarg153 = alloca %"char[]", align 8
  %varargslots154 = alloca [2 x %any], align 16
  %indirectarg157 = alloca %"any[]", align 8
  %self160 = alloca ptr, align 8
  %value161 = alloca %"char[]", align 8
  %indirectarg164 = alloca %"char[]", align 8
  %indirectarg165 = alloca %"char[]", align 8
  %indirectarg166 = alloca %"char[]", align 8
  %indirectarg168 = alloca %"char[]", align 8
  %self169 = alloca ptr, align 8
  %indirectarg172 = alloca %"char[]", align 8
  %indirectarg173 = alloca %"char[]", align 8
  %indirectarg174 = alloca %"char[]", align 8
  %taddr177 = alloca i64, align 8
  %taddr178 = alloca i64, align 8
  %indirectarg179 = alloca %"char[]", align 8
  %indirectarg180 = alloca %"char[]", align 8
  %indirectarg181 = alloca %"char[]", align 8
  %varargslots182 = alloca [2 x %any], align 16
  %indirectarg185 = alloca %"any[]", align 8
  %value187 = alloca %"char[]", align 8
  %indirectarg190 = alloca %"char[]", align 8
  %indirectarg191 = alloca %"char[]", align 8
  %indirectarg192 = alloca %"char[]", align 8
  %indirectarg194 = alloca %"char[]", align 8
  %sretparam = alloca %"char[]", align 8
  %indirectarg197 = alloca %any, align 8
    #dbg_declare(ptr %1, !2958, !DIExpression(), !2959)
    #dbg_declare(ptr %2, !2960, !DIExpression(), !2959)
    #dbg_declare(ptr %3, !2961, !DIExpression(), !2959)
  store ptr null, ptr %.cachedtype, align 8, !dbg !2962
  %ptradd = getelementptr inbounds i8, ptr %2, i64 8, !dbg !2962
  %4 = load i64, ptr %ptradd, align 8, !dbg !2962
  %neq = icmp ne i64 %4, 0, !dbg !2962
  br i1 %neq, label %if.exit61, label %if.else, !dbg !2962

if.else:                                          ; preds = %entry
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator, ptr align 8 %1, i32 16, i1 false)
  store i64 2, ptr %elements, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator1, ptr align 8 %allocator, i32 16, i1 false)
  %5 = load i64, ptr %elements, align 8
  store i64 %5, ptr %elements2, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator3, ptr align 8 %allocator1, i32 16, i1 false)
  %6 = load i64, ptr %elements2, align 8, !dbg !2963
  %mul = mul i64 1, %6, !dbg !2963
  store i64 %mul, ptr %size, align 8
  %7 = load i64, ptr %size, align 8, !dbg !2969
  %i2nb = icmp eq i64 %7, 0, !dbg !2969
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !2969

if.then:                                          ; preds = %if.else
  store ptr null, ptr %blockret, align 8, !dbg !2969
  br label %expr_block.exit, !dbg !2969

if.exit:                                          ; preds = %if.else
  %8 = load i64, ptr %size, align 8, !dbg !2971
  br i1 true, label %or.phi, label %or.rhs, !dbg !2972

or.rhs:                                           ; preds = %if.exit
  store i64 0, ptr %x, align 8
  %9 = load i64, ptr %x, align 8, !dbg !2973
  %neq4 = icmp ne i64 0, %9, !dbg !2973
  br i1 %neq4, label %and.rhs, label %and.phi, !dbg !2973

and.rhs:                                          ; preds = %or.rhs
  %10 = load i64, ptr %x, align 8, !dbg !2973
  %11 = load i64, ptr %x, align 8, !dbg !2973
  %sub = sub i64 %11, 1, !dbg !2973
  %and = and i64 %10, %sub, !dbg !2973
  %eq = icmp eq i64 %and, 0, !dbg !2973
  br label %and.phi, !dbg !2973

and.phi:                                          ; preds = %and.rhs, %or.rhs
  %val = phi i1 [ false, %or.rhs ], [ %eq, %and.rhs ], !dbg !2973
  br label %or.phi, !dbg !2973

or.phi:                                           ; preds = %and.phi, %if.exit
  %val5 = phi i1 [ true, %if.exit ], [ %val, %and.phi ], !dbg !2973
  br i1 %val5, label %assert_ok, label %assert_fail, !dbg !2973

assert_fail:                                      ; preds = %or.phi
  store %"char[]" { ptr @.panic_msg, i64 65 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file, i64 16 }, ptr %indirectarg6, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg7, align 8
  %12 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %12(ptr align 8 %indirectarg, ptr align 8 %indirectarg6, ptr align 8 %indirectarg7, i32 98) #6, !dbg !2971
  unreachable, !dbg !2971

assert_ok:                                        ; preds = %or.phi
  br i1 true, label %assert_ok12, label %assert_fail8, !dbg !2971

assert_fail8:                                     ; preds = %assert_ok
  store %"char[]" { ptr @.panic_msg.7, i64 80 }, ptr %indirectarg9, align 8
  store %"char[]" { ptr @.file, i64 16 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg11, align 8
  %13 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %13(ptr align 8 %indirectarg9, ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, i32 98) #6, !dbg !2971
  unreachable, !dbg !2971

assert_ok12:                                      ; preds = %assert_ok
  %lt = icmp ult i64 0, %8, !dbg !2971
  br i1 %lt, label %assert_ok17, label %assert_fail13, !dbg !2971

assert_fail13:                                    ; preds = %assert_ok12
  store %"char[]" { ptr @.panic_msg.8, i64 59 }, ptr %indirectarg14, align 8
  store %"char[]" { ptr @.file, i64 16 }, ptr %indirectarg15, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg16, align 8
  %14 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %14(ptr align 8 %indirectarg14, ptr align 8 %indirectarg15, ptr align 8 %indirectarg16, i32 98) #6, !dbg !2971
  unreachable, !dbg !2971

assert_ok17:                                      ; preds = %assert_ok12
  %ptradd18 = getelementptr inbounds i8, ptr %allocator3, i64 8, !dbg !2971
  %15 = load i64, ptr %ptradd18, align 8, !dbg !2971
  %16 = inttoptr i64 %15 to ptr, !dbg !2971
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !2962
  %17 = icmp eq ptr %16, %type, !dbg !2962
  br i1 %17, label %cache_hit, label %cache_miss, !dbg !2962

cache_miss:                                       ; preds = %assert_ok17
  %ptradd19 = getelementptr inbounds i8, ptr %16, i64 16, !dbg !2962
  %18 = load ptr, ptr %ptradd19, align 8, !dbg !2962
  %19 = call ptr @.dyn_search(ptr %18, ptr @"$sel.acquire"), !dbg !2962
  store ptr %19, ptr %.inlinecache, align 8, !dbg !2962
  store ptr %16, ptr %.cachedtype, align 8, !dbg !2962
  br label %20, !dbg !2962

cache_hit:                                        ; preds = %assert_ok17
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !2962
  br label %20, !dbg !2962

20:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %19, %cache_miss ], !dbg !2962
  %21 = icmp eq ptr %fn_phi, null, !dbg !2962
  br i1 %21, label %missing_function, label %match, !dbg !2962

missing_function:                                 ; preds = %20
  store %"char[]" { ptr @.panic_msg.9, i64 44 }, ptr %indirectarg20, align 8
  store %"char[]" { ptr @.file, i64 16 }, ptr %indirectarg21, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg22, align 8
  %22 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %22(ptr align 8 %indirectarg20, ptr align 8 %indirectarg21, ptr align 8 %indirectarg22, i32 98) #6, !dbg !2971
  unreachable, !dbg !2971

match:                                            ; preds = %20
  %23 = load ptr, ptr %allocator3, align 8
  %24 = call i64 %fn_phi(ptr %retparam, ptr %23, i64 %8, i32 1, i64 0), !dbg !2971
  %not_err = icmp eq i64 %24, 0, !dbg !2971
  %25 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !2971
  br i1 %25, label %after_check, label %assign_optional, !dbg !2971

assign_optional:                                  ; preds = %match
  store i64 %24, ptr %error_var, align 8, !dbg !2971
  br label %panic_block, !dbg !2971

after_check:                                      ; preds = %match
  %26 = load ptr, ptr %retparam, align 8, !dbg !2971
  store ptr %26, ptr %blockret, align 8, !dbg !2971
  br label %expr_block.exit, !dbg !2971

expr_block.exit:                                  ; preds = %after_check, %if.then
  %27 = load ptr, ptr %blockret, align 8, !dbg !2971
  store ptr %27, ptr %taddr, align 8
  %28 = load ptr, ptr %taddr, align 8
  %29 = load i64, ptr %elements2, align 8, !dbg !2963
  %add = add i64 0, %29, !dbg !2963
  %gt = icmp ugt i64 0, %add, !dbg !2963
  %sub23 = sub i64 %add, 0, !dbg !2963
  %30 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !2963
  br i1 %30, label %panic, label %checkok, !dbg !2963

checkok:                                          ; preds = %expr_block.exit
  %size29 = sub i64 %add, 0, !dbg !2963
  %31 = insertvalue %"char[]" undef, ptr %28, 0, !dbg !2963
  %32 = insertvalue %"char[]" %31, i64 %size29, 1, !dbg !2963
  br label %noerr_block, !dbg !2963

panic_block:                                      ; preds = %assign_optional
  %33 = insertvalue %any undef, ptr %error_var, 0, !dbg !2963
  %34 = insertvalue %any %33, i64 ptrtoint (ptr @"$ct.fault" to i64), 1, !dbg !2963
  store %"char[]" { ptr @.panic_msg.11, i64 36 }, ptr %indirectarg30, align 8
  store %"char[]" { ptr @.file, i64 16 }, ptr %indirectarg31, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg32, align 8
  store %any %34, ptr %varargslots33, align 16
  %35 = insertvalue %"any[]" undef, ptr %varargslots33, 0
  %"$$temp34" = insertvalue %"any[]" %35, i64 1, 1
  store %"any[]" %"$$temp34", ptr %indirectarg35, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg30, ptr align 8 %indirectarg31, ptr align 8 %indirectarg32, i32 262, ptr align 8 %indirectarg35) #6, !dbg !2965
  unreachable, !dbg !2965

noerr_block:                                      ; preds = %checkok
  store %"char[]" %32, ptr %taddr36, align 8
  %36 = load %"char[]", ptr %taddr36, align 8
  %37 = extractvalue %"char[]" %36, 0
  %38 = extractvalue %"char[]" %36, 1
  %gt37 = icmp sgt i64 0, %38
  %39 = call i1 @llvm.expect.i1(i1 %gt37, i1 false)
  br i1 %39, label %panic38, label %checkok48

checkok48:                                        ; preds = %noerr_block
  %lt49 = icmp slt i64 %38, 0, !dbg !2967
  %40 = call i1 @llvm.expect.i1(i1 %lt49, i1 false), !dbg !2967
  br i1 %40, label %panic50, label %checkok60, !dbg !2967

checkok60:                                        ; preds = %checkok48
  %41 = insertvalue %"char[]" undef, ptr %37, 0, !dbg !2967
  %42 = insertvalue %"char[]" %41, i64 0, 1, !dbg !2967
  store %"char[]" %42, ptr %0, align 8, !dbg !2967
  ret void, !dbg !2967

if.exit61:                                        ; preds = %entry
    #dbg_declare(ptr %total_size, !2975, !DIExpression(), !2976)
  %ptradd62 = getelementptr inbounds i8, ptr %3, i64 8, !dbg !2976
  %43 = load i64, ptr %ptradd62, align 8, !dbg !2976
  %ptradd63 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !2976
  %44 = load i64, ptr %ptradd63, align 8, !dbg !2976
  %mul64 = mul i64 %43, %44, !dbg !2976
  store i64 %mul64, ptr %total_size, align 8, !dbg !2976
  %ptradd65 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !2977
  %45 = load i64, ptr %ptradd65, align 8, !dbg !2977
    #dbg_declare(ptr %.anon, !2979, !DIExpression(), !2977)
  store i64 0, ptr %.anon, align 8, !dbg !2977
  br label %loop.cond, !dbg !2977

loop.cond:                                        ; preds = %checkok94, %if.exit61
  %46 = load i64, ptr %.anon, align 8, !dbg !2977
  %lt66 = icmp ult i64 %46, %45, !dbg !2977
  br i1 %lt66, label %loop.body, label %loop.exit, !dbg !2977

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %str, !2980, !DIExpression(), !2982)
  %ptradd67 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !2982
  %47 = load i64, ptr %ptradd67, align 8, !dbg !2982
  %48 = load ptr, ptr %2, align 8, !dbg !2982
  %49 = load i64, ptr %.anon, align 8, !dbg !2982
  %ge = icmp uge i64 %49, %47, !dbg !2982
  %50 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !2982
  br i1 %50, label %panic68, label %checkok78, !dbg !2982

checkok78:                                        ; preds = %loop.body
  %ptroffset = getelementptr inbounds [16 x i8], ptr %48, i64 %49, !dbg !2982
  store ptr %ptroffset, ptr %str, align 8, !dbg !2982
  %51 = load i64, ptr %total_size, align 8, !dbg !2983
  %52 = load ptr, ptr %str, align 8, !dbg !2983
  %checknull = icmp eq ptr %52, null, !dbg !2983
  %53 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !2983
  br i1 %53, label %panic79, label %checkok83, !dbg !2983

checkok83:                                        ; preds = %checkok78
  %54 = ptrtoint ptr %52 to i64, !dbg !2983
  %55 = urem i64 %54, 8, !dbg !2983
  %56 = icmp ne i64 %55, 0, !dbg !2983
  %57 = call i1 @llvm.expect.i1(i1 %56, i1 false), !dbg !2983
  br i1 %57, label %panic84, label %checkok94, !dbg !2983

checkok94:                                        ; preds = %checkok83
  %ptradd95 = getelementptr inbounds i8, ptr %52, i64 8, !dbg !2983
  %58 = load i64, ptr %ptradd95, align 8, !dbg !2983
  %add96 = add i64 %51, %58, !dbg !2983
  store i64 %add96, ptr %total_size, align 8, !dbg !2983
  %59 = load i64, ptr %.anon, align 8, !dbg !2977
  %addnuw = add nuw i64 %59, 1, !dbg !2977
  store i64 %addnuw, ptr %.anon, align 8, !dbg !2977
  br label %loop.cond, !dbg !2977

loop.exit:                                        ; preds = %loop.cond
  store i64 0, ptr %reserve, align 8
    #dbg_declare(ptr %state, !2985, !DIExpression(), !2987)
  %60 = load i64, ptr %reserve, align 8, !dbg !2987
  %61 = call ptr @std.core.mem.allocator.push_pool(i64 %60) #5, !dbg !2987
  store ptr %61, ptr %state, align 8, !dbg !2987
    #dbg_declare(ptr %res, !2989, !DIExpression(), !2991)
  %62 = load i64, ptr %total_size, align 8, !dbg !2991
  %63 = call ptr @std.core.dstring.temp_with_capacity(i64 %62), !dbg !2991
  store ptr %63, ptr %res, align 8, !dbg !2991
  store ptr %res, ptr %self, align 8
  %ptradd97 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !2992
  %64 = load i64, ptr %ptradd97, align 8, !dbg !2992
  %65 = load ptr, ptr %2, align 8, !dbg !2992
  %ge98 = icmp sge i64 0, %64, !dbg !2992
  %66 = call i1 @llvm.expect.i1(i1 %ge98, i1 false), !dbg !2992
  br i1 %66, label %panic99, label %checkok109, !dbg !2992

checkok109:                                       ; preds = %loop.exit
  %67 = ptrtoint ptr %65 to i64, !dbg !2992
  %68 = urem i64 %67, 8, !dbg !2992
  %69 = icmp ne i64 %68, 0, !dbg !2992
  %70 = call i1 @llvm.expect.i1(i1 %69, i1 false), !dbg !2992
  br i1 %70, label %panic110, label %checkok120, !dbg !2992

checkok120:                                       ; preds = %checkok109
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %value, ptr align 8 %65, i32 16, i1 false)
  %71 = load ptr, ptr %self, align 8, !dbg !2993
  %neq121 = icmp ne ptr %71, null, !dbg !2993
  br i1 %neq121, label %assert_ok126, label %assert_fail122, !dbg !2993

assert_fail122:                                   ; preds = %checkok120
  store %"char[]" { ptr @.panic_msg.18, i64 32 }, ptr %indirectarg123, align 8
  store %"char[]" { ptr @.file.19, i64 10 }, ptr %indirectarg124, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg125, align 8
  %72 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %72(ptr align 8 %indirectarg123, ptr align 8 %indirectarg124, ptr align 8 %indirectarg125, i32 395) #6, !dbg !2993
  unreachable, !dbg !2993

assert_ok126:                                     ; preds = %checkok120
  %73 = load ptr, ptr %self, align 8, !dbg !2997
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg127, ptr align 8 %value, i32 16, i1 false)
  call void @std.core.dstring.DString.append_chars(ptr %73, ptr align 8 %indirectarg127), !dbg !2997
  %74 = load %"char[][]", ptr %2, align 8, !dbg !2998
  %75 = extractvalue %"char[][]" %74, 0, !dbg !2998
  %76 = extractvalue %"char[][]" %74, 1, !dbg !2998
  %gt128 = icmp sgt i64 1, %76, !dbg !2998
  %77 = call i1 @llvm.expect.i1(i1 %gt128, i1 false), !dbg !2998
  br i1 %77, label %panic129, label %checkok139, !dbg !2998

checkok139:                                       ; preds = %assert_ok126
  %size140 = sub i64 %76, 1, !dbg !2998
  %ptradd141 = getelementptr inbounds i8, ptr %75, i64 16, !dbg !2998
  %78 = insertvalue %"char[][]" undef, ptr %ptradd141, 0, !dbg !2998
  %79 = insertvalue %"char[][]" %78, i64 %size140, 1, !dbg !2998
  %80 = extractvalue %"char[][]" %79, 1, !dbg !2998
    #dbg_declare(ptr %.anon142, !3000, !DIExpression(), !2998)
  store i64 0, ptr %.anon142, align 8, !dbg !2998
  br label %loop.cond143, !dbg !2998

loop.cond143:                                     ; preds = %assert_ok193, %checkok139
  %81 = load i64, ptr %.anon142, align 8, !dbg !2998
  %lt144 = icmp ult i64 %81, %80, !dbg !2998
  br i1 %lt144, label %loop.body145, label %loop.exit196, !dbg !2998

loop.body145:                                     ; preds = %loop.cond143
    #dbg_declare(ptr %str146, !3001, !DIExpression(), !3003)
  %82 = extractvalue %"char[][]" %79, 1, !dbg !3003
  %83 = extractvalue %"char[][]" %79, 0, !dbg !3003
  %84 = load i64, ptr %.anon142, align 8, !dbg !3003
  %ge147 = icmp uge i64 %84, %82, !dbg !3003
  %85 = call i1 @llvm.expect.i1(i1 %ge147, i1 false), !dbg !3003
  br i1 %85, label %panic148, label %checkok158, !dbg !3003

checkok158:                                       ; preds = %loop.body145
  %ptroffset159 = getelementptr inbounds [16 x i8], ptr %83, i64 %84, !dbg !3003
  store ptr %ptroffset159, ptr %str146, align 8, !dbg !3003
  store ptr %res, ptr %self160, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %value161, ptr align 8 %3, i32 16, i1 false)
  %86 = load ptr, ptr %self160, align 8, !dbg !3004
  %neq162 = icmp ne ptr %86, null, !dbg !3004
  br i1 %neq162, label %assert_ok167, label %assert_fail163, !dbg !3004

assert_fail163:                                   ; preds = %checkok158
  store %"char[]" { ptr @.panic_msg.18, i64 32 }, ptr %indirectarg164, align 8
  store %"char[]" { ptr @.file.19, i64 10 }, ptr %indirectarg165, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg166, align 8
  %87 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %87(ptr align 8 %indirectarg164, ptr align 8 %indirectarg165, ptr align 8 %indirectarg166, i32 395) #6, !dbg !3004
  unreachable, !dbg !3004

assert_ok167:                                     ; preds = %checkok158
  %88 = load ptr, ptr %self160, align 8, !dbg !3009
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg168, ptr align 8 %value161, i32 16, i1 false)
  call void @std.core.dstring.DString.append_chars(ptr %88, ptr align 8 %indirectarg168), !dbg !3009
  store ptr %res, ptr %self169, align 8
  %89 = load ptr, ptr %str146, align 8, !dbg !3010
  %checknull170 = icmp eq ptr %89, null, !dbg !3010
  %90 = call i1 @llvm.expect.i1(i1 %checknull170, i1 false), !dbg !3010
  br i1 %90, label %panic171, label %checkok175, !dbg !3010

checkok175:                                       ; preds = %assert_ok167
  %91 = ptrtoint ptr %89 to i64, !dbg !3010
  %92 = urem i64 %91, 8, !dbg !3010
  %93 = icmp ne i64 %92, 0, !dbg !3010
  %94 = call i1 @llvm.expect.i1(i1 %93, i1 false), !dbg !3010
  br i1 %94, label %panic176, label %checkok186, !dbg !3010

checkok186:                                       ; preds = %checkok175
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %value187, ptr align 8 %89, i32 16, i1 false)
  %95 = load ptr, ptr %self169, align 8, !dbg !3011
  %neq188 = icmp ne ptr %95, null, !dbg !3011
  br i1 %neq188, label %assert_ok193, label %assert_fail189, !dbg !3011

assert_fail189:                                   ; preds = %checkok186
  store %"char[]" { ptr @.panic_msg.18, i64 32 }, ptr %indirectarg190, align 8
  store %"char[]" { ptr @.file.19, i64 10 }, ptr %indirectarg191, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg192, align 8
  %96 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %96(ptr align 8 %indirectarg190, ptr align 8 %indirectarg191, ptr align 8 %indirectarg192, i32 395) #6, !dbg !3011
  unreachable, !dbg !3011

assert_ok193:                                     ; preds = %checkok186
  %97 = load ptr, ptr %self169, align 8, !dbg !3014
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg194, ptr align 8 %value187, i32 16, i1 false)
  call void @std.core.dstring.DString.append_chars(ptr %97, ptr align 8 %indirectarg194), !dbg !3014
  %98 = load i64, ptr %.anon142, align 8, !dbg !2998
  %addnuw195 = add nuw i64 %98, 1, !dbg !2998
  store i64 %addnuw195, ptr %.anon142, align 8, !dbg !2998
  br label %loop.cond143, !dbg !2998

loop.exit196:                                     ; preds = %loop.cond143
  %99 = load ptr, ptr %res, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg197, ptr align 8 %1, i32 16, i1 false)
  call void @std.core.dstring.DString.copy_str(ptr sret(%"char[]") align 8 %sretparam, ptr %99, ptr align 8 %indirectarg197), !dbg !3015
  %100 = load %"char[]", ptr %sretparam, align 8, !dbg !3015
  %101 = load ptr, ptr %state, align 8, !dbg !3016
  call void @std.core.mem.allocator.pop_pool(ptr %101) #5, !dbg !3016
  store %"char[]" %100, ptr %0, align 8, !dbg !3016
  ret void, !dbg !3016

panic:                                            ; preds = %expr_block.exit
  store i64 %sub23, ptr %taddr24, align 8
  %102 = insertvalue %any undef, ptr %taddr24, 0
  %103 = insertvalue %any %102, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.10, i64 43 }, ptr %indirectarg25, align 8
  store %"char[]" { ptr @.file, i64 16 }, ptr %indirectarg26, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg27, align 8
  store %any %103, ptr %varargslots, align 16
  %104 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %104, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg28, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg25, ptr align 8 %indirectarg26, ptr align 8 %indirectarg27, i32 270, ptr align 8 %indirectarg28) #6, !dbg !2963
  unreachable, !dbg !2963

panic38:                                          ; preds = %noerr_block
  store i64 %38, ptr %taddr39, align 8
  %105 = insertvalue %any undef, ptr %taddr39, 0
  %106 = insertvalue %any %105, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr40, align 8
  %107 = insertvalue %any undef, ptr %taddr40, 0
  %108 = insertvalue %any %107, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.12, i64 61 }, ptr %indirectarg41, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg42, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg43, align 8
  store %any %106, ptr %varargslots44, align 16
  %ptradd45 = getelementptr inbounds i8, ptr %varargslots44, i64 16
  store %any %108, ptr %ptradd45, align 16
  %109 = insertvalue %"any[]" undef, ptr %varargslots44, 0
  %"$$temp46" = insertvalue %"any[]" %109, i64 2, 1
  store %"any[]" %"$$temp46", ptr %indirectarg47, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg41, ptr align 8 %indirectarg42, ptr align 8 %indirectarg43, i32 155, ptr align 8 %indirectarg47) #6, !dbg !2967
  unreachable, !dbg !2967

panic50:                                          ; preds = %checkok48
  store i64 -1, ptr %taddr51, align 8
  %110 = insertvalue %any undef, ptr %taddr51, 0
  %111 = insertvalue %any %110, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %38, ptr %taddr52, align 8
  %112 = insertvalue %any undef, ptr %taddr52, 0
  %113 = insertvalue %any %112, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.14, i64 60 }, ptr %indirectarg53, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg54, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg55, align 8
  store %any %111, ptr %varargslots56, align 16
  %ptradd57 = getelementptr inbounds i8, ptr %varargslots56, i64 16
  store %any %113, ptr %ptradd57, align 16
  %114 = insertvalue %"any[]" undef, ptr %varargslots56, 0
  %"$$temp58" = insertvalue %"any[]" %114, i64 2, 1
  store %"any[]" %"$$temp58", ptr %indirectarg59, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg53, ptr align 8 %indirectarg54, ptr align 8 %indirectarg55, i32 155, ptr align 8 %indirectarg59) #6, !dbg !2967
  unreachable, !dbg !2967

panic68:                                          ; preds = %loop.body
  store i64 %47, ptr %taddr69, align 8
  %115 = insertvalue %any undef, ptr %taddr69, 0
  %116 = insertvalue %any %115, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %49, ptr %taddr70, align 8
  %117 = insertvalue %any undef, ptr %taddr70, 0
  %118 = insertvalue %any %117, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg71, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg72, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg73, align 8
  store %any %116, ptr %varargslots74, align 16
  %ptradd75 = getelementptr inbounds i8, ptr %varargslots74, i64 16
  store %any %118, ptr %ptradd75, align 16
  %119 = insertvalue %"any[]" undef, ptr %varargslots74, 0
  %"$$temp76" = insertvalue %"any[]" %119, i64 2, 1
  store %"any[]" %"$$temp76", ptr %indirectarg77, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg71, ptr align 8 %indirectarg72, ptr align 8 %indirectarg73, i32 159, ptr align 8 %indirectarg77) #6, !dbg !2982
  unreachable, !dbg !2982

panic79:                                          ; preds = %checkok78
  store %"char[]" { ptr @.panic_msg.16, i64 44 }, ptr %indirectarg80, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg81, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg82, align 8
  %120 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %120(ptr align 8 %indirectarg80, ptr align 8 %indirectarg81, ptr align 8 %indirectarg82, i32 161) #6, !dbg !2983
  unreachable, !dbg !2983

panic84:                                          ; preds = %checkok83
  store i64 8, ptr %taddr85, align 8
  %121 = insertvalue %any undef, ptr %taddr85, 0
  %122 = insertvalue %any %121, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %55, ptr %taddr86, align 8
  %123 = insertvalue %any undef, ptr %taddr86, 0
  %124 = insertvalue %any %123, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 94 }, ptr %indirectarg87, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg88, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg89, align 8
  store %any %122, ptr %varargslots90, align 16
  %ptradd91 = getelementptr inbounds i8, ptr %varargslots90, i64 16
  store %any %124, ptr %ptradd91, align 16
  %125 = insertvalue %"any[]" undef, ptr %varargslots90, 0
  %"$$temp92" = insertvalue %"any[]" %125, i64 2, 1
  store %"any[]" %"$$temp92", ptr %indirectarg93, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg87, ptr align 8 %indirectarg88, ptr align 8 %indirectarg89, i32 161, ptr align 8 %indirectarg93) #6, !dbg !2983
  unreachable, !dbg !2983

panic99:                                          ; preds = %loop.exit
  store i64 %64, ptr %taddr100, align 8
  %126 = insertvalue %any undef, ptr %taddr100, 0
  %127 = insertvalue %any %126, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr101, align 8
  %128 = insertvalue %any undef, ptr %taddr101, 0
  %129 = insertvalue %any %128, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg102, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg103, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg104, align 8
  store %any %127, ptr %varargslots105, align 16
  %ptradd106 = getelementptr inbounds i8, ptr %varargslots105, i64 16
  store %any %129, ptr %ptradd106, align 16
  %130 = insertvalue %"any[]" undef, ptr %varargslots105, 0
  %"$$temp107" = insertvalue %"any[]" %130, i64 2, 1
  store %"any[]" %"$$temp107", ptr %indirectarg108, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg102, ptr align 8 %indirectarg103, ptr align 8 %indirectarg104, i32 166, ptr align 8 %indirectarg108) #6, !dbg !2992
  unreachable, !dbg !2992

panic110:                                         ; preds = %checkok109
  store i64 8, ptr %taddr111, align 8
  %131 = insertvalue %any undef, ptr %taddr111, 0
  %132 = insertvalue %any %131, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %68, ptr %taddr112, align 8
  %133 = insertvalue %any undef, ptr %taddr112, 0
  %134 = insertvalue %any %133, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 94 }, ptr %indirectarg113, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg114, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg115, align 8
  store %any %132, ptr %varargslots116, align 16
  %ptradd117 = getelementptr inbounds i8, ptr %varargslots116, i64 16
  store %any %134, ptr %ptradd117, align 16
  %135 = insertvalue %"any[]" undef, ptr %varargslots116, 0
  %"$$temp118" = insertvalue %"any[]" %135, i64 2, 1
  store %"any[]" %"$$temp118", ptr %indirectarg119, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg113, ptr align 8 %indirectarg114, ptr align 8 %indirectarg115, i32 166, ptr align 8 %indirectarg119) #6, !dbg !2992
  unreachable, !dbg !2992

panic129:                                         ; preds = %assert_ok126
  store i64 %76, ptr %taddr130, align 8
  %136 = insertvalue %any undef, ptr %taddr130, 0
  %137 = insertvalue %any %136, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 1, ptr %taddr131, align 8
  %138 = insertvalue %any undef, ptr %taddr131, 0
  %139 = insertvalue %any %138, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.12, i64 61 }, ptr %indirectarg132, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg133, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg134, align 8
  store %any %137, ptr %varargslots135, align 16
  %ptradd136 = getelementptr inbounds i8, ptr %varargslots135, i64 16
  store %any %139, ptr %ptradd136, align 16
  %140 = insertvalue %"any[]" undef, ptr %varargslots135, 0
  %"$$temp137" = insertvalue %"any[]" %140, i64 2, 1
  store %"any[]" %"$$temp137", ptr %indirectarg138, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg132, ptr align 8 %indirectarg133, ptr align 8 %indirectarg134, i32 167, ptr align 8 %indirectarg138) #6, !dbg !2998
  unreachable, !dbg !2998

panic148:                                         ; preds = %loop.body145
  store i64 %82, ptr %taddr149, align 8
  %141 = insertvalue %any undef, ptr %taddr149, 0
  %142 = insertvalue %any %141, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %84, ptr %taddr150, align 8
  %143 = insertvalue %any undef, ptr %taddr150, 0
  %144 = insertvalue %any %143, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg151, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg152, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg153, align 8
  store %any %142, ptr %varargslots154, align 16
  %ptradd155 = getelementptr inbounds i8, ptr %varargslots154, i64 16
  store %any %144, ptr %ptradd155, align 16
  %145 = insertvalue %"any[]" undef, ptr %varargslots154, 0
  %"$$temp156" = insertvalue %"any[]" %145, i64 2, 1
  store %"any[]" %"$$temp156", ptr %indirectarg157, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg151, ptr align 8 %indirectarg152, ptr align 8 %indirectarg153, i32 167, ptr align 8 %indirectarg157) #6, !dbg !3003
  unreachable, !dbg !3003

panic171:                                         ; preds = %assert_ok167
  store %"char[]" { ptr @.panic_msg.16, i64 44 }, ptr %indirectarg172, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg173, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg174, align 8
  %146 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %146(ptr align 8 %indirectarg172, ptr align 8 %indirectarg173, ptr align 8 %indirectarg174, i32 170) #6, !dbg !3010
  unreachable, !dbg !3010

panic176:                                         ; preds = %checkok175
  store i64 8, ptr %taddr177, align 8
  %147 = insertvalue %any undef, ptr %taddr177, 0
  %148 = insertvalue %any %147, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %92, ptr %taddr178, align 8
  %149 = insertvalue %any undef, ptr %taddr178, 0
  %150 = insertvalue %any %149, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 94 }, ptr %indirectarg179, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg180, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg181, align 8
  store %any %148, ptr %varargslots182, align 16
  %ptradd183 = getelementptr inbounds i8, ptr %varargslots182, i64 16
  store %any %150, ptr %ptradd183, align 16
  %151 = insertvalue %"any[]" undef, ptr %varargslots182, 0
  %"$$temp184" = insertvalue %"any[]" %151, i64 2, 1
  store %"any[]" %"$$temp184", ptr %indirectarg185, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg179, ptr align 8 %indirectarg180, ptr align 8 %indirectarg181, i32 170, ptr align 8 %indirectarg185) #6, !dbg !3010
  unreachable, !dbg !3010
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.core.string.from_utf32(ptr %0, ptr align 8 %1, ptr align 8 %2) #0 comdat !dbg !3018 {
entry:
  %len = alloca i64, align 8
  %indirectarg = alloca %"uint[]", align 8
  %data = alloca ptr, align 8
  %error_var = alloca i64, align 8
  %allocator = alloca %any, align 8
  %size = alloca i64, align 8
  %blockret = alloca ptr, align 8
  %x = alloca i64, align 8
  %indirectarg2 = alloca %"char[]", align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg7 = alloca %"char[]", align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %indirectarg13 = alloca %"char[]", align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %indirectarg16 = alloca %"char[]", align 8
  %indirectarg17 = alloca %"char[]", align 8
  %indirectarg18 = alloca %"char[]", align 8
  %retparam = alloca ptr, align 8
  %indirectarg19 = alloca %"uint[]", align 8
  %reterr = alloca i64, align 8
  %taddr = alloca i64, align 8
  %indirectarg23 = alloca %"char[]", align 8
  %indirectarg24 = alloca %"char[]", align 8
  %indirectarg25 = alloca %"char[]", align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg26 = alloca %"any[]", align 8
    #dbg_declare(ptr %1, !3025, !DIExpression(), !3026)
    #dbg_declare(ptr %2, !3027, !DIExpression(), !3026)
    #dbg_declare(ptr %len, !3028, !DIExpression(), !3029)
  store ptr null, ptr %.cachedtype, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg, ptr align 8 %2, i32 16, i1 false)
  %3 = call i64 @std.core.string.conv.utf8len_for_utf32(ptr align 8 %indirectarg), !dbg !3029
  store i64 %3, ptr %len, align 8, !dbg !3029
    #dbg_declare(ptr %data, !3030, !DIExpression(), !3031)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator, ptr align 8 %1, i32 16, i1 false)
  %4 = load i64, ptr %len, align 8, !dbg !3031
  %add = add i64 %4, 1, !dbg !3031
  store i64 %add, ptr %size, align 8
  %5 = load i64, ptr %size, align 8, !dbg !3032
  %i2nb = icmp eq i64 %5, 0, !dbg !3032
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !3032

if.then:                                          ; preds = %entry
  store ptr null, ptr %blockret, align 8, !dbg !3032
  br label %expr_block.exit, !dbg !3032

if.exit:                                          ; preds = %entry
  %6 = load i64, ptr %size, align 8, !dbg !3034
  br i1 true, label %or.phi, label %or.rhs, !dbg !3035

or.rhs:                                           ; preds = %if.exit
  store i64 0, ptr %x, align 8
  %7 = load i64, ptr %x, align 8, !dbg !3036
  %neq = icmp ne i64 0, %7, !dbg !3036
  br i1 %neq, label %and.rhs, label %and.phi, !dbg !3036

and.rhs:                                          ; preds = %or.rhs
  %8 = load i64, ptr %x, align 8, !dbg !3036
  %9 = load i64, ptr %x, align 8, !dbg !3036
  %sub = sub i64 %9, 1, !dbg !3036
  %and = and i64 %8, %sub, !dbg !3036
  %eq = icmp eq i64 %and, 0, !dbg !3036
  br label %and.phi, !dbg !3036

and.phi:                                          ; preds = %and.rhs, %or.rhs
  %val = phi i1 [ false, %or.rhs ], [ %eq, %and.rhs ], !dbg !3036
  br label %or.phi, !dbg !3036

or.phi:                                           ; preds = %and.phi, %if.exit
  %val1 = phi i1 [ true, %if.exit ], [ %val, %and.phi ], !dbg !3036
  br i1 %val1, label %assert_ok, label %assert_fail, !dbg !3036

assert_fail:                                      ; preds = %or.phi
  store %"char[]" { ptr @.panic_msg, i64 65 }, ptr %indirectarg2, align 8
  store %"char[]" { ptr @.file, i64 16 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg4, align 8
  %10 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %10(ptr align 8 %indirectarg2, ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, i32 86) #6, !dbg !3034
  unreachable, !dbg !3034

assert_ok:                                        ; preds = %or.phi
  br i1 true, label %assert_ok9, label %assert_fail5, !dbg !3034

assert_fail5:                                     ; preds = %assert_ok
  store %"char[]" { ptr @.panic_msg.7, i64 80 }, ptr %indirectarg6, align 8
  store %"char[]" { ptr @.file, i64 16 }, ptr %indirectarg7, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg8, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11(ptr align 8 %indirectarg6, ptr align 8 %indirectarg7, ptr align 8 %indirectarg8, i32 86) #6, !dbg !3034
  unreachable, !dbg !3034

assert_ok9:                                       ; preds = %assert_ok
  %lt = icmp ult i64 0, %6, !dbg !3034
  br i1 %lt, label %assert_ok14, label %assert_fail10, !dbg !3034

assert_fail10:                                    ; preds = %assert_ok9
  store %"char[]" { ptr @.panic_msg.8, i64 59 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.file, i64 16 }, ptr %indirectarg12, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg13, align 8
  %12 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %12(ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, ptr align 8 %indirectarg13, i32 86) #6, !dbg !3034
  unreachable, !dbg !3034

assert_ok14:                                      ; preds = %assert_ok9
  %ptradd = getelementptr inbounds i8, ptr %allocator, i64 8, !dbg !3034
  %13 = load i64, ptr %ptradd, align 8, !dbg !3034
  %14 = inttoptr i64 %13 to ptr, !dbg !3034
  %type = load ptr, ptr %.cachedtype, align 8
  %15 = icmp eq ptr %14, %type
  br i1 %15, label %cache_hit, label %cache_miss

cache_miss:                                       ; preds = %assert_ok14
  %ptradd15 = getelementptr inbounds i8, ptr %14, i64 16
  %16 = load ptr, ptr %ptradd15, align 8
  %17 = call ptr @.dyn_search(ptr %16, ptr @"$sel.acquire")
  store ptr %17, ptr %.inlinecache, align 8
  store ptr %14, ptr %.cachedtype, align 8
  br label %18

cache_hit:                                        ; preds = %assert_ok14
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8
  br label %18

18:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %17, %cache_miss ]
  %19 = icmp eq ptr %fn_phi, null
  br i1 %19, label %missing_function, label %match

missing_function:                                 ; preds = %18
  store %"char[]" { ptr @.panic_msg.9, i64 44 }, ptr %indirectarg16, align 8
  store %"char[]" { ptr @.file, i64 16 }, ptr %indirectarg17, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg18, align 8
  %20 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %20(ptr align 8 %indirectarg16, ptr align 8 %indirectarg17, ptr align 8 %indirectarg18, i32 86) #6, !dbg !3034
  unreachable, !dbg !3034

match:                                            ; preds = %18
  %21 = load ptr, ptr %allocator, align 8
  %22 = call i64 %fn_phi(ptr %retparam, ptr %21, i64 %6, i32 0, i64 0), !dbg !3034
  %not_err = icmp eq i64 %22, 0, !dbg !3034
  %23 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !3034
  br i1 %23, label %after_check, label %assign_optional, !dbg !3034

assign_optional:                                  ; preds = %match
  store i64 %22, ptr %error_var, align 8, !dbg !3034
  br label %guard_block, !dbg !3034

after_check:                                      ; preds = %match
  %24 = load ptr, ptr %retparam, align 8, !dbg !3034
  store ptr %24, ptr %blockret, align 8, !dbg !3034
  br label %expr_block.exit, !dbg !3034

expr_block.exit:                                  ; preds = %after_check, %if.then
  br label %noerr_block, !dbg !3034

guard_block:                                      ; preds = %assign_optional
  %25 = load i64, ptr %error_var, align 8, !dbg !3034
  ret i64 %25, !dbg !3034

noerr_block:                                      ; preds = %expr_block.exit
  %26 = load ptr, ptr %blockret, align 8, !dbg !3034
  store ptr %26, ptr %data, align 8, !dbg !3034
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg19, ptr align 8 %2, i32 16, i1 false)
  %27 = load ptr, ptr %data, align 8
  call void @std.core.string.conv.utf32to8_unsafe(ptr align 8 %indirectarg19, ptr %27), !dbg !3038
  %28 = load ptr, ptr %data, align 8, !dbg !3039
  %29 = load i64, ptr %len, align 8, !dbg !3039
  %ptradd20 = getelementptr inbounds i8, ptr %28, i64 %29, !dbg !3039
  store i8 0, ptr %ptradd20, align 1, !dbg !3039
  %30 = load ptr, ptr %data, align 8, !dbg !3040
  %31 = load i64, ptr %len, align 8, !dbg !3040
  %add21 = add i64 0, %31, !dbg !3040
  %gt = icmp ugt i64 0, %add21, !dbg !3040
  %sub22 = sub i64 %add21, 0, !dbg !3040
  %32 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !3040
  br i1 %32, label %panic, label %checkok, !dbg !3040

checkok:                                          ; preds = %noerr_block
  %size27 = sub i64 %add21, 0, !dbg !3040
  %33 = insertvalue %"char[]" undef, ptr %30, 0, !dbg !3040
  %34 = insertvalue %"char[]" %33, i64 %size27, 1, !dbg !3040
  store %"char[]" %34, ptr %0, align 8, !dbg !3040
  ret i64 0, !dbg !3040

panic:                                            ; preds = %noerr_block
  store i64 %sub22, ptr %taddr, align 8
  %35 = insertvalue %any undef, ptr %taddr, 0
  %36 = insertvalue %any %35, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.10, i64 43 }, ptr %indirectarg23, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg24, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg25, align 8
  store %any %36, ptr %varargslots, align 16
  %37 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %37, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg26, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg23, ptr align 8 %indirectarg24, ptr align 8 %indirectarg25, i32 887, ptr align 8 %indirectarg26) #6, !dbg !3040
  unreachable, !dbg !3040
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.core.string.from_utf16(ptr %0, ptr align 8 %1, ptr align 8 %2) #0 comdat !dbg !3041 {
entry:
  %len = alloca i64, align 8
  %indirectarg = alloca %"ushort[]", align 8
  %data = alloca ptr, align 8
  %error_var = alloca i64, align 8
  %allocator = alloca %any, align 8
  %size = alloca i64, align 8
  %blockret = alloca ptr, align 8
  %x = alloca i64, align 8
  %indirectarg2 = alloca %"char[]", align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg7 = alloca %"char[]", align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %indirectarg13 = alloca %"char[]", align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %indirectarg16 = alloca %"char[]", align 8
  %indirectarg17 = alloca %"char[]", align 8
  %indirectarg18 = alloca %"char[]", align 8
  %retparam = alloca ptr, align 8
  %error_var19 = alloca i64, align 8
  %indirectarg20 = alloca %"ushort[]", align 8
  %allocator25 = alloca %any, align 8
  %ptr = alloca ptr, align 8
  %indirectarg31 = alloca %"char[]", align 8
  %indirectarg32 = alloca %"char[]", align 8
  %indirectarg33 = alloca %"char[]", align 8
  %.inlinecache36 = alloca ptr, align 8
  %.cachedtype37 = alloca ptr, align 8
  %indirectarg45 = alloca %"char[]", align 8
  %indirectarg46 = alloca %"char[]", align 8
  %indirectarg47 = alloca %"char[]", align 8
  %reterr = alloca i64, align 8
  %taddr = alloca i64, align 8
  %indirectarg54 = alloca %"char[]", align 8
  %indirectarg55 = alloca %"char[]", align 8
  %indirectarg56 = alloca %"char[]", align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg57 = alloca %"any[]", align 8
    #dbg_declare(ptr %1, !3048, !DIExpression(), !3049)
    #dbg_declare(ptr %2, !3050, !DIExpression(), !3049)
    #dbg_declare(ptr %len, !3051, !DIExpression(), !3052)
  store ptr null, ptr %.cachedtype37, align 8
  store ptr null, ptr %.cachedtype, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg, ptr align 8 %2, i32 16, i1 false)
  %3 = call i64 @std.core.string.conv.utf8len_for_utf16(ptr align 8 %indirectarg), !dbg !3052
  store i64 %3, ptr %len, align 8, !dbg !3052
    #dbg_declare(ptr %data, !3053, !DIExpression(), !3054)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator, ptr align 8 %1, i32 16, i1 false)
  %4 = load i64, ptr %len, align 8, !dbg !3054
  %add = add i64 %4, 1, !dbg !3054
  store i64 %add, ptr %size, align 8
  %5 = load i64, ptr %size, align 8, !dbg !3055
  %i2nb = icmp eq i64 %5, 0, !dbg !3055
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !3055

if.then:                                          ; preds = %entry
  store ptr null, ptr %blockret, align 8, !dbg !3055
  br label %expr_block.exit, !dbg !3055

if.exit:                                          ; preds = %entry
  %6 = load i64, ptr %size, align 8, !dbg !3057
  br i1 true, label %or.phi, label %or.rhs, !dbg !3058

or.rhs:                                           ; preds = %if.exit
  store i64 0, ptr %x, align 8
  %7 = load i64, ptr %x, align 8, !dbg !3059
  %neq = icmp ne i64 0, %7, !dbg !3059
  br i1 %neq, label %and.rhs, label %and.phi, !dbg !3059

and.rhs:                                          ; preds = %or.rhs
  %8 = load i64, ptr %x, align 8, !dbg !3059
  %9 = load i64, ptr %x, align 8, !dbg !3059
  %sub = sub i64 %9, 1, !dbg !3059
  %and = and i64 %8, %sub, !dbg !3059
  %eq = icmp eq i64 %and, 0, !dbg !3059
  br label %and.phi, !dbg !3059

and.phi:                                          ; preds = %and.rhs, %or.rhs
  %val = phi i1 [ false, %or.rhs ], [ %eq, %and.rhs ], !dbg !3059
  br label %or.phi, !dbg !3059

or.phi:                                           ; preds = %and.phi, %if.exit
  %val1 = phi i1 [ true, %if.exit ], [ %val, %and.phi ], !dbg !3059
  br i1 %val1, label %assert_ok, label %assert_fail, !dbg !3059

assert_fail:                                      ; preds = %or.phi
  store %"char[]" { ptr @.panic_msg, i64 65 }, ptr %indirectarg2, align 8
  store %"char[]" { ptr @.file, i64 16 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.func.21, i64 10 }, ptr %indirectarg4, align 8
  %10 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %10(ptr align 8 %indirectarg2, ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, i32 86) #6, !dbg !3057
  unreachable, !dbg !3057

assert_ok:                                        ; preds = %or.phi
  br i1 true, label %assert_ok9, label %assert_fail5, !dbg !3057

assert_fail5:                                     ; preds = %assert_ok
  store %"char[]" { ptr @.panic_msg.7, i64 80 }, ptr %indirectarg6, align 8
  store %"char[]" { ptr @.file, i64 16 }, ptr %indirectarg7, align 8
  store %"char[]" { ptr @.func.21, i64 10 }, ptr %indirectarg8, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11(ptr align 8 %indirectarg6, ptr align 8 %indirectarg7, ptr align 8 %indirectarg8, i32 86) #6, !dbg !3057
  unreachable, !dbg !3057

assert_ok9:                                       ; preds = %assert_ok
  %lt = icmp ult i64 0, %6, !dbg !3057
  br i1 %lt, label %assert_ok14, label %assert_fail10, !dbg !3057

assert_fail10:                                    ; preds = %assert_ok9
  store %"char[]" { ptr @.panic_msg.8, i64 59 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.file, i64 16 }, ptr %indirectarg12, align 8
  store %"char[]" { ptr @.func.21, i64 10 }, ptr %indirectarg13, align 8
  %12 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %12(ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, ptr align 8 %indirectarg13, i32 86) #6, !dbg !3057
  unreachable, !dbg !3057

assert_ok14:                                      ; preds = %assert_ok9
  %ptradd = getelementptr inbounds i8, ptr %allocator, i64 8, !dbg !3057
  %13 = load i64, ptr %ptradd, align 8, !dbg !3057
  %14 = inttoptr i64 %13 to ptr, !dbg !3057
  %type = load ptr, ptr %.cachedtype, align 8
  %15 = icmp eq ptr %14, %type
  br i1 %15, label %cache_hit, label %cache_miss

cache_miss:                                       ; preds = %assert_ok14
  %ptradd15 = getelementptr inbounds i8, ptr %14, i64 16
  %16 = load ptr, ptr %ptradd15, align 8
  %17 = call ptr @.dyn_search(ptr %16, ptr @"$sel.acquire")
  store ptr %17, ptr %.inlinecache, align 8
  store ptr %14, ptr %.cachedtype, align 8
  br label %18

cache_hit:                                        ; preds = %assert_ok14
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8
  br label %18

18:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %17, %cache_miss ]
  %19 = icmp eq ptr %fn_phi, null
  br i1 %19, label %missing_function, label %match

missing_function:                                 ; preds = %18
  store %"char[]" { ptr @.panic_msg.9, i64 44 }, ptr %indirectarg16, align 8
  store %"char[]" { ptr @.file, i64 16 }, ptr %indirectarg17, align 8
  store %"char[]" { ptr @.func.21, i64 10 }, ptr %indirectarg18, align 8
  %20 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %20(ptr align 8 %indirectarg16, ptr align 8 %indirectarg17, ptr align 8 %indirectarg18, i32 86) #6, !dbg !3057
  unreachable, !dbg !3057

match:                                            ; preds = %18
  %21 = load ptr, ptr %allocator, align 8
  %22 = call i64 %fn_phi(ptr %retparam, ptr %21, i64 %6, i32 0, i64 0), !dbg !3057
  %not_err = icmp eq i64 %22, 0, !dbg !3057
  %23 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !3057
  br i1 %23, label %after_check, label %assign_optional, !dbg !3057

assign_optional:                                  ; preds = %match
  store i64 %22, ptr %error_var, align 8, !dbg !3057
  br label %guard_block, !dbg !3057

after_check:                                      ; preds = %match
  %24 = load ptr, ptr %retparam, align 8, !dbg !3057
  store ptr %24, ptr %blockret, align 8, !dbg !3057
  br label %expr_block.exit, !dbg !3057

expr_block.exit:                                  ; preds = %after_check, %if.then
  br label %noerr_block, !dbg !3057

guard_block:                                      ; preds = %assign_optional
  %25 = load i64, ptr %error_var, align 8, !dbg !3057
  ret i64 %25, !dbg !3057

noerr_block:                                      ; preds = %expr_block.exit
  %26 = load ptr, ptr %blockret, align 8, !dbg !3057
  store ptr %26, ptr %data, align 8, !dbg !3057
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg20, ptr align 8 %2, i32 16, i1 false)
  %27 = load ptr, ptr %data, align 8
  %28 = call i64 @std.core.string.conv.utf16to8_unsafe(ptr align 8 %indirectarg20, ptr %27), !dbg !3061
  %not_err21 = icmp eq i64 %28, 0, !dbg !3061
  %29 = call i1 @llvm.expect.i1(i1 %not_err21, i1 true), !dbg !3061
  br i1 %29, label %after_check23, label %assign_optional22, !dbg !3061

assign_optional22:                                ; preds = %noerr_block
  store i64 %28, ptr %error_var19, align 8, !dbg !3061
  br label %guard_block24, !dbg !3061

after_check23:                                    ; preds = %noerr_block
  br label %noerr_block50, !dbg !3061

guard_block24:                                    ; preds = %assign_optional22
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator25, ptr align 8 %1, i32 16, i1 false)
  %30 = load ptr, ptr %data, align 8, !dbg !3062
  store ptr %30, ptr %ptr, align 8
  %31 = load ptr, ptr %ptr, align 8, !dbg !3064
  %i2nb26 = icmp eq ptr %31, null, !dbg !3064
  br i1 %i2nb26, label %if.then27, label %if.exit28, !dbg !3064

if.then27:                                        ; preds = %guard_block24
  br label %expr_block.exit49, !dbg !3064

if.exit28:                                        ; preds = %guard_block24
  %32 = load ptr, ptr %ptr, align 8, !dbg !3066
  %neq29 = icmp ne ptr %32, null, !dbg !3066
  br i1 %neq29, label %assert_ok34, label %assert_fail30, !dbg !3066

assert_fail30:                                    ; preds = %if.exit28
  store %"char[]" { ptr @.panic_msg.22, i64 75 }, ptr %indirectarg31, align 8
  store %"char[]" { ptr @.file, i64 16 }, ptr %indirectarg32, align 8
  store %"char[]" { ptr @.func.21, i64 10 }, ptr %indirectarg33, align 8
  %33 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %33(ptr align 8 %indirectarg31, ptr align 8 %indirectarg32, ptr align 8 %indirectarg33, i32 123) #6, !dbg !3066
  unreachable, !dbg !3066

assert_ok34:                                      ; preds = %if.exit28
  %ptradd35 = getelementptr inbounds i8, ptr %allocator25, i64 8, !dbg !3066
  %34 = load i64, ptr %ptradd35, align 8, !dbg !3066
  %35 = inttoptr i64 %34 to ptr, !dbg !3066
  %type38 = load ptr, ptr %.cachedtype37, align 8
  %36 = icmp eq ptr %35, %type38
  br i1 %36, label %cache_hit41, label %cache_miss39

cache_miss39:                                     ; preds = %assert_ok34
  %ptradd40 = getelementptr inbounds i8, ptr %35, i64 16
  %37 = load ptr, ptr %ptradd40, align 8
  %38 = call ptr @.dyn_search(ptr %37, ptr @"$sel.release")
  store ptr %38, ptr %.inlinecache36, align 8
  store ptr %35, ptr %.cachedtype37, align 8
  br label %39

cache_hit41:                                      ; preds = %assert_ok34
  %cache_hit_fn42 = load ptr, ptr %.inlinecache36, align 8
  br label %39

39:                                               ; preds = %cache_hit41, %cache_miss39
  %fn_phi43 = phi ptr [ %cache_hit_fn42, %cache_hit41 ], [ %38, %cache_miss39 ]
  %40 = icmp eq ptr %fn_phi43, null
  br i1 %40, label %missing_function44, label %match48

missing_function44:                               ; preds = %39
  store %"char[]" { ptr @.panic_msg.23, i64 44 }, ptr %indirectarg45, align 8
  store %"char[]" { ptr @.file, i64 16 }, ptr %indirectarg46, align 8
  store %"char[]" { ptr @.func.21, i64 10 }, ptr %indirectarg47, align 8
  %41 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %41(ptr align 8 %indirectarg45, ptr align 8 %indirectarg46, ptr align 8 %indirectarg47, i32 123) #6, !dbg !3066
  unreachable, !dbg !3066

match48:                                          ; preds = %39
  %42 = load ptr, ptr %allocator25, align 8, !dbg !3066
  call void %fn_phi43(ptr %42, ptr %32, i8 zeroext 0), !dbg !3066
  br label %expr_block.exit49, !dbg !3066

expr_block.exit49:                                ; preds = %match48, %if.then27
  %43 = load i64, ptr %error_var19, align 8, !dbg !3066
  ret i64 %43, !dbg !3066

noerr_block50:                                    ; preds = %after_check23
  %44 = load ptr, ptr %data, align 8, !dbg !3067
  %45 = load i64, ptr %len, align 8, !dbg !3067
  %ptradd51 = getelementptr inbounds i8, ptr %44, i64 %45, !dbg !3067
  store i8 0, ptr %ptradd51, align 1, !dbg !3067
  %46 = load ptr, ptr %data, align 8, !dbg !3068
  %47 = load i64, ptr %len, align 8, !dbg !3068
  %add52 = add i64 0, %47, !dbg !3068
  %gt = icmp ugt i64 0, %add52, !dbg !3068
  %sub53 = sub i64 %add52, 0, !dbg !3068
  %48 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !3068
  br i1 %48, label %panic, label %checkok, !dbg !3068

checkok:                                          ; preds = %noerr_block50
  %size58 = sub i64 %add52, 0, !dbg !3068
  %49 = insertvalue %"char[]" undef, ptr %46, 0, !dbg !3068
  %50 = insertvalue %"char[]" %49, i64 %size58, 1, !dbg !3068
  store %"char[]" %50, ptr %0, align 8, !dbg !3068
  ret i64 0, !dbg !3068

panic:                                            ; preds = %noerr_block50
  store i64 %sub53, ptr %taddr, align 8
  %51 = insertvalue %any undef, ptr %taddr, 0
  %52 = insertvalue %any %51, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.10, i64 43 }, ptr %indirectarg54, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg55, align 8
  store %"char[]" { ptr @.func.21, i64 10 }, ptr %indirectarg56, align 8
  store %any %52, ptr %varargslots, align 16
  %53 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %53, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg57, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg54, ptr align 8 %indirectarg55, ptr align 8 %indirectarg56, i32 897, ptr align 8 %indirectarg57) #6, !dbg !3068
  unreachable, !dbg !3068
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.core.string.from_wstring(ptr %0, ptr align 8 %1, ptr %2) #0 comdat !dbg !3069 {
entry:
  %wstring = alloca ptr, align 8
  %utf16_len = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr1 = alloca i64, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %indirectarg3 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg4 = alloca %"any[]", align 8
  %utf16 = alloca %"ushort[]", align 8
  %taddr7 = alloca i64, align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %varargslots11 = alloca [1 x %any], align 16
  %indirectarg13 = alloca %"any[]", align 8
  %reterr = alloca i64, align 8
  %retparam = alloca %"char[]", align 8
  %indirectarg15 = alloca %any, align 8
  %indirectarg16 = alloca %"ushort[]", align 8
    #dbg_declare(ptr %1, !3072, !DIExpression(), !3073)
  store ptr %2, ptr %wstring, align 8
    #dbg_declare(ptr %wstring, !3074, !DIExpression(), !3073)
    #dbg_declare(ptr %utf16_len, !3075, !DIExpression(), !3076)
  store i64 0, ptr %utf16_len, align 8, !dbg !3076
  br label %loop.cond, !dbg !3077

loop.cond:                                        ; preds = %loop.body, %entry
  %3 = load ptr, ptr %wstring, align 8, !dbg !3078
  %4 = load i64, ptr %utf16_len, align 8, !dbg !3078
  %ptroffset = getelementptr inbounds [2 x i8], ptr %3, i64 %4, !dbg !3078
  %5 = ptrtoint ptr %ptroffset to i64, !dbg !3078
  %6 = urem i64 %5, 2, !dbg !3078
  %7 = icmp ne i64 %6, 0, !dbg !3078
  %8 = call i1 @llvm.expect.i1(i1 %7, i1 false), !dbg !3078
  br i1 %8, label %panic, label %checkok, !dbg !3078

checkok:                                          ; preds = %loop.cond
  %9 = load i16, ptr %ptroffset, align 2, !dbg !3078
  %zext = zext i16 %9 to i32, !dbg !3078
  %neq = icmp ne i32 0, %zext, !dbg !3078
  br i1 %neq, label %loop.body, label %loop.exit, !dbg !3078

loop.body:                                        ; preds = %checkok
  %10 = load i64, ptr %utf16_len, align 8, !dbg !3078
  %add = add i64 %10, 1, !dbg !3078
  store i64 %add, ptr %utf16_len, align 8, !dbg !3078
  br label %loop.cond, !dbg !3078

loop.exit:                                        ; preds = %checkok
    #dbg_declare(ptr %utf16, !3080, !DIExpression(), !3081)
  %11 = load ptr, ptr %wstring, align 8, !dbg !3081
  %12 = load i64, ptr %utf16_len, align 8, !dbg !3081
  %add5 = add i64 0, %12, !dbg !3081
  %gt = icmp ugt i64 0, %add5, !dbg !3081
  %sub = sub i64 %add5, 0, !dbg !3081
  %13 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !3081
  br i1 %13, label %panic6, label %checkok14, !dbg !3081

checkok14:                                        ; preds = %loop.exit
  %size = sub i64 %add5, 0, !dbg !3081
  %14 = insertvalue %"ushort[]" undef, ptr %11, 0, !dbg !3081
  %15 = insertvalue %"ushort[]" %14, i64 %size, 1, !dbg !3081
  store %"ushort[]" %15, ptr %utf16, align 8, !dbg !3081
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg15, ptr align 8 %1, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg16, ptr align 8 %utf16, i32 16, i1 false)
  %16 = call i64 @std.core.string.from_utf16(ptr %retparam, ptr align 8 %indirectarg15, ptr align 8 %indirectarg16), !dbg !3082
  %not_err = icmp eq i64 %16, 0, !dbg !3082
  %17 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !3082
  br i1 %17, label %after_check, label %assign_optional, !dbg !3082

assign_optional:                                  ; preds = %checkok14
  store i64 %16, ptr %reterr, align 8, !dbg !3082
  br label %err_retblock, !dbg !3082

after_check:                                      ; preds = %checkok14
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %retparam, i32 16, i1 false), !dbg !3082
  ret i64 0, !dbg !3082

err_retblock:                                     ; preds = %assign_optional
  %18 = load i64, ptr %reterr, align 8, !dbg !3082
  ret i64 %18, !dbg !3082

panic:                                            ; preds = %loop.cond
  store i64 2, ptr %taddr, align 8
  %19 = insertvalue %any undef, ptr %taddr, 0
  %20 = insertvalue %any %19, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %6, ptr %taddr1, align 8
  %21 = insertvalue %any undef, ptr %taddr1, 0
  %22 = insertvalue %any %21, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 94 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg2, align 8
  store %"char[]" { ptr @.func.24, i64 12 }, ptr %indirectarg3, align 8
  store %any %20, ptr %varargslots, align 16
  %ptradd = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %22, ptr %ptradd, align 16
  %23 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %23, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg4, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg, ptr align 8 %indirectarg2, ptr align 8 %indirectarg3, i32 903, ptr align 8 %indirectarg4) #6, !dbg !3078
  unreachable, !dbg !3078

panic6:                                           ; preds = %loop.exit
  store i64 %sub, ptr %taddr7, align 8
  %24 = insertvalue %any undef, ptr %taddr7, 0
  %25 = insertvalue %any %24, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.10, i64 43 }, ptr %indirectarg8, align 8
  store %"char[]" { ptr @.file.13, i64 9 }, ptr %indirectarg9, align 8
  store %"char[]" { ptr @.func.24, i64 12 }, ptr %indirectarg10, align 8
  store %any %25, ptr %varargslots11, align 16
  %26 = insertvalue %"any[]" undef, ptr %varargslots11, 0
  %"$$temp12" = insertvalue %"any[]" %26, i64 1, 1
  store %"any[]" %"$$temp12", ptr %indirectarg13, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg8, ptr align 8 %indirectarg9, ptr align 8 %indirectarg10, i32 904, ptr align 8 %indirectarg13) #6, !dbg !3081
  unreachable, !dbg !3081
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.core.string.tfrom_wstring(ptr %0, ptr %1) #0 comdat !dbg !3083 {
entry:
  %wstring = alloca ptr, align 8
  %reterr = alloca i64, align 8
  %retparam = alloca %"char[]", align 8
  %indirectarg = alloca %any, align 8
  store ptr %1, ptr %wstring, align 8
    #dbg_declare(ptr %wstring, !3086, !DIExpression(), !3087)
  %2 = call ptr @llvm.threadlocal.address.p0(ptr @std.core.mem.allocator.current_temp), !dbg !3087
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg, ptr align 8 %2, i32 16, i1 false)
  %3 = load ptr, ptr %wstring, align 8
  %4 = call i64 @std.core.string.from_wstring(ptr %retparam, ptr align 8 %indirectarg, ptr %3) #5, !dbg !3087
  %not_err = icmp eq i64 %4, 0, !dbg !3087
  %5 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !3087
  br i1 %5, label %after_check, label %assign_optional, !dbg !3087

assign_optional:                                  ; preds = %entry
  store i64 %4, ptr %reterr, align 8, !dbg !3087
  br label %err_retblock, !dbg !3087

after_check:                                      ; preds = %entry
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %retparam, i32 16, i1 false), !dbg !3087
  ret i64 0, !dbg !3087

err_retblock:                                     ; preds = %assign_optional
  %6 = load i64, ptr %reterr, align 8, !dbg !3087
  ret i64 %6, !dbg !3087
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.core.string.tfrom_utf16(ptr %0, ptr align 8 %1) #0 comdat !dbg !3088 {
entry:
  %reterr = alloca i64, align 8
  %retparam = alloca %"char[]", align 8
  %indirectarg = alloca %any, align 8
  %indirectarg1 = alloca %"ushort[]", align 8
    #dbg_declare(ptr %1, !3091, !DIExpression(), !3092)
  %2 = call ptr @llvm.threadlocal.address.p0(ptr @std.core.mem.allocator.current_temp), !dbg !3092
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg, ptr align 8 %2, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg1, ptr align 8 %1, i32 16, i1 false)
  %3 = call i64 @std.core.string.from_utf16(ptr %retparam, ptr align 8 %indirectarg, ptr align 8 %indirectarg1) #5, !dbg !3092
  %not_err = icmp eq i64 %3, 0, !dbg !3092
  %4 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !3092
  br i1 %4, label %after_check, label %assign_optional, !dbg !3092

assign_optional:                                  ; preds = %entry
  store i64 %3, ptr %reterr, align 8, !dbg !3092
  br label %err_retblock, !dbg !3092

after_check:                                      ; preds = %entry
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %retparam, i32 16, i1 false), !dbg !3092
  ret i64 0, !dbg !3092

err_retblock:                                     ; preds = %assign_optional
  %5 = load i64, ptr %reterr, align 8, !dbg !3092
  ret i64 %5, !dbg !3092
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.core.String.escape(ptr noalias sret(%"char[]") align 8 %0, ptr align 8 %1, ptr align 8 %2, i8 zeroext %3) #0 comdat !dbg !3093 {
entry:
  %strip_quotes = alloca i8, align 1
  %initial_capacity = alloca i64, align 8
  %result = alloca ptr, align 8
  %indirectarg = alloca %any, align 8
  %.anon = alloca i64, align 8
  %c = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr5 = alloca i64, align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg7 = alloca %"char[]", align 8
  %indirectarg8 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg10 = alloca %"any[]", align 8
  %switch = alloca i8, align 1
  %self = alloca ptr, align 8
  %value = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %indirectarg13 = alloca %"char[]", align 8
  %indirectarg14 = alloca %"char[]", align 8
  %indirectarg15 = alloca %"char[]", align 8
  %self17 = alloca ptr, align 8
  %value18 = alloca %"char[]", align 8
  %indirectarg21 = alloca %"char[]", align 8
  %indirectarg22 = alloca %"char[]", align 8
  %indirectarg23 = alloca %"char[]", align 8
  %indirectarg25 = alloca %"char[]", align 8
  %self27 = alloca ptr, align 8
  %value28 = alloca %"char[]", align 8
  %indirectarg31 = alloca %"char[]", align 8
  %indirectarg32 = alloca %"char[]", align 8
  %indirectarg33 = alloca %"char[]", align 8
  %indirectarg35 = alloca %"char[]", align 8
  %self37 = alloca ptr, align 8
  %value38 = alloca %"char[]", align 8
  %indirectarg41 = alloca %"char[]", align 8
  %indirectarg42 = alloca %"char[]", align 8
  %indirectarg43 = alloca %"char[]", align 8
  %indirectarg45 = alloca %"char[]", align 8
  %self47 = alloca ptr, align 8
  %value48 = alloca %"char[]", align 8
  %indirectarg51 = alloca %"char[]", align 8
  %indirectarg52 = alloca %"char[]", align 8
  %indirectarg53 = alloca %"char[]", align 8
  %indirectarg55 = alloca %"char[]", align 8
  %self57 = alloca ptr, align 8
  %value58 = alloca %"char[]", align 8
  %indirectarg61 = alloca %"char[]", align 8
  %indirectarg62 = alloca %"char[]", align 8
  %indirectarg63 = alloca %"char[]", align 8
  %indirectarg65 = alloca %"char[]", align 8
  %self67 = alloca ptr, align 8
  %value68 = alloca %"char[]", align 8
  %indirectarg71 = alloca %"char[]", align 8
  %indirectarg72 = alloca %"char[]", align 8
  %indirectarg73 = alloca %"char[]", align 8
  %indirectarg75 = alloca %"char[]", align 8
  %self77 = alloca ptr, align 8
  %value78 = alloca %"char[]", align 8
  %indirectarg81 = alloca %"char[]", align 8
  %indirectarg82 = alloca %"char[]", align 8
  %indirectarg83 = alloca %"char[]", align 8
  %indirectarg85 = alloca %"char[]", align 8
  %self87 = alloca ptr, align 8
  %value88 = alloca %"char[]", align 8
  %indirectarg91 = alloca %"char[]", align 8
  %indirectarg92 = alloca %"char[]", align 8
  %indirectarg93 = alloca %"char[]", align 8
  %indirectarg95 = alloca %"char[]", align 8
  %varargslots99 = alloca [1 x %any], align 16
  %taddr101 = alloca i32, align 4
  %retparam = alloca i64, align 8
  %indirectarg103 = alloca %"char[]", align 8
  %indirectarg104 = alloca %"any[]", align 8
  %sretparam = alloca %"char[]", align 8
  %indirectarg108 = alloca %any, align 8
    #dbg_declare(ptr %1, !3097, !DIExpression(), !3098)
    #dbg_declare(ptr %2, !3099, !DIExpression(), !3098)
  store i8 %3, ptr %strip_quotes, align 1
    #dbg_declare(ptr %strip_quotes, !3100, !DIExpression(), !3098)
    #dbg_declare(ptr %initial_capacity, !3101, !DIExpression(), !3102)
  %ptradd = getelementptr inbounds i8, ptr %1, i64 8, !dbg !3102
  %4 = load i64, ptr %ptradd, align 8, !dbg !3102
  %ptradd1 = getelementptr inbounds i8, ptr %1, i64 8, !dbg !3102
  %5 = load i64, ptr %ptradd1, align 8, !dbg !3102
  %sdiv = sdiv i64 %5, 5, !dbg !3102
  %add = add i64 %4, %sdiv, !dbg !3102
  %add2 = add i64 %add, 2, !dbg !3102
  store i64 %add2, ptr %initial_capacity, align 8, !dbg !3102
    #dbg_declare(ptr %result, !3103, !DIExpression(), !3104)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg, ptr align 8 %2, i32 16, i1 false)
  %6 = load i64, ptr %initial_capacity, align 8
  %7 = call ptr @std.core.dstring.new_with_capacity(ptr align 8 %indirectarg, i64 %6), !dbg !3104
  store ptr %7, ptr %result, align 8, !dbg !3104
  %8 = load i8, ptr %strip_quotes, align 1, !dbg !3105
  %9 = trunc i8 %8 to i1, !dbg !3105
  br i1 %9, label %if.exit, label %if.else, !dbg !3105

if.else:                                          ; preds = %entry
  call void @std.core.dstring.DString.append_char(ptr %result, i8 34), !dbg !3105
  br label %if.exit, !dbg !3105

if.exit:                                          ; preds = %if.else, %entry
  %ptradd3 = getelementptr inbounds i8, ptr %1, i64 8, !dbg !3106
  %10 = load i64, ptr %ptradd3, align 8, !dbg !3106
    #dbg_declare(ptr %.anon, !3108, !DIExpression(), !3106)
  store i64 0, ptr %.anon, align 8, !dbg !3106
  br label %loop.cond, !dbg !3106

loop.cond:                                        ; preds = %switch.exit, %if.exit
  %11 = load i64, ptr %.anon, align 8, !dbg !3106
  %lt = icmp ult i64 %11, %10, !dbg !3106
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !3106

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %c, !3109, !DIExpression(), !3111)
  %ptradd4 = getelementptr inbounds i8, ptr %1, i64 8, !dbg !3111
  %12 = load i64, ptr %ptradd4, align 8, !dbg !3111
  %13 = load ptr, ptr %1, align 8, !dbg !3111
  %14 = load i64, ptr %.anon, align 8, !dbg !3111
  %ge = icmp uge i64 %14, %12, !dbg !3111
  %15 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !3111
  br i1 %15, label %panic, label %checkok, !dbg !3111

checkok:                                          ; preds = %loop.body
  %ptradd11 = getelementptr inbounds i8, ptr %13, i64 %14, !dbg !3111
  %16 = load i8, ptr %ptradd11, align 1, !dbg !3111
  store i8 %16, ptr %c, align 1, !dbg !3111
  %17 = load i8, ptr %c, align 1
  store i8 %17, ptr %switch, align 1
  br label %switch.entry

switch.entry:                                     ; preds = %checkok
  %18 = load i8, ptr %switch, align 1
  switch i8 %18, label %switch.default [
    i8 34, label %switch.case
    i8 92, label %switch.case16
    i8 8, label %switch.case26
    i8 12, label %switch.case36
    i8 10, label %switch.case46
    i8 13, label %switch.case56
    i8 9, label %switch.case66
    i8 11, label %switch.case76
    i8 0, label %switch.case86
  ]

switch.case:                                      ; preds = %switch.entry
  store ptr %result, ptr %self, align 8
  store %"char[]" { ptr @.str.126, i64 2 }, ptr %value, align 8
  %19 = load ptr, ptr %self, align 8, !dbg !3112
  %neq = icmp ne ptr %19, null, !dbg !3112
  br i1 %neq, label %assert_ok, label %assert_fail, !dbg !3112

assert_fail:                                      ; preds = %switch.case
  store %"char[]" { ptr @.panic_msg.18, i64 32 }, ptr %indirectarg12, align 8
  store %"char[]" { ptr @.file.19, i64 10 }, ptr %indirectarg13, align 8
  store %"char[]" { ptr @.func.125, i64 6 }, ptr %indirectarg14, align 8
  %20 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %20(ptr align 8 %indirectarg12, ptr align 8 %indirectarg13, ptr align 8 %indirectarg14, i32 395) #6, !dbg !3112
  unreachable, !dbg !3112

assert_ok:                                        ; preds = %switch.case
  %21 = load ptr, ptr %self, align 8, !dbg !3119
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg15, ptr align 8 %value, i32 16, i1 false)
  call void @std.core.dstring.DString.append_chars(ptr %21, ptr align 8 %indirectarg15), !dbg !3119
  br label %switch.exit, !dbg !3119

switch.case16:                                    ; preds = %switch.entry
  store ptr %result, ptr %self17, align 8
  store %"char[]" { ptr @.str.127, i64 2 }, ptr %value18, align 8
  %22 = load ptr, ptr %self17, align 8, !dbg !3120
  %neq19 = icmp ne ptr %22, null, !dbg !3120
  br i1 %neq19, label %assert_ok24, label %assert_fail20, !dbg !3120

assert_fail20:                                    ; preds = %switch.case16
  store %"char[]" { ptr @.panic_msg.18, i64 32 }, ptr %indirectarg21, align 8
  store %"char[]" { ptr @.file.19, i64 10 }, ptr %indirectarg22, align 8
  store %"char[]" { ptr @.func.125, i64 6 }, ptr %indirectarg23, align 8
  %23 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %23(ptr align 8 %indirectarg21, ptr align 8 %indirectarg22, ptr align 8 %indirectarg23, i32 395) #6, !dbg !3120
  unreachable, !dbg !3120

assert_ok24:                                      ; preds = %switch.case16
  %24 = load ptr, ptr %self17, align 8, !dbg !3125
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg25, ptr align 8 %value18, i32 16, i1 false)
  call void @std.core.dstring.DString.append_chars(ptr %24, ptr align 8 %indirectarg25), !dbg !3125
  br label %switch.exit, !dbg !3125

switch.case26:                                    ; preds = %switch.entry
  store ptr %result, ptr %self27, align 8
  store %"char[]" { ptr @.str.128, i64 2 }, ptr %value28, align 8
  %25 = load ptr, ptr %self27, align 8, !dbg !3126
  %neq29 = icmp ne ptr %25, null, !dbg !3126
  br i1 %neq29, label %assert_ok34, label %assert_fail30, !dbg !3126

assert_fail30:                                    ; preds = %switch.case26
  store %"char[]" { ptr @.panic_msg.18, i64 32 }, ptr %indirectarg31, align 8
  store %"char[]" { ptr @.file.19, i64 10 }, ptr %indirectarg32, align 8
  store %"char[]" { ptr @.func.125, i64 6 }, ptr %indirectarg33, align 8
  %26 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %26(ptr align 8 %indirectarg31, ptr align 8 %indirectarg32, ptr align 8 %indirectarg33, i32 395) #6, !dbg !3126
  unreachable, !dbg !3126

assert_ok34:                                      ; preds = %switch.case26
  %27 = load ptr, ptr %self27, align 8, !dbg !3131
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg35, ptr align 8 %value28, i32 16, i1 false)
  call void @std.core.dstring.DString.append_chars(ptr %27, ptr align 8 %indirectarg35), !dbg !3131
  br label %switch.exit, !dbg !3131

switch.case36:                                    ; preds = %switch.entry
  store ptr %result, ptr %self37, align 8
  store %"char[]" { ptr @.str.129, i64 2 }, ptr %value38, align 8
  %28 = load ptr, ptr %self37, align 8, !dbg !3132
  %neq39 = icmp ne ptr %28, null, !dbg !3132
  br i1 %neq39, label %assert_ok44, label %assert_fail40, !dbg !3132

assert_fail40:                                    ; preds = %switch.case36
  store %"char[]" { ptr @.panic_msg.18, i64 32 }, ptr %indirectarg41, align 8
  store %"char[]" { ptr @.file.19, i64 10 }, ptr %indirectarg42, align 8
  store %"char[]" { ptr @.func.125, i64 6 }, ptr %indirectarg43, align 8
  %29 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %29(ptr align 8 %indirectarg41, ptr align 8 %indirectarg42, ptr align 8 %indirectarg43, i32 395) #6, !dbg !3132
  unreachable, !dbg !3132

assert_ok44:                                      ; preds = %switch.case36
  %30 = load ptr, ptr %self37, align 8, !dbg !3137
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg45, ptr align 8 %value38, i32 16, i1 false)
  call void @std.core.dstring.DString.append_chars(ptr %30, ptr align 8 %indirectarg45), !dbg !3137
  br label %switch.exit, !dbg !3137

switch.case46:                                    ; preds = %switch.entry
  store ptr %result, ptr %self47, align 8
  store %"char[]" { ptr @.str.130, i64 2 }, ptr %value48, align 8
  %31 = load ptr, ptr %self47, align 8, !dbg !3138
  %neq49 = icmp ne ptr %31, null, !dbg !3138
  br i1 %neq49, label %assert_ok54, label %assert_fail50, !dbg !3138

assert_fail50:                                    ; preds = %switch.case46
  store %"char[]" { ptr @.panic_msg.18, i64 32 }, ptr %indirectarg51, align 8
  store %"char[]" { ptr @.file.19, i64 10 }, ptr %indirectarg52, align 8
  store %"char[]" { ptr @.func.125, i64 6 }, ptr %indirectarg53, align 8
  %32 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %32(ptr align 8 %indirectarg51, ptr align 8 %indirectarg52, ptr align 8 %indirectarg53, i32 395) #6, !dbg !3138
  unreachable, !dbg !3138

assert_ok54:                                      ; preds = %switch.case46
  %33 = load ptr, ptr %self47, align 8, !dbg !3143
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg55, ptr align 8 %value48, i32 16, i1 false)
  call void @std.core.dstring.DString.append_chars(ptr %33, ptr align 8 %indirectarg55), !dbg !3143
  br label %switch.exit, !dbg !3143

switch.case56:                                    ; preds = %switch.entry
  store ptr %result, ptr %self57, align 8
  store %"char[]" { ptr @.str.131, i64 2 }, ptr %value58, align 8
  %34 = load ptr, ptr %self57, align 8, !dbg !3144
  %neq59 = icmp ne ptr %34, null, !dbg !3144
  br i1 %neq59, label %assert_ok64, label %assert_fail60, !dbg !3144

assert_fail60:                                    ; preds = %switch.case56
  store %"char[]" { ptr @.panic_msg.18, i64 32 }, ptr %indirectarg61, align 8
  store %"char[]" { ptr @.file.19, i64 10 }, ptr %indirectarg62, align 8
  store %"char[]" { ptr @.func.125, i64 6 }, ptr %indirectarg63, align 8
  %35 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %35(ptr align 8 %indirectarg61, ptr align 8 %indirectarg62, ptr align 8 %indirectarg63, i32 395) #6, !dbg !3144
  unreachable, !dbg !3144

assert_ok64:                                      ; preds = %switch.case56
  %36 = load ptr, ptr %self57, align 8, !dbg !3149
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg65, ptr align 8 %value58, i32 16, i1 false)
  call void @std.core.dstring.DString.append_chars(ptr %36, ptr align 8 %indirectarg65), !dbg !3149
  br label %switch.exit, !dbg !3149

switch.case66:                                    ; preds = %switch.entry
  store ptr %result, ptr %self67, align 8
  store %"char[]" { ptr @.str.132, i64 2 }, ptr %value68, align 8
  %37 = load ptr, ptr %self67, align 8, !dbg !3150
  %neq69 = icmp ne ptr %37, null, !dbg !3150
  br i1 %neq69, label %assert_ok74, label %assert_fail70, !dbg !3150

assert_fail70:                                    ; preds = %switch.case66
  store %"char[]" { ptr @.panic_msg.18, i64 32 }, ptr %indirectarg71, align 8
  store %"char[]" { ptr @.file.19, i64 10 }, ptr %indirectarg72, align 8
  store %"char[]" { ptr @.func.125, i64 6 }, ptr %indirectarg73, align 8
  %38 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %38(ptr align 8 %indirectarg71, ptr align 8 %indirectarg72, ptr align 8 %indirectarg73, i32 395) #6, !dbg !3150
  unreachable, !dbg !3150

assert_ok74:                                      ; preds = %switch.case66
  %39 = load ptr, ptr %self67, align 8, !dbg !3155
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg75, ptr align 8 %value68, i32 16, i1 false)
  call void @std.core.dstring.DString.append_chars(ptr %39, ptr align 8 %indirectarg75), !dbg !3155
  br label %switch.exit, !dbg !3155

switch.case76:                                    ; preds = %switch.entry
  store ptr %result, ptr %self77, align 8
  store %"char[]" { ptr @.str.133, i64 2 }, ptr %value78, align 8
  %40 = load ptr, ptr %self77, align 8, !dbg !3156
  %neq79 = icmp ne ptr %40, null, !dbg !3156
  br i1 %neq79, label %assert_ok84, label %assert_fail80, !dbg !3156

assert_fail80:                                    ; preds = %switch.case76
  store %"char[]" { ptr @.panic_msg.18, i64 32 }, ptr %indirectarg81, align 8
  store %"char[]" { ptr @.file.19, i64 10 }, ptr %indirectarg82, align 8
  store %"char[]" { ptr @.func.125, i64 6 }, ptr %indirectarg83, align 8
  %41 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %41(ptr align 8 %indirectarg81, ptr align 8 %indirectarg82, ptr align 8 %indirectarg83, i32 395) #6, !dbg !3156
  unreachable, !dbg !3156

assert_ok84:                                      ; preds = %switch.case76
  %42 = load ptr, ptr %self77, align 8, !dbg !3161
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg85, ptr align 8 %value78, i32 16, i1 false)
  call void @std.core.dstring.DString.append_chars(ptr %42, ptr align 8 %indirectarg85), !dbg !3161
  br label %switch.exit, !dbg !3161

switch.case86:                                    ; preds = %switch.entry
  store ptr %result, ptr %self87, align 8
  store %"char[]" { ptr @.str.134, i64 2 }, ptr %value88, align 8
  %43 = load ptr, ptr %self87, align 8, !dbg !3162
  %neq89 = icmp ne ptr %43, null, !dbg !3162
  br i1 %neq89, label %assert_ok94, label %assert_fail90, !dbg !3162

assert_fail90:                                    ; preds = %switch.case86
  store %"char[]" { ptr @.panic_msg.18, i64 32 }, ptr %indirectarg91, align 8
  store %"char[]" { ptr @.file.19, i64 10 }, ptr %indirectarg92, align 8
  store %"char[]" { ptr @.func.125, i64 6 }, ptr %indirectarg93, align 8
  %44 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %44(ptr align 8 %indirectarg91, ptr align 8 %indirectarg92, ptr align 8 %indirectarg93, i32 395) #6, !dbg !3162
  unreachable, !dbg !3162

assert_ok94:                                      ; preds = %switch.case86
  %45 = load ptr, ptr %self87, align 8, !dbg !3167
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg95, ptr align 8 %value88, i32 16, i1 false)
  call void @std.core.dstring.DString.append_chars(ptr %45, ptr align 8 %indirectarg95), !dbg !3167
  br label %switch.exit, !dbg !3167

switch.default:                                   ; preds = %switch.entry
  %46 = load i8, ptr %c, align 1, !dbg !3168
  %zext = zext i8 %46 to i32, !dbg !3168
  %le = icmp ule i32 32, %zext, !dbg !3168
  br i1 %le, label %and.rhs, label %and.phi, !dbg !3168

and.rhs:                                          ; preds = %switch.default
  %47 = load i8, ptr %c, align 1, !dbg !3168
  %zext96 = zext i8 %47 to i32, !dbg !3168
  %ge97 = icmp uge i32 126, %zext96, !dbg !3168
  br label %and.phi, !dbg !3168

and.phi:                                          ; preds = %and.rhs, %switch.default
  %val = phi i1 [ false, %switch.default ], [ %ge97, %and.rhs ], !dbg !3168
  br i1 %val, label %if.then, label %if.else98, !dbg !3168

if.then:                                          ; preds = %and.phi
  %48 = load i8, ptr %c, align 1, !dbg !3170
  call void @std.core.dstring.DString.append_char(ptr %result, i8 %48), !dbg !3170
  br label %if.exit105, !dbg !3170

if.else98:                                        ; preds = %and.phi
  %49 = load i8, ptr %c, align 1, !dbg !3172
  %zext100 = zext i8 %49 to i32, !dbg !3172
  store i32 %zext100, ptr %taddr101, align 4
  %50 = insertvalue %any undef, ptr %taddr101, 0, !dbg !3172
  %51 = insertvalue %any %50, i64 ptrtoint (ptr @"$ct.uint" to i64), 1, !dbg !3172
  store %any %51, ptr %varargslots99, align 16, !dbg !3172
  %52 = insertvalue %"any[]" undef, ptr %varargslots99, 0, !dbg !3172
  %"$$temp102" = insertvalue %"any[]" %52, i64 1, 1, !dbg !3172
  store %"char[]" { ptr @.str.135, i64 6 }, ptr %indirectarg103, align 8
  store %"any[]" %"$$temp102", ptr %indirectarg104, align 8
  %53 = call i64 @std.core.dstring.DString.appendf(ptr %retparam, ptr %result, ptr align 8 %indirectarg103, ptr align 8 %indirectarg104), !dbg !3172
  br label %if.exit105, !dbg !3172

if.exit105:                                       ; preds = %if.else98, %if.then
  br label %switch.exit, !dbg !3172

switch.exit:                                      ; preds = %if.exit105, %assert_ok94, %assert_ok84, %assert_ok74, %assert_ok64, %assert_ok54, %assert_ok44, %assert_ok34, %assert_ok24, %assert_ok
  %54 = load i64, ptr %.anon, align 8, !dbg !3106
  %addnuw = add nuw i64 %54, 1, !dbg !3106
  store i64 %addnuw, ptr %.anon, align 8, !dbg !3106
  br label %loop.cond, !dbg !3106

loop.exit:                                        ; preds = %loop.cond
  %55 = load i8, ptr %strip_quotes, align 1, !dbg !3174
  %56 = trunc i8 %55 to i1, !dbg !3174
  br i1 %56, label %if.exit107, label %if.else106, !dbg !3174

if.else106:                                       ; preds = %loop.exit
  call void @std.core.dstring.DString.append_char(ptr %result, i8 34), !dbg !3174
  br label %if.exit107, !dbg !3174

if.exit107:                                       ; preds = %if.else106, %loop.exit
  %57 = load ptr, ptr %result, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg108, ptr align 8 %2, i32 16, i1 false)
  call void @std.core.dstring.DString.copy_str(ptr sret(%"char[]") align 8 %sretparam, ptr %57, ptr align 8 %indirectarg108), !dbg !3175
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %sretparam, i32 16, i1 false), !dbg !3175
  ret void, !dbg !3175

panic:                                            ; preds = %loop.body
  store i64 %12, ptr %taddr, align 8
  %58 = insertvalue %any undef, ptr %taddr, 0
  %59 = insertvalue %any %58, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %14, ptr %taddr5, align 8
  %60 = insertvalue %any undef, ptr %taddr5, 0
  %61 = insertvalue %any %60, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg6, align 8
  store %"char[]" { ptr @.file.123, i64 16 }, ptr %indirectarg7, align 8
  store %"char[]" { ptr @.func.125, i64 6 }, ptr %indirectarg8, align 8
  store %any %59, ptr %varargslots, align 16
  %ptradd9 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %61, ptr %ptradd9, align 16
  %62 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %62, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg10, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg6, ptr align 8 %indirectarg7, ptr align 8 %indirectarg8, i32 31, ptr align 8 %indirectarg10) #6, !dbg !3111
  unreachable, !dbg !3111
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.core.String.tescape(ptr noalias sret(%"char[]") align 8 %0, ptr align 8 %1, i8 zeroext %2) #0 comdat !dbg !3176 {
entry:
  %strip_quotes = alloca i8, align 1
  %sretparam = alloca %"char[]", align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %any, align 8
    #dbg_declare(ptr %1, !3179, !DIExpression(), !3180)
  store i8 %2, ptr %strip_quotes, align 1
    #dbg_declare(ptr %strip_quotes, !3181, !DIExpression(), !3180)
  %3 = call ptr @llvm.threadlocal.address.p0(ptr @std.core.mem.allocator.current_temp), !dbg !3180
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg, ptr align 8 %1, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg1, ptr align 8 %3, i32 16, i1 false)
  %4 = load i8, ptr %strip_quotes, align 1
  call void @std.core.String.escape(ptr sret(%"char[]") align 8 %sretparam, ptr align 8 %indirectarg, ptr align 8 %indirectarg1, i8 zeroext %4), !dbg !3180
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %sretparam, i32 16, i1 false), !dbg !3180
  ret void, !dbg !3180
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.core.String.unescape(ptr %0, ptr align 8 %1, ptr align 8 %2, i8 zeroext %3) #0 comdat !dbg !3182 {
entry:
  %allow_unquoted = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr2 = alloca i64, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg6 = alloca %"any[]", align 8
  %taddr10 = alloca i64, align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %indirectarg13 = alloca %"char[]", align 8
  %varargslots14 = alloca [1 x %any], align 16
  %indirectarg16 = alloca %"any[]", align 8
  %taddr20 = alloca i64, align 8
  %taddr21 = alloca i64, align 8
  %indirectarg22 = alloca %"char[]", align 8
  %indirectarg23 = alloca %"char[]", align 8
  %indirectarg24 = alloca %"char[]", align 8
  %varargslots25 = alloca [2 x %any], align 16
  %indirectarg28 = alloca %"any[]", align 8
  %taddr35 = alloca i64, align 8
  %taddr36 = alloca i64, align 8
  %indirectarg37 = alloca %"char[]", align 8
  %indirectarg38 = alloca %"char[]", align 8
  %indirectarg39 = alloca %"char[]", align 8
  %varargslots40 = alloca [2 x %any], align 16
  %indirectarg43 = alloca %"any[]", align 8
  %taddr48 = alloca i64, align 8
  %indirectarg49 = alloca %"char[]", align 8
  %indirectarg50 = alloca %"char[]", align 8
  %indirectarg51 = alloca %"char[]", align 8
  %varargslots52 = alloca [1 x %any], align 16
  %indirectarg54 = alloca %"any[]", align 8
  %taddr59 = alloca i64, align 8
  %taddr60 = alloca i64, align 8
  %indirectarg61 = alloca %"char[]", align 8
  %indirectarg62 = alloca %"char[]", align 8
  %indirectarg63 = alloca %"char[]", align 8
  %varargslots64 = alloca [2 x %any], align 16
  %indirectarg67 = alloca %"any[]", align 8
  %reterr = alloca i64, align 8
  %sretparam = alloca %"char[]", align 8
  %indirectarg74 = alloca %"char[]", align 8
  %indirectarg75 = alloca %any, align 8
  %result = alloca ptr, align 8
  %indirectarg78 = alloca %any, align 8
  %len = alloca i64, align 8
  %i = alloca i64, align 8
  %c = alloca i8, align 1
  %taddr84 = alloca i64, align 8
  %taddr85 = alloca i64, align 8
  %indirectarg86 = alloca %"char[]", align 8
  %indirectarg87 = alloca %"char[]", align 8
  %indirectarg88 = alloca %"char[]", align 8
  %varargslots89 = alloca [2 x %any], align 16
  %indirectarg92 = alloca %"any[]", align 8
  %escape_char = alloca i8, align 1
  %taddr105 = alloca i64, align 8
  %taddr106 = alloca i64, align 8
  %indirectarg107 = alloca %"char[]", align 8
  %indirectarg108 = alloca %"char[]", align 8
  %indirectarg109 = alloca %"char[]", align 8
  %varargslots110 = alloca [2 x %any], align 16
  %indirectarg113 = alloca %"any[]", align 8
  %switch = alloca i8, align 1
  %h1 = alloca i8, align 1
  %taddr136 = alloca i64, align 8
  %taddr137 = alloca i64, align 8
  %indirectarg138 = alloca %"char[]", align 8
  %indirectarg139 = alloca %"char[]", align 8
  %indirectarg140 = alloca %"char[]", align 8
  %varargslots141 = alloca [2 x %any], align 16
  %indirectarg144 = alloca %"any[]", align 8
  %h2 = alloca i8, align 1
  %taddr151 = alloca i64, align 8
  %taddr152 = alloca i64, align 8
  %indirectarg153 = alloca %"char[]", align 8
  %indirectarg154 = alloca %"char[]", align 8
  %indirectarg155 = alloca %"char[]", align 8
  %varargslots156 = alloca [2 x %any], align 16
  %indirectarg159 = alloca %"any[]", align 8
  %c162 = alloca i8, align 1
  %c163 = alloca i8, align 1
  %taddr166 = alloca i64, align 8
  %taddr167 = alloca i64, align 8
  %indirectarg168 = alloca %"char[]", align 8
  %indirectarg169 = alloca %"char[]", align 8
  %indirectarg170 = alloca %"char[]", align 8
  %varargslots171 = alloca [2 x %any], align 16
  %indirectarg174 = alloca %"any[]", align 8
  %c176 = alloca i8, align 1
  %c177 = alloca i8, align 1
  %taddr181 = alloca i64, align 8
  %taddr182 = alloca i64, align 8
  %indirectarg183 = alloca %"char[]", align 8
  %indirectarg184 = alloca %"char[]", align 8
  %indirectarg185 = alloca %"char[]", align 8
  %varargslots186 = alloca [2 x %any], align 16
  %indirectarg189 = alloca %"any[]", align 8
  %val198 = alloca i32, align 4
  %val226 = alloca i32, align 4
  %j = alloca i32, align 4
  %hex_char = alloca i8, align 1
  %taddr234 = alloca i64, align 8
  %taddr235 = alloca i64, align 8
  %indirectarg236 = alloca %"char[]", align 8
  %indirectarg237 = alloca %"char[]", align 8
  %indirectarg238 = alloca %"char[]", align 8
  %varargslots239 = alloca [2 x %any], align 16
  %indirectarg242 = alloca %"any[]", align 8
  %c245 = alloca i8, align 1
  %c246 = alloca i8, align 1
  %taddr250 = alloca i64, align 8
  %taddr251 = alloca i64, align 8
  %indirectarg252 = alloca %"char[]", align 8
  %indirectarg253 = alloca %"char[]", align 8
  %indirectarg254 = alloca %"char[]", align 8
  %varargslots255 = alloca [2 x %any], align 16
  %indirectarg258 = alloca %"any[]", align 8
  %indirectarg280 = alloca %"char[]", align 8
  %indirectarg281 = alloca %"char[]", align 8
  %indirectarg282 = alloca %"char[]", align 8
  %val290 = alloca i32, align 4
  %j291 = alloca i32, align 4
  %hex_char295 = alloca i8, align 1
  %taddr300 = alloca i64, align 8
  %taddr301 = alloca i64, align 8
  %indirectarg302 = alloca %"char[]", align 8
  %indirectarg303 = alloca %"char[]", align 8
  %indirectarg304 = alloca %"char[]", align 8
  %varargslots305 = alloca [2 x %any], align 16
  %indirectarg308 = alloca %"any[]", align 8
  %c311 = alloca i8, align 1
  %c312 = alloca i8, align 1
  %taddr316 = alloca i64, align 8
  %taddr317 = alloca i64, align 8
  %indirectarg318 = alloca %"char[]", align 8
  %indirectarg319 = alloca %"char[]", align 8
  %indirectarg320 = alloca %"char[]", align 8
  %varargslots321 = alloca [2 x %any], align 16
  %indirectarg324 = alloca %"any[]", align 8
  %indirectarg348 = alloca %"char[]", align 8
  %indirectarg349 = alloca %"char[]", align 8
  %indirectarg350 = alloca %"char[]", align 8
  %reterr354 = alloca i64, align 8
  %sretparam355 = alloca %"char[]", align 8
  %indirectarg356 = alloca %any, align 8
    #dbg_declare(ptr %1, !3185, !DIExpression(), !3186)
    #dbg_declare(ptr %2, !3187, !DIExpression(), !3186)
  store i8 %3, ptr %allow_unquoted, align 1
    #dbg_declare(ptr %allow_unquoted, !3188, !DIExpression(), !3186)
  %ptradd = getelementptr inbounds i8, ptr %1, i64 8, !dbg !3189
  %4 = load i64, ptr %ptradd, align 8, !dbg !3189
  %le = icmp ule i64 2, %4, !dbg !3189
  br i1 %le, label %and.rhs, label %and.phi, !dbg !3189

and.rhs:                                          ; preds = %entry
  %ptradd1 = getelementptr inbounds i8, ptr %1, i64 8, !dbg !3189
  %5 = load i64, ptr %ptradd1, align 8, !dbg !3189
  %6 = load ptr, ptr %1, align 8, !dbg !3189
  %ge = icmp sge i64 0, %5, !dbg !3189
  %7 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !3189
  br i1 %7, label %panic, label %checkok, !dbg !3189

checkok:                                          ; preds = %and.rhs
  %8 = load i8, ptr %6, align 1, !dbg !3189
  %eq = icmp eq i8 %8, 34, !dbg !3189
  br label %and.phi, !dbg !3189

and.phi:                                          ; preds = %checkok, %entry
  %val = phi i1 [ false, %entry ], [ %eq, %checkok ], !dbg !3189
  br i1 %val, label %and.rhs7, label %and.phi32, !dbg !3189

and.rhs7:                                         ; preds = %and.phi
  %ptradd8 = getelementptr inbounds i8, ptr %1, i64 8, !dbg !3189
  %9 = load i64, ptr %ptradd8, align 8, !dbg !3189
  %10 = load ptr, ptr %1, align 8, !dbg !3189
  %11 = sub nuw i64 %9, 1, !dbg !3189
  %lt = icmp slt i64 %11, 0, !dbg !3189
  %12 = call i1 @llvm.expect.i1(i1 %lt, i1 false), !dbg !3189
  br i1 %12, label %panic9, label %checkok17, !dbg !3189

checkok17:                                        ; preds = %and.rhs7
  %ge18 = icmp sge i64 %11, %9, !dbg !3189
  %13 = call i1 @llvm.expect.i1(i1 %ge18, i1 false), !dbg !3189
  br i1 %13, label %panic19, label %checkok29, !dbg !3189

checkok29:                                        ; preds = %checkok17
  %ptradd30 = getelementptr inbounds i8, ptr %10, i64 %11, !dbg !3189
  %14 = load i8, ptr %ptradd30, align 1, !dbg !3189
  %eq31 = icmp eq i8 %14, 34, !dbg !3189
  br label %and.phi32, !dbg !3189

and.phi32:                                        ; preds = %checkok29, %and.phi
  %val33 = phi i1 [ false, %and.phi ], [ %eq31, %checkok29 ], !dbg !3189
  br i1 %val33, label %if.then, label %if.else, !dbg !3189

if.then:                                          ; preds = %and.phi32
  %15 = load %"char[]", ptr %1, align 8, !dbg !3190
  %16 = extractvalue %"char[]" %15, 0, !dbg !3190
  %17 = extractvalue %"char[]" %15, 1, !dbg !3190
  %gt = icmp sgt i64 1, %17, !dbg !3190
  %18 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !3190
  br i1 %18, label %panic34, label %checkok44, !dbg !3190

checkok44:                                        ; preds = %if.then
  %sub = sub i64 %17, 2, !dbg !3190
  %add = add i64 1, %sub, !dbg !3190
  %gt45 = icmp sgt i64 1, %add, !dbg !3190
  %sub46 = sub i64 %add, 1, !dbg !3190
  %19 = call i1 @llvm.expect.i1(i1 %gt45, i1 false), !dbg !3190
  br i1 %19, label %panic47, label %checkok55, !dbg !3190

checkok55:                                        ; preds = %checkok44
  %lt56 = icmp slt i64 %17, %add, !dbg !3190
  %sub57 = sub i64 %add, 1, !dbg !3190
  %20 = call i1 @llvm.expect.i1(i1 %lt56, i1 false), !dbg !3190
  br i1 %20, label %panic58, label %checkok68, !dbg !3190

checkok68:                                        ; preds = %checkok55
  %size = sub i64 %add, 1, !dbg !3190
  %ptradd69 = getelementptr inbounds i8, ptr %16, i64 1, !dbg !3190
  %21 = insertvalue %"char[]" undef, ptr %ptradd69, 0, !dbg !3190
  %22 = insertvalue %"char[]" %21, i64 %size, 1, !dbg !3190
  store %"char[]" %22, ptr %1, align 8, !dbg !3190
  br label %if.exit71, !dbg !3190

if.else:                                          ; preds = %and.phi32
  %23 = load i8, ptr %allow_unquoted, align 1, !dbg !3192
  %24 = trunc i8 %23 to i1, !dbg !3192
  br i1 %24, label %if.exit, label %if.else70, !dbg !3192

if.else70:                                        ; preds = %if.else
  ret i64 ptrtoint (ptr @std.core.string.UNTERMINATED_STRING to i64), !dbg !3192

if.exit:                                          ; preds = %if.else
  br label %if.exit71, !dbg !3192

if.exit71:                                        ; preds = %if.exit, %checkok68
  %ptradd72 = getelementptr inbounds i8, ptr %1, i64 8, !dbg !3193
  %25 = load i64, ptr %ptradd72, align 8, !dbg !3193
  %i2nb = icmp eq i64 %25, 0, !dbg !3193
  br i1 %i2nb, label %if.then73, label %if.exit76, !dbg !3193

if.then73:                                        ; preds = %if.exit71
  store %"char[]" { ptr @.emptystr, i64 0 }, ptr %indirectarg74, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg75, ptr align 8 %2, i32 16, i1 false)
  call void @std.core.String.copy(ptr sret(%"char[]") align 8 %sretparam, ptr align 8 %indirectarg74, ptr align 8 %indirectarg75), !dbg !3194
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %sretparam, i32 16, i1 false), !dbg !3194
  ret i64 0, !dbg !3194

if.exit76:                                        ; preds = %if.exit71
    #dbg_declare(ptr %result, !3196, !DIExpression(), !3197)
  %ptradd77 = getelementptr inbounds i8, ptr %1, i64 8, !dbg !3197
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg78, ptr align 8 %2, i32 16, i1 false)
  %26 = load i64, ptr %ptradd77, align 8
  %27 = call ptr @std.core.dstring.new_with_capacity(ptr align 8 %indirectarg78, i64 %26), !dbg !3197
  store ptr %27, ptr %result, align 8, !dbg !3197
    #dbg_declare(ptr %len, !3198, !DIExpression(), !3199)
  %ptradd79 = getelementptr inbounds i8, ptr %1, i64 8, !dbg !3199
  %28 = load i64, ptr %ptradd79, align 8, !dbg !3199
  store i64 %28, ptr %len, align 8, !dbg !3199
    #dbg_declare(ptr %i, !3200, !DIExpression(), !3202)
  store i64 0, ptr %i, align 8, !dbg !3202
  br label %loop.cond, !dbg !3202

loop.cond:                                        ; preds = %loop.inc, %if.exit76
  %29 = load i64, ptr %i, align 8, !dbg !3202
  %30 = load i64, ptr %len, align 8, !dbg !3202
  %lt80 = icmp ult i64 %29, %30, !dbg !3202
  br i1 %lt80, label %loop.body, label %loop.exit353, !dbg !3202

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %c, !3203, !DIExpression(), !3205)
  %ptradd81 = getelementptr inbounds i8, ptr %1, i64 8, !dbg !3205
  %31 = load i64, ptr %ptradd81, align 8, !dbg !3205
  %32 = load ptr, ptr %1, align 8, !dbg !3205
  %33 = load i64, ptr %i, align 8, !dbg !3205
  %ge82 = icmp uge i64 %33, %31, !dbg !3205
  %34 = call i1 @llvm.expect.i1(i1 %ge82, i1 false), !dbg !3205
  br i1 %34, label %panic83, label %checkok93, !dbg !3205

checkok93:                                        ; preds = %loop.body
  %ptradd94 = getelementptr inbounds i8, ptr %32, i64 %33, !dbg !3205
  %35 = load i8, ptr %ptradd94, align 1, !dbg !3205
  store i8 %35, ptr %c, align 1, !dbg !3205
  %36 = load i8, ptr %c, align 1, !dbg !3206
  %neq = icmp ne i8 %36, 92, !dbg !3206
  br i1 %neq, label %if.then95, label %if.exit96, !dbg !3206

if.then95:                                        ; preds = %checkok93
  %37 = load i8, ptr %c, align 1, !dbg !3207
  call void @std.core.dstring.DString.append_char(ptr %result, i8 %37), !dbg !3207
  br label %loop.inc, !dbg !3209

if.exit96:                                        ; preds = %checkok93
  %38 = load i64, ptr %i, align 8, !dbg !3210
  %add97 = add i64 %38, 1, !dbg !3210
  %39 = load i64, ptr %len, align 8, !dbg !3210
  %ge98 = icmp sge i64 %add97, %39, !dbg !3210
  %check = icmp sge i64 %39, 0, !dbg !3210
  %siui-ge = and i1 %check, %ge98, !dbg !3210
  br i1 %siui-ge, label %if.then99, label %if.exit100, !dbg !3210

if.then99:                                        ; preds = %if.exit96
  ret i64 ptrtoint (ptr @std.core.string.INVALID_ESCAPE_SEQUENCE to i64), !dbg !3210

if.exit100:                                       ; preds = %if.exit96
    #dbg_declare(ptr %escape_char, !3211, !DIExpression(), !3212)
  %ptradd101 = getelementptr inbounds i8, ptr %1, i64 8, !dbg !3212
  %40 = load i64, ptr %ptradd101, align 8, !dbg !3212
  %41 = load ptr, ptr %1, align 8, !dbg !3212
  %42 = load i64, ptr %i, align 8, !dbg !3212
  %add102 = add i64 %42, 1, !dbg !3212
  store i64 %add102, ptr %i, align 8, !dbg !3212
  %ge103 = icmp uge i64 %add102, %40, !dbg !3212
  %43 = call i1 @llvm.expect.i1(i1 %ge103, i1 false), !dbg !3212
  br i1 %43, label %panic104, label %checkok114, !dbg !3212

checkok114:                                       ; preds = %if.exit100
  %ptradd115 = getelementptr inbounds i8, ptr %41, i64 %add102, !dbg !3212
  %44 = load i8, ptr %ptradd115, align 1, !dbg !3212
  store i8 %44, ptr %escape_char, align 1, !dbg !3212
  %45 = load i8, ptr %escape_char, align 1
  store i8 %45, ptr %switch, align 1
  br label %switch.entry

switch.entry:                                     ; preds = %checkok114
  %46 = load i8, ptr %switch, align 1
  switch i8 %46, label %switch.default [
    i8 34, label %switch.case
    i8 92, label %switch.case116
    i8 47, label %switch.case117
    i8 98, label %switch.case118
    i8 102, label %switch.case119
    i8 110, label %switch.case120
    i8 114, label %switch.case121
    i8 116, label %switch.case122
    i8 118, label %switch.case123
    i8 48, label %switch.case124
    i8 120, label %switch.case125
    i8 117, label %switch.case219
    i8 85, label %switch.case283
  ]

switch.case:                                      ; preds = %switch.entry
  call void @std.core.dstring.DString.append_char(ptr %result, i8 34), !dbg !3213
  br label %switch.exit, !dbg !3213

switch.case116:                                   ; preds = %switch.entry
  call void @std.core.dstring.DString.append_char(ptr %result, i8 92), !dbg !3216
  br label %switch.exit, !dbg !3216

switch.case117:                                   ; preds = %switch.entry
  call void @std.core.dstring.DString.append_char(ptr %result, i8 47), !dbg !3218
  br label %switch.exit, !dbg !3218

switch.case118:                                   ; preds = %switch.entry
  call void @std.core.dstring.DString.append_char(ptr %result, i8 8), !dbg !3220
  br label %switch.exit, !dbg !3220

switch.case119:                                   ; preds = %switch.entry
  call void @std.core.dstring.DString.append_char(ptr %result, i8 12), !dbg !3222
  br label %switch.exit, !dbg !3222

switch.case120:                                   ; preds = %switch.entry
  call void @std.core.dstring.DString.append_char(ptr %result, i8 10), !dbg !3224
  br label %switch.exit, !dbg !3224

switch.case121:                                   ; preds = %switch.entry
  call void @std.core.dstring.DString.append_char(ptr %result, i8 13), !dbg !3226
  br label %switch.exit, !dbg !3226

switch.case122:                                   ; preds = %switch.entry
  call void @std.core.dstring.DString.append_char(ptr %result, i8 9), !dbg !3228
  br label %switch.exit, !dbg !3228

switch.case123:                                   ; preds = %switch.entry
  call void @std.core.dstring.DString.append_char(ptr %result, i8 11), !dbg !3230
  br label %switch.exit, !dbg !3230

switch.case124:                                   ; preds = %switch.entry
  call void @std.core.dstring.DString.append_char(ptr %result, i8 0), !dbg !3232
  br label %switch.exit, !dbg !3232

switch.case125:                                   ; preds = %switch.entry
  %47 = load i64, ptr %i, align 8, !dbg !3234
  %add126 = add i64 %47, 2, !dbg !3234
  %48 = load i64, ptr %len, align 8, !dbg !3234
  %ge127 = icmp sge i64 %add126, %48, !dbg !3234
  %check128 = icmp sge i64 %48, 0, !dbg !3234
  %siui-ge129 = and i1 %check128, %ge127, !dbg !3234
  br i1 %siui-ge129, label %if.then130, label %if.exit131, !dbg !3234

if.then130:                                       ; preds = %switch.case125
  ret i64 ptrtoint (ptr @std.core.string.INVALID_HEX_ESCAPE to i64), !dbg !3234

if.exit131:                                       ; preds = %switch.case125
    #dbg_declare(ptr %h1, !3236, !DIExpression(), !3237)
  %ptradd132 = getelementptr inbounds i8, ptr %1, i64 8, !dbg !3237
  %49 = load i64, ptr %ptradd132, align 8, !dbg !3237
  %50 = load ptr, ptr %1, align 8, !dbg !3237
  %51 = load i64, ptr %i, align 8, !dbg !3237
  %add133 = add i64 %51, 1, !dbg !3237
  store i64 %add133, ptr %i, align 8, !dbg !3237
  %ge134 = icmp uge i64 %add133, %49, !dbg !3237
  %52 = call i1 @llvm.expect.i1(i1 %ge134, i1 false), !dbg !3237
  br i1 %52, label %panic135, label %checkok145, !dbg !3237

checkok145:                                       ; preds = %if.exit131
  %ptradd146 = getelementptr inbounds i8, ptr %50, i64 %add133, !dbg !3237
  %53 = load i8, ptr %ptradd146, align 1, !dbg !3237
  store i8 %53, ptr %h1, align 1, !dbg !3237
    #dbg_declare(ptr %h2, !3238, !DIExpression(), !3239)
  %ptradd147 = getelementptr inbounds i8, ptr %1, i64 8, !dbg !3239
  %54 = load i64, ptr %ptradd147, align 8, !dbg !3239
  %55 = load ptr, ptr %1, align 8, !dbg !3239
  %56 = load i64, ptr %i, align 8, !dbg !3239
  %add148 = add i64 %56, 1, !dbg !3239
  store i64 %add148, ptr %i, align 8, !dbg !3239
  %ge149 = icmp uge i64 %add148, %54, !dbg !3239
  %57 = call i1 @llvm.expect.i1(i1 %ge149, i1 false), !dbg !3239
  br i1 %57, label %panic150, label %checkok160, !dbg !3239

checkok160:                                       ; preds = %checkok145
  %ptradd161 = getelementptr inbounds i8, ptr %55, i64 %add148, !dbg !3239
  %58 = load i8, ptr %ptradd161, align 1, !dbg !3239
  store i8 %58, ptr %h2, align 1, !dbg !3239
  %59 = load i8, ptr %h1, align 1
  store i8 %59, ptr %c162, align 1
  %60 = load i8, ptr %c162, align 1
  store i8 %60, ptr %c163, align 1
  %61 = load i8, ptr %c163, align 1, !dbg !3240
  %zext = zext i8 %61 to i64, !dbg !3240
  %ge164 = icmp uge i64 %zext, 256, !dbg !3240
  %62 = call i1 @llvm.expect.i1(i1 %ge164, i1 false), !dbg !3240
  br i1 %62, label %panic165, label %checkok175, !dbg !3240

checkok175:                                       ; preds = %checkok160
  %ptroffset = getelementptr inbounds [2 x i8], ptr @std.core.ascii.ASCII_LOOKUP, i64 %zext, !dbg !3240
  %63 = load i16, ptr %ptroffset, align 2, !dbg !3240
  %lshrl = lshr i16 %63, 4, !dbg !3240
  %64 = and i16 1, %lshrl, !dbg !3240
  %trunc = trunc i16 %64 to i8, !dbg !3240
  %65 = trunc i8 %trunc to i1, !dbg !3240
  %not = xor i1 %65, true, !dbg !3240
  br i1 %not, label %or.phi, label %or.rhs, !dbg !3240

or.rhs:                                           ; preds = %checkok175
  %66 = load i8, ptr %h2, align 1
  store i8 %66, ptr %c176, align 1
  %67 = load i8, ptr %c176, align 1
  store i8 %67, ptr %c177, align 1
  %68 = load i8, ptr %c177, align 1, !dbg !3245
  %zext178 = zext i8 %68 to i64, !dbg !3245
  %ge179 = icmp uge i64 %zext178, 256, !dbg !3245
  %69 = call i1 @llvm.expect.i1(i1 %ge179, i1 false), !dbg !3245
  br i1 %69, label %panic180, label %checkok190, !dbg !3245

checkok190:                                       ; preds = %or.rhs
  %ptroffset191 = getelementptr inbounds [2 x i8], ptr @std.core.ascii.ASCII_LOOKUP, i64 %zext178, !dbg !3245
  %70 = load i16, ptr %ptroffset191, align 2, !dbg !3245
  %lshrl192 = lshr i16 %70, 4, !dbg !3245
  %71 = and i16 1, %lshrl192, !dbg !3245
  %trunc193 = trunc i16 %71 to i8, !dbg !3245
  %72 = trunc i8 %trunc193 to i1, !dbg !3245
  %not194 = xor i1 %72, true, !dbg !3245
  br label %or.phi, !dbg !3245

or.phi:                                           ; preds = %checkok190, %checkok175
  %val195 = phi i1 [ true, %checkok175 ], [ %not194, %checkok190 ], !dbg !3245
  br i1 %val195, label %if.then196, label %if.exit197, !dbg !3245

if.then196:                                       ; preds = %or.phi
  ret i64 ptrtoint (ptr @std.core.string.INVALID_HEX_ESCAPE to i64), !dbg !3244

if.exit197:                                       ; preds = %or.phi
    #dbg_declare(ptr %val198, !3249, !DIExpression(), !3250)
  %73 = load i8, ptr %h1, align 1, !dbg !3250
  %gt199 = icmp ugt i8 %73, 57, !dbg !3250
  br i1 %gt199, label %cond.lhs, label %cond.rhs, !dbg !3250

cond.lhs:                                         ; preds = %if.exit197
  %74 = load i8, ptr %h1, align 1, !dbg !3250
  %zext200 = zext i8 %74 to i32, !dbg !3250
  %or = or i32 %zext200, 32, !dbg !3250
  %sub201 = sub i32 %or, 97, !dbg !3250
  %add202 = add i32 %sub201, 10, !dbg !3250
  br label %cond.phi, !dbg !3250

cond.rhs:                                         ; preds = %if.exit197
  %75 = load i8, ptr %h1, align 1, !dbg !3250
  %zext203 = zext i8 %75 to i32, !dbg !3250
  %sub204 = sub i32 %zext203, 48, !dbg !3250
  br label %cond.phi, !dbg !3250

cond.phi:                                         ; preds = %cond.rhs, %cond.lhs
  %val205 = phi i32 [ %add202, %cond.lhs ], [ %sub204, %cond.rhs ], !dbg !3250
  store i32 %val205, ptr %val198, align 4, !dbg !3250
  %76 = load i32, ptr %val198, align 4, !dbg !3251
  %shl = shl i32 %76, 4, !dbg !3251
  %77 = freeze i32 %shl, !dbg !3251
  store i32 %77, ptr %val198, align 4, !dbg !3251
  %78 = load i32, ptr %val198, align 4, !dbg !3252
  %79 = load i8, ptr %h2, align 1, !dbg !3252
  %gt206 = icmp ugt i8 %79, 57, !dbg !3252
  br i1 %gt206, label %cond.lhs207, label %cond.rhs212, !dbg !3252

cond.lhs207:                                      ; preds = %cond.phi
  %80 = load i8, ptr %h2, align 1, !dbg !3252
  %zext208 = zext i8 %80 to i32, !dbg !3252
  %or209 = or i32 %zext208, 32, !dbg !3252
  %sub210 = sub i32 %or209, 97, !dbg !3252
  %add211 = add i32 %sub210, 10, !dbg !3252
  br label %cond.phi215, !dbg !3252

cond.rhs212:                                      ; preds = %cond.phi
  %81 = load i8, ptr %h2, align 1, !dbg !3252
  %zext213 = zext i8 %81 to i32, !dbg !3252
  %sub214 = sub i32 %zext213, 48, !dbg !3252
  br label %cond.phi215, !dbg !3252

cond.phi215:                                      ; preds = %cond.rhs212, %cond.lhs207
  %val216 = phi i32 [ %add211, %cond.lhs207 ], [ %sub214, %cond.rhs212 ], !dbg !3252
  %add217 = add i32 %78, %val216, !dbg !3252
  store i32 %add217, ptr %val198, align 4, !dbg !3252
  %82 = load i32, ptr %val198, align 4, !dbg !3253
  %trunc218 = trunc i32 %82 to i8, !dbg !3253
  call void @std.core.dstring.DString.append_char(ptr %result, i8 %trunc218), !dbg !3253
  br label %switch.exit, !dbg !3253

switch.case219:                                   ; preds = %switch.entry
  %83 = load i64, ptr %i, align 8, !dbg !3254
  %add220 = add i64 %83, 4, !dbg !3254
  %84 = load i64, ptr %len, align 8, !dbg !3254
  %ge221 = icmp sge i64 %add220, %84, !dbg !3254
  %check222 = icmp sge i64 %84, 0, !dbg !3254
  %siui-ge223 = and i1 %check222, %ge221, !dbg !3254
  br i1 %siui-ge223, label %if.then224, label %if.exit225, !dbg !3254

if.then224:                                       ; preds = %switch.case219
  ret i64 ptrtoint (ptr @std.core.string.INVALID_UNICODE_ESCAPE to i64), !dbg !3254

if.exit225:                                       ; preds = %switch.case219
    #dbg_declare(ptr %val226, !3256, !DIExpression(), !3257)
  store i32 0, ptr %val226, align 4, !dbg !3257
    #dbg_declare(ptr %j, !3258, !DIExpression(), !3260)
  store i32 0, ptr %j, align 4, !dbg !3260
  br label %loop.cond227, !dbg !3260

loop.cond227:                                     ; preds = %cond.phi275, %if.exit225
  %85 = load i32, ptr %j, align 4, !dbg !3260
  %lt228 = icmp slt i32 %85, 4, !dbg !3260
  br i1 %lt228, label %loop.body229, label %loop.exit, !dbg !3260

loop.body229:                                     ; preds = %loop.cond227
    #dbg_declare(ptr %hex_char, !3261, !DIExpression(), !3263)
  %ptradd230 = getelementptr inbounds i8, ptr %1, i64 8, !dbg !3263
  %86 = load i64, ptr %ptradd230, align 8, !dbg !3263
  %87 = load ptr, ptr %1, align 8, !dbg !3263
  %88 = load i64, ptr %i, align 8, !dbg !3263
  %add231 = add i64 %88, 1, !dbg !3263
  store i64 %add231, ptr %i, align 8, !dbg !3263
  %ge232 = icmp uge i64 %add231, %86, !dbg !3263
  %89 = call i1 @llvm.expect.i1(i1 %ge232, i1 false), !dbg !3263
  br i1 %89, label %panic233, label %checkok243, !dbg !3263

checkok243:                                       ; preds = %loop.body229
  %ptradd244 = getelementptr inbounds i8, ptr %87, i64 %add231, !dbg !3263
  %90 = load i8, ptr %ptradd244, align 1, !dbg !3263
  store i8 %90, ptr %hex_char, align 1, !dbg !3263
  %91 = load i8, ptr %hex_char, align 1
  store i8 %91, ptr %c245, align 1
  %92 = load i8, ptr %c245, align 1
  store i8 %92, ptr %c246, align 1
  %93 = load i8, ptr %c246, align 1, !dbg !3264
  %zext247 = zext i8 %93 to i64, !dbg !3264
  %ge248 = icmp uge i64 %zext247, 256, !dbg !3264
  %94 = call i1 @llvm.expect.i1(i1 %ge248, i1 false), !dbg !3264
  br i1 %94, label %panic249, label %checkok259, !dbg !3264

checkok259:                                       ; preds = %checkok243
  %ptroffset260 = getelementptr inbounds [2 x i8], ptr @std.core.ascii.ASCII_LOOKUP, i64 %zext247, !dbg !3264
  %95 = load i16, ptr %ptroffset260, align 2, !dbg !3264
  %lshrl261 = lshr i16 %95, 4, !dbg !3264
  %96 = and i16 1, %lshrl261, !dbg !3264
  %trunc262 = trunc i16 %96 to i8, !dbg !3264
  %97 = trunc i8 %trunc262 to i1, !dbg !3264
  br i1 %97, label %if.exit264, label %if.else263, !dbg !3264

if.else263:                                       ; preds = %checkok259
  ret i64 ptrtoint (ptr @std.core.string.INVALID_UNICODE_ESCAPE to i64), !dbg !3268

if.exit264:                                       ; preds = %checkok259
  %98 = load i32, ptr %val226, align 4, !dbg !3269
  %shl265 = shl i32 %98, 4, !dbg !3269
  %99 = freeze i32 %shl265, !dbg !3269
  %100 = load i8, ptr %hex_char, align 1, !dbg !3269
  %gt266 = icmp ugt i8 %100, 57, !dbg !3269
  br i1 %gt266, label %cond.lhs267, label %cond.rhs272, !dbg !3269

cond.lhs267:                                      ; preds = %if.exit264
  %101 = load i8, ptr %hex_char, align 1, !dbg !3269
  %zext268 = zext i8 %101 to i32, !dbg !3269
  %or269 = or i32 %zext268, 32, !dbg !3269
  %sub270 = sub i32 %or269, 97, !dbg !3269
  %add271 = add i32 %sub270, 10, !dbg !3269
  br label %cond.phi275, !dbg !3269

cond.rhs272:                                      ; preds = %if.exit264
  %102 = load i8, ptr %hex_char, align 1, !dbg !3269
  %zext273 = zext i8 %102 to i32, !dbg !3269
  %sub274 = sub i32 %zext273, 48, !dbg !3269
  br label %cond.phi275, !dbg !3269

cond.phi275:                                      ; preds = %cond.rhs272, %cond.lhs267
  %val276 = phi i32 [ %add271, %cond.lhs267 ], [ %sub274, %cond.rhs272 ], !dbg !3269
  %add277 = add i32 %99, %val276, !dbg !3269
  store i32 %add277, ptr %val226, align 4, !dbg !3269
  %103 = load i32, ptr %j, align 4, !dbg !3260
  %add278 = add i32 %103, 1, !dbg !3260
  store i32 %add278, ptr %j, align 4, !dbg !3260
  br label %loop.cond227, !dbg !3260

loop.exit:                                        ; preds = %loop.cond227
  %104 = load i32, ptr %val226, align 4, !dbg !3270
  %le279 = icmp ule i32 %104, 1114111, !dbg !3270
  br i1 %le279, label %assert_ok, label %assert_fail, !dbg !3270

assert_fail:                                      ; preds = %loop.exit
  store %"char[]" { ptr @.panic_msg.137, i64 34 }, ptr %indirectarg280, align 8
  store %"char[]" { ptr @.file.123, i64 16 }, ptr %indirectarg281, align 8
  store %"char[]" { ptr @.func.136, i64 8 }, ptr %indirectarg282, align 8
  %105 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %105(ptr align 8 %indirectarg280, ptr align 8 %indirectarg281, ptr align 8 %indirectarg282, i32 180) #6, !dbg !3270
  unreachable, !dbg !3270

assert_ok:                                        ; preds = %loop.exit
  %106 = call i64 @std.core.dstring.DString.append_char32(ptr %result, i32 %104), !dbg !3270
  br label %switch.exit, !dbg !3270

switch.case283:                                   ; preds = %switch.entry
  %107 = load i64, ptr %i, align 8, !dbg !3271
  %add284 = add i64 %107, 8, !dbg !3271
  %108 = load i64, ptr %len, align 8, !dbg !3271
  %ge285 = icmp sge i64 %add284, %108, !dbg !3271
  %check286 = icmp sge i64 %108, 0, !dbg !3271
  %siui-ge287 = and i1 %check286, %ge285, !dbg !3271
  br i1 %siui-ge287, label %if.then288, label %if.exit289, !dbg !3271

if.then288:                                       ; preds = %switch.case283
  ret i64 ptrtoint (ptr @std.core.string.INVALID_UNICODE_ESCAPE to i64), !dbg !3271

if.exit289:                                       ; preds = %switch.case283
    #dbg_declare(ptr %val290, !3273, !DIExpression(), !3274)
  store i32 0, ptr %val290, align 4, !dbg !3274
    #dbg_declare(ptr %j291, !3275, !DIExpression(), !3277)
  store i32 0, ptr %j291, align 4, !dbg !3277
  br label %loop.cond292, !dbg !3277

loop.cond292:                                     ; preds = %cond.phi341, %if.exit289
  %109 = load i32, ptr %j291, align 4, !dbg !3277
  %lt293 = icmp slt i32 %109, 8, !dbg !3277
  br i1 %lt293, label %loop.body294, label %loop.exit345, !dbg !3277

loop.body294:                                     ; preds = %loop.cond292
    #dbg_declare(ptr %hex_char295, !3278, !DIExpression(), !3280)
  %ptradd296 = getelementptr inbounds i8, ptr %1, i64 8, !dbg !3280
  %110 = load i64, ptr %ptradd296, align 8, !dbg !3280
  %111 = load ptr, ptr %1, align 8, !dbg !3280
  %112 = load i64, ptr %i, align 8, !dbg !3280
  %add297 = add i64 %112, 1, !dbg !3280
  store i64 %add297, ptr %i, align 8, !dbg !3280
  %ge298 = icmp uge i64 %add297, %110, !dbg !3280
  %113 = call i1 @llvm.expect.i1(i1 %ge298, i1 false), !dbg !3280
  br i1 %113, label %panic299, label %checkok309, !dbg !3280

checkok309:                                       ; preds = %loop.body294
  %ptradd310 = getelementptr inbounds i8, ptr %111, i64 %add297, !dbg !3280
  %114 = load i8, ptr %ptradd310, align 1, !dbg !3280
  store i8 %114, ptr %hex_char295, align 1, !dbg !3280
  %115 = load i8, ptr %hex_char295, align 1
  store i8 %115, ptr %c311, align 1
  %116 = load i8, ptr %c311, align 1
  store i8 %116, ptr %c312, align 1
  %117 = load i8, ptr %c312, align 1, !dbg !3281
  %zext313 = zext i8 %117 to i64, !dbg !3281
  %ge314 = icmp uge i64 %zext313, 256, !dbg !3281
  %118 = call i1 @llvm.expect.i1(i1 %ge314, i1 false), !dbg !3281
  br i1 %118, label %panic315, label %checkok325, !dbg !3281

checkok325:                                       ; preds = %checkok309
  %ptroffset326 = getelementptr inbounds [2 x i8], ptr @std.core.ascii.ASCII_LOOKUP, i64 %zext313, !dbg !3281
  %119 = load i16, ptr %ptroffset326, align 2, !dbg !3281
  %lshrl327 = lshr i16 %119, 4, !dbg !3281
  %120 = and i16 1, %lshrl327, !dbg !3281
  %trunc328 = trunc i16 %120 to i8, !dbg !3281
  %121 = trunc i8 %trunc328 to i1, !dbg !3281
  br i1 %121, label %if.exit330, label %if.else329, !dbg !3281

if.else329:                                       ; preds = %checkok325
  ret i64 ptrtoint (ptr @std.core.string.INVALID_UNICODE_ESCAPE to i64), !dbg !3285

if.exit330:                                       ; preds = %checkok325
  %122 = load i32, ptr %val290, align 4, !dbg !3286
  %shl331 = shl i32 %122, 4, !dbg !3286
  %123 = freeze i32 %shl331, !dbg !3286
  %124 = load i8, ptr %hex_char295, align 1, !dbg !3286
  %gt332 = icmp ugt i8 %124, 57, !dbg !3286
  br i1 %gt332, label %cond.lhs333, label %cond.rhs338, !dbg !3286

cond.lhs333:                                      ; preds = %if.exit330
  %125 = load i8, ptr %hex_char295, align 1, !dbg !3286
  %zext334 = zext i8 %125 to i32, !dbg !3286
  %or335 = or i32 %zext334, 32, !dbg !3286
  %sub336 = sub i32 %or335, 97, !dbg !3286
  %add337 = add i32 %sub336, 10, !dbg !3286
  br label %cond.phi341, !dbg !3286

cond.rhs338:                                      ; preds = %if.exit330
  %126 = load i8, ptr %hex_char295, align 1, !dbg !3286
  %zext339 = zext i8 %126 to i32, !dbg !3286
  %sub340 = sub i32 %zext339, 48, !dbg !3286
  br label %cond.phi341, !dbg !3286

cond.phi341:                                      ; preds = %cond.rhs338, %cond.lhs333
  %val342 = phi i32 [ %add337, %cond.lhs333 ], [ %sub340, %cond.rhs338 ], !dbg !3286
  %add343 = add i32 %123, %val342, !dbg !3286
  store i32 %add343, ptr %val290, align 4, !dbg !3286
  %127 = load i32, ptr %j291, align 4, !dbg !3277
  %add344 = add i32 %127, 1, !dbg !3277
  store i32 %add344, ptr %j291, align 4, !dbg !3277
  br label %loop.cond292, !dbg !3277

loop.exit345:                                     ; preds = %loop.cond292
  %128 = load i32, ptr %val290, align 4, !dbg !3287
  %le346 = icmp ule i32 %128, 1114111, !dbg !3287
  br i1 %le346, label %assert_ok351, label %assert_fail347, !dbg !3287

assert_fail347:                                   ; preds = %loop.exit345
  store %"char[]" { ptr @.panic_msg.137, i64 34 }, ptr %indirectarg348, align 8
  store %"char[]" { ptr @.file.123, i64 16 }, ptr %indirectarg349, align 8
  store %"char[]" { ptr @.func.136, i64 8 }, ptr %indirectarg350, align 8
  %129 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %129(ptr align 8 %indirectarg348, ptr align 8 %indirectarg349, ptr align 8 %indirectarg350, i32 191) #6, !dbg !3287
  unreachable, !dbg !3287

assert_ok351:                                     ; preds = %loop.exit345
  %130 = call i64 @std.core.dstring.DString.append_char32(ptr %result, i32 %128), !dbg !3287
  br label %switch.exit, !dbg !3287

switch.default:                                   ; preds = %switch.entry
  ret i64 ptrtoint (ptr @std.core.string.INVALID_ESCAPE_SEQUENCE to i64), !dbg !3288

switch.exit:                                      ; preds = %assert_ok351, %assert_ok, %cond.phi215, %switch.case124, %switch.case123, %switch.case122, %switch.case121, %switch.case120, %switch.case119, %switch.case118, %switch.case117, %switch.case116, %switch.case
  br label %loop.inc, !dbg !3288

loop.inc:                                         ; preds = %switch.exit, %if.then95
  %131 = load i64, ptr %i, align 8, !dbg !3202
  %add352 = add i64 %131, 1, !dbg !3202
  store i64 %add352, ptr %i, align 8, !dbg !3202
  br label %loop.cond, !dbg !3202

loop.exit353:                                     ; preds = %loop.cond
  %132 = load ptr, ptr %result, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg356, ptr align 8 %2, i32 16, i1 false)
  call void @std.core.dstring.DString.copy_str(ptr sret(%"char[]") align 8 %sretparam355, ptr %132, ptr align 8 %indirectarg356), !dbg !3290
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %sretparam355, i32 16, i1 false), !dbg !3290
  ret i64 0, !dbg !3290

panic:                                            ; preds = %and.rhs
  store i64 %5, ptr %taddr, align 8
  %133 = insertvalue %any undef, ptr %taddr, 0
  %134 = insertvalue %any %133, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr2, align 8
  %135 = insertvalue %any undef, ptr %taddr2, 0
  %136 = insertvalue %any %135, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.123, i64 16 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.func.136, i64 8 }, ptr %indirectarg4, align 8
  store %any %134, ptr %varargslots, align 16
  %ptradd5 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %136, ptr %ptradd5, align 16
  %137 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %137, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg6, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg, ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, i32 119, ptr align 8 %indirectarg6) #6, !dbg !3189
  unreachable, !dbg !3189

panic9:                                           ; preds = %and.rhs7
  store i64 %11, ptr %taddr10, align 8
  %138 = insertvalue %any undef, ptr %taddr10, 0
  %139 = insertvalue %any %138, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.26, i64 38 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.file.123, i64 16 }, ptr %indirectarg12, align 8
  store %"char[]" { ptr @.func.136, i64 8 }, ptr %indirectarg13, align 8
  store %any %139, ptr %varargslots14, align 16
  %140 = insertvalue %"any[]" undef, ptr %varargslots14, 0
  %"$$temp15" = insertvalue %"any[]" %140, i64 1, 1
  store %"any[]" %"$$temp15", ptr %indirectarg16, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, ptr align 8 %indirectarg13, i32 119, ptr align 8 %indirectarg16) #6, !dbg !3189
  unreachable, !dbg !3189

panic19:                                          ; preds = %checkok17
  store i64 %9, ptr %taddr20, align 8
  %141 = insertvalue %any undef, ptr %taddr20, 0
  %142 = insertvalue %any %141, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %11, ptr %taddr21, align 8
  %143 = insertvalue %any undef, ptr %taddr21, 0
  %144 = insertvalue %any %143, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg22, align 8
  store %"char[]" { ptr @.file.123, i64 16 }, ptr %indirectarg23, align 8
  store %"char[]" { ptr @.func.136, i64 8 }, ptr %indirectarg24, align 8
  store %any %142, ptr %varargslots25, align 16
  %ptradd26 = getelementptr inbounds i8, ptr %varargslots25, i64 16
  store %any %144, ptr %ptradd26, align 16
  %145 = insertvalue %"any[]" undef, ptr %varargslots25, 0
  %"$$temp27" = insertvalue %"any[]" %145, i64 2, 1
  store %"any[]" %"$$temp27", ptr %indirectarg28, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg22, ptr align 8 %indirectarg23, ptr align 8 %indirectarg24, i32 119, ptr align 8 %indirectarg28) #6, !dbg !3189
  unreachable, !dbg !3189

panic34:                                          ; preds = %if.then
  store i64 %17, ptr %taddr35, align 8
  %146 = insertvalue %any undef, ptr %taddr35, 0
  %147 = insertvalue %any %146, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 1, ptr %taddr36, align 8
  %148 = insertvalue %any undef, ptr %taddr36, 0
  %149 = insertvalue %any %148, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.12, i64 61 }, ptr %indirectarg37, align 8
  store %"char[]" { ptr @.file.123, i64 16 }, ptr %indirectarg38, align 8
  store %"char[]" { ptr @.func.136, i64 8 }, ptr %indirectarg39, align 8
  store %any %147, ptr %varargslots40, align 16
  %ptradd41 = getelementptr inbounds i8, ptr %varargslots40, i64 16
  store %any %149, ptr %ptradd41, align 16
  %150 = insertvalue %"any[]" undef, ptr %varargslots40, 0
  %"$$temp42" = insertvalue %"any[]" %150, i64 2, 1
  store %"any[]" %"$$temp42", ptr %indirectarg43, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg37, ptr align 8 %indirectarg38, ptr align 8 %indirectarg39, i32 122, ptr align 8 %indirectarg43) #6, !dbg !3190
  unreachable, !dbg !3190

panic47:                                          ; preds = %checkok44
  store i64 %sub46, ptr %taddr48, align 8
  %151 = insertvalue %any undef, ptr %taddr48, 0
  %152 = insertvalue %any %151, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.10, i64 43 }, ptr %indirectarg49, align 8
  store %"char[]" { ptr @.file.123, i64 16 }, ptr %indirectarg50, align 8
  store %"char[]" { ptr @.func.136, i64 8 }, ptr %indirectarg51, align 8
  store %any %152, ptr %varargslots52, align 16
  %153 = insertvalue %"any[]" undef, ptr %varargslots52, 0
  %"$$temp53" = insertvalue %"any[]" %153, i64 1, 1
  store %"any[]" %"$$temp53", ptr %indirectarg54, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg49, ptr align 8 %indirectarg50, ptr align 8 %indirectarg51, i32 122, ptr align 8 %indirectarg54) #6, !dbg !3190
  unreachable, !dbg !3190

panic58:                                          ; preds = %checkok55
  store i64 %sub57, ptr %taddr59, align 8
  %154 = insertvalue %any undef, ptr %taddr59, 0
  %155 = insertvalue %any %154, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %17, ptr %taddr60, align 8
  %156 = insertvalue %any undef, ptr %taddr60, 0
  %157 = insertvalue %any %156, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.14, i64 60 }, ptr %indirectarg61, align 8
  store %"char[]" { ptr @.file.123, i64 16 }, ptr %indirectarg62, align 8
  store %"char[]" { ptr @.func.136, i64 8 }, ptr %indirectarg63, align 8
  store %any %155, ptr %varargslots64, align 16
  %ptradd65 = getelementptr inbounds i8, ptr %varargslots64, i64 16
  store %any %157, ptr %ptradd65, align 16
  %158 = insertvalue %"any[]" undef, ptr %varargslots64, 0
  %"$$temp66" = insertvalue %"any[]" %158, i64 2, 1
  store %"any[]" %"$$temp66", ptr %indirectarg67, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg61, ptr align 8 %indirectarg62, ptr align 8 %indirectarg63, i32 122, ptr align 8 %indirectarg67) #6, !dbg !3190
  unreachable, !dbg !3190

panic83:                                          ; preds = %loop.body
  store i64 %31, ptr %taddr84, align 8
  %159 = insertvalue %any undef, ptr %taddr84, 0
  %160 = insertvalue %any %159, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %33, ptr %taddr85, align 8
  %161 = insertvalue %any undef, ptr %taddr85, 0
  %162 = insertvalue %any %161, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg86, align 8
  store %"char[]" { ptr @.file.123, i64 16 }, ptr %indirectarg87, align 8
  store %"char[]" { ptr @.func.136, i64 8 }, ptr %indirectarg88, align 8
  store %any %160, ptr %varargslots89, align 16
  %ptradd90 = getelementptr inbounds i8, ptr %varargslots89, i64 16
  store %any %162, ptr %ptradd90, align 16
  %163 = insertvalue %"any[]" undef, ptr %varargslots89, 0
  %"$$temp91" = insertvalue %"any[]" %163, i64 2, 1
  store %"any[]" %"$$temp91", ptr %indirectarg92, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg86, ptr align 8 %indirectarg87, ptr align 8 %indirectarg88, i32 137, ptr align 8 %indirectarg92) #6, !dbg !3205
  unreachable, !dbg !3205

panic104:                                         ; preds = %if.exit100
  store i64 %40, ptr %taddr105, align 8
  %164 = insertvalue %any undef, ptr %taddr105, 0
  %165 = insertvalue %any %164, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %add102, ptr %taddr106, align 8
  %166 = insertvalue %any undef, ptr %taddr106, 0
  %167 = insertvalue %any %166, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg107, align 8
  store %"char[]" { ptr @.file.123, i64 16 }, ptr %indirectarg108, align 8
  store %"char[]" { ptr @.func.136, i64 8 }, ptr %indirectarg109, align 8
  store %any %165, ptr %varargslots110, align 16
  %ptradd111 = getelementptr inbounds i8, ptr %varargslots110, i64 16
  store %any %167, ptr %ptradd111, align 16
  %168 = insertvalue %"any[]" undef, ptr %varargslots110, 0
  %"$$temp112" = insertvalue %"any[]" %168, i64 2, 1
  store %"any[]" %"$$temp112", ptr %indirectarg113, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg107, ptr align 8 %indirectarg108, ptr align 8 %indirectarg109, i32 147, ptr align 8 %indirectarg113) #6, !dbg !3212
  unreachable, !dbg !3212

panic135:                                         ; preds = %if.exit131
  store i64 %49, ptr %taddr136, align 8
  %169 = insertvalue %any undef, ptr %taddr136, 0
  %170 = insertvalue %any %169, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %add133, ptr %taddr137, align 8
  %171 = insertvalue %any undef, ptr %taddr137, 0
  %172 = insertvalue %any %171, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg138, align 8
  store %"char[]" { ptr @.file.123, i64 16 }, ptr %indirectarg139, align 8
  store %"char[]" { ptr @.func.136, i64 8 }, ptr %indirectarg140, align 8
  store %any %170, ptr %varargslots141, align 16
  %ptradd142 = getelementptr inbounds i8, ptr %varargslots141, i64 16
  store %any %172, ptr %ptradd142, align 16
  %173 = insertvalue %"any[]" undef, ptr %varargslots141, 0
  %"$$temp143" = insertvalue %"any[]" %173, i64 2, 1
  store %"any[]" %"$$temp143", ptr %indirectarg144, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg138, ptr align 8 %indirectarg139, ptr align 8 %indirectarg140, i32 163, ptr align 8 %indirectarg144) #6, !dbg !3237
  unreachable, !dbg !3237

panic150:                                         ; preds = %checkok145
  store i64 %54, ptr %taddr151, align 8
  %174 = insertvalue %any undef, ptr %taddr151, 0
  %175 = insertvalue %any %174, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %add148, ptr %taddr152, align 8
  %176 = insertvalue %any undef, ptr %taddr152, 0
  %177 = insertvalue %any %176, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg153, align 8
  store %"char[]" { ptr @.file.123, i64 16 }, ptr %indirectarg154, align 8
  store %"char[]" { ptr @.func.136, i64 8 }, ptr %indirectarg155, align 8
  store %any %175, ptr %varargslots156, align 16
  %ptradd157 = getelementptr inbounds i8, ptr %varargslots156, i64 16
  store %any %177, ptr %ptradd157, align 16
  %178 = insertvalue %"any[]" undef, ptr %varargslots156, 0
  %"$$temp158" = insertvalue %"any[]" %178, i64 2, 1
  store %"any[]" %"$$temp158", ptr %indirectarg159, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg153, ptr align 8 %indirectarg154, ptr align 8 %indirectarg155, i32 164, ptr align 8 %indirectarg159) #6, !dbg !3239
  unreachable, !dbg !3239

panic165:                                         ; preds = %checkok160
  store i64 256, ptr %taddr166, align 8
  %179 = insertvalue %any undef, ptr %taddr166, 0
  %180 = insertvalue %any %179, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %zext, ptr %taddr167, align 8
  %181 = insertvalue %any undef, ptr %taddr167, 0
  %182 = insertvalue %any %181, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg168, align 8
  store %"char[]" { ptr @.file.73, i64 8 }, ptr %indirectarg169, align 8
  store %"char[]" { ptr @.func.136, i64 8 }, ptr %indirectarg170, align 8
  store %any %180, ptr %varargslots171, align 16
  %ptradd172 = getelementptr inbounds i8, ptr %varargslots171, i64 16
  store %any %182, ptr %ptradd172, align 16
  %183 = insertvalue %"any[]" undef, ptr %varargslots171, 0
  %"$$temp173" = insertvalue %"any[]" %183, i64 2, 1
  store %"any[]" %"$$temp173", ptr %indirectarg174, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg168, ptr align 8 %indirectarg169, ptr align 8 %indirectarg170, i32 12, ptr align 8 %indirectarg174) #6, !dbg !3240
  unreachable, !dbg !3240

panic180:                                         ; preds = %or.rhs
  store i64 256, ptr %taddr181, align 8
  %184 = insertvalue %any undef, ptr %taddr181, 0
  %185 = insertvalue %any %184, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %zext178, ptr %taddr182, align 8
  %186 = insertvalue %any undef, ptr %taddr182, 0
  %187 = insertvalue %any %186, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg183, align 8
  store %"char[]" { ptr @.file.73, i64 8 }, ptr %indirectarg184, align 8
  store %"char[]" { ptr @.func.136, i64 8 }, ptr %indirectarg185, align 8
  store %any %185, ptr %varargslots186, align 16
  %ptradd187 = getelementptr inbounds i8, ptr %varargslots186, i64 16
  store %any %187, ptr %ptradd187, align 16
  %188 = insertvalue %"any[]" undef, ptr %varargslots186, 0
  %"$$temp188" = insertvalue %"any[]" %188, i64 2, 1
  store %"any[]" %"$$temp188", ptr %indirectarg189, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg183, ptr align 8 %indirectarg184, ptr align 8 %indirectarg185, i32 12, ptr align 8 %indirectarg189) #6, !dbg !3245
  unreachable, !dbg !3245

panic233:                                         ; preds = %loop.body229
  store i64 %86, ptr %taddr234, align 8
  %189 = insertvalue %any undef, ptr %taddr234, 0
  %190 = insertvalue %any %189, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %add231, ptr %taddr235, align 8
  %191 = insertvalue %any undef, ptr %taddr235, 0
  %192 = insertvalue %any %191, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg236, align 8
  store %"char[]" { ptr @.file.123, i64 16 }, ptr %indirectarg237, align 8
  store %"char[]" { ptr @.func.136, i64 8 }, ptr %indirectarg238, align 8
  store %any %190, ptr %varargslots239, align 16
  %ptradd240 = getelementptr inbounds i8, ptr %varargslots239, i64 16
  store %any %192, ptr %ptradd240, align 16
  %193 = insertvalue %"any[]" undef, ptr %varargslots239, 0
  %"$$temp241" = insertvalue %"any[]" %193, i64 2, 1
  store %"any[]" %"$$temp241", ptr %indirectarg242, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg236, ptr align 8 %indirectarg237, ptr align 8 %indirectarg238, i32 176, ptr align 8 %indirectarg242) #6, !dbg !3263
  unreachable, !dbg !3263

panic249:                                         ; preds = %checkok243
  store i64 256, ptr %taddr250, align 8
  %194 = insertvalue %any undef, ptr %taddr250, 0
  %195 = insertvalue %any %194, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %zext247, ptr %taddr251, align 8
  %196 = insertvalue %any undef, ptr %taddr251, 0
  %197 = insertvalue %any %196, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg252, align 8
  store %"char[]" { ptr @.file.73, i64 8 }, ptr %indirectarg253, align 8
  store %"char[]" { ptr @.func.136, i64 8 }, ptr %indirectarg254, align 8
  store %any %195, ptr %varargslots255, align 16
  %ptradd256 = getelementptr inbounds i8, ptr %varargslots255, i64 16
  store %any %197, ptr %ptradd256, align 16
  %198 = insertvalue %"any[]" undef, ptr %varargslots255, 0
  %"$$temp257" = insertvalue %"any[]" %198, i64 2, 1
  store %"any[]" %"$$temp257", ptr %indirectarg258, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg252, ptr align 8 %indirectarg253, ptr align 8 %indirectarg254, i32 12, ptr align 8 %indirectarg258) #6, !dbg !3264
  unreachable, !dbg !3264

panic299:                                         ; preds = %loop.body294
  store i64 %110, ptr %taddr300, align 8
  %199 = insertvalue %any undef, ptr %taddr300, 0
  %200 = insertvalue %any %199, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %add297, ptr %taddr301, align 8
  %201 = insertvalue %any undef, ptr %taddr301, 0
  %202 = insertvalue %any %201, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg302, align 8
  store %"char[]" { ptr @.file.123, i64 16 }, ptr %indirectarg303, align 8
  store %"char[]" { ptr @.func.136, i64 8 }, ptr %indirectarg304, align 8
  store %any %200, ptr %varargslots305, align 16
  %ptradd306 = getelementptr inbounds i8, ptr %varargslots305, i64 16
  store %any %202, ptr %ptradd306, align 16
  %203 = insertvalue %"any[]" undef, ptr %varargslots305, 0
  %"$$temp307" = insertvalue %"any[]" %203, i64 2, 1
  store %"any[]" %"$$temp307", ptr %indirectarg308, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg302, ptr align 8 %indirectarg303, ptr align 8 %indirectarg304, i32 187, ptr align 8 %indirectarg308) #6, !dbg !3280
  unreachable, !dbg !3280

panic315:                                         ; preds = %checkok309
  store i64 256, ptr %taddr316, align 8
  %204 = insertvalue %any undef, ptr %taddr316, 0
  %205 = insertvalue %any %204, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %zext313, ptr %taddr317, align 8
  %206 = insertvalue %any undef, ptr %taddr317, 0
  %207 = insertvalue %any %206, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg318, align 8
  store %"char[]" { ptr @.file.73, i64 8 }, ptr %indirectarg319, align 8
  store %"char[]" { ptr @.func.136, i64 8 }, ptr %indirectarg320, align 8
  store %any %205, ptr %varargslots321, align 16
  %ptradd322 = getelementptr inbounds i8, ptr %varargslots321, i64 16
  store %any %207, ptr %ptradd322, align 16
  %208 = insertvalue %"any[]" undef, ptr %varargslots321, 0
  %"$$temp323" = insertvalue %"any[]" %208, i64 2, 1
  store %"any[]" %"$$temp323", ptr %indirectarg324, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg318, ptr align 8 %indirectarg319, ptr align 8 %indirectarg320, i32 12, ptr align 8 %indirectarg324) #6, !dbg !3281
  unreachable, !dbg !3281
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.core.String.tunescape(ptr %0, ptr align 8 %1, i8 zeroext %2) #0 comdat !dbg !3291 {
entry:
  %allow_unquoted = alloca i8, align 1
  %reterr = alloca i64, align 8
  %retparam = alloca %"char[]", align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %any, align 8
    #dbg_declare(ptr %1, !3294, !DIExpression(), !3295)
  store i8 %2, ptr %allow_unquoted, align 1
    #dbg_declare(ptr %allow_unquoted, !3296, !DIExpression(), !3295)
  %3 = call ptr @llvm.threadlocal.address.p0(ptr @std.core.mem.allocator.current_temp), !dbg !3295
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg, ptr align 8 %1, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg1, ptr align 8 %3, i32 16, i1 false)
  %4 = load i8, ptr %allow_unquoted, align 1
  %5 = call i64 @std.core.String.unescape(ptr %retparam, ptr align 8 %indirectarg, ptr align 8 %indirectarg1, i8 zeroext %4), !dbg !3295
  %not_err = icmp eq i64 %5, 0, !dbg !3295
  %6 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !3295
  br i1 %6, label %after_check, label %assign_optional, !dbg !3295

assign_optional:                                  ; preds = %entry
  store i64 %5, ptr %reterr, align 8, !dbg !3295
  br label %err_retblock, !dbg !3295

after_check:                                      ; preds = %entry
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %retparam, i32 16, i1 false), !dbg !3295
  ret i64 0, !dbg !3295

err_retblock:                                     ; preds = %assign_optional
  %7 = load i64, ptr %reterr, align 8, !dbg !3295
  ret i64 %7, !dbg !3295
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.core.string.escape_len(ptr align 8 %0) #0 comdat !dbg !3297 {
entry:
  %len = alloca i64, align 8
  %.anon = alloca i64, align 8
  %c = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr2 = alloca i64, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg6 = alloca %"any[]", align 8
  %switch = alloca i8, align 1
    #dbg_declare(ptr %0, !3298, !DIExpression(), !3299)
    #dbg_declare(ptr %len, !3300, !DIExpression(), !3301)
  store i64 2, ptr %len, align 8, !dbg !3301
  %ptradd = getelementptr inbounds i8, ptr %0, i64 8, !dbg !3302
  %1 = load i64, ptr %ptradd, align 8, !dbg !3302
    #dbg_declare(ptr %.anon, !3304, !DIExpression(), !3302)
  store i64 0, ptr %.anon, align 8, !dbg !3302
  br label %loop.cond, !dbg !3302

loop.cond:                                        ; preds = %switch.exit, %entry
  %2 = load i64, ptr %.anon, align 8, !dbg !3302
  %lt = icmp ult i64 %2, %1, !dbg !3302
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !3302

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %c, !3305, !DIExpression(), !3307)
  %ptradd1 = getelementptr inbounds i8, ptr %0, i64 8, !dbg !3307
  %3 = load i64, ptr %ptradd1, align 8, !dbg !3307
  %4 = load ptr, ptr %0, align 8, !dbg !3307
  %5 = load i64, ptr %.anon, align 8, !dbg !3307
  %ge = icmp uge i64 %5, %3, !dbg !3307
  %6 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !3307
  br i1 %6, label %panic, label %checkok, !dbg !3307

checkok:                                          ; preds = %loop.body
  %ptradd7 = getelementptr inbounds i8, ptr %4, i64 %5, !dbg !3307
  %7 = load i8, ptr %ptradd7, align 1, !dbg !3307
  store i8 %7, ptr %c, align 1, !dbg !3307
  %8 = load i8, ptr %c, align 1
  store i8 %8, ptr %switch, align 1
  br label %switch.entry

switch.entry:                                     ; preds = %checkok
  %9 = load i8, ptr %switch, align 1
  switch i8 %9, label %switch.default [
    i8 34, label %switch.case
    i8 92, label %switch.case
    i8 8, label %switch.case
    i8 12, label %switch.case
    i8 10, label %switch.case
    i8 13, label %switch.case
    i8 9, label %switch.case
    i8 11, label %switch.case
    i8 0, label %switch.case
  ]

switch.case:                                      ; preds = %switch.entry, %switch.entry, %switch.entry, %switch.entry, %switch.entry, %switch.entry, %switch.entry, %switch.entry, %switch.entry
  %10 = load i64, ptr %len, align 8, !dbg !3308
  %add = add i64 %10, 2, !dbg !3308
  store i64 %add, ptr %len, align 8, !dbg !3308
  br label %switch.exit, !dbg !3308

switch.default:                                   ; preds = %switch.entry
  %11 = load i8, ptr %c, align 1, !dbg !3312
  %zext = zext i8 %11 to i32, !dbg !3312
  %le = icmp ule i32 32, %zext, !dbg !3312
  br i1 %le, label %and.rhs, label %and.phi, !dbg !3312

and.rhs:                                          ; preds = %switch.default
  %12 = load i8, ptr %c, align 1, !dbg !3312
  %zext8 = zext i8 %12 to i32, !dbg !3312
  %ge9 = icmp uge i32 126, %zext8, !dbg !3312
  br label %and.phi, !dbg !3312

and.phi:                                          ; preds = %and.rhs, %switch.default
  %val = phi i1 [ false, %switch.default ], [ %ge9, %and.rhs ], !dbg !3312
  br i1 %val, label %if.then, label %if.else, !dbg !3312

if.then:                                          ; preds = %and.phi
  %13 = load i64, ptr %len, align 8, !dbg !3314
  %add10 = add i64 %13, 1, !dbg !3314
  store i64 %add10, ptr %len, align 8, !dbg !3314
  br label %if.exit, !dbg !3314

if.else:                                          ; preds = %and.phi
  %14 = load i64, ptr %len, align 8, !dbg !3316
  %add11 = add i64 %14, 4, !dbg !3316
  store i64 %add11, ptr %len, align 8, !dbg !3316
  br label %if.exit, !dbg !3316

if.exit:                                          ; preds = %if.else, %if.then
  br label %switch.exit, !dbg !3316

switch.exit:                                      ; preds = %if.exit, %switch.case
  %15 = load i64, ptr %.anon, align 8, !dbg !3302
  %addnuw = add nuw i64 %15, 1, !dbg !3302
  store i64 %addnuw, ptr %.anon, align 8, !dbg !3302
  br label %loop.cond, !dbg !3302

loop.exit:                                        ; preds = %loop.cond
  %16 = load i64, ptr %len, align 8, !dbg !3318
  ret i64 %16, !dbg !3318

panic:                                            ; preds = %loop.body
  store i64 %3, ptr %taddr, align 8
  %17 = insertvalue %any undef, ptr %taddr, 0
  %18 = insertvalue %any %17, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %5, ptr %taddr2, align 8
  %19 = insertvalue %any undef, ptr %taddr2, 0
  %20 = insertvalue %any %19, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.123, i64 16 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.func.124, i64 10 }, ptr %indirectarg4, align 8
  store %any %18, ptr %varargslots, align 16
  %ptradd5 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %20, ptr %ptradd5, align 16
  %21 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %21, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg6, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg, ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, i32 80, ptr align 8 %indirectarg6) #6, !dbg !3307
  unreachable, !dbg !3307
}

; Function Attrs: nounwind ssp uwtable
define weak_odr zeroext i8 @std.core.string.needs_escape(i8 %0) #0 comdat !dbg !3319 {
entry:
  %c = alloca i8, align 1
  %switch = alloca i8, align 1
  store i8 %0, ptr %c, align 1
    #dbg_declare(ptr %c, !3322, !DIExpression(), !3323)
  %1 = load i8, ptr %c, align 1
  store i8 %1, ptr %switch, align 1
  br label %switch.entry

switch.entry:                                     ; preds = %entry
  %2 = load i8, ptr %switch, align 1
  switch i8 %2, label %switch.default [
    i8 34, label %switch.case
    i8 92, label %switch.case
    i8 8, label %switch.case
    i8 12, label %switch.case
    i8 10, label %switch.case
    i8 13, label %switch.case
    i8 9, label %switch.case
    i8 11, label %switch.case
    i8 0, label %switch.case
  ]

switch.case:                                      ; preds = %switch.entry, %switch.entry, %switch.entry, %switch.entry, %switch.entry, %switch.entry, %switch.entry, %switch.entry, %switch.entry
  ret i8 1, !dbg !3324

switch.default:                                   ; preds = %switch.entry
  %3 = load i8, ptr %c, align 1, !dbg !3327
  %zext = zext i8 %3 to i32, !dbg !3327
  %gt = icmp ugt i32 32, %zext, !dbg !3327
  br i1 %gt, label %or.phi, label %or.rhs, !dbg !3327

or.rhs:                                           ; preds = %switch.default
  %4 = load i8, ptr %c, align 1, !dbg !3327
  %zext1 = zext i8 %4 to i32, !dbg !3327
  %lt = icmp ult i32 126, %zext1, !dbg !3327
  br label %or.phi, !dbg !3327

or.phi:                                           ; preds = %or.rhs, %switch.default
  %val = phi i1 [ true, %switch.default ], [ %lt, %or.rhs ], !dbg !3327
  %5 = zext i1 %val to i8, !dbg !3327
  ret i8 %5, !dbg !3327
}

; Function Attrs: nounwind ssp uwtable
declare ptr @std.core.dstring.temp_with_capacity(i64) #0

; Function Attrs: nounwind ssp uwtable
declare i64 @std.core.dstring.DString.appendf(ptr, ptr, ptr align 8, ptr align 8) #0

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i32(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i32, i1 immarg) #1

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(none)
declare i1 @llvm.expect.i1(i1, i1) #2

; Function Attrs: nounwind ssp uwtable
declare ptr @std.core.dstring.DString.zstr_view(ptr) #0

; Function Attrs: nounwind ssp uwtable
declare ptr @std.core.mem.allocator.push_pool(i64) #0

; Function Attrs: nounwind ssp uwtable
declare void @std.core.dstring.DString.copy_str(ptr noalias sret(%"char[]") align 8, ptr, ptr align 8) #0

; Function Attrs: nounwind ssp uwtable
declare void @std.core.mem.allocator.pop_pool(ptr) #0

; Function Attrs: nounwind ssp uwtable
declare ptr @std.core.dstring.new_with_capacity(ptr align 8, i64) #0

; Function Attrs: nounwind ssp uwtable
declare ptr @std.core.mem.allocator.ArenaAllocator.init(ptr, ptr align 8) #0

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg) #3

; Function Attrs: nounwind ssp uwtable
declare void @std.core.dstring.DString.str_view(ptr noalias sret(%"char[]") align 8, ptr) #0

define weak ptr @.dyn_search(ptr %0, ptr %1) unnamed_addr comdat {
entry:
  br label %check

check:                                            ; preds = %no_match, %entry
  %2 = phi ptr [ %0, %entry ], [ %9, %no_match ]
  %3 = icmp eq ptr %2, null
  br i1 %3, label %missing_function, label %compare

missing_function:                                 ; preds = %check
  ret ptr null

compare:                                          ; preds = %check
  %4 = getelementptr inbounds { ptr, ptr, ptr }, ptr %2, i32 0, i32 1
  %5 = load ptr, ptr %4, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %match, label %no_match

match:                                            ; preds = %compare
  %7 = load ptr, ptr %2, align 8
  ret ptr %7

no_match:                                         ; preds = %compare
  %8 = getelementptr inbounds { ptr, ptr, ptr }, ptr %2, i32 0, i32 2
  %9 = load ptr, ptr %8, align 8
  br label %check
}

; Function Attrs: nounwind ssp uwtable
declare void @std.core.builtin.panicf(ptr align 8, ptr align 8, ptr align 8, i32, ptr align 8) #0

; Function Attrs: nounwind ssp uwtable
declare void @std.core.dstring.DString.append_chars(ptr, ptr align 8) #0

; Function Attrs: nounwind ssp uwtable
declare i64 @std.core.string.conv.utf8len_for_utf32(ptr align 8) #0

; Function Attrs: nounwind ssp uwtable
declare void @std.core.string.conv.utf32to8_unsafe(ptr align 8, ptr) #0

; Function Attrs: nounwind ssp uwtable
declare i64 @std.core.string.conv.utf8len_for_utf16(ptr align 8) #0

; Function Attrs: nounwind ssp uwtable
declare i64 @std.core.string.conv.utf16to8_unsafe(ptr align 8, ptr) #0

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare nonnull ptr @llvm.threadlocal.address.p0(ptr nonnull) #4

; Function Attrs: nounwind ssp uwtable
declare ptr @std.core.dstring.join(ptr align 8, ptr align 8, ptr align 8) #0

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
declare i64 @std.core.string.conv.utf16len_for_utf8(ptr align 8) #0

; Function Attrs: nounwind ssp uwtable
declare i64 @std.core.string.conv.utf8to16_unsafe(ptr align 8, ptr) #0

; Function Attrs: nounwind ssp uwtable
declare i64 @std.core.string.conv.utf8_codepoints(ptr align 8) #0

; Function Attrs: nounwind ssp uwtable
declare i64 @std.core.string.conv.utf8to32_unsafe(ptr align 8, ptr) #0

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memmove.p0.p0.i64(ptr nocapture writeonly, ptr nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
declare ptr @std.core.dstring.DString.init(ptr, ptr align 8, i64) #0

; Function Attrs: nounwind ssp uwtable
declare ptr @std.core.dstring.DString.data(ptr) #0

; Function Attrs: nounwind ssp uwtable
declare void @std.core.dstring.DString.append_char(ptr, i8) #0

; Function Attrs: nounwind ssp uwtable
declare double @scalbn(double, i32) #0

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare double @llvm.copysign.f64(double, double) #4

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare double @llvm.fabs.f64(double) #4

; Function Attrs: nounwind ssp uwtable
declare i64 @std.core.dstring.DString.append_char32(ptr, i32) #0

attributes #0 = { nounwind ssp uwtable "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" }
attributes #1 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }
attributes #2 = { nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nocallback nofree nounwind willreturn memory(argmem: write) }
attributes #4 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #5 = { alwaysinline }
attributes #6 = { noreturn }

!llvm.module.flags = !{!48, !49, !50, !51, !52, !53}
!llvm.dbg.cu = !{!54}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "SURROGATE_OFFSET", linkageName: "std.core.string.SURROGATE_OFFSET", scope: !2, file: !2, line: 1121, type: !3, isLocal: true, isDefinition: true, align: 4)
!2 = !DIFile(filename: "string.c3", directory: "C:/Compilers/C3/lib/std/core")
!3 = !DIBasicType(name: "uint", size: 32, encoding: DW_ATE_unsigned)
!4 = !DIGlobalVariableExpression(var: !5, expr: !DIExpression())
!5 = distinct !DIGlobalVariable(name: "SURROGATE_GENERIC_MASK", linkageName: "std.core.string.SURROGATE_GENERIC_MASK", scope: !2, file: !2, line: 1122, type: !3, isLocal: true, isDefinition: true, align: 4)
!6 = !DIGlobalVariableExpression(var: !7, expr: !DIExpression())
!7 = distinct !DIGlobalVariable(name: "SURROGATE_MASK", linkageName: "std.core.string.SURROGATE_MASK", scope: !2, file: !2, line: 1123, type: !3, isLocal: true, isDefinition: true, align: 4)
!8 = !DIGlobalVariableExpression(var: !9, expr: !DIExpression())
!9 = distinct !DIGlobalVariable(name: "SURROGATE_CODEPOINT_MASK", linkageName: "std.core.string.SURROGATE_CODEPOINT_MASK", scope: !2, file: !2, line: 1124, type: !3, isLocal: true, isDefinition: true, align: 4)
!10 = !DIGlobalVariableExpression(var: !11, expr: !DIExpression())
!11 = distinct !DIGlobalVariable(name: "SURROGATE_BITS", linkageName: "std.core.string.SURROGATE_BITS", scope: !2, file: !2, line: 1125, type: !3, isLocal: true, isDefinition: true, align: 4)
!12 = !DIGlobalVariableExpression(var: !13, expr: !DIExpression())
!13 = distinct !DIGlobalVariable(name: "SURROGATE_LOW_VALUE", linkageName: "std.core.string.SURROGATE_LOW_VALUE", scope: !2, file: !2, line: 1126, type: !3, isLocal: true, isDefinition: true, align: 4)
!14 = !DIGlobalVariableExpression(var: !15, expr: !DIExpression())
!15 = distinct !DIGlobalVariable(name: "SURROGATE_HIGH_VALUE", linkageName: "std.core.string.SURROGATE_HIGH_VALUE", scope: !2, file: !2, line: 1127, type: !3, isLocal: true, isDefinition: true, align: 4)
!16 = !DIGlobalVariableExpression(var: !17, expr: !DIExpression())
!17 = distinct !DIGlobalVariable(name: "BITS", linkageName: "to_double.BITS", scope: !2, file: !2, line: 457, type: !18, isLocal: true, isDefinition: true, align: 4)
!18 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!19 = !DIGlobalVariableExpression(var: !20, expr: !DIExpression())
!20 = distinct !DIGlobalVariable(name: "EMIN", linkageName: "to_double.EMIN", scope: !2, file: !2, line: 458, type: !18, isLocal: true, isDefinition: true, align: 4)
!21 = !DIGlobalVariableExpression(var: !22, expr: !DIExpression())
!22 = distinct !DIGlobalVariable(name: "TH", linkageName: "to_double.TH", scope: !2, file: !2, line: 40, type: !23, isLocal: true, isDefinition: true, align: 4)
!23 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3, size: 64, align: 32, elements: !24)
!24 = !{!25}
!25 = !DISubrange(count: 2, lowerBound: 0)
!26 = !DIGlobalVariableExpression(var: !27, expr: !DIExpression())
!27 = distinct !DIGlobalVariable(name: "P10S", linkageName: "to_double.P10S", scope: !2, file: !2, line: 43, type: !28, isLocal: true, isDefinition: true, align: 16)
!28 = !DICompositeType(tag: DW_TAG_array_type, baseType: !18, size: 256, align: 32, elements: !29)
!29 = !{!30}
!30 = !DISubrange(count: 8, lowerBound: 0)
!31 = !DIGlobalVariableExpression(var: !32, expr: !DIExpression())
!32 = distinct !DIGlobalVariable(name: "BITS", linkageName: "to_float.BITS", scope: !2, file: !2, line: 454, type: !18, isLocal: true, isDefinition: true, align: 4)
!33 = !DIGlobalVariableExpression(var: !34, expr: !DIExpression())
!34 = distinct !DIGlobalVariable(name: "EMIN", linkageName: "to_float.EMIN", scope: !2, file: !2, line: 455, type: !18, isLocal: true, isDefinition: true, align: 4)
!35 = !DIGlobalVariableExpression(var: !36, expr: !DIExpression())
!36 = distinct !DIGlobalVariable(name: "TH", linkageName: "to_float.TH", scope: !2, file: !2, line: 40, type: !23, isLocal: true, isDefinition: true, align: 4)
!37 = !DIGlobalVariableExpression(var: !38, expr: !DIExpression())
!38 = distinct !DIGlobalVariable(name: "P10S", linkageName: "to_float.P10S", scope: !2, file: !2, line: 43, type: !28, isLocal: true, isDefinition: true, align: 16)
!39 = !DIGlobalVariableExpression(var: !40, expr: !DIExpression())
!40 = distinct !DIGlobalVariable(name: "KMAX", linkageName: "std.core.string.KMAX", scope: !41, file: !41, line: 29, type: !18, isLocal: false, isDefinition: true, align: 4)
!41 = !DIFile(filename: "string_to_real.c3", directory: "C:/Compilers/C3/lib/std/core")
!42 = !DIGlobalVariableExpression(var: !43, expr: !DIExpression())
!43 = distinct !DIGlobalVariable(name: "MASK", linkageName: "std.core.string.MASK", scope: !41, file: !41, line: 30, type: !18, isLocal: false, isDefinition: true, align: 4)
!44 = !DIGlobalVariableExpression(var: !45, expr: !DIExpression())
!45 = distinct !DIGlobalVariable(name: "B1B_DIG", linkageName: "std.core.string.B1B_DIG", scope: !41, file: !41, line: 31, type: !18, isLocal: false, isDefinition: true, align: 4)
!46 = !DIGlobalVariableExpression(var: !47, expr: !DIExpression())
!47 = distinct !DIGlobalVariable(name: "B1B_MAX", linkageName: "std.core.string.B1B_MAX", scope: !41, file: !41, line: 32, type: !23, isLocal: false, isDefinition: true, align: 4)
!48 = !{i32 1, !"CodeView", i32 1}
!49 = !{i32 2, !"Debug Info Version", i32 3}
!50 = !{i32 2, !"wchar_size", i32 2}
!51 = !{i32 4, !"PIC Level", i32 2}
!52 = !{i32 1, !"uwtable", i32 2}
!53 = !{i32 1, !"MaxTLSAlign", i32 65536}
!54 = distinct !DICompileUnit(language: DW_LANG_C11, file: !2, producer: "c3c", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !55, globals: !77, splitDebugInlining: false)
!55 = !{!56}
!56 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "SplitterType", scope: !57, file: !2, line: 1129, baseType: !18, size: 32, align: 32, elements: !73)
!57 = !DICompositeType(tag: DW_TAG_structure_type, name: "Splitter", scope: !2, file: !2, line: 1139, size: 384, align: 64, elements: !58, identifier: "std.core.string.Splitter")
!58 = !{!59, !69, !70, !71, !72}
!59 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !57, file: !2, line: 1141, baseType: !60, size: 128, align: 64)
!60 = !DIDerivedType(tag: DW_TAG_typedef, name: "String", baseType: !61)
!61 = !DICompositeType(tag: DW_TAG_structure_type, name: "char[]", size: 128, align: 64, elements: !62, identifier: "char[]")
!62 = !{!63, !66}
!63 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !61, baseType: !64, size: 64, align: 64)
!64 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "char*", baseType: !65, size: 64, align: 64, dwarfAddressSpace: 0)
!65 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_unsigned_char)
!66 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !61, baseType: !67, size: 64, align: 64, offset: 64)
!67 = !DIDerivedType(tag: DW_TAG_typedef, name: "usz", baseType: !68)
!68 = !DIBasicType(name: "ulong", size: 64, encoding: DW_ATE_unsigned)
!69 = !DIDerivedType(tag: DW_TAG_member, name: "split", scope: !57, file: !2, line: 1142, baseType: !60, size: 128, align: 64, offset: 128)
!70 = !DIDerivedType(tag: DW_TAG_member, name: "current", scope: !57, file: !2, line: 1143, baseType: !67, size: 64, align: 64, offset: 256)
!71 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !57, file: !2, line: 1144, baseType: !56, size: 32, align: 32, offset: 320)
!72 = !DIDerivedType(tag: DW_TAG_member, name: "last_index", scope: !57, file: !2, line: 1145, baseType: !18, size: 32, align: 32, offset: 352)
!73 = !{!74, !75, !76}
!74 = !DIEnumerator(name: "TOKENIZE", value: 0)
!75 = !DIEnumerator(name: "TOKENIZE_ALL", value: 1)
!76 = !DIEnumerator(name: "TOKENIZE_ALL_SKIP_LAST", value: 2)
!77 = !{!0, !4, !6, !8, !10, !12, !14, !16, !19, !21, !26, !31, !33, !35, !37, !39, !42, !44, !46}
!78 = distinct !DISubprogram(name: "replace", linkageName: "std.core.String.replace", scope: !2, file: !2, line: 185, type: !79, scopeLine: 185, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !87)
!79 = !DISubroutineType(types: !80)
!80 = !{!60, !60, !81, !60, !60}
!81 = !DICompositeType(tag: DW_TAG_structure_type, name: "Allocator", size: 128, align: 64, elements: !82, identifier: "Allocator")
!82 = !{!83, !85}
!83 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !81, baseType: !84, size: 64, align: 64)
!84 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "void*", baseType: null, size: 64, align: 64, dwarfAddressSpace: 0)
!85 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !81, baseType: !86, size: 64, align: 64, offset: 64)
!86 = !DIBasicType(name: "typeid", size: 64, encoding: DW_ATE_address)
!87 = !{}
!88 = !DILocalVariable(name: "self", arg: 1, scope: !78, file: !2, line: 185, type: !60)
!89 = !DILocation(line: 185, scope: !78)
!90 = !DILocalVariable(name: "allocator", arg: 2, scope: !78, file: !2, line: 185, type: !81)
!91 = !DILocalVariable(name: "needle", arg: 3, scope: !78, file: !2, line: 185, type: !60)
!92 = !DILocalVariable(name: "new_str", arg: 4, scope: !78, file: !2, line: 185, type: !60)
!93 = !DILocalVariable(name: "state", scope: !94, file: !2, line: 641, type: !96, align: 8)
!94 = distinct !DISubprogram(name: "@pool", linkageName: "@pool", scope: !95, file: !95, line: 639, scopeLine: 639, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54, retainedNodes: !87)
!95 = !DIFile(filename: "mem.c3", directory: "C:/Compilers/C3/lib/std/core")
!96 = !DIDerivedType(tag: DW_TAG_typedef, name: "PoolState", scope: !2, file: !2, line: 403, baseType: !97, align: 8)
!97 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "TempAllocator*", baseType: !98, size: 64, align: 64, dwarfAddressSpace: 0)
!98 = !DICompositeType(tag: DW_TAG_structure_type, name: "TempAllocator", scope: !2, file: !2, line: 31, size: 704, align: 64, elements: !99, identifier: "std.core.mem.allocator.TempAllocator")
!99 = !{!100, !101, !113, !114, !116, !117, !118, !119, !120, !121, !122}
!100 = !DIDerivedType(tag: DW_TAG_member, name: "backing_allocator", scope: !98, file: !2, line: 33, baseType: !81, size: 128, align: 64)
!101 = !DIDerivedType(tag: DW_TAG_member, name: "last_page", scope: !98, file: !2, line: 34, baseType: !102, size: 64, align: 64, offset: 128)
!102 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "TempAllocatorPage*", baseType: !103, size: 64, align: 64, dwarfAddressSpace: 0)
!103 = !DICompositeType(tag: DW_TAG_structure_type, name: "TempAllocatorPage", scope: !2, file: !2, line: 54, size: 256, align: 64, elements: !104, identifier: "std.core.mem.allocator.TempAllocatorPage")
!104 = !{!105, !106, !107, !108, !109}
!105 = !DIDerivedType(tag: DW_TAG_member, name: "prev_page", scope: !103, file: !2, line: 56, baseType: !102, size: 64, align: 64)
!106 = !DIDerivedType(tag: DW_TAG_member, name: "start", scope: !103, file: !2, line: 57, baseType: !84, size: 64, align: 64, offset: 64)
!107 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !103, file: !2, line: 58, baseType: !67, size: 64, align: 64, offset: 128)
!108 = !DIDerivedType(tag: DW_TAG_member, name: "ident", scope: !103, file: !2, line: 59, baseType: !67, size: 64, align: 64, offset: 192)
!109 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !103, file: !2, line: 60, baseType: !110, align: 8, offset: 256)
!110 = !DICompositeType(tag: DW_TAG_array_type, baseType: !65, align: 8, elements: !111)
!111 = !{!112}
!112 = !DISubrange(count: 0, lowerBound: 0)
!113 = !DIDerivedType(tag: DW_TAG_member, name: "derived", scope: !98, file: !2, line: 35, baseType: !97, size: 64, align: 64, offset: 192)
!114 = !DIDerivedType(tag: DW_TAG_member, name: "allocated", scope: !98, file: !2, line: 36, baseType: !115, size: 8, align: 8, offset: 256)
!115 = !DIBasicType(name: "bool", size: 8, encoding: DW_ATE_boolean)
!116 = !DIDerivedType(tag: DW_TAG_member, name: "reserve_size", scope: !98, file: !2, line: 37, baseType: !67, size: 64, align: 64, offset: 320)
!117 = !DIDerivedType(tag: DW_TAG_member, name: "realloc_size", scope: !98, file: !2, line: 38, baseType: !67, size: 64, align: 64, offset: 384)
!118 = !DIDerivedType(tag: DW_TAG_member, name: "min_size", scope: !98, file: !2, line: 39, baseType: !67, size: 64, align: 64, offset: 448)
!119 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !98, file: !2, line: 40, baseType: !67, size: 64, align: 64, offset: 512)
!120 = !DIDerivedType(tag: DW_TAG_member, name: "capacity", scope: !98, file: !2, line: 41, baseType: !67, size: 64, align: 64, offset: 576)
!121 = !DIDerivedType(tag: DW_TAG_member, name: "original_capacity", scope: !98, file: !2, line: 42, baseType: !67, size: 64, align: 64, offset: 640)
!122 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !98, file: !2, line: 43, baseType: !110, align: 8, offset: 704)
!123 = !DILocation(line: 641, scope: !94, inlinedAt: !124)
!124 = !DILocation(line: 187, scope: !78)
!125 = !DILocalVariable(name: "split", scope: !126, file: !2, line: 189, type: !127, align: 8)
!126 = distinct !DILexicalBlock(scope: !78, file: !2, line: 188, column: 2)
!127 = !DICompositeType(tag: DW_TAG_structure_type, name: "String[]", size: 128, align: 64, elements: !128, identifier: "String[]")
!128 = !{!129, !131}
!129 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !127, baseType: !130, size: 64, align: 64)
!130 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "String*", baseType: !60, size: 64, align: 64, dwarfAddressSpace: 0)
!131 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !127, baseType: !67, size: 64, align: 64, offset: 64)
!132 = !DILocation(line: 189, scope: !126)
!133 = !DILocation(line: 190, scope: !126)
!134 = !DILocation(line: 644, scope: !135, inlinedAt: !124)
!135 = distinct !DILexicalBlock(scope: !94, file: !95, line: 643, column: 2)
!136 = distinct !DISubprogram(name: "treplace", linkageName: "std.core.String.treplace", scope: !2, file: !2, line: 202, type: !137, scopeLine: 202, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !87)
!137 = !DISubroutineType(types: !138)
!138 = !{!60, !60, !60, !60}
!139 = !DILocalVariable(name: "self", arg: 1, scope: !136, file: !2, line: 202, type: !60)
!140 = !DILocation(line: 202, scope: !136)
!141 = !DILocalVariable(name: "needle", arg: 2, scope: !136, file: !2, line: 202, type: !60)
!142 = !DILocalVariable(name: "new_str", arg: 3, scope: !136, file: !2, line: 202, type: !60)
!143 = !DILocalVariable(name: "split", scope: !136, file: !2, line: 204, type: !127, align: 8)
!144 = !DILocation(line: 204, scope: !136)
!145 = !DILocation(line: 205, scope: !136)
!146 = distinct !DISubprogram(name: "trim", linkageName: "std.core.String.trim", scope: !2, file: !2, line: 217, type: !147, scopeLine: 217, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !87)
!147 = !DISubroutineType(types: !148)
!148 = !{!60, !60, !60}
!149 = !DILocalVariable(name: "self", arg: 1, scope: !146, file: !2, line: 217, type: !60)
!150 = !DILocation(line: 217, scope: !146)
!151 = !DILocalVariable(name: "to_trim", arg: 2, scope: !146, file: !2, line: 217, type: !60)
!152 = !DILocation(line: 219, scope: !146)
!153 = distinct !DISubprogram(name: "trim_left", linkageName: "std.core.String.trim_left", scope: !2, file: !2, line: 230, type: !147, scopeLine: 230, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !87)
!154 = !DILocalVariable(name: "self", arg: 1, scope: !153, file: !2, line: 230, type: !60)
!155 = !DILocation(line: 230, scope: !153)
!156 = !DILocalVariable(name: "to_trim", arg: 2, scope: !153, file: !2, line: 230, type: !60)
!157 = !DILocalVariable(name: "start", scope: !153, file: !2, line: 232, type: !67, align: 8)
!158 = !DILocation(line: 232, scope: !153)
!159 = !DILocalVariable(name: "len", scope: !153, file: !2, line: 233, type: !67, align: 8)
!160 = !DILocation(line: 233, scope: !153)
!161 = !DILocation(line: 234, scope: !153)
!162 = !DILocation(line: 234, scope: !163)
!163 = distinct !DILexicalBlock(scope: !153, file: !2, line: 234, column: 2)
!164 = !DILocation(line: 147, scope: !165, inlinedAt: !162)
!165 = distinct !DILexicalBlock(scope: !166, file: !2, line: 147, column: 2)
!166 = distinct !DISubprogram(name: "char_in_set", linkageName: "char_in_set", scope: !2, file: !2, line: 145, scopeLine: 145, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54, retainedNodes: !87)
!167 = !DILocalVariable(name: ".temp", scope: !165, file: !2, line: 147, type: !67, align: 8)
!168 = !DILocalVariable(name: "ch", scope: !169, file: !2, line: 147, type: !65, align: 1)
!169 = distinct !DILexicalBlock(scope: !165, file: !2, line: 147, column: 21)
!170 = !DILocation(line: 147, scope: !169, inlinedAt: !162)
!171 = !DILocation(line: 148, scope: !166, inlinedAt: !162)
!172 = !DILocation(line: 235, scope: !153)
!173 = !DILocation(line: 236, scope: !153)
!174 = distinct !DISubprogram(name: "trim_right", linkageName: "std.core.String.trim_right", scope: !2, file: !2, line: 247, type: !147, scopeLine: 247, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !87)
!175 = !DILocalVariable(name: "self", arg: 1, scope: !174, file: !2, line: 247, type: !60)
!176 = !DILocation(line: 247, scope: !174)
!177 = !DILocalVariable(name: "to_trim", arg: 2, scope: !174, file: !2, line: 247, type: !60)
!178 = !DILocalVariable(name: "len", scope: !174, file: !2, line: 249, type: !67, align: 8)
!179 = !DILocation(line: 249, scope: !174)
!180 = !DILocation(line: 250, scope: !174)
!181 = !DILocation(line: 250, scope: !182)
!182 = distinct !DILexicalBlock(scope: !174, file: !2, line: 250, column: 2)
!183 = !DILocation(line: 147, scope: !184, inlinedAt: !181)
!184 = distinct !DILexicalBlock(scope: !185, file: !2, line: 147, column: 2)
!185 = distinct !DISubprogram(name: "char_in_set", linkageName: "char_in_set", scope: !2, file: !2, line: 145, scopeLine: 145, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54, retainedNodes: !87)
!186 = !DILocalVariable(name: ".temp", scope: !184, file: !2, line: 147, type: !67, align: 8)
!187 = !DILocalVariable(name: "ch", scope: !188, file: !2, line: 147, type: !65, align: 1)
!188 = distinct !DILexicalBlock(scope: !184, file: !2, line: 147, column: 21)
!189 = !DILocation(line: 147, scope: !188, inlinedAt: !181)
!190 = !DILocation(line: 148, scope: !185, inlinedAt: !181)
!191 = !DILocation(line: 251, scope: !174)
!192 = distinct !DISubprogram(name: "starts_with", linkageName: "std.core.String.starts_with", scope: !2, file: !2, line: 262, type: !193, scopeLine: 262, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !87)
!193 = !DISubroutineType(types: !194)
!194 = !{!115, !60, !60}
!195 = !DILocalVariable(name: "self", arg: 1, scope: !192, file: !2, line: 262, type: !60)
!196 = !DILocation(line: 262, scope: !192)
!197 = !DILocalVariable(name: "prefix", arg: 2, scope: !192, file: !2, line: 262, type: !60)
!198 = !DILocation(line: 264, scope: !192)
!199 = !DILocation(line: 265, scope: !192)
!200 = !DILocation(line: 266, scope: !192)
!201 = distinct !DISubprogram(name: "ends_with", linkageName: "std.core.String.ends_with", scope: !2, file: !2, line: 277, type: !193, scopeLine: 277, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !87)
!202 = !DILocalVariable(name: "self", arg: 1, scope: !201, file: !2, line: 277, type: !60)
!203 = !DILocation(line: 277, scope: !201)
!204 = !DILocalVariable(name: "suffix", arg: 2, scope: !201, file: !2, line: 277, type: !60)
!205 = !DILocation(line: 279, scope: !201)
!206 = !DILocation(line: 280, scope: !201)
!207 = !DILocation(line: 281, scope: !201)
!208 = distinct !DISubprogram(name: "strip", linkageName: "std.core.String.strip", scope: !2, file: !2, line: 292, type: !147, scopeLine: 292, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !87)
!209 = !DILocalVariable(name: "self", arg: 1, scope: !208, file: !2, line: 292, type: !60)
!210 = !DILocation(line: 292, scope: !208)
!211 = !DILocalVariable(name: "prefix", arg: 2, scope: !208, file: !2, line: 292, type: !60)
!212 = !DILocation(line: 294, scope: !208)
!213 = !DILocation(line: 295, scope: !208)
!214 = distinct !DISubprogram(name: "strip_end", linkageName: "std.core.String.strip_end", scope: !2, file: !2, line: 306, type: !147, scopeLine: 306, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !87)
!215 = !DILocalVariable(name: "self", arg: 1, scope: !214, file: !2, line: 306, type: !60)
!216 = !DILocation(line: 306, scope: !214)
!217 = !DILocalVariable(name: "suffix", arg: 2, scope: !214, file: !2, line: 306, type: !60)
!218 = !DILocation(line: 308, scope: !214)
!219 = !DILocation(line: 310, scope: !214)
!220 = distinct !DISubprogram(name: "split", linkageName: "std.core.String.split", scope: !2, file: !2, line: 325, type: !221, scopeLine: 325, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !87)
!221 = !DISubroutineType(types: !222)
!222 = !{!127, !60, !81, !60, !68, !115}
!223 = !DILocalVariable(name: "self", arg: 1, scope: !220, file: !2, line: 325, type: !60)
!224 = !DILocation(line: 325, scope: !220)
!225 = !DILocalVariable(name: "allocator", arg: 2, scope: !220, file: !2, line: 325, type: !81)
!226 = !DILocalVariable(name: "delimiter", arg: 3, scope: !220, file: !2, line: 325, type: !60)
!227 = !DILocalVariable(name: "max", arg: 4, scope: !220, file: !2, line: 325, type: !67)
!228 = !DILocalVariable(name: "skip_empty", arg: 5, scope: !220, file: !2, line: 325, type: !115)
!229 = !DILocation(line: 322, scope: !230)
!230 = distinct !DILexicalBlock(scope: !220, file: !2, line: 326, column: 1)
!231 = !DILocalVariable(name: "capacity", scope: !220, file: !2, line: 327, type: !67, align: 8)
!232 = !DILocation(line: 327, scope: !220)
!233 = !DILocalVariable(name: "i", scope: !220, file: !2, line: 328, type: !67, align: 8)
!234 = !DILocation(line: 328, scope: !220)
!235 = !DILocalVariable(name: "holder", scope: !220, file: !2, line: 329, type: !130, align: 8)
!236 = !DILocation(line: 329, scope: !220)
!237 = !DILocation(line: 304, scope: !238, inlinedAt: !240)
!238 = distinct !DISubprogram(name: "alloc_array_try", linkageName: "alloc_array_try", scope: !239, file: !239, line: 302, scopeLine: 302, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!239 = !DIFile(filename: "mem_allocator.c3", directory: "C:/Compilers/C3/lib/std/core")
!240 = !DILocation(line: 287, scope: !241, inlinedAt: !236)
!241 = distinct !DISubprogram(name: "alloc_array", linkageName: "alloc_array", scope: !239, file: !239, line: 285, scopeLine: 285, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!242 = !DILocation(line: 80, scope: !243, inlinedAt: !237)
!243 = distinct !DISubprogram(name: "malloc_try", linkageName: "malloc_try", scope: !239, file: !239, line: 78, scopeLine: 78, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!244 = !DILocation(line: 86, scope: !243, inlinedAt: !237)
!245 = !DILocation(line: 38, scope: !243, inlinedAt: !237)
!246 = !DILocation(line: 975, scope: !247, inlinedAt: !245)
!247 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !248, file: !248, line: 973, scopeLine: 973, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!248 = !DIFile(filename: "math.c3", directory: "C:/Compilers/C3/lib/std/math")
!249 = !DILocalVariable(name: "no_more", scope: !220, file: !2, line: 330, type: !115, align: 1)
!250 = !DILocation(line: 330, scope: !220)
!251 = !DILocation(line: 331, scope: !220)
!252 = !DILocation(line: 331, scope: !253)
!253 = distinct !DILexicalBlock(scope: !220, file: !2, line: 331, column: 2)
!254 = !DILocalVariable(name: "index", scope: !255, file: !2, line: 333, type: !68, align: 8)
!255 = distinct !DILexicalBlock(scope: !253, file: !2, line: 332, column: 2)
!256 = !DILocation(line: 333, scope: !255)
!257 = !DILocation(line: 552, scope: !255)
!258 = !DILocalVariable(name: "res", scope: !255, file: !2, line: 334, type: !60, align: 8)
!259 = !DILocation(line: 334, scope: !255)
!260 = !DILocation(line: 335, scope: !255)
!261 = !DILocation(line: 337, scope: !262)
!262 = distinct !DILexicalBlock(scope: !255, file: !2, line: 336, column: 3)
!263 = !DILocation(line: 338, scope: !262)
!264 = !DILocation(line: 342, scope: !265)
!265 = distinct !DILexicalBlock(scope: !255, file: !2, line: 341, column: 3)
!266 = !DILocation(line: 343, scope: !265)
!267 = !DILocation(line: 345, scope: !255)
!268 = !DILocation(line: 347, scope: !269)
!269 = distinct !DILexicalBlock(scope: !255, file: !2, line: 346, column: 9)
!270 = !DILocation(line: 350, scope: !255)
!271 = !DILocation(line: 352, scope: !272)
!272 = distinct !DILexicalBlock(scope: !255, file: !2, line: 351, column: 3)
!273 = !DILocation(line: 353, scope: !272)
!274 = !DILocation(line: 108, scope: !275, inlinedAt: !276)
!275 = distinct !DISubprogram(name: "realloc_try", linkageName: "realloc_try", scope: !239, file: !239, line: 106, scopeLine: 106, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!276 = !DILocation(line: 103, scope: !277, inlinedAt: !273)
!277 = distinct !DISubprogram(name: "realloc", linkageName: "realloc", scope: !239, file: !239, line: 101, scopeLine: 101, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!278 = !DILocation(line: 119, scope: !279, inlinedAt: !280)
!279 = distinct !DISubprogram(name: "free", linkageName: "free", scope: !239, file: !239, line: 117, scopeLine: 117, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!280 = !DILocation(line: 110, scope: !281, inlinedAt: !276)
!281 = distinct !DILexicalBlock(scope: !275, file: !239, line: 109, column: 2)
!282 = !DILocation(line: 123, scope: !279, inlinedAt: !280)
!283 = !DILocation(line: 111, scope: !281, inlinedAt: !276)
!284 = !DILocation(line: 113, scope: !275, inlinedAt: !276)
!285 = !DILocation(line: 38, scope: !275, inlinedAt: !276)
!286 = !DILocation(line: 975, scope: !287, inlinedAt: !285)
!287 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !248, file: !248, line: 973, scopeLine: 973, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!288 = !DILocation(line: 114, scope: !275, inlinedAt: !276)
!289 = !DILocation(line: 48, scope: !275, inlinedAt: !276)
!290 = !DILocation(line: 975, scope: !291, inlinedAt: !289)
!291 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !248, file: !248, line: 973, scopeLine: 973, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!292 = !DILocation(line: 355, scope: !255)
!293 = !DILocation(line: 357, scope: !220)
!294 = !DILocation(line: 323, scope: !220)
!295 = distinct !DISubprogram(name: "tsplit", linkageName: "std.core.String.tsplit", scope: !2, file: !2, line: 370, type: !296, scopeLine: 370, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !87)
!296 = !DISubroutineType(types: !297)
!297 = !{!127, !60, !60, !68, !115}
!298 = !DILocalVariable(name: "s", arg: 1, scope: !295, file: !2, line: 370, type: !60)
!299 = !DILocation(line: 370, scope: !295)
!300 = !DILocalVariable(name: "delimiter", arg: 2, scope: !295, file: !2, line: 370, type: !60)
!301 = !DILocalVariable(name: "max", arg: 3, scope: !295, file: !2, line: 370, type: !67)
!302 = !DILocalVariable(name: "skip_empty", arg: 4, scope: !295, file: !2, line: 370, type: !115)
!303 = !DILocation(line: 322, scope: !295)
!304 = distinct !DISubprogram(name: "split_to_buffer", linkageName: "std.core.String.split_to_buffer", scope: !2, file: !2, line: 385, type: !305, scopeLine: 385, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !87)
!305 = !DISubroutineType(types: !306)
!306 = !{!307, !309, !60, !60, !127, !68, !115}
!307 = !DIDerivedType(tag: DW_TAG_typedef, name: "fault", baseType: !308)
!308 = !DIBasicType(name: "long", size: 64, encoding: DW_ATE_signed)
!309 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "String[]*", baseType: !127, size: 64, align: 64, dwarfAddressSpace: 0)
!310 = !DILocalVariable(name: "s", arg: 1, scope: !304, file: !2, line: 385, type: !60)
!311 = !DILocation(line: 385, scope: !304)
!312 = !DILocalVariable(name: "delimiter", arg: 2, scope: !304, file: !2, line: 385, type: !60)
!313 = !DILocalVariable(name: "buffer", arg: 3, scope: !304, file: !2, line: 385, type: !127)
!314 = !DILocalVariable(name: "max", arg: 4, scope: !304, file: !2, line: 385, type: !67)
!315 = !DILocalVariable(name: "skip_empty", arg: 5, scope: !304, file: !2, line: 385, type: !115)
!316 = !DILocation(line: 381, scope: !317)
!317 = distinct !DILexicalBlock(scope: !304, file: !2, line: 386, column: 1)
!318 = !DILocalVariable(name: "max_capacity", scope: !304, file: !2, line: 387, type: !67, align: 8)
!319 = !DILocation(line: 387, scope: !304)
!320 = !DILocalVariable(name: "i", scope: !304, file: !2, line: 388, type: !67, align: 8)
!321 = !DILocation(line: 388, scope: !304)
!322 = !DILocalVariable(name: "no_more", scope: !304, file: !2, line: 389, type: !115, align: 1)
!323 = !DILocation(line: 389, scope: !304)
!324 = !DILocation(line: 390, scope: !304)
!325 = !DILocation(line: 390, scope: !326)
!326 = distinct !DILexicalBlock(scope: !304, file: !2, line: 390, column: 2)
!327 = !DILocalVariable(name: "index", scope: !328, file: !2, line: 392, type: !68, align: 8)
!328 = distinct !DILexicalBlock(scope: !326, file: !2, line: 391, column: 2)
!329 = !DILocation(line: 392, scope: !328)
!330 = !DILocation(line: 552, scope: !328)
!331 = !DILocalVariable(name: "res", scope: !328, file: !2, line: 393, type: !60, align: 8)
!332 = !DILocation(line: 393, scope: !328)
!333 = !DILocation(line: 394, scope: !328)
!334 = !DILocation(line: 396, scope: !335)
!335 = distinct !DILexicalBlock(scope: !328, file: !2, line: 395, column: 3)
!336 = !DILocation(line: 397, scope: !335)
!337 = !DILocation(line: 401, scope: !338)
!338 = distinct !DILexicalBlock(scope: !328, file: !2, line: 400, column: 3)
!339 = !DILocation(line: 402, scope: !338)
!340 = !DILocation(line: 404, scope: !328)
!341 = !DILocation(line: 406, scope: !342)
!342 = distinct !DILexicalBlock(scope: !328, file: !2, line: 405, column: 3)
!343 = !DILocation(line: 408, scope: !328)
!344 = !DILocation(line: 410, scope: !345)
!345 = distinct !DILexicalBlock(scope: !328, file: !2, line: 409, column: 3)
!346 = !DILocation(line: 412, scope: !328)
!347 = !DILocation(line: 414, scope: !304)
!348 = !DILocation(line: 382, scope: !304)
!349 = distinct !DISubprogram(name: "contains", linkageName: "std.core.String.contains", scope: !2, file: !2, line: 425, type: !193, scopeLine: 425, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !87)
!350 = !DILocalVariable(name: "s", arg: 1, scope: !349, file: !2, line: 425, type: !60)
!351 = !DILocation(line: 425, scope: !349)
!352 = !DILocalVariable(name: "substr", arg: 2, scope: !349, file: !2, line: 425, type: !60)
!353 = !DILocation(line: 427, scope: !354, inlinedAt: !356)
!354 = distinct !DISubprogram(name: "@ok", linkageName: "@ok", scope: !355, file: !355, line: 432, scopeLine: 432, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!355 = !DIFile(filename: "builtin.c3", directory: "C:/Compilers/C3/lib/std/core")
!356 = !DILocation(line: 427, scope: !349)
!357 = !DILocation(line: 552, scope: !354, inlinedAt: !356)
!358 = !DILocation(line: 434, scope: !354, inlinedAt: !356)
!359 = !DILocation(line: 435, scope: !354, inlinedAt: !356)
!360 = distinct !DISubprogram(name: "count", linkageName: "std.core.String.count", scope: !2, file: !2, line: 440, type: !361, scopeLine: 440, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !87)
!361 = !DISubroutineType(types: !362)
!362 = !{!67, !60, !60}
!363 = !DILocalVariable(name: "self", arg: 1, scope: !360, file: !2, line: 440, type: !60)
!364 = !DILocation(line: 440, scope: !360)
!365 = !DILocalVariable(name: "substr", arg: 2, scope: !360, file: !2, line: 440, type: !60)
!366 = !DILocalVariable(name: "count", scope: !360, file: !2, line: 442, type: !67, align: 8)
!367 = !DILocation(line: 442, scope: !360)
!368 = !DILocalVariable(name: "needed", scope: !360, file: !2, line: 443, type: !67, align: 8)
!369 = !DILocation(line: 443, scope: !360)
!370 = !DILocation(line: 444, scope: !360)
!371 = !DILocalVariable(name: "first", scope: !360, file: !2, line: 445, type: !65, align: 1)
!372 = !DILocation(line: 445, scope: !360)
!373 = !DILocation(line: 446, scope: !360)
!374 = !DILocation(line: 446, scope: !375)
!375 = distinct !DILexicalBlock(scope: !360, file: !2, line: 446, column: 5)
!376 = !DILocation(line: 448, scope: !377)
!377 = distinct !DILexicalBlock(scope: !378, file: !2, line: 448, column: 6)
!378 = distinct !DILexicalBlock(scope: !375, file: !2, line: 447, column: 5)
!379 = !DILocalVariable(name: ".temp", scope: !377, file: !2, line: 448, type: !67, align: 8)
!380 = !DILocalVariable(name: "i", scope: !381, file: !2, line: 448, type: !67, align: 8)
!381 = distinct !DILexicalBlock(scope: !377, file: !2, line: 449, column: 6)
!382 = !DILocation(line: 448, scope: !381)
!383 = !DILocalVariable(name: "c", scope: !381, file: !2, line: 448, type: !65, align: 1)
!384 = !DILocation(line: 450, scope: !385)
!385 = distinct !DILexicalBlock(scope: !381, file: !2, line: 449, column: 6)
!386 = !DILocation(line: 452, scope: !387)
!387 = distinct !DILexicalBlock(scope: !385, file: !2, line: 451, column: 7)
!388 = !DILocation(line: 453, scope: !387)
!389 = !DILocation(line: 454, scope: !387)
!390 = !DILocation(line: 457, scope: !378)
!391 = !DILocation(line: 459, scope: !360)
!392 = distinct !DISubprogram(name: "index_of_char", linkageName: "std.core.String.index_of_char", scope: !2, file: !2, line: 472, type: !393, scopeLine: 472, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !87)
!393 = !DISubroutineType(types: !394)
!394 = !{!307, !395, !60, !65}
!395 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "usz*", baseType: !67, size: 64, align: 64, dwarfAddressSpace: 0)
!396 = !DILocalVariable(name: "self", arg: 1, scope: !392, file: !2, line: 472, type: !60)
!397 = !DILocation(line: 472, scope: !392)
!398 = !DILocalVariable(name: "character", arg: 2, scope: !392, file: !2, line: 472, type: !65)
!399 = !DILocation(line: 474, scope: !400)
!400 = distinct !DILexicalBlock(scope: !392, file: !2, line: 474, column: 2)
!401 = !DILocalVariable(name: ".temp", scope: !400, file: !2, line: 474, type: !67, align: 8)
!402 = !DILocalVariable(name: "i", scope: !403, file: !2, line: 474, type: !67, align: 8)
!403 = distinct !DILexicalBlock(scope: !400, file: !2, line: 475, column: 2)
!404 = !DILocation(line: 474, scope: !403)
!405 = !DILocalVariable(name: "c", scope: !403, file: !2, line: 474, type: !65, align: 1)
!406 = !DILocation(line: 476, scope: !407)
!407 = distinct !DILexicalBlock(scope: !403, file: !2, line: 475, column: 2)
!408 = !DILocation(line: 468, scope: !407)
!409 = !DILocation(line: 478, scope: !392)
!410 = distinct !DISubprogram(name: "index_of_chars", linkageName: "std.core.String.index_of_chars", scope: !2, file: !2, line: 491, type: !411, scopeLine: 491, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !87)
!411 = !DISubroutineType(types: !412)
!412 = !{!307, !395, !60, !61}
!413 = !DILocalVariable(name: "self", arg: 1, scope: !410, file: !2, line: 491, type: !60)
!414 = !DILocation(line: 491, scope: !410)
!415 = !DILocalVariable(name: "characters", arg: 2, scope: !410, file: !2, line: 491, type: !61)
!416 = !DILocation(line: 493, scope: !417)
!417 = distinct !DILexicalBlock(scope: !410, file: !2, line: 493, column: 5)
!418 = !DILocalVariable(name: ".temp", scope: !417, file: !2, line: 493, type: !67, align: 8)
!419 = !DILocalVariable(name: "i", scope: !420, file: !2, line: 493, type: !67, align: 8)
!420 = distinct !DILexicalBlock(scope: !417, file: !2, line: 494, column: 5)
!421 = !DILocation(line: 493, scope: !420)
!422 = !DILocalVariable(name: "c", scope: !420, file: !2, line: 493, type: !65, align: 1)
!423 = !DILocation(line: 495, scope: !424)
!424 = distinct !DILexicalBlock(scope: !425, file: !2, line: 495, column: 9)
!425 = distinct !DILexicalBlock(scope: !420, file: !2, line: 494, column: 5)
!426 = !DILocalVariable(name: ".temp", scope: !424, file: !2, line: 495, type: !67, align: 8)
!427 = !DILocalVariable(name: "j", scope: !428, file: !2, line: 495, type: !67, align: 8)
!428 = distinct !DILexicalBlock(scope: !424, file: !2, line: 496, column: 9)
!429 = !DILocation(line: 495, scope: !428)
!430 = !DILocalVariable(name: "pin", scope: !428, file: !2, line: 495, type: !65, align: 1)
!431 = !DILocation(line: 497, scope: !432)
!432 = distinct !DILexicalBlock(scope: !428, file: !2, line: 496, column: 9)
!433 = !DILocation(line: 487, scope: !432)
!434 = !DILocation(line: 501, scope: !410)
!435 = distinct !DISubprogram(name: "index_of_char_from", linkageName: "std.core.String.index_of_char_from", scope: !2, file: !2, line: 515, type: !436, scopeLine: 515, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !87)
!436 = !DISubroutineType(types: !437)
!437 = !{!307, !395, !60, !65, !68}
!438 = !DILocalVariable(name: "self", arg: 1, scope: !435, file: !2, line: 515, type: !60)
!439 = !DILocation(line: 515, scope: !435)
!440 = !DILocalVariable(name: "character", arg: 2, scope: !435, file: !2, line: 515, type: !65)
!441 = !DILocalVariable(name: "start_index", arg: 3, scope: !435, file: !2, line: 515, type: !67)
!442 = !DILocalVariable(name: "len", scope: !435, file: !2, line: 517, type: !67, align: 8)
!443 = !DILocation(line: 517, scope: !435)
!444 = !DILocation(line: 518, scope: !435)
!445 = !DILocalVariable(name: "i", scope: !446, file: !2, line: 519, type: !67, align: 8)
!446 = distinct !DILexicalBlock(scope: !435, file: !2, line: 519, column: 2)
!447 = !DILocation(line: 519, scope: !446)
!448 = !DILocation(line: 521, scope: !449)
!449 = distinct !DILexicalBlock(scope: !446, file: !2, line: 520, column: 2)
!450 = !DILocation(line: 511, scope: !449)
!451 = !DILocation(line: 523, scope: !435)
!452 = distinct !DISubprogram(name: "rindex_of_char", linkageName: "std.core.String.rindex_of_char", scope: !2, file: !2, line: 536, type: !393, scopeLine: 536, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !87)
!453 = !DILocalVariable(name: "self", arg: 1, scope: !452, file: !2, line: 536, type: !60)
!454 = !DILocation(line: 536, scope: !452)
!455 = !DILocalVariable(name: "character", arg: 2, scope: !452, file: !2, line: 536, type: !65)
!456 = !DILocalVariable(name: ".temp", scope: !457, file: !2, line: 538, type: !67, align: 8)
!457 = distinct !DILexicalBlock(scope: !452, file: !2, line: 538, column: 2)
!458 = !DILocation(line: 538, scope: !457)
!459 = !DILocation(line: 538, scope: !460)
!460 = distinct !DILexicalBlock(scope: !457, file: !2, line: 539, column: 2)
!461 = !DILocalVariable(name: "i", scope: !460, file: !2, line: 538, type: !67, align: 8)
!462 = !DILocalVariable(name: "c", scope: !460, file: !2, line: 538, type: !65, align: 1)
!463 = !DILocation(line: 540, scope: !464)
!464 = distinct !DILexicalBlock(scope: !460, file: !2, line: 539, column: 2)
!465 = !DILocation(line: 532, scope: !464)
!466 = !DILocation(line: 542, scope: !452)
!467 = distinct !DISubprogram(name: "index_of", linkageName: "std.core.String.index_of", scope: !2, file: !2, line: 556, type: !468, scopeLine: 556, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !87)
!468 = !DISubroutineType(types: !469)
!469 = !{!307, !395, !60, !60}
!470 = !DILocalVariable(name: "self", arg: 1, scope: !467, file: !2, line: 556, type: !60)
!471 = !DILocation(line: 556, scope: !467)
!472 = !DILocalVariable(name: "substr", arg: 2, scope: !467, file: !2, line: 556, type: !60)
!473 = !DILocation(line: 552, scope: !474)
!474 = distinct !DILexicalBlock(scope: !467, file: !2, line: 557, column: 1)
!475 = !DILocalVariable(name: "needed", scope: !467, file: !2, line: 558, type: !67, align: 8)
!476 = !DILocation(line: 558, scope: !467)
!477 = !DILocation(line: 559, scope: !467)
!478 = !DILocalVariable(name: "first", scope: !479, file: !2, line: 561, type: !65, align: 1)
!479 = distinct !DILexicalBlock(scope: !467, file: !2, line: 560, column: 2)
!480 = !DILocation(line: 561, scope: !479)
!481 = !DILocation(line: 562, scope: !482)
!482 = distinct !DILexicalBlock(scope: !479, file: !2, line: 562, column: 3)
!483 = !DILocalVariable(name: ".temp", scope: !482, file: !2, line: 562, type: !67, align: 8)
!484 = !DILocalVariable(name: "i", scope: !485, file: !2, line: 562, type: !67, align: 8)
!485 = distinct !DILexicalBlock(scope: !482, file: !2, line: 563, column: 3)
!486 = !DILocation(line: 562, scope: !485)
!487 = !DILocalVariable(name: "c", scope: !485, file: !2, line: 562, type: !65, align: 1)
!488 = !DILocation(line: 564, scope: !489)
!489 = distinct !DILexicalBlock(scope: !485, file: !2, line: 563, column: 3)
!490 = !DILocation(line: 551, scope: !489)
!491 = !DILocation(line: 567, scope: !467)
!492 = distinct !DISubprogram(name: "rindex_of", linkageName: "std.core.String.rindex_of", scope: !2, file: !2, line: 581, type: !468, scopeLine: 581, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !87)
!493 = !DILocalVariable(name: "self", arg: 1, scope: !492, file: !2, line: 581, type: !60)
!494 = !DILocation(line: 581, scope: !492)
!495 = !DILocalVariable(name: "substr", arg: 2, scope: !492, file: !2, line: 581, type: !60)
!496 = !DILocation(line: 577, scope: !497)
!497 = distinct !DILexicalBlock(scope: !492, file: !2, line: 582, column: 1)
!498 = !DILocalVariable(name: "needed", scope: !492, file: !2, line: 583, type: !67, align: 8)
!499 = !DILocation(line: 583, scope: !492)
!500 = !DILocation(line: 584, scope: !492)
!501 = !DILocalVariable(name: "first", scope: !502, file: !2, line: 586, type: !65, align: 1)
!502 = distinct !DILexicalBlock(scope: !492, file: !2, line: 585, column: 2)
!503 = !DILocation(line: 586, scope: !502)
!504 = !DILocation(line: 587, scope: !505)
!505 = distinct !DILexicalBlock(scope: !502, file: !2, line: 587, column: 3)
!506 = !DILocalVariable(name: ".temp", scope: !505, file: !2, line: 587, type: !67, align: 8)
!507 = !DILocation(line: 587, scope: !508)
!508 = distinct !DILexicalBlock(scope: !505, file: !2, line: 588, column: 3)
!509 = !DILocalVariable(name: "i", scope: !508, file: !2, line: 587, type: !67, align: 8)
!510 = !DILocalVariable(name: "c", scope: !508, file: !2, line: 587, type: !65, align: 1)
!511 = !DILocation(line: 589, scope: !512)
!512 = distinct !DILexicalBlock(scope: !508, file: !2, line: 588, column: 3)
!513 = !DILocation(line: 576, scope: !512)
!514 = !DILocation(line: 592, scope: !492)
!515 = distinct !DISubprogram(name: "eq", linkageName: "std.core.string.ZString.eq", scope: !2, file: !2, line: 595, type: !516, scopeLine: 595, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !87)
!516 = !DISubroutineType(types: !517)
!517 = !{!115, !518, !518}
!518 = !DIDerivedType(tag: DW_TAG_typedef, name: "ZString", scope: !2, file: !2, line: 12, baseType: !64, align: 8)
!519 = !DILocalVariable(name: "self", arg: 1, scope: !515, file: !2, line: 595, type: !518)
!520 = !DILocation(line: 595, scope: !515)
!521 = !DILocalVariable(name: "other", arg: 2, scope: !515, file: !2, line: 595, type: !518)
!522 = !DILocalVariable(name: "a", scope: !515, file: !2, line: 597, type: !64, align: 8)
!523 = !DILocation(line: 597, scope: !515)
!524 = !DILocalVariable(name: "b", scope: !515, file: !2, line: 598, type: !64, align: 8)
!525 = !DILocation(line: 598, scope: !515)
!526 = !DILocation(line: 599, scope: !515)
!527 = !DILocation(line: 600, scope: !515)
!528 = !DILocation(line: 601, scope: !515)
!529 = !DILocalVariable(name: "c", scope: !530, file: !2, line: 603, type: !65, align: 1)
!530 = distinct !DILexicalBlock(scope: !531, file: !2, line: 602, column: 2)
!531 = distinct !DILexicalBlock(scope: !515, file: !2, line: 601, column: 2)
!532 = !DILocation(line: 603, scope: !530)
!533 = !DILocation(line: 604, scope: !530)
!534 = !DILocation(line: 605, scope: !530)
!535 = !DILocation(line: 601, scope: !531)
!536 = distinct !DISubprogram(name: "str_view", linkageName: "std.core.string.ZString.str_view", scope: !2, file: !2, line: 609, type: !537, scopeLine: 609, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !87)
!537 = !DISubroutineType(types: !538)
!538 = !{!60, !518}
!539 = !DILocalVariable(name: "self", arg: 1, scope: !536, file: !2, line: 609, type: !518)
!540 = !DILocation(line: 609, scope: !536)
!541 = !DILocation(line: 611, scope: !536)
!542 = distinct !DISubprogram(name: "char_len", linkageName: "std.core.string.ZString.char_len", scope: !2, file: !2, line: 614, type: !543, scopeLine: 614, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !87)
!543 = !DISubroutineType(types: !544)
!544 = !{!67, !518}
!545 = !DILocalVariable(name: "str", arg: 1, scope: !542, file: !2, line: 614, type: !518)
!546 = !DILocation(line: 614, scope: !542)
!547 = !DILocalVariable(name: "len", scope: !542, file: !2, line: 616, type: !67, align: 8)
!548 = !DILocation(line: 616, scope: !542)
!549 = !DILocalVariable(name: "ptr", scope: !542, file: !2, line: 617, type: !64, align: 8)
!550 = !DILocation(line: 617, scope: !542)
!551 = !DILocation(line: 618, scope: !542)
!552 = !DILocalVariable(name: "c", scope: !553, file: !2, line: 618, type: !65, align: 1)
!553 = distinct !DILexicalBlock(scope: !542, file: !2, line: 618, column: 2)
!554 = !DILocation(line: 618, scope: !553)
!555 = !DILocation(line: 620, scope: !556)
!556 = distinct !DILexicalBlock(scope: !553, file: !2, line: 619, column: 2)
!557 = !DILocation(line: 622, scope: !542)
!558 = distinct !DISubprogram(name: "len", linkageName: "std.core.string.ZString.len", scope: !2, file: !2, line: 625, type: !543, scopeLine: 625, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !87)
!559 = !DILocalVariable(name: "self", arg: 1, scope: !558, file: !2, line: 625, type: !518)
!560 = !DILocation(line: 625, scope: !558)
!561 = !DILocalVariable(name: "len", scope: !558, file: !2, line: 627, type: !67, align: 8)
!562 = !DILocation(line: 627, scope: !558)
!563 = !DILocalVariable(name: "ptr", scope: !564, file: !2, line: 628, type: !64, align: 8)
!564 = distinct !DILexicalBlock(scope: !558, file: !2, line: 628, column: 2)
!565 = !DILocation(line: 628, scope: !564)
!566 = !DILocation(line: 629, scope: !558)
!567 = distinct !DISubprogram(name: "len", linkageName: "std.core.string.WString.len", scope: !2, file: !2, line: 632, type: !568, scopeLine: 632, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !87)
!568 = !DISubroutineType(types: !569)
!569 = !{!67, !570}
!570 = !DIDerivedType(tag: DW_TAG_typedef, name: "WString", scope: !2, file: !2, line: 23, baseType: !571, align: 8)
!571 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "ushort*", baseType: !572, size: 64, align: 64, dwarfAddressSpace: 0)
!572 = !DIBasicType(name: "ushort", size: 16, encoding: DW_ATE_unsigned)
!573 = !DILocalVariable(name: "self", arg: 1, scope: !567, file: !2, line: 632, type: !570)
!574 = !DILocation(line: 632, scope: !567)
!575 = !DILocalVariable(name: "len", scope: !567, file: !2, line: 634, type: !67, align: 8)
!576 = !DILocation(line: 634, scope: !567)
!577 = !DILocalVariable(name: "ptr", scope: !578, file: !2, line: 635, type: !579, align: 8)
!578 = distinct !DILexicalBlock(scope: !567, file: !2, line: 635, column: 2)
!579 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Char16*", baseType: !580, size: 64, align: 64, dwarfAddressSpace: 0)
!580 = !DIDerivedType(tag: DW_TAG_typedef, name: "Char16", scope: !2, file: !2, line: 33, baseType: !572, align: 2)
!581 = !DILocation(line: 635, scope: !578)
!582 = !DILocation(line: 636, scope: !567)
!583 = distinct !DISubprogram(name: "zstr_copy", linkageName: "std.core.String.zstr_copy", scope: !2, file: !2, line: 639, type: !584, scopeLine: 639, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !87)
!584 = !DISubroutineType(types: !585)
!585 = !{!518, !60, !81}
!586 = !DILocalVariable(name: "self", arg: 1, scope: !583, file: !2, line: 639, type: !60)
!587 = !DILocation(line: 639, scope: !583)
!588 = !DILocalVariable(name: "allocator", arg: 2, scope: !583, file: !2, line: 639, type: !81)
!589 = !DILocalVariable(name: "len", scope: !583, file: !2, line: 641, type: !67, align: 8)
!590 = !DILocation(line: 641, scope: !583)
!591 = !DILocalVariable(name: "str", scope: !583, file: !2, line: 642, type: !64, align: 8)
!592 = !DILocation(line: 642, scope: !583)
!593 = !DILocation(line: 80, scope: !594, inlinedAt: !595)
!594 = distinct !DISubprogram(name: "malloc_try", linkageName: "malloc_try", scope: !239, file: !239, line: 78, scopeLine: 78, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!595 = !DILocation(line: 75, scope: !596, inlinedAt: !592)
!596 = distinct !DISubprogram(name: "malloc", linkageName: "malloc", scope: !239, file: !239, line: 73, scopeLine: 73, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!597 = !DILocation(line: 86, scope: !594, inlinedAt: !595)
!598 = !DILocation(line: 38, scope: !594, inlinedAt: !595)
!599 = !DILocation(line: 975, scope: !600, inlinedAt: !598)
!600 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !248, file: !248, line: 973, scopeLine: 973, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!601 = !DILocation(line: 643, scope: !583)
!602 = !DILocation(line: 357, scope: !603, inlinedAt: !601)
!603 = distinct !DILexicalBlock(scope: !604, file: !95, line: 358, column: 1)
!604 = distinct !DISubprogram(name: "copy", linkageName: "copy", scope: !95, file: !95, line: 357, scopeLine: 357, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!605 = !DILocation(line: 354, scope: !603, inlinedAt: !601)
!606 = !DILocation(line: 643, scope: !603, inlinedAt: !601)
!607 = !DILocation(line: 355, scope: !603, inlinedAt: !601)
!608 = !DILocation(line: 359, scope: !604, inlinedAt: !601)
!609 = !DILocation(line: 644, scope: !583)
!610 = !DILocation(line: 645, scope: !583)
!611 = distinct !DISubprogram(name: "concat", linkageName: "std.core.String.concat", scope: !2, file: !2, line: 648, type: !612, scopeLine: 648, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !87)
!612 = !DISubroutineType(types: !613)
!613 = !{!60, !60, !81, !60}
!614 = !DILocalVariable(name: "self", arg: 1, scope: !611, file: !2, line: 648, type: !60)
!615 = !DILocation(line: 648, scope: !611)
!616 = !DILocalVariable(name: "allocator", arg: 2, scope: !611, file: !2, line: 648, type: !81)
!617 = !DILocalVariable(name: "s2", arg: 3, scope: !611, file: !2, line: 648, type: !60)
!618 = !DILocalVariable(name: "full_len", scope: !611, file: !2, line: 650, type: !67, align: 8)
!619 = !DILocation(line: 650, scope: !611)
!620 = !DILocalVariable(name: "str", scope: !611, file: !2, line: 651, type: !64, align: 8)
!621 = !DILocation(line: 651, scope: !611)
!622 = !DILocation(line: 80, scope: !623, inlinedAt: !624)
!623 = distinct !DISubprogram(name: "malloc_try", linkageName: "malloc_try", scope: !239, file: !239, line: 78, scopeLine: 78, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!624 = !DILocation(line: 75, scope: !625, inlinedAt: !621)
!625 = distinct !DISubprogram(name: "malloc", linkageName: "malloc", scope: !239, file: !239, line: 73, scopeLine: 73, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!626 = !DILocation(line: 86, scope: !623, inlinedAt: !624)
!627 = !DILocation(line: 38, scope: !623, inlinedAt: !624)
!628 = !DILocation(line: 975, scope: !629, inlinedAt: !627)
!629 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !248, file: !248, line: 973, scopeLine: 973, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!630 = !DILocalVariable(name: "self_len", scope: !611, file: !2, line: 652, type: !67, align: 8)
!631 = !DILocation(line: 652, scope: !611)
!632 = !DILocation(line: 653, scope: !611)
!633 = !DILocation(line: 357, scope: !634, inlinedAt: !632)
!634 = distinct !DILexicalBlock(scope: !635, file: !95, line: 358, column: 1)
!635 = distinct !DISubprogram(name: "copy", linkageName: "copy", scope: !95, file: !95, line: 357, scopeLine: 357, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!636 = !DILocation(line: 354, scope: !634, inlinedAt: !632)
!637 = !DILocation(line: 653, scope: !634, inlinedAt: !632)
!638 = !DILocation(line: 355, scope: !634, inlinedAt: !632)
!639 = !DILocation(line: 359, scope: !635, inlinedAt: !632)
!640 = !DILocation(line: 654, scope: !611)
!641 = !DILocation(line: 357, scope: !642, inlinedAt: !640)
!642 = distinct !DILexicalBlock(scope: !643, file: !95, line: 358, column: 1)
!643 = distinct !DISubprogram(name: "copy", linkageName: "copy", scope: !95, file: !95, line: 357, scopeLine: 357, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!644 = !DILocation(line: 354, scope: !642, inlinedAt: !640)
!645 = !DILocation(line: 654, scope: !642, inlinedAt: !640)
!646 = !DILocation(line: 355, scope: !642, inlinedAt: !640)
!647 = !DILocation(line: 359, scope: !643, inlinedAt: !640)
!648 = !DILocation(line: 655, scope: !611)
!649 = !DILocation(line: 656, scope: !611)
!650 = distinct !DISubprogram(name: "tconcat", linkageName: "std.core.String.tconcat", scope: !2, file: !2, line: 659, type: !147, scopeLine: 659, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !87)
!651 = !DILocalVariable(name: "self", arg: 1, scope: !650, file: !2, line: 659, type: !60)
!652 = !DILocation(line: 659, scope: !650)
!653 = !DILocalVariable(name: "s2", arg: 2, scope: !650, file: !2, line: 659, type: !60)
!654 = distinct !DISubprogram(name: "zstr_tcopy", linkageName: "std.core.String.zstr_tcopy", scope: !2, file: !2, line: 662, type: !655, scopeLine: 662, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !87)
!655 = !DISubroutineType(types: !656)
!656 = !{!518, !60}
!657 = !DILocalVariable(name: "self", arg: 1, scope: !654, file: !2, line: 662, type: !60)
!658 = !DILocation(line: 662, scope: !654)
!659 = distinct !DISubprogram(name: "copy", linkageName: "std.core.String.copy", scope: !2, file: !2, line: 669, type: !660, scopeLine: 669, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !87)
!660 = !DISubroutineType(types: !661)
!661 = !{!60, !60, !81}
!662 = !DILocalVariable(name: "self", arg: 1, scope: !659, file: !2, line: 669, type: !60)
!663 = !DILocation(line: 669, scope: !659)
!664 = !DILocalVariable(name: "allocator", arg: 2, scope: !659, file: !2, line: 669, type: !81)
!665 = !DILocalVariable(name: "len", scope: !659, file: !2, line: 671, type: !67, align: 8)
!666 = !DILocation(line: 671, scope: !659)
!667 = !DILocalVariable(name: "str", scope: !659, file: !2, line: 672, type: !64, align: 8)
!668 = !DILocation(line: 672, scope: !659)
!669 = !DILocation(line: 80, scope: !670, inlinedAt: !671)
!670 = distinct !DISubprogram(name: "malloc_try", linkageName: "malloc_try", scope: !239, file: !239, line: 78, scopeLine: 78, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!671 = !DILocation(line: 75, scope: !672, inlinedAt: !668)
!672 = distinct !DISubprogram(name: "malloc", linkageName: "malloc", scope: !239, file: !239, line: 73, scopeLine: 73, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!673 = !DILocation(line: 86, scope: !670, inlinedAt: !671)
!674 = !DILocation(line: 38, scope: !670, inlinedAt: !671)
!675 = !DILocation(line: 975, scope: !676, inlinedAt: !674)
!676 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !248, file: !248, line: 973, scopeLine: 973, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!677 = !DILocation(line: 673, scope: !659)
!678 = !DILocation(line: 357, scope: !679, inlinedAt: !677)
!679 = distinct !DILexicalBlock(scope: !680, file: !95, line: 358, column: 1)
!680 = distinct !DISubprogram(name: "copy", linkageName: "copy", scope: !95, file: !95, line: 357, scopeLine: 357, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!681 = !DILocation(line: 354, scope: !679, inlinedAt: !677)
!682 = !DILocation(line: 673, scope: !679, inlinedAt: !677)
!683 = !DILocation(line: 355, scope: !679, inlinedAt: !677)
!684 = !DILocation(line: 359, scope: !680, inlinedAt: !677)
!685 = !DILocation(line: 674, scope: !659)
!686 = !DILocation(line: 675, scope: !659)
!687 = distinct !DISubprogram(name: "free", linkageName: "std.core.String.free", scope: !2, file: !2, line: 678, type: !688, scopeLine: 678, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !87)
!688 = !DISubroutineType(types: !689)
!689 = !{null, !130, !81}
!690 = !DILocation(line: 679, scope: !687)
!691 = !DILocalVariable(name: "self", arg: 1, scope: !687, file: !2, line: 678, type: !130)
!692 = !DILocation(line: 678, scope: !687)
!693 = !DILocalVariable(name: "allocator", arg: 2, scope: !687, file: !2, line: 678, type: !81)
!694 = !DILocation(line: 680, scope: !687)
!695 = !DILocation(line: 681, scope: !687)
!696 = !DILocation(line: 119, scope: !697, inlinedAt: !695)
!697 = distinct !DISubprogram(name: "free", linkageName: "free", scope: !239, file: !239, line: 117, scopeLine: 117, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!698 = !DILocation(line: 123, scope: !697, inlinedAt: !695)
!699 = !DILocation(line: 682, scope: !687)
!700 = distinct !DISubprogram(name: "tcopy", linkageName: "std.core.String.tcopy", scope: !2, file: !2, line: 685, type: !701, scopeLine: 685, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !87)
!701 = !DISubroutineType(types: !702)
!702 = !{!60, !60}
!703 = !DILocalVariable(name: "self", arg: 1, scope: !700, file: !2, line: 685, type: !60)
!704 = !DILocation(line: 685, scope: !700)
!705 = distinct !DISubprogram(name: "copy", linkageName: "std.core.string.ZString.copy", scope: !2, file: !2, line: 687, type: !706, scopeLine: 687, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !87)
!706 = !DISubroutineType(types: !707)
!707 = !{!60, !518, !81}
!708 = !DILocalVariable(name: "self", arg: 1, scope: !705, file: !2, line: 687, type: !518)
!709 = !DILocation(line: 687, scope: !705)
!710 = !DILocalVariable(name: "allocator", arg: 2, scope: !705, file: !2, line: 687, type: !81)
!711 = !DILocation(line: 689, scope: !705)
!712 = distinct !DISubprogram(name: "tcopy", linkageName: "std.core.string.ZString.tcopy", scope: !2, file: !2, line: 692, type: !537, scopeLine: 692, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !87)
!713 = !DILocalVariable(name: "self", arg: 1, scope: !712, file: !2, line: 692, type: !518)
!714 = !DILocation(line: 692, scope: !712)
!715 = !DILocation(line: 694, scope: !712)
!716 = distinct !DISubprogram(name: "to_utf16", linkageName: "std.core.String.to_utf16", scope: !2, file: !2, line: 702, type: !717, scopeLine: 702, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !87)
!717 = !DISubroutineType(types: !718)
!718 = !{!307, !719, !60, !81}
!719 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Char16[]*", baseType: !720, size: 64, align: 64, dwarfAddressSpace: 0)
!720 = !DICompositeType(tag: DW_TAG_structure_type, name: "Char16[]", size: 128, align: 64, elements: !721, identifier: "Char16[]")
!721 = !{!722, !723}
!722 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !720, baseType: !579, size: 64, align: 64)
!723 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !720, baseType: !67, size: 64, align: 64, offset: 64)
!724 = !DILocalVariable(name: "self", arg: 1, scope: !716, file: !2, line: 702, type: !60)
!725 = !DILocation(line: 702, scope: !716)
!726 = !DILocalVariable(name: "allocator", arg: 2, scope: !716, file: !2, line: 702, type: !81)
!727 = !DILocalVariable(name: "len16", scope: !716, file: !2, line: 704, type: !67, align: 8)
!728 = !DILocation(line: 704, scope: !716)
!729 = !DILocalVariable(name: "data", scope: !716, file: !2, line: 705, type: !579, align: 8)
!730 = !DILocation(line: 705, scope: !716)
!731 = !DILocation(line: 304, scope: !732, inlinedAt: !730)
!732 = distinct !DISubprogram(name: "alloc_array_try", linkageName: "alloc_array_try", scope: !239, file: !239, line: 302, scopeLine: 302, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!733 = !DILocation(line: 80, scope: !734, inlinedAt: !731)
!734 = distinct !DISubprogram(name: "malloc_try", linkageName: "malloc_try", scope: !239, file: !239, line: 78, scopeLine: 78, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!735 = !DILocation(line: 86, scope: !734, inlinedAt: !731)
!736 = !DILocation(line: 38, scope: !734, inlinedAt: !731)
!737 = !DILocation(line: 975, scope: !738, inlinedAt: !736)
!738 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !248, file: !248, line: 973, scopeLine: 973, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!739 = !DILocation(line: 706, scope: !716)
!740 = !DILocation(line: 707, scope: !716)
!741 = !DILocation(line: 708, scope: !716)
!742 = distinct !DISubprogram(name: "to_temp_utf16", linkageName: "std.core.String.to_temp_utf16", scope: !2, file: !2, line: 711, type: !743, scopeLine: 711, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !87)
!743 = !DISubroutineType(types: !744)
!744 = !{!307, !719, !60}
!745 = !DILocalVariable(name: "self", arg: 1, scope: !742, file: !2, line: 711, type: !60)
!746 = !DILocation(line: 711, scope: !742)
!747 = distinct !DISubprogram(name: "to_wstring", linkageName: "std.core.String.to_wstring", scope: !2, file: !2, line: 713, type: !748, scopeLine: 713, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !87)
!748 = !DISubroutineType(types: !749)
!749 = !{!307, !750, !60, !81}
!750 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "WString*", baseType: !570, size: 64, align: 64, dwarfAddressSpace: 0)
!751 = !DILocalVariable(name: "self", arg: 1, scope: !747, file: !2, line: 713, type: !60)
!752 = !DILocation(line: 713, scope: !747)
!753 = !DILocalVariable(name: "allocator", arg: 2, scope: !747, file: !2, line: 713, type: !81)
!754 = !DILocation(line: 715, scope: !747)
!755 = distinct !DISubprogram(name: "to_temp_wstring", linkageName: "std.core.String.to_temp_wstring", scope: !2, file: !2, line: 718, type: !756, scopeLine: 718, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !87)
!756 = !DISubroutineType(types: !757)
!757 = !{!307, !750, !60}
!758 = !DILocalVariable(name: "self", arg: 1, scope: !755, file: !2, line: 718, type: !60)
!759 = !DILocation(line: 718, scope: !755)
!760 = distinct !DISubprogram(name: "to_utf32", linkageName: "std.core.String.to_utf32", scope: !2, file: !2, line: 720, type: !761, scopeLine: 720, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !87)
!761 = !DISubroutineType(types: !762)
!762 = !{!307, !763, !60, !81}
!763 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Char32[]*", baseType: !764, size: 64, align: 64, dwarfAddressSpace: 0)
!764 = !DICompositeType(tag: DW_TAG_structure_type, name: "Char32[]", size: 128, align: 64, elements: !765, identifier: "Char32[]")
!765 = !{!766, !769}
!766 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !764, baseType: !767, size: 64, align: 64)
!767 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Char32*", baseType: !768, size: 64, align: 64, dwarfAddressSpace: 0)
!768 = !DIDerivedType(tag: DW_TAG_typedef, name: "Char32", scope: !2, file: !2, line: 28, baseType: !3, align: 4)
!769 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !764, baseType: !67, size: 64, align: 64, offset: 64)
!770 = !DILocalVariable(name: "self", arg: 1, scope: !760, file: !2, line: 720, type: !60)
!771 = !DILocation(line: 720, scope: !760)
!772 = !DILocalVariable(name: "allocator", arg: 2, scope: !760, file: !2, line: 720, type: !81)
!773 = !DILocalVariable(name: "codepoints", scope: !760, file: !2, line: 722, type: !67, align: 8)
!774 = !DILocation(line: 722, scope: !760)
!775 = !DILocalVariable(name: "data", scope: !760, file: !2, line: 723, type: !767, align: 8)
!776 = !DILocation(line: 723, scope: !760)
!777 = !DILocation(line: 304, scope: !778, inlinedAt: !776)
!778 = distinct !DISubprogram(name: "alloc_array_try", linkageName: "alloc_array_try", scope: !239, file: !239, line: 302, scopeLine: 302, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!779 = !DILocation(line: 80, scope: !780, inlinedAt: !777)
!780 = distinct !DISubprogram(name: "malloc_try", linkageName: "malloc_try", scope: !239, file: !239, line: 78, scopeLine: 78, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!781 = !DILocation(line: 86, scope: !780, inlinedAt: !777)
!782 = !DILocation(line: 38, scope: !780, inlinedAt: !777)
!783 = !DILocation(line: 975, scope: !784, inlinedAt: !782)
!784 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !248, file: !248, line: 973, scopeLine: 973, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!785 = !DILocation(line: 724, scope: !760)
!786 = !DILocation(line: 725, scope: !760)
!787 = !DILocation(line: 726, scope: !760)
!788 = distinct !DISubprogram(name: "to_temp_utf32", linkageName: "std.core.String.to_temp_utf32", scope: !2, file: !2, line: 729, type: !789, scopeLine: 729, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !87)
!789 = !DISubroutineType(types: !790)
!790 = !{!307, !763, !60}
!791 = !DILocalVariable(name: "self", arg: 1, scope: !788, file: !2, line: 729, type: !60)
!792 = !DILocation(line: 729, scope: !788)
!793 = distinct !DISubprogram(name: "convert_to_lower", linkageName: "std.core.String.convert_to_lower", scope: !2, file: !2, line: 737, type: !794, scopeLine: 737, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !87)
!794 = !DISubroutineType(types: !795)
!795 = !{null, !60}
!796 = !DILocalVariable(name: "self", arg: 1, scope: !793, file: !2, line: 737, type: !60)
!797 = !DILocation(line: 737, scope: !793)
!798 = !DILocation(line: 739, scope: !799)
!799 = distinct !DILexicalBlock(scope: !793, file: !2, line: 739, column: 2)
!800 = !DILocalVariable(name: ".temp", scope: !799, file: !2, line: 739, type: !67, align: 8)
!801 = !DILocalVariable(name: "c", scope: !802, file: !2, line: 739, type: !64, align: 8)
!802 = distinct !DILexicalBlock(scope: !799, file: !2, line: 739, column: 22)
!803 = !DILocation(line: 739, scope: !802)
!804 = !DILocation(line: 8, scope: !805, inlinedAt: !807)
!805 = distinct !DISubprogram(name: "@is_upper", linkageName: "@is_upper", scope: !806, file: !806, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!806 = !DIFile(filename: "ascii.c3", directory: "C:/Compilers/C3/lib/std/core")
!807 = !DILocation(line: 43, scope: !808, inlinedAt: !803)
!808 = distinct !DISubprogram(name: "is_upper", linkageName: "is_upper", scope: !806, file: !806, line: 43, scopeLine: 43, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!809 = distinct !DISubprogram(name: "to_lower_copy", linkageName: "std.core.String.to_lower_copy", scope: !2, file: !2, line: 742, type: !660, scopeLine: 742, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !87)
!810 = !DILocalVariable(name: "self", arg: 1, scope: !809, file: !2, line: 742, type: !60)
!811 = !DILocation(line: 742, scope: !809)
!812 = !DILocalVariable(name: "allocator", arg: 2, scope: !809, file: !2, line: 742, type: !81)
!813 = !DILocalVariable(name: "copy", scope: !809, file: !2, line: 744, type: !60, align: 8)
!814 = !DILocation(line: 744, scope: !809)
!815 = !DILocation(line: 745, scope: !809)
!816 = !DILocation(line: 746, scope: !809)
!817 = distinct !DISubprogram(name: "to_lower_tcopy", linkageName: "std.core.String.to_lower_tcopy", scope: !2, file: !2, line: 749, type: !701, scopeLine: 749, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !87)
!818 = !DILocalVariable(name: "self", arg: 1, scope: !817, file: !2, line: 749, type: !60)
!819 = !DILocation(line: 749, scope: !817)
!820 = !DILocation(line: 751, scope: !817)
!821 = distinct !DISubprogram(name: "convert_to_upper", linkageName: "std.core.String.convert_to_upper", scope: !2, file: !2, line: 760, type: !794, scopeLine: 760, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !87)
!822 = !DILocalVariable(name: "self", arg: 1, scope: !821, file: !2, line: 760, type: !60)
!823 = !DILocation(line: 760, scope: !821)
!824 = !DILocation(line: 762, scope: !825)
!825 = distinct !DILexicalBlock(scope: !821, file: !2, line: 762, column: 2)
!826 = !DILocalVariable(name: ".temp", scope: !825, file: !2, line: 762, type: !67, align: 8)
!827 = !DILocalVariable(name: "c", scope: !828, file: !2, line: 762, type: !64, align: 8)
!828 = distinct !DILexicalBlock(scope: !825, file: !2, line: 762, column: 22)
!829 = !DILocation(line: 762, scope: !828)
!830 = !DILocation(line: 7, scope: !831, inlinedAt: !832)
!831 = distinct !DISubprogram(name: "@is_lower", linkageName: "@is_lower", scope: !806, file: !806, line: 7, scopeLine: 7, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!832 = !DILocation(line: 42, scope: !833, inlinedAt: !829)
!833 = distinct !DISubprogram(name: "is_lower", linkageName: "is_lower", scope: !806, file: !806, line: 42, scopeLine: 42, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!834 = distinct !DISubprogram(name: "to_upper_copy", linkageName: "std.core.String.to_upper_copy", scope: !2, file: !2, line: 773, type: !660, scopeLine: 773, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !87)
!835 = !DILocalVariable(name: "self", arg: 1, scope: !834, file: !2, line: 773, type: !60)
!836 = !DILocation(line: 773, scope: !834)
!837 = !DILocalVariable(name: "allocator", arg: 2, scope: !834, file: !2, line: 773, type: !81)
!838 = !DILocalVariable(name: "copy", scope: !834, file: !2, line: 775, type: !60, align: 8)
!839 = !DILocation(line: 775, scope: !834)
!840 = !DILocation(line: 776, scope: !834)
!841 = !DILocation(line: 777, scope: !834)
!842 = distinct !DISubprogram(name: "capitalize_copy", linkageName: "std.core.String.capitalize_copy", scope: !2, file: !2, line: 780, type: !660, scopeLine: 780, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !87)
!843 = !DILocalVariable(name: "self", arg: 1, scope: !842, file: !2, line: 780, type: !60)
!844 = !DILocation(line: 780, scope: !842)
!845 = !DILocalVariable(name: "allocator", arg: 2, scope: !842, file: !2, line: 780, type: !81)
!846 = !DILocalVariable(name: "s", scope: !842, file: !2, line: 782, type: !60, align: 8)
!847 = !DILocation(line: 782, scope: !842)
!848 = !DILocation(line: 783, scope: !842)
!849 = !DILocation(line: 7, scope: !850, inlinedAt: !851)
!850 = distinct !DISubprogram(name: "@is_lower", linkageName: "@is_lower", scope: !806, file: !806, line: 7, scopeLine: 7, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!851 = !DILocation(line: 42, scope: !852, inlinedAt: !848)
!852 = distinct !DISubprogram(name: "is_lower", linkageName: "is_lower", scope: !806, file: !806, line: 42, scopeLine: 42, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!853 = !DILocation(line: 785, scope: !854)
!854 = distinct !DILexicalBlock(scope: !842, file: !2, line: 784, column: 2)
!855 = !DILocation(line: 787, scope: !842)
!856 = distinct !DISubprogram(name: "snake_to_pascal_copy", linkageName: "std.core.String.snake_to_pascal_copy", scope: !2, file: !2, line: 796, type: !660, scopeLine: 796, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !87)
!857 = !DILocalVariable(name: "self", arg: 1, scope: !856, file: !2, line: 796, type: !60)
!858 = !DILocation(line: 796, scope: !856)
!859 = !DILocalVariable(name: "allocator", arg: 2, scope: !856, file: !2, line: 796, type: !81)
!860 = !DILocalVariable(name: "splitter", scope: !856, file: !2, line: 798, type: !57, align: 8)
!861 = !DILocation(line: 798, scope: !856)
!862 = !DILocalVariable(name: "new_string", scope: !856, file: !2, line: 799, type: !61, align: 8)
!863 = !DILocation(line: 799, scope: !856)
!864 = !DILocation(line: 304, scope: !865, inlinedAt: !866)
!865 = distinct !DISubprogram(name: "alloc_array_try", linkageName: "alloc_array_try", scope: !239, file: !239, line: 302, scopeLine: 302, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!866 = !DILocation(line: 287, scope: !867, inlinedAt: !863)
!867 = distinct !DISubprogram(name: "alloc_array", linkageName: "alloc_array", scope: !239, file: !239, line: 285, scopeLine: 285, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!868 = !DILocation(line: 80, scope: !869, inlinedAt: !864)
!869 = distinct !DISubprogram(name: "malloc_try", linkageName: "malloc_try", scope: !239, file: !239, line: 78, scopeLine: 78, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!870 = !DILocation(line: 86, scope: !869, inlinedAt: !864)
!871 = !DILocation(line: 38, scope: !869, inlinedAt: !864)
!872 = !DILocation(line: 975, scope: !873, inlinedAt: !871)
!873 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !248, file: !248, line: 973, scopeLine: 973, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!874 = !DILocalVariable(name: "index", scope: !856, file: !2, line: 800, type: !67, align: 8)
!875 = !DILocation(line: 800, scope: !856)
!876 = !DILocation(line: 801, scope: !856)
!877 = !DILocalVariable(name: "s", scope: !878, file: !2, line: 801, type: !60, align: 8)
!878 = distinct !DILexicalBlock(scope: !856, file: !2, line: 801, column: 2)
!879 = !DILocation(line: 801, scope: !878)
!880 = !DILocation(line: 803, scope: !881)
!881 = distinct !DILexicalBlock(scope: !878, file: !2, line: 802, column: 2)
!882 = !DILocalVariable(name: "c", scope: !881, file: !2, line: 804, type: !65, align: 1)
!883 = !DILocation(line: 804, scope: !881)
!884 = !DILocation(line: 7, scope: !885, inlinedAt: !886)
!885 = distinct !DISubprogram(name: "@is_lower", linkageName: "@is_lower", scope: !806, file: !806, line: 7, scopeLine: 7, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!886 = !DILocation(line: 42, scope: !887, inlinedAt: !888)
!887 = distinct !DISubprogram(name: "is_lower", linkageName: "is_lower", scope: !806, file: !806, line: 42, scopeLine: 42, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!888 = !DILocation(line: 805, scope: !881)
!889 = !DILocation(line: 22, scope: !890, inlinedAt: !891)
!890 = distinct !DISubprogram(name: "@to_upper", linkageName: "@to_upper", scope: !806, file: !806, line: 22, scopeLine: 22, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!891 = !DILocation(line: 57, scope: !892, inlinedAt: !888)
!892 = distinct !DISubprogram(name: "to_upper", linkageName: "to_upper", scope: !806, file: !806, line: 57, scopeLine: 57, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!893 = !DILocation(line: 806, scope: !881)
!894 = !DILocation(line: 807, scope: !881)
!895 = !DILocation(line: 808, scope: !881)
!896 = !DILocation(line: 809, scope: !881)
!897 = !DILocation(line: 811, scope: !856)
!898 = !DILocation(line: 812, scope: !856)
!899 = distinct !DISubprogram(name: "convert_snake_to_pascal", linkageName: "std.core.String.convert_snake_to_pascal", scope: !2, file: !2, line: 820, type: !900, scopeLine: 820, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !87)
!900 = !DISubroutineType(types: !901)
!901 = !{null, !130}
!902 = !DILocation(line: 821, scope: !899)
!903 = !DILocalVariable(name: "self", arg: 1, scope: !899, file: !2, line: 820, type: !130)
!904 = !DILocation(line: 820, scope: !899)
!905 = !DILocalVariable(name: "splitter", scope: !899, file: !2, line: 822, type: !57, align: 8)
!906 = !DILocation(line: 822, scope: !899)
!907 = !DILocalVariable(name: "new_string", scope: !899, file: !2, line: 823, type: !60, align: 8)
!908 = !DILocation(line: 823, scope: !899)
!909 = !DILocalVariable(name: "index", scope: !899, file: !2, line: 824, type: !67, align: 8)
!910 = !DILocation(line: 824, scope: !899)
!911 = !DILocation(line: 825, scope: !899)
!912 = !DILocalVariable(name: "s", scope: !913, file: !2, line: 825, type: !60, align: 8)
!913 = distinct !DILexicalBlock(scope: !899, file: !2, line: 825, column: 2)
!914 = !DILocation(line: 825, scope: !913)
!915 = !DILocation(line: 827, scope: !916)
!916 = distinct !DILexicalBlock(scope: !913, file: !2, line: 826, column: 2)
!917 = !DILocalVariable(name: "c", scope: !916, file: !2, line: 828, type: !65, align: 1)
!918 = !DILocation(line: 828, scope: !916)
!919 = !DILocation(line: 7, scope: !920, inlinedAt: !921)
!920 = distinct !DISubprogram(name: "@is_lower", linkageName: "@is_lower", scope: !806, file: !806, line: 7, scopeLine: 7, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!921 = !DILocation(line: 42, scope: !922, inlinedAt: !923)
!922 = distinct !DISubprogram(name: "is_lower", linkageName: "is_lower", scope: !806, file: !806, line: 42, scopeLine: 42, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!923 = !DILocation(line: 829, scope: !916)
!924 = !DILocation(line: 22, scope: !925, inlinedAt: !926)
!925 = distinct !DISubprogram(name: "@to_upper", linkageName: "@to_upper", scope: !806, file: !806, line: 22, scopeLine: 22, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!926 = !DILocation(line: 57, scope: !927, inlinedAt: !923)
!927 = distinct !DISubprogram(name: "to_upper", linkageName: "to_upper", scope: !806, file: !806, line: 57, scopeLine: 57, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!928 = !DILocation(line: 830, scope: !916)
!929 = !DILocation(line: 831, scope: !916)
!930 = !DILocation(line: 832, scope: !916)
!931 = !DILocation(line: 833, scope: !916)
!932 = !DILocation(line: 835, scope: !899)
!933 = distinct !DISubprogram(name: "pascal_to_snake_copy", linkageName: "std.core.String.pascal_to_snake_copy", scope: !2, file: !2, line: 844, type: !660, scopeLine: 844, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !87)
!934 = !DILocalVariable(name: "self", arg: 1, scope: !933, file: !2, line: 844, type: !60)
!935 = !DILocation(line: 844, scope: !933)
!936 = !DILocalVariable(name: "allocator", arg: 2, scope: !933, file: !2, line: 844, type: !81)
!937 = !DILocalVariable(name: "state", scope: !938, file: !2, line: 641, type: !96, align: 8)
!938 = distinct !DISubprogram(name: "@pool", linkageName: "@pool", scope: !95, file: !95, line: 639, scopeLine: 639, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54, retainedNodes: !87)
!939 = !DILocation(line: 641, scope: !938, inlinedAt: !935)
!940 = !DILocalVariable(name: "d", scope: !941, file: !2, line: 846, type: !942, align: 8)
!941 = distinct !DILexicalBlock(scope: !933, file: !2, line: 845, column: 1)
!942 = !DIDerivedType(tag: DW_TAG_typedef, name: "DString", scope: !2, file: !2, line: 7, baseType: !943, align: 8)
!943 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "DStringOpaque*", baseType: !944, size: 64, align: 64, dwarfAddressSpace: 0)
!944 = !DIDerivedType(tag: DW_TAG_typedef, name: "DStringOpaque", scope: !2, file: !2, line: 8, baseType: null, align: 1)
!945 = !DILocation(line: 846, scope: !941)
!946 = !DILocation(line: 847, scope: !941)
!947 = !DILocation(line: 18, scope: !941)
!948 = !DILocalVariable(name: "index", scope: !941, file: !2, line: 848, type: !67, align: 8)
!949 = !DILocation(line: 848, scope: !941)
!950 = !DILocation(line: 849, scope: !951)
!951 = distinct !DILexicalBlock(scope: !941, file: !2, line: 849, column: 2)
!952 = !DILocalVariable(name: ".temp", scope: !951, file: !2, line: 849, type: !67, align: 8)
!953 = !DILocalVariable(name: "i", scope: !954, file: !2, line: 849, type: !67, align: 8)
!954 = distinct !DILexicalBlock(scope: !951, file: !2, line: 850, column: 2)
!955 = !DILocation(line: 849, scope: !954)
!956 = !DILocalVariable(name: "c", scope: !954, file: !2, line: 849, type: !65, align: 1)
!957 = !DILocation(line: 8, scope: !958, inlinedAt: !959)
!958 = distinct !DISubprogram(name: "@is_upper", linkageName: "@is_upper", scope: !806, file: !806, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!959 = !DILocation(line: 43, scope: !960, inlinedAt: !961)
!960 = distinct !DISubprogram(name: "is_upper", linkageName: "is_upper", scope: !806, file: !806, line: 43, scopeLine: 43, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!961 = !DILocation(line: 851, scope: !962)
!962 = distinct !DILexicalBlock(scope: !954, file: !2, line: 850, column: 2)
!963 = !DILocation(line: 853, scope: !964)
!964 = distinct !DILexicalBlock(scope: !962, file: !2, line: 852, column: 3)
!965 = !DILocation(line: 7, scope: !966, inlinedAt: !967)
!966 = distinct !DISubprogram(name: "@is_lower", linkageName: "@is_lower", scope: !806, file: !806, line: 7, scopeLine: 7, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!967 = !DILocation(line: 42, scope: !968, inlinedAt: !963)
!968 = distinct !DISubprogram(name: "is_lower", linkageName: "is_lower", scope: !806, file: !806, line: 42, scopeLine: 42, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!969 = !DILocation(line: 9, scope: !970, inlinedAt: !971)
!970 = distinct !DISubprogram(name: "@is_digit", linkageName: "@is_digit", scope: !806, file: !806, line: 9, scopeLine: 9, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!971 = !DILocation(line: 44, scope: !972, inlinedAt: !963)
!972 = distinct !DISubprogram(name: "is_digit", linkageName: "is_digit", scope: !806, file: !806, line: 44, scopeLine: 44, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!973 = !DILocation(line: 7, scope: !974, inlinedAt: !975)
!974 = distinct !DISubprogram(name: "@is_lower", linkageName: "@is_lower", scope: !806, file: !806, line: 7, scopeLine: 7, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!975 = !DILocation(line: 42, scope: !976, inlinedAt: !963)
!976 = distinct !DISubprogram(name: "is_lower", linkageName: "is_lower", scope: !806, file: !806, line: 42, scopeLine: 42, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!977 = !DILocation(line: 855, scope: !978)
!978 = distinct !DILexicalBlock(scope: !964, file: !2, line: 854, column: 13)
!979 = !DILocation(line: 21, scope: !980, inlinedAt: !981)
!980 = distinct !DISubprogram(name: "@to_lower", linkageName: "@to_lower", scope: !806, file: !806, line: 21, scopeLine: 21, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!981 = !DILocation(line: 56, scope: !982, inlinedAt: !983)
!982 = distinct !DISubprogram(name: "to_lower", linkageName: "to_lower", scope: !806, file: !806, line: 56, scopeLine: 56, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!983 = !DILocation(line: 857, scope: !964)
!984 = !DILocation(line: 858, scope: !964)
!985 = !DILocation(line: 860, scope: !962)
!986 = !DILocation(line: 862, scope: !941)
!987 = !DILocation(line: 644, scope: !988, inlinedAt: !935)
!988 = distinct !DILexicalBlock(scope: !938, file: !95, line: 643, column: 2)
!989 = distinct !DISubprogram(name: "iterator", linkageName: "std.core.String.iterator", scope: !2, file: !2, line: 866, type: !990, scopeLine: 866, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !87)
!990 = !DISubroutineType(types: !991)
!991 = !{!992, !60}
!992 = !DICompositeType(tag: DW_TAG_structure_type, name: "StringIterator", scope: !2, file: !2, line: 3, size: 192, align: 64, elements: !993, identifier: "std.core.string.iterator.StringIterator")
!993 = !{!994, !995}
!994 = !DIDerivedType(tag: DW_TAG_member, name: "utf8", scope: !992, file: !2, line: 5, baseType: !60, size: 128, align: 64)
!995 = !DIDerivedType(tag: DW_TAG_member, name: "current", scope: !992, file: !2, line: 6, baseType: !67, size: 64, align: 64, offset: 128)
!996 = !DILocalVariable(name: "self", arg: 1, scope: !989, file: !2, line: 866, type: !60)
!997 = !DILocation(line: 866, scope: !989)
!998 = !DILocation(line: 868, scope: !989)
!999 = distinct !DISubprogram(name: "to_upper_tcopy", linkageName: "std.core.String.to_upper_tcopy", scope: !2, file: !2, line: 875, type: !701, scopeLine: 875, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !87)
!1000 = !DILocalVariable(name: "self", arg: 1, scope: !999, file: !2, line: 875, type: !60)
!1001 = !DILocation(line: 875, scope: !999)
!1002 = !DILocation(line: 877, scope: !999)
!1003 = distinct !DISubprogram(name: "utf8_codepoints", linkageName: "std.core.String.utf8_codepoints", scope: !2, file: !2, line: 911, type: !1004, scopeLine: 911, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !87)
!1004 = !DISubroutineType(types: !1005)
!1005 = !{!67, !60}
!1006 = !DILocalVariable(name: "s", arg: 1, scope: !1003, file: !2, line: 911, type: !60)
!1007 = !DILocation(line: 911, scope: !1003)
!1008 = !DILocalVariable(name: "len", scope: !1003, file: !2, line: 913, type: !67, align: 8)
!1009 = !DILocation(line: 913, scope: !1003)
!1010 = !DILocation(line: 914, scope: !1011)
!1011 = distinct !DILexicalBlock(scope: !1003, file: !2, line: 914, column: 2)
!1012 = !DILocalVariable(name: ".temp", scope: !1011, file: !2, line: 914, type: !67, align: 8)
!1013 = !DILocalVariable(name: "c", scope: !1014, file: !2, line: 914, type: !65, align: 1)
!1014 = distinct !DILexicalBlock(scope: !1011, file: !2, line: 915, column: 2)
!1015 = !DILocation(line: 914, scope: !1014)
!1016 = !DILocation(line: 916, scope: !1017)
!1017 = distinct !DILexicalBlock(scope: !1014, file: !2, line: 915, column: 2)
!1018 = !DILocation(line: 918, scope: !1003)
!1019 = distinct !DISubprogram(name: "is_zstr", linkageName: "std.core.String.is_zstr", scope: !2, file: !2, line: 930, type: !1020, scopeLine: 930, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !87)
!1020 = !DISubroutineType(types: !1021)
!1021 = !{!115, !60}
!1022 = !DILocalVariable(name: "self", arg: 1, scope: !1019, file: !2, line: 930, type: !60)
!1023 = !DILocation(line: 930, scope: !1019)
!1024 = !DILocation(line: 932, scope: !1019)
!1025 = distinct !DISubprogram(name: "quick_zstr", linkageName: "std.core.String.quick_zstr", scope: !2, file: !2, line: 951, type: !655, scopeLine: 951, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !87)
!1026 = !DILocalVariable(name: "self", arg: 1, scope: !1025, file: !2, line: 951, type: !60)
!1027 = !DILocation(line: 951, scope: !1025)
!1028 = !DILocation(line: 953, scope: !1025)
!1029 = !DILocation(line: 949, scope: !1025)
!1030 = distinct !DISubprogram(name: "to_int128", linkageName: "std.core.String.to_int128", scope: !2, file: !2, line: 1045, type: !1031, scopeLine: 1045, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !87)
!1031 = !DISubroutineType(types: !1032)
!1032 = !{!307, !1033, !60, !18}
!1033 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "int128*", baseType: !1034, size: 64, align: 64, dwarfAddressSpace: 0)
!1034 = !DIBasicType(name: "int128", size: 128, encoding: DW_ATE_signed)
!1035 = !DILocalVariable(name: "self", arg: 1, scope: !1030, file: !2, line: 1045, type: !60)
!1036 = !DILocation(line: 1045, scope: !1030)
!1037 = !DILocalVariable(name: "base", arg: 2, scope: !1030, file: !2, line: 1045, type: !18)
!1038 = !DILocation(line: 966, scope: !1039, inlinedAt: !1036)
!1039 = distinct !DILexicalBlock(scope: !1040, file: !2, line: 973, column: 1)
!1040 = distinct !DISubprogram(name: "to_integer", linkageName: "to_integer", scope: !2, file: !2, line: 972, scopeLine: 972, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54, retainedNodes: !87)
!1041 = !DILocation(line: 1045, scope: !1039, inlinedAt: !1036)
!1042 = !DILocalVariable(name: "len", scope: !1040, file: !2, line: 974, type: !67, align: 8)
!1043 = !DILocation(line: 974, scope: !1040, inlinedAt: !1036)
!1044 = !DILocalVariable(name: "index", scope: !1040, file: !2, line: 975, type: !67, align: 8)
!1045 = !DILocation(line: 975, scope: !1040, inlinedAt: !1036)
!1046 = !DILocalVariable(name: "ptr", scope: !1040, file: !2, line: 976, type: !64, align: 8)
!1047 = !DILocation(line: 976, scope: !1040, inlinedAt: !1036)
!1048 = !DILocation(line: 977, scope: !1040, inlinedAt: !1036)
!1049 = !DILocation(line: 977, scope: !1050, inlinedAt: !1036)
!1050 = distinct !DILexicalBlock(scope: !1040, file: !2, line: 977, column: 2)
!1051 = !DILocation(line: 19, scope: !1052, inlinedAt: !1053)
!1052 = distinct !DISubprogram(name: "@is_blank", linkageName: "@is_blank", scope: !806, file: !806, line: 19, scopeLine: 19, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!1053 = !DILocation(line: 54, scope: !1054, inlinedAt: !1049)
!1054 = distinct !DISubprogram(name: "is_blank", linkageName: "is_blank", scope: !806, file: !806, line: 54, scopeLine: 54, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!1055 = !DILocation(line: 978, scope: !1040, inlinedAt: !1036)
!1056 = !DILocalVariable(name: "is_negative", scope: !1040, file: !2, line: 979, type: !115, align: 1)
!1057 = !DILocation(line: 979, scope: !1040, inlinedAt: !1036)
!1058 = !DILocation(line: 980, scope: !1059, inlinedAt: !1036)
!1059 = distinct !DILexicalBlock(scope: !1040, file: !2, line: 980, column: 2)
!1060 = !DILocation(line: 983, scope: !1061, inlinedAt: !1036)
!1061 = distinct !DILexicalBlock(scope: !1059, file: !2, line: 983, column: 4)
!1062 = !DILocation(line: 984, scope: !1061, inlinedAt: !1036)
!1063 = !DILocation(line: 985, scope: !1061, inlinedAt: !1036)
!1064 = !DILocation(line: 987, scope: !1065, inlinedAt: !1036)
!1065 = distinct !DILexicalBlock(scope: !1059, file: !2, line: 987, column: 4)
!1066 = !DILocation(line: 989, scope: !1067, inlinedAt: !1036)
!1067 = distinct !DILexicalBlock(scope: !1059, file: !2, line: 989, column: 4)
!1068 = !DILocation(line: 991, scope: !1040, inlinedAt: !1036)
!1069 = !DILocalVariable(name: "base_used", scope: !1040, file: !2, line: 992, type: !1034, align: 16)
!1070 = !DILocation(line: 992, scope: !1040, inlinedAt: !1036)
!1071 = !DILocation(line: 993, scope: !1040, inlinedAt: !1036)
!1072 = !DILocation(line: 995, scope: !1073, inlinedAt: !1036)
!1073 = distinct !DILexicalBlock(scope: !1040, file: !2, line: 994, column: 2)
!1074 = !DILocation(line: 996, scope: !1073, inlinedAt: !1036)
!1075 = !DILocation(line: 997, scope: !1076, inlinedAt: !1036)
!1076 = distinct !DILexicalBlock(scope: !1073, file: !2, line: 997, column: 3)
!1077 = !DILocation(line: 1001, scope: !1078, inlinedAt: !1036)
!1078 = distinct !DILexicalBlock(scope: !1076, file: !2, line: 1001, column: 5)
!1079 = !DILocation(line: 1002, scope: !1078, inlinedAt: !1036)
!1080 = !DILocation(line: 1005, scope: !1081, inlinedAt: !1036)
!1081 = distinct !DILexicalBlock(scope: !1076, file: !2, line: 1005, column: 5)
!1082 = !DILocation(line: 1006, scope: !1081, inlinedAt: !1036)
!1083 = !DILocation(line: 1009, scope: !1084, inlinedAt: !1036)
!1084 = distinct !DILexicalBlock(scope: !1076, file: !2, line: 1009, column: 5)
!1085 = !DILocation(line: 1010, scope: !1084, inlinedAt: !1036)
!1086 = !DILocation(line: 1012, scope: !1087, inlinedAt: !1036)
!1087 = distinct !DILexicalBlock(scope: !1076, file: !2, line: 1012, column: 5)
!1088 = !DILocation(line: 1014, scope: !1073, inlinedAt: !1036)
!1089 = !DILocalVariable(name: "value", scope: !1040, file: !2, line: 1016, type: !1034, align: 16)
!1090 = !DILocation(line: 1016, scope: !1040, inlinedAt: !1036)
!1091 = !DILocation(line: 1017, scope: !1040, inlinedAt: !1036)
!1092 = !DILocation(line: 1017, scope: !1093, inlinedAt: !1036)
!1093 = distinct !DILexicalBlock(scope: !1040, file: !2, line: 1017, column: 2)
!1094 = !DILocalVariable(name: "c", scope: !1095, file: !2, line: 1019, type: !65, align: 1)
!1095 = distinct !DILexicalBlock(scope: !1093, file: !2, line: 1018, column: 2)
!1096 = !DILocation(line: 1019, scope: !1095, inlinedAt: !1036)
!1097 = !DILocation(line: 1022, scope: !1098, inlinedAt: !1036)
!1098 = distinct !DILexicalBlock(scope: !1095, file: !2, line: 1020, column: 3)
!1099 = !DILocation(line: 1022, scope: !1100, inlinedAt: !1036)
!1100 = distinct !DILexicalBlock(scope: !1098, file: !2, line: 1022, column: 38)
!1101 = !DILocation(line: 1023, scope: !1098, inlinedAt: !1036)
!1102 = !DILocation(line: 1023, scope: !1103, inlinedAt: !1036)
!1103 = distinct !DILexicalBlock(scope: !1098, file: !2, line: 1023, column: 38)
!1104 = !DILocation(line: 1024, scope: !1098, inlinedAt: !1036)
!1105 = !DILocation(line: 1024, scope: !1106, inlinedAt: !1036)
!1106 = distinct !DILexicalBlock(scope: !1098, file: !2, line: 1024, column: 38)
!1107 = !DILocation(line: 1025, scope: !1108, inlinedAt: !1036)
!1108 = distinct !DILexicalBlock(scope: !1098, file: !2, line: 1025, column: 38)
!1109 = !DILocation(line: 1027, scope: !1095, inlinedAt: !1036)
!1110 = !DILocation(line: 1030, scope: !1111, inlinedAt: !1036)
!1111 = distinct !DILexicalBlock(scope: !1112, file: !2, line: 1029, column: 3)
!1112 = distinct !DILexicalBlock(scope: !1095, file: !2, line: 1028, column: 3)
!1113 = !DILocalVariable(name: "new_value", scope: !1114, file: !2, line: 1032, type: !1034, align: 16)
!1114 = distinct !DILexicalBlock(scope: !1111, file: !2, line: 1031, column: 4)
!1115 = !DILocation(line: 1032, scope: !1114, inlinedAt: !1036)
!1116 = !DILocation(line: 1033, scope: !1114, inlinedAt: !1036)
!1117 = !DILocation(line: 1034, scope: !1114, inlinedAt: !1036)
!1118 = !DILocation(line: 1035, scope: !1114, inlinedAt: !1036)
!1119 = !DILocalVariable(name: "new_value", scope: !1111, file: !2, line: 1037, type: !1034, align: 16)
!1120 = !DILocation(line: 1037, scope: !1111, inlinedAt: !1036)
!1121 = !DILocation(line: 1038, scope: !1111, inlinedAt: !1036)
!1122 = !DILocation(line: 1039, scope: !1111, inlinedAt: !1036)
!1123 = !DILocation(line: 1042, scope: !1040, inlinedAt: !1036)
!1124 = distinct !DISubprogram(name: "to_long", linkageName: "std.core.String.to_long", scope: !2, file: !2, line: 1046, type: !1125, scopeLine: 1046, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !87)
!1125 = !DISubroutineType(types: !1126)
!1126 = !{!307, !1127, !60, !18}
!1127 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "long*", baseType: !308, size: 64, align: 64, dwarfAddressSpace: 0)
!1128 = !DILocalVariable(name: "self", arg: 1, scope: !1124, file: !2, line: 1046, type: !60)
!1129 = !DILocation(line: 1046, scope: !1124)
!1130 = !DILocalVariable(name: "base", arg: 2, scope: !1124, file: !2, line: 1046, type: !18)
!1131 = !DILocation(line: 966, scope: !1132, inlinedAt: !1129)
!1132 = distinct !DILexicalBlock(scope: !1133, file: !2, line: 973, column: 1)
!1133 = distinct !DISubprogram(name: "to_integer", linkageName: "to_integer", scope: !2, file: !2, line: 972, scopeLine: 972, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54, retainedNodes: !87)
!1134 = !DILocation(line: 1046, scope: !1132, inlinedAt: !1129)
!1135 = !DILocalVariable(name: "len", scope: !1133, file: !2, line: 974, type: !67, align: 8)
!1136 = !DILocation(line: 974, scope: !1133, inlinedAt: !1129)
!1137 = !DILocalVariable(name: "index", scope: !1133, file: !2, line: 975, type: !67, align: 8)
!1138 = !DILocation(line: 975, scope: !1133, inlinedAt: !1129)
!1139 = !DILocalVariable(name: "ptr", scope: !1133, file: !2, line: 976, type: !64, align: 8)
!1140 = !DILocation(line: 976, scope: !1133, inlinedAt: !1129)
!1141 = !DILocation(line: 977, scope: !1133, inlinedAt: !1129)
!1142 = !DILocation(line: 977, scope: !1143, inlinedAt: !1129)
!1143 = distinct !DILexicalBlock(scope: !1133, file: !2, line: 977, column: 2)
!1144 = !DILocation(line: 19, scope: !1145, inlinedAt: !1146)
!1145 = distinct !DISubprogram(name: "@is_blank", linkageName: "@is_blank", scope: !806, file: !806, line: 19, scopeLine: 19, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!1146 = !DILocation(line: 54, scope: !1147, inlinedAt: !1142)
!1147 = distinct !DISubprogram(name: "is_blank", linkageName: "is_blank", scope: !806, file: !806, line: 54, scopeLine: 54, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!1148 = !DILocation(line: 978, scope: !1133, inlinedAt: !1129)
!1149 = !DILocalVariable(name: "is_negative", scope: !1133, file: !2, line: 979, type: !115, align: 1)
!1150 = !DILocation(line: 979, scope: !1133, inlinedAt: !1129)
!1151 = !DILocation(line: 980, scope: !1152, inlinedAt: !1129)
!1152 = distinct !DILexicalBlock(scope: !1133, file: !2, line: 980, column: 2)
!1153 = !DILocation(line: 983, scope: !1154, inlinedAt: !1129)
!1154 = distinct !DILexicalBlock(scope: !1152, file: !2, line: 983, column: 4)
!1155 = !DILocation(line: 984, scope: !1154, inlinedAt: !1129)
!1156 = !DILocation(line: 985, scope: !1154, inlinedAt: !1129)
!1157 = !DILocation(line: 987, scope: !1158, inlinedAt: !1129)
!1158 = distinct !DILexicalBlock(scope: !1152, file: !2, line: 987, column: 4)
!1159 = !DILocation(line: 989, scope: !1160, inlinedAt: !1129)
!1160 = distinct !DILexicalBlock(scope: !1152, file: !2, line: 989, column: 4)
!1161 = !DILocation(line: 991, scope: !1133, inlinedAt: !1129)
!1162 = !DILocalVariable(name: "base_used", scope: !1133, file: !2, line: 992, type: !308, align: 8)
!1163 = !DILocation(line: 992, scope: !1133, inlinedAt: !1129)
!1164 = !DILocation(line: 993, scope: !1133, inlinedAt: !1129)
!1165 = !DILocation(line: 995, scope: !1166, inlinedAt: !1129)
!1166 = distinct !DILexicalBlock(scope: !1133, file: !2, line: 994, column: 2)
!1167 = !DILocation(line: 996, scope: !1166, inlinedAt: !1129)
!1168 = !DILocation(line: 997, scope: !1169, inlinedAt: !1129)
!1169 = distinct !DILexicalBlock(scope: !1166, file: !2, line: 997, column: 3)
!1170 = !DILocation(line: 1001, scope: !1171, inlinedAt: !1129)
!1171 = distinct !DILexicalBlock(scope: !1169, file: !2, line: 1001, column: 5)
!1172 = !DILocation(line: 1002, scope: !1171, inlinedAt: !1129)
!1173 = !DILocation(line: 1005, scope: !1174, inlinedAt: !1129)
!1174 = distinct !DILexicalBlock(scope: !1169, file: !2, line: 1005, column: 5)
!1175 = !DILocation(line: 1006, scope: !1174, inlinedAt: !1129)
!1176 = !DILocation(line: 1009, scope: !1177, inlinedAt: !1129)
!1177 = distinct !DILexicalBlock(scope: !1169, file: !2, line: 1009, column: 5)
!1178 = !DILocation(line: 1010, scope: !1177, inlinedAt: !1129)
!1179 = !DILocation(line: 1012, scope: !1180, inlinedAt: !1129)
!1180 = distinct !DILexicalBlock(scope: !1169, file: !2, line: 1012, column: 5)
!1181 = !DILocation(line: 1014, scope: !1166, inlinedAt: !1129)
!1182 = !DILocalVariable(name: "value", scope: !1133, file: !2, line: 1016, type: !308, align: 8)
!1183 = !DILocation(line: 1016, scope: !1133, inlinedAt: !1129)
!1184 = !DILocation(line: 1017, scope: !1133, inlinedAt: !1129)
!1185 = !DILocation(line: 1017, scope: !1186, inlinedAt: !1129)
!1186 = distinct !DILexicalBlock(scope: !1133, file: !2, line: 1017, column: 2)
!1187 = !DILocalVariable(name: "c", scope: !1188, file: !2, line: 1019, type: !65, align: 1)
!1188 = distinct !DILexicalBlock(scope: !1186, file: !2, line: 1018, column: 2)
!1189 = !DILocation(line: 1019, scope: !1188, inlinedAt: !1129)
!1190 = !DILocation(line: 1022, scope: !1191, inlinedAt: !1129)
!1191 = distinct !DILexicalBlock(scope: !1188, file: !2, line: 1020, column: 3)
!1192 = !DILocation(line: 1022, scope: !1193, inlinedAt: !1129)
!1193 = distinct !DILexicalBlock(scope: !1191, file: !2, line: 1022, column: 38)
!1194 = !DILocation(line: 1023, scope: !1191, inlinedAt: !1129)
!1195 = !DILocation(line: 1023, scope: !1196, inlinedAt: !1129)
!1196 = distinct !DILexicalBlock(scope: !1191, file: !2, line: 1023, column: 38)
!1197 = !DILocation(line: 1024, scope: !1191, inlinedAt: !1129)
!1198 = !DILocation(line: 1024, scope: !1199, inlinedAt: !1129)
!1199 = distinct !DILexicalBlock(scope: !1191, file: !2, line: 1024, column: 38)
!1200 = !DILocation(line: 1025, scope: !1201, inlinedAt: !1129)
!1201 = distinct !DILexicalBlock(scope: !1191, file: !2, line: 1025, column: 38)
!1202 = !DILocation(line: 1027, scope: !1188, inlinedAt: !1129)
!1203 = !DILocation(line: 1030, scope: !1204, inlinedAt: !1129)
!1204 = distinct !DILexicalBlock(scope: !1205, file: !2, line: 1029, column: 3)
!1205 = distinct !DILexicalBlock(scope: !1188, file: !2, line: 1028, column: 3)
!1206 = !DILocalVariable(name: "new_value", scope: !1207, file: !2, line: 1032, type: !308, align: 8)
!1207 = distinct !DILexicalBlock(scope: !1204, file: !2, line: 1031, column: 4)
!1208 = !DILocation(line: 1032, scope: !1207, inlinedAt: !1129)
!1209 = !DILocation(line: 1033, scope: !1207, inlinedAt: !1129)
!1210 = !DILocation(line: 1034, scope: !1207, inlinedAt: !1129)
!1211 = !DILocation(line: 1035, scope: !1207, inlinedAt: !1129)
!1212 = !DILocalVariable(name: "new_value", scope: !1204, file: !2, line: 1037, type: !308, align: 8)
!1213 = !DILocation(line: 1037, scope: !1204, inlinedAt: !1129)
!1214 = !DILocation(line: 1038, scope: !1204, inlinedAt: !1129)
!1215 = !DILocation(line: 1039, scope: !1204, inlinedAt: !1129)
!1216 = !DILocation(line: 1042, scope: !1133, inlinedAt: !1129)
!1217 = distinct !DISubprogram(name: "to_int", linkageName: "std.core.String.to_int", scope: !2, file: !2, line: 1047, type: !1218, scopeLine: 1047, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !87)
!1218 = !DISubroutineType(types: !1219)
!1219 = !{!307, !1220, !60, !18}
!1220 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "int*", baseType: !18, size: 64, align: 64, dwarfAddressSpace: 0)
!1221 = !DILocalVariable(name: "self", arg: 1, scope: !1217, file: !2, line: 1047, type: !60)
!1222 = !DILocation(line: 1047, scope: !1217)
!1223 = !DILocalVariable(name: "base", arg: 2, scope: !1217, file: !2, line: 1047, type: !18)
!1224 = !DILocation(line: 966, scope: !1225, inlinedAt: !1222)
!1225 = distinct !DILexicalBlock(scope: !1226, file: !2, line: 973, column: 1)
!1226 = distinct !DISubprogram(name: "to_integer", linkageName: "to_integer", scope: !2, file: !2, line: 972, scopeLine: 972, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54, retainedNodes: !87)
!1227 = !DILocation(line: 1047, scope: !1225, inlinedAt: !1222)
!1228 = !DILocalVariable(name: "len", scope: !1226, file: !2, line: 974, type: !67, align: 8)
!1229 = !DILocation(line: 974, scope: !1226, inlinedAt: !1222)
!1230 = !DILocalVariable(name: "index", scope: !1226, file: !2, line: 975, type: !67, align: 8)
!1231 = !DILocation(line: 975, scope: !1226, inlinedAt: !1222)
!1232 = !DILocalVariable(name: "ptr", scope: !1226, file: !2, line: 976, type: !64, align: 8)
!1233 = !DILocation(line: 976, scope: !1226, inlinedAt: !1222)
!1234 = !DILocation(line: 977, scope: !1226, inlinedAt: !1222)
!1235 = !DILocation(line: 977, scope: !1236, inlinedAt: !1222)
!1236 = distinct !DILexicalBlock(scope: !1226, file: !2, line: 977, column: 2)
!1237 = !DILocation(line: 19, scope: !1238, inlinedAt: !1239)
!1238 = distinct !DISubprogram(name: "@is_blank", linkageName: "@is_blank", scope: !806, file: !806, line: 19, scopeLine: 19, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!1239 = !DILocation(line: 54, scope: !1240, inlinedAt: !1235)
!1240 = distinct !DISubprogram(name: "is_blank", linkageName: "is_blank", scope: !806, file: !806, line: 54, scopeLine: 54, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!1241 = !DILocation(line: 978, scope: !1226, inlinedAt: !1222)
!1242 = !DILocalVariable(name: "is_negative", scope: !1226, file: !2, line: 979, type: !115, align: 1)
!1243 = !DILocation(line: 979, scope: !1226, inlinedAt: !1222)
!1244 = !DILocation(line: 980, scope: !1245, inlinedAt: !1222)
!1245 = distinct !DILexicalBlock(scope: !1226, file: !2, line: 980, column: 2)
!1246 = !DILocation(line: 983, scope: !1247, inlinedAt: !1222)
!1247 = distinct !DILexicalBlock(scope: !1245, file: !2, line: 983, column: 4)
!1248 = !DILocation(line: 984, scope: !1247, inlinedAt: !1222)
!1249 = !DILocation(line: 985, scope: !1247, inlinedAt: !1222)
!1250 = !DILocation(line: 987, scope: !1251, inlinedAt: !1222)
!1251 = distinct !DILexicalBlock(scope: !1245, file: !2, line: 987, column: 4)
!1252 = !DILocation(line: 989, scope: !1253, inlinedAt: !1222)
!1253 = distinct !DILexicalBlock(scope: !1245, file: !2, line: 989, column: 4)
!1254 = !DILocation(line: 991, scope: !1226, inlinedAt: !1222)
!1255 = !DILocalVariable(name: "base_used", scope: !1226, file: !2, line: 992, type: !18, align: 4)
!1256 = !DILocation(line: 992, scope: !1226, inlinedAt: !1222)
!1257 = !DILocation(line: 993, scope: !1226, inlinedAt: !1222)
!1258 = !DILocation(line: 995, scope: !1259, inlinedAt: !1222)
!1259 = distinct !DILexicalBlock(scope: !1226, file: !2, line: 994, column: 2)
!1260 = !DILocation(line: 996, scope: !1259, inlinedAt: !1222)
!1261 = !DILocation(line: 997, scope: !1262, inlinedAt: !1222)
!1262 = distinct !DILexicalBlock(scope: !1259, file: !2, line: 997, column: 3)
!1263 = !DILocation(line: 1001, scope: !1264, inlinedAt: !1222)
!1264 = distinct !DILexicalBlock(scope: !1262, file: !2, line: 1001, column: 5)
!1265 = !DILocation(line: 1002, scope: !1264, inlinedAt: !1222)
!1266 = !DILocation(line: 1005, scope: !1267, inlinedAt: !1222)
!1267 = distinct !DILexicalBlock(scope: !1262, file: !2, line: 1005, column: 5)
!1268 = !DILocation(line: 1006, scope: !1267, inlinedAt: !1222)
!1269 = !DILocation(line: 1009, scope: !1270, inlinedAt: !1222)
!1270 = distinct !DILexicalBlock(scope: !1262, file: !2, line: 1009, column: 5)
!1271 = !DILocation(line: 1010, scope: !1270, inlinedAt: !1222)
!1272 = !DILocation(line: 1012, scope: !1273, inlinedAt: !1222)
!1273 = distinct !DILexicalBlock(scope: !1262, file: !2, line: 1012, column: 5)
!1274 = !DILocation(line: 1014, scope: !1259, inlinedAt: !1222)
!1275 = !DILocalVariable(name: "value", scope: !1226, file: !2, line: 1016, type: !18, align: 4)
!1276 = !DILocation(line: 1016, scope: !1226, inlinedAt: !1222)
!1277 = !DILocation(line: 1017, scope: !1226, inlinedAt: !1222)
!1278 = !DILocation(line: 1017, scope: !1279, inlinedAt: !1222)
!1279 = distinct !DILexicalBlock(scope: !1226, file: !2, line: 1017, column: 2)
!1280 = !DILocalVariable(name: "c", scope: !1281, file: !2, line: 1019, type: !65, align: 1)
!1281 = distinct !DILexicalBlock(scope: !1279, file: !2, line: 1018, column: 2)
!1282 = !DILocation(line: 1019, scope: !1281, inlinedAt: !1222)
!1283 = !DILocation(line: 1022, scope: !1284, inlinedAt: !1222)
!1284 = distinct !DILexicalBlock(scope: !1281, file: !2, line: 1020, column: 3)
!1285 = !DILocation(line: 1022, scope: !1286, inlinedAt: !1222)
!1286 = distinct !DILexicalBlock(scope: !1284, file: !2, line: 1022, column: 38)
!1287 = !DILocation(line: 1023, scope: !1284, inlinedAt: !1222)
!1288 = !DILocation(line: 1023, scope: !1289, inlinedAt: !1222)
!1289 = distinct !DILexicalBlock(scope: !1284, file: !2, line: 1023, column: 38)
!1290 = !DILocation(line: 1024, scope: !1284, inlinedAt: !1222)
!1291 = !DILocation(line: 1024, scope: !1292, inlinedAt: !1222)
!1292 = distinct !DILexicalBlock(scope: !1284, file: !2, line: 1024, column: 38)
!1293 = !DILocation(line: 1025, scope: !1294, inlinedAt: !1222)
!1294 = distinct !DILexicalBlock(scope: !1284, file: !2, line: 1025, column: 38)
!1295 = !DILocation(line: 1027, scope: !1281, inlinedAt: !1222)
!1296 = !DILocation(line: 1030, scope: !1297, inlinedAt: !1222)
!1297 = distinct !DILexicalBlock(scope: !1298, file: !2, line: 1029, column: 3)
!1298 = distinct !DILexicalBlock(scope: !1281, file: !2, line: 1028, column: 3)
!1299 = !DILocalVariable(name: "new_value", scope: !1300, file: !2, line: 1032, type: !18, align: 4)
!1300 = distinct !DILexicalBlock(scope: !1297, file: !2, line: 1031, column: 4)
!1301 = !DILocation(line: 1032, scope: !1300, inlinedAt: !1222)
!1302 = !DILocation(line: 1033, scope: !1300, inlinedAt: !1222)
!1303 = !DILocation(line: 1034, scope: !1300, inlinedAt: !1222)
!1304 = !DILocation(line: 1035, scope: !1300, inlinedAt: !1222)
!1305 = !DILocalVariable(name: "new_value", scope: !1297, file: !2, line: 1037, type: !18, align: 4)
!1306 = !DILocation(line: 1037, scope: !1297, inlinedAt: !1222)
!1307 = !DILocation(line: 1038, scope: !1297, inlinedAt: !1222)
!1308 = !DILocation(line: 1039, scope: !1297, inlinedAt: !1222)
!1309 = !DILocation(line: 1042, scope: !1226, inlinedAt: !1222)
!1310 = distinct !DISubprogram(name: "to_short", linkageName: "std.core.String.to_short", scope: !2, file: !2, line: 1048, type: !1311, scopeLine: 1048, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !87)
!1311 = !DISubroutineType(types: !1312)
!1312 = !{!307, !1313, !60, !18}
!1313 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "short*", baseType: !1314, size: 64, align: 64, dwarfAddressSpace: 0)
!1314 = !DIBasicType(name: "short", size: 16, encoding: DW_ATE_signed)
!1315 = !DILocalVariable(name: "self", arg: 1, scope: !1310, file: !2, line: 1048, type: !60)
!1316 = !DILocation(line: 1048, scope: !1310)
!1317 = !DILocalVariable(name: "base", arg: 2, scope: !1310, file: !2, line: 1048, type: !18)
!1318 = !DILocation(line: 966, scope: !1319, inlinedAt: !1316)
!1319 = distinct !DILexicalBlock(scope: !1320, file: !2, line: 973, column: 1)
!1320 = distinct !DISubprogram(name: "to_integer", linkageName: "to_integer", scope: !2, file: !2, line: 972, scopeLine: 972, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54, retainedNodes: !87)
!1321 = !DILocation(line: 1048, scope: !1319, inlinedAt: !1316)
!1322 = !DILocalVariable(name: "len", scope: !1320, file: !2, line: 974, type: !67, align: 8)
!1323 = !DILocation(line: 974, scope: !1320, inlinedAt: !1316)
!1324 = !DILocalVariable(name: "index", scope: !1320, file: !2, line: 975, type: !67, align: 8)
!1325 = !DILocation(line: 975, scope: !1320, inlinedAt: !1316)
!1326 = !DILocalVariable(name: "ptr", scope: !1320, file: !2, line: 976, type: !64, align: 8)
!1327 = !DILocation(line: 976, scope: !1320, inlinedAt: !1316)
!1328 = !DILocation(line: 977, scope: !1320, inlinedAt: !1316)
!1329 = !DILocation(line: 977, scope: !1330, inlinedAt: !1316)
!1330 = distinct !DILexicalBlock(scope: !1320, file: !2, line: 977, column: 2)
!1331 = !DILocation(line: 19, scope: !1332, inlinedAt: !1333)
!1332 = distinct !DISubprogram(name: "@is_blank", linkageName: "@is_blank", scope: !806, file: !806, line: 19, scopeLine: 19, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!1333 = !DILocation(line: 54, scope: !1334, inlinedAt: !1329)
!1334 = distinct !DISubprogram(name: "is_blank", linkageName: "is_blank", scope: !806, file: !806, line: 54, scopeLine: 54, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!1335 = !DILocation(line: 978, scope: !1320, inlinedAt: !1316)
!1336 = !DILocalVariable(name: "is_negative", scope: !1320, file: !2, line: 979, type: !115, align: 1)
!1337 = !DILocation(line: 979, scope: !1320, inlinedAt: !1316)
!1338 = !DILocation(line: 980, scope: !1339, inlinedAt: !1316)
!1339 = distinct !DILexicalBlock(scope: !1320, file: !2, line: 980, column: 2)
!1340 = !DILocation(line: 983, scope: !1341, inlinedAt: !1316)
!1341 = distinct !DILexicalBlock(scope: !1339, file: !2, line: 983, column: 4)
!1342 = !DILocation(line: 984, scope: !1341, inlinedAt: !1316)
!1343 = !DILocation(line: 985, scope: !1341, inlinedAt: !1316)
!1344 = !DILocation(line: 987, scope: !1345, inlinedAt: !1316)
!1345 = distinct !DILexicalBlock(scope: !1339, file: !2, line: 987, column: 4)
!1346 = !DILocation(line: 989, scope: !1347, inlinedAt: !1316)
!1347 = distinct !DILexicalBlock(scope: !1339, file: !2, line: 989, column: 4)
!1348 = !DILocation(line: 991, scope: !1320, inlinedAt: !1316)
!1349 = !DILocalVariable(name: "base_used", scope: !1320, file: !2, line: 992, type: !1314, align: 2)
!1350 = !DILocation(line: 992, scope: !1320, inlinedAt: !1316)
!1351 = !DILocation(line: 993, scope: !1320, inlinedAt: !1316)
!1352 = !DILocation(line: 995, scope: !1353, inlinedAt: !1316)
!1353 = distinct !DILexicalBlock(scope: !1320, file: !2, line: 994, column: 2)
!1354 = !DILocation(line: 996, scope: !1353, inlinedAt: !1316)
!1355 = !DILocation(line: 997, scope: !1356, inlinedAt: !1316)
!1356 = distinct !DILexicalBlock(scope: !1353, file: !2, line: 997, column: 3)
!1357 = !DILocation(line: 1001, scope: !1358, inlinedAt: !1316)
!1358 = distinct !DILexicalBlock(scope: !1356, file: !2, line: 1001, column: 5)
!1359 = !DILocation(line: 1002, scope: !1358, inlinedAt: !1316)
!1360 = !DILocation(line: 1005, scope: !1361, inlinedAt: !1316)
!1361 = distinct !DILexicalBlock(scope: !1356, file: !2, line: 1005, column: 5)
!1362 = !DILocation(line: 1006, scope: !1361, inlinedAt: !1316)
!1363 = !DILocation(line: 1009, scope: !1364, inlinedAt: !1316)
!1364 = distinct !DILexicalBlock(scope: !1356, file: !2, line: 1009, column: 5)
!1365 = !DILocation(line: 1010, scope: !1364, inlinedAt: !1316)
!1366 = !DILocation(line: 1012, scope: !1367, inlinedAt: !1316)
!1367 = distinct !DILexicalBlock(scope: !1356, file: !2, line: 1012, column: 5)
!1368 = !DILocation(line: 1014, scope: !1353, inlinedAt: !1316)
!1369 = !DILocalVariable(name: "value", scope: !1320, file: !2, line: 1016, type: !1314, align: 2)
!1370 = !DILocation(line: 1016, scope: !1320, inlinedAt: !1316)
!1371 = !DILocation(line: 1017, scope: !1320, inlinedAt: !1316)
!1372 = !DILocation(line: 1017, scope: !1373, inlinedAt: !1316)
!1373 = distinct !DILexicalBlock(scope: !1320, file: !2, line: 1017, column: 2)
!1374 = !DILocalVariable(name: "c", scope: !1375, file: !2, line: 1019, type: !65, align: 1)
!1375 = distinct !DILexicalBlock(scope: !1373, file: !2, line: 1018, column: 2)
!1376 = !DILocation(line: 1019, scope: !1375, inlinedAt: !1316)
!1377 = !DILocation(line: 1022, scope: !1378, inlinedAt: !1316)
!1378 = distinct !DILexicalBlock(scope: !1375, file: !2, line: 1020, column: 3)
!1379 = !DILocation(line: 1022, scope: !1380, inlinedAt: !1316)
!1380 = distinct !DILexicalBlock(scope: !1378, file: !2, line: 1022, column: 38)
!1381 = !DILocation(line: 1023, scope: !1378, inlinedAt: !1316)
!1382 = !DILocation(line: 1023, scope: !1383, inlinedAt: !1316)
!1383 = distinct !DILexicalBlock(scope: !1378, file: !2, line: 1023, column: 38)
!1384 = !DILocation(line: 1024, scope: !1378, inlinedAt: !1316)
!1385 = !DILocation(line: 1024, scope: !1386, inlinedAt: !1316)
!1386 = distinct !DILexicalBlock(scope: !1378, file: !2, line: 1024, column: 38)
!1387 = !DILocation(line: 1025, scope: !1388, inlinedAt: !1316)
!1388 = distinct !DILexicalBlock(scope: !1378, file: !2, line: 1025, column: 38)
!1389 = !DILocation(line: 1027, scope: !1375, inlinedAt: !1316)
!1390 = !DILocation(line: 1030, scope: !1391, inlinedAt: !1316)
!1391 = distinct !DILexicalBlock(scope: !1392, file: !2, line: 1029, column: 3)
!1392 = distinct !DILexicalBlock(scope: !1375, file: !2, line: 1028, column: 3)
!1393 = !DILocalVariable(name: "new_value", scope: !1394, file: !2, line: 1032, type: !1314, align: 2)
!1394 = distinct !DILexicalBlock(scope: !1391, file: !2, line: 1031, column: 4)
!1395 = !DILocation(line: 1032, scope: !1394, inlinedAt: !1316)
!1396 = !DILocation(line: 1033, scope: !1394, inlinedAt: !1316)
!1397 = !DILocation(line: 1034, scope: !1394, inlinedAt: !1316)
!1398 = !DILocation(line: 1035, scope: !1394, inlinedAt: !1316)
!1399 = !DILocalVariable(name: "new_value", scope: !1391, file: !2, line: 1037, type: !1314, align: 2)
!1400 = !DILocation(line: 1037, scope: !1391, inlinedAt: !1316)
!1401 = !DILocation(line: 1038, scope: !1391, inlinedAt: !1316)
!1402 = !DILocation(line: 1039, scope: !1391, inlinedAt: !1316)
!1403 = !DILocation(line: 1042, scope: !1320, inlinedAt: !1316)
!1404 = distinct !DISubprogram(name: "to_ichar", linkageName: "std.core.String.to_ichar", scope: !2, file: !2, line: 1049, type: !1405, scopeLine: 1049, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !87)
!1405 = !DISubroutineType(types: !1406)
!1406 = !{!307, !1407, !60, !18}
!1407 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "ichar*", baseType: !1408, size: 64, align: 64, dwarfAddressSpace: 0)
!1408 = !DIBasicType(name: "ichar", size: 8, encoding: DW_ATE_signed_char)
!1409 = !DILocalVariable(name: "self", arg: 1, scope: !1404, file: !2, line: 1049, type: !60)
!1410 = !DILocation(line: 1049, scope: !1404)
!1411 = !DILocalVariable(name: "base", arg: 2, scope: !1404, file: !2, line: 1049, type: !18)
!1412 = !DILocation(line: 966, scope: !1413, inlinedAt: !1410)
!1413 = distinct !DILexicalBlock(scope: !1414, file: !2, line: 973, column: 1)
!1414 = distinct !DISubprogram(name: "to_integer", linkageName: "to_integer", scope: !2, file: !2, line: 972, scopeLine: 972, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54, retainedNodes: !87)
!1415 = !DILocation(line: 1049, scope: !1413, inlinedAt: !1410)
!1416 = !DILocalVariable(name: "len", scope: !1414, file: !2, line: 974, type: !67, align: 8)
!1417 = !DILocation(line: 974, scope: !1414, inlinedAt: !1410)
!1418 = !DILocalVariable(name: "index", scope: !1414, file: !2, line: 975, type: !67, align: 8)
!1419 = !DILocation(line: 975, scope: !1414, inlinedAt: !1410)
!1420 = !DILocalVariable(name: "ptr", scope: !1414, file: !2, line: 976, type: !64, align: 8)
!1421 = !DILocation(line: 976, scope: !1414, inlinedAt: !1410)
!1422 = !DILocation(line: 977, scope: !1414, inlinedAt: !1410)
!1423 = !DILocation(line: 977, scope: !1424, inlinedAt: !1410)
!1424 = distinct !DILexicalBlock(scope: !1414, file: !2, line: 977, column: 2)
!1425 = !DILocation(line: 19, scope: !1426, inlinedAt: !1427)
!1426 = distinct !DISubprogram(name: "@is_blank", linkageName: "@is_blank", scope: !806, file: !806, line: 19, scopeLine: 19, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!1427 = !DILocation(line: 54, scope: !1428, inlinedAt: !1423)
!1428 = distinct !DISubprogram(name: "is_blank", linkageName: "is_blank", scope: !806, file: !806, line: 54, scopeLine: 54, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!1429 = !DILocation(line: 978, scope: !1414, inlinedAt: !1410)
!1430 = !DILocalVariable(name: "is_negative", scope: !1414, file: !2, line: 979, type: !115, align: 1)
!1431 = !DILocation(line: 979, scope: !1414, inlinedAt: !1410)
!1432 = !DILocation(line: 980, scope: !1433, inlinedAt: !1410)
!1433 = distinct !DILexicalBlock(scope: !1414, file: !2, line: 980, column: 2)
!1434 = !DILocation(line: 983, scope: !1435, inlinedAt: !1410)
!1435 = distinct !DILexicalBlock(scope: !1433, file: !2, line: 983, column: 4)
!1436 = !DILocation(line: 984, scope: !1435, inlinedAt: !1410)
!1437 = !DILocation(line: 985, scope: !1435, inlinedAt: !1410)
!1438 = !DILocation(line: 987, scope: !1439, inlinedAt: !1410)
!1439 = distinct !DILexicalBlock(scope: !1433, file: !2, line: 987, column: 4)
!1440 = !DILocation(line: 989, scope: !1441, inlinedAt: !1410)
!1441 = distinct !DILexicalBlock(scope: !1433, file: !2, line: 989, column: 4)
!1442 = !DILocation(line: 991, scope: !1414, inlinedAt: !1410)
!1443 = !DILocalVariable(name: "base_used", scope: !1414, file: !2, line: 992, type: !1408, align: 1)
!1444 = !DILocation(line: 992, scope: !1414, inlinedAt: !1410)
!1445 = !DILocation(line: 993, scope: !1414, inlinedAt: !1410)
!1446 = !DILocation(line: 995, scope: !1447, inlinedAt: !1410)
!1447 = distinct !DILexicalBlock(scope: !1414, file: !2, line: 994, column: 2)
!1448 = !DILocation(line: 996, scope: !1447, inlinedAt: !1410)
!1449 = !DILocation(line: 997, scope: !1450, inlinedAt: !1410)
!1450 = distinct !DILexicalBlock(scope: !1447, file: !2, line: 997, column: 3)
!1451 = !DILocation(line: 1001, scope: !1452, inlinedAt: !1410)
!1452 = distinct !DILexicalBlock(scope: !1450, file: !2, line: 1001, column: 5)
!1453 = !DILocation(line: 1002, scope: !1452, inlinedAt: !1410)
!1454 = !DILocation(line: 1005, scope: !1455, inlinedAt: !1410)
!1455 = distinct !DILexicalBlock(scope: !1450, file: !2, line: 1005, column: 5)
!1456 = !DILocation(line: 1006, scope: !1455, inlinedAt: !1410)
!1457 = !DILocation(line: 1009, scope: !1458, inlinedAt: !1410)
!1458 = distinct !DILexicalBlock(scope: !1450, file: !2, line: 1009, column: 5)
!1459 = !DILocation(line: 1010, scope: !1458, inlinedAt: !1410)
!1460 = !DILocation(line: 1012, scope: !1461, inlinedAt: !1410)
!1461 = distinct !DILexicalBlock(scope: !1450, file: !2, line: 1012, column: 5)
!1462 = !DILocation(line: 1014, scope: !1447, inlinedAt: !1410)
!1463 = !DILocalVariable(name: "value", scope: !1414, file: !2, line: 1016, type: !1408, align: 1)
!1464 = !DILocation(line: 1016, scope: !1414, inlinedAt: !1410)
!1465 = !DILocation(line: 1017, scope: !1414, inlinedAt: !1410)
!1466 = !DILocation(line: 1017, scope: !1467, inlinedAt: !1410)
!1467 = distinct !DILexicalBlock(scope: !1414, file: !2, line: 1017, column: 2)
!1468 = !DILocalVariable(name: "c", scope: !1469, file: !2, line: 1019, type: !65, align: 1)
!1469 = distinct !DILexicalBlock(scope: !1467, file: !2, line: 1018, column: 2)
!1470 = !DILocation(line: 1019, scope: !1469, inlinedAt: !1410)
!1471 = !DILocation(line: 1022, scope: !1472, inlinedAt: !1410)
!1472 = distinct !DILexicalBlock(scope: !1469, file: !2, line: 1020, column: 3)
!1473 = !DILocation(line: 1022, scope: !1474, inlinedAt: !1410)
!1474 = distinct !DILexicalBlock(scope: !1472, file: !2, line: 1022, column: 38)
!1475 = !DILocation(line: 1023, scope: !1472, inlinedAt: !1410)
!1476 = !DILocation(line: 1023, scope: !1477, inlinedAt: !1410)
!1477 = distinct !DILexicalBlock(scope: !1472, file: !2, line: 1023, column: 38)
!1478 = !DILocation(line: 1024, scope: !1472, inlinedAt: !1410)
!1479 = !DILocation(line: 1024, scope: !1480, inlinedAt: !1410)
!1480 = distinct !DILexicalBlock(scope: !1472, file: !2, line: 1024, column: 38)
!1481 = !DILocation(line: 1025, scope: !1482, inlinedAt: !1410)
!1482 = distinct !DILexicalBlock(scope: !1472, file: !2, line: 1025, column: 38)
!1483 = !DILocation(line: 1027, scope: !1469, inlinedAt: !1410)
!1484 = !DILocation(line: 1030, scope: !1485, inlinedAt: !1410)
!1485 = distinct !DILexicalBlock(scope: !1486, file: !2, line: 1029, column: 3)
!1486 = distinct !DILexicalBlock(scope: !1469, file: !2, line: 1028, column: 3)
!1487 = !DILocalVariable(name: "new_value", scope: !1488, file: !2, line: 1032, type: !1408, align: 1)
!1488 = distinct !DILexicalBlock(scope: !1485, file: !2, line: 1031, column: 4)
!1489 = !DILocation(line: 1032, scope: !1488, inlinedAt: !1410)
!1490 = !DILocation(line: 1033, scope: !1488, inlinedAt: !1410)
!1491 = !DILocation(line: 1034, scope: !1488, inlinedAt: !1410)
!1492 = !DILocation(line: 1035, scope: !1488, inlinedAt: !1410)
!1493 = !DILocalVariable(name: "new_value", scope: !1485, file: !2, line: 1037, type: !1408, align: 1)
!1494 = !DILocation(line: 1037, scope: !1485, inlinedAt: !1410)
!1495 = !DILocation(line: 1038, scope: !1485, inlinedAt: !1410)
!1496 = !DILocation(line: 1039, scope: !1485, inlinedAt: !1410)
!1497 = !DILocation(line: 1042, scope: !1414, inlinedAt: !1410)
!1498 = distinct !DISubprogram(name: "to_uint128", linkageName: "std.core.String.to_uint128", scope: !2, file: !2, line: 1051, type: !1499, scopeLine: 1051, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !87)
!1499 = !DISubroutineType(types: !1500)
!1500 = !{!307, !1501, !60, !18}
!1501 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "uint128*", baseType: !1502, size: 64, align: 64, dwarfAddressSpace: 0)
!1502 = !DIBasicType(name: "uint128", size: 128, encoding: DW_ATE_unsigned)
!1503 = !DILocalVariable(name: "self", arg: 1, scope: !1498, file: !2, line: 1051, type: !60)
!1504 = !DILocation(line: 1051, scope: !1498)
!1505 = !DILocalVariable(name: "base", arg: 2, scope: !1498, file: !2, line: 1051, type: !18)
!1506 = !DILocation(line: 966, scope: !1507, inlinedAt: !1504)
!1507 = distinct !DILexicalBlock(scope: !1508, file: !2, line: 973, column: 1)
!1508 = distinct !DISubprogram(name: "to_integer", linkageName: "to_integer", scope: !2, file: !2, line: 972, scopeLine: 972, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54, retainedNodes: !87)
!1509 = !DILocation(line: 1051, scope: !1507, inlinedAt: !1504)
!1510 = !DILocalVariable(name: "len", scope: !1508, file: !2, line: 974, type: !67, align: 8)
!1511 = !DILocation(line: 974, scope: !1508, inlinedAt: !1504)
!1512 = !DILocalVariable(name: "index", scope: !1508, file: !2, line: 975, type: !67, align: 8)
!1513 = !DILocation(line: 975, scope: !1508, inlinedAt: !1504)
!1514 = !DILocalVariable(name: "ptr", scope: !1508, file: !2, line: 976, type: !64, align: 8)
!1515 = !DILocation(line: 976, scope: !1508, inlinedAt: !1504)
!1516 = !DILocation(line: 977, scope: !1508, inlinedAt: !1504)
!1517 = !DILocation(line: 977, scope: !1518, inlinedAt: !1504)
!1518 = distinct !DILexicalBlock(scope: !1508, file: !2, line: 977, column: 2)
!1519 = !DILocation(line: 19, scope: !1520, inlinedAt: !1521)
!1520 = distinct !DISubprogram(name: "@is_blank", linkageName: "@is_blank", scope: !806, file: !806, line: 19, scopeLine: 19, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!1521 = !DILocation(line: 54, scope: !1522, inlinedAt: !1517)
!1522 = distinct !DISubprogram(name: "is_blank", linkageName: "is_blank", scope: !806, file: !806, line: 54, scopeLine: 54, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!1523 = !DILocation(line: 978, scope: !1508, inlinedAt: !1504)
!1524 = !DILocalVariable(name: "is_negative", scope: !1508, file: !2, line: 979, type: !115, align: 1)
!1525 = !DILocation(line: 979, scope: !1508, inlinedAt: !1504)
!1526 = !DILocation(line: 980, scope: !1527, inlinedAt: !1504)
!1527 = distinct !DILexicalBlock(scope: !1508, file: !2, line: 980, column: 2)
!1528 = !DILocation(line: 983, scope: !1529, inlinedAt: !1504)
!1529 = distinct !DILexicalBlock(scope: !1527, file: !2, line: 983, column: 4)
!1530 = !DILocation(line: 987, scope: !1531, inlinedAt: !1504)
!1531 = distinct !DILexicalBlock(scope: !1527, file: !2, line: 987, column: 4)
!1532 = !DILocation(line: 989, scope: !1533, inlinedAt: !1504)
!1533 = distinct !DILexicalBlock(scope: !1527, file: !2, line: 989, column: 4)
!1534 = !DILocation(line: 991, scope: !1508, inlinedAt: !1504)
!1535 = !DILocalVariable(name: "base_used", scope: !1508, file: !2, line: 992, type: !1502, align: 16)
!1536 = !DILocation(line: 992, scope: !1508, inlinedAt: !1504)
!1537 = !DILocation(line: 993, scope: !1508, inlinedAt: !1504)
!1538 = !DILocation(line: 995, scope: !1539, inlinedAt: !1504)
!1539 = distinct !DILexicalBlock(scope: !1508, file: !2, line: 994, column: 2)
!1540 = !DILocation(line: 996, scope: !1539, inlinedAt: !1504)
!1541 = !DILocation(line: 997, scope: !1542, inlinedAt: !1504)
!1542 = distinct !DILexicalBlock(scope: !1539, file: !2, line: 997, column: 3)
!1543 = !DILocation(line: 1001, scope: !1544, inlinedAt: !1504)
!1544 = distinct !DILexicalBlock(scope: !1542, file: !2, line: 1001, column: 5)
!1545 = !DILocation(line: 1002, scope: !1544, inlinedAt: !1504)
!1546 = !DILocation(line: 1005, scope: !1547, inlinedAt: !1504)
!1547 = distinct !DILexicalBlock(scope: !1542, file: !2, line: 1005, column: 5)
!1548 = !DILocation(line: 1006, scope: !1547, inlinedAt: !1504)
!1549 = !DILocation(line: 1009, scope: !1550, inlinedAt: !1504)
!1550 = distinct !DILexicalBlock(scope: !1542, file: !2, line: 1009, column: 5)
!1551 = !DILocation(line: 1010, scope: !1550, inlinedAt: !1504)
!1552 = !DILocation(line: 1012, scope: !1553, inlinedAt: !1504)
!1553 = distinct !DILexicalBlock(scope: !1542, file: !2, line: 1012, column: 5)
!1554 = !DILocation(line: 1014, scope: !1539, inlinedAt: !1504)
!1555 = !DILocalVariable(name: "value", scope: !1508, file: !2, line: 1016, type: !1502, align: 16)
!1556 = !DILocation(line: 1016, scope: !1508, inlinedAt: !1504)
!1557 = !DILocation(line: 1017, scope: !1508, inlinedAt: !1504)
!1558 = !DILocation(line: 1017, scope: !1559, inlinedAt: !1504)
!1559 = distinct !DILexicalBlock(scope: !1508, file: !2, line: 1017, column: 2)
!1560 = !DILocalVariable(name: "c", scope: !1561, file: !2, line: 1019, type: !65, align: 1)
!1561 = distinct !DILexicalBlock(scope: !1559, file: !2, line: 1018, column: 2)
!1562 = !DILocation(line: 1019, scope: !1561, inlinedAt: !1504)
!1563 = !DILocation(line: 1022, scope: !1564, inlinedAt: !1504)
!1564 = distinct !DILexicalBlock(scope: !1561, file: !2, line: 1020, column: 3)
!1565 = !DILocation(line: 1022, scope: !1566, inlinedAt: !1504)
!1566 = distinct !DILexicalBlock(scope: !1564, file: !2, line: 1022, column: 38)
!1567 = !DILocation(line: 1023, scope: !1564, inlinedAt: !1504)
!1568 = !DILocation(line: 1023, scope: !1569, inlinedAt: !1504)
!1569 = distinct !DILexicalBlock(scope: !1564, file: !2, line: 1023, column: 38)
!1570 = !DILocation(line: 1024, scope: !1564, inlinedAt: !1504)
!1571 = !DILocation(line: 1024, scope: !1572, inlinedAt: !1504)
!1572 = distinct !DILexicalBlock(scope: !1564, file: !2, line: 1024, column: 38)
!1573 = !DILocation(line: 1025, scope: !1574, inlinedAt: !1504)
!1574 = distinct !DILexicalBlock(scope: !1564, file: !2, line: 1025, column: 38)
!1575 = !DILocation(line: 1027, scope: !1561, inlinedAt: !1504)
!1576 = !DILocation(line: 1030, scope: !1577, inlinedAt: !1504)
!1577 = distinct !DILexicalBlock(scope: !1578, file: !2, line: 1029, column: 3)
!1578 = distinct !DILexicalBlock(scope: !1561, file: !2, line: 1028, column: 3)
!1579 = !DILocalVariable(name: "new_value", scope: !1580, file: !2, line: 1032, type: !1502, align: 16)
!1580 = distinct !DILexicalBlock(scope: !1577, file: !2, line: 1031, column: 4)
!1581 = !DILocation(line: 1032, scope: !1580, inlinedAt: !1504)
!1582 = !DILocation(line: 1033, scope: !1580, inlinedAt: !1504)
!1583 = !DILocation(line: 1034, scope: !1580, inlinedAt: !1504)
!1584 = !DILocation(line: 1035, scope: !1580, inlinedAt: !1504)
!1585 = !DILocalVariable(name: "new_value", scope: !1577, file: !2, line: 1037, type: !1502, align: 16)
!1586 = !DILocation(line: 1037, scope: !1577, inlinedAt: !1504)
!1587 = !DILocation(line: 1038, scope: !1577, inlinedAt: !1504)
!1588 = !DILocation(line: 1039, scope: !1577, inlinedAt: !1504)
!1589 = !DILocation(line: 1042, scope: !1508, inlinedAt: !1504)
!1590 = distinct !DISubprogram(name: "to_ulong", linkageName: "std.core.String.to_ulong", scope: !2, file: !2, line: 1052, type: !1591, scopeLine: 1052, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !87)
!1591 = !DISubroutineType(types: !1592)
!1592 = !{!307, !1593, !60, !18}
!1593 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "ulong*", baseType: !68, size: 64, align: 64, dwarfAddressSpace: 0)
!1594 = !DILocalVariable(name: "self", arg: 1, scope: !1590, file: !2, line: 1052, type: !60)
!1595 = !DILocation(line: 1052, scope: !1590)
!1596 = !DILocalVariable(name: "base", arg: 2, scope: !1590, file: !2, line: 1052, type: !18)
!1597 = !DILocation(line: 966, scope: !1598, inlinedAt: !1595)
!1598 = distinct !DILexicalBlock(scope: !1599, file: !2, line: 973, column: 1)
!1599 = distinct !DISubprogram(name: "to_integer", linkageName: "to_integer", scope: !2, file: !2, line: 972, scopeLine: 972, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54, retainedNodes: !87)
!1600 = !DILocation(line: 1052, scope: !1598, inlinedAt: !1595)
!1601 = !DILocalVariable(name: "len", scope: !1599, file: !2, line: 974, type: !67, align: 8)
!1602 = !DILocation(line: 974, scope: !1599, inlinedAt: !1595)
!1603 = !DILocalVariable(name: "index", scope: !1599, file: !2, line: 975, type: !67, align: 8)
!1604 = !DILocation(line: 975, scope: !1599, inlinedAt: !1595)
!1605 = !DILocalVariable(name: "ptr", scope: !1599, file: !2, line: 976, type: !64, align: 8)
!1606 = !DILocation(line: 976, scope: !1599, inlinedAt: !1595)
!1607 = !DILocation(line: 977, scope: !1599, inlinedAt: !1595)
!1608 = !DILocation(line: 977, scope: !1609, inlinedAt: !1595)
!1609 = distinct !DILexicalBlock(scope: !1599, file: !2, line: 977, column: 2)
!1610 = !DILocation(line: 19, scope: !1611, inlinedAt: !1612)
!1611 = distinct !DISubprogram(name: "@is_blank", linkageName: "@is_blank", scope: !806, file: !806, line: 19, scopeLine: 19, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!1612 = !DILocation(line: 54, scope: !1613, inlinedAt: !1608)
!1613 = distinct !DISubprogram(name: "is_blank", linkageName: "is_blank", scope: !806, file: !806, line: 54, scopeLine: 54, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!1614 = !DILocation(line: 978, scope: !1599, inlinedAt: !1595)
!1615 = !DILocalVariable(name: "is_negative", scope: !1599, file: !2, line: 979, type: !115, align: 1)
!1616 = !DILocation(line: 979, scope: !1599, inlinedAt: !1595)
!1617 = !DILocation(line: 980, scope: !1618, inlinedAt: !1595)
!1618 = distinct !DILexicalBlock(scope: !1599, file: !2, line: 980, column: 2)
!1619 = !DILocation(line: 983, scope: !1620, inlinedAt: !1595)
!1620 = distinct !DILexicalBlock(scope: !1618, file: !2, line: 983, column: 4)
!1621 = !DILocation(line: 987, scope: !1622, inlinedAt: !1595)
!1622 = distinct !DILexicalBlock(scope: !1618, file: !2, line: 987, column: 4)
!1623 = !DILocation(line: 989, scope: !1624, inlinedAt: !1595)
!1624 = distinct !DILexicalBlock(scope: !1618, file: !2, line: 989, column: 4)
!1625 = !DILocation(line: 991, scope: !1599, inlinedAt: !1595)
!1626 = !DILocalVariable(name: "base_used", scope: !1599, file: !2, line: 992, type: !68, align: 8)
!1627 = !DILocation(line: 992, scope: !1599, inlinedAt: !1595)
!1628 = !DILocation(line: 993, scope: !1599, inlinedAt: !1595)
!1629 = !DILocation(line: 995, scope: !1630, inlinedAt: !1595)
!1630 = distinct !DILexicalBlock(scope: !1599, file: !2, line: 994, column: 2)
!1631 = !DILocation(line: 996, scope: !1630, inlinedAt: !1595)
!1632 = !DILocation(line: 997, scope: !1633, inlinedAt: !1595)
!1633 = distinct !DILexicalBlock(scope: !1630, file: !2, line: 997, column: 3)
!1634 = !DILocation(line: 1001, scope: !1635, inlinedAt: !1595)
!1635 = distinct !DILexicalBlock(scope: !1633, file: !2, line: 1001, column: 5)
!1636 = !DILocation(line: 1002, scope: !1635, inlinedAt: !1595)
!1637 = !DILocation(line: 1005, scope: !1638, inlinedAt: !1595)
!1638 = distinct !DILexicalBlock(scope: !1633, file: !2, line: 1005, column: 5)
!1639 = !DILocation(line: 1006, scope: !1638, inlinedAt: !1595)
!1640 = !DILocation(line: 1009, scope: !1641, inlinedAt: !1595)
!1641 = distinct !DILexicalBlock(scope: !1633, file: !2, line: 1009, column: 5)
!1642 = !DILocation(line: 1010, scope: !1641, inlinedAt: !1595)
!1643 = !DILocation(line: 1012, scope: !1644, inlinedAt: !1595)
!1644 = distinct !DILexicalBlock(scope: !1633, file: !2, line: 1012, column: 5)
!1645 = !DILocation(line: 1014, scope: !1630, inlinedAt: !1595)
!1646 = !DILocalVariable(name: "value", scope: !1599, file: !2, line: 1016, type: !68, align: 8)
!1647 = !DILocation(line: 1016, scope: !1599, inlinedAt: !1595)
!1648 = !DILocation(line: 1017, scope: !1599, inlinedAt: !1595)
!1649 = !DILocation(line: 1017, scope: !1650, inlinedAt: !1595)
!1650 = distinct !DILexicalBlock(scope: !1599, file: !2, line: 1017, column: 2)
!1651 = !DILocalVariable(name: "c", scope: !1652, file: !2, line: 1019, type: !65, align: 1)
!1652 = distinct !DILexicalBlock(scope: !1650, file: !2, line: 1018, column: 2)
!1653 = !DILocation(line: 1019, scope: !1652, inlinedAt: !1595)
!1654 = !DILocation(line: 1022, scope: !1655, inlinedAt: !1595)
!1655 = distinct !DILexicalBlock(scope: !1652, file: !2, line: 1020, column: 3)
!1656 = !DILocation(line: 1022, scope: !1657, inlinedAt: !1595)
!1657 = distinct !DILexicalBlock(scope: !1655, file: !2, line: 1022, column: 38)
!1658 = !DILocation(line: 1023, scope: !1655, inlinedAt: !1595)
!1659 = !DILocation(line: 1023, scope: !1660, inlinedAt: !1595)
!1660 = distinct !DILexicalBlock(scope: !1655, file: !2, line: 1023, column: 38)
!1661 = !DILocation(line: 1024, scope: !1655, inlinedAt: !1595)
!1662 = !DILocation(line: 1024, scope: !1663, inlinedAt: !1595)
!1663 = distinct !DILexicalBlock(scope: !1655, file: !2, line: 1024, column: 38)
!1664 = !DILocation(line: 1025, scope: !1665, inlinedAt: !1595)
!1665 = distinct !DILexicalBlock(scope: !1655, file: !2, line: 1025, column: 38)
!1666 = !DILocation(line: 1027, scope: !1652, inlinedAt: !1595)
!1667 = !DILocation(line: 1030, scope: !1668, inlinedAt: !1595)
!1668 = distinct !DILexicalBlock(scope: !1669, file: !2, line: 1029, column: 3)
!1669 = distinct !DILexicalBlock(scope: !1652, file: !2, line: 1028, column: 3)
!1670 = !DILocalVariable(name: "new_value", scope: !1671, file: !2, line: 1032, type: !68, align: 8)
!1671 = distinct !DILexicalBlock(scope: !1668, file: !2, line: 1031, column: 4)
!1672 = !DILocation(line: 1032, scope: !1671, inlinedAt: !1595)
!1673 = !DILocation(line: 1033, scope: !1671, inlinedAt: !1595)
!1674 = !DILocation(line: 1034, scope: !1671, inlinedAt: !1595)
!1675 = !DILocation(line: 1035, scope: !1671, inlinedAt: !1595)
!1676 = !DILocalVariable(name: "new_value", scope: !1668, file: !2, line: 1037, type: !68, align: 8)
!1677 = !DILocation(line: 1037, scope: !1668, inlinedAt: !1595)
!1678 = !DILocation(line: 1038, scope: !1668, inlinedAt: !1595)
!1679 = !DILocation(line: 1039, scope: !1668, inlinedAt: !1595)
!1680 = !DILocation(line: 1042, scope: !1599, inlinedAt: !1595)
!1681 = distinct !DISubprogram(name: "to_uint", linkageName: "std.core.String.to_uint", scope: !2, file: !2, line: 1053, type: !1682, scopeLine: 1053, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !87)
!1682 = !DISubroutineType(types: !1683)
!1683 = !{!307, !1684, !60, !18}
!1684 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "uint*", baseType: !3, size: 64, align: 64, dwarfAddressSpace: 0)
!1685 = !DILocalVariable(name: "self", arg: 1, scope: !1681, file: !2, line: 1053, type: !60)
!1686 = !DILocation(line: 1053, scope: !1681)
!1687 = !DILocalVariable(name: "base", arg: 2, scope: !1681, file: !2, line: 1053, type: !18)
!1688 = !DILocation(line: 966, scope: !1689, inlinedAt: !1686)
!1689 = distinct !DILexicalBlock(scope: !1690, file: !2, line: 973, column: 1)
!1690 = distinct !DISubprogram(name: "to_integer", linkageName: "to_integer", scope: !2, file: !2, line: 972, scopeLine: 972, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54, retainedNodes: !87)
!1691 = !DILocation(line: 1053, scope: !1689, inlinedAt: !1686)
!1692 = !DILocalVariable(name: "len", scope: !1690, file: !2, line: 974, type: !67, align: 8)
!1693 = !DILocation(line: 974, scope: !1690, inlinedAt: !1686)
!1694 = !DILocalVariable(name: "index", scope: !1690, file: !2, line: 975, type: !67, align: 8)
!1695 = !DILocation(line: 975, scope: !1690, inlinedAt: !1686)
!1696 = !DILocalVariable(name: "ptr", scope: !1690, file: !2, line: 976, type: !64, align: 8)
!1697 = !DILocation(line: 976, scope: !1690, inlinedAt: !1686)
!1698 = !DILocation(line: 977, scope: !1690, inlinedAt: !1686)
!1699 = !DILocation(line: 977, scope: !1700, inlinedAt: !1686)
!1700 = distinct !DILexicalBlock(scope: !1690, file: !2, line: 977, column: 2)
!1701 = !DILocation(line: 19, scope: !1702, inlinedAt: !1703)
!1702 = distinct !DISubprogram(name: "@is_blank", linkageName: "@is_blank", scope: !806, file: !806, line: 19, scopeLine: 19, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!1703 = !DILocation(line: 54, scope: !1704, inlinedAt: !1699)
!1704 = distinct !DISubprogram(name: "is_blank", linkageName: "is_blank", scope: !806, file: !806, line: 54, scopeLine: 54, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!1705 = !DILocation(line: 978, scope: !1690, inlinedAt: !1686)
!1706 = !DILocalVariable(name: "is_negative", scope: !1690, file: !2, line: 979, type: !115, align: 1)
!1707 = !DILocation(line: 979, scope: !1690, inlinedAt: !1686)
!1708 = !DILocation(line: 980, scope: !1709, inlinedAt: !1686)
!1709 = distinct !DILexicalBlock(scope: !1690, file: !2, line: 980, column: 2)
!1710 = !DILocation(line: 983, scope: !1711, inlinedAt: !1686)
!1711 = distinct !DILexicalBlock(scope: !1709, file: !2, line: 983, column: 4)
!1712 = !DILocation(line: 987, scope: !1713, inlinedAt: !1686)
!1713 = distinct !DILexicalBlock(scope: !1709, file: !2, line: 987, column: 4)
!1714 = !DILocation(line: 989, scope: !1715, inlinedAt: !1686)
!1715 = distinct !DILexicalBlock(scope: !1709, file: !2, line: 989, column: 4)
!1716 = !DILocation(line: 991, scope: !1690, inlinedAt: !1686)
!1717 = !DILocalVariable(name: "base_used", scope: !1690, file: !2, line: 992, type: !3, align: 4)
!1718 = !DILocation(line: 992, scope: !1690, inlinedAt: !1686)
!1719 = !DILocation(line: 993, scope: !1690, inlinedAt: !1686)
!1720 = !DILocation(line: 995, scope: !1721, inlinedAt: !1686)
!1721 = distinct !DILexicalBlock(scope: !1690, file: !2, line: 994, column: 2)
!1722 = !DILocation(line: 996, scope: !1721, inlinedAt: !1686)
!1723 = !DILocation(line: 997, scope: !1724, inlinedAt: !1686)
!1724 = distinct !DILexicalBlock(scope: !1721, file: !2, line: 997, column: 3)
!1725 = !DILocation(line: 1001, scope: !1726, inlinedAt: !1686)
!1726 = distinct !DILexicalBlock(scope: !1724, file: !2, line: 1001, column: 5)
!1727 = !DILocation(line: 1002, scope: !1726, inlinedAt: !1686)
!1728 = !DILocation(line: 1005, scope: !1729, inlinedAt: !1686)
!1729 = distinct !DILexicalBlock(scope: !1724, file: !2, line: 1005, column: 5)
!1730 = !DILocation(line: 1006, scope: !1729, inlinedAt: !1686)
!1731 = !DILocation(line: 1009, scope: !1732, inlinedAt: !1686)
!1732 = distinct !DILexicalBlock(scope: !1724, file: !2, line: 1009, column: 5)
!1733 = !DILocation(line: 1010, scope: !1732, inlinedAt: !1686)
!1734 = !DILocation(line: 1012, scope: !1735, inlinedAt: !1686)
!1735 = distinct !DILexicalBlock(scope: !1724, file: !2, line: 1012, column: 5)
!1736 = !DILocation(line: 1014, scope: !1721, inlinedAt: !1686)
!1737 = !DILocalVariable(name: "value", scope: !1690, file: !2, line: 1016, type: !3, align: 4)
!1738 = !DILocation(line: 1016, scope: !1690, inlinedAt: !1686)
!1739 = !DILocation(line: 1017, scope: !1690, inlinedAt: !1686)
!1740 = !DILocation(line: 1017, scope: !1741, inlinedAt: !1686)
!1741 = distinct !DILexicalBlock(scope: !1690, file: !2, line: 1017, column: 2)
!1742 = !DILocalVariable(name: "c", scope: !1743, file: !2, line: 1019, type: !65, align: 1)
!1743 = distinct !DILexicalBlock(scope: !1741, file: !2, line: 1018, column: 2)
!1744 = !DILocation(line: 1019, scope: !1743, inlinedAt: !1686)
!1745 = !DILocation(line: 1022, scope: !1746, inlinedAt: !1686)
!1746 = distinct !DILexicalBlock(scope: !1743, file: !2, line: 1020, column: 3)
!1747 = !DILocation(line: 1022, scope: !1748, inlinedAt: !1686)
!1748 = distinct !DILexicalBlock(scope: !1746, file: !2, line: 1022, column: 38)
!1749 = !DILocation(line: 1023, scope: !1746, inlinedAt: !1686)
!1750 = !DILocation(line: 1023, scope: !1751, inlinedAt: !1686)
!1751 = distinct !DILexicalBlock(scope: !1746, file: !2, line: 1023, column: 38)
!1752 = !DILocation(line: 1024, scope: !1746, inlinedAt: !1686)
!1753 = !DILocation(line: 1024, scope: !1754, inlinedAt: !1686)
!1754 = distinct !DILexicalBlock(scope: !1746, file: !2, line: 1024, column: 38)
!1755 = !DILocation(line: 1025, scope: !1756, inlinedAt: !1686)
!1756 = distinct !DILexicalBlock(scope: !1746, file: !2, line: 1025, column: 38)
!1757 = !DILocation(line: 1027, scope: !1743, inlinedAt: !1686)
!1758 = !DILocation(line: 1030, scope: !1759, inlinedAt: !1686)
!1759 = distinct !DILexicalBlock(scope: !1760, file: !2, line: 1029, column: 3)
!1760 = distinct !DILexicalBlock(scope: !1743, file: !2, line: 1028, column: 3)
!1761 = !DILocalVariable(name: "new_value", scope: !1762, file: !2, line: 1032, type: !3, align: 4)
!1762 = distinct !DILexicalBlock(scope: !1759, file: !2, line: 1031, column: 4)
!1763 = !DILocation(line: 1032, scope: !1762, inlinedAt: !1686)
!1764 = !DILocation(line: 1033, scope: !1762, inlinedAt: !1686)
!1765 = !DILocation(line: 1034, scope: !1762, inlinedAt: !1686)
!1766 = !DILocation(line: 1035, scope: !1762, inlinedAt: !1686)
!1767 = !DILocalVariable(name: "new_value", scope: !1759, file: !2, line: 1037, type: !3, align: 4)
!1768 = !DILocation(line: 1037, scope: !1759, inlinedAt: !1686)
!1769 = !DILocation(line: 1038, scope: !1759, inlinedAt: !1686)
!1770 = !DILocation(line: 1039, scope: !1759, inlinedAt: !1686)
!1771 = !DILocation(line: 1042, scope: !1690, inlinedAt: !1686)
!1772 = distinct !DISubprogram(name: "to_ushort", linkageName: "std.core.String.to_ushort", scope: !2, file: !2, line: 1054, type: !1773, scopeLine: 1054, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !87)
!1773 = !DISubroutineType(types: !1774)
!1774 = !{!307, !571, !60, !18}
!1775 = !DILocalVariable(name: "self", arg: 1, scope: !1772, file: !2, line: 1054, type: !60)
!1776 = !DILocation(line: 1054, scope: !1772)
!1777 = !DILocalVariable(name: "base", arg: 2, scope: !1772, file: !2, line: 1054, type: !18)
!1778 = !DILocation(line: 966, scope: !1779, inlinedAt: !1776)
!1779 = distinct !DILexicalBlock(scope: !1780, file: !2, line: 973, column: 1)
!1780 = distinct !DISubprogram(name: "to_integer", linkageName: "to_integer", scope: !2, file: !2, line: 972, scopeLine: 972, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54, retainedNodes: !87)
!1781 = !DILocation(line: 1054, scope: !1779, inlinedAt: !1776)
!1782 = !DILocalVariable(name: "len", scope: !1780, file: !2, line: 974, type: !67, align: 8)
!1783 = !DILocation(line: 974, scope: !1780, inlinedAt: !1776)
!1784 = !DILocalVariable(name: "index", scope: !1780, file: !2, line: 975, type: !67, align: 8)
!1785 = !DILocation(line: 975, scope: !1780, inlinedAt: !1776)
!1786 = !DILocalVariable(name: "ptr", scope: !1780, file: !2, line: 976, type: !64, align: 8)
!1787 = !DILocation(line: 976, scope: !1780, inlinedAt: !1776)
!1788 = !DILocation(line: 977, scope: !1780, inlinedAt: !1776)
!1789 = !DILocation(line: 977, scope: !1790, inlinedAt: !1776)
!1790 = distinct !DILexicalBlock(scope: !1780, file: !2, line: 977, column: 2)
!1791 = !DILocation(line: 19, scope: !1792, inlinedAt: !1793)
!1792 = distinct !DISubprogram(name: "@is_blank", linkageName: "@is_blank", scope: !806, file: !806, line: 19, scopeLine: 19, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!1793 = !DILocation(line: 54, scope: !1794, inlinedAt: !1789)
!1794 = distinct !DISubprogram(name: "is_blank", linkageName: "is_blank", scope: !806, file: !806, line: 54, scopeLine: 54, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!1795 = !DILocation(line: 978, scope: !1780, inlinedAt: !1776)
!1796 = !DILocalVariable(name: "is_negative", scope: !1780, file: !2, line: 979, type: !115, align: 1)
!1797 = !DILocation(line: 979, scope: !1780, inlinedAt: !1776)
!1798 = !DILocation(line: 980, scope: !1799, inlinedAt: !1776)
!1799 = distinct !DILexicalBlock(scope: !1780, file: !2, line: 980, column: 2)
!1800 = !DILocation(line: 983, scope: !1801, inlinedAt: !1776)
!1801 = distinct !DILexicalBlock(scope: !1799, file: !2, line: 983, column: 4)
!1802 = !DILocation(line: 987, scope: !1803, inlinedAt: !1776)
!1803 = distinct !DILexicalBlock(scope: !1799, file: !2, line: 987, column: 4)
!1804 = !DILocation(line: 989, scope: !1805, inlinedAt: !1776)
!1805 = distinct !DILexicalBlock(scope: !1799, file: !2, line: 989, column: 4)
!1806 = !DILocation(line: 991, scope: !1780, inlinedAt: !1776)
!1807 = !DILocalVariable(name: "base_used", scope: !1780, file: !2, line: 992, type: !572, align: 2)
!1808 = !DILocation(line: 992, scope: !1780, inlinedAt: !1776)
!1809 = !DILocation(line: 993, scope: !1780, inlinedAt: !1776)
!1810 = !DILocation(line: 995, scope: !1811, inlinedAt: !1776)
!1811 = distinct !DILexicalBlock(scope: !1780, file: !2, line: 994, column: 2)
!1812 = !DILocation(line: 996, scope: !1811, inlinedAt: !1776)
!1813 = !DILocation(line: 997, scope: !1814, inlinedAt: !1776)
!1814 = distinct !DILexicalBlock(scope: !1811, file: !2, line: 997, column: 3)
!1815 = !DILocation(line: 1001, scope: !1816, inlinedAt: !1776)
!1816 = distinct !DILexicalBlock(scope: !1814, file: !2, line: 1001, column: 5)
!1817 = !DILocation(line: 1002, scope: !1816, inlinedAt: !1776)
!1818 = !DILocation(line: 1005, scope: !1819, inlinedAt: !1776)
!1819 = distinct !DILexicalBlock(scope: !1814, file: !2, line: 1005, column: 5)
!1820 = !DILocation(line: 1006, scope: !1819, inlinedAt: !1776)
!1821 = !DILocation(line: 1009, scope: !1822, inlinedAt: !1776)
!1822 = distinct !DILexicalBlock(scope: !1814, file: !2, line: 1009, column: 5)
!1823 = !DILocation(line: 1010, scope: !1822, inlinedAt: !1776)
!1824 = !DILocation(line: 1012, scope: !1825, inlinedAt: !1776)
!1825 = distinct !DILexicalBlock(scope: !1814, file: !2, line: 1012, column: 5)
!1826 = !DILocation(line: 1014, scope: !1811, inlinedAt: !1776)
!1827 = !DILocalVariable(name: "value", scope: !1780, file: !2, line: 1016, type: !572, align: 2)
!1828 = !DILocation(line: 1016, scope: !1780, inlinedAt: !1776)
!1829 = !DILocation(line: 1017, scope: !1780, inlinedAt: !1776)
!1830 = !DILocation(line: 1017, scope: !1831, inlinedAt: !1776)
!1831 = distinct !DILexicalBlock(scope: !1780, file: !2, line: 1017, column: 2)
!1832 = !DILocalVariable(name: "c", scope: !1833, file: !2, line: 1019, type: !65, align: 1)
!1833 = distinct !DILexicalBlock(scope: !1831, file: !2, line: 1018, column: 2)
!1834 = !DILocation(line: 1019, scope: !1833, inlinedAt: !1776)
!1835 = !DILocation(line: 1022, scope: !1836, inlinedAt: !1776)
!1836 = distinct !DILexicalBlock(scope: !1833, file: !2, line: 1020, column: 3)
!1837 = !DILocation(line: 1022, scope: !1838, inlinedAt: !1776)
!1838 = distinct !DILexicalBlock(scope: !1836, file: !2, line: 1022, column: 38)
!1839 = !DILocation(line: 1023, scope: !1836, inlinedAt: !1776)
!1840 = !DILocation(line: 1023, scope: !1841, inlinedAt: !1776)
!1841 = distinct !DILexicalBlock(scope: !1836, file: !2, line: 1023, column: 38)
!1842 = !DILocation(line: 1024, scope: !1836, inlinedAt: !1776)
!1843 = !DILocation(line: 1024, scope: !1844, inlinedAt: !1776)
!1844 = distinct !DILexicalBlock(scope: !1836, file: !2, line: 1024, column: 38)
!1845 = !DILocation(line: 1025, scope: !1846, inlinedAt: !1776)
!1846 = distinct !DILexicalBlock(scope: !1836, file: !2, line: 1025, column: 38)
!1847 = !DILocation(line: 1027, scope: !1833, inlinedAt: !1776)
!1848 = !DILocation(line: 1030, scope: !1849, inlinedAt: !1776)
!1849 = distinct !DILexicalBlock(scope: !1850, file: !2, line: 1029, column: 3)
!1850 = distinct !DILexicalBlock(scope: !1833, file: !2, line: 1028, column: 3)
!1851 = !DILocalVariable(name: "new_value", scope: !1852, file: !2, line: 1032, type: !572, align: 2)
!1852 = distinct !DILexicalBlock(scope: !1849, file: !2, line: 1031, column: 4)
!1853 = !DILocation(line: 1032, scope: !1852, inlinedAt: !1776)
!1854 = !DILocation(line: 1033, scope: !1852, inlinedAt: !1776)
!1855 = !DILocation(line: 1034, scope: !1852, inlinedAt: !1776)
!1856 = !DILocation(line: 1035, scope: !1852, inlinedAt: !1776)
!1857 = !DILocalVariable(name: "new_value", scope: !1849, file: !2, line: 1037, type: !572, align: 2)
!1858 = !DILocation(line: 1037, scope: !1849, inlinedAt: !1776)
!1859 = !DILocation(line: 1038, scope: !1849, inlinedAt: !1776)
!1860 = !DILocation(line: 1039, scope: !1849, inlinedAt: !1776)
!1861 = !DILocation(line: 1042, scope: !1780, inlinedAt: !1776)
!1862 = distinct !DISubprogram(name: "to_uchar", linkageName: "std.core.String.to_uchar", scope: !2, file: !2, line: 1055, type: !1863, scopeLine: 1055, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !87)
!1863 = !DISubroutineType(types: !1864)
!1864 = !{!307, !64, !60, !18}
!1865 = !DILocalVariable(name: "self", arg: 1, scope: !1862, file: !2, line: 1055, type: !60)
!1866 = !DILocation(line: 1055, scope: !1862)
!1867 = !DILocalVariable(name: "base", arg: 2, scope: !1862, file: !2, line: 1055, type: !18)
!1868 = !DILocation(line: 966, scope: !1869, inlinedAt: !1866)
!1869 = distinct !DILexicalBlock(scope: !1870, file: !2, line: 973, column: 1)
!1870 = distinct !DISubprogram(name: "to_integer", linkageName: "to_integer", scope: !2, file: !2, line: 972, scopeLine: 972, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54, retainedNodes: !87)
!1871 = !DILocation(line: 1055, scope: !1869, inlinedAt: !1866)
!1872 = !DILocalVariable(name: "len", scope: !1870, file: !2, line: 974, type: !67, align: 8)
!1873 = !DILocation(line: 974, scope: !1870, inlinedAt: !1866)
!1874 = !DILocalVariable(name: "index", scope: !1870, file: !2, line: 975, type: !67, align: 8)
!1875 = !DILocation(line: 975, scope: !1870, inlinedAt: !1866)
!1876 = !DILocalVariable(name: "ptr", scope: !1870, file: !2, line: 976, type: !64, align: 8)
!1877 = !DILocation(line: 976, scope: !1870, inlinedAt: !1866)
!1878 = !DILocation(line: 977, scope: !1870, inlinedAt: !1866)
!1879 = !DILocation(line: 977, scope: !1880, inlinedAt: !1866)
!1880 = distinct !DILexicalBlock(scope: !1870, file: !2, line: 977, column: 2)
!1881 = !DILocation(line: 19, scope: !1882, inlinedAt: !1883)
!1882 = distinct !DISubprogram(name: "@is_blank", linkageName: "@is_blank", scope: !806, file: !806, line: 19, scopeLine: 19, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!1883 = !DILocation(line: 54, scope: !1884, inlinedAt: !1879)
!1884 = distinct !DISubprogram(name: "is_blank", linkageName: "is_blank", scope: !806, file: !806, line: 54, scopeLine: 54, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!1885 = !DILocation(line: 978, scope: !1870, inlinedAt: !1866)
!1886 = !DILocalVariable(name: "is_negative", scope: !1870, file: !2, line: 979, type: !115, align: 1)
!1887 = !DILocation(line: 979, scope: !1870, inlinedAt: !1866)
!1888 = !DILocation(line: 980, scope: !1889, inlinedAt: !1866)
!1889 = distinct !DILexicalBlock(scope: !1870, file: !2, line: 980, column: 2)
!1890 = !DILocation(line: 983, scope: !1891, inlinedAt: !1866)
!1891 = distinct !DILexicalBlock(scope: !1889, file: !2, line: 983, column: 4)
!1892 = !DILocation(line: 987, scope: !1893, inlinedAt: !1866)
!1893 = distinct !DILexicalBlock(scope: !1889, file: !2, line: 987, column: 4)
!1894 = !DILocation(line: 989, scope: !1895, inlinedAt: !1866)
!1895 = distinct !DILexicalBlock(scope: !1889, file: !2, line: 989, column: 4)
!1896 = !DILocation(line: 991, scope: !1870, inlinedAt: !1866)
!1897 = !DILocalVariable(name: "base_used", scope: !1870, file: !2, line: 992, type: !65, align: 1)
!1898 = !DILocation(line: 992, scope: !1870, inlinedAt: !1866)
!1899 = !DILocation(line: 993, scope: !1870, inlinedAt: !1866)
!1900 = !DILocation(line: 995, scope: !1901, inlinedAt: !1866)
!1901 = distinct !DILexicalBlock(scope: !1870, file: !2, line: 994, column: 2)
!1902 = !DILocation(line: 996, scope: !1901, inlinedAt: !1866)
!1903 = !DILocation(line: 997, scope: !1904, inlinedAt: !1866)
!1904 = distinct !DILexicalBlock(scope: !1901, file: !2, line: 997, column: 3)
!1905 = !DILocation(line: 1001, scope: !1906, inlinedAt: !1866)
!1906 = distinct !DILexicalBlock(scope: !1904, file: !2, line: 1001, column: 5)
!1907 = !DILocation(line: 1002, scope: !1906, inlinedAt: !1866)
!1908 = !DILocation(line: 1005, scope: !1909, inlinedAt: !1866)
!1909 = distinct !DILexicalBlock(scope: !1904, file: !2, line: 1005, column: 5)
!1910 = !DILocation(line: 1006, scope: !1909, inlinedAt: !1866)
!1911 = !DILocation(line: 1009, scope: !1912, inlinedAt: !1866)
!1912 = distinct !DILexicalBlock(scope: !1904, file: !2, line: 1009, column: 5)
!1913 = !DILocation(line: 1010, scope: !1912, inlinedAt: !1866)
!1914 = !DILocation(line: 1012, scope: !1915, inlinedAt: !1866)
!1915 = distinct !DILexicalBlock(scope: !1904, file: !2, line: 1012, column: 5)
!1916 = !DILocation(line: 1014, scope: !1901, inlinedAt: !1866)
!1917 = !DILocalVariable(name: "value", scope: !1870, file: !2, line: 1016, type: !65, align: 1)
!1918 = !DILocation(line: 1016, scope: !1870, inlinedAt: !1866)
!1919 = !DILocation(line: 1017, scope: !1870, inlinedAt: !1866)
!1920 = !DILocation(line: 1017, scope: !1921, inlinedAt: !1866)
!1921 = distinct !DILexicalBlock(scope: !1870, file: !2, line: 1017, column: 2)
!1922 = !DILocalVariable(name: "c", scope: !1923, file: !2, line: 1019, type: !65, align: 1)
!1923 = distinct !DILexicalBlock(scope: !1921, file: !2, line: 1018, column: 2)
!1924 = !DILocation(line: 1019, scope: !1923, inlinedAt: !1866)
!1925 = !DILocation(line: 1022, scope: !1926, inlinedAt: !1866)
!1926 = distinct !DILexicalBlock(scope: !1923, file: !2, line: 1020, column: 3)
!1927 = !DILocation(line: 1022, scope: !1928, inlinedAt: !1866)
!1928 = distinct !DILexicalBlock(scope: !1926, file: !2, line: 1022, column: 38)
!1929 = !DILocation(line: 1023, scope: !1926, inlinedAt: !1866)
!1930 = !DILocation(line: 1023, scope: !1931, inlinedAt: !1866)
!1931 = distinct !DILexicalBlock(scope: !1926, file: !2, line: 1023, column: 38)
!1932 = !DILocation(line: 1024, scope: !1926, inlinedAt: !1866)
!1933 = !DILocation(line: 1024, scope: !1934, inlinedAt: !1866)
!1934 = distinct !DILexicalBlock(scope: !1926, file: !2, line: 1024, column: 38)
!1935 = !DILocation(line: 1025, scope: !1936, inlinedAt: !1866)
!1936 = distinct !DILexicalBlock(scope: !1926, file: !2, line: 1025, column: 38)
!1937 = !DILocation(line: 1027, scope: !1923, inlinedAt: !1866)
!1938 = !DILocation(line: 1030, scope: !1939, inlinedAt: !1866)
!1939 = distinct !DILexicalBlock(scope: !1940, file: !2, line: 1029, column: 3)
!1940 = distinct !DILexicalBlock(scope: !1923, file: !2, line: 1028, column: 3)
!1941 = !DILocalVariable(name: "new_value", scope: !1942, file: !2, line: 1032, type: !65, align: 1)
!1942 = distinct !DILexicalBlock(scope: !1939, file: !2, line: 1031, column: 4)
!1943 = !DILocation(line: 1032, scope: !1942, inlinedAt: !1866)
!1944 = !DILocation(line: 1033, scope: !1942, inlinedAt: !1866)
!1945 = !DILocation(line: 1034, scope: !1942, inlinedAt: !1866)
!1946 = !DILocation(line: 1035, scope: !1942, inlinedAt: !1866)
!1947 = !DILocalVariable(name: "new_value", scope: !1939, file: !2, line: 1037, type: !65, align: 1)
!1948 = !DILocation(line: 1037, scope: !1939, inlinedAt: !1866)
!1949 = !DILocation(line: 1038, scope: !1939, inlinedAt: !1866)
!1950 = !DILocation(line: 1039, scope: !1939, inlinedAt: !1866)
!1951 = !DILocation(line: 1042, scope: !1870, inlinedAt: !1866)
!1952 = distinct !DISubprogram(name: "to_double", linkageName: "std.core.String.to_double", scope: !2, file: !2, line: 1057, type: !1953, scopeLine: 1057, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !87)
!1953 = !DISubroutineType(types: !1954)
!1954 = !{!307, !1955, !60}
!1955 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "double*", baseType: !1956, size: 64, align: 64, dwarfAddressSpace: 0)
!1956 = !DIBasicType(name: "double", size: 64, encoding: DW_ATE_float)
!1957 = !DILocalVariable(name: "self", arg: 1, scope: !1952, file: !2, line: 1057, type: !60)
!1958 = !DILocation(line: 1057, scope: !1952)
!1959 = !DILocalVariable(name: "sign", scope: !1960, file: !2, line: 451, type: !18, align: 4)
!1960 = distinct !DISubprogram(name: "to_real", linkageName: "to_real", scope: !41, file: !41, line: 449, scopeLine: 449, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54, retainedNodes: !87)
!1961 = !DILocation(line: 451, scope: !1960, inlinedAt: !1958)
!1962 = !DILocation(line: 465, scope: !1960, inlinedAt: !1958)
!1963 = !DILocation(line: 466, scope: !1960, inlinedAt: !1958)
!1964 = !DILocation(line: 468, scope: !1960, inlinedAt: !1958)
!1965 = !DILocation(line: 470, scope: !1966, inlinedAt: !1958)
!1966 = distinct !DILexicalBlock(scope: !1967, file: !41, line: 470, column: 3)
!1967 = distinct !DILexicalBlock(scope: !1960, file: !41, line: 469, column: 2)
!1968 = !DILocation(line: 473, scope: !1969, inlinedAt: !1958)
!1969 = distinct !DILexicalBlock(scope: !1966, file: !41, line: 473, column: 5)
!1970 = !DILocation(line: 474, scope: !1969, inlinedAt: !1958)
!1971 = !DILocation(line: 476, scope: !1972, inlinedAt: !1958)
!1972 = distinct !DILexicalBlock(scope: !1966, file: !41, line: 476, column: 5)
!1973 = !DILocation(line: 479, scope: !1960, inlinedAt: !1958)
!1974 = !DILocation(line: 480, scope: !1960, inlinedAt: !1958)
!1975 = !DILocation(line: 482, scope: !1960, inlinedAt: !1958)
!1976 = !DILocation(line: 483, scope: !1960, inlinedAt: !1958)
!1977 = !DILocation(line: 485, scope: !1960, inlinedAt: !1958)
!1978 = !DILocation(line: 487, scope: !1979, inlinedAt: !1958)
!1979 = distinct !DILexicalBlock(scope: !1960, file: !41, line: 486, column: 2)
!1980 = !DILocalVariable(name: "scale", scope: !1981, file: !2, line: 330, type: !1956, align: 8)
!1981 = distinct !DISubprogram(name: "hexfloat", linkageName: "hexfloat", scope: !41, file: !41, line: 328, scopeLine: 328, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54, retainedNodes: !87)
!1982 = !DILocation(line: 330, scope: !1981, inlinedAt: !1978)
!1983 = !DILocalVariable(name: "x", scope: !1981, file: !2, line: 331, type: !3, align: 4)
!1984 = !DILocation(line: 331, scope: !1981, inlinedAt: !1978)
!1985 = !DILocalVariable(name: "rp", scope: !1981, file: !2, line: 332, type: !308, align: 8)
!1986 = !DILocation(line: 332, scope: !1981, inlinedAt: !1978)
!1987 = !DILocalVariable(name: "dc", scope: !1981, file: !2, line: 333, type: !308, align: 8)
!1988 = !DILocation(line: 333, scope: !1981, inlinedAt: !1978)
!1989 = !DILocalVariable(name: "c", scope: !1981, file: !2, line: 334, type: !65, align: 1)
!1990 = !DILocation(line: 334, scope: !1981, inlinedAt: !1978)
!1991 = !DILocalVariable(name: "got_rad", scope: !1981, file: !2, line: 335, type: !115, align: 1)
!1992 = !DILocation(line: 335, scope: !1981, inlinedAt: !1978)
!1993 = !DILocalVariable(name: "got_digit", scope: !1981, file: !2, line: 336, type: !115, align: 1)
!1994 = !DILocation(line: 336, scope: !1981, inlinedAt: !1978)
!1995 = !DILocalVariable(name: "got_tail", scope: !1981, file: !2, line: 337, type: !115, align: 1)
!1996 = !DILocation(line: 337, scope: !1981, inlinedAt: !1978)
!1997 = !DILocalVariable(name: "len", scope: !1981, file: !2, line: 338, type: !67, align: 8)
!1998 = !DILocation(line: 338, scope: !1981, inlinedAt: !1978)
!1999 = !DILocalVariable(name: "last_char", scope: !1981, file: !2, line: 339, type: !67, align: 8)
!2000 = !DILocation(line: 339, scope: !1981, inlinedAt: !1978)
!2001 = !DILocalVariable(name: "index", scope: !1981, file: !2, line: 340, type: !67, align: 8)
!2002 = !DILocation(line: 340, scope: !1981, inlinedAt: !1978)
!2003 = !DILocalVariable(name: "y", scope: !1981, file: !2, line: 341, type: !1956, align: 8)
!2004 = !DILocation(line: 341, scope: !1981, inlinedAt: !1978)
!2005 = !DILocation(line: 344, scope: !1981, inlinedAt: !1978)
!2006 = !DILocation(line: 344, scope: !2007, inlinedAt: !1978)
!2007 = distinct !DILexicalBlock(scope: !1981, file: !41, line: 344, column: 2)
!2008 = !DILocation(line: 346, scope: !2009, inlinedAt: !1978)
!2009 = distinct !DILexicalBlock(scope: !2007, file: !41, line: 345, column: 2)
!2010 = !DILocation(line: 347, scope: !2009, inlinedAt: !1978)
!2011 = !DILocation(line: 349, scope: !1981, inlinedAt: !1978)
!2012 = !DILocation(line: 351, scope: !2013, inlinedAt: !1978)
!2013 = distinct !DILexicalBlock(scope: !1981, file: !41, line: 350, column: 2)
!2014 = !DILocation(line: 352, scope: !2013, inlinedAt: !1978)
!2015 = !DILocation(line: 354, scope: !2016, inlinedAt: !1978)
!2016 = distinct !DILexicalBlock(scope: !2013, file: !41, line: 353, column: 3)
!2017 = !DILocation(line: 355, scope: !2016, inlinedAt: !1978)
!2018 = !DILocation(line: 357, scope: !2013, inlinedAt: !1978)
!2019 = !DILocation(line: 359, scope: !2020, inlinedAt: !1978)
!2020 = distinct !DILexicalBlock(scope: !2013, file: !41, line: 358, column: 3)
!2021 = !DILocation(line: 360, scope: !2020, inlinedAt: !1978)
!2022 = !DILocation(line: 361, scope: !2020, inlinedAt: !1978)
!2023 = !DILocation(line: 361, scope: !2024, inlinedAt: !1978)
!2024 = distinct !DILexicalBlock(scope: !2020, file: !41, line: 361, column: 4)
!2025 = !DILocation(line: 363, scope: !2026, inlinedAt: !1978)
!2026 = distinct !DILexicalBlock(scope: !2024, file: !41, line: 362, column: 4)
!2027 = !DILocation(line: 368, scope: !1981, inlinedAt: !1978)
!2028 = !DILocation(line: 368, scope: !2029, inlinedAt: !1978)
!2029 = distinct !DILexicalBlock(scope: !1981, file: !41, line: 368, column: 2)
!2030 = !DILocation(line: 370, scope: !2031, inlinedAt: !1978)
!2031 = distinct !DILexicalBlock(scope: !2029, file: !41, line: 369, column: 2)
!2032 = !DILocation(line: 372, scope: !2033, inlinedAt: !1978)
!2033 = distinct !DILexicalBlock(scope: !2031, file: !41, line: 371, column: 3)
!2034 = !DILocation(line: 373, scope: !2033, inlinedAt: !1978)
!2035 = !DILocation(line: 374, scope: !2033, inlinedAt: !1978)
!2036 = !DILocation(line: 378, scope: !2037, inlinedAt: !1978)
!2037 = distinct !DILexicalBlock(scope: !2031, file: !41, line: 377, column: 3)
!2038 = !DILocalVariable(name: "d", scope: !2037, file: !2, line: 379, type: !18, align: 4)
!2039 = !DILocation(line: 379, scope: !2037, inlinedAt: !1978)
!2040 = !DILocation(line: 382, scope: !2041, inlinedAt: !1978)
!2041 = distinct !DILexicalBlock(scope: !2037, file: !41, line: 380, column: 4)
!2042 = !DILocation(line: 383, scope: !2043, inlinedAt: !1978)
!2043 = distinct !DILexicalBlock(scope: !2041, file: !41, line: 383, column: 6)
!2044 = !DILocation(line: 384, scope: !2041, inlinedAt: !1978)
!2045 = !DILocation(line: 385, scope: !2046, inlinedAt: !1978)
!2046 = distinct !DILexicalBlock(scope: !2041, file: !41, line: 385, column: 6)
!2047 = !DILocation(line: 386, scope: !2046, inlinedAt: !1978)
!2048 = !DILocation(line: 387, scope: !2041, inlinedAt: !1978)
!2049 = !DILocation(line: 388, scope: !2050, inlinedAt: !1978)
!2050 = distinct !DILexicalBlock(scope: !2041, file: !41, line: 388, column: 6)
!2051 = !DILocation(line: 389, scope: !2050, inlinedAt: !1978)
!2052 = !DILocation(line: 391, scope: !2037, inlinedAt: !1978)
!2053 = !DILocation(line: 393, scope: !2031, inlinedAt: !1978)
!2054 = !DILocation(line: 394, scope: !2031, inlinedAt: !1978)
!2055 = !DILocation(line: 396, scope: !1981, inlinedAt: !1978)
!2056 = !DILocation(line: 397, scope: !1981, inlinedAt: !1978)
!2057 = !DILocation(line: 398, scope: !1981, inlinedAt: !1978)
!2058 = !DILocation(line: 398, scope: !2059, inlinedAt: !1978)
!2059 = distinct !DILexicalBlock(scope: !1981, file: !41, line: 398, column: 2)
!2060 = !DILocalVariable(name: "e2", scope: !1981, file: !2, line: 400, type: !308, align: 8)
!2061 = !DILocation(line: 400, scope: !1981, inlinedAt: !1978)
!2062 = !DILocation(line: 401, scope: !1981, inlinedAt: !1978)
!2063 = !DILocalVariable(name: "e2val", scope: !2064, file: !2, line: 403, type: !308, align: 8)
!2064 = distinct !DILexicalBlock(scope: !1981, file: !41, line: 402, column: 2)
!2065 = !DILocation(line: 403, scope: !2064, inlinedAt: !1978)
!2066 = !DILocation(line: 404, scope: !2064, inlinedAt: !1978)
!2067 = !DILocation(line: 406, scope: !1981, inlinedAt: !1978)
!2068 = !DILocation(line: 407, scope: !1981, inlinedAt: !1978)
!2069 = !DILocation(line: 408, scope: !1981, inlinedAt: !1978)
!2070 = !DILocation(line: 409, scope: !1981, inlinedAt: !1978)
!2071 = !DILocation(line: 411, scope: !1981, inlinedAt: !1978)
!2072 = !DILocation(line: 411, scope: !2073, inlinedAt: !1978)
!2073 = distinct !DILexicalBlock(scope: !1981, file: !41, line: 411, column: 2)
!2074 = !DILocation(line: 413, scope: !2075, inlinedAt: !1978)
!2075 = distinct !DILexicalBlock(scope: !2073, file: !41, line: 412, column: 2)
!2076 = !DILocation(line: 415, scope: !2077, inlinedAt: !1978)
!2077 = distinct !DILexicalBlock(scope: !2075, file: !41, line: 414, column: 3)
!2078 = !DILocation(line: 416, scope: !2077, inlinedAt: !1978)
!2079 = !DILocation(line: 420, scope: !2080, inlinedAt: !1978)
!2080 = distinct !DILexicalBlock(scope: !2075, file: !41, line: 419, column: 3)
!2081 = !DILocation(line: 421, scope: !2080, inlinedAt: !1978)
!2082 = !DILocation(line: 423, scope: !2075, inlinedAt: !1978)
!2083 = !DILocalVariable(name: "bits", scope: !1981, file: !2, line: 425, type: !18, align: 4)
!2084 = !DILocation(line: 425, scope: !1981, inlinedAt: !1978)
!2085 = !DILocation(line: 426, scope: !1981, inlinedAt: !1978)
!2086 = !DILocation(line: 428, scope: !2087, inlinedAt: !1978)
!2087 = distinct !DILexicalBlock(scope: !1981, file: !41, line: 427, column: 2)
!2088 = !DILocation(line: 429, scope: !2087, inlinedAt: !1978)
!2089 = !DILocalVariable(name: "bias", scope: !1981, file: !2, line: 431, type: !1956, align: 8)
!2090 = !DILocation(line: 431, scope: !1981, inlinedAt: !1978)
!2091 = !DILocation(line: 432, scope: !1981, inlinedAt: !1978)
!2092 = !DILocation(line: 434, scope: !2093, inlinedAt: !1978)
!2093 = distinct !DILexicalBlock(scope: !1981, file: !41, line: 433, column: 2)
!2094 = !DILocation(line: 1015, scope: !2095, inlinedAt: !2092)
!2095 = distinct !DISubprogram(name: "scalbn", linkageName: "scalbn", scope: !248, file: !248, line: 1015, scopeLine: 1015, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!2096 = !DILocation(line: 66, scope: !2097, inlinedAt: !2099)
!2097 = distinct !DISubprogram(name: "promote_int_same", linkageName: "promote_int_same", scope: !2098, file: !2098, line: 54, scopeLine: 54, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!2098 = !DIFile(filename: "values.c3", directory: "C:/Compilers/C3/lib/std/core")
!2099 = !DILocation(line: 264, scope: !2100, inlinedAt: !2092)
!2100 = distinct !DISubprogram(name: "copysign", linkageName: "copysign", scope: !248, file: !248, line: 264, scopeLine: 264, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!2101 = !DILocation(line: 437, scope: !1981, inlinedAt: !1978)
!2102 = !DILocation(line: 439, scope: !2103, inlinedAt: !1978)
!2103 = distinct !DILexicalBlock(scope: !1981, file: !41, line: 438, column: 2)
!2104 = !DILocation(line: 440, scope: !2103, inlinedAt: !1978)
!2105 = !DILocation(line: 442, scope: !1981, inlinedAt: !1978)
!2106 = !DILocation(line: 443, scope: !1981, inlinedAt: !1978)
!2107 = !DILocation(line: 444, scope: !1981, inlinedAt: !1978)
!2108 = !DILocation(line: 446, scope: !1981, inlinedAt: !1978)
!2109 = !DILocation(line: 1015, scope: !2110, inlinedAt: !2108)
!2110 = distinct !DISubprogram(name: "scalbn", linkageName: "scalbn", scope: !248, file: !248, line: 1015, scopeLine: 1015, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!2111 = !DILocation(line: 35, scope: !2112, inlinedAt: !2114)
!2112 = distinct !DILexicalBlock(scope: !2113, file: !41, line: 38, column: 1)
!2113 = distinct !DISubprogram(name: "decfloat", linkageName: "decfloat", scope: !41, file: !41, line: 37, scopeLine: 37, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54, retainedNodes: !87)
!2114 = !DILocation(line: 489, scope: !1960, inlinedAt: !1958)
!2115 = !DILocation(line: 489, scope: !2112, inlinedAt: !2114)
!2116 = !DILocalVariable(name: "x", scope: !2113, file: !2, line: 39, type: !2117, align: 16)
!2117 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3, size: 4096, align: 32, elements: !2118)
!2118 = !{!2119}
!2119 = !DISubrange(count: 128, lowerBound: 0)
!2120 = !DILocation(line: 39, scope: !2113, inlinedAt: !2114)
!2121 = !DILocalVariable(name: "emax", scope: !2113, file: !2, line: 41, type: !18, align: 4)
!2122 = !DILocation(line: 41, scope: !2113, inlinedAt: !2114)
!2123 = !DILocalVariable(name: "index", scope: !2113, file: !2, line: 44, type: !67, align: 8)
!2124 = !DILocation(line: 44, scope: !2113, inlinedAt: !2114)
!2125 = !DILocalVariable(name: "got_digit", scope: !2113, file: !2, line: 45, type: !115, align: 1)
!2126 = !DILocation(line: 45, scope: !2113, inlinedAt: !2114)
!2127 = !DILocalVariable(name: "got_rad", scope: !2113, file: !2, line: 46, type: !115, align: 1)
!2128 = !DILocation(line: 46, scope: !2113, inlinedAt: !2114)
!2129 = !DILocalVariable(name: "lrp", scope: !2113, file: !2, line: 47, type: !308, align: 8)
!2130 = !DILocation(line: 47, scope: !2113, inlinedAt: !2114)
!2131 = !DILocalVariable(name: "dc", scope: !2113, file: !2, line: 47, type: !308, align: 8)
!2132 = !DILocalVariable(name: "k", scope: !2113, file: !2, line: 48, type: !18, align: 4)
!2133 = !DILocation(line: 48, scope: !2113, inlinedAt: !2114)
!2134 = !DILocalVariable(name: "j", scope: !2113, file: !2, line: 48, type: !18, align: 4)
!2135 = !DILocalVariable(name: "lnz", scope: !2113, file: !2, line: 48, type: !18, align: 4)
!2136 = !DILocalVariable(name: "len", scope: !2113, file: !2, line: 49, type: !67, align: 8)
!2137 = !DILocation(line: 49, scope: !2113, inlinedAt: !2114)
!2138 = !DILocalVariable(name: "last_char", scope: !2113, file: !2, line: 50, type: !67, align: 8)
!2139 = !DILocation(line: 50, scope: !2113, inlinedAt: !2114)
!2140 = !DILocation(line: 52, scope: !2113, inlinedAt: !2114)
!2141 = !DILocalVariable(name: "c", scope: !2113, file: !2, line: 54, type: !65, align: 1)
!2142 = !DILocation(line: 54, scope: !2113, inlinedAt: !2114)
!2143 = !DILocation(line: 56, scope: !2113, inlinedAt: !2114)
!2144 = !DILocation(line: 56, scope: !2145, inlinedAt: !2114)
!2145 = distinct !DILexicalBlock(scope: !2113, file: !41, line: 56, column: 2)
!2146 = !DILocation(line: 58, scope: !2147, inlinedAt: !2114)
!2147 = distinct !DILexicalBlock(scope: !2145, file: !41, line: 57, column: 2)
!2148 = !DILocation(line: 59, scope: !2147, inlinedAt: !2114)
!2149 = !DILocation(line: 62, scope: !2113, inlinedAt: !2114)
!2150 = !DILocation(line: 64, scope: !2151, inlinedAt: !2114)
!2151 = distinct !DILexicalBlock(scope: !2113, file: !41, line: 63, column: 2)
!2152 = !DILocation(line: 65, scope: !2151, inlinedAt: !2114)
!2153 = !DILocation(line: 67, scope: !2154, inlinedAt: !2114)
!2154 = distinct !DILexicalBlock(scope: !2151, file: !41, line: 66, column: 3)
!2155 = !DILocation(line: 68, scope: !2154, inlinedAt: !2114)
!2156 = !DILocation(line: 70, scope: !2151, inlinedAt: !2114)
!2157 = !DILocation(line: 72, scope: !2158, inlinedAt: !2114)
!2158 = distinct !DILexicalBlock(scope: !2151, file: !41, line: 71, column: 3)
!2159 = !DILocation(line: 73, scope: !2158, inlinedAt: !2114)
!2160 = !DILocation(line: 74, scope: !2158, inlinedAt: !2114)
!2161 = !DILocation(line: 74, scope: !2162, inlinedAt: !2114)
!2162 = distinct !DILexicalBlock(scope: !2158, file: !41, line: 74, column: 4)
!2163 = !DILocation(line: 76, scope: !2164, inlinedAt: !2114)
!2164 = distinct !DILexicalBlock(scope: !2162, file: !41, line: 75, column: 4)
!2165 = !DILocation(line: 81, scope: !2113, inlinedAt: !2114)
!2166 = !DILocation(line: 81, scope: !2167, inlinedAt: !2114)
!2167 = distinct !DILexicalBlock(scope: !2113, file: !41, line: 81, column: 2)
!2168 = !DILocation(line: 85, scope: !2169, inlinedAt: !2114)
!2169 = distinct !DILexicalBlock(scope: !2170, file: !41, line: 83, column: 3)
!2170 = distinct !DILexicalBlock(scope: !2167, file: !41, line: 82, column: 2)
!2171 = !DILocation(line: 86, scope: !2172, inlinedAt: !2114)
!2172 = distinct !DILexicalBlock(scope: !2169, file: !41, line: 86, column: 5)
!2173 = !DILocation(line: 87, scope: !2172, inlinedAt: !2114)
!2174 = !DILocation(line: 88, scope: !2172, inlinedAt: !2114)
!2175 = !DILocation(line: 89, scope: !2169, inlinedAt: !2114)
!2176 = !DILocation(line: 90, scope: !2177, inlinedAt: !2114)
!2177 = distinct !DILexicalBlock(scope: !2169, file: !41, line: 90, column: 5)
!2178 = !DILocation(line: 91, scope: !2177, inlinedAt: !2114)
!2179 = !DILocation(line: 92, scope: !2177, inlinedAt: !2114)
!2180 = !DILocation(line: 94, scope: !2181, inlinedAt: !2114)
!2181 = distinct !DILexicalBlock(scope: !2177, file: !41, line: 93, column: 5)
!2182 = !DILocation(line: 98, scope: !2183, inlinedAt: !2114)
!2183 = distinct !DILexicalBlock(scope: !2177, file: !41, line: 97, column: 5)
!2184 = !DILocation(line: 100, scope: !2177, inlinedAt: !2114)
!2185 = !DILocation(line: 102, scope: !2186, inlinedAt: !2114)
!2186 = distinct !DILexicalBlock(scope: !2177, file: !41, line: 101, column: 5)
!2187 = !DILocation(line: 103, scope: !2186, inlinedAt: !2114)
!2188 = !DILocation(line: 105, scope: !2177, inlinedAt: !2114)
!2189 = !DILocation(line: 107, scope: !2190, inlinedAt: !2114)
!2190 = distinct !DILexicalBlock(scope: !2169, file: !41, line: 107, column: 5)
!2191 = !DILocation(line: 108, scope: !2190, inlinedAt: !2114)
!2192 = !DILocation(line: 111, scope: !2170, inlinedAt: !2114)
!2193 = !DILocation(line: 112, scope: !2170, inlinedAt: !2114)
!2194 = !DILocation(line: 113, scope: !2170, inlinedAt: !2114)
!2195 = !DILocation(line: 115, scope: !2113, inlinedAt: !2114)
!2196 = !DILocation(line: 116, scope: !2113, inlinedAt: !2114)
!2197 = !DILocation(line: 117, scope: !2113, inlinedAt: !2114)
!2198 = !DILocation(line: 119, scope: !2199, inlinedAt: !2114)
!2199 = distinct !DILexicalBlock(scope: !2113, file: !41, line: 118, column: 2)
!2200 = !DILocalVariable(name: "e10", scope: !2199, file: !2, line: 120, type: !308, align: 8)
!2201 = !DILocation(line: 120, scope: !2199, inlinedAt: !2114)
!2202 = !DILocation(line: 121, scope: !2199, inlinedAt: !2114)
!2203 = !DILocation(line: 123, scope: !2113, inlinedAt: !2114)
!2204 = !DILocation(line: 125, scope: !2205, inlinedAt: !2114)
!2205 = distinct !DILexicalBlock(scope: !2113, file: !41, line: 124, column: 2)
!2206 = !DILocation(line: 128, scope: !2113, inlinedAt: !2114)
!2207 = !DILocation(line: 131, scope: !2113, inlinedAt: !2114)
!2208 = !DILocation(line: 132, scope: !2113, inlinedAt: !2114)
!2209 = !DILocation(line: 133, scope: !2113, inlinedAt: !2114)
!2210 = !DILocation(line: 136, scope: !2113, inlinedAt: !2114)
!2211 = !DILocation(line: 138, scope: !2212, inlinedAt: !2114)
!2212 = distinct !DILexicalBlock(scope: !2113, file: !41, line: 137, column: 2)
!2213 = !DILocation(line: 138, scope: !2214, inlinedAt: !2114)
!2214 = distinct !DILexicalBlock(scope: !2212, file: !41, line: 138, column: 3)
!2215 = !DILocation(line: 139, scope: !2212, inlinedAt: !2114)
!2216 = !DILocation(line: 140, scope: !2212, inlinedAt: !2114)
!2217 = !DILocalVariable(name: "a", scope: !2113, file: !2, line: 143, type: !18, align: 4)
!2218 = !DILocation(line: 143, scope: !2113, inlinedAt: !2114)
!2219 = !DILocalVariable(name: "z", scope: !2113, file: !2, line: 144, type: !18, align: 4)
!2220 = !DILocation(line: 144, scope: !2113, inlinedAt: !2114)
!2221 = !DILocalVariable(name: "e2", scope: !2113, file: !2, line: 145, type: !18, align: 4)
!2222 = !DILocation(line: 145, scope: !2113, inlinedAt: !2114)
!2223 = !DILocalVariable(name: "rp", scope: !2113, file: !2, line: 146, type: !308, align: 8)
!2224 = !DILocation(line: 146, scope: !2113, inlinedAt: !2114)
!2225 = !DILocation(line: 149, scope: !2113, inlinedAt: !2114)
!2226 = !DILocation(line: 151, scope: !2227, inlinedAt: !2114)
!2227 = distinct !DILexicalBlock(scope: !2113, file: !41, line: 150, column: 2)
!2228 = !DILocation(line: 152, scope: !2227, inlinedAt: !2114)
!2229 = !DILocalVariable(name: "bitlim", scope: !2227, file: !2, line: 153, type: !18, align: 4)
!2230 = !DILocation(line: 153, scope: !2227, inlinedAt: !2114)
!2231 = !DILocation(line: 154, scope: !2227, inlinedAt: !2114)
!2232 = !DILocation(line: 158, scope: !2113, inlinedAt: !2114)
!2233 = !DILocalVariable(name: "rpm9", scope: !2234, file: !2, line: 160, type: !308, align: 8)
!2234 = distinct !DILexicalBlock(scope: !2113, file: !41, line: 159, column: 2)
!2235 = !DILocation(line: 160, scope: !2234, inlinedAt: !2114)
!2236 = !DILocalVariable(name: "p10", scope: !2234, file: !2, line: 161, type: !18, align: 4)
!2237 = !DILocation(line: 161, scope: !2234, inlinedAt: !2114)
!2238 = !DILocalVariable(name: "carry", scope: !2234, file: !2, line: 162, type: !3, align: 4)
!2239 = !DILocation(line: 162, scope: !2234, inlinedAt: !2114)
!2240 = !DILocation(line: 163, scope: !2241, inlinedAt: !2114)
!2241 = distinct !DILexicalBlock(scope: !2234, file: !41, line: 163, column: 3)
!2242 = !DILocalVariable(name: "tmp", scope: !2243, file: !2, line: 165, type: !3, align: 4)
!2243 = distinct !DILexicalBlock(scope: !2241, file: !41, line: 164, column: 3)
!2244 = !DILocation(line: 165, scope: !2243, inlinedAt: !2114)
!2245 = !DILocation(line: 166, scope: !2243, inlinedAt: !2114)
!2246 = !DILocation(line: 167, scope: !2243, inlinedAt: !2114)
!2247 = !DILocation(line: 168, scope: !2243, inlinedAt: !2114)
!2248 = !DILocation(line: 170, scope: !2249, inlinedAt: !2114)
!2249 = distinct !DILexicalBlock(scope: !2243, file: !41, line: 169, column: 4)
!2250 = !DILocation(line: 171, scope: !2249, inlinedAt: !2114)
!2251 = !DILocation(line: 174, scope: !2234, inlinedAt: !2114)
!2252 = !DILocation(line: 175, scope: !2234, inlinedAt: !2114)
!2253 = !DILocation(line: 179, scope: !2113, inlinedAt: !2114)
!2254 = !DILocation(line: 179, scope: !2255, inlinedAt: !2114)
!2255 = distinct !DILexicalBlock(scope: !2113, file: !41, line: 179, column: 2)
!2256 = !DILocalVariable(name: "carry", scope: !2257, file: !2, line: 181, type: !3, align: 4)
!2257 = distinct !DILexicalBlock(scope: !2255, file: !41, line: 180, column: 2)
!2258 = !DILocation(line: 181, scope: !2257, inlinedAt: !2114)
!2259 = !DILocation(line: 182, scope: !2257, inlinedAt: !2114)
!2260 = !DILocation(line: 183, scope: !2261, inlinedAt: !2114)
!2261 = distinct !DILexicalBlock(scope: !2257, file: !41, line: 183, column: 3)
!2262 = !DILocalVariable(name: "tmp", scope: !2263, file: !2, line: 185, type: !68, align: 8)
!2263 = distinct !DILexicalBlock(scope: !2261, file: !41, line: 184, column: 3)
!2264 = !DILocation(line: 185, scope: !2263, inlinedAt: !2114)
!2265 = !DILocation(line: 186, scope: !2263, inlinedAt: !2114)
!2266 = !DILocation(line: 188, scope: !2267, inlinedAt: !2114)
!2267 = distinct !DILexicalBlock(scope: !2263, file: !41, line: 187, column: 4)
!2268 = !DILocation(line: 189, scope: !2267, inlinedAt: !2114)
!2269 = !DILocation(line: 193, scope: !2270, inlinedAt: !2114)
!2270 = distinct !DILexicalBlock(scope: !2263, file: !41, line: 192, column: 4)
!2271 = !DILocation(line: 194, scope: !2270, inlinedAt: !2114)
!2272 = !DILocation(line: 196, scope: !2263, inlinedAt: !2114)
!2273 = !DILocation(line: 197, scope: !2263, inlinedAt: !2114)
!2274 = !DILocation(line: 199, scope: !2257, inlinedAt: !2114)
!2275 = !DILocation(line: 201, scope: !2276, inlinedAt: !2114)
!2276 = distinct !DILexicalBlock(scope: !2257, file: !41, line: 200, column: 3)
!2277 = !DILocation(line: 202, scope: !2276, inlinedAt: !2114)
!2278 = !DILocation(line: 203, scope: !2276, inlinedAt: !2114)
!2279 = !DILocation(line: 205, scope: !2280, inlinedAt: !2114)
!2280 = distinct !DILexicalBlock(scope: !2276, file: !41, line: 204, column: 4)
!2281 = !DILocation(line: 206, scope: !2280, inlinedAt: !2114)
!2282 = !DILocation(line: 208, scope: !2276, inlinedAt: !2114)
!2283 = !DILocation(line: 213, scope: !2113, inlinedAt: !2114)
!2284 = !DILocalVariable(name: "carry", scope: !2285, file: !2, line: 215, type: !3, align: 4)
!2285 = distinct !DILexicalBlock(scope: !2286, file: !41, line: 214, column: 2)
!2286 = distinct !DILexicalBlock(scope: !2113, file: !41, line: 213, column: 2)
!2287 = !DILocation(line: 215, scope: !2285, inlinedAt: !2114)
!2288 = !DILocalVariable(name: "sh", scope: !2285, file: !2, line: 216, type: !18, align: 4)
!2289 = !DILocation(line: 216, scope: !2285, inlinedAt: !2114)
!2290 = !DILocalVariable(name: "i", scope: !2285, file: !2, line: 217, type: !18, align: 4)
!2291 = !DILocation(line: 217, scope: !2285, inlinedAt: !2114)
!2292 = !DILocation(line: 218, scope: !2293, inlinedAt: !2114)
!2293 = distinct !DILexicalBlock(scope: !2285, file: !41, line: 218, column: 3)
!2294 = !DILocation(line: 220, scope: !2295, inlinedAt: !2114)
!2295 = distinct !DILexicalBlock(scope: !2293, file: !41, line: 219, column: 3)
!2296 = !DILocation(line: 221, scope: !2295, inlinedAt: !2114)
!2297 = !DILocation(line: 223, scope: !2298, inlinedAt: !2114)
!2298 = distinct !DILexicalBlock(scope: !2295, file: !41, line: 222, column: 4)
!2299 = !DILocation(line: 224, scope: !2298, inlinedAt: !2114)
!2300 = !DILocation(line: 226, scope: !2295, inlinedAt: !2114)
!2301 = !DILocation(line: 228, scope: !2285, inlinedAt: !2114)
!2302 = !DILocation(line: 229, scope: !2285, inlinedAt: !2114)
!2303 = !DILocation(line: 230, scope: !2285, inlinedAt: !2114)
!2304 = !DILocation(line: 231, scope: !2305, inlinedAt: !2114)
!2305 = distinct !DILexicalBlock(scope: !2285, file: !41, line: 231, column: 3)
!2306 = !DILocalVariable(name: "tmp", scope: !2307, file: !2, line: 233, type: !3, align: 4)
!2307 = distinct !DILexicalBlock(scope: !2305, file: !41, line: 232, column: 3)
!2308 = !DILocation(line: 233, scope: !2307, inlinedAt: !2114)
!2309 = !DILocation(line: 234, scope: !2307, inlinedAt: !2114)
!2310 = !DILocation(line: 235, scope: !2307, inlinedAt: !2114)
!2311 = !DILocation(line: 236, scope: !2307, inlinedAt: !2114)
!2312 = !DILocation(line: 238, scope: !2313, inlinedAt: !2114)
!2313 = distinct !DILexicalBlock(scope: !2307, file: !41, line: 237, column: 4)
!2314 = !DILocation(line: 239, scope: !2313, inlinedAt: !2114)
!2315 = !DILocation(line: 240, scope: !2313, inlinedAt: !2114)
!2316 = !DILocation(line: 243, scope: !2285, inlinedAt: !2114)
!2317 = !DILocation(line: 245, scope: !2318, inlinedAt: !2114)
!2318 = distinct !DILexicalBlock(scope: !2285, file: !41, line: 244, column: 3)
!2319 = !DILocation(line: 247, scope: !2320, inlinedAt: !2114)
!2320 = distinct !DILexicalBlock(scope: !2318, file: !41, line: 246, column: 4)
!2321 = !DILocation(line: 248, scope: !2320, inlinedAt: !2114)
!2322 = !DILocation(line: 252, scope: !2323, inlinedAt: !2114)
!2323 = distinct !DILexicalBlock(scope: !2318, file: !41, line: 251, column: 4)
!2324 = !DILocalVariable(name: "y", scope: !2113, file: !2, line: 258, type: !1956, align: 8)
!2325 = !DILocation(line: 258, scope: !2113, inlinedAt: !2114)
!2326 = !DILocalVariable(name: "i", scope: !2113, file: !2, line: 259, type: !18, align: 4)
!2327 = !DILocation(line: 259, scope: !2113, inlinedAt: !2114)
!2328 = !DILocation(line: 260, scope: !2329, inlinedAt: !2114)
!2329 = distinct !DILexicalBlock(scope: !2113, file: !41, line: 260, column: 2)
!2330 = !DILocation(line: 262, scope: !2331, inlinedAt: !2114)
!2331 = distinct !DILexicalBlock(scope: !2329, file: !41, line: 261, column: 2)
!2332 = !DILocation(line: 263, scope: !2331, inlinedAt: !2114)
!2333 = !DILocation(line: 266, scope: !2113, inlinedAt: !2114)
!2334 = !DILocalVariable(name: "denormal", scope: !2113, file: !2, line: 268, type: !115, align: 1)
!2335 = !DILocation(line: 268, scope: !2113, inlinedAt: !2114)
!2336 = !DILocalVariable(name: "bits", scope: !2113, file: !2, line: 270, type: !3, align: 4)
!2337 = !DILocation(line: 270, scope: !2113, inlinedAt: !2114)
!2338 = !DILocation(line: 271, scope: !2113, inlinedAt: !2114)
!2339 = !DILocation(line: 273, scope: !2340, inlinedAt: !2114)
!2340 = distinct !DILexicalBlock(scope: !2113, file: !41, line: 272, column: 2)
!2341 = !DILocation(line: 274, scope: !2340, inlinedAt: !2114)
!2342 = !DILocation(line: 275, scope: !2340, inlinedAt: !2114)
!2343 = !DILocalVariable(name: "bias", scope: !2113, file: !2, line: 279, type: !1956, align: 8)
!2344 = !DILocation(line: 279, scope: !2113, inlinedAt: !2114)
!2345 = !DILocalVariable(name: "frac", scope: !2113, file: !2, line: 280, type: !1956, align: 8)
!2346 = !DILocation(line: 280, scope: !2113, inlinedAt: !2114)
!2347 = !DILocation(line: 281, scope: !2113, inlinedAt: !2114)
!2348 = !DILocation(line: 283, scope: !2349, inlinedAt: !2114)
!2349 = distinct !DILexicalBlock(scope: !2113, file: !41, line: 282, column: 2)
!2350 = !DILocation(line: 1015, scope: !2351, inlinedAt: !2348)
!2351 = distinct !DISubprogram(name: "scalbn", linkageName: "scalbn", scope: !248, file: !248, line: 1015, scopeLine: 1015, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!2352 = !DILocation(line: 66, scope: !2353, inlinedAt: !2354)
!2353 = distinct !DISubprogram(name: "promote_int_same", linkageName: "promote_int_same", scope: !2098, file: !2098, line: 54, scopeLine: 54, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!2354 = !DILocation(line: 264, scope: !2355, inlinedAt: !2348)
!2355 = distinct !DISubprogram(name: "copysign", linkageName: "copysign", scope: !248, file: !248, line: 264, scopeLine: 264, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!2356 = !DILocation(line: 284, scope: !2349, inlinedAt: !2114)
!2357 = !DILocation(line: 1015, scope: !2358, inlinedAt: !2356)
!2358 = distinct !DISubprogram(name: "scalbn", linkageName: "scalbn", scope: !248, file: !248, line: 1015, scopeLine: 1015, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!2359 = !DILocation(line: 285, scope: !2349, inlinedAt: !2114)
!2360 = !DILocation(line: 286, scope: !2349, inlinedAt: !2114)
!2361 = !DILocation(line: 290, scope: !2113, inlinedAt: !2114)
!2362 = !DILocalVariable(name: "t", scope: !2363, file: !2, line: 292, type: !3, align: 4)
!2363 = distinct !DILexicalBlock(scope: !2113, file: !41, line: 291, column: 2)
!2364 = !DILocation(line: 292, scope: !2363, inlinedAt: !2114)
!2365 = !DILocation(line: 295, scope: !2366, inlinedAt: !2114)
!2366 = distinct !DILexicalBlock(scope: !2363, file: !41, line: 293, column: 3)
!2367 = !DILocation(line: 296, scope: !2368, inlinedAt: !2114)
!2368 = distinct !DILexicalBlock(scope: !2366, file: !41, line: 296, column: 5)
!2369 = !DILocation(line: 297, scope: !2366, inlinedAt: !2114)
!2370 = !DILocation(line: 298, scope: !2371, inlinedAt: !2114)
!2371 = distinct !DILexicalBlock(scope: !2366, file: !41, line: 298, column: 5)
!2372 = !DILocation(line: 299, scope: !2366, inlinedAt: !2114)
!2373 = !DILocation(line: 300, scope: !2374, inlinedAt: !2114)
!2374 = distinct !DILexicalBlock(scope: !2366, file: !41, line: 300, column: 5)
!2375 = !DILocation(line: 302, scope: !2376, inlinedAt: !2114)
!2376 = distinct !DILexicalBlock(scope: !2374, file: !41, line: 301, column: 5)
!2377 = !DILocation(line: 306, scope: !2378, inlinedAt: !2114)
!2378 = distinct !DILexicalBlock(scope: !2374, file: !41, line: 305, column: 5)
!2379 = !DILocation(line: 309, scope: !2363, inlinedAt: !2114)
!2380 = !DILocation(line: 312, scope: !2113, inlinedAt: !2114)
!2381 = !DILocation(line: 313, scope: !2113, inlinedAt: !2114)
!2382 = !DILocation(line: 315, scope: !2113, inlinedAt: !2114)
!2383 = !DILocation(line: 79, scope: !2384, inlinedAt: !2385)
!2384 = distinct !DISubprogram(name: "abs", linkageName: "abs", scope: !248, file: !248, line: 79, scopeLine: 79, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!2385 = !DILocation(line: 317, scope: !2386, inlinedAt: !2114)
!2386 = distinct !DILexicalBlock(scope: !2113, file: !41, line: 316, column: 2)
!2387 = !DILocation(line: 319, scope: !2388, inlinedAt: !2114)
!2388 = distinct !DILexicalBlock(scope: !2386, file: !41, line: 318, column: 3)
!2389 = !DILocation(line: 320, scope: !2388, inlinedAt: !2114)
!2390 = !DILocation(line: 321, scope: !2388, inlinedAt: !2114)
!2391 = !DILocation(line: 323, scope: !2386, inlinedAt: !2114)
!2392 = !DILocation(line: 1015, scope: !2393, inlinedAt: !2394)
!2393 = distinct !DISubprogram(name: "scalbn", linkageName: "scalbn", scope: !248, file: !248, line: 1015, scopeLine: 1015, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!2394 = !DILocation(line: 325, scope: !2113, inlinedAt: !2114)
!2395 = distinct !DISubprogram(name: "to_float", linkageName: "std.core.String.to_float", scope: !2, file: !2, line: 1058, type: !2396, scopeLine: 1058, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !87)
!2396 = !DISubroutineType(types: !2397)
!2397 = !{!307, !2398, !60}
!2398 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "float*", baseType: !2399, size: 64, align: 64, dwarfAddressSpace: 0)
!2399 = !DIBasicType(name: "float", size: 32, encoding: DW_ATE_float)
!2400 = !DILocalVariable(name: "self", arg: 1, scope: !2395, file: !2, line: 1058, type: !60)
!2401 = !DILocation(line: 1058, scope: !2395)
!2402 = !DILocalVariable(name: "sign", scope: !2403, file: !2, line: 451, type: !18, align: 4)
!2403 = distinct !DISubprogram(name: "to_real", linkageName: "to_real", scope: !41, file: !41, line: 449, scopeLine: 449, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54, retainedNodes: !87)
!2404 = !DILocation(line: 451, scope: !2403, inlinedAt: !2401)
!2405 = !DILocation(line: 465, scope: !2403, inlinedAt: !2401)
!2406 = !DILocation(line: 466, scope: !2403, inlinedAt: !2401)
!2407 = !DILocation(line: 468, scope: !2403, inlinedAt: !2401)
!2408 = !DILocation(line: 470, scope: !2409, inlinedAt: !2401)
!2409 = distinct !DILexicalBlock(scope: !2410, file: !41, line: 470, column: 3)
!2410 = distinct !DILexicalBlock(scope: !2403, file: !41, line: 469, column: 2)
!2411 = !DILocation(line: 473, scope: !2412, inlinedAt: !2401)
!2412 = distinct !DILexicalBlock(scope: !2409, file: !41, line: 473, column: 5)
!2413 = !DILocation(line: 474, scope: !2412, inlinedAt: !2401)
!2414 = !DILocation(line: 476, scope: !2415, inlinedAt: !2401)
!2415 = distinct !DILexicalBlock(scope: !2409, file: !41, line: 476, column: 5)
!2416 = !DILocation(line: 479, scope: !2403, inlinedAt: !2401)
!2417 = !DILocation(line: 480, scope: !2403, inlinedAt: !2401)
!2418 = !DILocation(line: 482, scope: !2403, inlinedAt: !2401)
!2419 = !DILocation(line: 483, scope: !2403, inlinedAt: !2401)
!2420 = !DILocation(line: 485, scope: !2403, inlinedAt: !2401)
!2421 = !DILocation(line: 487, scope: !2422, inlinedAt: !2401)
!2422 = distinct !DILexicalBlock(scope: !2403, file: !41, line: 486, column: 2)
!2423 = !DILocalVariable(name: "scale", scope: !2424, file: !2, line: 330, type: !1956, align: 8)
!2424 = distinct !DISubprogram(name: "hexfloat", linkageName: "hexfloat", scope: !41, file: !41, line: 328, scopeLine: 328, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54, retainedNodes: !87)
!2425 = !DILocation(line: 330, scope: !2424, inlinedAt: !2421)
!2426 = !DILocalVariable(name: "x", scope: !2424, file: !2, line: 331, type: !3, align: 4)
!2427 = !DILocation(line: 331, scope: !2424, inlinedAt: !2421)
!2428 = !DILocalVariable(name: "rp", scope: !2424, file: !2, line: 332, type: !308, align: 8)
!2429 = !DILocation(line: 332, scope: !2424, inlinedAt: !2421)
!2430 = !DILocalVariable(name: "dc", scope: !2424, file: !2, line: 333, type: !308, align: 8)
!2431 = !DILocation(line: 333, scope: !2424, inlinedAt: !2421)
!2432 = !DILocalVariable(name: "c", scope: !2424, file: !2, line: 334, type: !65, align: 1)
!2433 = !DILocation(line: 334, scope: !2424, inlinedAt: !2421)
!2434 = !DILocalVariable(name: "got_rad", scope: !2424, file: !2, line: 335, type: !115, align: 1)
!2435 = !DILocation(line: 335, scope: !2424, inlinedAt: !2421)
!2436 = !DILocalVariable(name: "got_digit", scope: !2424, file: !2, line: 336, type: !115, align: 1)
!2437 = !DILocation(line: 336, scope: !2424, inlinedAt: !2421)
!2438 = !DILocalVariable(name: "got_tail", scope: !2424, file: !2, line: 337, type: !115, align: 1)
!2439 = !DILocation(line: 337, scope: !2424, inlinedAt: !2421)
!2440 = !DILocalVariable(name: "len", scope: !2424, file: !2, line: 338, type: !67, align: 8)
!2441 = !DILocation(line: 338, scope: !2424, inlinedAt: !2421)
!2442 = !DILocalVariable(name: "last_char", scope: !2424, file: !2, line: 339, type: !67, align: 8)
!2443 = !DILocation(line: 339, scope: !2424, inlinedAt: !2421)
!2444 = !DILocalVariable(name: "index", scope: !2424, file: !2, line: 340, type: !67, align: 8)
!2445 = !DILocation(line: 340, scope: !2424, inlinedAt: !2421)
!2446 = !DILocalVariable(name: "y", scope: !2424, file: !2, line: 341, type: !1956, align: 8)
!2447 = !DILocation(line: 341, scope: !2424, inlinedAt: !2421)
!2448 = !DILocation(line: 344, scope: !2424, inlinedAt: !2421)
!2449 = !DILocation(line: 344, scope: !2450, inlinedAt: !2421)
!2450 = distinct !DILexicalBlock(scope: !2424, file: !41, line: 344, column: 2)
!2451 = !DILocation(line: 346, scope: !2452, inlinedAt: !2421)
!2452 = distinct !DILexicalBlock(scope: !2450, file: !41, line: 345, column: 2)
!2453 = !DILocation(line: 347, scope: !2452, inlinedAt: !2421)
!2454 = !DILocation(line: 349, scope: !2424, inlinedAt: !2421)
!2455 = !DILocation(line: 351, scope: !2456, inlinedAt: !2421)
!2456 = distinct !DILexicalBlock(scope: !2424, file: !41, line: 350, column: 2)
!2457 = !DILocation(line: 352, scope: !2456, inlinedAt: !2421)
!2458 = !DILocation(line: 354, scope: !2459, inlinedAt: !2421)
!2459 = distinct !DILexicalBlock(scope: !2456, file: !41, line: 353, column: 3)
!2460 = !DILocation(line: 355, scope: !2459, inlinedAt: !2421)
!2461 = !DILocation(line: 357, scope: !2456, inlinedAt: !2421)
!2462 = !DILocation(line: 359, scope: !2463, inlinedAt: !2421)
!2463 = distinct !DILexicalBlock(scope: !2456, file: !41, line: 358, column: 3)
!2464 = !DILocation(line: 360, scope: !2463, inlinedAt: !2421)
!2465 = !DILocation(line: 361, scope: !2463, inlinedAt: !2421)
!2466 = !DILocation(line: 361, scope: !2467, inlinedAt: !2421)
!2467 = distinct !DILexicalBlock(scope: !2463, file: !41, line: 361, column: 4)
!2468 = !DILocation(line: 363, scope: !2469, inlinedAt: !2421)
!2469 = distinct !DILexicalBlock(scope: !2467, file: !41, line: 362, column: 4)
!2470 = !DILocation(line: 368, scope: !2424, inlinedAt: !2421)
!2471 = !DILocation(line: 368, scope: !2472, inlinedAt: !2421)
!2472 = distinct !DILexicalBlock(scope: !2424, file: !41, line: 368, column: 2)
!2473 = !DILocation(line: 370, scope: !2474, inlinedAt: !2421)
!2474 = distinct !DILexicalBlock(scope: !2472, file: !41, line: 369, column: 2)
!2475 = !DILocation(line: 372, scope: !2476, inlinedAt: !2421)
!2476 = distinct !DILexicalBlock(scope: !2474, file: !41, line: 371, column: 3)
!2477 = !DILocation(line: 373, scope: !2476, inlinedAt: !2421)
!2478 = !DILocation(line: 374, scope: !2476, inlinedAt: !2421)
!2479 = !DILocation(line: 378, scope: !2480, inlinedAt: !2421)
!2480 = distinct !DILexicalBlock(scope: !2474, file: !41, line: 377, column: 3)
!2481 = !DILocalVariable(name: "d", scope: !2480, file: !2, line: 379, type: !18, align: 4)
!2482 = !DILocation(line: 379, scope: !2480, inlinedAt: !2421)
!2483 = !DILocation(line: 382, scope: !2484, inlinedAt: !2421)
!2484 = distinct !DILexicalBlock(scope: !2480, file: !41, line: 380, column: 4)
!2485 = !DILocation(line: 383, scope: !2486, inlinedAt: !2421)
!2486 = distinct !DILexicalBlock(scope: !2484, file: !41, line: 383, column: 6)
!2487 = !DILocation(line: 384, scope: !2484, inlinedAt: !2421)
!2488 = !DILocation(line: 385, scope: !2489, inlinedAt: !2421)
!2489 = distinct !DILexicalBlock(scope: !2484, file: !41, line: 385, column: 6)
!2490 = !DILocation(line: 386, scope: !2489, inlinedAt: !2421)
!2491 = !DILocation(line: 387, scope: !2484, inlinedAt: !2421)
!2492 = !DILocation(line: 388, scope: !2493, inlinedAt: !2421)
!2493 = distinct !DILexicalBlock(scope: !2484, file: !41, line: 388, column: 6)
!2494 = !DILocation(line: 389, scope: !2493, inlinedAt: !2421)
!2495 = !DILocation(line: 391, scope: !2480, inlinedAt: !2421)
!2496 = !DILocation(line: 393, scope: !2474, inlinedAt: !2421)
!2497 = !DILocation(line: 394, scope: !2474, inlinedAt: !2421)
!2498 = !DILocation(line: 396, scope: !2424, inlinedAt: !2421)
!2499 = !DILocation(line: 397, scope: !2424, inlinedAt: !2421)
!2500 = !DILocation(line: 398, scope: !2424, inlinedAt: !2421)
!2501 = !DILocation(line: 398, scope: !2502, inlinedAt: !2421)
!2502 = distinct !DILexicalBlock(scope: !2424, file: !41, line: 398, column: 2)
!2503 = !DILocalVariable(name: "e2", scope: !2424, file: !2, line: 400, type: !308, align: 8)
!2504 = !DILocation(line: 400, scope: !2424, inlinedAt: !2421)
!2505 = !DILocation(line: 401, scope: !2424, inlinedAt: !2421)
!2506 = !DILocalVariable(name: "e2val", scope: !2507, file: !2, line: 403, type: !308, align: 8)
!2507 = distinct !DILexicalBlock(scope: !2424, file: !41, line: 402, column: 2)
!2508 = !DILocation(line: 403, scope: !2507, inlinedAt: !2421)
!2509 = !DILocation(line: 404, scope: !2507, inlinedAt: !2421)
!2510 = !DILocation(line: 406, scope: !2424, inlinedAt: !2421)
!2511 = !DILocation(line: 407, scope: !2424, inlinedAt: !2421)
!2512 = !DILocation(line: 408, scope: !2424, inlinedAt: !2421)
!2513 = !DILocation(line: 409, scope: !2424, inlinedAt: !2421)
!2514 = !DILocation(line: 411, scope: !2424, inlinedAt: !2421)
!2515 = !DILocation(line: 411, scope: !2516, inlinedAt: !2421)
!2516 = distinct !DILexicalBlock(scope: !2424, file: !41, line: 411, column: 2)
!2517 = !DILocation(line: 413, scope: !2518, inlinedAt: !2421)
!2518 = distinct !DILexicalBlock(scope: !2516, file: !41, line: 412, column: 2)
!2519 = !DILocation(line: 415, scope: !2520, inlinedAt: !2421)
!2520 = distinct !DILexicalBlock(scope: !2518, file: !41, line: 414, column: 3)
!2521 = !DILocation(line: 416, scope: !2520, inlinedAt: !2421)
!2522 = !DILocation(line: 420, scope: !2523, inlinedAt: !2421)
!2523 = distinct !DILexicalBlock(scope: !2518, file: !41, line: 419, column: 3)
!2524 = !DILocation(line: 421, scope: !2523, inlinedAt: !2421)
!2525 = !DILocation(line: 423, scope: !2518, inlinedAt: !2421)
!2526 = !DILocalVariable(name: "bits", scope: !2424, file: !2, line: 425, type: !18, align: 4)
!2527 = !DILocation(line: 425, scope: !2424, inlinedAt: !2421)
!2528 = !DILocation(line: 426, scope: !2424, inlinedAt: !2421)
!2529 = !DILocation(line: 428, scope: !2530, inlinedAt: !2421)
!2530 = distinct !DILexicalBlock(scope: !2424, file: !41, line: 427, column: 2)
!2531 = !DILocation(line: 429, scope: !2530, inlinedAt: !2421)
!2532 = !DILocalVariable(name: "bias", scope: !2424, file: !2, line: 431, type: !1956, align: 8)
!2533 = !DILocation(line: 431, scope: !2424, inlinedAt: !2421)
!2534 = !DILocation(line: 432, scope: !2424, inlinedAt: !2421)
!2535 = !DILocation(line: 434, scope: !2536, inlinedAt: !2421)
!2536 = distinct !DILexicalBlock(scope: !2424, file: !41, line: 433, column: 2)
!2537 = !DILocation(line: 1015, scope: !2538, inlinedAt: !2535)
!2538 = distinct !DISubprogram(name: "scalbn", linkageName: "scalbn", scope: !248, file: !248, line: 1015, scopeLine: 1015, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!2539 = !DILocation(line: 66, scope: !2540, inlinedAt: !2541)
!2540 = distinct !DISubprogram(name: "promote_int_same", linkageName: "promote_int_same", scope: !2098, file: !2098, line: 54, scopeLine: 54, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!2541 = !DILocation(line: 264, scope: !2542, inlinedAt: !2535)
!2542 = distinct !DISubprogram(name: "copysign", linkageName: "copysign", scope: !248, file: !248, line: 264, scopeLine: 264, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!2543 = !DILocation(line: 437, scope: !2424, inlinedAt: !2421)
!2544 = !DILocation(line: 439, scope: !2545, inlinedAt: !2421)
!2545 = distinct !DILexicalBlock(scope: !2424, file: !41, line: 438, column: 2)
!2546 = !DILocation(line: 440, scope: !2545, inlinedAt: !2421)
!2547 = !DILocation(line: 442, scope: !2424, inlinedAt: !2421)
!2548 = !DILocation(line: 443, scope: !2424, inlinedAt: !2421)
!2549 = !DILocation(line: 444, scope: !2424, inlinedAt: !2421)
!2550 = !DILocation(line: 446, scope: !2424, inlinedAt: !2421)
!2551 = !DILocation(line: 1015, scope: !2552, inlinedAt: !2550)
!2552 = distinct !DISubprogram(name: "scalbn", linkageName: "scalbn", scope: !248, file: !248, line: 1015, scopeLine: 1015, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!2553 = !DILocation(line: 35, scope: !2554, inlinedAt: !2556)
!2554 = distinct !DILexicalBlock(scope: !2555, file: !41, line: 38, column: 1)
!2555 = distinct !DISubprogram(name: "decfloat", linkageName: "decfloat", scope: !41, file: !41, line: 37, scopeLine: 37, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54, retainedNodes: !87)
!2556 = !DILocation(line: 489, scope: !2403, inlinedAt: !2401)
!2557 = !DILocation(line: 489, scope: !2554, inlinedAt: !2556)
!2558 = !DILocalVariable(name: "x", scope: !2555, file: !2, line: 39, type: !2117, align: 16)
!2559 = !DILocation(line: 39, scope: !2555, inlinedAt: !2556)
!2560 = !DILocalVariable(name: "emax", scope: !2555, file: !2, line: 41, type: !18, align: 4)
!2561 = !DILocation(line: 41, scope: !2555, inlinedAt: !2556)
!2562 = !DILocalVariable(name: "index", scope: !2555, file: !2, line: 44, type: !67, align: 8)
!2563 = !DILocation(line: 44, scope: !2555, inlinedAt: !2556)
!2564 = !DILocalVariable(name: "got_digit", scope: !2555, file: !2, line: 45, type: !115, align: 1)
!2565 = !DILocation(line: 45, scope: !2555, inlinedAt: !2556)
!2566 = !DILocalVariable(name: "got_rad", scope: !2555, file: !2, line: 46, type: !115, align: 1)
!2567 = !DILocation(line: 46, scope: !2555, inlinedAt: !2556)
!2568 = !DILocalVariable(name: "lrp", scope: !2555, file: !2, line: 47, type: !308, align: 8)
!2569 = !DILocation(line: 47, scope: !2555, inlinedAt: !2556)
!2570 = !DILocalVariable(name: "dc", scope: !2555, file: !2, line: 47, type: !308, align: 8)
!2571 = !DILocalVariable(name: "k", scope: !2555, file: !2, line: 48, type: !18, align: 4)
!2572 = !DILocation(line: 48, scope: !2555, inlinedAt: !2556)
!2573 = !DILocalVariable(name: "j", scope: !2555, file: !2, line: 48, type: !18, align: 4)
!2574 = !DILocalVariable(name: "lnz", scope: !2555, file: !2, line: 48, type: !18, align: 4)
!2575 = !DILocalVariable(name: "len", scope: !2555, file: !2, line: 49, type: !67, align: 8)
!2576 = !DILocation(line: 49, scope: !2555, inlinedAt: !2556)
!2577 = !DILocalVariable(name: "last_char", scope: !2555, file: !2, line: 50, type: !67, align: 8)
!2578 = !DILocation(line: 50, scope: !2555, inlinedAt: !2556)
!2579 = !DILocation(line: 52, scope: !2555, inlinedAt: !2556)
!2580 = !DILocalVariable(name: "c", scope: !2555, file: !2, line: 54, type: !65, align: 1)
!2581 = !DILocation(line: 54, scope: !2555, inlinedAt: !2556)
!2582 = !DILocation(line: 56, scope: !2555, inlinedAt: !2556)
!2583 = !DILocation(line: 56, scope: !2584, inlinedAt: !2556)
!2584 = distinct !DILexicalBlock(scope: !2555, file: !41, line: 56, column: 2)
!2585 = !DILocation(line: 58, scope: !2586, inlinedAt: !2556)
!2586 = distinct !DILexicalBlock(scope: !2584, file: !41, line: 57, column: 2)
!2587 = !DILocation(line: 59, scope: !2586, inlinedAt: !2556)
!2588 = !DILocation(line: 62, scope: !2555, inlinedAt: !2556)
!2589 = !DILocation(line: 64, scope: !2590, inlinedAt: !2556)
!2590 = distinct !DILexicalBlock(scope: !2555, file: !41, line: 63, column: 2)
!2591 = !DILocation(line: 65, scope: !2590, inlinedAt: !2556)
!2592 = !DILocation(line: 67, scope: !2593, inlinedAt: !2556)
!2593 = distinct !DILexicalBlock(scope: !2590, file: !41, line: 66, column: 3)
!2594 = !DILocation(line: 68, scope: !2593, inlinedAt: !2556)
!2595 = !DILocation(line: 70, scope: !2590, inlinedAt: !2556)
!2596 = !DILocation(line: 72, scope: !2597, inlinedAt: !2556)
!2597 = distinct !DILexicalBlock(scope: !2590, file: !41, line: 71, column: 3)
!2598 = !DILocation(line: 73, scope: !2597, inlinedAt: !2556)
!2599 = !DILocation(line: 74, scope: !2597, inlinedAt: !2556)
!2600 = !DILocation(line: 74, scope: !2601, inlinedAt: !2556)
!2601 = distinct !DILexicalBlock(scope: !2597, file: !41, line: 74, column: 4)
!2602 = !DILocation(line: 76, scope: !2603, inlinedAt: !2556)
!2603 = distinct !DILexicalBlock(scope: !2601, file: !41, line: 75, column: 4)
!2604 = !DILocation(line: 81, scope: !2555, inlinedAt: !2556)
!2605 = !DILocation(line: 81, scope: !2606, inlinedAt: !2556)
!2606 = distinct !DILexicalBlock(scope: !2555, file: !41, line: 81, column: 2)
!2607 = !DILocation(line: 85, scope: !2608, inlinedAt: !2556)
!2608 = distinct !DILexicalBlock(scope: !2609, file: !41, line: 83, column: 3)
!2609 = distinct !DILexicalBlock(scope: !2606, file: !41, line: 82, column: 2)
!2610 = !DILocation(line: 86, scope: !2611, inlinedAt: !2556)
!2611 = distinct !DILexicalBlock(scope: !2608, file: !41, line: 86, column: 5)
!2612 = !DILocation(line: 87, scope: !2611, inlinedAt: !2556)
!2613 = !DILocation(line: 88, scope: !2611, inlinedAt: !2556)
!2614 = !DILocation(line: 89, scope: !2608, inlinedAt: !2556)
!2615 = !DILocation(line: 90, scope: !2616, inlinedAt: !2556)
!2616 = distinct !DILexicalBlock(scope: !2608, file: !41, line: 90, column: 5)
!2617 = !DILocation(line: 91, scope: !2616, inlinedAt: !2556)
!2618 = !DILocation(line: 92, scope: !2616, inlinedAt: !2556)
!2619 = !DILocation(line: 94, scope: !2620, inlinedAt: !2556)
!2620 = distinct !DILexicalBlock(scope: !2616, file: !41, line: 93, column: 5)
!2621 = !DILocation(line: 98, scope: !2622, inlinedAt: !2556)
!2622 = distinct !DILexicalBlock(scope: !2616, file: !41, line: 97, column: 5)
!2623 = !DILocation(line: 100, scope: !2616, inlinedAt: !2556)
!2624 = !DILocation(line: 102, scope: !2625, inlinedAt: !2556)
!2625 = distinct !DILexicalBlock(scope: !2616, file: !41, line: 101, column: 5)
!2626 = !DILocation(line: 103, scope: !2625, inlinedAt: !2556)
!2627 = !DILocation(line: 105, scope: !2616, inlinedAt: !2556)
!2628 = !DILocation(line: 107, scope: !2629, inlinedAt: !2556)
!2629 = distinct !DILexicalBlock(scope: !2608, file: !41, line: 107, column: 5)
!2630 = !DILocation(line: 108, scope: !2629, inlinedAt: !2556)
!2631 = !DILocation(line: 111, scope: !2609, inlinedAt: !2556)
!2632 = !DILocation(line: 112, scope: !2609, inlinedAt: !2556)
!2633 = !DILocation(line: 113, scope: !2609, inlinedAt: !2556)
!2634 = !DILocation(line: 115, scope: !2555, inlinedAt: !2556)
!2635 = !DILocation(line: 116, scope: !2555, inlinedAt: !2556)
!2636 = !DILocation(line: 117, scope: !2555, inlinedAt: !2556)
!2637 = !DILocation(line: 119, scope: !2638, inlinedAt: !2556)
!2638 = distinct !DILexicalBlock(scope: !2555, file: !41, line: 118, column: 2)
!2639 = !DILocalVariable(name: "e10", scope: !2638, file: !2, line: 120, type: !308, align: 8)
!2640 = !DILocation(line: 120, scope: !2638, inlinedAt: !2556)
!2641 = !DILocation(line: 121, scope: !2638, inlinedAt: !2556)
!2642 = !DILocation(line: 123, scope: !2555, inlinedAt: !2556)
!2643 = !DILocation(line: 125, scope: !2644, inlinedAt: !2556)
!2644 = distinct !DILexicalBlock(scope: !2555, file: !41, line: 124, column: 2)
!2645 = !DILocation(line: 128, scope: !2555, inlinedAt: !2556)
!2646 = !DILocation(line: 131, scope: !2555, inlinedAt: !2556)
!2647 = !DILocation(line: 132, scope: !2555, inlinedAt: !2556)
!2648 = !DILocation(line: 133, scope: !2555, inlinedAt: !2556)
!2649 = !DILocation(line: 136, scope: !2555, inlinedAt: !2556)
!2650 = !DILocation(line: 138, scope: !2651, inlinedAt: !2556)
!2651 = distinct !DILexicalBlock(scope: !2555, file: !41, line: 137, column: 2)
!2652 = !DILocation(line: 138, scope: !2653, inlinedAt: !2556)
!2653 = distinct !DILexicalBlock(scope: !2651, file: !41, line: 138, column: 3)
!2654 = !DILocation(line: 139, scope: !2651, inlinedAt: !2556)
!2655 = !DILocation(line: 140, scope: !2651, inlinedAt: !2556)
!2656 = !DILocalVariable(name: "a", scope: !2555, file: !2, line: 143, type: !18, align: 4)
!2657 = !DILocation(line: 143, scope: !2555, inlinedAt: !2556)
!2658 = !DILocalVariable(name: "z", scope: !2555, file: !2, line: 144, type: !18, align: 4)
!2659 = !DILocation(line: 144, scope: !2555, inlinedAt: !2556)
!2660 = !DILocalVariable(name: "e2", scope: !2555, file: !2, line: 145, type: !18, align: 4)
!2661 = !DILocation(line: 145, scope: !2555, inlinedAt: !2556)
!2662 = !DILocalVariable(name: "rp", scope: !2555, file: !2, line: 146, type: !308, align: 8)
!2663 = !DILocation(line: 146, scope: !2555, inlinedAt: !2556)
!2664 = !DILocation(line: 149, scope: !2555, inlinedAt: !2556)
!2665 = !DILocation(line: 151, scope: !2666, inlinedAt: !2556)
!2666 = distinct !DILexicalBlock(scope: !2555, file: !41, line: 150, column: 2)
!2667 = !DILocation(line: 152, scope: !2666, inlinedAt: !2556)
!2668 = !DILocalVariable(name: "bitlim", scope: !2666, file: !2, line: 153, type: !18, align: 4)
!2669 = !DILocation(line: 153, scope: !2666, inlinedAt: !2556)
!2670 = !DILocation(line: 154, scope: !2666, inlinedAt: !2556)
!2671 = !DILocation(line: 158, scope: !2555, inlinedAt: !2556)
!2672 = !DILocalVariable(name: "rpm9", scope: !2673, file: !2, line: 160, type: !308, align: 8)
!2673 = distinct !DILexicalBlock(scope: !2555, file: !41, line: 159, column: 2)
!2674 = !DILocation(line: 160, scope: !2673, inlinedAt: !2556)
!2675 = !DILocalVariable(name: "p10", scope: !2673, file: !2, line: 161, type: !18, align: 4)
!2676 = !DILocation(line: 161, scope: !2673, inlinedAt: !2556)
!2677 = !DILocalVariable(name: "carry", scope: !2673, file: !2, line: 162, type: !3, align: 4)
!2678 = !DILocation(line: 162, scope: !2673, inlinedAt: !2556)
!2679 = !DILocation(line: 163, scope: !2680, inlinedAt: !2556)
!2680 = distinct !DILexicalBlock(scope: !2673, file: !41, line: 163, column: 3)
!2681 = !DILocalVariable(name: "tmp", scope: !2682, file: !2, line: 165, type: !3, align: 4)
!2682 = distinct !DILexicalBlock(scope: !2680, file: !41, line: 164, column: 3)
!2683 = !DILocation(line: 165, scope: !2682, inlinedAt: !2556)
!2684 = !DILocation(line: 166, scope: !2682, inlinedAt: !2556)
!2685 = !DILocation(line: 167, scope: !2682, inlinedAt: !2556)
!2686 = !DILocation(line: 168, scope: !2682, inlinedAt: !2556)
!2687 = !DILocation(line: 170, scope: !2688, inlinedAt: !2556)
!2688 = distinct !DILexicalBlock(scope: !2682, file: !41, line: 169, column: 4)
!2689 = !DILocation(line: 171, scope: !2688, inlinedAt: !2556)
!2690 = !DILocation(line: 174, scope: !2673, inlinedAt: !2556)
!2691 = !DILocation(line: 175, scope: !2673, inlinedAt: !2556)
!2692 = !DILocation(line: 179, scope: !2555, inlinedAt: !2556)
!2693 = !DILocation(line: 179, scope: !2694, inlinedAt: !2556)
!2694 = distinct !DILexicalBlock(scope: !2555, file: !41, line: 179, column: 2)
!2695 = !DILocalVariable(name: "carry", scope: !2696, file: !2, line: 181, type: !3, align: 4)
!2696 = distinct !DILexicalBlock(scope: !2694, file: !41, line: 180, column: 2)
!2697 = !DILocation(line: 181, scope: !2696, inlinedAt: !2556)
!2698 = !DILocation(line: 182, scope: !2696, inlinedAt: !2556)
!2699 = !DILocation(line: 183, scope: !2700, inlinedAt: !2556)
!2700 = distinct !DILexicalBlock(scope: !2696, file: !41, line: 183, column: 3)
!2701 = !DILocalVariable(name: "tmp", scope: !2702, file: !2, line: 185, type: !68, align: 8)
!2702 = distinct !DILexicalBlock(scope: !2700, file: !41, line: 184, column: 3)
!2703 = !DILocation(line: 185, scope: !2702, inlinedAt: !2556)
!2704 = !DILocation(line: 186, scope: !2702, inlinedAt: !2556)
!2705 = !DILocation(line: 188, scope: !2706, inlinedAt: !2556)
!2706 = distinct !DILexicalBlock(scope: !2702, file: !41, line: 187, column: 4)
!2707 = !DILocation(line: 189, scope: !2706, inlinedAt: !2556)
!2708 = !DILocation(line: 193, scope: !2709, inlinedAt: !2556)
!2709 = distinct !DILexicalBlock(scope: !2702, file: !41, line: 192, column: 4)
!2710 = !DILocation(line: 194, scope: !2709, inlinedAt: !2556)
!2711 = !DILocation(line: 196, scope: !2702, inlinedAt: !2556)
!2712 = !DILocation(line: 197, scope: !2702, inlinedAt: !2556)
!2713 = !DILocation(line: 199, scope: !2696, inlinedAt: !2556)
!2714 = !DILocation(line: 201, scope: !2715, inlinedAt: !2556)
!2715 = distinct !DILexicalBlock(scope: !2696, file: !41, line: 200, column: 3)
!2716 = !DILocation(line: 202, scope: !2715, inlinedAt: !2556)
!2717 = !DILocation(line: 203, scope: !2715, inlinedAt: !2556)
!2718 = !DILocation(line: 205, scope: !2719, inlinedAt: !2556)
!2719 = distinct !DILexicalBlock(scope: !2715, file: !41, line: 204, column: 4)
!2720 = !DILocation(line: 206, scope: !2719, inlinedAt: !2556)
!2721 = !DILocation(line: 208, scope: !2715, inlinedAt: !2556)
!2722 = !DILocation(line: 213, scope: !2555, inlinedAt: !2556)
!2723 = !DILocalVariable(name: "carry", scope: !2724, file: !2, line: 215, type: !3, align: 4)
!2724 = distinct !DILexicalBlock(scope: !2725, file: !41, line: 214, column: 2)
!2725 = distinct !DILexicalBlock(scope: !2555, file: !41, line: 213, column: 2)
!2726 = !DILocation(line: 215, scope: !2724, inlinedAt: !2556)
!2727 = !DILocalVariable(name: "sh", scope: !2724, file: !2, line: 216, type: !18, align: 4)
!2728 = !DILocation(line: 216, scope: !2724, inlinedAt: !2556)
!2729 = !DILocalVariable(name: "i", scope: !2724, file: !2, line: 217, type: !18, align: 4)
!2730 = !DILocation(line: 217, scope: !2724, inlinedAt: !2556)
!2731 = !DILocation(line: 218, scope: !2732, inlinedAt: !2556)
!2732 = distinct !DILexicalBlock(scope: !2724, file: !41, line: 218, column: 3)
!2733 = !DILocation(line: 220, scope: !2734, inlinedAt: !2556)
!2734 = distinct !DILexicalBlock(scope: !2732, file: !41, line: 219, column: 3)
!2735 = !DILocation(line: 221, scope: !2734, inlinedAt: !2556)
!2736 = !DILocation(line: 223, scope: !2737, inlinedAt: !2556)
!2737 = distinct !DILexicalBlock(scope: !2734, file: !41, line: 222, column: 4)
!2738 = !DILocation(line: 224, scope: !2737, inlinedAt: !2556)
!2739 = !DILocation(line: 226, scope: !2734, inlinedAt: !2556)
!2740 = !DILocation(line: 228, scope: !2724, inlinedAt: !2556)
!2741 = !DILocation(line: 229, scope: !2724, inlinedAt: !2556)
!2742 = !DILocation(line: 230, scope: !2724, inlinedAt: !2556)
!2743 = !DILocation(line: 231, scope: !2744, inlinedAt: !2556)
!2744 = distinct !DILexicalBlock(scope: !2724, file: !41, line: 231, column: 3)
!2745 = !DILocalVariable(name: "tmp", scope: !2746, file: !2, line: 233, type: !3, align: 4)
!2746 = distinct !DILexicalBlock(scope: !2744, file: !41, line: 232, column: 3)
!2747 = !DILocation(line: 233, scope: !2746, inlinedAt: !2556)
!2748 = !DILocation(line: 234, scope: !2746, inlinedAt: !2556)
!2749 = !DILocation(line: 235, scope: !2746, inlinedAt: !2556)
!2750 = !DILocation(line: 236, scope: !2746, inlinedAt: !2556)
!2751 = !DILocation(line: 238, scope: !2752, inlinedAt: !2556)
!2752 = distinct !DILexicalBlock(scope: !2746, file: !41, line: 237, column: 4)
!2753 = !DILocation(line: 239, scope: !2752, inlinedAt: !2556)
!2754 = !DILocation(line: 240, scope: !2752, inlinedAt: !2556)
!2755 = !DILocation(line: 243, scope: !2724, inlinedAt: !2556)
!2756 = !DILocation(line: 245, scope: !2757, inlinedAt: !2556)
!2757 = distinct !DILexicalBlock(scope: !2724, file: !41, line: 244, column: 3)
!2758 = !DILocation(line: 247, scope: !2759, inlinedAt: !2556)
!2759 = distinct !DILexicalBlock(scope: !2757, file: !41, line: 246, column: 4)
!2760 = !DILocation(line: 248, scope: !2759, inlinedAt: !2556)
!2761 = !DILocation(line: 252, scope: !2762, inlinedAt: !2556)
!2762 = distinct !DILexicalBlock(scope: !2757, file: !41, line: 251, column: 4)
!2763 = !DILocalVariable(name: "y", scope: !2555, file: !2, line: 258, type: !1956, align: 8)
!2764 = !DILocation(line: 258, scope: !2555, inlinedAt: !2556)
!2765 = !DILocalVariable(name: "i", scope: !2555, file: !2, line: 259, type: !18, align: 4)
!2766 = !DILocation(line: 259, scope: !2555, inlinedAt: !2556)
!2767 = !DILocation(line: 260, scope: !2768, inlinedAt: !2556)
!2768 = distinct !DILexicalBlock(scope: !2555, file: !41, line: 260, column: 2)
!2769 = !DILocation(line: 262, scope: !2770, inlinedAt: !2556)
!2770 = distinct !DILexicalBlock(scope: !2768, file: !41, line: 261, column: 2)
!2771 = !DILocation(line: 263, scope: !2770, inlinedAt: !2556)
!2772 = !DILocation(line: 266, scope: !2555, inlinedAt: !2556)
!2773 = !DILocalVariable(name: "denormal", scope: !2555, file: !2, line: 268, type: !115, align: 1)
!2774 = !DILocation(line: 268, scope: !2555, inlinedAt: !2556)
!2775 = !DILocalVariable(name: "bits", scope: !2555, file: !2, line: 270, type: !3, align: 4)
!2776 = !DILocation(line: 270, scope: !2555, inlinedAt: !2556)
!2777 = !DILocation(line: 271, scope: !2555, inlinedAt: !2556)
!2778 = !DILocation(line: 273, scope: !2779, inlinedAt: !2556)
!2779 = distinct !DILexicalBlock(scope: !2555, file: !41, line: 272, column: 2)
!2780 = !DILocation(line: 274, scope: !2779, inlinedAt: !2556)
!2781 = !DILocation(line: 275, scope: !2779, inlinedAt: !2556)
!2782 = !DILocalVariable(name: "bias", scope: !2555, file: !2, line: 279, type: !1956, align: 8)
!2783 = !DILocation(line: 279, scope: !2555, inlinedAt: !2556)
!2784 = !DILocalVariable(name: "frac", scope: !2555, file: !2, line: 280, type: !1956, align: 8)
!2785 = !DILocation(line: 280, scope: !2555, inlinedAt: !2556)
!2786 = !DILocation(line: 281, scope: !2555, inlinedAt: !2556)
!2787 = !DILocation(line: 283, scope: !2788, inlinedAt: !2556)
!2788 = distinct !DILexicalBlock(scope: !2555, file: !41, line: 282, column: 2)
!2789 = !DILocation(line: 1015, scope: !2790, inlinedAt: !2787)
!2790 = distinct !DISubprogram(name: "scalbn", linkageName: "scalbn", scope: !248, file: !248, line: 1015, scopeLine: 1015, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!2791 = !DILocation(line: 66, scope: !2792, inlinedAt: !2793)
!2792 = distinct !DISubprogram(name: "promote_int_same", linkageName: "promote_int_same", scope: !2098, file: !2098, line: 54, scopeLine: 54, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!2793 = !DILocation(line: 264, scope: !2794, inlinedAt: !2787)
!2794 = distinct !DISubprogram(name: "copysign", linkageName: "copysign", scope: !248, file: !248, line: 264, scopeLine: 264, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!2795 = !DILocation(line: 284, scope: !2788, inlinedAt: !2556)
!2796 = !DILocation(line: 1015, scope: !2797, inlinedAt: !2795)
!2797 = distinct !DISubprogram(name: "scalbn", linkageName: "scalbn", scope: !248, file: !248, line: 1015, scopeLine: 1015, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!2798 = !DILocation(line: 285, scope: !2788, inlinedAt: !2556)
!2799 = !DILocation(line: 286, scope: !2788, inlinedAt: !2556)
!2800 = !DILocation(line: 290, scope: !2555, inlinedAt: !2556)
!2801 = !DILocalVariable(name: "t", scope: !2802, file: !2, line: 292, type: !3, align: 4)
!2802 = distinct !DILexicalBlock(scope: !2555, file: !41, line: 291, column: 2)
!2803 = !DILocation(line: 292, scope: !2802, inlinedAt: !2556)
!2804 = !DILocation(line: 295, scope: !2805, inlinedAt: !2556)
!2805 = distinct !DILexicalBlock(scope: !2802, file: !41, line: 293, column: 3)
!2806 = !DILocation(line: 296, scope: !2807, inlinedAt: !2556)
!2807 = distinct !DILexicalBlock(scope: !2805, file: !41, line: 296, column: 5)
!2808 = !DILocation(line: 297, scope: !2805, inlinedAt: !2556)
!2809 = !DILocation(line: 298, scope: !2810, inlinedAt: !2556)
!2810 = distinct !DILexicalBlock(scope: !2805, file: !41, line: 298, column: 5)
!2811 = !DILocation(line: 299, scope: !2805, inlinedAt: !2556)
!2812 = !DILocation(line: 300, scope: !2813, inlinedAt: !2556)
!2813 = distinct !DILexicalBlock(scope: !2805, file: !41, line: 300, column: 5)
!2814 = !DILocation(line: 302, scope: !2815, inlinedAt: !2556)
!2815 = distinct !DILexicalBlock(scope: !2813, file: !41, line: 301, column: 5)
!2816 = !DILocation(line: 306, scope: !2817, inlinedAt: !2556)
!2817 = distinct !DILexicalBlock(scope: !2813, file: !41, line: 305, column: 5)
!2818 = !DILocation(line: 309, scope: !2802, inlinedAt: !2556)
!2819 = !DILocation(line: 312, scope: !2555, inlinedAt: !2556)
!2820 = !DILocation(line: 313, scope: !2555, inlinedAt: !2556)
!2821 = !DILocation(line: 315, scope: !2555, inlinedAt: !2556)
!2822 = !DILocation(line: 79, scope: !2823, inlinedAt: !2824)
!2823 = distinct !DISubprogram(name: "abs", linkageName: "abs", scope: !248, file: !248, line: 79, scopeLine: 79, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!2824 = !DILocation(line: 317, scope: !2825, inlinedAt: !2556)
!2825 = distinct !DILexicalBlock(scope: !2555, file: !41, line: 316, column: 2)
!2826 = !DILocation(line: 319, scope: !2827, inlinedAt: !2556)
!2827 = distinct !DILexicalBlock(scope: !2825, file: !41, line: 318, column: 3)
!2828 = !DILocation(line: 320, scope: !2827, inlinedAt: !2556)
!2829 = !DILocation(line: 321, scope: !2827, inlinedAt: !2556)
!2830 = !DILocation(line: 323, scope: !2825, inlinedAt: !2556)
!2831 = !DILocation(line: 1015, scope: !2832, inlinedAt: !2833)
!2832 = distinct !DISubprogram(name: "scalbn", linkageName: "scalbn", scope: !248, file: !248, line: 1015, scopeLine: 1015, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!2833 = !DILocation(line: 325, scope: !2555, inlinedAt: !2556)
!2834 = distinct !DISubprogram(name: "tokenize", linkageName: "std.core.String.tokenize", scope: !2, file: !2, line: 1069, type: !2835, scopeLine: 1069, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !87)
!2835 = !DISubroutineType(types: !2836)
!2836 = !{!57, !60, !60}
!2837 = !DILocalVariable(name: "self", arg: 1, scope: !2834, file: !2, line: 1069, type: !60)
!2838 = !DILocation(line: 1069, scope: !2834)
!2839 = !DILocalVariable(name: "split", arg: 2, scope: !2834, file: !2, line: 1069, type: !60)
!2840 = !DILocation(line: 1071, scope: !2834)
!2841 = distinct !DISubprogram(name: "tokenize_all", linkageName: "std.core.String.tokenize_all", scope: !2, file: !2, line: 1083, type: !2842, scopeLine: 1083, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !87)
!2842 = !DISubroutineType(types: !2843)
!2843 = !{!57, !60, !60, !115}
!2844 = !DILocalVariable(name: "self", arg: 1, scope: !2841, file: !2, line: 1083, type: !60)
!2845 = !DILocation(line: 1083, scope: !2841)
!2846 = !DILocalVariable(name: "split", arg: 2, scope: !2841, file: !2, line: 1083, type: !60)
!2847 = !DILocalVariable(name: "skip_last", arg: 3, scope: !2841, file: !2, line: 1083, type: !115)
!2848 = !DILocation(line: 1086, scope: !2841)
!2849 = !DILocation(line: 1087, scope: !2841)
!2850 = !DILocation(line: 1088, scope: !2841)
!2851 = distinct !DISubprogram(name: "splitter", linkageName: "std.core.String.splitter", scope: !2, file: !2, line: 1092, type: !2835, scopeLine: 1092, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !87)
!2852 = !DILocalVariable(name: "self", arg: 1, scope: !2851, file: !2, line: 1092, type: !60)
!2853 = !DILocation(line: 1092, scope: !2851)
!2854 = !DILocalVariable(name: "split", arg: 2, scope: !2851, file: !2, line: 1092, type: !60)
!2855 = !DILocation(line: 1094, scope: !2851)
!2856 = distinct !DISubprogram(name: "reset", linkageName: "std.core.string.Splitter.reset", scope: !2, file: !2, line: 1148, type: !2857, scopeLine: 1148, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !87)
!2857 = !DISubroutineType(types: !2858)
!2858 = !{null, !2859}
!2859 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Splitter*", baseType: !57, size: 64, align: 64, dwarfAddressSpace: 0)
!2860 = !DILocation(line: 1149, scope: !2856)
!2861 = !DILocalVariable(name: "self", arg: 1, scope: !2856, file: !2, line: 1148, type: !2859)
!2862 = !DILocation(line: 1148, scope: !2856)
!2863 = !DILocation(line: 1150, scope: !2856)
!2864 = distinct !DISubprogram(name: "next", linkageName: "std.core.string.Splitter.next", scope: !2, file: !2, line: 1153, type: !2865, scopeLine: 1153, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !87)
!2865 = !DISubroutineType(types: !2866)
!2866 = !{!307, !130, !2859}
!2867 = !DILocation(line: 1154, scope: !2864)
!2868 = !DILocalVariable(name: "self", arg: 1, scope: !2864, file: !2, line: 1153, type: !2859)
!2869 = !DILocation(line: 1153, scope: !2864)
!2870 = !DILocation(line: 1155, scope: !2864)
!2871 = !DILocalVariable(name: "len", scope: !2872, file: !2, line: 1157, type: !67, align: 8)
!2872 = distinct !DILexicalBlock(scope: !2873, file: !2, line: 1156, column: 2)
!2873 = distinct !DILexicalBlock(scope: !2864, file: !2, line: 1155, column: 2)
!2874 = !DILocation(line: 1157, scope: !2872)
!2875 = !DILocalVariable(name: "current", scope: !2872, file: !2, line: 1158, type: !67, align: 8)
!2876 = !DILocation(line: 1158, scope: !2872)
!2877 = !DILocation(line: 1159, scope: !2872)
!2878 = !DILocation(line: 1160, scope: !2872)
!2879 = !DILocation(line: 1162, scope: !2880)
!2880 = distinct !DILexicalBlock(scope: !2872, file: !2, line: 1161, column: 3)
!2881 = !DILocation(line: 1163, scope: !2880)
!2882 = !DILocation(line: 1164, scope: !2880)
!2883 = !DILocalVariable(name: "remaining", scope: !2872, file: !2, line: 1166, type: !60, align: 8)
!2884 = !DILocation(line: 1166, scope: !2872)
!2885 = !DILocalVariable(name: "next", scope: !2872, file: !2, line: 1167, type: !68, align: 8)
!2886 = !DILocation(line: 1167, scope: !2872)
!2887 = !DILocation(line: 552, scope: !2872)
!2888 = !DILocation(line: 1168, scope: !2872)
!2889 = !DILocation(line: 1170, scope: !2890)
!2890 = distinct !DILexicalBlock(scope: !2872, file: !2, line: 1169, column: 3)
!2891 = !DILocation(line: 1171, scope: !2890)
!2892 = !DILocation(line: 1172, scope: !2890)
!2893 = !DILocation(line: 1174, scope: !2872)
!2894 = !DILocation(line: 1175, scope: !2872)
!2895 = distinct !DISubprogram(name: "tformat_zstr", linkageName: "std.core.string.tformat_zstr", scope: !2, file: !2, line: 92, type: !2896, scopeLine: 92, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !87)
!2896 = !DISubroutineType(types: !2897)
!2897 = !{!518, !60, !2898}
!2898 = !DICompositeType(tag: DW_TAG_structure_type, name: "any[]", size: 128, align: 64, elements: !2899, identifier: "any[]")
!2899 = !{!2900, !2906}
!2900 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !2898, baseType: !2901, size: 64, align: 64)
!2901 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "any*", baseType: !2902, size: 64, align: 64, dwarfAddressSpace: 0)
!2902 = !DICompositeType(tag: DW_TAG_structure_type, name: "any", size: 128, align: 64, elements: !2903, identifier: "any")
!2903 = !{!2904, !2905}
!2904 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !2902, baseType: !84, size: 64, align: 64)
!2905 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !2902, baseType: !86, size: 64, align: 64, offset: 64)
!2906 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !2898, baseType: !67, size: 64, align: 64, offset: 64)
!2907 = !DILocalVariable(name: "fmt", arg: 1, scope: !2895, file: !2, line: 92, type: !60)
!2908 = !DILocation(line: 92, scope: !2895)
!2909 = !DILocalVariable(name: "args", arg: 2, scope: !2895, file: !2, line: 92, type: !2898)
!2910 = !DILocalVariable(name: "str", scope: !2895, file: !2, line: 94, type: !942, align: 8)
!2911 = !DILocation(line: 94, scope: !2895)
!2912 = !DILocation(line: 95, scope: !2895)
!2913 = !DILocation(line: 96, scope: !2895)
!2914 = distinct !DISubprogram(name: "format", linkageName: "std.core.string.format", scope: !2, file: !2, line: 105, type: !2915, scopeLine: 105, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !87)
!2915 = !DISubroutineType(types: !2916)
!2916 = !{!60, !81, !60, !2898}
!2917 = !DILocalVariable(name: "allocator", arg: 1, scope: !2914, file: !2, line: 105, type: !81)
!2918 = !DILocation(line: 105, scope: !2914)
!2919 = !DILocalVariable(name: "fmt", arg: 2, scope: !2914, file: !2, line: 105, type: !60)
!2920 = !DILocalVariable(name: "args", arg: 3, scope: !2914, file: !2, line: 105, type: !2898)
!2921 = !DILocalVariable(name: "state", scope: !2922, file: !2, line: 641, type: !96, align: 8)
!2922 = distinct !DISubprogram(name: "@pool", linkageName: "@pool", scope: !95, file: !95, line: 639, scopeLine: 639, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54, retainedNodes: !87)
!2923 = !DILocation(line: 641, scope: !2922, inlinedAt: !2918)
!2924 = !DILocalVariable(name: "str", scope: !2925, file: !2, line: 107, type: !942, align: 8)
!2925 = distinct !DILexicalBlock(scope: !2914, file: !2, line: 106, column: 1)
!2926 = !DILocation(line: 107, scope: !2925)
!2927 = !DILocation(line: 108, scope: !2925)
!2928 = !DILocation(line: 109, scope: !2925)
!2929 = !DILocation(line: 644, scope: !2930, inlinedAt: !2918)
!2930 = distinct !DILexicalBlock(scope: !2922, file: !95, line: 643, column: 2)
!2931 = distinct !DISubprogram(name: "bformat", linkageName: "std.core.string.bformat", scope: !2, file: !2, line: 118, type: !2932, scopeLine: 118, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !87)
!2932 = !DISubroutineType(types: !2933)
!2933 = !{!60, !61, !60, !2898}
!2934 = !DILocalVariable(name: "buffer", arg: 1, scope: !2931, file: !2, line: 118, type: !61)
!2935 = !DILocation(line: 118, scope: !2931)
!2936 = !DILocalVariable(name: "fmt", arg: 2, scope: !2931, file: !2, line: 118, type: !60)
!2937 = !DILocalVariable(name: "args", arg: 3, scope: !2931, file: !2, line: 118, type: !2898)
!2938 = !DILocalVariable(name: "str", scope: !2931, file: !2, line: 120, type: !942, align: 8)
!2939 = !DILocation(line: 120, scope: !2931)
!2940 = !DILocation(line: 46, scope: !2941, inlinedAt: !2939)
!2941 = distinct !DISubprogram(name: "wrap", linkageName: "wrap", scope: !2942, file: !2942, line: 44, scopeLine: 44, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!2942 = !DIFile(filename: "arena_allocator.c3", directory: "C:/Compilers/C3/lib/std/core/allocators")
!2943 = !DILocation(line: 121, scope: !2931)
!2944 = !DILocation(line: 122, scope: !2931)
!2945 = distinct !DISubprogram(name: "tformat", linkageName: "std.core.string.tformat", scope: !2, file: !2, line: 130, type: !2946, scopeLine: 130, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !87)
!2946 = !DISubroutineType(types: !2947)
!2947 = !{!60, !60, !2898}
!2948 = !DILocalVariable(name: "fmt", arg: 1, scope: !2945, file: !2, line: 130, type: !60)
!2949 = !DILocation(line: 130, scope: !2945)
!2950 = !DILocalVariable(name: "args", arg: 2, scope: !2945, file: !2, line: 130, type: !2898)
!2951 = !DILocalVariable(name: "str", scope: !2945, file: !2, line: 132, type: !942, align: 8)
!2952 = !DILocation(line: 132, scope: !2945)
!2953 = !DILocation(line: 133, scope: !2945)
!2954 = !DILocation(line: 134, scope: !2945)
!2955 = distinct !DISubprogram(name: "join", linkageName: "std.core.string.join", scope: !2, file: !2, line: 151, type: !2956, scopeLine: 151, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !87)
!2956 = !DISubroutineType(types: !2957)
!2957 = !{!60, !81, !127, !60}
!2958 = !DILocalVariable(name: "allocator", arg: 1, scope: !2955, file: !2, line: 151, type: !81)
!2959 = !DILocation(line: 151, scope: !2955)
!2960 = !DILocalVariable(name: "s", arg: 2, scope: !2955, file: !2, line: 151, type: !127)
!2961 = !DILocalVariable(name: "joiner", arg: 3, scope: !2955, file: !2, line: 151, type: !60)
!2962 = !DILocation(line: 153, scope: !2955)
!2963 = !DILocation(line: 270, scope: !2964, inlinedAt: !2965)
!2964 = distinct !DISubprogram(name: "new_array_try", linkageName: "new_array_try", scope: !239, file: !239, line: 268, scopeLine: 268, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!2965 = !DILocation(line: 262, scope: !2966, inlinedAt: !2967)
!2966 = distinct !DISubprogram(name: "new_array", linkageName: "new_array", scope: !239, file: !239, line: 260, scopeLine: 260, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!2967 = !DILocation(line: 155, scope: !2968)
!2968 = distinct !DILexicalBlock(scope: !2955, file: !2, line: 154, column: 2)
!2969 = !DILocation(line: 97, scope: !2970, inlinedAt: !2963)
!2970 = distinct !DISubprogram(name: "calloc_try", linkageName: "calloc_try", scope: !239, file: !239, line: 95, scopeLine: 95, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!2971 = !DILocation(line: 98, scope: !2970, inlinedAt: !2963)
!2972 = !DILocation(line: 38, scope: !2970, inlinedAt: !2963)
!2973 = !DILocation(line: 975, scope: !2974, inlinedAt: !2972)
!2974 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !248, file: !248, line: 973, scopeLine: 973, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!2975 = !DILocalVariable(name: "total_size", scope: !2955, file: !2, line: 158, type: !67, align: 8)
!2976 = !DILocation(line: 158, scope: !2955)
!2977 = !DILocation(line: 159, scope: !2978)
!2978 = distinct !DILexicalBlock(scope: !2955, file: !2, line: 159, column: 2)
!2979 = !DILocalVariable(name: ".temp", scope: !2978, file: !2, line: 159, type: !67, align: 8)
!2980 = !DILocalVariable(name: "str", scope: !2981, file: !2, line: 159, type: !130, align: 8)
!2981 = distinct !DILexicalBlock(scope: !2978, file: !2, line: 160, column: 2)
!2982 = !DILocation(line: 159, scope: !2981)
!2983 = !DILocation(line: 161, scope: !2984)
!2984 = distinct !DILexicalBlock(scope: !2981, file: !2, line: 160, column: 2)
!2985 = !DILocalVariable(name: "state", scope: !2986, file: !2, line: 641, type: !96, align: 8)
!2986 = distinct !DISubprogram(name: "@pool", linkageName: "@pool", scope: !95, file: !95, line: 639, scopeLine: 639, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54, retainedNodes: !87)
!2987 = !DILocation(line: 641, scope: !2986, inlinedAt: !2988)
!2988 = !DILocation(line: 163, scope: !2955)
!2989 = !DILocalVariable(name: "res", scope: !2990, file: !2, line: 165, type: !942, align: 8)
!2990 = distinct !DILexicalBlock(scope: !2955, file: !2, line: 164, column: 2)
!2991 = !DILocation(line: 165, scope: !2990)
!2992 = !DILocation(line: 166, scope: !2990)
!2993 = !DILocation(line: 395, scope: !2994, inlinedAt: !2992)
!2994 = distinct !DILexicalBlock(scope: !2996, file: !2995, line: 396, column: 1)
!2995 = !DIFile(filename: "dstring.c3", directory: "C:/Compilers/C3/lib/std/core")
!2996 = distinct !DISubprogram(name: "append", linkageName: "append", scope: !2995, file: !2995, line: 395, scopeLine: 395, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!2997 = !DILocation(line: 405, scope: !2996, inlinedAt: !2992)
!2998 = !DILocation(line: 167, scope: !2999)
!2999 = distinct !DILexicalBlock(scope: !2990, file: !2, line: 167, column: 3)
!3000 = !DILocalVariable(name: ".temp", scope: !2999, file: !2, line: 167, type: !67, align: 8)
!3001 = !DILocalVariable(name: "str", scope: !3002, file: !2, line: 167, type: !130, align: 8)
!3002 = distinct !DILexicalBlock(scope: !2999, file: !2, line: 168, column: 3)
!3003 = !DILocation(line: 167, scope: !3002)
!3004 = !DILocation(line: 395, scope: !3005, inlinedAt: !3007)
!3005 = distinct !DILexicalBlock(scope: !3006, file: !2995, line: 396, column: 1)
!3006 = distinct !DISubprogram(name: "append", linkageName: "append", scope: !2995, file: !2995, line: 395, scopeLine: 395, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!3007 = !DILocation(line: 169, scope: !3008)
!3008 = distinct !DILexicalBlock(scope: !3002, file: !2, line: 168, column: 3)
!3009 = !DILocation(line: 405, scope: !3006, inlinedAt: !3007)
!3010 = !DILocation(line: 170, scope: !3008)
!3011 = !DILocation(line: 395, scope: !3012, inlinedAt: !3010)
!3012 = distinct !DILexicalBlock(scope: !3013, file: !2995, line: 396, column: 1)
!3013 = distinct !DISubprogram(name: "append", linkageName: "append", scope: !2995, file: !2995, line: 395, scopeLine: 395, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!3014 = !DILocation(line: 405, scope: !3013, inlinedAt: !3010)
!3015 = !DILocation(line: 172, scope: !2990)
!3016 = !DILocation(line: 644, scope: !3017, inlinedAt: !2988)
!3017 = distinct !DILexicalBlock(scope: !2986, file: !95, line: 643, column: 2)
!3018 = distinct !DISubprogram(name: "from_utf32", linkageName: "std.core.string.from_utf32", scope: !2, file: !2, line: 880, type: !3019, scopeLine: 880, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !87)
!3019 = !DISubroutineType(types: !3020)
!3020 = !{!307, !130, !81, !3021}
!3021 = !DICompositeType(tag: DW_TAG_structure_type, name: "uint[]", size: 128, align: 64, elements: !3022, identifier: "uint[]")
!3022 = !{!3023, !3024}
!3023 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !3021, baseType: !1684, size: 64, align: 64)
!3024 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !3021, baseType: !67, size: 64, align: 64, offset: 64)
!3025 = !DILocalVariable(name: "allocator", arg: 1, scope: !3018, file: !2, line: 880, type: !81)
!3026 = !DILocation(line: 880, scope: !3018)
!3027 = !DILocalVariable(name: "utf32", arg: 2, scope: !3018, file: !2, line: 880, type: !764)
!3028 = !DILocalVariable(name: "len", scope: !3018, file: !2, line: 882, type: !67, align: 8)
!3029 = !DILocation(line: 882, scope: !3018)
!3030 = !DILocalVariable(name: "data", scope: !3018, file: !2, line: 883, type: !64, align: 8)
!3031 = !DILocation(line: 883, scope: !3018)
!3032 = !DILocation(line: 80, scope: !3033, inlinedAt: !3031)
!3033 = distinct !DISubprogram(name: "malloc_try", linkageName: "malloc_try", scope: !239, file: !239, line: 78, scopeLine: 78, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!3034 = !DILocation(line: 86, scope: !3033, inlinedAt: !3031)
!3035 = !DILocation(line: 38, scope: !3033, inlinedAt: !3031)
!3036 = !DILocation(line: 975, scope: !3037, inlinedAt: !3035)
!3037 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !248, file: !248, line: 973, scopeLine: 973, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!3038 = !DILocation(line: 885, scope: !3018)
!3039 = !DILocation(line: 886, scope: !3018)
!3040 = !DILocation(line: 887, scope: !3018)
!3041 = distinct !DISubprogram(name: "from_utf16", linkageName: "std.core.string.from_utf16", scope: !2, file: !2, line: 890, type: !3042, scopeLine: 890, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !87)
!3042 = !DISubroutineType(types: !3043)
!3043 = !{!307, !130, !81, !3044}
!3044 = !DICompositeType(tag: DW_TAG_structure_type, name: "ushort[]", size: 128, align: 64, elements: !3045, identifier: "ushort[]")
!3045 = !{!3046, !3047}
!3046 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !3044, baseType: !571, size: 64, align: 64)
!3047 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !3044, baseType: !67, size: 64, align: 64, offset: 64)
!3048 = !DILocalVariable(name: "allocator", arg: 1, scope: !3041, file: !2, line: 890, type: !81)
!3049 = !DILocation(line: 890, scope: !3041)
!3050 = !DILocalVariable(name: "utf16", arg: 2, scope: !3041, file: !2, line: 890, type: !720)
!3051 = !DILocalVariable(name: "len", scope: !3041, file: !2, line: 892, type: !67, align: 8)
!3052 = !DILocation(line: 892, scope: !3041)
!3053 = !DILocalVariable(name: "data", scope: !3041, file: !2, line: 893, type: !64, align: 8)
!3054 = !DILocation(line: 893, scope: !3041)
!3055 = !DILocation(line: 80, scope: !3056, inlinedAt: !3054)
!3056 = distinct !DISubprogram(name: "malloc_try", linkageName: "malloc_try", scope: !239, file: !239, line: 78, scopeLine: 78, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!3057 = !DILocation(line: 86, scope: !3056, inlinedAt: !3054)
!3058 = !DILocation(line: 38, scope: !3056, inlinedAt: !3054)
!3059 = !DILocation(line: 975, scope: !3060, inlinedAt: !3058)
!3060 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !248, file: !248, line: 973, scopeLine: 973, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!3061 = !DILocation(line: 895, scope: !3041)
!3062 = !DILocation(line: 894, scope: !3063)
!3063 = distinct !DILexicalBlock(scope: !3041, file: !2, line: 894, column: 14)
!3064 = !DILocation(line: 119, scope: !3065, inlinedAt: !3062)
!3065 = distinct !DISubprogram(name: "free", linkageName: "free", scope: !239, file: !239, line: 117, scopeLine: 117, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!3066 = !DILocation(line: 123, scope: !3065, inlinedAt: !3062)
!3067 = !DILocation(line: 896, scope: !3041)
!3068 = !DILocation(line: 897, scope: !3041)
!3069 = distinct !DISubprogram(name: "from_wstring", linkageName: "std.core.string.from_wstring", scope: !2, file: !2, line: 900, type: !3070, scopeLine: 900, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !87)
!3070 = !DISubroutineType(types: !3071)
!3071 = !{!307, !130, !81, !570}
!3072 = !DILocalVariable(name: "allocator", arg: 1, scope: !3069, file: !2, line: 900, type: !81)
!3073 = !DILocation(line: 900, scope: !3069)
!3074 = !DILocalVariable(name: "wstring", arg: 2, scope: !3069, file: !2, line: 900, type: !570)
!3075 = !DILocalVariable(name: "utf16_len", scope: !3069, file: !2, line: 902, type: !67, align: 8)
!3076 = !DILocation(line: 902, scope: !3069)
!3077 = !DILocation(line: 903, scope: !3069)
!3078 = !DILocation(line: 903, scope: !3079)
!3079 = distinct !DILexicalBlock(scope: !3069, file: !2, line: 903, column: 2)
!3080 = !DILocalVariable(name: "utf16", scope: !3069, file: !2, line: 904, type: !720, align: 8)
!3081 = !DILocation(line: 904, scope: !3069)
!3082 = !DILocation(line: 905, scope: !3069)
!3083 = distinct !DISubprogram(name: "tfrom_wstring", linkageName: "std.core.string.tfrom_wstring", scope: !2, file: !2, line: 908, type: !3084, scopeLine: 908, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !87)
!3084 = !DISubroutineType(types: !3085)
!3085 = !{!307, !130, !570}
!3086 = !DILocalVariable(name: "wstring", arg: 1, scope: !3083, file: !2, line: 908, type: !570)
!3087 = !DILocation(line: 908, scope: !3083)
!3088 = distinct !DISubprogram(name: "tfrom_utf16", linkageName: "std.core.string.tfrom_utf16", scope: !2, file: !2, line: 909, type: !3089, scopeLine: 909, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !87)
!3089 = !DISubroutineType(types: !3090)
!3090 = !{!307, !130, !3044}
!3091 = !DILocalVariable(name: "utf16", arg: 1, scope: !3088, file: !2, line: 909, type: !720)
!3092 = !DILocation(line: 909, scope: !3088)
!3093 = distinct !DISubprogram(name: "escape", linkageName: "std.core.String.escape", scope: !3094, file: !3094, line: 23, type: !3095, scopeLine: 23, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !87)
!3094 = !DIFile(filename: "string_escape.c3", directory: "C:/Compilers/C3/lib/std/core")
!3095 = !DISubroutineType(types: !3096)
!3096 = !{!60, !60, !81, !115}
!3097 = !DILocalVariable(name: "s", arg: 1, scope: !3093, file: !3094, line: 23, type: !60)
!3098 = !DILocation(line: 23, scope: !3093)
!3099 = !DILocalVariable(name: "allocator", arg: 2, scope: !3093, file: !3094, line: 23, type: !81)
!3100 = !DILocalVariable(name: "strip_quotes", arg: 3, scope: !3093, file: !3094, line: 23, type: !115)
!3101 = !DILocalVariable(name: "initial_capacity", scope: !3093, file: !3094, line: 26, type: !67, align: 8)
!3102 = !DILocation(line: 26, scope: !3093)
!3103 = !DILocalVariable(name: "result", scope: !3093, file: !3094, line: 27, type: !942, align: 8)
!3104 = !DILocation(line: 27, scope: !3093)
!3105 = !DILocation(line: 29, scope: !3093)
!3106 = !DILocation(line: 31, scope: !3107)
!3107 = distinct !DILexicalBlock(scope: !3093, file: !3094, line: 31, column: 5)
!3108 = !DILocalVariable(name: ".temp", scope: !3107, file: !3094, line: 31, type: !67, align: 8)
!3109 = !DILocalVariable(name: "c", scope: !3110, file: !3094, line: 31, type: !65, align: 1)
!3110 = distinct !DILexicalBlock(scope: !3107, file: !3094, line: 32, column: 5)
!3111 = !DILocation(line: 31, scope: !3110)
!3112 = !DILocation(line: 395, scope: !3113, inlinedAt: !3115)
!3113 = distinct !DILexicalBlock(scope: !3114, file: !2995, line: 396, column: 1)
!3114 = distinct !DISubprogram(name: "append", linkageName: "append", scope: !2995, file: !2995, line: 395, scopeLine: 395, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!3115 = !DILocation(line: 35, scope: !3116)
!3116 = distinct !DILexicalBlock(scope: !3117, file: !3094, line: 35, column: 24)
!3117 = distinct !DILexicalBlock(scope: !3118, file: !3094, line: 33, column: 9)
!3118 = distinct !DILexicalBlock(scope: !3110, file: !3094, line: 32, column: 5)
!3119 = !DILocation(line: 405, scope: !3114, inlinedAt: !3115)
!3120 = !DILocation(line: 395, scope: !3121, inlinedAt: !3123)
!3121 = distinct !DILexicalBlock(scope: !3122, file: !2995, line: 396, column: 1)
!3122 = distinct !DISubprogram(name: "append", linkageName: "append", scope: !2995, file: !2995, line: 395, scopeLine: 395, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!3123 = !DILocation(line: 36, scope: !3124)
!3124 = distinct !DILexicalBlock(scope: !3117, file: !3094, line: 36, column: 24)
!3125 = !DILocation(line: 405, scope: !3122, inlinedAt: !3123)
!3126 = !DILocation(line: 395, scope: !3127, inlinedAt: !3129)
!3127 = distinct !DILexicalBlock(scope: !3128, file: !2995, line: 396, column: 1)
!3128 = distinct !DISubprogram(name: "append", linkageName: "append", scope: !2995, file: !2995, line: 395, scopeLine: 395, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!3129 = !DILocation(line: 37, scope: !3130)
!3130 = distinct !DILexicalBlock(scope: !3117, file: !3094, line: 37, column: 24)
!3131 = !DILocation(line: 405, scope: !3128, inlinedAt: !3129)
!3132 = !DILocation(line: 395, scope: !3133, inlinedAt: !3135)
!3133 = distinct !DILexicalBlock(scope: !3134, file: !2995, line: 396, column: 1)
!3134 = distinct !DISubprogram(name: "append", linkageName: "append", scope: !2995, file: !2995, line: 395, scopeLine: 395, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!3135 = !DILocation(line: 38, scope: !3136)
!3136 = distinct !DILexicalBlock(scope: !3117, file: !3094, line: 38, column: 24)
!3137 = !DILocation(line: 405, scope: !3134, inlinedAt: !3135)
!3138 = !DILocation(line: 395, scope: !3139, inlinedAt: !3141)
!3139 = distinct !DILexicalBlock(scope: !3140, file: !2995, line: 396, column: 1)
!3140 = distinct !DISubprogram(name: "append", linkageName: "append", scope: !2995, file: !2995, line: 395, scopeLine: 395, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!3141 = !DILocation(line: 39, scope: !3142)
!3142 = distinct !DILexicalBlock(scope: !3117, file: !3094, line: 39, column: 24)
!3143 = !DILocation(line: 405, scope: !3140, inlinedAt: !3141)
!3144 = !DILocation(line: 395, scope: !3145, inlinedAt: !3147)
!3145 = distinct !DILexicalBlock(scope: !3146, file: !2995, line: 396, column: 1)
!3146 = distinct !DISubprogram(name: "append", linkageName: "append", scope: !2995, file: !2995, line: 395, scopeLine: 395, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!3147 = !DILocation(line: 40, scope: !3148)
!3148 = distinct !DILexicalBlock(scope: !3117, file: !3094, line: 40, column: 24)
!3149 = !DILocation(line: 405, scope: !3146, inlinedAt: !3147)
!3150 = !DILocation(line: 395, scope: !3151, inlinedAt: !3153)
!3151 = distinct !DILexicalBlock(scope: !3152, file: !2995, line: 396, column: 1)
!3152 = distinct !DISubprogram(name: "append", linkageName: "append", scope: !2995, file: !2995, line: 395, scopeLine: 395, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!3153 = !DILocation(line: 41, scope: !3154)
!3154 = distinct !DILexicalBlock(scope: !3117, file: !3094, line: 41, column: 24)
!3155 = !DILocation(line: 405, scope: !3152, inlinedAt: !3153)
!3156 = !DILocation(line: 395, scope: !3157, inlinedAt: !3159)
!3157 = distinct !DILexicalBlock(scope: !3158, file: !2995, line: 396, column: 1)
!3158 = distinct !DISubprogram(name: "append", linkageName: "append", scope: !2995, file: !2995, line: 395, scopeLine: 395, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!3159 = !DILocation(line: 42, scope: !3160)
!3160 = distinct !DILexicalBlock(scope: !3117, file: !3094, line: 42, column: 24)
!3161 = !DILocation(line: 405, scope: !3158, inlinedAt: !3159)
!3162 = !DILocation(line: 395, scope: !3163, inlinedAt: !3165)
!3163 = distinct !DILexicalBlock(scope: !3164, file: !2995, line: 396, column: 1)
!3164 = distinct !DISubprogram(name: "append", linkageName: "append", scope: !2995, file: !2995, line: 395, scopeLine: 395, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!3165 = !DILocation(line: 43, scope: !3166)
!3166 = distinct !DILexicalBlock(scope: !3117, file: !3094, line: 43, column: 24)
!3167 = !DILocation(line: 405, scope: !3164, inlinedAt: !3165)
!3168 = !DILocation(line: 45, scope: !3169)
!3169 = distinct !DILexicalBlock(scope: !3117, file: !3094, line: 45, column: 17)
!3170 = !DILocation(line: 48, scope: !3171)
!3171 = distinct !DILexicalBlock(scope: !3169, file: !3094, line: 46, column: 17)
!3172 = !DILocation(line: 53, scope: !3173)
!3173 = distinct !DILexicalBlock(scope: !3169, file: !3094, line: 51, column: 17)
!3174 = !DILocation(line: 58, scope: !3093)
!3175 = !DILocation(line: 59, scope: !3093)
!3176 = distinct !DISubprogram(name: "tescape", linkageName: "std.core.String.tescape", scope: !3094, file: !3094, line: 69, type: !3177, scopeLine: 69, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !87)
!3177 = !DISubroutineType(types: !3178)
!3178 = !{!60, !60, !115}
!3179 = !DILocalVariable(name: "s", arg: 1, scope: !3176, file: !3094, line: 69, type: !60)
!3180 = !DILocation(line: 69, scope: !3176)
!3181 = !DILocalVariable(name: "strip_quotes", arg: 2, scope: !3176, file: !3094, line: 69, type: !115)
!3182 = distinct !DISubprogram(name: "unescape", linkageName: "std.core.String.unescape", scope: !3094, file: !3094, line: 117, type: !3183, scopeLine: 117, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !87)
!3183 = !DISubroutineType(types: !3184)
!3184 = !{!307, !130, !60, !81, !115}
!3185 = !DILocalVariable(name: "s", arg: 1, scope: !3182, file: !3094, line: 117, type: !60)
!3186 = !DILocation(line: 117, scope: !3182)
!3187 = !DILocalVariable(name: "allocator", arg: 2, scope: !3182, file: !3094, line: 117, type: !81)
!3188 = !DILocalVariable(name: "allow_unquoted", arg: 3, scope: !3182, file: !3094, line: 117, type: !115)
!3189 = !DILocation(line: 119, scope: !3182)
!3190 = !DILocation(line: 122, scope: !3191)
!3191 = distinct !DILexicalBlock(scope: !3182, file: !3094, line: 120, column: 2)
!3192 = !DILocation(line: 124, scope: !3182)
!3193 = !DILocation(line: 127, scope: !3182)
!3194 = !DILocation(line: 129, scope: !3195)
!3195 = distinct !DILexicalBlock(scope: !3182, file: !3094, line: 128, column: 5)
!3196 = !DILocalVariable(name: "result", scope: !3182, file: !3094, line: 132, type: !942, align: 8)
!3197 = !DILocation(line: 132, scope: !3182)
!3198 = !DILocalVariable(name: "len", scope: !3182, file: !3094, line: 134, type: !67, align: 8)
!3199 = !DILocation(line: 134, scope: !3182)
!3200 = !DILocalVariable(name: "i", scope: !3201, file: !3094, line: 135, type: !67, align: 8)
!3201 = distinct !DILexicalBlock(scope: !3182, file: !3094, line: 135, column: 2)
!3202 = !DILocation(line: 135, scope: !3201)
!3203 = !DILocalVariable(name: "c", scope: !3204, file: !3094, line: 137, type: !65, align: 1)
!3204 = distinct !DILexicalBlock(scope: !3201, file: !3094, line: 136, column: 2)
!3205 = !DILocation(line: 137, scope: !3204)
!3206 = !DILocation(line: 138, scope: !3204)
!3207 = !DILocation(line: 140, scope: !3208)
!3208 = distinct !DILexicalBlock(scope: !3204, file: !3094, line: 139, column: 9)
!3209 = !DILocation(line: 141, scope: !3208)
!3210 = !DILocation(line: 145, scope: !3204)
!3211 = !DILocalVariable(name: "escape_char", scope: !3204, file: !3094, line: 147, type: !65, align: 1)
!3212 = !DILocation(line: 147, scope: !3204)
!3213 = !DILocation(line: 150, scope: !3214)
!3214 = distinct !DILexicalBlock(scope: !3215, file: !3094, line: 150, column: 24)
!3215 = distinct !DILexicalBlock(scope: !3204, file: !3094, line: 148, column: 9)
!3216 = !DILocation(line: 151, scope: !3217)
!3217 = distinct !DILexicalBlock(scope: !3215, file: !3094, line: 151, column: 24)
!3218 = !DILocation(line: 152, scope: !3219)
!3219 = distinct !DILexicalBlock(scope: !3215, file: !3094, line: 152, column: 24)
!3220 = !DILocation(line: 153, scope: !3221)
!3221 = distinct !DILexicalBlock(scope: !3215, file: !3094, line: 153, column: 24)
!3222 = !DILocation(line: 154, scope: !3223)
!3223 = distinct !DILexicalBlock(scope: !3215, file: !3094, line: 154, column: 24)
!3224 = !DILocation(line: 155, scope: !3225)
!3225 = distinct !DILexicalBlock(scope: !3215, file: !3094, line: 155, column: 24)
!3226 = !DILocation(line: 156, scope: !3227)
!3227 = distinct !DILexicalBlock(scope: !3215, file: !3094, line: 156, column: 24)
!3228 = !DILocation(line: 157, scope: !3229)
!3229 = distinct !DILexicalBlock(scope: !3215, file: !3094, line: 157, column: 24)
!3230 = !DILocation(line: 158, scope: !3231)
!3231 = distinct !DILexicalBlock(scope: !3215, file: !3094, line: 158, column: 24)
!3232 = !DILocation(line: 159, scope: !3233)
!3233 = distinct !DILexicalBlock(scope: !3215, file: !3094, line: 159, column: 24)
!3234 = !DILocation(line: 162, scope: !3235)
!3235 = distinct !DILexicalBlock(scope: !3215, file: !3094, line: 162, column: 17)
!3236 = !DILocalVariable(name: "h1", scope: !3235, file: !3094, line: 163, type: !65, align: 1)
!3237 = !DILocation(line: 163, scope: !3235)
!3238 = !DILocalVariable(name: "h2", scope: !3235, file: !3094, line: 164, type: !65, align: 1)
!3239 = !DILocation(line: 164, scope: !3235)
!3240 = !DILocation(line: 12, scope: !3241, inlinedAt: !3242)
!3241 = distinct !DISubprogram(name: "@is_xdigit", linkageName: "@is_xdigit", scope: !806, file: !806, line: 12, scopeLine: 12, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!3242 = !DILocation(line: 47, scope: !3243, inlinedAt: !3244)
!3243 = distinct !DISubprogram(name: "is_xdigit", linkageName: "is_xdigit", scope: !806, file: !806, line: 47, scopeLine: 47, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!3244 = !DILocation(line: 165, scope: !3235)
!3245 = !DILocation(line: 12, scope: !3246, inlinedAt: !3247)
!3246 = distinct !DISubprogram(name: "@is_xdigit", linkageName: "@is_xdigit", scope: !806, file: !806, line: 12, scopeLine: 12, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!3247 = !DILocation(line: 47, scope: !3248, inlinedAt: !3244)
!3248 = distinct !DISubprogram(name: "is_xdigit", linkageName: "is_xdigit", scope: !806, file: !806, line: 47, scopeLine: 47, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!3249 = !DILocalVariable(name: "val", scope: !3235, file: !3094, line: 166, type: !3, align: 4)
!3250 = !DILocation(line: 166, scope: !3235)
!3251 = !DILocation(line: 167, scope: !3235)
!3252 = !DILocation(line: 168, scope: !3235)
!3253 = !DILocation(line: 169, scope: !3235)
!3254 = !DILocation(line: 172, scope: !3255)
!3255 = distinct !DILexicalBlock(scope: !3215, file: !3094, line: 172, column: 17)
!3256 = !DILocalVariable(name: "val", scope: !3255, file: !3094, line: 173, type: !3, align: 4)
!3257 = !DILocation(line: 173, scope: !3255)
!3258 = !DILocalVariable(name: "j", scope: !3259, file: !3094, line: 174, type: !18, align: 4)
!3259 = distinct !DILexicalBlock(scope: !3255, file: !3094, line: 174, column: 17)
!3260 = !DILocation(line: 174, scope: !3259)
!3261 = !DILocalVariable(name: "hex_char", scope: !3262, file: !3094, line: 176, type: !65, align: 1)
!3262 = distinct !DILexicalBlock(scope: !3259, file: !3094, line: 175, column: 17)
!3263 = !DILocation(line: 176, scope: !3262)
!3264 = !DILocation(line: 12, scope: !3265, inlinedAt: !3266)
!3265 = distinct !DISubprogram(name: "@is_xdigit", linkageName: "@is_xdigit", scope: !806, file: !806, line: 12, scopeLine: 12, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!3266 = !DILocation(line: 47, scope: !3267, inlinedAt: !3268)
!3267 = distinct !DISubprogram(name: "is_xdigit", linkageName: "is_xdigit", scope: !806, file: !806, line: 47, scopeLine: 47, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!3268 = !DILocation(line: 177, scope: !3262)
!3269 = !DILocation(line: 178, scope: !3262)
!3270 = !DILocation(line: 180, scope: !3255)
!3271 = !DILocation(line: 183, scope: !3272)
!3272 = distinct !DILexicalBlock(scope: !3215, file: !3094, line: 183, column: 17)
!3273 = !DILocalVariable(name: "val", scope: !3272, file: !3094, line: 184, type: !3, align: 4)
!3274 = !DILocation(line: 184, scope: !3272)
!3275 = !DILocalVariable(name: "j", scope: !3276, file: !3094, line: 185, type: !18, align: 4)
!3276 = distinct !DILexicalBlock(scope: !3272, file: !3094, line: 185, column: 17)
!3277 = !DILocation(line: 185, scope: !3276)
!3278 = !DILocalVariable(name: "hex_char", scope: !3279, file: !3094, line: 187, type: !65, align: 1)
!3279 = distinct !DILexicalBlock(scope: !3276, file: !3094, line: 186, column: 17)
!3280 = !DILocation(line: 187, scope: !3279)
!3281 = !DILocation(line: 12, scope: !3282, inlinedAt: !3283)
!3282 = distinct !DISubprogram(name: "@is_xdigit", linkageName: "@is_xdigit", scope: !806, file: !806, line: 12, scopeLine: 12, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!3283 = !DILocation(line: 47, scope: !3284, inlinedAt: !3285)
!3284 = distinct !DISubprogram(name: "is_xdigit", linkageName: "is_xdigit", scope: !806, file: !806, line: 47, scopeLine: 47, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!3285 = !DILocation(line: 188, scope: !3279)
!3286 = !DILocation(line: 189, scope: !3279)
!3287 = !DILocation(line: 191, scope: !3272)
!3288 = !DILocation(line: 193, scope: !3289)
!3289 = distinct !DILexicalBlock(scope: !3215, file: !3094, line: 193, column: 17)
!3290 = !DILocation(line: 197, scope: !3182)
!3291 = distinct !DISubprogram(name: "tunescape", linkageName: "std.core.String.tunescape", scope: !3094, file: !3094, line: 208, type: !3292, scopeLine: 208, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !87)
!3292 = !DISubroutineType(types: !3293)
!3293 = !{!307, !130, !60, !115}
!3294 = !DILocalVariable(name: "s", arg: 1, scope: !3291, file: !3094, line: 208, type: !60)
!3295 = !DILocation(line: 208, scope: !3291)
!3296 = !DILocalVariable(name: "allow_unquoted", arg: 2, scope: !3291, file: !3094, line: 208, type: !115)
!3297 = distinct !DISubprogram(name: "escape_len", linkageName: "std.core.string.escape_len", scope: !3094, file: !3094, line: 77, type: !1004, scopeLine: 77, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !87)
!3298 = !DILocalVariable(name: "s", arg: 1, scope: !3297, file: !3094, line: 77, type: !60)
!3299 = !DILocation(line: 77, scope: !3297)
!3300 = !DILocalVariable(name: "len", scope: !3297, file: !3094, line: 79, type: !67, align: 8)
!3301 = !DILocation(line: 79, scope: !3297)
!3302 = !DILocation(line: 80, scope: !3303)
!3303 = distinct !DILexicalBlock(scope: !3297, file: !3094, line: 80, column: 5)
!3304 = !DILocalVariable(name: ".temp", scope: !3303, file: !3094, line: 80, type: !67, align: 8)
!3305 = !DILocalVariable(name: "c", scope: !3306, file: !3094, line: 80, type: !65, align: 1)
!3306 = distinct !DILexicalBlock(scope: !3303, file: !3094, line: 81, column: 5)
!3307 = !DILocation(line: 80, scope: !3306)
!3308 = !DILocation(line: 93, scope: !3309)
!3309 = distinct !DILexicalBlock(scope: !3310, file: !3094, line: 93, column: 17)
!3310 = distinct !DILexicalBlock(scope: !3311, file: !3094, line: 82, column: 9)
!3311 = distinct !DILexicalBlock(scope: !3306, file: !3094, line: 81, column: 5)
!3312 = !DILocation(line: 95, scope: !3313)
!3313 = distinct !DILexicalBlock(scope: !3310, file: !3094, line: 95, column: 17)
!3314 = !DILocation(line: 97, scope: !3315)
!3315 = distinct !DILexicalBlock(scope: !3313, file: !3094, line: 96, column: 17)
!3316 = !DILocation(line: 101, scope: !3317)
!3317 = distinct !DILexicalBlock(scope: !3313, file: !3094, line: 100, column: 17)
!3318 = !DILocation(line: 105, scope: !3297)
!3319 = distinct !DISubprogram(name: "needs_escape", linkageName: "std.core.string.needs_escape", scope: !3094, file: !3094, line: 216, type: !3320, scopeLine: 216, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !87)
!3320 = !DISubroutineType(types: !3321)
!3321 = !{!115, !65}
!3322 = !DILocalVariable(name: "c", arg: 1, scope: !3319, file: !3094, line: 216, type: !65)
!3323 = !DILocation(line: 216, scope: !3319)
!3324 = !DILocation(line: 229, scope: !3325)
!3325 = distinct !DILexicalBlock(scope: !3326, file: !3094, line: 229, column: 13)
!3326 = distinct !DILexicalBlock(scope: !3319, file: !3094, line: 218, column: 5)
!3327 = !DILocation(line: 231, scope: !3328)
!3328 = distinct !DILexicalBlock(scope: !3326, file: !3094, line: 231, column: 13)
