; ModuleID = 'std::io'
source_filename = "std::io"
target datalayout = "e-m:w-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-windows-msvc"

%.introspect = type { i8, i64, ptr, i64, i64, i64, [0 x i64] }
%"char[]" = type { ptr, i64 }
%File = type { ptr }
%any = type { ptr, i64 }
%BitReader = type { %any, i32, i32 }
%"any[]" = type { ptr, i64 }
%BitWriter = type { %any, i32, i32 }
%Formatter = type { ptr, ptr, %.anon }
%.anon = type { i32, i32, i32, i64 }
%"char[][]" = type { ptr, i64 }
%BufferData = type { %"char[]", i64 }
%ReadBuffer = type { %any, %"char[]", i64, i64 }
%WriteBuffer = type { %any, %"char[]", i64 }
%ByteBuffer = type { %any, i64, %"char[]", i64, i64, i8 }
%ByteReader = type { %"char[]", i64 }
%ByteWriter = type { %"char[]", i64, %any }
%LimitReader = type { %any, i64 }
%MultiReader = type { %"any[]", i64, %any }
%MultiWriter = type { %"any[]", %any }
%Scanner = type { %any, %"char[]", i64, i64 }
%TeeReader = type { %any, %any }

$std.io.BitReader.init = comdat any

$std.io.BitReader.clear = comdat any

$std.io.BitReader.read_bits = comdat any

$std.io.BitWriter.init = comdat any

$std.io.BitWriter.flush = comdat any

$std.io.BitWriter.write_bits = comdat any

$std.core.ReflectedParam.to_format = comdat any

$std.io.Formatter.printf = comdat any

$std.io.Formatter.init = comdat any

$std.io.Formatter.print_with_function = comdat any

$std.io.Formatter.vprintf = comdat any

$std.io.Formatter.print = comdat any

$std.io.Formatter.pad = comdat any

$std.io.Formatter.out_chars = comdat any

$std.io.Formatter.etoa = comdat any

$std.io.Formatter.ftoa = comdat any

$std.io.Formatter.gtoa = comdat any

$std.io.Formatter.atoa = comdat any

$std.io.print_hex_chars = comdat any

$std.io.fmt_u = comdat any

$std.io.fprintf = comdat any

$std.io.fprintfn = comdat any

$std.io.printf = comdat any

$std.io.printfn = comdat any

$std.io.eprintf = comdat any

$std.io.eprintfn = comdat any

$std.io.bprintf = comdat any

$std.io.putchar = comdat any

$std.io.stdout = comdat any

$std.io.stderr = comdat any

$std.io.stdin = comdat any

$std.io.ReadBuffer.init = comdat any

$std.io.ReadBuffer.str_view = comdat any

$std.io.ReadBuffer.close = comdat any

$std.io.ReadBuffer.read = comdat any

$std.io.ReadBuffer.read_byte = comdat any

$std.io.WriteBuffer.init = comdat any

$std.io.WriteBuffer.str_view = comdat any

$std.io.WriteBuffer.close = comdat any

$std.io.WriteBuffer.flush = comdat any

$std.io.WriteBuffer.write = comdat any

$std.io.WriteBuffer.write_byte = comdat any

$std.io.ByteBuffer.init = comdat any

$std.io.ByteBuffer.tinit = comdat any

$std.io.ByteBuffer.init_with_buffer = comdat any

$std.io.ByteBuffer.free = comdat any

$std.io.ByteBuffer.write = comdat any

$std.io.ByteBuffer.write_byte = comdat any

$std.io.ByteBuffer.read = comdat any

$std.io.ByteBuffer.read_byte = comdat any

$std.io.ByteBuffer.pushback_byte = comdat any

$std.io.ByteBuffer.seek = comdat any

$std.io.ByteBuffer.available = comdat any

$std.io.ByteBuffer.grow = comdat any

$std.io.ByteReader.len = comdat any

$std.io.ByteReader.init = comdat any

$std.io.ByteReader.read = comdat any

$std.io.ByteReader.read_byte = comdat any

$std.io.ByteReader.pushback_byte = comdat any

$std.io.ByteReader.seek = comdat any

$std.io.ByteReader.write_to = comdat any

$std.io.ByteReader.available = comdat any

$std.io.ByteWriter.init = comdat any

$std.io.ByteWriter.tinit = comdat any

$std.io.ByteWriter.init_with_buffer = comdat any

$std.io.ByteWriter.destroy = comdat any

$std.io.ByteWriter.str_view = comdat any

$std.io.ByteWriter.ensure_capacity = comdat any

$std.io.ByteWriter.write = comdat any

$std.io.ByteWriter.write_byte = comdat any

$std.io.ByteWriter.read_from = comdat any

$std.io.LimitReader.init = comdat any

$std.io.LimitReader.close = comdat any

$std.io.LimitReader.read = comdat any

$std.io.LimitReader.read_byte = comdat any

$std.io.LimitReader.available = comdat any

$std.io.MultiReader.init = comdat any

$std.io.MultiReader.tinit = comdat any

$std.io.MultiReader.free = comdat any

$std.io.MultiReader.read = comdat any

$std.io.MultiReader.read_byte = comdat any

$std.io.MultiWriter.init = comdat any

$std.io.MultiWriter.tinit = comdat any

$std.io.MultiWriter.free = comdat any

$std.io.MultiWriter.write = comdat any

$std.io.MultiWriter.write_byte = comdat any

$std.io.Scanner.init = comdat any

$std.io.Scanner.flush = comdat any

$std.io.Scanner.close = comdat any

$std.io.Scanner.scan = comdat any

$std.io.Scanner.read = comdat any

$std.io.Scanner.read_byte = comdat any

$std.io.TeeReader.init = comdat any

$std.io.TeeReader.read = comdat any

$std.io.TeeReader.read_byte = comdat any

$std.io.available = comdat any

$std.io.copy_to = comdat any

$std.io.wrap_bytes = comdat any

$.dyn_search = comdat any

$"$ct.std.io.BitReader" = comdat any

$"$ct.std.io.BitWriter" = comdat any

$"$ct.std.io.File" = comdat any

$"$ct.std.io.$anon" = comdat any

$"$ct.std.io.Formatter" = comdat any

$"$ct.std.io.PrintFlags" = comdat any

$"$ct.uint" = comdat any

$"$ct.int" = comdat any

$"$ct.std.io.FloatFormatting" = comdat any

$"$ct.std.io.BufferData" = comdat any

$"$ct.std.io.Seek" = comdat any

$"$ct.std.io.ReadBuffer" = comdat any

$"$ct.std.io.WriteBuffer" = comdat any

$"$ct.std.io.ByteBuffer" = comdat any

$"$ct.std.io.ByteReader" = comdat any

$"$ct.std.io.ByteWriter" = comdat any

$"$ct.std.io.LimitReader" = comdat any

$"$ct.std.io.MultiReader" = comdat any

$"$ct.std.io.MultiWriter" = comdat any

$"$ct.std.io.Scanner" = comdat any

$"$ct.std.io.TeeReader" = comdat any

$std.io.WRITER_BITS = comdat any

$"$ct.ulong" = comdat any

$"$sel.read_byte" = comdat any

$"$sel.write" = comdat any

$std.io.INCOMPLETE_WRITE = comdat any

$std.io.PRINTF_NTOA_BUFFER_SIZE = comdat any

$"$ct.String" = comdat any

$"$ct.sa$char" = comdat any

$"$ct.char" = comdat any

$"$sel.to_format" = comdat any

$"$sel.to_constant_string" = comdat any

$std.core.builtin.NOT_FOUND = comdat any

$"$ct.ichar" = comdat any

$std.core.types.VALUE_OUT_OF_UNSIGNED_RANGE = comdat any

$"$ct.short" = comdat any

$std.core.types.VALUE_OUT_OF_RANGE = comdat any

$"$ct.long" = comdat any

$"$ct.int128" = comdat any

$"$ct.ushort" = comdat any

$"$ct.uint128" = comdat any

$"$ct.fault" = comdat any

$"$ct.std.core.string.ZString" = comdat any

$"$ct.p$char" = comdat any

$"$ct.std.core.dstring.DString" = comdat any

$"$ct.p$std.core.dstring.DStringOpaque" = comdat any

$"$ct.std.core.dstring.DStringOpaque" = comdat any

$"$ct.void" = comdat any

$std.io.INVALID_FORMAT = comdat any

$std.io.NOT_ENOUGH_ARGUMENTS = comdat any

$std.io.BUFFER_EXCEEDED = comdat any

$std.io.INTERNAL_BUFFER_EXCEEDED = comdat any

$std.io.INVALID_ARGUMENT = comdat any

$"$ct.sa$ichar" = comdat any

$std.io.XDIGITS_H = comdat any

$std.io.XDIGITS_L = comdat any

$"$ct.bool" = comdat any

$"$ct.float" = comdat any

$"$ct.double" = comdat any

$std.io.BAD_FORMAT = comdat any

$"$sel.write_byte" = comdat any

$"$sel.flush" = comdat any

$"$sel.close" = comdat any

$"$sel.read" = comdat any

$std.io.EOF = comdat any

$"$sel.release" = comdat any

$std.io.INVALID_POSITION = comdat any

$"$sel.acquire" = comdat any

$"$sel.resize" = comdat any

$std.io.INVALID_PUSHBACK = comdat any

$std.io.OUT_OF_SPACE = comdat any

$"$sel.available" = comdat any

$std.io.GENERAL_ERROR = comdat any

$"$sel.seek" = comdat any

$"$sel.write_to" = comdat any

$"$sel.read_to" = comdat any

$"$ct.dyn.std.core.ReflectedParam.to_format" = comdat any

$"$ct.ReflectedParam" = comdat any

$"$ct.dyn.std.io.ReadBuffer.close" = comdat any

$"$ct.dyn.std.io.ReadBuffer.read" = comdat any

$"$ct.dyn.std.io.ReadBuffer.read_byte" = comdat any

$"$ct.dyn.std.io.WriteBuffer.close" = comdat any

$"$ct.dyn.std.io.WriteBuffer.flush" = comdat any

$"$ct.dyn.std.io.WriteBuffer.write" = comdat any

$"$ct.dyn.std.io.WriteBuffer.write_byte" = comdat any

$"$ct.dyn.std.io.ByteBuffer.write" = comdat any

$"$ct.dyn.std.io.ByteBuffer.write_byte" = comdat any

$"$ct.dyn.std.io.ByteBuffer.read" = comdat any

$"$ct.dyn.std.io.ByteBuffer.read_byte" = comdat any

$"$ct.dyn.std.io.ByteBuffer.pushback_byte" = comdat any

$"$sel.pushback_byte" = comdat any

$"$ct.dyn.std.io.ByteBuffer.seek" = comdat any

$"$ct.dyn.std.io.ByteBuffer.available" = comdat any

$"$ct.dyn.std.io.ByteReader.len" = comdat any

$"$sel.len" = comdat any

$"$ct.dyn.std.io.ByteReader.read" = comdat any

$"$ct.dyn.std.io.ByteReader.read_byte" = comdat any

$"$ct.dyn.std.io.ByteReader.pushback_byte" = comdat any

$"$ct.dyn.std.io.ByteReader.seek" = comdat any

$"$ct.dyn.std.io.ByteReader.write_to" = comdat any

$"$ct.dyn.std.io.ByteReader.available" = comdat any

$"$ct.dyn.std.io.ByteWriter.destroy" = comdat any

$"$sel.destroy" = comdat any

$"$ct.dyn.std.io.ByteWriter.write" = comdat any

$"$ct.dyn.std.io.ByteWriter.write_byte" = comdat any

$"$ct.dyn.std.io.ByteWriter.read_from" = comdat any

$"$sel.read_from" = comdat any

$"$ct.dyn.std.io.LimitReader.close" = comdat any

$"$ct.dyn.std.io.LimitReader.read" = comdat any

$"$ct.dyn.std.io.LimitReader.read_byte" = comdat any

$"$ct.dyn.std.io.LimitReader.available" = comdat any

$"$ct.dyn.std.io.MultiReader.read" = comdat any

$"$ct.dyn.std.io.MultiReader.read_byte" = comdat any

$"$ct.dyn.std.io.MultiWriter.write" = comdat any

$"$ct.dyn.std.io.MultiWriter.write_byte" = comdat any

$"$ct.dyn.std.io.Scanner.flush" = comdat any

$"$ct.dyn.std.io.Scanner.close" = comdat any

$"$ct.dyn.std.io.Scanner.read" = comdat any

$"$ct.dyn.std.io.Scanner.read_byte" = comdat any

$"$ct.dyn.std.io.TeeReader.read" = comdat any

$"$ct.dyn.std.io.TeeReader.read_byte" = comdat any

@"$ct.std.io.BitReader" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 24, i64 0, i64 3, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.io.BitWriter" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 24, i64 0, i64 3, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.io.File" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 8, i64 0, i64 1, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.io.$anon" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 24, i64 0, i64 4, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.io.Formatter" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 40, i64 0, i64 3, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.io.PrintFlags" = linkonce global %.introspect { i8 12, i64 0, ptr null, i64 4, i64 ptrtoint (ptr @"$ct.uint" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.uint" = linkonce global %.introspect { i8 3, i64 0, ptr null, i64 4, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@.enum.FLOAT = internal constant [6 x i8] c"FLOAT\00", align 1
@.enum.EXPONENTIAL = internal constant [12 x i8] c"EXPONENTIAL\00", align 1
@.enum.ADAPTIVE = internal constant [9 x i8] c"ADAPTIVE\00", align 1
@.enum.HEX = internal constant [4 x i8] c"HEX\00", align 1
@"$ct.int" = linkonce global %.introspect { i8 2, i64 0, ptr null, i64 4, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.io.FloatFormatting" = linkonce global { i8, i64, ptr, i64, i64, i64, [4 x %"char[]"] } { i8 8, i64 0, ptr null, i64 4, i64 ptrtoint (ptr @"$ct.int" to i64), i64 4, [4 x %"char[]"] [%"char[]" { ptr @.enum.FLOAT, i64 5 }, %"char[]" { ptr @.enum.EXPONENTIAL, i64 11 }, %"char[]" { ptr @.enum.ADAPTIVE, i64 8 }, %"char[]" { ptr @.enum.HEX, i64 3 }] }, comdat, align 8
@"$ct.std.io.BufferData" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 24, i64 0, i64 2, [0 x i64] zeroinitializer }, comdat, align 8
@.enum.SET = internal constant [4 x i8] c"SET\00", align 1
@.enum.CURSOR = internal constant [7 x i8] c"CURSOR\00", align 1
@.enum.END = internal constant [4 x i8] c"END\00", align 1
@"$ct.std.io.Seek" = linkonce global { i8, i64, ptr, i64, i64, i64, [3 x %"char[]"] } { i8 8, i64 0, ptr null, i64 4, i64 ptrtoint (ptr @"$ct.int" to i64), i64 3, [3 x %"char[]"] [%"char[]" { ptr @.enum.SET, i64 3 }, %"char[]" { ptr @.enum.CURSOR, i64 6 }, %"char[]" { ptr @.enum.END, i64 3 }] }, comdat, align 8
@"$ct.std.io.ReadBuffer" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 48, i64 0, i64 4, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.io.WriteBuffer" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 40, i64 0, i64 3, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.io.ByteBuffer" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 64, i64 0, i64 6, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.io.ByteReader" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 24, i64 0, i64 2, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.io.ByteWriter" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 40, i64 0, i64 3, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.io.LimitReader" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 24, i64 0, i64 2, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.io.MultiReader" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 40, i64 0, i64 3, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.io.MultiWriter" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 32, i64 0, i64 2, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.io.Scanner" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 48, i64 0, i64 4, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.io.TeeReader" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 32, i64 0, i64 2, [0 x i64] zeroinitializer }, comdat, align 8
@std.io.WRITER_BITS = weak_odr local_unnamed_addr constant i32 24, comdat, align 4, !dbg !0
@.panic_msg = internal constant [63 x i8] c"Reference parameter 'self' was passed a null pointer argument.\00", align 1
@.file = internal constant [8 x i8] c"bits.c3\00", align 1
@.func = internal constant [5 x i8] c"init\00", align 1
@std.core.builtin.panic = external global ptr, align 8
@.panic_msg.2 = internal constant [46 x i8] c"Dereference of null pointer, 'self' was null.\00", align 1
@"$ct.ulong" = linkonce global %.introspect { i8 3, i64 0, ptr null, i64 8, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@.panic_msg.3 = internal constant [95 x i8] c"Unaligned access: ptr %% %s = %s, use @unaligned_load / @unaligned_store for unaligned access.\00", align 1
@.func.4 = internal constant [6 x i8] c"clear\00", align 1
@.func.5 = internal constant [10 x i8] c"read_bits\00", align 1
@.panic_msg.6 = internal constant [32 x i8] c"@require \22nbits <= 8\22 violated.\00", align 1
@.panic_msg.7 = internal constant [57 x i8] c"@require \22self.len + nbits <= uint.sizeof * 8\22 violated.\00", align 1
@"$sel.read_byte" = linkonce_odr constant [10 x i8] c"read_byte\00", comdat, align 1
@.panic_msg.8 = internal constant [47 x i8] c"No method 'read_byte' could be found on target\00", align 1
@.panic_msg.9 = internal constant [36 x i8] c"Shift amount out of range (was %s).\00", align 1
@.func.10 = internal constant [6 x i8] c"flush\00", align 1
@.panic_msg.11 = internal constant [47 x i8] c"Dereference of null pointer, 'bytes' was null.\00", align 1
@.file.12 = internal constant [12 x i8] c"bitorder.c3\00", align 1
@.panic_msg.13 = internal constant [55 x i8] c"Dereference of null pointer, '($Type*)&expr' was null.\00", align 1
@.file.14 = internal constant [11 x i8] c"builtin.c3\00", align 1
@.panic_msg.15 = internal constant [60 x i8] c"Dereference of null pointer, '($typeof(x)*)s.ptr' was null.\00", align 1
@.panic_msg.16 = internal constant [44 x i8] c"Negative value (%d) given for slice length.\00", align 1
@.panic_msg.17 = internal constant [61 x i8] c"End index out of bounds (end index of %d exceeds size of %d)\00", align 1
@"$sel.write" = linkonce_odr constant [6 x i8] c"write\00", comdat, align 1
@.panic_msg.18 = internal constant [43 x i8] c"No method 'write' could be found on target\00", align 1
@.file.19 = internal constant [10 x i8] c"stream.c3\00", align 1
@std.io.INCOMPLETE_WRITE = linkonce constant %"char[]" { ptr @std.io.INCOMPLETE_WRITE.nameof, i64 20 }, comdat, align 8
@std.io.INCOMPLETE_WRITE.nameof = internal constant [21 x i8] c"io::INCOMPLETE_WRITE\00", align 1
@.func.20 = internal constant [11 x i8] c"write_bits\00", align 1
@.panic_msg.21 = internal constant [33 x i8] c"@require \22nbits <= 32\22 violated.\00", align 1
@std.io.PRINTF_NTOA_BUFFER_SIZE = weak_odr local_unnamed_addr constant i32 256, comdat, align 4, !dbg !4
@.file.22 = internal constant [13 x i8] c"formatter.c3\00", align 1
@.func.23 = internal constant [10 x i8] c"to_format\00", align 1
@.str = private unnamed_addr constant [17 x i8] c"[Parameter '%s']\00", align 1
@"$ct.String" = linkonce global %.introspect { i8 18, i64 ptrtoint (ptr @"$ct.sa$char" to i64), ptr null, i64 16, i64 ptrtoint (ptr @"$ct.sa$char" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.sa$char" = linkonce global %.introspect { i8 16, i64 0, ptr null, i64 16, i64 ptrtoint (ptr @"$ct.char" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.char" = linkonce global %.introspect { i8 3, i64 0, ptr null, i64 1, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@.func.24 = internal constant [7 x i8] c"printf\00", align 1
@.func.25 = internal constant [4 x i8] c"out\00", align 1
@.panic_msg.26 = internal constant [55 x i8] c"Calling null function pointer, 'self.out_fn' was null.\00", align 1
@.func.27 = internal constant [20 x i8] c"print_with_function\00", align 1
@"$sel.to_format" = linkonce_odr constant [10 x i8] c"to_format\00", comdat, align 1
@.str.28 = private unnamed_addr constant [7 x i8] c"(null)\00", align 1
@.panic_msg.29 = internal constant [47 x i8] c"No method 'to_format' could be found on target\00", align 1
@"$sel.to_constant_string" = linkonce_odr constant [19 x i8] c"to_constant_string\00", comdat, align 1
@.str.30 = private unnamed_addr constant [7 x i8] c"(null)\00", align 1
@.panic_msg.31 = internal constant [56 x i8] c"No method 'to_constant_string' could be found on target\00", align 1
@std.core.builtin.NOT_FOUND = linkonce constant %"char[]" { ptr @std.core.builtin.NOT_FOUND.nameof, i64 18 }, comdat, align 8
@std.core.builtin.NOT_FOUND.nameof = internal constant [19 x i8] c"builtin::NOT_FOUND\00", align 1
@.func.32 = internal constant [12 x i8] c"out_unknown\00", align 1
@.str.33 = private unnamed_addr constant [2 x i8] c"<\00", align 1
@.str.34 = private unnamed_addr constant [7 x i8] c" type:\00", align 1
@.str.35 = private unnamed_addr constant [8 x i8] c", addr:\00", align 1
@.str.36 = private unnamed_addr constant [2 x i8] c">\00", align 1
@.func.37 = internal constant [8 x i8] c"out_str\00", align 1
@.str.38 = private unnamed_addr constant [7 x i8] c"typeid\00", align 1
@.str.39 = private unnamed_addr constant [5 x i8] c"void\00", align 1
@.panic_msg.40 = internal constant [57 x i8] c"Dereference of null pointer, '(fault*)arg.ptr' was null.\00", align 1
@.panic_msg.41 = internal constant [51 x i8] c"Dereference of null pointer, '(any*)arg' was null.\00", align 1
@.str.42 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.43 = private unnamed_addr constant [13 x i8] c"formatter.c3\00", align 1
@.str.44 = private unnamed_addr constant [18 x i8] c"Formatter.out_str\00", align 1
@.str.45 = private unnamed_addr constant [10 x i8] c"<INVALID>\00", align 1
@.str.46 = private unnamed_addr constant [4 x i8] c"ERR\00", align 1
@.panic_msg.47 = internal constant [56 x i8] c"Dereference of null pointer, '(bool*)arg.ptr' was null.\00", align 1
@.str.48 = private unnamed_addr constant [5 x i8] c"true\00", align 1
@.str.49 = private unnamed_addr constant [6 x i8] c"false\00", align 1
@.panic_msg.50 = internal constant [70 x i8] c"@require \22$Type.kindof.is_int()\22 violated: 'Type was not an integer'.\00", align 1
@.panic_msg.51 = internal constant [68 x i8] c"@require \22v.type.kindof == ENUM\22 violated: 'Value was not an enum'.\00", align 1
@.panic_msg.52 = internal constant [33 x i8] c"Called a method on a null value.\00", align 1
@.panic_msg.53 = internal constant [50 x i8] c"Attempted to access 'inner' on non composite type\00", align 1
@.file.54 = internal constant [9 x i8] c"types.c3\00", align 1
@.panic_msg.55 = internal constant [72 x i8] c"@require \22v.type.kindof.is_int()\22 violated: 'Value was not an integer'.\00", align 1
@"$ct.ichar" = linkonce global %.introspect { i8 2, i64 0, ptr null, i64 1, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@.panic_msg.56 = internal constant [54 x i8] c"Dereference of null pointer, '(char*)v.ptr' was null.\00", align 1
@std.core.types.VALUE_OUT_OF_UNSIGNED_RANGE = linkonce constant %"char[]" { ptr @std.core.types.VALUE_OUT_OF_UNSIGNED_RANGE.nameof, i64 34 }, comdat, align 8
@std.core.types.VALUE_OUT_OF_UNSIGNED_RANGE.nameof = internal constant [35 x i8] c"types::VALUE_OUT_OF_UNSIGNED_RANGE\00", align 1
@"$ct.short" = linkonce global %.introspect { i8 2, i64 0, ptr null, i64 2, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@.panic_msg.57 = internal constant [55 x i8] c"Dereference of null pointer, '(short*)v.ptr' was null.\00", align 1
@std.core.types.VALUE_OUT_OF_RANGE = linkonce constant %"char[]" { ptr @std.core.types.VALUE_OUT_OF_RANGE.nameof, i64 25 }, comdat, align 8
@std.core.types.VALUE_OUT_OF_RANGE.nameof = internal constant [26 x i8] c"types::VALUE_OUT_OF_RANGE\00", align 1
@.panic_msg.58 = internal constant [53 x i8] c"Dereference of null pointer, '(int*)v.ptr' was null.\00", align 1
@"$ct.long" = linkonce global %.introspect { i8 2, i64 0, ptr null, i64 8, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@.panic_msg.59 = internal constant [54 x i8] c"Dereference of null pointer, '(long*)v.ptr' was null.\00", align 1
@"$ct.int128" = linkonce global %.introspect { i8 2, i64 0, ptr null, i64 16, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@.panic_msg.60 = internal constant [56 x i8] c"Dereference of null pointer, '(int128*)v.ptr' was null.\00", align 1
@"$ct.ushort" = linkonce global %.introspect { i8 3, i64 0, ptr null, i64 2, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@.panic_msg.61 = internal constant [56 x i8] c"Dereference of null pointer, '(ushort*)v.ptr' was null.\00", align 1
@.panic_msg.62 = internal constant [54 x i8] c"Dereference of null pointer, '(uint*)v.ptr' was null.\00", align 1
@.panic_msg.63 = internal constant [55 x i8] c"Dereference of null pointer, '(ulong*)v.ptr' was null.\00", align 1
@"$ct.uint128" = linkonce global %.introspect { i8 3, i64 0, ptr null, i64 16, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@.panic_msg.64 = internal constant [57 x i8] c"Dereference of null pointer, '(uint128*)v.ptr' was null.\00", align 1
@.str.65 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.66 = private unnamed_addr constant [13 x i8] c"formatter.c3\00", align 1
@.str.67 = private unnamed_addr constant [18 x i8] c"Formatter.out_str\00", align 1
@"$ct.fault" = linkonce global %.introspect { i8 6, i64 0, ptr null, i64 8, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@.panic_msg.68 = internal constant [37 x i8] c"Unexpected fault '%s' was unwrapped!\00", align 1
@.panic_msg.69 = internal constant [52 x i8] c"Attempted to access 'names' on non enum/fault type.\00", align 1
@.panic_msg.70 = internal constant [50 x i8] c"Illegal enum value found, numerical value was %d.\00", align 1
@.panic_msg.71 = internal constant [60 x i8] c"Array index out of bounds (array had size %d, index was %d)\00", align 1
@.str.72 = private unnamed_addr constant [7 x i8] c"struct\00", align 1
@.str.73 = private unnamed_addr constant [6 x i8] c"union\00", align 1
@.str.74 = private unnamed_addr constant [10 x i8] c"bitstruct\00", align 1
@.str.75 = private unnamed_addr constant [3 x i8] c"0x\00", align 1
@.panic_msg.76 = internal constant [54 x i8] c"Dereference of null pointer, '(String*)arg' was null.\00", align 1
@"$ct.std.core.string.ZString" = linkonce global %.introspect { i8 18, i64 ptrtoint (ptr @"$ct.p$char" to i64), ptr null, i64 8, i64 ptrtoint (ptr @"$ct.p$char" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.p$char" = linkonce global %.introspect { i8 19, i64 0, ptr null, i64 8, i64 ptrtoint (ptr @"$ct.char" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@.panic_msg.77 = internal constant [55 x i8] c"Dereference of null pointer, '(ZString*)arg' was null.\00", align 1
@.str.78 = private unnamed_addr constant [7 x i8] c"(null)\00", align 1
@"$ct.std.core.dstring.DString" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 8, i64 ptrtoint (ptr @"$ct.p$std.core.dstring.DStringOpaque" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.p$std.core.dstring.DStringOpaque" = linkonce global %.introspect { i8 19, i64 0, ptr null, i64 8, i64 ptrtoint (ptr @"$ct.std.core.dstring.DStringOpaque" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.core.dstring.DStringOpaque" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 1, i64 ptrtoint (ptr @"$ct.void" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.void" = linkonce global %.introspect { i8 0, i64 0, ptr null, i64 1, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@.panic_msg.79 = internal constant [55 x i8] c"Dereference of null pointer, '(DString*)arg' was null.\00", align 1
@.str.80 = private unnamed_addr constant [7 x i8] c"(null)\00", align 1
@.panic_msg.81 = internal constant [49 x i8] c"Dereference of null pointer, 'pointer' was null.\00", align 1
@.str.82 = private unnamed_addr constant [3 x i8] c"0x\00", align 1
@.panic_msg.83 = internal constant [44 x i8] c"Attempted to access 'len' on non array type\00", align 1
@.str.84 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.85 = private unnamed_addr constant [3 x i8] c"[<\00", align 1
@.str.86 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.87 = private unnamed_addr constant [3 x i8] c">]\00", align 1
@.panic_msg.88 = internal constant [46 x i8] c"Dereference of null pointer, 'temp' was null.\00", align 1
@.str.89 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.90 = private unnamed_addr constant [16 x i8] c"Already handled\00", align 1
@.str.91 = private unnamed_addr constant [13 x i8] c"formatter.c3\00", align 1
@.str.92 = private unnamed_addr constant [18 x i8] c"Formatter.out_str\00", align 1
@.str.93 = private unnamed_addr constant [13 x i8] c"Invalid type\00", align 1
@.func.94 = internal constant [8 x i8] c"vprintf\00", align 1
@.str.95 = private unnamed_addr constant [5 x i8] c"%ERR\00", align 1
@std.io.INVALID_FORMAT = linkonce constant %"char[]" { ptr @std.io.INVALID_FORMAT.nameof, i64 18 }, comdat, align 8
@std.io.INVALID_FORMAT.nameof = internal constant [19 x i8] c"io::INVALID_FORMAT\00", align 1
@.str.96 = private unnamed_addr constant [5 x i8] c"%ERR\00", align 1
@.str.97 = private unnamed_addr constant [5 x i8] c"%ERR\00", align 1
@.str.98 = private unnamed_addr constant [13 x i8] c"<BAD FORMAT>\00", align 1
@.str.99 = private unnamed_addr constant [13 x i8] c"<BAD FORMAT>\00", align 1
@std.io.NOT_ENOUGH_ARGUMENTS = linkonce constant %"char[]" { ptr @std.io.NOT_ENOUGH_ARGUMENTS.nameof, i64 24 }, comdat, align 8
@std.io.NOT_ENOUGH_ARGUMENTS.nameof = internal constant [25 x i8] c"io::NOT_ENOUGH_ARGUMENTS\00", align 1
@.file.100 = internal constant [21 x i8] c"formatter_private.c3\00", align 1
@.str.101 = private unnamed_addr constant [10 x i8] c"<MISSING>\00", align 1
@std.io.BUFFER_EXCEEDED = linkonce constant %"char[]" { ptr @std.io.BUFFER_EXCEEDED.nameof, i64 19 }, comdat, align 8
@std.io.BUFFER_EXCEEDED.nameof = internal constant [20 x i8] c"io::BUFFER_EXCEEDED\00", align 1
@std.io.INTERNAL_BUFFER_EXCEEDED = linkonce constant %"char[]" { ptr @std.io.INTERNAL_BUFFER_EXCEEDED.nameof, i64 28 }, comdat, align 8
@std.io.INTERNAL_BUFFER_EXCEEDED.nameof = internal constant [29 x i8] c"io::INTERNAL_BUFFER_EXCEEDED\00", align 1
@std.io.INVALID_ARGUMENT = linkonce constant %"char[]" { ptr @std.io.INVALID_ARGUMENT.nameof, i64 20 }, comdat, align 8
@std.io.INVALID_ARGUMENT.nameof = internal constant [21 x i8] c"io::INVALID_ARGUMENT\00", align 1
@.str.102 = private unnamed_addr constant [10 x i8] c"<INVALID>\00", align 1
@.str.103 = private unnamed_addr constant [10 x i8] c"<INVALID>\00", align 1
@.str.104 = private unnamed_addr constant [10 x i8] c"<INVALID>\00", align 1
@.str.105 = private unnamed_addr constant [10 x i8] c"<INVALID>\00", align 1
@"$ct.sa$ichar" = linkonce global %.introspect { i8 16, i64 0, ptr null, i64 16, i64 ptrtoint (ptr @"$ct.ichar" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@.panic_msg.106 = internal constant [58 x i8] c"Dereference of null pointer, '(char[]*)current' was null.\00", align 1
@.panic_msg.107 = internal constant [61 x i8] c"Dereference of null pointer, '(char**)current.ptr' was null.\00", align 1
@.str.108 = private unnamed_addr constant [10 x i8] c"<INVALID>\00", align 1
@.str.109 = private unnamed_addr constant [13 x i8] c"<BAD FORMAT>\00", align 1
@.str.110 = private unnamed_addr constant [10 x i8] c"<INVALID>\00", align 1
@.func.111 = internal constant [6 x i8] c"print\00", align 1
@std.io.XDIGITS_H = weak_odr constant [16 x i8] c"0123456789ABCDEF", comdat, align 16, !dbg !7
@std.io.XDIGITS_L = weak_odr constant [16 x i8] c"0123456789abcdef", comdat, align 16, !dbg !14
@.func.113 = internal constant [16 x i8] c"print_hex_chars\00", align 1
@.panic_msg.114 = internal constant [48 x i8] c"Dereference of null pointer, 'is_neg' was null.\00", align 1
@.func.115 = internal constant [13 x i8] c"int_from_any\00", align 1
@.panic_msg.116 = internal constant [57 x i8] c"Dereference of null pointer, '(void**)arg.ptr' was null.\00", align 1
@"$ct.bool" = linkonce global %.introspect { i8 1, i64 0, ptr null, i64 1, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@.panic_msg.117 = internal constant [52 x i8] c"Dereference of null pointer, '(bool*)arg' was null.\00", align 1
@.panic_msg.118 = internal constant [53 x i8] c"Dereference of null pointer, '(ichar*)arg' was null.\00", align 1
@.panic_msg.119 = internal constant [53 x i8] c"Dereference of null pointer, '(short*)arg' was null.\00", align 1
@.panic_msg.120 = internal constant [51 x i8] c"Dereference of null pointer, '(int*)arg' was null.\00", align 1
@.panic_msg.121 = internal constant [52 x i8] c"Dereference of null pointer, '(long*)arg' was null.\00", align 1
@.panic_msg.122 = internal constant [54 x i8] c"Dereference of null pointer, '(int128*)arg' was null.\00", align 1
@.panic_msg.123 = internal constant [52 x i8] c"Dereference of null pointer, '(char*)arg' was null.\00", align 1
@.panic_msg.124 = internal constant [54 x i8] c"Dereference of null pointer, '(ushort*)arg' was null.\00", align 1
@.panic_msg.125 = internal constant [52 x i8] c"Dereference of null pointer, '(uint*)arg' was null.\00", align 1
@.panic_msg.126 = internal constant [53 x i8] c"Dereference of null pointer, '(ulong*)arg' was null.\00", align 1
@.panic_msg.127 = internal constant [55 x i8] c"Dereference of null pointer, '(uint128*)arg' was null.\00", align 1
@"$ct.float" = linkonce global %.introspect { i8 4, i64 0, ptr null, i64 4, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@.panic_msg.128 = internal constant [53 x i8] c"Dereference of null pointer, '(float*)arg' was null.\00", align 1
@"$ct.double" = linkonce global %.introspect { i8 4, i64 0, ptr null, i64 8, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@.panic_msg.129 = internal constant [54 x i8] c"Dereference of null pointer, '(double*)arg' was null.\00", align 1
@std.io.BAD_FORMAT = linkonce constant %"char[]" { ptr @std.io.BAD_FORMAT.nameof, i64 14 }, comdat, align 8
@std.io.BAD_FORMAT.nameof = internal constant [15 x i8] c"io::BAD_FORMAT\00", align 1
@.func.130 = internal constant [15 x i8] c"float_from_any\00", align 1
@.panic_msg.131 = internal constant [49 x i8] c"Dereference of null pointer, 'len_ptr' was null.\00", align 1
@.func.132 = internal constant [12 x i8] c"simple_atoi\00", align 1
@std.core.ascii.ASCII_LOOKUP = external constant [256 x i16], align 16
@.file.133 = internal constant [9 x i8] c"ascii.c3\00", align 1
@.panic_msg.134 = internal constant [45 x i8] c"Dereference of null pointer, '--s' was null.\00", align 1
@.func.135 = internal constant [6 x i8] c"fmt_u\00", align 1
@.panic_msg.136 = internal constant [51 x i8] c"Dereference of null pointer, 'index_ptr' was null.\00", align 1
@.func.137 = internal constant [26 x i8] c"printf_parse_format_field\00", align 1
@.panic_msg.138 = internal constant [56 x i8] c"Dereference of null pointer, 'args_index_ptr' was null.\00", align 1
@.str.139 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.140 = private unnamed_addr constant [21 x i8] c"formatter_private.c3\00", align 1
@.str.141 = private unnamed_addr constant [26 x i8] c"printf_parse_format_field\00", align 1
@.func.142 = internal constant [7 x i8] c"adjust\00", align 1
@.func.143 = internal constant [11 x i8] c"out_substr\00", align 1
@.func.144 = internal constant [4 x i8] c"pad\00", align 1
@.func.145 = internal constant [10 x i8] c"out_chars\00", align 1
@.func.146 = internal constant [5 x i8] c"etoa\00", align 1
@.func.147 = internal constant [5 x i8] c"ftoa\00", align 1
@.func.148 = internal constant [5 x i8] c"gtoa\00", align 1
@.func.149 = internal constant [5 x i8] c"atoa\00", align 1
@.func.150 = internal constant [12 x i8] c"floatformat\00", align 1
@floatformat.BUF_SIZE = internal unnamed_addr constant i32 126, align 4, !dbg !16
@.str.151 = private unnamed_addr constant [4 x i8] c"INF\00", align 1
@.str.152 = private unnamed_addr constant [4 x i8] c"inf\00", align 1
@.str.153 = private unnamed_addr constant [4 x i8] c"NAN\00", align 1
@.str.154 = private unnamed_addr constant [4 x i8] c"nan\00", align 1
@.panic_msg.155 = internal constant [48 x i8] c"Dereference of null pointer, '--estr' was null.\00", align 1
@.panic_msg.156 = internal constant [45 x i8] c"Dereference of null pointer, 's++' was null.\00", align 1
@.str.157 = private unnamed_addr constant [3 x i8] c"0X\00", align 1
@.str.158 = private unnamed_addr constant [3 x i8] c"0x\00", align 1
@.panic_msg.159 = internal constant [43 x i8] c"Dereference of null pointer, 'd' was null.\00", align 1
@.panic_msg.160 = internal constant [45 x i8] c"Dereference of null pointer, '--a' was null.\00", align 1
@.panic_msg.161 = internal constant [43 x i8] c"Dereference of null pointer, 'a' was null.\00", align 1
@.panic_msg.162 = internal constant [11 x i8] c"% by zero.\00", align 1
@.panic_msg.163 = internal constant [18 x i8] c"Division by zero.\00", align 1
@.panic_msg.164 = internal constant [45 x i8] c"Dereference of null pointer, 'd--' was null.\00", align 1
@.func.165 = internal constant [5 x i8] c"ntoa\00", align 1
@.func.166 = internal constant [12 x i8] c"ntoa_format\00", align 1
@.str.167 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.168 = private unnamed_addr constant [21 x i8] c"formatter_private.c3\00", align 1
@.str.169 = private unnamed_addr constant [22 x i8] c"Formatter.ntoa_format\00", align 1
@.panic_msg.170 = internal constant [62 x i8] c"Index exceeds array length (array had size %d, index was %d).\00", align 1
@.func.171 = internal constant [9 x i8] c"ntoa_any\00", align 1
@.func.172 = internal constant [9 x i8] c"out_char\00", align 1
@.str.173 = private unnamed_addr constant [11 x i8] c"<NOT CHAR>\00", align 1
@.str.174 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.175 = private unnamed_addr constant [21 x i8] c"formatter_private.c3\00", align 1
@.str.176 = private unnamed_addr constant [19 x i8] c"Formatter.out_char\00", align 1
@.func.177 = internal constant [12 x i8] c"out_reverse\00", align 1
@"$sel.write_byte" = linkonce_odr constant [11 x i8] c"write_byte\00", comdat, align 1
@.panic_msg.178 = internal constant [48 x i8] c"No method 'write_byte' could be found on target\00", align 1
@.file.179 = internal constant [6 x i8] c"io.c3\00", align 1
@.func.180 = internal constant [9 x i8] c"fprintfn\00", align 1
@"$sel.flush" = linkonce_odr constant [6 x i8] c"flush\00", comdat, align 1
@.panic_msg.181 = internal constant [43 x i8] c"No method 'flush' could be found on target\00", align 1
@.panic_msg.182 = internal constant [48 x i8] c"Dereference of null pointer, 'stream' was null.\00", align 1
@.func.183 = internal constant [17 x i8] c"out_putstream_fn\00", align 1
@.panic_msg.184 = internal constant [67 x i8] c"@require \22self.file != null\22 violated: 'File must be initialized'.\00", align 1
@.func.185 = internal constant [8 x i8] c"printfn\00", align 1
@.panic_msg.186 = internal constant [39 x i8] c"@require \22self.file != null\22 violated.\00", align 1
@.func.187 = internal constant [9 x i8] c"eprintfn\00", align 1
@.func.188 = internal constant [8 x i8] c"bprintf\00", align 1
@.func.189 = internal constant [14 x i8] c"out_buffer_fn\00", align 1
@stdout.file = internal global %File zeroinitializer, align 8, !dbg !18
@stderr.file = internal global %File zeroinitializer, align 8, !dbg !26
@stdin.file = internal global %File zeroinitializer, align 8, !dbg !28
@.file.190 = internal constant [10 x i8] c"buffer.c3\00", align 1
@.panic_msg.191 = internal constant [35 x i8] c"@require \22bytes.len > 0\22 violated.\00", align 1
@.panic_msg.192 = internal constant [89 x i8] c"@require \22self.bytes.len == 0\22 violated: 'Init may not run on already initialized data'.\00", align 1
@.func.193 = internal constant [9 x i8] c"str_view\00", align 1
@.func.194 = internal constant [6 x i8] c"close\00", align 1
@"$sel.close" = linkonce_odr constant [6 x i8] c"close\00", comdat, align 1
@.panic_msg.195 = internal constant [43 x i8] c"No method 'close' could be found on target\00", align 1
@.func.196 = internal constant [5 x i8] c"read\00", align 1
@"$sel.read" = linkonce_odr constant [5 x i8] c"read\00", comdat, align 1
@.panic_msg.197 = internal constant [42 x i8] c"No method 'read' could be found on target\00", align 1
@.panic_msg.198 = internal constant [39 x i8] c"Slice copy length mismatch (%d != %d).\00", align 1
@.func.199 = internal constant [10 x i8] c"read_byte\00", align 1
@std.io.EOF = linkonce constant %"char[]" { ptr @std.io.EOF.nameof, i64 7 }, comdat, align 8
@std.io.EOF.nameof = internal constant [8 x i8] c"io::EOF\00", align 1
@.func.200 = internal constant [7 x i8] c"refill\00", align 1
@.panic_msg.201 = internal constant [64 x i8] c"@require \22bytes.len > 0\22 violated: 'Non-empty buffer required'.\00", align 1
@.func.202 = internal constant [6 x i8] c"write\00", align 1
@.func.203 = internal constant [11 x i8] c"write_byte\00", align 1
@.func.204 = internal constant [14 x i8] c"write_pending\00", align 1
@.file.205 = internal constant [14 x i8] c"bytebuffer.c3\00", align 1
@.panic_msg.206 = internal constant [72 x i8] c"@require \22self.bytes.len == 0\22 violated: 'Buffer already initialized.'.\00", align 1
@.func.207 = internal constant [6 x i8] c"tinit\00", align 1
@std.core.mem.allocator.current_temp = external thread_local global %any, align 8
@.func.208 = internal constant [17 x i8] c"init_with_buffer\00", align 1
@.panic_msg.209 = internal constant [33 x i8] c"@require \22buf.len > 0\22 violated.\00", align 1
@.func.210 = internal constant [5 x i8] c"free\00", align 1
@"$sel.release" = linkonce_odr constant [8 x i8] c"release\00", comdat, align 1
@.panic_msg.211 = internal constant [76 x i8] c"@require \22ptr != null\22 violated: 'Empty pointers should never be released'.\00", align 1
@.file.212 = internal constant [17 x i8] c"mem_allocator.c3\00", align 1
@.panic_msg.213 = internal constant [45 x i8] c"No method 'release' could be found on target\00", align 1
@.panic_msg.214 = internal constant [23 x i8] c"Negative indexing (%d)\00", align 1
@.func.215 = internal constant [14 x i8] c"pushback_byte\00", align 1
@.panic_msg.216 = internal constant [35 x i8] c"Assert \22self.read_idx > 0\22 failed.\00", align 1
@.func.217 = internal constant [5 x i8] c"seek\00", align 1
@std.io.INVALID_POSITION = linkonce constant %"char[]" { ptr @std.io.INVALID_POSITION.nameof, i64 20 }, comdat, align 8
@std.io.INVALID_POSITION.nameof = internal constant [21 x i8] c"io::INVALID_POSITION\00", align 1
@.func.218 = internal constant [10 x i8] c"available\00", align 1
@.func.219 = internal constant [5 x i8] c"grow\00", align 1
@"$sel.acquire" = linkonce_odr constant [8 x i8] c"acquire\00", comdat, align 1
@.panic_msg.220 = internal constant [66 x i8] c"@require \22!alignment || math::is_power_of_2(alignment)\22 violated.\00", align 1
@.panic_msg.221 = internal constant [81 x i8] c"@require \22alignment <= mem::MAX_MEMORY_ALIGNMENT\22 violated: 'alignment too big'.\00", align 1
@.panic_msg.222 = internal constant [60 x i8] c"@require \22size > 0\22 violated: 'The size must be 1 or more'.\00", align 1
@.panic_msg.223 = internal constant [45 x i8] c"No method 'acquire' could be found on target\00", align 1
@"$sel.resize" = linkonce_odr constant [7 x i8] c"resize\00", comdat, align 1
@.panic_msg.224 = internal constant [33 x i8] c"@require \22ptr != null\22 violated.\00", align 1
@.panic_msg.225 = internal constant [34 x i8] c"@require \22new_size > 0\22 violated.\00", align 1
@.panic_msg.226 = internal constant [44 x i8] c"No method 'resize' could be found on target\00", align 1
@.file.227 = internal constant [14 x i8] c"bytereader.c3\00", align 1
@.func.228 = internal constant [4 x i8] c"len\00", align 1
@.panic_msg.229 = internal constant [38 x i8] c"Passed null to a ref ('&') parameter.\00", align 1
@.file.230 = internal constant [7 x i8] c"mem.c3\00", align 1
@.panic_msg.231 = internal constant [95 x i8] c"@require \22src != null || len == 0\22 violated: 'Copying a null with non-zero length is invalid'.\00", align 1
@.panic_msg.232 = internal constant [96 x i8] c"@require \22len == 0 || dst + len <= src || src + len <= dst\22 violated: 'Ranges may not overlap'.\00", align 1
@std.io.INVALID_PUSHBACK = linkonce constant %"char[]" { ptr @std.io.INVALID_PUSHBACK.nameof, i64 20 }, comdat, align 8
@std.io.INVALID_PUSHBACK.nameof = internal constant [21 x i8] c"io::INVALID_PUSHBACK\00", align 1
@.func.233 = internal constant [9 x i8] c"write_to\00", align 1
@.panic_msg.234 = internal constant [46 x i8] c"Assert \22self.index <= self.bytes.len\22 failed.\00", align 1
@.file.235 = internal constant [14 x i8] c"bytewriter.c3\00", align 1
@.panic_msg.236 = internal constant [53 x i8] c"@ensure \22(bool)allocator, self.index == 0\22 violated.\00", align 1
@.panic_msg.237 = internal constant [36 x i8] c"@ensure \22self.index == 0\22 violated.\00", align 1
@.func.238 = internal constant [8 x i8] c"destroy\00", align 1
@.func.239 = internal constant [16 x i8] c"ensure_capacity\00", align 1
@std.io.OUT_OF_SPACE = linkonce constant %"char[]" { ptr @std.io.OUT_OF_SPACE.nameof, i64 16 }, comdat, align 8
@std.io.OUT_OF_SPACE.nameof = internal constant [17 x i8] c"io::OUT_OF_SPACE\00", align 1
@.func.240 = internal constant [10 x i8] c"read_from\00", align 1
@"$sel.available" = linkonce_odr constant [10 x i8] c"available\00", comdat, align 1
@.panic_msg.241 = internal constant [47 x i8] c"No method 'available' could be found on target\00", align 1
@.file.242 = internal constant [15 x i8] c"limitreader.c3\00", align 1
@.file.243 = internal constant [15 x i8] c"multireader.c3\00", align 1
@.panic_msg.244 = internal constant [91 x i8] c"@require \22self.readers.len == 0\22 violated: 'Init may not run on already initialized data'.\00", align 1
@.file.245 = internal constant [15 x i8] c"multiwriter.c3\00", align 1
@.panic_msg.246 = internal constant [37 x i8] c"@require \22writers.len > 0\22 violated.\00", align 1
@.panic_msg.247 = internal constant [91 x i8] c"@require \22self.writers.len == 0\22 violated: 'Init may not run on already initialized data'.\00", align 1
@.panic_msg.248 = internal constant [54 x i8] c"Dereference of null pointer, 'self.writers' was null.\00", align 1
@.file.249 = internal constant [11 x i8] c"scanner.c3\00", align 1
@.panic_msg.250 = internal constant [66 x i8] c"@require \22buffer.len > 0\22 violated: 'Non-empty buffer required.'.\00", align 1
@.panic_msg.251 = internal constant [51 x i8] c"Assert \22self.read_idx >= self.pattern_idx\22 failed.\00", align 1
@.func.252 = internal constant [5 x i8] c"scan\00", align 1
@.panic_msg.253 = internal constant [68 x i8] c"@require \22pattern.len > 0\22 violated: 'Non-empty pattern required.'.\00", align 1
@.panic_msg.254 = internal constant [70 x i8] c"@require \22self.buf.len > pattern.len\22 violated: 'Pattern too large.'.\00", align 1
@.panic_msg.255 = internal constant [72 x i8] c"@require \22substr.len > 0\22 violated: 'The string must be len 1 or more'.\00", align 1
@.file.256 = internal constant [13 x i8] c"teereader.c3\00", align 1
@std.io.GENERAL_ERROR = linkonce constant %"char[]" { ptr @std.io.GENERAL_ERROR.nameof, i64 17 }, comdat, align 8
@std.io.GENERAL_ERROR.nameof = internal constant [18 x i8] c"io::GENERAL_ERROR\00", align 1
@std.io.MAX_VARS = internal unnamed_addr constant { [2 x i8], i8, i8, i8, [3 x i8], i8 } { [2 x i8] zeroinitializer, i8 3, i8 0, i8 5, [3 x i8] zeroinitializer, i8 10 }, align 1, !dbg !30
@"$sel.seek" = linkonce_odr constant [5 x i8] c"seek\00", comdat, align 1
@.panic_msg.257 = internal constant [42 x i8] c"No method 'seek' could be found on target\00", align 1
@.func.258 = internal constant [8 x i8] c"copy_to\00", align 1
@"$sel.write_to" = linkonce_odr constant [9 x i8] c"write_to\00", comdat, align 1
@.panic_msg.259 = internal constant [46 x i8] c"No method 'write_to' could be found on target\00", align 1
@"$sel.read_to" = linkonce_odr constant [8 x i8] c"read_to\00", comdat, align 1
@.panic_msg.260 = internal constant [45 x i8] c"No method 'read_to' could be found on target\00", align 1
@"$ct.dyn.std.core.ReflectedParam.to_format" = weak_odr global { ptr, ptr, ptr } { ptr @std.core.ReflectedParam.to_format, ptr @"$sel.to_format", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.ReflectedParam" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 24, i64 0, i64 2, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.dyn.std.io.ReadBuffer.close" = weak_odr global { ptr, ptr, ptr } { ptr @std.io.ReadBuffer.close, ptr @"$sel.close", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.ReadBuffer.read" = weak_odr global { ptr, ptr, ptr } { ptr @std.io.ReadBuffer.read, ptr @"$sel.read", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.ReadBuffer.read_byte" = weak_odr global { ptr, ptr, ptr } { ptr @std.io.ReadBuffer.read_byte, ptr @"$sel.read_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.WriteBuffer.close" = weak_odr global { ptr, ptr, ptr } { ptr @std.io.WriteBuffer.close, ptr @"$sel.close", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.WriteBuffer.flush" = weak_odr global { ptr, ptr, ptr } { ptr @std.io.WriteBuffer.flush, ptr @"$sel.flush", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.WriteBuffer.write" = weak_odr global { ptr, ptr, ptr } { ptr @std.io.WriteBuffer.write, ptr @"$sel.write", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.WriteBuffer.write_byte" = weak_odr global { ptr, ptr, ptr } { ptr @std.io.WriteBuffer.write_byte, ptr @"$sel.write_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.ByteBuffer.write" = weak_odr global { ptr, ptr, ptr } { ptr @std.io.ByteBuffer.write, ptr @"$sel.write", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.ByteBuffer.write_byte" = weak_odr global { ptr, ptr, ptr } { ptr @std.io.ByteBuffer.write_byte, ptr @"$sel.write_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.ByteBuffer.read" = weak_odr global { ptr, ptr, ptr } { ptr @std.io.ByteBuffer.read, ptr @"$sel.read", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.ByteBuffer.read_byte" = weak_odr global { ptr, ptr, ptr } { ptr @std.io.ByteBuffer.read_byte, ptr @"$sel.read_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.ByteBuffer.pushback_byte" = weak_odr global { ptr, ptr, ptr } { ptr @std.io.ByteBuffer.pushback_byte, ptr @"$sel.pushback_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$sel.pushback_byte" = linkonce_odr constant [14 x i8] c"pushback_byte\00", comdat, align 1
@"$ct.dyn.std.io.ByteBuffer.seek" = weak_odr global { ptr, ptr, ptr } { ptr @std.io.ByteBuffer.seek, ptr @"$sel.seek", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.ByteBuffer.available" = weak_odr global { ptr, ptr, ptr } { ptr @std.io.ByteBuffer.available, ptr @"$sel.available", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.ByteReader.len" = weak_odr global { ptr, ptr, ptr } { ptr @std.io.ByteReader.len, ptr @"$sel.len", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$sel.len" = linkonce_odr constant [4 x i8] c"len\00", comdat, align 1
@"$ct.dyn.std.io.ByteReader.read" = weak_odr global { ptr, ptr, ptr } { ptr @std.io.ByteReader.read, ptr @"$sel.read", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.ByteReader.read_byte" = weak_odr global { ptr, ptr, ptr } { ptr @std.io.ByteReader.read_byte, ptr @"$sel.read_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.ByteReader.pushback_byte" = weak_odr global { ptr, ptr, ptr } { ptr @std.io.ByteReader.pushback_byte, ptr @"$sel.pushback_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.ByteReader.seek" = weak_odr global { ptr, ptr, ptr } { ptr @std.io.ByteReader.seek, ptr @"$sel.seek", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.ByteReader.write_to" = weak_odr global { ptr, ptr, ptr } { ptr @std.io.ByteReader.write_to, ptr @"$sel.write_to", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.ByteReader.available" = weak_odr global { ptr, ptr, ptr } { ptr @std.io.ByteReader.available, ptr @"$sel.available", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.ByteWriter.destroy" = weak_odr global { ptr, ptr, ptr } { ptr @std.io.ByteWriter.destroy, ptr @"$sel.destroy", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$sel.destroy" = linkonce_odr constant [8 x i8] c"destroy\00", comdat, align 1
@"$ct.dyn.std.io.ByteWriter.write" = weak_odr global { ptr, ptr, ptr } { ptr @std.io.ByteWriter.write, ptr @"$sel.write", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.ByteWriter.write_byte" = weak_odr global { ptr, ptr, ptr } { ptr @std.io.ByteWriter.write_byte, ptr @"$sel.write_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.ByteWriter.read_from" = weak_odr global { ptr, ptr, ptr } { ptr @std.io.ByteWriter.read_from, ptr @"$sel.read_from", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$sel.read_from" = linkonce_odr constant [10 x i8] c"read_from\00", comdat, align 1
@"$ct.dyn.std.io.LimitReader.close" = weak_odr global { ptr, ptr, ptr } { ptr @std.io.LimitReader.close, ptr @"$sel.close", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.LimitReader.read" = weak_odr global { ptr, ptr, ptr } { ptr @std.io.LimitReader.read, ptr @"$sel.read", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.LimitReader.read_byte" = weak_odr global { ptr, ptr, ptr } { ptr @std.io.LimitReader.read_byte, ptr @"$sel.read_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.LimitReader.available" = weak_odr global { ptr, ptr, ptr } { ptr @std.io.LimitReader.available, ptr @"$sel.available", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.MultiReader.read" = weak_odr global { ptr, ptr, ptr } { ptr @std.io.MultiReader.read, ptr @"$sel.read", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.MultiReader.read_byte" = weak_odr global { ptr, ptr, ptr } { ptr @std.io.MultiReader.read_byte, ptr @"$sel.read_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.MultiWriter.write" = weak_odr global { ptr, ptr, ptr } { ptr @std.io.MultiWriter.write, ptr @"$sel.write", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.MultiWriter.write_byte" = weak_odr global { ptr, ptr, ptr } { ptr @std.io.MultiWriter.write_byte, ptr @"$sel.write_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.Scanner.flush" = weak_odr global { ptr, ptr, ptr } { ptr @std.io.Scanner.flush, ptr @"$sel.flush", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.Scanner.close" = weak_odr global { ptr, ptr, ptr } { ptr @std.io.Scanner.close, ptr @"$sel.close", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.Scanner.read" = weak_odr global { ptr, ptr, ptr } { ptr @std.io.Scanner.read, ptr @"$sel.read", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.Scanner.read_byte" = weak_odr global { ptr, ptr, ptr } { ptr @std.io.Scanner.read_byte, ptr @"$sel.read_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.TeeReader.read" = weak_odr global { ptr, ptr, ptr } { ptr @std.io.TeeReader.read, ptr @"$sel.read", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.TeeReader.read_byte" = weak_odr global { ptr, ptr, ptr } { ptr @std.io.TeeReader.read_byte, ptr @"$sel.read_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@llvm.global_ctors = appending global [1 x { i32, ptr, ptr }] [{ i32, ptr, ptr } { i32 1, ptr @.c3_dynamic_register, ptr null }]

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.io.BitReader.init(ptr %0, ptr align 8 %1) #0 comdat !dbg !80 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %.assign_list = alloca %BitReader, align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr9 = alloca i64, align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg13 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !96
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !96
  br i1 %3, label %panic, label %checkok, !dbg !96

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !97, !DIExpression(), !98)
    #dbg_declare(ptr %1, !99, !DIExpression(), !98)
  call void @llvm.memset.p0.i64(ptr align 8 %.assign_list, i8 0, i64 24, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %.assign_list, ptr align 8 %1, i32 16, i1 false), !dbg !100
  %4 = load ptr, ptr %self, align 8, !dbg !100
  %checknull = icmp eq ptr %4, null, !dbg !100
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !100
  br i1 %5, label %panic3, label %checkok7, !dbg !100

checkok7:                                         ; preds = %checkok
  %6 = ptrtoint ptr %4 to i64, !dbg !100
  %7 = urem i64 %6, 8, !dbg !100
  %8 = icmp ne i64 %7, 0, !dbg !100
  %9 = call i1 @llvm.expect.i1(i1 %8, i1 false), !dbg !100
  br i1 %9, label %panic8, label %checkok14, !dbg !100

checkok14:                                        ; preds = %checkok7
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %4, ptr align 8 %.assign_list, i32 24, i1 false), !dbg !100
  ret void, !dbg !100

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file, i64 7 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg2, align 8
  %10 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %10(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 10) #5, !dbg !98
  unreachable, !dbg !98

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.2, i64 45 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file, i64 7 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg6, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 12) #5, !dbg !100
  unreachable, !dbg !100

panic8:                                           ; preds = %checkok7
  store i64 8, ptr %taddr, align 8
  %12 = insertvalue %any undef, ptr %taddr, 0
  %13 = insertvalue %any %12, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %7, ptr %taddr9, align 8
  %14 = insertvalue %any undef, ptr %taddr9, 0
  %15 = insertvalue %any %14, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.file, i64 7 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg12, align 8
  store %any %13, ptr %varargslots, align 16
  %ptradd = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %15, ptr %ptradd, align 16
  %16 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %16, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg13, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, i32 12, ptr align 8 %indirectarg13) #5, !dbg !100
  unreachable, !dbg !100
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.io.BitReader.clear(ptr %0) #0 comdat !dbg !101 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !104
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !104
  br i1 %2, label %panic, label %checkok, !dbg !104

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !105, !DIExpression(), !106)
  %3 = load ptr, ptr %self, align 8, !dbg !107
  %ptradd = getelementptr inbounds i8, ptr %3, i64 20, !dbg !107
  store i32 0, ptr %ptradd, align 4, !dbg !107
  ret void, !dbg !107

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file, i64 7 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.4, i64 5 }, ptr %indirectarg2, align 8
  %4 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %4(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 15) #5, !dbg !106
  unreachable, !dbg !106
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.BitReader.read_bits(ptr %0, ptr %1, i32 %2) #0 comdat !dbg !108 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %nbits = alloca i32, align 4
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %bits = alloca i32, align 4
  %c = alloca i8, align 1
  %error_var = alloca i64, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %indirectarg16 = alloca %"char[]", align 8
  %indirectarg17 = alloca %"char[]", align 8
  %indirectarg18 = alloca %"char[]", align 8
  %retparam = alloca i8, align 1
  %mask = alloca i32, align 4
  %taddr = alloca i32, align 4
  %indirectarg25 = alloca %"char[]", align 8
  %indirectarg26 = alloca %"char[]", align 8
  %indirectarg27 = alloca %"char[]", align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg28 = alloca %"any[]", align 8
  %taddr31 = alloca i32, align 4
  %indirectarg32 = alloca %"char[]", align 8
  %indirectarg33 = alloca %"char[]", align 8
  %indirectarg34 = alloca %"char[]", align 8
  %varargslots35 = alloca [1 x %any], align 16
  %indirectarg37 = alloca %"any[]", align 8
  %reterr = alloca i64, align 8
  %taddr44 = alloca i32, align 4
  %indirectarg45 = alloca %"char[]", align 8
  %indirectarg46 = alloca %"char[]", align 8
  %indirectarg47 = alloca %"char[]", align 8
  %varargslots48 = alloca [1 x %any], align 16
  %indirectarg50 = alloca %"any[]", align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !114
  %3 = icmp eq ptr %1, null, !dbg !114
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !114
  br i1 %4, label %panic, label %checkok, !dbg !114

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !115, !DIExpression(), !116)
  store i32 %2, ptr %nbits, align 4
    #dbg_declare(ptr %nbits, !117, !DIExpression(), !116)
  %5 = load i32, ptr %nbits, align 4, !dbg !118
  %ge = icmp uge i32 8, %5, !dbg !118
  br i1 %ge, label %assert_ok, label %assert_fail, !dbg !118

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.6, i64 31 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.file, i64 7 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.func.5, i64 9 }, ptr %indirectarg5, align 8
  %6 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %6(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, i32 21) #5, !dbg !118
  unreachable, !dbg !118

assert_ok:                                        ; preds = %checkok
  %7 = load ptr, ptr %self, align 8, !dbg !120
  %ptradd = getelementptr inbounds i8, ptr %7, i64 20, !dbg !120
  %8 = load i32, ptr %ptradd, align 4, !dbg !120
  %9 = load i32, ptr %nbits, align 4, !dbg !120
  %add = add i32 %8, %9, !dbg !120
  %zext = zext i32 %add to i64, !dbg !120
  %ge6 = icmp uge i64 32, %zext, !dbg !120
  br i1 %ge6, label %assert_ok11, label %assert_fail7, !dbg !120

assert_fail7:                                     ; preds = %assert_ok
  store %"char[]" { ptr @.panic_msg.7, i64 56 }, ptr %indirectarg8, align 8
  store %"char[]" { ptr @.file, i64 7 }, ptr %indirectarg9, align 8
  store %"char[]" { ptr @.func.5, i64 9 }, ptr %indirectarg10, align 8
  %10 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %10(ptr align 8 %indirectarg8, ptr align 8 %indirectarg9, ptr align 8 %indirectarg10, i32 22) #5, !dbg !120
  unreachable, !dbg !120

assert_ok11:                                      ; preds = %assert_ok
    #dbg_declare(ptr %bits, !121, !DIExpression(), !122)
  %11 = load ptr, ptr %self, align 8, !dbg !122
  %ptradd12 = getelementptr inbounds i8, ptr %11, i64 16, !dbg !122
  %12 = load i32, ptr %ptradd12, align 8, !dbg !122
  store i32 %12, ptr %bits, align 4, !dbg !122
  %13 = load ptr, ptr %self, align 8, !dbg !123
  %ptradd13 = getelementptr inbounds i8, ptr %13, i64 20, !dbg !123
  %14 = load i32, ptr %ptradd13, align 4, !dbg !123
  %15 = load i32, ptr %nbits, align 4, !dbg !123
  %lt = icmp ult i32 %14, %15, !dbg !123
  br i1 %lt, label %if.then, label %if.exit, !dbg !123

if.then:                                          ; preds = %assert_ok11
    #dbg_declare(ptr %c, !124, !DIExpression(), !126)
  %16 = load ptr, ptr %self, align 8, !dbg !126
  %ptradd14 = getelementptr inbounds i8, ptr %16, i64 8, !dbg !126
  %17 = load i64, ptr %ptradd14, align 8, !dbg !126
  %18 = inttoptr i64 %17 to ptr, !dbg !126
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !114
  %19 = icmp eq ptr %18, %type, !dbg !114
  br i1 %19, label %cache_hit, label %cache_miss, !dbg !114

cache_miss:                                       ; preds = %if.then
  %ptradd15 = getelementptr inbounds i8, ptr %18, i64 16, !dbg !114
  %20 = load ptr, ptr %ptradd15, align 8, !dbg !114
  %21 = call ptr @.dyn_search(ptr %20, ptr @"$sel.read_byte"), !dbg !114
  store ptr %21, ptr %.inlinecache, align 8, !dbg !114
  store ptr %18, ptr %.cachedtype, align 8, !dbg !114
  br label %22, !dbg !114

cache_hit:                                        ; preds = %if.then
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !114
  br label %22, !dbg !114

22:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %21, %cache_miss ], !dbg !114
  %23 = icmp eq ptr %fn_phi, null, !dbg !114
  br i1 %23, label %missing_function, label %match, !dbg !114

missing_function:                                 ; preds = %22
  store %"char[]" { ptr @.panic_msg.8, i64 46 }, ptr %indirectarg16, align 8
  store %"char[]" { ptr @.file, i64 7 }, ptr %indirectarg17, align 8
  store %"char[]" { ptr @.func.5, i64 9 }, ptr %indirectarg18, align 8
  %24 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %24(ptr align 8 %indirectarg16, ptr align 8 %indirectarg17, ptr align 8 %indirectarg18, i32 30) #5, !dbg !126
  unreachable, !dbg !126

match:                                            ; preds = %22
  %25 = load ptr, ptr %16, align 8
  %26 = call i64 %fn_phi(ptr %retparam, ptr %25), !dbg !126
  %not_err = icmp eq i64 %26, 0, !dbg !126
  %27 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !126
  br i1 %27, label %after_check, label %assign_optional, !dbg !126

assign_optional:                                  ; preds = %match
  store i64 %26, ptr %error_var, align 8, !dbg !126
  br label %guard_block, !dbg !126

after_check:                                      ; preds = %match
  br label %noerr_block, !dbg !126

guard_block:                                      ; preds = %assign_optional
  %28 = load i64, ptr %error_var, align 8, !dbg !126
  ret i64 %28, !dbg !126

noerr_block:                                      ; preds = %after_check
  %29 = load i8, ptr %retparam, align 1, !dbg !126
  store i8 %29, ptr %c, align 1, !dbg !126
  %30 = load i32, ptr %bits, align 4, !dbg !127
  %shl = shl i32 %30, 8, !dbg !127
  %31 = freeze i32 %shl, !dbg !127
  store i32 %31, ptr %bits, align 4, !dbg !127
  %32 = load i32, ptr %bits, align 4, !dbg !128
  %33 = load i8, ptr %c, align 1, !dbg !128
  %zext19 = zext i8 %33 to i32, !dbg !128
  %or = or i32 %32, %zext19, !dbg !128
  store i32 %or, ptr %bits, align 4, !dbg !128
  %34 = load ptr, ptr %self, align 8, !dbg !129
  %ptradd20 = getelementptr inbounds i8, ptr %34, i64 16, !dbg !129
  %35 = load i32, ptr %bits, align 4, !dbg !129
  store i32 %35, ptr %ptradd20, align 8, !dbg !129
  %36 = load ptr, ptr %self, align 8, !dbg !130
  %ptradd21 = getelementptr inbounds i8, ptr %36, i64 20, !dbg !130
  %37 = load i32, ptr %ptradd21, align 4, !dbg !130
  %add22 = add i32 %37, 8, !dbg !130
  store i32 %add22, ptr %ptradd21, align 4, !dbg !130
  br label %if.exit, !dbg !130

if.exit:                                          ; preds = %noerr_block, %assert_ok11
  %38 = load ptr, ptr %self, align 8, !dbg !131
  %ptradd23 = getelementptr inbounds i8, ptr %38, i64 20, !dbg !131
  %39 = load i32, ptr %ptradd23, align 4, !dbg !131
  %40 = load i32, ptr %nbits, align 4, !dbg !131
  %sub = sub i32 %39, %40, !dbg !131
  store i32 %sub, ptr %ptradd23, align 4, !dbg !131
    #dbg_declare(ptr %mask, !132, !DIExpression(), !133)
  %41 = load i32, ptr %nbits, align 4, !dbg !133
  %shift_underflow = icmp slt i32 %41, 0, !dbg !133
  %42 = call i1 @llvm.expect.i1(i1 %shift_underflow, i1 false), !dbg !133
  br i1 %42, label %panic24, label %checkok29, !dbg !133

checkok29:                                        ; preds = %if.exit
  %shift_exceeds = icmp sge i32 %41, 32, !dbg !133
  %43 = call i1 @llvm.expect.i1(i1 %shift_exceeds, i1 false), !dbg !133
  br i1 %43, label %panic30, label %checkok38, !dbg !133

checkok38:                                        ; preds = %checkok29
  %shl39 = shl i32 1, %41, !dbg !133
  %44 = freeze i32 %shl39, !dbg !133
  %sub40 = sub i32 %44, 1, !dbg !133
  store i32 %sub40, ptr %mask, align 4, !dbg !133
  %45 = load i32, ptr %bits, align 4, !dbg !134
  %46 = load ptr, ptr %self, align 8, !dbg !134
  %ptradd41 = getelementptr inbounds i8, ptr %46, i64 20, !dbg !134
  %47 = load i32, ptr %ptradd41, align 4, !dbg !134
  %shift_exceeds42 = icmp uge i32 %47, 32, !dbg !134
  %48 = call i1 @llvm.expect.i1(i1 %shift_exceeds42, i1 false), !dbg !134
  br i1 %48, label %panic43, label %checkok51, !dbg !134

checkok51:                                        ; preds = %checkok38
  %lshr = lshr i32 %45, %47, !dbg !134
  %49 = freeze i32 %lshr, !dbg !134
  %50 = load i32, ptr %mask, align 4, !dbg !134
  %and = and i32 %49, %50, !dbg !134
  %trunc = trunc i32 %and to i8, !dbg !134
  store i8 %trunc, ptr %0, align 1, !dbg !134
  ret i64 0, !dbg !134

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file, i64 7 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.5, i64 9 }, ptr %indirectarg2, align 8
  %51 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %51(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 24) #5, !dbg !116
  unreachable, !dbg !116

panic24:                                          ; preds = %if.exit
  store i32 %41, ptr %taddr, align 4
  %52 = insertvalue %any undef, ptr %taddr, 0
  %53 = insertvalue %any %52, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 35 }, ptr %indirectarg25, align 8
  store %"char[]" { ptr @.file, i64 7 }, ptr %indirectarg26, align 8
  store %"char[]" { ptr @.func.5, i64 9 }, ptr %indirectarg27, align 8
  store %any %53, ptr %varargslots, align 16
  %54 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %54, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg28, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg25, ptr align 8 %indirectarg26, ptr align 8 %indirectarg27, i32 37, ptr align 8 %indirectarg28) #5, !dbg !133
  unreachable, !dbg !133

panic30:                                          ; preds = %checkok29
  store i32 %41, ptr %taddr31, align 4
  %55 = insertvalue %any undef, ptr %taddr31, 0
  %56 = insertvalue %any %55, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 35 }, ptr %indirectarg32, align 8
  store %"char[]" { ptr @.file, i64 7 }, ptr %indirectarg33, align 8
  store %"char[]" { ptr @.func.5, i64 9 }, ptr %indirectarg34, align 8
  store %any %56, ptr %varargslots35, align 16
  %57 = insertvalue %"any[]" undef, ptr %varargslots35, 0
  %"$$temp36" = insertvalue %"any[]" %57, i64 1, 1
  store %"any[]" %"$$temp36", ptr %indirectarg37, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg32, ptr align 8 %indirectarg33, ptr align 8 %indirectarg34, i32 37, ptr align 8 %indirectarg37) #5, !dbg !133
  unreachable, !dbg !133

panic43:                                          ; preds = %checkok38
  store i32 %47, ptr %taddr44, align 4
  %58 = insertvalue %any undef, ptr %taddr44, 0
  %59 = insertvalue %any %58, i64 ptrtoint (ptr @"$ct.uint" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 35 }, ptr %indirectarg45, align 8
  store %"char[]" { ptr @.file, i64 7 }, ptr %indirectarg46, align 8
  store %"char[]" { ptr @.func.5, i64 9 }, ptr %indirectarg47, align 8
  store %any %59, ptr %varargslots48, align 16
  %60 = insertvalue %"any[]" undef, ptr %varargslots48, 0
  %"$$temp49" = insertvalue %"any[]" %60, i64 1, 1
  store %"any[]" %"$$temp49", ptr %indirectarg50, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg45, ptr align 8 %indirectarg46, ptr align 8 %indirectarg47, i32 38, ptr align 8 %indirectarg50) #5, !dbg !134
  unreachable, !dbg !134
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.io.BitWriter.init(ptr %0, ptr align 8 %1) #0 comdat !dbg !135 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %.assign_list = alloca %BitWriter, align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr9 = alloca i64, align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg13 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !148
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !148
  br i1 %3, label %panic, label %checkok, !dbg !148

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !149, !DIExpression(), !150)
    #dbg_declare(ptr %1, !151, !DIExpression(), !150)
  call void @llvm.memset.p0.i64(ptr align 8 %.assign_list, i8 0, i64 24, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %.assign_list, ptr align 8 %1, i32 16, i1 false), !dbg !152
  %4 = load ptr, ptr %self, align 8, !dbg !152
  %checknull = icmp eq ptr %4, null, !dbg !152
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !152
  br i1 %5, label %panic3, label %checkok7, !dbg !152

checkok7:                                         ; preds = %checkok
  %6 = ptrtoint ptr %4 to i64, !dbg !152
  %7 = urem i64 %6, 8, !dbg !152
  %8 = icmp ne i64 %7, 0, !dbg !152
  %9 = call i1 @llvm.expect.i1(i1 %8, i1 false), !dbg !152
  br i1 %9, label %panic8, label %checkok14, !dbg !152

checkok14:                                        ; preds = %checkok7
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %4, ptr align 8 %.assign_list, i32 24, i1 false), !dbg !152
  ret void, !dbg !152

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file, i64 7 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg2, align 8
  %10 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %10(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 52) #5, !dbg !150
  unreachable, !dbg !150

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.2, i64 45 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file, i64 7 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg6, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 54) #5, !dbg !152
  unreachable, !dbg !152

panic8:                                           ; preds = %checkok7
  store i64 8, ptr %taddr, align 8
  %12 = insertvalue %any undef, ptr %taddr, 0
  %13 = insertvalue %any %12, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %7, ptr %taddr9, align 8
  %14 = insertvalue %any undef, ptr %taddr9, 0
  %15 = insertvalue %any %14, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.file, i64 7 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg12, align 8
  store %any %13, ptr %varargslots, align 16
  %ptradd = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %15, ptr %ptradd, align 16
  %16 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %16, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg13, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, i32 54, ptr align 8 %indirectarg13) #5, !dbg !152
  unreachable, !dbg !152
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.BitWriter.flush(ptr %0) #0 comdat !dbg !153 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %reterr = alloca i64, align 8
  %padding = alloca i32, align 4
  %bits = alloca i32, align 4
  %taddr = alloca i32, align 4
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg7 = alloca %"char[]", align 8
  %indirectarg8 = alloca %"char[]", align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg9 = alloca %"any[]", align 8
  %n = alloca i32, align 4
  %buffer = alloca [4 x i8], align 1
  %x = alloca i32, align 4
  %bytes = alloca ptr, align 8
  %s = alloca %"char[]", align 8
  %indirectarg16 = alloca %"char[]", align 8
  %indirectarg17 = alloca %"char[]", align 8
  %indirectarg18 = alloca %"char[]", align 8
  %expr = alloca i32, align 4
  %indirectarg22 = alloca %"char[]", align 8
  %indirectarg23 = alloca %"char[]", align 8
  %indirectarg24 = alloca %"char[]", align 8
  %taddr27 = alloca i64, align 8
  %taddr28 = alloca i64, align 8
  %indirectarg29 = alloca %"char[]", align 8
  %indirectarg30 = alloca %"char[]", align 8
  %indirectarg31 = alloca %"char[]", align 8
  %varargslots32 = alloca [2 x %any], align 16
  %indirectarg35 = alloca %"any[]", align 8
  %indirectarg39 = alloca %"char[]", align 8
  %indirectarg40 = alloca %"char[]", align 8
  %indirectarg41 = alloca %"char[]", align 8
  %taddr44 = alloca i64, align 8
  %taddr45 = alloca i64, align 8
  %indirectarg46 = alloca %"char[]", align 8
  %indirectarg47 = alloca %"char[]", align 8
  %indirectarg48 = alloca %"char[]", align 8
  %varargslots49 = alloca [2 x %any], align 16
  %indirectarg52 = alloca %"any[]", align 8
  %error_var = alloca i64, align 8
  %stream = alloca %any, align 8
  %taddr58 = alloca i64, align 8
  %indirectarg59 = alloca %"char[]", align 8
  %indirectarg60 = alloca %"char[]", align 8
  %indirectarg61 = alloca %"char[]", align 8
  %varargslots62 = alloca [1 x %any], align 16
  %indirectarg64 = alloca %"any[]", align 8
  %taddr68 = alloca i64, align 8
  %taddr69 = alloca i64, align 8
  %indirectarg70 = alloca %"char[]", align 8
  %indirectarg71 = alloca %"char[]", align 8
  %indirectarg72 = alloca %"char[]", align 8
  %varargslots73 = alloca [2 x %any], align 16
  %indirectarg76 = alloca %"any[]", align 8
  %buffer78 = alloca %"char[]", align 8
  %blockret = alloca i64, align 8
  %n83 = alloca i64, align 8
  %error_var84 = alloca i64, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %indirectarg87 = alloca %"char[]", align 8
  %indirectarg88 = alloca %"char[]", align 8
  %indirectarg89 = alloca %"char[]", align 8
  %retparam = alloca i64, align 8
  %indirectarg90 = alloca %"char[]", align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !156
  %1 = icmp eq ptr %0, null, !dbg !156
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !156
  br i1 %2, label %panic, label %checkok, !dbg !156

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !157, !DIExpression(), !158)
  %3 = load ptr, ptr %self, align 8, !dbg !159
  %ptradd = getelementptr inbounds i8, ptr %3, i64 20, !dbg !159
  %4 = load i32, ptr %ptradd, align 4, !dbg !159
  %eq = icmp eq i32 0, %4, !dbg !159
  br i1 %eq, label %if.then, label %if.exit, !dbg !159

if.then:                                          ; preds = %checkok
  ret i64 0

if.exit:                                          ; preds = %checkok
    #dbg_declare(ptr %padding, !160, !DIExpression(), !161)
  %5 = load ptr, ptr %self, align 8, !dbg !161
  %ptradd3 = getelementptr inbounds i8, ptr %5, i64 20, !dbg !161
  %6 = load i32, ptr %ptradd3, align 4, !dbg !161
  %zext = zext i32 %6 to i64, !dbg !161
  %sub = sub i64 32, %zext, !dbg !161
  %trunc = trunc i64 %sub to i32, !dbg !161
  store i32 %trunc, ptr %padding, align 4, !dbg !161
    #dbg_declare(ptr %bits, !162, !DIExpression(), !163)
  %7 = load ptr, ptr %self, align 8, !dbg !163
  %ptradd4 = getelementptr inbounds i8, ptr %7, i64 16, !dbg !163
  %8 = load i32, ptr %ptradd4, align 8, !dbg !163
  %9 = load i32, ptr %padding, align 4, !dbg !163
  %shift_exceeds = icmp uge i32 %9, 32, !dbg !163
  %10 = call i1 @llvm.expect.i1(i1 %shift_exceeds, i1 false), !dbg !163
  br i1 %10, label %panic5, label %checkok10, !dbg !163

checkok10:                                        ; preds = %if.exit
  %shl = shl i32 %8, %9, !dbg !163
  %11 = freeze i32 %shl, !dbg !163
  store i32 %11, ptr %bits, align 4, !dbg !163
    #dbg_declare(ptr %n, !164, !DIExpression(), !165)
  %12 = load ptr, ptr %self, align 8, !dbg !165
  %ptradd11 = getelementptr inbounds i8, ptr %12, i64 20, !dbg !165
  %13 = load i32, ptr %ptradd11, align 4, !dbg !165
  %add = add i32 %13, 7, !dbg !165
  %sdiv = sdiv i32 %add, 8, !dbg !165
  store i32 %sdiv, ptr %n, align 4, !dbg !165
    #dbg_declare(ptr %buffer, !166, !DIExpression(), !170)
  store i8 0, ptr %buffer, align 1, !dbg !170
  %ptradd12 = getelementptr inbounds i8, ptr %buffer, i64 1, !dbg !170
  store i8 0, ptr %ptradd12, align 1, !dbg !170
  %ptradd13 = getelementptr inbounds i8, ptr %buffer, i64 2, !dbg !170
  store i8 0, ptr %ptradd13, align 1, !dbg !170
  %ptradd14 = getelementptr inbounds i8, ptr %buffer, i64 3, !dbg !170
  store i8 0, ptr %ptradd14, align 1, !dbg !170
  %14 = load i32, ptr %bits, align 4
  store i32 %14, ptr %x, align 4
  store ptr %buffer, ptr %bytes, align 8
    #dbg_declare(ptr %s, !171, !DIExpression(), !180)
  call void @llvm.memset.p0.i64(ptr align 8 %s, i8 0, i64 16, i1 false), !dbg !180
  %15 = load ptr, ptr %bytes, align 8, !dbg !182
  %checknull = icmp eq ptr %15, null, !dbg !182
  %16 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !182
  br i1 %16, label %panic15, label %checkok19, !dbg !182

checkok19:                                        ; preds = %checkok10
  %17 = insertvalue %"char[]" undef, ptr %15, 0, !dbg !182
  %18 = insertvalue %"char[]" %17, i64 4, 1, !dbg !182
  store %"char[]" %18, ptr %s, align 8, !dbg !182
  %19 = load i32, ptr %x, align 4
  store i32 %19, ptr %expr, align 4
  %checknull20 = icmp eq ptr %expr, null, !dbg !183
  %20 = call i1 @llvm.expect.i1(i1 %checknull20, i1 false), !dbg !183
  br i1 %20, label %panic21, label %checkok25, !dbg !183

checkok25:                                        ; preds = %checkok19
  %21 = ptrtoint ptr %expr to i64, !dbg !183
  %22 = urem i64 %21, 4, !dbg !183
  %23 = icmp ne i64 %22, 0, !dbg !183
  %24 = call i1 @llvm.expect.i1(i1 %23, i1 false), !dbg !183
  br i1 %24, label %panic26, label %checkok36, !dbg !183

checkok36:                                        ; preds = %checkok25
  %25 = load i32, ptr %expr, align 4, !dbg !183
  %26 = call i32 @llvm.bswap.i32(i32 %25), !dbg !183
  %27 = load ptr, ptr %s, align 8, !dbg !186
  %checknull37 = icmp eq ptr %27, null, !dbg !186
  %28 = call i1 @llvm.expect.i1(i1 %checknull37, i1 false), !dbg !186
  br i1 %28, label %panic38, label %checkok42, !dbg !186

checkok42:                                        ; preds = %checkok36
  %29 = ptrtoint ptr %27 to i64, !dbg !186
  %30 = urem i64 %29, 4, !dbg !186
  %31 = icmp ne i64 %30, 0, !dbg !186
  %32 = call i1 @llvm.expect.i1(i1 %31, i1 false), !dbg !186
  br i1 %32, label %panic43, label %checkok53, !dbg !186

checkok53:                                        ; preds = %checkok42
  store i32 %26, ptr %27, align 4, !dbg !186
  %33 = load ptr, ptr %self, align 8, !dbg !187
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %stream, ptr align 8 %33, i32 16, i1 false)
  %34 = load i32, ptr %n, align 4, !dbg !187
  %zext54 = zext i32 %34 to i64, !dbg !187
  %add55 = add i64 0, %zext54, !dbg !187
  %gt = icmp ugt i64 0, %add55, !dbg !187
  %sub56 = sub i64 %add55, 0, !dbg !187
  %35 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !187
  br i1 %35, label %panic57, label %checkok65, !dbg !187

checkok65:                                        ; preds = %checkok53
  %lt = icmp ult i64 4, %add55, !dbg !187
  %sub66 = sub i64 %add55, 1, !dbg !187
  %36 = call i1 @llvm.expect.i1(i1 %lt, i1 false), !dbg !187
  br i1 %36, label %panic67, label %checkok77, !dbg !187

checkok77:                                        ; preds = %checkok65
  %size = sub i64 %add55, 0, !dbg !187
  %37 = insertvalue %"char[]" undef, ptr %buffer, 0, !dbg !187
  %38 = insertvalue %"char[]" %37, i64 %size, 1, !dbg !187
  store %"char[]" %38, ptr %buffer78, align 8
  %ptradd79 = getelementptr inbounds i8, ptr %buffer78, i64 8, !dbg !188
  %39 = load i64, ptr %ptradd79, align 8, !dbg !188
  %eq80 = icmp eq i64 0, %39, !dbg !188
  br i1 %eq80, label %if.then81, label %if.exit82, !dbg !188

if.then81:                                        ; preds = %checkok77
  store i64 0, ptr %blockret, align 8, !dbg !188
  br label %expr_block.exit, !dbg !188

if.exit82:                                        ; preds = %checkok77
    #dbg_declare(ptr %n83, !190, !DIExpression(), !191)
  %ptradd85 = getelementptr inbounds i8, ptr %stream, i64 8, !dbg !191
  %40 = load i64, ptr %ptradd85, align 8, !dbg !191
  %41 = inttoptr i64 %40 to ptr, !dbg !191
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !156
  %42 = icmp eq ptr %41, %type, !dbg !156
  br i1 %42, label %cache_hit, label %cache_miss, !dbg !156

cache_miss:                                       ; preds = %if.exit82
  %ptradd86 = getelementptr inbounds i8, ptr %41, i64 16, !dbg !156
  %43 = load ptr, ptr %ptradd86, align 8, !dbg !156
  %44 = call ptr @.dyn_search(ptr %43, ptr @"$sel.write"), !dbg !156
  store ptr %44, ptr %.inlinecache, align 8, !dbg !156
  store ptr %41, ptr %.cachedtype, align 8, !dbg !156
  br label %45, !dbg !156

cache_hit:                                        ; preds = %if.exit82
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !156
  br label %45, !dbg !156

45:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %44, %cache_miss ], !dbg !156
  %46 = icmp eq ptr %fn_phi, null, !dbg !156
  br i1 %46, label %missing_function, label %match, !dbg !156

missing_function:                                 ; preds = %45
  store %"char[]" { ptr @.panic_msg.18, i64 42 }, ptr %indirectarg87, align 8
  store %"char[]" { ptr @.file.19, i64 9 }, ptr %indirectarg88, align 8
  store %"char[]" { ptr @.func.10, i64 5 }, ptr %indirectarg89, align 8
  %47 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %47(ptr align 8 %indirectarg87, ptr align 8 %indirectarg88, ptr align 8 %indirectarg89, i32 102) #5, !dbg !191
  unreachable, !dbg !191

match:                                            ; preds = %45
  %48 = load ptr, ptr %stream, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg90, ptr align 8 %buffer78, i32 16, i1 false)
  %49 = call i64 %fn_phi(ptr %retparam, ptr %48, ptr align 8 %indirectarg90), !dbg !191
  %not_err = icmp eq i64 %49, 0, !dbg !191
  %50 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !191
  br i1 %50, label %after_check, label %assign_optional, !dbg !191

assign_optional:                                  ; preds = %match
  store i64 %49, ptr %error_var84, align 8, !dbg !191
  br label %guard_block, !dbg !191

after_check:                                      ; preds = %match
  br label %noerr_block, !dbg !191

guard_block:                                      ; preds = %assign_optional
  %51 = load i64, ptr %error_var84, align 8, !dbg !191
  store i64 %51, ptr %error_var, align 8, !dbg !191
  br label %guard_block94, !dbg !191

noerr_block:                                      ; preds = %after_check
  %52 = load i64, ptr %retparam, align 8, !dbg !191
  store i64 %52, ptr %n83, align 8, !dbg !191
  %53 = load i64, ptr %n83, align 8, !dbg !192
  %ptradd91 = getelementptr inbounds i8, ptr %buffer78, i64 8, !dbg !192
  %54 = load i64, ptr %ptradd91, align 8, !dbg !192
  %neq = icmp ne i64 %53, %54, !dbg !192
  br i1 %neq, label %if.then92, label %if.exit93, !dbg !192

if.then92:                                        ; preds = %noerr_block
  store i64 ptrtoint (ptr @std.io.INCOMPLETE_WRITE to i64), ptr %error_var, align 8, !dbg !192
  br label %guard_block94, !dbg !192

if.exit93:                                        ; preds = %noerr_block
  %55 = load i64, ptr %n83, align 8, !dbg !193
  store i64 %55, ptr %blockret, align 8, !dbg !193
  br label %expr_block.exit, !dbg !193

expr_block.exit:                                  ; preds = %if.exit93, %if.then81
  br label %noerr_block95, !dbg !193

guard_block94:                                    ; preds = %if.then92, %guard_block
  %56 = load i64, ptr %error_var, align 8, !dbg !193
  ret i64 %56, !dbg !193

noerr_block95:                                    ; preds = %expr_block.exit
  %57 = load ptr, ptr %self, align 8, !dbg !194
  %ptradd96 = getelementptr inbounds i8, ptr %57, i64 20, !dbg !194
  store i32 0, ptr %ptradd96, align 4, !dbg !194
  ret i64 0, !dbg !194

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file, i64 7 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.10, i64 5 }, ptr %indirectarg2, align 8
  %58 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %58(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 57) #5, !dbg !158
  unreachable, !dbg !158

panic5:                                           ; preds = %if.exit
  store i32 %9, ptr %taddr, align 4
  %59 = insertvalue %any undef, ptr %taddr, 0
  %60 = insertvalue %any %59, i64 ptrtoint (ptr @"$ct.uint" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 35 }, ptr %indirectarg6, align 8
  store %"char[]" { ptr @.file, i64 7 }, ptr %indirectarg7, align 8
  store %"char[]" { ptr @.func.10, i64 5 }, ptr %indirectarg8, align 8
  store %any %60, ptr %varargslots, align 16
  %61 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %61, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg9, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg6, ptr align 8 %indirectarg7, ptr align 8 %indirectarg8, i32 62, ptr align 8 %indirectarg9) #5, !dbg !163
  unreachable, !dbg !163

panic15:                                          ; preds = %checkok10
  store %"char[]" { ptr @.panic_msg.11, i64 46 }, ptr %indirectarg16, align 8
  store %"char[]" { ptr @.file.12, i64 11 }, ptr %indirectarg17, align 8
  store %"char[]" { ptr @.func.10, i64 5 }, ptr %indirectarg18, align 8
  %62 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %62(ptr align 8 %indirectarg16, ptr align 8 %indirectarg17, ptr align 8 %indirectarg18, i32 115) #5, !dbg !182
  unreachable, !dbg !182

panic21:                                          ; preds = %checkok19
  store %"char[]" { ptr @.panic_msg.13, i64 54 }, ptr %indirectarg22, align 8
  store %"char[]" { ptr @.file.14, i64 10 }, ptr %indirectarg23, align 8
  store %"char[]" { ptr @.func.10, i64 5 }, ptr %indirectarg24, align 8
  %63 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %63(ptr align 8 %indirectarg22, ptr align 8 %indirectarg23, ptr align 8 %indirectarg24, i32 281) #5, !dbg !183
  unreachable, !dbg !183

panic26:                                          ; preds = %checkok25
  store i64 4, ptr %taddr27, align 8
  %64 = insertvalue %any undef, ptr %taddr27, 0
  %65 = insertvalue %any %64, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %22, ptr %taddr28, align 8
  %66 = insertvalue %any undef, ptr %taddr28, 0
  %67 = insertvalue %any %66, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg29, align 8
  store %"char[]" { ptr @.file.14, i64 10 }, ptr %indirectarg30, align 8
  store %"char[]" { ptr @.func.10, i64 5 }, ptr %indirectarg31, align 8
  store %any %65, ptr %varargslots32, align 16
  %ptradd33 = getelementptr inbounds i8, ptr %varargslots32, i64 16
  store %any %67, ptr %ptradd33, align 16
  %68 = insertvalue %"any[]" undef, ptr %varargslots32, 0
  %"$$temp34" = insertvalue %"any[]" %68, i64 2, 1
  store %"any[]" %"$$temp34", ptr %indirectarg35, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg29, ptr align 8 %indirectarg30, ptr align 8 %indirectarg31, i32 281, ptr align 8 %indirectarg35) #5, !dbg !183
  unreachable, !dbg !183

panic38:                                          ; preds = %checkok36
  store %"char[]" { ptr @.panic_msg.15, i64 59 }, ptr %indirectarg39, align 8
  store %"char[]" { ptr @.file.12, i64 11 }, ptr %indirectarg40, align 8
  store %"char[]" { ptr @.func.10, i64 5 }, ptr %indirectarg41, align 8
  %69 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %69(ptr align 8 %indirectarg39, ptr align 8 %indirectarg40, ptr align 8 %indirectarg41, i32 119) #5, !dbg !186
  unreachable, !dbg !186

panic43:                                          ; preds = %checkok42
  store i64 4, ptr %taddr44, align 8
  %70 = insertvalue %any undef, ptr %taddr44, 0
  %71 = insertvalue %any %70, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %30, ptr %taddr45, align 8
  %72 = insertvalue %any undef, ptr %taddr45, 0
  %73 = insertvalue %any %72, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg46, align 8
  store %"char[]" { ptr @.file.12, i64 11 }, ptr %indirectarg47, align 8
  store %"char[]" { ptr @.func.10, i64 5 }, ptr %indirectarg48, align 8
  store %any %71, ptr %varargslots49, align 16
  %ptradd50 = getelementptr inbounds i8, ptr %varargslots49, i64 16
  store %any %73, ptr %ptradd50, align 16
  %74 = insertvalue %"any[]" undef, ptr %varargslots49, 0
  %"$$temp51" = insertvalue %"any[]" %74, i64 2, 1
  store %"any[]" %"$$temp51", ptr %indirectarg52, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg46, ptr align 8 %indirectarg47, ptr align 8 %indirectarg48, i32 119, ptr align 8 %indirectarg52) #5, !dbg !186
  unreachable, !dbg !186

panic57:                                          ; preds = %checkok53
  store i64 %sub56, ptr %taddr58, align 8
  %75 = insertvalue %any undef, ptr %taddr58, 0
  %76 = insertvalue %any %75, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.16, i64 43 }, ptr %indirectarg59, align 8
  store %"char[]" { ptr @.file, i64 7 }, ptr %indirectarg60, align 8
  store %"char[]" { ptr @.func.10, i64 5 }, ptr %indirectarg61, align 8
  store %any %76, ptr %varargslots62, align 16
  %77 = insertvalue %"any[]" undef, ptr %varargslots62, 0
  %"$$temp63" = insertvalue %"any[]" %77, i64 1, 1
  store %"any[]" %"$$temp63", ptr %indirectarg64, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg59, ptr align 8 %indirectarg60, ptr align 8 %indirectarg61, i32 66, ptr align 8 %indirectarg64) #5, !dbg !187
  unreachable, !dbg !187

panic67:                                          ; preds = %checkok65
  store i64 %sub66, ptr %taddr68, align 8
  %78 = insertvalue %any undef, ptr %taddr68, 0
  %79 = insertvalue %any %78, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 4, ptr %taddr69, align 8
  %80 = insertvalue %any undef, ptr %taddr69, 0
  %81 = insertvalue %any %80, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 60 }, ptr %indirectarg70, align 8
  store %"char[]" { ptr @.file, i64 7 }, ptr %indirectarg71, align 8
  store %"char[]" { ptr @.func.10, i64 5 }, ptr %indirectarg72, align 8
  store %any %79, ptr %varargslots73, align 16
  %ptradd74 = getelementptr inbounds i8, ptr %varargslots73, i64 16
  store %any %81, ptr %ptradd74, align 16
  %82 = insertvalue %"any[]" undef, ptr %varargslots73, 0
  %"$$temp75" = insertvalue %"any[]" %82, i64 2, 1
  store %"any[]" %"$$temp75", ptr %indirectarg76, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg70, ptr align 8 %indirectarg71, ptr align 8 %indirectarg72, i32 66, ptr align 8 %indirectarg76) #5, !dbg !187
  unreachable, !dbg !187
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.BitWriter.write_bits(ptr %0, i32 %1, i32 %2) #0 comdat !dbg !195 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %bits = alloca i32, align 4
  %nbits = alloca i32, align 4
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %reterr = alloca i64, align 8
  %to_push = alloca i32, align 4
  %bits_to_push = alloca i32, align 4
  %taddr = alloca i32, align 4
  %indirectarg9 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg12 = alloca %"any[]", align 8
  %taddr15 = alloca i32, align 4
  %indirectarg16 = alloca %"char[]", align 8
  %indirectarg17 = alloca %"char[]", align 8
  %indirectarg18 = alloca %"char[]", align 8
  %varargslots19 = alloca [1 x %any], align 16
  %indirectarg21 = alloca %"any[]", align 8
  %taddr25 = alloca i32, align 4
  %indirectarg26 = alloca %"char[]", align 8
  %indirectarg27 = alloca %"char[]", align 8
  %indirectarg28 = alloca %"char[]", align 8
  %varargslots29 = alloca [1 x %any], align 16
  %indirectarg31 = alloca %"any[]", align 8
  %taddr37 = alloca i32, align 4
  %indirectarg38 = alloca %"char[]", align 8
  %indirectarg39 = alloca %"char[]", align 8
  %indirectarg40 = alloca %"char[]", align 8
  %varargslots41 = alloca [1 x %any], align 16
  %indirectarg43 = alloca %"any[]", align 8
  %error_var = alloca i64, align 8
  %reterr52 = alloca i64, align 8
  %taddr57 = alloca i32, align 4
  %indirectarg58 = alloca %"char[]", align 8
  %indirectarg59 = alloca %"char[]", align 8
  %indirectarg60 = alloca %"char[]", align 8
  %varargslots61 = alloca [1 x %any], align 16
  %indirectarg63 = alloca %"any[]", align 8
  %taddr69 = alloca i32, align 4
  %indirectarg70 = alloca %"char[]", align 8
  %indirectarg71 = alloca %"char[]", align 8
  %indirectarg72 = alloca %"char[]", align 8
  %varargslots73 = alloca [1 x %any], align 16
  %indirectarg75 = alloca %"any[]", align 8
  %taddr79 = alloca i32, align 4
  %indirectarg80 = alloca %"char[]", align 8
  %indirectarg81 = alloca %"char[]", align 8
  %indirectarg82 = alloca %"char[]", align 8
  %varargslots83 = alloca [1 x %any], align 16
  %indirectarg85 = alloca %"any[]", align 8
  %3 = icmp eq ptr %0, null, !dbg !198
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !198
  br i1 %4, label %panic, label %checkok, !dbg !198

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !199, !DIExpression(), !200)
  store i32 %1, ptr %bits, align 4
    #dbg_declare(ptr %bits, !201, !DIExpression(), !200)
  store i32 %2, ptr %nbits, align 4
    #dbg_declare(ptr %nbits, !202, !DIExpression(), !200)
  %5 = load i32, ptr %nbits, align 4, !dbg !203
  %ge = icmp uge i32 32, %5, !dbg !203
  br i1 %ge, label %assert_ok, label %assert_fail, !dbg !203

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.21, i64 32 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.file, i64 7 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg5, align 8
  %6 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %6(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, i32 71) #5, !dbg !203
  unreachable, !dbg !203

assert_ok:                                        ; preds = %checkok
  %7 = load i32, ptr %nbits, align 4, !dbg !205
  %eq = icmp eq i32 0, %7, !dbg !205
  br i1 %eq, label %if.then, label %if.exit, !dbg !205

if.then:                                          ; preds = %assert_ok
  ret i64 0

if.exit:                                          ; preds = %assert_ok
  br label %loop.cond, !dbg !206

loop.cond:                                        ; preds = %noerr_block, %if.exit
  %8 = load ptr, ptr %self, align 8, !dbg !207
  %ptradd = getelementptr inbounds i8, ptr %8, i64 20, !dbg !207
  %9 = load i32, ptr %ptradd, align 4, !dbg !207
  %10 = load i32, ptr %nbits, align 4, !dbg !207
  %add = add i32 %9, %10, !dbg !207
  %lt = icmp ult i32 24, %add, !dbg !207
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !207

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %to_push, !209, !DIExpression(), !211)
  %11 = load ptr, ptr %self, align 8, !dbg !211
  %ptradd6 = getelementptr inbounds i8, ptr %11, i64 20, !dbg !211
  %12 = load i32, ptr %ptradd6, align 4, !dbg !211
  %sub = sub i32 24, %12, !dbg !211
  store i32 %sub, ptr %to_push, align 4, !dbg !211
    #dbg_declare(ptr %bits_to_push, !212, !DIExpression(), !213)
  %13 = load i32, ptr %bits, align 4, !dbg !213
  %14 = load i32, ptr %nbits, align 4, !dbg !213
  %15 = load i32, ptr %to_push, align 4, !dbg !213
  %sub7 = sub i32 %14, %15, !dbg !213
  %shift_exceeds = icmp uge i32 %sub7, 32, !dbg !213
  %16 = call i1 @llvm.expect.i1(i1 %shift_exceeds, i1 false), !dbg !213
  br i1 %16, label %panic8, label %checkok13, !dbg !213

checkok13:                                        ; preds = %loop.body
  %lshr = lshr i32 %13, %sub7, !dbg !213
  %17 = freeze i32 %lshr, !dbg !213
  %18 = load i32, ptr %to_push, align 4, !dbg !213
  %shift_underflow = icmp slt i32 %18, 0, !dbg !213
  %19 = call i1 @llvm.expect.i1(i1 %shift_underflow, i1 false), !dbg !213
  br i1 %19, label %panic14, label %checkok22, !dbg !213

checkok22:                                        ; preds = %checkok13
  %shift_exceeds23 = icmp sge i32 %18, 32, !dbg !213
  %20 = call i1 @llvm.expect.i1(i1 %shift_exceeds23, i1 false), !dbg !213
  br i1 %20, label %panic24, label %checkok32, !dbg !213

checkok32:                                        ; preds = %checkok22
  %shl = shl i32 1, %18, !dbg !213
  %21 = freeze i32 %shl, !dbg !213
  %sub33 = sub i32 %21, 1, !dbg !213
  %and = and i32 %17, %sub33, !dbg !213
  store i32 %and, ptr %bits_to_push, align 4, !dbg !213
  %22 = load ptr, ptr %self, align 8, !dbg !214
  %ptradd34 = getelementptr inbounds i8, ptr %22, i64 16, !dbg !214
  %23 = load i32, ptr %ptradd34, align 8, !dbg !214
  %24 = load i32, ptr %to_push, align 4, !dbg !214
  %shift_exceeds35 = icmp uge i32 %24, 32, !dbg !214
  %25 = call i1 @llvm.expect.i1(i1 %shift_exceeds35, i1 false), !dbg !214
  br i1 %25, label %panic36, label %checkok44, !dbg !214

checkok44:                                        ; preds = %checkok32
  %shl45 = shl i32 %23, %24, !dbg !214
  %26 = freeze i32 %shl45, !dbg !214
  store i32 %26, ptr %ptradd34, align 8, !dbg !214
  %27 = load ptr, ptr %self, align 8, !dbg !215
  %ptradd46 = getelementptr inbounds i8, ptr %27, i64 16, !dbg !215
  %28 = load i32, ptr %ptradd46, align 8, !dbg !215
  %29 = load i32, ptr %bits_to_push, align 4, !dbg !215
  %or = or i32 %28, %29, !dbg !215
  store i32 %or, ptr %ptradd46, align 8, !dbg !215
  %30 = load ptr, ptr %self, align 8, !dbg !216
  %ptradd47 = getelementptr inbounds i8, ptr %30, i64 20, !dbg !216
  %31 = load i32, ptr %ptradd47, align 4, !dbg !216
  %32 = load i32, ptr %to_push, align 4, !dbg !216
  %add48 = add i32 %31, %32, !dbg !216
  store i32 %add48, ptr %ptradd47, align 4, !dbg !216
  %33 = load i32, ptr %nbits, align 4, !dbg !217
  %34 = load i32, ptr %to_push, align 4, !dbg !217
  %sub49 = sub i32 %33, %34, !dbg !217
  store i32 %sub49, ptr %nbits, align 4, !dbg !217
  %35 = load ptr, ptr %self, align 8, !dbg !218
  %36 = call i64 @std.io.BitWriter.flush(ptr %35), !dbg !218
  %not_err = icmp eq i64 %36, 0, !dbg !218
  %37 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !218
  br i1 %37, label %after_check, label %assign_optional, !dbg !218

assign_optional:                                  ; preds = %checkok44
  store i64 %36, ptr %error_var, align 8, !dbg !218
  br label %guard_block, !dbg !218

after_check:                                      ; preds = %checkok44
  br label %noerr_block, !dbg !218

guard_block:                                      ; preds = %assign_optional
  %38 = load i64, ptr %error_var, align 8, !dbg !218
  ret i64 %38, !dbg !218

noerr_block:                                      ; preds = %after_check
  br label %loop.cond, !dbg !218

loop.exit:                                        ; preds = %loop.cond
  %39 = load i32, ptr %nbits, align 4, !dbg !219
  %eq50 = icmp eq i32 0, %39, !dbg !219
  br i1 %eq50, label %if.then51, label %if.exit53, !dbg !219

if.then51:                                        ; preds = %loop.exit
  ret i64 0

if.exit53:                                        ; preds = %loop.exit
  %40 = load ptr, ptr %self, align 8, !dbg !220
  %ptradd54 = getelementptr inbounds i8, ptr %40, i64 16, !dbg !220
  %41 = load i32, ptr %ptradd54, align 8, !dbg !220
  %42 = load i32, ptr %nbits, align 4, !dbg !220
  %shift_exceeds55 = icmp uge i32 %42, 32, !dbg !220
  %43 = call i1 @llvm.expect.i1(i1 %shift_exceeds55, i1 false), !dbg !220
  br i1 %43, label %panic56, label %checkok64, !dbg !220

checkok64:                                        ; preds = %if.exit53
  %shl65 = shl i32 %41, %42, !dbg !220
  %44 = freeze i32 %shl65, !dbg !220
  store i32 %44, ptr %ptradd54, align 8, !dbg !220
  %45 = load ptr, ptr %self, align 8, !dbg !221
  %ptradd66 = getelementptr inbounds i8, ptr %45, i64 16, !dbg !221
  %46 = load i32, ptr %ptradd66, align 8, !dbg !221
  %47 = load i32, ptr %bits, align 4, !dbg !221
  %48 = load i32, ptr %nbits, align 4, !dbg !221
  %shift_underflow67 = icmp slt i32 %48, 0, !dbg !221
  %49 = call i1 @llvm.expect.i1(i1 %shift_underflow67, i1 false), !dbg !221
  br i1 %49, label %panic68, label %checkok76, !dbg !221

checkok76:                                        ; preds = %checkok64
  %shift_exceeds77 = icmp sge i32 %48, 32, !dbg !221
  %50 = call i1 @llvm.expect.i1(i1 %shift_exceeds77, i1 false), !dbg !221
  br i1 %50, label %panic78, label %checkok86, !dbg !221

checkok86:                                        ; preds = %checkok76
  %shl87 = shl i32 1, %48, !dbg !221
  %51 = freeze i32 %shl87, !dbg !221
  %sub88 = sub i32 %51, 1, !dbg !221
  %and89 = and i32 %47, %sub88, !dbg !221
  %or90 = or i32 %46, %and89, !dbg !221
  store i32 %or90, ptr %ptradd66, align 8, !dbg !221
  %52 = load ptr, ptr %self, align 8, !dbg !222
  %ptradd91 = getelementptr inbounds i8, ptr %52, i64 20, !dbg !222
  %53 = load i32, ptr %ptradd91, align 4, !dbg !222
  %54 = load i32, ptr %nbits, align 4, !dbg !222
  %add92 = add i32 %53, %54, !dbg !222
  store i32 %add92, ptr %ptradd91, align 4, !dbg !222
  ret i64 0, !dbg !222

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file, i64 7 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg2, align 8
  %55 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %55(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 73) #5, !dbg !200
  unreachable, !dbg !200

panic8:                                           ; preds = %loop.body
  store i32 %sub7, ptr %taddr, align 4
  %56 = insertvalue %any undef, ptr %taddr, 0
  %57 = insertvalue %any %56, i64 ptrtoint (ptr @"$ct.uint" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 35 }, ptr %indirectarg9, align 8
  store %"char[]" { ptr @.file, i64 7 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg11, align 8
  store %any %57, ptr %varargslots, align 16
  %58 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %58, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg12, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg9, ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, i32 79, ptr align 8 %indirectarg12) #5, !dbg !213
  unreachable, !dbg !213

panic14:                                          ; preds = %checkok13
  store i32 %18, ptr %taddr15, align 4
  %59 = insertvalue %any undef, ptr %taddr15, 0
  %60 = insertvalue %any %59, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 35 }, ptr %indirectarg16, align 8
  store %"char[]" { ptr @.file, i64 7 }, ptr %indirectarg17, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg18, align 8
  store %any %60, ptr %varargslots19, align 16
  %61 = insertvalue %"any[]" undef, ptr %varargslots19, 0
  %"$$temp20" = insertvalue %"any[]" %61, i64 1, 1
  store %"any[]" %"$$temp20", ptr %indirectarg21, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg16, ptr align 8 %indirectarg17, ptr align 8 %indirectarg18, i32 79, ptr align 8 %indirectarg21) #5, !dbg !213
  unreachable, !dbg !213

panic24:                                          ; preds = %checkok22
  store i32 %18, ptr %taddr25, align 4
  %62 = insertvalue %any undef, ptr %taddr25, 0
  %63 = insertvalue %any %62, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 35 }, ptr %indirectarg26, align 8
  store %"char[]" { ptr @.file, i64 7 }, ptr %indirectarg27, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg28, align 8
  store %any %63, ptr %varargslots29, align 16
  %64 = insertvalue %"any[]" undef, ptr %varargslots29, 0
  %"$$temp30" = insertvalue %"any[]" %64, i64 1, 1
  store %"any[]" %"$$temp30", ptr %indirectarg31, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg26, ptr align 8 %indirectarg27, ptr align 8 %indirectarg28, i32 79, ptr align 8 %indirectarg31) #5, !dbg !213
  unreachable, !dbg !213

panic36:                                          ; preds = %checkok32
  store i32 %24, ptr %taddr37, align 4
  %65 = insertvalue %any undef, ptr %taddr37, 0
  %66 = insertvalue %any %65, i64 ptrtoint (ptr @"$ct.uint" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 35 }, ptr %indirectarg38, align 8
  store %"char[]" { ptr @.file, i64 7 }, ptr %indirectarg39, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg40, align 8
  store %any %66, ptr %varargslots41, align 16
  %67 = insertvalue %"any[]" undef, ptr %varargslots41, 0
  %"$$temp42" = insertvalue %"any[]" %67, i64 1, 1
  store %"any[]" %"$$temp42", ptr %indirectarg43, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg38, ptr align 8 %indirectarg39, ptr align 8 %indirectarg40, i32 81, ptr align 8 %indirectarg43) #5, !dbg !214
  unreachable, !dbg !214

panic56:                                          ; preds = %if.exit53
  store i32 %42, ptr %taddr57, align 4
  %68 = insertvalue %any undef, ptr %taddr57, 0
  %69 = insertvalue %any %68, i64 ptrtoint (ptr @"$ct.uint" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 35 }, ptr %indirectarg58, align 8
  store %"char[]" { ptr @.file, i64 7 }, ptr %indirectarg59, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg60, align 8
  store %any %69, ptr %varargslots61, align 16
  %70 = insertvalue %"any[]" undef, ptr %varargslots61, 0
  %"$$temp62" = insertvalue %"any[]" %70, i64 1, 1
  store %"any[]" %"$$temp62", ptr %indirectarg63, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg58, ptr align 8 %indirectarg59, ptr align 8 %indirectarg60, i32 91, ptr align 8 %indirectarg63) #5, !dbg !220
  unreachable, !dbg !220

panic68:                                          ; preds = %checkok64
  store i32 %48, ptr %taddr69, align 4
  %71 = insertvalue %any undef, ptr %taddr69, 0
  %72 = insertvalue %any %71, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 35 }, ptr %indirectarg70, align 8
  store %"char[]" { ptr @.file, i64 7 }, ptr %indirectarg71, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg72, align 8
  store %any %72, ptr %varargslots73, align 16
  %73 = insertvalue %"any[]" undef, ptr %varargslots73, 0
  %"$$temp74" = insertvalue %"any[]" %73, i64 1, 1
  store %"any[]" %"$$temp74", ptr %indirectarg75, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg70, ptr align 8 %indirectarg71, ptr align 8 %indirectarg72, i32 92, ptr align 8 %indirectarg75) #5, !dbg !221
  unreachable, !dbg !221

panic78:                                          ; preds = %checkok76
  store i32 %48, ptr %taddr79, align 4
  %74 = insertvalue %any undef, ptr %taddr79, 0
  %75 = insertvalue %any %74, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 35 }, ptr %indirectarg80, align 8
  store %"char[]" { ptr @.file, i64 7 }, ptr %indirectarg81, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg82, align 8
  store %any %75, ptr %varargslots83, align 16
  %76 = insertvalue %"any[]" undef, ptr %varargslots83, 0
  %"$$temp84" = insertvalue %"any[]" %76, i64 1, 1
  store %"any[]" %"$$temp84", ptr %indirectarg85, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg80, ptr align 8 %indirectarg81, ptr align 8 %indirectarg82, i32 92, ptr align 8 %indirectarg85) #5, !dbg !221
  unreachable, !dbg !221
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.core.ReflectedParam.to_format(ptr %0, ptr %1, ptr %2) #0 comdat !dbg !223 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %f = alloca ptr, align 8
  %reterr = alloca i64, align 8
  %varargslots = alloca [1 x %any], align 16
  %retparam = alloca i64, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"any[]", align 8
  %3 = icmp eq ptr %1, null, !dbg !249
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !249
  br i1 %4, label %panic, label %checkok, !dbg !249

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !250, !DIExpression(), !251)
  store ptr %2, ptr %f, align 8
    #dbg_declare(ptr %f, !252, !DIExpression(), !251)
  %5 = load ptr, ptr %self, align 8, !dbg !253
  %6 = insertvalue %any undef, ptr %5, 0, !dbg !253
  %7 = insertvalue %any %6, i64 ptrtoint (ptr @"$ct.String" to i64), 1, !dbg !253
  store %any %7, ptr %varargslots, align 16, !dbg !253
  %8 = insertvalue %"any[]" undef, ptr %varargslots, 0, !dbg !253
  %"$$temp" = insertvalue %"any[]" %8, i64 1, 1, !dbg !253
  %9 = load ptr, ptr %f, align 8
  store %"char[]" { ptr @.str, i64 16 }, ptr %indirectarg3, align 8
  store %"any[]" %"$$temp", ptr %indirectarg4, align 8
  %10 = call i64 @std.io.Formatter.printf(ptr %retparam, ptr %9, ptr align 8 %indirectarg3, ptr align 8 %indirectarg4), !dbg !253
  %not_err = icmp eq i64 %10, 0, !dbg !253
  %11 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !253
  br i1 %11, label %after_check, label %assign_optional, !dbg !253

assign_optional:                                  ; preds = %checkok
  store i64 %10, ptr %reterr, align 8, !dbg !253
  br label %err_retblock, !dbg !253

after_check:                                      ; preds = %checkok
  %12 = load i64, ptr %retparam, align 8, !dbg !253
  store i64 %12, ptr %0, align 8, !dbg !253
  ret i64 0, !dbg !253

err_retblock:                                     ; preds = %assign_optional
  %13 = load i64, ptr %reterr, align 8, !dbg !253
  ret i64 %13, !dbg !253

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.22, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.23, i64 9 }, ptr %indirectarg2, align 8
  %14 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %14(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 53) #5, !dbg !251
  unreachable, !dbg !251
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.Formatter.printf(ptr %0, ptr %1, ptr align 8 %2, ptr align 8 %3) #0 comdat !dbg !254 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %reterr = alloca i64, align 8
  %retparam = alloca i64, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"any[]", align 8
  %4 = icmp eq ptr %1, null, !dbg !266
  %5 = call i1 @llvm.expect.i1(i1 %4, i1 false), !dbg !266
  br i1 %5, label %panic, label %checkok, !dbg !266

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !267, !DIExpression(), !268)
    #dbg_declare(ptr %2, !269, !DIExpression(), !268)
    #dbg_declare(ptr %3, !270, !DIExpression(), !268)
  %6 = load ptr, ptr %self, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg3, ptr align 8 %2, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg4, ptr align 8 %3, i32 16, i1 false)
  %7 = call i64 @std.io.Formatter.vprintf(ptr %retparam, ptr %6, ptr align 8 %indirectarg3, ptr align 8 %indirectarg4) #6, !dbg !271
  %not_err = icmp eq i64 %7, 0, !dbg !271
  %8 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !271
  br i1 %8, label %after_check, label %assign_optional, !dbg !271

assign_optional:                                  ; preds = %checkok
  store i64 %7, ptr %reterr, align 8, !dbg !271
  br label %err_retblock, !dbg !271

after_check:                                      ; preds = %checkok
  %9 = load i64, ptr %retparam, align 8, !dbg !271
  store i64 %9, ptr %0, align 8, !dbg !271
  ret i64 0, !dbg !271

err_retblock:                                     ; preds = %assign_optional
  %10 = load i64, ptr %reterr, align 8, !dbg !271
  ret i64 %10, !dbg !271

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.22, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.24, i64 6 }, ptr %indirectarg2, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 58) #5, !dbg !268
  unreachable, !dbg !268
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.io.Formatter.init(ptr %0, ptr %1, ptr %2) #0 comdat !dbg !272 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %out_fn = alloca ptr, align 8
  %data = alloca ptr, align 8
  %.assign_list = alloca %Formatter, align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr9 = alloca i64, align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg14 = alloca %"any[]", align 8
  %3 = icmp eq ptr %0, null, !dbg !275
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !275
  br i1 %4, label %panic, label %checkok, !dbg !275

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !276, !DIExpression(), !277)
  store ptr %1, ptr %out_fn, align 8
    #dbg_declare(ptr %out_fn, !278, !DIExpression(), !277)
  store ptr %2, ptr %data, align 8
    #dbg_declare(ptr %data, !279, !DIExpression(), !277)
  call void @llvm.memset.p0.i64(ptr align 8 %.assign_list, i8 0, i64 40, i1 false)
  %5 = load ptr, ptr %data, align 8, !dbg !280
  store ptr %5, ptr %.assign_list, align 8, !dbg !280
  %ptradd = getelementptr inbounds i8, ptr %.assign_list, i64 8, !dbg !280
  %6 = load ptr, ptr %out_fn, align 8, !dbg !280
  store ptr %6, ptr %ptradd, align 8, !dbg !280
  %7 = load ptr, ptr %self, align 8, !dbg !280
  %checknull = icmp eq ptr %7, null, !dbg !280
  %8 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !280
  br i1 %8, label %panic3, label %checkok7, !dbg !280

checkok7:                                         ; preds = %checkok
  %9 = ptrtoint ptr %7 to i64, !dbg !280
  %10 = urem i64 %9, 8, !dbg !280
  %11 = icmp ne i64 %10, 0, !dbg !280
  %12 = call i1 @llvm.expect.i1(i1 %11, i1 false), !dbg !280
  br i1 %12, label %panic8, label %checkok15, !dbg !280

checkok15:                                        ; preds = %checkok7
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %7, ptr align 8 %.assign_list, i32 40, i1 false), !dbg !280
  ret void, !dbg !280

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.22, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg2, align 8
  %13 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %13(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 87) #5, !dbg !277
  unreachable, !dbg !277

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.2, i64 45 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.22, i64 12 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg6, align 8
  %14 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %14(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 89) #5, !dbg !280
  unreachable, !dbg !280

panic8:                                           ; preds = %checkok7
  store i64 8, ptr %taddr, align 8
  %15 = insertvalue %any undef, ptr %taddr, 0
  %16 = insertvalue %any %15, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %10, ptr %taddr9, align 8
  %17 = insertvalue %any undef, ptr %taddr9, 0
  %18 = insertvalue %any %17, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.file.22, i64 12 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg12, align 8
  store %any %16, ptr %varargslots, align 16
  %ptradd13 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %18, ptr %ptradd13, align 16
  %19 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %19, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg14, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, i32 89, ptr align 8 %indirectarg14) #5, !dbg !280
  unreachable, !dbg !280
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @std.io.Formatter.out(ptr %0, ptr %1, i8 %2) #0 !dbg !281 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %c = alloca i8, align 1
  %err = alloca i64, align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %reterr = alloca i64, align 8
  %3 = icmp eq ptr %1, null, !dbg !284
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !284
  br i1 %4, label %panic, label %checkok, !dbg !284

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !285, !DIExpression(), !286)
  store i8 %2, ptr %c, align 1
    #dbg_declare(ptr %c, !287, !DIExpression(), !286)
    #dbg_declare(ptr %err, !288, !DIExpression(), !289)
  br label %testblock, !dbg !289

testblock:                                        ; preds = %checkok
  %5 = load ptr, ptr %self, align 8, !dbg !289
  %ptradd = getelementptr inbounds i8, ptr %5, i64 8, !dbg !289
  %6 = load ptr, ptr %ptradd, align 8, !dbg !289
  %checknull = icmp eq ptr %6, null, !dbg !289
  %7 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !289
  br i1 %7, label %panic3, label %checkok7, !dbg !289

checkok7:                                         ; preds = %testblock
  %8 = load ptr, ptr %self, align 8, !dbg !289
  %9 = load ptr, ptr %8, align 8, !dbg !289
  %10 = load i8, ptr %c, align 1, !dbg !289
  %11 = call i64 %6(ptr %9, i8 %10), !dbg !289
  %not_err = icmp eq i64 %11, 0, !dbg !289
  %12 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !289
  br i1 %12, label %after_check, label %assign_optional, !dbg !289

assign_optional:                                  ; preds = %checkok7
  store i64 %11, ptr %err, align 8, !dbg !289
  br label %end_block, !dbg !289

after_check:                                      ; preds = %checkok7
  store i64 0, ptr %err, align 8, !dbg !289
  br label %end_block, !dbg !289

end_block:                                        ; preds = %after_check, %assign_optional
  %13 = load i64, ptr %err, align 8, !dbg !289
  %i2b = icmp ne i64 %13, 0, !dbg !289
  br i1 %i2b, label %if.then, label %if.exit16, !dbg !289

if.then:                                          ; preds = %end_block
  %14 = load ptr, ptr %self, align 8, !dbg !290
  %ptradd8 = getelementptr inbounds i8, ptr %14, i64 16, !dbg !290
  %ptradd9 = getelementptr inbounds i8, ptr %ptradd8, i64 16, !dbg !290
  %15 = load i64, ptr %ptradd9, align 8, !dbg !290
  %i2b10 = icmp ne i64 %15, 0, !dbg !290
  br i1 %i2b10, label %if.then11, label %if.exit, !dbg !290

if.then11:                                        ; preds = %if.then
  %16 = load ptr, ptr %self, align 8, !dbg !290
  %ptradd12 = getelementptr inbounds i8, ptr %16, i64 16, !dbg !290
  %ptradd13 = getelementptr inbounds i8, ptr %ptradd12, i64 16, !dbg !290
  %17 = load i64, ptr %ptradd13, align 8, !dbg !290
  ret i64 %17, !dbg !290

if.exit:                                          ; preds = %if.then
  %18 = load ptr, ptr %self, align 8, !dbg !292
  %ptradd14 = getelementptr inbounds i8, ptr %18, i64 16, !dbg !292
  %ptradd15 = getelementptr inbounds i8, ptr %ptradd14, i64 16, !dbg !292
  %19 = load i64, ptr %err, align 8, !dbg !292
  store i64 %19, ptr %ptradd15, align 8, !dbg !292
  %20 = load i64, ptr %err, align 8, !dbg !293
  ret i64 %20, !dbg !293

if.exit16:                                        ; preds = %end_block
  store i64 1, ptr %0, align 8, !dbg !294
  ret i64 0, !dbg !294

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.22, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.25, i64 3 }, ptr %indirectarg2, align 8
  %21 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %21(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 92) #5, !dbg !286
  unreachable, !dbg !286

panic3:                                           ; preds = %testblock
  store %"char[]" { ptr @.panic_msg.26, i64 54 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.22, i64 12 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.25, i64 3 }, ptr %indirectarg6, align 8
  %22 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %22(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 94) #5, !dbg !289
  unreachable, !dbg !289
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.Formatter.print_with_function(ptr %0, ptr %1, ptr align 8 %2) #0 comdat !dbg !295 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %old = alloca i32, align 4
  %old_width = alloca i32, align 4
  %old_prec = alloca i32, align 4
  %reterr = alloca i64, align 8
  %retparam = alloca i64, align 8
  %indirectarg9 = alloca %"char[]", align 8
  %reterr20 = alloca i64, align 8
  %.inlinecache22 = alloca ptr, align 8
  %.cachedtype23 = alloca ptr, align 8
  %indirectarg30 = alloca %"char[]", align 8
  %indirectarg31 = alloca %"char[]", align 8
  %indirectarg32 = alloca %"char[]", align 8
  %retparam33 = alloca i64, align 8
  %.inlinecache49 = alloca ptr, align 8
  %.cachedtype50 = alloca ptr, align 8
  %old59 = alloca i32, align 4
  %old_width61 = alloca i32, align 4
  %old_prec64 = alloca i32, align 4
  %reterr69 = alloca i64, align 8
  %retparam70 = alloca i64, align 8
  %indirectarg71 = alloca %"char[]", align 8
  %reterr87 = alloca i64, align 8
  %.inlinecache89 = alloca ptr, align 8
  %.cachedtype90 = alloca ptr, align 8
  %indirectarg98 = alloca %"char[]", align 8
  %indirectarg99 = alloca %"char[]", align 8
  %indirectarg100 = alloca %"char[]", align 8
  %sretparam = alloca %"char[]", align 8
  %retparam102 = alloca i64, align 8
  %indirectarg103 = alloca %"char[]", align 8
  store ptr null, ptr %.cachedtype90, align 8, !dbg !302
  store ptr null, ptr %.cachedtype50, align 8, !dbg !302
  store ptr null, ptr %.cachedtype23, align 8, !dbg !302
  store ptr null, ptr %.cachedtype, align 8, !dbg !302
  %3 = icmp eq ptr %1, null, !dbg !302
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !302
  br i1 %4, label %panic, label %checkok, !dbg !302

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !303, !DIExpression(), !304)
    #dbg_declare(ptr %2, !305, !DIExpression(), !304)
  %5 = load %any, ptr %2, align 8, !dbg !306
  %6 = extractvalue %any %5, 1, !dbg !306
  %7 = inttoptr i64 %6 to ptr, !dbg !306
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !302
  %8 = icmp eq ptr %7, %type, !dbg !302
  br i1 %8, label %cache_hit, label %cache_miss, !dbg !302

cache_miss:                                       ; preds = %checkok
  %ptradd = getelementptr inbounds i8, ptr %7, i64 16, !dbg !302
  %9 = load ptr, ptr %ptradd, align 8, !dbg !302
  %10 = call ptr @.dyn_search(ptr %9, ptr @"$sel.to_format"), !dbg !302
  store ptr %10, ptr %.inlinecache, align 8, !dbg !302
  store ptr %7, ptr %.cachedtype, align 8, !dbg !302
  br label %11, !dbg !302

cache_hit:                                        ; preds = %checkok
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !302
  br label %11, !dbg !302

11:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %10, %cache_miss ], !dbg !302
  %i2b = icmp ne ptr %fn_phi, null, !dbg !302
  br i1 %i2b, label %if.then, label %if.exit48, !dbg !302

if.then:                                          ; preds = %11
    #dbg_declare(ptr %old, !307, !DIExpression(), !309)
  %12 = load ptr, ptr %self, align 8, !dbg !309
  %ptradd3 = getelementptr inbounds i8, ptr %12, i64 16, !dbg !309
  %13 = load i32, ptr %ptradd3, align 8, !dbg !309
  store i32 %13, ptr %old, align 4, !dbg !309
    #dbg_declare(ptr %old_width, !310, !DIExpression(), !311)
  %14 = load ptr, ptr %self, align 8, !dbg !311
  %ptradd4 = getelementptr inbounds i8, ptr %14, i64 16, !dbg !311
  %ptradd5 = getelementptr inbounds i8, ptr %ptradd4, i64 4, !dbg !311
  %15 = load i32, ptr %ptradd5, align 4, !dbg !311
  store i32 %15, ptr %old_width, align 4, !dbg !311
    #dbg_declare(ptr %old_prec, !312, !DIExpression(), !313)
  %16 = load ptr, ptr %self, align 8, !dbg !313
  %ptradd6 = getelementptr inbounds i8, ptr %16, i64 16, !dbg !313
  %ptradd7 = getelementptr inbounds i8, ptr %ptradd6, i64 8, !dbg !313
  %17 = load i32, ptr %ptradd7, align 8, !dbg !313
  store i32 %17, ptr %old_prec, align 4, !dbg !313
  %18 = load ptr, ptr %2, align 8, !dbg !314
  %i2nb = icmp eq ptr %18, null, !dbg !314
  br i1 %i2nb, label %if.then8, label %if.exit, !dbg !314

if.then8:                                         ; preds = %if.then
  %19 = load ptr, ptr %self, align 8
  store %"char[]" { ptr @.str.28, i64 6 }, ptr %indirectarg9, align 8
  %20 = call i64 @std.io.Formatter.out_substr(ptr %retparam, ptr %19, ptr align 8 %indirectarg9), !dbg !314
  %not_err = icmp eq i64 %20, 0, !dbg !314
  %21 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !314
  br i1 %21, label %after_check, label %assign_optional, !dbg !314

assign_optional:                                  ; preds = %if.then8
  store i64 %20, ptr %reterr, align 8, !dbg !314
  br label %err_retblock, !dbg !314

after_check:                                      ; preds = %if.then8
  %22 = load i64, ptr %retparam, align 8, !dbg !314
  %23 = load ptr, ptr %self, align 8, !dbg !315
  %ptradd10 = getelementptr inbounds i8, ptr %23, i64 16, !dbg !315
  %24 = load i32, ptr %old, align 4, !dbg !315
  store i32 %24, ptr %ptradd10, align 8, !dbg !315
  %25 = load ptr, ptr %self, align 8, !dbg !317
  %ptradd11 = getelementptr inbounds i8, ptr %25, i64 16, !dbg !317
  %ptradd12 = getelementptr inbounds i8, ptr %ptradd11, i64 4, !dbg !317
  %26 = load i32, ptr %old_width, align 4, !dbg !317
  store i32 %26, ptr %ptradd12, align 4, !dbg !317
  %27 = load ptr, ptr %self, align 8, !dbg !318
  %ptradd13 = getelementptr inbounds i8, ptr %27, i64 16, !dbg !318
  %ptradd14 = getelementptr inbounds i8, ptr %ptradd13, i64 8, !dbg !318
  %28 = load i32, ptr %old_prec, align 4, !dbg !318
  store i32 %28, ptr %ptradd14, align 8, !dbg !318
  store i64 %22, ptr %0, align 8, !dbg !318
  ret i64 0, !dbg !318

err_retblock:                                     ; preds = %assign_optional
  %29 = load ptr, ptr %self, align 8, !dbg !319
  %ptradd15 = getelementptr inbounds i8, ptr %29, i64 16, !dbg !319
  %30 = load i32, ptr %old, align 4, !dbg !319
  store i32 %30, ptr %ptradd15, align 8, !dbg !319
  %31 = load ptr, ptr %self, align 8, !dbg !321
  %ptradd16 = getelementptr inbounds i8, ptr %31, i64 16, !dbg !321
  %ptradd17 = getelementptr inbounds i8, ptr %ptradd16, i64 4, !dbg !321
  %32 = load i32, ptr %old_width, align 4, !dbg !321
  store i32 %32, ptr %ptradd17, align 4, !dbg !321
  %33 = load ptr, ptr %self, align 8, !dbg !322
  %ptradd18 = getelementptr inbounds i8, ptr %33, i64 16, !dbg !322
  %ptradd19 = getelementptr inbounds i8, ptr %ptradd18, i64 8, !dbg !322
  %34 = load i32, ptr %old_prec, align 4, !dbg !322
  store i32 %34, ptr %ptradd19, align 8, !dbg !322
  %35 = load i64, ptr %reterr, align 8, !dbg !322
  ret i64 %35, !dbg !322

if.exit:                                          ; preds = %if.then
  %ptradd21 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !323
  %36 = load i64, ptr %ptradd21, align 8, !dbg !323
  %37 = inttoptr i64 %36 to ptr, !dbg !323
  %type24 = load ptr, ptr %.cachedtype23, align 8, !dbg !302
  %38 = icmp eq ptr %37, %type24, !dbg !302
  br i1 %38, label %cache_hit27, label %cache_miss25, !dbg !302

cache_miss25:                                     ; preds = %if.exit
  %ptradd26 = getelementptr inbounds i8, ptr %37, i64 16, !dbg !302
  %39 = load ptr, ptr %ptradd26, align 8, !dbg !302
  %40 = call ptr @.dyn_search(ptr %39, ptr @"$sel.to_format"), !dbg !302
  store ptr %40, ptr %.inlinecache22, align 8, !dbg !302
  store ptr %37, ptr %.cachedtype23, align 8, !dbg !302
  br label %41, !dbg !302

cache_hit27:                                      ; preds = %if.exit
  %cache_hit_fn28 = load ptr, ptr %.inlinecache22, align 8, !dbg !302
  br label %41, !dbg !302

41:                                               ; preds = %cache_hit27, %cache_miss25
  %fn_phi29 = phi ptr [ %cache_hit_fn28, %cache_hit27 ], [ %40, %cache_miss25 ], !dbg !302
  %42 = icmp eq ptr %fn_phi29, null, !dbg !302
  br i1 %42, label %missing_function, label %match, !dbg !302

missing_function:                                 ; preds = %41
  store %"char[]" { ptr @.panic_msg.29, i64 46 }, ptr %indirectarg30, align 8
  store %"char[]" { ptr @.file.22, i64 12 }, ptr %indirectarg31, align 8
  store %"char[]" { ptr @.func.27, i64 19 }, ptr %indirectarg32, align 8
  %43 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %43(ptr align 8 %indirectarg30, ptr align 8 %indirectarg31, ptr align 8 %indirectarg32, i32 117) #5, !dbg !323
  unreachable, !dbg !323

match:                                            ; preds = %41
  %44 = load ptr, ptr %2, align 8
  %45 = load ptr, ptr %self, align 8
  %46 = call i64 %fn_phi29(ptr %retparam33, ptr %44, ptr %45), !dbg !323
  %not_err34 = icmp eq i64 %46, 0, !dbg !323
  %47 = call i1 @llvm.expect.i1(i1 %not_err34, i1 true), !dbg !323
  br i1 %47, label %after_check36, label %assign_optional35, !dbg !323

assign_optional35:                                ; preds = %match
  store i64 %46, ptr %reterr20, align 8, !dbg !323
  br label %err_retblock42, !dbg !323

after_check36:                                    ; preds = %match
  %48 = load i64, ptr %retparam33, align 8, !dbg !323
  %49 = load ptr, ptr %self, align 8, !dbg !324
  %ptradd37 = getelementptr inbounds i8, ptr %49, i64 16, !dbg !324
  %50 = load i32, ptr %old, align 4, !dbg !324
  store i32 %50, ptr %ptradd37, align 8, !dbg !324
  %51 = load ptr, ptr %self, align 8, !dbg !326
  %ptradd38 = getelementptr inbounds i8, ptr %51, i64 16, !dbg !326
  %ptradd39 = getelementptr inbounds i8, ptr %ptradd38, i64 4, !dbg !326
  %52 = load i32, ptr %old_width, align 4, !dbg !326
  store i32 %52, ptr %ptradd39, align 4, !dbg !326
  %53 = load ptr, ptr %self, align 8, !dbg !327
  %ptradd40 = getelementptr inbounds i8, ptr %53, i64 16, !dbg !327
  %ptradd41 = getelementptr inbounds i8, ptr %ptradd40, i64 8, !dbg !327
  %54 = load i32, ptr %old_prec, align 4, !dbg !327
  store i32 %54, ptr %ptradd41, align 8, !dbg !327
  store i64 %48, ptr %0, align 8, !dbg !327
  ret i64 0, !dbg !327

err_retblock42:                                   ; preds = %assign_optional35
  %55 = load ptr, ptr %self, align 8, !dbg !328
  %ptradd43 = getelementptr inbounds i8, ptr %55, i64 16, !dbg !328
  %56 = load i32, ptr %old, align 4, !dbg !328
  store i32 %56, ptr %ptradd43, align 8, !dbg !328
  %57 = load ptr, ptr %self, align 8, !dbg !330
  %ptradd44 = getelementptr inbounds i8, ptr %57, i64 16, !dbg !330
  %ptradd45 = getelementptr inbounds i8, ptr %ptradd44, i64 4, !dbg !330
  %58 = load i32, ptr %old_width, align 4, !dbg !330
  store i32 %58, ptr %ptradd45, align 4, !dbg !330
  %59 = load ptr, ptr %self, align 8, !dbg !331
  %ptradd46 = getelementptr inbounds i8, ptr %59, i64 16, !dbg !331
  %ptradd47 = getelementptr inbounds i8, ptr %ptradd46, i64 8, !dbg !331
  %60 = load i32, ptr %old_prec, align 4, !dbg !331
  store i32 %60, ptr %ptradd47, align 8, !dbg !331
  %61 = load i64, ptr %reterr20, align 8, !dbg !331
  ret i64 %61, !dbg !331

if.exit48:                                        ; preds = %11
  %62 = load %any, ptr %2, align 8, !dbg !332
  %63 = extractvalue %any %62, 1, !dbg !332
  %64 = inttoptr i64 %63 to ptr, !dbg !332
  %type51 = load ptr, ptr %.cachedtype50, align 8, !dbg !302
  %65 = icmp eq ptr %64, %type51, !dbg !302
  br i1 %65, label %cache_hit54, label %cache_miss52, !dbg !302

cache_miss52:                                     ; preds = %if.exit48
  %ptradd53 = getelementptr inbounds i8, ptr %64, i64 16, !dbg !302
  %66 = load ptr, ptr %ptradd53, align 8, !dbg !302
  %67 = call ptr @.dyn_search(ptr %66, ptr @"$sel.to_constant_string"), !dbg !302
  store ptr %67, ptr %.inlinecache49, align 8, !dbg !302
  store ptr %64, ptr %.cachedtype50, align 8, !dbg !302
  br label %68, !dbg !302

cache_hit54:                                      ; preds = %if.exit48
  %cache_hit_fn55 = load ptr, ptr %.inlinecache49, align 8, !dbg !302
  br label %68, !dbg !302

68:                                               ; preds = %cache_hit54, %cache_miss52
  %fn_phi56 = phi ptr [ %cache_hit_fn55, %cache_hit54 ], [ %67, %cache_miss52 ], !dbg !302
  %i2b57 = icmp ne ptr %fn_phi56, null, !dbg !302
  br i1 %i2b57, label %if.then58, label %if.exit118, !dbg !302

if.then58:                                        ; preds = %68
    #dbg_declare(ptr %old59, !333, !DIExpression(), !335)
  %69 = load ptr, ptr %self, align 8, !dbg !335
  %ptradd60 = getelementptr inbounds i8, ptr %69, i64 16, !dbg !335
  %70 = load i32, ptr %ptradd60, align 8, !dbg !335
  store i32 %70, ptr %old59, align 4, !dbg !335
    #dbg_declare(ptr %old_width61, !336, !DIExpression(), !337)
  %71 = load ptr, ptr %self, align 8, !dbg !337
  %ptradd62 = getelementptr inbounds i8, ptr %71, i64 16, !dbg !337
  %ptradd63 = getelementptr inbounds i8, ptr %ptradd62, i64 4, !dbg !337
  %72 = load i32, ptr %ptradd63, align 4, !dbg !337
  store i32 %72, ptr %old_width61, align 4, !dbg !337
    #dbg_declare(ptr %old_prec64, !338, !DIExpression(), !339)
  %73 = load ptr, ptr %self, align 8, !dbg !339
  %ptradd65 = getelementptr inbounds i8, ptr %73, i64 16, !dbg !339
  %ptradd66 = getelementptr inbounds i8, ptr %ptradd65, i64 8, !dbg !339
  %74 = load i32, ptr %ptradd66, align 8, !dbg !339
  store i32 %74, ptr %old_prec64, align 4, !dbg !339
  %75 = load ptr, ptr %2, align 8, !dbg !340
  %i2nb67 = icmp eq ptr %75, null, !dbg !340
  br i1 %i2nb67, label %if.then68, label %if.exit86, !dbg !340

if.then68:                                        ; preds = %if.then58
  %76 = load ptr, ptr %self, align 8
  store %"char[]" { ptr @.str.30, i64 6 }, ptr %indirectarg71, align 8
  %77 = call i64 @std.io.Formatter.out_substr(ptr %retparam70, ptr %76, ptr align 8 %indirectarg71), !dbg !340
  %not_err72 = icmp eq i64 %77, 0, !dbg !340
  %78 = call i1 @llvm.expect.i1(i1 %not_err72, i1 true), !dbg !340
  br i1 %78, label %after_check74, label %assign_optional73, !dbg !340

assign_optional73:                                ; preds = %if.then68
  store i64 %77, ptr %reterr69, align 8, !dbg !340
  br label %err_retblock80, !dbg !340

after_check74:                                    ; preds = %if.then68
  %79 = load i64, ptr %retparam70, align 8, !dbg !340
  %80 = load ptr, ptr %self, align 8, !dbg !341
  %ptradd75 = getelementptr inbounds i8, ptr %80, i64 16, !dbg !341
  %81 = load i32, ptr %old59, align 4, !dbg !341
  store i32 %81, ptr %ptradd75, align 8, !dbg !341
  %82 = load ptr, ptr %self, align 8, !dbg !343
  %ptradd76 = getelementptr inbounds i8, ptr %82, i64 16, !dbg !343
  %ptradd77 = getelementptr inbounds i8, ptr %ptradd76, i64 4, !dbg !343
  %83 = load i32, ptr %old_width61, align 4, !dbg !343
  store i32 %83, ptr %ptradd77, align 4, !dbg !343
  %84 = load ptr, ptr %self, align 8, !dbg !344
  %ptradd78 = getelementptr inbounds i8, ptr %84, i64 16, !dbg !344
  %ptradd79 = getelementptr inbounds i8, ptr %ptradd78, i64 8, !dbg !344
  %85 = load i32, ptr %old_prec64, align 4, !dbg !344
  store i32 %85, ptr %ptradd79, align 8, !dbg !344
  store i64 %79, ptr %0, align 8, !dbg !344
  ret i64 0, !dbg !344

err_retblock80:                                   ; preds = %assign_optional73
  %86 = load ptr, ptr %self, align 8, !dbg !345
  %ptradd81 = getelementptr inbounds i8, ptr %86, i64 16, !dbg !345
  %87 = load i32, ptr %old59, align 4, !dbg !345
  store i32 %87, ptr %ptradd81, align 8, !dbg !345
  %88 = load ptr, ptr %self, align 8, !dbg !347
  %ptradd82 = getelementptr inbounds i8, ptr %88, i64 16, !dbg !347
  %ptradd83 = getelementptr inbounds i8, ptr %ptradd82, i64 4, !dbg !347
  %89 = load i32, ptr %old_width61, align 4, !dbg !347
  store i32 %89, ptr %ptradd83, align 4, !dbg !347
  %90 = load ptr, ptr %self, align 8, !dbg !348
  %ptradd84 = getelementptr inbounds i8, ptr %90, i64 16, !dbg !348
  %ptradd85 = getelementptr inbounds i8, ptr %ptradd84, i64 8, !dbg !348
  %91 = load i32, ptr %old_prec64, align 4, !dbg !348
  store i32 %91, ptr %ptradd85, align 8, !dbg !348
  %92 = load i64, ptr %reterr69, align 8, !dbg !348
  ret i64 %92, !dbg !348

if.exit86:                                        ; preds = %if.then58
  %ptradd88 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !349
  %93 = load i64, ptr %ptradd88, align 8, !dbg !349
  %94 = inttoptr i64 %93 to ptr, !dbg !349
  %type91 = load ptr, ptr %.cachedtype90, align 8, !dbg !302
  %95 = icmp eq ptr %94, %type91, !dbg !302
  br i1 %95, label %cache_hit94, label %cache_miss92, !dbg !302

cache_miss92:                                     ; preds = %if.exit86
  %ptradd93 = getelementptr inbounds i8, ptr %94, i64 16, !dbg !302
  %96 = load ptr, ptr %ptradd93, align 8, !dbg !302
  %97 = call ptr @.dyn_search(ptr %96, ptr @"$sel.to_constant_string"), !dbg !302
  store ptr %97, ptr %.inlinecache89, align 8, !dbg !302
  store ptr %94, ptr %.cachedtype90, align 8, !dbg !302
  br label %98, !dbg !302

cache_hit94:                                      ; preds = %if.exit86
  %cache_hit_fn95 = load ptr, ptr %.inlinecache89, align 8, !dbg !302
  br label %98, !dbg !302

98:                                               ; preds = %cache_hit94, %cache_miss92
  %fn_phi96 = phi ptr [ %cache_hit_fn95, %cache_hit94 ], [ %97, %cache_miss92 ], !dbg !302
  %99 = icmp eq ptr %fn_phi96, null, !dbg !302
  br i1 %99, label %missing_function97, label %match101, !dbg !302

missing_function97:                               ; preds = %98
  store %"char[]" { ptr @.panic_msg.31, i64 55 }, ptr %indirectarg98, align 8
  store %"char[]" { ptr @.file.22, i64 12 }, ptr %indirectarg99, align 8
  store %"char[]" { ptr @.func.27, i64 19 }, ptr %indirectarg100, align 8
  %100 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %100(ptr align 8 %indirectarg98, ptr align 8 %indirectarg99, ptr align 8 %indirectarg100, i32 131) #5, !dbg !349
  unreachable, !dbg !349

match101:                                         ; preds = %98
  %101 = load ptr, ptr %2, align 8
  call void %fn_phi96(ptr sret(%"char[]") align 8 %sretparam, ptr %101), !dbg !349
  %102 = load ptr, ptr %self, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg103, ptr align 8 %sretparam, i32 16, i1 false)
  %103 = call i64 @std.io.Formatter.out_substr(ptr %retparam102, ptr %102, ptr align 8 %indirectarg103), !dbg !349
  %not_err104 = icmp eq i64 %103, 0, !dbg !349
  %104 = call i1 @llvm.expect.i1(i1 %not_err104, i1 true), !dbg !349
  br i1 %104, label %after_check106, label %assign_optional105, !dbg !349

assign_optional105:                               ; preds = %match101
  store i64 %103, ptr %reterr87, align 8, !dbg !349
  br label %err_retblock112, !dbg !349

after_check106:                                   ; preds = %match101
  %105 = load i64, ptr %retparam102, align 8, !dbg !349
  %106 = load ptr, ptr %self, align 8, !dbg !350
  %ptradd107 = getelementptr inbounds i8, ptr %106, i64 16, !dbg !350
  %107 = load i32, ptr %old59, align 4, !dbg !350
  store i32 %107, ptr %ptradd107, align 8, !dbg !350
  %108 = load ptr, ptr %self, align 8, !dbg !352
  %ptradd108 = getelementptr inbounds i8, ptr %108, i64 16, !dbg !352
  %ptradd109 = getelementptr inbounds i8, ptr %ptradd108, i64 4, !dbg !352
  %109 = load i32, ptr %old_width61, align 4, !dbg !352
  store i32 %109, ptr %ptradd109, align 4, !dbg !352
  %110 = load ptr, ptr %self, align 8, !dbg !353
  %ptradd110 = getelementptr inbounds i8, ptr %110, i64 16, !dbg !353
  %ptradd111 = getelementptr inbounds i8, ptr %ptradd110, i64 8, !dbg !353
  %111 = load i32, ptr %old_prec64, align 4, !dbg !353
  store i32 %111, ptr %ptradd111, align 8, !dbg !353
  store i64 %105, ptr %0, align 8, !dbg !353
  ret i64 0, !dbg !353

err_retblock112:                                  ; preds = %assign_optional105
  %112 = load ptr, ptr %self, align 8, !dbg !354
  %ptradd113 = getelementptr inbounds i8, ptr %112, i64 16, !dbg !354
  %113 = load i32, ptr %old59, align 4, !dbg !354
  store i32 %113, ptr %ptradd113, align 8, !dbg !354
  %114 = load ptr, ptr %self, align 8, !dbg !356
  %ptradd114 = getelementptr inbounds i8, ptr %114, i64 16, !dbg !356
  %ptradd115 = getelementptr inbounds i8, ptr %ptradd114, i64 4, !dbg !356
  %115 = load i32, ptr %old_width61, align 4, !dbg !356
  store i32 %115, ptr %ptradd115, align 4, !dbg !356
  %116 = load ptr, ptr %self, align 8, !dbg !357
  %ptradd116 = getelementptr inbounds i8, ptr %116, i64 16, !dbg !357
  %ptradd117 = getelementptr inbounds i8, ptr %ptradd116, i64 8, !dbg !357
  %117 = load i32, ptr %old_prec64, align 4, !dbg !357
  store i32 %117, ptr %ptradd117, align 8, !dbg !357
  %118 = load i64, ptr %reterr87, align 8, !dbg !357
  ret i64 %118, !dbg !357

if.exit118:                                       ; preds = %68
  ret i64 ptrtoint (ptr @std.core.builtin.NOT_FOUND to i64), !dbg !358

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.22, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.27, i64 19 }, ptr %indirectarg2, align 8
  %119 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %119(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 103) #5, !dbg !304
  unreachable, !dbg !304
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @std.io.Formatter.out_unknown(ptr %0, ptr %1, ptr align 8 %2, ptr align 8 %3) #0 !dbg !359 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %reterr = alloca i64, align 8
  %retparam = alloca i64, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %retparam4 = alloca i64, align 8
  %indirectarg5 = alloca %"char[]", align 8
  %retparam9 = alloca i64, align 8
  %indirectarg10 = alloca %"char[]", align 8
  %retparam15 = alloca i64, align 8
  %indirectarg16 = alloca i128, align 16
  %retparam21 = alloca i64, align 8
  %indirectarg22 = alloca %"char[]", align 8
  %retparam28 = alloca i64, align 8
  %indirectarg29 = alloca i128, align 16
  %retparam34 = alloca i64, align 8
  %indirectarg35 = alloca %"char[]", align 8
  %4 = icmp eq ptr %1, null, !dbg !362
  %5 = call i1 @llvm.expect.i1(i1 %4, i1 false), !dbg !362
  br i1 %5, label %panic, label %checkok, !dbg !362

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !363, !DIExpression(), !364)
    #dbg_declare(ptr %2, !365, !DIExpression(), !364)
    #dbg_declare(ptr %3, !366, !DIExpression(), !364)
  %6 = load ptr, ptr %self, align 8
  store %"char[]" { ptr @.str.33, i64 1 }, ptr %indirectarg3, align 8
  %7 = call i64 @std.io.Formatter.out_substr(ptr %retparam, ptr %6, ptr align 8 %indirectarg3), !dbg !367
  %not_err = icmp eq i64 %7, 0, !dbg !367
  %8 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !367
  br i1 %8, label %after_check, label %assign_optional, !dbg !367

assign_optional:                                  ; preds = %checkok
  store i64 %7, ptr %reterr, align 8, !dbg !367
  br label %err_retblock, !dbg !367

after_check:                                      ; preds = %checkok
  %9 = load i64, ptr %retparam, align 8, !dbg !367
  %10 = load ptr, ptr %self, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg5, ptr align 8 %2, i32 16, i1 false)
  %11 = call i64 @std.io.Formatter.out_substr(ptr %retparam4, ptr %10, ptr align 8 %indirectarg5), !dbg !367
  %not_err6 = icmp eq i64 %11, 0, !dbg !367
  %12 = call i1 @llvm.expect.i1(i1 %not_err6, i1 true), !dbg !367
  br i1 %12, label %after_check8, label %assign_optional7, !dbg !367

assign_optional7:                                 ; preds = %after_check
  store i64 %11, ptr %reterr, align 8, !dbg !367
  br label %err_retblock, !dbg !367

after_check8:                                     ; preds = %after_check
  %13 = load i64, ptr %retparam4, align 8, !dbg !367
  %add = add i64 %9, %13, !dbg !367
  %14 = load ptr, ptr %self, align 8
  store %"char[]" { ptr @.str.34, i64 6 }, ptr %indirectarg10, align 8
  %15 = call i64 @std.io.Formatter.out_substr(ptr %retparam9, ptr %14, ptr align 8 %indirectarg10), !dbg !367
  %not_err11 = icmp eq i64 %15, 0, !dbg !367
  %16 = call i1 @llvm.expect.i1(i1 %not_err11, i1 true), !dbg !367
  br i1 %16, label %after_check13, label %assign_optional12, !dbg !367

assign_optional12:                                ; preds = %after_check8
  store i64 %15, ptr %reterr, align 8, !dbg !367
  br label %err_retblock, !dbg !367

after_check13:                                    ; preds = %after_check8
  %17 = load i64, ptr %retparam9, align 8, !dbg !367
  %add14 = add i64 %add, %17, !dbg !367
  %ptradd = getelementptr inbounds i8, ptr %3, i64 8, !dbg !367
  %18 = load i64, ptr %ptradd, align 8, !dbg !367
  %sext = sext i64 %18 to i128, !dbg !367
  %19 = load ptr, ptr %self, align 8
  store i128 %sext, ptr %indirectarg16, align 16
  %20 = call i64 @std.io.Formatter.ntoa(ptr %retparam15, ptr %19, ptr align 16 %indirectarg16, i8 zeroext 0, i32 16), !dbg !367
  %not_err17 = icmp eq i64 %20, 0, !dbg !367
  %21 = call i1 @llvm.expect.i1(i1 %not_err17, i1 true), !dbg !367
  br i1 %21, label %after_check19, label %assign_optional18, !dbg !367

assign_optional18:                                ; preds = %after_check13
  store i64 %20, ptr %reterr, align 8, !dbg !367
  br label %err_retblock, !dbg !367

after_check19:                                    ; preds = %after_check13
  %22 = load i64, ptr %retparam15, align 8, !dbg !367
  %add20 = add i64 %add14, %22, !dbg !367
  %23 = load ptr, ptr %self, align 8
  store %"char[]" { ptr @.str.35, i64 7 }, ptr %indirectarg22, align 8
  %24 = call i64 @std.io.Formatter.out_substr(ptr %retparam21, ptr %23, ptr align 8 %indirectarg22), !dbg !367
  %not_err23 = icmp eq i64 %24, 0, !dbg !367
  %25 = call i1 @llvm.expect.i1(i1 %not_err23, i1 true), !dbg !367
  br i1 %25, label %after_check25, label %assign_optional24, !dbg !367

assign_optional24:                                ; preds = %after_check19
  store i64 %24, ptr %reterr, align 8, !dbg !367
  br label %err_retblock, !dbg !367

after_check25:                                    ; preds = %after_check19
  %26 = load i64, ptr %retparam21, align 8, !dbg !367
  %add26 = add i64 %add20, %26, !dbg !367
  %27 = load ptr, ptr %3, align 8, !dbg !367
  %ptrxi = ptrtoint ptr %27 to i64, !dbg !367
  %sext27 = sext i64 %ptrxi to i128, !dbg !367
  %28 = load ptr, ptr %self, align 8
  store i128 %sext27, ptr %indirectarg29, align 16
  %29 = call i64 @std.io.Formatter.ntoa(ptr %retparam28, ptr %28, ptr align 16 %indirectarg29, i8 zeroext 0, i32 16), !dbg !367
  %not_err30 = icmp eq i64 %29, 0, !dbg !367
  %30 = call i1 @llvm.expect.i1(i1 %not_err30, i1 true), !dbg !367
  br i1 %30, label %after_check32, label %assign_optional31, !dbg !367

assign_optional31:                                ; preds = %after_check25
  store i64 %29, ptr %reterr, align 8, !dbg !367
  br label %err_retblock, !dbg !367

after_check32:                                    ; preds = %after_check25
  %31 = load i64, ptr %retparam28, align 8, !dbg !367
  %add33 = add i64 %add26, %31, !dbg !367
  %32 = load ptr, ptr %self, align 8
  store %"char[]" { ptr @.str.36, i64 1 }, ptr %indirectarg35, align 8
  %33 = call i64 @std.io.Formatter.out_substr(ptr %retparam34, ptr %32, ptr align 8 %indirectarg35), !dbg !367
  %not_err36 = icmp eq i64 %33, 0, !dbg !367
  %34 = call i1 @llvm.expect.i1(i1 %not_err36, i1 true), !dbg !367
  br i1 %34, label %after_check38, label %assign_optional37, !dbg !367

assign_optional37:                                ; preds = %after_check32
  store i64 %33, ptr %reterr, align 8, !dbg !367
  br label %err_retblock, !dbg !367

after_check38:                                    ; preds = %after_check32
  %35 = load i64, ptr %retparam34, align 8, !dbg !367
  %add39 = add i64 %add33, %35, !dbg !367
  store i64 %add39, ptr %0, align 8, !dbg !367
  ret i64 0, !dbg !367

err_retblock:                                     ; preds = %assign_optional37, %assign_optional31, %assign_optional24, %assign_optional18, %assign_optional12, %assign_optional7, %assign_optional
  %36 = load i64, ptr %reterr, align 8, !dbg !367
  ret i64 %36, !dbg !367

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.22, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.32, i64 11 }, ptr %indirectarg2, align 8
  %37 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %37(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 136) #5, !dbg !364
  unreachable, !dbg !364
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @std.io.Formatter.out_str(ptr %0, ptr %1, ptr align 8 %2) #0 !dbg !368 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %switch = alloca i8, align 1
  %reterr = alloca i64, align 8
  %retparam = alloca i64, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %reterr5 = alloca i64, align 8
  %retparam6 = alloca i64, align 8
  %indirectarg7 = alloca %"char[]", align 8
  %reterr13 = alloca i64, align 8
  %indirectarg15 = alloca %"char[]", align 8
  %indirectarg16 = alloca %"char[]", align 8
  %indirectarg17 = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr20 = alloca i64, align 8
  %indirectarg21 = alloca %"char[]", align 8
  %indirectarg22 = alloca %"char[]", align 8
  %indirectarg23 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg25 = alloca %"any[]", align 8
  %faultname_zero = alloca %"char[]", align 8
  %retparam27 = alloca i64, align 8
  %indirectarg28 = alloca %"char[]", align 8
  %reterr34 = alloca i64, align 8
  %indirectarg37 = alloca %"char[]", align 8
  %indirectarg38 = alloca %"char[]", align 8
  %indirectarg39 = alloca %"char[]", align 8
  %taddr42 = alloca i64, align 8
  %taddr43 = alloca i64, align 8
  %indirectarg44 = alloca %"char[]", align 8
  %indirectarg45 = alloca %"char[]", align 8
  %indirectarg46 = alloca %"char[]", align 8
  %varargslots47 = alloca [2 x %any], align 16
  %indirectarg50 = alloca %"any[]", align 8
  %retparam52 = alloca i64, align 8
  %indirectarg53 = alloca %any, align 8
  %string = alloca %"char[]", align 8
  %indirectarg59 = alloca %"char[]", align 8
  %indirectarg60 = alloca %"char[]", align 8
  %indirectarg61 = alloca %"char[]", align 8
  %indirectarg62 = alloca %"any[]", align 8
  %flags = alloca i32, align 4
  %width = alloca i32, align 4
  %reterr70 = alloca i64, align 8
  %retparam71 = alloca i64, align 8
  %indirectarg72 = alloca %any, align 8
  %retparam75 = alloca i64, align 8
  %indirectarg76 = alloca %"char[]", align 8
  %flags88 = alloca i32, align 4
  %width90 = alloca i32, align 4
  %reterr96 = alloca i64, align 8
  %retparam97 = alloca double, align 8
  %indirectarg98 = alloca %any, align 8
  %retparam101 = alloca i64, align 8
  %retparam105 = alloca i64, align 8
  %indirectarg106 = alloca %"char[]", align 8
  %reterr120 = alloca i64, align 8
  %indirectarg123 = alloca %"char[]", align 8
  %indirectarg124 = alloca %"char[]", align 8
  %indirectarg125 = alloca %"char[]", align 8
  %retparam127 = alloca i64, align 8
  %indirectarg128 = alloca %"char[]", align 8
  %n = alloca i64, align 8
  %n.f = alloca i64, align 8
  %retparam133 = alloca i64, align 8
  %indirectarg134 = alloca %any, align 8
  %reterr138 = alloca i64, align 8
  %blockret = alloca i64, align 8
  %f = alloca i64, align 8
  %error_var = alloca i64, align 8
  %switch153 = alloca i8, align 1
  %i = alloca i64, align 8
  %error_var156 = alloca i64, align 8
  %v = alloca %any, align 8
  %indirectarg158 = alloca %"char[]", align 8
  %indirectarg159 = alloca %"char[]", align 8
  %indirectarg160 = alloca %"char[]", align 8
  %indirectarg166 = alloca %"char[]", align 8
  %indirectarg167 = alloca %"char[]", align 8
  %indirectarg168 = alloca %"char[]", align 8
  %self170 = alloca ptr, align 8
  %indirectarg174 = alloca %"char[]", align 8
  %indirectarg175 = alloca %"char[]", align 8
  %indirectarg176 = alloca %"char[]", align 8
  %indirectarg180 = alloca %"char[]", align 8
  %indirectarg181 = alloca %"char[]", align 8
  %indirectarg182 = alloca %"char[]", align 8
  %taddr185 = alloca i64, align 8
  %taddr186 = alloca i64, align 8
  %indirectarg187 = alloca %"char[]", align 8
  %indirectarg188 = alloca %"char[]", align 8
  %indirectarg189 = alloca %"char[]", align 8
  %varargslots190 = alloca [2 x %any], align 16
  %indirectarg193 = alloca %"any[]", align 8
  %indirectarg197 = alloca %"char[]", align 8
  %indirectarg198 = alloca %"char[]", align 8
  %indirectarg199 = alloca %"char[]", align 8
  %taddr202 = alloca i64, align 8
  %taddr203 = alloca i64, align 8
  %indirectarg204 = alloca %"char[]", align 8
  %indirectarg205 = alloca %"char[]", align 8
  %indirectarg206 = alloca %"char[]", align 8
  %varargslots207 = alloca [2 x %any], align 16
  %indirectarg210 = alloca %"any[]", align 8
  %indirectarg230 = alloca %"char[]", align 8
  %indirectarg231 = alloca %"char[]", align 8
  %indirectarg232 = alloca %"char[]", align 8
  %v234 = alloca %any, align 8
  %blockret235 = alloca i64, align 8
  %indirectarg237 = alloca %"char[]", align 8
  %indirectarg238 = alloca %"char[]", align 8
  %indirectarg239 = alloca %"char[]", align 8
  %indirectarg245 = alloca %"char[]", align 8
  %indirectarg246 = alloca %"char[]", align 8
  %indirectarg247 = alloca %"char[]", align 8
  %any_type = alloca i64, align 8
  %kind = alloca i8, align 1
  %is_mixed_signed = alloca i8, align 1
  %max = alloca i64, align 8
  %min = alloca i64, align 8
  %switch255 = alloca i64, align 8
  %c = alloca i8, align 1
  %indirectarg262 = alloca %"char[]", align 8
  %indirectarg263 = alloca %"char[]", align 8
  %indirectarg264 = alloca %"char[]", align 8
  %s = alloca i16, align 2
  %indirectarg279 = alloca %"char[]", align 8
  %indirectarg280 = alloca %"char[]", align 8
  %indirectarg281 = alloca %"char[]", align 8
  %taddr284 = alloca i64, align 8
  %taddr285 = alloca i64, align 8
  %indirectarg286 = alloca %"char[]", align 8
  %indirectarg287 = alloca %"char[]", align 8
  %indirectarg288 = alloca %"char[]", align 8
  %varargslots289 = alloca [2 x %any], align 16
  %indirectarg292 = alloca %"any[]", align 8
  %i317 = alloca i32, align 4
  %indirectarg320 = alloca %"char[]", align 8
  %indirectarg321 = alloca %"char[]", align 8
  %indirectarg322 = alloca %"char[]", align 8
  %taddr325 = alloca i64, align 8
  %taddr326 = alloca i64, align 8
  %indirectarg327 = alloca %"char[]", align 8
  %indirectarg328 = alloca %"char[]", align 8
  %indirectarg329 = alloca %"char[]", align 8
  %varargslots330 = alloca [2 x %any], align 16
  %indirectarg333 = alloca %"any[]", align 8
  %l = alloca i64, align 8
  %indirectarg365 = alloca %"char[]", align 8
  %indirectarg366 = alloca %"char[]", align 8
  %indirectarg367 = alloca %"char[]", align 8
  %taddr370 = alloca i64, align 8
  %taddr371 = alloca i64, align 8
  %indirectarg372 = alloca %"char[]", align 8
  %indirectarg373 = alloca %"char[]", align 8
  %indirectarg374 = alloca %"char[]", align 8
  %varargslots375 = alloca [2 x %any], align 16
  %indirectarg378 = alloca %"any[]", align 8
  %i405 = alloca i128, align 16
  %indirectarg408 = alloca %"char[]", align 8
  %indirectarg409 = alloca %"char[]", align 8
  %indirectarg410 = alloca %"char[]", align 8
  %taddr413 = alloca i64, align 8
  %taddr414 = alloca i64, align 8
  %indirectarg415 = alloca %"char[]", align 8
  %indirectarg416 = alloca %"char[]", align 8
  %indirectarg417 = alloca %"char[]", align 8
  %varargslots418 = alloca [2 x %any], align 16
  %indirectarg421 = alloca %"any[]", align 8
  %c449 = alloca i8, align 1
  %indirectarg452 = alloca %"char[]", align 8
  %indirectarg453 = alloca %"char[]", align 8
  %indirectarg454 = alloca %"char[]", align 8
  %s469 = alloca i16, align 2
  %indirectarg472 = alloca %"char[]", align 8
  %indirectarg473 = alloca %"char[]", align 8
  %indirectarg474 = alloca %"char[]", align 8
  %taddr477 = alloca i64, align 8
  %taddr478 = alloca i64, align 8
  %indirectarg479 = alloca %"char[]", align 8
  %indirectarg480 = alloca %"char[]", align 8
  %indirectarg481 = alloca %"char[]", align 8
  %varargslots482 = alloca [2 x %any], align 16
  %indirectarg485 = alloca %"any[]", align 8
  %i505 = alloca i32, align 4
  %indirectarg508 = alloca %"char[]", align 8
  %indirectarg509 = alloca %"char[]", align 8
  %indirectarg510 = alloca %"char[]", align 8
  %taddr513 = alloca i64, align 8
  %taddr514 = alloca i64, align 8
  %indirectarg515 = alloca %"char[]", align 8
  %indirectarg516 = alloca %"char[]", align 8
  %indirectarg517 = alloca %"char[]", align 8
  %varargslots518 = alloca [2 x %any], align 16
  %indirectarg521 = alloca %"any[]", align 8
  %l541 = alloca i64, align 8
  %indirectarg544 = alloca %"char[]", align 8
  %indirectarg545 = alloca %"char[]", align 8
  %indirectarg546 = alloca %"char[]", align 8
  %taddr549 = alloca i64, align 8
  %taddr550 = alloca i64, align 8
  %indirectarg551 = alloca %"char[]", align 8
  %indirectarg552 = alloca %"char[]", align 8
  %indirectarg553 = alloca %"char[]", align 8
  %varargslots554 = alloca [2 x %any], align 16
  %indirectarg557 = alloca %"any[]", align 8
  %i574 = alloca i128, align 16
  %indirectarg577 = alloca %"char[]", align 8
  %indirectarg578 = alloca %"char[]", align 8
  %indirectarg579 = alloca %"char[]", align 8
  %taddr582 = alloca i64, align 8
  %taddr583 = alloca i64, align 8
  %indirectarg584 = alloca %"char[]", align 8
  %indirectarg585 = alloca %"char[]", align 8
  %indirectarg586 = alloca %"char[]", align 8
  %varargslots587 = alloca [2 x %any], align 16
  %indirectarg590 = alloca %"any[]", align 8
  %string603 = alloca %"char[]", align 8
  %indirectarg604 = alloca %"char[]", align 8
  %indirectarg605 = alloca %"char[]", align 8
  %indirectarg606 = alloca %"char[]", align 8
  %indirectarg607 = alloca %"any[]", align 8
  %indirectarg610 = alloca %"char[]", align 8
  %indirectarg611 = alloca %"char[]", align 8
  %indirectarg612 = alloca %"char[]", align 8
  %varargslots613 = alloca [1 x %any], align 16
  %indirectarg615 = alloca %"any[]", align 8
  %indirectarg622 = alloca %"char[]", align 8
  %indirectarg623 = alloca %"char[]", align 8
  %indirectarg624 = alloca %"char[]", align 8
  %indirectarg630 = alloca %"char[]", align 8
  %indirectarg631 = alloca %"char[]", align 8
  %indirectarg632 = alloca %"char[]", align 8
  %varargslots633 = alloca [1 x %any], align 16
  %indirectarg635 = alloca %"any[]", align 8
  %reterr637 = alloca i64, align 8
  %indirectarg643 = alloca %"char[]", align 8
  %indirectarg644 = alloca %"char[]", align 8
  %indirectarg645 = alloca %"char[]", align 8
  %taddr651 = alloca i64, align 8
  %taddr652 = alloca i64, align 8
  %indirectarg653 = alloca %"char[]", align 8
  %indirectarg654 = alloca %"char[]", align 8
  %indirectarg655 = alloca %"char[]", align 8
  %varargslots656 = alloca [2 x %any], align 16
  %indirectarg659 = alloca %"any[]", align 8
  %taddr662 = alloca i64, align 8
  %taddr663 = alloca i64, align 8
  %indirectarg664 = alloca %"char[]", align 8
  %indirectarg665 = alloca %"char[]", align 8
  %indirectarg666 = alloca %"char[]", align 8
  %varargslots667 = alloca [2 x %any], align 16
  %indirectarg670 = alloca %"any[]", align 8
  %retparam672 = alloca i64, align 8
  %indirectarg673 = alloca %"char[]", align 8
  %reterr679 = alloca i64, align 8
  %retparam680 = alloca i64, align 8
  %indirectarg681 = alloca %"char[]", align 8
  %indirectarg682 = alloca %any, align 8
  %reterr688 = alloca i64, align 8
  %retparam689 = alloca i64, align 8
  %indirectarg690 = alloca %"char[]", align 8
  %indirectarg691 = alloca %any, align 8
  %reterr697 = alloca i64, align 8
  %retparam698 = alloca i64, align 8
  %indirectarg699 = alloca %"char[]", align 8
  %indirectarg700 = alloca %any, align 8
  %flags706 = alloca i32, align 4
  %width708 = alloca i32, align 4
  %reterr713 = alloca i64, align 8
  %error_var714 = alloca i64, align 8
  %retparam715 = alloca i64, align 8
  %indirectarg716 = alloca %"char[]", align 8
  %retparam725 = alloca i64, align 8
  %indirectarg726 = alloca %any, align 8
  %reterr741 = alloca i64, align 8
  %indirectarg744 = alloca %"char[]", align 8
  %indirectarg745 = alloca %"char[]", align 8
  %indirectarg746 = alloca %"char[]", align 8
  %taddr749 = alloca i64, align 8
  %taddr750 = alloca i64, align 8
  %indirectarg751 = alloca %"char[]", align 8
  %indirectarg752 = alloca %"char[]", align 8
  %indirectarg753 = alloca %"char[]", align 8
  %varargslots754 = alloca [2 x %any], align 16
  %indirectarg757 = alloca %"any[]", align 8
  %retparam759 = alloca i64, align 8
  %indirectarg760 = alloca %"char[]", align 8
  %reterr769 = alloca i64, align 8
  %indirectarg772 = alloca %"char[]", align 8
  %indirectarg773 = alloca %"char[]", align 8
  %indirectarg774 = alloca %"char[]", align 8
  %taddr777 = alloca i64, align 8
  %taddr778 = alloca i64, align 8
  %indirectarg779 = alloca %"char[]", align 8
  %indirectarg780 = alloca %"char[]", align 8
  %indirectarg781 = alloca %"char[]", align 8
  %varargslots782 = alloca [2 x %any], align 16
  %indirectarg785 = alloca %"any[]", align 8
  %indirectarg790 = alloca %"char[]", align 8
  %indirectarg791 = alloca %"char[]", align 8
  %indirectarg792 = alloca %"char[]", align 8
  %taddr795 = alloca i64, align 8
  %taddr796 = alloca i64, align 8
  %indirectarg797 = alloca %"char[]", align 8
  %indirectarg798 = alloca %"char[]", align 8
  %indirectarg799 = alloca %"char[]", align 8
  %varargslots800 = alloca [2 x %any], align 16
  %indirectarg803 = alloca %"any[]", align 8
  %sretparam = alloca %"char[]", align 8
  %retparam806 = alloca i64, align 8
  %indirectarg807 = alloca %"char[]", align 8
  %reterr816 = alloca i64, align 8
  %indirectarg819 = alloca %"char[]", align 8
  %indirectarg820 = alloca %"char[]", align 8
  %indirectarg821 = alloca %"char[]", align 8
  %taddr824 = alloca i64, align 8
  %taddr825 = alloca i64, align 8
  %indirectarg826 = alloca %"char[]", align 8
  %indirectarg827 = alloca %"char[]", align 8
  %indirectarg828 = alloca %"char[]", align 8
  %varargslots829 = alloca [2 x %any], align 16
  %indirectarg832 = alloca %"any[]", align 8
  %indirectarg838 = alloca %"char[]", align 8
  %indirectarg839 = alloca %"char[]", align 8
  %indirectarg840 = alloca %"char[]", align 8
  %taddr843 = alloca i64, align 8
  %taddr844 = alloca i64, align 8
  %indirectarg845 = alloca %"char[]", align 8
  %indirectarg846 = alloca %"char[]", align 8
  %indirectarg847 = alloca %"char[]", align 8
  %varargslots848 = alloca [2 x %any], align 16
  %indirectarg851 = alloca %"any[]", align 8
  %sretparam853 = alloca %"char[]", align 8
  %retparam857 = alloca i64, align 8
  %indirectarg858 = alloca %"char[]", align 8
  %reterr864 = alloca i64, align 8
  %self865 = alloca ptr, align 8
  %indirectarg869 = alloca %"char[]", align 8
  %indirectarg870 = alloca %"char[]", align 8
  %indirectarg871 = alloca %"char[]", align 8
  %indirectarg875 = alloca %"char[]", align 8
  %indirectarg876 = alloca %"char[]", align 8
  %indirectarg877 = alloca %"char[]", align 8
  %taddr880 = alloca i64, align 8
  %taddr881 = alloca i64, align 8
  %indirectarg882 = alloca %"char[]", align 8
  %indirectarg883 = alloca %"char[]", align 8
  %indirectarg884 = alloca %"char[]", align 8
  %varargslots885 = alloca [2 x %any], align 16
  %indirectarg888 = alloca %"any[]", align 8
  %indirectarg892 = alloca %"char[]", align 8
  %indirectarg893 = alloca %"char[]", align 8
  %indirectarg894 = alloca %"char[]", align 8
  %taddr897 = alloca i64, align 8
  %taddr898 = alloca i64, align 8
  %indirectarg899 = alloca %"char[]", align 8
  %indirectarg900 = alloca %"char[]", align 8
  %indirectarg901 = alloca %"char[]", align 8
  %varargslots902 = alloca [2 x %any], align 16
  %indirectarg905 = alloca %"any[]", align 8
  %indirectarg926 = alloca %"char[]", align 8
  %indirectarg927 = alloca %"char[]", align 8
  %indirectarg928 = alloca %"char[]", align 8
  %retparam932 = alloca i64, align 8
  %indirectarg933 = alloca %any, align 8
  %inner = alloca i64, align 8
  %indirectarg958 = alloca %"char[]", align 8
  %indirectarg959 = alloca %"char[]", align 8
  %indirectarg960 = alloca %"char[]", align 8
  %pointer = alloca ptr, align 8
  %indirectarg983 = alloca %"char[]", align 8
  %indirectarg984 = alloca %"char[]", align 8
  %indirectarg985 = alloca %"char[]", align 8
  %deref = alloca %any, align 8
  %indirectarg993 = alloca %"char[]", align 8
  %indirectarg994 = alloca %"char[]", align 8
  %indirectarg995 = alloca %"char[]", align 8
  %taddr998 = alloca i64, align 8
  %taddr999 = alloca i64, align 8
  %indirectarg1000 = alloca %"char[]", align 8
  %indirectarg1001 = alloca %"char[]", align 8
  %indirectarg1002 = alloca %"char[]", align 8
  %varargslots1003 = alloca [2 x %any], align 16
  %indirectarg1006 = alloca %"any[]", align 8
  %ptr = alloca ptr, align 8
  %type = alloca i64, align 8
  %retparam1008 = alloca i64, align 8
  %indirectarg1009 = alloca %any, align 8
  %reterr1017 = alloca i64, align 8
  %blockret1019 = alloca i64, align 8
  %f1020 = alloca i64, align 8
  %error_var1033 = alloca i64, align 8
  %flags1042 = alloca i32, align 4
  %width1044 = alloca i32, align 4
  %reterr1049 = alloca i64, align 8
  %error_var1050 = alloca i64, align 8
  %retparam1051 = alloca i64, align 8
  %indirectarg1052 = alloca %"char[]", align 8
  %retparam1061 = alloca i64, align 8
  %indirectarg1062 = alloca %any, align 8
  %flags1075 = alloca i32, align 4
  %width1077 = alloca i32, align 4
  %inner1083 = alloca i64, align 8
  %indirectarg1103 = alloca %"char[]", align 8
  %indirectarg1104 = alloca %"char[]", align 8
  %indirectarg1105 = alloca %"char[]", align 8
  %size = alloca i64, align 8
  %alen = alloca i64, align 8
  %indirectarg1123 = alloca %"char[]", align 8
  %indirectarg1124 = alloca %"char[]", align 8
  %indirectarg1125 = alloca %"char[]", align 8
  %ptr1128 = alloca ptr, align 8
  %len = alloca i64, align 8
  %error_var1129 = alloca i64, align 8
  %retparam1130 = alloca i64, align 8
  %i1139 = alloca i64, align 8
  %error_var1143 = alloca i64, align 8
  %retparam1144 = alloca i64, align 8
  %indirectarg1145 = alloca %"char[]", align 8
  %error_var1156 = alloca i64, align 8
  %ptr1157 = alloca ptr, align 8
  %type1158 = alloca i64, align 8
  %retparam1159 = alloca i64, align 8
  %indirectarg1160 = alloca %any, align 8
  %error_var1171 = alloca i64, align 8
  %retparam1172 = alloca i64, align 8
  %reterr1182 = alloca i64, align 8
  %flags1187 = alloca i32, align 4
  %width1189 = alloca i32, align 4
  %inner1195 = alloca i64, align 8
  %indirectarg1215 = alloca %"char[]", align 8
  %indirectarg1216 = alloca %"char[]", align 8
  %indirectarg1217 = alloca %"char[]", align 8
  %size1221 = alloca i64, align 8
  %vlen = alloca i64, align 8
  %indirectarg1237 = alloca %"char[]", align 8
  %indirectarg1238 = alloca %"char[]", align 8
  %indirectarg1239 = alloca %"char[]", align 8
  %ptr1243 = alloca ptr, align 8
  %len1244 = alloca i64, align 8
  %error_var1245 = alloca i64, align 8
  %retparam1246 = alloca i64, align 8
  %indirectarg1247 = alloca %"char[]", align 8
  %i1256 = alloca i64, align 8
  %error_var1262 = alloca i64, align 8
  %retparam1263 = alloca i64, align 8
  %indirectarg1264 = alloca %"char[]", align 8
  %error_var1275 = alloca i64, align 8
  %ptr1276 = alloca ptr, align 8
  %type1277 = alloca i64, align 8
  %retparam1278 = alloca i64, align 8
  %indirectarg1279 = alloca %any, align 8
  %error_var1292 = alloca i64, align 8
  %retparam1293 = alloca i64, align 8
  %indirectarg1294 = alloca %"char[]", align 8
  %reterr1304 = alloca i64, align 8
  %inner1309 = alloca i64, align 8
  %indirectarg1329 = alloca %"char[]", align 8
  %indirectarg1330 = alloca %"char[]", align 8
  %indirectarg1331 = alloca %"char[]", align 8
  %flags1338 = alloca i32, align 4
  %width1340 = alloca i32, align 4
  %size1346 = alloca i64, align 8
  %temp = alloca ptr, align 8
  %ptr1351 = alloca ptr, align 8
  %indirectarg1354 = alloca %"char[]", align 8
  %indirectarg1355 = alloca %"char[]", align 8
  %indirectarg1356 = alloca %"char[]", align 8
  %taddr1359 = alloca i64, align 8
  %taddr1360 = alloca i64, align 8
  %indirectarg1361 = alloca %"char[]", align 8
  %indirectarg1362 = alloca %"char[]", align 8
  %indirectarg1363 = alloca %"char[]", align 8
  %varargslots1364 = alloca [2 x %any], align 16
  %indirectarg1367 = alloca %"any[]", align 8
  %slen = alloca i64, align 8
  %indirectarg1371 = alloca %"char[]", align 8
  %indirectarg1372 = alloca %"char[]", align 8
  %indirectarg1373 = alloca %"char[]", align 8
  %taddr1376 = alloca i64, align 8
  %taddr1377 = alloca i64, align 8
  %indirectarg1378 = alloca %"char[]", align 8
  %indirectarg1379 = alloca %"char[]", align 8
  %indirectarg1380 = alloca %"char[]", align 8
  %varargslots1381 = alloca [2 x %any], align 16
  %indirectarg1384 = alloca %"any[]", align 8
  %len1387 = alloca i64, align 8
  %error_var1388 = alloca i64, align 8
  %retparam1389 = alloca i64, align 8
  %i1398 = alloca i64, align 8
  %error_var1404 = alloca i64, align 8
  %retparam1405 = alloca i64, align 8
  %indirectarg1406 = alloca %"char[]", align 8
  %error_var1417 = alloca i64, align 8
  %ptr1418 = alloca ptr, align 8
  %type1419 = alloca i64, align 8
  %retparam1420 = alloca i64, align 8
  %indirectarg1421 = alloca %any, align 8
  %error_var1434 = alloca i64, align 8
  %retparam1435 = alloca i64, align 8
  %reterr1445 = alloca i64, align 8
  %string1450 = alloca %"char[]", align 8
  %indirectarg1451 = alloca %"char[]", align 8
  %indirectarg1452 = alloca %"char[]", align 8
  %indirectarg1453 = alloca %"char[]", align 8
  %indirectarg1454 = alloca %"any[]", align 8
  %reterr1456 = alloca i64, align 8
  %retparam1457 = alloca i64, align 8
  %indirectarg1458 = alloca %"char[]", align 8
  %3 = icmp eq ptr %1, null, !dbg !371
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !371
  br i1 %4, label %panic, label %checkok, !dbg !371

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !372, !DIExpression(), !373)
    #dbg_declare(ptr %2, !374, !DIExpression(), !373)
  %ptradd = getelementptr inbounds i8, ptr %2, i64 8, !dbg !375
  %5 = load i64, ptr %ptradd, align 8, !dbg !375
  %"introspect*" = inttoptr i64 %5 to ptr, !dbg !375
  %typeid.kind = load i8, ptr %"introspect*", align 8, !dbg !375
  store i8 %typeid.kind, ptr %switch, align 1
  br label %switch.entry

switch.entry:                                     ; preds = %checkok
  %6 = load i8, ptr %switch, align 1
  switch i8 %6, label %switch.exit [
    i8 5, label %switch.case
    i8 0, label %switch.case4
    i8 6, label %switch.case12
    i8 20, label %switch.case33
    i8 7, label %switch.case33
    i8 14, label %switch.case58
    i8 2, label %switch.case63
    i8 3, label %switch.case63
    i8 4, label %switch.case87
    i8 1, label %switch.case119
  ]

switch.case:                                      ; preds = %switch.entry
  %7 = load ptr, ptr %self, align 8
  store %"char[]" { ptr @.str.38, i64 6 }, ptr %indirectarg3, align 8
  %8 = call i64 @std.io.Formatter.out_substr(ptr %retparam, ptr %7, ptr align 8 %indirectarg3), !dbg !377
  %not_err = icmp eq i64 %8, 0, !dbg !377
  %9 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !377
  br i1 %9, label %after_check, label %assign_optional, !dbg !377

assign_optional:                                  ; preds = %switch.case
  store i64 %8, ptr %reterr, align 8, !dbg !377
  br label %err_retblock, !dbg !377

after_check:                                      ; preds = %switch.case
  %10 = load i64, ptr %retparam, align 8, !dbg !377
  store i64 %10, ptr %0, align 8, !dbg !377
  ret i64 0, !dbg !377

err_retblock:                                     ; preds = %assign_optional
  %11 = load i64, ptr %reterr, align 8, !dbg !377
  ret i64 %11, !dbg !377

switch.case4:                                     ; preds = %switch.entry
  %12 = load ptr, ptr %self, align 8
  store %"char[]" { ptr @.str.39, i64 4 }, ptr %indirectarg7, align 8
  %13 = call i64 @std.io.Formatter.out_substr(ptr %retparam6, ptr %12, ptr align 8 %indirectarg7), !dbg !379
  %not_err8 = icmp eq i64 %13, 0, !dbg !379
  %14 = call i1 @llvm.expect.i1(i1 %not_err8, i1 true), !dbg !379
  br i1 %14, label %after_check10, label %assign_optional9, !dbg !379

assign_optional9:                                 ; preds = %switch.case4
  store i64 %13, ptr %reterr5, align 8, !dbg !379
  br label %err_retblock11, !dbg !379

after_check10:                                    ; preds = %switch.case4
  %15 = load i64, ptr %retparam6, align 8, !dbg !379
  store i64 %15, ptr %0, align 8, !dbg !379
  ret i64 0, !dbg !379

err_retblock11:                                   ; preds = %assign_optional9
  %16 = load i64, ptr %reterr5, align 8, !dbg !379
  ret i64 %16, !dbg !379

switch.case12:                                    ; preds = %switch.entry
  %17 = load ptr, ptr %2, align 8, !dbg !381
  %checknull = icmp eq ptr %17, null, !dbg !381
  %18 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !381
  br i1 %18, label %panic14, label %checkok18, !dbg !381

checkok18:                                        ; preds = %switch.case12
  %19 = ptrtoint ptr %17 to i64, !dbg !381
  %20 = urem i64 %19, 8, !dbg !381
  %21 = icmp ne i64 %20, 0, !dbg !381
  %22 = call i1 @llvm.expect.i1(i1 %21, i1 false), !dbg !381
  br i1 %22, label %panic19, label %checkok26, !dbg !381

checkok26:                                        ; preds = %checkok18
  %23 = load i64, ptr %17, align 8, !dbg !381
  %eq = icmp eq i64 %23, 0
  br i1 %eq, label %faultname_no, label %faultname_ok

faultname_no:                                     ; preds = %checkok26
  call void @llvm.memset.p0.i64(ptr align 8 %faultname_zero, i8 0, i64 16, i1 false)
  br label %faultname_exit

faultname_ok:                                     ; preds = %checkok26
  %24 = inttoptr i64 %23 to ptr
  br label %faultname_exit

faultname_exit:                                   ; preds = %faultname_ok, %faultname_no
  %faultname = phi ptr [ %faultname_zero, %faultname_no ], [ %24, %faultname_ok ]
  %25 = load ptr, ptr %self, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg28, ptr align 8 %faultname, i32 16, i1 false)
  %26 = call i64 @std.io.Formatter.out_substr(ptr %retparam27, ptr %25, ptr align 8 %indirectarg28), !dbg !381
  %not_err29 = icmp eq i64 %26, 0, !dbg !381
  %27 = call i1 @llvm.expect.i1(i1 %not_err29, i1 true), !dbg !381
  br i1 %27, label %after_check31, label %assign_optional30, !dbg !381

assign_optional30:                                ; preds = %faultname_exit
  store i64 %26, ptr %reterr13, align 8, !dbg !381
  br label %err_retblock32, !dbg !381

after_check31:                                    ; preds = %faultname_exit
  %28 = load i64, ptr %retparam27, align 8, !dbg !381
  store i64 %28, ptr %0, align 8, !dbg !381
  ret i64 0, !dbg !381

err_retblock32:                                   ; preds = %assign_optional30
  %29 = load i64, ptr %reterr13, align 8, !dbg !381
  ret i64 %29, !dbg !381

switch.case33:                                    ; preds = %switch.entry, %switch.entry
  %30 = load ptr, ptr %2, align 8, !dbg !383
  %checknull35 = icmp eq ptr %30, null, !dbg !383
  %31 = call i1 @llvm.expect.i1(i1 %checknull35, i1 false), !dbg !383
  br i1 %31, label %panic36, label %checkok40, !dbg !383

checkok40:                                        ; preds = %switch.case33
  %32 = ptrtoint ptr %30 to i64, !dbg !383
  %33 = urem i64 %32, 8, !dbg !383
  %34 = icmp ne i64 %33, 0, !dbg !383
  %35 = call i1 @llvm.expect.i1(i1 %34, i1 false), !dbg !383
  br i1 %35, label %panic41, label %checkok51, !dbg !383

checkok51:                                        ; preds = %checkok40
  %36 = load ptr, ptr %self, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg53, ptr align 8 %30, i32 16, i1 false)
  %37 = call i64 @std.io.Formatter.out_str(ptr %retparam52, ptr %36, ptr align 8 %indirectarg53), !dbg !383
  %not_err54 = icmp eq i64 %37, 0, !dbg !383
  %38 = call i1 @llvm.expect.i1(i1 %not_err54, i1 true), !dbg !383
  br i1 %38, label %after_check56, label %assign_optional55, !dbg !383

assign_optional55:                                ; preds = %checkok51
  store i64 %37, ptr %reterr34, align 8, !dbg !383
  br label %err_retblock57, !dbg !383

after_check56:                                    ; preds = %checkok51
  %39 = load i64, ptr %retparam52, align 8, !dbg !383
  store i64 %39, ptr %0, align 8, !dbg !383
  ret i64 0, !dbg !383

err_retblock57:                                   ; preds = %assign_optional55
  %40 = load i64, ptr %reterr34, align 8, !dbg !383
  ret i64 %40, !dbg !383

switch.case58:                                    ; preds = %switch.entry
  store %"char[]" { ptr @.str.42, i64 30 }, ptr %string, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg59, ptr align 8 %string, i32 16, i1 false)
  store %"char[]" { ptr @.str.43, i64 12 }, ptr %indirectarg60, align 8
  store %"char[]" { ptr @.str.44, i64 17 }, ptr %indirectarg61, align 8
  store %"any[]" zeroinitializer, ptr %indirectarg62, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg59, ptr align 8 %indirectarg60, ptr align 8 %indirectarg61, i32 154, ptr align 8 %indirectarg62), !dbg !385
  unreachable, !dbg !385

switch.case63:                                    ; preds = %switch.entry, %switch.entry
    #dbg_declare(ptr %flags, !389, !DIExpression(), !391)
  %41 = load ptr, ptr %self, align 8, !dbg !391
  %ptradd64 = getelementptr inbounds i8, ptr %41, i64 16, !dbg !391
  %42 = load i32, ptr %ptradd64, align 8, !dbg !391
  store i32 %42, ptr %flags, align 4, !dbg !391
    #dbg_declare(ptr %width, !392, !DIExpression(), !393)
  %43 = load ptr, ptr %self, align 8, !dbg !393
  %ptradd65 = getelementptr inbounds i8, ptr %43, i64 16, !dbg !393
  %ptradd66 = getelementptr inbounds i8, ptr %ptradd65, i64 4, !dbg !393
  %44 = load i32, ptr %ptradd66, align 4, !dbg !393
  store i32 %44, ptr %width, align 4, !dbg !393
  %45 = load ptr, ptr %self, align 8, !dbg !394
  %ptradd67 = getelementptr inbounds i8, ptr %45, i64 16, !dbg !394
  store i32 0, ptr %ptradd67, align 8, !dbg !394
  %46 = load ptr, ptr %self, align 8, !dbg !395
  %ptradd68 = getelementptr inbounds i8, ptr %46, i64 16, !dbg !395
  %ptradd69 = getelementptr inbounds i8, ptr %ptradd68, i64 4, !dbg !395
  store i32 0, ptr %ptradd69, align 4, !dbg !395
  %47 = load ptr, ptr %self, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg72, ptr align 8 %2, i32 16, i1 false)
  %48 = call i64 @std.io.Formatter.ntoa_any(ptr %retparam71, ptr %47, ptr align 8 %indirectarg72, i32 10), !dbg !396
  %not_err73 = icmp eq i64 %48, 0, !dbg !396
  %49 = call i1 @llvm.expect.i1(i1 %not_err73, i1 true), !dbg !396
  br i1 %49, label %after_check74, label %else_block, !dbg !396

after_check74:                                    ; preds = %switch.case63
  %50 = load i64, ptr %retparam71, align 8, !dbg !396
  br label %phi_block, !dbg !396

else_block:                                       ; preds = %switch.case63
  %51 = load ptr, ptr %self, align 8
  store %"char[]" { ptr @.str.45, i64 9 }, ptr %indirectarg76, align 8
  %52 = call i64 @std.io.Formatter.out_substr(ptr %retparam75, ptr %51, ptr align 8 %indirectarg76), !dbg !396
  %not_err77 = icmp eq i64 %52, 0, !dbg !396
  %53 = call i1 @llvm.expect.i1(i1 %not_err77, i1 true), !dbg !396
  br i1 %53, label %after_check79, label %assign_optional78, !dbg !396

assign_optional78:                                ; preds = %else_block
  store i64 %52, ptr %reterr70, align 8, !dbg !396
  br label %err_retblock83, !dbg !396

after_check79:                                    ; preds = %else_block
  %54 = load i64, ptr %retparam75, align 8, !dbg !396
  br label %phi_block, !dbg !396

phi_block:                                        ; preds = %after_check79, %after_check74
  %val = phi i64 [ %50, %after_check74 ], [ %54, %after_check79 ], !dbg !396
  %55 = load ptr, ptr %self, align 8, !dbg !397
  %ptradd80 = getelementptr inbounds i8, ptr %55, i64 16, !dbg !397
  %56 = load i32, ptr %flags, align 4, !dbg !397
  store i32 %56, ptr %ptradd80, align 8, !dbg !397
  %57 = load ptr, ptr %self, align 8, !dbg !399
  %ptradd81 = getelementptr inbounds i8, ptr %57, i64 16, !dbg !399
  %ptradd82 = getelementptr inbounds i8, ptr %ptradd81, i64 4, !dbg !399
  %58 = load i32, ptr %width, align 4, !dbg !399
  store i32 %58, ptr %ptradd82, align 4, !dbg !399
  store i64 %val, ptr %0, align 8, !dbg !399
  ret i64 0, !dbg !399

err_retblock83:                                   ; preds = %assign_optional78
  %59 = load ptr, ptr %self, align 8, !dbg !400
  %ptradd84 = getelementptr inbounds i8, ptr %59, i64 16, !dbg !400
  %60 = load i32, ptr %flags, align 4, !dbg !400
  store i32 %60, ptr %ptradd84, align 8, !dbg !400
  %61 = load ptr, ptr %self, align 8, !dbg !402
  %ptradd85 = getelementptr inbounds i8, ptr %61, i64 16, !dbg !402
  %ptradd86 = getelementptr inbounds i8, ptr %ptradd85, i64 4, !dbg !402
  %62 = load i32, ptr %width, align 4, !dbg !402
  store i32 %62, ptr %ptradd86, align 4, !dbg !402
  %63 = load i64, ptr %reterr70, align 8, !dbg !402
  ret i64 %63, !dbg !402

switch.case87:                                    ; preds = %switch.entry
    #dbg_declare(ptr %flags88, !403, !DIExpression(), !405)
  %64 = load ptr, ptr %self, align 8, !dbg !405
  %ptradd89 = getelementptr inbounds i8, ptr %64, i64 16, !dbg !405
  %65 = load i32, ptr %ptradd89, align 8, !dbg !405
  store i32 %65, ptr %flags88, align 4, !dbg !405
    #dbg_declare(ptr %width90, !406, !DIExpression(), !407)
  %66 = load ptr, ptr %self, align 8, !dbg !407
  %ptradd91 = getelementptr inbounds i8, ptr %66, i64 16, !dbg !407
  %ptradd92 = getelementptr inbounds i8, ptr %ptradd91, i64 4, !dbg !407
  %67 = load i32, ptr %ptradd92, align 4, !dbg !407
  store i32 %67, ptr %width90, align 4, !dbg !407
  %68 = load ptr, ptr %self, align 8, !dbg !408
  %ptradd93 = getelementptr inbounds i8, ptr %68, i64 16, !dbg !408
  store i32 0, ptr %ptradd93, align 8, !dbg !408
  %69 = load ptr, ptr %self, align 8, !dbg !409
  %ptradd94 = getelementptr inbounds i8, ptr %69, i64 16, !dbg !409
  %ptradd95 = getelementptr inbounds i8, ptr %ptradd94, i64 4, !dbg !409
  store i32 0, ptr %ptradd95, align 4, !dbg !409
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg98, ptr align 8 %2, i32 16, i1 false)
  %70 = call i64 @std.io.float_from_any(ptr %retparam97, ptr align 8 %indirectarg98), !dbg !410
  %not_err99 = icmp eq i64 %70, 0, !dbg !410
  %71 = call i1 @llvm.expect.i1(i1 %not_err99, i1 true), !dbg !410
  br i1 %71, label %after_check100, label %else_block104, !dbg !410

after_check100:                                   ; preds = %switch.case87
  %72 = load ptr, ptr %self, align 8
  %73 = load double, ptr %retparam97, align 8
  %74 = call i64 @std.io.Formatter.ftoa(ptr %retparam101, ptr %72, double %73), !dbg !410
  %not_err102 = icmp eq i64 %74, 0, !dbg !410
  %75 = call i1 @llvm.expect.i1(i1 %not_err102, i1 true), !dbg !410
  br i1 %75, label %after_check103, label %else_block104, !dbg !410

after_check103:                                   ; preds = %after_check100
  %76 = load i64, ptr %retparam101, align 8, !dbg !410
  br label %phi_block110, !dbg !410

else_block104:                                    ; preds = %after_check100, %switch.case87
  %77 = load ptr, ptr %self, align 8
  store %"char[]" { ptr @.str.46, i64 3 }, ptr %indirectarg106, align 8
  %78 = call i64 @std.io.Formatter.out_substr(ptr %retparam105, ptr %77, ptr align 8 %indirectarg106), !dbg !410
  %not_err107 = icmp eq i64 %78, 0, !dbg !410
  %79 = call i1 @llvm.expect.i1(i1 %not_err107, i1 true), !dbg !410
  br i1 %79, label %after_check109, label %assign_optional108, !dbg !410

assign_optional108:                               ; preds = %else_block104
  store i64 %78, ptr %reterr96, align 8, !dbg !410
  br label %err_retblock115, !dbg !410

after_check109:                                   ; preds = %else_block104
  %80 = load i64, ptr %retparam105, align 8, !dbg !410
  br label %phi_block110, !dbg !410

phi_block110:                                     ; preds = %after_check109, %after_check103
  %val111 = phi i64 [ %76, %after_check103 ], [ %80, %after_check109 ], !dbg !410
  %81 = load ptr, ptr %self, align 8, !dbg !411
  %ptradd112 = getelementptr inbounds i8, ptr %81, i64 16, !dbg !411
  %82 = load i32, ptr %flags88, align 4, !dbg !411
  store i32 %82, ptr %ptradd112, align 8, !dbg !411
  %83 = load ptr, ptr %self, align 8, !dbg !413
  %ptradd113 = getelementptr inbounds i8, ptr %83, i64 16, !dbg !413
  %ptradd114 = getelementptr inbounds i8, ptr %ptradd113, i64 4, !dbg !413
  %84 = load i32, ptr %width90, align 4, !dbg !413
  store i32 %84, ptr %ptradd114, align 4, !dbg !413
  store i64 %val111, ptr %0, align 8, !dbg !413
  ret i64 0, !dbg !413

err_retblock115:                                  ; preds = %assign_optional108
  %85 = load ptr, ptr %self, align 8, !dbg !414
  %ptradd116 = getelementptr inbounds i8, ptr %85, i64 16, !dbg !414
  %86 = load i32, ptr %flags88, align 4, !dbg !414
  store i32 %86, ptr %ptradd116, align 8, !dbg !414
  %87 = load ptr, ptr %self, align 8, !dbg !416
  %ptradd117 = getelementptr inbounds i8, ptr %87, i64 16, !dbg !416
  %ptradd118 = getelementptr inbounds i8, ptr %ptradd117, i64 4, !dbg !416
  %88 = load i32, ptr %width90, align 4, !dbg !416
  store i32 %88, ptr %ptradd118, align 4, !dbg !416
  %89 = load i64, ptr %reterr96, align 8, !dbg !416
  ret i64 %89, !dbg !416

switch.case119:                                   ; preds = %switch.entry
  %90 = load ptr, ptr %2, align 8, !dbg !417
  %checknull121 = icmp eq ptr %90, null, !dbg !417
  %91 = call i1 @llvm.expect.i1(i1 %checknull121, i1 false), !dbg !417
  br i1 %91, label %panic122, label %checkok126, !dbg !417

checkok126:                                       ; preds = %switch.case119
  %92 = load i8, ptr %90, align 1, !dbg !417
  %93 = trunc i8 %92 to i1, !dbg !417
  %ternary = select i1 %93, %"char[]" { ptr @.str.48, i64 4 }, %"char[]" { ptr @.str.49, i64 5 }, !dbg !417
  %94 = load ptr, ptr %self, align 8
  store %"char[]" %ternary, ptr %indirectarg128, align 8
  %95 = call i64 @std.io.Formatter.out_substr(ptr %retparam127, ptr %94, ptr align 8 %indirectarg128), !dbg !417
  %not_err129 = icmp eq i64 %95, 0, !dbg !417
  %96 = call i1 @llvm.expect.i1(i1 %not_err129, i1 true), !dbg !417
  br i1 %96, label %after_check131, label %assign_optional130, !dbg !417

assign_optional130:                               ; preds = %checkok126
  store i64 %95, ptr %reterr120, align 8, !dbg !417
  br label %err_retblock132, !dbg !417

after_check131:                                   ; preds = %checkok126
  %97 = load i64, ptr %retparam127, align 8, !dbg !417
  store i64 %97, ptr %0, align 8, !dbg !417
  ret i64 0, !dbg !417

err_retblock132:                                  ; preds = %assign_optional130
  %98 = load i64, ptr %reterr120, align 8, !dbg !417
  ret i64 %98, !dbg !417

switch.exit:                                      ; preds = %switch.entry
    #dbg_declare(ptr %n, !419, !DIExpression(), !420)
  %99 = load %any, ptr %2, align 8, !dbg !420
  %100 = load ptr, ptr %self, align 8
  store %any %99, ptr %indirectarg134, align 8
  %101 = call i64 @std.io.Formatter.print_with_function(ptr %retparam133, ptr %100, ptr align 8 %indirectarg134), !dbg !420
  %not_err135 = icmp eq i64 %101, 0, !dbg !420
  %102 = call i1 @llvm.expect.i1(i1 %not_err135, i1 true), !dbg !420
  br i1 %102, label %after_check137, label %assign_optional136, !dbg !420

assign_optional136:                               ; preds = %switch.exit
  store i64 %101, ptr %n.f, align 8, !dbg !420
  br label %after_assign, !dbg !420

after_check137:                                   ; preds = %switch.exit
  %103 = load i64, ptr %retparam133, align 8, !dbg !420
  store i64 %103, ptr %n, align 8, !dbg !420
  store i64 0, ptr %n.f, align 8, !dbg !420
  br label %after_assign, !dbg !420

after_assign:                                     ; preds = %after_check137, %assign_optional136
  %load.err = load i64, ptr %n.f, align 8, !dbg !421
  %result = icmp eq i64 %load.err, 0, !dbg !421
  br i1 %result, label %if.then, label %if.exit, !dbg !421

if.then:                                          ; preds = %after_assign
  %104 = load i64, ptr %n, align 8, !dbg !421
  store i64 %104, ptr %0, align 8, !dbg !421
  ret i64 0, !dbg !421

if.exit:                                          ; preds = %after_assign
    #dbg_declare(ptr %f, !422, !DIExpression(), !424)
  br label %testblock, !dbg !424

testblock:                                        ; preds = %if.exit
  %optval = load i64, ptr %n.f, align 8, !dbg !424
  %not_err139 = icmp eq i64 %optval, 0, !dbg !424
  %105 = call i1 @llvm.expect.i1(i1 %not_err139, i1 true), !dbg !424
  br i1 %105, label %after_check141, label %assign_optional140, !dbg !424

assign_optional140:                               ; preds = %testblock
  store i64 %optval, ptr %f, align 8, !dbg !424
  br label %end_block, !dbg !424

after_check141:                                   ; preds = %testblock
  store i64 0, ptr %f, align 8, !dbg !424
  br label %end_block, !dbg !424

end_block:                                        ; preds = %after_check141, %assign_optional140
  %106 = load i64, ptr %f, align 8, !dbg !424
  %i2b = icmp ne i64 %106, 0, !dbg !424
  br i1 %i2b, label %if.then142, label %if.exit143, !dbg !424

if.then142:                                       ; preds = %end_block
  %107 = load i64, ptr %f, align 8, !dbg !424
  store i64 %107, ptr %blockret, align 8, !dbg !424
  br label %expr_block.exit, !dbg !424

if.exit143:                                       ; preds = %end_block
  store i64 0, ptr %blockret, align 8, !dbg !426
  br label %expr_block.exit, !dbg !426

expr_block.exit:                                  ; preds = %if.exit143, %if.then142
  %108 = load i64, ptr %blockret, align 8, !dbg !426
  %neq = icmp ne i64 %108, ptrtoint (ptr @std.core.builtin.NOT_FOUND to i64), !dbg !425
  br i1 %neq, label %if.then144, label %if.exit149, !dbg !425

if.then144:                                       ; preds = %expr_block.exit
  %optval145 = load i64, ptr %n.f, align 8, !dbg !425
  %not_err146 = icmp eq i64 %optval145, 0, !dbg !425
  %109 = call i1 @llvm.expect.i1(i1 %not_err146, i1 true), !dbg !425
  br i1 %109, label %after_check148, label %assign_optional147, !dbg !425

assign_optional147:                               ; preds = %if.then144
  store i64 %optval145, ptr %error_var, align 8, !dbg !425
  br label %guard_block, !dbg !425

after_check148:                                   ; preds = %if.then144
  br label %noerr_block, !dbg !425

guard_block:                                      ; preds = %assign_optional147
  %110 = load i64, ptr %error_var, align 8, !dbg !425
  ret i64 %110, !dbg !425

noerr_block:                                      ; preds = %after_check148
  br label %if.exit149, !dbg !425

if.exit149:                                       ; preds = %noerr_block, %expr_block.exit
  %ptradd150 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !427
  %111 = load i64, ptr %ptradd150, align 8, !dbg !427
  %"introspect*151" = inttoptr i64 %111 to ptr, !dbg !427
  %typeid.kind152 = load i8, ptr %"introspect*151", align 8, !dbg !427
  store i8 %typeid.kind152, ptr %switch153, align 1
  br label %switch.entry154

switch.entry154:                                  ; preds = %if.exit149
  %112 = load i8, ptr %switch153, align 1
  switch i8 %112, label %switch.exit1455 [
    i8 8, label %switch.case155
    i8 10, label %switch.case678
    i8 11, label %switch.case687
    i8 12, label %switch.case696
    i8 13, label %switch.case705
    i8 9, label %switch.case737
    i8 18, label %switch.case737
    i8 19, label %switch.case938
    i8 15, label %switch.case1074
    i8 17, label %switch.case1186
    i8 16, label %switch.case1308
    i8 7, label %switch.case1449
    i8 20, label %switch.case1449
  ]

switch.case155:                                   ; preds = %switch.entry154
    #dbg_declare(ptr %i, !429, !DIExpression(), !431)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %v, ptr align 8 %2, i32 16, i1 false)
  %113 = call i8 @std.core.types.TypeKind.is_int(i8 3) #6, !dbg !432
  %114 = trunc i8 %113 to i1, !dbg !432
  br i1 %114, label %assert_ok, label %assert_fail, !dbg !432

assert_fail:                                      ; preds = %switch.case155
  store %"char[]" { ptr @.panic_msg.50, i64 69 }, ptr %indirectarg158, align 8
  store %"char[]" { ptr @.file.22, i64 12 }, ptr %indirectarg159, align 8
  store %"char[]" { ptr @.func.37, i64 7 }, ptr %indirectarg160, align 8
  %115 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %115(ptr align 8 %indirectarg158, ptr align 8 %indirectarg159, ptr align 8 %indirectarg160, i32 188) #5, !dbg !432
  unreachable, !dbg !432

assert_ok:                                        ; preds = %switch.case155
  %ptradd161 = getelementptr inbounds i8, ptr %v, i64 8, !dbg !436
  %116 = load i64, ptr %ptradd161, align 8, !dbg !436
  %"introspect*162" = inttoptr i64 %116 to ptr, !dbg !436
  %typeid.kind163 = load i8, ptr %"introspect*162", align 8, !dbg !436
  %eq164 = icmp eq i8 %typeid.kind163, 8, !dbg !432
  br i1 %eq164, label %assert_ok169, label %assert_fail165, !dbg !432

assert_fail165:                                   ; preds = %assert_ok
  store %"char[]" { ptr @.panic_msg.51, i64 67 }, ptr %indirectarg166, align 8
  store %"char[]" { ptr @.file.22, i64 12 }, ptr %indirectarg167, align 8
  store %"char[]" { ptr @.func.37, i64 7 }, ptr %indirectarg168, align 8
  %117 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %117(ptr align 8 %indirectarg166, ptr align 8 %indirectarg167, ptr align 8 %indirectarg168, i32 188) #5, !dbg !432
  unreachable, !dbg !432

assert_ok169:                                     ; preds = %assert_ok
  store ptr %v, ptr %self170, align 8
  %118 = load ptr, ptr %self170, align 8, !dbg !437
  %neq172 = icmp ne ptr %118, null, !dbg !437
  br i1 %neq172, label %assert_ok177, label %assert_fail173, !dbg !437

assert_fail173:                                   ; preds = %assert_ok169
  store %"char[]" { ptr @.panic_msg.52, i64 32 }, ptr %indirectarg174, align 8
  store %"char[]" { ptr @.file.14, i64 10 }, ptr %indirectarg175, align 8
  store %"char[]" { ptr @.func.37, i64 7 }, ptr %indirectarg176, align 8
  %119 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %119(ptr align 8 %indirectarg174, ptr align 8 %indirectarg175, ptr align 8 %indirectarg176, i32 266) #5, !dbg !437
  unreachable, !dbg !437

assert_ok177:                                     ; preds = %assert_ok169
  %120 = load ptr, ptr %self170, align 8, !dbg !441
  %checknull178 = icmp eq ptr %120, null, !dbg !441
  %121 = call i1 @llvm.expect.i1(i1 %checknull178, i1 false), !dbg !441
  br i1 %121, label %panic179, label %checkok183, !dbg !441

checkok183:                                       ; preds = %assert_ok177
  %122 = ptrtoint ptr %120 to i64, !dbg !441
  %123 = urem i64 %122, 8, !dbg !441
  %124 = icmp ne i64 %123, 0, !dbg !441
  %125 = call i1 @llvm.expect.i1(i1 %124, i1 false), !dbg !441
  br i1 %125, label %panic184, label %checkok194, !dbg !441

checkok194:                                       ; preds = %checkok183
  %126 = load ptr, ptr %120, align 8, !dbg !441
  %127 = load ptr, ptr %self170, align 8, !dbg !441
  %checknull195 = icmp eq ptr %127, null, !dbg !441
  %128 = call i1 @llvm.expect.i1(i1 %checknull195, i1 false), !dbg !441
  br i1 %128, label %panic196, label %checkok200, !dbg !441

checkok200:                                       ; preds = %checkok194
  %129 = ptrtoint ptr %127 to i64, !dbg !441
  %130 = urem i64 %129, 8, !dbg !441
  %131 = icmp ne i64 %130, 0, !dbg !441
  %132 = call i1 @llvm.expect.i1(i1 %131, i1 false), !dbg !441
  br i1 %132, label %panic201, label %checkok211, !dbg !441

checkok211:                                       ; preds = %checkok200
  %ptradd212 = getelementptr inbounds i8, ptr %127, i64 8, !dbg !441
  %133 = load i64, ptr %ptradd212, align 8, !dbg !441
  %"introspect*213" = inttoptr i64 %133 to ptr, !dbg !441
  %typeid.kind214 = load i8, ptr %"introspect*213", align 8, !dbg !441
  %eq215 = icmp eq i8 %typeid.kind214, 15, !dbg !441
  br i1 %eq215, label %check_type_ok, label %check_next, !dbg !441

check_next:                                       ; preds = %checkok211
  %eq216 = icmp eq i8 %typeid.kind214, 19, !dbg !441
  br i1 %eq216, label %check_type_ok, label %check_next217, !dbg !441

check_next217:                                    ; preds = %check_next
  %eq218 = icmp eq i8 %typeid.kind214, 17, !dbg !441
  br i1 %eq218, label %check_type_ok, label %check_next219, !dbg !441

check_next219:                                    ; preds = %check_next217
  %eq220 = icmp eq i8 %typeid.kind214, 8, !dbg !441
  br i1 %eq220, label %check_type_ok, label %check_next221, !dbg !441

check_next221:                                    ; preds = %check_next219
  %eq222 = icmp eq i8 %typeid.kind214, 16, !dbg !441
  br i1 %eq222, label %check_type_ok, label %check_next223, !dbg !441

check_next223:                                    ; preds = %check_next221
  %eq224 = icmp eq i8 %typeid.kind214, 18, !dbg !441
  br i1 %eq224, label %check_type_ok, label %check_next225, !dbg !441

check_next225:                                    ; preds = %check_next223
  %eq226 = icmp eq i8 %typeid.kind214, 9, !dbg !441
  br i1 %eq226, label %check_type_ok, label %check_next227, !dbg !441

check_next227:                                    ; preds = %check_next225
  %eq228 = icmp eq i8 %typeid.kind214, 12, !dbg !441
  br i1 %eq228, label %check_type_ok, label %check_next229, !dbg !441

check_next229:                                    ; preds = %check_next227
  store %"char[]" { ptr @.panic_msg.53, i64 49 }, ptr %indirectarg230, align 8
  store %"char[]" { ptr @.file.14, i64 10 }, ptr %indirectarg231, align 8
  store %"char[]" { ptr @.func.37, i64 7 }, ptr %indirectarg232, align 8
  %134 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %134(ptr align 8 %indirectarg230, ptr align 8 %indirectarg231, ptr align 8 %indirectarg232, i32 268) #5, !dbg !441
  unreachable, !dbg !441

check_type_ok:                                    ; preds = %check_next227, %check_next225, %check_next223, %check_next221, %check_next219, %check_next217, %check_next, %checkok211
  %ptradd233 = getelementptr inbounds i8, ptr %"introspect*213", i64 32, !dbg !441
  %typeid.inner = load i64, ptr %ptradd233, align 8, !dbg !441
  %135 = insertvalue %any undef, ptr %126, 0, !dbg !441
  %136 = insertvalue %any %135, i64 %typeid.inner, 1, !dbg !441
  store %any %136, ptr %v234, align 8
  %137 = call i8 @std.core.types.TypeKind.is_int(i8 3) #6, !dbg !442
  %138 = trunc i8 %137 to i1, !dbg !442
  br i1 %138, label %assert_ok240, label %assert_fail236, !dbg !442

assert_fail236:                                   ; preds = %check_type_ok
  store %"char[]" { ptr @.panic_msg.50, i64 69 }, ptr %indirectarg237, align 8
  store %"char[]" { ptr @.file.54, i64 8 }, ptr %indirectarg238, align 8
  store %"char[]" { ptr @.func.37, i64 7 }, ptr %indirectarg239, align 8
  %139 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %139(ptr align 8 %indirectarg237, ptr align 8 %indirectarg238, ptr align 8 %indirectarg239, i32 14) #5, !dbg !442
  unreachable, !dbg !442

assert_ok240:                                     ; preds = %check_type_ok
  %ptradd241 = getelementptr inbounds i8, ptr %v234, i64 8, !dbg !445
  %140 = load i64, ptr %ptradd241, align 8, !dbg !445
  %"introspect*242" = inttoptr i64 %140 to ptr, !dbg !445
  %typeid.kind243 = load i8, ptr %"introspect*242", align 8, !dbg !445
  %141 = call i8 @std.core.types.TypeKind.is_int(i8 %typeid.kind243) #6, !dbg !442
  %142 = trunc i8 %141 to i1, !dbg !442
  br i1 %142, label %assert_ok248, label %assert_fail244, !dbg !442

assert_fail244:                                   ; preds = %assert_ok240
  store %"char[]" { ptr @.panic_msg.55, i64 71 }, ptr %indirectarg245, align 8
  store %"char[]" { ptr @.file.54, i64 8 }, ptr %indirectarg246, align 8
  store %"char[]" { ptr @.func.37, i64 7 }, ptr %indirectarg247, align 8
  %143 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %143(ptr align 8 %indirectarg245, ptr align 8 %indirectarg246, ptr align 8 %indirectarg247, i32 14) #5, !dbg !442
  unreachable, !dbg !442

assert_ok248:                                     ; preds = %assert_ok240
    #dbg_declare(ptr %any_type, !446, !DIExpression(), !447)
  %ptradd249 = getelementptr inbounds i8, ptr %v234, i64 8, !dbg !447
  %144 = load i64, ptr %ptradd249, align 8, !dbg !447
  store i64 %144, ptr %any_type, align 8, !dbg !447
    #dbg_declare(ptr %kind, !448, !DIExpression(), !449)
  %145 = load i64, ptr %any_type, align 8, !dbg !449
  %"introspect*250" = inttoptr i64 %145 to ptr, !dbg !449
  %typeid.kind251 = load i8, ptr %"introspect*250", align 8, !dbg !449
  store i8 %typeid.kind251, ptr %kind, align 1, !dbg !449
    #dbg_declare(ptr %is_mixed_signed, !450, !DIExpression(), !452)
  %146 = load i64, ptr %any_type, align 8, !dbg !452
  %"introspect*252" = inttoptr i64 %146 to ptr, !dbg !452
  %typeid.kind253 = load i8, ptr %"introspect*252", align 8, !dbg !452
  %neq254 = icmp ne i8 3, %typeid.kind253, !dbg !452
  %147 = zext i1 %neq254 to i8, !dbg !452
  store i8 %147, ptr %is_mixed_signed, align 1, !dbg !452
    #dbg_declare(ptr %max, !453, !DIExpression(), !454)
  store i64 -1, ptr %max, align 8, !dbg !454
    #dbg_declare(ptr %min, !455, !DIExpression(), !456)
  store i64 0, ptr %min, align 8, !dbg !456
  %148 = load i64, ptr %any_type, align 8
  store i64 %148, ptr %switch255, align 8
  br label %switch.entry256

switch.entry256:                                  ; preds = %assert_ok248
  %149 = load i64, ptr %switch255, align 8
  br label %check_subtype, !dbg !457

check_subtype:                                    ; preds = %parent_type_block, %switch.entry256
  %150 = phi i64 [ %149, %switch.entry256 ], [ %typeid.parent, %parent_type_block ], !dbg !457
  %eq257 = icmp eq i64 ptrtoint (ptr @"$ct.ichar" to i64), %150, !dbg !457
  br i1 %eq257, label %result_block, label %parent_type_block, !dbg !457

parent_type_block:                                ; preds = %check_subtype
  %151 = inttoptr i64 %150 to ptr, !dbg !457
  %ptradd258 = getelementptr inbounds i8, ptr %151, i64 8, !dbg !457
  %typeid.parent = load i64, ptr %ptradd258, align 8, !dbg !457
  %152 = icmp eq i64 %typeid.parent, 0, !dbg !457
  br i1 %152, label %result_block, label %check_subtype, !dbg !457

result_block:                                     ; preds = %parent_type_block, %check_subtype
  %153 = phi i1 [ false, %parent_type_block ], [ true, %check_subtype ], !dbg !457
  br i1 %153, label %switch.case259, label %next_if, !dbg !457

switch.case259:                                   ; preds = %result_block
    #dbg_declare(ptr %c, !459, !DIExpression(), !462)
  %154 = load ptr, ptr %v234, align 8, !dbg !462
  %checknull260 = icmp eq ptr %154, null, !dbg !462
  %155 = call i1 @llvm.expect.i1(i1 %checknull260, i1 false), !dbg !462
  br i1 %155, label %panic261, label %checkok265, !dbg !462

checkok265:                                       ; preds = %switch.case259
  %156 = load i8, ptr %154, align 1, !dbg !462
  store i8 %156, ptr %c, align 1, !dbg !462
  %157 = load i8, ptr %is_mixed_signed, align 1, !dbg !463
  %158 = trunc i8 %157 to i1, !dbg !463
  br i1 %158, label %and.rhs, label %and.phi, !dbg !463

and.rhs:                                          ; preds = %checkok265
  %159 = load i8, ptr %c, align 1, !dbg !463
  %sext = sext i8 %159 to i32, !dbg !463
  %lt = icmp slt i32 %sext, 0, !dbg !463
  br label %and.phi, !dbg !463

and.phi:                                          ; preds = %and.rhs, %checkok265
  %val266 = phi i1 [ false, %checkok265 ], [ %lt, %and.rhs ], !dbg !463
  br i1 %val266, label %if.then267, label %if.exit268, !dbg !463

if.then267:                                       ; preds = %and.phi
  store i64 ptrtoint (ptr @std.core.types.VALUE_OUT_OF_UNSIGNED_RANGE to i64), ptr %error_var156, align 8, !dbg !463
  br label %panic_block, !dbg !463

if.exit268:                                       ; preds = %and.phi
  %160 = load i8, ptr %c, align 1, !dbg !464
  %sext269 = sext i8 %160 to i64, !dbg !464
  store i64 %sext269, ptr %blockret235, align 8, !dbg !464
  br label %expr_block.exit609, !dbg !464

next_if:                                          ; preds = %result_block
  br label %check_subtype270, !dbg !465

check_subtype270:                                 ; preds = %parent_type_block272, %next_if
  %161 = phi i64 [ %149, %next_if ], [ %typeid.parent274, %parent_type_block272 ], !dbg !465
  %eq271 = icmp eq i64 ptrtoint (ptr @"$ct.short" to i64), %161, !dbg !465
  br i1 %eq271, label %result_block275, label %parent_type_block272, !dbg !465

parent_type_block272:                             ; preds = %check_subtype270
  %162 = inttoptr i64 %161 to ptr, !dbg !465
  %ptradd273 = getelementptr inbounds i8, ptr %162, i64 8, !dbg !465
  %typeid.parent274 = load i64, ptr %ptradd273, align 8, !dbg !465
  %163 = icmp eq i64 %typeid.parent274, 0, !dbg !465
  br i1 %163, label %result_block275, label %check_subtype270, !dbg !465

result_block275:                                  ; preds = %parent_type_block272, %check_subtype270
  %164 = phi i1 [ false, %parent_type_block272 ], [ true, %check_subtype270 ], !dbg !465
  br i1 %164, label %switch.case276, label %next_if309, !dbg !465

switch.case276:                                   ; preds = %result_block275
    #dbg_declare(ptr %s, !466, !DIExpression(), !469)
  %165 = load ptr, ptr %v234, align 8, !dbg !469
  %checknull277 = icmp eq ptr %165, null, !dbg !469
  %166 = call i1 @llvm.expect.i1(i1 %checknull277, i1 false), !dbg !469
  br i1 %166, label %panic278, label %checkok282, !dbg !469

checkok282:                                       ; preds = %switch.case276
  %167 = ptrtoint ptr %165 to i64, !dbg !469
  %168 = urem i64 %167, 2, !dbg !469
  %169 = icmp ne i64 %168, 0, !dbg !469
  %170 = call i1 @llvm.expect.i1(i1 %169, i1 false), !dbg !469
  br i1 %170, label %panic283, label %checkok293, !dbg !469

checkok293:                                       ; preds = %checkok282
  %171 = load i16, ptr %165, align 2, !dbg !469
  store i16 %171, ptr %s, align 2, !dbg !469
  %172 = load i8, ptr %is_mixed_signed, align 1, !dbg !470
  %173 = trunc i8 %172 to i1, !dbg !470
  br i1 %173, label %and.rhs294, label %and.phi297, !dbg !470

and.rhs294:                                       ; preds = %checkok293
  %174 = load i16, ptr %s, align 2, !dbg !470
  %sext295 = sext i16 %174 to i32, !dbg !470
  %lt296 = icmp slt i32 %sext295, 0, !dbg !470
  br label %and.phi297, !dbg !470

and.phi297:                                       ; preds = %and.rhs294, %checkok293
  %val298 = phi i1 [ false, %checkok293 ], [ %lt296, %and.rhs294 ], !dbg !470
  br i1 %val298, label %if.then299, label %if.exit300, !dbg !470

if.then299:                                       ; preds = %and.phi297
  store i64 ptrtoint (ptr @std.core.types.VALUE_OUT_OF_UNSIGNED_RANGE to i64), ptr %error_var156, align 8, !dbg !470
  br label %panic_block, !dbg !470

if.exit300:                                       ; preds = %and.phi297
  %175 = load i16, ptr %s, align 2, !dbg !471
  %sext301 = sext i16 %175 to i64, !dbg !471
  %176 = load i64, ptr %max, align 8, !dbg !471
  %gt = icmp sgt i64 %sext301, %176, !dbg !471
  %check = icmp sge i64 %176, 0, !dbg !471
  %siui-gt = and i1 %check, %gt, !dbg !471
  br i1 %siui-gt, label %or.phi, label %or.rhs, !dbg !471

or.rhs:                                           ; preds = %if.exit300
  %177 = load i16, ptr %s, align 2, !dbg !471
  %sext302 = sext i16 %177 to i64, !dbg !471
  %178 = load i64, ptr %min, align 8, !dbg !471
  %lt303 = icmp slt i64 %sext302, %178, !dbg !471
  %check304 = icmp slt i64 %178, 0, !dbg !471
  %siui-lt = or i1 %check304, %lt303, !dbg !471
  br label %or.phi, !dbg !471

or.phi:                                           ; preds = %or.rhs, %if.exit300
  %val305 = phi i1 [ true, %if.exit300 ], [ %siui-lt, %or.rhs ], !dbg !471
  br i1 %val305, label %if.then306, label %if.exit307, !dbg !471

if.then306:                                       ; preds = %or.phi
  store i64 ptrtoint (ptr @std.core.types.VALUE_OUT_OF_RANGE to i64), ptr %error_var156, align 8, !dbg !471
  br label %panic_block, !dbg !471

if.exit307:                                       ; preds = %or.phi
  %179 = load i16, ptr %s, align 2, !dbg !472
  %sext308 = sext i16 %179 to i64, !dbg !472
  store i64 %sext308, ptr %blockret235, align 8, !dbg !472
  br label %expr_block.exit609, !dbg !472

next_if309:                                       ; preds = %result_block275
  br label %check_subtype310, !dbg !473

check_subtype310:                                 ; preds = %parent_type_block312, %next_if309
  %180 = phi i64 [ %149, %next_if309 ], [ %typeid.parent314, %parent_type_block312 ], !dbg !473
  %eq311 = icmp eq i64 ptrtoint (ptr @"$ct.int" to i64), %180, !dbg !473
  br i1 %eq311, label %result_block315, label %parent_type_block312, !dbg !473

parent_type_block312:                             ; preds = %check_subtype310
  %181 = inttoptr i64 %180 to ptr, !dbg !473
  %ptradd313 = getelementptr inbounds i8, ptr %181, i64 8, !dbg !473
  %typeid.parent314 = load i64, ptr %ptradd313, align 8, !dbg !473
  %182 = icmp eq i64 %typeid.parent314, 0, !dbg !473
  br i1 %182, label %result_block315, label %check_subtype310, !dbg !473

result_block315:                                  ; preds = %parent_type_block312, %check_subtype310
  %183 = phi i1 [ false, %parent_type_block312 ], [ true, %check_subtype310 ], !dbg !473
  br i1 %183, label %switch.case316, label %next_if355, !dbg !473

switch.case316:                                   ; preds = %result_block315
    #dbg_declare(ptr %i317, !474, !DIExpression(), !476)
  %184 = load ptr, ptr %v234, align 8, !dbg !476
  %checknull318 = icmp eq ptr %184, null, !dbg !476
  %185 = call i1 @llvm.expect.i1(i1 %checknull318, i1 false), !dbg !476
  br i1 %185, label %panic319, label %checkok323, !dbg !476

checkok323:                                       ; preds = %switch.case316
  %186 = ptrtoint ptr %184 to i64, !dbg !476
  %187 = urem i64 %186, 4, !dbg !476
  %188 = icmp ne i64 %187, 0, !dbg !476
  %189 = call i1 @llvm.expect.i1(i1 %188, i1 false), !dbg !476
  br i1 %189, label %panic324, label %checkok334, !dbg !476

checkok334:                                       ; preds = %checkok323
  %190 = load i32, ptr %184, align 4, !dbg !476
  store i32 %190, ptr %i317, align 4, !dbg !476
  %191 = load i8, ptr %is_mixed_signed, align 1, !dbg !477
  %192 = trunc i8 %191 to i1, !dbg !477
  br i1 %192, label %and.rhs335, label %and.phi337, !dbg !477

and.rhs335:                                       ; preds = %checkok334
  %193 = load i32, ptr %i317, align 4, !dbg !477
  %lt336 = icmp slt i32 %193, 0, !dbg !477
  br label %and.phi337, !dbg !477

and.phi337:                                       ; preds = %and.rhs335, %checkok334
  %val338 = phi i1 [ false, %checkok334 ], [ %lt336, %and.rhs335 ], !dbg !477
  br i1 %val338, label %if.then339, label %if.exit340, !dbg !477

if.then339:                                       ; preds = %and.phi337
  store i64 ptrtoint (ptr @std.core.types.VALUE_OUT_OF_UNSIGNED_RANGE to i64), ptr %error_var156, align 8, !dbg !477
  br label %panic_block, !dbg !477

if.exit340:                                       ; preds = %and.phi337
  %194 = load i32, ptr %i317, align 4, !dbg !478
  %sext341 = sext i32 %194 to i64, !dbg !478
  %195 = load i64, ptr %max, align 8, !dbg !478
  %gt342 = icmp sgt i64 %sext341, %195, !dbg !478
  %check343 = icmp sge i64 %195, 0, !dbg !478
  %siui-gt344 = and i1 %check343, %gt342, !dbg !478
  br i1 %siui-gt344, label %or.phi350, label %or.rhs345, !dbg !478

or.rhs345:                                        ; preds = %if.exit340
  %196 = load i32, ptr %i317, align 4, !dbg !478
  %sext346 = sext i32 %196 to i64, !dbg !478
  %197 = load i64, ptr %min, align 8, !dbg !478
  %lt347 = icmp slt i64 %sext346, %197, !dbg !478
  %check348 = icmp slt i64 %197, 0, !dbg !478
  %siui-lt349 = or i1 %check348, %lt347, !dbg !478
  br label %or.phi350, !dbg !478

or.phi350:                                        ; preds = %or.rhs345, %if.exit340
  %val351 = phi i1 [ true, %if.exit340 ], [ %siui-lt349, %or.rhs345 ], !dbg !478
  br i1 %val351, label %if.then352, label %if.exit353, !dbg !478

if.then352:                                       ; preds = %or.phi350
  store i64 ptrtoint (ptr @std.core.types.VALUE_OUT_OF_RANGE to i64), ptr %error_var156, align 8, !dbg !478
  br label %panic_block, !dbg !478

if.exit353:                                       ; preds = %or.phi350
  %198 = load i32, ptr %i317, align 4, !dbg !479
  %sext354 = sext i32 %198 to i64, !dbg !479
  store i64 %sext354, ptr %blockret235, align 8, !dbg !479
  br label %expr_block.exit609, !dbg !479

next_if355:                                       ; preds = %result_block315
  br label %check_subtype356, !dbg !480

check_subtype356:                                 ; preds = %parent_type_block358, %next_if355
  %199 = phi i64 [ %149, %next_if355 ], [ %typeid.parent360, %parent_type_block358 ], !dbg !480
  %eq357 = icmp eq i64 ptrtoint (ptr @"$ct.long" to i64), %199, !dbg !480
  br i1 %eq357, label %result_block361, label %parent_type_block358, !dbg !480

parent_type_block358:                             ; preds = %check_subtype356
  %200 = inttoptr i64 %199 to ptr, !dbg !480
  %ptradd359 = getelementptr inbounds i8, ptr %200, i64 8, !dbg !480
  %typeid.parent360 = load i64, ptr %ptradd359, align 8, !dbg !480
  %201 = icmp eq i64 %typeid.parent360, 0, !dbg !480
  br i1 %201, label %result_block361, label %check_subtype356, !dbg !480

result_block361:                                  ; preds = %parent_type_block358, %check_subtype356
  %202 = phi i1 [ false, %parent_type_block358 ], [ true, %check_subtype356 ], !dbg !480
  br i1 %202, label %switch.case362, label %next_if397, !dbg !480

switch.case362:                                   ; preds = %result_block361
    #dbg_declare(ptr %l, !481, !DIExpression(), !483)
  %203 = load ptr, ptr %v234, align 8, !dbg !483
  %checknull363 = icmp eq ptr %203, null, !dbg !483
  %204 = call i1 @llvm.expect.i1(i1 %checknull363, i1 false), !dbg !483
  br i1 %204, label %panic364, label %checkok368, !dbg !483

checkok368:                                       ; preds = %switch.case362
  %205 = ptrtoint ptr %203 to i64, !dbg !483
  %206 = urem i64 %205, 8, !dbg !483
  %207 = icmp ne i64 %206, 0, !dbg !483
  %208 = call i1 @llvm.expect.i1(i1 %207, i1 false), !dbg !483
  br i1 %208, label %panic369, label %checkok379, !dbg !483

checkok379:                                       ; preds = %checkok368
  %209 = load i64, ptr %203, align 8, !dbg !483
  store i64 %209, ptr %l, align 8, !dbg !483
  %210 = load i8, ptr %is_mixed_signed, align 1, !dbg !484
  %211 = trunc i8 %210 to i1, !dbg !484
  br i1 %211, label %and.rhs380, label %and.phi382, !dbg !484

and.rhs380:                                       ; preds = %checkok379
  %212 = load i64, ptr %l, align 8, !dbg !484
  %lt381 = icmp slt i64 %212, 0, !dbg !484
  br label %and.phi382, !dbg !484

and.phi382:                                       ; preds = %and.rhs380, %checkok379
  %val383 = phi i1 [ false, %checkok379 ], [ %lt381, %and.rhs380 ], !dbg !484
  br i1 %val383, label %if.then384, label %if.exit385, !dbg !484

if.then384:                                       ; preds = %and.phi382
  store i64 ptrtoint (ptr @std.core.types.VALUE_OUT_OF_UNSIGNED_RANGE to i64), ptr %error_var156, align 8, !dbg !484
  br label %panic_block, !dbg !484

if.exit385:                                       ; preds = %and.phi382
  %213 = load i64, ptr %l, align 8, !dbg !485
  %214 = load i64, ptr %max, align 8, !dbg !485
  %gt386 = icmp sgt i64 %213, %214, !dbg !485
  %check387 = icmp sge i64 %214, 0, !dbg !485
  %siui-gt388 = and i1 %check387, %gt386, !dbg !485
  br i1 %siui-gt388, label %or.phi393, label %or.rhs389, !dbg !485

or.rhs389:                                        ; preds = %if.exit385
  %215 = load i64, ptr %l, align 8, !dbg !485
  %216 = load i64, ptr %min, align 8, !dbg !485
  %lt390 = icmp slt i64 %215, %216, !dbg !485
  %check391 = icmp slt i64 %216, 0, !dbg !485
  %siui-lt392 = or i1 %check391, %lt390, !dbg !485
  br label %or.phi393, !dbg !485

or.phi393:                                        ; preds = %or.rhs389, %if.exit385
  %val394 = phi i1 [ true, %if.exit385 ], [ %siui-lt392, %or.rhs389 ], !dbg !485
  br i1 %val394, label %if.then395, label %if.exit396, !dbg !485

if.then395:                                       ; preds = %or.phi393
  store i64 ptrtoint (ptr @std.core.types.VALUE_OUT_OF_RANGE to i64), ptr %error_var156, align 8, !dbg !485
  br label %panic_block, !dbg !485

if.exit396:                                       ; preds = %or.phi393
  %217 = load i64, ptr %l, align 8, !dbg !486
  store i64 %217, ptr %blockret235, align 8, !dbg !486
  br label %expr_block.exit609, !dbg !486

next_if397:                                       ; preds = %result_block361
  br label %check_subtype398, !dbg !487

check_subtype398:                                 ; preds = %parent_type_block400, %next_if397
  %218 = phi i64 [ %149, %next_if397 ], [ %typeid.parent402, %parent_type_block400 ], !dbg !487
  %eq399 = icmp eq i64 ptrtoint (ptr @"$ct.int128" to i64), %218, !dbg !487
  br i1 %eq399, label %result_block403, label %parent_type_block400, !dbg !487

parent_type_block400:                             ; preds = %check_subtype398
  %219 = inttoptr i64 %218 to ptr, !dbg !487
  %ptradd401 = getelementptr inbounds i8, ptr %219, i64 8, !dbg !487
  %typeid.parent402 = load i64, ptr %ptradd401, align 8, !dbg !487
  %220 = icmp eq i64 %typeid.parent402, 0, !dbg !487
  br i1 %220, label %result_block403, label %check_subtype398, !dbg !487

result_block403:                                  ; preds = %parent_type_block400, %check_subtype398
  %221 = phi i1 [ false, %parent_type_block400 ], [ true, %check_subtype398 ], !dbg !487
  br i1 %221, label %switch.case404, label %next_if441, !dbg !487

switch.case404:                                   ; preds = %result_block403
    #dbg_declare(ptr %i405, !488, !DIExpression(), !491)
  %222 = load ptr, ptr %v234, align 8, !dbg !491
  %checknull406 = icmp eq ptr %222, null, !dbg !491
  %223 = call i1 @llvm.expect.i1(i1 %checknull406, i1 false), !dbg !491
  br i1 %223, label %panic407, label %checkok411, !dbg !491

checkok411:                                       ; preds = %switch.case404
  %224 = ptrtoint ptr %222 to i64, !dbg !491
  %225 = urem i64 %224, 16, !dbg !491
  %226 = icmp ne i64 %225, 0, !dbg !491
  %227 = call i1 @llvm.expect.i1(i1 %226, i1 false), !dbg !491
  br i1 %227, label %panic412, label %checkok422, !dbg !491

checkok422:                                       ; preds = %checkok411
  %228 = load i128, ptr %222, align 16, !dbg !491
  store i128 %228, ptr %i405, align 16, !dbg !491
  %229 = load i8, ptr %is_mixed_signed, align 1, !dbg !492
  %230 = trunc i8 %229 to i1, !dbg !492
  br i1 %230, label %and.rhs423, label %and.phi425, !dbg !492

and.rhs423:                                       ; preds = %checkok422
  %231 = load i128, ptr %i405, align 16, !dbg !492
  %lt424 = icmp slt i128 %231, 0, !dbg !492
  br label %and.phi425, !dbg !492

and.phi425:                                       ; preds = %and.rhs423, %checkok422
  %val426 = phi i1 [ false, %checkok422 ], [ %lt424, %and.rhs423 ], !dbg !492
  br i1 %val426, label %if.then427, label %if.exit428, !dbg !492

if.then427:                                       ; preds = %and.phi425
  store i64 ptrtoint (ptr @std.core.types.VALUE_OUT_OF_UNSIGNED_RANGE to i64), ptr %error_var156, align 8, !dbg !492
  br label %panic_block, !dbg !492

if.exit428:                                       ; preds = %and.phi425
  %232 = load i128, ptr %i405, align 16, !dbg !493
  %233 = load i64, ptr %max, align 8, !dbg !493
  %zext = zext i64 %233 to i128, !dbg !493
  %gt429 = icmp sgt i128 %232, %zext, !dbg !493
  %check430 = icmp sge i128 %zext, 0, !dbg !493
  %siui-gt431 = and i1 %check430, %gt429, !dbg !493
  br i1 %siui-gt431, label %or.phi437, label %or.rhs432, !dbg !493

or.rhs432:                                        ; preds = %if.exit428
  %234 = load i128, ptr %i405, align 16, !dbg !493
  %235 = load i64, ptr %min, align 8, !dbg !493
  %zext433 = zext i64 %235 to i128, !dbg !493
  %lt434 = icmp slt i128 %234, %zext433, !dbg !493
  %check435 = icmp slt i128 %zext433, 0, !dbg !493
  %siui-lt436 = or i1 %check435, %lt434, !dbg !493
  br label %or.phi437, !dbg !493

or.phi437:                                        ; preds = %or.rhs432, %if.exit428
  %val438 = phi i1 [ true, %if.exit428 ], [ %siui-lt436, %or.rhs432 ], !dbg !493
  br i1 %val438, label %if.then439, label %if.exit440, !dbg !493

if.then439:                                       ; preds = %or.phi437
  store i64 ptrtoint (ptr @std.core.types.VALUE_OUT_OF_RANGE to i64), ptr %error_var156, align 8, !dbg !493
  br label %panic_block, !dbg !493

if.exit440:                                       ; preds = %or.phi437
  %236 = load i128, ptr %i405, align 16, !dbg !494
  %trunc = trunc i128 %236 to i64, !dbg !494
  store i64 %trunc, ptr %blockret235, align 8, !dbg !494
  br label %expr_block.exit609, !dbg !494

next_if441:                                       ; preds = %result_block403
  br label %check_subtype442, !dbg !495

check_subtype442:                                 ; preds = %parent_type_block444, %next_if441
  %237 = phi i64 [ %149, %next_if441 ], [ %typeid.parent446, %parent_type_block444 ], !dbg !495
  %eq443 = icmp eq i64 ptrtoint (ptr @"$ct.char" to i64), %237, !dbg !495
  br i1 %eq443, label %result_block447, label %parent_type_block444, !dbg !495

parent_type_block444:                             ; preds = %check_subtype442
  %238 = inttoptr i64 %237 to ptr, !dbg !495
  %ptradd445 = getelementptr inbounds i8, ptr %238, i64 8, !dbg !495
  %typeid.parent446 = load i64, ptr %ptradd445, align 8, !dbg !495
  %239 = icmp eq i64 %typeid.parent446, 0, !dbg !495
  br i1 %239, label %result_block447, label %check_subtype442, !dbg !495

result_block447:                                  ; preds = %parent_type_block444, %check_subtype442
  %240 = phi i1 [ false, %parent_type_block444 ], [ true, %check_subtype442 ], !dbg !495
  br i1 %240, label %switch.case448, label %next_if461, !dbg !495

switch.case448:                                   ; preds = %result_block447
    #dbg_declare(ptr %c449, !496, !DIExpression(), !498)
  %241 = load ptr, ptr %v234, align 8, !dbg !498
  %checknull450 = icmp eq ptr %241, null, !dbg !498
  %242 = call i1 @llvm.expect.i1(i1 %checknull450, i1 false), !dbg !498
  br i1 %242, label %panic451, label %checkok455, !dbg !498

checkok455:                                       ; preds = %switch.case448
  %243 = load i8, ptr %241, align 1, !dbg !498
  store i8 %243, ptr %c449, align 1, !dbg !498
  %244 = load i8, ptr %c449, align 1, !dbg !499
  %zext456 = zext i8 %244 to i64, !dbg !499
  %245 = load i64, ptr %max, align 8, !dbg !499
  %gt457 = icmp ugt i64 %zext456, %245, !dbg !499
  br i1 %gt457, label %if.then458, label %if.exit459, !dbg !499

if.then458:                                       ; preds = %checkok455
  store i64 ptrtoint (ptr @std.core.types.VALUE_OUT_OF_RANGE to i64), ptr %error_var156, align 8, !dbg !499
  br label %panic_block, !dbg !499

if.exit459:                                       ; preds = %checkok455
  %246 = load i8, ptr %c449, align 1, !dbg !500
  %zext460 = zext i8 %246 to i64, !dbg !500
  store i64 %zext460, ptr %blockret235, align 8, !dbg !500
  br label %expr_block.exit609, !dbg !500

next_if461:                                       ; preds = %result_block447
  br label %check_subtype462, !dbg !501

check_subtype462:                                 ; preds = %parent_type_block464, %next_if461
  %247 = phi i64 [ %149, %next_if461 ], [ %typeid.parent466, %parent_type_block464 ], !dbg !501
  %eq463 = icmp eq i64 ptrtoint (ptr @"$ct.ushort" to i64), %247, !dbg !501
  br i1 %eq463, label %result_block467, label %parent_type_block464, !dbg !501

parent_type_block464:                             ; preds = %check_subtype462
  %248 = inttoptr i64 %247 to ptr, !dbg !501
  %ptradd465 = getelementptr inbounds i8, ptr %248, i64 8, !dbg !501
  %typeid.parent466 = load i64, ptr %ptradd465, align 8, !dbg !501
  %249 = icmp eq i64 %typeid.parent466, 0, !dbg !501
  br i1 %249, label %result_block467, label %check_subtype462, !dbg !501

result_block467:                                  ; preds = %parent_type_block464, %check_subtype462
  %250 = phi i1 [ false, %parent_type_block464 ], [ true, %check_subtype462 ], !dbg !501
  br i1 %250, label %switch.case468, label %next_if497, !dbg !501

switch.case468:                                   ; preds = %result_block467
    #dbg_declare(ptr %s469, !502, !DIExpression(), !505)
  %251 = load ptr, ptr %v234, align 8, !dbg !505
  %checknull470 = icmp eq ptr %251, null, !dbg !505
  %252 = call i1 @llvm.expect.i1(i1 %checknull470, i1 false), !dbg !505
  br i1 %252, label %panic471, label %checkok475, !dbg !505

checkok475:                                       ; preds = %switch.case468
  %253 = ptrtoint ptr %251 to i64, !dbg !505
  %254 = urem i64 %253, 2, !dbg !505
  %255 = icmp ne i64 %254, 0, !dbg !505
  %256 = call i1 @llvm.expect.i1(i1 %255, i1 false), !dbg !505
  br i1 %256, label %panic476, label %checkok486, !dbg !505

checkok486:                                       ; preds = %checkok475
  %257 = load i16, ptr %251, align 2, !dbg !505
  store i16 %257, ptr %s469, align 2, !dbg !505
  %258 = load i16, ptr %s469, align 2, !dbg !506
  %zext487 = zext i16 %258 to i64, !dbg !506
  %259 = load i64, ptr %max, align 8, !dbg !506
  %gt488 = icmp ugt i64 %zext487, %259, !dbg !506
  br i1 %gt488, label %or.phi492, label %or.rhs489, !dbg !506

or.rhs489:                                        ; preds = %checkok486
  %260 = load i16, ptr %s469, align 2, !dbg !506
  %zext490 = zext i16 %260 to i64, !dbg !506
  %261 = load i64, ptr %min, align 8, !dbg !506
  %lt491 = icmp ult i64 %zext490, %261, !dbg !506
  br label %or.phi492, !dbg !506

or.phi492:                                        ; preds = %or.rhs489, %checkok486
  %val493 = phi i1 [ true, %checkok486 ], [ %lt491, %or.rhs489 ], !dbg !506
  br i1 %val493, label %if.then494, label %if.exit495, !dbg !506

if.then494:                                       ; preds = %or.phi492
  store i64 ptrtoint (ptr @std.core.types.VALUE_OUT_OF_RANGE to i64), ptr %error_var156, align 8, !dbg !506
  br label %panic_block, !dbg !506

if.exit495:                                       ; preds = %or.phi492
  %262 = load i16, ptr %s469, align 2, !dbg !507
  %zext496 = zext i16 %262 to i64, !dbg !507
  store i64 %zext496, ptr %blockret235, align 8, !dbg !507
  br label %expr_block.exit609, !dbg !507

next_if497:                                       ; preds = %result_block467
  br label %check_subtype498, !dbg !508

check_subtype498:                                 ; preds = %parent_type_block500, %next_if497
  %263 = phi i64 [ %149, %next_if497 ], [ %typeid.parent502, %parent_type_block500 ], !dbg !508
  %eq499 = icmp eq i64 ptrtoint (ptr @"$ct.uint" to i64), %263, !dbg !508
  br i1 %eq499, label %result_block503, label %parent_type_block500, !dbg !508

parent_type_block500:                             ; preds = %check_subtype498
  %264 = inttoptr i64 %263 to ptr, !dbg !508
  %ptradd501 = getelementptr inbounds i8, ptr %264, i64 8, !dbg !508
  %typeid.parent502 = load i64, ptr %ptradd501, align 8, !dbg !508
  %265 = icmp eq i64 %typeid.parent502, 0, !dbg !508
  br i1 %265, label %result_block503, label %check_subtype498, !dbg !508

result_block503:                                  ; preds = %parent_type_block500, %check_subtype498
  %266 = phi i1 [ false, %parent_type_block500 ], [ true, %check_subtype498 ], !dbg !508
  br i1 %266, label %switch.case504, label %next_if533, !dbg !508

switch.case504:                                   ; preds = %result_block503
    #dbg_declare(ptr %i505, !509, !DIExpression(), !511)
  %267 = load ptr, ptr %v234, align 8, !dbg !511
  %checknull506 = icmp eq ptr %267, null, !dbg !511
  %268 = call i1 @llvm.expect.i1(i1 %checknull506, i1 false), !dbg !511
  br i1 %268, label %panic507, label %checkok511, !dbg !511

checkok511:                                       ; preds = %switch.case504
  %269 = ptrtoint ptr %267 to i64, !dbg !511
  %270 = urem i64 %269, 4, !dbg !511
  %271 = icmp ne i64 %270, 0, !dbg !511
  %272 = call i1 @llvm.expect.i1(i1 %271, i1 false), !dbg !511
  br i1 %272, label %panic512, label %checkok522, !dbg !511

checkok522:                                       ; preds = %checkok511
  %273 = load i32, ptr %267, align 4, !dbg !511
  store i32 %273, ptr %i505, align 4, !dbg !511
  %274 = load i32, ptr %i505, align 4, !dbg !512
  %zext523 = zext i32 %274 to i64, !dbg !512
  %275 = load i64, ptr %max, align 8, !dbg !512
  %gt524 = icmp ugt i64 %zext523, %275, !dbg !512
  br i1 %gt524, label %or.phi528, label %or.rhs525, !dbg !512

or.rhs525:                                        ; preds = %checkok522
  %276 = load i32, ptr %i505, align 4, !dbg !512
  %zext526 = zext i32 %276 to i64, !dbg !512
  %277 = load i64, ptr %min, align 8, !dbg !512
  %lt527 = icmp ult i64 %zext526, %277, !dbg !512
  br label %or.phi528, !dbg !512

or.phi528:                                        ; preds = %or.rhs525, %checkok522
  %val529 = phi i1 [ true, %checkok522 ], [ %lt527, %or.rhs525 ], !dbg !512
  br i1 %val529, label %if.then530, label %if.exit531, !dbg !512

if.then530:                                       ; preds = %or.phi528
  store i64 ptrtoint (ptr @std.core.types.VALUE_OUT_OF_RANGE to i64), ptr %error_var156, align 8, !dbg !512
  br label %panic_block, !dbg !512

if.exit531:                                       ; preds = %or.phi528
  %278 = load i32, ptr %i505, align 4, !dbg !513
  %zext532 = zext i32 %278 to i64, !dbg !513
  store i64 %zext532, ptr %blockret235, align 8, !dbg !513
  br label %expr_block.exit609, !dbg !513

next_if533:                                       ; preds = %result_block503
  br label %check_subtype534, !dbg !514

check_subtype534:                                 ; preds = %parent_type_block536, %next_if533
  %279 = phi i64 [ %149, %next_if533 ], [ %typeid.parent538, %parent_type_block536 ], !dbg !514
  %eq535 = icmp eq i64 ptrtoint (ptr @"$ct.ulong" to i64), %279, !dbg !514
  br i1 %eq535, label %result_block539, label %parent_type_block536, !dbg !514

parent_type_block536:                             ; preds = %check_subtype534
  %280 = inttoptr i64 %279 to ptr, !dbg !514
  %ptradd537 = getelementptr inbounds i8, ptr %280, i64 8, !dbg !514
  %typeid.parent538 = load i64, ptr %ptradd537, align 8, !dbg !514
  %281 = icmp eq i64 %typeid.parent538, 0, !dbg !514
  br i1 %281, label %result_block539, label %check_subtype534, !dbg !514

result_block539:                                  ; preds = %parent_type_block536, %check_subtype534
  %282 = phi i1 [ false, %parent_type_block536 ], [ true, %check_subtype534 ], !dbg !514
  br i1 %282, label %switch.case540, label %next_if566, !dbg !514

switch.case540:                                   ; preds = %result_block539
    #dbg_declare(ptr %l541, !515, !DIExpression(), !517)
  %283 = load ptr, ptr %v234, align 8, !dbg !517
  %checknull542 = icmp eq ptr %283, null, !dbg !517
  %284 = call i1 @llvm.expect.i1(i1 %checknull542, i1 false), !dbg !517
  br i1 %284, label %panic543, label %checkok547, !dbg !517

checkok547:                                       ; preds = %switch.case540
  %285 = ptrtoint ptr %283 to i64, !dbg !517
  %286 = urem i64 %285, 8, !dbg !517
  %287 = icmp ne i64 %286, 0, !dbg !517
  %288 = call i1 @llvm.expect.i1(i1 %287, i1 false), !dbg !517
  br i1 %288, label %panic548, label %checkok558, !dbg !517

checkok558:                                       ; preds = %checkok547
  %289 = load i64, ptr %283, align 8, !dbg !517
  store i64 %289, ptr %l541, align 8, !dbg !517
  %290 = load i64, ptr %l541, align 8, !dbg !518
  %291 = load i64, ptr %max, align 8, !dbg !518
  %gt559 = icmp ugt i64 %290, %291, !dbg !518
  br i1 %gt559, label %or.phi562, label %or.rhs560, !dbg !518

or.rhs560:                                        ; preds = %checkok558
  %292 = load i64, ptr %l541, align 8, !dbg !518
  %293 = load i64, ptr %min, align 8, !dbg !518
  %lt561 = icmp ult i64 %292, %293, !dbg !518
  br label %or.phi562, !dbg !518

or.phi562:                                        ; preds = %or.rhs560, %checkok558
  %val563 = phi i1 [ true, %checkok558 ], [ %lt561, %or.rhs560 ], !dbg !518
  br i1 %val563, label %if.then564, label %if.exit565, !dbg !518

if.then564:                                       ; preds = %or.phi562
  store i64 ptrtoint (ptr @std.core.types.VALUE_OUT_OF_RANGE to i64), ptr %error_var156, align 8, !dbg !518
  br label %panic_block, !dbg !518

if.exit565:                                       ; preds = %or.phi562
  %294 = load i64, ptr %l541, align 8, !dbg !519
  store i64 %294, ptr %blockret235, align 8, !dbg !519
  br label %expr_block.exit609, !dbg !519

next_if566:                                       ; preds = %result_block539
  br label %check_subtype567, !dbg !520

check_subtype567:                                 ; preds = %parent_type_block569, %next_if566
  %295 = phi i64 [ %149, %next_if566 ], [ %typeid.parent571, %parent_type_block569 ], !dbg !520
  %eq568 = icmp eq i64 ptrtoint (ptr @"$ct.uint128" to i64), %295, !dbg !520
  br i1 %eq568, label %result_block572, label %parent_type_block569, !dbg !520

parent_type_block569:                             ; preds = %check_subtype567
  %296 = inttoptr i64 %295 to ptr, !dbg !520
  %ptradd570 = getelementptr inbounds i8, ptr %296, i64 8, !dbg !520
  %typeid.parent571 = load i64, ptr %ptradd570, align 8, !dbg !520
  %297 = icmp eq i64 %typeid.parent571, 0, !dbg !520
  br i1 %297, label %result_block572, label %check_subtype567, !dbg !520

result_block572:                                  ; preds = %parent_type_block569, %check_subtype567
  %298 = phi i1 [ false, %parent_type_block569 ], [ true, %check_subtype567 ], !dbg !520
  br i1 %298, label %switch.case573, label %next_if602, !dbg !520

switch.case573:                                   ; preds = %result_block572
    #dbg_declare(ptr %i574, !521, !DIExpression(), !524)
  %299 = load ptr, ptr %v234, align 8, !dbg !524
  %checknull575 = icmp eq ptr %299, null, !dbg !524
  %300 = call i1 @llvm.expect.i1(i1 %checknull575, i1 false), !dbg !524
  br i1 %300, label %panic576, label %checkok580, !dbg !524

checkok580:                                       ; preds = %switch.case573
  %301 = ptrtoint ptr %299 to i64, !dbg !524
  %302 = urem i64 %301, 16, !dbg !524
  %303 = icmp ne i64 %302, 0, !dbg !524
  %304 = call i1 @llvm.expect.i1(i1 %303, i1 false), !dbg !524
  br i1 %304, label %panic581, label %checkok591, !dbg !524

checkok591:                                       ; preds = %checkok580
  %305 = load i128, ptr %299, align 16, !dbg !524
  store i128 %305, ptr %i574, align 16, !dbg !524
  %306 = load i128, ptr %i574, align 16, !dbg !525
  %307 = load i64, ptr %max, align 8, !dbg !525
  %zext592 = zext i64 %307 to i128, !dbg !525
  %gt593 = icmp ugt i128 %306, %zext592, !dbg !525
  br i1 %gt593, label %or.phi597, label %or.rhs594, !dbg !525

or.rhs594:                                        ; preds = %checkok591
  %308 = load i128, ptr %i574, align 16, !dbg !525
  %309 = load i64, ptr %min, align 8, !dbg !525
  %zext595 = zext i64 %309 to i128, !dbg !525
  %lt596 = icmp ult i128 %308, %zext595, !dbg !525
  br label %or.phi597, !dbg !525

or.phi597:                                        ; preds = %or.rhs594, %checkok591
  %val598 = phi i1 [ true, %checkok591 ], [ %lt596, %or.rhs594 ], !dbg !525
  br i1 %val598, label %if.then599, label %if.exit600, !dbg !525

if.then599:                                       ; preds = %or.phi597
  store i64 ptrtoint (ptr @std.core.types.VALUE_OUT_OF_RANGE to i64), ptr %error_var156, align 8, !dbg !525
  br label %panic_block, !dbg !525

if.exit600:                                       ; preds = %or.phi597
  %310 = load i128, ptr %i574, align 16, !dbg !526
  %trunc601 = trunc i128 %310 to i64, !dbg !526
  store i64 %trunc601, ptr %blockret235, align 8, !dbg !526
  br label %expr_block.exit609, !dbg !526

next_if602:                                       ; preds = %result_block572
  br label %switch.default, !dbg !526

switch.default:                                   ; preds = %next_if602
  store %"char[]" { ptr @.str.65, i64 30 }, ptr %string603, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg604, ptr align 8 %string603, i32 16, i1 false)
  store %"char[]" { ptr @.str.66, i64 12 }, ptr %indirectarg605, align 8
  store %"char[]" { ptr @.str.67, i64 17 }, ptr %indirectarg606, align 8
  store %"any[]" zeroinitializer, ptr %indirectarg607, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg604, ptr align 8 %indirectarg605, ptr align 8 %indirectarg606, i32 188, ptr align 8 %indirectarg607), !dbg !527
  unreachable, !dbg !527

expr_block.exit609:                               ; preds = %if.exit600, %if.exit565, %if.exit531, %if.exit495, %if.exit459, %if.exit440, %if.exit396, %if.exit353, %if.exit307, %if.exit268
  br label %noerr_block616, !dbg !527

panic_block:                                      ; preds = %if.then599, %if.then564, %if.then530, %if.then494, %if.then458, %if.then439, %if.then427, %if.then395, %if.then384, %if.then352, %if.then339, %if.then306, %if.then299, %if.then267
  %311 = insertvalue %any undef, ptr %error_var156, 0, !dbg !527
  %312 = insertvalue %any %311, i64 ptrtoint (ptr @"$ct.fault" to i64), 1, !dbg !527
  store %"char[]" { ptr @.panic_msg.68, i64 36 }, ptr %indirectarg610, align 8
  store %"char[]" { ptr @.file.22, i64 12 }, ptr %indirectarg611, align 8
  store %"char[]" { ptr @.func.37, i64 7 }, ptr %indirectarg612, align 8
  store %any %312, ptr %varargslots613, align 16
  %313 = insertvalue %"any[]" undef, ptr %varargslots613, 0
  %"$$temp614" = insertvalue %"any[]" %313, i64 1, 1
  store %"any[]" %"$$temp614", ptr %indirectarg615, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg610, ptr align 8 %indirectarg611, ptr align 8 %indirectarg612, i32 188, ptr align 8 %indirectarg615) #5, !dbg !431
  unreachable, !dbg !431

noerr_block616:                                   ; preds = %expr_block.exit609
  %314 = load i64, ptr %blockret235, align 8, !dbg !431
  store i64 %314, ptr %i, align 8, !dbg !431
  %315 = load i64, ptr %i, align 8, !dbg !531
  %ptradd617 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !531
  %316 = load i64, ptr %ptradd617, align 8, !dbg !531
  %"introspect*618" = inttoptr i64 %316 to ptr, !dbg !531
  %typeid.kind619 = load i8, ptr %"introspect*618", align 8, !dbg !531
  %eq620 = icmp eq i8 %typeid.kind619, 8, !dbg !531
  br i1 %eq620, label %check_type_ok625, label %check_next621, !dbg !531

check_next621:                                    ; preds = %noerr_block616
  store %"char[]" { ptr @.panic_msg.69, i64 51 }, ptr %indirectarg622, align 8
  store %"char[]" { ptr @.file.22, i64 12 }, ptr %indirectarg623, align 8
  store %"char[]" { ptr @.func.37, i64 7 }, ptr %indirectarg624, align 8
  %317 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %317(ptr align 8 %indirectarg622, ptr align 8 %indirectarg623, ptr align 8 %indirectarg624, i32 189) #5, !dbg !531
  unreachable, !dbg !531

check_type_ok625:                                 ; preds = %noerr_block616
  %ptradd626 = getelementptr inbounds i8, ptr %"introspect*618", i64 40, !dbg !531
  %namelen = load i64, ptr %ptradd626, align 8, !dbg !531
  %ptradd627 = getelementptr inbounds i8, ptr %"introspect*618", i64 48, !dbg !531
  %318 = insertvalue %"char[][]" undef, ptr %ptradd627, 0, !dbg !531
  %319 = insertvalue %"char[][]" %318, i64 %namelen, 1, !dbg !531
  %320 = extractvalue %"char[][]" %319, 1, !dbg !531
  %lt628 = icmp ult i64 %315, %320, !dbg !531
  br i1 %lt628, label %assert_ok636, label %assert_fail629, !dbg !531

assert_fail629:                                   ; preds = %check_type_ok625
  %321 = insertvalue %any undef, ptr %i, 0, !dbg !531
  %322 = insertvalue %any %321, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1, !dbg !531
  store %"char[]" { ptr @.panic_msg.70, i64 49 }, ptr %indirectarg630, align 8
  store %"char[]" { ptr @.file.22, i64 12 }, ptr %indirectarg631, align 8
  store %"char[]" { ptr @.func.37, i64 7 }, ptr %indirectarg632, align 8
  store %any %322, ptr %varargslots633, align 16
  %323 = insertvalue %"any[]" undef, ptr %varargslots633, 0
  %"$$temp634" = insertvalue %"any[]" %323, i64 1, 1
  store %"any[]" %"$$temp634", ptr %indirectarg635, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg630, ptr align 8 %indirectarg631, ptr align 8 %indirectarg632, i32 189, ptr align 8 %indirectarg635) #5, !dbg !531
  unreachable, !dbg !531

assert_ok636:                                     ; preds = %check_type_ok625
  %ptradd638 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !532
  %324 = load i64, ptr %ptradd638, align 8, !dbg !532
  %"introspect*639" = inttoptr i64 %324 to ptr, !dbg !532
  %typeid.kind640 = load i8, ptr %"introspect*639", align 8, !dbg !532
  %eq641 = icmp eq i8 %typeid.kind640, 8, !dbg !532
  br i1 %eq641, label %check_type_ok646, label %check_next642, !dbg !532

check_next642:                                    ; preds = %assert_ok636
  store %"char[]" { ptr @.panic_msg.69, i64 51 }, ptr %indirectarg643, align 8
  store %"char[]" { ptr @.file.22, i64 12 }, ptr %indirectarg644, align 8
  store %"char[]" { ptr @.func.37, i64 7 }, ptr %indirectarg645, align 8
  %325 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %325(ptr align 8 %indirectarg643, ptr align 8 %indirectarg644, ptr align 8 %indirectarg645, i32 190) #5, !dbg !532
  unreachable, !dbg !532

check_type_ok646:                                 ; preds = %assert_ok636
  %ptradd647 = getelementptr inbounds i8, ptr %"introspect*639", i64 40, !dbg !532
  %namelen648 = load i64, ptr %ptradd647, align 8, !dbg !532
  %ptradd649 = getelementptr inbounds i8, ptr %"introspect*639", i64 48, !dbg !532
  %326 = insertvalue %"char[][]" undef, ptr %ptradd649, 0, !dbg !532
  %327 = insertvalue %"char[][]" %326, i64 %namelen648, 1, !dbg !532
  %328 = extractvalue %"char[][]" %327, 1, !dbg !532
  %329 = extractvalue %"char[][]" %327, 0, !dbg !532
  %330 = load i64, ptr %i, align 8, !dbg !532
  %ge = icmp uge i64 %330, %328, !dbg !532
  %331 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !532
  br i1 %331, label %panic650, label %checkok660, !dbg !532

checkok660:                                       ; preds = %check_type_ok646
  %ptroffset = getelementptr inbounds [16 x i8], ptr %329, i64 %330, !dbg !532
  %332 = ptrtoint ptr %ptroffset to i64, !dbg !532
  %333 = urem i64 %332, 8, !dbg !532
  %334 = icmp ne i64 %333, 0, !dbg !532
  %335 = call i1 @llvm.expect.i1(i1 %334, i1 false), !dbg !532
  br i1 %335, label %panic661, label %checkok671, !dbg !532

checkok671:                                       ; preds = %checkok660
  %336 = load ptr, ptr %self, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg673, ptr align 8 %ptroffset, i32 16, i1 false)
  %337 = call i64 @std.io.Formatter.out_substr(ptr %retparam672, ptr %336, ptr align 8 %indirectarg673), !dbg !532
  %not_err674 = icmp eq i64 %337, 0, !dbg !532
  %338 = call i1 @llvm.expect.i1(i1 %not_err674, i1 true), !dbg !532
  br i1 %338, label %after_check676, label %assign_optional675, !dbg !532

assign_optional675:                               ; preds = %checkok671
  store i64 %337, ptr %reterr637, align 8, !dbg !532
  br label %err_retblock677, !dbg !532

after_check676:                                   ; preds = %checkok671
  %339 = load i64, ptr %retparam672, align 8, !dbg !532
  store i64 %339, ptr %0, align 8, !dbg !532
  ret i64 0, !dbg !532

err_retblock677:                                  ; preds = %assign_optional675
  %340 = load i64, ptr %reterr637, align 8, !dbg !532
  ret i64 %340, !dbg !532

switch.case678:                                   ; preds = %switch.entry154
  %341 = load ptr, ptr %self, align 8
  store %"char[]" { ptr @.str.72, i64 6 }, ptr %indirectarg681, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg682, ptr align 8 %2, i32 16, i1 false)
  %342 = call i64 @std.io.Formatter.out_unknown(ptr %retparam680, ptr %341, ptr align 8 %indirectarg681, ptr align 8 %indirectarg682), !dbg !533
  %not_err683 = icmp eq i64 %342, 0, !dbg !533
  %343 = call i1 @llvm.expect.i1(i1 %not_err683, i1 true), !dbg !533
  br i1 %343, label %after_check685, label %assign_optional684, !dbg !533

assign_optional684:                               ; preds = %switch.case678
  store i64 %342, ptr %reterr679, align 8, !dbg !533
  br label %err_retblock686, !dbg !533

after_check685:                                   ; preds = %switch.case678
  %344 = load i64, ptr %retparam680, align 8, !dbg !533
  store i64 %344, ptr %0, align 8, !dbg !533
  ret i64 0, !dbg !533

err_retblock686:                                  ; preds = %assign_optional684
  %345 = load i64, ptr %reterr679, align 8, !dbg !533
  ret i64 %345, !dbg !533

switch.case687:                                   ; preds = %switch.entry154
  %346 = load ptr, ptr %self, align 8
  store %"char[]" { ptr @.str.73, i64 5 }, ptr %indirectarg690, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg691, ptr align 8 %2, i32 16, i1 false)
  %347 = call i64 @std.io.Formatter.out_unknown(ptr %retparam689, ptr %346, ptr align 8 %indirectarg690, ptr align 8 %indirectarg691), !dbg !535
  %not_err692 = icmp eq i64 %347, 0, !dbg !535
  %348 = call i1 @llvm.expect.i1(i1 %not_err692, i1 true), !dbg !535
  br i1 %348, label %after_check694, label %assign_optional693, !dbg !535

assign_optional693:                               ; preds = %switch.case687
  store i64 %347, ptr %reterr688, align 8, !dbg !535
  br label %err_retblock695, !dbg !535

after_check694:                                   ; preds = %switch.case687
  %349 = load i64, ptr %retparam689, align 8, !dbg !535
  store i64 %349, ptr %0, align 8, !dbg !535
  ret i64 0, !dbg !535

err_retblock695:                                  ; preds = %assign_optional693
  %350 = load i64, ptr %reterr688, align 8, !dbg !535
  ret i64 %350, !dbg !535

switch.case696:                                   ; preds = %switch.entry154
  %351 = load ptr, ptr %self, align 8
  store %"char[]" { ptr @.str.74, i64 9 }, ptr %indirectarg699, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg700, ptr align 8 %2, i32 16, i1 false)
  %352 = call i64 @std.io.Formatter.out_unknown(ptr %retparam698, ptr %351, ptr align 8 %indirectarg699, ptr align 8 %indirectarg700), !dbg !537
  %not_err701 = icmp eq i64 %352, 0, !dbg !537
  %353 = call i1 @llvm.expect.i1(i1 %not_err701, i1 true), !dbg !537
  br i1 %353, label %after_check703, label %assign_optional702, !dbg !537

assign_optional702:                               ; preds = %switch.case696
  store i64 %352, ptr %reterr697, align 8, !dbg !537
  br label %err_retblock704, !dbg !537

after_check703:                                   ; preds = %switch.case696
  %354 = load i64, ptr %retparam698, align 8, !dbg !537
  store i64 %354, ptr %0, align 8, !dbg !537
  ret i64 0, !dbg !537

err_retblock704:                                  ; preds = %assign_optional702
  %355 = load i64, ptr %reterr697, align 8, !dbg !537
  ret i64 %355, !dbg !537

switch.case705:                                   ; preds = %switch.entry154
    #dbg_declare(ptr %flags706, !539, !DIExpression(), !541)
  %356 = load ptr, ptr %self, align 8, !dbg !541
  %ptradd707 = getelementptr inbounds i8, ptr %356, i64 16, !dbg !541
  %357 = load i32, ptr %ptradd707, align 8, !dbg !541
  store i32 %357, ptr %flags706, align 4, !dbg !541
    #dbg_declare(ptr %width708, !542, !DIExpression(), !543)
  %358 = load ptr, ptr %self, align 8, !dbg !543
  %ptradd709 = getelementptr inbounds i8, ptr %358, i64 16, !dbg !543
  %ptradd710 = getelementptr inbounds i8, ptr %ptradd709, i64 4, !dbg !543
  %359 = load i32, ptr %ptradd710, align 4, !dbg !543
  store i32 %359, ptr %width708, align 4, !dbg !543
  %360 = load ptr, ptr %self, align 8, !dbg !544
  %ptradd711 = getelementptr inbounds i8, ptr %360, i64 16, !dbg !544
  %ptradd712 = getelementptr inbounds i8, ptr %ptradd711, i64 4, !dbg !544
  store i32 0, ptr %ptradd712, align 4, !dbg !544
  %361 = load ptr, ptr %self, align 8
  store %"char[]" { ptr @.str.75, i64 2 }, ptr %indirectarg716, align 8
  %362 = call i64 @std.io.Formatter.out_substr(ptr %retparam715, ptr %361, ptr align 8 %indirectarg716), !dbg !545
  %not_err717 = icmp eq i64 %362, 0, !dbg !545
  %363 = call i1 @llvm.expect.i1(i1 %not_err717, i1 true), !dbg !545
  br i1 %363, label %after_check719, label %assign_optional718, !dbg !545

assign_optional718:                               ; preds = %switch.case705
  store i64 %362, ptr %error_var714, align 8, !dbg !545
  br label %guard_block720, !dbg !545

after_check719:                                   ; preds = %switch.case705
  br label %noerr_block724, !dbg !545

guard_block720:                                   ; preds = %assign_optional718
  %364 = load ptr, ptr %self, align 8, !dbg !546
  %ptradd721 = getelementptr inbounds i8, ptr %364, i64 16, !dbg !546
  %365 = load i32, ptr %flags706, align 4, !dbg !546
  store i32 %365, ptr %ptradd721, align 8, !dbg !546
  %366 = load ptr, ptr %self, align 8, !dbg !548
  %ptradd722 = getelementptr inbounds i8, ptr %366, i64 16, !dbg !548
  %ptradd723 = getelementptr inbounds i8, ptr %ptradd722, i64 4, !dbg !548
  %367 = load i32, ptr %width708, align 4, !dbg !548
  store i32 %367, ptr %ptradd723, align 4, !dbg !548
  %368 = load i64, ptr %error_var714, align 8, !dbg !548
  ret i64 %368, !dbg !548

noerr_block724:                                   ; preds = %after_check719
  %369 = load i64, ptr %retparam715, align 8, !dbg !548
  %370 = load ptr, ptr %self, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg726, ptr align 8 %2, i32 16, i1 false)
  %371 = call i64 @std.io.Formatter.ntoa_any(ptr %retparam725, ptr %370, ptr align 8 %indirectarg726, i32 16), !dbg !545
  %not_err727 = icmp eq i64 %371, 0, !dbg !545
  %372 = call i1 @llvm.expect.i1(i1 %not_err727, i1 true), !dbg !545
  br i1 %372, label %after_check729, label %assign_optional728, !dbg !545

assign_optional728:                               ; preds = %noerr_block724
  store i64 %371, ptr %reterr713, align 8, !dbg !545
  br label %err_retblock733, !dbg !545

after_check729:                                   ; preds = %noerr_block724
  %373 = load i64, ptr %retparam725, align 8, !dbg !545
  %add = add i64 %369, %373, !dbg !545
  %374 = load ptr, ptr %self, align 8, !dbg !549
  %ptradd730 = getelementptr inbounds i8, ptr %374, i64 16, !dbg !549
  %375 = load i32, ptr %flags706, align 4, !dbg !549
  store i32 %375, ptr %ptradd730, align 8, !dbg !549
  %376 = load ptr, ptr %self, align 8, !dbg !551
  %ptradd731 = getelementptr inbounds i8, ptr %376, i64 16, !dbg !551
  %ptradd732 = getelementptr inbounds i8, ptr %ptradd731, i64 4, !dbg !551
  %377 = load i32, ptr %width708, align 4, !dbg !551
  store i32 %377, ptr %ptradd732, align 4, !dbg !551
  store i64 %add, ptr %0, align 8, !dbg !551
  ret i64 0, !dbg !551

err_retblock733:                                  ; preds = %assign_optional728
  %378 = load ptr, ptr %self, align 8, !dbg !552
  %ptradd734 = getelementptr inbounds i8, ptr %378, i64 16, !dbg !552
  %379 = load i32, ptr %flags706, align 4, !dbg !552
  store i32 %379, ptr %ptradd734, align 8, !dbg !552
  %380 = load ptr, ptr %self, align 8, !dbg !554
  %ptradd735 = getelementptr inbounds i8, ptr %380, i64 16, !dbg !554
  %ptradd736 = getelementptr inbounds i8, ptr %ptradd735, i64 4, !dbg !554
  %381 = load i32, ptr %width708, align 4, !dbg !554
  store i32 %381, ptr %ptradd736, align 4, !dbg !554
  %382 = load i64, ptr %reterr713, align 8, !dbg !554
  ret i64 %382, !dbg !554

switch.case737:                                   ; preds = %switch.entry154, %switch.entry154
  %ptradd738 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !555
  %383 = load i64, ptr %ptradd738, align 8, !dbg !555
  %eq739 = icmp eq i64 %383, ptrtoint (ptr @"$ct.String" to i64), !dbg !555
  br i1 %eq739, label %if.then740, label %if.exit765, !dbg !555

if.then740:                                       ; preds = %switch.case737
  %384 = load ptr, ptr %2, align 8, !dbg !557
  %checknull742 = icmp eq ptr %384, null, !dbg !557
  %385 = call i1 @llvm.expect.i1(i1 %checknull742, i1 false), !dbg !557
  br i1 %385, label %panic743, label %checkok747, !dbg !557

checkok747:                                       ; preds = %if.then740
  %386 = ptrtoint ptr %384 to i64, !dbg !557
  %387 = urem i64 %386, 8, !dbg !557
  %388 = icmp ne i64 %387, 0, !dbg !557
  %389 = call i1 @llvm.expect.i1(i1 %388, i1 false), !dbg !557
  br i1 %389, label %panic748, label %checkok758, !dbg !557

checkok758:                                       ; preds = %checkok747
  %390 = load ptr, ptr %self, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg760, ptr align 8 %384, i32 16, i1 false)
  %391 = call i64 @std.io.Formatter.out_substr(ptr %retparam759, ptr %390, ptr align 8 %indirectarg760), !dbg !557
  %not_err761 = icmp eq i64 %391, 0, !dbg !557
  %392 = call i1 @llvm.expect.i1(i1 %not_err761, i1 true), !dbg !557
  br i1 %392, label %after_check763, label %assign_optional762, !dbg !557

assign_optional762:                               ; preds = %checkok758
  store i64 %391, ptr %reterr741, align 8, !dbg !557
  br label %err_retblock764, !dbg !557

after_check763:                                   ; preds = %checkok758
  %393 = load i64, ptr %retparam759, align 8, !dbg !557
  store i64 %393, ptr %0, align 8, !dbg !557
  ret i64 0, !dbg !557

err_retblock764:                                  ; preds = %assign_optional762
  %394 = load i64, ptr %reterr741, align 8, !dbg !557
  ret i64 %394, !dbg !557

if.exit765:                                       ; preds = %switch.case737
  %ptradd766 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !559
  %395 = load i64, ptr %ptradd766, align 8, !dbg !559
  %eq767 = icmp eq i64 %395, ptrtoint (ptr @"$ct.std.core.string.ZString" to i64), !dbg !559
  br i1 %eq767, label %if.then768, label %if.exit812, !dbg !559

if.then768:                                       ; preds = %if.exit765
  %396 = load ptr, ptr %2, align 8, !dbg !560
  %checknull770 = icmp eq ptr %396, null, !dbg !560
  %397 = call i1 @llvm.expect.i1(i1 %checknull770, i1 false), !dbg !560
  br i1 %397, label %panic771, label %checkok775, !dbg !560

checkok775:                                       ; preds = %if.then768
  %398 = ptrtoint ptr %396 to i64, !dbg !560
  %399 = urem i64 %398, 8, !dbg !560
  %400 = icmp ne i64 %399, 0, !dbg !560
  %401 = call i1 @llvm.expect.i1(i1 %400, i1 false), !dbg !560
  br i1 %401, label %panic776, label %checkok786, !dbg !560

checkok786:                                       ; preds = %checkok775
  %402 = load ptr, ptr %396, align 8, !dbg !560
  %i2b787 = icmp ne ptr %402, null, !dbg !560
  br i1 %i2b787, label %cond.lhs, label %cond.rhs, !dbg !560

cond.lhs:                                         ; preds = %checkok786
  %403 = load ptr, ptr %2, align 8, !dbg !560
  %checknull788 = icmp eq ptr %403, null, !dbg !560
  %404 = call i1 @llvm.expect.i1(i1 %checknull788, i1 false), !dbg !560
  br i1 %404, label %panic789, label %checkok793, !dbg !560

checkok793:                                       ; preds = %cond.lhs
  %405 = ptrtoint ptr %403 to i64, !dbg !560
  %406 = urem i64 %405, 8, !dbg !560
  %407 = icmp ne i64 %406, 0, !dbg !560
  %408 = call i1 @llvm.expect.i1(i1 %407, i1 false), !dbg !560
  br i1 %408, label %panic794, label %checkok804, !dbg !560

checkok804:                                       ; preds = %checkok793
  %409 = load ptr, ptr %403, align 8
  call void @std.core.string.ZString.str_view(ptr sret(%"char[]") align 8 %sretparam, ptr %409), !dbg !560
  %410 = load %"char[]", ptr %sretparam, align 8, !dbg !560
  br label %cond.phi, !dbg !560

cond.rhs:                                         ; preds = %checkok786
  br label %cond.phi, !dbg !560

cond.phi:                                         ; preds = %cond.rhs, %checkok804
  %val805 = phi %"char[]" [ %410, %checkok804 ], [ { ptr @.str.78, i64 6 }, %cond.rhs ], !dbg !560
  %411 = load ptr, ptr %self, align 8
  store %"char[]" %val805, ptr %indirectarg807, align 8
  %412 = call i64 @std.io.Formatter.out_substr(ptr %retparam806, ptr %411, ptr align 8 %indirectarg807), !dbg !560
  %not_err808 = icmp eq i64 %412, 0, !dbg !560
  %413 = call i1 @llvm.expect.i1(i1 %not_err808, i1 true), !dbg !560
  br i1 %413, label %after_check810, label %assign_optional809, !dbg !560

assign_optional809:                               ; preds = %cond.phi
  store i64 %412, ptr %reterr769, align 8, !dbg !560
  br label %err_retblock811, !dbg !560

after_check810:                                   ; preds = %cond.phi
  %414 = load i64, ptr %retparam806, align 8, !dbg !560
  store i64 %414, ptr %0, align 8, !dbg !560
  ret i64 0, !dbg !560

err_retblock811:                                  ; preds = %assign_optional809
  %415 = load i64, ptr %reterr769, align 8, !dbg !560
  ret i64 %415, !dbg !560

if.exit812:                                       ; preds = %if.exit765
  %ptradd813 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !562
  %416 = load i64, ptr %ptradd813, align 8, !dbg !562
  %eq814 = icmp eq i64 %416, ptrtoint (ptr @"$ct.std.core.dstring.DString" to i64), !dbg !562
  br i1 %eq814, label %if.then815, label %if.exit863, !dbg !562

if.then815:                                       ; preds = %if.exit812
  %417 = load ptr, ptr %2, align 8, !dbg !563
  %checknull817 = icmp eq ptr %417, null, !dbg !563
  %418 = call i1 @llvm.expect.i1(i1 %checknull817, i1 false), !dbg !563
  br i1 %418, label %panic818, label %checkok822, !dbg !563

checkok822:                                       ; preds = %if.then815
  %419 = ptrtoint ptr %417 to i64, !dbg !563
  %420 = urem i64 %419, 8, !dbg !563
  %421 = icmp ne i64 %420, 0, !dbg !563
  %422 = call i1 @llvm.expect.i1(i1 %421, i1 false), !dbg !563
  br i1 %422, label %panic823, label %checkok833, !dbg !563

checkok833:                                       ; preds = %checkok822
  %423 = load ptr, ptr %417, align 8, !dbg !563
  %i2b834 = icmp ne ptr %423, null, !dbg !563
  br i1 %i2b834, label %cond.lhs835, label %cond.rhs854, !dbg !563

cond.lhs835:                                      ; preds = %checkok833
  %424 = load ptr, ptr %2, align 8, !dbg !563
  %checknull836 = icmp eq ptr %424, null, !dbg !563
  %425 = call i1 @llvm.expect.i1(i1 %checknull836, i1 false), !dbg !563
  br i1 %425, label %panic837, label %checkok841, !dbg !563

checkok841:                                       ; preds = %cond.lhs835
  %426 = ptrtoint ptr %424 to i64, !dbg !563
  %427 = urem i64 %426, 8, !dbg !563
  %428 = icmp ne i64 %427, 0, !dbg !563
  %429 = call i1 @llvm.expect.i1(i1 %428, i1 false), !dbg !563
  br i1 %429, label %panic842, label %checkok852, !dbg !563

checkok852:                                       ; preds = %checkok841
  %430 = load ptr, ptr %424, align 8
  call void @std.core.dstring.DString.str_view(ptr sret(%"char[]") align 8 %sretparam853, ptr %430), !dbg !563
  %431 = load %"char[]", ptr %sretparam853, align 8, !dbg !563
  br label %cond.phi855, !dbg !563

cond.rhs854:                                      ; preds = %checkok833
  br label %cond.phi855, !dbg !563

cond.phi855:                                      ; preds = %cond.rhs854, %checkok852
  %val856 = phi %"char[]" [ %431, %checkok852 ], [ { ptr @.str.80, i64 6 }, %cond.rhs854 ], !dbg !563
  %432 = load ptr, ptr %self, align 8
  store %"char[]" %val856, ptr %indirectarg858, align 8
  %433 = call i64 @std.io.Formatter.out_substr(ptr %retparam857, ptr %432, ptr align 8 %indirectarg858), !dbg !563
  %not_err859 = icmp eq i64 %433, 0, !dbg !563
  %434 = call i1 @llvm.expect.i1(i1 %not_err859, i1 true), !dbg !563
  br i1 %434, label %after_check861, label %assign_optional860, !dbg !563

assign_optional860:                               ; preds = %cond.phi855
  store i64 %433, ptr %reterr816, align 8, !dbg !563
  br label %err_retblock862, !dbg !563

after_check861:                                   ; preds = %cond.phi855
  %435 = load i64, ptr %retparam857, align 8, !dbg !563
  store i64 %435, ptr %0, align 8, !dbg !563
  ret i64 0, !dbg !563

err_retblock862:                                  ; preds = %assign_optional860
  %436 = load i64, ptr %reterr816, align 8, !dbg !563
  ret i64 %436, !dbg !563

if.exit863:                                       ; preds = %if.exit812
  store ptr %2, ptr %self865, align 8
  %437 = load ptr, ptr %self865, align 8, !dbg !565
  %neq867 = icmp ne ptr %437, null, !dbg !565
  br i1 %neq867, label %assert_ok872, label %assert_fail868, !dbg !565

assert_fail868:                                   ; preds = %if.exit863
  store %"char[]" { ptr @.panic_msg.52, i64 32 }, ptr %indirectarg869, align 8
  store %"char[]" { ptr @.file.14, i64 10 }, ptr %indirectarg870, align 8
  store %"char[]" { ptr @.func.37, i64 7 }, ptr %indirectarg871, align 8
  %438 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %438(ptr align 8 %indirectarg869, ptr align 8 %indirectarg870, ptr align 8 %indirectarg871, i32 266) #5, !dbg !565
  unreachable, !dbg !565

assert_ok872:                                     ; preds = %if.exit863
  %439 = load ptr, ptr %self865, align 8, !dbg !569
  %checknull873 = icmp eq ptr %439, null, !dbg !569
  %440 = call i1 @llvm.expect.i1(i1 %checknull873, i1 false), !dbg !569
  br i1 %440, label %panic874, label %checkok878, !dbg !569

checkok878:                                       ; preds = %assert_ok872
  %441 = ptrtoint ptr %439 to i64, !dbg !569
  %442 = urem i64 %441, 8, !dbg !569
  %443 = icmp ne i64 %442, 0, !dbg !569
  %444 = call i1 @llvm.expect.i1(i1 %443, i1 false), !dbg !569
  br i1 %444, label %panic879, label %checkok889, !dbg !569

checkok889:                                       ; preds = %checkok878
  %445 = load ptr, ptr %439, align 8, !dbg !569
  %446 = load ptr, ptr %self865, align 8, !dbg !569
  %checknull890 = icmp eq ptr %446, null, !dbg !569
  %447 = call i1 @llvm.expect.i1(i1 %checknull890, i1 false), !dbg !569
  br i1 %447, label %panic891, label %checkok895, !dbg !569

checkok895:                                       ; preds = %checkok889
  %448 = ptrtoint ptr %446 to i64, !dbg !569
  %449 = urem i64 %448, 8, !dbg !569
  %450 = icmp ne i64 %449, 0, !dbg !569
  %451 = call i1 @llvm.expect.i1(i1 %450, i1 false), !dbg !569
  br i1 %451, label %panic896, label %checkok906, !dbg !569

checkok906:                                       ; preds = %checkok895
  %ptradd907 = getelementptr inbounds i8, ptr %446, i64 8, !dbg !569
  %452 = load i64, ptr %ptradd907, align 8, !dbg !569
  %"introspect*908" = inttoptr i64 %452 to ptr, !dbg !569
  %typeid.kind909 = load i8, ptr %"introspect*908", align 8, !dbg !569
  %eq910 = icmp eq i8 %typeid.kind909, 15, !dbg !569
  br i1 %eq910, label %check_type_ok929, label %check_next911, !dbg !569

check_next911:                                    ; preds = %checkok906
  %eq912 = icmp eq i8 %typeid.kind909, 19, !dbg !569
  br i1 %eq912, label %check_type_ok929, label %check_next913, !dbg !569

check_next913:                                    ; preds = %check_next911
  %eq914 = icmp eq i8 %typeid.kind909, 17, !dbg !569
  br i1 %eq914, label %check_type_ok929, label %check_next915, !dbg !569

check_next915:                                    ; preds = %check_next913
  %eq916 = icmp eq i8 %typeid.kind909, 8, !dbg !569
  br i1 %eq916, label %check_type_ok929, label %check_next917, !dbg !569

check_next917:                                    ; preds = %check_next915
  %eq918 = icmp eq i8 %typeid.kind909, 16, !dbg !569
  br i1 %eq918, label %check_type_ok929, label %check_next919, !dbg !569

check_next919:                                    ; preds = %check_next917
  %eq920 = icmp eq i8 %typeid.kind909, 18, !dbg !569
  br i1 %eq920, label %check_type_ok929, label %check_next921, !dbg !569

check_next921:                                    ; preds = %check_next919
  %eq922 = icmp eq i8 %typeid.kind909, 9, !dbg !569
  br i1 %eq922, label %check_type_ok929, label %check_next923, !dbg !569

check_next923:                                    ; preds = %check_next921
  %eq924 = icmp eq i8 %typeid.kind909, 12, !dbg !569
  br i1 %eq924, label %check_type_ok929, label %check_next925, !dbg !569

check_next925:                                    ; preds = %check_next923
  store %"char[]" { ptr @.panic_msg.53, i64 49 }, ptr %indirectarg926, align 8
  store %"char[]" { ptr @.file.14, i64 10 }, ptr %indirectarg927, align 8
  store %"char[]" { ptr @.func.37, i64 7 }, ptr %indirectarg928, align 8
  %453 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %453(ptr align 8 %indirectarg926, ptr align 8 %indirectarg927, ptr align 8 %indirectarg928, i32 268) #5, !dbg !569
  unreachable, !dbg !569

check_type_ok929:                                 ; preds = %check_next923, %check_next921, %check_next919, %check_next917, %check_next915, %check_next913, %check_next911, %checkok906
  %ptradd930 = getelementptr inbounds i8, ptr %"introspect*908", i64 32, !dbg !569
  %typeid.inner931 = load i64, ptr %ptradd930, align 8, !dbg !569
  %454 = insertvalue %any undef, ptr %445, 0, !dbg !569
  %455 = insertvalue %any %454, i64 %typeid.inner931, 1, !dbg !569
  %456 = load ptr, ptr %self, align 8
  store %any %455, ptr %indirectarg933, align 8
  %457 = call i64 @std.io.Formatter.out_str(ptr %retparam932, ptr %456, ptr align 8 %indirectarg933), !dbg !568
  %not_err934 = icmp eq i64 %457, 0, !dbg !568
  %458 = call i1 @llvm.expect.i1(i1 %not_err934, i1 true), !dbg !568
  br i1 %458, label %after_check936, label %assign_optional935, !dbg !568

assign_optional935:                               ; preds = %check_type_ok929
  store i64 %457, ptr %reterr864, align 8, !dbg !568
  br label %err_retblock937, !dbg !568

after_check936:                                   ; preds = %check_type_ok929
  %459 = load i64, ptr %retparam932, align 8, !dbg !568
  store i64 %459, ptr %0, align 8, !dbg !568
  ret i64 0, !dbg !568

err_retblock937:                                  ; preds = %assign_optional935
  %460 = load i64, ptr %reterr864, align 8, !dbg !568
  ret i64 %460, !dbg !568

switch.case938:                                   ; preds = %switch.entry154
    #dbg_declare(ptr %inner, !570, !DIExpression(), !572)
  %ptradd939 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !572
  %461 = load i64, ptr %ptradd939, align 8, !dbg !572
  %"introspect*940" = inttoptr i64 %461 to ptr, !dbg !572
  %typeid.kind941 = load i8, ptr %"introspect*940", align 8, !dbg !572
  %eq942 = icmp eq i8 %typeid.kind941, 15, !dbg !572
  br i1 %eq942, label %check_type_ok961, label %check_next943, !dbg !572

check_next943:                                    ; preds = %switch.case938
  %eq944 = icmp eq i8 %typeid.kind941, 19, !dbg !572
  br i1 %eq944, label %check_type_ok961, label %check_next945, !dbg !572

check_next945:                                    ; preds = %check_next943
  %eq946 = icmp eq i8 %typeid.kind941, 17, !dbg !572
  br i1 %eq946, label %check_type_ok961, label %check_next947, !dbg !572

check_next947:                                    ; preds = %check_next945
  %eq948 = icmp eq i8 %typeid.kind941, 8, !dbg !572
  br i1 %eq948, label %check_type_ok961, label %check_next949, !dbg !572

check_next949:                                    ; preds = %check_next947
  %eq950 = icmp eq i8 %typeid.kind941, 16, !dbg !572
  br i1 %eq950, label %check_type_ok961, label %check_next951, !dbg !572

check_next951:                                    ; preds = %check_next949
  %eq952 = icmp eq i8 %typeid.kind941, 18, !dbg !572
  br i1 %eq952, label %check_type_ok961, label %check_next953, !dbg !572

check_next953:                                    ; preds = %check_next951
  %eq954 = icmp eq i8 %typeid.kind941, 9, !dbg !572
  br i1 %eq954, label %check_type_ok961, label %check_next955, !dbg !572

check_next955:                                    ; preds = %check_next953
  %eq956 = icmp eq i8 %typeid.kind941, 12, !dbg !572
  br i1 %eq956, label %check_type_ok961, label %check_next957, !dbg !572

check_next957:                                    ; preds = %check_next955
  store %"char[]" { ptr @.panic_msg.53, i64 49 }, ptr %indirectarg958, align 8
  store %"char[]" { ptr @.file.22, i64 12 }, ptr %indirectarg959, align 8
  store %"char[]" { ptr @.func.37, i64 7 }, ptr %indirectarg960, align 8
  %462 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %462(ptr align 8 %indirectarg958, ptr align 8 %indirectarg959, ptr align 8 %indirectarg960, i32 223) #5, !dbg !572
  unreachable, !dbg !572

check_type_ok961:                                 ; preds = %check_next955, %check_next953, %check_next951, %check_next949, %check_next947, %check_next945, %check_next943, %switch.case938
  %ptradd962 = getelementptr inbounds i8, ptr %"introspect*940", i64 32, !dbg !572
  %typeid.inner963 = load i64, ptr %ptradd962, align 8, !dbg !572
  store i64 %typeid.inner963, ptr %inner, align 8, !dbg !572
    #dbg_declare(ptr %pointer, !573, !DIExpression(), !575)
  %463 = load ptr, ptr %2, align 8, !dbg !575
  store ptr %463, ptr %pointer, align 8, !dbg !575
  %ptradd964 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !576
  %464 = load i64, ptr %ptradd964, align 8, !dbg !576
  %"introspect*965" = inttoptr i64 %464 to ptr, !dbg !576
  %typeid.kind966 = load i8, ptr %"introspect*965", align 8, !dbg !576
  %eq967 = icmp eq i8 %typeid.kind966, 15, !dbg !576
  br i1 %eq967, label %check_type_ok986, label %check_next968, !dbg !576

check_next968:                                    ; preds = %check_type_ok961
  %eq969 = icmp eq i8 %typeid.kind966, 19, !dbg !576
  br i1 %eq969, label %check_type_ok986, label %check_next970, !dbg !576

check_next970:                                    ; preds = %check_next968
  %eq971 = icmp eq i8 %typeid.kind966, 17, !dbg !576
  br i1 %eq971, label %check_type_ok986, label %check_next972, !dbg !576

check_next972:                                    ; preds = %check_next970
  %eq973 = icmp eq i8 %typeid.kind966, 8, !dbg !576
  br i1 %eq973, label %check_type_ok986, label %check_next974, !dbg !576

check_next974:                                    ; preds = %check_next972
  %eq975 = icmp eq i8 %typeid.kind966, 16, !dbg !576
  br i1 %eq975, label %check_type_ok986, label %check_next976, !dbg !576

check_next976:                                    ; preds = %check_next974
  %eq977 = icmp eq i8 %typeid.kind966, 18, !dbg !576
  br i1 %eq977, label %check_type_ok986, label %check_next978, !dbg !576

check_next978:                                    ; preds = %check_next976
  %eq979 = icmp eq i8 %typeid.kind966, 9, !dbg !576
  br i1 %eq979, label %check_type_ok986, label %check_next980, !dbg !576

check_next980:                                    ; preds = %check_next978
  %eq981 = icmp eq i8 %typeid.kind966, 12, !dbg !576
  br i1 %eq981, label %check_type_ok986, label %check_next982, !dbg !576

check_next982:                                    ; preds = %check_next980
  store %"char[]" { ptr @.panic_msg.53, i64 49 }, ptr %indirectarg983, align 8
  store %"char[]" { ptr @.file.22, i64 12 }, ptr %indirectarg984, align 8
  store %"char[]" { ptr @.func.37, i64 7 }, ptr %indirectarg985, align 8
  %465 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %465(ptr align 8 %indirectarg983, ptr align 8 %indirectarg984, ptr align 8 %indirectarg985, i32 225) #5, !dbg !576
  unreachable, !dbg !576

check_type_ok986:                                 ; preds = %check_next980, %check_next978, %check_next976, %check_next974, %check_next972, %check_next970, %check_next968, %check_type_ok961
  %ptradd987 = getelementptr inbounds i8, ptr %"introspect*965", i64 32, !dbg !576
  %typeid.inner988 = load i64, ptr %ptradd987, align 8, !dbg !576
  %neq989 = icmp ne i64 %typeid.inner988, ptrtoint (ptr @"$ct.void" to i64), !dbg !576
  br i1 %neq989, label %if.then990, label %if.exit1041, !dbg !576

if.then990:                                       ; preds = %check_type_ok986
    #dbg_declare(ptr %deref, !577, !DIExpression(), !579)
  %466 = load ptr, ptr %pointer, align 8, !dbg !579
  %checknull991 = icmp eq ptr %466, null, !dbg !579
  %467 = call i1 @llvm.expect.i1(i1 %checknull991, i1 false), !dbg !579
  br i1 %467, label %panic992, label %checkok996, !dbg !579

checkok996:                                       ; preds = %if.then990
  %468 = ptrtoint ptr %466 to i64, !dbg !579
  %469 = urem i64 %468, 8, !dbg !579
  %470 = icmp ne i64 %469, 0, !dbg !579
  %471 = call i1 @llvm.expect.i1(i1 %470, i1 false), !dbg !579
  br i1 %471, label %panic997, label %checkok1007, !dbg !579

checkok1007:                                      ; preds = %checkok996
  %472 = load ptr, ptr %466, align 8
  store ptr %472, ptr %ptr, align 8
  %473 = load i64, ptr %inner, align 8
  store i64 %473, ptr %type, align 8
  %474 = load ptr, ptr %ptr, align 8, !dbg !580
  %475 = load i64, ptr %type, align 8, !dbg !580
  %476 = insertvalue %any undef, ptr %474, 0, !dbg !580
  %477 = insertvalue %any %476, i64 %475, 1, !dbg !580
  store %any %477, ptr %deref, align 8, !dbg !580
  %478 = load %any, ptr %deref, align 8, !dbg !582
  %479 = load ptr, ptr %self, align 8
  store %any %478, ptr %indirectarg1009, align 8
  %480 = call i64 @std.io.Formatter.print_with_function(ptr %retparam1008, ptr %479, ptr align 8 %indirectarg1009), !dbg !582
  %not_err1010 = icmp eq i64 %480, 0, !dbg !582
  %481 = call i1 @llvm.expect.i1(i1 %not_err1010, i1 true), !dbg !582
  br i1 %481, label %after_check1012, label %assign_optional1011, !dbg !582

assign_optional1011:                              ; preds = %checkok1007
  store i64 %480, ptr %n.f, align 8, !dbg !582
  br label %after_assign1013, !dbg !582

after_check1012:                                  ; preds = %checkok1007
  %482 = load i64, ptr %retparam1008, align 8, !dbg !582
  store i64 %482, ptr %n, align 8, !dbg !582
  store i64 0, ptr %n.f, align 8, !dbg !582
  br label %after_assign1013, !dbg !582

after_assign1013:                                 ; preds = %after_check1012, %assign_optional1011
  %load.err1014 = load i64, ptr %n.f, align 8, !dbg !583
  %result1015 = icmp eq i64 %load.err1014, 0, !dbg !583
  br i1 %result1015, label %if.then1016, label %if.exit1018, !dbg !583

if.then1016:                                      ; preds = %after_assign1013
  %483 = load i64, ptr %n, align 8, !dbg !583
  store i64 %483, ptr %0, align 8, !dbg !583
  ret i64 0, !dbg !583

if.exit1018:                                      ; preds = %after_assign1013
    #dbg_declare(ptr %f1020, !584, !DIExpression(), !586)
  br label %testblock1021, !dbg !586

testblock1021:                                    ; preds = %if.exit1018
  %optval1022 = load i64, ptr %n.f, align 8, !dbg !586
  %not_err1023 = icmp eq i64 %optval1022, 0, !dbg !586
  %484 = call i1 @llvm.expect.i1(i1 %not_err1023, i1 true), !dbg !586
  br i1 %484, label %after_check1025, label %assign_optional1024, !dbg !586

assign_optional1024:                              ; preds = %testblock1021
  store i64 %optval1022, ptr %f1020, align 8, !dbg !586
  br label %end_block1026, !dbg !586

after_check1025:                                  ; preds = %testblock1021
  store i64 0, ptr %f1020, align 8, !dbg !586
  br label %end_block1026, !dbg !586

end_block1026:                                    ; preds = %after_check1025, %assign_optional1024
  %485 = load i64, ptr %f1020, align 8, !dbg !586
  %i2b1027 = icmp ne i64 %485, 0, !dbg !586
  br i1 %i2b1027, label %if.then1028, label %if.exit1029, !dbg !586

if.then1028:                                      ; preds = %end_block1026
  %486 = load i64, ptr %f1020, align 8, !dbg !586
  store i64 %486, ptr %blockret1019, align 8, !dbg !586
  br label %expr_block.exit1030, !dbg !586

if.exit1029:                                      ; preds = %end_block1026
  store i64 0, ptr %blockret1019, align 8, !dbg !588
  br label %expr_block.exit1030, !dbg !588

expr_block.exit1030:                              ; preds = %if.exit1029, %if.then1028
  %487 = load i64, ptr %blockret1019, align 8, !dbg !588
  %neq1031 = icmp ne i64 %487, ptrtoint (ptr @std.core.builtin.NOT_FOUND to i64), !dbg !587
  br i1 %neq1031, label %if.then1032, label %if.exit1040, !dbg !587

if.then1032:                                      ; preds = %expr_block.exit1030
  %optval1034 = load i64, ptr %n.f, align 8, !dbg !587
  %not_err1035 = icmp eq i64 %optval1034, 0, !dbg !587
  %488 = call i1 @llvm.expect.i1(i1 %not_err1035, i1 true), !dbg !587
  br i1 %488, label %after_check1037, label %assign_optional1036, !dbg !587

assign_optional1036:                              ; preds = %if.then1032
  store i64 %optval1034, ptr %error_var1033, align 8, !dbg !587
  br label %guard_block1038, !dbg !587

after_check1037:                                  ; preds = %if.then1032
  br label %noerr_block1039, !dbg !587

guard_block1038:                                  ; preds = %assign_optional1036
  %489 = load i64, ptr %error_var1033, align 8, !dbg !587
  ret i64 %489, !dbg !587

noerr_block1039:                                  ; preds = %after_check1037
  br label %if.exit1040, !dbg !587

if.exit1040:                                      ; preds = %noerr_block1039, %expr_block.exit1030
  br label %if.exit1041, !dbg !587

if.exit1041:                                      ; preds = %if.exit1040, %check_type_ok986
    #dbg_declare(ptr %flags1042, !589, !DIExpression(), !590)
  %490 = load ptr, ptr %self, align 8, !dbg !590
  %ptradd1043 = getelementptr inbounds i8, ptr %490, i64 16, !dbg !590
  %491 = load i32, ptr %ptradd1043, align 8, !dbg !590
  store i32 %491, ptr %flags1042, align 4, !dbg !590
    #dbg_declare(ptr %width1044, !591, !DIExpression(), !592)
  %492 = load ptr, ptr %self, align 8, !dbg !592
  %ptradd1045 = getelementptr inbounds i8, ptr %492, i64 16, !dbg !592
  %ptradd1046 = getelementptr inbounds i8, ptr %ptradd1045, i64 4, !dbg !592
  %493 = load i32, ptr %ptradd1046, align 4, !dbg !592
  store i32 %493, ptr %width1044, align 4, !dbg !592
  %494 = load ptr, ptr %self, align 8, !dbg !593
  %ptradd1047 = getelementptr inbounds i8, ptr %494, i64 16, !dbg !593
  %ptradd1048 = getelementptr inbounds i8, ptr %ptradd1047, i64 4, !dbg !593
  store i32 0, ptr %ptradd1048, align 4, !dbg !593
  %495 = load ptr, ptr %self, align 8
  store %"char[]" { ptr @.str.82, i64 2 }, ptr %indirectarg1052, align 8
  %496 = call i64 @std.io.Formatter.out_substr(ptr %retparam1051, ptr %495, ptr align 8 %indirectarg1052), !dbg !594
  %not_err1053 = icmp eq i64 %496, 0, !dbg !594
  %497 = call i1 @llvm.expect.i1(i1 %not_err1053, i1 true), !dbg !594
  br i1 %497, label %after_check1055, label %assign_optional1054, !dbg !594

assign_optional1054:                              ; preds = %if.exit1041
  store i64 %496, ptr %error_var1050, align 8, !dbg !594
  br label %guard_block1056, !dbg !594

after_check1055:                                  ; preds = %if.exit1041
  br label %noerr_block1060, !dbg !594

guard_block1056:                                  ; preds = %assign_optional1054
  %498 = load ptr, ptr %self, align 8, !dbg !595
  %ptradd1057 = getelementptr inbounds i8, ptr %498, i64 16, !dbg !595
  %499 = load i32, ptr %flags1042, align 4, !dbg !595
  store i32 %499, ptr %ptradd1057, align 8, !dbg !595
  %500 = load ptr, ptr %self, align 8, !dbg !597
  %ptradd1058 = getelementptr inbounds i8, ptr %500, i64 16, !dbg !597
  %ptradd1059 = getelementptr inbounds i8, ptr %ptradd1058, i64 4, !dbg !597
  %501 = load i32, ptr %width1044, align 4, !dbg !597
  store i32 %501, ptr %ptradd1059, align 4, !dbg !597
  %502 = load i64, ptr %error_var1050, align 8, !dbg !597
  ret i64 %502, !dbg !597

noerr_block1060:                                  ; preds = %after_check1055
  %503 = load i64, ptr %retparam1051, align 8, !dbg !597
  %504 = load ptr, ptr %self, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg1062, ptr align 8 %2, i32 16, i1 false)
  %505 = call i64 @std.io.Formatter.ntoa_any(ptr %retparam1061, ptr %504, ptr align 8 %indirectarg1062, i32 16), !dbg !594
  %not_err1063 = icmp eq i64 %505, 0, !dbg !594
  %506 = call i1 @llvm.expect.i1(i1 %not_err1063, i1 true), !dbg !594
  br i1 %506, label %after_check1065, label %assign_optional1064, !dbg !594

assign_optional1064:                              ; preds = %noerr_block1060
  store i64 %505, ptr %reterr1049, align 8, !dbg !594
  br label %err_retblock1070, !dbg !594

after_check1065:                                  ; preds = %noerr_block1060
  %507 = load i64, ptr %retparam1061, align 8, !dbg !594
  %add1066 = add i64 %503, %507, !dbg !594
  %508 = load ptr, ptr %self, align 8, !dbg !598
  %ptradd1067 = getelementptr inbounds i8, ptr %508, i64 16, !dbg !598
  %509 = load i32, ptr %flags1042, align 4, !dbg !598
  store i32 %509, ptr %ptradd1067, align 8, !dbg !598
  %510 = load ptr, ptr %self, align 8, !dbg !600
  %ptradd1068 = getelementptr inbounds i8, ptr %510, i64 16, !dbg !600
  %ptradd1069 = getelementptr inbounds i8, ptr %ptradd1068, i64 4, !dbg !600
  %511 = load i32, ptr %width1044, align 4, !dbg !600
  store i32 %511, ptr %ptradd1069, align 4, !dbg !600
  store i64 %add1066, ptr %0, align 8, !dbg !600
  ret i64 0, !dbg !600

err_retblock1070:                                 ; preds = %assign_optional1064
  %512 = load ptr, ptr %self, align 8, !dbg !601
  %ptradd1071 = getelementptr inbounds i8, ptr %512, i64 16, !dbg !601
  %513 = load i32, ptr %flags1042, align 4, !dbg !601
  store i32 %513, ptr %ptradd1071, align 8, !dbg !601
  %514 = load ptr, ptr %self, align 8, !dbg !603
  %ptradd1072 = getelementptr inbounds i8, ptr %514, i64 16, !dbg !603
  %ptradd1073 = getelementptr inbounds i8, ptr %ptradd1072, i64 4, !dbg !603
  %515 = load i32, ptr %width1044, align 4, !dbg !603
  store i32 %515, ptr %ptradd1073, align 4, !dbg !603
  %516 = load i64, ptr %reterr1049, align 8, !dbg !603
  ret i64 %516, !dbg !603

switch.case1074:                                  ; preds = %switch.entry154
    #dbg_declare(ptr %flags1075, !604, !DIExpression(), !606)
  %517 = load ptr, ptr %self, align 8, !dbg !606
  %ptradd1076 = getelementptr inbounds i8, ptr %517, i64 16, !dbg !606
  %518 = load i32, ptr %ptradd1076, align 8, !dbg !606
  store i32 %518, ptr %flags1075, align 4, !dbg !606
    #dbg_declare(ptr %width1077, !607, !DIExpression(), !608)
  %519 = load ptr, ptr %self, align 8, !dbg !608
  %ptradd1078 = getelementptr inbounds i8, ptr %519, i64 16, !dbg !608
  %ptradd1079 = getelementptr inbounds i8, ptr %ptradd1078, i64 4, !dbg !608
  %520 = load i32, ptr %ptradd1079, align 4, !dbg !608
  store i32 %520, ptr %width1077, align 4, !dbg !608
  %521 = load ptr, ptr %self, align 8, !dbg !609
  %ptradd1080 = getelementptr inbounds i8, ptr %521, i64 16, !dbg !609
  store i32 0, ptr %ptradd1080, align 8, !dbg !609
  %522 = load ptr, ptr %self, align 8, !dbg !610
  %ptradd1081 = getelementptr inbounds i8, ptr %522, i64 16, !dbg !610
  %ptradd1082 = getelementptr inbounds i8, ptr %ptradd1081, i64 4, !dbg !610
  store i32 0, ptr %ptradd1082, align 4, !dbg !610
    #dbg_declare(ptr %inner1083, !611, !DIExpression(), !612)
  %ptradd1084 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !612
  %523 = load i64, ptr %ptradd1084, align 8, !dbg !612
  %"introspect*1085" = inttoptr i64 %523 to ptr, !dbg !612
  %typeid.kind1086 = load i8, ptr %"introspect*1085", align 8, !dbg !612
  %eq1087 = icmp eq i8 %typeid.kind1086, 15, !dbg !612
  br i1 %eq1087, label %check_type_ok1106, label %check_next1088, !dbg !612

check_next1088:                                   ; preds = %switch.case1074
  %eq1089 = icmp eq i8 %typeid.kind1086, 19, !dbg !612
  br i1 %eq1089, label %check_type_ok1106, label %check_next1090, !dbg !612

check_next1090:                                   ; preds = %check_next1088
  %eq1091 = icmp eq i8 %typeid.kind1086, 17, !dbg !612
  br i1 %eq1091, label %check_type_ok1106, label %check_next1092, !dbg !612

check_next1092:                                   ; preds = %check_next1090
  %eq1093 = icmp eq i8 %typeid.kind1086, 8, !dbg !612
  br i1 %eq1093, label %check_type_ok1106, label %check_next1094, !dbg !612

check_next1094:                                   ; preds = %check_next1092
  %eq1095 = icmp eq i8 %typeid.kind1086, 16, !dbg !612
  br i1 %eq1095, label %check_type_ok1106, label %check_next1096, !dbg !612

check_next1096:                                   ; preds = %check_next1094
  %eq1097 = icmp eq i8 %typeid.kind1086, 18, !dbg !612
  br i1 %eq1097, label %check_type_ok1106, label %check_next1098, !dbg !612

check_next1098:                                   ; preds = %check_next1096
  %eq1099 = icmp eq i8 %typeid.kind1086, 9, !dbg !612
  br i1 %eq1099, label %check_type_ok1106, label %check_next1100, !dbg !612

check_next1100:                                   ; preds = %check_next1098
  %eq1101 = icmp eq i8 %typeid.kind1086, 12, !dbg !612
  br i1 %eq1101, label %check_type_ok1106, label %check_next1102, !dbg !612

check_next1102:                                   ; preds = %check_next1100
  store %"char[]" { ptr @.panic_msg.53, i64 49 }, ptr %indirectarg1103, align 8
  store %"char[]" { ptr @.file.22, i64 12 }, ptr %indirectarg1104, align 8
  store %"char[]" { ptr @.func.37, i64 7 }, ptr %indirectarg1105, align 8
  %524 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %524(ptr align 8 %indirectarg1103, ptr align 8 %indirectarg1104, ptr align 8 %indirectarg1105, i32 252) #5, !dbg !612
  unreachable, !dbg !612

check_type_ok1106:                                ; preds = %check_next1100, %check_next1098, %check_next1096, %check_next1094, %check_next1092, %check_next1090, %check_next1088, %switch.case1074
  %ptradd1107 = getelementptr inbounds i8, ptr %"introspect*1085", i64 32, !dbg !612
  %typeid.inner1108 = load i64, ptr %ptradd1107, align 8, !dbg !612
  store i64 %typeid.inner1108, ptr %inner1083, align 8, !dbg !612
    #dbg_declare(ptr %size, !613, !DIExpression(), !614)
  %525 = load i64, ptr %inner1083, align 8, !dbg !614
  %"introspect*1109" = inttoptr i64 %525 to ptr, !dbg !614
  %typeid.kind1110 = load i8, ptr %"introspect*1109", align 8, !dbg !614
  %ptradd1111 = getelementptr inbounds i8, ptr %"introspect*1109", i64 24, !dbg !614
  %typeid.size = load i64, ptr %ptradd1111, align 8, !dbg !614
  store i64 %typeid.size, ptr %size, align 8, !dbg !614
    #dbg_declare(ptr %alen, !615, !DIExpression(), !616)
  %ptradd1112 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !616
  %526 = load i64, ptr %ptradd1112, align 8, !dbg !616
  %"introspect*1113" = inttoptr i64 %526 to ptr, !dbg !616
  %typeid.kind1114 = load i8, ptr %"introspect*1113", align 8, !dbg !616
  %eq1115 = icmp eq i8 %typeid.kind1114, 15, !dbg !616
  br i1 %eq1115, label %check_type_ok1126, label %check_next1116, !dbg !616

check_next1116:                                   ; preds = %check_type_ok1106
  %eq1117 = icmp eq i8 %typeid.kind1114, 17, !dbg !616
  br i1 %eq1117, label %check_type_ok1126, label %check_next1118, !dbg !616

check_next1118:                                   ; preds = %check_next1116
  %eq1119 = icmp eq i8 %typeid.kind1114, 8, !dbg !616
  br i1 %eq1119, label %check_type_ok1126, label %check_next1120, !dbg !616

check_next1120:                                   ; preds = %check_next1118
  %eq1121 = icmp eq i8 %typeid.kind1114, 16, !dbg !616
  br i1 %eq1121, label %check_type_ok1126, label %check_next1122, !dbg !616

check_next1122:                                   ; preds = %check_next1120
  store %"char[]" { ptr @.panic_msg.83, i64 43 }, ptr %indirectarg1123, align 8
  store %"char[]" { ptr @.file.22, i64 12 }, ptr %indirectarg1124, align 8
  store %"char[]" { ptr @.func.37, i64 7 }, ptr %indirectarg1125, align 8
  %527 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %527(ptr align 8 %indirectarg1123, ptr align 8 %indirectarg1124, ptr align 8 %indirectarg1125, i32 254) #5, !dbg !616
  unreachable, !dbg !616

check_type_ok1126:                                ; preds = %check_next1120, %check_next1118, %check_next1116, %check_type_ok1106
  %ptradd1127 = getelementptr inbounds i8, ptr %"introspect*1113", i64 40, !dbg !616
  %typeid.len = load i64, ptr %ptradd1127, align 8, !dbg !616
  store i64 %typeid.len, ptr %alen, align 8, !dbg !616
    #dbg_declare(ptr %ptr1128, !617, !DIExpression(), !618)
  %528 = load ptr, ptr %2, align 8, !dbg !618
  store ptr %528, ptr %ptr1128, align 8, !dbg !618
    #dbg_declare(ptr %len, !619, !DIExpression(), !620)
  %529 = load ptr, ptr %self, align 8
  %530 = call i64 @std.io.Formatter.out(ptr %retparam1130, ptr %529, i8 91), !dbg !620
  %not_err1131 = icmp eq i64 %530, 0, !dbg !620
  %531 = call i1 @llvm.expect.i1(i1 %not_err1131, i1 true), !dbg !620
  br i1 %531, label %after_check1133, label %assign_optional1132, !dbg !620

assign_optional1132:                              ; preds = %check_type_ok1126
  store i64 %530, ptr %error_var1129, align 8, !dbg !620
  br label %guard_block1134, !dbg !620

after_check1133:                                  ; preds = %check_type_ok1126
  br label %noerr_block1138, !dbg !620

guard_block1134:                                  ; preds = %assign_optional1132
  %532 = load ptr, ptr %self, align 8, !dbg !621
  %ptradd1135 = getelementptr inbounds i8, ptr %532, i64 16, !dbg !621
  %533 = load i32, ptr %flags1075, align 4, !dbg !621
  store i32 %533, ptr %ptradd1135, align 8, !dbg !621
  %534 = load ptr, ptr %self, align 8, !dbg !623
  %ptradd1136 = getelementptr inbounds i8, ptr %534, i64 16, !dbg !623
  %ptradd1137 = getelementptr inbounds i8, ptr %ptradd1136, i64 4, !dbg !623
  %535 = load i32, ptr %width1077, align 4, !dbg !623
  store i32 %535, ptr %ptradd1137, align 4, !dbg !623
  %536 = load i64, ptr %error_var1129, align 8, !dbg !623
  ret i64 %536, !dbg !623

noerr_block1138:                                  ; preds = %after_check1133
  %537 = load i64, ptr %retparam1130, align 8, !dbg !623
  store i64 %537, ptr %len, align 8, !dbg !623
    #dbg_declare(ptr %i1139, !624, !DIExpression(), !626)
  store i64 0, ptr %i1139, align 8, !dbg !626
  br label %loop.cond, !dbg !626

loop.cond:                                        ; preds = %noerr_block1168, %noerr_block1138
  %538 = load i64, ptr %i1139, align 8, !dbg !626
  %539 = load i64, ptr %alen, align 8, !dbg !626
  %lt1140 = icmp ult i64 %538, %539, !dbg !626
  br i1 %lt1140, label %loop.body, label %loop.exit, !dbg !626

loop.body:                                        ; preds = %loop.cond
  %540 = load i64, ptr %i1139, align 8, !dbg !627
  %neq1141 = icmp ne i64 0, %540, !dbg !627
  br i1 %neq1141, label %if.then1142, label %if.exit1155, !dbg !627

if.then1142:                                      ; preds = %loop.body
  %541 = load i64, ptr %len, align 8, !dbg !627
  %542 = load ptr, ptr %self, align 8
  store %"char[]" { ptr @.str.84, i64 2 }, ptr %indirectarg1145, align 8
  %543 = call i64 @std.io.Formatter.out_substr(ptr %retparam1144, ptr %542, ptr align 8 %indirectarg1145), !dbg !627
  %not_err1146 = icmp eq i64 %543, 0, !dbg !627
  %544 = call i1 @llvm.expect.i1(i1 %not_err1146, i1 true), !dbg !627
  br i1 %544, label %after_check1148, label %assign_optional1147, !dbg !627

assign_optional1147:                              ; preds = %if.then1142
  store i64 %543, ptr %error_var1143, align 8, !dbg !627
  br label %guard_block1149, !dbg !627

after_check1148:                                  ; preds = %if.then1142
  br label %noerr_block1153, !dbg !627

guard_block1149:                                  ; preds = %assign_optional1147
  %545 = load ptr, ptr %self, align 8, !dbg !629
  %ptradd1150 = getelementptr inbounds i8, ptr %545, i64 16, !dbg !629
  %546 = load i32, ptr %flags1075, align 4, !dbg !629
  store i32 %546, ptr %ptradd1150, align 8, !dbg !629
  %547 = load ptr, ptr %self, align 8, !dbg !631
  %ptradd1151 = getelementptr inbounds i8, ptr %547, i64 16, !dbg !631
  %ptradd1152 = getelementptr inbounds i8, ptr %ptradd1151, i64 4, !dbg !631
  %548 = load i32, ptr %width1077, align 4, !dbg !631
  store i32 %548, ptr %ptradd1152, align 4, !dbg !631
  %549 = load i64, ptr %error_var1143, align 8, !dbg !631
  ret i64 %549, !dbg !631

noerr_block1153:                                  ; preds = %after_check1148
  %550 = load i64, ptr %retparam1144, align 8, !dbg !631
  %add1154 = add i64 %541, %550, !dbg !627
  store i64 %add1154, ptr %len, align 8, !dbg !627
  br label %if.exit1155, !dbg !627

if.exit1155:                                      ; preds = %noerr_block1153, %loop.body
  %551 = load i64, ptr %len, align 8, !dbg !632
  %552 = load ptr, ptr %ptr1128, align 8
  store ptr %552, ptr %ptr1157, align 8
  %553 = load i64, ptr %inner1083, align 8
  store i64 %553, ptr %type1158, align 8
  %554 = load ptr, ptr %ptr1157, align 8, !dbg !633
  %555 = load i64, ptr %type1158, align 8, !dbg !633
  %556 = insertvalue %any undef, ptr %554, 0, !dbg !633
  %557 = insertvalue %any %556, i64 %555, 1, !dbg !633
  %558 = load ptr, ptr %self, align 8
  store %any %557, ptr %indirectarg1160, align 8
  %559 = call i64 @std.io.Formatter.out_str(ptr %retparam1159, ptr %558, ptr align 8 %indirectarg1160), !dbg !632
  %not_err1161 = icmp eq i64 %559, 0, !dbg !632
  %560 = call i1 @llvm.expect.i1(i1 %not_err1161, i1 true), !dbg !632
  br i1 %560, label %after_check1163, label %assign_optional1162, !dbg !632

assign_optional1162:                              ; preds = %if.exit1155
  store i64 %559, ptr %error_var1156, align 8, !dbg !632
  br label %guard_block1164, !dbg !632

after_check1163:                                  ; preds = %if.exit1155
  br label %noerr_block1168, !dbg !632

guard_block1164:                                  ; preds = %assign_optional1162
  %561 = load ptr, ptr %self, align 8, !dbg !635
  %ptradd1165 = getelementptr inbounds i8, ptr %561, i64 16, !dbg !635
  %562 = load i32, ptr %flags1075, align 4, !dbg !635
  store i32 %562, ptr %ptradd1165, align 8, !dbg !635
  %563 = load ptr, ptr %self, align 8, !dbg !637
  %ptradd1166 = getelementptr inbounds i8, ptr %563, i64 16, !dbg !637
  %ptradd1167 = getelementptr inbounds i8, ptr %ptradd1166, i64 4, !dbg !637
  %564 = load i32, ptr %width1077, align 4, !dbg !637
  store i32 %564, ptr %ptradd1167, align 4, !dbg !637
  %565 = load i64, ptr %error_var1156, align 8, !dbg !637
  ret i64 %565, !dbg !637

noerr_block1168:                                  ; preds = %after_check1163
  %566 = load i64, ptr %retparam1159, align 8, !dbg !637
  %add1169 = add i64 %551, %566, !dbg !632
  store i64 %add1169, ptr %len, align 8, !dbg !632
  %567 = load ptr, ptr %ptr1128, align 8, !dbg !638
  %568 = load i64, ptr %size, align 8, !dbg !638
  %ptradd_any = getelementptr i8, ptr %567, i64 %568, !dbg !638
  store ptr %ptradd_any, ptr %ptr1128, align 8, !dbg !638
  %569 = load i64, ptr %i1139, align 8, !dbg !626
  %add1170 = add i64 %569, 1, !dbg !626
  store i64 %add1170, ptr %i1139, align 8, !dbg !626
  br label %loop.cond, !dbg !626

loop.exit:                                        ; preds = %loop.cond
  %570 = load i64, ptr %len, align 8, !dbg !639
  %571 = load ptr, ptr %self, align 8
  %572 = call i64 @std.io.Formatter.out(ptr %retparam1172, ptr %571, i8 93), !dbg !639
  %not_err1173 = icmp eq i64 %572, 0, !dbg !639
  %573 = call i1 @llvm.expect.i1(i1 %not_err1173, i1 true), !dbg !639
  br i1 %573, label %after_check1175, label %assign_optional1174, !dbg !639

assign_optional1174:                              ; preds = %loop.exit
  store i64 %572, ptr %error_var1171, align 8, !dbg !639
  br label %guard_block1176, !dbg !639

after_check1175:                                  ; preds = %loop.exit
  br label %noerr_block1180, !dbg !639

guard_block1176:                                  ; preds = %assign_optional1174
  %574 = load ptr, ptr %self, align 8, !dbg !640
  %ptradd1177 = getelementptr inbounds i8, ptr %574, i64 16, !dbg !640
  %575 = load i32, ptr %flags1075, align 4, !dbg !640
  store i32 %575, ptr %ptradd1177, align 8, !dbg !640
  %576 = load ptr, ptr %self, align 8, !dbg !642
  %ptradd1178 = getelementptr inbounds i8, ptr %576, i64 16, !dbg !642
  %ptradd1179 = getelementptr inbounds i8, ptr %ptradd1178, i64 4, !dbg !642
  %577 = load i32, ptr %width1077, align 4, !dbg !642
  store i32 %577, ptr %ptradd1179, align 4, !dbg !642
  %578 = load i64, ptr %error_var1171, align 8, !dbg !642
  ret i64 %578, !dbg !642

noerr_block1180:                                  ; preds = %after_check1175
  %579 = load i64, ptr %retparam1172, align 8, !dbg !642
  %add1181 = add i64 %570, %579, !dbg !639
  store i64 %add1181, ptr %len, align 8, !dbg !639
  %580 = load i64, ptr %len, align 8, !dbg !643
  %581 = load ptr, ptr %self, align 8, !dbg !644
  %ptradd1183 = getelementptr inbounds i8, ptr %581, i64 16, !dbg !644
  %582 = load i32, ptr %flags1075, align 4, !dbg !644
  store i32 %582, ptr %ptradd1183, align 8, !dbg !644
  %583 = load ptr, ptr %self, align 8, !dbg !646
  %ptradd1184 = getelementptr inbounds i8, ptr %583, i64 16, !dbg !646
  %ptradd1185 = getelementptr inbounds i8, ptr %ptradd1184, i64 4, !dbg !646
  %584 = load i32, ptr %width1077, align 4, !dbg !646
  store i32 %584, ptr %ptradd1185, align 4, !dbg !646
  store i64 %580, ptr %0, align 8, !dbg !646
  ret i64 0, !dbg !646

switch.case1186:                                  ; preds = %switch.entry154
    #dbg_declare(ptr %flags1187, !647, !DIExpression(), !649)
  %585 = load ptr, ptr %self, align 8, !dbg !649
  %ptradd1188 = getelementptr inbounds i8, ptr %585, i64 16, !dbg !649
  %586 = load i32, ptr %ptradd1188, align 8, !dbg !649
  store i32 %586, ptr %flags1187, align 4, !dbg !649
    #dbg_declare(ptr %width1189, !650, !DIExpression(), !651)
  %587 = load ptr, ptr %self, align 8, !dbg !651
  %ptradd1190 = getelementptr inbounds i8, ptr %587, i64 16, !dbg !651
  %ptradd1191 = getelementptr inbounds i8, ptr %ptradd1190, i64 4, !dbg !651
  %588 = load i32, ptr %ptradd1191, align 4, !dbg !651
  store i32 %588, ptr %width1189, align 4, !dbg !651
  %589 = load ptr, ptr %self, align 8, !dbg !652
  %ptradd1192 = getelementptr inbounds i8, ptr %589, i64 16, !dbg !652
  store i32 0, ptr %ptradd1192, align 8, !dbg !652
  %590 = load ptr, ptr %self, align 8, !dbg !653
  %ptradd1193 = getelementptr inbounds i8, ptr %590, i64 16, !dbg !653
  %ptradd1194 = getelementptr inbounds i8, ptr %ptradd1193, i64 4, !dbg !653
  store i32 0, ptr %ptradd1194, align 4, !dbg !653
    #dbg_declare(ptr %inner1195, !654, !DIExpression(), !655)
  %ptradd1196 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !655
  %591 = load i64, ptr %ptradd1196, align 8, !dbg !655
  %"introspect*1197" = inttoptr i64 %591 to ptr, !dbg !655
  %typeid.kind1198 = load i8, ptr %"introspect*1197", align 8, !dbg !655
  %eq1199 = icmp eq i8 %typeid.kind1198, 15, !dbg !655
  br i1 %eq1199, label %check_type_ok1218, label %check_next1200, !dbg !655

check_next1200:                                   ; preds = %switch.case1186
  %eq1201 = icmp eq i8 %typeid.kind1198, 19, !dbg !655
  br i1 %eq1201, label %check_type_ok1218, label %check_next1202, !dbg !655

check_next1202:                                   ; preds = %check_next1200
  %eq1203 = icmp eq i8 %typeid.kind1198, 17, !dbg !655
  br i1 %eq1203, label %check_type_ok1218, label %check_next1204, !dbg !655

check_next1204:                                   ; preds = %check_next1202
  %eq1205 = icmp eq i8 %typeid.kind1198, 8, !dbg !655
  br i1 %eq1205, label %check_type_ok1218, label %check_next1206, !dbg !655

check_next1206:                                   ; preds = %check_next1204
  %eq1207 = icmp eq i8 %typeid.kind1198, 16, !dbg !655
  br i1 %eq1207, label %check_type_ok1218, label %check_next1208, !dbg !655

check_next1208:                                   ; preds = %check_next1206
  %eq1209 = icmp eq i8 %typeid.kind1198, 18, !dbg !655
  br i1 %eq1209, label %check_type_ok1218, label %check_next1210, !dbg !655

check_next1210:                                   ; preds = %check_next1208
  %eq1211 = icmp eq i8 %typeid.kind1198, 9, !dbg !655
  br i1 %eq1211, label %check_type_ok1218, label %check_next1212, !dbg !655

check_next1212:                                   ; preds = %check_next1210
  %eq1213 = icmp eq i8 %typeid.kind1198, 12, !dbg !655
  br i1 %eq1213, label %check_type_ok1218, label %check_next1214, !dbg !655

check_next1214:                                   ; preds = %check_next1212
  store %"char[]" { ptr @.panic_msg.53, i64 49 }, ptr %indirectarg1215, align 8
  store %"char[]" { ptr @.file.22, i64 12 }, ptr %indirectarg1216, align 8
  store %"char[]" { ptr @.func.37, i64 7 }, ptr %indirectarg1217, align 8
  %592 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %592(ptr align 8 %indirectarg1215, ptr align 8 %indirectarg1216, ptr align 8 %indirectarg1217, i32 277) #5, !dbg !655
  unreachable, !dbg !655

check_type_ok1218:                                ; preds = %check_next1212, %check_next1210, %check_next1208, %check_next1206, %check_next1204, %check_next1202, %check_next1200, %switch.case1186
  %ptradd1219 = getelementptr inbounds i8, ptr %"introspect*1197", i64 32, !dbg !655
  %typeid.inner1220 = load i64, ptr %ptradd1219, align 8, !dbg !655
  store i64 %typeid.inner1220, ptr %inner1195, align 8, !dbg !655
    #dbg_declare(ptr %size1221, !656, !DIExpression(), !657)
  %593 = load i64, ptr %inner1195, align 8, !dbg !657
  %"introspect*1222" = inttoptr i64 %593 to ptr, !dbg !657
  %typeid.kind1223 = load i8, ptr %"introspect*1222", align 8, !dbg !657
  %ptradd1224 = getelementptr inbounds i8, ptr %"introspect*1222", i64 24, !dbg !657
  %typeid.size1225 = load i64, ptr %ptradd1224, align 8, !dbg !657
  store i64 %typeid.size1225, ptr %size1221, align 8, !dbg !657
    #dbg_declare(ptr %vlen, !658, !DIExpression(), !659)
  %ptradd1226 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !659
  %594 = load i64, ptr %ptradd1226, align 8, !dbg !659
  %"introspect*1227" = inttoptr i64 %594 to ptr, !dbg !659
  %typeid.kind1228 = load i8, ptr %"introspect*1227", align 8, !dbg !659
  %eq1229 = icmp eq i8 %typeid.kind1228, 15, !dbg !659
  br i1 %eq1229, label %check_type_ok1240, label %check_next1230, !dbg !659

check_next1230:                                   ; preds = %check_type_ok1218
  %eq1231 = icmp eq i8 %typeid.kind1228, 17, !dbg !659
  br i1 %eq1231, label %check_type_ok1240, label %check_next1232, !dbg !659

check_next1232:                                   ; preds = %check_next1230
  %eq1233 = icmp eq i8 %typeid.kind1228, 8, !dbg !659
  br i1 %eq1233, label %check_type_ok1240, label %check_next1234, !dbg !659

check_next1234:                                   ; preds = %check_next1232
  %eq1235 = icmp eq i8 %typeid.kind1228, 16, !dbg !659
  br i1 %eq1235, label %check_type_ok1240, label %check_next1236, !dbg !659

check_next1236:                                   ; preds = %check_next1234
  store %"char[]" { ptr @.panic_msg.83, i64 43 }, ptr %indirectarg1237, align 8
  store %"char[]" { ptr @.file.22, i64 12 }, ptr %indirectarg1238, align 8
  store %"char[]" { ptr @.func.37, i64 7 }, ptr %indirectarg1239, align 8
  %595 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %595(ptr align 8 %indirectarg1237, ptr align 8 %indirectarg1238, ptr align 8 %indirectarg1239, i32 279) #5, !dbg !659
  unreachable, !dbg !659

check_type_ok1240:                                ; preds = %check_next1234, %check_next1232, %check_next1230, %check_type_ok1218
  %ptradd1241 = getelementptr inbounds i8, ptr %"introspect*1227", i64 40, !dbg !659
  %typeid.len1242 = load i64, ptr %ptradd1241, align 8, !dbg !659
  store i64 %typeid.len1242, ptr %vlen, align 8, !dbg !659
    #dbg_declare(ptr %ptr1243, !660, !DIExpression(), !661)
  %596 = load ptr, ptr %2, align 8, !dbg !661
  store ptr %596, ptr %ptr1243, align 8, !dbg !661
    #dbg_declare(ptr %len1244, !662, !DIExpression(), !663)
  %597 = load ptr, ptr %self, align 8
  store %"char[]" { ptr @.str.85, i64 2 }, ptr %indirectarg1247, align 8
  %598 = call i64 @std.io.Formatter.out_substr(ptr %retparam1246, ptr %597, ptr align 8 %indirectarg1247), !dbg !663
  %not_err1248 = icmp eq i64 %598, 0, !dbg !663
  %599 = call i1 @llvm.expect.i1(i1 %not_err1248, i1 true), !dbg !663
  br i1 %599, label %after_check1250, label %assign_optional1249, !dbg !663

assign_optional1249:                              ; preds = %check_type_ok1240
  store i64 %598, ptr %error_var1245, align 8, !dbg !663
  br label %guard_block1251, !dbg !663

after_check1250:                                  ; preds = %check_type_ok1240
  br label %noerr_block1255, !dbg !663

guard_block1251:                                  ; preds = %assign_optional1249
  %600 = load ptr, ptr %self, align 8, !dbg !664
  %ptradd1252 = getelementptr inbounds i8, ptr %600, i64 16, !dbg !664
  %601 = load i32, ptr %flags1187, align 4, !dbg !664
  store i32 %601, ptr %ptradd1252, align 8, !dbg !664
  %602 = load ptr, ptr %self, align 8, !dbg !666
  %ptradd1253 = getelementptr inbounds i8, ptr %602, i64 16, !dbg !666
  %ptradd1254 = getelementptr inbounds i8, ptr %ptradd1253, i64 4, !dbg !666
  %603 = load i32, ptr %width1189, align 4, !dbg !666
  store i32 %603, ptr %ptradd1254, align 4, !dbg !666
  %604 = load i64, ptr %error_var1245, align 8, !dbg !666
  ret i64 %604, !dbg !666

noerr_block1255:                                  ; preds = %after_check1250
  %605 = load i64, ptr %retparam1246, align 8, !dbg !666
  store i64 %605, ptr %len1244, align 8, !dbg !666
    #dbg_declare(ptr %i1256, !667, !DIExpression(), !669)
  store i64 0, ptr %i1256, align 8, !dbg !669
  br label %loop.cond1257, !dbg !669

loop.cond1257:                                    ; preds = %noerr_block1287, %noerr_block1255
  %606 = load i64, ptr %i1256, align 8, !dbg !669
  %607 = load i64, ptr %vlen, align 8, !dbg !669
  %lt1258 = icmp ult i64 %606, %607, !dbg !669
  br i1 %lt1258, label %loop.body1259, label %loop.exit1291, !dbg !669

loop.body1259:                                    ; preds = %loop.cond1257
  %608 = load i64, ptr %i1256, align 8, !dbg !670
  %neq1260 = icmp ne i64 0, %608, !dbg !670
  br i1 %neq1260, label %if.then1261, label %if.exit1274, !dbg !670

if.then1261:                                      ; preds = %loop.body1259
  %609 = load i64, ptr %len1244, align 8, !dbg !670
  %610 = load ptr, ptr %self, align 8
  store %"char[]" { ptr @.str.86, i64 2 }, ptr %indirectarg1264, align 8
  %611 = call i64 @std.io.Formatter.out_substr(ptr %retparam1263, ptr %610, ptr align 8 %indirectarg1264), !dbg !670
  %not_err1265 = icmp eq i64 %611, 0, !dbg !670
  %612 = call i1 @llvm.expect.i1(i1 %not_err1265, i1 true), !dbg !670
  br i1 %612, label %after_check1267, label %assign_optional1266, !dbg !670

assign_optional1266:                              ; preds = %if.then1261
  store i64 %611, ptr %error_var1262, align 8, !dbg !670
  br label %guard_block1268, !dbg !670

after_check1267:                                  ; preds = %if.then1261
  br label %noerr_block1272, !dbg !670

guard_block1268:                                  ; preds = %assign_optional1266
  %613 = load ptr, ptr %self, align 8, !dbg !672
  %ptradd1269 = getelementptr inbounds i8, ptr %613, i64 16, !dbg !672
  %614 = load i32, ptr %flags1187, align 4, !dbg !672
  store i32 %614, ptr %ptradd1269, align 8, !dbg !672
  %615 = load ptr, ptr %self, align 8, !dbg !674
  %ptradd1270 = getelementptr inbounds i8, ptr %615, i64 16, !dbg !674
  %ptradd1271 = getelementptr inbounds i8, ptr %ptradd1270, i64 4, !dbg !674
  %616 = load i32, ptr %width1189, align 4, !dbg !674
  store i32 %616, ptr %ptradd1271, align 4, !dbg !674
  %617 = load i64, ptr %error_var1262, align 8, !dbg !674
  ret i64 %617, !dbg !674

noerr_block1272:                                  ; preds = %after_check1267
  %618 = load i64, ptr %retparam1263, align 8, !dbg !674
  %add1273 = add i64 %609, %618, !dbg !670
  store i64 %add1273, ptr %len1244, align 8, !dbg !670
  br label %if.exit1274, !dbg !670

if.exit1274:                                      ; preds = %noerr_block1272, %loop.body1259
  %619 = load i64, ptr %len1244, align 8, !dbg !675
  %620 = load ptr, ptr %ptr1243, align 8
  store ptr %620, ptr %ptr1276, align 8
  %621 = load i64, ptr %inner1195, align 8
  store i64 %621, ptr %type1277, align 8
  %622 = load ptr, ptr %ptr1276, align 8, !dbg !676
  %623 = load i64, ptr %type1277, align 8, !dbg !676
  %624 = insertvalue %any undef, ptr %622, 0, !dbg !676
  %625 = insertvalue %any %624, i64 %623, 1, !dbg !676
  %626 = load ptr, ptr %self, align 8
  store %any %625, ptr %indirectarg1279, align 8
  %627 = call i64 @std.io.Formatter.out_str(ptr %retparam1278, ptr %626, ptr align 8 %indirectarg1279), !dbg !675
  %not_err1280 = icmp eq i64 %627, 0, !dbg !675
  %628 = call i1 @llvm.expect.i1(i1 %not_err1280, i1 true), !dbg !675
  br i1 %628, label %after_check1282, label %assign_optional1281, !dbg !675

assign_optional1281:                              ; preds = %if.exit1274
  store i64 %627, ptr %error_var1275, align 8, !dbg !675
  br label %guard_block1283, !dbg !675

after_check1282:                                  ; preds = %if.exit1274
  br label %noerr_block1287, !dbg !675

guard_block1283:                                  ; preds = %assign_optional1281
  %629 = load ptr, ptr %self, align 8, !dbg !678
  %ptradd1284 = getelementptr inbounds i8, ptr %629, i64 16, !dbg !678
  %630 = load i32, ptr %flags1187, align 4, !dbg !678
  store i32 %630, ptr %ptradd1284, align 8, !dbg !678
  %631 = load ptr, ptr %self, align 8, !dbg !680
  %ptradd1285 = getelementptr inbounds i8, ptr %631, i64 16, !dbg !680
  %ptradd1286 = getelementptr inbounds i8, ptr %ptradd1285, i64 4, !dbg !680
  %632 = load i32, ptr %width1189, align 4, !dbg !680
  store i32 %632, ptr %ptradd1286, align 4, !dbg !680
  %633 = load i64, ptr %error_var1275, align 8, !dbg !680
  ret i64 %633, !dbg !680

noerr_block1287:                                  ; preds = %after_check1282
  %634 = load i64, ptr %retparam1278, align 8, !dbg !680
  %add1288 = add i64 %619, %634, !dbg !675
  store i64 %add1288, ptr %len1244, align 8, !dbg !675
  %635 = load ptr, ptr %ptr1243, align 8, !dbg !681
  %636 = load i64, ptr %size1221, align 8, !dbg !681
  %ptradd_any1289 = getelementptr i8, ptr %635, i64 %636, !dbg !681
  store ptr %ptradd_any1289, ptr %ptr1243, align 8, !dbg !681
  %637 = load i64, ptr %i1256, align 8, !dbg !669
  %add1290 = add i64 %637, 1, !dbg !669
  store i64 %add1290, ptr %i1256, align 8, !dbg !669
  br label %loop.cond1257, !dbg !669

loop.exit1291:                                    ; preds = %loop.cond1257
  %638 = load i64, ptr %len1244, align 8, !dbg !682
  %639 = load ptr, ptr %self, align 8
  store %"char[]" { ptr @.str.87, i64 2 }, ptr %indirectarg1294, align 8
  %640 = call i64 @std.io.Formatter.out_substr(ptr %retparam1293, ptr %639, ptr align 8 %indirectarg1294), !dbg !682
  %not_err1295 = icmp eq i64 %640, 0, !dbg !682
  %641 = call i1 @llvm.expect.i1(i1 %not_err1295, i1 true), !dbg !682
  br i1 %641, label %after_check1297, label %assign_optional1296, !dbg !682

assign_optional1296:                              ; preds = %loop.exit1291
  store i64 %640, ptr %error_var1292, align 8, !dbg !682
  br label %guard_block1298, !dbg !682

after_check1297:                                  ; preds = %loop.exit1291
  br label %noerr_block1302, !dbg !682

guard_block1298:                                  ; preds = %assign_optional1296
  %642 = load ptr, ptr %self, align 8, !dbg !683
  %ptradd1299 = getelementptr inbounds i8, ptr %642, i64 16, !dbg !683
  %643 = load i32, ptr %flags1187, align 4, !dbg !683
  store i32 %643, ptr %ptradd1299, align 8, !dbg !683
  %644 = load ptr, ptr %self, align 8, !dbg !685
  %ptradd1300 = getelementptr inbounds i8, ptr %644, i64 16, !dbg !685
  %ptradd1301 = getelementptr inbounds i8, ptr %ptradd1300, i64 4, !dbg !685
  %645 = load i32, ptr %width1189, align 4, !dbg !685
  store i32 %645, ptr %ptradd1301, align 4, !dbg !685
  %646 = load i64, ptr %error_var1292, align 8, !dbg !685
  ret i64 %646, !dbg !685

noerr_block1302:                                  ; preds = %after_check1297
  %647 = load i64, ptr %retparam1293, align 8, !dbg !685
  %add1303 = add i64 %638, %647, !dbg !682
  store i64 %add1303, ptr %len1244, align 8, !dbg !682
  %648 = load i64, ptr %len1244, align 8, !dbg !686
  %649 = load ptr, ptr %self, align 8, !dbg !687
  %ptradd1305 = getelementptr inbounds i8, ptr %649, i64 16, !dbg !687
  %650 = load i32, ptr %flags1187, align 4, !dbg !687
  store i32 %650, ptr %ptradd1305, align 8, !dbg !687
  %651 = load ptr, ptr %self, align 8, !dbg !689
  %ptradd1306 = getelementptr inbounds i8, ptr %651, i64 16, !dbg !689
  %ptradd1307 = getelementptr inbounds i8, ptr %ptradd1306, i64 4, !dbg !689
  %652 = load i32, ptr %width1189, align 4, !dbg !689
  store i32 %652, ptr %ptradd1307, align 4, !dbg !689
  store i64 %648, ptr %0, align 8, !dbg !689
  ret i64 0, !dbg !689

switch.case1308:                                  ; preds = %switch.entry154
    #dbg_declare(ptr %inner1309, !690, !DIExpression(), !692)
  %ptradd1310 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !692
  %653 = load i64, ptr %ptradd1310, align 8, !dbg !692
  %"introspect*1311" = inttoptr i64 %653 to ptr, !dbg !692
  %typeid.kind1312 = load i8, ptr %"introspect*1311", align 8, !dbg !692
  %eq1313 = icmp eq i8 %typeid.kind1312, 15, !dbg !692
  br i1 %eq1313, label %check_type_ok1332, label %check_next1314, !dbg !692

check_next1314:                                   ; preds = %switch.case1308
  %eq1315 = icmp eq i8 %typeid.kind1312, 19, !dbg !692
  br i1 %eq1315, label %check_type_ok1332, label %check_next1316, !dbg !692

check_next1316:                                   ; preds = %check_next1314
  %eq1317 = icmp eq i8 %typeid.kind1312, 17, !dbg !692
  br i1 %eq1317, label %check_type_ok1332, label %check_next1318, !dbg !692

check_next1318:                                   ; preds = %check_next1316
  %eq1319 = icmp eq i8 %typeid.kind1312, 8, !dbg !692
  br i1 %eq1319, label %check_type_ok1332, label %check_next1320, !dbg !692

check_next1320:                                   ; preds = %check_next1318
  %eq1321 = icmp eq i8 %typeid.kind1312, 16, !dbg !692
  br i1 %eq1321, label %check_type_ok1332, label %check_next1322, !dbg !692

check_next1322:                                   ; preds = %check_next1320
  %eq1323 = icmp eq i8 %typeid.kind1312, 18, !dbg !692
  br i1 %eq1323, label %check_type_ok1332, label %check_next1324, !dbg !692

check_next1324:                                   ; preds = %check_next1322
  %eq1325 = icmp eq i8 %typeid.kind1312, 9, !dbg !692
  br i1 %eq1325, label %check_type_ok1332, label %check_next1326, !dbg !692

check_next1326:                                   ; preds = %check_next1324
  %eq1327 = icmp eq i8 %typeid.kind1312, 12, !dbg !692
  br i1 %eq1327, label %check_type_ok1332, label %check_next1328, !dbg !692

check_next1328:                                   ; preds = %check_next1326
  store %"char[]" { ptr @.panic_msg.53, i64 49 }, ptr %indirectarg1329, align 8
  store %"char[]" { ptr @.file.22, i64 12 }, ptr %indirectarg1330, align 8
  store %"char[]" { ptr @.func.37, i64 7 }, ptr %indirectarg1331, align 8
  %654 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %654(ptr align 8 %indirectarg1329, ptr align 8 %indirectarg1330, ptr align 8 %indirectarg1331, i32 293) #5, !dbg !692
  unreachable, !dbg !692

check_type_ok1332:                                ; preds = %check_next1326, %check_next1324, %check_next1322, %check_next1320, %check_next1318, %check_next1316, %check_next1314, %switch.case1308
  %ptradd1333 = getelementptr inbounds i8, ptr %"introspect*1311", i64 32, !dbg !692
  %typeid.inner1334 = load i64, ptr %ptradd1333, align 8, !dbg !692
  store i64 %typeid.inner1334, ptr %inner1309, align 8, !dbg !692
  %655 = load i64, ptr %inner1309, align 8, !dbg !693
  %eq1335 = icmp eq i64 %655, ptrtoint (ptr @"$ct.void" to i64), !dbg !693
  br i1 %eq1335, label %if.then1336, label %if.exit1337, !dbg !693

if.then1336:                                      ; preds = %check_type_ok1332
  store i64 ptrtoint (ptr @"$ct.char" to i64), ptr %inner1309, align 8, !dbg !693
  br label %if.exit1337, !dbg !693

if.exit1337:                                      ; preds = %if.then1336, %check_type_ok1332
    #dbg_declare(ptr %flags1338, !694, !DIExpression(), !695)
  %656 = load ptr, ptr %self, align 8, !dbg !695
  %ptradd1339 = getelementptr inbounds i8, ptr %656, i64 16, !dbg !695
  %657 = load i32, ptr %ptradd1339, align 8, !dbg !695
  store i32 %657, ptr %flags1338, align 4, !dbg !695
    #dbg_declare(ptr %width1340, !696, !DIExpression(), !697)
  %658 = load ptr, ptr %self, align 8, !dbg !697
  %ptradd1341 = getelementptr inbounds i8, ptr %658, i64 16, !dbg !697
  %ptradd1342 = getelementptr inbounds i8, ptr %ptradd1341, i64 4, !dbg !697
  %659 = load i32, ptr %ptradd1342, align 4, !dbg !697
  store i32 %659, ptr %width1340, align 4, !dbg !697
  %660 = load ptr, ptr %self, align 8, !dbg !698
  %ptradd1343 = getelementptr inbounds i8, ptr %660, i64 16, !dbg !698
  store i32 0, ptr %ptradd1343, align 8, !dbg !698
  %661 = load ptr, ptr %self, align 8, !dbg !699
  %ptradd1344 = getelementptr inbounds i8, ptr %661, i64 16, !dbg !699
  %ptradd1345 = getelementptr inbounds i8, ptr %ptradd1344, i64 4, !dbg !699
  store i32 0, ptr %ptradd1345, align 4, !dbg !699
    #dbg_declare(ptr %size1346, !700, !DIExpression(), !701)
  %662 = load i64, ptr %inner1309, align 8, !dbg !701
  %"introspect*1347" = inttoptr i64 %662 to ptr, !dbg !701
  %typeid.kind1348 = load i8, ptr %"introspect*1347", align 8, !dbg !701
  %ptradd1349 = getelementptr inbounds i8, ptr %"introspect*1347", i64 24, !dbg !701
  %typeid.size1350 = load i64, ptr %ptradd1349, align 8, !dbg !701
  store i64 %typeid.size1350, ptr %size1346, align 8, !dbg !701
    #dbg_declare(ptr %temp, !702, !DIExpression(), !704)
  %663 = load ptr, ptr %2, align 8, !dbg !704
  store ptr %663, ptr %temp, align 8, !dbg !704
    #dbg_declare(ptr %ptr1351, !705, !DIExpression(), !706)
  %664 = load ptr, ptr %temp, align 8, !dbg !706
  %checknull1352 = icmp eq ptr %664, null, !dbg !706
  %665 = call i1 @llvm.expect.i1(i1 %checknull1352, i1 false), !dbg !706
  br i1 %665, label %panic1353, label %checkok1357, !dbg !706

checkok1357:                                      ; preds = %if.exit1337
  %666 = ptrtoint ptr %664 to i64, !dbg !706
  %667 = urem i64 %666, 8, !dbg !706
  %668 = icmp ne i64 %667, 0, !dbg !706
  %669 = call i1 @llvm.expect.i1(i1 %668, i1 false), !dbg !706
  br i1 %669, label %panic1358, label %checkok1368, !dbg !706

checkok1368:                                      ; preds = %checkok1357
  %670 = load ptr, ptr %664, align 8, !dbg !706
  store ptr %670, ptr %ptr1351, align 8, !dbg !706
    #dbg_declare(ptr %slen, !707, !DIExpression(), !708)
  %671 = load ptr, ptr %temp, align 8, !dbg !708
  %checknull1369 = icmp eq ptr %671, null, !dbg !708
  %672 = call i1 @llvm.expect.i1(i1 %checknull1369, i1 false), !dbg !708
  br i1 %672, label %panic1370, label %checkok1374, !dbg !708

checkok1374:                                      ; preds = %checkok1368
  %673 = ptrtoint ptr %671 to i64, !dbg !708
  %674 = urem i64 %673, 8, !dbg !708
  %675 = icmp ne i64 %674, 0, !dbg !708
  %676 = call i1 @llvm.expect.i1(i1 %675, i1 false), !dbg !708
  br i1 %676, label %panic1375, label %checkok1385, !dbg !708

checkok1385:                                      ; preds = %checkok1374
  %ptradd1386 = getelementptr inbounds i8, ptr %671, i64 8, !dbg !708
  %677 = load i64, ptr %ptradd1386, align 8, !dbg !708
  store i64 %677, ptr %slen, align 8, !dbg !708
    #dbg_declare(ptr %len1387, !709, !DIExpression(), !710)
  %678 = load ptr, ptr %self, align 8
  %679 = call i64 @std.io.Formatter.out(ptr %retparam1389, ptr %678, i8 91), !dbg !710
  %not_err1390 = icmp eq i64 %679, 0, !dbg !710
  %680 = call i1 @llvm.expect.i1(i1 %not_err1390, i1 true), !dbg !710
  br i1 %680, label %after_check1392, label %assign_optional1391, !dbg !710

assign_optional1391:                              ; preds = %checkok1385
  store i64 %679, ptr %error_var1388, align 8, !dbg !710
  br label %guard_block1393, !dbg !710

after_check1392:                                  ; preds = %checkok1385
  br label %noerr_block1397, !dbg !710

guard_block1393:                                  ; preds = %assign_optional1391
  %681 = load ptr, ptr %self, align 8, !dbg !711
  %ptradd1394 = getelementptr inbounds i8, ptr %681, i64 16, !dbg !711
  %682 = load i32, ptr %flags1338, align 4, !dbg !711
  store i32 %682, ptr %ptradd1394, align 8, !dbg !711
  %683 = load ptr, ptr %self, align 8, !dbg !713
  %ptradd1395 = getelementptr inbounds i8, ptr %683, i64 16, !dbg !713
  %ptradd1396 = getelementptr inbounds i8, ptr %ptradd1395, i64 4, !dbg !713
  %684 = load i32, ptr %width1340, align 4, !dbg !713
  store i32 %684, ptr %ptradd1396, align 4, !dbg !713
  %685 = load i64, ptr %error_var1388, align 8, !dbg !713
  ret i64 %685, !dbg !713

noerr_block1397:                                  ; preds = %after_check1392
  %686 = load i64, ptr %retparam1389, align 8, !dbg !713
  store i64 %686, ptr %len1387, align 8, !dbg !713
    #dbg_declare(ptr %i1398, !714, !DIExpression(), !716)
  store i64 0, ptr %i1398, align 8, !dbg !716
  br label %loop.cond1399, !dbg !716

loop.cond1399:                                    ; preds = %noerr_block1429, %noerr_block1397
  %687 = load i64, ptr %i1398, align 8, !dbg !716
  %688 = load i64, ptr %slen, align 8, !dbg !716
  %lt1400 = icmp ult i64 %687, %688, !dbg !716
  br i1 %lt1400, label %loop.body1401, label %loop.exit1433, !dbg !716

loop.body1401:                                    ; preds = %loop.cond1399
  %689 = load i64, ptr %i1398, align 8, !dbg !717
  %neq1402 = icmp ne i64 0, %689, !dbg !717
  br i1 %neq1402, label %if.then1403, label %if.exit1416, !dbg !717

if.then1403:                                      ; preds = %loop.body1401
  %690 = load i64, ptr %len1387, align 8, !dbg !717
  %691 = load ptr, ptr %self, align 8
  store %"char[]" { ptr @.str.89, i64 2 }, ptr %indirectarg1406, align 8
  %692 = call i64 @std.io.Formatter.out_substr(ptr %retparam1405, ptr %691, ptr align 8 %indirectarg1406), !dbg !717
  %not_err1407 = icmp eq i64 %692, 0, !dbg !717
  %693 = call i1 @llvm.expect.i1(i1 %not_err1407, i1 true), !dbg !717
  br i1 %693, label %after_check1409, label %assign_optional1408, !dbg !717

assign_optional1408:                              ; preds = %if.then1403
  store i64 %692, ptr %error_var1404, align 8, !dbg !717
  br label %guard_block1410, !dbg !717

after_check1409:                                  ; preds = %if.then1403
  br label %noerr_block1414, !dbg !717

guard_block1410:                                  ; preds = %assign_optional1408
  %694 = load ptr, ptr %self, align 8, !dbg !719
  %ptradd1411 = getelementptr inbounds i8, ptr %694, i64 16, !dbg !719
  %695 = load i32, ptr %flags1338, align 4, !dbg !719
  store i32 %695, ptr %ptradd1411, align 8, !dbg !719
  %696 = load ptr, ptr %self, align 8, !dbg !721
  %ptradd1412 = getelementptr inbounds i8, ptr %696, i64 16, !dbg !721
  %ptradd1413 = getelementptr inbounds i8, ptr %ptradd1412, i64 4, !dbg !721
  %697 = load i32, ptr %width1340, align 4, !dbg !721
  store i32 %697, ptr %ptradd1413, align 4, !dbg !721
  %698 = load i64, ptr %error_var1404, align 8, !dbg !721
  ret i64 %698, !dbg !721

noerr_block1414:                                  ; preds = %after_check1409
  %699 = load i64, ptr %retparam1405, align 8, !dbg !721
  %add1415 = add i64 %690, %699, !dbg !717
  store i64 %add1415, ptr %len1387, align 8, !dbg !717
  br label %if.exit1416, !dbg !717

if.exit1416:                                      ; preds = %noerr_block1414, %loop.body1401
  %700 = load i64, ptr %len1387, align 8, !dbg !722
  %701 = load ptr, ptr %ptr1351, align 8
  store ptr %701, ptr %ptr1418, align 8
  %702 = load i64, ptr %inner1309, align 8
  store i64 %702, ptr %type1419, align 8
  %703 = load ptr, ptr %ptr1418, align 8, !dbg !723
  %704 = load i64, ptr %type1419, align 8, !dbg !723
  %705 = insertvalue %any undef, ptr %703, 0, !dbg !723
  %706 = insertvalue %any %705, i64 %704, 1, !dbg !723
  %707 = load ptr, ptr %self, align 8
  store %any %706, ptr %indirectarg1421, align 8
  %708 = call i64 @std.io.Formatter.out_str(ptr %retparam1420, ptr %707, ptr align 8 %indirectarg1421), !dbg !722
  %not_err1422 = icmp eq i64 %708, 0, !dbg !722
  %709 = call i1 @llvm.expect.i1(i1 %not_err1422, i1 true), !dbg !722
  br i1 %709, label %after_check1424, label %assign_optional1423, !dbg !722

assign_optional1423:                              ; preds = %if.exit1416
  store i64 %708, ptr %error_var1417, align 8, !dbg !722
  br label %guard_block1425, !dbg !722

after_check1424:                                  ; preds = %if.exit1416
  br label %noerr_block1429, !dbg !722

guard_block1425:                                  ; preds = %assign_optional1423
  %710 = load ptr, ptr %self, align 8, !dbg !725
  %ptradd1426 = getelementptr inbounds i8, ptr %710, i64 16, !dbg !725
  %711 = load i32, ptr %flags1338, align 4, !dbg !725
  store i32 %711, ptr %ptradd1426, align 8, !dbg !725
  %712 = load ptr, ptr %self, align 8, !dbg !727
  %ptradd1427 = getelementptr inbounds i8, ptr %712, i64 16, !dbg !727
  %ptradd1428 = getelementptr inbounds i8, ptr %ptradd1427, i64 4, !dbg !727
  %713 = load i32, ptr %width1340, align 4, !dbg !727
  store i32 %713, ptr %ptradd1428, align 4, !dbg !727
  %714 = load i64, ptr %error_var1417, align 8, !dbg !727
  ret i64 %714, !dbg !727

noerr_block1429:                                  ; preds = %after_check1424
  %715 = load i64, ptr %retparam1420, align 8, !dbg !727
  %add1430 = add i64 %700, %715, !dbg !722
  store i64 %add1430, ptr %len1387, align 8, !dbg !722
  %716 = load ptr, ptr %ptr1351, align 8, !dbg !728
  %717 = load i64, ptr %size1346, align 8, !dbg !728
  %ptradd_any1431 = getelementptr i8, ptr %716, i64 %717, !dbg !728
  store ptr %ptradd_any1431, ptr %ptr1351, align 8, !dbg !728
  %718 = load i64, ptr %i1398, align 8, !dbg !716
  %add1432 = add i64 %718, 1, !dbg !716
  store i64 %add1432, ptr %i1398, align 8, !dbg !716
  br label %loop.cond1399, !dbg !716

loop.exit1433:                                    ; preds = %loop.cond1399
  %719 = load i64, ptr %len1387, align 8, !dbg !729
  %720 = load ptr, ptr %self, align 8
  %721 = call i64 @std.io.Formatter.out(ptr %retparam1435, ptr %720, i8 93), !dbg !729
  %not_err1436 = icmp eq i64 %721, 0, !dbg !729
  %722 = call i1 @llvm.expect.i1(i1 %not_err1436, i1 true), !dbg !729
  br i1 %722, label %after_check1438, label %assign_optional1437, !dbg !729

assign_optional1437:                              ; preds = %loop.exit1433
  store i64 %721, ptr %error_var1434, align 8, !dbg !729
  br label %guard_block1439, !dbg !729

after_check1438:                                  ; preds = %loop.exit1433
  br label %noerr_block1443, !dbg !729

guard_block1439:                                  ; preds = %assign_optional1437
  %723 = load ptr, ptr %self, align 8, !dbg !730
  %ptradd1440 = getelementptr inbounds i8, ptr %723, i64 16, !dbg !730
  %724 = load i32, ptr %flags1338, align 4, !dbg !730
  store i32 %724, ptr %ptradd1440, align 8, !dbg !730
  %725 = load ptr, ptr %self, align 8, !dbg !732
  %ptradd1441 = getelementptr inbounds i8, ptr %725, i64 16, !dbg !732
  %ptradd1442 = getelementptr inbounds i8, ptr %ptradd1441, i64 4, !dbg !732
  %726 = load i32, ptr %width1340, align 4, !dbg !732
  store i32 %726, ptr %ptradd1442, align 4, !dbg !732
  %727 = load i64, ptr %error_var1434, align 8, !dbg !732
  ret i64 %727, !dbg !732

noerr_block1443:                                  ; preds = %after_check1438
  %728 = load i64, ptr %retparam1435, align 8, !dbg !732
  %add1444 = add i64 %719, %728, !dbg !729
  store i64 %add1444, ptr %len1387, align 8, !dbg !729
  %729 = load i64, ptr %len1387, align 8, !dbg !733
  %730 = load ptr, ptr %self, align 8, !dbg !734
  %ptradd1446 = getelementptr inbounds i8, ptr %730, i64 16, !dbg !734
  %731 = load i32, ptr %flags1338, align 4, !dbg !734
  store i32 %731, ptr %ptradd1446, align 8, !dbg !734
  %732 = load ptr, ptr %self, align 8, !dbg !736
  %ptradd1447 = getelementptr inbounds i8, ptr %732, i64 16, !dbg !736
  %ptradd1448 = getelementptr inbounds i8, ptr %ptradd1447, i64 4, !dbg !736
  %733 = load i32, ptr %width1340, align 4, !dbg !736
  store i32 %733, ptr %ptradd1448, align 4, !dbg !736
  store i64 %729, ptr %0, align 8, !dbg !736
  ret i64 0, !dbg !736

switch.case1449:                                  ; preds = %switch.entry154, %switch.entry154
  store %"char[]" { ptr @.str.90, i64 15 }, ptr %string1450, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg1451, ptr align 8 %string1450, i32 16, i1 false)
  store %"char[]" { ptr @.str.91, i64 12 }, ptr %indirectarg1452, align 8
  store %"char[]" { ptr @.str.92, i64 17 }, ptr %indirectarg1453, align 8
  store %"any[]" zeroinitializer, ptr %indirectarg1454, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1451, ptr align 8 %indirectarg1452, ptr align 8 %indirectarg1453, i32 320, ptr align 8 %indirectarg1454), !dbg !737
  unreachable, !dbg !737

switch.exit1455:                                  ; preds = %switch.entry154
  %734 = load ptr, ptr %self, align 8
  store %"char[]" { ptr @.str.93, i64 12 }, ptr %indirectarg1458, align 8
  %735 = call i64 @std.io.Formatter.out_substr(ptr %retparam1457, ptr %734, ptr align 8 %indirectarg1458), !dbg !741
  %not_err1459 = icmp eq i64 %735, 0, !dbg !741
  %736 = call i1 @llvm.expect.i1(i1 %not_err1459, i1 true), !dbg !741
  br i1 %736, label %after_check1461, label %assign_optional1460, !dbg !741

assign_optional1460:                              ; preds = %switch.exit1455
  store i64 %735, ptr %reterr1456, align 8, !dbg !741
  br label %err_retblock1462, !dbg !741

after_check1461:                                  ; preds = %switch.exit1455
  %737 = load i64, ptr %retparam1457, align 8, !dbg !741
  store i64 %737, ptr %0, align 8, !dbg !741
  ret i64 0, !dbg !741

err_retblock1462:                                 ; preds = %assign_optional1460
  %738 = load i64, ptr %reterr1456, align 8, !dbg !741
  ret i64 %738, !dbg !741

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.22, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.37, i64 7 }, ptr %indirectarg2, align 8
  %739 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %739(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 140) #5, !dbg !373
  unreachable, !dbg !373

panic14:                                          ; preds = %switch.case12
  store %"char[]" { ptr @.panic_msg.40, i64 56 }, ptr %indirectarg15, align 8
  store %"char[]" { ptr @.file.22, i64 12 }, ptr %indirectarg16, align 8
  store %"char[]" { ptr @.func.37, i64 7 }, ptr %indirectarg17, align 8
  %740 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %740(ptr align 8 %indirectarg15, ptr align 8 %indirectarg16, ptr align 8 %indirectarg17, i32 149) #5, !dbg !381
  unreachable, !dbg !381

panic19:                                          ; preds = %checkok18
  store i64 8, ptr %taddr, align 8
  %741 = insertvalue %any undef, ptr %taddr, 0
  %742 = insertvalue %any %741, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %20, ptr %taddr20, align 8
  %743 = insertvalue %any undef, ptr %taddr20, 0
  %744 = insertvalue %any %743, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg21, align 8
  store %"char[]" { ptr @.file.22, i64 12 }, ptr %indirectarg22, align 8
  store %"char[]" { ptr @.func.37, i64 7 }, ptr %indirectarg23, align 8
  store %any %742, ptr %varargslots, align 16
  %ptradd24 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %744, ptr %ptradd24, align 16
  %745 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %745, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg25, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg21, ptr align 8 %indirectarg22, ptr align 8 %indirectarg23, i32 149, ptr align 8 %indirectarg25) #5, !dbg !381
  unreachable, !dbg !381

panic36:                                          ; preds = %switch.case33
  store %"char[]" { ptr @.panic_msg.41, i64 50 }, ptr %indirectarg37, align 8
  store %"char[]" { ptr @.file.22, i64 12 }, ptr %indirectarg38, align 8
  store %"char[]" { ptr @.func.37, i64 7 }, ptr %indirectarg39, align 8
  %746 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %746(ptr align 8 %indirectarg37, ptr align 8 %indirectarg38, ptr align 8 %indirectarg39, i32 152) #5, !dbg !383
  unreachable, !dbg !383

panic41:                                          ; preds = %checkok40
  store i64 8, ptr %taddr42, align 8
  %747 = insertvalue %any undef, ptr %taddr42, 0
  %748 = insertvalue %any %747, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %33, ptr %taddr43, align 8
  %749 = insertvalue %any undef, ptr %taddr43, 0
  %750 = insertvalue %any %749, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg44, align 8
  store %"char[]" { ptr @.file.22, i64 12 }, ptr %indirectarg45, align 8
  store %"char[]" { ptr @.func.37, i64 7 }, ptr %indirectarg46, align 8
  store %any %748, ptr %varargslots47, align 16
  %ptradd48 = getelementptr inbounds i8, ptr %varargslots47, i64 16
  store %any %750, ptr %ptradd48, align 16
  %751 = insertvalue %"any[]" undef, ptr %varargslots47, 0
  %"$$temp49" = insertvalue %"any[]" %751, i64 2, 1
  store %"any[]" %"$$temp49", ptr %indirectarg50, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg44, ptr align 8 %indirectarg45, ptr align 8 %indirectarg46, i32 152, ptr align 8 %indirectarg50) #5, !dbg !383
  unreachable, !dbg !383

panic122:                                         ; preds = %switch.case119
  store %"char[]" { ptr @.panic_msg.47, i64 55 }, ptr %indirectarg123, align 8
  store %"char[]" { ptr @.file.22, i64 12 }, ptr %indirectarg124, align 8
  store %"char[]" { ptr @.func.37, i64 7 }, ptr %indirectarg125, align 8
  %752 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %752(ptr align 8 %indirectarg123, ptr align 8 %indirectarg124, ptr align 8 %indirectarg125, i32 179) #5, !dbg !417
  unreachable, !dbg !417

panic179:                                         ; preds = %assert_ok177
  store %"char[]" { ptr @.panic_msg.2, i64 45 }, ptr %indirectarg180, align 8
  store %"char[]" { ptr @.file.14, i64 10 }, ptr %indirectarg181, align 8
  store %"char[]" { ptr @.func.37, i64 7 }, ptr %indirectarg182, align 8
  %753 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %753(ptr align 8 %indirectarg180, ptr align 8 %indirectarg181, ptr align 8 %indirectarg182, i32 268) #5, !dbg !441
  unreachable, !dbg !441

panic184:                                         ; preds = %checkok183
  store i64 8, ptr %taddr185, align 8
  %754 = insertvalue %any undef, ptr %taddr185, 0
  %755 = insertvalue %any %754, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %123, ptr %taddr186, align 8
  %756 = insertvalue %any undef, ptr %taddr186, 0
  %757 = insertvalue %any %756, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg187, align 8
  store %"char[]" { ptr @.file.14, i64 10 }, ptr %indirectarg188, align 8
  store %"char[]" { ptr @.func.37, i64 7 }, ptr %indirectarg189, align 8
  store %any %755, ptr %varargslots190, align 16
  %ptradd191 = getelementptr inbounds i8, ptr %varargslots190, i64 16
  store %any %757, ptr %ptradd191, align 16
  %758 = insertvalue %"any[]" undef, ptr %varargslots190, 0
  %"$$temp192" = insertvalue %"any[]" %758, i64 2, 1
  store %"any[]" %"$$temp192", ptr %indirectarg193, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg187, ptr align 8 %indirectarg188, ptr align 8 %indirectarg189, i32 268, ptr align 8 %indirectarg193) #5, !dbg !441
  unreachable, !dbg !441

panic196:                                         ; preds = %checkok194
  store %"char[]" { ptr @.panic_msg.2, i64 45 }, ptr %indirectarg197, align 8
  store %"char[]" { ptr @.file.14, i64 10 }, ptr %indirectarg198, align 8
  store %"char[]" { ptr @.func.37, i64 7 }, ptr %indirectarg199, align 8
  %759 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %759(ptr align 8 %indirectarg197, ptr align 8 %indirectarg198, ptr align 8 %indirectarg199, i32 268) #5, !dbg !441
  unreachable, !dbg !441

panic201:                                         ; preds = %checkok200
  store i64 8, ptr %taddr202, align 8
  %760 = insertvalue %any undef, ptr %taddr202, 0
  %761 = insertvalue %any %760, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %130, ptr %taddr203, align 8
  %762 = insertvalue %any undef, ptr %taddr203, 0
  %763 = insertvalue %any %762, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg204, align 8
  store %"char[]" { ptr @.file.14, i64 10 }, ptr %indirectarg205, align 8
  store %"char[]" { ptr @.func.37, i64 7 }, ptr %indirectarg206, align 8
  store %any %761, ptr %varargslots207, align 16
  %ptradd208 = getelementptr inbounds i8, ptr %varargslots207, i64 16
  store %any %763, ptr %ptradd208, align 16
  %764 = insertvalue %"any[]" undef, ptr %varargslots207, 0
  %"$$temp209" = insertvalue %"any[]" %764, i64 2, 1
  store %"any[]" %"$$temp209", ptr %indirectarg210, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg204, ptr align 8 %indirectarg205, ptr align 8 %indirectarg206, i32 268, ptr align 8 %indirectarg210) #5, !dbg !441
  unreachable, !dbg !441

panic261:                                         ; preds = %switch.case259
  store %"char[]" { ptr @.panic_msg.56, i64 53 }, ptr %indirectarg262, align 8
  store %"char[]" { ptr @.file.54, i64 8 }, ptr %indirectarg263, align 8
  store %"char[]" { ptr @.func.37, i64 7 }, ptr %indirectarg264, align 8
  %765 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %765(ptr align 8 %indirectarg262, ptr align 8 %indirectarg263, ptr align 8 %indirectarg264, i32 31) #5, !dbg !462
  unreachable, !dbg !462

panic278:                                         ; preds = %switch.case276
  store %"char[]" { ptr @.panic_msg.57, i64 54 }, ptr %indirectarg279, align 8
  store %"char[]" { ptr @.file.54, i64 8 }, ptr %indirectarg280, align 8
  store %"char[]" { ptr @.func.37, i64 7 }, ptr %indirectarg281, align 8
  %766 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %766(ptr align 8 %indirectarg279, ptr align 8 %indirectarg280, ptr align 8 %indirectarg281, i32 35) #5, !dbg !469
  unreachable, !dbg !469

panic283:                                         ; preds = %checkok282
  store i64 2, ptr %taddr284, align 8
  %767 = insertvalue %any undef, ptr %taddr284, 0
  %768 = insertvalue %any %767, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %168, ptr %taddr285, align 8
  %769 = insertvalue %any undef, ptr %taddr285, 0
  %770 = insertvalue %any %769, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg286, align 8
  store %"char[]" { ptr @.file.54, i64 8 }, ptr %indirectarg287, align 8
  store %"char[]" { ptr @.func.37, i64 7 }, ptr %indirectarg288, align 8
  store %any %768, ptr %varargslots289, align 16
  %ptradd290 = getelementptr inbounds i8, ptr %varargslots289, i64 16
  store %any %770, ptr %ptradd290, align 16
  %771 = insertvalue %"any[]" undef, ptr %varargslots289, 0
  %"$$temp291" = insertvalue %"any[]" %771, i64 2, 1
  store %"any[]" %"$$temp291", ptr %indirectarg292, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg286, ptr align 8 %indirectarg287, ptr align 8 %indirectarg288, i32 35, ptr align 8 %indirectarg292) #5, !dbg !469
  unreachable, !dbg !469

panic319:                                         ; preds = %switch.case316
  store %"char[]" { ptr @.panic_msg.58, i64 52 }, ptr %indirectarg320, align 8
  store %"char[]" { ptr @.file.54, i64 8 }, ptr %indirectarg321, align 8
  store %"char[]" { ptr @.func.37, i64 7 }, ptr %indirectarg322, align 8
  %772 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %772(ptr align 8 %indirectarg320, ptr align 8 %indirectarg321, ptr align 8 %indirectarg322, i32 40) #5, !dbg !476
  unreachable, !dbg !476

panic324:                                         ; preds = %checkok323
  store i64 4, ptr %taddr325, align 8
  %773 = insertvalue %any undef, ptr %taddr325, 0
  %774 = insertvalue %any %773, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %187, ptr %taddr326, align 8
  %775 = insertvalue %any undef, ptr %taddr326, 0
  %776 = insertvalue %any %775, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg327, align 8
  store %"char[]" { ptr @.file.54, i64 8 }, ptr %indirectarg328, align 8
  store %"char[]" { ptr @.func.37, i64 7 }, ptr %indirectarg329, align 8
  store %any %774, ptr %varargslots330, align 16
  %ptradd331 = getelementptr inbounds i8, ptr %varargslots330, i64 16
  store %any %776, ptr %ptradd331, align 16
  %777 = insertvalue %"any[]" undef, ptr %varargslots330, 0
  %"$$temp332" = insertvalue %"any[]" %777, i64 2, 1
  store %"any[]" %"$$temp332", ptr %indirectarg333, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg327, ptr align 8 %indirectarg328, ptr align 8 %indirectarg329, i32 40, ptr align 8 %indirectarg333) #5, !dbg !476
  unreachable, !dbg !476

panic364:                                         ; preds = %switch.case362
  store %"char[]" { ptr @.panic_msg.59, i64 53 }, ptr %indirectarg365, align 8
  store %"char[]" { ptr @.file.54, i64 8 }, ptr %indirectarg366, align 8
  store %"char[]" { ptr @.func.37, i64 7 }, ptr %indirectarg367, align 8
  %778 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %778(ptr align 8 %indirectarg365, ptr align 8 %indirectarg366, ptr align 8 %indirectarg367, i32 45) #5, !dbg !483
  unreachable, !dbg !483

panic369:                                         ; preds = %checkok368
  store i64 8, ptr %taddr370, align 8
  %779 = insertvalue %any undef, ptr %taddr370, 0
  %780 = insertvalue %any %779, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %206, ptr %taddr371, align 8
  %781 = insertvalue %any undef, ptr %taddr371, 0
  %782 = insertvalue %any %781, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg372, align 8
  store %"char[]" { ptr @.file.54, i64 8 }, ptr %indirectarg373, align 8
  store %"char[]" { ptr @.func.37, i64 7 }, ptr %indirectarg374, align 8
  store %any %780, ptr %varargslots375, align 16
  %ptradd376 = getelementptr inbounds i8, ptr %varargslots375, i64 16
  store %any %782, ptr %ptradd376, align 16
  %783 = insertvalue %"any[]" undef, ptr %varargslots375, 0
  %"$$temp377" = insertvalue %"any[]" %783, i64 2, 1
  store %"any[]" %"$$temp377", ptr %indirectarg378, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg372, ptr align 8 %indirectarg373, ptr align 8 %indirectarg374, i32 45, ptr align 8 %indirectarg378) #5, !dbg !483
  unreachable, !dbg !483

panic407:                                         ; preds = %switch.case404
  store %"char[]" { ptr @.panic_msg.60, i64 55 }, ptr %indirectarg408, align 8
  store %"char[]" { ptr @.file.54, i64 8 }, ptr %indirectarg409, align 8
  store %"char[]" { ptr @.func.37, i64 7 }, ptr %indirectarg410, align 8
  %784 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %784(ptr align 8 %indirectarg408, ptr align 8 %indirectarg409, ptr align 8 %indirectarg410, i32 50) #5, !dbg !491
  unreachable, !dbg !491

panic412:                                         ; preds = %checkok411
  store i64 16, ptr %taddr413, align 8
  %785 = insertvalue %any undef, ptr %taddr413, 0
  %786 = insertvalue %any %785, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %225, ptr %taddr414, align 8
  %787 = insertvalue %any undef, ptr %taddr414, 0
  %788 = insertvalue %any %787, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg415, align 8
  store %"char[]" { ptr @.file.54, i64 8 }, ptr %indirectarg416, align 8
  store %"char[]" { ptr @.func.37, i64 7 }, ptr %indirectarg417, align 8
  store %any %786, ptr %varargslots418, align 16
  %ptradd419 = getelementptr inbounds i8, ptr %varargslots418, i64 16
  store %any %788, ptr %ptradd419, align 16
  %789 = insertvalue %"any[]" undef, ptr %varargslots418, 0
  %"$$temp420" = insertvalue %"any[]" %789, i64 2, 1
  store %"any[]" %"$$temp420", ptr %indirectarg421, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg415, ptr align 8 %indirectarg416, ptr align 8 %indirectarg417, i32 50, ptr align 8 %indirectarg421) #5, !dbg !491
  unreachable, !dbg !491

panic451:                                         ; preds = %switch.case448
  store %"char[]" { ptr @.panic_msg.56, i64 53 }, ptr %indirectarg452, align 8
  store %"char[]" { ptr @.file.54, i64 8 }, ptr %indirectarg453, align 8
  store %"char[]" { ptr @.func.37, i64 7 }, ptr %indirectarg454, align 8
  %790 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %790(ptr align 8 %indirectarg452, ptr align 8 %indirectarg453, ptr align 8 %indirectarg454, i32 55) #5, !dbg !498
  unreachable, !dbg !498

panic471:                                         ; preds = %switch.case468
  store %"char[]" { ptr @.panic_msg.61, i64 55 }, ptr %indirectarg472, align 8
  store %"char[]" { ptr @.file.54, i64 8 }, ptr %indirectarg473, align 8
  store %"char[]" { ptr @.func.37, i64 7 }, ptr %indirectarg474, align 8
  %791 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %791(ptr align 8 %indirectarg472, ptr align 8 %indirectarg473, ptr align 8 %indirectarg474, i32 59) #5, !dbg !505
  unreachable, !dbg !505

panic476:                                         ; preds = %checkok475
  store i64 2, ptr %taddr477, align 8
  %792 = insertvalue %any undef, ptr %taddr477, 0
  %793 = insertvalue %any %792, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %254, ptr %taddr478, align 8
  %794 = insertvalue %any undef, ptr %taddr478, 0
  %795 = insertvalue %any %794, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg479, align 8
  store %"char[]" { ptr @.file.54, i64 8 }, ptr %indirectarg480, align 8
  store %"char[]" { ptr @.func.37, i64 7 }, ptr %indirectarg481, align 8
  store %any %793, ptr %varargslots482, align 16
  %ptradd483 = getelementptr inbounds i8, ptr %varargslots482, i64 16
  store %any %795, ptr %ptradd483, align 16
  %796 = insertvalue %"any[]" undef, ptr %varargslots482, 0
  %"$$temp484" = insertvalue %"any[]" %796, i64 2, 1
  store %"any[]" %"$$temp484", ptr %indirectarg485, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg479, ptr align 8 %indirectarg480, ptr align 8 %indirectarg481, i32 59, ptr align 8 %indirectarg485) #5, !dbg !505
  unreachable, !dbg !505

panic507:                                         ; preds = %switch.case504
  store %"char[]" { ptr @.panic_msg.62, i64 53 }, ptr %indirectarg508, align 8
  store %"char[]" { ptr @.file.54, i64 8 }, ptr %indirectarg509, align 8
  store %"char[]" { ptr @.func.37, i64 7 }, ptr %indirectarg510, align 8
  %797 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %797(ptr align 8 %indirectarg508, ptr align 8 %indirectarg509, ptr align 8 %indirectarg510, i32 63) #5, !dbg !511
  unreachable, !dbg !511

panic512:                                         ; preds = %checkok511
  store i64 4, ptr %taddr513, align 8
  %798 = insertvalue %any undef, ptr %taddr513, 0
  %799 = insertvalue %any %798, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %270, ptr %taddr514, align 8
  %800 = insertvalue %any undef, ptr %taddr514, 0
  %801 = insertvalue %any %800, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg515, align 8
  store %"char[]" { ptr @.file.54, i64 8 }, ptr %indirectarg516, align 8
  store %"char[]" { ptr @.func.37, i64 7 }, ptr %indirectarg517, align 8
  store %any %799, ptr %varargslots518, align 16
  %ptradd519 = getelementptr inbounds i8, ptr %varargslots518, i64 16
  store %any %801, ptr %ptradd519, align 16
  %802 = insertvalue %"any[]" undef, ptr %varargslots518, 0
  %"$$temp520" = insertvalue %"any[]" %802, i64 2, 1
  store %"any[]" %"$$temp520", ptr %indirectarg521, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg515, ptr align 8 %indirectarg516, ptr align 8 %indirectarg517, i32 63, ptr align 8 %indirectarg521) #5, !dbg !511
  unreachable, !dbg !511

panic543:                                         ; preds = %switch.case540
  store %"char[]" { ptr @.panic_msg.63, i64 54 }, ptr %indirectarg544, align 8
  store %"char[]" { ptr @.file.54, i64 8 }, ptr %indirectarg545, align 8
  store %"char[]" { ptr @.func.37, i64 7 }, ptr %indirectarg546, align 8
  %803 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %803(ptr align 8 %indirectarg544, ptr align 8 %indirectarg545, ptr align 8 %indirectarg546, i32 67) #5, !dbg !517
  unreachable, !dbg !517

panic548:                                         ; preds = %checkok547
  store i64 8, ptr %taddr549, align 8
  %804 = insertvalue %any undef, ptr %taddr549, 0
  %805 = insertvalue %any %804, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %286, ptr %taddr550, align 8
  %806 = insertvalue %any undef, ptr %taddr550, 0
  %807 = insertvalue %any %806, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg551, align 8
  store %"char[]" { ptr @.file.54, i64 8 }, ptr %indirectarg552, align 8
  store %"char[]" { ptr @.func.37, i64 7 }, ptr %indirectarg553, align 8
  store %any %805, ptr %varargslots554, align 16
  %ptradd555 = getelementptr inbounds i8, ptr %varargslots554, i64 16
  store %any %807, ptr %ptradd555, align 16
  %808 = insertvalue %"any[]" undef, ptr %varargslots554, 0
  %"$$temp556" = insertvalue %"any[]" %808, i64 2, 1
  store %"any[]" %"$$temp556", ptr %indirectarg557, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg551, ptr align 8 %indirectarg552, ptr align 8 %indirectarg553, i32 67, ptr align 8 %indirectarg557) #5, !dbg !517
  unreachable, !dbg !517

panic576:                                         ; preds = %switch.case573
  store %"char[]" { ptr @.panic_msg.64, i64 56 }, ptr %indirectarg577, align 8
  store %"char[]" { ptr @.file.54, i64 8 }, ptr %indirectarg578, align 8
  store %"char[]" { ptr @.func.37, i64 7 }, ptr %indirectarg579, align 8
  %809 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %809(ptr align 8 %indirectarg577, ptr align 8 %indirectarg578, ptr align 8 %indirectarg579, i32 71) #5, !dbg !524
  unreachable, !dbg !524

panic581:                                         ; preds = %checkok580
  store i64 16, ptr %taddr582, align 8
  %810 = insertvalue %any undef, ptr %taddr582, 0
  %811 = insertvalue %any %810, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %302, ptr %taddr583, align 8
  %812 = insertvalue %any undef, ptr %taddr583, 0
  %813 = insertvalue %any %812, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg584, align 8
  store %"char[]" { ptr @.file.54, i64 8 }, ptr %indirectarg585, align 8
  store %"char[]" { ptr @.func.37, i64 7 }, ptr %indirectarg586, align 8
  store %any %811, ptr %varargslots587, align 16
  %ptradd588 = getelementptr inbounds i8, ptr %varargslots587, i64 16
  store %any %813, ptr %ptradd588, align 16
  %814 = insertvalue %"any[]" undef, ptr %varargslots587, 0
  %"$$temp589" = insertvalue %"any[]" %814, i64 2, 1
  store %"any[]" %"$$temp589", ptr %indirectarg590, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg584, ptr align 8 %indirectarg585, ptr align 8 %indirectarg586, i32 71, ptr align 8 %indirectarg590) #5, !dbg !524
  unreachable, !dbg !524

panic650:                                         ; preds = %check_type_ok646
  store i64 %328, ptr %taddr651, align 8
  %815 = insertvalue %any undef, ptr %taddr651, 0
  %816 = insertvalue %any %815, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %330, ptr %taddr652, align 8
  %817 = insertvalue %any undef, ptr %taddr652, 0
  %818 = insertvalue %any %817, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.71, i64 59 }, ptr %indirectarg653, align 8
  store %"char[]" { ptr @.file.22, i64 12 }, ptr %indirectarg654, align 8
  store %"char[]" { ptr @.func.37, i64 7 }, ptr %indirectarg655, align 8
  store %any %816, ptr %varargslots656, align 16
  %ptradd657 = getelementptr inbounds i8, ptr %varargslots656, i64 16
  store %any %818, ptr %ptradd657, align 16
  %819 = insertvalue %"any[]" undef, ptr %varargslots656, 0
  %"$$temp658" = insertvalue %"any[]" %819, i64 2, 1
  store %"any[]" %"$$temp658", ptr %indirectarg659, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg653, ptr align 8 %indirectarg654, ptr align 8 %indirectarg655, i32 190, ptr align 8 %indirectarg659) #5, !dbg !532
  unreachable, !dbg !532

panic661:                                         ; preds = %checkok660
  store i64 8, ptr %taddr662, align 8
  %820 = insertvalue %any undef, ptr %taddr662, 0
  %821 = insertvalue %any %820, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %333, ptr %taddr663, align 8
  %822 = insertvalue %any undef, ptr %taddr663, 0
  %823 = insertvalue %any %822, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg664, align 8
  store %"char[]" { ptr @.file.22, i64 12 }, ptr %indirectarg665, align 8
  store %"char[]" { ptr @.func.37, i64 7 }, ptr %indirectarg666, align 8
  store %any %821, ptr %varargslots667, align 16
  %ptradd668 = getelementptr inbounds i8, ptr %varargslots667, i64 16
  store %any %823, ptr %ptradd668, align 16
  %824 = insertvalue %"any[]" undef, ptr %varargslots667, 0
  %"$$temp669" = insertvalue %"any[]" %824, i64 2, 1
  store %"any[]" %"$$temp669", ptr %indirectarg670, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg664, ptr align 8 %indirectarg665, ptr align 8 %indirectarg666, i32 190, ptr align 8 %indirectarg670) #5, !dbg !532
  unreachable, !dbg !532

panic743:                                         ; preds = %if.then740
  store %"char[]" { ptr @.panic_msg.76, i64 53 }, ptr %indirectarg744, align 8
  store %"char[]" { ptr @.file.22, i64 12 }, ptr %indirectarg745, align 8
  store %"char[]" { ptr @.func.37, i64 7 }, ptr %indirectarg746, align 8
  %825 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %825(ptr align 8 %indirectarg744, ptr align 8 %indirectarg745, ptr align 8 %indirectarg746, i32 211) #5, !dbg !557
  unreachable, !dbg !557

panic748:                                         ; preds = %checkok747
  store i64 8, ptr %taddr749, align 8
  %826 = insertvalue %any undef, ptr %taddr749, 0
  %827 = insertvalue %any %826, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %387, ptr %taddr750, align 8
  %828 = insertvalue %any undef, ptr %taddr750, 0
  %829 = insertvalue %any %828, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg751, align 8
  store %"char[]" { ptr @.file.22, i64 12 }, ptr %indirectarg752, align 8
  store %"char[]" { ptr @.func.37, i64 7 }, ptr %indirectarg753, align 8
  store %any %827, ptr %varargslots754, align 16
  %ptradd755 = getelementptr inbounds i8, ptr %varargslots754, i64 16
  store %any %829, ptr %ptradd755, align 16
  %830 = insertvalue %"any[]" undef, ptr %varargslots754, 0
  %"$$temp756" = insertvalue %"any[]" %830, i64 2, 1
  store %"any[]" %"$$temp756", ptr %indirectarg757, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg751, ptr align 8 %indirectarg752, ptr align 8 %indirectarg753, i32 211, ptr align 8 %indirectarg757) #5, !dbg !557
  unreachable, !dbg !557

panic771:                                         ; preds = %if.then768
  store %"char[]" { ptr @.panic_msg.77, i64 54 }, ptr %indirectarg772, align 8
  store %"char[]" { ptr @.file.22, i64 12 }, ptr %indirectarg773, align 8
  store %"char[]" { ptr @.func.37, i64 7 }, ptr %indirectarg774, align 8
  %831 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %831(ptr align 8 %indirectarg772, ptr align 8 %indirectarg773, ptr align 8 %indirectarg774, i32 215) #5, !dbg !560
  unreachable, !dbg !560

panic776:                                         ; preds = %checkok775
  store i64 8, ptr %taddr777, align 8
  %832 = insertvalue %any undef, ptr %taddr777, 0
  %833 = insertvalue %any %832, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %399, ptr %taddr778, align 8
  %834 = insertvalue %any undef, ptr %taddr778, 0
  %835 = insertvalue %any %834, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg779, align 8
  store %"char[]" { ptr @.file.22, i64 12 }, ptr %indirectarg780, align 8
  store %"char[]" { ptr @.func.37, i64 7 }, ptr %indirectarg781, align 8
  store %any %833, ptr %varargslots782, align 16
  %ptradd783 = getelementptr inbounds i8, ptr %varargslots782, i64 16
  store %any %835, ptr %ptradd783, align 16
  %836 = insertvalue %"any[]" undef, ptr %varargslots782, 0
  %"$$temp784" = insertvalue %"any[]" %836, i64 2, 1
  store %"any[]" %"$$temp784", ptr %indirectarg785, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg779, ptr align 8 %indirectarg780, ptr align 8 %indirectarg781, i32 215, ptr align 8 %indirectarg785) #5, !dbg !560
  unreachable, !dbg !560

panic789:                                         ; preds = %cond.lhs
  store %"char[]" { ptr @.panic_msg.77, i64 54 }, ptr %indirectarg790, align 8
  store %"char[]" { ptr @.file.22, i64 12 }, ptr %indirectarg791, align 8
  store %"char[]" { ptr @.func.37, i64 7 }, ptr %indirectarg792, align 8
  %837 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %837(ptr align 8 %indirectarg790, ptr align 8 %indirectarg791, ptr align 8 %indirectarg792, i32 215) #5, !dbg !560
  unreachable, !dbg !560

panic794:                                         ; preds = %checkok793
  store i64 8, ptr %taddr795, align 8
  %838 = insertvalue %any undef, ptr %taddr795, 0
  %839 = insertvalue %any %838, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %406, ptr %taddr796, align 8
  %840 = insertvalue %any undef, ptr %taddr796, 0
  %841 = insertvalue %any %840, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg797, align 8
  store %"char[]" { ptr @.file.22, i64 12 }, ptr %indirectarg798, align 8
  store %"char[]" { ptr @.func.37, i64 7 }, ptr %indirectarg799, align 8
  store %any %839, ptr %varargslots800, align 16
  %ptradd801 = getelementptr inbounds i8, ptr %varargslots800, i64 16
  store %any %841, ptr %ptradd801, align 16
  %842 = insertvalue %"any[]" undef, ptr %varargslots800, 0
  %"$$temp802" = insertvalue %"any[]" %842, i64 2, 1
  store %"any[]" %"$$temp802", ptr %indirectarg803, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg797, ptr align 8 %indirectarg798, ptr align 8 %indirectarg799, i32 215, ptr align 8 %indirectarg803) #5, !dbg !560
  unreachable, !dbg !560

panic818:                                         ; preds = %if.then815
  store %"char[]" { ptr @.panic_msg.79, i64 54 }, ptr %indirectarg819, align 8
  store %"char[]" { ptr @.file.22, i64 12 }, ptr %indirectarg820, align 8
  store %"char[]" { ptr @.func.37, i64 7 }, ptr %indirectarg821, align 8
  %843 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %843(ptr align 8 %indirectarg819, ptr align 8 %indirectarg820, ptr align 8 %indirectarg821, i32 219) #5, !dbg !563
  unreachable, !dbg !563

panic823:                                         ; preds = %checkok822
  store i64 8, ptr %taddr824, align 8
  %844 = insertvalue %any undef, ptr %taddr824, 0
  %845 = insertvalue %any %844, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %420, ptr %taddr825, align 8
  %846 = insertvalue %any undef, ptr %taddr825, 0
  %847 = insertvalue %any %846, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg826, align 8
  store %"char[]" { ptr @.file.22, i64 12 }, ptr %indirectarg827, align 8
  store %"char[]" { ptr @.func.37, i64 7 }, ptr %indirectarg828, align 8
  store %any %845, ptr %varargslots829, align 16
  %ptradd830 = getelementptr inbounds i8, ptr %varargslots829, i64 16
  store %any %847, ptr %ptradd830, align 16
  %848 = insertvalue %"any[]" undef, ptr %varargslots829, 0
  %"$$temp831" = insertvalue %"any[]" %848, i64 2, 1
  store %"any[]" %"$$temp831", ptr %indirectarg832, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg826, ptr align 8 %indirectarg827, ptr align 8 %indirectarg828, i32 219, ptr align 8 %indirectarg832) #5, !dbg !563
  unreachable, !dbg !563

panic837:                                         ; preds = %cond.lhs835
  store %"char[]" { ptr @.panic_msg.79, i64 54 }, ptr %indirectarg838, align 8
  store %"char[]" { ptr @.file.22, i64 12 }, ptr %indirectarg839, align 8
  store %"char[]" { ptr @.func.37, i64 7 }, ptr %indirectarg840, align 8
  %849 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %849(ptr align 8 %indirectarg838, ptr align 8 %indirectarg839, ptr align 8 %indirectarg840, i32 219) #5, !dbg !563
  unreachable, !dbg !563

panic842:                                         ; preds = %checkok841
  store i64 8, ptr %taddr843, align 8
  %850 = insertvalue %any undef, ptr %taddr843, 0
  %851 = insertvalue %any %850, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %427, ptr %taddr844, align 8
  %852 = insertvalue %any undef, ptr %taddr844, 0
  %853 = insertvalue %any %852, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg845, align 8
  store %"char[]" { ptr @.file.22, i64 12 }, ptr %indirectarg846, align 8
  store %"char[]" { ptr @.func.37, i64 7 }, ptr %indirectarg847, align 8
  store %any %851, ptr %varargslots848, align 16
  %ptradd849 = getelementptr inbounds i8, ptr %varargslots848, i64 16
  store %any %853, ptr %ptradd849, align 16
  %854 = insertvalue %"any[]" undef, ptr %varargslots848, 0
  %"$$temp850" = insertvalue %"any[]" %854, i64 2, 1
  store %"any[]" %"$$temp850", ptr %indirectarg851, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg845, ptr align 8 %indirectarg846, ptr align 8 %indirectarg847, i32 219, ptr align 8 %indirectarg851) #5, !dbg !563
  unreachable, !dbg !563

panic874:                                         ; preds = %assert_ok872
  store %"char[]" { ptr @.panic_msg.2, i64 45 }, ptr %indirectarg875, align 8
  store %"char[]" { ptr @.file.14, i64 10 }, ptr %indirectarg876, align 8
  store %"char[]" { ptr @.func.37, i64 7 }, ptr %indirectarg877, align 8
  %855 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %855(ptr align 8 %indirectarg875, ptr align 8 %indirectarg876, ptr align 8 %indirectarg877, i32 268) #5, !dbg !569
  unreachable, !dbg !569

panic879:                                         ; preds = %checkok878
  store i64 8, ptr %taddr880, align 8
  %856 = insertvalue %any undef, ptr %taddr880, 0
  %857 = insertvalue %any %856, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %442, ptr %taddr881, align 8
  %858 = insertvalue %any undef, ptr %taddr881, 0
  %859 = insertvalue %any %858, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg882, align 8
  store %"char[]" { ptr @.file.14, i64 10 }, ptr %indirectarg883, align 8
  store %"char[]" { ptr @.func.37, i64 7 }, ptr %indirectarg884, align 8
  store %any %857, ptr %varargslots885, align 16
  %ptradd886 = getelementptr inbounds i8, ptr %varargslots885, i64 16
  store %any %859, ptr %ptradd886, align 16
  %860 = insertvalue %"any[]" undef, ptr %varargslots885, 0
  %"$$temp887" = insertvalue %"any[]" %860, i64 2, 1
  store %"any[]" %"$$temp887", ptr %indirectarg888, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg882, ptr align 8 %indirectarg883, ptr align 8 %indirectarg884, i32 268, ptr align 8 %indirectarg888) #5, !dbg !569
  unreachable, !dbg !569

panic891:                                         ; preds = %checkok889
  store %"char[]" { ptr @.panic_msg.2, i64 45 }, ptr %indirectarg892, align 8
  store %"char[]" { ptr @.file.14, i64 10 }, ptr %indirectarg893, align 8
  store %"char[]" { ptr @.func.37, i64 7 }, ptr %indirectarg894, align 8
  %861 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %861(ptr align 8 %indirectarg892, ptr align 8 %indirectarg893, ptr align 8 %indirectarg894, i32 268) #5, !dbg !569
  unreachable, !dbg !569

panic896:                                         ; preds = %checkok895
  store i64 8, ptr %taddr897, align 8
  %862 = insertvalue %any undef, ptr %taddr897, 0
  %863 = insertvalue %any %862, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %449, ptr %taddr898, align 8
  %864 = insertvalue %any undef, ptr %taddr898, 0
  %865 = insertvalue %any %864, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg899, align 8
  store %"char[]" { ptr @.file.14, i64 10 }, ptr %indirectarg900, align 8
  store %"char[]" { ptr @.func.37, i64 7 }, ptr %indirectarg901, align 8
  store %any %863, ptr %varargslots902, align 16
  %ptradd903 = getelementptr inbounds i8, ptr %varargslots902, i64 16
  store %any %865, ptr %ptradd903, align 16
  %866 = insertvalue %"any[]" undef, ptr %varargslots902, 0
  %"$$temp904" = insertvalue %"any[]" %866, i64 2, 1
  store %"any[]" %"$$temp904", ptr %indirectarg905, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg899, ptr align 8 %indirectarg900, ptr align 8 %indirectarg901, i32 268, ptr align 8 %indirectarg905) #5, !dbg !569
  unreachable, !dbg !569

panic992:                                         ; preds = %if.then990
  store %"char[]" { ptr @.panic_msg.81, i64 48 }, ptr %indirectarg993, align 8
  store %"char[]" { ptr @.file.22, i64 12 }, ptr %indirectarg994, align 8
  store %"char[]" { ptr @.func.37, i64 7 }, ptr %indirectarg995, align 8
  %867 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %867(ptr align 8 %indirectarg993, ptr align 8 %indirectarg994, ptr align 8 %indirectarg995, i32 227) #5, !dbg !579
  unreachable, !dbg !579

panic997:                                         ; preds = %checkok996
  store i64 8, ptr %taddr998, align 8
  %868 = insertvalue %any undef, ptr %taddr998, 0
  %869 = insertvalue %any %868, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %469, ptr %taddr999, align 8
  %870 = insertvalue %any undef, ptr %taddr999, 0
  %871 = insertvalue %any %870, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg1000, align 8
  store %"char[]" { ptr @.file.22, i64 12 }, ptr %indirectarg1001, align 8
  store %"char[]" { ptr @.func.37, i64 7 }, ptr %indirectarg1002, align 8
  store %any %869, ptr %varargslots1003, align 16
  %ptradd1004 = getelementptr inbounds i8, ptr %varargslots1003, i64 16
  store %any %871, ptr %ptradd1004, align 16
  %872 = insertvalue %"any[]" undef, ptr %varargslots1003, 0
  %"$$temp1005" = insertvalue %"any[]" %872, i64 2, 1
  store %"any[]" %"$$temp1005", ptr %indirectarg1006, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1000, ptr align 8 %indirectarg1001, ptr align 8 %indirectarg1002, i32 227, ptr align 8 %indirectarg1006) #5, !dbg !579
  unreachable, !dbg !579

panic1353:                                        ; preds = %if.exit1337
  store %"char[]" { ptr @.panic_msg.88, i64 45 }, ptr %indirectarg1354, align 8
  store %"char[]" { ptr @.file.22, i64 12 }, ptr %indirectarg1355, align 8
  store %"char[]" { ptr @.func.37, i64 7 }, ptr %indirectarg1356, align 8
  %873 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %873(ptr align 8 %indirectarg1354, ptr align 8 %indirectarg1355, ptr align 8 %indirectarg1356, i32 307) #5, !dbg !706
  unreachable, !dbg !706

panic1358:                                        ; preds = %checkok1357
  store i64 8, ptr %taddr1359, align 8
  %874 = insertvalue %any undef, ptr %taddr1359, 0
  %875 = insertvalue %any %874, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %667, ptr %taddr1360, align 8
  %876 = insertvalue %any undef, ptr %taddr1360, 0
  %877 = insertvalue %any %876, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg1361, align 8
  store %"char[]" { ptr @.file.22, i64 12 }, ptr %indirectarg1362, align 8
  store %"char[]" { ptr @.func.37, i64 7 }, ptr %indirectarg1363, align 8
  store %any %875, ptr %varargslots1364, align 16
  %ptradd1365 = getelementptr inbounds i8, ptr %varargslots1364, i64 16
  store %any %877, ptr %ptradd1365, align 16
  %878 = insertvalue %"any[]" undef, ptr %varargslots1364, 0
  %"$$temp1366" = insertvalue %"any[]" %878, i64 2, 1
  store %"any[]" %"$$temp1366", ptr %indirectarg1367, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1361, ptr align 8 %indirectarg1362, ptr align 8 %indirectarg1363, i32 307, ptr align 8 %indirectarg1367) #5, !dbg !706
  unreachable, !dbg !706

panic1370:                                        ; preds = %checkok1368
  store %"char[]" { ptr @.panic_msg.88, i64 45 }, ptr %indirectarg1371, align 8
  store %"char[]" { ptr @.file.22, i64 12 }, ptr %indirectarg1372, align 8
  store %"char[]" { ptr @.func.37, i64 7 }, ptr %indirectarg1373, align 8
  %879 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %879(ptr align 8 %indirectarg1371, ptr align 8 %indirectarg1372, ptr align 8 %indirectarg1373, i32 308) #5, !dbg !708
  unreachable, !dbg !708

panic1375:                                        ; preds = %checkok1374
  store i64 8, ptr %taddr1376, align 8
  %880 = insertvalue %any undef, ptr %taddr1376, 0
  %881 = insertvalue %any %880, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %674, ptr %taddr1377, align 8
  %882 = insertvalue %any undef, ptr %taddr1377, 0
  %883 = insertvalue %any %882, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg1378, align 8
  store %"char[]" { ptr @.file.22, i64 12 }, ptr %indirectarg1379, align 8
  store %"char[]" { ptr @.func.37, i64 7 }, ptr %indirectarg1380, align 8
  store %any %881, ptr %varargslots1381, align 16
  %ptradd1382 = getelementptr inbounds i8, ptr %varargslots1381, i64 16
  store %any %883, ptr %ptradd1382, align 16
  %884 = insertvalue %"any[]" undef, ptr %varargslots1381, 0
  %"$$temp1383" = insertvalue %"any[]" %884, i64 2, 1
  store %"any[]" %"$$temp1383", ptr %indirectarg1384, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1378, ptr align 8 %indirectarg1379, ptr align 8 %indirectarg1380, i32 308, ptr align 8 %indirectarg1384) #5, !dbg !708
  unreachable, !dbg !708
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.Formatter.vprintf(ptr %0, ptr %1, ptr align 8 %2, ptr align 8 %3) #0 comdat !dbg !742 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %total_len = alloca i64, align 8
  %format_len = alloca i64, align 8
  %variant_index = alloca i64, align 8
  %i = alloca i64, align 8
  %c = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr9 = alloca i64, align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg14 = alloca %"any[]", align 8
  %error_var = alloca i64, align 8
  %retparam = alloca i64, align 8
  %reterr = alloca i64, align 8
  %f = alloca ptr, align 8
  %retparam22 = alloca i64, align 8
  %indirectarg23 = alloca %"char[]", align 8
  %taddr30 = alloca i64, align 8
  %taddr31 = alloca i64, align 8
  %indirectarg32 = alloca %"char[]", align 8
  %indirectarg33 = alloca %"char[]", align 8
  %indirectarg34 = alloca %"char[]", align 8
  %varargslots35 = alloca [2 x %any], align 16
  %indirectarg38 = alloca %"any[]", align 8
  %error_var42 = alloca i64, align 8
  %retparam43 = alloca i64, align 8
  %switch = alloca i8, align 1
  %reterr65 = alloca i64, align 8
  %f66 = alloca ptr, align 8
  %retparam67 = alloca i64, align 8
  %indirectarg68 = alloca %"char[]", align 8
  %taddr76 = alloca i64, align 8
  %taddr77 = alloca i64, align 8
  %indirectarg78 = alloca %"char[]", align 8
  %indirectarg79 = alloca %"char[]", align 8
  %indirectarg80 = alloca %"char[]", align 8
  %varargslots81 = alloca [2 x %any], align 16
  %indirectarg84 = alloca %"any[]", align 8
  %w = alloca i32, align 4
  %w.f = alloca i64, align 8
  %retparam89 = alloca i32, align 4
  %temp_err = alloca i64, align 8
  %reterr97 = alloca i64, align 8
  %f98 = alloca ptr, align 8
  %retparam99 = alloca i64, align 8
  %indirectarg100 = alloca %"char[]", align 8
  %taddr108 = alloca i64, align 8
  %taddr109 = alloca i64, align 8
  %indirectarg110 = alloca %"char[]", align 8
  %indirectarg111 = alloca %"char[]", align 8
  %indirectarg112 = alloca %"char[]", align 8
  %varargslots113 = alloca [2 x %any], align 16
  %indirectarg116 = alloca %"any[]", align 8
  %reterr133 = alloca i64, align 8
  %f134 = alloca ptr, align 8
  %retparam135 = alloca i64, align 8
  %indirectarg136 = alloca %"char[]", align 8
  %prec = alloca i32, align 4
  %prec.f = alloca i64, align 8
  %retparam143 = alloca i32, align 4
  %temp_err148 = alloca i64, align 8
  %reterr157 = alloca i64, align 8
  %f158 = alloca ptr, align 8
  %retparam159 = alloca i64, align 8
  %indirectarg160 = alloca %"char[]", align 8
  %taddr171 = alloca i64, align 8
  %taddr172 = alloca i64, align 8
  %indirectarg173 = alloca %"char[]", align 8
  %indirectarg174 = alloca %"char[]", align 8
  %indirectarg175 = alloca %"char[]", align 8
  %varargslots176 = alloca [2 x %any], align 16
  %indirectarg179 = alloca %"any[]", align 8
  %base = alloca i32, align 4
  %self186 = alloca ptr, align 8
  %f187 = alloca i64, align 8
  %blockret = alloca i64, align 8
  %indirectarg189 = alloca %"char[]", align 8
  %indirectarg190 = alloca %"char[]", align 8
  %indirectarg191 = alloca %"char[]", align 8
  %error_var201 = alloca i64, align 8
  %retparam202 = alloca i64, align 8
  %indirectarg203 = alloca %"char[]", align 8
  %current = alloca %any, align 8
  %taddr215 = alloca i64, align 8
  %taddr216 = alloca i64, align 8
  %indirectarg217 = alloca %"char[]", align 8
  %indirectarg218 = alloca %"char[]", align 8
  %indirectarg219 = alloca %"char[]", align 8
  %varargslots220 = alloca [2 x %any], align 16
  %indirectarg223 = alloca %"any[]", align 8
  %taddr226 = alloca i64, align 8
  %taddr227 = alloca i64, align 8
  %indirectarg228 = alloca %"char[]", align 8
  %indirectarg229 = alloca %"char[]", align 8
  %indirectarg230 = alloca %"char[]", align 8
  %varargslots231 = alloca [2 x %any], align 16
  %indirectarg234 = alloca %"any[]", align 8
  %switch236 = alloca i8, align 1
  %error_var252 = alloca i64, align 8
  %f253 = alloca ptr, align 8
  %len = alloca i64, align 8
  %len.f = alloca i64, align 8
  %retparam255 = alloca double, align 8
  %indirectarg256 = alloca %any, align 8
  %retparam260 = alloca i64, align 8
  %err = alloca i64, align 8
  %switch273 = alloca i64, align 8
  %self278 = alloca ptr, align 8
  %f279 = alloca i64, align 8
  %blockret280 = alloca i64, align 8
  %indirectarg283 = alloca %"char[]", align 8
  %indirectarg284 = alloca %"char[]", align 8
  %indirectarg285 = alloca %"char[]", align 8
  %self299 = alloca ptr, align 8
  %f300 = alloca i64, align 8
  %blockret301 = alloca i64, align 8
  %indirectarg304 = alloca %"char[]", align 8
  %indirectarg305 = alloca %"char[]", align 8
  %indirectarg306 = alloca %"char[]", align 8
  %error_var318 = alloca i64, align 8
  %retparam319 = alloca i64, align 8
  %indirectarg320 = alloca %"char[]", align 8
  %error_var334 = alloca i64, align 8
  %f335 = alloca ptr, align 8
  %len337 = alloca i64, align 8
  %len.f338 = alloca i64, align 8
  %retparam339 = alloca double, align 8
  %indirectarg340 = alloca %any, align 8
  %retparam344 = alloca i64, align 8
  %err349 = alloca i64, align 8
  %switch358 = alloca i64, align 8
  %self364 = alloca ptr, align 8
  %f365 = alloca i64, align 8
  %blockret366 = alloca i64, align 8
  %indirectarg369 = alloca %"char[]", align 8
  %indirectarg370 = alloca %"char[]", align 8
  %indirectarg371 = alloca %"char[]", align 8
  %self385 = alloca ptr, align 8
  %f386 = alloca i64, align 8
  %blockret387 = alloca i64, align 8
  %indirectarg390 = alloca %"char[]", align 8
  %indirectarg391 = alloca %"char[]", align 8
  %indirectarg392 = alloca %"char[]", align 8
  %error_var404 = alloca i64, align 8
  %retparam405 = alloca i64, align 8
  %indirectarg406 = alloca %"char[]", align 8
  %error_var420 = alloca i64, align 8
  %f421 = alloca ptr, align 8
  %len423 = alloca i64, align 8
  %len.f424 = alloca i64, align 8
  %retparam425 = alloca double, align 8
  %indirectarg426 = alloca %any, align 8
  %retparam430 = alloca i64, align 8
  %err435 = alloca i64, align 8
  %switch444 = alloca i64, align 8
  %self450 = alloca ptr, align 8
  %f451 = alloca i64, align 8
  %blockret452 = alloca i64, align 8
  %indirectarg455 = alloca %"char[]", align 8
  %indirectarg456 = alloca %"char[]", align 8
  %indirectarg457 = alloca %"char[]", align 8
  %self471 = alloca ptr, align 8
  %f472 = alloca i64, align 8
  %blockret473 = alloca i64, align 8
  %indirectarg476 = alloca %"char[]", align 8
  %indirectarg477 = alloca %"char[]", align 8
  %indirectarg478 = alloca %"char[]", align 8
  %error_var490 = alloca i64, align 8
  %retparam491 = alloca i64, align 8
  %indirectarg492 = alloca %"char[]", align 8
  %error_var506 = alloca i64, align 8
  %f507 = alloca ptr, align 8
  %len509 = alloca i64, align 8
  %len.f510 = alloca i64, align 8
  %retparam511 = alloca double, align 8
  %indirectarg512 = alloca %any, align 8
  %retparam516 = alloca i64, align 8
  %err521 = alloca i64, align 8
  %switch530 = alloca i64, align 8
  %self536 = alloca ptr, align 8
  %f537 = alloca i64, align 8
  %blockret538 = alloca i64, align 8
  %indirectarg541 = alloca %"char[]", align 8
  %indirectarg542 = alloca %"char[]", align 8
  %indirectarg543 = alloca %"char[]", align 8
  %self557 = alloca ptr, align 8
  %f558 = alloca i64, align 8
  %blockret559 = alloca i64, align 8
  %indirectarg562 = alloca %"char[]", align 8
  %indirectarg563 = alloca %"char[]", align 8
  %indirectarg564 = alloca %"char[]", align 8
  %error_var576 = alloca i64, align 8
  %retparam577 = alloca i64, align 8
  %indirectarg578 = alloca %"char[]", align 8
  %error_var590 = alloca i64, align 8
  %retparam591 = alloca i64, align 8
  %indirectarg592 = alloca %any, align 8
  %out = alloca %"char[]", align 8
  %switch603 = alloca i64, align 8
  %indirectarg616 = alloca %"char[]", align 8
  %indirectarg617 = alloca %"char[]", align 8
  %indirectarg618 = alloca %"char[]", align 8
  %taddr621 = alloca i64, align 8
  %taddr622 = alloca i64, align 8
  %indirectarg623 = alloca %"char[]", align 8
  %indirectarg624 = alloca %"char[]", align 8
  %indirectarg625 = alloca %"char[]", align 8
  %varargslots626 = alloca [2 x %any], align 16
  %indirectarg629 = alloca %"any[]", align 8
  %indirectarg653 = alloca %"char[]", align 8
  %indirectarg654 = alloca %"char[]", align 8
  %indirectarg655 = alloca %"char[]", align 8
  %indirectarg677 = alloca %"char[]", align 8
  %indirectarg678 = alloca %"char[]", align 8
  %indirectarg679 = alloca %"char[]", align 8
  %taddr687 = alloca ptr, align 8
  %taddr694 = alloca i64, align 8
  %indirectarg695 = alloca %"char[]", align 8
  %indirectarg696 = alloca %"char[]", align 8
  %indirectarg697 = alloca %"char[]", align 8
  %varargslots698 = alloca [1 x %any], align 16
  %indirectarg700 = alloca %"any[]", align 8
  %indirectarg710 = alloca %"char[]", align 8
  %indirectarg711 = alloca %"char[]", align 8
  %indirectarg712 = alloca %"char[]", align 8
  %taddr715 = alloca i64, align 8
  %taddr716 = alloca i64, align 8
  %indirectarg717 = alloca %"char[]", align 8
  %indirectarg718 = alloca %"char[]", align 8
  %indirectarg719 = alloca %"char[]", align 8
  %varargslots720 = alloca [2 x %any], align 16
  %indirectarg723 = alloca %"any[]", align 8
  %indirectarg744 = alloca %"char[]", align 8
  %indirectarg745 = alloca %"char[]", align 8
  %indirectarg746 = alloca %"char[]", align 8
  %taddr758 = alloca i64, align 8
  %indirectarg759 = alloca %"char[]", align 8
  %indirectarg760 = alloca %"char[]", align 8
  %indirectarg761 = alloca %"char[]", align 8
  %varargslots762 = alloca [1 x %any], align 16
  %indirectarg764 = alloca %"any[]", align 8
  %error_var768 = alloca i64, align 8
  %retparam769 = alloca i64, align 8
  %indirectarg770 = alloca %"char[]", align 8
  %len780 = alloca i64, align 8
  %error_var781 = alloca i64, align 8
  %retparam785 = alloca i64, align 8
  %indirectarg786 = alloca %"char[]", align 8
  %error_var793 = alloca i64, align 8
  %retparam796 = alloca i64, align 8
  %error_var808 = alloca i64, align 8
  %retparam813 = alloca i64, align 8
  %error_var821 = alloca i64, align 8
  %retparam825 = alloca i64, align 8
  %indirectarg826 = alloca %"char[]", align 8
  %len838 = alloca i64, align 8
  %error_var839 = alloca i64, align 8
  %retparam840 = alloca i64, align 8
  %indirectarg841 = alloca %any, align 8
  %error_var848 = alloca i64, align 8
  %retparam852 = alloca i64, align 8
  %out_fn = alloca ptr, align 8
  %len866 = alloca i64, align 8
  %error_var867 = alloca i64, align 8
  %retparam868 = alloca i64, align 8
  %indirectarg869 = alloca %any, align 8
  %error_var876 = alloca i64, align 8
  %retparam880 = alloca i64, align 8
  %error_var888 = alloca i64, align 8
  %retparam889 = alloca i64, align 8
  %indirectarg890 = alloca %any, align 8
  %self901 = alloca ptr, align 8
  %f902 = alloca i64, align 8
  %blockret903 = alloca i64, align 8
  %indirectarg906 = alloca %"char[]", align 8
  %indirectarg907 = alloca %"char[]", align 8
  %indirectarg908 = alloca %"char[]", align 8
  %error_var920 = alloca i64, align 8
  %retparam921 = alloca i64, align 8
  %indirectarg922 = alloca %"char[]", align 8
  %is_neg = alloca i8, align 1
  %error_var941 = alloca i64, align 8
  %f942 = alloca ptr, align 8
  %len944 = alloca i64, align 8
  %len.f945 = alloca i64, align 8
  %retparam946 = alloca i128, align 16
  %indirectarg947 = alloca %any, align 8
  %retparam951 = alloca i64, align 8
  %indirectarg952 = alloca i128, align 16
  %err957 = alloca i64, align 8
  %switch966 = alloca i64, align 8
  %self972 = alloca ptr, align 8
  %f973 = alloca i64, align 8
  %blockret974 = alloca i64, align 8
  %indirectarg977 = alloca %"char[]", align 8
  %indirectarg978 = alloca %"char[]", align 8
  %indirectarg979 = alloca %"char[]", align 8
  %self993 = alloca ptr, align 8
  %f994 = alloca i64, align 8
  %blockret995 = alloca i64, align 8
  %indirectarg998 = alloca %"char[]", align 8
  %indirectarg999 = alloca %"char[]", align 8
  %indirectarg1000 = alloca %"char[]", align 8
  %error_var1012 = alloca i64, align 8
  %retparam1013 = alloca i64, align 8
  %indirectarg1014 = alloca %"char[]", align 8
  %reterr1034 = alloca i64, align 8
  %4 = icmp eq ptr %1, null, !dbg !743
  %5 = call i1 @llvm.expect.i1(i1 %4, i1 false), !dbg !743
  br i1 %5, label %panic, label %checkok, !dbg !743

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !744, !DIExpression(), !745)
    #dbg_declare(ptr %2, !746, !DIExpression(), !745)
    #dbg_declare(ptr %3, !747, !DIExpression(), !745)
  %6 = load ptr, ptr %self, align 8, !dbg !748
  %ptradd = getelementptr inbounds i8, ptr %6, i64 16, !dbg !748
  %ptradd3 = getelementptr inbounds i8, ptr %ptradd, i64 16, !dbg !748
  store i64 0, ptr %ptradd3, align 8, !dbg !748
  %7 = load ptr, ptr %self, align 8, !dbg !749
  %ptradd4 = getelementptr inbounds i8, ptr %7, i64 8, !dbg !749
  %8 = load ptr, ptr %ptradd4, align 8, !dbg !749
  %i2nb = icmp eq ptr %8, null, !dbg !749
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !749

if.then:                                          ; preds = %checkok
  %9 = load ptr, ptr %self, align 8, !dbg !750
  %ptradd5 = getelementptr inbounds i8, ptr %9, i64 8, !dbg !750
  store ptr @std.io.out_null_fn, ptr %ptradd5, align 8, !dbg !750
  br label %if.exit, !dbg !750

if.exit:                                          ; preds = %if.then, %checkok
    #dbg_declare(ptr %total_len, !752, !DIExpression(), !753)
  store i64 0, ptr %total_len, align 8, !dbg !753
    #dbg_declare(ptr %format_len, !754, !DIExpression(), !755)
  %ptradd6 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !755
  %10 = load i64, ptr %ptradd6, align 8, !dbg !755
  store i64 %10, ptr %format_len, align 8, !dbg !755
    #dbg_declare(ptr %variant_index, !756, !DIExpression(), !757)
  store i64 0, ptr %variant_index, align 8, !dbg !757
    #dbg_declare(ptr %i, !758, !DIExpression(), !760)
  store i64 0, ptr %i, align 8, !dbg !760
  br label %loop.cond, !dbg !760

loop.cond:                                        ; preds = %loop.inc, %if.exit
  %11 = load i64, ptr %i, align 8, !dbg !760
  %12 = load i64, ptr %format_len, align 8, !dbg !760
  %lt = icmp ult i64 %11, %12, !dbg !760
  br i1 %lt, label %loop.body, label %loop.exit1026, !dbg !760

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %c, !761, !DIExpression(), !763)
  %ptradd7 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !763
  %13 = load i64, ptr %ptradd7, align 8, !dbg !763
  %14 = load ptr, ptr %2, align 8, !dbg !763
  %15 = load i64, ptr %i, align 8, !dbg !763
  %ge = icmp uge i64 %15, %13, !dbg !763
  %16 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !763
  br i1 %16, label %panic8, label %checkok15, !dbg !763

checkok15:                                        ; preds = %loop.body
  %ptradd16 = getelementptr inbounds i8, ptr %14, i64 %15, !dbg !763
  %17 = load i8, ptr %ptradd16, align 1, !dbg !763
  store i8 %17, ptr %c, align 1, !dbg !763
  %18 = load i8, ptr %c, align 1, !dbg !764
  %neq = icmp ne i8 %18, 37, !dbg !764
  br i1 %neq, label %if.then17, label %if.exit18, !dbg !764

if.then17:                                        ; preds = %checkok15
  %19 = load i64, ptr %total_len, align 8, !dbg !765
  %20 = load ptr, ptr %self, align 8
  %21 = load i8, ptr %c, align 1
  %22 = call i64 @std.io.Formatter.out(ptr %retparam, ptr %20, i8 %21), !dbg !765
  %not_err = icmp eq i64 %22, 0, !dbg !765
  %23 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !765
  br i1 %23, label %after_check, label %assign_optional, !dbg !765

assign_optional:                                  ; preds = %if.then17
  store i64 %22, ptr %error_var, align 8, !dbg !765
  br label %guard_block, !dbg !765

after_check:                                      ; preds = %if.then17
  br label %noerr_block, !dbg !765

guard_block:                                      ; preds = %assign_optional
  %24 = load i64, ptr %error_var, align 8, !dbg !765
  ret i64 %24, !dbg !765

noerr_block:                                      ; preds = %after_check
  %25 = load i64, ptr %retparam, align 8, !dbg !765
  %add = add i64 %19, %25, !dbg !765
  store i64 %add, ptr %total_len, align 8, !dbg !765
  br label %loop.inc, !dbg !767

if.exit18:                                        ; preds = %checkok15
  %26 = load i64, ptr %i, align 8, !dbg !768
  %add19 = add i64 %26, 1, !dbg !768
  store i64 %add19, ptr %i, align 8, !dbg !768
  %27 = load i64, ptr %i, align 8, !dbg !769
  %28 = load i64, ptr %format_len, align 8, !dbg !769
  %ge20 = icmp uge i64 %27, %28, !dbg !769
  br i1 %ge20, label %if.then21, label %if.exit26, !dbg !769

if.then21:                                        ; preds = %if.exit18
  %29 = load ptr, ptr %self, align 8
  store ptr %29, ptr %f, align 8
  %30 = load ptr, ptr %f, align 8
  store %"char[]" { ptr @.str.95, i64 4 }, ptr %indirectarg23, align 8
  %31 = call i64 @std.io.Formatter.out_substr(ptr %retparam22, ptr %30, ptr align 8 %indirectarg23), !dbg !770
  store i64 ptrtoint (ptr @std.io.INVALID_FORMAT to i64), ptr %reterr, align 8, !dbg !772
  br label %err_retblock, !dbg !772

err_retblock:                                     ; preds = %if.then21
  %32 = load i64, ptr %reterr, align 8, !dbg !772
  ret i64 %32, !dbg !772

if.exit26:                                        ; preds = %if.exit18
  %ptradd27 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !773
  %33 = load i64, ptr %ptradd27, align 8, !dbg !773
  %34 = load ptr, ptr %2, align 8, !dbg !773
  %35 = load i64, ptr %i, align 8, !dbg !773
  %ge28 = icmp uge i64 %35, %33, !dbg !773
  %36 = call i1 @llvm.expect.i1(i1 %ge28, i1 false), !dbg !773
  br i1 %36, label %panic29, label %checkok39, !dbg !773

checkok39:                                        ; preds = %if.exit26
  %ptradd40 = getelementptr inbounds i8, ptr %34, i64 %35, !dbg !773
  %37 = load i8, ptr %ptradd40, align 1, !dbg !773
  store i8 %37, ptr %c, align 1, !dbg !773
  %38 = load i8, ptr %c, align 1, !dbg !774
  %eq = icmp eq i8 %38, 37, !dbg !774
  br i1 %eq, label %if.then41, label %if.exit50, !dbg !774

if.then41:                                        ; preds = %checkok39
  %39 = load i64, ptr %total_len, align 8, !dbg !775
  %40 = load ptr, ptr %self, align 8
  %41 = load i8, ptr %c, align 1
  %42 = call i64 @std.io.Formatter.out(ptr %retparam43, ptr %40, i8 %41), !dbg !775
  %not_err44 = icmp eq i64 %42, 0, !dbg !775
  %43 = call i1 @llvm.expect.i1(i1 %not_err44, i1 true), !dbg !775
  br i1 %43, label %after_check46, label %assign_optional45, !dbg !775

assign_optional45:                                ; preds = %if.then41
  store i64 %42, ptr %error_var42, align 8, !dbg !775
  br label %guard_block47, !dbg !775

after_check46:                                    ; preds = %if.then41
  br label %noerr_block48, !dbg !775

guard_block47:                                    ; preds = %assign_optional45
  %44 = load i64, ptr %error_var42, align 8, !dbg !775
  ret i64 %44, !dbg !775

noerr_block48:                                    ; preds = %after_check46
  %45 = load i64, ptr %retparam43, align 8, !dbg !775
  %add49 = add i64 %39, %45, !dbg !775
  store i64 %add49, ptr %total_len, align 8, !dbg !775
  br label %loop.inc, !dbg !777

if.exit50:                                        ; preds = %checkok39
  %46 = load ptr, ptr %self, align 8, !dbg !778
  %ptradd51 = getelementptr inbounds i8, ptr %46, i64 16, !dbg !778
  store i32 0, ptr %ptradd51, align 8, !dbg !778
  br label %loop.body52, !dbg !779

loop.body52:                                      ; preds = %checkok85, %if.exit50
  %47 = load i8, ptr %c, align 1
  store i8 %47, ptr %switch, align 1
  br label %switch.entry

switch.entry:                                     ; preds = %loop.body52
  %48 = load i8, ptr %switch, align 1
  switch i8 %48, label %switch.default [
    i8 48, label %switch.case
    i8 45, label %switch.case54
    i8 43, label %switch.case56
    i8 32, label %switch.case58
    i8 35, label %switch.case60
  ]

switch.case:                                      ; preds = %switch.entry
  %49 = load ptr, ptr %self, align 8, !dbg !780
  %ptradd53 = getelementptr inbounds i8, ptr %49, i64 16, !dbg !780
  %50 = load i32, ptr %ptradd53, align 8, !dbg !780
  %51 = and i32 %50, -2, !dbg !780
  %52 = or i32 %51, 1, !dbg !780
  store i32 %52, ptr %ptradd53, align 8, !dbg !780
  br label %switch.exit, !dbg !780

switch.case54:                                    ; preds = %switch.entry
  %53 = load ptr, ptr %self, align 8, !dbg !785
  %ptradd55 = getelementptr inbounds i8, ptr %53, i64 16, !dbg !785
  %54 = load i32, ptr %ptradd55, align 8, !dbg !785
  %55 = and i32 %54, -3, !dbg !785
  %56 = or i32 %55, 2, !dbg !785
  store i32 %56, ptr %ptradd55, align 8, !dbg !785
  br label %switch.exit, !dbg !785

switch.case56:                                    ; preds = %switch.entry
  %57 = load ptr, ptr %self, align 8, !dbg !787
  %ptradd57 = getelementptr inbounds i8, ptr %57, i64 16, !dbg !787
  %58 = load i32, ptr %ptradd57, align 8, !dbg !787
  %59 = and i32 %58, -5, !dbg !787
  %60 = or i32 %59, 4, !dbg !787
  store i32 %60, ptr %ptradd57, align 8, !dbg !787
  br label %switch.exit, !dbg !787

switch.case58:                                    ; preds = %switch.entry
  %61 = load ptr, ptr %self, align 8, !dbg !789
  %ptradd59 = getelementptr inbounds i8, ptr %61, i64 16, !dbg !789
  %62 = load i32, ptr %ptradd59, align 8, !dbg !789
  %63 = and i32 %62, -9, !dbg !789
  %64 = or i32 %63, 8, !dbg !789
  store i32 %64, ptr %ptradd59, align 8, !dbg !789
  br label %switch.exit, !dbg !789

switch.case60:                                    ; preds = %switch.entry
  %65 = load ptr, ptr %self, align 8, !dbg !791
  %ptradd61 = getelementptr inbounds i8, ptr %65, i64 16, !dbg !791
  %66 = load i32, ptr %ptradd61, align 8, !dbg !791
  %67 = and i32 %66, -17, !dbg !791
  %68 = or i32 %67, 16, !dbg !791
  store i32 %68, ptr %ptradd61, align 8, !dbg !791
  br label %switch.exit, !dbg !791

switch.default:                                   ; preds = %switch.entry
  br label %loop.exit, !dbg !793

switch.exit:                                      ; preds = %switch.case60, %switch.case58, %switch.case56, %switch.case54, %switch.case
  %69 = load i64, ptr %i, align 8, !dbg !795
  %add62 = add i64 %69, 1, !dbg !795
  store i64 %add62, ptr %i, align 8, !dbg !795
  %70 = load i64, ptr %format_len, align 8, !dbg !795
  %ge63 = icmp uge i64 %add62, %70, !dbg !795
  br i1 %ge63, label %if.then64, label %if.exit72, !dbg !795

if.then64:                                        ; preds = %switch.exit
  %71 = load ptr, ptr %self, align 8
  store ptr %71, ptr %f66, align 8
  %72 = load ptr, ptr %f66, align 8
  store %"char[]" { ptr @.str.96, i64 4 }, ptr %indirectarg68, align 8
  %73 = call i64 @std.io.Formatter.out_substr(ptr %retparam67, ptr %72, ptr align 8 %indirectarg68), !dbg !796
  store i64 ptrtoint (ptr @std.io.INVALID_FORMAT to i64), ptr %reterr65, align 8, !dbg !798
  br label %err_retblock71, !dbg !798

err_retblock71:                                   ; preds = %if.then64
  %74 = load i64, ptr %reterr65, align 8, !dbg !798
  ret i64 %74, !dbg !798

if.exit72:                                        ; preds = %switch.exit
  %ptradd73 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !799
  %75 = load i64, ptr %ptradd73, align 8, !dbg !799
  %76 = load ptr, ptr %2, align 8, !dbg !799
  %77 = load i64, ptr %i, align 8, !dbg !799
  %ge74 = icmp uge i64 %77, %75, !dbg !799
  %78 = call i1 @llvm.expect.i1(i1 %ge74, i1 false), !dbg !799
  br i1 %78, label %panic75, label %checkok85, !dbg !799

checkok85:                                        ; preds = %if.exit72
  %ptradd86 = getelementptr inbounds i8, ptr %76, i64 %77, !dbg !799
  %79 = load i8, ptr %ptradd86, align 1, !dbg !799
  store i8 %79, ptr %c, align 1, !dbg !799
  br label %loop.body52, !dbg !799

loop.exit:                                        ; preds = %switch.default
    #dbg_declare(ptr %w, !800, !DIExpression(), !801)
  %ptradd87 = getelementptr inbounds i8, ptr %3, i64 8, !dbg !801
  %ptradd88 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !801
  %80 = load ptr, ptr %3, align 8
  %81 = load i64, ptr %ptradd87, align 8
  %82 = load ptr, ptr %2, align 8
  %83 = load i64, ptr %ptradd88, align 8
  %84 = call i64 @std.io.printf_parse_format_field(ptr %retparam89, ptr %80, i64 %81, ptr %variant_index, ptr %82, i64 %83, ptr %i) #6, !dbg !801
  %not_err90 = icmp eq i64 %84, 0, !dbg !801
  %85 = call i1 @llvm.expect.i1(i1 %not_err90, i1 true), !dbg !801
  br i1 %85, label %after_check92, label %assign_optional91, !dbg !801

assign_optional91:                                ; preds = %loop.exit
  store i64 %84, ptr %w.f, align 8, !dbg !801
  br label %after_assign, !dbg !801

after_check92:                                    ; preds = %loop.exit
  %86 = load i32, ptr %retparam89, align 4, !dbg !801
  store i32 %86, ptr %w, align 4, !dbg !801
  store i64 0, ptr %w.f, align 8, !dbg !801
  br label %after_assign, !dbg !801

after_assign:                                     ; preds = %after_check92, %assign_optional91
  br label %testblock

testblock:                                        ; preds = %after_assign
  %optval = load i64, ptr %w.f, align 8, !dbg !802
  %not_err93 = icmp eq i64 %optval, 0, !dbg !802
  %87 = call i1 @llvm.expect.i1(i1 %not_err93, i1 true), !dbg !802
  br i1 %87, label %after_check95, label %assign_optional94, !dbg !802

assign_optional94:                                ; preds = %testblock
  store i64 %optval, ptr %temp_err, align 8, !dbg !802
  br label %end_block, !dbg !802

after_check95:                                    ; preds = %testblock
  store i64 0, ptr %temp_err, align 8, !dbg !802
  br label %end_block, !dbg !802

end_block:                                        ; preds = %after_check95, %assign_optional94
  %88 = load i64, ptr %temp_err, align 8, !dbg !802
  %i2b = icmp ne i64 %88, 0, !dbg !802
  br i1 %i2b, label %if.then96, label %if.exit104, !dbg !802

if.then96:                                        ; preds = %end_block
  %89 = load ptr, ptr %self, align 8
  store ptr %89, ptr %f98, align 8
  %90 = load ptr, ptr %f98, align 8
  store %"char[]" { ptr @.str.97, i64 4 }, ptr %indirectarg100, align 8
  %91 = call i64 @std.io.Formatter.out_substr(ptr %retparam99, ptr %90, ptr align 8 %indirectarg100), !dbg !803
  store i64 ptrtoint (ptr @std.io.INVALID_FORMAT to i64), ptr %reterr97, align 8, !dbg !805
  br label %err_retblock103, !dbg !805

err_retblock103:                                  ; preds = %if.then96
  %92 = load i64, ptr %reterr97, align 8, !dbg !805
  ret i64 %92, !dbg !805

if.exit104:                                       ; preds = %end_block
  %ptradd105 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !806
  %93 = load i64, ptr %ptradd105, align 8, !dbg !806
  %94 = load ptr, ptr %2, align 8, !dbg !806
  %95 = load i64, ptr %i, align 8, !dbg !806
  %ge106 = icmp uge i64 %95, %93, !dbg !806
  %96 = call i1 @llvm.expect.i1(i1 %ge106, i1 false), !dbg !806
  br i1 %96, label %panic107, label %checkok117, !dbg !806

checkok117:                                       ; preds = %if.exit104
  %ptradd118 = getelementptr inbounds i8, ptr %94, i64 %95, !dbg !806
  %97 = load i8, ptr %ptradd118, align 1, !dbg !806
  store i8 %97, ptr %c, align 1, !dbg !806
  %98 = load i32, ptr %w, align 4, !dbg !807
  %lt119 = icmp slt i32 %98, 0, !dbg !807
  br i1 %lt119, label %if.then120, label %if.exit122, !dbg !807

if.then120:                                       ; preds = %checkok117
  %99 = load ptr, ptr %self, align 8, !dbg !808
  %ptradd121 = getelementptr inbounds i8, ptr %99, i64 16, !dbg !808
  %100 = load i32, ptr %ptradd121, align 8, !dbg !808
  %101 = and i32 %100, -3, !dbg !808
  %102 = or i32 %101, 2, !dbg !808
  store i32 %102, ptr %ptradd121, align 8, !dbg !808
  %103 = load i32, ptr %w, align 4, !dbg !810
  %neg = sub i32 0, %103, !dbg !810
  store i32 %neg, ptr %w, align 4, !dbg !810
  store i64 0, ptr %w.f, align 8, !dbg !810
  br label %if.exit122, !dbg !810

if.exit122:                                       ; preds = %if.then120, %checkok117
  %104 = load i32, ptr %w, align 4, !dbg !811
  %105 = load ptr, ptr %self, align 8, !dbg !811
  %ptradd123 = getelementptr inbounds i8, ptr %105, i64 16, !dbg !811
  %ptradd124 = getelementptr inbounds i8, ptr %ptradd123, i64 4, !dbg !811
  store i32 %104, ptr %ptradd124, align 4, !dbg !811
  %106 = load ptr, ptr %self, align 8, !dbg !812
  %ptradd125 = getelementptr inbounds i8, ptr %106, i64 16, !dbg !812
  %ptradd126 = getelementptr inbounds i8, ptr %ptradd125, i64 8, !dbg !812
  store i32 0, ptr %ptradd126, align 8, !dbg !812
  %107 = load i8, ptr %c, align 1, !dbg !813
  %eq127 = icmp eq i8 %107, 46, !dbg !813
  br i1 %eq127, label %if.then128, label %if.exit182, !dbg !813

if.then128:                                       ; preds = %if.exit122
  %108 = load ptr, ptr %self, align 8, !dbg !814
  %ptradd129 = getelementptr inbounds i8, ptr %108, i64 16, !dbg !814
  %109 = load i32, ptr %ptradd129, align 8, !dbg !814
  %110 = and i32 %109, -65, !dbg !814
  %111 = or i32 %110, 64, !dbg !814
  store i32 %111, ptr %ptradd129, align 8, !dbg !814
  %112 = load i64, ptr %i, align 8, !dbg !816
  %add130 = add i64 %112, 1, !dbg !816
  store i64 %add130, ptr %i, align 8, !dbg !816
  %113 = load i64, ptr %format_len, align 8, !dbg !816
  %ge131 = icmp uge i64 %add130, %113, !dbg !816
  br i1 %ge131, label %if.then132, label %if.exit140, !dbg !816

if.then132:                                       ; preds = %if.then128
  %114 = load ptr, ptr %self, align 8
  store ptr %114, ptr %f134, align 8
  %115 = load ptr, ptr %f134, align 8
  store %"char[]" { ptr @.str.98, i64 12 }, ptr %indirectarg136, align 8
  %116 = call i64 @std.io.Formatter.out_substr(ptr %retparam135, ptr %115, ptr align 8 %indirectarg136), !dbg !817
  store i64 ptrtoint (ptr @std.io.INVALID_FORMAT to i64), ptr %reterr133, align 8, !dbg !819
  br label %err_retblock139, !dbg !819

err_retblock139:                                  ; preds = %if.then132
  %117 = load i64, ptr %reterr133, align 8, !dbg !819
  ret i64 %117, !dbg !819

if.exit140:                                       ; preds = %if.then128
    #dbg_declare(ptr %prec, !820, !DIExpression(), !821)
  %ptradd141 = getelementptr inbounds i8, ptr %3, i64 8, !dbg !821
  %ptradd142 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !821
  %118 = load ptr, ptr %3, align 8
  %119 = load i64, ptr %ptradd141, align 8
  %120 = load ptr, ptr %2, align 8
  %121 = load i64, ptr %ptradd142, align 8
  %122 = call i64 @std.io.printf_parse_format_field(ptr %retparam143, ptr %118, i64 %119, ptr %variant_index, ptr %120, i64 %121, ptr %i) #6, !dbg !821
  %not_err144 = icmp eq i64 %122, 0, !dbg !821
  %123 = call i1 @llvm.expect.i1(i1 %not_err144, i1 true), !dbg !821
  br i1 %123, label %after_check146, label %assign_optional145, !dbg !821

assign_optional145:                               ; preds = %if.exit140
  store i64 %122, ptr %prec.f, align 8, !dbg !821
  br label %after_assign147, !dbg !821

after_check146:                                   ; preds = %if.exit140
  %124 = load i32, ptr %retparam143, align 4, !dbg !821
  store i32 %124, ptr %prec, align 4, !dbg !821
  store i64 0, ptr %prec.f, align 8, !dbg !821
  br label %after_assign147, !dbg !821

after_assign147:                                  ; preds = %after_check146, %assign_optional145
  br label %testblock149

testblock149:                                     ; preds = %after_assign147
  %optval150 = load i64, ptr %prec.f, align 8, !dbg !822
  %not_err151 = icmp eq i64 %optval150, 0, !dbg !822
  %125 = call i1 @llvm.expect.i1(i1 %not_err151, i1 true), !dbg !822
  br i1 %125, label %after_check153, label %assign_optional152, !dbg !822

assign_optional152:                               ; preds = %testblock149
  store i64 %optval150, ptr %temp_err148, align 8, !dbg !822
  br label %end_block154, !dbg !822

after_check153:                                   ; preds = %testblock149
  store i64 0, ptr %temp_err148, align 8, !dbg !822
  br label %end_block154, !dbg !822

end_block154:                                     ; preds = %after_check153, %assign_optional152
  %126 = load i64, ptr %temp_err148, align 8, !dbg !822
  %i2b155 = icmp ne i64 %126, 0, !dbg !822
  br i1 %i2b155, label %if.then156, label %if.exit164, !dbg !822

if.then156:                                       ; preds = %end_block154
  %127 = load ptr, ptr %self, align 8
  store ptr %127, ptr %f158, align 8
  %128 = load ptr, ptr %f158, align 8
  store %"char[]" { ptr @.str.99, i64 12 }, ptr %indirectarg160, align 8
  %129 = call i64 @std.io.Formatter.out_substr(ptr %retparam159, ptr %128, ptr align 8 %indirectarg160), !dbg !823
  store i64 ptrtoint (ptr @std.io.INVALID_FORMAT to i64), ptr %reterr157, align 8, !dbg !825
  br label %err_retblock163, !dbg !825

err_retblock163:                                  ; preds = %if.then156
  %130 = load i64, ptr %reterr157, align 8, !dbg !825
  ret i64 %130, !dbg !825

if.exit164:                                       ; preds = %end_block154
  %131 = load i32, ptr %prec, align 4, !dbg !826
  %lt165 = icmp slt i32 %131, 0, !dbg !826
  br i1 %lt165, label %cond.lhs, label %cond.rhs, !dbg !826

cond.lhs:                                         ; preds = %if.exit164
  br label %cond.phi, !dbg !826

cond.rhs:                                         ; preds = %if.exit164
  %132 = load i32, ptr %prec, align 4, !dbg !826
  br label %cond.phi, !dbg !826

cond.phi:                                         ; preds = %cond.rhs, %cond.lhs
  %val = phi i32 [ 0, %cond.lhs ], [ %132, %cond.rhs ], !dbg !826
  %133 = load ptr, ptr %self, align 8, !dbg !826
  %ptradd166 = getelementptr inbounds i8, ptr %133, i64 16, !dbg !826
  %ptradd167 = getelementptr inbounds i8, ptr %ptradd166, i64 8, !dbg !826
  store i32 %val, ptr %ptradd167, align 8, !dbg !826
  %ptradd168 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !827
  %134 = load i64, ptr %ptradd168, align 8, !dbg !827
  %135 = load ptr, ptr %2, align 8, !dbg !827
  %136 = load i64, ptr %i, align 8, !dbg !827
  %ge169 = icmp uge i64 %136, %134, !dbg !827
  %137 = call i1 @llvm.expect.i1(i1 %ge169, i1 false), !dbg !827
  br i1 %137, label %panic170, label %checkok180, !dbg !827

checkok180:                                       ; preds = %cond.phi
  %ptradd181 = getelementptr inbounds i8, ptr %135, i64 %136, !dbg !827
  %138 = load i8, ptr %ptradd181, align 1, !dbg !827
  store i8 %138, ptr %c, align 1, !dbg !827
  br label %if.exit182, !dbg !827

if.exit182:                                       ; preds = %checkok180, %if.exit122
    #dbg_declare(ptr %base, !828, !DIExpression(), !829)
  store i32 0, ptr %base, align 4, !dbg !829
  %139 = load i64, ptr %variant_index, align 8, !dbg !830
  %ptradd183 = getelementptr inbounds i8, ptr %3, i64 8, !dbg !830
  %140 = load i64, ptr %ptradd183, align 8, !dbg !830
  %ge184 = icmp uge i64 %139, %140, !dbg !830
  br i1 %ge184, label %if.then185, label %if.exit210, !dbg !830

if.then185:                                       ; preds = %if.exit182
  %141 = load ptr, ptr %self, align 8
  store ptr %141, ptr %self186, align 8
  store i64 ptrtoint (ptr @std.io.NOT_ENOUGH_ARGUMENTS to i64), ptr %f187, align 8
  %142 = load ptr, ptr %self186, align 8, !dbg !831
  %neq188 = icmp ne ptr %142, null, !dbg !831
  br i1 %neq188, label %assert_ok, label %assert_fail, !dbg !831

assert_fail:                                      ; preds = %if.then185
  store %"char[]" { ptr @.panic_msg.52, i64 32 }, ptr %indirectarg189, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg190, align 8
  store %"char[]" { ptr @.func.94, i64 7 }, ptr %indirectarg191, align 8
  %143 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %143(ptr align 8 %indirectarg189, ptr align 8 %indirectarg190, ptr align 8 %indirectarg191, i32 25) #5, !dbg !831
  unreachable, !dbg !831

assert_ok:                                        ; preds = %if.then185
  %144 = load ptr, ptr %self186, align 8, !dbg !836
  %ptradd192 = getelementptr inbounds i8, ptr %144, i64 16, !dbg !836
  %ptradd193 = getelementptr inbounds i8, ptr %ptradd192, i64 16, !dbg !836
  %145 = load i64, ptr %ptradd193, align 8, !dbg !836
  %i2b194 = icmp ne i64 %145, 0, !dbg !836
  br i1 %i2b194, label %if.then195, label %if.exit198, !dbg !836

if.then195:                                       ; preds = %assert_ok
  %146 = load ptr, ptr %self186, align 8, !dbg !836
  %ptradd196 = getelementptr inbounds i8, ptr %146, i64 16, !dbg !836
  %ptradd197 = getelementptr inbounds i8, ptr %ptradd196, i64 16, !dbg !836
  %147 = load i64, ptr %ptradd197, align 8, !dbg !836
  store i64 %147, ptr %blockret, align 8, !dbg !836
  br label %expr_block.exit, !dbg !836

if.exit198:                                       ; preds = %assert_ok
  %148 = load ptr, ptr %self186, align 8, !dbg !837
  %ptradd199 = getelementptr inbounds i8, ptr %148, i64 16, !dbg !837
  %ptradd200 = getelementptr inbounds i8, ptr %ptradd199, i64 16, !dbg !837
  %149 = load i64, ptr %f187, align 8, !dbg !837
  store i64 %149, ptr %ptradd200, align 8, !dbg !837
  %150 = load i64, ptr %f187, align 8, !dbg !838
  store i64 %150, ptr %blockret, align 8, !dbg !838
  br label %expr_block.exit, !dbg !838

expr_block.exit:                                  ; preds = %if.exit198, %if.then195
  %151 = load i64, ptr %total_len, align 8, !dbg !839
  %152 = load ptr, ptr %self, align 8
  store %"char[]" { ptr @.str.101, i64 9 }, ptr %indirectarg203, align 8
  %153 = call i64 @std.io.Formatter.out_substr(ptr %retparam202, ptr %152, ptr align 8 %indirectarg203), !dbg !839
  %not_err204 = icmp eq i64 %153, 0, !dbg !839
  %154 = call i1 @llvm.expect.i1(i1 %not_err204, i1 true), !dbg !839
  br i1 %154, label %after_check206, label %assign_optional205, !dbg !839

assign_optional205:                               ; preds = %expr_block.exit
  store i64 %153, ptr %error_var201, align 8, !dbg !839
  br label %guard_block207, !dbg !839

after_check206:                                   ; preds = %expr_block.exit
  br label %noerr_block208, !dbg !839

guard_block207:                                   ; preds = %assign_optional205
  %155 = load i64, ptr %error_var201, align 8, !dbg !839
  ret i64 %155, !dbg !839

noerr_block208:                                   ; preds = %after_check206
  %156 = load i64, ptr %retparam202, align 8, !dbg !839
  %add209 = add i64 %151, %156, !dbg !839
  store i64 %add209, ptr %total_len, align 8, !dbg !839
  br label %loop.inc, !dbg !840

if.exit210:                                       ; preds = %if.exit182
    #dbg_declare(ptr %current, !841, !DIExpression(), !842)
  %ptradd211 = getelementptr inbounds i8, ptr %3, i64 8, !dbg !842
  %157 = load i64, ptr %ptradd211, align 8, !dbg !842
  %158 = load ptr, ptr %3, align 8, !dbg !842
  %159 = load i64, ptr %variant_index, align 8, !dbg !842
  %add212 = add i64 %159, 1, !dbg !842
  store i64 %add212, ptr %variant_index, align 8, !dbg !842
  %ge213 = icmp uge i64 %159, %157, !dbg !842
  %160 = call i1 @llvm.expect.i1(i1 %ge213, i1 false), !dbg !842
  br i1 %160, label %panic214, label %checkok224, !dbg !842

checkok224:                                       ; preds = %if.exit210
  %ptroffset = getelementptr inbounds [16 x i8], ptr %158, i64 %159, !dbg !842
  %161 = ptrtoint ptr %ptroffset to i64, !dbg !842
  %162 = urem i64 %161, 8, !dbg !842
  %163 = icmp ne i64 %162, 0, !dbg !842
  %164 = call i1 @llvm.expect.i1(i1 %163, i1 false), !dbg !842
  br i1 %164, label %panic225, label %checkok235, !dbg !842

checkok235:                                       ; preds = %checkok224
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %current, ptr align 8 %ptroffset, i32 16, i1 false), !dbg !842
  %165 = load i8, ptr %c, align 1
  store i8 %165, ptr %switch236, align 1
  br label %switch.entry237

switch.entry237:                                  ; preds = %checkok235
  %166 = load i8, ptr %switch236, align 1
  switch i8 %166, label %switch.default900 [
    i8 100, label %switch.case238
    i8 88, label %switch.case240
    i8 120, label %switch.case242
    i8 79, label %switch.case243
    i8 111, label %switch.case245
    i8 66, label %switch.case246
    i8 98, label %switch.case248
    i8 65, label %switch.case249
    i8 97, label %switch.case251
    i8 70, label %switch.case331
    i8 102, label %switch.case333
    i8 69, label %switch.case417
    i8 101, label %switch.case419
    i8 71, label %switch.case503
    i8 103, label %switch.case505
    i8 99, label %switch.case589
    i8 72, label %switch.case599
    i8 104, label %switch.case601
    i8 115, label %switch.case833
    i8 112, label %switch.case897
  ]

switch.case238:                                   ; preds = %switch.entry237
  store i32 10, ptr %base, align 4, !dbg !843
  %167 = load ptr, ptr %self, align 8, !dbg !846
  %ptradd239 = getelementptr inbounds i8, ptr %167, i64 16, !dbg !846
  %168 = load i32, ptr %ptradd239, align 8, !dbg !846
  %169 = and i32 %168, -17, !dbg !846
  store i32 %169, ptr %ptradd239, align 8, !dbg !846
  br label %switch.exit929, !dbg !846

switch.case240:                                   ; preds = %switch.entry237
  %170 = load ptr, ptr %self, align 8, !dbg !847
  %ptradd241 = getelementptr inbounds i8, ptr %170, i64 16, !dbg !847
  %171 = load i32, ptr %ptradd241, align 8, !dbg !847
  %172 = and i32 %171, -33, !dbg !847
  %173 = or i32 %172, 32, !dbg !847
  store i32 %173, ptr %ptradd241, align 8, !dbg !847
  br label %switch.case242, !dbg !849

switch.case242:                                   ; preds = %switch.entry237, %switch.case240
  store i32 16, ptr %base, align 4, !dbg !850
  br label %switch.exit929, !dbg !850

switch.case243:                                   ; preds = %switch.entry237
  %174 = load ptr, ptr %self, align 8, !dbg !852
  %ptradd244 = getelementptr inbounds i8, ptr %174, i64 16, !dbg !852
  %175 = load i32, ptr %ptradd244, align 8, !dbg !852
  %176 = and i32 %175, -33, !dbg !852
  %177 = or i32 %176, 32, !dbg !852
  store i32 %177, ptr %ptradd244, align 8, !dbg !852
  br label %switch.case245, !dbg !854

switch.case245:                                   ; preds = %switch.entry237, %switch.case243
  store i32 8, ptr %base, align 4, !dbg !855
  br label %switch.exit929, !dbg !855

switch.case246:                                   ; preds = %switch.entry237
  %178 = load ptr, ptr %self, align 8, !dbg !857
  %ptradd247 = getelementptr inbounds i8, ptr %178, i64 16, !dbg !857
  %179 = load i32, ptr %ptradd247, align 8, !dbg !857
  %180 = and i32 %179, -33, !dbg !857
  %181 = or i32 %180, 32, !dbg !857
  store i32 %181, ptr %ptradd247, align 8, !dbg !857
  br label %switch.case248, !dbg !859

switch.case248:                                   ; preds = %switch.entry237, %switch.case246
  store i32 2, ptr %base, align 4, !dbg !860
  br label %switch.exit929, !dbg !860

switch.case249:                                   ; preds = %switch.entry237
  %182 = load ptr, ptr %self, align 8, !dbg !862
  %ptradd250 = getelementptr inbounds i8, ptr %182, i64 16, !dbg !862
  %183 = load i32, ptr %ptradd250, align 8, !dbg !862
  %184 = and i32 %183, -33, !dbg !862
  %185 = or i32 %184, 32, !dbg !862
  store i32 %185, ptr %ptradd250, align 8, !dbg !862
  br label %switch.case251, !dbg !864

switch.case251:                                   ; preds = %switch.entry237, %switch.case249
  %186 = load i64, ptr %total_len, align 8, !dbg !865
  %187 = load ptr, ptr %self, align 8
  store ptr %187, ptr %f253, align 8
    #dbg_declare(ptr %len, !867, !DIExpression(), !869)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg256, ptr align 8 %current, i32 16, i1 false)
  %188 = call i64 @std.io.float_from_any(ptr %retparam255, ptr align 8 %indirectarg256), !dbg !870
  %not_err257 = icmp eq i64 %188, 0, !dbg !870
  %189 = call i1 @llvm.expect.i1(i1 %not_err257, i1 true), !dbg !870
  br i1 %189, label %after_check259, label %assign_optional258, !dbg !870

assign_optional258:                               ; preds = %switch.case251
  store i64 %188, ptr %len.f, align 8, !dbg !870
  br label %after_assign264, !dbg !870

after_check259:                                   ; preds = %switch.case251
  %190 = load ptr, ptr %self, align 8
  %191 = load double, ptr %retparam255, align 8
  %192 = call i64 @std.io.Formatter.atoa(ptr %retparam260, ptr %190, double %191), !dbg !869
  %not_err261 = icmp eq i64 %192, 0, !dbg !869
  %193 = call i1 @llvm.expect.i1(i1 %not_err261, i1 true), !dbg !869
  br i1 %193, label %after_check263, label %assign_optional262, !dbg !869

assign_optional262:                               ; preds = %after_check259
  store i64 %192, ptr %len.f, align 8, !dbg !869
  br label %after_assign264, !dbg !869

after_check263:                                   ; preds = %after_check259
  %194 = load i64, ptr %retparam260, align 8, !dbg !869
  store i64 %194, ptr %len, align 8, !dbg !869
  store i64 0, ptr %len.f, align 8, !dbg !869
  br label %after_assign264, !dbg !869

after_assign264:                                  ; preds = %after_check263, %assign_optional262, %assign_optional258
    #dbg_declare(ptr %err, !871, !DIExpression(), !872)
  br label %testblock265, !dbg !872

testblock265:                                     ; preds = %after_assign264
  %optval266 = load i64, ptr %len.f, align 8, !dbg !872
  %not_err267 = icmp eq i64 %optval266, 0, !dbg !872
  %195 = call i1 @llvm.expect.i1(i1 %not_err267, i1 true), !dbg !872
  br i1 %195, label %after_check269, label %assign_optional268, !dbg !872

assign_optional268:                               ; preds = %testblock265
  store i64 %optval266, ptr %err, align 8, !dbg !872
  br label %end_block270, !dbg !872

after_check269:                                   ; preds = %testblock265
  store i64 0, ptr %err, align 8, !dbg !872
  br label %end_block270, !dbg !872

end_block270:                                     ; preds = %after_check269, %assign_optional268
  %196 = load i64, ptr %err, align 8, !dbg !872
  %i2b271 = icmp ne i64 %196, 0, !dbg !872
  br i1 %i2b271, label %if.then272, label %if.exit327, !dbg !872

if.then272:                                       ; preds = %end_block270
  %197 = load i64, ptr %err, align 8
  store i64 %197, ptr %switch273, align 8
  br label %switch.entry274

switch.entry274:                                  ; preds = %if.then272
  %198 = load i64, ptr %switch273, align 8
  %eq275 = icmp eq i64 ptrtoint (ptr @std.io.BUFFER_EXCEEDED to i64), %198, !dbg !873
  br i1 %eq275, label %switch.case277, label %next_if, !dbg !873

next_if:                                          ; preds = %switch.entry274
  %eq276 = icmp eq i64 ptrtoint (ptr @std.io.INTERNAL_BUFFER_EXCEEDED to i64), %198, !dbg !876
  br i1 %eq276, label %switch.case277, label %next_if297, !dbg !876

switch.case277:                                   ; preds = %next_if, %switch.entry274
  %199 = load ptr, ptr %f253, align 8
  store ptr %199, ptr %self278, align 8
  %200 = load i64, ptr %err, align 8
  store i64 %200, ptr %f279, align 8
  %201 = load ptr, ptr %self278, align 8, !dbg !877
  %neq281 = icmp ne ptr %201, null, !dbg !877
  br i1 %neq281, label %assert_ok286, label %assert_fail282, !dbg !877

assert_fail282:                                   ; preds = %switch.case277
  store %"char[]" { ptr @.panic_msg.52, i64 32 }, ptr %indirectarg283, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg284, align 8
  store %"char[]" { ptr @.func.94, i64 7 }, ptr %indirectarg285, align 8
  %202 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %202(ptr align 8 %indirectarg283, ptr align 8 %indirectarg284, ptr align 8 %indirectarg285, i32 25) #5, !dbg !877
  unreachable, !dbg !877

assert_ok286:                                     ; preds = %switch.case277
  %203 = load ptr, ptr %self278, align 8, !dbg !882
  %ptradd287 = getelementptr inbounds i8, ptr %203, i64 16, !dbg !882
  %ptradd288 = getelementptr inbounds i8, ptr %ptradd287, i64 16, !dbg !882
  %204 = load i64, ptr %ptradd288, align 8, !dbg !882
  %i2b289 = icmp ne i64 %204, 0, !dbg !882
  br i1 %i2b289, label %if.then290, label %if.exit293, !dbg !882

if.then290:                                       ; preds = %assert_ok286
  %205 = load ptr, ptr %self278, align 8, !dbg !882
  %ptradd291 = getelementptr inbounds i8, ptr %205, i64 16, !dbg !882
  %ptradd292 = getelementptr inbounds i8, ptr %ptradd291, i64 16, !dbg !882
  %206 = load i64, ptr %ptradd292, align 8, !dbg !882
  store i64 %206, ptr %blockret280, align 8, !dbg !882
  br label %expr_block.exit296, !dbg !882

if.exit293:                                       ; preds = %assert_ok286
  %207 = load ptr, ptr %self278, align 8, !dbg !883
  %ptradd294 = getelementptr inbounds i8, ptr %207, i64 16, !dbg !883
  %ptradd295 = getelementptr inbounds i8, ptr %ptradd294, i64 16, !dbg !883
  %208 = load i64, ptr %f279, align 8, !dbg !883
  store i64 %208, ptr %ptradd295, align 8, !dbg !883
  %209 = load i64, ptr %f279, align 8, !dbg !884
  store i64 %209, ptr %blockret280, align 8, !dbg !884
  br label %expr_block.exit296, !dbg !884

expr_block.exit296:                               ; preds = %if.exit293, %if.then290
  %210 = load i64, ptr %blockret280, align 8, !dbg !884
  store i64 %210, ptr %error_var252, align 8, !dbg !884
  br label %guard_block328, !dbg !884

next_if297:                                       ; preds = %next_if
  br label %switch.default298, !dbg !884

switch.default298:                                ; preds = %next_if297
  %211 = load ptr, ptr %f253, align 8
  store ptr %211, ptr %self299, align 8
  store i64 ptrtoint (ptr @std.io.INVALID_ARGUMENT to i64), ptr %f300, align 8
  %212 = load ptr, ptr %self299, align 8, !dbg !885
  %neq302 = icmp ne ptr %212, null, !dbg !885
  br i1 %neq302, label %assert_ok307, label %assert_fail303, !dbg !885

assert_fail303:                                   ; preds = %switch.default298
  store %"char[]" { ptr @.panic_msg.52, i64 32 }, ptr %indirectarg304, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg305, align 8
  store %"char[]" { ptr @.func.94, i64 7 }, ptr %indirectarg306, align 8
  %213 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %213(ptr align 8 %indirectarg304, ptr align 8 %indirectarg305, ptr align 8 %indirectarg306, i32 25) #5, !dbg !885
  unreachable, !dbg !885

assert_ok307:                                     ; preds = %switch.default298
  %214 = load ptr, ptr %self299, align 8, !dbg !890
  %ptradd308 = getelementptr inbounds i8, ptr %214, i64 16, !dbg !890
  %ptradd309 = getelementptr inbounds i8, ptr %ptradd308, i64 16, !dbg !890
  %215 = load i64, ptr %ptradd309, align 8, !dbg !890
  %i2b310 = icmp ne i64 %215, 0, !dbg !890
  br i1 %i2b310, label %if.then311, label %if.exit314, !dbg !890

if.then311:                                       ; preds = %assert_ok307
  %216 = load ptr, ptr %self299, align 8, !dbg !890
  %ptradd312 = getelementptr inbounds i8, ptr %216, i64 16, !dbg !890
  %ptradd313 = getelementptr inbounds i8, ptr %ptradd312, i64 16, !dbg !890
  %217 = load i64, ptr %ptradd313, align 8, !dbg !890
  store i64 %217, ptr %blockret301, align 8, !dbg !890
  br label %expr_block.exit317, !dbg !890

if.exit314:                                       ; preds = %assert_ok307
  %218 = load ptr, ptr %self299, align 8, !dbg !891
  %ptradd315 = getelementptr inbounds i8, ptr %218, i64 16, !dbg !891
  %ptradd316 = getelementptr inbounds i8, ptr %ptradd315, i64 16, !dbg !891
  %219 = load i64, ptr %f300, align 8, !dbg !891
  store i64 %219, ptr %ptradd316, align 8, !dbg !891
  %220 = load i64, ptr %f300, align 8, !dbg !892
  store i64 %220, ptr %blockret301, align 8, !dbg !892
  br label %expr_block.exit317, !dbg !892

expr_block.exit317:                               ; preds = %if.exit314, %if.then311
  %221 = load i64, ptr %blockret301, align 8, !dbg !892
  store i64 %221, ptr %err, align 8, !dbg !892
  %222 = load ptr, ptr %f253, align 8
  store %"char[]" { ptr @.str.102, i64 9 }, ptr %indirectarg320, align 8
  %223 = call i64 @std.io.Formatter.out_substr(ptr %retparam319, ptr %222, ptr align 8 %indirectarg320), !dbg !893
  %not_err321 = icmp eq i64 %223, 0, !dbg !893
  %224 = call i1 @llvm.expect.i1(i1 %not_err321, i1 true), !dbg !893
  br i1 %224, label %after_check323, label %assign_optional322, !dbg !893

assign_optional322:                               ; preds = %expr_block.exit317
  store i64 %223, ptr %error_var318, align 8, !dbg !893
  br label %guard_block324, !dbg !893

after_check323:                                   ; preds = %expr_block.exit317
  br label %noerr_block325, !dbg !893

guard_block324:                                   ; preds = %assign_optional322
  %225 = load i64, ptr %error_var318, align 8, !dbg !893
  store i64 %225, ptr %error_var252, align 8, !dbg !893
  br label %guard_block328, !dbg !893

noerr_block325:                                   ; preds = %after_check323
  %226 = load i64, ptr %err, align 8, !dbg !894
  store i64 %226, ptr %error_var252, align 8, !dbg !894
  br label %guard_block328, !dbg !894

if.exit327:                                       ; preds = %end_block270
  br label %noerr_block329, !dbg !895

guard_block328:                                   ; preds = %noerr_block325, %guard_block324, %expr_block.exit296
  %227 = load i64, ptr %error_var252, align 8, !dbg !895
  ret i64 %227, !dbg !895

noerr_block329:                                   ; preds = %if.exit327
  %228 = load i64, ptr %len, align 8, !dbg !895
  %add330 = add i64 %186, %228, !dbg !865
  store i64 %add330, ptr %total_len, align 8, !dbg !865
  br label %loop.inc, !dbg !896

switch.case331:                                   ; preds = %switch.entry237
  %229 = load ptr, ptr %self, align 8, !dbg !897
  %ptradd332 = getelementptr inbounds i8, ptr %229, i64 16, !dbg !897
  %230 = load i32, ptr %ptradd332, align 8, !dbg !897
  %231 = and i32 %230, -33, !dbg !897
  %232 = or i32 %231, 32, !dbg !897
  store i32 %232, ptr %ptradd332, align 8, !dbg !897
  br label %switch.case333, !dbg !899

switch.case333:                                   ; preds = %switch.entry237, %switch.case331
  %233 = load i64, ptr %total_len, align 8, !dbg !900
  %234 = load ptr, ptr %self, align 8
  store ptr %234, ptr %f335, align 8
    #dbg_declare(ptr %len337, !902, !DIExpression(), !904)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg340, ptr align 8 %current, i32 16, i1 false)
  %235 = call i64 @std.io.float_from_any(ptr %retparam339, ptr align 8 %indirectarg340), !dbg !905
  %not_err341 = icmp eq i64 %235, 0, !dbg !905
  %236 = call i1 @llvm.expect.i1(i1 %not_err341, i1 true), !dbg !905
  br i1 %236, label %after_check343, label %assign_optional342, !dbg !905

assign_optional342:                               ; preds = %switch.case333
  store i64 %235, ptr %len.f338, align 8, !dbg !905
  br label %after_assign348, !dbg !905

after_check343:                                   ; preds = %switch.case333
  %237 = load ptr, ptr %self, align 8
  %238 = load double, ptr %retparam339, align 8
  %239 = call i64 @std.io.Formatter.ftoa(ptr %retparam344, ptr %237, double %238), !dbg !904
  %not_err345 = icmp eq i64 %239, 0, !dbg !904
  %240 = call i1 @llvm.expect.i1(i1 %not_err345, i1 true), !dbg !904
  br i1 %240, label %after_check347, label %assign_optional346, !dbg !904

assign_optional346:                               ; preds = %after_check343
  store i64 %239, ptr %len.f338, align 8, !dbg !904
  br label %after_assign348, !dbg !904

after_check347:                                   ; preds = %after_check343
  %241 = load i64, ptr %retparam344, align 8, !dbg !904
  store i64 %241, ptr %len337, align 8, !dbg !904
  store i64 0, ptr %len.f338, align 8, !dbg !904
  br label %after_assign348, !dbg !904

after_assign348:                                  ; preds = %after_check347, %assign_optional346, %assign_optional342
    #dbg_declare(ptr %err349, !906, !DIExpression(), !907)
  br label %testblock350, !dbg !907

testblock350:                                     ; preds = %after_assign348
  %optval351 = load i64, ptr %len.f338, align 8, !dbg !907
  %not_err352 = icmp eq i64 %optval351, 0, !dbg !907
  %242 = call i1 @llvm.expect.i1(i1 %not_err352, i1 true), !dbg !907
  br i1 %242, label %after_check354, label %assign_optional353, !dbg !907

assign_optional353:                               ; preds = %testblock350
  store i64 %optval351, ptr %err349, align 8, !dbg !907
  br label %end_block355, !dbg !907

after_check354:                                   ; preds = %testblock350
  store i64 0, ptr %err349, align 8, !dbg !907
  br label %end_block355, !dbg !907

end_block355:                                     ; preds = %after_check354, %assign_optional353
  %243 = load i64, ptr %err349, align 8, !dbg !907
  %i2b356 = icmp ne i64 %243, 0, !dbg !907
  br i1 %i2b356, label %if.then357, label %if.exit413, !dbg !907

if.then357:                                       ; preds = %end_block355
  %244 = load i64, ptr %err349, align 8
  store i64 %244, ptr %switch358, align 8
  br label %switch.entry359

switch.entry359:                                  ; preds = %if.then357
  %245 = load i64, ptr %switch358, align 8
  %eq360 = icmp eq i64 ptrtoint (ptr @std.io.BUFFER_EXCEEDED to i64), %245, !dbg !908
  br i1 %eq360, label %switch.case363, label %next_if361, !dbg !908

next_if361:                                       ; preds = %switch.entry359
  %eq362 = icmp eq i64 ptrtoint (ptr @std.io.INTERNAL_BUFFER_EXCEEDED to i64), %245, !dbg !911
  br i1 %eq362, label %switch.case363, label %next_if383, !dbg !911

switch.case363:                                   ; preds = %next_if361, %switch.entry359
  %246 = load ptr, ptr %f335, align 8
  store ptr %246, ptr %self364, align 8
  %247 = load i64, ptr %err349, align 8
  store i64 %247, ptr %f365, align 8
  %248 = load ptr, ptr %self364, align 8, !dbg !912
  %neq367 = icmp ne ptr %248, null, !dbg !912
  br i1 %neq367, label %assert_ok372, label %assert_fail368, !dbg !912

assert_fail368:                                   ; preds = %switch.case363
  store %"char[]" { ptr @.panic_msg.52, i64 32 }, ptr %indirectarg369, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg370, align 8
  store %"char[]" { ptr @.func.94, i64 7 }, ptr %indirectarg371, align 8
  %249 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %249(ptr align 8 %indirectarg369, ptr align 8 %indirectarg370, ptr align 8 %indirectarg371, i32 25) #5, !dbg !912
  unreachable, !dbg !912

assert_ok372:                                     ; preds = %switch.case363
  %250 = load ptr, ptr %self364, align 8, !dbg !917
  %ptradd373 = getelementptr inbounds i8, ptr %250, i64 16, !dbg !917
  %ptradd374 = getelementptr inbounds i8, ptr %ptradd373, i64 16, !dbg !917
  %251 = load i64, ptr %ptradd374, align 8, !dbg !917
  %i2b375 = icmp ne i64 %251, 0, !dbg !917
  br i1 %i2b375, label %if.then376, label %if.exit379, !dbg !917

if.then376:                                       ; preds = %assert_ok372
  %252 = load ptr, ptr %self364, align 8, !dbg !917
  %ptradd377 = getelementptr inbounds i8, ptr %252, i64 16, !dbg !917
  %ptradd378 = getelementptr inbounds i8, ptr %ptradd377, i64 16, !dbg !917
  %253 = load i64, ptr %ptradd378, align 8, !dbg !917
  store i64 %253, ptr %blockret366, align 8, !dbg !917
  br label %expr_block.exit382, !dbg !917

if.exit379:                                       ; preds = %assert_ok372
  %254 = load ptr, ptr %self364, align 8, !dbg !918
  %ptradd380 = getelementptr inbounds i8, ptr %254, i64 16, !dbg !918
  %ptradd381 = getelementptr inbounds i8, ptr %ptradd380, i64 16, !dbg !918
  %255 = load i64, ptr %f365, align 8, !dbg !918
  store i64 %255, ptr %ptradd381, align 8, !dbg !918
  %256 = load i64, ptr %f365, align 8, !dbg !919
  store i64 %256, ptr %blockret366, align 8, !dbg !919
  br label %expr_block.exit382, !dbg !919

expr_block.exit382:                               ; preds = %if.exit379, %if.then376
  %257 = load i64, ptr %blockret366, align 8, !dbg !919
  store i64 %257, ptr %error_var334, align 8, !dbg !919
  br label %guard_block414, !dbg !919

next_if383:                                       ; preds = %next_if361
  br label %switch.default384, !dbg !919

switch.default384:                                ; preds = %next_if383
  %258 = load ptr, ptr %f335, align 8
  store ptr %258, ptr %self385, align 8
  store i64 ptrtoint (ptr @std.io.INVALID_ARGUMENT to i64), ptr %f386, align 8
  %259 = load ptr, ptr %self385, align 8, !dbg !920
  %neq388 = icmp ne ptr %259, null, !dbg !920
  br i1 %neq388, label %assert_ok393, label %assert_fail389, !dbg !920

assert_fail389:                                   ; preds = %switch.default384
  store %"char[]" { ptr @.panic_msg.52, i64 32 }, ptr %indirectarg390, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg391, align 8
  store %"char[]" { ptr @.func.94, i64 7 }, ptr %indirectarg392, align 8
  %260 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %260(ptr align 8 %indirectarg390, ptr align 8 %indirectarg391, ptr align 8 %indirectarg392, i32 25) #5, !dbg !920
  unreachable, !dbg !920

assert_ok393:                                     ; preds = %switch.default384
  %261 = load ptr, ptr %self385, align 8, !dbg !925
  %ptradd394 = getelementptr inbounds i8, ptr %261, i64 16, !dbg !925
  %ptradd395 = getelementptr inbounds i8, ptr %ptradd394, i64 16, !dbg !925
  %262 = load i64, ptr %ptradd395, align 8, !dbg !925
  %i2b396 = icmp ne i64 %262, 0, !dbg !925
  br i1 %i2b396, label %if.then397, label %if.exit400, !dbg !925

if.then397:                                       ; preds = %assert_ok393
  %263 = load ptr, ptr %self385, align 8, !dbg !925
  %ptradd398 = getelementptr inbounds i8, ptr %263, i64 16, !dbg !925
  %ptradd399 = getelementptr inbounds i8, ptr %ptradd398, i64 16, !dbg !925
  %264 = load i64, ptr %ptradd399, align 8, !dbg !925
  store i64 %264, ptr %blockret387, align 8, !dbg !925
  br label %expr_block.exit403, !dbg !925

if.exit400:                                       ; preds = %assert_ok393
  %265 = load ptr, ptr %self385, align 8, !dbg !926
  %ptradd401 = getelementptr inbounds i8, ptr %265, i64 16, !dbg !926
  %ptradd402 = getelementptr inbounds i8, ptr %ptradd401, i64 16, !dbg !926
  %266 = load i64, ptr %f386, align 8, !dbg !926
  store i64 %266, ptr %ptradd402, align 8, !dbg !926
  %267 = load i64, ptr %f386, align 8, !dbg !927
  store i64 %267, ptr %blockret387, align 8, !dbg !927
  br label %expr_block.exit403, !dbg !927

expr_block.exit403:                               ; preds = %if.exit400, %if.then397
  %268 = load i64, ptr %blockret387, align 8, !dbg !927
  store i64 %268, ptr %err349, align 8, !dbg !927
  %269 = load ptr, ptr %f335, align 8
  store %"char[]" { ptr @.str.103, i64 9 }, ptr %indirectarg406, align 8
  %270 = call i64 @std.io.Formatter.out_substr(ptr %retparam405, ptr %269, ptr align 8 %indirectarg406), !dbg !928
  %not_err407 = icmp eq i64 %270, 0, !dbg !928
  %271 = call i1 @llvm.expect.i1(i1 %not_err407, i1 true), !dbg !928
  br i1 %271, label %after_check409, label %assign_optional408, !dbg !928

assign_optional408:                               ; preds = %expr_block.exit403
  store i64 %270, ptr %error_var404, align 8, !dbg !928
  br label %guard_block410, !dbg !928

after_check409:                                   ; preds = %expr_block.exit403
  br label %noerr_block411, !dbg !928

guard_block410:                                   ; preds = %assign_optional408
  %272 = load i64, ptr %error_var404, align 8, !dbg !928
  store i64 %272, ptr %error_var334, align 8, !dbg !928
  br label %guard_block414, !dbg !928

noerr_block411:                                   ; preds = %after_check409
  %273 = load i64, ptr %err349, align 8, !dbg !929
  store i64 %273, ptr %error_var334, align 8, !dbg !929
  br label %guard_block414, !dbg !929

if.exit413:                                       ; preds = %end_block355
  br label %noerr_block415, !dbg !930

guard_block414:                                   ; preds = %noerr_block411, %guard_block410, %expr_block.exit382
  %274 = load i64, ptr %error_var334, align 8, !dbg !930
  ret i64 %274, !dbg !930

noerr_block415:                                   ; preds = %if.exit413
  %275 = load i64, ptr %len337, align 8, !dbg !930
  %add416 = add i64 %233, %275, !dbg !900
  store i64 %add416, ptr %total_len, align 8, !dbg !900
  br label %loop.inc, !dbg !931

switch.case417:                                   ; preds = %switch.entry237
  %276 = load ptr, ptr %self, align 8, !dbg !932
  %ptradd418 = getelementptr inbounds i8, ptr %276, i64 16, !dbg !932
  %277 = load i32, ptr %ptradd418, align 8, !dbg !932
  %278 = and i32 %277, -33, !dbg !932
  %279 = or i32 %278, 32, !dbg !932
  store i32 %279, ptr %ptradd418, align 8, !dbg !932
  br label %switch.case419, !dbg !934

switch.case419:                                   ; preds = %switch.entry237, %switch.case417
  %280 = load i64, ptr %total_len, align 8, !dbg !935
  %281 = load ptr, ptr %self, align 8
  store ptr %281, ptr %f421, align 8
    #dbg_declare(ptr %len423, !937, !DIExpression(), !939)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg426, ptr align 8 %current, i32 16, i1 false)
  %282 = call i64 @std.io.float_from_any(ptr %retparam425, ptr align 8 %indirectarg426), !dbg !940
  %not_err427 = icmp eq i64 %282, 0, !dbg !940
  %283 = call i1 @llvm.expect.i1(i1 %not_err427, i1 true), !dbg !940
  br i1 %283, label %after_check429, label %assign_optional428, !dbg !940

assign_optional428:                               ; preds = %switch.case419
  store i64 %282, ptr %len.f424, align 8, !dbg !940
  br label %after_assign434, !dbg !940

after_check429:                                   ; preds = %switch.case419
  %284 = load ptr, ptr %self, align 8
  %285 = load double, ptr %retparam425, align 8
  %286 = call i64 @std.io.Formatter.etoa(ptr %retparam430, ptr %284, double %285), !dbg !939
  %not_err431 = icmp eq i64 %286, 0, !dbg !939
  %287 = call i1 @llvm.expect.i1(i1 %not_err431, i1 true), !dbg !939
  br i1 %287, label %after_check433, label %assign_optional432, !dbg !939

assign_optional432:                               ; preds = %after_check429
  store i64 %286, ptr %len.f424, align 8, !dbg !939
  br label %after_assign434, !dbg !939

after_check433:                                   ; preds = %after_check429
  %288 = load i64, ptr %retparam430, align 8, !dbg !939
  store i64 %288, ptr %len423, align 8, !dbg !939
  store i64 0, ptr %len.f424, align 8, !dbg !939
  br label %after_assign434, !dbg !939

after_assign434:                                  ; preds = %after_check433, %assign_optional432, %assign_optional428
    #dbg_declare(ptr %err435, !941, !DIExpression(), !942)
  br label %testblock436, !dbg !942

testblock436:                                     ; preds = %after_assign434
  %optval437 = load i64, ptr %len.f424, align 8, !dbg !942
  %not_err438 = icmp eq i64 %optval437, 0, !dbg !942
  %289 = call i1 @llvm.expect.i1(i1 %not_err438, i1 true), !dbg !942
  br i1 %289, label %after_check440, label %assign_optional439, !dbg !942

assign_optional439:                               ; preds = %testblock436
  store i64 %optval437, ptr %err435, align 8, !dbg !942
  br label %end_block441, !dbg !942

after_check440:                                   ; preds = %testblock436
  store i64 0, ptr %err435, align 8, !dbg !942
  br label %end_block441, !dbg !942

end_block441:                                     ; preds = %after_check440, %assign_optional439
  %290 = load i64, ptr %err435, align 8, !dbg !942
  %i2b442 = icmp ne i64 %290, 0, !dbg !942
  br i1 %i2b442, label %if.then443, label %if.exit499, !dbg !942

if.then443:                                       ; preds = %end_block441
  %291 = load i64, ptr %err435, align 8
  store i64 %291, ptr %switch444, align 8
  br label %switch.entry445

switch.entry445:                                  ; preds = %if.then443
  %292 = load i64, ptr %switch444, align 8
  %eq446 = icmp eq i64 ptrtoint (ptr @std.io.BUFFER_EXCEEDED to i64), %292, !dbg !943
  br i1 %eq446, label %switch.case449, label %next_if447, !dbg !943

next_if447:                                       ; preds = %switch.entry445
  %eq448 = icmp eq i64 ptrtoint (ptr @std.io.INTERNAL_BUFFER_EXCEEDED to i64), %292, !dbg !946
  br i1 %eq448, label %switch.case449, label %next_if469, !dbg !946

switch.case449:                                   ; preds = %next_if447, %switch.entry445
  %293 = load ptr, ptr %f421, align 8
  store ptr %293, ptr %self450, align 8
  %294 = load i64, ptr %err435, align 8
  store i64 %294, ptr %f451, align 8
  %295 = load ptr, ptr %self450, align 8, !dbg !947
  %neq453 = icmp ne ptr %295, null, !dbg !947
  br i1 %neq453, label %assert_ok458, label %assert_fail454, !dbg !947

assert_fail454:                                   ; preds = %switch.case449
  store %"char[]" { ptr @.panic_msg.52, i64 32 }, ptr %indirectarg455, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg456, align 8
  store %"char[]" { ptr @.func.94, i64 7 }, ptr %indirectarg457, align 8
  %296 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %296(ptr align 8 %indirectarg455, ptr align 8 %indirectarg456, ptr align 8 %indirectarg457, i32 25) #5, !dbg !947
  unreachable, !dbg !947

assert_ok458:                                     ; preds = %switch.case449
  %297 = load ptr, ptr %self450, align 8, !dbg !952
  %ptradd459 = getelementptr inbounds i8, ptr %297, i64 16, !dbg !952
  %ptradd460 = getelementptr inbounds i8, ptr %ptradd459, i64 16, !dbg !952
  %298 = load i64, ptr %ptradd460, align 8, !dbg !952
  %i2b461 = icmp ne i64 %298, 0, !dbg !952
  br i1 %i2b461, label %if.then462, label %if.exit465, !dbg !952

if.then462:                                       ; preds = %assert_ok458
  %299 = load ptr, ptr %self450, align 8, !dbg !952
  %ptradd463 = getelementptr inbounds i8, ptr %299, i64 16, !dbg !952
  %ptradd464 = getelementptr inbounds i8, ptr %ptradd463, i64 16, !dbg !952
  %300 = load i64, ptr %ptradd464, align 8, !dbg !952
  store i64 %300, ptr %blockret452, align 8, !dbg !952
  br label %expr_block.exit468, !dbg !952

if.exit465:                                       ; preds = %assert_ok458
  %301 = load ptr, ptr %self450, align 8, !dbg !953
  %ptradd466 = getelementptr inbounds i8, ptr %301, i64 16, !dbg !953
  %ptradd467 = getelementptr inbounds i8, ptr %ptradd466, i64 16, !dbg !953
  %302 = load i64, ptr %f451, align 8, !dbg !953
  store i64 %302, ptr %ptradd467, align 8, !dbg !953
  %303 = load i64, ptr %f451, align 8, !dbg !954
  store i64 %303, ptr %blockret452, align 8, !dbg !954
  br label %expr_block.exit468, !dbg !954

expr_block.exit468:                               ; preds = %if.exit465, %if.then462
  %304 = load i64, ptr %blockret452, align 8, !dbg !954
  store i64 %304, ptr %error_var420, align 8, !dbg !954
  br label %guard_block500, !dbg !954

next_if469:                                       ; preds = %next_if447
  br label %switch.default470, !dbg !954

switch.default470:                                ; preds = %next_if469
  %305 = load ptr, ptr %f421, align 8
  store ptr %305, ptr %self471, align 8
  store i64 ptrtoint (ptr @std.io.INVALID_ARGUMENT to i64), ptr %f472, align 8
  %306 = load ptr, ptr %self471, align 8, !dbg !955
  %neq474 = icmp ne ptr %306, null, !dbg !955
  br i1 %neq474, label %assert_ok479, label %assert_fail475, !dbg !955

assert_fail475:                                   ; preds = %switch.default470
  store %"char[]" { ptr @.panic_msg.52, i64 32 }, ptr %indirectarg476, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg477, align 8
  store %"char[]" { ptr @.func.94, i64 7 }, ptr %indirectarg478, align 8
  %307 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %307(ptr align 8 %indirectarg476, ptr align 8 %indirectarg477, ptr align 8 %indirectarg478, i32 25) #5, !dbg !955
  unreachable, !dbg !955

assert_ok479:                                     ; preds = %switch.default470
  %308 = load ptr, ptr %self471, align 8, !dbg !960
  %ptradd480 = getelementptr inbounds i8, ptr %308, i64 16, !dbg !960
  %ptradd481 = getelementptr inbounds i8, ptr %ptradd480, i64 16, !dbg !960
  %309 = load i64, ptr %ptradd481, align 8, !dbg !960
  %i2b482 = icmp ne i64 %309, 0, !dbg !960
  br i1 %i2b482, label %if.then483, label %if.exit486, !dbg !960

if.then483:                                       ; preds = %assert_ok479
  %310 = load ptr, ptr %self471, align 8, !dbg !960
  %ptradd484 = getelementptr inbounds i8, ptr %310, i64 16, !dbg !960
  %ptradd485 = getelementptr inbounds i8, ptr %ptradd484, i64 16, !dbg !960
  %311 = load i64, ptr %ptradd485, align 8, !dbg !960
  store i64 %311, ptr %blockret473, align 8, !dbg !960
  br label %expr_block.exit489, !dbg !960

if.exit486:                                       ; preds = %assert_ok479
  %312 = load ptr, ptr %self471, align 8, !dbg !961
  %ptradd487 = getelementptr inbounds i8, ptr %312, i64 16, !dbg !961
  %ptradd488 = getelementptr inbounds i8, ptr %ptradd487, i64 16, !dbg !961
  %313 = load i64, ptr %f472, align 8, !dbg !961
  store i64 %313, ptr %ptradd488, align 8, !dbg !961
  %314 = load i64, ptr %f472, align 8, !dbg !962
  store i64 %314, ptr %blockret473, align 8, !dbg !962
  br label %expr_block.exit489, !dbg !962

expr_block.exit489:                               ; preds = %if.exit486, %if.then483
  %315 = load i64, ptr %blockret473, align 8, !dbg !962
  store i64 %315, ptr %err435, align 8, !dbg !962
  %316 = load ptr, ptr %f421, align 8
  store %"char[]" { ptr @.str.104, i64 9 }, ptr %indirectarg492, align 8
  %317 = call i64 @std.io.Formatter.out_substr(ptr %retparam491, ptr %316, ptr align 8 %indirectarg492), !dbg !963
  %not_err493 = icmp eq i64 %317, 0, !dbg !963
  %318 = call i1 @llvm.expect.i1(i1 %not_err493, i1 true), !dbg !963
  br i1 %318, label %after_check495, label %assign_optional494, !dbg !963

assign_optional494:                               ; preds = %expr_block.exit489
  store i64 %317, ptr %error_var490, align 8, !dbg !963
  br label %guard_block496, !dbg !963

after_check495:                                   ; preds = %expr_block.exit489
  br label %noerr_block497, !dbg !963

guard_block496:                                   ; preds = %assign_optional494
  %319 = load i64, ptr %error_var490, align 8, !dbg !963
  store i64 %319, ptr %error_var420, align 8, !dbg !963
  br label %guard_block500, !dbg !963

noerr_block497:                                   ; preds = %after_check495
  %320 = load i64, ptr %err435, align 8, !dbg !964
  store i64 %320, ptr %error_var420, align 8, !dbg !964
  br label %guard_block500, !dbg !964

if.exit499:                                       ; preds = %end_block441
  br label %noerr_block501, !dbg !965

guard_block500:                                   ; preds = %noerr_block497, %guard_block496, %expr_block.exit468
  %321 = load i64, ptr %error_var420, align 8, !dbg !965
  ret i64 %321, !dbg !965

noerr_block501:                                   ; preds = %if.exit499
  %322 = load i64, ptr %len423, align 8, !dbg !965
  %add502 = add i64 %280, %322, !dbg !935
  store i64 %add502, ptr %total_len, align 8, !dbg !935
  br label %loop.inc, !dbg !966

switch.case503:                                   ; preds = %switch.entry237
  %323 = load ptr, ptr %self, align 8, !dbg !967
  %ptradd504 = getelementptr inbounds i8, ptr %323, i64 16, !dbg !967
  %324 = load i32, ptr %ptradd504, align 8, !dbg !967
  %325 = and i32 %324, -33, !dbg !967
  %326 = or i32 %325, 32, !dbg !967
  store i32 %326, ptr %ptradd504, align 8, !dbg !967
  br label %switch.case505, !dbg !969

switch.case505:                                   ; preds = %switch.entry237, %switch.case503
  %327 = load i64, ptr %total_len, align 8, !dbg !970
  %328 = load ptr, ptr %self, align 8
  store ptr %328, ptr %f507, align 8
    #dbg_declare(ptr %len509, !972, !DIExpression(), !974)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg512, ptr align 8 %current, i32 16, i1 false)
  %329 = call i64 @std.io.float_from_any(ptr %retparam511, ptr align 8 %indirectarg512), !dbg !975
  %not_err513 = icmp eq i64 %329, 0, !dbg !975
  %330 = call i1 @llvm.expect.i1(i1 %not_err513, i1 true), !dbg !975
  br i1 %330, label %after_check515, label %assign_optional514, !dbg !975

assign_optional514:                               ; preds = %switch.case505
  store i64 %329, ptr %len.f510, align 8, !dbg !975
  br label %after_assign520, !dbg !975

after_check515:                                   ; preds = %switch.case505
  %331 = load ptr, ptr %self, align 8
  %332 = load double, ptr %retparam511, align 8
  %333 = call i64 @std.io.Formatter.gtoa(ptr %retparam516, ptr %331, double %332), !dbg !974
  %not_err517 = icmp eq i64 %333, 0, !dbg !974
  %334 = call i1 @llvm.expect.i1(i1 %not_err517, i1 true), !dbg !974
  br i1 %334, label %after_check519, label %assign_optional518, !dbg !974

assign_optional518:                               ; preds = %after_check515
  store i64 %333, ptr %len.f510, align 8, !dbg !974
  br label %after_assign520, !dbg !974

after_check519:                                   ; preds = %after_check515
  %335 = load i64, ptr %retparam516, align 8, !dbg !974
  store i64 %335, ptr %len509, align 8, !dbg !974
  store i64 0, ptr %len.f510, align 8, !dbg !974
  br label %after_assign520, !dbg !974

after_assign520:                                  ; preds = %after_check519, %assign_optional518, %assign_optional514
    #dbg_declare(ptr %err521, !976, !DIExpression(), !977)
  br label %testblock522, !dbg !977

testblock522:                                     ; preds = %after_assign520
  %optval523 = load i64, ptr %len.f510, align 8, !dbg !977
  %not_err524 = icmp eq i64 %optval523, 0, !dbg !977
  %336 = call i1 @llvm.expect.i1(i1 %not_err524, i1 true), !dbg !977
  br i1 %336, label %after_check526, label %assign_optional525, !dbg !977

assign_optional525:                               ; preds = %testblock522
  store i64 %optval523, ptr %err521, align 8, !dbg !977
  br label %end_block527, !dbg !977

after_check526:                                   ; preds = %testblock522
  store i64 0, ptr %err521, align 8, !dbg !977
  br label %end_block527, !dbg !977

end_block527:                                     ; preds = %after_check526, %assign_optional525
  %337 = load i64, ptr %err521, align 8, !dbg !977
  %i2b528 = icmp ne i64 %337, 0, !dbg !977
  br i1 %i2b528, label %if.then529, label %if.exit585, !dbg !977

if.then529:                                       ; preds = %end_block527
  %338 = load i64, ptr %err521, align 8
  store i64 %338, ptr %switch530, align 8
  br label %switch.entry531

switch.entry531:                                  ; preds = %if.then529
  %339 = load i64, ptr %switch530, align 8
  %eq532 = icmp eq i64 ptrtoint (ptr @std.io.BUFFER_EXCEEDED to i64), %339, !dbg !978
  br i1 %eq532, label %switch.case535, label %next_if533, !dbg !978

next_if533:                                       ; preds = %switch.entry531
  %eq534 = icmp eq i64 ptrtoint (ptr @std.io.INTERNAL_BUFFER_EXCEEDED to i64), %339, !dbg !981
  br i1 %eq534, label %switch.case535, label %next_if555, !dbg !981

switch.case535:                                   ; preds = %next_if533, %switch.entry531
  %340 = load ptr, ptr %f507, align 8
  store ptr %340, ptr %self536, align 8
  %341 = load i64, ptr %err521, align 8
  store i64 %341, ptr %f537, align 8
  %342 = load ptr, ptr %self536, align 8, !dbg !982
  %neq539 = icmp ne ptr %342, null, !dbg !982
  br i1 %neq539, label %assert_ok544, label %assert_fail540, !dbg !982

assert_fail540:                                   ; preds = %switch.case535
  store %"char[]" { ptr @.panic_msg.52, i64 32 }, ptr %indirectarg541, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg542, align 8
  store %"char[]" { ptr @.func.94, i64 7 }, ptr %indirectarg543, align 8
  %343 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %343(ptr align 8 %indirectarg541, ptr align 8 %indirectarg542, ptr align 8 %indirectarg543, i32 25) #5, !dbg !982
  unreachable, !dbg !982

assert_ok544:                                     ; preds = %switch.case535
  %344 = load ptr, ptr %self536, align 8, !dbg !987
  %ptradd545 = getelementptr inbounds i8, ptr %344, i64 16, !dbg !987
  %ptradd546 = getelementptr inbounds i8, ptr %ptradd545, i64 16, !dbg !987
  %345 = load i64, ptr %ptradd546, align 8, !dbg !987
  %i2b547 = icmp ne i64 %345, 0, !dbg !987
  br i1 %i2b547, label %if.then548, label %if.exit551, !dbg !987

if.then548:                                       ; preds = %assert_ok544
  %346 = load ptr, ptr %self536, align 8, !dbg !987
  %ptradd549 = getelementptr inbounds i8, ptr %346, i64 16, !dbg !987
  %ptradd550 = getelementptr inbounds i8, ptr %ptradd549, i64 16, !dbg !987
  %347 = load i64, ptr %ptradd550, align 8, !dbg !987
  store i64 %347, ptr %blockret538, align 8, !dbg !987
  br label %expr_block.exit554, !dbg !987

if.exit551:                                       ; preds = %assert_ok544
  %348 = load ptr, ptr %self536, align 8, !dbg !988
  %ptradd552 = getelementptr inbounds i8, ptr %348, i64 16, !dbg !988
  %ptradd553 = getelementptr inbounds i8, ptr %ptradd552, i64 16, !dbg !988
  %349 = load i64, ptr %f537, align 8, !dbg !988
  store i64 %349, ptr %ptradd553, align 8, !dbg !988
  %350 = load i64, ptr %f537, align 8, !dbg !989
  store i64 %350, ptr %blockret538, align 8, !dbg !989
  br label %expr_block.exit554, !dbg !989

expr_block.exit554:                               ; preds = %if.exit551, %if.then548
  %351 = load i64, ptr %blockret538, align 8, !dbg !989
  store i64 %351, ptr %error_var506, align 8, !dbg !989
  br label %guard_block586, !dbg !989

next_if555:                                       ; preds = %next_if533
  br label %switch.default556, !dbg !989

switch.default556:                                ; preds = %next_if555
  %352 = load ptr, ptr %f507, align 8
  store ptr %352, ptr %self557, align 8
  store i64 ptrtoint (ptr @std.io.INVALID_ARGUMENT to i64), ptr %f558, align 8
  %353 = load ptr, ptr %self557, align 8, !dbg !990
  %neq560 = icmp ne ptr %353, null, !dbg !990
  br i1 %neq560, label %assert_ok565, label %assert_fail561, !dbg !990

assert_fail561:                                   ; preds = %switch.default556
  store %"char[]" { ptr @.panic_msg.52, i64 32 }, ptr %indirectarg562, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg563, align 8
  store %"char[]" { ptr @.func.94, i64 7 }, ptr %indirectarg564, align 8
  %354 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %354(ptr align 8 %indirectarg562, ptr align 8 %indirectarg563, ptr align 8 %indirectarg564, i32 25) #5, !dbg !990
  unreachable, !dbg !990

assert_ok565:                                     ; preds = %switch.default556
  %355 = load ptr, ptr %self557, align 8, !dbg !995
  %ptradd566 = getelementptr inbounds i8, ptr %355, i64 16, !dbg !995
  %ptradd567 = getelementptr inbounds i8, ptr %ptradd566, i64 16, !dbg !995
  %356 = load i64, ptr %ptradd567, align 8, !dbg !995
  %i2b568 = icmp ne i64 %356, 0, !dbg !995
  br i1 %i2b568, label %if.then569, label %if.exit572, !dbg !995

if.then569:                                       ; preds = %assert_ok565
  %357 = load ptr, ptr %self557, align 8, !dbg !995
  %ptradd570 = getelementptr inbounds i8, ptr %357, i64 16, !dbg !995
  %ptradd571 = getelementptr inbounds i8, ptr %ptradd570, i64 16, !dbg !995
  %358 = load i64, ptr %ptradd571, align 8, !dbg !995
  store i64 %358, ptr %blockret559, align 8, !dbg !995
  br label %expr_block.exit575, !dbg !995

if.exit572:                                       ; preds = %assert_ok565
  %359 = load ptr, ptr %self557, align 8, !dbg !996
  %ptradd573 = getelementptr inbounds i8, ptr %359, i64 16, !dbg !996
  %ptradd574 = getelementptr inbounds i8, ptr %ptradd573, i64 16, !dbg !996
  %360 = load i64, ptr %f558, align 8, !dbg !996
  store i64 %360, ptr %ptradd574, align 8, !dbg !996
  %361 = load i64, ptr %f558, align 8, !dbg !997
  store i64 %361, ptr %blockret559, align 8, !dbg !997
  br label %expr_block.exit575, !dbg !997

expr_block.exit575:                               ; preds = %if.exit572, %if.then569
  %362 = load i64, ptr %blockret559, align 8, !dbg !997
  store i64 %362, ptr %err521, align 8, !dbg !997
  %363 = load ptr, ptr %f507, align 8
  store %"char[]" { ptr @.str.105, i64 9 }, ptr %indirectarg578, align 8
  %364 = call i64 @std.io.Formatter.out_substr(ptr %retparam577, ptr %363, ptr align 8 %indirectarg578), !dbg !998
  %not_err579 = icmp eq i64 %364, 0, !dbg !998
  %365 = call i1 @llvm.expect.i1(i1 %not_err579, i1 true), !dbg !998
  br i1 %365, label %after_check581, label %assign_optional580, !dbg !998

assign_optional580:                               ; preds = %expr_block.exit575
  store i64 %364, ptr %error_var576, align 8, !dbg !998
  br label %guard_block582, !dbg !998

after_check581:                                   ; preds = %expr_block.exit575
  br label %noerr_block583, !dbg !998

guard_block582:                                   ; preds = %assign_optional580
  %366 = load i64, ptr %error_var576, align 8, !dbg !998
  store i64 %366, ptr %error_var506, align 8, !dbg !998
  br label %guard_block586, !dbg !998

noerr_block583:                                   ; preds = %after_check581
  %367 = load i64, ptr %err521, align 8, !dbg !999
  store i64 %367, ptr %error_var506, align 8, !dbg !999
  br label %guard_block586, !dbg !999

if.exit585:                                       ; preds = %end_block527
  br label %noerr_block587, !dbg !1000

guard_block586:                                   ; preds = %noerr_block583, %guard_block582, %expr_block.exit554
  %368 = load i64, ptr %error_var506, align 8, !dbg !1000
  ret i64 %368, !dbg !1000

noerr_block587:                                   ; preds = %if.exit585
  %369 = load i64, ptr %len509, align 8, !dbg !1000
  %add588 = add i64 %327, %369, !dbg !970
  store i64 %add588, ptr %total_len, align 8, !dbg !970
  br label %loop.inc, !dbg !1001

switch.case589:                                   ; preds = %switch.entry237
  %370 = load i64, ptr %total_len, align 8, !dbg !1002
  %371 = load ptr, ptr %self, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg592, ptr align 8 %current, i32 16, i1 false)
  %372 = call i64 @std.io.Formatter.out_char(ptr %retparam591, ptr %371, ptr align 8 %indirectarg592), !dbg !1002
  %not_err593 = icmp eq i64 %372, 0, !dbg !1002
  %373 = call i1 @llvm.expect.i1(i1 %not_err593, i1 true), !dbg !1002
  br i1 %373, label %after_check595, label %assign_optional594, !dbg !1002

assign_optional594:                               ; preds = %switch.case589
  store i64 %372, ptr %error_var590, align 8, !dbg !1002
  br label %guard_block596, !dbg !1002

after_check595:                                   ; preds = %switch.case589
  br label %noerr_block597, !dbg !1002

guard_block596:                                   ; preds = %assign_optional594
  %374 = load i64, ptr %error_var590, align 8, !dbg !1002
  ret i64 %374, !dbg !1002

noerr_block597:                                   ; preds = %after_check595
  %375 = load i64, ptr %retparam591, align 8, !dbg !1002
  %add598 = add i64 %370, %375, !dbg !1002
  store i64 %add598, ptr %total_len, align 8, !dbg !1002
  br label %loop.inc, !dbg !1004

switch.case599:                                   ; preds = %switch.entry237
  %376 = load ptr, ptr %self, align 8, !dbg !1005
  %ptradd600 = getelementptr inbounds i8, ptr %376, i64 16, !dbg !1005
  %377 = load i32, ptr %ptradd600, align 8, !dbg !1005
  %378 = and i32 %377, -33, !dbg !1005
  %379 = or i32 %378, 32, !dbg !1005
  store i32 %379, ptr %ptradd600, align 8, !dbg !1005
  br label %switch.case601, !dbg !1007

switch.case601:                                   ; preds = %switch.entry237, %switch.case599
    #dbg_declare(ptr %out, !1008, !DIExpression(), !1010)
  %ptradd602 = getelementptr inbounds i8, ptr %current, i64 8, !dbg !1011
  %380 = load i64, ptr %ptradd602, align 8
  store i64 %380, ptr %switch603, align 8
  br label %switch.entry604

switch.entry604:                                  ; preds = %switch.case601
  %381 = load i64, ptr %switch603, align 8
  br label %check_subtype, !dbg !1013

check_subtype:                                    ; preds = %parent_type_block, %switch.entry604
  %382 = phi i64 [ %381, %switch.entry604 ], [ %typeid.parent, %parent_type_block ], !dbg !1013
  %eq605 = icmp eq i64 ptrtoint (ptr @"$ct.sa$char" to i64), %382, !dbg !1013
  br i1 %eq605, label %result_block, label %parent_type_block, !dbg !1013

parent_type_block:                                ; preds = %check_subtype
  %383 = inttoptr i64 %382 to ptr, !dbg !1013
  %ptradd606 = getelementptr inbounds i8, ptr %383, i64 8, !dbg !1013
  %typeid.parent = load i64, ptr %ptradd606, align 8, !dbg !1013
  %384 = icmp eq i64 %typeid.parent, 0, !dbg !1013
  br i1 %384, label %result_block, label %check_subtype, !dbg !1013

result_block:                                     ; preds = %parent_type_block, %check_subtype
  %385 = phi i1 [ false, %parent_type_block ], [ true, %check_subtype ], !dbg !1013
  br i1 %385, label %switch.case614, label %next_if607, !dbg !1013

next_if607:                                       ; preds = %result_block
  br label %check_subtype608, !dbg !1014

check_subtype608:                                 ; preds = %parent_type_block610, %next_if607
  %386 = phi i64 [ %381, %next_if607 ], [ %typeid.parent612, %parent_type_block610 ], !dbg !1014
  %eq609 = icmp eq i64 ptrtoint (ptr @"$ct.sa$ichar" to i64), %386, !dbg !1014
  br i1 %eq609, label %result_block613, label %parent_type_block610, !dbg !1014

parent_type_block610:                             ; preds = %check_subtype608
  %387 = inttoptr i64 %386 to ptr, !dbg !1014
  %ptradd611 = getelementptr inbounds i8, ptr %387, i64 8, !dbg !1014
  %typeid.parent612 = load i64, ptr %ptradd611, align 8, !dbg !1014
  %388 = icmp eq i64 %typeid.parent612, 0, !dbg !1014
  br i1 %388, label %result_block613, label %check_subtype608, !dbg !1014

result_block613:                                  ; preds = %parent_type_block610, %check_subtype608
  %389 = phi i1 [ false, %parent_type_block610 ], [ true, %check_subtype608 ], !dbg !1014
  br i1 %389, label %switch.case614, label %next_if631, !dbg !1014

switch.case614:                                   ; preds = %result_block613, %result_block
  %390 = load ptr, ptr %current, align 8, !dbg !1015
  %checknull = icmp eq ptr %390, null, !dbg !1015
  %391 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1015
  br i1 %391, label %panic615, label %checkok619, !dbg !1015

checkok619:                                       ; preds = %switch.case614
  %392 = ptrtoint ptr %390 to i64, !dbg !1015
  %393 = urem i64 %392, 8, !dbg !1015
  %394 = icmp ne i64 %393, 0, !dbg !1015
  %395 = call i1 @llvm.expect.i1(i1 %394, i1 false), !dbg !1015
  br i1 %395, label %panic620, label %checkok630, !dbg !1015

checkok630:                                       ; preds = %checkok619
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %out, ptr align 8 %390, i32 16, i1 false), !dbg !1015
  br label %switch.exit777, !dbg !1015

next_if631:                                       ; preds = %result_block613
  br label %switch.default632, !dbg !1015

switch.default632:                                ; preds = %next_if631
  %ptradd633 = getelementptr inbounds i8, ptr %current, i64 8, !dbg !1017
  %396 = load i64, ptr %ptradd633, align 8, !dbg !1017
  %"introspect*" = inttoptr i64 %396 to ptr, !dbg !1017
  %typeid.kind = load i8, ptr %"introspect*", align 8, !dbg !1017
  %eq634 = icmp eq i8 %typeid.kind, 15, !dbg !1017
  br i1 %eq634, label %and.rhs, label %and.phi, !dbg !1017

and.rhs:                                          ; preds = %switch.default632
  %ptradd635 = getelementptr inbounds i8, ptr %current, i64 8, !dbg !1017
  %397 = load i64, ptr %ptradd635, align 8, !dbg !1017
  %"introspect*636" = inttoptr i64 %397 to ptr, !dbg !1017
  %typeid.kind637 = load i8, ptr %"introspect*636", align 8, !dbg !1017
  %eq638 = icmp eq i8 %typeid.kind637, 15, !dbg !1017
  br i1 %eq638, label %check_type_ok, label %check_next, !dbg !1017

check_next:                                       ; preds = %and.rhs
  %eq639 = icmp eq i8 %typeid.kind637, 19, !dbg !1017
  br i1 %eq639, label %check_type_ok, label %check_next640, !dbg !1017

check_next640:                                    ; preds = %check_next
  %eq641 = icmp eq i8 %typeid.kind637, 17, !dbg !1017
  br i1 %eq641, label %check_type_ok, label %check_next642, !dbg !1017

check_next642:                                    ; preds = %check_next640
  %eq643 = icmp eq i8 %typeid.kind637, 8, !dbg !1017
  br i1 %eq643, label %check_type_ok, label %check_next644, !dbg !1017

check_next644:                                    ; preds = %check_next642
  %eq645 = icmp eq i8 %typeid.kind637, 16, !dbg !1017
  br i1 %eq645, label %check_type_ok, label %check_next646, !dbg !1017

check_next646:                                    ; preds = %check_next644
  %eq647 = icmp eq i8 %typeid.kind637, 18, !dbg !1017
  br i1 %eq647, label %check_type_ok, label %check_next648, !dbg !1017

check_next648:                                    ; preds = %check_next646
  %eq649 = icmp eq i8 %typeid.kind637, 9, !dbg !1017
  br i1 %eq649, label %check_type_ok, label %check_next650, !dbg !1017

check_next650:                                    ; preds = %check_next648
  %eq651 = icmp eq i8 %typeid.kind637, 12, !dbg !1017
  br i1 %eq651, label %check_type_ok, label %check_next652, !dbg !1017

check_next652:                                    ; preds = %check_next650
  store %"char[]" { ptr @.panic_msg.53, i64 49 }, ptr %indirectarg653, align 8
  store %"char[]" { ptr @.file.22, i64 12 }, ptr %indirectarg654, align 8
  store %"char[]" { ptr @.func.94, i64 7 }, ptr %indirectarg655, align 8
  %398 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %398(ptr align 8 %indirectarg653, ptr align 8 %indirectarg654, ptr align 8 %indirectarg655, i32 492) #5, !dbg !1017
  unreachable, !dbg !1017

check_type_ok:                                    ; preds = %check_next650, %check_next648, %check_next646, %check_next644, %check_next642, %check_next640, %check_next, %and.rhs
  %ptradd656 = getelementptr inbounds i8, ptr %"introspect*636", i64 32, !dbg !1017
  %typeid.inner = load i64, ptr %ptradd656, align 8, !dbg !1017
  %eq657 = icmp eq i64 %typeid.inner, ptrtoint (ptr @"$ct.char" to i64), !dbg !1017
  br i1 %eq657, label %or.phi, label %or.rhs, !dbg !1017

or.rhs:                                           ; preds = %check_type_ok
  %ptradd658 = getelementptr inbounds i8, ptr %current, i64 8, !dbg !1017
  %399 = load i64, ptr %ptradd658, align 8, !dbg !1017
  %"introspect*659" = inttoptr i64 %399 to ptr, !dbg !1017
  %typeid.kind660 = load i8, ptr %"introspect*659", align 8, !dbg !1017
  %eq661 = icmp eq i8 %typeid.kind660, 15, !dbg !1017
  br i1 %eq661, label %check_type_ok680, label %check_next662, !dbg !1017

check_next662:                                    ; preds = %or.rhs
  %eq663 = icmp eq i8 %typeid.kind660, 19, !dbg !1017
  br i1 %eq663, label %check_type_ok680, label %check_next664, !dbg !1017

check_next664:                                    ; preds = %check_next662
  %eq665 = icmp eq i8 %typeid.kind660, 17, !dbg !1017
  br i1 %eq665, label %check_type_ok680, label %check_next666, !dbg !1017

check_next666:                                    ; preds = %check_next664
  %eq667 = icmp eq i8 %typeid.kind660, 8, !dbg !1017
  br i1 %eq667, label %check_type_ok680, label %check_next668, !dbg !1017

check_next668:                                    ; preds = %check_next666
  %eq669 = icmp eq i8 %typeid.kind660, 16, !dbg !1017
  br i1 %eq669, label %check_type_ok680, label %check_next670, !dbg !1017

check_next670:                                    ; preds = %check_next668
  %eq671 = icmp eq i8 %typeid.kind660, 18, !dbg !1017
  br i1 %eq671, label %check_type_ok680, label %check_next672, !dbg !1017

check_next672:                                    ; preds = %check_next670
  %eq673 = icmp eq i8 %typeid.kind660, 9, !dbg !1017
  br i1 %eq673, label %check_type_ok680, label %check_next674, !dbg !1017

check_next674:                                    ; preds = %check_next672
  %eq675 = icmp eq i8 %typeid.kind660, 12, !dbg !1017
  br i1 %eq675, label %check_type_ok680, label %check_next676, !dbg !1017

check_next676:                                    ; preds = %check_next674
  store %"char[]" { ptr @.panic_msg.53, i64 49 }, ptr %indirectarg677, align 8
  store %"char[]" { ptr @.file.22, i64 12 }, ptr %indirectarg678, align 8
  store %"char[]" { ptr @.func.94, i64 7 }, ptr %indirectarg679, align 8
  %400 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %400(ptr align 8 %indirectarg677, ptr align 8 %indirectarg678, ptr align 8 %indirectarg679, i32 492) #5, !dbg !1017
  unreachable, !dbg !1017

check_type_ok680:                                 ; preds = %check_next674, %check_next672, %check_next670, %check_next668, %check_next666, %check_next664, %check_next662, %or.rhs
  %ptradd681 = getelementptr inbounds i8, ptr %"introspect*659", i64 32, !dbg !1017
  %typeid.inner682 = load i64, ptr %ptradd681, align 8, !dbg !1017
  %eq683 = icmp eq i64 %typeid.inner682, ptrtoint (ptr @"$ct.ichar" to i64), !dbg !1017
  br label %or.phi, !dbg !1017

or.phi:                                           ; preds = %check_type_ok680, %check_type_ok
  %val684 = phi i1 [ true, %check_type_ok ], [ %eq683, %check_type_ok680 ], !dbg !1017
  br label %and.phi, !dbg !1017

and.phi:                                          ; preds = %or.phi, %switch.default632
  %val685 = phi i1 [ false, %switch.default632 ], [ %val684, %or.phi ], !dbg !1017
  br i1 %val685, label %if.then686, label %if.exit702, !dbg !1017

if.then686:                                       ; preds = %and.phi
  %401 = load ptr, ptr %current, align 8, !dbg !1019
  store ptr %401, ptr %taddr687, align 8
  %402 = load ptr, ptr %taddr687, align 8
  %ptradd688 = getelementptr inbounds i8, ptr %current, i64 8, !dbg !1019
  %403 = load i64, ptr %ptradd688, align 8, !dbg !1019
  %"introspect*689" = inttoptr i64 %403 to ptr, !dbg !1019
  %typeid.kind690 = load i8, ptr %"introspect*689", align 8, !dbg !1019
  %ptradd691 = getelementptr inbounds i8, ptr %"introspect*689", i64 24, !dbg !1019
  %typeid.size = load i64, ptr %ptradd691, align 8, !dbg !1019
  %add692 = add i64 0, %typeid.size, !dbg !1019
  %gt = icmp ugt i64 0, %add692, !dbg !1019
  %sub = sub i64 %add692, 0, !dbg !1019
  %404 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !1019
  br i1 %404, label %panic693, label %checkok701, !dbg !1019

checkok701:                                       ; preds = %if.then686
  %size = sub i64 %add692, 0, !dbg !1019
  %405 = insertvalue %"char[]" undef, ptr %402, 0, !dbg !1019
  %406 = insertvalue %"char[]" %405, i64 %size, 1, !dbg !1019
  store %"char[]" %406, ptr %out, align 8, !dbg !1019
  br label %switch.exit777, !dbg !1021

if.exit702:                                       ; preds = %and.phi
  %ptradd703 = getelementptr inbounds i8, ptr %current, i64 8, !dbg !1022
  %407 = load i64, ptr %ptradd703, align 8, !dbg !1022
  %"introspect*704" = inttoptr i64 %407 to ptr, !dbg !1022
  %typeid.kind705 = load i8, ptr %"introspect*704", align 8, !dbg !1022
  %eq706 = icmp eq i8 %typeid.kind705, 19, !dbg !1022
  br i1 %eq706, label %if.then707, label %if.exit767, !dbg !1022

if.then707:                                       ; preds = %if.exit702
  %408 = load ptr, ptr %current, align 8, !dbg !1023
  %checknull708 = icmp eq ptr %408, null, !dbg !1023
  %409 = call i1 @llvm.expect.i1(i1 %checknull708, i1 false), !dbg !1023
  br i1 %409, label %panic709, label %checkok713, !dbg !1023

checkok713:                                       ; preds = %if.then707
  %410 = ptrtoint ptr %408 to i64, !dbg !1023
  %411 = urem i64 %410, 8, !dbg !1023
  %412 = icmp ne i64 %411, 0, !dbg !1023
  %413 = call i1 @llvm.expect.i1(i1 %412, i1 false), !dbg !1023
  br i1 %413, label %panic714, label %checkok724, !dbg !1023

checkok724:                                       ; preds = %checkok713
  %414 = load ptr, ptr %408, align 8, !dbg !1023
  %ptradd725 = getelementptr inbounds i8, ptr %current, i64 8, !dbg !1023
  %415 = load i64, ptr %ptradd725, align 8, !dbg !1023
  %"introspect*726" = inttoptr i64 %415 to ptr, !dbg !1023
  %typeid.kind727 = load i8, ptr %"introspect*726", align 8, !dbg !1023
  %eq728 = icmp eq i8 %typeid.kind727, 15, !dbg !1023
  br i1 %eq728, label %check_type_ok747, label %check_next729, !dbg !1023

check_next729:                                    ; preds = %checkok724
  %eq730 = icmp eq i8 %typeid.kind727, 19, !dbg !1023
  br i1 %eq730, label %check_type_ok747, label %check_next731, !dbg !1023

check_next731:                                    ; preds = %check_next729
  %eq732 = icmp eq i8 %typeid.kind727, 17, !dbg !1023
  br i1 %eq732, label %check_type_ok747, label %check_next733, !dbg !1023

check_next733:                                    ; preds = %check_next731
  %eq734 = icmp eq i8 %typeid.kind727, 8, !dbg !1023
  br i1 %eq734, label %check_type_ok747, label %check_next735, !dbg !1023

check_next735:                                    ; preds = %check_next733
  %eq736 = icmp eq i8 %typeid.kind727, 16, !dbg !1023
  br i1 %eq736, label %check_type_ok747, label %check_next737, !dbg !1023

check_next737:                                    ; preds = %check_next735
  %eq738 = icmp eq i8 %typeid.kind727, 18, !dbg !1023
  br i1 %eq738, label %check_type_ok747, label %check_next739, !dbg !1023

check_next739:                                    ; preds = %check_next737
  %eq740 = icmp eq i8 %typeid.kind727, 9, !dbg !1023
  br i1 %eq740, label %check_type_ok747, label %check_next741, !dbg !1023

check_next741:                                    ; preds = %check_next739
  %eq742 = icmp eq i8 %typeid.kind727, 12, !dbg !1023
  br i1 %eq742, label %check_type_ok747, label %check_next743, !dbg !1023

check_next743:                                    ; preds = %check_next741
  store %"char[]" { ptr @.panic_msg.53, i64 49 }, ptr %indirectarg744, align 8
  store %"char[]" { ptr @.file.22, i64 12 }, ptr %indirectarg745, align 8
  store %"char[]" { ptr @.func.94, i64 7 }, ptr %indirectarg746, align 8
  %416 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %416(ptr align 8 %indirectarg744, ptr align 8 %indirectarg745, ptr align 8 %indirectarg746, i32 499) #5, !dbg !1023
  unreachable, !dbg !1023

check_type_ok747:                                 ; preds = %check_next741, %check_next739, %check_next737, %check_next735, %check_next733, %check_next731, %check_next729, %checkok724
  %ptradd748 = getelementptr inbounds i8, ptr %"introspect*726", i64 32, !dbg !1023
  %typeid.inner749 = load i64, ptr %ptradd748, align 8, !dbg !1023
  %"introspect*750" = inttoptr i64 %typeid.inner749 to ptr, !dbg !1023
  %typeid.kind751 = load i8, ptr %"introspect*750", align 8, !dbg !1023
  %ptradd752 = getelementptr inbounds i8, ptr %"introspect*750", i64 24, !dbg !1023
  %typeid.size753 = load i64, ptr %ptradd752, align 8, !dbg !1023
  %add754 = add i64 0, %typeid.size753, !dbg !1023
  %gt755 = icmp ugt i64 0, %add754, !dbg !1023
  %sub756 = sub i64 %add754, 0, !dbg !1023
  %417 = call i1 @llvm.expect.i1(i1 %gt755, i1 false), !dbg !1023
  br i1 %417, label %panic757, label %checkok765, !dbg !1023

checkok765:                                       ; preds = %check_type_ok747
  %size766 = sub i64 %add754, 0, !dbg !1023
  %418 = insertvalue %"char[]" undef, ptr %414, 0, !dbg !1023
  %419 = insertvalue %"char[]" %418, i64 %size766, 1, !dbg !1023
  store %"char[]" %419, ptr %out, align 8, !dbg !1023
  br label %switch.exit777, !dbg !1025

if.exit767:                                       ; preds = %if.exit702
  %420 = load i64, ptr %total_len, align 8, !dbg !1026
  %421 = load ptr, ptr %self, align 8
  store %"char[]" { ptr @.str.108, i64 9 }, ptr %indirectarg770, align 8
  %422 = call i64 @std.io.Formatter.out_substr(ptr %retparam769, ptr %421, ptr align 8 %indirectarg770), !dbg !1026
  %not_err771 = icmp eq i64 %422, 0, !dbg !1026
  %423 = call i1 @llvm.expect.i1(i1 %not_err771, i1 true), !dbg !1026
  br i1 %423, label %after_check773, label %assign_optional772, !dbg !1026

assign_optional772:                               ; preds = %if.exit767
  store i64 %422, ptr %error_var768, align 8, !dbg !1026
  br label %guard_block774, !dbg !1026

after_check773:                                   ; preds = %if.exit767
  br label %noerr_block775, !dbg !1026

guard_block774:                                   ; preds = %assign_optional772
  %424 = load i64, ptr %error_var768, align 8, !dbg !1026
  ret i64 %424, !dbg !1026

noerr_block775:                                   ; preds = %after_check773
  %425 = load i64, ptr %retparam769, align 8, !dbg !1026
  %add776 = add i64 %420, %425, !dbg !1026
  store i64 %add776, ptr %total_len, align 8, !dbg !1026
  br label %loop.inc, !dbg !1027

switch.exit777:                                   ; preds = %checkok765, %checkok701, %checkok630
  %426 = load ptr, ptr %self, align 8, !dbg !1028
  %ptradd778 = getelementptr inbounds i8, ptr %426, i64 16, !dbg !1028
  %427 = load i32, ptr %ptradd778, align 8, !dbg !1028
  %lshrl = lshr i32 %427, 1, !dbg !1028
  %428 = and i32 1, %lshrl, !dbg !1028
  %trunc = trunc i32 %428 to i8, !dbg !1028
  %429 = trunc i8 %trunc to i1, !dbg !1028
  br i1 %429, label %if.then779, label %if.exit803, !dbg !1028

if.then779:                                       ; preds = %switch.exit777
    #dbg_declare(ptr %len780, !1029, !DIExpression(), !1031)
  %430 = load ptr, ptr %self, align 8, !dbg !1031
  %ptradd782 = getelementptr inbounds i8, ptr %430, i64 16, !dbg !1031
  %431 = load i32, ptr %ptradd782, align 8, !dbg !1031
  %lshrl783 = lshr i32 %431, 5, !dbg !1031
  %432 = and i32 1, %lshrl783, !dbg !1031
  %trunc784 = trunc i32 %432 to i8, !dbg !1031
  %433 = load ptr, ptr %self, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg786, ptr align 8 %out, i32 16, i1 false)
  %434 = call i64 @std.io.print_hex_chars(ptr %retparam785, ptr %433, ptr align 8 %indirectarg786, i8 zeroext %trunc784) #6, !dbg !1031
  %not_err787 = icmp eq i64 %434, 0, !dbg !1031
  %435 = call i1 @llvm.expect.i1(i1 %not_err787, i1 true), !dbg !1031
  br i1 %435, label %after_check789, label %assign_optional788, !dbg !1031

assign_optional788:                               ; preds = %if.then779
  store i64 %434, ptr %error_var781, align 8, !dbg !1031
  br label %guard_block790, !dbg !1031

after_check789:                                   ; preds = %if.then779
  br label %noerr_block791, !dbg !1031

guard_block790:                                   ; preds = %assign_optional788
  %436 = load i64, ptr %error_var781, align 8, !dbg !1031
  ret i64 %436, !dbg !1031

noerr_block791:                                   ; preds = %after_check789
  %437 = load i64, ptr %retparam785, align 8, !dbg !1031
  store i64 %437, ptr %len780, align 8, !dbg !1031
  %438 = load i64, ptr %total_len, align 8, !dbg !1032
  %439 = load i64, ptr %len780, align 8, !dbg !1032
  %add792 = add i64 %438, %439, !dbg !1032
  store i64 %add792, ptr %total_len, align 8, !dbg !1032
  %440 = load i64, ptr %total_len, align 8, !dbg !1033
  %441 = load ptr, ptr %self, align 8, !dbg !1033
  %ptradd794 = getelementptr inbounds i8, ptr %441, i64 16, !dbg !1033
  %ptradd795 = getelementptr inbounds i8, ptr %ptradd794, i64 4, !dbg !1033
  %442 = load i32, ptr %ptradd795, align 4, !dbg !1033
  %zext = zext i32 %442 to i64, !dbg !1033
  %443 = load i64, ptr %len780, align 8, !dbg !1033
  %444 = load ptr, ptr %self, align 8
  %445 = call i64 @std.io.Formatter.pad(ptr %retparam796, ptr %444, i8 32, i64 %zext, i64 %443) #6, !dbg !1033
  %not_err797 = icmp eq i64 %445, 0, !dbg !1033
  %446 = call i1 @llvm.expect.i1(i1 %not_err797, i1 true), !dbg !1033
  br i1 %446, label %after_check799, label %assign_optional798, !dbg !1033

assign_optional798:                               ; preds = %noerr_block791
  store i64 %445, ptr %error_var793, align 8, !dbg !1033
  br label %guard_block800, !dbg !1033

after_check799:                                   ; preds = %noerr_block791
  br label %noerr_block801, !dbg !1033

guard_block800:                                   ; preds = %assign_optional798
  %447 = load i64, ptr %error_var793, align 8, !dbg !1033
  ret i64 %447, !dbg !1033

noerr_block801:                                   ; preds = %after_check799
  %448 = load i64, ptr %retparam796, align 8, !dbg !1033
  %add802 = add i64 %440, %448, !dbg !1033
  store i64 %add802, ptr %total_len, align 8, !dbg !1033
  br label %loop.inc, !dbg !1034

if.exit803:                                       ; preds = %switch.exit777
  %449 = load ptr, ptr %self, align 8, !dbg !1035
  %ptradd804 = getelementptr inbounds i8, ptr %449, i64 16, !dbg !1035
  %ptradd805 = getelementptr inbounds i8, ptr %ptradd804, i64 4, !dbg !1035
  %450 = load i32, ptr %ptradd805, align 4, !dbg !1035
  %i2b806 = icmp ne i32 %450, 0, !dbg !1035
  br i1 %i2b806, label %if.then807, label %if.exit820, !dbg !1035

if.then807:                                       ; preds = %if.exit803
  %451 = load i64, ptr %total_len, align 8, !dbg !1036
  %452 = load ptr, ptr %self, align 8, !dbg !1036
  %ptradd809 = getelementptr inbounds i8, ptr %452, i64 16, !dbg !1036
  %ptradd810 = getelementptr inbounds i8, ptr %ptradd809, i64 4, !dbg !1036
  %453 = load i32, ptr %ptradd810, align 4, !dbg !1036
  %zext811 = zext i32 %453 to i64, !dbg !1036
  %ptradd812 = getelementptr inbounds i8, ptr %out, i64 8, !dbg !1036
  %454 = load i64, ptr %ptradd812, align 8, !dbg !1036
  %mul = mul i64 %454, 2, !dbg !1036
  %455 = load ptr, ptr %self, align 8
  %456 = call i64 @std.io.Formatter.pad(ptr %retparam813, ptr %455, i8 32, i64 %zext811, i64 %mul) #6, !dbg !1036
  %not_err814 = icmp eq i64 %456, 0, !dbg !1036
  %457 = call i1 @llvm.expect.i1(i1 %not_err814, i1 true), !dbg !1036
  br i1 %457, label %after_check816, label %assign_optional815, !dbg !1036

assign_optional815:                               ; preds = %if.then807
  store i64 %456, ptr %error_var808, align 8, !dbg !1036
  br label %guard_block817, !dbg !1036

after_check816:                                   ; preds = %if.then807
  br label %noerr_block818, !dbg !1036

guard_block817:                                   ; preds = %assign_optional815
  %458 = load i64, ptr %error_var808, align 8, !dbg !1036
  ret i64 %458, !dbg !1036

noerr_block818:                                   ; preds = %after_check816
  %459 = load i64, ptr %retparam813, align 8, !dbg !1036
  %add819 = add i64 %451, %459, !dbg !1036
  store i64 %add819, ptr %total_len, align 8, !dbg !1036
  br label %if.exit820, !dbg !1036

if.exit820:                                       ; preds = %noerr_block818, %if.exit803
  %460 = load i64, ptr %total_len, align 8, !dbg !1038
  %461 = load ptr, ptr %self, align 8, !dbg !1038
  %ptradd822 = getelementptr inbounds i8, ptr %461, i64 16, !dbg !1038
  %462 = load i32, ptr %ptradd822, align 8, !dbg !1038
  %lshrl823 = lshr i32 %462, 5, !dbg !1038
  %463 = and i32 1, %lshrl823, !dbg !1038
  %trunc824 = trunc i32 %463 to i8, !dbg !1038
  %464 = load ptr, ptr %self, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg826, ptr align 8 %out, i32 16, i1 false)
  %465 = call i64 @std.io.print_hex_chars(ptr %retparam825, ptr %464, ptr align 8 %indirectarg826, i8 zeroext %trunc824) #6, !dbg !1038
  %not_err827 = icmp eq i64 %465, 0, !dbg !1038
  %466 = call i1 @llvm.expect.i1(i1 %not_err827, i1 true), !dbg !1038
  br i1 %466, label %after_check829, label %assign_optional828, !dbg !1038

assign_optional828:                               ; preds = %if.exit820
  store i64 %465, ptr %error_var821, align 8, !dbg !1038
  br label %guard_block830, !dbg !1038

after_check829:                                   ; preds = %if.exit820
  br label %noerr_block831, !dbg !1038

guard_block830:                                   ; preds = %assign_optional828
  %467 = load i64, ptr %error_var821, align 8, !dbg !1038
  ret i64 %467, !dbg !1038

noerr_block831:                                   ; preds = %after_check829
  %468 = load i64, ptr %retparam825, align 8, !dbg !1038
  %add832 = add i64 %460, %468, !dbg !1038
  store i64 %add832, ptr %total_len, align 8, !dbg !1038
  br label %loop.inc, !dbg !1039

switch.case833:                                   ; preds = %switch.entry237
  %469 = load ptr, ptr %self, align 8, !dbg !1040
  %ptradd834 = getelementptr inbounds i8, ptr %469, i64 16, !dbg !1040
  %470 = load i32, ptr %ptradd834, align 8, !dbg !1040
  %lshrl835 = lshr i32 %470, 1, !dbg !1040
  %471 = and i32 1, %lshrl835, !dbg !1040
  %trunc836 = trunc i32 %471 to i8, !dbg !1040
  %472 = trunc i8 %trunc836 to i1, !dbg !1040
  br i1 %472, label %if.then837, label %if.exit859, !dbg !1040

if.then837:                                       ; preds = %switch.case833
    #dbg_declare(ptr %len838, !1042, !DIExpression(), !1044)
  %473 = load ptr, ptr %self, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg841, ptr align 8 %current, i32 16, i1 false)
  %474 = call i64 @std.io.Formatter.out_str(ptr %retparam840, ptr %473, ptr align 8 %indirectarg841), !dbg !1044
  %not_err842 = icmp eq i64 %474, 0, !dbg !1044
  %475 = call i1 @llvm.expect.i1(i1 %not_err842, i1 true), !dbg !1044
  br i1 %475, label %after_check844, label %assign_optional843, !dbg !1044

assign_optional843:                               ; preds = %if.then837
  store i64 %474, ptr %error_var839, align 8, !dbg !1044
  br label %guard_block845, !dbg !1044

after_check844:                                   ; preds = %if.then837
  br label %noerr_block846, !dbg !1044

guard_block845:                                   ; preds = %assign_optional843
  %476 = load i64, ptr %error_var839, align 8, !dbg !1044
  ret i64 %476, !dbg !1044

noerr_block846:                                   ; preds = %after_check844
  %477 = load i64, ptr %retparam840, align 8, !dbg !1044
  store i64 %477, ptr %len838, align 8, !dbg !1044
  %478 = load i64, ptr %total_len, align 8, !dbg !1045
  %479 = load i64, ptr %len838, align 8, !dbg !1045
  %add847 = add i64 %478, %479, !dbg !1045
  store i64 %add847, ptr %total_len, align 8, !dbg !1045
  %480 = load i64, ptr %total_len, align 8, !dbg !1046
  %481 = load ptr, ptr %self, align 8, !dbg !1046
  %ptradd849 = getelementptr inbounds i8, ptr %481, i64 16, !dbg !1046
  %ptradd850 = getelementptr inbounds i8, ptr %ptradd849, i64 4, !dbg !1046
  %482 = load i32, ptr %ptradd850, align 4, !dbg !1046
  %zext851 = zext i32 %482 to i64, !dbg !1046
  %483 = load i64, ptr %len838, align 8, !dbg !1046
  %484 = load ptr, ptr %self, align 8
  %485 = call i64 @std.io.Formatter.pad(ptr %retparam852, ptr %484, i8 32, i64 %zext851, i64 %483) #6, !dbg !1046
  %not_err853 = icmp eq i64 %485, 0, !dbg !1046
  %486 = call i1 @llvm.expect.i1(i1 %not_err853, i1 true), !dbg !1046
  br i1 %486, label %after_check855, label %assign_optional854, !dbg !1046

assign_optional854:                               ; preds = %noerr_block846
  store i64 %485, ptr %error_var848, align 8, !dbg !1046
  br label %guard_block856, !dbg !1046

after_check855:                                   ; preds = %noerr_block846
  br label %noerr_block857, !dbg !1046

guard_block856:                                   ; preds = %assign_optional854
  %487 = load i64, ptr %error_var848, align 8, !dbg !1046
  ret i64 %487, !dbg !1046

noerr_block857:                                   ; preds = %after_check855
  %488 = load i64, ptr %retparam852, align 8, !dbg !1046
  %add858 = add i64 %480, %488, !dbg !1046
  store i64 %add858, ptr %total_len, align 8, !dbg !1046
  br label %loop.inc, !dbg !1047

if.exit859:                                       ; preds = %switch.case833
  %489 = load ptr, ptr %self, align 8, !dbg !1048
  %ptradd860 = getelementptr inbounds i8, ptr %489, i64 16, !dbg !1048
  %ptradd861 = getelementptr inbounds i8, ptr %ptradd860, i64 4, !dbg !1048
  %490 = load i32, ptr %ptradd861, align 4, !dbg !1048
  %i2b862 = icmp ne i32 %490, 0, !dbg !1048
  br i1 %i2b862, label %if.then863, label %if.exit887, !dbg !1048

if.then863:                                       ; preds = %if.exit859
    #dbg_declare(ptr %out_fn, !1049, !DIExpression(), !1051)
  %491 = load ptr, ptr %self, align 8, !dbg !1051
  %ptradd864 = getelementptr inbounds i8, ptr %491, i64 8, !dbg !1051
  %492 = load ptr, ptr %ptradd864, align 8, !dbg !1051
  store ptr %492, ptr %out_fn, align 8, !dbg !1051
  %493 = load ptr, ptr %self, align 8, !dbg !1052
  %ptradd865 = getelementptr inbounds i8, ptr %493, i64 8, !dbg !1052
  store ptr @std.io.out_null_fn, ptr %ptradd865, align 8, !dbg !1052
    #dbg_declare(ptr %len866, !1053, !DIExpression(), !1054)
  %494 = load ptr, ptr %self, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg869, ptr align 8 %current, i32 16, i1 false)
  %495 = call i64 @std.io.Formatter.out_str(ptr %retparam868, ptr %494, ptr align 8 %indirectarg869), !dbg !1054
  %not_err870 = icmp eq i64 %495, 0, !dbg !1054
  %496 = call i1 @llvm.expect.i1(i1 %not_err870, i1 true), !dbg !1054
  br i1 %496, label %after_check872, label %assign_optional871, !dbg !1054

assign_optional871:                               ; preds = %if.then863
  store i64 %495, ptr %error_var867, align 8, !dbg !1054
  br label %guard_block873, !dbg !1054

after_check872:                                   ; preds = %if.then863
  br label %noerr_block874, !dbg !1054

guard_block873:                                   ; preds = %assign_optional871
  %497 = load i64, ptr %error_var867, align 8, !dbg !1054
  ret i64 %497, !dbg !1054

noerr_block874:                                   ; preds = %after_check872
  %498 = load i64, ptr %retparam868, align 8, !dbg !1054
  store i64 %498, ptr %len866, align 8, !dbg !1054
  %499 = load ptr, ptr %self, align 8, !dbg !1055
  %ptradd875 = getelementptr inbounds i8, ptr %499, i64 8, !dbg !1055
  %500 = load ptr, ptr %out_fn, align 8, !dbg !1055
  store ptr %500, ptr %ptradd875, align 8, !dbg !1055
  %501 = load i64, ptr %total_len, align 8, !dbg !1056
  %502 = load ptr, ptr %self, align 8, !dbg !1056
  %ptradd877 = getelementptr inbounds i8, ptr %502, i64 16, !dbg !1056
  %ptradd878 = getelementptr inbounds i8, ptr %ptradd877, i64 4, !dbg !1056
  %503 = load i32, ptr %ptradd878, align 4, !dbg !1056
  %zext879 = zext i32 %503 to i64, !dbg !1056
  %504 = load i64, ptr %len866, align 8, !dbg !1056
  %505 = load ptr, ptr %self, align 8
  %506 = call i64 @std.io.Formatter.pad(ptr %retparam880, ptr %505, i8 32, i64 %zext879, i64 %504) #6, !dbg !1056
  %not_err881 = icmp eq i64 %506, 0, !dbg !1056
  %507 = call i1 @llvm.expect.i1(i1 %not_err881, i1 true), !dbg !1056
  br i1 %507, label %after_check883, label %assign_optional882, !dbg !1056

assign_optional882:                               ; preds = %noerr_block874
  store i64 %506, ptr %error_var876, align 8, !dbg !1056
  br label %guard_block884, !dbg !1056

after_check883:                                   ; preds = %noerr_block874
  br label %noerr_block885, !dbg !1056

guard_block884:                                   ; preds = %assign_optional882
  %508 = load i64, ptr %error_var876, align 8, !dbg !1056
  ret i64 %508, !dbg !1056

noerr_block885:                                   ; preds = %after_check883
  %509 = load i64, ptr %retparam880, align 8, !dbg !1056
  %add886 = add i64 %501, %509, !dbg !1056
  store i64 %add886, ptr %total_len, align 8, !dbg !1056
  br label %if.exit887, !dbg !1056

if.exit887:                                       ; preds = %noerr_block885, %if.exit859
  %510 = load i64, ptr %total_len, align 8, !dbg !1057
  %511 = load ptr, ptr %self, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg890, ptr align 8 %current, i32 16, i1 false)
  %512 = call i64 @std.io.Formatter.out_str(ptr %retparam889, ptr %511, ptr align 8 %indirectarg890), !dbg !1057
  %not_err891 = icmp eq i64 %512, 0, !dbg !1057
  %513 = call i1 @llvm.expect.i1(i1 %not_err891, i1 true), !dbg !1057
  br i1 %513, label %after_check893, label %assign_optional892, !dbg !1057

assign_optional892:                               ; preds = %if.exit887
  store i64 %512, ptr %error_var888, align 8, !dbg !1057
  br label %guard_block894, !dbg !1057

after_check893:                                   ; preds = %if.exit887
  br label %noerr_block895, !dbg !1057

guard_block894:                                   ; preds = %assign_optional892
  %514 = load i64, ptr %error_var888, align 8, !dbg !1057
  ret i64 %514, !dbg !1057

noerr_block895:                                   ; preds = %after_check893
  %515 = load i64, ptr %retparam889, align 8, !dbg !1057
  %add896 = add i64 %510, %515, !dbg !1057
  store i64 %add896, ptr %total_len, align 8, !dbg !1057
  br label %loop.inc, !dbg !1058

switch.case897:                                   ; preds = %switch.entry237
  %516 = load ptr, ptr %self, align 8, !dbg !1059
  %ptradd898 = getelementptr inbounds i8, ptr %516, i64 16, !dbg !1059
  %517 = load i32, ptr %ptradd898, align 8, !dbg !1059
  %518 = and i32 %517, -2, !dbg !1059
  %519 = or i32 %518, 1, !dbg !1059
  store i32 %519, ptr %ptradd898, align 8, !dbg !1059
  %520 = load ptr, ptr %self, align 8, !dbg !1061
  %ptradd899 = getelementptr inbounds i8, ptr %520, i64 16, !dbg !1061
  %521 = load i32, ptr %ptradd899, align 8, !dbg !1061
  %522 = and i32 %521, -17, !dbg !1061
  %523 = or i32 %522, 16, !dbg !1061
  store i32 %523, ptr %ptradd899, align 8, !dbg !1061
  store i32 16, ptr %base, align 4, !dbg !1062
  br label %switch.exit929, !dbg !1062

switch.default900:                                ; preds = %switch.entry237
  %524 = load ptr, ptr %self, align 8
  store ptr %524, ptr %self901, align 8
  store i64 ptrtoint (ptr @std.io.INVALID_FORMAT to i64), ptr %f902, align 8
  %525 = load ptr, ptr %self901, align 8, !dbg !1063
  %neq904 = icmp ne ptr %525, null, !dbg !1063
  br i1 %neq904, label %assert_ok909, label %assert_fail905, !dbg !1063

assert_fail905:                                   ; preds = %switch.default900
  store %"char[]" { ptr @.panic_msg.52, i64 32 }, ptr %indirectarg906, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg907, align 8
  store %"char[]" { ptr @.func.94, i64 7 }, ptr %indirectarg908, align 8
  %526 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %526(ptr align 8 %indirectarg906, ptr align 8 %indirectarg907, ptr align 8 %indirectarg908, i32 25) #5, !dbg !1063
  unreachable, !dbg !1063

assert_ok909:                                     ; preds = %switch.default900
  %527 = load ptr, ptr %self901, align 8, !dbg !1068
  %ptradd910 = getelementptr inbounds i8, ptr %527, i64 16, !dbg !1068
  %ptradd911 = getelementptr inbounds i8, ptr %ptradd910, i64 16, !dbg !1068
  %528 = load i64, ptr %ptradd911, align 8, !dbg !1068
  %i2b912 = icmp ne i64 %528, 0, !dbg !1068
  br i1 %i2b912, label %if.then913, label %if.exit916, !dbg !1068

if.then913:                                       ; preds = %assert_ok909
  %529 = load ptr, ptr %self901, align 8, !dbg !1068
  %ptradd914 = getelementptr inbounds i8, ptr %529, i64 16, !dbg !1068
  %ptradd915 = getelementptr inbounds i8, ptr %ptradd914, i64 16, !dbg !1068
  %530 = load i64, ptr %ptradd915, align 8, !dbg !1068
  store i64 %530, ptr %blockret903, align 8, !dbg !1068
  br label %expr_block.exit919, !dbg !1068

if.exit916:                                       ; preds = %assert_ok909
  %531 = load ptr, ptr %self901, align 8, !dbg !1069
  %ptradd917 = getelementptr inbounds i8, ptr %531, i64 16, !dbg !1069
  %ptradd918 = getelementptr inbounds i8, ptr %ptradd917, i64 16, !dbg !1069
  %532 = load i64, ptr %f902, align 8, !dbg !1069
  store i64 %532, ptr %ptradd918, align 8, !dbg !1069
  %533 = load i64, ptr %f902, align 8, !dbg !1070
  store i64 %533, ptr %blockret903, align 8, !dbg !1070
  br label %expr_block.exit919, !dbg !1070

expr_block.exit919:                               ; preds = %if.exit916, %if.then913
  %534 = load i64, ptr %total_len, align 8, !dbg !1071
  %535 = load ptr, ptr %self, align 8
  store %"char[]" { ptr @.str.109, i64 12 }, ptr %indirectarg922, align 8
  %536 = call i64 @std.io.Formatter.out_substr(ptr %retparam921, ptr %535, ptr align 8 %indirectarg922), !dbg !1071
  %not_err923 = icmp eq i64 %536, 0, !dbg !1071
  %537 = call i1 @llvm.expect.i1(i1 %not_err923, i1 true), !dbg !1071
  br i1 %537, label %after_check925, label %assign_optional924, !dbg !1071

assign_optional924:                               ; preds = %expr_block.exit919
  store i64 %536, ptr %error_var920, align 8, !dbg !1071
  br label %guard_block926, !dbg !1071

after_check925:                                   ; preds = %expr_block.exit919
  br label %noerr_block927, !dbg !1071

guard_block926:                                   ; preds = %assign_optional924
  %538 = load i64, ptr %error_var920, align 8, !dbg !1071
  ret i64 %538, !dbg !1071

noerr_block927:                                   ; preds = %after_check925
  %539 = load i64, ptr %retparam921, align 8, !dbg !1071
  %add928 = add i64 %534, %539, !dbg !1071
  store i64 %add928, ptr %total_len, align 8, !dbg !1071
  br label %loop.inc, !dbg !1072

switch.exit929:                                   ; preds = %switch.case897, %switch.case248, %switch.case245, %switch.case242, %switch.case238
  %540 = load i32, ptr %base, align 4, !dbg !1073
  %neq930 = icmp ne i32 10, %540, !dbg !1073
  br i1 %neq930, label %if.then931, label %if.exit934, !dbg !1073

if.then931:                                       ; preds = %switch.exit929
  %541 = load ptr, ptr %self, align 8, !dbg !1074
  %ptradd932 = getelementptr inbounds i8, ptr %541, i64 16, !dbg !1074
  %542 = load i32, ptr %ptradd932, align 8, !dbg !1074
  %543 = and i32 %542, -5, !dbg !1074
  store i32 %543, ptr %ptradd932, align 8, !dbg !1074
  %544 = load ptr, ptr %self, align 8, !dbg !1076
  %ptradd933 = getelementptr inbounds i8, ptr %544, i64 16, !dbg !1076
  %545 = load i32, ptr %ptradd933, align 8, !dbg !1076
  %546 = and i32 %545, -9, !dbg !1076
  store i32 %546, ptr %ptradd933, align 8, !dbg !1076
  br label %if.exit934, !dbg !1076

if.exit934:                                       ; preds = %if.then931, %switch.exit929
  %547 = load ptr, ptr %self, align 8, !dbg !1077
  %ptradd935 = getelementptr inbounds i8, ptr %547, i64 16, !dbg !1077
  %548 = load i32, ptr %ptradd935, align 8, !dbg !1077
  %lshrl936 = lshr i32 %548, 6, !dbg !1077
  %549 = and i32 1, %lshrl936, !dbg !1077
  %trunc937 = trunc i32 %549 to i8, !dbg !1077
  %550 = trunc i8 %trunc937 to i1, !dbg !1077
  br i1 %550, label %if.then938, label %if.exit940, !dbg !1077

if.then938:                                       ; preds = %if.exit934
  %551 = load ptr, ptr %self, align 8, !dbg !1077
  %ptradd939 = getelementptr inbounds i8, ptr %551, i64 16, !dbg !1077
  %552 = load i32, ptr %ptradd939, align 8, !dbg !1077
  %553 = and i32 %552, -2, !dbg !1077
  store i32 %553, ptr %ptradd939, align 8, !dbg !1077
  br label %if.exit940, !dbg !1077

if.exit940:                                       ; preds = %if.then938, %if.exit934
    #dbg_declare(ptr %is_neg, !1078, !DIExpression(), !1079)
  store i8 0, ptr %is_neg, align 1, !dbg !1079
  %554 = load i64, ptr %total_len, align 8, !dbg !1080
  %555 = load ptr, ptr %self, align 8
  store ptr %555, ptr %f942, align 8
    #dbg_declare(ptr %len944, !1081, !DIExpression(), !1083)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg947, ptr align 8 %current, i32 16, i1 false)
  %556 = call i64 @std.io.int_from_any(ptr %retparam946, ptr align 8 %indirectarg947, ptr %is_neg), !dbg !1084
  %not_err948 = icmp eq i64 %556, 0, !dbg !1084
  %557 = call i1 @llvm.expect.i1(i1 %not_err948, i1 true), !dbg !1084
  br i1 %557, label %after_check950, label %assign_optional949, !dbg !1084

assign_optional949:                               ; preds = %if.exit940
  store i64 %556, ptr %len.f945, align 8, !dbg !1084
  br label %after_assign956, !dbg !1084

after_check950:                                   ; preds = %if.exit940
  %558 = load ptr, ptr %self, align 8
  %559 = load i128, ptr %retparam946, align 16
  store i128 %559, ptr %indirectarg952, align 16
  %560 = load i8, ptr %is_neg, align 1
  %561 = load i32, ptr %base, align 4
  %562 = call i64 @std.io.Formatter.ntoa(ptr %retparam951, ptr %558, ptr align 16 %indirectarg952, i8 zeroext %560, i32 %561), !dbg !1083
  %not_err953 = icmp eq i64 %562, 0, !dbg !1083
  %563 = call i1 @llvm.expect.i1(i1 %not_err953, i1 true), !dbg !1083
  br i1 %563, label %after_check955, label %assign_optional954, !dbg !1083

assign_optional954:                               ; preds = %after_check950
  store i64 %562, ptr %len.f945, align 8, !dbg !1083
  br label %after_assign956, !dbg !1083

after_check955:                                   ; preds = %after_check950
  %564 = load i64, ptr %retparam951, align 8, !dbg !1083
  store i64 %564, ptr %len944, align 8, !dbg !1083
  store i64 0, ptr %len.f945, align 8, !dbg !1083
  br label %after_assign956, !dbg !1083

after_assign956:                                  ; preds = %after_check955, %assign_optional954, %assign_optional949
    #dbg_declare(ptr %err957, !1085, !DIExpression(), !1086)
  br label %testblock958, !dbg !1086

testblock958:                                     ; preds = %after_assign956
  %optval959 = load i64, ptr %len.f945, align 8, !dbg !1086
  %not_err960 = icmp eq i64 %optval959, 0, !dbg !1086
  %565 = call i1 @llvm.expect.i1(i1 %not_err960, i1 true), !dbg !1086
  br i1 %565, label %after_check962, label %assign_optional961, !dbg !1086

assign_optional961:                               ; preds = %testblock958
  store i64 %optval959, ptr %err957, align 8, !dbg !1086
  br label %end_block963, !dbg !1086

after_check962:                                   ; preds = %testblock958
  store i64 0, ptr %err957, align 8, !dbg !1086
  br label %end_block963, !dbg !1086

end_block963:                                     ; preds = %after_check962, %assign_optional961
  %566 = load i64, ptr %err957, align 8, !dbg !1086
  %i2b964 = icmp ne i64 %566, 0, !dbg !1086
  br i1 %i2b964, label %if.then965, label %if.exit1021, !dbg !1086

if.then965:                                       ; preds = %end_block963
  %567 = load i64, ptr %err957, align 8
  store i64 %567, ptr %switch966, align 8
  br label %switch.entry967

switch.entry967:                                  ; preds = %if.then965
  %568 = load i64, ptr %switch966, align 8
  %eq968 = icmp eq i64 ptrtoint (ptr @std.io.BUFFER_EXCEEDED to i64), %568, !dbg !1087
  br i1 %eq968, label %switch.case971, label %next_if969, !dbg !1087

next_if969:                                       ; preds = %switch.entry967
  %eq970 = icmp eq i64 ptrtoint (ptr @std.io.INTERNAL_BUFFER_EXCEEDED to i64), %568, !dbg !1090
  br i1 %eq970, label %switch.case971, label %next_if991, !dbg !1090

switch.case971:                                   ; preds = %next_if969, %switch.entry967
  %569 = load ptr, ptr %f942, align 8
  store ptr %569, ptr %self972, align 8
  %570 = load i64, ptr %err957, align 8
  store i64 %570, ptr %f973, align 8
  %571 = load ptr, ptr %self972, align 8, !dbg !1091
  %neq975 = icmp ne ptr %571, null, !dbg !1091
  br i1 %neq975, label %assert_ok980, label %assert_fail976, !dbg !1091

assert_fail976:                                   ; preds = %switch.case971
  store %"char[]" { ptr @.panic_msg.52, i64 32 }, ptr %indirectarg977, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg978, align 8
  store %"char[]" { ptr @.func.94, i64 7 }, ptr %indirectarg979, align 8
  %572 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %572(ptr align 8 %indirectarg977, ptr align 8 %indirectarg978, ptr align 8 %indirectarg979, i32 25) #5, !dbg !1091
  unreachable, !dbg !1091

assert_ok980:                                     ; preds = %switch.case971
  %573 = load ptr, ptr %self972, align 8, !dbg !1096
  %ptradd981 = getelementptr inbounds i8, ptr %573, i64 16, !dbg !1096
  %ptradd982 = getelementptr inbounds i8, ptr %ptradd981, i64 16, !dbg !1096
  %574 = load i64, ptr %ptradd982, align 8, !dbg !1096
  %i2b983 = icmp ne i64 %574, 0, !dbg !1096
  br i1 %i2b983, label %if.then984, label %if.exit987, !dbg !1096

if.then984:                                       ; preds = %assert_ok980
  %575 = load ptr, ptr %self972, align 8, !dbg !1096
  %ptradd985 = getelementptr inbounds i8, ptr %575, i64 16, !dbg !1096
  %ptradd986 = getelementptr inbounds i8, ptr %ptradd985, i64 16, !dbg !1096
  %576 = load i64, ptr %ptradd986, align 8, !dbg !1096
  store i64 %576, ptr %blockret974, align 8, !dbg !1096
  br label %expr_block.exit990, !dbg !1096

if.exit987:                                       ; preds = %assert_ok980
  %577 = load ptr, ptr %self972, align 8, !dbg !1097
  %ptradd988 = getelementptr inbounds i8, ptr %577, i64 16, !dbg !1097
  %ptradd989 = getelementptr inbounds i8, ptr %ptradd988, i64 16, !dbg !1097
  %578 = load i64, ptr %f973, align 8, !dbg !1097
  store i64 %578, ptr %ptradd989, align 8, !dbg !1097
  %579 = load i64, ptr %f973, align 8, !dbg !1098
  store i64 %579, ptr %blockret974, align 8, !dbg !1098
  br label %expr_block.exit990, !dbg !1098

expr_block.exit990:                               ; preds = %if.exit987, %if.then984
  %580 = load i64, ptr %blockret974, align 8, !dbg !1098
  store i64 %580, ptr %error_var941, align 8, !dbg !1098
  br label %guard_block1022, !dbg !1098

next_if991:                                       ; preds = %next_if969
  br label %switch.default992, !dbg !1098

switch.default992:                                ; preds = %next_if991
  %581 = load ptr, ptr %f942, align 8
  store ptr %581, ptr %self993, align 8
  store i64 ptrtoint (ptr @std.io.INVALID_ARGUMENT to i64), ptr %f994, align 8
  %582 = load ptr, ptr %self993, align 8, !dbg !1099
  %neq996 = icmp ne ptr %582, null, !dbg !1099
  br i1 %neq996, label %assert_ok1001, label %assert_fail997, !dbg !1099

assert_fail997:                                   ; preds = %switch.default992
  store %"char[]" { ptr @.panic_msg.52, i64 32 }, ptr %indirectarg998, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg999, align 8
  store %"char[]" { ptr @.func.94, i64 7 }, ptr %indirectarg1000, align 8
  %583 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %583(ptr align 8 %indirectarg998, ptr align 8 %indirectarg999, ptr align 8 %indirectarg1000, i32 25) #5, !dbg !1099
  unreachable, !dbg !1099

assert_ok1001:                                    ; preds = %switch.default992
  %584 = load ptr, ptr %self993, align 8, !dbg !1104
  %ptradd1002 = getelementptr inbounds i8, ptr %584, i64 16, !dbg !1104
  %ptradd1003 = getelementptr inbounds i8, ptr %ptradd1002, i64 16, !dbg !1104
  %585 = load i64, ptr %ptradd1003, align 8, !dbg !1104
  %i2b1004 = icmp ne i64 %585, 0, !dbg !1104
  br i1 %i2b1004, label %if.then1005, label %if.exit1008, !dbg !1104

if.then1005:                                      ; preds = %assert_ok1001
  %586 = load ptr, ptr %self993, align 8, !dbg !1104
  %ptradd1006 = getelementptr inbounds i8, ptr %586, i64 16, !dbg !1104
  %ptradd1007 = getelementptr inbounds i8, ptr %ptradd1006, i64 16, !dbg !1104
  %587 = load i64, ptr %ptradd1007, align 8, !dbg !1104
  store i64 %587, ptr %blockret995, align 8, !dbg !1104
  br label %expr_block.exit1011, !dbg !1104

if.exit1008:                                      ; preds = %assert_ok1001
  %588 = load ptr, ptr %self993, align 8, !dbg !1105
  %ptradd1009 = getelementptr inbounds i8, ptr %588, i64 16, !dbg !1105
  %ptradd1010 = getelementptr inbounds i8, ptr %ptradd1009, i64 16, !dbg !1105
  %589 = load i64, ptr %f994, align 8, !dbg !1105
  store i64 %589, ptr %ptradd1010, align 8, !dbg !1105
  %590 = load i64, ptr %f994, align 8, !dbg !1106
  store i64 %590, ptr %blockret995, align 8, !dbg !1106
  br label %expr_block.exit1011, !dbg !1106

expr_block.exit1011:                              ; preds = %if.exit1008, %if.then1005
  %591 = load i64, ptr %blockret995, align 8, !dbg !1106
  store i64 %591, ptr %err957, align 8, !dbg !1106
  %592 = load ptr, ptr %f942, align 8
  store %"char[]" { ptr @.str.110, i64 9 }, ptr %indirectarg1014, align 8
  %593 = call i64 @std.io.Formatter.out_substr(ptr %retparam1013, ptr %592, ptr align 8 %indirectarg1014), !dbg !1107
  %not_err1015 = icmp eq i64 %593, 0, !dbg !1107
  %594 = call i1 @llvm.expect.i1(i1 %not_err1015, i1 true), !dbg !1107
  br i1 %594, label %after_check1017, label %assign_optional1016, !dbg !1107

assign_optional1016:                              ; preds = %expr_block.exit1011
  store i64 %593, ptr %error_var1012, align 8, !dbg !1107
  br label %guard_block1018, !dbg !1107

after_check1017:                                  ; preds = %expr_block.exit1011
  br label %noerr_block1019, !dbg !1107

guard_block1018:                                  ; preds = %assign_optional1016
  %595 = load i64, ptr %error_var1012, align 8, !dbg !1107
  store i64 %595, ptr %error_var941, align 8, !dbg !1107
  br label %guard_block1022, !dbg !1107

noerr_block1019:                                  ; preds = %after_check1017
  %596 = load i64, ptr %err957, align 8, !dbg !1108
  store i64 %596, ptr %error_var941, align 8, !dbg !1108
  br label %guard_block1022, !dbg !1108

if.exit1021:                                      ; preds = %end_block963
  br label %noerr_block1023, !dbg !1109

guard_block1022:                                  ; preds = %noerr_block1019, %guard_block1018, %expr_block.exit990
  %597 = load i64, ptr %error_var941, align 8, !dbg !1109
  ret i64 %597, !dbg !1109

noerr_block1023:                                  ; preds = %if.exit1021
  %598 = load i64, ptr %len944, align 8, !dbg !1109
  %add1024 = add i64 %554, %598, !dbg !1080
  store i64 %add1024, ptr %total_len, align 8, !dbg !1080
  br label %loop.inc, !dbg !1080

loop.inc:                                         ; preds = %noerr_block1023, %noerr_block927, %noerr_block895, %noerr_block857, %noerr_block831, %noerr_block801, %noerr_block775, %noerr_block597, %noerr_block587, %noerr_block501, %noerr_block415, %noerr_block329, %noerr_block208, %noerr_block48, %noerr_block
  %599 = load i64, ptr %i, align 8, !dbg !760
  %add1025 = add i64 %599, 1, !dbg !760
  store i64 %add1025, ptr %i, align 8, !dbg !760
  br label %loop.cond, !dbg !760

loop.exit1026:                                    ; preds = %loop.cond
  %600 = load ptr, ptr %self, align 8, !dbg !1110
  %ptradd1027 = getelementptr inbounds i8, ptr %600, i64 16, !dbg !1110
  %ptradd1028 = getelementptr inbounds i8, ptr %ptradd1027, i64 16, !dbg !1110
  %601 = load i64, ptr %ptradd1028, align 8, !dbg !1110
  %i2b1029 = icmp ne i64 %601, 0, !dbg !1110
  br i1 %i2b1029, label %if.then1030, label %if.exit1033, !dbg !1110

if.then1030:                                      ; preds = %loop.exit1026
  %602 = load ptr, ptr %self, align 8, !dbg !1110
  %ptradd1031 = getelementptr inbounds i8, ptr %602, i64 16, !dbg !1110
  %ptradd1032 = getelementptr inbounds i8, ptr %ptradd1031, i64 16, !dbg !1110
  %603 = load i64, ptr %ptradd1032, align 8, !dbg !1110
  ret i64 %603, !dbg !1110

if.exit1033:                                      ; preds = %loop.exit1026
  %604 = load i64, ptr %total_len, align 8, !dbg !1111
  store i64 %604, ptr %0, align 8, !dbg !1111
  ret i64 0, !dbg !1111

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.22, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.94, i64 7 }, ptr %indirectarg2, align 8
  %605 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %605(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 358) #5, !dbg !745
  unreachable, !dbg !745

panic8:                                           ; preds = %loop.body
  store i64 %13, ptr %taddr, align 8
  %606 = insertvalue %any undef, ptr %taddr, 0
  %607 = insertvalue %any %606, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %15, ptr %taddr9, align 8
  %608 = insertvalue %any undef, ptr %taddr9, 0
  %609 = insertvalue %any %608, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.71, i64 59 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.file.22, i64 12 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.func.94, i64 7 }, ptr %indirectarg12, align 8
  store %any %607, ptr %varargslots, align 16
  %ptradd13 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %609, ptr %ptradd13, align 16
  %610 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %610, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg14, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, i32 372, ptr align 8 %indirectarg14) #5, !dbg !763
  unreachable, !dbg !763

panic29:                                          ; preds = %if.exit26
  store i64 %33, ptr %taddr30, align 8
  %611 = insertvalue %any undef, ptr %taddr30, 0
  %612 = insertvalue %any %611, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %35, ptr %taddr31, align 8
  %613 = insertvalue %any undef, ptr %taddr31, 0
  %614 = insertvalue %any %613, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.71, i64 59 }, ptr %indirectarg32, align 8
  store %"char[]" { ptr @.file.22, i64 12 }, ptr %indirectarg33, align 8
  store %"char[]" { ptr @.func.94, i64 7 }, ptr %indirectarg34, align 8
  store %any %612, ptr %varargslots35, align 16
  %ptradd36 = getelementptr inbounds i8, ptr %varargslots35, i64 16
  store %any %614, ptr %ptradd36, align 16
  %615 = insertvalue %"any[]" undef, ptr %varargslots35, 0
  %"$$temp37" = insertvalue %"any[]" %615, i64 2, 1
  store %"any[]" %"$$temp37", ptr %indirectarg38, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg32, ptr align 8 %indirectarg33, ptr align 8 %indirectarg34, i32 381, ptr align 8 %indirectarg38) #5, !dbg !773
  unreachable, !dbg !773

panic75:                                          ; preds = %if.exit72
  store i64 %75, ptr %taddr76, align 8
  %616 = insertvalue %any undef, ptr %taddr76, 0
  %617 = insertvalue %any %616, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %77, ptr %taddr77, align 8
  %618 = insertvalue %any undef, ptr %taddr77, 0
  %619 = insertvalue %any %618, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.71, i64 59 }, ptr %indirectarg78, align 8
  store %"char[]" { ptr @.file.22, i64 12 }, ptr %indirectarg79, align 8
  store %"char[]" { ptr @.func.94, i64 7 }, ptr %indirectarg80, align 8
  store %any %617, ptr %varargslots81, align 16
  %ptradd82 = getelementptr inbounds i8, ptr %varargslots81, i64 16
  store %any %619, ptr %ptradd82, align 16
  %620 = insertvalue %"any[]" undef, ptr %varargslots81, 0
  %"$$temp83" = insertvalue %"any[]" %620, i64 2, 1
  store %"any[]" %"$$temp83", ptr %indirectarg84, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg78, ptr align 8 %indirectarg79, ptr align 8 %indirectarg80, i32 401, ptr align 8 %indirectarg84) #5, !dbg !799
  unreachable, !dbg !799

panic107:                                         ; preds = %if.exit104
  store i64 %93, ptr %taddr108, align 8
  %621 = insertvalue %any undef, ptr %taddr108, 0
  %622 = insertvalue %any %621, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %95, ptr %taddr109, align 8
  %623 = insertvalue %any undef, ptr %taddr109, 0
  %624 = insertvalue %any %623, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.71, i64 59 }, ptr %indirectarg110, align 8
  store %"char[]" { ptr @.file.22, i64 12 }, ptr %indirectarg111, align 8
  store %"char[]" { ptr @.func.94, i64 7 }, ptr %indirectarg112, align 8
  store %any %622, ptr %varargslots113, align 16
  %ptradd114 = getelementptr inbounds i8, ptr %varargslots113, i64 16
  store %any %624, ptr %ptradd114, align 16
  %625 = insertvalue %"any[]" undef, ptr %varargslots113, 0
  %"$$temp115" = insertvalue %"any[]" %625, i64 2, 1
  store %"any[]" %"$$temp115", ptr %indirectarg116, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg110, ptr align 8 %indirectarg111, ptr align 8 %indirectarg112, i32 406, ptr align 8 %indirectarg116) #5, !dbg !806
  unreachable, !dbg !806

panic170:                                         ; preds = %cond.phi
  store i64 %134, ptr %taddr171, align 8
  %626 = insertvalue %any undef, ptr %taddr171, 0
  %627 = insertvalue %any %626, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %136, ptr %taddr172, align 8
  %628 = insertvalue %any undef, ptr %taddr172, 0
  %629 = insertvalue %any %628, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.71, i64 59 }, ptr %indirectarg173, align 8
  store %"char[]" { ptr @.file.22, i64 12 }, ptr %indirectarg174, align 8
  store %"char[]" { ptr @.func.94, i64 7 }, ptr %indirectarg175, align 8
  store %any %627, ptr %varargslots176, align 16
  %ptradd177 = getelementptr inbounds i8, ptr %varargslots176, i64 16
  store %any %629, ptr %ptradd177, align 16
  %630 = insertvalue %"any[]" undef, ptr %varargslots176, 0
  %"$$temp178" = insertvalue %"any[]" %630, i64 2, 1
  store %"any[]" %"$$temp178", ptr %indirectarg179, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg173, ptr align 8 %indirectarg174, ptr align 8 %indirectarg175, i32 422, ptr align 8 %indirectarg179) #5, !dbg !827
  unreachable, !dbg !827

panic214:                                         ; preds = %if.exit210
  store i64 %157, ptr %taddr215, align 8
  %631 = insertvalue %any undef, ptr %taddr215, 0
  %632 = insertvalue %any %631, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %159, ptr %taddr216, align 8
  %633 = insertvalue %any undef, ptr %taddr216, 0
  %634 = insertvalue %any %633, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.71, i64 59 }, ptr %indirectarg217, align 8
  store %"char[]" { ptr @.file.22, i64 12 }, ptr %indirectarg218, align 8
  store %"char[]" { ptr @.func.94, i64 7 }, ptr %indirectarg219, align 8
  store %any %632, ptr %varargslots220, align 16
  %ptradd221 = getelementptr inbounds i8, ptr %varargslots220, i64 16
  store %any %634, ptr %ptradd221, align 16
  %635 = insertvalue %"any[]" undef, ptr %varargslots220, 0
  %"$$temp222" = insertvalue %"any[]" %635, i64 2, 1
  store %"any[]" %"$$temp222", ptr %indirectarg223, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg217, ptr align 8 %indirectarg218, ptr align 8 %indirectarg219, i32 433, ptr align 8 %indirectarg223) #5, !dbg !842
  unreachable, !dbg !842

panic225:                                         ; preds = %checkok224
  store i64 8, ptr %taddr226, align 8
  %636 = insertvalue %any undef, ptr %taddr226, 0
  %637 = insertvalue %any %636, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %162, ptr %taddr227, align 8
  %638 = insertvalue %any undef, ptr %taddr227, 0
  %639 = insertvalue %any %638, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg228, align 8
  store %"char[]" { ptr @.file.22, i64 12 }, ptr %indirectarg229, align 8
  store %"char[]" { ptr @.func.94, i64 7 }, ptr %indirectarg230, align 8
  store %any %637, ptr %varargslots231, align 16
  %ptradd232 = getelementptr inbounds i8, ptr %varargslots231, i64 16
  store %any %639, ptr %ptradd232, align 16
  %640 = insertvalue %"any[]" undef, ptr %varargslots231, 0
  %"$$temp233" = insertvalue %"any[]" %640, i64 2, 1
  store %"any[]" %"$$temp233", ptr %indirectarg234, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg228, ptr align 8 %indirectarg229, ptr align 8 %indirectarg230, i32 433, ptr align 8 %indirectarg234) #5, !dbg !842
  unreachable, !dbg !842

panic615:                                         ; preds = %switch.case614
  store %"char[]" { ptr @.panic_msg.106, i64 57 }, ptr %indirectarg616, align 8
  store %"char[]" { ptr @.file.22, i64 12 }, ptr %indirectarg617, align 8
  store %"char[]" { ptr @.func.94, i64 7 }, ptr %indirectarg618, align 8
  %641 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %641(ptr align 8 %indirectarg616, ptr align 8 %indirectarg617, ptr align 8 %indirectarg618, i32 490) #5, !dbg !1015
  unreachable, !dbg !1015

panic620:                                         ; preds = %checkok619
  store i64 8, ptr %taddr621, align 8
  %642 = insertvalue %any undef, ptr %taddr621, 0
  %643 = insertvalue %any %642, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %393, ptr %taddr622, align 8
  %644 = insertvalue %any undef, ptr %taddr622, 0
  %645 = insertvalue %any %644, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg623, align 8
  store %"char[]" { ptr @.file.22, i64 12 }, ptr %indirectarg624, align 8
  store %"char[]" { ptr @.func.94, i64 7 }, ptr %indirectarg625, align 8
  store %any %643, ptr %varargslots626, align 16
  %ptradd627 = getelementptr inbounds i8, ptr %varargslots626, i64 16
  store %any %645, ptr %ptradd627, align 16
  %646 = insertvalue %"any[]" undef, ptr %varargslots626, 0
  %"$$temp628" = insertvalue %"any[]" %646, i64 2, 1
  store %"any[]" %"$$temp628", ptr %indirectarg629, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg623, ptr align 8 %indirectarg624, ptr align 8 %indirectarg625, i32 490, ptr align 8 %indirectarg629) #5, !dbg !1015
  unreachable, !dbg !1015

panic693:                                         ; preds = %if.then686
  store i64 %sub, ptr %taddr694, align 8
  %647 = insertvalue %any undef, ptr %taddr694, 0
  %648 = insertvalue %any %647, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.16, i64 43 }, ptr %indirectarg695, align 8
  store %"char[]" { ptr @.file.22, i64 12 }, ptr %indirectarg696, align 8
  store %"char[]" { ptr @.func.94, i64 7 }, ptr %indirectarg697, align 8
  store %any %648, ptr %varargslots698, align 16
  %649 = insertvalue %"any[]" undef, ptr %varargslots698, 0
  %"$$temp699" = insertvalue %"any[]" %649, i64 1, 1
  store %"any[]" %"$$temp699", ptr %indirectarg700, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg695, ptr align 8 %indirectarg696, ptr align 8 %indirectarg697, i32 494, ptr align 8 %indirectarg700) #5, !dbg !1019
  unreachable, !dbg !1019

panic709:                                         ; preds = %if.then707
  store %"char[]" { ptr @.panic_msg.107, i64 60 }, ptr %indirectarg710, align 8
  store %"char[]" { ptr @.file.22, i64 12 }, ptr %indirectarg711, align 8
  store %"char[]" { ptr @.func.94, i64 7 }, ptr %indirectarg712, align 8
  %650 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %650(ptr align 8 %indirectarg710, ptr align 8 %indirectarg711, ptr align 8 %indirectarg712, i32 499) #5, !dbg !1023
  unreachable, !dbg !1023

panic714:                                         ; preds = %checkok713
  store i64 8, ptr %taddr715, align 8
  %651 = insertvalue %any undef, ptr %taddr715, 0
  %652 = insertvalue %any %651, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %411, ptr %taddr716, align 8
  %653 = insertvalue %any undef, ptr %taddr716, 0
  %654 = insertvalue %any %653, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg717, align 8
  store %"char[]" { ptr @.file.22, i64 12 }, ptr %indirectarg718, align 8
  store %"char[]" { ptr @.func.94, i64 7 }, ptr %indirectarg719, align 8
  store %any %652, ptr %varargslots720, align 16
  %ptradd721 = getelementptr inbounds i8, ptr %varargslots720, i64 16
  store %any %654, ptr %ptradd721, align 16
  %655 = insertvalue %"any[]" undef, ptr %varargslots720, 0
  %"$$temp722" = insertvalue %"any[]" %655, i64 2, 1
  store %"any[]" %"$$temp722", ptr %indirectarg723, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg717, ptr align 8 %indirectarg718, ptr align 8 %indirectarg719, i32 499, ptr align 8 %indirectarg723) #5, !dbg !1023
  unreachable, !dbg !1023

panic757:                                         ; preds = %check_type_ok747
  store i64 %sub756, ptr %taddr758, align 8
  %656 = insertvalue %any undef, ptr %taddr758, 0
  %657 = insertvalue %any %656, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.16, i64 43 }, ptr %indirectarg759, align 8
  store %"char[]" { ptr @.file.22, i64 12 }, ptr %indirectarg760, align 8
  store %"char[]" { ptr @.func.94, i64 7 }, ptr %indirectarg761, align 8
  store %any %657, ptr %varargslots762, align 16
  %658 = insertvalue %"any[]" undef, ptr %varargslots762, 0
  %"$$temp763" = insertvalue %"any[]" %658, i64 1, 1
  store %"any[]" %"$$temp763", ptr %indirectarg764, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg759, ptr align 8 %indirectarg760, ptr align 8 %indirectarg761, i32 499, ptr align 8 %indirectarg764) #5, !dbg !1023
  unreachable, !dbg !1023
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.Formatter.print(ptr %0, ptr %1, ptr align 8 %2) #0 comdat !dbg !1112 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %.anon = alloca i64, align 8
  %c = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr7 = alloca i64, align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg12 = alloca %"any[]", align 8
  %error_var = alloca i64, align 8
  %retparam = alloca i64, align 8
  %reterr = alloca i64, align 8
  %3 = icmp eq ptr %1, null, !dbg !1115
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !1115
  br i1 %4, label %panic, label %checkok, !dbg !1115

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !1116, !DIExpression(), !1117)
    #dbg_declare(ptr %2, !1118, !DIExpression(), !1117)
  %5 = load ptr, ptr %self, align 8, !dbg !1119
  %ptradd = getelementptr inbounds i8, ptr %5, i64 8, !dbg !1119
  %6 = load ptr, ptr %ptradd, align 8, !dbg !1119
  %i2nb = icmp eq ptr %6, null, !dbg !1119
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !1119

if.then:                                          ; preds = %checkok
  %7 = load ptr, ptr %self, align 8, !dbg !1120
  %ptradd3 = getelementptr inbounds i8, ptr %7, i64 8, !dbg !1120
  store ptr @std.io.out_null_fn, ptr %ptradd3, align 8, !dbg !1120
  br label %if.exit, !dbg !1120

if.exit:                                          ; preds = %if.then, %checkok
  %ptradd4 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !1122
  %8 = load i64, ptr %ptradd4, align 8, !dbg !1122
    #dbg_declare(ptr %.anon, !1124, !DIExpression(), !1122)
  store i64 0, ptr %.anon, align 8, !dbg !1122
  br label %loop.cond, !dbg !1122

loop.cond:                                        ; preds = %noerr_block, %if.exit
  %9 = load i64, ptr %.anon, align 8, !dbg !1122
  %lt = icmp ult i64 %9, %8, !dbg !1122
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !1122

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %c, !1125, !DIExpression(), !1127)
  %ptradd5 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !1127
  %10 = load i64, ptr %ptradd5, align 8, !dbg !1127
  %11 = load ptr, ptr %2, align 8, !dbg !1127
  %12 = load i64, ptr %.anon, align 8, !dbg !1127
  %ge = icmp uge i64 %12, %10, !dbg !1127
  %13 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !1127
  br i1 %13, label %panic6, label %checkok13, !dbg !1127

checkok13:                                        ; preds = %loop.body
  %ptradd14 = getelementptr inbounds i8, ptr %11, i64 %12, !dbg !1127
  %14 = load i8, ptr %ptradd14, align 1, !dbg !1127
  store i8 %14, ptr %c, align 1, !dbg !1127
  %15 = load ptr, ptr %self, align 8
  %16 = load i8, ptr %c, align 1
  %17 = call i64 @std.io.Formatter.out(ptr %retparam, ptr %15, i8 %16), !dbg !1127
  %not_err = icmp eq i64 %17, 0, !dbg !1127
  %18 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1127
  br i1 %18, label %after_check, label %assign_optional, !dbg !1127

assign_optional:                                  ; preds = %checkok13
  store i64 %17, ptr %error_var, align 8, !dbg !1127
  br label %guard_block, !dbg !1127

after_check:                                      ; preds = %checkok13
  br label %noerr_block, !dbg !1127

guard_block:                                      ; preds = %assign_optional
  %19 = load i64, ptr %error_var, align 8, !dbg !1127
  ret i64 %19, !dbg !1127

noerr_block:                                      ; preds = %after_check
  %20 = load i64, ptr %.anon, align 8, !dbg !1122
  %addnuw = add nuw i64 %20, 1, !dbg !1122
  store i64 %addnuw, ptr %.anon, align 8, !dbg !1122
  br label %loop.cond, !dbg !1122

loop.exit:                                        ; preds = %loop.cond
  %ptradd15 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !1128
  %21 = load i64, ptr %ptradd15, align 8, !dbg !1128
  store i64 %21, ptr %0, align 8, !dbg !1128
  ret i64 0, !dbg !1128

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.22, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.111, i64 5 }, ptr %indirectarg2, align 8
  %22 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %22(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 565) #5, !dbg !1117
  unreachable, !dbg !1117

panic6:                                           ; preds = %loop.body
  store i64 %10, ptr %taddr, align 8
  %23 = insertvalue %any undef, ptr %taddr, 0
  %24 = insertvalue %any %23, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %12, ptr %taddr7, align 8
  %25 = insertvalue %any undef, ptr %taddr7, 0
  %26 = insertvalue %any %25, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.71, i64 59 }, ptr %indirectarg8, align 8
  store %"char[]" { ptr @.file.22, i64 12 }, ptr %indirectarg9, align 8
  store %"char[]" { ptr @.func.111, i64 5 }, ptr %indirectarg10, align 8
  store %any %24, ptr %varargslots, align 16
  %ptradd11 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %26, ptr %ptradd11, align 16
  %27 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %27, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg12, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg8, ptr align 8 %indirectarg9, ptr align 8 %indirectarg10, i32 572, ptr align 8 %indirectarg12) #5, !dbg !1127
  unreachable, !dbg !1127
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @std.io.out_null_fn(ptr %0, i8 %1) #0 !dbg !1129 {
entry:
  %data = alloca ptr, align 8
  %c = alloca i8, align 1
  store ptr %0, ptr %data, align 8
    #dbg_declare(ptr %data, !1130, !DIExpression(), !1131)
  store i8 %1, ptr %c, align 1
    #dbg_declare(ptr %c, !1132, !DIExpression(), !1131)
  ret i64 0
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @std.io.Formatter.adjust(ptr %0, ptr %1, i64 %2) #0 !dbg !1133 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %len = alloca i64, align 8
  %reterr = alloca i64, align 8
  %reterr3 = alloca i64, align 8
  %retparam = alloca i64, align 8
  %3 = icmp eq ptr %1, null, !dbg !1136
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !1136
  br i1 %4, label %panic, label %checkok, !dbg !1136

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !1137, !DIExpression(), !1138)
  store i64 %2, ptr %len, align 8
    #dbg_declare(ptr %len, !1139, !DIExpression(), !1138)
  %5 = load ptr, ptr %self, align 8, !dbg !1140
  %ptradd = getelementptr inbounds i8, ptr %5, i64 16, !dbg !1140
  %6 = load i32, ptr %ptradd, align 8, !dbg !1140
  %lshrl = lshr i32 %6, 1, !dbg !1140
  %7 = and i32 1, %lshrl, !dbg !1140
  %trunc = trunc i32 %7 to i8, !dbg !1140
  %8 = trunc i8 %trunc to i1, !dbg !1140
  br i1 %8, label %if.exit, label %if.else, !dbg !1140

if.else:                                          ; preds = %checkok
  store i64 0, ptr %0, align 8, !dbg !1140
  ret i64 0, !dbg !1140

if.exit:                                          ; preds = %checkok
  %9 = load ptr, ptr %self, align 8, !dbg !1141
  %ptradd4 = getelementptr inbounds i8, ptr %9, i64 16, !dbg !1141
  %ptradd5 = getelementptr inbounds i8, ptr %ptradd4, i64 4, !dbg !1141
  %10 = load i32, ptr %ptradd5, align 4, !dbg !1141
  %zext = zext i32 %10 to i64, !dbg !1141
  %11 = load i64, ptr %len, align 8, !dbg !1141
  %12 = load ptr, ptr %self, align 8
  %13 = call i64 @std.io.Formatter.pad(ptr %retparam, ptr %12, i8 32, i64 %zext, i64 %11) #6, !dbg !1141
  %not_err = icmp eq i64 %13, 0, !dbg !1141
  %14 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1141
  br i1 %14, label %after_check, label %assign_optional, !dbg !1141

assign_optional:                                  ; preds = %if.exit
  store i64 %13, ptr %reterr3, align 8, !dbg !1141
  br label %err_retblock, !dbg !1141

after_check:                                      ; preds = %if.exit
  %15 = load i64, ptr %retparam, align 8, !dbg !1141
  store i64 %15, ptr %0, align 8, !dbg !1141
  ret i64 0, !dbg !1141

err_retblock:                                     ; preds = %assign_optional
  %16 = load i64, ptr %reterr3, align 8, !dbg !1141
  ret i64 %16, !dbg !1141

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.142, i64 6 }, ptr %indirectarg2, align 8
  %17 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %17(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 32) #5, !dbg !1138
  unreachable, !dbg !1138
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @std.io.Formatter.out_substr(ptr %0, ptr %1, ptr align 8 %2) #0 !dbg !1142 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %l = alloca i64, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %prec = alloca i32, align 4
  %index = alloca i64, align 8
  %chars = alloca i64, align 8
  %ptr = alloca ptr, align 8
  %c = alloca i8, align 1
  %error_var = alloca i64, align 8
  %retparam = alloca i64, align 8
  %reterr = alloca i64, align 8
  %3 = icmp eq ptr %1, null, !dbg !1143
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !1143
  br i1 %4, label %panic, label %checkok, !dbg !1143

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !1144, !DIExpression(), !1145)
    #dbg_declare(ptr %2, !1146, !DIExpression(), !1145)
    #dbg_declare(ptr %l, !1147, !DIExpression(), !1148)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg3, ptr align 8 %2, i32 16, i1 false)
  %5 = call i64 @std.core.string.conv.utf8_codepoints(ptr align 8 %indirectarg3), !dbg !1148
  store i64 %5, ptr %l, align 8, !dbg !1148
    #dbg_declare(ptr %prec, !1149, !DIExpression(), !1150)
  %6 = load ptr, ptr %self, align 8, !dbg !1150
  %ptradd = getelementptr inbounds i8, ptr %6, i64 16, !dbg !1150
  %ptradd4 = getelementptr inbounds i8, ptr %ptradd, i64 8, !dbg !1150
  %7 = load i32, ptr %ptradd4, align 8, !dbg !1150
  store i32 %7, ptr %prec, align 4, !dbg !1150
  %8 = load ptr, ptr %self, align 8, !dbg !1151
  %ptradd5 = getelementptr inbounds i8, ptr %8, i64 16, !dbg !1151
  %9 = load i32, ptr %ptradd5, align 8, !dbg !1151
  %lshrl = lshr i32 %9, 6, !dbg !1151
  %10 = and i32 1, %lshrl, !dbg !1151
  %trunc = trunc i32 %10 to i8, !dbg !1151
  %11 = trunc i8 %trunc to i1, !dbg !1151
  br i1 %11, label %and.rhs, label %and.phi, !dbg !1151

and.rhs:                                          ; preds = %checkok
  %12 = load i64, ptr %l, align 8, !dbg !1151
  %13 = load i32, ptr %prec, align 4, !dbg !1151
  %zext = zext i32 %13 to i64, !dbg !1151
  %lt = icmp ult i64 %12, %zext, !dbg !1151
  br label %and.phi, !dbg !1151

and.phi:                                          ; preds = %and.rhs, %checkok
  %val = phi i1 [ false, %checkok ], [ %lt, %and.rhs ], !dbg !1151
  br i1 %val, label %if.then, label %if.exit, !dbg !1151

if.then:                                          ; preds = %and.phi
  %14 = load i32, ptr %prec, align 4, !dbg !1151
  %zext6 = zext i32 %14 to i64, !dbg !1151
  store i64 %zext6, ptr %l, align 8, !dbg !1151
  br label %if.exit, !dbg !1151

if.exit:                                          ; preds = %if.then, %and.phi
    #dbg_declare(ptr %index, !1152, !DIExpression(), !1153)
  store i64 0, ptr %index, align 8, !dbg !1153
    #dbg_declare(ptr %chars, !1154, !DIExpression(), !1155)
  %ptradd7 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !1155
  %15 = load i64, ptr %ptradd7, align 8, !dbg !1155
  store i64 %15, ptr %chars, align 8, !dbg !1155
    #dbg_declare(ptr %ptr, !1156, !DIExpression(), !1157)
  %16 = load ptr, ptr %2, align 8, !dbg !1157
  store ptr %16, ptr %ptr, align 8, !dbg !1157
  br label %loop.cond, !dbg !1158

loop.cond:                                        ; preds = %noerr_block, %if.exit
  %17 = load i64, ptr %index, align 8, !dbg !1159
  %18 = load i64, ptr %chars, align 8, !dbg !1159
  %lt8 = icmp ult i64 %17, %18, !dbg !1159
  br i1 %lt8, label %loop.body, label %loop.exit, !dbg !1159

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %c, !1161, !DIExpression(), !1163)
  %19 = load ptr, ptr %ptr, align 8, !dbg !1163
  %20 = load i64, ptr %index, align 8, !dbg !1163
  %ptradd9 = getelementptr inbounds i8, ptr %19, i64 %20, !dbg !1163
  %21 = load i8, ptr %ptradd9, align 1, !dbg !1163
  store i8 %21, ptr %c, align 1, !dbg !1163
  %22 = load i8, ptr %c, align 1, !dbg !1164
  %zext10 = zext i8 %22 to i32, !dbg !1164
  %and = and i32 %zext10, 192, !dbg !1164
  %neq = icmp ne i32 %and, 128, !dbg !1164
  br i1 %neq, label %and.rhs11, label %and.phi15, !dbg !1164

and.rhs11:                                        ; preds = %loop.body
  %23 = load ptr, ptr %self, align 8, !dbg !1164
  %ptradd12 = getelementptr inbounds i8, ptr %23, i64 16, !dbg !1164
  %24 = load i32, ptr %ptradd12, align 8, !dbg !1164
  %lshrl13 = lshr i32 %24, 6, !dbg !1164
  %25 = and i32 1, %lshrl13, !dbg !1164
  %trunc14 = trunc i32 %25 to i8, !dbg !1164
  %26 = trunc i8 %trunc14 to i1, !dbg !1164
  br label %and.phi15, !dbg !1164

and.phi15:                                        ; preds = %and.rhs11, %loop.body
  %val16 = phi i1 [ false, %loop.body ], [ %26, %and.rhs11 ], !dbg !1164
  br i1 %val16, label %and.rhs17, label %and.phi18, !dbg !1164

and.rhs17:                                        ; preds = %and.phi15
  %27 = load i32, ptr %prec, align 4, !dbg !1164
  %sub = sub i32 %27, 1, !dbg !1164
  store i32 %sub, ptr %prec, align 4, !dbg !1164
  %i2nb = icmp eq i32 %27, 0, !dbg !1164
  br label %and.phi18, !dbg !1164

and.phi18:                                        ; preds = %and.rhs17, %and.phi15
  %val19 = phi i1 [ false, %and.phi15 ], [ %i2nb, %and.rhs17 ], !dbg !1164
  br i1 %val19, label %if.then20, label %if.exit21, !dbg !1164

if.then20:                                        ; preds = %and.phi18
  br label %loop.exit, !dbg !1164

if.exit21:                                        ; preds = %and.phi18
  %28 = load ptr, ptr %self, align 8
  %29 = load i8, ptr %c, align 1
  %30 = call i64 @std.io.Formatter.out(ptr %retparam, ptr %28, i8 %29), !dbg !1165
  %not_err = icmp eq i64 %30, 0, !dbg !1165
  %31 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1165
  br i1 %31, label %after_check, label %assign_optional, !dbg !1165

assign_optional:                                  ; preds = %if.exit21
  store i64 %30, ptr %error_var, align 8, !dbg !1165
  br label %guard_block, !dbg !1165

after_check:                                      ; preds = %if.exit21
  br label %noerr_block, !dbg !1165

guard_block:                                      ; preds = %assign_optional
  %32 = load i64, ptr %error_var, align 8, !dbg !1165
  ret i64 %32, !dbg !1165

noerr_block:                                      ; preds = %after_check
  %33 = load i64, ptr %index, align 8, !dbg !1166
  %add = add i64 %33, 1, !dbg !1166
  store i64 %add, ptr %index, align 8, !dbg !1166
  br label %loop.cond, !dbg !1166

loop.exit:                                        ; preds = %if.then20, %loop.cond
  %34 = load i64, ptr %index, align 8, !dbg !1167
  store i64 %34, ptr %0, align 8, !dbg !1167
  ret i64 0, !dbg !1167

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.143, i64 10 }, ptr %indirectarg2, align 8
  %35 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %35(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 159) #5, !dbg !1145
  unreachable, !dbg !1145
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.Formatter.pad(ptr %0, ptr %1, i8 %2, i64 %3, i64 %4) #0 comdat !dbg !1168 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %c = alloca i8, align 1
  %width = alloca i64, align 8
  %len = alloca i64, align 8
  %delta = alloca i64, align 8
  %i = alloca i64, align 8
  %error_var = alloca i64, align 8
  %retparam = alloca i64, align 8
  %reterr = alloca i64, align 8
  %x = alloca i32, align 4
  %.anon = alloca i64, align 8
  %a = alloca i32, align 4
  %b = alloca i64, align 8
  %5 = icmp eq ptr %1, null, !dbg !1171
  %6 = call i1 @llvm.expect.i1(i1 %5, i1 false), !dbg !1171
  br i1 %6, label %panic, label %checkok, !dbg !1171

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !1172, !DIExpression(), !1173)
  store i8 %2, ptr %c, align 1
    #dbg_declare(ptr %c, !1174, !DIExpression(), !1173)
  store i64 %3, ptr %width, align 8
    #dbg_declare(ptr %width, !1175, !DIExpression(), !1173)
  store i64 %4, ptr %len, align 8
    #dbg_declare(ptr %len, !1177, !DIExpression(), !1173)
    #dbg_declare(ptr %delta, !1178, !DIExpression(), !1179)
  %7 = load i64, ptr %width, align 8, !dbg !1179
  %8 = load i64, ptr %len, align 8, !dbg !1179
  %sub = sub i64 %7, %8, !dbg !1179
  store i64 %sub, ptr %delta, align 8, !dbg !1179
    #dbg_declare(ptr %i, !1180, !DIExpression(), !1182)
  store i64 0, ptr %i, align 8, !dbg !1182
  br label %loop.cond, !dbg !1182

loop.cond:                                        ; preds = %noerr_block, %checkok
  %9 = load i64, ptr %i, align 8, !dbg !1182
  %10 = load i64, ptr %delta, align 8, !dbg !1182
  %lt = icmp slt i64 %9, %10, !dbg !1182
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !1182

loop.body:                                        ; preds = %loop.cond
  %11 = load ptr, ptr %self, align 8
  %12 = load i8, ptr %c, align 1
  %13 = call i64 @std.io.Formatter.out(ptr %retparam, ptr %11, i8 %12), !dbg !1182
  %not_err = icmp eq i64 %13, 0, !dbg !1182
  %14 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1182
  br i1 %14, label %after_check, label %assign_optional, !dbg !1182

assign_optional:                                  ; preds = %loop.body
  store i64 %13, ptr %error_var, align 8, !dbg !1182
  br label %guard_block, !dbg !1182

after_check:                                      ; preds = %loop.body
  br label %noerr_block, !dbg !1182

guard_block:                                      ; preds = %assign_optional
  %15 = load i64, ptr %error_var, align 8, !dbg !1182
  ret i64 %15, !dbg !1182

noerr_block:                                      ; preds = %after_check
  %16 = load i64, ptr %i, align 8, !dbg !1182
  %add = add i64 %16, 1, !dbg !1182
  store i64 %add, ptr %i, align 8, !dbg !1182
  br label %loop.cond, !dbg !1182

loop.exit:                                        ; preds = %loop.cond
  store i32 0, ptr %x, align 4
  %17 = load i64, ptr %delta, align 8
  store i64 %17, ptr %.anon, align 8
  %18 = load i32, ptr %x, align 4
  store i32 %18, ptr %a, align 4
  %19 = load i64, ptr %.anon, align 8
  store i64 %19, ptr %b, align 8
  %20 = load i32, ptr %a, align 4, !dbg !1183
  %sext = sext i32 %20 to i64, !dbg !1183
  %21 = load i64, ptr %b, align 8, !dbg !1183
  %gt = icmp sgt i64 %sext, %21, !dbg !1183
  br i1 %gt, label %cond.lhs, label %cond.rhs, !dbg !1183

cond.lhs:                                         ; preds = %loop.exit
  %22 = load i32, ptr %x, align 4, !dbg !1186
  %sext3 = sext i32 %22 to i64, !dbg !1186
  br label %cond.phi, !dbg !1186

cond.rhs:                                         ; preds = %loop.exit
  %23 = load i64, ptr %.anon, align 8, !dbg !1186
  br label %cond.phi, !dbg !1186

cond.phi:                                         ; preds = %cond.rhs, %cond.lhs
  %val = phi i64 [ %sext3, %cond.lhs ], [ %23, %cond.rhs ], !dbg !1186
  store i64 %val, ptr %0, align 8, !dbg !1186
  ret i64 0, !dbg !1186

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.144, i64 3 }, ptr %indirectarg2, align 8
  %24 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %24(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 178) #5, !dbg !1173
  unreachable, !dbg !1173
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.Formatter.out_chars(ptr %0, ptr %1, ptr align 8 %2) #0 comdat !dbg !1189 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %.anon = alloca i64, align 8
  %c = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr5 = alloca i64, align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg7 = alloca %"char[]", align 8
  %indirectarg8 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg10 = alloca %"any[]", align 8
  %error_var = alloca i64, align 8
  %retparam = alloca i64, align 8
  %reterr = alloca i64, align 8
  %3 = icmp eq ptr %1, null, !dbg !1192
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !1192
  br i1 %4, label %panic, label %checkok, !dbg !1192

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !1193, !DIExpression(), !1194)
    #dbg_declare(ptr %2, !1195, !DIExpression(), !1194)
  %ptradd = getelementptr inbounds i8, ptr %2, i64 8, !dbg !1196
  %5 = load i64, ptr %ptradd, align 8, !dbg !1196
    #dbg_declare(ptr %.anon, !1198, !DIExpression(), !1196)
  store i64 0, ptr %.anon, align 8, !dbg !1196
  br label %loop.cond, !dbg !1196

loop.cond:                                        ; preds = %noerr_block, %checkok
  %6 = load i64, ptr %.anon, align 8, !dbg !1196
  %lt = icmp ult i64 %6, %5, !dbg !1196
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !1196

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %c, !1199, !DIExpression(), !1201)
  %ptradd3 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !1201
  %7 = load i64, ptr %ptradd3, align 8, !dbg !1201
  %8 = load ptr, ptr %2, align 8, !dbg !1201
  %9 = load i64, ptr %.anon, align 8, !dbg !1201
  %ge = icmp uge i64 %9, %7, !dbg !1201
  %10 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !1201
  br i1 %10, label %panic4, label %checkok11, !dbg !1201

checkok11:                                        ; preds = %loop.body
  %ptradd12 = getelementptr inbounds i8, ptr %8, i64 %9, !dbg !1201
  %11 = load i8, ptr %ptradd12, align 1, !dbg !1201
  store i8 %11, ptr %c, align 1, !dbg !1201
  %12 = load ptr, ptr %self, align 8
  %13 = load i8, ptr %c, align 1
  %14 = call i64 @std.io.Formatter.out(ptr %retparam, ptr %12, i8 %13), !dbg !1201
  %not_err = icmp eq i64 %14, 0, !dbg !1201
  %15 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1201
  br i1 %15, label %after_check, label %assign_optional, !dbg !1201

assign_optional:                                  ; preds = %checkok11
  store i64 %14, ptr %error_var, align 8, !dbg !1201
  br label %guard_block, !dbg !1201

after_check:                                      ; preds = %checkok11
  br label %noerr_block, !dbg !1201

guard_block:                                      ; preds = %assign_optional
  %16 = load i64, ptr %error_var, align 8, !dbg !1201
  ret i64 %16, !dbg !1201

noerr_block:                                      ; preds = %after_check
  %17 = load i64, ptr %.anon, align 8, !dbg !1196
  %addnuw = add nuw i64 %17, 1, !dbg !1196
  store i64 %addnuw, ptr %.anon, align 8, !dbg !1196
  br label %loop.cond, !dbg !1196

loop.exit:                                        ; preds = %loop.cond
  %ptradd13 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !1202
  %18 = load i64, ptr %ptradd13, align 8, !dbg !1202
  store i64 %18, ptr %0, align 8, !dbg !1202
  ret i64 0, !dbg !1202

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.145, i64 9 }, ptr %indirectarg2, align 8
  %19 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %19(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 192) #5, !dbg !1194
  unreachable, !dbg !1194

panic4:                                           ; preds = %loop.body
  store i64 %7, ptr %taddr, align 8
  %20 = insertvalue %any undef, ptr %taddr, 0
  %21 = insertvalue %any %20, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %9, ptr %taddr5, align 8
  %22 = insertvalue %any undef, ptr %taddr5, 0
  %23 = insertvalue %any %22, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.71, i64 59 }, ptr %indirectarg6, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg7, align 8
  store %"char[]" { ptr @.func.145, i64 9 }, ptr %indirectarg8, align 8
  store %any %21, ptr %varargslots, align 16
  %ptradd9 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %23, ptr %ptradd9, align 16
  %24 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %24, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg10, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg6, ptr align 8 %indirectarg7, ptr align 8 %indirectarg8, i32 194, ptr align 8 %indirectarg10) #5, !dbg !1201
  unreachable, !dbg !1201
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.Formatter.etoa(ptr %0, ptr %1, double %2) #0 comdat !dbg !1203 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %y = alloca double, align 8
  %reterr = alloca i64, align 8
  %retparam = alloca i64, align 8
  %3 = icmp eq ptr %1, null, !dbg !1207
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !1207
  br i1 %4, label %panic, label %checkok, !dbg !1207

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !1208, !DIExpression(), !1207)
  store double %2, ptr %y, align 8
    #dbg_declare(ptr %y, !1209, !DIExpression(), !1207)
  %5 = load ptr, ptr %self, align 8
  %6 = load double, ptr %y, align 8
  %7 = call i64 @std.io.Formatter.floatformat(ptr %retparam, ptr %5, i32 1, double %6), !dbg !1207
  %not_err = icmp eq i64 %7, 0, !dbg !1207
  %8 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1207
  br i1 %8, label %after_check, label %assign_optional, !dbg !1207

assign_optional:                                  ; preds = %checkok
  store i64 %7, ptr %reterr, align 8, !dbg !1207
  br label %err_retblock, !dbg !1207

after_check:                                      ; preds = %checkok
  %9 = load i64, ptr %retparam, align 8, !dbg !1207
  store i64 %9, ptr %0, align 8, !dbg !1207
  ret i64 0, !dbg !1207

err_retblock:                                     ; preds = %assign_optional
  %10 = load i64, ptr %reterr, align 8, !dbg !1207
  ret i64 %10, !dbg !1207

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.146, i64 4 }, ptr %indirectarg2, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 206) #5, !dbg !1207
  unreachable, !dbg !1207
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.Formatter.ftoa(ptr %0, ptr %1, double %2) #0 comdat !dbg !1210 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %y = alloca double, align 8
  %reterr = alloca i64, align 8
  %retparam = alloca i64, align 8
  %3 = icmp eq ptr %1, null, !dbg !1211
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !1211
  br i1 %4, label %panic, label %checkok, !dbg !1211

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !1212, !DIExpression(), !1211)
  store double %2, ptr %y, align 8
    #dbg_declare(ptr %y, !1213, !DIExpression(), !1211)
  %5 = load ptr, ptr %self, align 8
  %6 = load double, ptr %y, align 8
  %7 = call i64 @std.io.Formatter.floatformat(ptr %retparam, ptr %5, i32 0, double %6), !dbg !1211
  %not_err = icmp eq i64 %7, 0, !dbg !1211
  %8 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1211
  br i1 %8, label %after_check, label %assign_optional, !dbg !1211

assign_optional:                                  ; preds = %checkok
  store i64 %7, ptr %reterr, align 8, !dbg !1211
  br label %err_retblock, !dbg !1211

after_check:                                      ; preds = %checkok
  %9 = load i64, ptr %retparam, align 8, !dbg !1211
  store i64 %9, ptr %0, align 8, !dbg !1211
  ret i64 0, !dbg !1211

err_retblock:                                     ; preds = %assign_optional
  %10 = load i64, ptr %reterr, align 8, !dbg !1211
  ret i64 %10, !dbg !1211

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.147, i64 4 }, ptr %indirectarg2, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 207) #5, !dbg !1211
  unreachable, !dbg !1211
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.Formatter.gtoa(ptr %0, ptr %1, double %2) #0 comdat !dbg !1214 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %y = alloca double, align 8
  %reterr = alloca i64, align 8
  %retparam = alloca i64, align 8
  %3 = icmp eq ptr %1, null, !dbg !1215
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !1215
  br i1 %4, label %panic, label %checkok, !dbg !1215

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !1216, !DIExpression(), !1215)
  store double %2, ptr %y, align 8
    #dbg_declare(ptr %y, !1217, !DIExpression(), !1215)
  %5 = load ptr, ptr %self, align 8
  %6 = load double, ptr %y, align 8
  %7 = call i64 @std.io.Formatter.floatformat(ptr %retparam, ptr %5, i32 2, double %6), !dbg !1215
  %not_err = icmp eq i64 %7, 0, !dbg !1215
  %8 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1215
  br i1 %8, label %after_check, label %assign_optional, !dbg !1215

assign_optional:                                  ; preds = %checkok
  store i64 %7, ptr %reterr, align 8, !dbg !1215
  br label %err_retblock, !dbg !1215

after_check:                                      ; preds = %checkok
  %9 = load i64, ptr %retparam, align 8, !dbg !1215
  store i64 %9, ptr %0, align 8, !dbg !1215
  ret i64 0, !dbg !1215

err_retblock:                                     ; preds = %assign_optional
  %10 = load i64, ptr %reterr, align 8, !dbg !1215
  ret i64 %10, !dbg !1215

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.148, i64 4 }, ptr %indirectarg2, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 208) #5, !dbg !1215
  unreachable, !dbg !1215
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.Formatter.atoa(ptr %0, ptr %1, double %2) #0 comdat !dbg !1218 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %y = alloca double, align 8
  %reterr = alloca i64, align 8
  %retparam = alloca i64, align 8
  %3 = icmp eq ptr %1, null, !dbg !1219
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !1219
  br i1 %4, label %panic, label %checkok, !dbg !1219

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !1220, !DIExpression(), !1219)
  store double %2, ptr %y, align 8
    #dbg_declare(ptr %y, !1221, !DIExpression(), !1219)
  %5 = load ptr, ptr %self, align 8
  %6 = load double, ptr %y, align 8
  %7 = call i64 @std.io.Formatter.floatformat(ptr %retparam, ptr %5, i32 3, double %6), !dbg !1219
  %not_err = icmp eq i64 %7, 0, !dbg !1219
  %8 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1219
  br i1 %8, label %after_check, label %assign_optional, !dbg !1219

assign_optional:                                  ; preds = %checkok
  store i64 %7, ptr %reterr, align 8, !dbg !1219
  br label %err_retblock, !dbg !1219

after_check:                                      ; preds = %checkok
  %9 = load i64, ptr %retparam, align 8, !dbg !1219
  store i64 %9, ptr %0, align 8, !dbg !1219
  ret i64 0, !dbg !1219

err_retblock:                                     ; preds = %assign_optional
  %10 = load i64, ptr %reterr, align 8, !dbg !1219
  ret i64 %10, !dbg !1219

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.149, i64 4 }, ptr %indirectarg2, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 209) #5, !dbg !1219
  unreachable, !dbg !1219
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @std.io.Formatter.floatformat(ptr %0, ptr %1, i32 %2, double %3) #0 !dbg !1222 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %formatting = alloca i32, align 4
  %y = alloca double, align 8
  %big = alloca [126 x i32], align 16
  %is_neg = alloca i8, align 1
  %x = alloca double, align 8
  %expr = alloca double, align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr9 = alloca i64, align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg13 = alloca %"any[]", align 8
  %pl = alloca i64, align 8
  %x17 = alloca double, align 8
  %expr18 = alloca double, align 8
  %indirectarg21 = alloca %"char[]", align 8
  %indirectarg22 = alloca %"char[]", align 8
  %indirectarg23 = alloca %"char[]", align 8
  %taddr26 = alloca i64, align 8
  %taddr27 = alloca i64, align 8
  %indirectarg28 = alloca %"char[]", align 8
  %indirectarg29 = alloca %"char[]", align 8
  %indirectarg30 = alloca %"char[]", align 8
  %varargslots31 = alloca [2 x %any], align 16
  %indirectarg34 = alloca %"any[]", align 8
  %len = alloca i64, align 8
  %error_var = alloca i64, align 8
  %retparam = alloca i64, align 8
  %s = alloca %"char[]", align 8
  %x48 = alloca double, align 8
  %expr49 = alloca double, align 8
  %indirectarg52 = alloca %"char[]", align 8
  %indirectarg53 = alloca %"char[]", align 8
  %indirectarg54 = alloca %"char[]", align 8
  %taddr57 = alloca i64, align 8
  %taddr58 = alloca i64, align 8
  %indirectarg59 = alloca %"char[]", align 8
  %indirectarg60 = alloca %"char[]", align 8
  %indirectarg61 = alloca %"char[]", align 8
  %varargslots62 = alloca [2 x %any], align 16
  %indirectarg65 = alloca %"any[]", align 8
  %error_var76 = alloca i64, align 8
  %retparam78 = alloca i64, align 8
  %error_var86 = alloca i64, align 8
  %retparam87 = alloca i64, align 8
  %indirectarg88 = alloca %"char[]", align 8
  %error_var99 = alloca i64, align 8
  %retparam104 = alloca i64, align 8
  %reterr = alloca i64, align 8
  %e2 = alloca i32, align 4
  %x113 = alloca double, align 8
  %e = alloca ptr, align 8
  %ebuf0 = alloca [12 x i8], align 1
  %ebuf = alloca ptr, align 8
  %buf_array = alloca [22 x i8], align 16
  %buf = alloca ptr, align 8
  %p = alloca i64, align 8
  %round = alloca double, align 8
  %re = alloca i32, align 4
  %estr = alloca ptr, align 8
  %indirectarg160 = alloca i128, align 16
  %indirectarg166 = alloca %"char[]", align 8
  %indirectarg167 = alloca %"char[]", align 8
  %indirectarg168 = alloca %"char[]", align 8
  %indirectarg176 = alloca %"char[]", align 8
  %indirectarg177 = alloca %"char[]", align 8
  %indirectarg178 = alloca %"char[]", align 8
  %indirectarg187 = alloca %"char[]", align 8
  %indirectarg188 = alloca %"char[]", align 8
  %indirectarg189 = alloca %"char[]", align 8
  %s191 = alloca ptr, align 8
  %xdigits = alloca ptr, align 8
  %x199 = alloca i32, align 4
  %indirectarg205 = alloca %"char[]", align 8
  %indirectarg206 = alloca %"char[]", align 8
  %indirectarg207 = alloca %"char[]", align 8
  %indirectarg230 = alloca %"char[]", align 8
  %indirectarg231 = alloca %"char[]", align 8
  %indirectarg232 = alloca %"char[]", align 8
  %outlen = alloca i64, align 8
  %explen = alloca i64, align 8
  %len241 = alloca i64, align 8
  %l = alloca i64, align 8
  %error_var265 = alloca i64, align 8
  %retparam270 = alloca i64, align 8
  %error_var285 = alloca i64, align 8
  %retparam287 = alloca i64, align 8
  %error_var295 = alloca i64, align 8
  %retparam300 = alloca i64, align 8
  %indirectarg301 = alloca %"char[]", align 8
  %error_var311 = alloca i64, align 8
  %retparam316 = alloca i64, align 8
  %error_var324 = alloca i64, align 8
  %taddr329 = alloca i64, align 8
  %indirectarg330 = alloca %"char[]", align 8
  %indirectarg331 = alloca %"char[]", align 8
  %indirectarg332 = alloca %"char[]", align 8
  %varargslots333 = alloca [1 x %any], align 16
  %indirectarg335 = alloca %"any[]", align 8
  %retparam337 = alloca i64, align 8
  %indirectarg338 = alloca %"char[]", align 8
  %error_var345 = alloca i64, align 8
  %retparam348 = alloca i64, align 8
  %error_var355 = alloca i64, align 8
  %taddr360 = alloca i64, align 8
  %indirectarg361 = alloca %"char[]", align 8
  %indirectarg362 = alloca %"char[]", align 8
  %indirectarg363 = alloca %"char[]", align 8
  %varargslots364 = alloca [1 x %any], align 16
  %indirectarg366 = alloca %"any[]", align 8
  %retparam369 = alloca i64, align 8
  %indirectarg370 = alloca %"char[]", align 8
  %error_var381 = alloca i64, align 8
  %retparam386 = alloca i64, align 8
  %reterr394 = alloca i64, align 8
  %a = alloca ptr, align 8
  %z = alloca ptr, align 8
  %r = alloca ptr, align 8
  %v = alloca i32, align 4
  %taddr414 = alloca i64, align 8
  %taddr415 = alloca i64, align 8
  %indirectarg416 = alloca %"char[]", align 8
  %indirectarg417 = alloca %"char[]", align 8
  %indirectarg418 = alloca %"char[]", align 8
  %varargslots419 = alloca [2 x %any], align 16
  %indirectarg422 = alloca %"any[]", align 8
  %carry = alloca i32, align 4
  %sh = alloca i32, align 4
  %x430 = alloca i32, align 4
  %y431 = alloca i32, align 4
  %d = alloca ptr, align 8
  %x435 = alloca i64, align 8
  %indirectarg438 = alloca %"char[]", align 8
  %indirectarg439 = alloca %"char[]", align 8
  %indirectarg440 = alloca %"char[]", align 8
  %taddr443 = alloca i64, align 8
  %taddr444 = alloca i64, align 8
  %indirectarg445 = alloca %"char[]", align 8
  %indirectarg446 = alloca %"char[]", align 8
  %indirectarg447 = alloca %"char[]", align 8
  %varargslots448 = alloca [2 x %any], align 16
  %indirectarg451 = alloca %"any[]", align 8
  %taddr456 = alloca i64, align 8
  %indirectarg457 = alloca %"char[]", align 8
  %indirectarg458 = alloca %"char[]", align 8
  %indirectarg459 = alloca %"char[]", align 8
  %varargslots460 = alloca [1 x %any], align 16
  %indirectarg462 = alloca %"any[]", align 8
  %indirectarg469 = alloca %"char[]", align 8
  %indirectarg470 = alloca %"char[]", align 8
  %indirectarg471 = alloca %"char[]", align 8
  %taddr474 = alloca i64, align 8
  %taddr475 = alloca i64, align 8
  %indirectarg476 = alloca %"char[]", align 8
  %indirectarg477 = alloca %"char[]", align 8
  %indirectarg478 = alloca %"char[]", align 8
  %varargslots479 = alloca [2 x %any], align 16
  %indirectarg482 = alloca %"any[]", align 8
  %indirectarg492 = alloca %"char[]", align 8
  %indirectarg493 = alloca %"char[]", align 8
  %indirectarg494 = alloca %"char[]", align 8
  %taddr497 = alloca i64, align 8
  %taddr498 = alloca i64, align 8
  %indirectarg499 = alloca %"char[]", align 8
  %indirectarg500 = alloca %"char[]", align 8
  %indirectarg501 = alloca %"char[]", align 8
  %varargslots502 = alloca [2 x %any], align 16
  %indirectarg505 = alloca %"any[]", align 8
  %taddr513 = alloca i64, align 8
  %taddr514 = alloca i64, align 8
  %indirectarg515 = alloca %"char[]", align 8
  %indirectarg516 = alloca %"char[]", align 8
  %indirectarg517 = alloca %"char[]", align 8
  %varargslots518 = alloca [2 x %any], align 16
  %indirectarg521 = alloca %"any[]", align 8
  %carry533 = alloca i32, align 4
  %b = alloca ptr, align 8
  %sh534 = alloca i32, align 4
  %x535 = alloca i32, align 4
  %y537 = alloca i32, align 4
  %need = alloca i32, align 4
  %d543 = alloca ptr, align 8
  %rm = alloca i32, align 4
  %indirectarg549 = alloca %"char[]", align 8
  %indirectarg550 = alloca %"char[]", align 8
  %indirectarg551 = alloca %"char[]", align 8
  %taddr554 = alloca i64, align 8
  %taddr555 = alloca i64, align 8
  %indirectarg556 = alloca %"char[]", align 8
  %indirectarg557 = alloca %"char[]", align 8
  %indirectarg558 = alloca %"char[]", align 8
  %varargslots559 = alloca [2 x %any], align 16
  %indirectarg562 = alloca %"any[]", align 8
  %taddr565 = alloca i32, align 4
  %indirectarg566 = alloca %"char[]", align 8
  %indirectarg567 = alloca %"char[]", align 8
  %indirectarg568 = alloca %"char[]", align 8
  %varargslots569 = alloca [1 x %any], align 16
  %indirectarg571 = alloca %"any[]", align 8
  %taddr575 = alloca i32, align 4
  %indirectarg576 = alloca %"char[]", align 8
  %indirectarg577 = alloca %"char[]", align 8
  %indirectarg578 = alloca %"char[]", align 8
  %varargslots579 = alloca [1 x %any], align 16
  %indirectarg581 = alloca %"any[]", align 8
  %indirectarg588 = alloca %"char[]", align 8
  %indirectarg589 = alloca %"char[]", align 8
  %indirectarg590 = alloca %"char[]", align 8
  %taddr593 = alloca i64, align 8
  %taddr594 = alloca i64, align 8
  %indirectarg595 = alloca %"char[]", align 8
  %indirectarg596 = alloca %"char[]", align 8
  %indirectarg597 = alloca %"char[]", align 8
  %varargslots598 = alloca [2 x %any], align 16
  %indirectarg601 = alloca %"any[]", align 8
  %taddr605 = alloca i32, align 4
  %indirectarg606 = alloca %"char[]", align 8
  %indirectarg607 = alloca %"char[]", align 8
  %indirectarg608 = alloca %"char[]", align 8
  %varargslots609 = alloca [1 x %any], align 16
  %indirectarg611 = alloca %"any[]", align 8
  %indirectarg617 = alloca %"char[]", align 8
  %indirectarg618 = alloca %"char[]", align 8
  %indirectarg619 = alloca %"char[]", align 8
  %taddr622 = alloca i64, align 8
  %taddr623 = alloca i64, align 8
  %indirectarg624 = alloca %"char[]", align 8
  %indirectarg625 = alloca %"char[]", align 8
  %indirectarg626 = alloca %"char[]", align 8
  %varargslots627 = alloca [2 x %any], align 16
  %indirectarg630 = alloca %"any[]", align 8
  %taddr634 = alloca i32, align 4
  %indirectarg635 = alloca %"char[]", align 8
  %indirectarg636 = alloca %"char[]", align 8
  %indirectarg637 = alloca %"char[]", align 8
  %varargslots638 = alloca [1 x %any], align 16
  %indirectarg640 = alloca %"any[]", align 8
  %taddr644 = alloca i32, align 4
  %indirectarg645 = alloca %"char[]", align 8
  %indirectarg646 = alloca %"char[]", align 8
  %indirectarg647 = alloca %"char[]", align 8
  %varargslots648 = alloca [1 x %any], align 16
  %indirectarg650 = alloca %"any[]", align 8
  %taddr655 = alloca i64, align 8
  %taddr656 = alloca i64, align 8
  %indirectarg657 = alloca %"char[]", align 8
  %indirectarg658 = alloca %"char[]", align 8
  %indirectarg659 = alloca %"char[]", align 8
  %varargslots660 = alloca [2 x %any], align 16
  %indirectarg663 = alloca %"any[]", align 8
  %taddr673 = alloca i64, align 8
  %taddr674 = alloca i64, align 8
  %indirectarg675 = alloca %"char[]", align 8
  %indirectarg676 = alloca %"char[]", align 8
  %indirectarg677 = alloca %"char[]", align 8
  %varargslots678 = alloca [2 x %any], align 16
  %indirectarg681 = alloca %"any[]", align 8
  %e696 = alloca i32, align 4
  %i = alloca i32, align 4
  %indirectarg704 = alloca %"char[]", align 8
  %indirectarg705 = alloca %"char[]", align 8
  %indirectarg706 = alloca %"char[]", align 8
  %taddr709 = alloca i64, align 8
  %taddr710 = alloca i64, align 8
  %indirectarg711 = alloca %"char[]", align 8
  %indirectarg712 = alloca %"char[]", align 8
  %indirectarg713 = alloca %"char[]", align 8
  %varargslots714 = alloca [2 x %any], align 16
  %indirectarg717 = alloca %"any[]", align 8
  %j = alloca i32, align 4
  %x744 = alloca i32, align 4
  %d745 = alloca ptr, align 8
  %i754 = alloca i32, align 4
  %indirectarg764 = alloca %"char[]", align 8
  %indirectarg765 = alloca %"char[]", align 8
  %indirectarg766 = alloca %"char[]", align 8
  %taddr769 = alloca i64, align 8
  %taddr770 = alloca i64, align 8
  %indirectarg771 = alloca %"char[]", align 8
  %indirectarg772 = alloca %"char[]", align 8
  %indirectarg773 = alloca %"char[]", align 8
  %varargslots774 = alloca [2 x %any], align 16
  %indirectarg777 = alloca %"any[]", align 8
  %indirectarg780 = alloca %"char[]", align 8
  %indirectarg781 = alloca %"char[]", align 8
  %indirectarg782 = alloca %"char[]", align 8
  %round792 = alloca double, align 8
  %small = alloca double, align 8
  %indirectarg795 = alloca %"char[]", align 8
  %indirectarg796 = alloca %"char[]", align 8
  %indirectarg797 = alloca %"char[]", align 8
  %taddr800 = alloca i64, align 8
  %taddr801 = alloca i64, align 8
  %indirectarg802 = alloca %"char[]", align 8
  %indirectarg803 = alloca %"char[]", align 8
  %indirectarg804 = alloca %"char[]", align 8
  %varargslots805 = alloca [2 x %any], align 16
  %indirectarg808 = alloca %"any[]", align 8
  %indirectarg812 = alloca %"char[]", align 8
  %indirectarg813 = alloca %"char[]", align 8
  %indirectarg814 = alloca %"char[]", align 8
  %taddr828 = alloca i64, align 8
  %taddr829 = alloca i64, align 8
  %indirectarg830 = alloca %"char[]", align 8
  %indirectarg831 = alloca %"char[]", align 8
  %indirectarg832 = alloca %"char[]", align 8
  %varargslots833 = alloca [2 x %any], align 16
  %indirectarg836 = alloca %"any[]", align 8
  %switch = alloca i8, align 1
  %indirectarg872 = alloca %"char[]", align 8
  %indirectarg873 = alloca %"char[]", align 8
  %indirectarg874 = alloca %"char[]", align 8
  %taddr877 = alloca i64, align 8
  %taddr878 = alloca i64, align 8
  %indirectarg879 = alloca %"char[]", align 8
  %indirectarg880 = alloca %"char[]", align 8
  %indirectarg881 = alloca %"char[]", align 8
  %varargslots882 = alloca [2 x %any], align 16
  %indirectarg885 = alloca %"any[]", align 8
  %indirectarg893 = alloca %"char[]", align 8
  %indirectarg894 = alloca %"char[]", align 8
  %indirectarg895 = alloca %"char[]", align 8
  %taddr898 = alloca i64, align 8
  %taddr899 = alloca i64, align 8
  %indirectarg900 = alloca %"char[]", align 8
  %indirectarg901 = alloca %"char[]", align 8
  %indirectarg902 = alloca %"char[]", align 8
  %varargslots903 = alloca [2 x %any], align 16
  %indirectarg906 = alloca %"any[]", align 8
  %indirectarg911 = alloca %"char[]", align 8
  %indirectarg912 = alloca %"char[]", align 8
  %indirectarg913 = alloca %"char[]", align 8
  %taddr916 = alloca i64, align 8
  %taddr917 = alloca i64, align 8
  %indirectarg918 = alloca %"char[]", align 8
  %indirectarg919 = alloca %"char[]", align 8
  %indirectarg920 = alloca %"char[]", align 8
  %varargslots921 = alloca [2 x %any], align 16
  %indirectarg924 = alloca %"any[]", align 8
  %indirectarg929 = alloca %"char[]", align 8
  %indirectarg930 = alloca %"char[]", align 8
  %indirectarg931 = alloca %"char[]", align 8
  %taddr934 = alloca i64, align 8
  %taddr935 = alloca i64, align 8
  %indirectarg936 = alloca %"char[]", align 8
  %indirectarg937 = alloca %"char[]", align 8
  %indirectarg938 = alloca %"char[]", align 8
  %varargslots939 = alloca [2 x %any], align 16
  %indirectarg942 = alloca %"any[]", align 8
  %indirectarg949 = alloca %"char[]", align 8
  %indirectarg950 = alloca %"char[]", align 8
  %indirectarg951 = alloca %"char[]", align 8
  %taddr954 = alloca i64, align 8
  %taddr955 = alloca i64, align 8
  %indirectarg956 = alloca %"char[]", align 8
  %indirectarg957 = alloca %"char[]", align 8
  %indirectarg958 = alloca %"char[]", align 8
  %varargslots959 = alloca [2 x %any], align 16
  %indirectarg962 = alloca %"any[]", align 8
  %indirectarg969 = alloca %"char[]", align 8
  %indirectarg970 = alloca %"char[]", align 8
  %indirectarg971 = alloca %"char[]", align 8
  %taddr974 = alloca i64, align 8
  %taddr975 = alloca i64, align 8
  %indirectarg976 = alloca %"char[]", align 8
  %indirectarg977 = alloca %"char[]", align 8
  %indirectarg978 = alloca %"char[]", align 8
  %varargslots979 = alloca [2 x %any], align 16
  %indirectarg982 = alloca %"any[]", align 8
  %indirectarg987 = alloca %"char[]", align 8
  %indirectarg988 = alloca %"char[]", align 8
  %indirectarg989 = alloca %"char[]", align 8
  %taddr992 = alloca i64, align 8
  %taddr993 = alloca i64, align 8
  %indirectarg994 = alloca %"char[]", align 8
  %indirectarg995 = alloca %"char[]", align 8
  %indirectarg996 = alloca %"char[]", align 8
  %varargslots997 = alloca [2 x %any], align 16
  %indirectarg1000 = alloca %"any[]", align 8
  %indirectarg1009 = alloca %"char[]", align 8
  %indirectarg1010 = alloca %"char[]", align 8
  %indirectarg1011 = alloca %"char[]", align 8
  %taddr1014 = alloca i64, align 8
  %taddr1015 = alloca i64, align 8
  %indirectarg1016 = alloca %"char[]", align 8
  %indirectarg1017 = alloca %"char[]", align 8
  %indirectarg1018 = alloca %"char[]", align 8
  %varargslots1019 = alloca [2 x %any], align 16
  %indirectarg1022 = alloca %"any[]", align 8
  %taddr1044 = alloca i64, align 8
  %taddr1045 = alloca i64, align 8
  %indirectarg1046 = alloca %"char[]", align 8
  %indirectarg1047 = alloca %"char[]", align 8
  %indirectarg1048 = alloca %"char[]", align 8
  %varargslots1049 = alloca [2 x %any], align 16
  %indirectarg1052 = alloca %"any[]", align 8
  %taddr1087 = alloca i64, align 8
  %taddr1088 = alloca i64, align 8
  %indirectarg1089 = alloca %"char[]", align 8
  %indirectarg1090 = alloca %"char[]", align 8
  %indirectarg1091 = alloca %"char[]", align 8
  %varargslots1092 = alloca [2 x %any], align 16
  %indirectarg1095 = alloca %"any[]", align 8
  %i1101 = alloca i32, align 4
  %taddr1105 = alloca i64, align 8
  %taddr1106 = alloca i64, align 8
  %indirectarg1107 = alloca %"char[]", align 8
  %indirectarg1108 = alloca %"char[]", align 8
  %indirectarg1109 = alloca %"char[]", align 8
  %varargslots1110 = alloca [2 x %any], align 16
  %indirectarg1113 = alloca %"any[]", align 8
  %indirectarg1117 = alloca %"char[]", align 8
  %indirectarg1118 = alloca %"char[]", align 8
  %indirectarg1119 = alloca %"char[]", align 8
  %x1131 = alloca i64, align 8
  %x1132 = alloca i64, align 8
  %y1137 = alloca i64, align 8
  %y1138 = alloca i64, align 8
  %x1140 = alloca i64, align 8
  %x1141 = alloca i64, align 8
  %y1148 = alloca i64, align 8
  %y1149 = alloca i64, align 8
  %l1165 = alloca i32, align 4
  %estr1177 = alloca ptr, align 8
  %indirectarg1196 = alloca i128, align 16
  %indirectarg1207 = alloca %"char[]", align 8
  %indirectarg1208 = alloca %"char[]", align 8
  %indirectarg1209 = alloca %"char[]", align 8
  %indirectarg1218 = alloca %"char[]", align 8
  %indirectarg1219 = alloca %"char[]", align 8
  %indirectarg1220 = alloca %"char[]", align 8
  %len1235 = alloca i64, align 8
  %error_var1247 = alloca i64, align 8
  %retparam1253 = alloca i64, align 8
  %error_var1268 = alloca i64, align 8
  %retparam1270 = alloca i64, align 8
  %error_var1281 = alloca i64, align 8
  %retparam1287 = alloca i64, align 8
  %d1300 = alloca ptr, align 8
  %s1304 = alloca ptr, align 8
  %indirectarg1307 = alloca %"char[]", align 8
  %indirectarg1308 = alloca %"char[]", align 8
  %indirectarg1309 = alloca %"char[]", align 8
  %taddr1312 = alloca i64, align 8
  %taddr1313 = alloca i64, align 8
  %indirectarg1314 = alloca %"char[]", align 8
  %indirectarg1315 = alloca %"char[]", align 8
  %indirectarg1316 = alloca %"char[]", align 8
  %varargslots1317 = alloca [2 x %any], align 16
  %indirectarg1320 = alloca %"any[]", align 8
  %indirectarg1324 = alloca i128, align 16
  %switch1325 = alloca i8, align 1
  %indirectarg1343 = alloca %"char[]", align 8
  %indirectarg1344 = alloca %"char[]", align 8
  %indirectarg1345 = alloca %"char[]", align 8
  %error_var1349 = alloca i64, align 8
  %taddr1355 = alloca i64, align 8
  %indirectarg1356 = alloca %"char[]", align 8
  %indirectarg1357 = alloca %"char[]", align 8
  %indirectarg1358 = alloca %"char[]", align 8
  %varargslots1359 = alloca [1 x %any], align 16
  %indirectarg1361 = alloca %"any[]", align 8
  %retparam1364 = alloca i64, align 8
  %indirectarg1365 = alloca %"char[]", align 8
  %error_var1382 = alloca i64, align 8
  %retparam1383 = alloca i64, align 8
  %s1398 = alloca ptr, align 8
  %indirectarg1401 = alloca %"char[]", align 8
  %indirectarg1402 = alloca %"char[]", align 8
  %indirectarg1403 = alloca %"char[]", align 8
  %taddr1406 = alloca i64, align 8
  %taddr1407 = alloca i64, align 8
  %indirectarg1408 = alloca %"char[]", align 8
  %indirectarg1409 = alloca %"char[]", align 8
  %indirectarg1410 = alloca %"char[]", align 8
  %varargslots1411 = alloca [2 x %any], align 16
  %indirectarg1414 = alloca %"any[]", align 8
  %indirectarg1418 = alloca i128, align 16
  %indirectarg1425 = alloca %"char[]", align 8
  %indirectarg1426 = alloca %"char[]", align 8
  %indirectarg1427 = alloca %"char[]", align 8
  %error_var1430 = alloca i64, align 8
  %x1431 = alloca i64, align 8
  %y1432 = alloca i64, align 8
  %taddr1437 = alloca i64, align 8
  %indirectarg1438 = alloca %"char[]", align 8
  %indirectarg1439 = alloca %"char[]", align 8
  %indirectarg1440 = alloca %"char[]", align 8
  %varargslots1441 = alloca [1 x %any], align 16
  %indirectarg1443 = alloca %"any[]", align 8
  %retparam1446 = alloca i64, align 8
  %indirectarg1447 = alloca %"char[]", align 8
  %error_var1457 = alloca i64, align 8
  %retparam1459 = alloca i64, align 8
  %d1471 = alloca ptr, align 8
  %s1479 = alloca ptr, align 8
  %indirectarg1482 = alloca %"char[]", align 8
  %indirectarg1483 = alloca %"char[]", align 8
  %indirectarg1484 = alloca %"char[]", align 8
  %taddr1487 = alloca i64, align 8
  %taddr1488 = alloca i64, align 8
  %indirectarg1489 = alloca %"char[]", align 8
  %indirectarg1490 = alloca %"char[]", align 8
  %indirectarg1491 = alloca %"char[]", align 8
  %varargslots1492 = alloca [2 x %any], align 16
  %indirectarg1495 = alloca %"any[]", align 8
  %indirectarg1499 = alloca i128, align 16
  %error_var1513 = alloca i64, align 8
  %retparam1515 = alloca i64, align 8
  %error_var1530 = alloca i64, align 8
  %retparam1531 = alloca i64, align 8
  %error_var1540 = alloca i64, align 8
  %x1542 = alloca i64, align 8
  %y1543 = alloca i64, align 8
  %taddr1548 = alloca i64, align 8
  %indirectarg1549 = alloca %"char[]", align 8
  %indirectarg1550 = alloca %"char[]", align 8
  %indirectarg1551 = alloca %"char[]", align 8
  %varargslots1552 = alloca [1 x %any], align 16
  %indirectarg1554 = alloca %"any[]", align 8
  %retparam1557 = alloca i64, align 8
  %indirectarg1558 = alloca %"char[]", align 8
  %error_var1569 = alloca i64, align 8
  %retparam1571 = alloca i64, align 8
  %error_var1578 = alloca i64, align 8
  %taddr1583 = alloca i64, align 8
  %indirectarg1584 = alloca %"char[]", align 8
  %indirectarg1585 = alloca %"char[]", align 8
  %indirectarg1586 = alloca %"char[]", align 8
  %varargslots1587 = alloca [1 x %any], align 16
  %indirectarg1589 = alloca %"any[]", align 8
  %retparam1592 = alloca i64, align 8
  %indirectarg1593 = alloca %"char[]", align 8
  %error_var1605 = alloca i64, align 8
  %retparam1611 = alloca i64, align 8
  %reterr1619 = alloca i64, align 8
  %4 = icmp eq ptr %1, null, !dbg !1225
  %5 = call i1 @llvm.expect.i1(i1 %4, i1 false), !dbg !1225
  br i1 %5, label %panic, label %checkok, !dbg !1225

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !1226, !DIExpression(), !1227)
  store i32 %2, ptr %formatting, align 4
    #dbg_declare(ptr %formatting, !1228, !DIExpression(), !1227)
  store double %3, ptr %y, align 8
    #dbg_declare(ptr %y, !1229, !DIExpression(), !1227)
    #dbg_declare(ptr %big, !1230, !DIExpression(), !1234)
  call void @llvm.memset.p0.i64(ptr align 16 %big, i8 0, i64 504, i1 false), !dbg !1234
    #dbg_declare(ptr %is_neg, !1235, !DIExpression(), !1236)
  store i8 0, ptr %is_neg, align 1, !dbg !1236
  %6 = load double, ptr %y, align 8
  store double %6, ptr %x, align 8
  %7 = load double, ptr %x, align 8
  store double %7, ptr %expr, align 8
  %checknull = icmp eq ptr %expr, null, !dbg !1237
  %8 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1237
  br i1 %8, label %panic3, label %checkok7, !dbg !1237

checkok7:                                         ; preds = %checkok
  %9 = ptrtoint ptr %expr to i64, !dbg !1237
  %10 = urem i64 %9, 8, !dbg !1237
  %11 = icmp ne i64 %10, 0, !dbg !1237
  %12 = call i1 @llvm.expect.i1(i1 %11, i1 false), !dbg !1237
  br i1 %12, label %panic8, label %checkok14, !dbg !1237

checkok14:                                        ; preds = %checkok7
  %13 = load i64, ptr %expr, align 8, !dbg !1237
  %lshr = lshr i64 %13, 63, !dbg !1239
  %14 = freeze i64 %lshr, !dbg !1239
  %trunc = trunc i64 %14 to i32, !dbg !1239
  %i2b = icmp ne i32 %trunc, 0, !dbg !1239
  br i1 %i2b, label %if.then, label %if.exit, !dbg !1239

if.then:                                          ; preds = %checkok14
  store i8 1, ptr %is_neg, align 1, !dbg !1243
  %15 = load double, ptr %y, align 8, !dbg !1245
  %fneg = fneg double %15, !dbg !1245
  store double %fneg, ptr %y, align 8, !dbg !1245
  br label %if.exit, !dbg !1245

if.exit:                                          ; preds = %if.then, %checkok14
    #dbg_declare(ptr %pl, !1246, !DIExpression(), !1247)
  %16 = load i8, ptr %is_neg, align 1, !dbg !1247
  %17 = trunc i8 %16 to i1, !dbg !1247
  br i1 %17, label %or.phi, label %or.rhs, !dbg !1247

or.rhs:                                           ; preds = %if.exit
  %18 = load ptr, ptr %self, align 8, !dbg !1247
  %ptradd15 = getelementptr inbounds i8, ptr %18, i64 16, !dbg !1247
  %19 = load i32, ptr %ptradd15, align 8, !dbg !1247
  %lshrl = lshr i32 %19, 2, !dbg !1247
  %20 = and i32 1, %lshrl, !dbg !1247
  %trunc16 = trunc i32 %20 to i8, !dbg !1247
  %21 = trunc i8 %trunc16 to i1, !dbg !1247
  br label %or.phi, !dbg !1247

or.phi:                                           ; preds = %or.rhs, %if.exit
  %val = phi i1 [ true, %if.exit ], [ %21, %or.rhs ], !dbg !1247
  %ternary = select i1 %val, i64 1, i64 0, !dbg !1247
  store i64 %ternary, ptr %pl, align 8, !dbg !1247
  %22 = load double, ptr %y, align 8
  store double %22, ptr %x17, align 8
  %23 = load double, ptr %x17, align 8
  store double %23, ptr %expr18, align 8
  %checknull19 = icmp eq ptr %expr18, null, !dbg !1248
  %24 = call i1 @llvm.expect.i1(i1 %checknull19, i1 false), !dbg !1248
  br i1 %24, label %panic20, label %checkok24, !dbg !1248

checkok24:                                        ; preds = %or.phi
  %25 = ptrtoint ptr %expr18 to i64, !dbg !1248
  %26 = urem i64 %25, 8, !dbg !1248
  %27 = icmp ne i64 %26, 0, !dbg !1248
  %28 = call i1 @llvm.expect.i1(i1 %27, i1 false), !dbg !1248
  br i1 %28, label %panic25, label %checkok35, !dbg !1248

checkok35:                                        ; preds = %checkok24
  %29 = load i64, ptr %expr18, align 8, !dbg !1248
  %and = and i64 %29, 9223372036854775807, !dbg !1250
  %lt = icmp ult i64 %and, 9218868437227405312, !dbg !1250
  br i1 %lt, label %if.exit112, label %if.else, !dbg !1250

if.else:                                          ; preds = %checkok35
    #dbg_declare(ptr %len, !1253, !DIExpression(), !1255)
  store i64 0, ptr %len, align 8, !dbg !1255
  %30 = load ptr, ptr %self, align 8, !dbg !1256
  %ptradd36 = getelementptr inbounds i8, ptr %30, i64 16, !dbg !1256
  %31 = load i32, ptr %ptradd36, align 8, !dbg !1256
  %lshrl37 = lshr i32 %31, 1, !dbg !1256
  %32 = and i32 1, %lshrl37, !dbg !1256
  %trunc38 = trunc i32 %32 to i8, !dbg !1256
  %33 = trunc i8 %trunc38 to i1, !dbg !1256
  br i1 %33, label %if.exit43, label %if.else39, !dbg !1256

if.else39:                                        ; preds = %if.else
  %34 = load i64, ptr %len, align 8, !dbg !1256
  %35 = load ptr, ptr %self, align 8, !dbg !1256
  %ptradd40 = getelementptr inbounds i8, ptr %35, i64 16, !dbg !1256
  %ptradd41 = getelementptr inbounds i8, ptr %ptradd40, i64 4, !dbg !1256
  %36 = load i32, ptr %ptradd41, align 4, !dbg !1256
  %zext = zext i32 %36 to i64, !dbg !1256
  %37 = load i64, ptr %pl, align 8, !dbg !1256
  %add = add i64 3, %37, !dbg !1256
  %38 = load ptr, ptr %self, align 8
  %39 = call i64 @std.io.Formatter.pad(ptr %retparam, ptr %38, i8 32, i64 %zext, i64 %add) #6, !dbg !1256
  %not_err = icmp eq i64 %39, 0, !dbg !1256
  %40 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1256
  br i1 %40, label %after_check, label %assign_optional, !dbg !1256

assign_optional:                                  ; preds = %if.else39
  store i64 %39, ptr %error_var, align 8, !dbg !1256
  br label %guard_block, !dbg !1256

after_check:                                      ; preds = %if.else39
  br label %noerr_block, !dbg !1256

guard_block:                                      ; preds = %assign_optional
  %41 = load i64, ptr %error_var, align 8, !dbg !1256
  ret i64 %41, !dbg !1256

noerr_block:                                      ; preds = %after_check
  %42 = load i64, ptr %retparam, align 8, !dbg !1256
  %add42 = add i64 %34, %42, !dbg !1256
  store i64 %add42, ptr %len, align 8, !dbg !1256
  br label %if.exit43, !dbg !1256

if.exit43:                                        ; preds = %noerr_block, %if.else
    #dbg_declare(ptr %s, !1257, !DIExpression(), !1258)
  %43 = load ptr, ptr %self, align 8, !dbg !1258
  %ptradd44 = getelementptr inbounds i8, ptr %43, i64 16, !dbg !1258
  %44 = load i32, ptr %ptradd44, align 8, !dbg !1258
  %lshrl45 = lshr i32 %44, 5, !dbg !1258
  %45 = and i32 1, %lshrl45, !dbg !1258
  %trunc46 = trunc i32 %45 to i8, !dbg !1258
  %46 = trunc i8 %trunc46 to i1, !dbg !1258
  %ternary47 = select i1 %46, %"char[]" { ptr @.str.151, i64 3 }, %"char[]" { ptr @.str.152, i64 3 }, !dbg !1258
  store %"char[]" %ternary47, ptr %s, align 8, !dbg !1258
  %47 = load double, ptr %y, align 8
  store double %47, ptr %x48, align 8
  %48 = load double, ptr %x48, align 8
  store double %48, ptr %expr49, align 8
  %checknull50 = icmp eq ptr %expr49, null, !dbg !1259
  %49 = call i1 @llvm.expect.i1(i1 %checknull50, i1 false), !dbg !1259
  br i1 %49, label %panic51, label %checkok55, !dbg !1259

checkok55:                                        ; preds = %if.exit43
  %50 = ptrtoint ptr %expr49 to i64, !dbg !1259
  %51 = urem i64 %50, 8, !dbg !1259
  %52 = icmp ne i64 %51, 0, !dbg !1259
  %53 = call i1 @llvm.expect.i1(i1 %52, i1 false), !dbg !1259
  br i1 %53, label %panic56, label %checkok66, !dbg !1259

checkok66:                                        ; preds = %checkok55
  %54 = load i64, ptr %expr49, align 8, !dbg !1259
  %and67 = and i64 %54, 9223372036854775807, !dbg !1261
  %gt = icmp ugt i64 %and67, 9218868437227405312, !dbg !1261
  br i1 %gt, label %if.then68, label %if.exit73, !dbg !1261

if.then68:                                        ; preds = %checkok66
  %55 = load ptr, ptr %self, align 8, !dbg !1263
  %ptradd69 = getelementptr inbounds i8, ptr %55, i64 16, !dbg !1263
  %56 = load i32, ptr %ptradd69, align 8, !dbg !1263
  %lshrl70 = lshr i32 %56, 5, !dbg !1263
  %57 = and i32 1, %lshrl70, !dbg !1263
  %trunc71 = trunc i32 %57 to i8, !dbg !1263
  %58 = trunc i8 %trunc71 to i1, !dbg !1263
  %ternary72 = select i1 %58, %"char[]" { ptr @.str.153, i64 3 }, %"char[]" { ptr @.str.154, i64 3 }, !dbg !1263
  store %"char[]" %ternary72, ptr %s, align 8, !dbg !1263
  br label %if.exit73, !dbg !1263

if.exit73:                                        ; preds = %if.then68, %checkok66
  %59 = load i64, ptr %pl, align 8, !dbg !1264
  %i2b74 = icmp ne i64 %59, 0, !dbg !1264
  br i1 %i2b74, label %if.then75, label %if.exit85, !dbg !1264

if.then75:                                        ; preds = %if.exit73
  %60 = load i64, ptr %len, align 8, !dbg !1264
  %61 = load i8, ptr %is_neg, align 1, !dbg !1264
  %62 = trunc i8 %61 to i1, !dbg !1264
  %ternary77 = select i1 %62, i8 45, i8 43, !dbg !1264
  %63 = load ptr, ptr %self, align 8
  %64 = call i64 @std.io.Formatter.out(ptr %retparam78, ptr %63, i8 %ternary77), !dbg !1264
  %not_err79 = icmp eq i64 %64, 0, !dbg !1264
  %65 = call i1 @llvm.expect.i1(i1 %not_err79, i1 true), !dbg !1264
  br i1 %65, label %after_check81, label %assign_optional80, !dbg !1264

assign_optional80:                                ; preds = %if.then75
  store i64 %64, ptr %error_var76, align 8, !dbg !1264
  br label %guard_block82, !dbg !1264

after_check81:                                    ; preds = %if.then75
  br label %noerr_block83, !dbg !1264

guard_block82:                                    ; preds = %assign_optional80
  %66 = load i64, ptr %error_var76, align 8, !dbg !1264
  ret i64 %66, !dbg !1264

noerr_block83:                                    ; preds = %after_check81
  %67 = load i64, ptr %retparam78, align 8, !dbg !1264
  %add84 = add i64 %60, %67, !dbg !1264
  store i64 %add84, ptr %len, align 8, !dbg !1264
  br label %if.exit85, !dbg !1264

if.exit85:                                        ; preds = %noerr_block83, %if.exit73
  %68 = load i64, ptr %len, align 8, !dbg !1265
  %69 = load ptr, ptr %self, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg88, ptr align 8 %s, i32 16, i1 false)
  %70 = call i64 @std.io.Formatter.out_chars(ptr %retparam87, ptr %69, ptr align 8 %indirectarg88), !dbg !1265
  %not_err89 = icmp eq i64 %70, 0, !dbg !1265
  %71 = call i1 @llvm.expect.i1(i1 %not_err89, i1 true), !dbg !1265
  br i1 %71, label %after_check91, label %assign_optional90, !dbg !1265

assign_optional90:                                ; preds = %if.exit85
  store i64 %70, ptr %error_var86, align 8, !dbg !1265
  br label %guard_block92, !dbg !1265

after_check91:                                    ; preds = %if.exit85
  br label %noerr_block93, !dbg !1265

guard_block92:                                    ; preds = %assign_optional90
  %72 = load i64, ptr %error_var86, align 8, !dbg !1265
  ret i64 %72, !dbg !1265

noerr_block93:                                    ; preds = %after_check91
  %73 = load i64, ptr %retparam87, align 8, !dbg !1265
  %add94 = add i64 %68, %73, !dbg !1265
  store i64 %add94, ptr %len, align 8, !dbg !1265
  %74 = load ptr, ptr %self, align 8, !dbg !1266
  %ptradd95 = getelementptr inbounds i8, ptr %74, i64 16, !dbg !1266
  %75 = load i32, ptr %ptradd95, align 8, !dbg !1266
  %lshrl96 = lshr i32 %75, 1, !dbg !1266
  %76 = and i32 1, %lshrl96, !dbg !1266
  %trunc97 = trunc i32 %76 to i8, !dbg !1266
  %77 = trunc i8 %trunc97 to i1, !dbg !1266
  br i1 %77, label %if.then98, label %if.exit111, !dbg !1266

if.then98:                                        ; preds = %noerr_block93
  %78 = load i64, ptr %len, align 8, !dbg !1266
  %79 = load ptr, ptr %self, align 8, !dbg !1266
  %ptradd100 = getelementptr inbounds i8, ptr %79, i64 16, !dbg !1266
  %ptradd101 = getelementptr inbounds i8, ptr %ptradd100, i64 4, !dbg !1266
  %80 = load i32, ptr %ptradd101, align 4, !dbg !1266
  %zext102 = zext i32 %80 to i64, !dbg !1266
  %81 = load i64, ptr %pl, align 8, !dbg !1266
  %add103 = add i64 3, %81, !dbg !1266
  %82 = load ptr, ptr %self, align 8
  %83 = call i64 @std.io.Formatter.pad(ptr %retparam104, ptr %82, i8 32, i64 %zext102, i64 %add103) #6, !dbg !1266
  %not_err105 = icmp eq i64 %83, 0, !dbg !1266
  %84 = call i1 @llvm.expect.i1(i1 %not_err105, i1 true), !dbg !1266
  br i1 %84, label %after_check107, label %assign_optional106, !dbg !1266

assign_optional106:                               ; preds = %if.then98
  store i64 %83, ptr %error_var99, align 8, !dbg !1266
  br label %guard_block108, !dbg !1266

after_check107:                                   ; preds = %if.then98
  br label %noerr_block109, !dbg !1266

guard_block108:                                   ; preds = %assign_optional106
  %85 = load i64, ptr %error_var99, align 8, !dbg !1266
  ret i64 %85, !dbg !1266

noerr_block109:                                   ; preds = %after_check107
  %86 = load i64, ptr %retparam104, align 8, !dbg !1266
  %add110 = add i64 %78, %86, !dbg !1266
  store i64 %add110, ptr %len, align 8, !dbg !1266
  br label %if.exit111, !dbg !1266

if.exit111:                                       ; preds = %noerr_block109, %noerr_block93
  %87 = load i64, ptr %len, align 8, !dbg !1267
  store i64 %87, ptr %0, align 8, !dbg !1267
  ret i64 0, !dbg !1267

if.exit112:                                       ; preds = %checkok35
    #dbg_declare(ptr %e2, !1268, !DIExpression(), !1269)
  store i32 0, ptr %e2, align 4, !dbg !1269
  %88 = load double, ptr %y, align 8
  store double %88, ptr %x113, align 8
  store ptr %e2, ptr %e, align 8
  %89 = load double, ptr %x113, align 8, !dbg !1270
  %90 = load ptr, ptr %e, align 8, !dbg !1270
  %91 = call double @std.math._frexp(double %89, ptr %90), !dbg !1270
  %fmul = fmul double %91, 2.000000e+00, !dbg !1272
  store double %fmul, ptr %y, align 8, !dbg !1272
  %92 = load double, ptr %y, align 8, !dbg !1273
  %neq = fcmp one double %92, 0.000000e+00, !dbg !1273
  br i1 %neq, label %if.then114, label %if.exit115, !dbg !1273

if.then114:                                       ; preds = %if.exit112
  %93 = load i32, ptr %e2, align 4, !dbg !1273
  %sub = sub i32 %93, 1, !dbg !1273
  store i32 %sub, ptr %e2, align 4, !dbg !1273
  br label %if.exit115, !dbg !1273

if.exit115:                                       ; preds = %if.then114, %if.exit112
    #dbg_declare(ptr %ebuf0, !1274, !DIExpression(), !1278)
  store i8 0, ptr %ebuf0, align 1, !dbg !1278
  %ptradd116 = getelementptr inbounds i8, ptr %ebuf0, i64 1, !dbg !1278
  store i8 0, ptr %ptradd116, align 1, !dbg !1278
  %ptradd117 = getelementptr inbounds i8, ptr %ebuf0, i64 2, !dbg !1278
  store i8 0, ptr %ptradd117, align 1, !dbg !1278
  %ptradd118 = getelementptr inbounds i8, ptr %ebuf0, i64 3, !dbg !1278
  store i8 0, ptr %ptradd118, align 1, !dbg !1278
  %ptradd119 = getelementptr inbounds i8, ptr %ebuf0, i64 4, !dbg !1278
  store i8 0, ptr %ptradd119, align 1, !dbg !1278
  %ptradd120 = getelementptr inbounds i8, ptr %ebuf0, i64 5, !dbg !1278
  store i8 0, ptr %ptradd120, align 1, !dbg !1278
  %ptradd121 = getelementptr inbounds i8, ptr %ebuf0, i64 6, !dbg !1278
  store i8 0, ptr %ptradd121, align 1, !dbg !1278
  %ptradd122 = getelementptr inbounds i8, ptr %ebuf0, i64 7, !dbg !1278
  store i8 0, ptr %ptradd122, align 1, !dbg !1278
  %ptradd123 = getelementptr inbounds i8, ptr %ebuf0, i64 8, !dbg !1278
  store i8 0, ptr %ptradd123, align 1, !dbg !1278
  %ptradd124 = getelementptr inbounds i8, ptr %ebuf0, i64 9, !dbg !1278
  store i8 0, ptr %ptradd124, align 1, !dbg !1278
  %ptradd125 = getelementptr inbounds i8, ptr %ebuf0, i64 10, !dbg !1278
  store i8 0, ptr %ptradd125, align 1, !dbg !1278
  %ptradd126 = getelementptr inbounds i8, ptr %ebuf0, i64 11, !dbg !1278
  store i8 0, ptr %ptradd126, align 1, !dbg !1278
    #dbg_declare(ptr %ebuf, !1279, !DIExpression(), !1280)
  %ptradd_any = getelementptr i8, ptr %ebuf0, i64 12, !dbg !1280
  store ptr %ptradd_any, ptr %ebuf, align 8, !dbg !1280
    #dbg_declare(ptr %buf_array, !1281, !DIExpression(), !1285)
  call void @llvm.memset.p0.i64(ptr align 16 %buf_array, i8 0, i64 22, i1 false), !dbg !1285
    #dbg_declare(ptr %buf, !1286, !DIExpression(), !1287)
  store ptr %buf_array, ptr %buf, align 8, !dbg !1287
    #dbg_declare(ptr %p, !1288, !DIExpression(), !1289)
  %94 = load ptr, ptr %self, align 8, !dbg !1289
  %ptradd127 = getelementptr inbounds i8, ptr %94, i64 16, !dbg !1289
  %95 = load i32, ptr %ptradd127, align 8, !dbg !1289
  %lshrl128 = lshr i32 %95, 6, !dbg !1289
  %96 = and i32 1, %lshrl128, !dbg !1289
  %trunc129 = trunc i32 %96 to i8, !dbg !1289
  %97 = trunc i8 %trunc129 to i1, !dbg !1289
  br i1 %97, label %cond.lhs, label %cond.rhs, !dbg !1289

cond.lhs:                                         ; preds = %if.exit115
  %98 = load ptr, ptr %self, align 8, !dbg !1289
  %ptradd130 = getelementptr inbounds i8, ptr %98, i64 16, !dbg !1289
  %ptradd131 = getelementptr inbounds i8, ptr %ptradd130, i64 8, !dbg !1289
  %99 = load i32, ptr %ptradd131, align 8, !dbg !1289
  %zext132 = zext i32 %99 to i64, !dbg !1289
  br label %cond.phi, !dbg !1289

cond.rhs:                                         ; preds = %if.exit115
  br label %cond.phi, !dbg !1289

cond.phi:                                         ; preds = %cond.rhs, %cond.lhs
  %val133 = phi i64 [ %zext132, %cond.lhs ], [ -1, %cond.rhs ], !dbg !1289
  store i64 %val133, ptr %p, align 8, !dbg !1289
  %100 = load i32, ptr %formatting, align 4, !dbg !1290
  %eq = icmp eq i32 %100, 3, !dbg !1290
  br i1 %eq, label %if.then134, label %if.exit395, !dbg !1290

if.then134:                                       ; preds = %cond.phi
    #dbg_declare(ptr %round, !1291, !DIExpression(), !1293)
  store double 8.000000e+00, ptr %round, align 8, !dbg !1293
  %101 = load i64, ptr %pl, align 8, !dbg !1294
  %add135 = add i64 %101, 2, !dbg !1294
  store i64 %add135, ptr %pl, align 8, !dbg !1294
  %102 = load i64, ptr %p, align 8, !dbg !1295
  %gt136 = icmp sgt i64 %102, 0, !dbg !1295
  br i1 %gt136, label %and.rhs, label %and.phi, !dbg !1295

and.rhs:                                          ; preds = %if.then134
  %103 = load i64, ptr %p, align 8, !dbg !1295
  %lt137 = icmp slt i64 %103, 12, !dbg !1295
  br label %and.phi, !dbg !1295

and.phi:                                          ; preds = %and.rhs, %if.then134
  %val138 = phi i1 [ false, %if.then134 ], [ %lt137, %and.rhs ], !dbg !1295
  br i1 %val138, label %if.then139, label %if.exit153, !dbg !1295

if.then139:                                       ; preds = %and.phi
    #dbg_declare(ptr %re, !1296, !DIExpression(), !1298)
  %104 = load i64, ptr %p, align 8, !dbg !1298
  %trunc140 = trunc i64 %104 to i32, !dbg !1298
  %sub141 = sub i32 12, %trunc140, !dbg !1298
  store i32 %sub141, ptr %re, align 4, !dbg !1298
  %105 = load double, ptr %round, align 8, !dbg !1299
  %fmul142 = fmul double %105, 2.000000e+00, !dbg !1299
  store double %fmul142, ptr %round, align 8, !dbg !1299
  br label %loop.cond, !dbg !1300

loop.cond:                                        ; preds = %loop.body, %if.then139
  %106 = load i32, ptr %re, align 4, !dbg !1301
  %sub143 = sub i32 %106, 1, !dbg !1301
  store i32 %sub143, ptr %re, align 4, !dbg !1301
  %i2b144 = icmp ne i32 %106, 0, !dbg !1301
  br i1 %i2b144, label %loop.body, label %loop.exit, !dbg !1301

loop.body:                                        ; preds = %loop.cond
  %107 = load double, ptr %round, align 8, !dbg !1301
  %fmul145 = fmul double %107, 1.600000e+01, !dbg !1301
  store double %fmul145, ptr %round, align 8, !dbg !1301
  br label %loop.cond, !dbg !1301

loop.exit:                                        ; preds = %loop.cond
  %108 = load i8, ptr %is_neg, align 1, !dbg !1303
  %109 = trunc i8 %108 to i1, !dbg !1303
  br i1 %109, label %if.then146, label %if.else149, !dbg !1303

if.then146:                                       ; preds = %loop.exit
  %110 = load double, ptr %y, align 8, !dbg !1304
  %fneg147 = fneg double %110, !dbg !1304
  store double %fneg147, ptr %y, align 8, !dbg !1304
  %111 = load double, ptr %y, align 8, !dbg !1306
  %112 = load double, ptr %round, align 8, !dbg !1306
  %fsub = fsub double %111, %112, !dbg !1306
  store double %fsub, ptr %y, align 8, !dbg !1306
  %113 = load double, ptr %y, align 8, !dbg !1307
  %114 = load double, ptr %round, align 8, !dbg !1307
  %fadd = fadd double %113, %114, !dbg !1307
  store double %fadd, ptr %y, align 8, !dbg !1307
  %115 = load double, ptr %y, align 8, !dbg !1308
  %fneg148 = fneg double %115, !dbg !1308
  store double %fneg148, ptr %y, align 8, !dbg !1308
  br label %if.exit152, !dbg !1308

if.else149:                                       ; preds = %loop.exit
  %116 = load double, ptr %y, align 8, !dbg !1309
  %117 = load double, ptr %round, align 8, !dbg !1309
  %fadd150 = fadd double %116, %117, !dbg !1309
  store double %fadd150, ptr %y, align 8, !dbg !1309
  %118 = load double, ptr %y, align 8, !dbg !1311
  %119 = load double, ptr %round, align 8, !dbg !1311
  %fsub151 = fsub double %118, %119, !dbg !1311
  store double %fsub151, ptr %y, align 8, !dbg !1311
  br label %if.exit152, !dbg !1311

if.exit152:                                       ; preds = %if.else149, %if.then146
  br label %if.exit153, !dbg !1311

if.exit153:                                       ; preds = %if.exit152, %and.phi
    #dbg_declare(ptr %estr, !1312, !DIExpression(), !1313)
  %120 = load i32, ptr %e2, align 4, !dbg !1313
  %lt154 = icmp slt i32 %120, 0, !dbg !1313
  br i1 %lt154, label %cond.lhs155, label %cond.rhs156, !dbg !1313

cond.lhs155:                                      ; preds = %if.exit153
  %121 = load i32, ptr %e2, align 4, !dbg !1313
  %neg = sub i32 0, %121, !dbg !1313
  %sext = sext i32 %neg to i128, !dbg !1313
  br label %cond.phi158, !dbg !1313

cond.rhs156:                                      ; preds = %if.exit153
  %122 = load i32, ptr %e2, align 4, !dbg !1313
  %sext157 = sext i32 %122 to i128, !dbg !1313
  br label %cond.phi158, !dbg !1313

cond.phi158:                                      ; preds = %cond.rhs156, %cond.lhs155
  %val159 = phi i128 [ %sext, %cond.lhs155 ], [ %sext157, %cond.rhs156 ], !dbg !1313
  store i128 %val159, ptr %indirectarg160, align 16
  %123 = load ptr, ptr %ebuf, align 8
  %124 = call ptr @std.io.fmt_u(ptr align 16 %indirectarg160, ptr %123), !dbg !1313
  store ptr %124, ptr %estr, align 8, !dbg !1313
  %125 = load ptr, ptr %estr, align 8, !dbg !1314
  %126 = load ptr, ptr %ebuf, align 8, !dbg !1314
  %eq161 = icmp eq ptr %125, %126, !dbg !1314
  br i1 %eq161, label %if.then162, label %if.exit170, !dbg !1314

if.then162:                                       ; preds = %cond.phi158
  %127 = load ptr, ptr %estr, align 8, !dbg !1314
  %ptradd_any163 = getelementptr i8, ptr %127, i64 -1, !dbg !1314
  store ptr %ptradd_any163, ptr %estr, align 8, !dbg !1314
  %checknull164 = icmp eq ptr %ptradd_any163, null, !dbg !1314
  %128 = call i1 @llvm.expect.i1(i1 %checknull164, i1 false), !dbg !1314
  br i1 %128, label %panic165, label %checkok169, !dbg !1314

checkok169:                                       ; preds = %if.then162
  store i8 48, ptr %ptradd_any163, align 1, !dbg !1314
  br label %if.exit170, !dbg !1314

if.exit170:                                       ; preds = %checkok169, %cond.phi158
  %129 = load i32, ptr %e2, align 4, !dbg !1315
  %lt171 = icmp slt i32 %129, 0, !dbg !1315
  %ternary172 = select i1 %lt171, i8 45, i8 43, !dbg !1315
  %130 = load ptr, ptr %estr, align 8, !dbg !1315
  %ptradd_any173 = getelementptr i8, ptr %130, i64 -1, !dbg !1315
  store ptr %ptradd_any173, ptr %estr, align 8, !dbg !1315
  %checknull174 = icmp eq ptr %ptradd_any173, null, !dbg !1315
  %131 = call i1 @llvm.expect.i1(i1 %checknull174, i1 false), !dbg !1315
  br i1 %131, label %panic175, label %checkok179, !dbg !1315

checkok179:                                       ; preds = %if.exit170
  store i8 %ternary172, ptr %ptradd_any173, align 1, !dbg !1315
  %132 = load ptr, ptr %self, align 8, !dbg !1316
  %ptradd180 = getelementptr inbounds i8, ptr %132, i64 16, !dbg !1316
  %133 = load i32, ptr %ptradd180, align 8, !dbg !1316
  %lshrl181 = lshr i32 %133, 5, !dbg !1316
  %134 = and i32 1, %lshrl181, !dbg !1316
  %trunc182 = trunc i32 %134 to i8, !dbg !1316
  %135 = trunc i8 %trunc182 to i1, !dbg !1316
  %ternary183 = select i1 %135, i8 80, i8 112, !dbg !1316
  %136 = load ptr, ptr %estr, align 8, !dbg !1316
  %ptradd_any184 = getelementptr i8, ptr %136, i64 -1, !dbg !1316
  store ptr %ptradd_any184, ptr %estr, align 8, !dbg !1316
  %checknull185 = icmp eq ptr %ptradd_any184, null, !dbg !1316
  %137 = call i1 @llvm.expect.i1(i1 %checknull185, i1 false), !dbg !1316
  br i1 %137, label %panic186, label %checkok190, !dbg !1316

checkok190:                                       ; preds = %checkok179
  store i8 %ternary183, ptr %ptradd_any184, align 1, !dbg !1316
    #dbg_declare(ptr %s191, !1317, !DIExpression(), !1318)
  %138 = load ptr, ptr %buf, align 8, !dbg !1318
  store ptr %138, ptr %s191, align 8, !dbg !1318
    #dbg_declare(ptr %xdigits, !1319, !DIExpression(), !1320)
  %139 = load ptr, ptr %self, align 8, !dbg !1320
  %ptradd192 = getelementptr inbounds i8, ptr %139, i64 16, !dbg !1320
  %140 = load i32, ptr %ptradd192, align 8, !dbg !1320
  %lshrl193 = lshr i32 %140, 5, !dbg !1320
  %141 = and i32 1, %lshrl193, !dbg !1320
  %trunc194 = trunc i32 %141 to i8, !dbg !1320
  %142 = trunc i8 %trunc194 to i1, !dbg !1320
  %ternary195 = select i1 %142, ptr @std.io.XDIGITS_H, ptr @std.io.XDIGITS_L, !dbg !1320
  store ptr %ternary195, ptr %xdigits, align 8, !dbg !1320
  br label %loop.body198, !dbg !1321

loop.cond196:                                     ; preds = %if.exit234
  %143 = load double, ptr %y, align 8, !dbg !1322
  %neq197 = fcmp one double %143, 0.000000e+00, !dbg !1322
  br i1 %neq197, label %loop.body198, label %loop.exit235, !dbg !1322

loop.body198:                                     ; preds = %loop.cond196, %checkok190
    #dbg_declare(ptr %x199, !1324, !DIExpression(), !1326)
  %144 = load double, ptr %y, align 8, !dbg !1326
  %fpsi = fptosi double %144 to i32, !dbg !1326
  store i32 %fpsi, ptr %x199, align 4, !dbg !1326
  %145 = load ptr, ptr %xdigits, align 8, !dbg !1327
  %146 = load i32, ptr %x199, align 4, !dbg !1327
  %sext200 = sext i32 %146 to i64, !dbg !1327
  %ptradd201 = getelementptr inbounds i8, ptr %145, i64 %sext200, !dbg !1327
  %147 = load ptr, ptr %s191, align 8, !dbg !1327
  %ptradd_any202 = getelementptr i8, ptr %147, i64 1, !dbg !1327
  store ptr %ptradd_any202, ptr %s191, align 8, !dbg !1327
  %checknull203 = icmp eq ptr %147, null, !dbg !1327
  %148 = call i1 @llvm.expect.i1(i1 %checknull203, i1 false), !dbg !1327
  br i1 %148, label %panic204, label %checkok208, !dbg !1327

checkok208:                                       ; preds = %loop.body198
  %149 = load i8, ptr %ptradd201, align 1, !dbg !1327
  store i8 %149, ptr %147, align 1, !dbg !1327
  %150 = load double, ptr %y, align 8, !dbg !1328
  %151 = load i32, ptr %x199, align 4, !dbg !1328
  %sifp = sitofp i32 %151 to double, !dbg !1328
  %fsub209 = fsub double %150, %sifp, !dbg !1328
  %fmul210 = fmul double 1.600000e+01, %fsub209, !dbg !1328
  store double %fmul210, ptr %y, align 8, !dbg !1328
  %152 = load ptr, ptr %s191, align 8, !dbg !1329
  %153 = load ptr, ptr %buf, align 8, !dbg !1329
  %154 = ptrtoint ptr %153 to i64, !dbg !1329
  %155 = ptrtoint ptr %152 to i64, !dbg !1329
  %156 = sub i64 %155, %154, !dbg !1329
  %157 = sdiv exact i64 %156, 1, !dbg !1329
  %eq211 = icmp eq i64 %157, 1, !dbg !1329
  br i1 %eq211, label %and.rhs212, label %and.phi224, !dbg !1329

and.rhs212:                                       ; preds = %checkok208
  %158 = load double, ptr %y, align 8, !dbg !1329
  %neq213 = fcmp one double %158, 0.000000e+00, !dbg !1329
  br i1 %neq213, label %or.phi216, label %or.rhs214, !dbg !1329

or.rhs214:                                        ; preds = %and.rhs212
  %159 = load i64, ptr %p, align 8, !dbg !1329
  %gt215 = icmp sgt i64 %159, 0, !dbg !1329
  br label %or.phi216, !dbg !1329

or.phi216:                                        ; preds = %or.rhs214, %and.rhs212
  %val217 = phi i1 [ true, %and.rhs212 ], [ %gt215, %or.rhs214 ], !dbg !1329
  br i1 %val217, label %or.phi222, label %or.rhs218, !dbg !1329

or.rhs218:                                        ; preds = %or.phi216
  %160 = load ptr, ptr %self, align 8, !dbg !1329
  %ptradd219 = getelementptr inbounds i8, ptr %160, i64 16, !dbg !1329
  %161 = load i32, ptr %ptradd219, align 8, !dbg !1329
  %lshrl220 = lshr i32 %161, 4, !dbg !1329
  %162 = and i32 1, %lshrl220, !dbg !1329
  %trunc221 = trunc i32 %162 to i8, !dbg !1329
  %163 = trunc i8 %trunc221 to i1, !dbg !1329
  br label %or.phi222, !dbg !1329

or.phi222:                                        ; preds = %or.rhs218, %or.phi216
  %val223 = phi i1 [ true, %or.phi216 ], [ %163, %or.rhs218 ], !dbg !1329
  br label %and.phi224, !dbg !1329

and.phi224:                                       ; preds = %or.phi222, %checkok208
  %val225 = phi i1 [ false, %checkok208 ], [ %val223, %or.phi222 ], !dbg !1329
  br i1 %val225, label %if.then226, label %if.exit234, !dbg !1329

if.then226:                                       ; preds = %and.phi224
  %164 = load ptr, ptr %s191, align 8, !dbg !1329
  %ptradd_any227 = getelementptr i8, ptr %164, i64 1, !dbg !1329
  store ptr %ptradd_any227, ptr %s191, align 8, !dbg !1329
  %checknull228 = icmp eq ptr %164, null, !dbg !1329
  %165 = call i1 @llvm.expect.i1(i1 %checknull228, i1 false), !dbg !1329
  br i1 %165, label %panic229, label %checkok233, !dbg !1329

checkok233:                                       ; preds = %if.then226
  store i8 46, ptr %164, align 1, !dbg !1329
  br label %if.exit234, !dbg !1329

if.exit234:                                       ; preds = %checkok233, %and.phi224
  br label %loop.cond196, !dbg !1329

loop.exit235:                                     ; preds = %loop.cond196
    #dbg_declare(ptr %outlen, !1330, !DIExpression(), !1331)
  %166 = load ptr, ptr %s191, align 8, !dbg !1331
  %167 = load ptr, ptr %buf, align 8, !dbg !1331
  %168 = ptrtoint ptr %167 to i64, !dbg !1331
  %169 = ptrtoint ptr %166 to i64, !dbg !1331
  %170 = sub i64 %169, %168, !dbg !1331
  %171 = sdiv exact i64 %170, 1, !dbg !1331
  store i64 %171, ptr %outlen, align 8, !dbg !1331
    #dbg_declare(ptr %explen, !1332, !DIExpression(), !1333)
  %172 = load ptr, ptr %ebuf, align 8, !dbg !1333
  %173 = load ptr, ptr %estr, align 8, !dbg !1333
  %174 = ptrtoint ptr %173 to i64, !dbg !1333
  %175 = ptrtoint ptr %172 to i64, !dbg !1333
  %176 = sub i64 %175, %174, !dbg !1333
  %177 = sdiv exact i64 %176, 1, !dbg !1333
  store i64 %177, ptr %explen, align 8, !dbg !1333
  %178 = load i64, ptr %p, align 8, !dbg !1334
  %179 = load i64, ptr %explen, align 8, !dbg !1334
  %sub236 = sub i64 2147483645, %179, !dbg !1334
  %180 = load i64, ptr %pl, align 8, !dbg !1334
  %sub237 = sub i64 %sub236, %180, !dbg !1334
  %gt238 = icmp sgt i64 %178, %sub237, !dbg !1334
  br i1 %gt238, label %if.then239, label %if.exit240, !dbg !1334

if.then239:                                       ; preds = %loop.exit235
  ret i64 ptrtoint (ptr @std.io.INTERNAL_BUFFER_EXCEEDED to i64), !dbg !1334

if.exit240:                                       ; preds = %loop.exit235
    #dbg_declare(ptr %len241, !1335, !DIExpression(), !1336)
  store i64 0, ptr %len241, align 8, !dbg !1336
    #dbg_declare(ptr %l, !1337, !DIExpression(), !1338)
  %181 = load i64, ptr %p, align 8, !dbg !1338
  %i2b242 = icmp ne i64 %181, 0, !dbg !1338
  br i1 %i2b242, label %and.rhs243, label %and.phi246, !dbg !1338

and.rhs243:                                       ; preds = %if.exit240
  %182 = load i64, ptr %outlen, align 8, !dbg !1338
  %sub244 = sub i64 %182, 2, !dbg !1338
  %183 = load i64, ptr %p, align 8, !dbg !1338
  %lt245 = icmp slt i64 %sub244, %183, !dbg !1338
  br label %and.phi246, !dbg !1338

and.phi246:                                       ; preds = %and.rhs243, %if.exit240
  %val247 = phi i1 [ false, %if.exit240 ], [ %lt245, %and.rhs243 ], !dbg !1338
  br i1 %val247, label %cond.lhs248, label %cond.rhs251, !dbg !1338

cond.lhs248:                                      ; preds = %and.phi246
  %184 = load i64, ptr %p, align 8, !dbg !1339
  %add249 = add i64 %184, 2, !dbg !1339
  %185 = load i64, ptr %explen, align 8, !dbg !1339
  %add250 = add i64 %add249, %185, !dbg !1339
  br label %cond.phi253, !dbg !1339

cond.rhs251:                                      ; preds = %and.phi246
  %186 = load i64, ptr %outlen, align 8, !dbg !1340
  %187 = load i64, ptr %explen, align 8, !dbg !1340
  %add252 = add i64 %186, %187, !dbg !1340
  br label %cond.phi253, !dbg !1340

cond.phi253:                                      ; preds = %cond.rhs251, %cond.lhs248
  %val254 = phi i64 [ %add250, %cond.lhs248 ], [ %add252, %cond.rhs251 ], !dbg !1340
  store i64 %val254, ptr %l, align 8, !dbg !1340
  %188 = load ptr, ptr %self, align 8, !dbg !1341
  %ptradd255 = getelementptr inbounds i8, ptr %188, i64 16, !dbg !1341
  %189 = load i32, ptr %ptradd255, align 8, !dbg !1341
  %lshrl256 = lshr i32 %189, 1, !dbg !1341
  %190 = and i32 1, %lshrl256, !dbg !1341
  %trunc257 = trunc i32 %190 to i8, !dbg !1341
  %191 = trunc i8 %trunc257 to i1, !dbg !1341
  %not = xor i1 %191, true, !dbg !1341
  br i1 %not, label %and.rhs258, label %and.phi262, !dbg !1341

and.rhs258:                                       ; preds = %cond.phi253
  %192 = load ptr, ptr %self, align 8, !dbg !1341
  %ptradd259 = getelementptr inbounds i8, ptr %192, i64 16, !dbg !1341
  %193 = load i32, ptr %ptradd259, align 8, !dbg !1341
  %194 = and i32 1, %193, !dbg !1341
  %trunc260 = trunc i32 %194 to i8, !dbg !1341
  %195 = trunc i8 %trunc260 to i1, !dbg !1341
  %not261 = xor i1 %195, true, !dbg !1341
  br label %and.phi262, !dbg !1341

and.phi262:                                       ; preds = %and.rhs258, %cond.phi253
  %val263 = phi i1 [ false, %cond.phi253 ], [ %not261, %and.rhs258 ], !dbg !1341
  br i1 %val263, label %if.then264, label %if.exit277, !dbg !1341

if.then264:                                       ; preds = %and.phi262
  %196 = load i64, ptr %len241, align 8, !dbg !1341
  %197 = load ptr, ptr %self, align 8, !dbg !1341
  %ptradd266 = getelementptr inbounds i8, ptr %197, i64 16, !dbg !1341
  %ptradd267 = getelementptr inbounds i8, ptr %ptradd266, i64 4, !dbg !1341
  %198 = load i32, ptr %ptradd267, align 4, !dbg !1341
  %zext268 = zext i32 %198 to i64, !dbg !1341
  %199 = load i64, ptr %pl, align 8, !dbg !1341
  %200 = load i64, ptr %l, align 8, !dbg !1341
  %add269 = add i64 %199, %200, !dbg !1341
  %201 = load ptr, ptr %self, align 8
  %202 = call i64 @std.io.Formatter.pad(ptr %retparam270, ptr %201, i8 32, i64 %zext268, i64 %add269) #6, !dbg !1341
  %not_err271 = icmp eq i64 %202, 0, !dbg !1341
  %203 = call i1 @llvm.expect.i1(i1 %not_err271, i1 true), !dbg !1341
  br i1 %203, label %after_check273, label %assign_optional272, !dbg !1341

assign_optional272:                               ; preds = %if.then264
  store i64 %202, ptr %error_var265, align 8, !dbg !1341
  br label %guard_block274, !dbg !1341

after_check273:                                   ; preds = %if.then264
  br label %noerr_block275, !dbg !1341

guard_block274:                                   ; preds = %assign_optional272
  %204 = load i64, ptr %error_var265, align 8, !dbg !1341
  ret i64 %204, !dbg !1341

noerr_block275:                                   ; preds = %after_check273
  %205 = load i64, ptr %retparam270, align 8, !dbg !1341
  %add276 = add i64 %196, %205, !dbg !1341
  store i64 %add276, ptr %len241, align 8, !dbg !1341
  br label %if.exit277, !dbg !1341

if.exit277:                                       ; preds = %noerr_block275, %and.phi262
  %206 = load i8, ptr %is_neg, align 1, !dbg !1342
  %207 = trunc i8 %206 to i1, !dbg !1342
  br i1 %207, label %or.phi282, label %or.rhs278, !dbg !1342

or.rhs278:                                        ; preds = %if.exit277
  %208 = load ptr, ptr %self, align 8, !dbg !1342
  %ptradd279 = getelementptr inbounds i8, ptr %208, i64 16, !dbg !1342
  %209 = load i32, ptr %ptradd279, align 8, !dbg !1342
  %lshrl280 = lshr i32 %209, 2, !dbg !1342
  %210 = and i32 1, %lshrl280, !dbg !1342
  %trunc281 = trunc i32 %210 to i8, !dbg !1342
  %211 = trunc i8 %trunc281 to i1, !dbg !1342
  br label %or.phi282, !dbg !1342

or.phi282:                                        ; preds = %or.rhs278, %if.exit277
  %val283 = phi i1 [ true, %if.exit277 ], [ %211, %or.rhs278 ], !dbg !1342
  br i1 %val283, label %if.then284, label %if.exit294, !dbg !1342

if.then284:                                       ; preds = %or.phi282
  %212 = load i64, ptr %len241, align 8, !dbg !1342
  %213 = load i8, ptr %is_neg, align 1, !dbg !1342
  %214 = trunc i8 %213 to i1, !dbg !1342
  %ternary286 = select i1 %214, i8 45, i8 43, !dbg !1342
  %215 = load ptr, ptr %self, align 8
  %216 = call i64 @std.io.Formatter.out(ptr %retparam287, ptr %215, i8 %ternary286), !dbg !1342
  %not_err288 = icmp eq i64 %216, 0, !dbg !1342
  %217 = call i1 @llvm.expect.i1(i1 %not_err288, i1 true), !dbg !1342
  br i1 %217, label %after_check290, label %assign_optional289, !dbg !1342

assign_optional289:                               ; preds = %if.then284
  store i64 %216, ptr %error_var285, align 8, !dbg !1342
  br label %guard_block291, !dbg !1342

after_check290:                                   ; preds = %if.then284
  br label %noerr_block292, !dbg !1342

guard_block291:                                   ; preds = %assign_optional289
  %218 = load i64, ptr %error_var285, align 8, !dbg !1342
  ret i64 %218, !dbg !1342

noerr_block292:                                   ; preds = %after_check290
  %219 = load i64, ptr %retparam287, align 8, !dbg !1342
  %add293 = add i64 %212, %219, !dbg !1342
  store i64 %add293, ptr %len241, align 8, !dbg !1342
  br label %if.exit294, !dbg !1342

if.exit294:                                       ; preds = %noerr_block292, %or.phi282
  %220 = load i64, ptr %len241, align 8, !dbg !1343
  %221 = load ptr, ptr %self, align 8, !dbg !1343
  %ptradd296 = getelementptr inbounds i8, ptr %221, i64 16, !dbg !1343
  %222 = load i32, ptr %ptradd296, align 8, !dbg !1343
  %lshrl297 = lshr i32 %222, 5, !dbg !1343
  %223 = and i32 1, %lshrl297, !dbg !1343
  %trunc298 = trunc i32 %223 to i8, !dbg !1343
  %224 = trunc i8 %trunc298 to i1, !dbg !1343
  %ternary299 = select i1 %224, %"char[]" { ptr @.str.157, i64 2 }, %"char[]" { ptr @.str.158, i64 2 }, !dbg !1343
  %225 = load ptr, ptr %self, align 8
  store %"char[]" %ternary299, ptr %indirectarg301, align 8
  %226 = call i64 @std.io.Formatter.out_chars(ptr %retparam300, ptr %225, ptr align 8 %indirectarg301), !dbg !1343
  %not_err302 = icmp eq i64 %226, 0, !dbg !1343
  %227 = call i1 @llvm.expect.i1(i1 %not_err302, i1 true), !dbg !1343
  br i1 %227, label %after_check304, label %assign_optional303, !dbg !1343

assign_optional303:                               ; preds = %if.exit294
  store i64 %226, ptr %error_var295, align 8, !dbg !1343
  br label %guard_block305, !dbg !1343

after_check304:                                   ; preds = %if.exit294
  br label %noerr_block306, !dbg !1343

guard_block305:                                   ; preds = %assign_optional303
  %228 = load i64, ptr %error_var295, align 8, !dbg !1343
  ret i64 %228, !dbg !1343

noerr_block306:                                   ; preds = %after_check304
  %229 = load i64, ptr %retparam300, align 8, !dbg !1343
  %add307 = add i64 %220, %229, !dbg !1343
  store i64 %add307, ptr %len241, align 8, !dbg !1343
  %230 = load ptr, ptr %self, align 8, !dbg !1344
  %ptradd308 = getelementptr inbounds i8, ptr %230, i64 16, !dbg !1344
  %231 = load i32, ptr %ptradd308, align 8, !dbg !1344
  %232 = and i32 1, %231, !dbg !1344
  %trunc309 = trunc i32 %232 to i8, !dbg !1344
  %233 = trunc i8 %trunc309 to i1, !dbg !1344
  br i1 %233, label %if.then310, label %if.exit323, !dbg !1344

if.then310:                                       ; preds = %noerr_block306
  %234 = load i64, ptr %len241, align 8, !dbg !1344
  %235 = load ptr, ptr %self, align 8, !dbg !1344
  %ptradd312 = getelementptr inbounds i8, ptr %235, i64 16, !dbg !1344
  %ptradd313 = getelementptr inbounds i8, ptr %ptradd312, i64 4, !dbg !1344
  %236 = load i32, ptr %ptradd313, align 4, !dbg !1344
  %zext314 = zext i32 %236 to i64, !dbg !1344
  %237 = load i64, ptr %pl, align 8, !dbg !1344
  %238 = load i64, ptr %l, align 8, !dbg !1344
  %add315 = add i64 %237, %238, !dbg !1344
  %239 = load ptr, ptr %self, align 8
  %240 = call i64 @std.io.Formatter.pad(ptr %retparam316, ptr %239, i8 48, i64 %zext314, i64 %add315) #6, !dbg !1344
  %not_err317 = icmp eq i64 %240, 0, !dbg !1344
  %241 = call i1 @llvm.expect.i1(i1 %not_err317, i1 true), !dbg !1344
  br i1 %241, label %after_check319, label %assign_optional318, !dbg !1344

assign_optional318:                               ; preds = %if.then310
  store i64 %240, ptr %error_var311, align 8, !dbg !1344
  br label %guard_block320, !dbg !1344

after_check319:                                   ; preds = %if.then310
  br label %noerr_block321, !dbg !1344

guard_block320:                                   ; preds = %assign_optional318
  %242 = load i64, ptr %error_var311, align 8, !dbg !1344
  ret i64 %242, !dbg !1344

noerr_block321:                                   ; preds = %after_check319
  %243 = load i64, ptr %retparam316, align 8, !dbg !1344
  %add322 = add i64 %234, %243, !dbg !1344
  store i64 %add322, ptr %len241, align 8, !dbg !1344
  br label %if.exit323, !dbg !1344

if.exit323:                                       ; preds = %noerr_block321, %noerr_block306
  %244 = load i64, ptr %len241, align 8, !dbg !1345
  %245 = load ptr, ptr %buf, align 8, !dbg !1345
  %246 = load i64, ptr %outlen, align 8, !dbg !1345
  %add325 = add i64 0, %246, !dbg !1345
  %gt326 = icmp sgt i64 0, %add325, !dbg !1345
  %sub327 = sub i64 %add325, 0, !dbg !1345
  %247 = call i1 @llvm.expect.i1(i1 %gt326, i1 false), !dbg !1345
  br i1 %247, label %panic328, label %checkok336, !dbg !1345

checkok336:                                       ; preds = %if.exit323
  %size = sub i64 %add325, 0, !dbg !1345
  %248 = insertvalue %"char[]" undef, ptr %245, 0, !dbg !1345
  %249 = insertvalue %"char[]" %248, i64 %size, 1, !dbg !1345
  %250 = load ptr, ptr %self, align 8
  store %"char[]" %249, ptr %indirectarg338, align 8
  %251 = call i64 @std.io.Formatter.out_chars(ptr %retparam337, ptr %250, ptr align 8 %indirectarg338), !dbg !1345
  %not_err339 = icmp eq i64 %251, 0, !dbg !1345
  %252 = call i1 @llvm.expect.i1(i1 %not_err339, i1 true), !dbg !1345
  br i1 %252, label %after_check341, label %assign_optional340, !dbg !1345

assign_optional340:                               ; preds = %checkok336
  store i64 %251, ptr %error_var324, align 8, !dbg !1345
  br label %guard_block342, !dbg !1345

after_check341:                                   ; preds = %checkok336
  br label %noerr_block343, !dbg !1345

guard_block342:                                   ; preds = %assign_optional340
  %253 = load i64, ptr %error_var324, align 8, !dbg !1345
  ret i64 %253, !dbg !1345

noerr_block343:                                   ; preds = %after_check341
  %254 = load i64, ptr %retparam337, align 8, !dbg !1345
  %add344 = add i64 %244, %254, !dbg !1345
  store i64 %add344, ptr %len241, align 8, !dbg !1345
  %255 = load i64, ptr %len241, align 8, !dbg !1346
  %256 = load i64, ptr %l, align 8, !dbg !1346
  %257 = load i64, ptr %outlen, align 8, !dbg !1346
  %sub346 = sub i64 %256, %257, !dbg !1346
  %258 = load i64, ptr %explen, align 8, !dbg !1346
  %sub347 = sub i64 %sub346, %258, !dbg !1346
  %259 = load ptr, ptr %self, align 8
  %260 = call i64 @std.io.Formatter.pad(ptr %retparam348, ptr %259, i8 48, i64 %sub347, i64 0) #6, !dbg !1346
  %not_err349 = icmp eq i64 %260, 0, !dbg !1346
  %261 = call i1 @llvm.expect.i1(i1 %not_err349, i1 true), !dbg !1346
  br i1 %261, label %after_check351, label %assign_optional350, !dbg !1346

assign_optional350:                               ; preds = %noerr_block343
  store i64 %260, ptr %error_var345, align 8, !dbg !1346
  br label %guard_block352, !dbg !1346

after_check351:                                   ; preds = %noerr_block343
  br label %noerr_block353, !dbg !1346

guard_block352:                                   ; preds = %assign_optional350
  %262 = load i64, ptr %error_var345, align 8, !dbg !1346
  ret i64 %262, !dbg !1346

noerr_block353:                                   ; preds = %after_check351
  %263 = load i64, ptr %retparam348, align 8, !dbg !1346
  %add354 = add i64 %255, %263, !dbg !1346
  store i64 %add354, ptr %len241, align 8, !dbg !1346
  %264 = load i64, ptr %len241, align 8, !dbg !1347
  %265 = load ptr, ptr %estr, align 8, !dbg !1347
  %266 = load i64, ptr %explen, align 8, !dbg !1347
  %add356 = add i64 0, %266, !dbg !1347
  %gt357 = icmp sgt i64 0, %add356, !dbg !1347
  %sub358 = sub i64 %add356, 0, !dbg !1347
  %267 = call i1 @llvm.expect.i1(i1 %gt357, i1 false), !dbg !1347
  br i1 %267, label %panic359, label %checkok367, !dbg !1347

checkok367:                                       ; preds = %noerr_block353
  %size368 = sub i64 %add356, 0, !dbg !1347
  %268 = insertvalue %"char[]" undef, ptr %265, 0, !dbg !1347
  %269 = insertvalue %"char[]" %268, i64 %size368, 1, !dbg !1347
  %270 = load ptr, ptr %self, align 8
  store %"char[]" %269, ptr %indirectarg370, align 8
  %271 = call i64 @std.io.Formatter.out_chars(ptr %retparam369, ptr %270, ptr align 8 %indirectarg370), !dbg !1347
  %not_err371 = icmp eq i64 %271, 0, !dbg !1347
  %272 = call i1 @llvm.expect.i1(i1 %not_err371, i1 true), !dbg !1347
  br i1 %272, label %after_check373, label %assign_optional372, !dbg !1347

assign_optional372:                               ; preds = %checkok367
  store i64 %271, ptr %error_var355, align 8, !dbg !1347
  br label %guard_block374, !dbg !1347

after_check373:                                   ; preds = %checkok367
  br label %noerr_block375, !dbg !1347

guard_block374:                                   ; preds = %assign_optional372
  %273 = load i64, ptr %error_var355, align 8, !dbg !1347
  ret i64 %273, !dbg !1347

noerr_block375:                                   ; preds = %after_check373
  %274 = load i64, ptr %retparam369, align 8, !dbg !1347
  %add376 = add i64 %264, %274, !dbg !1347
  store i64 %add376, ptr %len241, align 8, !dbg !1347
  %275 = load ptr, ptr %self, align 8, !dbg !1348
  %ptradd377 = getelementptr inbounds i8, ptr %275, i64 16, !dbg !1348
  %276 = load i32, ptr %ptradd377, align 8, !dbg !1348
  %lshrl378 = lshr i32 %276, 1, !dbg !1348
  %277 = and i32 1, %lshrl378, !dbg !1348
  %trunc379 = trunc i32 %277 to i8, !dbg !1348
  %278 = trunc i8 %trunc379 to i1, !dbg !1348
  br i1 %278, label %if.then380, label %if.exit393, !dbg !1348

if.then380:                                       ; preds = %noerr_block375
  %279 = load i64, ptr %len241, align 8, !dbg !1348
  %280 = load ptr, ptr %self, align 8, !dbg !1348
  %ptradd382 = getelementptr inbounds i8, ptr %280, i64 16, !dbg !1348
  %ptradd383 = getelementptr inbounds i8, ptr %ptradd382, i64 4, !dbg !1348
  %281 = load i32, ptr %ptradd383, align 4, !dbg !1348
  %zext384 = zext i32 %281 to i64, !dbg !1348
  %282 = load i64, ptr %pl, align 8, !dbg !1348
  %283 = load i64, ptr %l, align 8, !dbg !1348
  %add385 = add i64 %282, %283, !dbg !1348
  %284 = load ptr, ptr %self, align 8
  %285 = call i64 @std.io.Formatter.pad(ptr %retparam386, ptr %284, i8 32, i64 %zext384, i64 %add385) #6, !dbg !1348
  %not_err387 = icmp eq i64 %285, 0, !dbg !1348
  %286 = call i1 @llvm.expect.i1(i1 %not_err387, i1 true), !dbg !1348
  br i1 %286, label %after_check389, label %assign_optional388, !dbg !1348

assign_optional388:                               ; preds = %if.then380
  store i64 %285, ptr %error_var381, align 8, !dbg !1348
  br label %guard_block390, !dbg !1348

after_check389:                                   ; preds = %if.then380
  br label %noerr_block391, !dbg !1348

guard_block390:                                   ; preds = %assign_optional388
  %287 = load i64, ptr %error_var381, align 8, !dbg !1348
  ret i64 %287, !dbg !1348

noerr_block391:                                   ; preds = %after_check389
  %288 = load i64, ptr %retparam386, align 8, !dbg !1348
  %add392 = add i64 %279, %288, !dbg !1348
  store i64 %add392, ptr %len241, align 8, !dbg !1348
  br label %if.exit393, !dbg !1348

if.exit393:                                       ; preds = %noerr_block391, %noerr_block375
  %289 = load i64, ptr %len241, align 8, !dbg !1349
  store i64 %289, ptr %0, align 8, !dbg !1349
  ret i64 0, !dbg !1349

if.exit395:                                       ; preds = %cond.phi
  %290 = load i64, ptr %p, align 8, !dbg !1350
  %lt396 = icmp slt i64 %290, 0, !dbg !1350
  br i1 %lt396, label %if.then397, label %if.exit398, !dbg !1350

if.then397:                                       ; preds = %if.exit395
  store i64 6, ptr %p, align 8, !dbg !1350
  br label %if.exit398, !dbg !1350

if.exit398:                                       ; preds = %if.then397, %if.exit395
  %291 = load double, ptr %y, align 8, !dbg !1351
  %neq399 = fcmp one double %291, 0.000000e+00, !dbg !1351
  br i1 %neq399, label %if.then400, label %if.exit403, !dbg !1351

if.then400:                                       ; preds = %if.exit398
  %292 = load double, ptr %y, align 8, !dbg !1352
  %fmul401 = fmul double %292, 0x41B0000000000000, !dbg !1352
  store double %fmul401, ptr %y, align 8, !dbg !1352
  %293 = load i32, ptr %e2, align 4, !dbg !1354
  %sub402 = sub i32 %293, 28, !dbg !1354
  store i32 %sub402, ptr %e2, align 4, !dbg !1354
  br label %if.exit403, !dbg !1354

if.exit403:                                       ; preds = %if.then400, %if.exit398
    #dbg_declare(ptr %a, !1355, !DIExpression(), !1357)
  store ptr null, ptr %a, align 8, !dbg !1357
    #dbg_declare(ptr %z, !1358, !DIExpression(), !1357)
  store ptr null, ptr %z, align 8, !dbg !1357
    #dbg_declare(ptr %r, !1359, !DIExpression(), !1357)
  store ptr null, ptr %r, align 8, !dbg !1357
  %294 = load i32, ptr %e2, align 4, !dbg !1360
  %lt404 = icmp slt i32 %294, 0, !dbg !1360
  br i1 %lt404, label %if.then405, label %if.else406, !dbg !1360

if.then405:                                       ; preds = %if.exit403
  store ptr %big, ptr %z, align 8, !dbg !1361
  store ptr %big, ptr %r, align 8, !dbg !1361
  store ptr %big, ptr %a, align 8, !dbg !1361
  br label %if.exit408, !dbg !1361

if.else406:                                       ; preds = %if.exit403
  %ptradd_any407 = getelementptr i8, ptr %big, i64 288, !dbg !1363
  store ptr %ptradd_any407, ptr %z, align 8, !dbg !1363
  store ptr %ptradd_any407, ptr %r, align 8, !dbg !1363
  store ptr %ptradd_any407, ptr %a, align 8, !dbg !1363
  br label %if.exit408, !dbg !1363

if.exit408:                                       ; preds = %if.else406, %if.then405
  br label %loop.body411, !dbg !1365

loop.cond409:                                     ; preds = %checkok423
  %295 = load double, ptr %y, align 8, !dbg !1366
  %neq410 = fcmp one double %295, 0.000000e+00, !dbg !1366
  br i1 %neq410, label %loop.body411, label %loop.exit426, !dbg !1366

loop.body411:                                     ; preds = %loop.cond409, %if.exit408
    #dbg_declare(ptr %v, !1368, !DIExpression(), !1370)
  %296 = load double, ptr %y, align 8, !dbg !1370
  %fpui = fptoui double %296 to i32, !dbg !1370
  %297 = load ptr, ptr %z, align 8, !dbg !1370
  %ptradd_any412 = getelementptr i8, ptr %297, i64 4, !dbg !1370
  store ptr %ptradd_any412, ptr %z, align 8, !dbg !1370
  %298 = ptrtoint ptr %297 to i64, !dbg !1370
  %299 = urem i64 %298, 4, !dbg !1370
  %300 = icmp ne i64 %299, 0, !dbg !1370
  %301 = call i1 @llvm.expect.i1(i1 %300, i1 false), !dbg !1370
  br i1 %301, label %panic413, label %checkok423, !dbg !1370

checkok423:                                       ; preds = %loop.body411
  store i32 %fpui, ptr %297, align 4, !dbg !1370
  store i32 %fpui, ptr %v, align 4, !dbg !1370
  %302 = load double, ptr %y, align 8, !dbg !1371
  %303 = load i32, ptr %v, align 4, !dbg !1371
  %uifp = uitofp i32 %303 to double, !dbg !1371
  %fsub424 = fsub double %302, %uifp, !dbg !1371
  %fmul425 = fmul double 1.000000e+09, %fsub424, !dbg !1371
  store double %fmul425, ptr %y, align 8, !dbg !1371
  br label %loop.cond409, !dbg !1371

loop.exit426:                                     ; preds = %loop.cond409
  br label %loop.cond427, !dbg !1372

loop.cond427:                                     ; preds = %loop.exit527, %loop.exit426
  %304 = load i32, ptr %e2, align 4, !dbg !1373
  %gt428 = icmp sgt i32 %304, 0, !dbg !1373
  br i1 %gt428, label %loop.body429, label %loop.exit529, !dbg !1373

loop.body429:                                     ; preds = %loop.cond427
    #dbg_declare(ptr %carry, !1375, !DIExpression(), !1377)
  store i32 0, ptr %carry, align 4, !dbg !1377
    #dbg_declare(ptr %sh, !1378, !DIExpression(), !1379)
  store i32 29, ptr %x430, align 4
  %305 = load i32, ptr %e2, align 4
  store i32 %305, ptr %y431, align 4
  %306 = load i32, ptr %x430, align 4, !dbg !1380
  %307 = load i32, ptr %y431, align 4, !dbg !1380
  %308 = call i32 @llvm.smin.i32(i32 %306, i32 %307), !dbg !1380
  store i32 %308, ptr %sh, align 4, !dbg !1380
    #dbg_declare(ptr %d, !1382, !DIExpression(), !1384)
  %309 = load ptr, ptr %z, align 8, !dbg !1384
  %ptradd_any432 = getelementptr i8, ptr %309, i64 -4, !dbg !1384
  store ptr %ptradd_any432, ptr %d, align 8, !dbg !1384
  br label %loop.cond433, !dbg !1384

loop.cond433:                                     ; preds = %checkok483, %loop.body429
  %310 = load ptr, ptr %d, align 8, !dbg !1384
  %311 = load ptr, ptr %a, align 8, !dbg !1384
  %ge = icmp uge ptr %310, %311, !dbg !1384
  br i1 %ge, label %loop.body434, label %loop.exit486, !dbg !1384

loop.body434:                                     ; preds = %loop.cond433
    #dbg_declare(ptr %x435, !1385, !DIExpression(), !1387)
  %312 = load ptr, ptr %d, align 8, !dbg !1387
  %checknull436 = icmp eq ptr %312, null, !dbg !1387
  %313 = call i1 @llvm.expect.i1(i1 %checknull436, i1 false), !dbg !1387
  br i1 %313, label %panic437, label %checkok441, !dbg !1387

checkok441:                                       ; preds = %loop.body434
  %314 = ptrtoint ptr %312 to i64, !dbg !1387
  %315 = urem i64 %314, 4, !dbg !1387
  %316 = icmp ne i64 %315, 0, !dbg !1387
  %317 = call i1 @llvm.expect.i1(i1 %316, i1 false), !dbg !1387
  br i1 %317, label %panic442, label %checkok452, !dbg !1387

checkok452:                                       ; preds = %checkok441
  %318 = load i32, ptr %312, align 4, !dbg !1387
  %zext453 = zext i32 %318 to i64, !dbg !1387
  %319 = load i32, ptr %sh, align 4, !dbg !1387
  %zext454 = zext i32 %319 to i64, !dbg !1387
  %shift_exceeds = icmp uge i64 %zext454, 64, !dbg !1387
  %320 = call i1 @llvm.expect.i1(i1 %shift_exceeds, i1 false), !dbg !1387
  br i1 %320, label %panic455, label %checkok463, !dbg !1387

checkok463:                                       ; preds = %checkok452
  %shl = shl i64 %zext453, %zext454, !dbg !1387
  %321 = freeze i64 %shl, !dbg !1387
  %322 = load i32, ptr %carry, align 4, !dbg !1387
  %zext464 = zext i32 %322 to i64, !dbg !1387
  %add465 = add i64 %321, %zext464, !dbg !1387
  store i64 %add465, ptr %x435, align 8, !dbg !1387
  %323 = load i64, ptr %x435, align 8, !dbg !1388
  %smod = srem i64 %323, 1000000000, !dbg !1388
  %trunc466 = trunc i64 %smod to i32, !dbg !1388
  %324 = load ptr, ptr %d, align 8, !dbg !1388
  %checknull467 = icmp eq ptr %324, null, !dbg !1388
  %325 = call i1 @llvm.expect.i1(i1 %checknull467, i1 false), !dbg !1388
  br i1 %325, label %panic468, label %checkok472, !dbg !1388

checkok472:                                       ; preds = %checkok463
  %326 = ptrtoint ptr %324 to i64, !dbg !1388
  %327 = urem i64 %326, 4, !dbg !1388
  %328 = icmp ne i64 %327, 0, !dbg !1388
  %329 = call i1 @llvm.expect.i1(i1 %328, i1 false), !dbg !1388
  br i1 %329, label %panic473, label %checkok483, !dbg !1388

checkok483:                                       ; preds = %checkok472
  store i32 %trunc466, ptr %324, align 4, !dbg !1388
  %330 = load i64, ptr %x435, align 8, !dbg !1389
  %sdiv = sdiv i64 %330, 1000000000, !dbg !1389
  %trunc484 = trunc i64 %sdiv to i32, !dbg !1389
  store i32 %trunc484, ptr %carry, align 4, !dbg !1389
  %331 = load ptr, ptr %d, align 8, !dbg !1384
  %ptradd_any485 = getelementptr i8, ptr %331, i64 -4, !dbg !1384
  store ptr %ptradd_any485, ptr %d, align 8, !dbg !1384
  br label %loop.cond433, !dbg !1384

loop.exit486:                                     ; preds = %loop.cond433
  %332 = load i32, ptr %carry, align 4, !dbg !1390
  %i2b487 = icmp ne i32 %332, 0, !dbg !1390
  br i1 %i2b487, label %if.then488, label %if.exit507, !dbg !1390

if.then488:                                       ; preds = %loop.exit486
  %333 = load ptr, ptr %a, align 8, !dbg !1390
  %ptradd_any489 = getelementptr i8, ptr %333, i64 -4, !dbg !1390
  store ptr %ptradd_any489, ptr %a, align 8, !dbg !1390
  %checknull490 = icmp eq ptr %ptradd_any489, null, !dbg !1390
  %334 = call i1 @llvm.expect.i1(i1 %checknull490, i1 false), !dbg !1390
  br i1 %334, label %panic491, label %checkok495, !dbg !1390

checkok495:                                       ; preds = %if.then488
  %335 = ptrtoint ptr %ptradd_any489 to i64, !dbg !1390
  %336 = urem i64 %335, 4, !dbg !1390
  %337 = icmp ne i64 %336, 0, !dbg !1390
  %338 = call i1 @llvm.expect.i1(i1 %337, i1 false), !dbg !1390
  br i1 %338, label %panic496, label %checkok506, !dbg !1390

checkok506:                                       ; preds = %checkok495
  %339 = load i32, ptr %carry, align 4, !dbg !1390
  store i32 %339, ptr %ptradd_any489, align 4, !dbg !1390
  br label %if.exit507, !dbg !1390

if.exit507:                                       ; preds = %checkok506, %loop.exit486
  br label %loop.cond508, !dbg !1391

loop.cond508:                                     ; preds = %loop.body525, %if.exit507
  %340 = load ptr, ptr %z, align 8, !dbg !1392
  %341 = load ptr, ptr %a, align 8, !dbg !1392
  %gt509 = icmp ugt ptr %340, %341, !dbg !1392
  br i1 %gt509, label %and.rhs510, label %and.phi523, !dbg !1392

and.rhs510:                                       ; preds = %loop.cond508
  %342 = load ptr, ptr %z, align 8, !dbg !1392
  %ptradd511 = getelementptr inbounds i8, ptr %342, i64 -4, !dbg !1392
  %343 = ptrtoint ptr %ptradd511 to i64, !dbg !1392
  %344 = urem i64 %343, 4, !dbg !1392
  %345 = icmp ne i64 %344, 0, !dbg !1392
  %346 = call i1 @llvm.expect.i1(i1 %345, i1 false), !dbg !1392
  br i1 %346, label %panic512, label %checkok522, !dbg !1392

checkok522:                                       ; preds = %and.rhs510
  %347 = load i32, ptr %ptradd511, align 4, !dbg !1392
  %i2nb = icmp eq i32 %347, 0, !dbg !1392
  br label %and.phi523, !dbg !1392

and.phi523:                                       ; preds = %checkok522, %loop.cond508
  %val524 = phi i1 [ false, %loop.cond508 ], [ %i2nb, %checkok522 ], !dbg !1392
  br i1 %val524, label %loop.body525, label %loop.exit527, !dbg !1392

loop.body525:                                     ; preds = %and.phi523
  %348 = load ptr, ptr %z, align 8, !dbg !1392
  %ptradd_any526 = getelementptr i8, ptr %348, i64 -4, !dbg !1392
  store ptr %ptradd_any526, ptr %z, align 8, !dbg !1392
  br label %loop.cond508, !dbg !1392

loop.exit527:                                     ; preds = %and.phi523
  %349 = load i32, ptr %e2, align 4, !dbg !1394
  %350 = load i32, ptr %sh, align 4, !dbg !1394
  %sub528 = sub i32 %349, %350, !dbg !1394
  store i32 %sub528, ptr %e2, align 4, !dbg !1394
  br label %loop.cond427, !dbg !1394

loop.exit529:                                     ; preds = %loop.cond427
  br label %loop.cond530, !dbg !1395

loop.cond530:                                     ; preds = %if.exit693, %loop.exit529
  %351 = load i32, ptr %e2, align 4, !dbg !1396
  %lt531 = icmp slt i32 %351, 0, !dbg !1396
  br i1 %lt531, label %loop.body532, label %loop.exit695, !dbg !1396

loop.body532:                                     ; preds = %loop.cond530
    #dbg_declare(ptr %carry533, !1398, !DIExpression(), !1400)
  store i32 0, ptr %carry533, align 4, !dbg !1400
    #dbg_declare(ptr %b, !1401, !DIExpression(), !1402)
  store ptr null, ptr %b, align 8, !dbg !1402
    #dbg_declare(ptr %sh534, !1403, !DIExpression(), !1404)
  store i32 9, ptr %x535, align 4
  %352 = load i32, ptr %e2, align 4, !dbg !1404
  %neg536 = sub i32 0, %352, !dbg !1404
  store i32 %neg536, ptr %y537, align 4
  %353 = load i32, ptr %x535, align 4, !dbg !1405
  %354 = load i32, ptr %y537, align 4, !dbg !1405
  %355 = call i32 @llvm.smin.i32(i32 %353, i32 %354), !dbg !1405
  store i32 %355, ptr %sh534, align 4, !dbg !1405
    #dbg_declare(ptr %need, !1407, !DIExpression(), !1408)
  %356 = load i64, ptr %p, align 8, !dbg !1408
  %add538 = add i64 %356, 17, !dbg !1408
  %add539 = add i64 %add538, 8, !dbg !1408
  %sdiv540 = sdiv i64 %add539, 9, !dbg !1408
  %add541 = add i64 1, %sdiv540, !dbg !1408
  %trunc542 = trunc i64 %add541 to i32, !dbg !1408
  store i32 %trunc542, ptr %need, align 4, !dbg !1408
    #dbg_declare(ptr %d543, !1409, !DIExpression(), !1411)
  %357 = load ptr, ptr %a, align 8, !dbg !1411
  store ptr %357, ptr %d543, align 8, !dbg !1411
  br label %loop.cond544, !dbg !1411

loop.cond544:                                     ; preds = %checkok651, %loop.body532
  %358 = load ptr, ptr %d543, align 8, !dbg !1411
  %359 = load ptr, ptr %z, align 8, !dbg !1411
  %lt545 = icmp ult ptr %358, %359, !dbg !1411
  br i1 %lt545, label %loop.body546, label %loop.exit653, !dbg !1411

loop.body546:                                     ; preds = %loop.cond544
    #dbg_declare(ptr %rm, !1412, !DIExpression(), !1414)
  %360 = load ptr, ptr %d543, align 8, !dbg !1414
  %checknull547 = icmp eq ptr %360, null, !dbg !1414
  %361 = call i1 @llvm.expect.i1(i1 %checknull547, i1 false), !dbg !1414
  br i1 %361, label %panic548, label %checkok552, !dbg !1414

checkok552:                                       ; preds = %loop.body546
  %362 = ptrtoint ptr %360 to i64, !dbg !1414
  %363 = urem i64 %362, 4, !dbg !1414
  %364 = icmp ne i64 %363, 0, !dbg !1414
  %365 = call i1 @llvm.expect.i1(i1 %364, i1 false), !dbg !1414
  br i1 %365, label %panic553, label %checkok563, !dbg !1414

checkok563:                                       ; preds = %checkok552
  %366 = load i32, ptr %360, align 4, !dbg !1414
  %367 = load i32, ptr %sh534, align 4, !dbg !1414
  %shift_underflow = icmp slt i32 %367, 0, !dbg !1414
  %368 = call i1 @llvm.expect.i1(i1 %shift_underflow, i1 false), !dbg !1414
  br i1 %368, label %panic564, label %checkok572, !dbg !1414

checkok572:                                       ; preds = %checkok563
  %shift_exceeds573 = icmp sge i32 %367, 32, !dbg !1414
  %369 = call i1 @llvm.expect.i1(i1 %shift_exceeds573, i1 false), !dbg !1414
  br i1 %369, label %panic574, label %checkok582, !dbg !1414

checkok582:                                       ; preds = %checkok572
  %shl583 = shl i32 1, %367, !dbg !1414
  %370 = freeze i32 %shl583, !dbg !1414
  %sub584 = sub i32 %370, 1, !dbg !1414
  %and585 = and i32 %366, %sub584, !dbg !1414
  store i32 %and585, ptr %rm, align 4, !dbg !1414
  %371 = load ptr, ptr %d543, align 8, !dbg !1415
  %checknull586 = icmp eq ptr %371, null, !dbg !1415
  %372 = call i1 @llvm.expect.i1(i1 %checknull586, i1 false), !dbg !1415
  br i1 %372, label %panic587, label %checkok591, !dbg !1415

checkok591:                                       ; preds = %checkok582
  %373 = ptrtoint ptr %371 to i64, !dbg !1415
  %374 = urem i64 %373, 4, !dbg !1415
  %375 = icmp ne i64 %374, 0, !dbg !1415
  %376 = call i1 @llvm.expect.i1(i1 %375, i1 false), !dbg !1415
  br i1 %376, label %panic592, label %checkok602, !dbg !1415

checkok602:                                       ; preds = %checkok591
  %377 = load i32, ptr %371, align 4, !dbg !1415
  %378 = load i32, ptr %sh534, align 4, !dbg !1415
  %shift_exceeds603 = icmp uge i32 %378, 32, !dbg !1415
  %379 = call i1 @llvm.expect.i1(i1 %shift_exceeds603, i1 false), !dbg !1415
  br i1 %379, label %panic604, label %checkok612, !dbg !1415

checkok612:                                       ; preds = %checkok602
  %lshr613 = lshr i32 %377, %378, !dbg !1415
  %380 = freeze i32 %lshr613, !dbg !1415
  %381 = load i32, ptr %carry533, align 4, !dbg !1415
  %add614 = add i32 %380, %381, !dbg !1415
  %382 = load ptr, ptr %d543, align 8, !dbg !1415
  %checknull615 = icmp eq ptr %382, null, !dbg !1415
  %383 = call i1 @llvm.expect.i1(i1 %checknull615, i1 false), !dbg !1415
  br i1 %383, label %panic616, label %checkok620, !dbg !1415

checkok620:                                       ; preds = %checkok612
  %384 = ptrtoint ptr %382 to i64, !dbg !1415
  %385 = urem i64 %384, 4, !dbg !1415
  %386 = icmp ne i64 %385, 0, !dbg !1415
  %387 = call i1 @llvm.expect.i1(i1 %386, i1 false), !dbg !1415
  br i1 %387, label %panic621, label %checkok631, !dbg !1415

checkok631:                                       ; preds = %checkok620
  store i32 %add614, ptr %382, align 4, !dbg !1415
  %388 = load i32, ptr %sh534, align 4, !dbg !1416
  %shift_underflow632 = icmp slt i32 %388, 0, !dbg !1416
  %389 = call i1 @llvm.expect.i1(i1 %shift_underflow632, i1 false), !dbg !1416
  br i1 %389, label %panic633, label %checkok641, !dbg !1416

checkok641:                                       ; preds = %checkok631
  %shift_exceeds642 = icmp sge i32 %388, 32, !dbg !1416
  %390 = call i1 @llvm.expect.i1(i1 %shift_exceeds642, i1 false), !dbg !1416
  br i1 %390, label %panic643, label %checkok651, !dbg !1416

checkok651:                                       ; preds = %checkok641
  %ashr = ashr i32 1000000000, %388, !dbg !1416
  %391 = freeze i32 %ashr, !dbg !1416
  %392 = load i32, ptr %rm, align 4, !dbg !1416
  %mul = mul i32 %391, %392, !dbg !1416
  store i32 %mul, ptr %carry533, align 4, !dbg !1416
  %393 = load ptr, ptr %d543, align 8, !dbg !1411
  %ptradd_any652 = getelementptr i8, ptr %393, i64 4, !dbg !1411
  store ptr %ptradd_any652, ptr %d543, align 8, !dbg !1411
  br label %loop.cond544, !dbg !1411

loop.exit653:                                     ; preds = %loop.cond544
  %394 = load ptr, ptr %a, align 8, !dbg !1417
  %395 = ptrtoint ptr %394 to i64, !dbg !1417
  %396 = urem i64 %395, 4, !dbg !1417
  %397 = icmp ne i64 %396, 0, !dbg !1417
  %398 = call i1 @llvm.expect.i1(i1 %397, i1 false), !dbg !1417
  br i1 %398, label %panic654, label %checkok664, !dbg !1417

checkok664:                                       ; preds = %loop.exit653
  %399 = load i32, ptr %394, align 4, !dbg !1417
  %i2nb665 = icmp eq i32 %399, 0, !dbg !1417
  br i1 %i2nb665, label %if.then666, label %if.exit668, !dbg !1417

if.then666:                                       ; preds = %checkok664
  %400 = load ptr, ptr %a, align 8, !dbg !1417
  %ptradd_any667 = getelementptr i8, ptr %400, i64 4, !dbg !1417
  store ptr %ptradd_any667, ptr %a, align 8, !dbg !1417
  br label %if.exit668, !dbg !1417

if.exit668:                                       ; preds = %if.then666, %checkok664
  %401 = load i32, ptr %carry533, align 4, !dbg !1418
  %i2b669 = icmp ne i32 %401, 0, !dbg !1418
  br i1 %i2b669, label %if.then670, label %if.exit683, !dbg !1418

if.then670:                                       ; preds = %if.exit668
  %402 = load ptr, ptr %z, align 8, !dbg !1418
  %ptradd_any671 = getelementptr i8, ptr %402, i64 4, !dbg !1418
  store ptr %ptradd_any671, ptr %z, align 8, !dbg !1418
  %403 = ptrtoint ptr %402 to i64, !dbg !1418
  %404 = urem i64 %403, 4, !dbg !1418
  %405 = icmp ne i64 %404, 0, !dbg !1418
  %406 = call i1 @llvm.expect.i1(i1 %405, i1 false), !dbg !1418
  br i1 %406, label %panic672, label %checkok682, !dbg !1418

checkok682:                                       ; preds = %if.then670
  %407 = load i32, ptr %carry533, align 4, !dbg !1418
  store i32 %407, ptr %402, align 4, !dbg !1418
  br label %if.exit683, !dbg !1418

if.exit683:                                       ; preds = %checkok682, %if.exit668
  %408 = load i32, ptr %formatting, align 4, !dbg !1419
  %eq684 = icmp eq i32 %408, 0, !dbg !1419
  br i1 %eq684, label %cond.lhs685, label %cond.rhs686, !dbg !1419

cond.lhs685:                                      ; preds = %if.exit683
  %409 = load ptr, ptr %r, align 8, !dbg !1419
  br label %cond.phi687, !dbg !1419

cond.rhs686:                                      ; preds = %if.exit683
  %410 = load ptr, ptr %a, align 8, !dbg !1419
  br label %cond.phi687, !dbg !1419

cond.phi687:                                      ; preds = %cond.rhs686, %cond.lhs685
  %val688 = phi ptr [ %409, %cond.lhs685 ], [ %410, %cond.rhs686 ], !dbg !1419
  store ptr %val688, ptr %b, align 8, !dbg !1419
  %411 = load ptr, ptr %z, align 8, !dbg !1420
  %412 = load ptr, ptr %b, align 8, !dbg !1420
  %413 = ptrtoint ptr %412 to i64, !dbg !1420
  %414 = ptrtoint ptr %411 to i64, !dbg !1420
  %415 = sub i64 %414, %413, !dbg !1420
  %416 = sdiv exact i64 %415, 4, !dbg !1420
  %417 = load i32, ptr %need, align 4, !dbg !1420
  %sext689 = sext i32 %417 to i64, !dbg !1420
  %gt690 = icmp sgt i64 %416, %sext689, !dbg !1420
  br i1 %gt690, label %if.then691, label %if.exit693, !dbg !1420

if.then691:                                       ; preds = %cond.phi687
  %418 = load ptr, ptr %b, align 8, !dbg !1420
  %419 = load i32, ptr %need, align 4, !dbg !1420
  %sext692 = sext i32 %419 to i64, !dbg !1420
  %ptroffset_any = getelementptr [4 x i8], ptr %418, i64 %sext692, !dbg !1420
  store ptr %ptroffset_any, ptr %z, align 8, !dbg !1420
  br label %if.exit693, !dbg !1420

if.exit693:                                       ; preds = %if.then691, %cond.phi687
  %420 = load i32, ptr %e2, align 4, !dbg !1421
  %421 = load i32, ptr %sh534, align 4, !dbg !1421
  %add694 = add i32 %420, %421, !dbg !1421
  store i32 %add694, ptr %e2, align 4, !dbg !1421
  br label %loop.cond530, !dbg !1421

loop.exit695:                                     ; preds = %loop.cond530
    #dbg_declare(ptr %e696, !1422, !DIExpression(), !1423)
  store i32 0, ptr %e696, align 4, !dbg !1423
  %422 = load ptr, ptr %a, align 8, !dbg !1424
  %423 = load ptr, ptr %z, align 8, !dbg !1424
  %lt697 = icmp ult ptr %422, %423, !dbg !1424
  br i1 %lt697, label %if.then698, label %if.exit723, !dbg !1424

if.then698:                                       ; preds = %loop.exit695
    #dbg_declare(ptr %i, !1425, !DIExpression(), !1428)
  store i32 10, ptr %i, align 4, !dbg !1428
  %424 = load ptr, ptr %r, align 8, !dbg !1428
  %425 = load ptr, ptr %a, align 8, !dbg !1428
  %426 = ptrtoint ptr %425 to i64, !dbg !1428
  %427 = ptrtoint ptr %424 to i64, !dbg !1428
  %428 = sub i64 %427, %426, !dbg !1428
  %429 = sdiv exact i64 %428, 4, !dbg !1428
  %mul699 = mul i64 9, %429, !dbg !1428
  %trunc700 = trunc i64 %mul699 to i32, !dbg !1428
  store i32 %trunc700, ptr %e696, align 4, !dbg !1428
  br label %loop.cond701, !dbg !1428

loop.cond701:                                     ; preds = %loop.body719, %if.then698
  %430 = load ptr, ptr %a, align 8, !dbg !1428
  %checknull702 = icmp eq ptr %430, null, !dbg !1428
  %431 = call i1 @llvm.expect.i1(i1 %checknull702, i1 false), !dbg !1428
  br i1 %431, label %panic703, label %checkok707, !dbg !1428

checkok707:                                       ; preds = %loop.cond701
  %432 = ptrtoint ptr %430 to i64, !dbg !1428
  %433 = urem i64 %432, 4, !dbg !1428
  %434 = icmp ne i64 %433, 0, !dbg !1428
  %435 = call i1 @llvm.expect.i1(i1 %434, i1 false), !dbg !1428
  br i1 %435, label %panic708, label %checkok718, !dbg !1428

checkok718:                                       ; preds = %checkok707
  %436 = load i32, ptr %430, align 4, !dbg !1428
  %437 = load i32, ptr %i, align 4, !dbg !1428
  %le = icmp sle i32 %437, %436, !dbg !1428
  %check = icmp slt i32 %436, 0, !dbg !1428
  %siui-le = or i1 %check, %le, !dbg !1428
  br i1 %siui-le, label %loop.body719, label %loop.exit722, !dbg !1428

loop.body719:                                     ; preds = %checkok718
  %438 = load i32, ptr %i, align 4, !dbg !1428
  %mul720 = mul i32 %438, 10, !dbg !1428
  store i32 %mul720, ptr %i, align 4, !dbg !1428
  %439 = load i32, ptr %e696, align 4, !dbg !1428
  %add721 = add i32 %439, 1, !dbg !1428
  store i32 %add721, ptr %e696, align 4, !dbg !1428
  br label %loop.cond701, !dbg !1428

loop.exit722:                                     ; preds = %checkok718
  br label %if.exit723, !dbg !1428

if.exit723:                                       ; preds = %loop.exit722, %loop.exit695
    #dbg_declare(ptr %j, !1429, !DIExpression(), !1430)
  %440 = load i64, ptr %p, align 8, !dbg !1430
  %441 = load i32, ptr %formatting, align 4, !dbg !1430
  %eq724 = icmp eq i32 %441, 0, !dbg !1430
  br i1 %eq724, label %cond.lhs725, label %cond.rhs726, !dbg !1430

cond.lhs725:                                      ; preds = %if.exit723
  br label %cond.phi734, !dbg !1430

cond.rhs726:                                      ; preds = %if.exit723
  %442 = load i32, ptr %e696, align 4, !dbg !1430
  %443 = load i32, ptr %formatting, align 4, !dbg !1430
  %eq727 = icmp eq i32 %443, 2, !dbg !1430
  br i1 %eq727, label %and.rhs728, label %and.phi730, !dbg !1430

and.rhs728:                                       ; preds = %cond.rhs726
  %444 = load i64, ptr %p, align 8, !dbg !1430
  %i2b729 = icmp ne i64 %444, 0, !dbg !1430
  br label %and.phi730, !dbg !1430

and.phi730:                                       ; preds = %and.rhs728, %cond.rhs726
  %val731 = phi i1 [ false, %cond.rhs726 ], [ %i2b729, %and.rhs728 ], !dbg !1430
  %zext732 = zext i1 %val731 to i32, !dbg !1430
  %sub733 = sub i32 %442, %zext732, !dbg !1430
  br label %cond.phi734, !dbg !1430

cond.phi734:                                      ; preds = %and.phi730, %cond.lhs725
  %val735 = phi i32 [ 0, %cond.lhs725 ], [ %sub733, %and.phi730 ], !dbg !1430
  %sext736 = sext i32 %val735 to i64, !dbg !1430
  %sub737 = sub i64 %440, %sext736, !dbg !1430
  %trunc738 = trunc i64 %sub737 to i32, !dbg !1430
  store i32 %trunc738, ptr %j, align 4, !dbg !1430
  %445 = load i32, ptr %j, align 4, !dbg !1431
  %sext739 = sext i32 %445 to i64, !dbg !1431
  %446 = load ptr, ptr %z, align 8, !dbg !1431
  %447 = load ptr, ptr %r, align 8, !dbg !1431
  %448 = ptrtoint ptr %447 to i64, !dbg !1431
  %449 = ptrtoint ptr %446 to i64, !dbg !1431
  %450 = sub i64 %449, %448, !dbg !1431
  %451 = sdiv exact i64 %450, 4, !dbg !1431
  %sub740 = sub i64 %451, 1, !dbg !1431
  %mul741 = mul i64 9, %sub740, !dbg !1431
  %lt742 = icmp slt i64 %sext739, %mul741, !dbg !1431
  br i1 %lt742, label %if.then743, label %if.exit1038, !dbg !1431

if.then743:                                       ; preds = %cond.phi734
    #dbg_declare(ptr %x744, !1432, !DIExpression(), !1434)
  store i32 0, ptr %x744, align 4, !dbg !1434
    #dbg_declare(ptr %d745, !1435, !DIExpression(), !1436)
  %452 = load ptr, ptr %r, align 8, !dbg !1436
  %453 = load i32, ptr %j, align 4, !dbg !1436
  %add746 = add i32 %453, 9216, !dbg !1436
  %sdiv747 = sdiv i32 %add746, 9, !dbg !1436
  %sub748 = sub i32 %sdiv747, 1024, !dbg !1436
  %sext749 = sext i32 %sub748 to i64, !dbg !1436
  %add750 = add i64 1, %sext749, !dbg !1436
  %ptroffset_any751 = getelementptr [4 x i8], ptr %452, i64 %add750, !dbg !1436
  store ptr %ptroffset_any751, ptr %d745, align 8, !dbg !1436
  %454 = load i32, ptr %j, align 4, !dbg !1437
  %add752 = add i32 %454, 9216, !dbg !1437
  store i32 %add752, ptr %j, align 4, !dbg !1437
  %455 = load i32, ptr %j, align 4, !dbg !1438
  %smod753 = srem i32 %455, 9, !dbg !1438
  store i32 %smod753, ptr %j, align 4, !dbg !1438
    #dbg_declare(ptr %i754, !1439, !DIExpression(), !1440)
  store i32 0, ptr %i754, align 4, !dbg !1440
  store i32 10, ptr %i754, align 4, !dbg !1441
  %456 = load i32, ptr %j, align 4, !dbg !1441
  %add755 = add i32 %456, 1, !dbg !1441
  store i32 %add755, ptr %j, align 4, !dbg !1441
  br label %loop.cond756, !dbg !1441

loop.cond756:                                     ; preds = %loop.body758, %if.then743
  %457 = load i32, ptr %j, align 4, !dbg !1441
  %lt757 = icmp slt i32 %457, 9, !dbg !1441
  br i1 %lt757, label %loop.body758, label %loop.exit761, !dbg !1441

loop.body758:                                     ; preds = %loop.cond756
  %458 = load i32, ptr %i754, align 4, !dbg !1441
  %mul759 = mul i32 %458, 10, !dbg !1441
  store i32 %mul759, ptr %i754, align 4, !dbg !1441
  %459 = load i32, ptr %j, align 4, !dbg !1441
  %add760 = add i32 %459, 1, !dbg !1441
  store i32 %add760, ptr %j, align 4, !dbg !1441
  br label %loop.cond756, !dbg !1441

loop.exit761:                                     ; preds = %loop.cond756
  %460 = load ptr, ptr %d745, align 8, !dbg !1443
  %checknull762 = icmp eq ptr %460, null, !dbg !1443
  %461 = call i1 @llvm.expect.i1(i1 %checknull762, i1 false), !dbg !1443
  br i1 %461, label %panic763, label %checkok767, !dbg !1443

checkok767:                                       ; preds = %loop.exit761
  %462 = ptrtoint ptr %460 to i64, !dbg !1443
  %463 = urem i64 %462, 4, !dbg !1443
  %464 = icmp ne i64 %463, 0, !dbg !1443
  %465 = call i1 @llvm.expect.i1(i1 %464, i1 false), !dbg !1443
  br i1 %465, label %panic768, label %checkok778, !dbg !1443

checkok778:                                       ; preds = %checkok767
  %466 = load i32, ptr %460, align 4, !dbg !1443
  %467 = load i32, ptr %i754, align 4, !dbg !1443
  %zero = icmp eq i32 %467, 0, !dbg !1443
  %468 = call i1 @llvm.expect.i1(i1 %zero, i1 false), !dbg !1443
  br i1 %468, label %panic779, label %checkok783, !dbg !1443

checkok783:                                       ; preds = %checkok778
  %smod784 = srem i32 %466, %467, !dbg !1443
  store i32 %smod784, ptr %x744, align 4, !dbg !1443
  %469 = load i32, ptr %x744, align 4, !dbg !1444
  %i2b785 = icmp ne i32 %469, 0, !dbg !1444
  br i1 %i2b785, label %or.phi789, label %or.rhs786, !dbg !1444

or.rhs786:                                        ; preds = %checkok783
  %470 = load ptr, ptr %d745, align 8, !dbg !1444
  %ptradd_any787 = getelementptr i8, ptr %470, i64 4, !dbg !1444
  %471 = load ptr, ptr %z, align 8, !dbg !1444
  %neq788 = icmp ne ptr %ptradd_any787, %471, !dbg !1444
  br label %or.phi789, !dbg !1444

or.phi789:                                        ; preds = %or.rhs786, %checkok783
  %val790 = phi i1 [ true, %checkok783 ], [ %neq788, %or.rhs786 ], !dbg !1444
  br i1 %val790, label %if.then791, label %if.exit1032, !dbg !1444

if.then791:                                       ; preds = %or.phi789
    #dbg_declare(ptr %round792, !1445, !DIExpression(), !1447)
  store double 0x4340000000000000, ptr %round792, align 8, !dbg !1447
    #dbg_declare(ptr %small, !1448, !DIExpression(), !1449)
  store double 0.000000e+00, ptr %small, align 8, !dbg !1449
  %472 = load ptr, ptr %d745, align 8, !dbg !1450
  %checknull793 = icmp eq ptr %472, null, !dbg !1450
  %473 = call i1 @llvm.expect.i1(i1 %checknull793, i1 false), !dbg !1450
  br i1 %473, label %panic794, label %checkok798, !dbg !1450

checkok798:                                       ; preds = %if.then791
  %474 = ptrtoint ptr %472 to i64, !dbg !1450
  %475 = urem i64 %474, 4, !dbg !1450
  %476 = icmp ne i64 %475, 0, !dbg !1450
  %477 = call i1 @llvm.expect.i1(i1 %476, i1 false), !dbg !1450
  br i1 %477, label %panic799, label %checkok809, !dbg !1450

checkok809:                                       ; preds = %checkok798
  %478 = load i32, ptr %472, align 4, !dbg !1450
  %479 = load i32, ptr %i754, align 4, !dbg !1450
  %zero810 = icmp eq i32 %479, 0, !dbg !1450
  %480 = call i1 @llvm.expect.i1(i1 %zero810, i1 false), !dbg !1450
  br i1 %480, label %panic811, label %checkok815, !dbg !1450

checkok815:                                       ; preds = %checkok809
  %sdiv816 = sdiv i32 %478, %479, !dbg !1450
  %and817 = and i32 %sdiv816, 1, !dbg !1450
  %i2b818 = icmp ne i32 %and817, 0, !dbg !1450
  br i1 %i2b818, label %or.phi842, label %or.rhs819, !dbg !1450

or.rhs819:                                        ; preds = %checkok815
  %481 = load i32, ptr %i754, align 4, !dbg !1450
  %eq820 = icmp eq i32 %481, 1000000000, !dbg !1450
  br i1 %eq820, label %and.rhs821, label %and.phi823, !dbg !1450

and.rhs821:                                       ; preds = %or.rhs819
  %482 = load ptr, ptr %d745, align 8, !dbg !1450
  %483 = load ptr, ptr %a, align 8, !dbg !1450
  %gt822 = icmp ugt ptr %482, %483, !dbg !1450
  br label %and.phi823, !dbg !1450

and.phi823:                                       ; preds = %and.rhs821, %or.rhs819
  %val824 = phi i1 [ false, %or.rhs819 ], [ %gt822, %and.rhs821 ], !dbg !1450
  br i1 %val824, label %and.rhs825, label %and.phi840, !dbg !1450

and.rhs825:                                       ; preds = %and.phi823
  %484 = load ptr, ptr %d745, align 8, !dbg !1450
  %ptradd826 = getelementptr inbounds i8, ptr %484, i64 -4, !dbg !1450
  %485 = ptrtoint ptr %ptradd826 to i64, !dbg !1450
  %486 = urem i64 %485, 4, !dbg !1450
  %487 = icmp ne i64 %486, 0, !dbg !1450
  %488 = call i1 @llvm.expect.i1(i1 %487, i1 false), !dbg !1450
  br i1 %488, label %panic827, label %checkok837, !dbg !1450

checkok837:                                       ; preds = %and.rhs825
  %489 = load i32, ptr %ptradd826, align 4, !dbg !1450
  %and838 = and i32 %489, 1, !dbg !1450
  %i2b839 = icmp ne i32 %and838, 0, !dbg !1450
  br label %and.phi840, !dbg !1450

and.phi840:                                       ; preds = %checkok837, %and.phi823
  %val841 = phi i1 [ false, %and.phi823 ], [ %i2b839, %checkok837 ], !dbg !1450
  br label %or.phi842, !dbg !1450

or.phi842:                                        ; preds = %and.phi840, %checkok815
  %val843 = phi i1 [ true, %checkok815 ], [ %val841, %and.phi840 ], !dbg !1450
  br i1 %val843, label %if.then844, label %if.exit846, !dbg !1450

if.then844:                                       ; preds = %or.phi842
  %490 = load double, ptr %round792, align 8, !dbg !1451
  %fadd845 = fadd double %490, 2.000000e+00, !dbg !1451
  store double %fadd845, ptr %round792, align 8, !dbg !1451
  br label %if.exit846, !dbg !1451

if.exit846:                                       ; preds = %if.then844, %or.phi842
  store i8 1, ptr %switch, align 1
  br label %switch.entry

switch.entry:                                     ; preds = %if.exit846
  %491 = load i8, ptr %switch, align 1
  %492 = trunc i8 %491 to i1
  %493 = load i32, ptr %x744, align 4, !dbg !1453
  %494 = load i32, ptr %i754, align 4, !dbg !1453
  %sdiv847 = sdiv i32 %494, 2, !dbg !1453
  %gt848 = icmp sgt i32 %sdiv847, %493, !dbg !1453
  %check849 = icmp sge i32 %493, 0, !dbg !1453
  %siui-gt = and i1 %check849, %gt848, !dbg !1453
  %eq850 = icmp eq i1 %siui-gt, %492, !dbg !1453
  br i1 %eq850, label %switch.case, label %next_if, !dbg !1453

switch.case:                                      ; preds = %switch.entry
  store double 5.000000e-01, ptr %small, align 8, !dbg !1455
  br label %switch.exit, !dbg !1455

next_if:                                          ; preds = %switch.entry
  %495 = load i32, ptr %x744, align 4, !dbg !1457
  %496 = load i32, ptr %i754, align 4, !dbg !1457
  %sdiv851 = sdiv i32 %496, 2, !dbg !1457
  %eq852 = icmp eq i32 %sdiv851, %495, !dbg !1457
  %check853 = icmp sge i32 %sdiv851, 0, !dbg !1457
  %siui-eq = and i1 %check853, %eq852, !dbg !1457
  br i1 %siui-eq, label %and.rhs854, label %and.phi857, !dbg !1457

and.rhs854:                                       ; preds = %next_if
  %497 = load ptr, ptr %d745, align 8, !dbg !1457
  %ptradd_any855 = getelementptr i8, ptr %497, i64 4, !dbg !1457
  %498 = load ptr, ptr %z, align 8, !dbg !1457
  %eq856 = icmp eq ptr %ptradd_any855, %498, !dbg !1457
  br label %and.phi857, !dbg !1457

and.phi857:                                       ; preds = %and.rhs854, %next_if
  %val858 = phi i1 [ false, %next_if ], [ %eq856, %and.rhs854 ], !dbg !1457
  %eq859 = icmp eq i1 %val858, %492, !dbg !1457
  br i1 %eq859, label %switch.case860, label %next_if861, !dbg !1457

switch.case860:                                   ; preds = %and.phi857
  store double 1.000000e+00, ptr %small, align 8, !dbg !1458
  br label %switch.exit, !dbg !1458

next_if861:                                       ; preds = %and.phi857
  br label %switch.default, !dbg !1458

switch.default:                                   ; preds = %next_if861
  store double 1.500000e+00, ptr %small, align 8, !dbg !1460
  br label %switch.exit, !dbg !1460

switch.exit:                                      ; preds = %switch.default, %switch.case860, %switch.case
  %499 = load i64, ptr %pl, align 8, !dbg !1462
  %i2b862 = icmp ne i64 %499, 0, !dbg !1462
  br i1 %i2b862, label %and.rhs863, label %and.phi864, !dbg !1462

and.rhs863:                                       ; preds = %switch.exit
  %500 = load i8, ptr %is_neg, align 1, !dbg !1462
  %501 = trunc i8 %500 to i1, !dbg !1462
  br label %and.phi864, !dbg !1462

and.phi864:                                       ; preds = %and.rhs863, %switch.exit
  %val865 = phi i1 [ false, %switch.exit ], [ %501, %and.rhs863 ], !dbg !1462
  br i1 %val865, label %if.then866, label %if.exit869, !dbg !1462

if.then866:                                       ; preds = %and.phi864
  %502 = load double, ptr %round792, align 8, !dbg !1463
  %fmul867 = fmul double %502, -1.000000e+00, !dbg !1463
  store double %fmul867, ptr %round792, align 8, !dbg !1463
  %503 = load double, ptr %small, align 8, !dbg !1465
  %fmul868 = fmul double %503, -1.000000e+00, !dbg !1465
  store double %fmul868, ptr %small, align 8, !dbg !1465
  br label %if.exit869, !dbg !1465

if.exit869:                                       ; preds = %if.then866, %and.phi864
  %504 = load ptr, ptr %d745, align 8, !dbg !1466
  %checknull870 = icmp eq ptr %504, null, !dbg !1466
  %505 = call i1 @llvm.expect.i1(i1 %checknull870, i1 false), !dbg !1466
  br i1 %505, label %panic871, label %checkok875, !dbg !1466

checkok875:                                       ; preds = %if.exit869
  %506 = ptrtoint ptr %504 to i64, !dbg !1466
  %507 = urem i64 %506, 4, !dbg !1466
  %508 = icmp ne i64 %507, 0, !dbg !1466
  %509 = call i1 @llvm.expect.i1(i1 %508, i1 false), !dbg !1466
  br i1 %509, label %panic876, label %checkok886, !dbg !1466

checkok886:                                       ; preds = %checkok875
  %510 = load i32, ptr %504, align 4, !dbg !1466
  %511 = load i32, ptr %x744, align 4, !dbg !1466
  %sub887 = sub i32 %510, %511, !dbg !1466
  store i32 %sub887, ptr %504, align 4, !dbg !1466
  %512 = load double, ptr %round792, align 8, !dbg !1467
  %513 = load double, ptr %small, align 8, !dbg !1467
  %fadd888 = fadd double %512, %513, !dbg !1467
  %514 = load double, ptr %round792, align 8, !dbg !1467
  %neq889 = fcmp one double %fadd888, %514, !dbg !1467
  br i1 %neq889, label %if.then890, label %if.exit1031, !dbg !1467

if.then890:                                       ; preds = %checkok886
  %515 = load ptr, ptr %d745, align 8, !dbg !1468
  %checknull891 = icmp eq ptr %515, null, !dbg !1468
  %516 = call i1 @llvm.expect.i1(i1 %checknull891, i1 false), !dbg !1468
  br i1 %516, label %panic892, label %checkok896, !dbg !1468

checkok896:                                       ; preds = %if.then890
  %517 = ptrtoint ptr %515 to i64, !dbg !1468
  %518 = urem i64 %517, 4, !dbg !1468
  %519 = icmp ne i64 %518, 0, !dbg !1468
  %520 = call i1 @llvm.expect.i1(i1 %519, i1 false), !dbg !1468
  br i1 %520, label %panic897, label %checkok907, !dbg !1468

checkok907:                                       ; preds = %checkok896
  %521 = load i32, ptr %515, align 4, !dbg !1468
  %522 = load i32, ptr %i754, align 4, !dbg !1468
  %add908 = add i32 %521, %522, !dbg !1468
  %523 = load ptr, ptr %d745, align 8, !dbg !1468
  %checknull909 = icmp eq ptr %523, null, !dbg !1468
  %524 = call i1 @llvm.expect.i1(i1 %checknull909, i1 false), !dbg !1468
  br i1 %524, label %panic910, label %checkok914, !dbg !1468

checkok914:                                       ; preds = %checkok907
  %525 = ptrtoint ptr %523 to i64, !dbg !1468
  %526 = urem i64 %525, 4, !dbg !1468
  %527 = icmp ne i64 %526, 0, !dbg !1468
  %528 = call i1 @llvm.expect.i1(i1 %527, i1 false), !dbg !1468
  br i1 %528, label %panic915, label %checkok925, !dbg !1468

checkok925:                                       ; preds = %checkok914
  store i32 %add908, ptr %523, align 4, !dbg !1468
  br label %loop.cond926, !dbg !1470

loop.cond926:                                     ; preds = %checkok1001, %checkok925
  %529 = load ptr, ptr %d745, align 8, !dbg !1471
  %checknull927 = icmp eq ptr %529, null, !dbg !1471
  %530 = call i1 @llvm.expect.i1(i1 %checknull927, i1 false), !dbg !1471
  br i1 %530, label %panic928, label %checkok932, !dbg !1471

checkok932:                                       ; preds = %loop.cond926
  %531 = ptrtoint ptr %529 to i64, !dbg !1471
  %532 = urem i64 %531, 4, !dbg !1471
  %533 = icmp ne i64 %532, 0, !dbg !1471
  %534 = call i1 @llvm.expect.i1(i1 %533, i1 false), !dbg !1471
  br i1 %534, label %panic933, label %checkok943, !dbg !1471

checkok943:                                       ; preds = %checkok932
  %535 = load i32, ptr %529, align 4, !dbg !1471
  %lt944 = icmp ult i32 999999999, %535, !dbg !1471
  br i1 %lt944, label %loop.body945, label %loop.exit1003, !dbg !1471

loop.body945:                                     ; preds = %checkok943
  %536 = load ptr, ptr %d745, align 8, !dbg !1473
  %ptradd_any946 = getelementptr i8, ptr %536, i64 -4, !dbg !1473
  store ptr %ptradd_any946, ptr %d745, align 8, !dbg !1473
  %checknull947 = icmp eq ptr %536, null, !dbg !1473
  %537 = call i1 @llvm.expect.i1(i1 %checknull947, i1 false), !dbg !1473
  br i1 %537, label %panic948, label %checkok952, !dbg !1473

checkok952:                                       ; preds = %loop.body945
  %538 = ptrtoint ptr %536 to i64, !dbg !1473
  %539 = urem i64 %538, 4, !dbg !1473
  %540 = icmp ne i64 %539, 0, !dbg !1473
  %541 = call i1 @llvm.expect.i1(i1 %540, i1 false), !dbg !1473
  br i1 %541, label %panic953, label %checkok963, !dbg !1473

checkok963:                                       ; preds = %checkok952
  store i32 0, ptr %536, align 4, !dbg !1473
  %542 = load ptr, ptr %d745, align 8, !dbg !1475
  %543 = load ptr, ptr %a, align 8, !dbg !1475
  %lt964 = icmp ult ptr %542, %543, !dbg !1475
  br i1 %lt964, label %if.then965, label %if.exit984, !dbg !1475

if.then965:                                       ; preds = %checkok963
  %544 = load ptr, ptr %a, align 8, !dbg !1475
  %ptradd_any966 = getelementptr i8, ptr %544, i64 -4, !dbg !1475
  store ptr %ptradd_any966, ptr %a, align 8, !dbg !1475
  %checknull967 = icmp eq ptr %ptradd_any966, null, !dbg !1475
  %545 = call i1 @llvm.expect.i1(i1 %checknull967, i1 false), !dbg !1475
  br i1 %545, label %panic968, label %checkok972, !dbg !1475

checkok972:                                       ; preds = %if.then965
  %546 = ptrtoint ptr %ptradd_any966 to i64, !dbg !1475
  %547 = urem i64 %546, 4, !dbg !1475
  %548 = icmp ne i64 %547, 0, !dbg !1475
  %549 = call i1 @llvm.expect.i1(i1 %548, i1 false), !dbg !1475
  br i1 %549, label %panic973, label %checkok983, !dbg !1475

checkok983:                                       ; preds = %checkok972
  store i32 0, ptr %ptradd_any966, align 4, !dbg !1475
  br label %if.exit984, !dbg !1475

if.exit984:                                       ; preds = %checkok983, %checkok963
  %550 = load ptr, ptr %d745, align 8, !dbg !1476
  %checknull985 = icmp eq ptr %550, null, !dbg !1476
  %551 = call i1 @llvm.expect.i1(i1 %checknull985, i1 false), !dbg !1476
  br i1 %551, label %panic986, label %checkok990, !dbg !1476

checkok990:                                       ; preds = %if.exit984
  %552 = ptrtoint ptr %550 to i64, !dbg !1476
  %553 = urem i64 %552, 4, !dbg !1476
  %554 = icmp ne i64 %553, 0, !dbg !1476
  %555 = call i1 @llvm.expect.i1(i1 %554, i1 false), !dbg !1476
  br i1 %555, label %panic991, label %checkok1001, !dbg !1476

checkok1001:                                      ; preds = %checkok990
  %556 = load i32, ptr %550, align 4, !dbg !1476
  %add1002 = add i32 %556, 1, !dbg !1476
  store i32 %add1002, ptr %550, align 4, !dbg !1476
  br label %loop.cond926, !dbg !1476

loop.exit1003:                                    ; preds = %checkok943
  store i32 10, ptr %i754, align 4, !dbg !1477
  %557 = load ptr, ptr %r, align 8, !dbg !1477
  %558 = load ptr, ptr %a, align 8, !dbg !1477
  %559 = ptrtoint ptr %558 to i64, !dbg !1477
  %560 = ptrtoint ptr %557 to i64, !dbg !1477
  %561 = sub i64 %560, %559, !dbg !1477
  %562 = sdiv exact i64 %561, 4, !dbg !1477
  %mul1004 = mul i64 9, %562, !dbg !1477
  %trunc1005 = trunc i64 %mul1004 to i32, !dbg !1477
  store i32 %trunc1005, ptr %e696, align 4, !dbg !1477
  br label %loop.cond1006, !dbg !1477

loop.cond1006:                                    ; preds = %loop.body1027, %loop.exit1003
  %563 = load ptr, ptr %a, align 8, !dbg !1477
  %checknull1007 = icmp eq ptr %563, null, !dbg !1477
  %564 = call i1 @llvm.expect.i1(i1 %checknull1007, i1 false), !dbg !1477
  br i1 %564, label %panic1008, label %checkok1012, !dbg !1477

checkok1012:                                      ; preds = %loop.cond1006
  %565 = ptrtoint ptr %563 to i64, !dbg !1477
  %566 = urem i64 %565, 4, !dbg !1477
  %567 = icmp ne i64 %566, 0, !dbg !1477
  %568 = call i1 @llvm.expect.i1(i1 %567, i1 false), !dbg !1477
  br i1 %568, label %panic1013, label %checkok1023, !dbg !1477

checkok1023:                                      ; preds = %checkok1012
  %569 = load i32, ptr %563, align 4, !dbg !1477
  %570 = load i32, ptr %i754, align 4, !dbg !1477
  %le1024 = icmp sle i32 %570, %569, !dbg !1477
  %check1025 = icmp slt i32 %569, 0, !dbg !1477
  %siui-le1026 = or i1 %check1025, %le1024, !dbg !1477
  br i1 %siui-le1026, label %loop.body1027, label %loop.exit1030, !dbg !1477

loop.body1027:                                    ; preds = %checkok1023
  %571 = load i32, ptr %i754, align 4, !dbg !1477
  %mul1028 = mul i32 %571, 10, !dbg !1477
  store i32 %mul1028, ptr %i754, align 4, !dbg !1477
  %572 = load i32, ptr %e696, align 4, !dbg !1477
  %add1029 = add i32 %572, 1, !dbg !1477
  store i32 %add1029, ptr %e696, align 4, !dbg !1477
  br label %loop.cond1006, !dbg !1477

loop.exit1030:                                    ; preds = %checkok1023
  br label %if.exit1031, !dbg !1477

if.exit1031:                                      ; preds = %loop.exit1030, %checkok886
  br label %if.exit1032, !dbg !1477

if.exit1032:                                      ; preds = %if.exit1031, %or.phi789
  %573 = load ptr, ptr %z, align 8, !dbg !1479
  %574 = load ptr, ptr %d745, align 8, !dbg !1479
  %ptradd_any1033 = getelementptr i8, ptr %574, i64 4, !dbg !1479
  %gt1034 = icmp ugt ptr %573, %ptradd_any1033, !dbg !1479
  br i1 %gt1034, label %if.then1035, label %if.exit1037, !dbg !1479

if.then1035:                                      ; preds = %if.exit1032
  %575 = load ptr, ptr %d745, align 8, !dbg !1479
  %ptradd_any1036 = getelementptr i8, ptr %575, i64 4, !dbg !1479
  store ptr %ptradd_any1036, ptr %z, align 8, !dbg !1479
  br label %if.exit1037, !dbg !1479

if.exit1037:                                      ; preds = %if.then1035, %if.exit1032
  br label %if.exit1038, !dbg !1479

if.exit1038:                                      ; preds = %if.exit1037, %cond.phi734
  br label %loop.cond1039, !dbg !1480

loop.cond1039:                                    ; preds = %loop.body1057, %if.exit1038
  %576 = load ptr, ptr %z, align 8, !dbg !1481
  %577 = load ptr, ptr %a, align 8, !dbg !1481
  %gt1040 = icmp ugt ptr %576, %577, !dbg !1481
  br i1 %gt1040, label %and.rhs1041, label %and.phi1055, !dbg !1481

and.rhs1041:                                      ; preds = %loop.cond1039
  %578 = load ptr, ptr %z, align 8, !dbg !1481
  %ptradd1042 = getelementptr inbounds i8, ptr %578, i64 -4, !dbg !1481
  %579 = ptrtoint ptr %ptradd1042 to i64, !dbg !1481
  %580 = urem i64 %579, 4, !dbg !1481
  %581 = icmp ne i64 %580, 0, !dbg !1481
  %582 = call i1 @llvm.expect.i1(i1 %581, i1 false), !dbg !1481
  br i1 %582, label %panic1043, label %checkok1053, !dbg !1481

checkok1053:                                      ; preds = %and.rhs1041
  %583 = load i32, ptr %ptradd1042, align 4, !dbg !1481
  %i2nb1054 = icmp eq i32 %583, 0, !dbg !1481
  br label %and.phi1055, !dbg !1481

and.phi1055:                                      ; preds = %checkok1053, %loop.cond1039
  %val1056 = phi i1 [ false, %loop.cond1039 ], [ %i2nb1054, %checkok1053 ], !dbg !1481
  br i1 %val1056, label %loop.body1057, label %loop.exit1059, !dbg !1481

loop.body1057:                                    ; preds = %and.phi1055
  %584 = load ptr, ptr %z, align 8, !dbg !1481
  %ptradd_any1058 = getelementptr i8, ptr %584, i64 -4, !dbg !1481
  store ptr %ptradd_any1058, ptr %z, align 8, !dbg !1481
  br label %loop.cond1039, !dbg !1481

loop.exit1059:                                    ; preds = %and.phi1055
  %585 = load i32, ptr %formatting, align 4, !dbg !1483
  %eq1060 = icmp eq i32 %585, 2, !dbg !1483
  br i1 %eq1060, label %if.then1061, label %if.exit1152, !dbg !1483

if.then1061:                                      ; preds = %loop.exit1059
  %586 = load i64, ptr %p, align 8, !dbg !1484
  %i2nb1062 = icmp eq i64 %586, 0, !dbg !1484
  br i1 %i2nb1062, label %if.then1063, label %if.exit1065, !dbg !1484

if.then1063:                                      ; preds = %if.then1061
  %587 = load i64, ptr %p, align 8, !dbg !1484
  %add1064 = add i64 %587, 1, !dbg !1484
  store i64 %add1064, ptr %p, align 8, !dbg !1484
  br label %if.exit1065, !dbg !1484

if.exit1065:                                      ; preds = %if.then1063, %if.then1061
  %588 = load i64, ptr %p, align 8, !dbg !1486
  %589 = load i32, ptr %e696, align 4, !dbg !1486
  %sext1066 = sext i32 %589 to i64, !dbg !1486
  %gt1067 = icmp sgt i64 %588, %sext1066, !dbg !1486
  br i1 %gt1067, label %and.rhs1068, label %and.phi1070, !dbg !1486

and.rhs1068:                                      ; preds = %if.exit1065
  %590 = load i32, ptr %e696, align 4, !dbg !1486
  %ge1069 = icmp sge i32 %590, -4, !dbg !1486
  br label %and.phi1070, !dbg !1486

and.phi1070:                                      ; preds = %and.rhs1068, %if.exit1065
  %val1071 = phi i1 [ false, %if.exit1065 ], [ %ge1069, %and.rhs1068 ], !dbg !1486
  br i1 %val1071, label %if.then1072, label %if.else1076, !dbg !1486

if.then1072:                                      ; preds = %and.phi1070
  store i32 0, ptr %formatting, align 4, !dbg !1487
  %591 = load i64, ptr %p, align 8, !dbg !1489
  %592 = load i32, ptr %e696, align 4, !dbg !1489
  %sext1073 = sext i32 %592 to i64, !dbg !1489
  %add1074 = add i64 %sext1073, 1, !dbg !1489
  %sub1075 = sub i64 %591, %add1074, !dbg !1489
  store i64 %sub1075, ptr %p, align 8, !dbg !1489
  br label %if.exit1078, !dbg !1489

if.else1076:                                      ; preds = %and.phi1070
  store i32 1, ptr %formatting, align 4, !dbg !1490
  %593 = load i64, ptr %p, align 8, !dbg !1492
  %sub1077 = sub i64 %593, 1, !dbg !1492
  store i64 %sub1077, ptr %p, align 8, !dbg !1492
  br label %if.exit1078, !dbg !1492

if.exit1078:                                      ; preds = %if.else1076, %if.then1072
  %594 = load ptr, ptr %self, align 8, !dbg !1493
  %ptradd1079 = getelementptr inbounds i8, ptr %594, i64 16, !dbg !1493
  %595 = load i32, ptr %ptradd1079, align 8, !dbg !1493
  %lshrl1080 = lshr i32 %595, 4, !dbg !1493
  %596 = and i32 1, %lshrl1080, !dbg !1493
  %trunc1081 = trunc i32 %596 to i8, !dbg !1493
  %597 = trunc i8 %trunc1081 to i1, !dbg !1493
  br i1 %597, label %if.exit1151, label %if.else1082, !dbg !1493

if.else1082:                                      ; preds = %if.exit1078
  %598 = load ptr, ptr %z, align 8, !dbg !1494
  %599 = load ptr, ptr %a, align 8, !dbg !1494
  %gt1083 = icmp ugt ptr %598, %599, !dbg !1494
  br i1 %gt1083, label %and.rhs1084, label %and.phi1098, !dbg !1494

and.rhs1084:                                      ; preds = %if.else1082
  %600 = load ptr, ptr %z, align 8, !dbg !1494
  %ptradd1085 = getelementptr inbounds i8, ptr %600, i64 -4, !dbg !1494
  %601 = ptrtoint ptr %ptradd1085 to i64, !dbg !1494
  %602 = urem i64 %601, 4, !dbg !1494
  %603 = icmp ne i64 %602, 0, !dbg !1494
  %604 = call i1 @llvm.expect.i1(i1 %603, i1 false), !dbg !1494
  br i1 %604, label %panic1086, label %checkok1096, !dbg !1494

checkok1096:                                      ; preds = %and.rhs1084
  %605 = load i32, ptr %ptradd1085, align 4, !dbg !1494
  %i2b1097 = icmp ne i32 %605, 0, !dbg !1494
  br label %and.phi1098, !dbg !1494

and.phi1098:                                      ; preds = %checkok1096, %if.else1082
  %val1099 = phi i1 [ false, %if.else1082 ], [ %i2b1097, %checkok1096 ], !dbg !1494
  br i1 %val1099, label %if.then1100, label %if.else1127, !dbg !1494

if.then1100:                                      ; preds = %and.phi1098
    #dbg_declare(ptr %i1101, !1496, !DIExpression(), !1499)
  store i32 10, ptr %i1101, align 4, !dbg !1499
  store i32 0, ptr %j, align 4, !dbg !1499
  br label %loop.cond1102, !dbg !1499

loop.cond1102:                                    ; preds = %loop.body1123, %if.then1100
  %606 = load ptr, ptr %z, align 8, !dbg !1499
  %ptradd1103 = getelementptr inbounds i8, ptr %606, i64 -4, !dbg !1499
  %607 = ptrtoint ptr %ptradd1103 to i64, !dbg !1499
  %608 = urem i64 %607, 4, !dbg !1499
  %609 = icmp ne i64 %608, 0, !dbg !1499
  %610 = call i1 @llvm.expect.i1(i1 %609, i1 false), !dbg !1499
  br i1 %610, label %panic1104, label %checkok1114, !dbg !1499

checkok1114:                                      ; preds = %loop.cond1102
  %611 = load i32, ptr %ptradd1103, align 4, !dbg !1499
  %612 = load i32, ptr %i1101, align 4, !dbg !1499
  %zero1115 = icmp eq i32 %612, 0, !dbg !1499
  %613 = call i1 @llvm.expect.i1(i1 %zero1115, i1 false), !dbg !1499
  br i1 %613, label %panic1116, label %checkok1120, !dbg !1499

checkok1120:                                      ; preds = %checkok1114
  %smod1121 = srem i32 %611, %612, !dbg !1499
  %eq1122 = icmp eq i32 %smod1121, 0, !dbg !1499
  br i1 %eq1122, label %loop.body1123, label %loop.exit1126, !dbg !1499

loop.body1123:                                    ; preds = %checkok1120
  %614 = load i32, ptr %i1101, align 4, !dbg !1499
  %mul1124 = mul i32 %614, 10, !dbg !1499
  store i32 %mul1124, ptr %i1101, align 4, !dbg !1499
  %615 = load i32, ptr %j, align 4, !dbg !1499
  %add1125 = add i32 %615, 1, !dbg !1499
  store i32 %add1125, ptr %j, align 4, !dbg !1499
  br label %loop.cond1102, !dbg !1499

loop.exit1126:                                    ; preds = %checkok1120
  br label %if.exit1128, !dbg !1499

if.else1127:                                      ; preds = %and.phi1098
  store i32 9, ptr %j, align 4, !dbg !1500
  br label %if.exit1128, !dbg !1500

if.exit1128:                                      ; preds = %if.else1127, %loop.exit1126
  %616 = load i32, ptr %formatting, align 4, !dbg !1502
  %eq1129 = icmp eq i32 %616, 0, !dbg !1502
  br i1 %eq1129, label %if.then1130, label %if.else1139, !dbg !1502

if.then1130:                                      ; preds = %if.exit1128
  %617 = load i64, ptr %p, align 8
  store i64 %617, ptr %x1131, align 8
  store i64 0, ptr %x1132, align 8
  %618 = load ptr, ptr %z, align 8, !dbg !1503
  %619 = load ptr, ptr %r, align 8, !dbg !1503
  %620 = ptrtoint ptr %619 to i64, !dbg !1503
  %621 = ptrtoint ptr %618 to i64, !dbg !1503
  %622 = sub i64 %621, %620, !dbg !1503
  %623 = sdiv exact i64 %622, 4, !dbg !1503
  %sub1133 = sub i64 %623, 1, !dbg !1503
  %mul1134 = mul i64 9, %sub1133, !dbg !1503
  %624 = load i32, ptr %j, align 4, !dbg !1503
  %sext1135 = sext i32 %624 to i64, !dbg !1503
  %sub1136 = sub i64 %mul1134, %sext1135, !dbg !1503
  store i64 %sub1136, ptr %y1137, align 8
  %625 = load i64, ptr %x1132, align 8, !dbg !1505
  %626 = load i64, ptr %y1137, align 8, !dbg !1505
  %627 = call i64 @llvm.smax.i64(i64 %625, i64 %626), !dbg !1505
  store i64 %627, ptr %y1138, align 8
  %628 = load i64, ptr %x1131, align 8, !dbg !1507
  %629 = load i64, ptr %y1138, align 8, !dbg !1507
  %630 = call i64 @llvm.smin.i64(i64 %628, i64 %629), !dbg !1507
  store i64 %630, ptr %p, align 8, !dbg !1507
  br label %if.exit1150, !dbg !1507

if.else1139:                                      ; preds = %if.exit1128
  %631 = load i64, ptr %p, align 8
  store i64 %631, ptr %x1140, align 8
  store i64 0, ptr %x1141, align 8
  %632 = load ptr, ptr %z, align 8, !dbg !1509
  %633 = load ptr, ptr %r, align 8, !dbg !1509
  %634 = ptrtoint ptr %633 to i64, !dbg !1509
  %635 = ptrtoint ptr %632 to i64, !dbg !1509
  %636 = sub i64 %635, %634, !dbg !1509
  %637 = sdiv exact i64 %636, 4, !dbg !1509
  %sub1142 = sub i64 %637, 1, !dbg !1509
  %mul1143 = mul i64 9, %sub1142, !dbg !1509
  %638 = load i32, ptr %e696, align 4, !dbg !1509
  %sext1144 = sext i32 %638 to i64, !dbg !1509
  %add1145 = add i64 %mul1143, %sext1144, !dbg !1509
  %639 = load i32, ptr %j, align 4, !dbg !1509
  %sext1146 = sext i32 %639 to i64, !dbg !1509
  %sub1147 = sub i64 %add1145, %sext1146, !dbg !1509
  store i64 %sub1147, ptr %y1148, align 8
  %640 = load i64, ptr %x1141, align 8, !dbg !1511
  %641 = load i64, ptr %y1148, align 8, !dbg !1511
  %642 = call i64 @llvm.smax.i64(i64 %640, i64 %641), !dbg !1511
  store i64 %642, ptr %y1149, align 8
  %643 = load i64, ptr %x1140, align 8, !dbg !1513
  %644 = load i64, ptr %y1149, align 8, !dbg !1513
  %645 = call i64 @llvm.smin.i64(i64 %643, i64 %644), !dbg !1513
  store i64 %645, ptr %p, align 8, !dbg !1513
  br label %if.exit1150, !dbg !1513

if.exit1150:                                      ; preds = %if.else1139, %if.then1130
  br label %if.exit1151, !dbg !1513

if.exit1151:                                      ; preds = %if.exit1150, %if.exit1078
  br label %if.exit1152, !dbg !1513

if.exit1152:                                      ; preds = %if.exit1151, %loop.exit1059
  %646 = load i64, ptr %p, align 8, !dbg !1515
  %647 = load i64, ptr %p, align 8, !dbg !1515
  %i2b1153 = icmp ne i64 %647, 0, !dbg !1515
  br i1 %i2b1153, label %or.phi1158, label %or.rhs1154, !dbg !1515

or.rhs1154:                                       ; preds = %if.exit1152
  %648 = load ptr, ptr %self, align 8, !dbg !1515
  %ptradd1155 = getelementptr inbounds i8, ptr %648, i64 16, !dbg !1515
  %649 = load i32, ptr %ptradd1155, align 8, !dbg !1515
  %lshrl1156 = lshr i32 %649, 4, !dbg !1515
  %650 = and i32 1, %lshrl1156, !dbg !1515
  %trunc1157 = trunc i32 %650 to i8, !dbg !1515
  %651 = trunc i8 %trunc1157 to i1, !dbg !1515
  br label %or.phi1158, !dbg !1515

or.phi1158:                                       ; preds = %or.rhs1154, %if.exit1152
  %val1159 = phi i1 [ true, %if.exit1152 ], [ %651, %or.rhs1154 ], !dbg !1515
  %zext1160 = zext i1 %val1159 to i64, !dbg !1515
  %sub1161 = sub i64 2147483646, %zext1160, !dbg !1515
  %gt1162 = icmp sgt i64 %646, %sub1161, !dbg !1515
  br i1 %gt1162, label %if.then1163, label %if.exit1164, !dbg !1515

if.then1163:                                      ; preds = %or.phi1158
  ret i64 ptrtoint (ptr @std.io.INTERNAL_BUFFER_EXCEEDED to i64), !dbg !1515

if.exit1164:                                      ; preds = %or.phi1158
    #dbg_declare(ptr %l1165, !1516, !DIExpression(), !1517)
  %652 = load i64, ptr %p, align 8, !dbg !1517
  %add1166 = add i64 1, %652, !dbg !1517
  %653 = load i64, ptr %p, align 8, !dbg !1517
  %i2b1167 = icmp ne i64 %653, 0, !dbg !1517
  br i1 %i2b1167, label %or.phi1172, label %or.rhs1168, !dbg !1517

or.rhs1168:                                       ; preds = %if.exit1164
  %654 = load ptr, ptr %self, align 8, !dbg !1517
  %ptradd1169 = getelementptr inbounds i8, ptr %654, i64 16, !dbg !1517
  %655 = load i32, ptr %ptradd1169, align 8, !dbg !1517
  %lshrl1170 = lshr i32 %655, 4, !dbg !1517
  %656 = and i32 1, %lshrl1170, !dbg !1517
  %trunc1171 = trunc i32 %656 to i8, !dbg !1517
  %657 = trunc i8 %trunc1171 to i1, !dbg !1517
  br label %or.phi1172, !dbg !1517

or.phi1172:                                       ; preds = %or.rhs1168, %if.exit1164
  %val1173 = phi i1 [ true, %if.exit1164 ], [ %657, %or.rhs1168 ], !dbg !1517
  %zext1174 = zext i1 %val1173 to i64, !dbg !1517
  %add1175 = add i64 %add1166, %zext1174, !dbg !1517
  %trunc1176 = trunc i64 %add1175 to i32, !dbg !1517
  store i32 %trunc1176, ptr %l1165, align 4, !dbg !1517
    #dbg_declare(ptr %estr1177, !1518, !DIExpression(), !1519)
  %658 = load i32, ptr %formatting, align 4, !dbg !1520
  %eq1178 = icmp eq i32 %658, 0, !dbg !1520
  br i1 %eq1178, label %if.then1179, label %if.else1188, !dbg !1520

if.then1179:                                      ; preds = %or.phi1172
  %659 = load i32, ptr %e696, align 4, !dbg !1521
  %660 = load i32, ptr %l1165, align 4, !dbg !1521
  %sub1180 = sub i32 2147483647, %660, !dbg !1521
  %gt1181 = icmp sgt i32 %659, %sub1180, !dbg !1521
  br i1 %gt1181, label %if.then1182, label %if.exit1183, !dbg !1521

if.then1182:                                      ; preds = %if.then1179
  ret i64 ptrtoint (ptr @std.io.INTERNAL_BUFFER_EXCEEDED to i64), !dbg !1521

if.exit1183:                                      ; preds = %if.then1179
  %661 = load i32, ptr %e696, align 4, !dbg !1523
  %gt1184 = icmp sgt i32 %661, 0, !dbg !1523
  br i1 %gt1184, label %if.then1185, label %if.exit1187, !dbg !1523

if.then1185:                                      ; preds = %if.exit1183
  %662 = load i32, ptr %l1165, align 4, !dbg !1523
  %663 = load i32, ptr %e696, align 4, !dbg !1523
  %add1186 = add i32 %662, %663, !dbg !1523
  store i32 %add1186, ptr %l1165, align 4, !dbg !1523
  br label %if.exit1187, !dbg !1523

if.exit1187:                                      ; preds = %if.then1185, %if.exit1183
  br label %if.exit1229, !dbg !1523

if.else1188:                                      ; preds = %or.phi1172
  %664 = load i32, ptr %e696, align 4, !dbg !1524
  %lt1189 = icmp slt i32 %664, 0, !dbg !1524
  br i1 %lt1189, label %cond.lhs1190, label %cond.rhs1192, !dbg !1524

cond.lhs1190:                                     ; preds = %if.else1188
  %665 = load i32, ptr %e696, align 4, !dbg !1524
  %neg1191 = sub i32 0, %665, !dbg !1524
  br label %cond.phi1193, !dbg !1524

cond.rhs1192:                                     ; preds = %if.else1188
  %666 = load i32, ptr %e696, align 4, !dbg !1524
  br label %cond.phi1193, !dbg !1524

cond.phi1193:                                     ; preds = %cond.rhs1192, %cond.lhs1190
  %val1194 = phi i32 [ %neg1191, %cond.lhs1190 ], [ %666, %cond.rhs1192 ], !dbg !1524
  %sext1195 = sext i32 %val1194 to i128, !dbg !1524
  store i128 %sext1195, ptr %indirectarg1196, align 16
  %667 = load ptr, ptr %ebuf, align 8
  %668 = call ptr @std.io.fmt_u(ptr align 16 %indirectarg1196, ptr %667), !dbg !1524
  store ptr %668, ptr %estr1177, align 8, !dbg !1524
  br label %loop.cond1197, !dbg !1526

loop.cond1197:                                    ; preds = %loop.body1199, %cond.phi1193
  %669 = load ptr, ptr %ebuf, align 8, !dbg !1527
  %670 = load ptr, ptr %estr1177, align 8, !dbg !1527
  %671 = ptrtoint ptr %670 to i64, !dbg !1527
  %672 = ptrtoint ptr %669 to i64, !dbg !1527
  %673 = sub i64 %672, %671, !dbg !1527
  %674 = sdiv exact i64 %673, 1, !dbg !1527
  %lt1198 = icmp slt i64 %674, 2, !dbg !1527
  br i1 %lt1198, label %loop.body1199, label %loop.exit1201, !dbg !1527

loop.body1199:                                    ; preds = %loop.cond1197
  %675 = load ptr, ptr %estr1177, align 8, !dbg !1527
  %ptradd_any1200 = getelementptr i8, ptr %675, i64 -1, !dbg !1527
  store ptr %ptradd_any1200, ptr %estr1177, align 8, !dbg !1527
  store i8 48, ptr %ptradd_any1200, align 1, !dbg !1527
  br label %loop.cond1197, !dbg !1527

loop.exit1201:                                    ; preds = %loop.cond1197
  %676 = load i32, ptr %e696, align 4, !dbg !1529
  %lt1202 = icmp slt i32 %676, 0, !dbg !1529
  %ternary1203 = select i1 %lt1202, i8 45, i8 43, !dbg !1529
  %677 = load ptr, ptr %estr1177, align 8, !dbg !1529
  %ptradd_any1204 = getelementptr i8, ptr %677, i64 -1, !dbg !1529
  store ptr %ptradd_any1204, ptr %estr1177, align 8, !dbg !1529
  %checknull1205 = icmp eq ptr %ptradd_any1204, null, !dbg !1529
  %678 = call i1 @llvm.expect.i1(i1 %checknull1205, i1 false), !dbg !1529
  br i1 %678, label %panic1206, label %checkok1210, !dbg !1529

checkok1210:                                      ; preds = %loop.exit1201
  store i8 %ternary1203, ptr %ptradd_any1204, align 1, !dbg !1529
  %679 = load ptr, ptr %self, align 8, !dbg !1530
  %ptradd1211 = getelementptr inbounds i8, ptr %679, i64 16, !dbg !1530
  %680 = load i32, ptr %ptradd1211, align 8, !dbg !1530
  %lshrl1212 = lshr i32 %680, 5, !dbg !1530
  %681 = and i32 1, %lshrl1212, !dbg !1530
  %trunc1213 = trunc i32 %681 to i8, !dbg !1530
  %682 = trunc i8 %trunc1213 to i1, !dbg !1530
  %ternary1214 = select i1 %682, i8 69, i8 101, !dbg !1530
  %683 = load ptr, ptr %estr1177, align 8, !dbg !1530
  %ptradd_any1215 = getelementptr i8, ptr %683, i64 -1, !dbg !1530
  store ptr %ptradd_any1215, ptr %estr1177, align 8, !dbg !1530
  %checknull1216 = icmp eq ptr %ptradd_any1215, null, !dbg !1530
  %684 = call i1 @llvm.expect.i1(i1 %checknull1216, i1 false), !dbg !1530
  br i1 %684, label %panic1217, label %checkok1221, !dbg !1530

checkok1221:                                      ; preds = %checkok1210
  store i8 %ternary1214, ptr %ptradd_any1215, align 1, !dbg !1530
  %685 = load ptr, ptr %ebuf, align 8, !dbg !1531
  %686 = load ptr, ptr %estr1177, align 8, !dbg !1531
  %687 = ptrtoint ptr %686 to i64, !dbg !1531
  %688 = ptrtoint ptr %685 to i64, !dbg !1531
  %689 = sub i64 %688, %687, !dbg !1531
  %690 = sdiv exact i64 %689, 1, !dbg !1531
  %691 = load i32, ptr %l1165, align 4, !dbg !1531
  %sext1222 = sext i32 %691 to i64, !dbg !1531
  %sub1223 = sub i64 2147483647, %sext1222, !dbg !1531
  %gt1224 = icmp sgt i64 %690, %sub1223, !dbg !1531
  br i1 %gt1224, label %if.then1225, label %if.exit1226, !dbg !1531

if.then1225:                                      ; preds = %checkok1221
  ret i64 ptrtoint (ptr @std.io.INTERNAL_BUFFER_EXCEEDED to i64), !dbg !1531

if.exit1226:                                      ; preds = %checkok1221
  %692 = load i32, ptr %l1165, align 4, !dbg !1532
  %693 = load ptr, ptr %ebuf, align 8, !dbg !1532
  %694 = load ptr, ptr %estr1177, align 8, !dbg !1532
  %695 = ptrtoint ptr %694 to i64, !dbg !1532
  %696 = ptrtoint ptr %693 to i64, !dbg !1532
  %697 = sub i64 %696, %695, !dbg !1532
  %698 = sdiv exact i64 %697, 1, !dbg !1532
  %trunc1227 = trunc i64 %698 to i32, !dbg !1532
  %add1228 = add i32 %692, %trunc1227, !dbg !1532
  store i32 %add1228, ptr %l1165, align 4, !dbg !1532
  br label %if.exit1229, !dbg !1532

if.exit1229:                                      ; preds = %if.exit1226, %if.exit1187
  %699 = load i32, ptr %l1165, align 4, !dbg !1533
  %sext1230 = sext i32 %699 to i64, !dbg !1533
  %700 = load i64, ptr %pl, align 8, !dbg !1533
  %sub1231 = sub i64 2147483647, %700, !dbg !1533
  %gt1232 = icmp sgt i64 %sext1230, %sub1231, !dbg !1533
  br i1 %gt1232, label %if.then1233, label %if.exit1234, !dbg !1533

if.then1233:                                      ; preds = %if.exit1229
  ret i64 ptrtoint (ptr @std.io.INTERNAL_BUFFER_EXCEEDED to i64), !dbg !1533

if.exit1234:                                      ; preds = %if.exit1229
    #dbg_declare(ptr %len1235, !1534, !DIExpression(), !1535)
  store i64 0, ptr %len1235, align 8, !dbg !1535
  %701 = load ptr, ptr %self, align 8, !dbg !1536
  %ptradd1236 = getelementptr inbounds i8, ptr %701, i64 16, !dbg !1536
  %702 = load i32, ptr %ptradd1236, align 8, !dbg !1536
  %lshrl1237 = lshr i32 %702, 1, !dbg !1536
  %703 = and i32 1, %lshrl1237, !dbg !1536
  %trunc1238 = trunc i32 %703 to i8, !dbg !1536
  %704 = trunc i8 %trunc1238 to i1, !dbg !1536
  %not1239 = xor i1 %704, true, !dbg !1536
  br i1 %not1239, label %and.rhs1240, label %and.phi1244, !dbg !1536

and.rhs1240:                                      ; preds = %if.exit1234
  %705 = load ptr, ptr %self, align 8, !dbg !1536
  %ptradd1241 = getelementptr inbounds i8, ptr %705, i64 16, !dbg !1536
  %706 = load i32, ptr %ptradd1241, align 8, !dbg !1536
  %707 = and i32 1, %706, !dbg !1536
  %trunc1242 = trunc i32 %707 to i8, !dbg !1536
  %708 = trunc i8 %trunc1242 to i1, !dbg !1536
  %not1243 = xor i1 %708, true, !dbg !1536
  br label %and.phi1244, !dbg !1536

and.phi1244:                                      ; preds = %and.rhs1240, %if.exit1234
  %val1245 = phi i1 [ false, %if.exit1234 ], [ %not1243, %and.rhs1240 ], !dbg !1536
  br i1 %val1245, label %if.then1246, label %if.exit1260, !dbg !1536

if.then1246:                                      ; preds = %and.phi1244
  %709 = load i64, ptr %len1235, align 8, !dbg !1536
  %710 = load ptr, ptr %self, align 8, !dbg !1536
  %ptradd1248 = getelementptr inbounds i8, ptr %710, i64 16, !dbg !1536
  %ptradd1249 = getelementptr inbounds i8, ptr %ptradd1248, i64 4, !dbg !1536
  %711 = load i32, ptr %ptradd1249, align 4, !dbg !1536
  %zext1250 = zext i32 %711 to i64, !dbg !1536
  %712 = load i64, ptr %pl, align 8, !dbg !1536
  %713 = load i32, ptr %l1165, align 4, !dbg !1536
  %sext1251 = sext i32 %713 to i64, !dbg !1536
  %add1252 = add i64 %712, %sext1251, !dbg !1536
  %714 = load ptr, ptr %self, align 8
  %715 = call i64 @std.io.Formatter.pad(ptr %retparam1253, ptr %714, i8 32, i64 %zext1250, i64 %add1252) #6, !dbg !1536
  %not_err1254 = icmp eq i64 %715, 0, !dbg !1536
  %716 = call i1 @llvm.expect.i1(i1 %not_err1254, i1 true), !dbg !1536
  br i1 %716, label %after_check1256, label %assign_optional1255, !dbg !1536

assign_optional1255:                              ; preds = %if.then1246
  store i64 %715, ptr %error_var1247, align 8, !dbg !1536
  br label %guard_block1257, !dbg !1536

after_check1256:                                  ; preds = %if.then1246
  br label %noerr_block1258, !dbg !1536

guard_block1257:                                  ; preds = %assign_optional1255
  %717 = load i64, ptr %error_var1247, align 8, !dbg !1536
  ret i64 %717, !dbg !1536

noerr_block1258:                                  ; preds = %after_check1256
  %718 = load i64, ptr %retparam1253, align 8, !dbg !1536
  %add1259 = add i64 %709, %718, !dbg !1536
  store i64 %add1259, ptr %len1235, align 8, !dbg !1536
  br label %if.exit1260, !dbg !1536

if.exit1260:                                      ; preds = %noerr_block1258, %and.phi1244
  %719 = load i8, ptr %is_neg, align 1, !dbg !1537
  %720 = trunc i8 %719 to i1, !dbg !1537
  br i1 %720, label %or.phi1265, label %or.rhs1261, !dbg !1537

or.rhs1261:                                       ; preds = %if.exit1260
  %721 = load ptr, ptr %self, align 8, !dbg !1537
  %ptradd1262 = getelementptr inbounds i8, ptr %721, i64 16, !dbg !1537
  %722 = load i32, ptr %ptradd1262, align 8, !dbg !1537
  %lshrl1263 = lshr i32 %722, 2, !dbg !1537
  %723 = and i32 1, %lshrl1263, !dbg !1537
  %trunc1264 = trunc i32 %723 to i8, !dbg !1537
  %724 = trunc i8 %trunc1264 to i1, !dbg !1537
  br label %or.phi1265, !dbg !1537

or.phi1265:                                       ; preds = %or.rhs1261, %if.exit1260
  %val1266 = phi i1 [ true, %if.exit1260 ], [ %724, %or.rhs1261 ], !dbg !1537
  br i1 %val1266, label %if.then1267, label %if.exit1277, !dbg !1537

if.then1267:                                      ; preds = %or.phi1265
  %725 = load i64, ptr %len1235, align 8, !dbg !1537
  %726 = load i8, ptr %is_neg, align 1, !dbg !1537
  %727 = trunc i8 %726 to i1, !dbg !1537
  %ternary1269 = select i1 %727, i8 45, i8 43, !dbg !1537
  %728 = load ptr, ptr %self, align 8
  %729 = call i64 @std.io.Formatter.out(ptr %retparam1270, ptr %728, i8 %ternary1269), !dbg !1537
  %not_err1271 = icmp eq i64 %729, 0, !dbg !1537
  %730 = call i1 @llvm.expect.i1(i1 %not_err1271, i1 true), !dbg !1537
  br i1 %730, label %after_check1273, label %assign_optional1272, !dbg !1537

assign_optional1272:                              ; preds = %if.then1267
  store i64 %729, ptr %error_var1268, align 8, !dbg !1537
  br label %guard_block1274, !dbg !1537

after_check1273:                                  ; preds = %if.then1267
  br label %noerr_block1275, !dbg !1537

guard_block1274:                                  ; preds = %assign_optional1272
  %731 = load i64, ptr %error_var1268, align 8, !dbg !1537
  ret i64 %731, !dbg !1537

noerr_block1275:                                  ; preds = %after_check1273
  %732 = load i64, ptr %retparam1270, align 8, !dbg !1537
  %add1276 = add i64 %725, %732, !dbg !1537
  store i64 %add1276, ptr %len1235, align 8, !dbg !1537
  br label %if.exit1277, !dbg !1537

if.exit1277:                                      ; preds = %noerr_block1275, %or.phi1265
  %733 = load ptr, ptr %self, align 8, !dbg !1538
  %ptradd1278 = getelementptr inbounds i8, ptr %733, i64 16, !dbg !1538
  %734 = load i32, ptr %ptradd1278, align 8, !dbg !1538
  %735 = and i32 1, %734, !dbg !1538
  %trunc1279 = trunc i32 %735 to i8, !dbg !1538
  %736 = trunc i8 %trunc1279 to i1, !dbg !1538
  br i1 %736, label %if.then1280, label %if.exit1294, !dbg !1538

if.then1280:                                      ; preds = %if.exit1277
  %737 = load i64, ptr %len1235, align 8, !dbg !1538
  %738 = load ptr, ptr %self, align 8, !dbg !1538
  %ptradd1282 = getelementptr inbounds i8, ptr %738, i64 16, !dbg !1538
  %ptradd1283 = getelementptr inbounds i8, ptr %ptradd1282, i64 4, !dbg !1538
  %739 = load i32, ptr %ptradd1283, align 4, !dbg !1538
  %zext1284 = zext i32 %739 to i64, !dbg !1538
  %740 = load i64, ptr %pl, align 8, !dbg !1538
  %741 = load i32, ptr %l1165, align 4, !dbg !1538
  %sext1285 = sext i32 %741 to i64, !dbg !1538
  %add1286 = add i64 %740, %sext1285, !dbg !1538
  %742 = load ptr, ptr %self, align 8
  %743 = call i64 @std.io.Formatter.pad(ptr %retparam1287, ptr %742, i8 48, i64 %zext1284, i64 %add1286) #6, !dbg !1538
  %not_err1288 = icmp eq i64 %743, 0, !dbg !1538
  %744 = call i1 @llvm.expect.i1(i1 %not_err1288, i1 true), !dbg !1538
  br i1 %744, label %after_check1290, label %assign_optional1289, !dbg !1538

assign_optional1289:                              ; preds = %if.then1280
  store i64 %743, ptr %error_var1281, align 8, !dbg !1538
  br label %guard_block1291, !dbg !1538

after_check1290:                                  ; preds = %if.then1280
  br label %noerr_block1292, !dbg !1538

guard_block1291:                                  ; preds = %assign_optional1289
  %745 = load i64, ptr %error_var1281, align 8, !dbg !1538
  ret i64 %745, !dbg !1538

noerr_block1292:                                  ; preds = %after_check1290
  %746 = load i64, ptr %retparam1287, align 8, !dbg !1538
  %add1293 = add i64 %737, %746, !dbg !1538
  store i64 %add1293, ptr %len1235, align 8, !dbg !1538
  br label %if.exit1294, !dbg !1538

if.exit1294:                                      ; preds = %noerr_block1292, %if.exit1277
  %747 = load i32, ptr %formatting, align 4, !dbg !1539
  %eq1295 = icmp eq i32 %747, 0, !dbg !1539
  br i1 %eq1295, label %if.then1296, label %if.else1466, !dbg !1539

if.then1296:                                      ; preds = %if.exit1294
  %748 = load ptr, ptr %a, align 8, !dbg !1540
  %749 = load ptr, ptr %r, align 8, !dbg !1540
  %gt1297 = icmp ugt ptr %748, %749, !dbg !1540
  br i1 %gt1297, label %if.then1298, label %if.exit1299, !dbg !1540

if.then1298:                                      ; preds = %if.then1296
  %750 = load ptr, ptr %r, align 8, !dbg !1540
  store ptr %750, ptr %a, align 8, !dbg !1540
  br label %if.exit1299, !dbg !1540

if.exit1299:                                      ; preds = %if.then1298, %if.then1296
    #dbg_declare(ptr %d1300, !1542, !DIExpression(), !1543)
  %751 = load ptr, ptr %a, align 8, !dbg !1543
  store ptr %751, ptr %d1300, align 8, !dbg !1543
  br label %loop.cond1301, !dbg !1544

loop.cond1301:                                    ; preds = %noerr_block1370, %if.exit1299
  %752 = load ptr, ptr %d1300, align 8, !dbg !1545
  %753 = load ptr, ptr %r, align 8, !dbg !1545
  %le1302 = icmp ule ptr %752, %753, !dbg !1545
  br i1 %le1302, label %loop.body1303, label %loop.exit1373, !dbg !1545

loop.body1303:                                    ; preds = %loop.cond1301
    #dbg_declare(ptr %s1304, !1547, !DIExpression(), !1549)
  %754 = load ptr, ptr %d1300, align 8, !dbg !1549
  %checknull1305 = icmp eq ptr %754, null, !dbg !1549
  %755 = call i1 @llvm.expect.i1(i1 %checknull1305, i1 false), !dbg !1549
  br i1 %755, label %panic1306, label %checkok1310, !dbg !1549

checkok1310:                                      ; preds = %loop.body1303
  %756 = ptrtoint ptr %754 to i64, !dbg !1549
  %757 = urem i64 %756, 4, !dbg !1549
  %758 = icmp ne i64 %757, 0, !dbg !1549
  %759 = call i1 @llvm.expect.i1(i1 %758, i1 false), !dbg !1549
  br i1 %759, label %panic1311, label %checkok1321, !dbg !1549

checkok1321:                                      ; preds = %checkok1310
  %760 = load i32, ptr %754, align 4, !dbg !1549
  %zext1322 = zext i32 %760 to i128, !dbg !1549
  %761 = load ptr, ptr %buf, align 8, !dbg !1549
  %ptradd_any1323 = getelementptr i8, ptr %761, i64 9, !dbg !1549
  store i128 %zext1322, ptr %indirectarg1324, align 16
  %762 = call ptr @std.io.fmt_u(ptr align 16 %indirectarg1324, ptr %ptradd_any1323), !dbg !1549
  store ptr %762, ptr %s1304, align 8, !dbg !1549
  store i8 1, ptr %switch1325, align 1
  br label %switch.entry1326

switch.entry1326:                                 ; preds = %checkok1321
  %763 = load i8, ptr %switch1325, align 1
  %764 = trunc i8 %763 to i1
  %765 = load ptr, ptr %d1300, align 8, !dbg !1550
  %766 = load ptr, ptr %a, align 8, !dbg !1550
  %neq1327 = icmp ne ptr %765, %766, !dbg !1550
  %eq1328 = icmp eq i1 %neq1327, %764, !dbg !1550
  br i1 %eq1328, label %switch.case1329, label %next_if1335, !dbg !1550

switch.case1329:                                  ; preds = %switch.entry1326
  br label %loop.cond1330, !dbg !1552

loop.cond1330:                                    ; preds = %loop.body1332, %switch.case1329
  %767 = load ptr, ptr %s1304, align 8, !dbg !1554
  %768 = load ptr, ptr %buf, align 8, !dbg !1554
  %gt1331 = icmp ugt ptr %767, %768, !dbg !1554
  br i1 %gt1331, label %loop.body1332, label %loop.exit1334, !dbg !1554

loop.body1332:                                    ; preds = %loop.cond1330
  %769 = load ptr, ptr %s1304, align 8, !dbg !1554
  %ptradd_any1333 = getelementptr i8, ptr %769, i64 -1, !dbg !1554
  store ptr %ptradd_any1333, ptr %s1304, align 8, !dbg !1554
  store i8 48, ptr %ptradd_any1333, align 1, !dbg !1554
  br label %loop.cond1330, !dbg !1554

loop.exit1334:                                    ; preds = %loop.cond1330
  br label %switch.exit1348, !dbg !1554

next_if1335:                                      ; preds = %switch.entry1326
  %770 = load ptr, ptr %s1304, align 8, !dbg !1556
  %771 = load ptr, ptr %buf, align 8, !dbg !1556
  %ptradd_any1336 = getelementptr i8, ptr %771, i64 9, !dbg !1556
  %eq1337 = icmp eq ptr %770, %ptradd_any1336, !dbg !1556
  %eq1338 = icmp eq i1 %eq1337, %764, !dbg !1556
  br i1 %eq1338, label %switch.case1339, label %next_if1347, !dbg !1556

switch.case1339:                                  ; preds = %next_if1335
  %772 = load ptr, ptr %s1304, align 8, !dbg !1557
  %ptradd_any1340 = getelementptr i8, ptr %772, i64 -1, !dbg !1557
  store ptr %ptradd_any1340, ptr %s1304, align 8, !dbg !1557
  %checknull1341 = icmp eq ptr %ptradd_any1340, null, !dbg !1557
  %773 = call i1 @llvm.expect.i1(i1 %checknull1341, i1 false), !dbg !1557
  br i1 %773, label %panic1342, label %checkok1346, !dbg !1557

checkok1346:                                      ; preds = %switch.case1339
  store i8 48, ptr %ptradd_any1340, align 1, !dbg !1557
  br label %switch.exit1348, !dbg !1557

next_if1347:                                      ; preds = %next_if1335
  br label %switch.exit1348, !dbg !1557

switch.exit1348:                                  ; preds = %next_if1347, %checkok1346, %loop.exit1334
  %774 = load i64, ptr %len1235, align 8, !dbg !1559
  %775 = load ptr, ptr %s1304, align 8, !dbg !1559
  %776 = load ptr, ptr %buf, align 8, !dbg !1559
  %ptradd_any1350 = getelementptr i8, ptr %776, i64 9, !dbg !1559
  %777 = load ptr, ptr %s1304, align 8, !dbg !1559
  %778 = ptrtoint ptr %777 to i64, !dbg !1559
  %779 = ptrtoint ptr %ptradd_any1350 to i64, !dbg !1559
  %780 = sub i64 %779, %778, !dbg !1559
  %781 = sdiv exact i64 %780, 1, !dbg !1559
  %add1351 = add i64 0, %781, !dbg !1559
  %gt1352 = icmp sgt i64 0, %add1351, !dbg !1559
  %sub1353 = sub i64 %add1351, 0, !dbg !1559
  %782 = call i1 @llvm.expect.i1(i1 %gt1352, i1 false), !dbg !1559
  br i1 %782, label %panic1354, label %checkok1362, !dbg !1559

checkok1362:                                      ; preds = %switch.exit1348
  %size1363 = sub i64 %add1351, 0, !dbg !1559
  %783 = insertvalue %"char[]" undef, ptr %775, 0, !dbg !1559
  %784 = insertvalue %"char[]" %783, i64 %size1363, 1, !dbg !1559
  %785 = load ptr, ptr %self, align 8
  store %"char[]" %784, ptr %indirectarg1365, align 8
  %786 = call i64 @std.io.Formatter.out_chars(ptr %retparam1364, ptr %785, ptr align 8 %indirectarg1365), !dbg !1559
  %not_err1366 = icmp eq i64 %786, 0, !dbg !1559
  %787 = call i1 @llvm.expect.i1(i1 %not_err1366, i1 true), !dbg !1559
  br i1 %787, label %after_check1368, label %assign_optional1367, !dbg !1559

assign_optional1367:                              ; preds = %checkok1362
  store i64 %786, ptr %error_var1349, align 8, !dbg !1559
  br label %guard_block1369, !dbg !1559

after_check1368:                                  ; preds = %checkok1362
  br label %noerr_block1370, !dbg !1559

guard_block1369:                                  ; preds = %assign_optional1367
  %788 = load i64, ptr %error_var1349, align 8, !dbg !1559
  ret i64 %788, !dbg !1559

noerr_block1370:                                  ; preds = %after_check1368
  %789 = load i64, ptr %retparam1364, align 8, !dbg !1559
  %add1371 = add i64 %774, %789, !dbg !1559
  store i64 %add1371, ptr %len1235, align 8, !dbg !1559
  %790 = load ptr, ptr %d1300, align 8, !dbg !1545
  %ptradd_any1372 = getelementptr i8, ptr %790, i64 4, !dbg !1545
  store ptr %ptradd_any1372, ptr %d1300, align 8, !dbg !1545
  br label %loop.cond1301, !dbg !1545

loop.exit1373:                                    ; preds = %loop.cond1301
  %791 = load i64, ptr %p, align 8, !dbg !1560
  %i2b1374 = icmp ne i64 %791, 0, !dbg !1560
  br i1 %i2b1374, label %or.phi1379, label %or.rhs1375, !dbg !1560

or.rhs1375:                                       ; preds = %loop.exit1373
  %792 = load ptr, ptr %self, align 8, !dbg !1560
  %ptradd1376 = getelementptr inbounds i8, ptr %792, i64 16, !dbg !1560
  %793 = load i32, ptr %ptradd1376, align 8, !dbg !1560
  %lshrl1377 = lshr i32 %793, 4, !dbg !1560
  %794 = and i32 1, %lshrl1377, !dbg !1560
  %trunc1378 = trunc i32 %794 to i8, !dbg !1560
  %795 = trunc i8 %trunc1378 to i1, !dbg !1560
  br label %or.phi1379, !dbg !1560

or.phi1379:                                       ; preds = %or.rhs1375, %loop.exit1373
  %val1380 = phi i1 [ true, %loop.exit1373 ], [ %795, %or.rhs1375 ], !dbg !1560
  br i1 %val1380, label %if.then1381, label %if.exit1390, !dbg !1560

if.then1381:                                      ; preds = %or.phi1379
  %796 = load i64, ptr %len1235, align 8, !dbg !1560
  %797 = load ptr, ptr %self, align 8
  %798 = call i64 @std.io.Formatter.out(ptr %retparam1383, ptr %797, i8 46), !dbg !1560
  %not_err1384 = icmp eq i64 %798, 0, !dbg !1560
  %799 = call i1 @llvm.expect.i1(i1 %not_err1384, i1 true), !dbg !1560
  br i1 %799, label %after_check1386, label %assign_optional1385, !dbg !1560

assign_optional1385:                              ; preds = %if.then1381
  store i64 %798, ptr %error_var1382, align 8, !dbg !1560
  br label %guard_block1387, !dbg !1560

after_check1386:                                  ; preds = %if.then1381
  br label %noerr_block1388, !dbg !1560

guard_block1387:                                  ; preds = %assign_optional1385
  %800 = load i64, ptr %error_var1382, align 8, !dbg !1560
  ret i64 %800, !dbg !1560

noerr_block1388:                                  ; preds = %after_check1386
  %801 = load i64, ptr %retparam1383, align 8, !dbg !1560
  %add1389 = add i64 %796, %801, !dbg !1560
  store i64 %add1389, ptr %len1235, align 8, !dbg !1560
  br label %if.exit1390, !dbg !1560

if.exit1390:                                      ; preds = %noerr_block1388, %or.phi1379
  br label %loop.cond1391, !dbg !1561

loop.cond1391:                                    ; preds = %noerr_block1452, %if.exit1390
  %802 = load ptr, ptr %d1300, align 8, !dbg !1562
  %803 = load ptr, ptr %z, align 8, !dbg !1562
  %lt1392 = icmp ult ptr %802, %803, !dbg !1562
  br i1 %lt1392, label %and.rhs1393, label %and.phi1395, !dbg !1562

and.rhs1393:                                      ; preds = %loop.cond1391
  %804 = load i64, ptr %p, align 8, !dbg !1562
  %gt1394 = icmp sgt i64 %804, 0, !dbg !1562
  br label %and.phi1395, !dbg !1562

and.phi1395:                                      ; preds = %and.rhs1393, %loop.cond1391
  %val1396 = phi i1 [ false, %loop.cond1391 ], [ %gt1394, %and.rhs1393 ], !dbg !1562
  br i1 %val1396, label %loop.body1397, label %loop.exit1456, !dbg !1562

loop.body1397:                                    ; preds = %and.phi1395
    #dbg_declare(ptr %s1398, !1564, !DIExpression(), !1566)
  %805 = load ptr, ptr %d1300, align 8, !dbg !1566
  %checknull1399 = icmp eq ptr %805, null, !dbg !1566
  %806 = call i1 @llvm.expect.i1(i1 %checknull1399, i1 false), !dbg !1566
  br i1 %806, label %panic1400, label %checkok1404, !dbg !1566

checkok1404:                                      ; preds = %loop.body1397
  %807 = ptrtoint ptr %805 to i64, !dbg !1566
  %808 = urem i64 %807, 4, !dbg !1566
  %809 = icmp ne i64 %808, 0, !dbg !1566
  %810 = call i1 @llvm.expect.i1(i1 %809, i1 false), !dbg !1566
  br i1 %810, label %panic1405, label %checkok1415, !dbg !1566

checkok1415:                                      ; preds = %checkok1404
  %811 = load i32, ptr %805, align 4, !dbg !1566
  %zext1416 = zext i32 %811 to i128, !dbg !1566
  %812 = load ptr, ptr %buf, align 8, !dbg !1566
  %ptradd_any1417 = getelementptr i8, ptr %812, i64 9, !dbg !1566
  store i128 %zext1416, ptr %indirectarg1418, align 16
  %813 = call ptr @std.io.fmt_u(ptr align 16 %indirectarg1418, ptr %ptradd_any1417), !dbg !1566
  store ptr %813, ptr %s1398, align 8, !dbg !1566
  br label %loop.cond1419, !dbg !1567

loop.cond1419:                                    ; preds = %checkok1428, %checkok1415
  %814 = load ptr, ptr %s1398, align 8, !dbg !1568
  %815 = load ptr, ptr %buf, align 8, !dbg !1568
  %gt1420 = icmp ugt ptr %814, %815, !dbg !1568
  br i1 %gt1420, label %loop.body1421, label %loop.exit1429, !dbg !1568

loop.body1421:                                    ; preds = %loop.cond1419
  %816 = load ptr, ptr %s1398, align 8, !dbg !1568
  %ptradd_any1422 = getelementptr i8, ptr %816, i64 -1, !dbg !1568
  store ptr %ptradd_any1422, ptr %s1398, align 8, !dbg !1568
  %checknull1423 = icmp eq ptr %ptradd_any1422, null, !dbg !1568
  %817 = call i1 @llvm.expect.i1(i1 %checknull1423, i1 false), !dbg !1568
  br i1 %817, label %panic1424, label %checkok1428, !dbg !1568

checkok1428:                                      ; preds = %loop.body1421
  store i8 48, ptr %ptradd_any1422, align 1, !dbg !1568
  br label %loop.cond1419, !dbg !1568

loop.exit1429:                                    ; preds = %loop.cond1419
  %818 = load i64, ptr %len1235, align 8, !dbg !1570
  %819 = load ptr, ptr %s1398, align 8, !dbg !1570
  store i64 9, ptr %x1431, align 8
  %820 = load i64, ptr %p, align 8
  store i64 %820, ptr %y1432, align 8
  %821 = load i64, ptr %x1431, align 8, !dbg !1571
  %822 = load i64, ptr %y1432, align 8, !dbg !1571
  %823 = call i64 @llvm.smin.i64(i64 %821, i64 %822), !dbg !1571
  %add1433 = add i64 0, %823, !dbg !1571
  %gt1434 = icmp sgt i64 0, %add1433, !dbg !1571
  %sub1435 = sub i64 %add1433, 0, !dbg !1571
  %824 = call i1 @llvm.expect.i1(i1 %gt1434, i1 false), !dbg !1571
  br i1 %824, label %panic1436, label %checkok1444, !dbg !1571

checkok1444:                                      ; preds = %loop.exit1429
  %size1445 = sub i64 %add1433, 0, !dbg !1570
  %825 = insertvalue %"char[]" undef, ptr %819, 0, !dbg !1570
  %826 = insertvalue %"char[]" %825, i64 %size1445, 1, !dbg !1570
  %827 = load ptr, ptr %self, align 8
  store %"char[]" %826, ptr %indirectarg1447, align 8
  %828 = call i64 @std.io.Formatter.out_chars(ptr %retparam1446, ptr %827, ptr align 8 %indirectarg1447), !dbg !1570
  %not_err1448 = icmp eq i64 %828, 0, !dbg !1570
  %829 = call i1 @llvm.expect.i1(i1 %not_err1448, i1 true), !dbg !1570
  br i1 %829, label %after_check1450, label %assign_optional1449, !dbg !1570

assign_optional1449:                              ; preds = %checkok1444
  store i64 %828, ptr %error_var1430, align 8, !dbg !1570
  br label %guard_block1451, !dbg !1570

after_check1450:                                  ; preds = %checkok1444
  br label %noerr_block1452, !dbg !1570

guard_block1451:                                  ; preds = %assign_optional1449
  %830 = load i64, ptr %error_var1430, align 8, !dbg !1570
  ret i64 %830, !dbg !1570

noerr_block1452:                                  ; preds = %after_check1450
  %831 = load i64, ptr %retparam1446, align 8, !dbg !1570
  %add1453 = add i64 %818, %831, !dbg !1570
  store i64 %add1453, ptr %len1235, align 8, !dbg !1570
  %832 = load ptr, ptr %d1300, align 8, !dbg !1562
  %ptradd_any1454 = getelementptr i8, ptr %832, i64 4, !dbg !1562
  store ptr %ptradd_any1454, ptr %d1300, align 8, !dbg !1562
  %833 = load i64, ptr %p, align 8, !dbg !1562
  %sub1455 = sub i64 %833, 9, !dbg !1562
  store i64 %sub1455, ptr %p, align 8, !dbg !1562
  br label %loop.cond1391, !dbg !1562

loop.exit1456:                                    ; preds = %and.phi1395
  %834 = load i64, ptr %len1235, align 8, !dbg !1573
  %835 = load i64, ptr %p, align 8, !dbg !1573
  %add1458 = add i64 %835, 9, !dbg !1573
  %836 = load ptr, ptr %self, align 8
  %837 = call i64 @std.io.Formatter.pad(ptr %retparam1459, ptr %836, i8 48, i64 %add1458, i64 9) #6, !dbg !1573
  %not_err1460 = icmp eq i64 %837, 0, !dbg !1573
  %838 = call i1 @llvm.expect.i1(i1 %not_err1460, i1 true), !dbg !1573
  br i1 %838, label %after_check1462, label %assign_optional1461, !dbg !1573

assign_optional1461:                              ; preds = %loop.exit1456
  store i64 %837, ptr %error_var1457, align 8, !dbg !1573
  br label %guard_block1463, !dbg !1573

after_check1462:                                  ; preds = %loop.exit1456
  br label %noerr_block1464, !dbg !1573

guard_block1463:                                  ; preds = %assign_optional1461
  %839 = load i64, ptr %error_var1457, align 8, !dbg !1573
  ret i64 %839, !dbg !1573

noerr_block1464:                                  ; preds = %after_check1462
  %840 = load i64, ptr %retparam1459, align 8, !dbg !1573
  %add1465 = add i64 %834, %840, !dbg !1573
  store i64 %add1465, ptr %len1235, align 8, !dbg !1573
  br label %if.exit1600, !dbg !1573

if.else1466:                                      ; preds = %if.exit1294
  %841 = load ptr, ptr %z, align 8, !dbg !1574
  %842 = load ptr, ptr %a, align 8, !dbg !1574
  %le1467 = icmp ule ptr %841, %842, !dbg !1574
  br i1 %le1467, label %if.then1468, label %if.exit1470, !dbg !1574

if.then1468:                                      ; preds = %if.else1466
  %843 = load ptr, ptr %a, align 8, !dbg !1574
  %ptradd_any1469 = getelementptr i8, ptr %843, i64 4, !dbg !1574
  store ptr %ptradd_any1469, ptr %z, align 8, !dbg !1574
  br label %if.exit1470, !dbg !1574

if.exit1470:                                      ; preds = %if.then1468, %if.else1466
    #dbg_declare(ptr %d1471, !1576, !DIExpression(), !1578)
  %844 = load ptr, ptr %a, align 8, !dbg !1578
  store ptr %844, ptr %d1471, align 8, !dbg !1578
  br label %loop.cond1472, !dbg !1578

loop.cond1472:                                    ; preds = %noerr_block1563, %if.exit1470
  %845 = load ptr, ptr %d1471, align 8, !dbg !1578
  %846 = load ptr, ptr %z, align 8, !dbg !1578
  %lt1473 = icmp ult ptr %845, %846, !dbg !1578
  br i1 %lt1473, label %and.rhs1474, label %and.phi1476, !dbg !1578

and.rhs1474:                                      ; preds = %loop.cond1472
  %847 = load i64, ptr %p, align 8, !dbg !1578
  %ge1475 = icmp sge i64 %847, 0, !dbg !1578
  br label %and.phi1476, !dbg !1578

and.phi1476:                                      ; preds = %and.rhs1474, %loop.cond1472
  %val1477 = phi i1 [ false, %loop.cond1472 ], [ %ge1475, %and.rhs1474 ], !dbg !1578
  br i1 %val1477, label %loop.body1478, label %loop.exit1568, !dbg !1578

loop.body1478:                                    ; preds = %and.phi1476
    #dbg_declare(ptr %s1479, !1579, !DIExpression(), !1581)
  %848 = load ptr, ptr %d1471, align 8, !dbg !1581
  %checknull1480 = icmp eq ptr %848, null, !dbg !1581
  %849 = call i1 @llvm.expect.i1(i1 %checknull1480, i1 false), !dbg !1581
  br i1 %849, label %panic1481, label %checkok1485, !dbg !1581

checkok1485:                                      ; preds = %loop.body1478
  %850 = ptrtoint ptr %848 to i64, !dbg !1581
  %851 = urem i64 %850, 4, !dbg !1581
  %852 = icmp ne i64 %851, 0, !dbg !1581
  %853 = call i1 @llvm.expect.i1(i1 %852, i1 false), !dbg !1581
  br i1 %853, label %panic1486, label %checkok1496, !dbg !1581

checkok1496:                                      ; preds = %checkok1485
  %854 = load i32, ptr %848, align 4, !dbg !1581
  %zext1497 = zext i32 %854 to i128, !dbg !1581
  %855 = load ptr, ptr %buf, align 8, !dbg !1581
  %ptradd_any1498 = getelementptr i8, ptr %855, i64 9, !dbg !1581
  store i128 %zext1497, ptr %indirectarg1499, align 16
  %856 = call ptr @std.io.fmt_u(ptr align 16 %indirectarg1499, ptr %ptradd_any1498), !dbg !1581
  store ptr %856, ptr %s1479, align 8, !dbg !1581
  %857 = load ptr, ptr %s1479, align 8, !dbg !1582
  %858 = load ptr, ptr %buf, align 8, !dbg !1582
  %ptradd_any1500 = getelementptr i8, ptr %858, i64 9, !dbg !1582
  %eq1501 = icmp eq ptr %857, %ptradd_any1500, !dbg !1582
  br i1 %eq1501, label %if.then1502, label %if.exit1504, !dbg !1582

if.then1502:                                      ; preds = %checkok1496
  %859 = load ptr, ptr %s1479, align 8, !dbg !1582
  %ptradd_any1503 = getelementptr i8, ptr %859, i64 -1, !dbg !1582
  store ptr %ptradd_any1503, ptr %s1479, align 8, !dbg !1582
  store i8 48, ptr %ptradd_any1503, align 1, !dbg !1582
  br label %if.exit1504, !dbg !1582

if.exit1504:                                      ; preds = %if.then1502, %checkok1496
  %860 = load ptr, ptr %d1471, align 8, !dbg !1583
  %861 = load ptr, ptr %a, align 8, !dbg !1583
  %neq1505 = icmp ne ptr %860, %861, !dbg !1583
  br i1 %neq1505, label %if.then1506, label %if.else1512, !dbg !1583

if.then1506:                                      ; preds = %if.exit1504
  br label %loop.cond1507, !dbg !1584

loop.cond1507:                                    ; preds = %loop.body1509, %if.then1506
  %862 = load ptr, ptr %s1479, align 8, !dbg !1586
  %863 = load ptr, ptr %buf, align 8, !dbg !1586
  %gt1508 = icmp ugt ptr %862, %863, !dbg !1586
  br i1 %gt1508, label %loop.body1509, label %loop.exit1511, !dbg !1586

loop.body1509:                                    ; preds = %loop.cond1507
  %864 = load ptr, ptr %s1479, align 8, !dbg !1586
  %ptradd_any1510 = getelementptr i8, ptr %864, i64 -1, !dbg !1586
  store ptr %ptradd_any1510, ptr %s1479, align 8, !dbg !1586
  store i8 48, ptr %ptradd_any1510, align 1, !dbg !1586
  br label %loop.cond1507, !dbg !1586

loop.exit1511:                                    ; preds = %loop.cond1507
  br label %if.exit1539, !dbg !1586

if.else1512:                                      ; preds = %if.exit1504
  %865 = load i64, ptr %len1235, align 8, !dbg !1588
  %866 = load ptr, ptr %s1479, align 8, !dbg !1588
  %ptradd_any1514 = getelementptr i8, ptr %866, i64 1, !dbg !1588
  store ptr %ptradd_any1514, ptr %s1479, align 8, !dbg !1588
  %867 = load ptr, ptr %self, align 8
  %868 = load i8, ptr %866, align 1
  %869 = call i64 @std.io.Formatter.out(ptr %retparam1515, ptr %867, i8 %868), !dbg !1588
  %not_err1516 = icmp eq i64 %869, 0, !dbg !1588
  %870 = call i1 @llvm.expect.i1(i1 %not_err1516, i1 true), !dbg !1588
  br i1 %870, label %after_check1518, label %assign_optional1517, !dbg !1588

assign_optional1517:                              ; preds = %if.else1512
  store i64 %869, ptr %error_var1513, align 8, !dbg !1588
  br label %guard_block1519, !dbg !1588

after_check1518:                                  ; preds = %if.else1512
  br label %noerr_block1520, !dbg !1588

guard_block1519:                                  ; preds = %assign_optional1517
  %871 = load i64, ptr %error_var1513, align 8, !dbg !1588
  ret i64 %871, !dbg !1588

noerr_block1520:                                  ; preds = %after_check1518
  %872 = load i64, ptr %retparam1515, align 8, !dbg !1588
  %add1521 = add i64 %865, %872, !dbg !1588
  store i64 %add1521, ptr %len1235, align 8, !dbg !1588
  %873 = load i64, ptr %p, align 8, !dbg !1590
  %gt1522 = icmp sgt i64 %873, 0, !dbg !1590
  br i1 %gt1522, label %or.phi1527, label %or.rhs1523, !dbg !1590

or.rhs1523:                                       ; preds = %noerr_block1520
  %874 = load ptr, ptr %self, align 8, !dbg !1590
  %ptradd1524 = getelementptr inbounds i8, ptr %874, i64 16, !dbg !1590
  %875 = load i32, ptr %ptradd1524, align 8, !dbg !1590
  %lshrl1525 = lshr i32 %875, 4, !dbg !1590
  %876 = and i32 1, %lshrl1525, !dbg !1590
  %trunc1526 = trunc i32 %876 to i8, !dbg !1590
  %877 = trunc i8 %trunc1526 to i1, !dbg !1590
  br label %or.phi1527, !dbg !1590

or.phi1527:                                       ; preds = %or.rhs1523, %noerr_block1520
  %val1528 = phi i1 [ true, %noerr_block1520 ], [ %877, %or.rhs1523 ], !dbg !1590
  br i1 %val1528, label %if.then1529, label %if.exit1538, !dbg !1590

if.then1529:                                      ; preds = %or.phi1527
  %878 = load i64, ptr %len1235, align 8, !dbg !1590
  %879 = load ptr, ptr %self, align 8
  %880 = call i64 @std.io.Formatter.out(ptr %retparam1531, ptr %879, i8 46), !dbg !1590
  %not_err1532 = icmp eq i64 %880, 0, !dbg !1590
  %881 = call i1 @llvm.expect.i1(i1 %not_err1532, i1 true), !dbg !1590
  br i1 %881, label %after_check1534, label %assign_optional1533, !dbg !1590

assign_optional1533:                              ; preds = %if.then1529
  store i64 %880, ptr %error_var1530, align 8, !dbg !1590
  br label %guard_block1535, !dbg !1590

after_check1534:                                  ; preds = %if.then1529
  br label %noerr_block1536, !dbg !1590

guard_block1535:                                  ; preds = %assign_optional1533
  %882 = load i64, ptr %error_var1530, align 8, !dbg !1590
  ret i64 %882, !dbg !1590

noerr_block1536:                                  ; preds = %after_check1534
  %883 = load i64, ptr %retparam1531, align 8, !dbg !1590
  %add1537 = add i64 %878, %883, !dbg !1590
  store i64 %add1537, ptr %len1235, align 8, !dbg !1590
  br label %if.exit1538, !dbg !1590

if.exit1538:                                      ; preds = %noerr_block1536, %or.phi1527
  br label %if.exit1539, !dbg !1590

if.exit1539:                                      ; preds = %if.exit1538, %loop.exit1511
  %884 = load i64, ptr %len1235, align 8, !dbg !1591
  %885 = load ptr, ptr %s1479, align 8, !dbg !1591
  %886 = load ptr, ptr %buf, align 8, !dbg !1591
  %ptradd_any1541 = getelementptr i8, ptr %886, i64 9, !dbg !1591
  %887 = load ptr, ptr %s1479, align 8, !dbg !1591
  %888 = ptrtoint ptr %887 to i64, !dbg !1591
  %889 = ptrtoint ptr %ptradd_any1541 to i64, !dbg !1591
  %890 = sub i64 %889, %888, !dbg !1591
  %891 = sdiv exact i64 %890, 1, !dbg !1591
  store i64 %891, ptr %x1542, align 8
  %892 = load i64, ptr %p, align 8
  store i64 %892, ptr %y1543, align 8
  %893 = load i64, ptr %x1542, align 8, !dbg !1592
  %894 = load i64, ptr %y1543, align 8, !dbg !1592
  %895 = call i64 @llvm.smin.i64(i64 %893, i64 %894), !dbg !1592
  %add1544 = add i64 0, %895, !dbg !1592
  %gt1545 = icmp sgt i64 0, %add1544, !dbg !1592
  %sub1546 = sub i64 %add1544, 0, !dbg !1592
  %896 = call i1 @llvm.expect.i1(i1 %gt1545, i1 false), !dbg !1592
  br i1 %896, label %panic1547, label %checkok1555, !dbg !1592

checkok1555:                                      ; preds = %if.exit1539
  %size1556 = sub i64 %add1544, 0, !dbg !1591
  %897 = insertvalue %"char[]" undef, ptr %885, 0, !dbg !1591
  %898 = insertvalue %"char[]" %897, i64 %size1556, 1, !dbg !1591
  %899 = load ptr, ptr %self, align 8
  store %"char[]" %898, ptr %indirectarg1558, align 8
  %900 = call i64 @std.io.Formatter.out_chars(ptr %retparam1557, ptr %899, ptr align 8 %indirectarg1558), !dbg !1591
  %not_err1559 = icmp eq i64 %900, 0, !dbg !1591
  %901 = call i1 @llvm.expect.i1(i1 %not_err1559, i1 true), !dbg !1591
  br i1 %901, label %after_check1561, label %assign_optional1560, !dbg !1591

assign_optional1560:                              ; preds = %checkok1555
  store i64 %900, ptr %error_var1540, align 8, !dbg !1591
  br label %guard_block1562, !dbg !1591

after_check1561:                                  ; preds = %checkok1555
  br label %noerr_block1563, !dbg !1591

guard_block1562:                                  ; preds = %assign_optional1560
  %902 = load i64, ptr %error_var1540, align 8, !dbg !1591
  ret i64 %902, !dbg !1591

noerr_block1563:                                  ; preds = %after_check1561
  %903 = load i64, ptr %retparam1557, align 8, !dbg !1591
  %add1564 = add i64 %884, %903, !dbg !1591
  store i64 %add1564, ptr %len1235, align 8, !dbg !1591
  %904 = load i64, ptr %p, align 8, !dbg !1594
  %905 = load ptr, ptr %buf, align 8, !dbg !1594
  %ptradd_any1565 = getelementptr i8, ptr %905, i64 9, !dbg !1594
  %906 = load ptr, ptr %s1479, align 8, !dbg !1594
  %907 = ptrtoint ptr %906 to i64, !dbg !1594
  %908 = ptrtoint ptr %ptradd_any1565 to i64, !dbg !1594
  %909 = sub i64 %908, %907, !dbg !1594
  %910 = sdiv exact i64 %909, 1, !dbg !1594
  %sub1566 = sub i64 %904, %910, !dbg !1594
  store i64 %sub1566, ptr %p, align 8, !dbg !1594
  %911 = load ptr, ptr %d1471, align 8, !dbg !1578
  %ptradd_any1567 = getelementptr i8, ptr %911, i64 4, !dbg !1578
  store ptr %ptradd_any1567, ptr %d1471, align 8, !dbg !1578
  br label %loop.cond1472, !dbg !1578

loop.exit1568:                                    ; preds = %and.phi1476
  %912 = load i64, ptr %len1235, align 8, !dbg !1595
  %913 = load i64, ptr %p, align 8, !dbg !1595
  %add1570 = add i64 %913, 18, !dbg !1595
  %914 = load ptr, ptr %self, align 8
  %915 = call i64 @std.io.Formatter.pad(ptr %retparam1571, ptr %914, i8 48, i64 %add1570, i64 18) #6, !dbg !1595
  %not_err1572 = icmp eq i64 %915, 0, !dbg !1595
  %916 = call i1 @llvm.expect.i1(i1 %not_err1572, i1 true), !dbg !1595
  br i1 %916, label %after_check1574, label %assign_optional1573, !dbg !1595

assign_optional1573:                              ; preds = %loop.exit1568
  store i64 %915, ptr %error_var1569, align 8, !dbg !1595
  br label %guard_block1575, !dbg !1595

after_check1574:                                  ; preds = %loop.exit1568
  br label %noerr_block1576, !dbg !1595

guard_block1575:                                  ; preds = %assign_optional1573
  %917 = load i64, ptr %error_var1569, align 8, !dbg !1595
  ret i64 %917, !dbg !1595

noerr_block1576:                                  ; preds = %after_check1574
  %918 = load i64, ptr %retparam1571, align 8, !dbg !1595
  %add1577 = add i64 %912, %918, !dbg !1595
  store i64 %add1577, ptr %len1235, align 8, !dbg !1595
  %919 = load i64, ptr %len1235, align 8, !dbg !1596
  %920 = load ptr, ptr %estr1177, align 8, !dbg !1596
  %921 = load ptr, ptr %ebuf, align 8, !dbg !1596
  %922 = load ptr, ptr %estr1177, align 8, !dbg !1596
  %923 = ptrtoint ptr %922 to i64, !dbg !1596
  %924 = ptrtoint ptr %921 to i64, !dbg !1596
  %925 = sub i64 %924, %923, !dbg !1596
  %926 = sdiv exact i64 %925, 1, !dbg !1596
  %add1579 = add i64 0, %926, !dbg !1596
  %gt1580 = icmp sgt i64 0, %add1579, !dbg !1596
  %sub1581 = sub i64 %add1579, 0, !dbg !1596
  %927 = call i1 @llvm.expect.i1(i1 %gt1580, i1 false), !dbg !1596
  br i1 %927, label %panic1582, label %checkok1590, !dbg !1596

checkok1590:                                      ; preds = %noerr_block1576
  %size1591 = sub i64 %add1579, 0, !dbg !1596
  %928 = insertvalue %"char[]" undef, ptr %920, 0, !dbg !1596
  %929 = insertvalue %"char[]" %928, i64 %size1591, 1, !dbg !1596
  %930 = load ptr, ptr %self, align 8
  store %"char[]" %929, ptr %indirectarg1593, align 8
  %931 = call i64 @std.io.Formatter.out_chars(ptr %retparam1592, ptr %930, ptr align 8 %indirectarg1593), !dbg !1596
  %not_err1594 = icmp eq i64 %931, 0, !dbg !1596
  %932 = call i1 @llvm.expect.i1(i1 %not_err1594, i1 true), !dbg !1596
  br i1 %932, label %after_check1596, label %assign_optional1595, !dbg !1596

assign_optional1595:                              ; preds = %checkok1590
  store i64 %931, ptr %error_var1578, align 8, !dbg !1596
  br label %guard_block1597, !dbg !1596

after_check1596:                                  ; preds = %checkok1590
  br label %noerr_block1598, !dbg !1596

guard_block1597:                                  ; preds = %assign_optional1595
  %933 = load i64, ptr %error_var1578, align 8, !dbg !1596
  ret i64 %933, !dbg !1596

noerr_block1598:                                  ; preds = %after_check1596
  %934 = load i64, ptr %retparam1592, align 8, !dbg !1596
  %add1599 = add i64 %919, %934, !dbg !1596
  store i64 %add1599, ptr %len1235, align 8, !dbg !1596
  br label %if.exit1600, !dbg !1596

if.exit1600:                                      ; preds = %noerr_block1598, %noerr_block1464
  %935 = load ptr, ptr %self, align 8, !dbg !1597
  %ptradd1601 = getelementptr inbounds i8, ptr %935, i64 16, !dbg !1597
  %936 = load i32, ptr %ptradd1601, align 8, !dbg !1597
  %lshrl1602 = lshr i32 %936, 1, !dbg !1597
  %937 = and i32 1, %lshrl1602, !dbg !1597
  %trunc1603 = trunc i32 %937 to i8, !dbg !1597
  %938 = trunc i8 %trunc1603 to i1, !dbg !1597
  br i1 %938, label %if.then1604, label %if.exit1618, !dbg !1597

if.then1604:                                      ; preds = %if.exit1600
  %939 = load i64, ptr %len1235, align 8, !dbg !1597
  %940 = load ptr, ptr %self, align 8, !dbg !1597
  %ptradd1606 = getelementptr inbounds i8, ptr %940, i64 16, !dbg !1597
  %ptradd1607 = getelementptr inbounds i8, ptr %ptradd1606, i64 4, !dbg !1597
  %941 = load i32, ptr %ptradd1607, align 4, !dbg !1597
  %zext1608 = zext i32 %941 to i64, !dbg !1597
  %942 = load i64, ptr %pl, align 8, !dbg !1597
  %943 = load i32, ptr %l1165, align 4, !dbg !1597
  %sext1609 = sext i32 %943 to i64, !dbg !1597
  %add1610 = add i64 %942, %sext1609, !dbg !1597
  %944 = load ptr, ptr %self, align 8
  %945 = call i64 @std.io.Formatter.pad(ptr %retparam1611, ptr %944, i8 32, i64 %zext1608, i64 %add1610) #6, !dbg !1597
  %not_err1612 = icmp eq i64 %945, 0, !dbg !1597
  %946 = call i1 @llvm.expect.i1(i1 %not_err1612, i1 true), !dbg !1597
  br i1 %946, label %after_check1614, label %assign_optional1613, !dbg !1597

assign_optional1613:                              ; preds = %if.then1604
  store i64 %945, ptr %error_var1605, align 8, !dbg !1597
  br label %guard_block1615, !dbg !1597

after_check1614:                                  ; preds = %if.then1604
  br label %noerr_block1616, !dbg !1597

guard_block1615:                                  ; preds = %assign_optional1613
  %947 = load i64, ptr %error_var1605, align 8, !dbg !1597
  ret i64 %947, !dbg !1597

noerr_block1616:                                  ; preds = %after_check1614
  %948 = load i64, ptr %retparam1611, align 8, !dbg !1597
  %add1617 = add i64 %939, %948, !dbg !1597
  store i64 %add1617, ptr %len1235, align 8, !dbg !1597
  br label %if.exit1618, !dbg !1597

if.exit1618:                                      ; preds = %noerr_block1616, %if.exit1600
  %949 = load i64, ptr %len1235, align 8, !dbg !1598
  store i64 %949, ptr %0, align 8, !dbg !1598
  ret i64 0, !dbg !1598

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.150, i64 11 }, ptr %indirectarg2, align 8
  %950 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %950(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 211) #5, !dbg !1227
  unreachable, !dbg !1227

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.13, i64 54 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.14, i64 10 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.150, i64 11 }, ptr %indirectarg6, align 8
  %951 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %951(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 281) #5, !dbg !1237
  unreachable, !dbg !1237

panic8:                                           ; preds = %checkok7
  store i64 8, ptr %taddr, align 8
  %952 = insertvalue %any undef, ptr %taddr, 0
  %953 = insertvalue %any %952, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %10, ptr %taddr9, align 8
  %954 = insertvalue %any undef, ptr %taddr9, 0
  %955 = insertvalue %any %954, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.file.14, i64 10 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.func.150, i64 11 }, ptr %indirectarg12, align 8
  store %any %953, ptr %varargslots, align 16
  %ptradd = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %955, ptr %ptradd, align 16
  %956 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %956, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg13, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, i32 281, ptr align 8 %indirectarg13) #5, !dbg !1237
  unreachable, !dbg !1237

panic20:                                          ; preds = %or.phi
  store %"char[]" { ptr @.panic_msg.13, i64 54 }, ptr %indirectarg21, align 8
  store %"char[]" { ptr @.file.14, i64 10 }, ptr %indirectarg22, align 8
  store %"char[]" { ptr @.func.150, i64 11 }, ptr %indirectarg23, align 8
  %957 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %957(ptr align 8 %indirectarg21, ptr align 8 %indirectarg22, ptr align 8 %indirectarg23, i32 281) #5, !dbg !1248
  unreachable, !dbg !1248

panic25:                                          ; preds = %checkok24
  store i64 8, ptr %taddr26, align 8
  %958 = insertvalue %any undef, ptr %taddr26, 0
  %959 = insertvalue %any %958, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %26, ptr %taddr27, align 8
  %960 = insertvalue %any undef, ptr %taddr27, 0
  %961 = insertvalue %any %960, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg28, align 8
  store %"char[]" { ptr @.file.14, i64 10 }, ptr %indirectarg29, align 8
  store %"char[]" { ptr @.func.150, i64 11 }, ptr %indirectarg30, align 8
  store %any %959, ptr %varargslots31, align 16
  %ptradd32 = getelementptr inbounds i8, ptr %varargslots31, i64 16
  store %any %961, ptr %ptradd32, align 16
  %962 = insertvalue %"any[]" undef, ptr %varargslots31, 0
  %"$$temp33" = insertvalue %"any[]" %962, i64 2, 1
  store %"any[]" %"$$temp33", ptr %indirectarg34, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg28, ptr align 8 %indirectarg29, ptr align 8 %indirectarg30, i32 281, ptr align 8 %indirectarg34) #5, !dbg !1248
  unreachable, !dbg !1248

panic51:                                          ; preds = %if.exit43
  store %"char[]" { ptr @.panic_msg.13, i64 54 }, ptr %indirectarg52, align 8
  store %"char[]" { ptr @.file.14, i64 10 }, ptr %indirectarg53, align 8
  store %"char[]" { ptr @.func.150, i64 11 }, ptr %indirectarg54, align 8
  %963 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %963(ptr align 8 %indirectarg52, ptr align 8 %indirectarg53, ptr align 8 %indirectarg54, i32 281) #5, !dbg !1259
  unreachable, !dbg !1259

panic56:                                          ; preds = %checkok55
  store i64 8, ptr %taddr57, align 8
  %964 = insertvalue %any undef, ptr %taddr57, 0
  %965 = insertvalue %any %964, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %51, ptr %taddr58, align 8
  %966 = insertvalue %any undef, ptr %taddr58, 0
  %967 = insertvalue %any %966, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg59, align 8
  store %"char[]" { ptr @.file.14, i64 10 }, ptr %indirectarg60, align 8
  store %"char[]" { ptr @.func.150, i64 11 }, ptr %indirectarg61, align 8
  store %any %965, ptr %varargslots62, align 16
  %ptradd63 = getelementptr inbounds i8, ptr %varargslots62, i64 16
  store %any %967, ptr %ptradd63, align 16
  %968 = insertvalue %"any[]" undef, ptr %varargslots62, 0
  %"$$temp64" = insertvalue %"any[]" %968, i64 2, 1
  store %"any[]" %"$$temp64", ptr %indirectarg65, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg59, ptr align 8 %indirectarg60, ptr align 8 %indirectarg61, i32 281, ptr align 8 %indirectarg65) #5, !dbg !1259
  unreachable, !dbg !1259

panic165:                                         ; preds = %if.then162
  store %"char[]" { ptr @.panic_msg.155, i64 47 }, ptr %indirectarg166, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg167, align 8
  store %"char[]" { ptr @.func.150, i64 11 }, ptr %indirectarg168, align 8
  %969 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %969(ptr align 8 %indirectarg166, ptr align 8 %indirectarg167, ptr align 8 %indirectarg168, i32 272) #5, !dbg !1314
  unreachable, !dbg !1314

panic175:                                         ; preds = %if.exit170
  store %"char[]" { ptr @.panic_msg.155, i64 47 }, ptr %indirectarg176, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg177, align 8
  store %"char[]" { ptr @.func.150, i64 11 }, ptr %indirectarg178, align 8
  %970 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %970(ptr align 8 %indirectarg176, ptr align 8 %indirectarg177, ptr align 8 %indirectarg178, i32 273) #5, !dbg !1315
  unreachable, !dbg !1315

panic186:                                         ; preds = %checkok179
  store %"char[]" { ptr @.panic_msg.155, i64 47 }, ptr %indirectarg187, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg188, align 8
  store %"char[]" { ptr @.func.150, i64 11 }, ptr %indirectarg189, align 8
  %971 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %971(ptr align 8 %indirectarg187, ptr align 8 %indirectarg188, ptr align 8 %indirectarg189, i32 274) #5, !dbg !1316
  unreachable, !dbg !1316

panic204:                                         ; preds = %loop.body198
  store %"char[]" { ptr @.panic_msg.156, i64 44 }, ptr %indirectarg205, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg206, align 8
  store %"char[]" { ptr @.func.150, i64 11 }, ptr %indirectarg207, align 8
  %972 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %972(ptr align 8 %indirectarg205, ptr align 8 %indirectarg206, ptr align 8 %indirectarg207, i32 280) #5, !dbg !1327
  unreachable, !dbg !1327

panic229:                                         ; preds = %if.then226
  store %"char[]" { ptr @.panic_msg.156, i64 44 }, ptr %indirectarg230, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg231, align 8
  store %"char[]" { ptr @.func.150, i64 11 }, ptr %indirectarg232, align 8
  %973 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %973(ptr align 8 %indirectarg230, ptr align 8 %indirectarg231, ptr align 8 %indirectarg232, i32 282) #5, !dbg !1329
  unreachable, !dbg !1329

panic328:                                         ; preds = %if.exit323
  store i64 %sub327, ptr %taddr329, align 8
  %974 = insertvalue %any undef, ptr %taddr329, 0
  %975 = insertvalue %any %974, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.16, i64 43 }, ptr %indirectarg330, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg331, align 8
  store %"char[]" { ptr @.func.150, i64 11 }, ptr %indirectarg332, align 8
  store %any %975, ptr %varargslots333, align 16
  %976 = insertvalue %"any[]" undef, ptr %varargslots333, 0
  %"$$temp334" = insertvalue %"any[]" %976, i64 1, 1
  store %"any[]" %"$$temp334", ptr %indirectarg335, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg330, ptr align 8 %indirectarg331, ptr align 8 %indirectarg332, i32 295, ptr align 8 %indirectarg335) #5, !dbg !1345
  unreachable, !dbg !1345

panic359:                                         ; preds = %noerr_block353
  store i64 %sub358, ptr %taddr360, align 8
  %977 = insertvalue %any undef, ptr %taddr360, 0
  %978 = insertvalue %any %977, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.16, i64 43 }, ptr %indirectarg361, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg362, align 8
  store %"char[]" { ptr @.func.150, i64 11 }, ptr %indirectarg363, align 8
  store %any %978, ptr %varargslots364, align 16
  %979 = insertvalue %"any[]" undef, ptr %varargslots364, 0
  %"$$temp365" = insertvalue %"any[]" %979, i64 1, 1
  store %"any[]" %"$$temp365", ptr %indirectarg366, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg361, ptr align 8 %indirectarg362, ptr align 8 %indirectarg363, i32 297, ptr align 8 %indirectarg366) #5, !dbg !1347
  unreachable, !dbg !1347

panic413:                                         ; preds = %loop.body411
  store i64 4, ptr %taddr414, align 8
  %980 = insertvalue %any undef, ptr %taddr414, 0
  %981 = insertvalue %any %980, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %299, ptr %taddr415, align 8
  %982 = insertvalue %any undef, ptr %taddr415, 0
  %983 = insertvalue %any %982, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg416, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg417, align 8
  store %"char[]" { ptr @.func.150, i64 11 }, ptr %indirectarg418, align 8
  store %any %981, ptr %varargslots419, align 16
  %ptradd420 = getelementptr inbounds i8, ptr %varargslots419, i64 16
  store %any %983, ptr %ptradd420, align 16
  %984 = insertvalue %"any[]" undef, ptr %varargslots419, 0
  %"$$temp421" = insertvalue %"any[]" %984, i64 2, 1
  store %"any[]" %"$$temp421", ptr %indirectarg422, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg416, ptr align 8 %indirectarg417, ptr align 8 %indirectarg418, i32 320, ptr align 8 %indirectarg422) #5, !dbg !1370
  unreachable, !dbg !1370

panic437:                                         ; preds = %loop.body434
  store %"char[]" { ptr @.panic_msg.159, i64 42 }, ptr %indirectarg438, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg439, align 8
  store %"char[]" { ptr @.func.150, i64 11 }, ptr %indirectarg440, align 8
  %985 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %985(ptr align 8 %indirectarg438, ptr align 8 %indirectarg439, ptr align 8 %indirectarg440, i32 330) #5, !dbg !1387
  unreachable, !dbg !1387

panic442:                                         ; preds = %checkok441
  store i64 4, ptr %taddr443, align 8
  %986 = insertvalue %any undef, ptr %taddr443, 0
  %987 = insertvalue %any %986, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %315, ptr %taddr444, align 8
  %988 = insertvalue %any undef, ptr %taddr444, 0
  %989 = insertvalue %any %988, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg445, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg446, align 8
  store %"char[]" { ptr @.func.150, i64 11 }, ptr %indirectarg447, align 8
  store %any %987, ptr %varargslots448, align 16
  %ptradd449 = getelementptr inbounds i8, ptr %varargslots448, i64 16
  store %any %989, ptr %ptradd449, align 16
  %990 = insertvalue %"any[]" undef, ptr %varargslots448, 0
  %"$$temp450" = insertvalue %"any[]" %990, i64 2, 1
  store %"any[]" %"$$temp450", ptr %indirectarg451, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg445, ptr align 8 %indirectarg446, ptr align 8 %indirectarg447, i32 330, ptr align 8 %indirectarg451) #5, !dbg !1387
  unreachable, !dbg !1387

panic455:                                         ; preds = %checkok452
  store i64 %zext454, ptr %taddr456, align 8
  %991 = insertvalue %any undef, ptr %taddr456, 0
  %992 = insertvalue %any %991, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 35 }, ptr %indirectarg457, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg458, align 8
  store %"char[]" { ptr @.func.150, i64 11 }, ptr %indirectarg459, align 8
  store %any %992, ptr %varargslots460, align 16
  %993 = insertvalue %"any[]" undef, ptr %varargslots460, 0
  %"$$temp461" = insertvalue %"any[]" %993, i64 1, 1
  store %"any[]" %"$$temp461", ptr %indirectarg462, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg457, ptr align 8 %indirectarg458, ptr align 8 %indirectarg459, i32 330, ptr align 8 %indirectarg462) #5, !dbg !1387
  unreachable, !dbg !1387

panic468:                                         ; preds = %checkok463
  store %"char[]" { ptr @.panic_msg.159, i64 42 }, ptr %indirectarg469, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg470, align 8
  store %"char[]" { ptr @.func.150, i64 11 }, ptr %indirectarg471, align 8
  %994 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %994(ptr align 8 %indirectarg469, ptr align 8 %indirectarg470, ptr align 8 %indirectarg471, i32 331) #5, !dbg !1388
  unreachable, !dbg !1388

panic473:                                         ; preds = %checkok472
  store i64 4, ptr %taddr474, align 8
  %995 = insertvalue %any undef, ptr %taddr474, 0
  %996 = insertvalue %any %995, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %327, ptr %taddr475, align 8
  %997 = insertvalue %any undef, ptr %taddr475, 0
  %998 = insertvalue %any %997, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg476, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg477, align 8
  store %"char[]" { ptr @.func.150, i64 11 }, ptr %indirectarg478, align 8
  store %any %996, ptr %varargslots479, align 16
  %ptradd480 = getelementptr inbounds i8, ptr %varargslots479, i64 16
  store %any %998, ptr %ptradd480, align 16
  %999 = insertvalue %"any[]" undef, ptr %varargslots479, 0
  %"$$temp481" = insertvalue %"any[]" %999, i64 2, 1
  store %"any[]" %"$$temp481", ptr %indirectarg482, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg476, ptr align 8 %indirectarg477, ptr align 8 %indirectarg478, i32 331, ptr align 8 %indirectarg482) #5, !dbg !1388
  unreachable, !dbg !1388

panic491:                                         ; preds = %if.then488
  store %"char[]" { ptr @.panic_msg.160, i64 44 }, ptr %indirectarg492, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg493, align 8
  store %"char[]" { ptr @.func.150, i64 11 }, ptr %indirectarg494, align 8
  %1000 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %1000(ptr align 8 %indirectarg492, ptr align 8 %indirectarg493, ptr align 8 %indirectarg494, i32 334) #5, !dbg !1390
  unreachable, !dbg !1390

panic496:                                         ; preds = %checkok495
  store i64 4, ptr %taddr497, align 8
  %1001 = insertvalue %any undef, ptr %taddr497, 0
  %1002 = insertvalue %any %1001, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %336, ptr %taddr498, align 8
  %1003 = insertvalue %any undef, ptr %taddr498, 0
  %1004 = insertvalue %any %1003, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg499, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg500, align 8
  store %"char[]" { ptr @.func.150, i64 11 }, ptr %indirectarg501, align 8
  store %any %1002, ptr %varargslots502, align 16
  %ptradd503 = getelementptr inbounds i8, ptr %varargslots502, i64 16
  store %any %1004, ptr %ptradd503, align 16
  %1005 = insertvalue %"any[]" undef, ptr %varargslots502, 0
  %"$$temp504" = insertvalue %"any[]" %1005, i64 2, 1
  store %"any[]" %"$$temp504", ptr %indirectarg505, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg499, ptr align 8 %indirectarg500, ptr align 8 %indirectarg501, i32 334, ptr align 8 %indirectarg505) #5, !dbg !1390
  unreachable, !dbg !1390

panic512:                                         ; preds = %and.rhs510
  store i64 4, ptr %taddr513, align 8
  %1006 = insertvalue %any undef, ptr %taddr513, 0
  %1007 = insertvalue %any %1006, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %344, ptr %taddr514, align 8
  %1008 = insertvalue %any undef, ptr %taddr514, 0
  %1009 = insertvalue %any %1008, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg515, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg516, align 8
  store %"char[]" { ptr @.func.150, i64 11 }, ptr %indirectarg517, align 8
  store %any %1007, ptr %varargslots518, align 16
  %ptradd519 = getelementptr inbounds i8, ptr %varargslots518, i64 16
  store %any %1009, ptr %ptradd519, align 16
  %1010 = insertvalue %"any[]" undef, ptr %varargslots518, 0
  %"$$temp520" = insertvalue %"any[]" %1010, i64 2, 1
  store %"any[]" %"$$temp520", ptr %indirectarg521, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg515, ptr align 8 %indirectarg516, ptr align 8 %indirectarg517, i32 335, ptr align 8 %indirectarg521) #5, !dbg !1392
  unreachable, !dbg !1392

panic548:                                         ; preds = %loop.body546
  store %"char[]" { ptr @.panic_msg.159, i64 42 }, ptr %indirectarg549, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg550, align 8
  store %"char[]" { ptr @.func.150, i64 11 }, ptr %indirectarg551, align 8
  %1011 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %1011(ptr align 8 %indirectarg549, ptr align 8 %indirectarg550, ptr align 8 %indirectarg551, i32 348) #5, !dbg !1414
  unreachable, !dbg !1414

panic553:                                         ; preds = %checkok552
  store i64 4, ptr %taddr554, align 8
  %1012 = insertvalue %any undef, ptr %taddr554, 0
  %1013 = insertvalue %any %1012, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %363, ptr %taddr555, align 8
  %1014 = insertvalue %any undef, ptr %taddr555, 0
  %1015 = insertvalue %any %1014, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg556, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg557, align 8
  store %"char[]" { ptr @.func.150, i64 11 }, ptr %indirectarg558, align 8
  store %any %1013, ptr %varargslots559, align 16
  %ptradd560 = getelementptr inbounds i8, ptr %varargslots559, i64 16
  store %any %1015, ptr %ptradd560, align 16
  %1016 = insertvalue %"any[]" undef, ptr %varargslots559, 0
  %"$$temp561" = insertvalue %"any[]" %1016, i64 2, 1
  store %"any[]" %"$$temp561", ptr %indirectarg562, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg556, ptr align 8 %indirectarg557, ptr align 8 %indirectarg558, i32 348, ptr align 8 %indirectarg562) #5, !dbg !1414
  unreachable, !dbg !1414

panic564:                                         ; preds = %checkok563
  store i32 %367, ptr %taddr565, align 4
  %1017 = insertvalue %any undef, ptr %taddr565, 0
  %1018 = insertvalue %any %1017, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 35 }, ptr %indirectarg566, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg567, align 8
  store %"char[]" { ptr @.func.150, i64 11 }, ptr %indirectarg568, align 8
  store %any %1018, ptr %varargslots569, align 16
  %1019 = insertvalue %"any[]" undef, ptr %varargslots569, 0
  %"$$temp570" = insertvalue %"any[]" %1019, i64 1, 1
  store %"any[]" %"$$temp570", ptr %indirectarg571, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg566, ptr align 8 %indirectarg567, ptr align 8 %indirectarg568, i32 348, ptr align 8 %indirectarg571) #5, !dbg !1414
  unreachable, !dbg !1414

panic574:                                         ; preds = %checkok572
  store i32 %367, ptr %taddr575, align 4
  %1020 = insertvalue %any undef, ptr %taddr575, 0
  %1021 = insertvalue %any %1020, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 35 }, ptr %indirectarg576, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg577, align 8
  store %"char[]" { ptr @.func.150, i64 11 }, ptr %indirectarg578, align 8
  store %any %1021, ptr %varargslots579, align 16
  %1022 = insertvalue %"any[]" undef, ptr %varargslots579, 0
  %"$$temp580" = insertvalue %"any[]" %1022, i64 1, 1
  store %"any[]" %"$$temp580", ptr %indirectarg581, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg576, ptr align 8 %indirectarg577, ptr align 8 %indirectarg578, i32 348, ptr align 8 %indirectarg581) #5, !dbg !1414
  unreachable, !dbg !1414

panic587:                                         ; preds = %checkok582
  store %"char[]" { ptr @.panic_msg.159, i64 42 }, ptr %indirectarg588, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg589, align 8
  store %"char[]" { ptr @.func.150, i64 11 }, ptr %indirectarg590, align 8
  %1023 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %1023(ptr align 8 %indirectarg588, ptr align 8 %indirectarg589, ptr align 8 %indirectarg590, i32 349) #5, !dbg !1415
  unreachable, !dbg !1415

panic592:                                         ; preds = %checkok591
  store i64 4, ptr %taddr593, align 8
  %1024 = insertvalue %any undef, ptr %taddr593, 0
  %1025 = insertvalue %any %1024, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %374, ptr %taddr594, align 8
  %1026 = insertvalue %any undef, ptr %taddr594, 0
  %1027 = insertvalue %any %1026, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg595, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg596, align 8
  store %"char[]" { ptr @.func.150, i64 11 }, ptr %indirectarg597, align 8
  store %any %1025, ptr %varargslots598, align 16
  %ptradd599 = getelementptr inbounds i8, ptr %varargslots598, i64 16
  store %any %1027, ptr %ptradd599, align 16
  %1028 = insertvalue %"any[]" undef, ptr %varargslots598, 0
  %"$$temp600" = insertvalue %"any[]" %1028, i64 2, 1
  store %"any[]" %"$$temp600", ptr %indirectarg601, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg595, ptr align 8 %indirectarg596, ptr align 8 %indirectarg597, i32 349, ptr align 8 %indirectarg601) #5, !dbg !1415
  unreachable, !dbg !1415

panic604:                                         ; preds = %checkok602
  store i32 %378, ptr %taddr605, align 4
  %1029 = insertvalue %any undef, ptr %taddr605, 0
  %1030 = insertvalue %any %1029, i64 ptrtoint (ptr @"$ct.uint" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 35 }, ptr %indirectarg606, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg607, align 8
  store %"char[]" { ptr @.func.150, i64 11 }, ptr %indirectarg608, align 8
  store %any %1030, ptr %varargslots609, align 16
  %1031 = insertvalue %"any[]" undef, ptr %varargslots609, 0
  %"$$temp610" = insertvalue %"any[]" %1031, i64 1, 1
  store %"any[]" %"$$temp610", ptr %indirectarg611, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg606, ptr align 8 %indirectarg607, ptr align 8 %indirectarg608, i32 349, ptr align 8 %indirectarg611) #5, !dbg !1415
  unreachable, !dbg !1415

panic616:                                         ; preds = %checkok612
  store %"char[]" { ptr @.panic_msg.159, i64 42 }, ptr %indirectarg617, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg618, align 8
  store %"char[]" { ptr @.func.150, i64 11 }, ptr %indirectarg619, align 8
  %1032 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %1032(ptr align 8 %indirectarg617, ptr align 8 %indirectarg618, ptr align 8 %indirectarg619, i32 349) #5, !dbg !1415
  unreachable, !dbg !1415

panic621:                                         ; preds = %checkok620
  store i64 4, ptr %taddr622, align 8
  %1033 = insertvalue %any undef, ptr %taddr622, 0
  %1034 = insertvalue %any %1033, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %385, ptr %taddr623, align 8
  %1035 = insertvalue %any undef, ptr %taddr623, 0
  %1036 = insertvalue %any %1035, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg624, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg625, align 8
  store %"char[]" { ptr @.func.150, i64 11 }, ptr %indirectarg626, align 8
  store %any %1034, ptr %varargslots627, align 16
  %ptradd628 = getelementptr inbounds i8, ptr %varargslots627, i64 16
  store %any %1036, ptr %ptradd628, align 16
  %1037 = insertvalue %"any[]" undef, ptr %varargslots627, 0
  %"$$temp629" = insertvalue %"any[]" %1037, i64 2, 1
  store %"any[]" %"$$temp629", ptr %indirectarg630, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg624, ptr align 8 %indirectarg625, ptr align 8 %indirectarg626, i32 349, ptr align 8 %indirectarg630) #5, !dbg !1415
  unreachable, !dbg !1415

panic633:                                         ; preds = %checkok631
  store i32 %388, ptr %taddr634, align 4
  %1038 = insertvalue %any undef, ptr %taddr634, 0
  %1039 = insertvalue %any %1038, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 35 }, ptr %indirectarg635, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg636, align 8
  store %"char[]" { ptr @.func.150, i64 11 }, ptr %indirectarg637, align 8
  store %any %1039, ptr %varargslots638, align 16
  %1040 = insertvalue %"any[]" undef, ptr %varargslots638, 0
  %"$$temp639" = insertvalue %"any[]" %1040, i64 1, 1
  store %"any[]" %"$$temp639", ptr %indirectarg640, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg635, ptr align 8 %indirectarg636, ptr align 8 %indirectarg637, i32 350, ptr align 8 %indirectarg640) #5, !dbg !1416
  unreachable, !dbg !1416

panic643:                                         ; preds = %checkok641
  store i32 %388, ptr %taddr644, align 4
  %1041 = insertvalue %any undef, ptr %taddr644, 0
  %1042 = insertvalue %any %1041, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 35 }, ptr %indirectarg645, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg646, align 8
  store %"char[]" { ptr @.func.150, i64 11 }, ptr %indirectarg647, align 8
  store %any %1042, ptr %varargslots648, align 16
  %1043 = insertvalue %"any[]" undef, ptr %varargslots648, 0
  %"$$temp649" = insertvalue %"any[]" %1043, i64 1, 1
  store %"any[]" %"$$temp649", ptr %indirectarg650, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg645, ptr align 8 %indirectarg646, ptr align 8 %indirectarg647, i32 350, ptr align 8 %indirectarg650) #5, !dbg !1416
  unreachable, !dbg !1416

panic654:                                         ; preds = %loop.exit653
  store i64 4, ptr %taddr655, align 8
  %1044 = insertvalue %any undef, ptr %taddr655, 0
  %1045 = insertvalue %any %1044, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %396, ptr %taddr656, align 8
  %1046 = insertvalue %any undef, ptr %taddr656, 0
  %1047 = insertvalue %any %1046, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg657, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg658, align 8
  store %"char[]" { ptr @.func.150, i64 11 }, ptr %indirectarg659, align 8
  store %any %1045, ptr %varargslots660, align 16
  %ptradd661 = getelementptr inbounds i8, ptr %varargslots660, i64 16
  store %any %1047, ptr %ptradd661, align 16
  %1048 = insertvalue %"any[]" undef, ptr %varargslots660, 0
  %"$$temp662" = insertvalue %"any[]" %1048, i64 2, 1
  store %"any[]" %"$$temp662", ptr %indirectarg663, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg657, ptr align 8 %indirectarg658, ptr align 8 %indirectarg659, i32 352, ptr align 8 %indirectarg663) #5, !dbg !1417
  unreachable, !dbg !1417

panic672:                                         ; preds = %if.then670
  store i64 4, ptr %taddr673, align 8
  %1049 = insertvalue %any undef, ptr %taddr673, 0
  %1050 = insertvalue %any %1049, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %404, ptr %taddr674, align 8
  %1051 = insertvalue %any undef, ptr %taddr674, 0
  %1052 = insertvalue %any %1051, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg675, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg676, align 8
  store %"char[]" { ptr @.func.150, i64 11 }, ptr %indirectarg677, align 8
  store %any %1050, ptr %varargslots678, align 16
  %ptradd679 = getelementptr inbounds i8, ptr %varargslots678, i64 16
  store %any %1052, ptr %ptradd679, align 16
  %1053 = insertvalue %"any[]" undef, ptr %varargslots678, 0
  %"$$temp680" = insertvalue %"any[]" %1053, i64 2, 1
  store %"any[]" %"$$temp680", ptr %indirectarg681, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg675, ptr align 8 %indirectarg676, ptr align 8 %indirectarg677, i32 353, ptr align 8 %indirectarg681) #5, !dbg !1418
  unreachable, !dbg !1418

panic703:                                         ; preds = %loop.cond701
  store %"char[]" { ptr @.panic_msg.161, i64 42 }, ptr %indirectarg704, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg705, align 8
  store %"char[]" { ptr @.func.150, i64 11 }, ptr %indirectarg706, align 8
  %1054 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %1054(ptr align 8 %indirectarg704, ptr align 8 %indirectarg705, ptr align 8 %indirectarg706, i32 363) #5, !dbg !1428
  unreachable, !dbg !1428

panic708:                                         ; preds = %checkok707
  store i64 4, ptr %taddr709, align 8
  %1055 = insertvalue %any undef, ptr %taddr709, 0
  %1056 = insertvalue %any %1055, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %433, ptr %taddr710, align 8
  %1057 = insertvalue %any undef, ptr %taddr710, 0
  %1058 = insertvalue %any %1057, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg711, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg712, align 8
  store %"char[]" { ptr @.func.150, i64 11 }, ptr %indirectarg713, align 8
  store %any %1056, ptr %varargslots714, align 16
  %ptradd715 = getelementptr inbounds i8, ptr %varargslots714, i64 16
  store %any %1058, ptr %ptradd715, align 16
  %1059 = insertvalue %"any[]" undef, ptr %varargslots714, 0
  %"$$temp716" = insertvalue %"any[]" %1059, i64 2, 1
  store %"any[]" %"$$temp716", ptr %indirectarg717, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg711, ptr align 8 %indirectarg712, ptr align 8 %indirectarg713, i32 363, ptr align 8 %indirectarg717) #5, !dbg !1428
  unreachable, !dbg !1428

panic763:                                         ; preds = %loop.exit761
  store %"char[]" { ptr @.panic_msg.159, i64 42 }, ptr %indirectarg764, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg765, align 8
  store %"char[]" { ptr @.func.150, i64 11 }, ptr %indirectarg766, align 8
  %1060 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %1060(ptr align 8 %indirectarg764, ptr align 8 %indirectarg765, ptr align 8 %indirectarg766, i32 377) #5, !dbg !1443
  unreachable, !dbg !1443

panic768:                                         ; preds = %checkok767
  store i64 4, ptr %taddr769, align 8
  %1061 = insertvalue %any undef, ptr %taddr769, 0
  %1062 = insertvalue %any %1061, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %463, ptr %taddr770, align 8
  %1063 = insertvalue %any undef, ptr %taddr770, 0
  %1064 = insertvalue %any %1063, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg771, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg772, align 8
  store %"char[]" { ptr @.func.150, i64 11 }, ptr %indirectarg773, align 8
  store %any %1062, ptr %varargslots774, align 16
  %ptradd775 = getelementptr inbounds i8, ptr %varargslots774, i64 16
  store %any %1064, ptr %ptradd775, align 16
  %1065 = insertvalue %"any[]" undef, ptr %varargslots774, 0
  %"$$temp776" = insertvalue %"any[]" %1065, i64 2, 1
  store %"any[]" %"$$temp776", ptr %indirectarg777, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg771, ptr align 8 %indirectarg772, ptr align 8 %indirectarg773, i32 377, ptr align 8 %indirectarg777) #5, !dbg !1443
  unreachable, !dbg !1443

panic779:                                         ; preds = %checkok778
  store %"char[]" { ptr @.panic_msg.162, i64 10 }, ptr %indirectarg780, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg781, align 8
  store %"char[]" { ptr @.func.150, i64 11 }, ptr %indirectarg782, align 8
  %1066 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %1066(ptr align 8 %indirectarg780, ptr align 8 %indirectarg781, ptr align 8 %indirectarg782, i32 377) #5, !dbg !1443
  unreachable, !dbg !1443

panic794:                                         ; preds = %if.then791
  store %"char[]" { ptr @.panic_msg.159, i64 42 }, ptr %indirectarg795, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg796, align 8
  store %"char[]" { ptr @.func.150, i64 11 }, ptr %indirectarg797, align 8
  %1067 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %1067(ptr align 8 %indirectarg795, ptr align 8 %indirectarg796, ptr align 8 %indirectarg797, i32 383) #5, !dbg !1450
  unreachable, !dbg !1450

panic799:                                         ; preds = %checkok798
  store i64 4, ptr %taddr800, align 8
  %1068 = insertvalue %any undef, ptr %taddr800, 0
  %1069 = insertvalue %any %1068, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %475, ptr %taddr801, align 8
  %1070 = insertvalue %any undef, ptr %taddr801, 0
  %1071 = insertvalue %any %1070, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg802, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg803, align 8
  store %"char[]" { ptr @.func.150, i64 11 }, ptr %indirectarg804, align 8
  store %any %1069, ptr %varargslots805, align 16
  %ptradd806 = getelementptr inbounds i8, ptr %varargslots805, i64 16
  store %any %1071, ptr %ptradd806, align 16
  %1072 = insertvalue %"any[]" undef, ptr %varargslots805, 0
  %"$$temp807" = insertvalue %"any[]" %1072, i64 2, 1
  store %"any[]" %"$$temp807", ptr %indirectarg808, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg802, ptr align 8 %indirectarg803, ptr align 8 %indirectarg804, i32 383, ptr align 8 %indirectarg808) #5, !dbg !1450
  unreachable, !dbg !1450

panic811:                                         ; preds = %checkok809
  store %"char[]" { ptr @.panic_msg.163, i64 17 }, ptr %indirectarg812, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg813, align 8
  store %"char[]" { ptr @.func.150, i64 11 }, ptr %indirectarg814, align 8
  %1073 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %1073(ptr align 8 %indirectarg812, ptr align 8 %indirectarg813, ptr align 8 %indirectarg814, i32 383) #5, !dbg !1450
  unreachable, !dbg !1450

panic827:                                         ; preds = %and.rhs825
  store i64 4, ptr %taddr828, align 8
  %1074 = insertvalue %any undef, ptr %taddr828, 0
  %1075 = insertvalue %any %1074, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %486, ptr %taddr829, align 8
  %1076 = insertvalue %any undef, ptr %taddr829, 0
  %1077 = insertvalue %any %1076, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg830, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg831, align 8
  store %"char[]" { ptr @.func.150, i64 11 }, ptr %indirectarg832, align 8
  store %any %1075, ptr %varargslots833, align 16
  %ptradd834 = getelementptr inbounds i8, ptr %varargslots833, i64 16
  store %any %1077, ptr %ptradd834, align 16
  %1078 = insertvalue %"any[]" undef, ptr %varargslots833, 0
  %"$$temp835" = insertvalue %"any[]" %1078, i64 2, 1
  store %"any[]" %"$$temp835", ptr %indirectarg836, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg830, ptr align 8 %indirectarg831, ptr align 8 %indirectarg832, i32 383, ptr align 8 %indirectarg836) #5, !dbg !1450
  unreachable, !dbg !1450

panic871:                                         ; preds = %if.exit869
  store %"char[]" { ptr @.panic_msg.159, i64 42 }, ptr %indirectarg872, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg873, align 8
  store %"char[]" { ptr @.func.150, i64 11 }, ptr %indirectarg874, align 8
  %1079 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %1079(ptr align 8 %indirectarg872, ptr align 8 %indirectarg873, ptr align 8 %indirectarg874, i32 401) #5, !dbg !1466
  unreachable, !dbg !1466

panic876:                                         ; preds = %checkok875
  store i64 4, ptr %taddr877, align 8
  %1080 = insertvalue %any undef, ptr %taddr877, 0
  %1081 = insertvalue %any %1080, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %507, ptr %taddr878, align 8
  %1082 = insertvalue %any undef, ptr %taddr878, 0
  %1083 = insertvalue %any %1082, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg879, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg880, align 8
  store %"char[]" { ptr @.func.150, i64 11 }, ptr %indirectarg881, align 8
  store %any %1081, ptr %varargslots882, align 16
  %ptradd883 = getelementptr inbounds i8, ptr %varargslots882, i64 16
  store %any %1083, ptr %ptradd883, align 16
  %1084 = insertvalue %"any[]" undef, ptr %varargslots882, 0
  %"$$temp884" = insertvalue %"any[]" %1084, i64 2, 1
  store %"any[]" %"$$temp884", ptr %indirectarg885, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg879, ptr align 8 %indirectarg880, ptr align 8 %indirectarg881, i32 401, ptr align 8 %indirectarg885) #5, !dbg !1466
  unreachable, !dbg !1466

panic892:                                         ; preds = %if.then890
  store %"char[]" { ptr @.panic_msg.159, i64 42 }, ptr %indirectarg893, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg894, align 8
  store %"char[]" { ptr @.func.150, i64 11 }, ptr %indirectarg895, align 8
  %1085 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %1085(ptr align 8 %indirectarg893, ptr align 8 %indirectarg894, ptr align 8 %indirectarg895, i32 405) #5, !dbg !1468
  unreachable, !dbg !1468

panic897:                                         ; preds = %checkok896
  store i64 4, ptr %taddr898, align 8
  %1086 = insertvalue %any undef, ptr %taddr898, 0
  %1087 = insertvalue %any %1086, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %518, ptr %taddr899, align 8
  %1088 = insertvalue %any undef, ptr %taddr899, 0
  %1089 = insertvalue %any %1088, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg900, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg901, align 8
  store %"char[]" { ptr @.func.150, i64 11 }, ptr %indirectarg902, align 8
  store %any %1087, ptr %varargslots903, align 16
  %ptradd904 = getelementptr inbounds i8, ptr %varargslots903, i64 16
  store %any %1089, ptr %ptradd904, align 16
  %1090 = insertvalue %"any[]" undef, ptr %varargslots903, 0
  %"$$temp905" = insertvalue %"any[]" %1090, i64 2, 1
  store %"any[]" %"$$temp905", ptr %indirectarg906, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg900, ptr align 8 %indirectarg901, ptr align 8 %indirectarg902, i32 405, ptr align 8 %indirectarg906) #5, !dbg !1468
  unreachable, !dbg !1468

panic910:                                         ; preds = %checkok907
  store %"char[]" { ptr @.panic_msg.159, i64 42 }, ptr %indirectarg911, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg912, align 8
  store %"char[]" { ptr @.func.150, i64 11 }, ptr %indirectarg913, align 8
  %1091 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %1091(ptr align 8 %indirectarg911, ptr align 8 %indirectarg912, ptr align 8 %indirectarg913, i32 405) #5, !dbg !1468
  unreachable, !dbg !1468

panic915:                                         ; preds = %checkok914
  store i64 4, ptr %taddr916, align 8
  %1092 = insertvalue %any undef, ptr %taddr916, 0
  %1093 = insertvalue %any %1092, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %526, ptr %taddr917, align 8
  %1094 = insertvalue %any undef, ptr %taddr917, 0
  %1095 = insertvalue %any %1094, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg918, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg919, align 8
  store %"char[]" { ptr @.func.150, i64 11 }, ptr %indirectarg920, align 8
  store %any %1093, ptr %varargslots921, align 16
  %ptradd922 = getelementptr inbounds i8, ptr %varargslots921, i64 16
  store %any %1095, ptr %ptradd922, align 16
  %1096 = insertvalue %"any[]" undef, ptr %varargslots921, 0
  %"$$temp923" = insertvalue %"any[]" %1096, i64 2, 1
  store %"any[]" %"$$temp923", ptr %indirectarg924, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg918, ptr align 8 %indirectarg919, ptr align 8 %indirectarg920, i32 405, ptr align 8 %indirectarg924) #5, !dbg !1468
  unreachable, !dbg !1468

panic928:                                         ; preds = %loop.cond926
  store %"char[]" { ptr @.panic_msg.159, i64 42 }, ptr %indirectarg929, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg930, align 8
  store %"char[]" { ptr @.func.150, i64 11 }, ptr %indirectarg931, align 8
  %1097 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %1097(ptr align 8 %indirectarg929, ptr align 8 %indirectarg930, ptr align 8 %indirectarg931, i32 406) #5, !dbg !1471
  unreachable, !dbg !1471

panic933:                                         ; preds = %checkok932
  store i64 4, ptr %taddr934, align 8
  %1098 = insertvalue %any undef, ptr %taddr934, 0
  %1099 = insertvalue %any %1098, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %532, ptr %taddr935, align 8
  %1100 = insertvalue %any undef, ptr %taddr935, 0
  %1101 = insertvalue %any %1100, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg936, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg937, align 8
  store %"char[]" { ptr @.func.150, i64 11 }, ptr %indirectarg938, align 8
  store %any %1099, ptr %varargslots939, align 16
  %ptradd940 = getelementptr inbounds i8, ptr %varargslots939, i64 16
  store %any %1101, ptr %ptradd940, align 16
  %1102 = insertvalue %"any[]" undef, ptr %varargslots939, 0
  %"$$temp941" = insertvalue %"any[]" %1102, i64 2, 1
  store %"any[]" %"$$temp941", ptr %indirectarg942, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg936, ptr align 8 %indirectarg937, ptr align 8 %indirectarg938, i32 406, ptr align 8 %indirectarg942) #5, !dbg !1471
  unreachable, !dbg !1471

panic948:                                         ; preds = %loop.body945
  store %"char[]" { ptr @.panic_msg.164, i64 44 }, ptr %indirectarg949, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg950, align 8
  store %"char[]" { ptr @.func.150, i64 11 }, ptr %indirectarg951, align 8
  %1103 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %1103(ptr align 8 %indirectarg949, ptr align 8 %indirectarg950, ptr align 8 %indirectarg951, i32 408) #5, !dbg !1473
  unreachable, !dbg !1473

panic953:                                         ; preds = %checkok952
  store i64 4, ptr %taddr954, align 8
  %1104 = insertvalue %any undef, ptr %taddr954, 0
  %1105 = insertvalue %any %1104, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %539, ptr %taddr955, align 8
  %1106 = insertvalue %any undef, ptr %taddr955, 0
  %1107 = insertvalue %any %1106, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg956, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg957, align 8
  store %"char[]" { ptr @.func.150, i64 11 }, ptr %indirectarg958, align 8
  store %any %1105, ptr %varargslots959, align 16
  %ptradd960 = getelementptr inbounds i8, ptr %varargslots959, i64 16
  store %any %1107, ptr %ptradd960, align 16
  %1108 = insertvalue %"any[]" undef, ptr %varargslots959, 0
  %"$$temp961" = insertvalue %"any[]" %1108, i64 2, 1
  store %"any[]" %"$$temp961", ptr %indirectarg962, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg956, ptr align 8 %indirectarg957, ptr align 8 %indirectarg958, i32 408, ptr align 8 %indirectarg962) #5, !dbg !1473
  unreachable, !dbg !1473

panic968:                                         ; preds = %if.then965
  store %"char[]" { ptr @.panic_msg.160, i64 44 }, ptr %indirectarg969, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg970, align 8
  store %"char[]" { ptr @.func.150, i64 11 }, ptr %indirectarg971, align 8
  %1109 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %1109(ptr align 8 %indirectarg969, ptr align 8 %indirectarg970, ptr align 8 %indirectarg971, i32 409) #5, !dbg !1475
  unreachable, !dbg !1475

panic973:                                         ; preds = %checkok972
  store i64 4, ptr %taddr974, align 8
  %1110 = insertvalue %any undef, ptr %taddr974, 0
  %1111 = insertvalue %any %1110, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %547, ptr %taddr975, align 8
  %1112 = insertvalue %any undef, ptr %taddr975, 0
  %1113 = insertvalue %any %1112, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg976, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg977, align 8
  store %"char[]" { ptr @.func.150, i64 11 }, ptr %indirectarg978, align 8
  store %any %1111, ptr %varargslots979, align 16
  %ptradd980 = getelementptr inbounds i8, ptr %varargslots979, i64 16
  store %any %1113, ptr %ptradd980, align 16
  %1114 = insertvalue %"any[]" undef, ptr %varargslots979, 0
  %"$$temp981" = insertvalue %"any[]" %1114, i64 2, 1
  store %"any[]" %"$$temp981", ptr %indirectarg982, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg976, ptr align 8 %indirectarg977, ptr align 8 %indirectarg978, i32 409, ptr align 8 %indirectarg982) #5, !dbg !1475
  unreachable, !dbg !1475

panic986:                                         ; preds = %if.exit984
  store %"char[]" { ptr @.panic_msg.159, i64 42 }, ptr %indirectarg987, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg988, align 8
  store %"char[]" { ptr @.func.150, i64 11 }, ptr %indirectarg989, align 8
  %1115 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %1115(ptr align 8 %indirectarg987, ptr align 8 %indirectarg988, ptr align 8 %indirectarg989, i32 410) #5, !dbg !1476
  unreachable, !dbg !1476

panic991:                                         ; preds = %checkok990
  store i64 4, ptr %taddr992, align 8
  %1116 = insertvalue %any undef, ptr %taddr992, 0
  %1117 = insertvalue %any %1116, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %553, ptr %taddr993, align 8
  %1118 = insertvalue %any undef, ptr %taddr993, 0
  %1119 = insertvalue %any %1118, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg994, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg995, align 8
  store %"char[]" { ptr @.func.150, i64 11 }, ptr %indirectarg996, align 8
  store %any %1117, ptr %varargslots997, align 16
  %ptradd998 = getelementptr inbounds i8, ptr %varargslots997, i64 16
  store %any %1119, ptr %ptradd998, align 16
  %1120 = insertvalue %"any[]" undef, ptr %varargslots997, 0
  %"$$temp999" = insertvalue %"any[]" %1120, i64 2, 1
  store %"any[]" %"$$temp999", ptr %indirectarg1000, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg994, ptr align 8 %indirectarg995, ptr align 8 %indirectarg996, i32 410, ptr align 8 %indirectarg1000) #5, !dbg !1476
  unreachable, !dbg !1476

panic1008:                                        ; preds = %loop.cond1006
  store %"char[]" { ptr @.panic_msg.161, i64 42 }, ptr %indirectarg1009, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg1010, align 8
  store %"char[]" { ptr @.func.150, i64 11 }, ptr %indirectarg1011, align 8
  %1121 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %1121(ptr align 8 %indirectarg1009, ptr align 8 %indirectarg1010, ptr align 8 %indirectarg1011, i32 412) #5, !dbg !1477
  unreachable, !dbg !1477

panic1013:                                        ; preds = %checkok1012
  store i64 4, ptr %taddr1014, align 8
  %1122 = insertvalue %any undef, ptr %taddr1014, 0
  %1123 = insertvalue %any %1122, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %566, ptr %taddr1015, align 8
  %1124 = insertvalue %any undef, ptr %taddr1015, 0
  %1125 = insertvalue %any %1124, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg1016, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg1017, align 8
  store %"char[]" { ptr @.func.150, i64 11 }, ptr %indirectarg1018, align 8
  store %any %1123, ptr %varargslots1019, align 16
  %ptradd1020 = getelementptr inbounds i8, ptr %varargslots1019, i64 16
  store %any %1125, ptr %ptradd1020, align 16
  %1126 = insertvalue %"any[]" undef, ptr %varargslots1019, 0
  %"$$temp1021" = insertvalue %"any[]" %1126, i64 2, 1
  store %"any[]" %"$$temp1021", ptr %indirectarg1022, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1016, ptr align 8 %indirectarg1017, ptr align 8 %indirectarg1018, i32 412, ptr align 8 %indirectarg1022) #5, !dbg !1477
  unreachable, !dbg !1477

panic1043:                                        ; preds = %and.rhs1041
  store i64 4, ptr %taddr1044, align 8
  %1127 = insertvalue %any undef, ptr %taddr1044, 0
  %1128 = insertvalue %any %1127, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %580, ptr %taddr1045, align 8
  %1129 = insertvalue %any undef, ptr %taddr1045, 0
  %1130 = insertvalue %any %1129, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg1046, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg1047, align 8
  store %"char[]" { ptr @.func.150, i64 11 }, ptr %indirectarg1048, align 8
  store %any %1128, ptr %varargslots1049, align 16
  %ptradd1050 = getelementptr inbounds i8, ptr %varargslots1049, i64 16
  store %any %1130, ptr %ptradd1050, align 16
  %1131 = insertvalue %"any[]" undef, ptr %varargslots1049, 0
  %"$$temp1051" = insertvalue %"any[]" %1131, i64 2, 1
  store %"any[]" %"$$temp1051", ptr %indirectarg1052, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1046, ptr align 8 %indirectarg1047, ptr align 8 %indirectarg1048, i32 417, ptr align 8 %indirectarg1052) #5, !dbg !1481
  unreachable, !dbg !1481

panic1086:                                        ; preds = %and.rhs1084
  store i64 4, ptr %taddr1087, align 8
  %1132 = insertvalue %any undef, ptr %taddr1087, 0
  %1133 = insertvalue %any %1132, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %602, ptr %taddr1088, align 8
  %1134 = insertvalue %any undef, ptr %taddr1088, 0
  %1135 = insertvalue %any %1134, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg1089, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg1090, align 8
  store %"char[]" { ptr @.func.150, i64 11 }, ptr %indirectarg1091, align 8
  store %any %1133, ptr %varargslots1092, align 16
  %ptradd1093 = getelementptr inbounds i8, ptr %varargslots1092, i64 16
  store %any %1135, ptr %ptradd1093, align 16
  %1136 = insertvalue %"any[]" undef, ptr %varargslots1092, 0
  %"$$temp1094" = insertvalue %"any[]" %1136, i64 2, 1
  store %"any[]" %"$$temp1094", ptr %indirectarg1095, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1089, ptr align 8 %indirectarg1090, ptr align 8 %indirectarg1091, i32 435, ptr align 8 %indirectarg1095) #5, !dbg !1494
  unreachable, !dbg !1494

panic1104:                                        ; preds = %loop.cond1102
  store i64 4, ptr %taddr1105, align 8
  %1137 = insertvalue %any undef, ptr %taddr1105, 0
  %1138 = insertvalue %any %1137, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %608, ptr %taddr1106, align 8
  %1139 = insertvalue %any undef, ptr %taddr1106, 0
  %1140 = insertvalue %any %1139, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg1107, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg1108, align 8
  store %"char[]" { ptr @.func.150, i64 11 }, ptr %indirectarg1109, align 8
  store %any %1138, ptr %varargslots1110, align 16
  %ptradd1111 = getelementptr inbounds i8, ptr %varargslots1110, i64 16
  store %any %1140, ptr %ptradd1111, align 16
  %1141 = insertvalue %"any[]" undef, ptr %varargslots1110, 0
  %"$$temp1112" = insertvalue %"any[]" %1141, i64 2, 1
  store %"any[]" %"$$temp1112", ptr %indirectarg1113, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1107, ptr align 8 %indirectarg1108, ptr align 8 %indirectarg1109, i32 437, ptr align 8 %indirectarg1113) #5, !dbg !1499
  unreachable, !dbg !1499

panic1116:                                        ; preds = %checkok1114
  store %"char[]" { ptr @.panic_msg.162, i64 10 }, ptr %indirectarg1117, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg1118, align 8
  store %"char[]" { ptr @.func.150, i64 11 }, ptr %indirectarg1119, align 8
  %1142 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %1142(ptr align 8 %indirectarg1117, ptr align 8 %indirectarg1118, ptr align 8 %indirectarg1119, i32 437) #5, !dbg !1499
  unreachable, !dbg !1499

panic1206:                                        ; preds = %loop.exit1201
  store %"char[]" { ptr @.panic_msg.155, i64 47 }, ptr %indirectarg1207, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg1208, align 8
  store %"char[]" { ptr @.func.150, i64 11 }, ptr %indirectarg1209, align 8
  %1143 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %1143(ptr align 8 %indirectarg1207, ptr align 8 %indirectarg1208, ptr align 8 %indirectarg1209, i32 466) #5, !dbg !1529
  unreachable, !dbg !1529

panic1217:                                        ; preds = %checkok1210
  store %"char[]" { ptr @.panic_msg.155, i64 47 }, ptr %indirectarg1218, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg1219, align 8
  store %"char[]" { ptr @.func.150, i64 11 }, ptr %indirectarg1220, align 8
  %1144 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %1144(ptr align 8 %indirectarg1218, ptr align 8 %indirectarg1219, ptr align 8 %indirectarg1220, i32 467) #5, !dbg !1530
  unreachable, !dbg !1530

panic1306:                                        ; preds = %loop.body1303
  store %"char[]" { ptr @.panic_msg.159, i64 42 }, ptr %indirectarg1307, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg1308, align 8
  store %"char[]" { ptr @.func.150, i64 11 }, ptr %indirectarg1309, align 8
  %1145 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %1145(ptr align 8 %indirectarg1307, ptr align 8 %indirectarg1308, ptr align 8 %indirectarg1309, i32 482) #5, !dbg !1549
  unreachable, !dbg !1549

panic1311:                                        ; preds = %checkok1310
  store i64 4, ptr %taddr1312, align 8
  %1146 = insertvalue %any undef, ptr %taddr1312, 0
  %1147 = insertvalue %any %1146, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %757, ptr %taddr1313, align 8
  %1148 = insertvalue %any undef, ptr %taddr1313, 0
  %1149 = insertvalue %any %1148, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg1314, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg1315, align 8
  store %"char[]" { ptr @.func.150, i64 11 }, ptr %indirectarg1316, align 8
  store %any %1147, ptr %varargslots1317, align 16
  %ptradd1318 = getelementptr inbounds i8, ptr %varargslots1317, i64 16
  store %any %1149, ptr %ptradd1318, align 16
  %1150 = insertvalue %"any[]" undef, ptr %varargslots1317, 0
  %"$$temp1319" = insertvalue %"any[]" %1150, i64 2, 1
  store %"any[]" %"$$temp1319", ptr %indirectarg1320, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1314, ptr align 8 %indirectarg1315, ptr align 8 %indirectarg1316, i32 482, ptr align 8 %indirectarg1320) #5, !dbg !1549
  unreachable, !dbg !1549

panic1342:                                        ; preds = %switch.case1339
  store %"char[]" { ptr @.panic_msg.134, i64 44 }, ptr %indirectarg1343, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg1344, align 8
  store %"char[]" { ptr @.func.150, i64 11 }, ptr %indirectarg1345, align 8
  %1151 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %1151(ptr align 8 %indirectarg1343, ptr align 8 %indirectarg1344, ptr align 8 %indirectarg1345, i32 488) #5, !dbg !1557
  unreachable, !dbg !1557

panic1354:                                        ; preds = %switch.exit1348
  store i64 %sub1353, ptr %taddr1355, align 8
  %1152 = insertvalue %any undef, ptr %taddr1355, 0
  %1153 = insertvalue %any %1152, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.16, i64 43 }, ptr %indirectarg1356, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg1357, align 8
  store %"char[]" { ptr @.func.150, i64 11 }, ptr %indirectarg1358, align 8
  store %any %1153, ptr %varargslots1359, align 16
  %1154 = insertvalue %"any[]" undef, ptr %varargslots1359, 0
  %"$$temp1360" = insertvalue %"any[]" %1154, i64 1, 1
  store %"any[]" %"$$temp1360", ptr %indirectarg1361, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1356, ptr align 8 %indirectarg1357, ptr align 8 %indirectarg1358, i32 490, ptr align 8 %indirectarg1361) #5, !dbg !1559
  unreachable, !dbg !1559

panic1400:                                        ; preds = %loop.body1397
  store %"char[]" { ptr @.panic_msg.159, i64 42 }, ptr %indirectarg1401, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg1402, align 8
  store %"char[]" { ptr @.func.150, i64 11 }, ptr %indirectarg1403, align 8
  %1155 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %1155(ptr align 8 %indirectarg1401, ptr align 8 %indirectarg1402, ptr align 8 %indirectarg1403, i32 495) #5, !dbg !1566
  unreachable, !dbg !1566

panic1405:                                        ; preds = %checkok1404
  store i64 4, ptr %taddr1406, align 8
  %1156 = insertvalue %any undef, ptr %taddr1406, 0
  %1157 = insertvalue %any %1156, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %808, ptr %taddr1407, align 8
  %1158 = insertvalue %any undef, ptr %taddr1407, 0
  %1159 = insertvalue %any %1158, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg1408, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg1409, align 8
  store %"char[]" { ptr @.func.150, i64 11 }, ptr %indirectarg1410, align 8
  store %any %1157, ptr %varargslots1411, align 16
  %ptradd1412 = getelementptr inbounds i8, ptr %varargslots1411, i64 16
  store %any %1159, ptr %ptradd1412, align 16
  %1160 = insertvalue %"any[]" undef, ptr %varargslots1411, 0
  %"$$temp1413" = insertvalue %"any[]" %1160, i64 2, 1
  store %"any[]" %"$$temp1413", ptr %indirectarg1414, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1408, ptr align 8 %indirectarg1409, ptr align 8 %indirectarg1410, i32 495, ptr align 8 %indirectarg1414) #5, !dbg !1566
  unreachable, !dbg !1566

panic1424:                                        ; preds = %loop.body1421
  store %"char[]" { ptr @.panic_msg.134, i64 44 }, ptr %indirectarg1425, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg1426, align 8
  store %"char[]" { ptr @.func.150, i64 11 }, ptr %indirectarg1427, align 8
  %1161 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %1161(ptr align 8 %indirectarg1425, ptr align 8 %indirectarg1426, ptr align 8 %indirectarg1427, i32 496) #5, !dbg !1568
  unreachable, !dbg !1568

panic1436:                                        ; preds = %loop.exit1429
  store i64 %sub1435, ptr %taddr1437, align 8
  %1162 = insertvalue %any undef, ptr %taddr1437, 0
  %1163 = insertvalue %any %1162, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.16, i64 43 }, ptr %indirectarg1438, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg1439, align 8
  store %"char[]" { ptr @.func.150, i64 11 }, ptr %indirectarg1440, align 8
  store %any %1163, ptr %varargslots1441, align 16
  %1164 = insertvalue %"any[]" undef, ptr %varargslots1441, 0
  %"$$temp1442" = insertvalue %"any[]" %1164, i64 1, 1
  store %"any[]" %"$$temp1442", ptr %indirectarg1443, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1438, ptr align 8 %indirectarg1439, ptr align 8 %indirectarg1440, i32 497, ptr align 8 %indirectarg1443) #5, !dbg !1570
  unreachable, !dbg !1570

panic1481:                                        ; preds = %loop.body1478
  store %"char[]" { ptr @.panic_msg.159, i64 42 }, ptr %indirectarg1482, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg1483, align 8
  store %"char[]" { ptr @.func.150, i64 11 }, ptr %indirectarg1484, align 8
  %1165 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %1165(ptr align 8 %indirectarg1482, ptr align 8 %indirectarg1483, ptr align 8 %indirectarg1484, i32 506) #5, !dbg !1581
  unreachable, !dbg !1581

panic1486:                                        ; preds = %checkok1485
  store i64 4, ptr %taddr1487, align 8
  %1166 = insertvalue %any undef, ptr %taddr1487, 0
  %1167 = insertvalue %any %1166, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %851, ptr %taddr1488, align 8
  %1168 = insertvalue %any undef, ptr %taddr1488, 0
  %1169 = insertvalue %any %1168, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg1489, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg1490, align 8
  store %"char[]" { ptr @.func.150, i64 11 }, ptr %indirectarg1491, align 8
  store %any %1167, ptr %varargslots1492, align 16
  %ptradd1493 = getelementptr inbounds i8, ptr %varargslots1492, i64 16
  store %any %1169, ptr %ptradd1493, align 16
  %1170 = insertvalue %"any[]" undef, ptr %varargslots1492, 0
  %"$$temp1494" = insertvalue %"any[]" %1170, i64 2, 1
  store %"any[]" %"$$temp1494", ptr %indirectarg1495, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1489, ptr align 8 %indirectarg1490, ptr align 8 %indirectarg1491, i32 506, ptr align 8 %indirectarg1495) #5, !dbg !1581
  unreachable, !dbg !1581

panic1547:                                        ; preds = %if.exit1539
  store i64 %sub1546, ptr %taddr1548, align 8
  %1171 = insertvalue %any undef, ptr %taddr1548, 0
  %1172 = insertvalue %any %1171, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.16, i64 43 }, ptr %indirectarg1549, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg1550, align 8
  store %"char[]" { ptr @.func.150, i64 11 }, ptr %indirectarg1551, align 8
  store %any %1172, ptr %varargslots1552, align 16
  %1173 = insertvalue %"any[]" undef, ptr %varargslots1552, 0
  %"$$temp1553" = insertvalue %"any[]" %1173, i64 1, 1
  store %"any[]" %"$$temp1553", ptr %indirectarg1554, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1549, ptr align 8 %indirectarg1550, ptr align 8 %indirectarg1551, i32 517, ptr align 8 %indirectarg1554) #5, !dbg !1591
  unreachable, !dbg !1591

panic1582:                                        ; preds = %noerr_block1576
  store i64 %sub1581, ptr %taddr1583, align 8
  %1174 = insertvalue %any undef, ptr %taddr1583, 0
  %1175 = insertvalue %any %1174, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.16, i64 43 }, ptr %indirectarg1584, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg1585, align 8
  store %"char[]" { ptr @.func.150, i64 11 }, ptr %indirectarg1586, align 8
  store %any %1175, ptr %varargslots1587, align 16
  %1176 = insertvalue %"any[]" undef, ptr %varargslots1587, 0
  %"$$temp1588" = insertvalue %"any[]" %1176, i64 1, 1
  store %"any[]" %"$$temp1588", ptr %indirectarg1589, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1584, ptr align 8 %indirectarg1585, ptr align 8 %indirectarg1586, i32 521, ptr align 8 %indirectarg1589) #5, !dbg !1596
  unreachable, !dbg !1596
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @std.io.Formatter.ntoa(ptr %0, ptr %1, ptr align 16 %2, i8 zeroext %3, i32 %4) #0 !dbg !1599 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %negative = alloca i8, align 1
  %base = alloca i32, align 4
  %buf = alloca [256 x i8], align 16
  %len = alloca i64, align 8
  %past_10 = alloca i8, align 1
  %digit = alloca i8, align 1
  %indirectarg14 = alloca %"char[]", align 8
  %indirectarg15 = alloca %"char[]", align 8
  %indirectarg16 = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr26 = alloca i64, align 8
  %indirectarg27 = alloca %"char[]", align 8
  %indirectarg28 = alloca %"char[]", align 8
  %indirectarg29 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg31 = alloca %"any[]", align 8
  %indirectarg37 = alloca %"char[]", align 8
  %indirectarg38 = alloca %"char[]", align 8
  %indirectarg39 = alloca %"char[]", align 8
  %reterr = alloca i64, align 8
  %retparam = alloca i64, align 8
  %indirectarg42 = alloca %"char[]", align 8
  %5 = icmp eq ptr %1, null, !dbg !1602
  %6 = call i1 @llvm.expect.i1(i1 %5, i1 false), !dbg !1602
  br i1 %6, label %panic, label %checkok, !dbg !1602

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !1603, !DIExpression(), !1604)
    #dbg_declare(ptr %2, !1605, !DIExpression(), !1604)
  store i8 %3, ptr %negative, align 1
    #dbg_declare(ptr %negative, !1606, !DIExpression(), !1604)
  store i32 %4, ptr %base, align 4
    #dbg_declare(ptr %base, !1607, !DIExpression(), !1604)
    #dbg_declare(ptr %buf, !1608, !DIExpression(), !1612)
    #dbg_declare(ptr %len, !1613, !DIExpression(), !1614)
  store i64 0, ptr %len, align 8, !dbg !1614
  %7 = load i128, ptr %2, align 16, !dbg !1615
  %i2nb = icmp eq i128 %7, 0, !dbg !1615
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !1615

if.then:                                          ; preds = %checkok
  %8 = load ptr, ptr %self, align 8, !dbg !1615
  %ptradd = getelementptr inbounds i8, ptr %8, i64 16, !dbg !1615
  %9 = load i32, ptr %ptradd, align 8, !dbg !1615
  %10 = and i32 %9, -17, !dbg !1615
  store i32 %10, ptr %ptradd, align 8, !dbg !1615
  br label %if.exit, !dbg !1615

if.exit:                                          ; preds = %if.then, %checkok
  %11 = load ptr, ptr %self, align 8, !dbg !1616
  %ptradd3 = getelementptr inbounds i8, ptr %11, i64 16, !dbg !1616
  %12 = load i32, ptr %ptradd3, align 8, !dbg !1616
  %lshrl = lshr i32 %12, 6, !dbg !1616
  %13 = and i32 1, %lshrl, !dbg !1616
  %trunc = trunc i32 %13 to i8, !dbg !1616
  %14 = trunc i8 %trunc to i1, !dbg !1616
  %not = xor i1 %14, true, !dbg !1616
  br i1 %not, label %or.phi, label %or.rhs, !dbg !1616

or.rhs:                                           ; preds = %if.exit
  %15 = load i128, ptr %2, align 16, !dbg !1616
  %i2b = icmp ne i128 %15, 0, !dbg !1616
  br label %or.phi, !dbg !1616

or.phi:                                           ; preds = %or.rhs, %if.exit
  %val = phi i1 [ true, %if.exit ], [ %i2b, %or.rhs ], !dbg !1616
  br i1 %val, label %if.then4, label %if.exit41, !dbg !1616

if.then4:                                         ; preds = %or.phi
    #dbg_declare(ptr %past_10, !1617, !DIExpression(), !1619)
  %16 = load ptr, ptr %self, align 8, !dbg !1619
  %ptradd5 = getelementptr inbounds i8, ptr %16, i64 16, !dbg !1619
  %17 = load i32, ptr %ptradd5, align 8, !dbg !1619
  %lshrl6 = lshr i32 %17, 5, !dbg !1619
  %18 = and i32 1, %lshrl6, !dbg !1619
  %trunc7 = trunc i32 %18 to i8, !dbg !1619
  %19 = trunc i8 %trunc7 to i1, !dbg !1619
  %ternary = select i1 %19, i8 65, i8 97, !dbg !1619
  %zext = zext i8 %ternary to i32, !dbg !1619
  %sub = sub i32 %zext, 10, !dbg !1619
  %trunc8 = trunc i32 %sub to i8, !dbg !1619
  store i8 %trunc8, ptr %past_10, align 1, !dbg !1619
  br label %loop.body, !dbg !1620

loop.cond:                                        ; preds = %checkok40
  %20 = load i128, ptr %2, align 16, !dbg !1621
  %i2b9 = icmp ne i128 %20, 0, !dbg !1621
  br i1 %i2b9, label %loop.body, label %loop.exit, !dbg !1621

loop.body:                                        ; preds = %loop.cond, %if.then4
  %21 = load i64, ptr %len, align 8, !dbg !1623
  %le = icmp ule i64 256, %21, !dbg !1623
  br i1 %le, label %if.then10, label %if.exit11, !dbg !1623

if.then10:                                        ; preds = %loop.body
  ret i64 ptrtoint (ptr @std.io.INTERNAL_BUFFER_EXCEEDED to i64), !dbg !1623

if.exit11:                                        ; preds = %loop.body
    #dbg_declare(ptr %digit, !1625, !DIExpression(), !1626)
  %22 = load i128, ptr %2, align 16, !dbg !1626
  %23 = load i32, ptr %base, align 4, !dbg !1626
  %zext12 = zext i32 %23 to i128, !dbg !1626
  %zero = icmp eq i128 %zext12, 0, !dbg !1626
  %24 = call i1 @llvm.expect.i1(i1 %zero, i1 false), !dbg !1626
  br i1 %24, label %panic13, label %checkok17, !dbg !1626

checkok17:                                        ; preds = %if.exit11
  %umod = urem i128 %22, %zext12, !dbg !1626
  %trunc18 = trunc i128 %umod to i8, !dbg !1626
  store i8 %trunc18, ptr %digit, align 1, !dbg !1626
  %25 = load i8, ptr %digit, align 1, !dbg !1627
  %zext19 = zext i8 %25 to i32, !dbg !1627
  %26 = load i8, ptr %digit, align 1, !dbg !1627
  %zext20 = zext i8 %26 to i32, !dbg !1627
  %gt = icmp ugt i32 10, %zext20, !dbg !1627
  br i1 %gt, label %cond.lhs, label %cond.rhs, !dbg !1627

cond.lhs:                                         ; preds = %checkok17
  br label %cond.phi, !dbg !1627

cond.rhs:                                         ; preds = %checkok17
  %27 = load i8, ptr %past_10, align 1, !dbg !1627
  br label %cond.phi, !dbg !1627

cond.phi:                                         ; preds = %cond.rhs, %cond.lhs
  %val21 = phi i8 [ 48, %cond.lhs ], [ %27, %cond.rhs ], !dbg !1627
  %zext22 = zext i8 %val21 to i32, !dbg !1627
  %add = add i32 %zext19, %zext22, !dbg !1627
  %trunc23 = trunc i32 %add to i8, !dbg !1627
  %28 = load i64, ptr %len, align 8, !dbg !1627
  %add24 = add i64 %28, 1, !dbg !1627
  store i64 %add24, ptr %len, align 8, !dbg !1627
  %ge = icmp uge i64 %28, 256, !dbg !1627
  %29 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !1627
  br i1 %29, label %panic25, label %checkok32, !dbg !1627

checkok32:                                        ; preds = %cond.phi
  %ptradd33 = getelementptr inbounds i8, ptr %buf, i64 %28, !dbg !1627
  store i8 %trunc23, ptr %ptradd33, align 1, !dbg !1627
  %30 = load i128, ptr %2, align 16, !dbg !1628
  %31 = load i32, ptr %base, align 4, !dbg !1628
  %zext34 = zext i32 %31 to i128, !dbg !1628
  %zero35 = icmp eq i128 %zext34, 0, !dbg !1628
  %32 = call i1 @llvm.expect.i1(i1 %zero35, i1 false), !dbg !1628
  br i1 %32, label %panic36, label %checkok40, !dbg !1628

checkok40:                                        ; preds = %checkok32
  %udiv = udiv i128 %30, %zext34, !dbg !1628
  store i128 %udiv, ptr %2, align 16, !dbg !1628
  br label %loop.cond, !dbg !1628

loop.exit:                                        ; preds = %loop.cond
  br label %if.exit41, !dbg !1628

if.exit41:                                        ; preds = %loop.exit, %or.phi
  %33 = insertvalue %"char[]" undef, ptr %buf, 0, !dbg !1629
  %34 = insertvalue %"char[]" %33, i64 256, 1, !dbg !1629
  %35 = load ptr, ptr %self, align 8
  store %"char[]" %34, ptr %indirectarg42, align 8
  %36 = load i64, ptr %len, align 8
  %37 = load i8, ptr %negative, align 1
  %38 = load i32, ptr %base, align 4
  %39 = call i64 @std.io.Formatter.ntoa_format(ptr %retparam, ptr %35, ptr align 8 %indirectarg42, i64 %36, i8 zeroext %37, i32 %38), !dbg !1629
  %not_err = icmp eq i64 %39, 0, !dbg !1629
  %40 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1629
  br i1 %40, label %after_check, label %assign_optional, !dbg !1629

assign_optional:                                  ; preds = %if.exit41
  store i64 %39, ptr %reterr, align 8, !dbg !1629
  br label %err_retblock, !dbg !1629

after_check:                                      ; preds = %if.exit41
  %41 = load i64, ptr %retparam, align 8, !dbg !1629
  store i64 %41, ptr %0, align 8, !dbg !1629
  ret i64 0, !dbg !1629

err_retblock:                                     ; preds = %assign_optional
  %42 = load i64, ptr %reterr, align 8, !dbg !1629
  ret i64 %42, !dbg !1629

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.165, i64 4 }, ptr %indirectarg2, align 8
  %43 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %43(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 529) #5, !dbg !1604
  unreachable, !dbg !1604

panic13:                                          ; preds = %if.exit11
  store %"char[]" { ptr @.panic_msg.162, i64 10 }, ptr %indirectarg14, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg15, align 8
  store %"char[]" { ptr @.func.165, i64 4 }, ptr %indirectarg16, align 8
  %44 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %44(ptr align 8 %indirectarg14, ptr align 8 %indirectarg15, ptr align 8 %indirectarg16, i32 544) #5, !dbg !1626
  unreachable, !dbg !1626

panic25:                                          ; preds = %cond.phi
  store i64 256, ptr %taddr, align 8
  %45 = insertvalue %any undef, ptr %taddr, 0
  %46 = insertvalue %any %45, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %28, ptr %taddr26, align 8
  %47 = insertvalue %any undef, ptr %taddr26, 0
  %48 = insertvalue %any %47, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.71, i64 59 }, ptr %indirectarg27, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg28, align 8
  store %"char[]" { ptr @.func.165, i64 4 }, ptr %indirectarg29, align 8
  store %any %46, ptr %varargslots, align 16
  %ptradd30 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %48, ptr %ptradd30, align 16
  %49 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %49, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg31, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg27, ptr align 8 %indirectarg28, ptr align 8 %indirectarg29, i32 545, ptr align 8 %indirectarg31) #5, !dbg !1627
  unreachable, !dbg !1627

panic36:                                          ; preds = %checkok32
  store %"char[]" { ptr @.panic_msg.163, i64 17 }, ptr %indirectarg37, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg38, align 8
  store %"char[]" { ptr @.func.165, i64 4 }, ptr %indirectarg39, align 8
  %50 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %50(ptr align 8 %indirectarg37, ptr align 8 %indirectarg38, ptr align 8 %indirectarg39, i32 546) #5, !dbg !1628
  unreachable, !dbg !1628
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @std.io.Formatter.ntoa_format(ptr %0, ptr %1, ptr align 8 %2, i64 %3, i8 zeroext %4, i32 %5) #0 !dbg !1630 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %len = alloca i64, align 8
  %negative = alloca i8, align 1
  %base = alloca i32, align 4
  %taddr = alloca i64, align 8
  %taddr30 = alloca i64, align 8
  %indirectarg31 = alloca %"char[]", align 8
  %indirectarg32 = alloca %"char[]", align 8
  %indirectarg33 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg35 = alloca %"any[]", align 8
  %taddr57 = alloca i64, align 8
  %taddr58 = alloca i64, align 8
  %indirectarg59 = alloca %"char[]", align 8
  %indirectarg60 = alloca %"char[]", align 8
  %indirectarg61 = alloca %"char[]", align 8
  %varargslots62 = alloca [2 x %any], align 16
  %indirectarg65 = alloca %"any[]", align 8
  %switch = alloca i32, align 4
  %taddr118 = alloca i64, align 8
  %taddr119 = alloca i64, align 8
  %indirectarg120 = alloca %"char[]", align 8
  %indirectarg121 = alloca %"char[]", align 8
  %indirectarg122 = alloca %"char[]", align 8
  %varargslots123 = alloca [2 x %any], align 16
  %indirectarg126 = alloca %"any[]", align 8
  %taddr138 = alloca i64, align 8
  %taddr139 = alloca i64, align 8
  %indirectarg140 = alloca %"char[]", align 8
  %indirectarg141 = alloca %"char[]", align 8
  %indirectarg142 = alloca %"char[]", align 8
  %varargslots143 = alloca [2 x %any], align 16
  %indirectarg146 = alloca %"any[]", align 8
  %taddr158 = alloca i64, align 8
  %taddr159 = alloca i64, align 8
  %indirectarg160 = alloca %"char[]", align 8
  %indirectarg161 = alloca %"char[]", align 8
  %indirectarg162 = alloca %"char[]", align 8
  %varargslots163 = alloca [2 x %any], align 16
  %indirectarg166 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg169 = alloca %"char[]", align 8
  %indirectarg170 = alloca %"char[]", align 8
  %indirectarg171 = alloca %"char[]", align 8
  %indirectarg172 = alloca %"any[]", align 8
  %taddr177 = alloca i64, align 8
  %taddr178 = alloca i64, align 8
  %indirectarg179 = alloca %"char[]", align 8
  %indirectarg180 = alloca %"char[]", align 8
  %indirectarg181 = alloca %"char[]", align 8
  %varargslots182 = alloca [2 x %any], align 16
  %indirectarg185 = alloca %"any[]", align 8
  %switch190 = alloca i8, align 1
  %taddr202 = alloca i64, align 8
  %taddr203 = alloca i64, align 8
  %indirectarg204 = alloca %"char[]", align 8
  %indirectarg205 = alloca %"char[]", align 8
  %indirectarg206 = alloca %"char[]", align 8
  %varargslots207 = alloca [2 x %any], align 16
  %indirectarg210 = alloca %"any[]", align 8
  %taddr226 = alloca i64, align 8
  %taddr227 = alloca i64, align 8
  %indirectarg228 = alloca %"char[]", align 8
  %indirectarg229 = alloca %"char[]", align 8
  %indirectarg230 = alloca %"char[]", align 8
  %varargslots231 = alloca [2 x %any], align 16
  %indirectarg234 = alloca %"any[]", align 8
  %taddr251 = alloca i64, align 8
  %taddr252 = alloca i64, align 8
  %indirectarg253 = alloca %"char[]", align 8
  %indirectarg254 = alloca %"char[]", align 8
  %indirectarg255 = alloca %"char[]", align 8
  %varargslots256 = alloca [2 x %any], align 16
  %indirectarg259 = alloca %"any[]", align 8
  %error_var = alloca i64, align 8
  %taddr267 = alloca i64, align 8
  %taddr268 = alloca i64, align 8
  %indirectarg269 = alloca %"char[]", align 8
  %indirectarg270 = alloca %"char[]", align 8
  %indirectarg271 = alloca %"char[]", align 8
  %varargslots272 = alloca [2 x %any], align 16
  %indirectarg275 = alloca %"any[]", align 8
  %taddr281 = alloca i64, align 8
  %indirectarg282 = alloca %"char[]", align 8
  %indirectarg283 = alloca %"char[]", align 8
  %indirectarg284 = alloca %"char[]", align 8
  %varargslots285 = alloca [1 x %any], align 16
  %indirectarg287 = alloca %"any[]", align 8
  %taddr292 = alloca i64, align 8
  %taddr293 = alloca i64, align 8
  %indirectarg294 = alloca %"char[]", align 8
  %indirectarg295 = alloca %"char[]", align 8
  %indirectarg296 = alloca %"char[]", align 8
  %varargslots297 = alloca [2 x %any], align 16
  %indirectarg300 = alloca %"any[]", align 8
  %retparam = alloca i64, align 8
  %indirectarg302 = alloca %"char[]", align 8
  %reterr = alloca i64, align 8
  %6 = icmp eq ptr %1, null, !dbg !1633
  %7 = call i1 @llvm.expect.i1(i1 %6, i1 false), !dbg !1633
  br i1 %7, label %panic, label %checkok, !dbg !1633

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !1634, !DIExpression(), !1635)
    #dbg_declare(ptr %2, !1636, !DIExpression(), !1635)
  store i64 %3, ptr %len, align 8
    #dbg_declare(ptr %len, !1637, !DIExpression(), !1635)
  store i8 %4, ptr %negative, align 1
    #dbg_declare(ptr %negative, !1638, !DIExpression(), !1635)
  store i32 %5, ptr %base, align 4
    #dbg_declare(ptr %base, !1639, !DIExpression(), !1635)
  %8 = load ptr, ptr %self, align 8, !dbg !1640
  %ptradd = getelementptr inbounds i8, ptr %8, i64 16, !dbg !1640
  %9 = load i32, ptr %ptradd, align 8, !dbg !1640
  %lshrl = lshr i32 %9, 1, !dbg !1640
  %10 = and i32 1, %lshrl, !dbg !1640
  %trunc = trunc i32 %10 to i8, !dbg !1640
  %11 = trunc i8 %trunc to i1, !dbg !1640
  br i1 %11, label %if.exit69, label %if.else, !dbg !1640

if.else:                                          ; preds = %checkok
  %12 = load ptr, ptr %self, align 8, !dbg !1641
  %ptradd3 = getelementptr inbounds i8, ptr %12, i64 16, !dbg !1641
  %ptradd4 = getelementptr inbounds i8, ptr %ptradd3, i64 4, !dbg !1641
  %13 = load i32, ptr %ptradd4, align 4, !dbg !1641
  %i2b = icmp ne i32 %13, 0, !dbg !1641
  br i1 %i2b, label %and.rhs, label %and.phi, !dbg !1641

and.rhs:                                          ; preds = %if.else
  %14 = load ptr, ptr %self, align 8, !dbg !1641
  %ptradd5 = getelementptr inbounds i8, ptr %14, i64 16, !dbg !1641
  %15 = load i32, ptr %ptradd5, align 8, !dbg !1641
  %16 = and i32 1, %15, !dbg !1641
  %trunc6 = trunc i32 %16 to i8, !dbg !1641
  %17 = trunc i8 %trunc6 to i1, !dbg !1641
  br label %and.phi, !dbg !1641

and.phi:                                          ; preds = %and.rhs, %if.else
  %val = phi i1 [ false, %if.else ], [ %17, %and.rhs ], !dbg !1641
  br i1 %val, label %and.rhs7, label %and.phi18, !dbg !1641

and.rhs7:                                         ; preds = %and.phi
  %18 = load i8, ptr %negative, align 1, !dbg !1641
  %19 = trunc i8 %18 to i1, !dbg !1641
  br i1 %19, label %or.phi, label %or.rhs, !dbg !1641

or.rhs:                                           ; preds = %and.rhs7
  %20 = load ptr, ptr %self, align 8, !dbg !1641
  %ptradd8 = getelementptr inbounds i8, ptr %20, i64 16, !dbg !1641
  %21 = load i32, ptr %ptradd8, align 8, !dbg !1641
  %lshrl9 = lshr i32 %21, 2, !dbg !1641
  %22 = and i32 1, %lshrl9, !dbg !1641
  %trunc10 = trunc i32 %22 to i8, !dbg !1641
  %23 = trunc i8 %trunc10 to i1, !dbg !1641
  br label %or.phi, !dbg !1641

or.phi:                                           ; preds = %or.rhs, %and.rhs7
  %val11 = phi i1 [ true, %and.rhs7 ], [ %23, %or.rhs ], !dbg !1641
  br i1 %val11, label %or.phi16, label %or.rhs12, !dbg !1641

or.rhs12:                                         ; preds = %or.phi
  %24 = load ptr, ptr %self, align 8, !dbg !1641
  %ptradd13 = getelementptr inbounds i8, ptr %24, i64 16, !dbg !1641
  %25 = load i32, ptr %ptradd13, align 8, !dbg !1641
  %lshrl14 = lshr i32 %25, 3, !dbg !1641
  %26 = and i32 1, %lshrl14, !dbg !1641
  %trunc15 = trunc i32 %26 to i8, !dbg !1641
  %27 = trunc i8 %trunc15 to i1, !dbg !1641
  br label %or.phi16, !dbg !1641

or.phi16:                                         ; preds = %or.rhs12, %or.phi
  %val17 = phi i1 [ true, %or.phi ], [ %27, %or.rhs12 ], !dbg !1641
  br label %and.phi18, !dbg !1641

and.phi18:                                        ; preds = %or.phi16, %and.phi
  %val19 = phi i1 [ false, %and.phi ], [ %val17, %or.phi16 ], !dbg !1641
  br i1 %val19, label %if.then, label %if.exit, !dbg !1641

if.then:                                          ; preds = %and.phi18
  %28 = load ptr, ptr %self, align 8, !dbg !1641
  %ptradd20 = getelementptr inbounds i8, ptr %28, i64 16, !dbg !1641
  %ptradd21 = getelementptr inbounds i8, ptr %ptradd20, i64 4, !dbg !1641
  %29 = load i32, ptr %ptradd21, align 4, !dbg !1641
  %sub = sub i32 %29, 1, !dbg !1641
  store i32 %sub, ptr %ptradd21, align 4, !dbg !1641
  br label %if.exit, !dbg !1641

if.exit:                                          ; preds = %if.then, %and.phi18
  br label %loop.cond, !dbg !1643

loop.cond:                                        ; preds = %checkok36, %if.exit
  %30 = load i64, ptr %len, align 8, !dbg !1644
  %31 = load ptr, ptr %self, align 8, !dbg !1644
  %ptradd22 = getelementptr inbounds i8, ptr %31, i64 16, !dbg !1644
  %ptradd23 = getelementptr inbounds i8, ptr %ptradd22, i64 8, !dbg !1644
  %32 = load i32, ptr %ptradd23, align 8, !dbg !1644
  %zext = zext i32 %32 to i64, !dbg !1644
  %lt = icmp ult i64 %30, %zext, !dbg !1644
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !1644

loop.body:                                        ; preds = %loop.cond
  %33 = load i64, ptr %len, align 8, !dbg !1646
  %ptradd24 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !1646
  %34 = load i64, ptr %ptradd24, align 8, !dbg !1646
  %ge = icmp uge i64 %33, %34, !dbg !1646
  br i1 %ge, label %if.then25, label %if.exit26, !dbg !1646

if.then25:                                        ; preds = %loop.body
  ret i64 ptrtoint (ptr @std.io.INTERNAL_BUFFER_EXCEEDED to i64), !dbg !1646

if.exit26:                                        ; preds = %loop.body
  %ptradd27 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !1648
  %35 = load i64, ptr %ptradd27, align 8, !dbg !1648
  %36 = load ptr, ptr %2, align 8, !dbg !1648
  %37 = load i64, ptr %len, align 8, !dbg !1648
  %add = add i64 %37, 1, !dbg !1648
  store i64 %add, ptr %len, align 8, !dbg !1648
  %ge28 = icmp uge i64 %37, %35, !dbg !1648
  %38 = call i1 @llvm.expect.i1(i1 %ge28, i1 false), !dbg !1648
  br i1 %38, label %panic29, label %checkok36, !dbg !1648

checkok36:                                        ; preds = %if.exit26
  %ptradd37 = getelementptr inbounds i8, ptr %36, i64 %37, !dbg !1648
  store i8 48, ptr %ptradd37, align 1, !dbg !1648
  br label %loop.cond, !dbg !1648

loop.exit:                                        ; preds = %loop.cond
  br label %loop.cond38, !dbg !1649

loop.cond38:                                      ; preds = %checkok66, %loop.exit
  %39 = load ptr, ptr %self, align 8, !dbg !1650
  %ptradd39 = getelementptr inbounds i8, ptr %39, i64 16, !dbg !1650
  %40 = load i32, ptr %ptradd39, align 8, !dbg !1650
  %41 = and i32 1, %40, !dbg !1650
  %trunc40 = trunc i32 %41 to i8, !dbg !1650
  %42 = trunc i8 %trunc40 to i1, !dbg !1650
  br i1 %42, label %and.rhs41, label %and.phi46, !dbg !1650

and.rhs41:                                        ; preds = %loop.cond38
  %43 = load i64, ptr %len, align 8, !dbg !1650
  %44 = load ptr, ptr %self, align 8, !dbg !1650
  %ptradd42 = getelementptr inbounds i8, ptr %44, i64 16, !dbg !1650
  %ptradd43 = getelementptr inbounds i8, ptr %ptradd42, i64 4, !dbg !1650
  %45 = load i32, ptr %ptradd43, align 4, !dbg !1650
  %zext44 = zext i32 %45 to i64, !dbg !1650
  %lt45 = icmp ult i64 %43, %zext44, !dbg !1650
  br label %and.phi46, !dbg !1650

and.phi46:                                        ; preds = %and.rhs41, %loop.cond38
  %val47 = phi i1 [ false, %loop.cond38 ], [ %lt45, %and.rhs41 ], !dbg !1650
  br i1 %val47, label %loop.body48, label %loop.exit68, !dbg !1650

loop.body48:                                      ; preds = %and.phi46
  %46 = load i64, ptr %len, align 8, !dbg !1652
  %ptradd49 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !1652
  %47 = load i64, ptr %ptradd49, align 8, !dbg !1652
  %ge50 = icmp uge i64 %46, %47, !dbg !1652
  br i1 %ge50, label %if.then51, label %if.exit52, !dbg !1652

if.then51:                                        ; preds = %loop.body48
  ret i64 ptrtoint (ptr @std.io.INTERNAL_BUFFER_EXCEEDED to i64), !dbg !1652

if.exit52:                                        ; preds = %loop.body48
  %ptradd53 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !1654
  %48 = load i64, ptr %ptradd53, align 8, !dbg !1654
  %49 = load ptr, ptr %2, align 8, !dbg !1654
  %50 = load i64, ptr %len, align 8, !dbg !1654
  %add54 = add i64 %50, 1, !dbg !1654
  store i64 %add54, ptr %len, align 8, !dbg !1654
  %ge55 = icmp uge i64 %50, %48, !dbg !1654
  %51 = call i1 @llvm.expect.i1(i1 %ge55, i1 false), !dbg !1654
  br i1 %51, label %panic56, label %checkok66, !dbg !1654

checkok66:                                        ; preds = %if.exit52
  %ptradd67 = getelementptr inbounds i8, ptr %49, i64 %50, !dbg !1654
  store i8 48, ptr %ptradd67, align 1, !dbg !1654
  br label %loop.cond38, !dbg !1654

loop.exit68:                                      ; preds = %and.phi46
  br label %if.exit69, !dbg !1654

if.exit69:                                        ; preds = %loop.exit68, %checkok
  %52 = load ptr, ptr %self, align 8, !dbg !1655
  %ptradd70 = getelementptr inbounds i8, ptr %52, i64 16, !dbg !1655
  %53 = load i32, ptr %ptradd70, align 8, !dbg !1655
  %lshrl71 = lshr i32 %53, 4, !dbg !1655
  %54 = and i32 1, %lshrl71, !dbg !1655
  %trunc72 = trunc i32 %54 to i8, !dbg !1655
  %55 = trunc i8 %trunc72 to i1, !dbg !1655
  br i1 %55, label %and.rhs73, label %and.phi74, !dbg !1655

and.rhs73:                                        ; preds = %if.exit69
  %56 = load i32, ptr %base, align 4, !dbg !1655
  %neq = icmp ne i32 10, %56, !dbg !1655
  br label %and.phi74, !dbg !1655

and.phi74:                                        ; preds = %and.rhs73, %if.exit69
  %val75 = phi i1 [ false, %if.exit69 ], [ %neq, %and.rhs73 ], !dbg !1655
  br i1 %val75, label %if.then76, label %if.exit189, !dbg !1655

if.then76:                                        ; preds = %and.phi74
  %57 = load ptr, ptr %self, align 8, !dbg !1656
  %ptradd77 = getelementptr inbounds i8, ptr %57, i64 16, !dbg !1656
  %58 = load i32, ptr %ptradd77, align 8, !dbg !1656
  %lshrl78 = lshr i32 %58, 6, !dbg !1656
  %59 = and i32 1, %lshrl78, !dbg !1656
  %trunc79 = trunc i32 %59 to i8, !dbg !1656
  %60 = trunc i8 %trunc79 to i1, !dbg !1656
  %not = xor i1 %60, true, !dbg !1656
  br i1 %not, label %and.rhs80, label %and.phi82, !dbg !1656

and.rhs80:                                        ; preds = %if.then76
  %61 = load i64, ptr %len, align 8, !dbg !1656
  %i2b81 = icmp ne i64 %61, 0, !dbg !1656
  br label %and.phi82, !dbg !1656

and.phi82:                                        ; preds = %and.rhs80, %if.then76
  %val83 = phi i1 [ false, %if.then76 ], [ %i2b81, %and.rhs80 ], !dbg !1656
  br i1 %val83, label %and.rhs84, label %and.phi88, !dbg !1656

and.rhs84:                                        ; preds = %and.phi82
  %62 = load i64, ptr %len, align 8, !dbg !1656
  %63 = load ptr, ptr %self, align 8, !dbg !1656
  %ptradd85 = getelementptr inbounds i8, ptr %63, i64 16, !dbg !1656
  %ptradd86 = getelementptr inbounds i8, ptr %ptradd85, i64 8, !dbg !1656
  %64 = load i32, ptr %ptradd86, align 8, !dbg !1656
  %zext87 = zext i32 %64 to i64, !dbg !1656
  %eq = icmp eq i64 %62, %zext87, !dbg !1656
  br label %and.phi88, !dbg !1656

and.phi88:                                        ; preds = %and.rhs84, %and.phi82
  %val89 = phi i1 [ false, %and.phi82 ], [ %eq, %and.rhs84 ], !dbg !1656
  br i1 %val89, label %and.rhs90, label %and.phi95, !dbg !1656

and.rhs90:                                        ; preds = %and.phi88
  %65 = load i64, ptr %len, align 8, !dbg !1656
  %66 = load ptr, ptr %self, align 8, !dbg !1656
  %ptradd91 = getelementptr inbounds i8, ptr %66, i64 16, !dbg !1656
  %ptradd92 = getelementptr inbounds i8, ptr %ptradd91, i64 4, !dbg !1656
  %67 = load i32, ptr %ptradd92, align 4, !dbg !1656
  %zext93 = zext i32 %67 to i64, !dbg !1656
  %eq94 = icmp eq i64 %65, %zext93, !dbg !1656
  br label %and.phi95, !dbg !1656

and.phi95:                                        ; preds = %and.rhs90, %and.phi88
  %val96 = phi i1 [ false, %and.phi88 ], [ %eq94, %and.rhs90 ], !dbg !1656
  br i1 %val96, label %if.then97, label %if.exit103, !dbg !1656

if.then97:                                        ; preds = %and.phi95
  %68 = load i64, ptr %len, align 8, !dbg !1658
  %sub98 = sub i64 %68, 1, !dbg !1658
  store i64 %sub98, ptr %len, align 8, !dbg !1658
  %69 = load i64, ptr %len, align 8, !dbg !1660
  %i2b99 = icmp ne i64 %69, 0, !dbg !1660
  br i1 %i2b99, label %if.then100, label %if.exit102, !dbg !1660

if.then100:                                       ; preds = %if.then97
  %70 = load i64, ptr %len, align 8, !dbg !1660
  %sub101 = sub i64 %70, 1, !dbg !1660
  store i64 %sub101, ptr %len, align 8, !dbg !1660
  br label %if.exit102, !dbg !1660

if.exit102:                                       ; preds = %if.then100, %if.then97
  br label %if.exit103, !dbg !1660

if.exit103:                                       ; preds = %if.exit102, %and.phi95
  %71 = load i32, ptr %base, align 4, !dbg !1661
  %neq104 = icmp ne i32 10, %71, !dbg !1661
  br i1 %neq104, label %if.then105, label %if.exit188, !dbg !1661

if.then105:                                       ; preds = %if.exit103
  %72 = load i64, ptr %len, align 8, !dbg !1662
  %add106 = add i64 %72, 1, !dbg !1662
  %ptradd107 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !1662
  %73 = load i64, ptr %ptradd107, align 8, !dbg !1662
  %ge108 = icmp sge i64 %add106, %73, !dbg !1662
  %check = icmp sge i64 %73, 0, !dbg !1662
  %siui-ge = and i1 %check, %ge108, !dbg !1662
  br i1 %siui-ge, label %if.then109, label %if.exit110, !dbg !1662

if.then109:                                       ; preds = %if.then105
  ret i64 ptrtoint (ptr @std.io.INTERNAL_BUFFER_EXCEEDED to i64), !dbg !1662

if.exit110:                                       ; preds = %if.then105
  %74 = load i32, ptr %base, align 4
  store i32 %74, ptr %switch, align 4
  br label %switch.entry

switch.entry:                                     ; preds = %if.exit110
  %75 = load i32, ptr %switch, align 4
  switch i32 %75, label %switch.default [
    i32 16, label %switch.case
    i32 8, label %switch.case129
    i32 2, label %switch.case149
  ]

switch.case:                                      ; preds = %switch.entry
  %76 = load ptr, ptr %self, align 8, !dbg !1664
  %ptradd111 = getelementptr inbounds i8, ptr %76, i64 16, !dbg !1664
  %77 = load i32, ptr %ptradd111, align 8, !dbg !1664
  %lshrl112 = lshr i32 %77, 5, !dbg !1664
  %78 = and i32 1, %lshrl112, !dbg !1664
  %trunc113 = trunc i32 %78 to i8, !dbg !1664
  %79 = trunc i8 %trunc113 to i1, !dbg !1664
  %ternary = select i1 %79, i8 88, i8 120, !dbg !1664
  %ptradd114 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !1664
  %80 = load i64, ptr %ptradd114, align 8, !dbg !1664
  %81 = load ptr, ptr %2, align 8, !dbg !1664
  %82 = load i64, ptr %len, align 8, !dbg !1664
  %add115 = add i64 %82, 1, !dbg !1664
  store i64 %add115, ptr %len, align 8, !dbg !1664
  %ge116 = icmp uge i64 %82, %80, !dbg !1664
  %83 = call i1 @llvm.expect.i1(i1 %ge116, i1 false), !dbg !1664
  br i1 %83, label %panic117, label %checkok127, !dbg !1664

checkok127:                                       ; preds = %switch.case
  %ptradd128 = getelementptr inbounds i8, ptr %81, i64 %82, !dbg !1664
  store i8 %ternary, ptr %ptradd128, align 1, !dbg !1664
  br label %switch.exit, !dbg !1664

switch.case129:                                   ; preds = %switch.entry
  %84 = load ptr, ptr %self, align 8, !dbg !1667
  %ptradd130 = getelementptr inbounds i8, ptr %84, i64 16, !dbg !1667
  %85 = load i32, ptr %ptradd130, align 8, !dbg !1667
  %lshrl131 = lshr i32 %85, 5, !dbg !1667
  %86 = and i32 1, %lshrl131, !dbg !1667
  %trunc132 = trunc i32 %86 to i8, !dbg !1667
  %87 = trunc i8 %trunc132 to i1, !dbg !1667
  %ternary133 = select i1 %87, i8 79, i8 111, !dbg !1667
  %ptradd134 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !1667
  %88 = load i64, ptr %ptradd134, align 8, !dbg !1667
  %89 = load ptr, ptr %2, align 8, !dbg !1667
  %90 = load i64, ptr %len, align 8, !dbg !1667
  %add135 = add i64 %90, 1, !dbg !1667
  store i64 %add135, ptr %len, align 8, !dbg !1667
  %ge136 = icmp uge i64 %90, %88, !dbg !1667
  %91 = call i1 @llvm.expect.i1(i1 %ge136, i1 false), !dbg !1667
  br i1 %91, label %panic137, label %checkok147, !dbg !1667

checkok147:                                       ; preds = %switch.case129
  %ptradd148 = getelementptr inbounds i8, ptr %89, i64 %90, !dbg !1667
  store i8 %ternary133, ptr %ptradd148, align 1, !dbg !1667
  br label %switch.exit, !dbg !1667

switch.case149:                                   ; preds = %switch.entry
  %92 = load ptr, ptr %self, align 8, !dbg !1669
  %ptradd150 = getelementptr inbounds i8, ptr %92, i64 16, !dbg !1669
  %93 = load i32, ptr %ptradd150, align 8, !dbg !1669
  %lshrl151 = lshr i32 %93, 5, !dbg !1669
  %94 = and i32 1, %lshrl151, !dbg !1669
  %trunc152 = trunc i32 %94 to i8, !dbg !1669
  %95 = trunc i8 %trunc152 to i1, !dbg !1669
  %ternary153 = select i1 %95, i8 66, i8 98, !dbg !1669
  %ptradd154 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !1669
  %96 = load i64, ptr %ptradd154, align 8, !dbg !1669
  %97 = load ptr, ptr %2, align 8, !dbg !1669
  %98 = load i64, ptr %len, align 8, !dbg !1669
  %add155 = add i64 %98, 1, !dbg !1669
  store i64 %add155, ptr %len, align 8, !dbg !1669
  %ge156 = icmp uge i64 %98, %96, !dbg !1669
  %99 = call i1 @llvm.expect.i1(i1 %ge156, i1 false), !dbg !1669
  br i1 %99, label %panic157, label %checkok167, !dbg !1669

checkok167:                                       ; preds = %switch.case149
  %ptradd168 = getelementptr inbounds i8, ptr %97, i64 %98, !dbg !1669
  store i8 %ternary153, ptr %ptradd168, align 1, !dbg !1669
  br label %switch.exit, !dbg !1669

switch.default:                                   ; preds = %switch.entry
  store %"char[]" { ptr @.str.167, i64 30 }, ptr %string, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg169, ptr align 8 %string, i32 16, i1 false)
  store %"char[]" { ptr @.str.168, i64 20 }, ptr %indirectarg170, align 8
  store %"char[]" { ptr @.str.169, i64 21 }, ptr %indirectarg171, align 8
  store %"any[]" zeroinitializer, ptr %indirectarg172, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg169, ptr align 8 %indirectarg170, ptr align 8 %indirectarg171, i32 591, ptr align 8 %indirectarg172), !dbg !1671
  unreachable, !dbg !1671

switch.exit:                                      ; preds = %checkok167, %checkok147, %checkok127
  %ptradd173 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !1675
  %100 = load i64, ptr %ptradd173, align 8, !dbg !1675
  %101 = load ptr, ptr %2, align 8, !dbg !1675
  %102 = load i64, ptr %len, align 8, !dbg !1675
  %add174 = add i64 %102, 1, !dbg !1675
  store i64 %add174, ptr %len, align 8, !dbg !1675
  %ge175 = icmp uge i64 %102, %100, !dbg !1675
  %103 = call i1 @llvm.expect.i1(i1 %ge175, i1 false), !dbg !1675
  br i1 %103, label %panic176, label %checkok186, !dbg !1675

checkok186:                                       ; preds = %switch.exit
  %ptradd187 = getelementptr inbounds i8, ptr %101, i64 %102, !dbg !1675
  store i8 48, ptr %ptradd187, align 1, !dbg !1675
  br label %if.exit188, !dbg !1675

if.exit188:                                       ; preds = %checkok186, %if.exit103
  br label %if.exit189, !dbg !1675

if.exit189:                                       ; preds = %if.exit188, %and.phi74
  store i8 1, ptr %switch190, align 1
  br label %switch.entry191

switch.entry191:                                  ; preds = %if.exit189
  %104 = load i8, ptr %switch190, align 1
  %105 = trunc i8 %104 to i1
  %106 = load i8, ptr %negative, align 1, !dbg !1676
  %107 = trunc i8 %106 to i1, !dbg !1676
  %eq192 = icmp eq i1 %107, %105, !dbg !1676
  br i1 %eq192, label %switch.case193, label %next_if, !dbg !1676

switch.case193:                                   ; preds = %switch.entry191
  %108 = load i64, ptr %len, align 8, !dbg !1678
  %ptradd194 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !1678
  %109 = load i64, ptr %ptradd194, align 8, !dbg !1678
  %ge195 = icmp uge i64 %108, %109, !dbg !1678
  br i1 %ge195, label %if.then196, label %if.exit197, !dbg !1678

if.then196:                                       ; preds = %switch.case193
  ret i64 ptrtoint (ptr @std.io.INTERNAL_BUFFER_EXCEEDED to i64), !dbg !1678

if.exit197:                                       ; preds = %switch.case193
  %ptradd198 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !1680
  %110 = load i64, ptr %ptradd198, align 8, !dbg !1680
  %111 = load ptr, ptr %2, align 8, !dbg !1680
  %112 = load i64, ptr %len, align 8, !dbg !1680
  %add199 = add i64 %112, 1, !dbg !1680
  store i64 %add199, ptr %len, align 8, !dbg !1680
  %ge200 = icmp uge i64 %112, %110, !dbg !1680
  %113 = call i1 @llvm.expect.i1(i1 %ge200, i1 false), !dbg !1680
  br i1 %113, label %panic201, label %checkok211, !dbg !1680

checkok211:                                       ; preds = %if.exit197
  %ptradd212 = getelementptr inbounds i8, ptr %111, i64 %112, !dbg !1680
  store i8 45, ptr %ptradd212, align 1, !dbg !1680
  br label %switch.exit263, !dbg !1680

next_if:                                          ; preds = %switch.entry191
  %114 = load ptr, ptr %self, align 8, !dbg !1681
  %ptradd213 = getelementptr inbounds i8, ptr %114, i64 16, !dbg !1681
  %115 = load i32, ptr %ptradd213, align 8, !dbg !1681
  %lshrl214 = lshr i32 %115, 2, !dbg !1681
  %116 = and i32 1, %lshrl214, !dbg !1681
  %trunc215 = trunc i32 %116 to i8, !dbg !1681
  %117 = trunc i8 %trunc215 to i1, !dbg !1681
  %eq216 = icmp eq i1 %117, %105, !dbg !1681
  br i1 %eq216, label %switch.case217, label %next_if237, !dbg !1681

switch.case217:                                   ; preds = %next_if
  %118 = load i64, ptr %len, align 8, !dbg !1682
  %ptradd218 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !1682
  %119 = load i64, ptr %ptradd218, align 8, !dbg !1682
  %ge219 = icmp uge i64 %118, %119, !dbg !1682
  br i1 %ge219, label %if.then220, label %if.exit221, !dbg !1682

if.then220:                                       ; preds = %switch.case217
  ret i64 ptrtoint (ptr @std.io.INTERNAL_BUFFER_EXCEEDED to i64), !dbg !1682

if.exit221:                                       ; preds = %switch.case217
  %ptradd222 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !1684
  %120 = load i64, ptr %ptradd222, align 8, !dbg !1684
  %121 = load ptr, ptr %2, align 8, !dbg !1684
  %122 = load i64, ptr %len, align 8, !dbg !1684
  %add223 = add i64 %122, 1, !dbg !1684
  store i64 %add223, ptr %len, align 8, !dbg !1684
  %ge224 = icmp uge i64 %122, %120, !dbg !1684
  %123 = call i1 @llvm.expect.i1(i1 %ge224, i1 false), !dbg !1684
  br i1 %123, label %panic225, label %checkok235, !dbg !1684

checkok235:                                       ; preds = %if.exit221
  %ptradd236 = getelementptr inbounds i8, ptr %121, i64 %122, !dbg !1684
  store i8 43, ptr %ptradd236, align 1, !dbg !1684
  br label %switch.exit263, !dbg !1684

next_if237:                                       ; preds = %next_if
  %124 = load ptr, ptr %self, align 8, !dbg !1685
  %ptradd238 = getelementptr inbounds i8, ptr %124, i64 16, !dbg !1685
  %125 = load i32, ptr %ptradd238, align 8, !dbg !1685
  %lshrl239 = lshr i32 %125, 3, !dbg !1685
  %126 = and i32 1, %lshrl239, !dbg !1685
  %trunc240 = trunc i32 %126 to i8, !dbg !1685
  %127 = trunc i8 %trunc240 to i1, !dbg !1685
  %eq241 = icmp eq i1 %127, %105, !dbg !1685
  br i1 %eq241, label %switch.case242, label %next_if262, !dbg !1685

switch.case242:                                   ; preds = %next_if237
  %128 = load i64, ptr %len, align 8, !dbg !1686
  %ptradd243 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !1686
  %129 = load i64, ptr %ptradd243, align 8, !dbg !1686
  %ge244 = icmp uge i64 %128, %129, !dbg !1686
  br i1 %ge244, label %if.then245, label %if.exit246, !dbg !1686

if.then245:                                       ; preds = %switch.case242
  ret i64 ptrtoint (ptr @std.io.INTERNAL_BUFFER_EXCEEDED to i64), !dbg !1686

if.exit246:                                       ; preds = %switch.case242
  %ptradd247 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !1688
  %130 = load i64, ptr %ptradd247, align 8, !dbg !1688
  %131 = load ptr, ptr %2, align 8, !dbg !1688
  %132 = load i64, ptr %len, align 8, !dbg !1688
  %add248 = add i64 %132, 1, !dbg !1688
  store i64 %add248, ptr %len, align 8, !dbg !1688
  %ge249 = icmp uge i64 %132, %130, !dbg !1688
  %133 = call i1 @llvm.expect.i1(i1 %ge249, i1 false), !dbg !1688
  br i1 %133, label %panic250, label %checkok260, !dbg !1688

checkok260:                                       ; preds = %if.exit246
  %ptradd261 = getelementptr inbounds i8, ptr %131, i64 %132, !dbg !1688
  store i8 32, ptr %ptradd261, align 1, !dbg !1688
  br label %switch.exit263, !dbg !1688

next_if262:                                       ; preds = %next_if237
  br label %switch.exit263, !dbg !1688

switch.exit263:                                   ; preds = %next_if262, %checkok260, %checkok235, %checkok211
  %134 = load i64, ptr %len, align 8, !dbg !1689
  %i2b264 = icmp ne i64 %134, 0, !dbg !1689
  br i1 %i2b264, label %if.then265, label %if.exit303, !dbg !1689

if.then265:                                       ; preds = %switch.exit263
  %135 = load %"char[]", ptr %2, align 8, !dbg !1689
  %136 = extractvalue %"char[]" %135, 0, !dbg !1689
  %137 = extractvalue %"char[]" %135, 1, !dbg !1689
  %gt = icmp ugt i64 0, %137, !dbg !1689
  %138 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !1689
  br i1 %138, label %panic266, label %checkok276, !dbg !1689

checkok276:                                       ; preds = %if.then265
  %139 = load i64, ptr %len, align 8, !dbg !1689
  %add277 = add i64 0, %139, !dbg !1689
  %gt278 = icmp ugt i64 0, %add277, !dbg !1689
  %sub279 = sub i64 %add277, 0, !dbg !1689
  %140 = call i1 @llvm.expect.i1(i1 %gt278, i1 false), !dbg !1689
  br i1 %140, label %panic280, label %checkok288, !dbg !1689

checkok288:                                       ; preds = %checkok276
  %lt289 = icmp ult i64 %137, %add277, !dbg !1689
  %sub290 = sub i64 %add277, 1, !dbg !1689
  %141 = call i1 @llvm.expect.i1(i1 %lt289, i1 false), !dbg !1689
  br i1 %141, label %panic291, label %checkok301, !dbg !1689

checkok301:                                       ; preds = %checkok288
  %size = sub i64 %add277, 0, !dbg !1689
  %142 = insertvalue %"char[]" undef, ptr %136, 0, !dbg !1689
  %143 = insertvalue %"char[]" %142, i64 %size, 1, !dbg !1689
  %144 = load ptr, ptr %self, align 8
  store %"char[]" %143, ptr %indirectarg302, align 8
  %145 = call i64 @std.io.Formatter.out_reverse(ptr %retparam, ptr %144, ptr align 8 %indirectarg302), !dbg !1689
  %not_err = icmp eq i64 %145, 0, !dbg !1689
  %146 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1689
  br i1 %146, label %after_check, label %assign_optional, !dbg !1689

assign_optional:                                  ; preds = %checkok301
  store i64 %145, ptr %error_var, align 8, !dbg !1689
  br label %guard_block, !dbg !1689

after_check:                                      ; preds = %checkok301
  br label %noerr_block, !dbg !1689

guard_block:                                      ; preds = %assign_optional
  %147 = load i64, ptr %error_var, align 8, !dbg !1689
  ret i64 %147, !dbg !1689

noerr_block:                                      ; preds = %after_check
  br label %if.exit303, !dbg !1689

if.exit303:                                       ; preds = %noerr_block, %switch.exit263
  %148 = load i64, ptr %len, align 8, !dbg !1690
  store i64 %148, ptr %0, align 8, !dbg !1690
  ret i64 0, !dbg !1690

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.166, i64 11 }, ptr %indirectarg2, align 8
  %149 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %149(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 553) #5, !dbg !1635
  unreachable, !dbg !1635

panic29:                                          ; preds = %if.exit26
  store i64 %35, ptr %taddr, align 8
  %150 = insertvalue %any undef, ptr %taddr, 0
  %151 = insertvalue %any %150, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %37, ptr %taddr30, align 8
  %152 = insertvalue %any undef, ptr %taddr30, 0
  %153 = insertvalue %any %152, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.71, i64 59 }, ptr %indirectarg31, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg32, align 8
  store %"char[]" { ptr @.func.166, i64 11 }, ptr %indirectarg33, align 8
  store %any %151, ptr %varargslots, align 16
  %ptradd34 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %153, ptr %ptradd34, align 16
  %154 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %154, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg35, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg31, ptr align 8 %indirectarg32, ptr align 8 %indirectarg33, i32 562, ptr align 8 %indirectarg35) #5, !dbg !1648
  unreachable, !dbg !1648

panic56:                                          ; preds = %if.exit52
  store i64 %48, ptr %taddr57, align 8
  %155 = insertvalue %any undef, ptr %taddr57, 0
  %156 = insertvalue %any %155, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %50, ptr %taddr58, align 8
  %157 = insertvalue %any undef, ptr %taddr58, 0
  %158 = insertvalue %any %157, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.71, i64 59 }, ptr %indirectarg59, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg60, align 8
  store %"char[]" { ptr @.func.166, i64 11 }, ptr %indirectarg61, align 8
  store %any %156, ptr %varargslots62, align 16
  %ptradd63 = getelementptr inbounds i8, ptr %varargslots62, i64 16
  store %any %158, ptr %ptradd63, align 16
  %159 = insertvalue %"any[]" undef, ptr %varargslots62, 0
  %"$$temp64" = insertvalue %"any[]" %159, i64 2, 1
  store %"any[]" %"$$temp64", ptr %indirectarg65, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg59, ptr align 8 %indirectarg60, ptr align 8 %indirectarg61, i32 567, ptr align 8 %indirectarg65) #5, !dbg !1654
  unreachable, !dbg !1654

panic117:                                         ; preds = %switch.case
  store i64 %80, ptr %taddr118, align 8
  %160 = insertvalue %any undef, ptr %taddr118, 0
  %161 = insertvalue %any %160, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %82, ptr %taddr119, align 8
  %162 = insertvalue %any undef, ptr %taddr119, 0
  %163 = insertvalue %any %162, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.71, i64 59 }, ptr %indirectarg120, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg121, align 8
  store %"char[]" { ptr @.func.166, i64 11 }, ptr %indirectarg122, align 8
  store %any %161, ptr %varargslots123, align 16
  %ptradd124 = getelementptr inbounds i8, ptr %varargslots123, i64 16
  store %any %163, ptr %ptradd124, align 16
  %164 = insertvalue %"any[]" undef, ptr %varargslots123, 0
  %"$$temp125" = insertvalue %"any[]" %164, i64 2, 1
  store %"any[]" %"$$temp125", ptr %indirectarg126, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg120, ptr align 8 %indirectarg121, ptr align 8 %indirectarg122, i32 585, ptr align 8 %indirectarg126) #5, !dbg !1664
  unreachable, !dbg !1664

panic137:                                         ; preds = %switch.case129
  store i64 %88, ptr %taddr138, align 8
  %165 = insertvalue %any undef, ptr %taddr138, 0
  %166 = insertvalue %any %165, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %90, ptr %taddr139, align 8
  %167 = insertvalue %any undef, ptr %taddr139, 0
  %168 = insertvalue %any %167, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.71, i64 59 }, ptr %indirectarg140, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg141, align 8
  store %"char[]" { ptr @.func.166, i64 11 }, ptr %indirectarg142, align 8
  store %any %166, ptr %varargslots143, align 16
  %ptradd144 = getelementptr inbounds i8, ptr %varargslots143, i64 16
  store %any %168, ptr %ptradd144, align 16
  %169 = insertvalue %"any[]" undef, ptr %varargslots143, 0
  %"$$temp145" = insertvalue %"any[]" %169, i64 2, 1
  store %"any[]" %"$$temp145", ptr %indirectarg146, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg140, ptr align 8 %indirectarg141, ptr align 8 %indirectarg142, i32 587, ptr align 8 %indirectarg146) #5, !dbg !1667
  unreachable, !dbg !1667

panic157:                                         ; preds = %switch.case149
  store i64 %96, ptr %taddr158, align 8
  %170 = insertvalue %any undef, ptr %taddr158, 0
  %171 = insertvalue %any %170, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %98, ptr %taddr159, align 8
  %172 = insertvalue %any undef, ptr %taddr159, 0
  %173 = insertvalue %any %172, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.71, i64 59 }, ptr %indirectarg160, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg161, align 8
  store %"char[]" { ptr @.func.166, i64 11 }, ptr %indirectarg162, align 8
  store %any %171, ptr %varargslots163, align 16
  %ptradd164 = getelementptr inbounds i8, ptr %varargslots163, i64 16
  store %any %173, ptr %ptradd164, align 16
  %174 = insertvalue %"any[]" undef, ptr %varargslots163, 0
  %"$$temp165" = insertvalue %"any[]" %174, i64 2, 1
  store %"any[]" %"$$temp165", ptr %indirectarg166, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg160, ptr align 8 %indirectarg161, ptr align 8 %indirectarg162, i32 589, ptr align 8 %indirectarg166) #5, !dbg !1669
  unreachable, !dbg !1669

panic176:                                         ; preds = %switch.exit
  store i64 %100, ptr %taddr177, align 8
  %175 = insertvalue %any undef, ptr %taddr177, 0
  %176 = insertvalue %any %175, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %102, ptr %taddr178, align 8
  %177 = insertvalue %any undef, ptr %taddr178, 0
  %178 = insertvalue %any %177, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.71, i64 59 }, ptr %indirectarg179, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg180, align 8
  store %"char[]" { ptr @.func.166, i64 11 }, ptr %indirectarg181, align 8
  store %any %176, ptr %varargslots182, align 16
  %ptradd183 = getelementptr inbounds i8, ptr %varargslots182, i64 16
  store %any %178, ptr %ptradd183, align 16
  %179 = insertvalue %"any[]" undef, ptr %varargslots182, 0
  %"$$temp184" = insertvalue %"any[]" %179, i64 2, 1
  store %"any[]" %"$$temp184", ptr %indirectarg185, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg179, ptr align 8 %indirectarg180, ptr align 8 %indirectarg181, i32 593, ptr align 8 %indirectarg185) #5, !dbg !1675
  unreachable, !dbg !1675

panic201:                                         ; preds = %if.exit197
  store i64 %110, ptr %taddr202, align 8
  %180 = insertvalue %any undef, ptr %taddr202, 0
  %181 = insertvalue %any %180, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %112, ptr %taddr203, align 8
  %182 = insertvalue %any undef, ptr %taddr203, 0
  %183 = insertvalue %any %182, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.71, i64 59 }, ptr %indirectarg204, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg205, align 8
  store %"char[]" { ptr @.func.166, i64 11 }, ptr %indirectarg206, align 8
  store %any %181, ptr %varargslots207, align 16
  %ptradd208 = getelementptr inbounds i8, ptr %varargslots207, i64 16
  store %any %183, ptr %ptradd208, align 16
  %184 = insertvalue %"any[]" undef, ptr %varargslots207, 0
  %"$$temp209" = insertvalue %"any[]" %184, i64 2, 1
  store %"any[]" %"$$temp209", ptr %indirectarg210, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg204, ptr align 8 %indirectarg205, ptr align 8 %indirectarg206, i32 601, ptr align 8 %indirectarg210) #5, !dbg !1680
  unreachable, !dbg !1680

panic225:                                         ; preds = %if.exit221
  store i64 %120, ptr %taddr226, align 8
  %185 = insertvalue %any undef, ptr %taddr226, 0
  %186 = insertvalue %any %185, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %122, ptr %taddr227, align 8
  %187 = insertvalue %any undef, ptr %taddr227, 0
  %188 = insertvalue %any %187, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.71, i64 59 }, ptr %indirectarg228, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg229, align 8
  store %"char[]" { ptr @.func.166, i64 11 }, ptr %indirectarg230, align 8
  store %any %186, ptr %varargslots231, align 16
  %ptradd232 = getelementptr inbounds i8, ptr %varargslots231, i64 16
  store %any %188, ptr %ptradd232, align 16
  %189 = insertvalue %"any[]" undef, ptr %varargslots231, 0
  %"$$temp233" = insertvalue %"any[]" %189, i64 2, 1
  store %"any[]" %"$$temp233", ptr %indirectarg234, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg228, ptr align 8 %indirectarg229, ptr align 8 %indirectarg230, i32 604, ptr align 8 %indirectarg234) #5, !dbg !1684
  unreachable, !dbg !1684

panic250:                                         ; preds = %if.exit246
  store i64 %130, ptr %taddr251, align 8
  %190 = insertvalue %any undef, ptr %taddr251, 0
  %191 = insertvalue %any %190, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %132, ptr %taddr252, align 8
  %192 = insertvalue %any undef, ptr %taddr252, 0
  %193 = insertvalue %any %192, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.71, i64 59 }, ptr %indirectarg253, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg254, align 8
  store %"char[]" { ptr @.func.166, i64 11 }, ptr %indirectarg255, align 8
  store %any %191, ptr %varargslots256, align 16
  %ptradd257 = getelementptr inbounds i8, ptr %varargslots256, i64 16
  store %any %193, ptr %ptradd257, align 16
  %194 = insertvalue %"any[]" undef, ptr %varargslots256, 0
  %"$$temp258" = insertvalue %"any[]" %194, i64 2, 1
  store %"any[]" %"$$temp258", ptr %indirectarg259, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg253, ptr align 8 %indirectarg254, ptr align 8 %indirectarg255, i32 607, ptr align 8 %indirectarg259) #5, !dbg !1688
  unreachable, !dbg !1688

panic266:                                         ; preds = %if.then265
  store i64 %137, ptr %taddr267, align 8
  %195 = insertvalue %any undef, ptr %taddr267, 0
  %196 = insertvalue %any %195, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr268, align 8
  %197 = insertvalue %any undef, ptr %taddr268, 0
  %198 = insertvalue %any %197, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.170, i64 61 }, ptr %indirectarg269, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg270, align 8
  store %"char[]" { ptr @.func.166, i64 11 }, ptr %indirectarg271, align 8
  store %any %196, ptr %varargslots272, align 16
  %ptradd273 = getelementptr inbounds i8, ptr %varargslots272, i64 16
  store %any %198, ptr %ptradd273, align 16
  %199 = insertvalue %"any[]" undef, ptr %varargslots272, 0
  %"$$temp274" = insertvalue %"any[]" %199, i64 2, 1
  store %"any[]" %"$$temp274", ptr %indirectarg275, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg269, ptr align 8 %indirectarg270, ptr align 8 %indirectarg271, i32 609, ptr align 8 %indirectarg275) #5, !dbg !1689
  unreachable, !dbg !1689

panic280:                                         ; preds = %checkok276
  store i64 %sub279, ptr %taddr281, align 8
  %200 = insertvalue %any undef, ptr %taddr281, 0
  %201 = insertvalue %any %200, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.16, i64 43 }, ptr %indirectarg282, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg283, align 8
  store %"char[]" { ptr @.func.166, i64 11 }, ptr %indirectarg284, align 8
  store %any %201, ptr %varargslots285, align 16
  %202 = insertvalue %"any[]" undef, ptr %varargslots285, 0
  %"$$temp286" = insertvalue %"any[]" %202, i64 1, 1
  store %"any[]" %"$$temp286", ptr %indirectarg287, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg282, ptr align 8 %indirectarg283, ptr align 8 %indirectarg284, i32 609, ptr align 8 %indirectarg287) #5, !dbg !1689
  unreachable, !dbg !1689

panic291:                                         ; preds = %checkok288
  store i64 %sub290, ptr %taddr292, align 8
  %203 = insertvalue %any undef, ptr %taddr292, 0
  %204 = insertvalue %any %203, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %137, ptr %taddr293, align 8
  %205 = insertvalue %any undef, ptr %taddr293, 0
  %206 = insertvalue %any %205, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 60 }, ptr %indirectarg294, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg295, align 8
  store %"char[]" { ptr @.func.166, i64 11 }, ptr %indirectarg296, align 8
  store %any %204, ptr %varargslots297, align 16
  %ptradd298 = getelementptr inbounds i8, ptr %varargslots297, i64 16
  store %any %206, ptr %ptradd298, align 16
  %207 = insertvalue %"any[]" undef, ptr %varargslots297, 0
  %"$$temp299" = insertvalue %"any[]" %207, i64 2, 1
  store %"any[]" %"$$temp299", ptr %indirectarg300, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg294, ptr align 8 %indirectarg295, ptr align 8 %indirectarg296, i32 609, ptr align 8 %indirectarg300) #5, !dbg !1689
  unreachable, !dbg !1689
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @std.io.Formatter.ntoa_any(ptr %0, ptr %1, ptr align 8 %2, i32 %3) #0 !dbg !1691 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %base = alloca i32, align 4
  %is_neg = alloca i8, align 1
  %reterr = alloca i64, align 8
  %error_var = alloca i64, align 8
  %retparam = alloca i128, align 16
  %indirectarg3 = alloca %any, align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg7 = alloca %"any[]", align 8
  %retparam8 = alloca i64, align 8
  %indirectarg9 = alloca i128, align 16
  %4 = icmp eq ptr %1, null, !dbg !1694
  %5 = call i1 @llvm.expect.i1(i1 %4, i1 false), !dbg !1694
  br i1 %5, label %panic, label %checkok, !dbg !1694

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !1695, !DIExpression(), !1696)
    #dbg_declare(ptr %2, !1697, !DIExpression(), !1696)
  store i32 %3, ptr %base, align 4
    #dbg_declare(ptr %base, !1698, !DIExpression(), !1696)
    #dbg_declare(ptr %is_neg, !1699, !DIExpression(), !1700)
  store i8 0, ptr %is_neg, align 1, !dbg !1700
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg3, ptr align 8 %2, i32 16, i1 false)
  %6 = call i64 @std.io.int_from_any(ptr %retparam, ptr align 8 %indirectarg3, ptr %is_neg), !dbg !1701
  %not_err = icmp eq i64 %6, 0, !dbg !1701
  %7 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1701
  br i1 %7, label %after_check, label %assign_optional, !dbg !1701

assign_optional:                                  ; preds = %checkok
  store i64 %6, ptr %error_var, align 8, !dbg !1701
  br label %panic_block, !dbg !1701

after_check:                                      ; preds = %checkok
  br label %noerr_block, !dbg !1701

panic_block:                                      ; preds = %assign_optional
  %8 = insertvalue %any undef, ptr %error_var, 0, !dbg !1701
  %9 = insertvalue %any %8, i64 ptrtoint (ptr @"$ct.fault" to i64), 1, !dbg !1701
  store %"char[]" { ptr @.panic_msg.68, i64 36 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.171, i64 8 }, ptr %indirectarg6, align 8
  store %any %9, ptr %varargslots, align 16
  %10 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %10, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg7, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 617, ptr align 8 %indirectarg7) #5, !dbg !1701
  unreachable, !dbg !1701

noerr_block:                                      ; preds = %after_check
  %11 = load ptr, ptr %self, align 8
  %12 = load i128, ptr %retparam, align 16
  store i128 %12, ptr %indirectarg9, align 16
  %13 = load i8, ptr %is_neg, align 1
  %14 = load i32, ptr %base, align 4
  %15 = call i64 @std.io.Formatter.ntoa(ptr %retparam8, ptr %11, ptr align 16 %indirectarg9, i8 zeroext %13, i32 %14) #6, !dbg !1701
  %not_err10 = icmp eq i64 %15, 0, !dbg !1701
  %16 = call i1 @llvm.expect.i1(i1 %not_err10, i1 true), !dbg !1701
  br i1 %16, label %after_check12, label %assign_optional11, !dbg !1701

assign_optional11:                                ; preds = %noerr_block
  store i64 %15, ptr %reterr, align 8, !dbg !1701
  br label %err_retblock, !dbg !1701

after_check12:                                    ; preds = %noerr_block
  %17 = load i64, ptr %retparam8, align 8, !dbg !1701
  store i64 %17, ptr %0, align 8, !dbg !1701
  ret i64 0, !dbg !1701

err_retblock:                                     ; preds = %assign_optional11
  %18 = load i64, ptr %reterr, align 8, !dbg !1701
  ret i64 %18, !dbg !1701

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.171, i64 8 }, ptr %indirectarg2, align 8
  %19 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %19(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 614) #5, !dbg !1696
  unreachable, !dbg !1696
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @std.io.Formatter.out_char(ptr %0, ptr %1, ptr align 8 %2) #0 !dbg !1702 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %reterr = alloca i64, align 8
  %retparam = alloca i64, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %error_var = alloca i64, align 8
  %retparam8 = alloca i64, align 8
  %c = alloca i32, align 4
  %v = alloca %any, align 8
  %blockret = alloca i32, align 4
  %indirectarg13 = alloca %"char[]", align 8
  %indirectarg14 = alloca %"char[]", align 8
  %indirectarg15 = alloca %"char[]", align 8
  %indirectarg20 = alloca %"char[]", align 8
  %indirectarg21 = alloca %"char[]", align 8
  %indirectarg22 = alloca %"char[]", align 8
  %any_type = alloca i64, align 8
  %kind = alloca i8, align 1
  %is_mixed_signed = alloca i8, align 1
  %max = alloca i32, align 4
  %min = alloca i32, align 4
  %switch = alloca i64, align 8
  %c30 = alloca i8, align 1
  %indirectarg32 = alloca %"char[]", align 8
  %indirectarg33 = alloca %"char[]", align 8
  %indirectarg34 = alloca %"char[]", align 8
  %s = alloca i16, align 2
  %indirectarg47 = alloca %"char[]", align 8
  %indirectarg48 = alloca %"char[]", align 8
  %indirectarg49 = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr52 = alloca i64, align 8
  %indirectarg53 = alloca %"char[]", align 8
  %indirectarg54 = alloca %"char[]", align 8
  %indirectarg55 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg57 = alloca %"any[]", align 8
  %i = alloca i32, align 4
  %indirectarg84 = alloca %"char[]", align 8
  %indirectarg85 = alloca %"char[]", align 8
  %indirectarg86 = alloca %"char[]", align 8
  %taddr89 = alloca i64, align 8
  %taddr90 = alloca i64, align 8
  %indirectarg91 = alloca %"char[]", align 8
  %indirectarg92 = alloca %"char[]", align 8
  %indirectarg93 = alloca %"char[]", align 8
  %varargslots94 = alloca [2 x %any], align 16
  %indirectarg97 = alloca %"any[]", align 8
  %l = alloca i64, align 8
  %indirectarg126 = alloca %"char[]", align 8
  %indirectarg127 = alloca %"char[]", align 8
  %indirectarg128 = alloca %"char[]", align 8
  %taddr131 = alloca i64, align 8
  %taddr132 = alloca i64, align 8
  %indirectarg133 = alloca %"char[]", align 8
  %indirectarg134 = alloca %"char[]", align 8
  %indirectarg135 = alloca %"char[]", align 8
  %varargslots136 = alloca [2 x %any], align 16
  %indirectarg139 = alloca %"any[]", align 8
  %i169 = alloca i128, align 16
  %indirectarg172 = alloca %"char[]", align 8
  %indirectarg173 = alloca %"char[]", align 8
  %indirectarg174 = alloca %"char[]", align 8
  %taddr177 = alloca i64, align 8
  %taddr178 = alloca i64, align 8
  %indirectarg179 = alloca %"char[]", align 8
  %indirectarg180 = alloca %"char[]", align 8
  %indirectarg181 = alloca %"char[]", align 8
  %varargslots182 = alloca [2 x %any], align 16
  %indirectarg185 = alloca %"any[]", align 8
  %c215 = alloca i8, align 1
  %indirectarg218 = alloca %"char[]", align 8
  %indirectarg219 = alloca %"char[]", align 8
  %indirectarg220 = alloca %"char[]", align 8
  %s235 = alloca i16, align 2
  %indirectarg238 = alloca %"char[]", align 8
  %indirectarg239 = alloca %"char[]", align 8
  %indirectarg240 = alloca %"char[]", align 8
  %taddr243 = alloca i64, align 8
  %taddr244 = alloca i64, align 8
  %indirectarg245 = alloca %"char[]", align 8
  %indirectarg246 = alloca %"char[]", align 8
  %indirectarg247 = alloca %"char[]", align 8
  %varargslots248 = alloca [2 x %any], align 16
  %indirectarg251 = alloca %"any[]", align 8
  %i271 = alloca i32, align 4
  %indirectarg274 = alloca %"char[]", align 8
  %indirectarg275 = alloca %"char[]", align 8
  %indirectarg276 = alloca %"char[]", align 8
  %taddr279 = alloca i64, align 8
  %taddr280 = alloca i64, align 8
  %indirectarg281 = alloca %"char[]", align 8
  %indirectarg282 = alloca %"char[]", align 8
  %indirectarg283 = alloca %"char[]", align 8
  %varargslots284 = alloca [2 x %any], align 16
  %indirectarg287 = alloca %"any[]", align 8
  %l304 = alloca i64, align 8
  %indirectarg307 = alloca %"char[]", align 8
  %indirectarg308 = alloca %"char[]", align 8
  %indirectarg309 = alloca %"char[]", align 8
  %taddr312 = alloca i64, align 8
  %taddr313 = alloca i64, align 8
  %indirectarg314 = alloca %"char[]", align 8
  %indirectarg315 = alloca %"char[]", align 8
  %indirectarg316 = alloca %"char[]", align 8
  %varargslots317 = alloca [2 x %any], align 16
  %indirectarg320 = alloca %"any[]", align 8
  %i340 = alloca i128, align 16
  %indirectarg343 = alloca %"char[]", align 8
  %indirectarg344 = alloca %"char[]", align 8
  %indirectarg345 = alloca %"char[]", align 8
  %taddr348 = alloca i64, align 8
  %taddr349 = alloca i64, align 8
  %indirectarg350 = alloca %"char[]", align 8
  %indirectarg351 = alloca %"char[]", align 8
  %indirectarg352 = alloca %"char[]", align 8
  %varargslots353 = alloca [2 x %any], align 16
  %indirectarg356 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg369 = alloca %"char[]", align 8
  %indirectarg370 = alloca %"char[]", align 8
  %indirectarg371 = alloca %"char[]", align 8
  %indirectarg372 = alloca %"any[]", align 8
  %switch374 = alloca i8, align 1
  %error_var379 = alloca i64, align 8
  %retparam381 = alloca i64, align 8
  %error_var391 = alloca i64, align 8
  %retparam393 = alloca i64, align 8
  %error_var399 = alloca i64, align 8
  %retparam402 = alloca i64, align 8
  %error_var412 = alloca i64, align 8
  %retparam416 = alloca i64, align 8
  %error_var422 = alloca i64, align 8
  %retparam427 = alloca i64, align 8
  %error_var433 = alloca i64, align 8
  %retparam437 = alloca i64, align 8
  %error_var445 = alloca i64, align 8
  %retparam449 = alloca i64, align 8
  %error_var455 = alloca i64, align 8
  %retparam460 = alloca i64, align 8
  %error_var466 = alloca i64, align 8
  %retparam471 = alloca i64, align 8
  %error_var477 = alloca i64, align 8
  %retparam481 = alloca i64, align 8
  %error_var491 = alloca i64, align 8
  %retparam495 = alloca i64, align 8
  %reterr503 = alloca i64, align 8
  %3 = icmp eq ptr %1, null, !dbg !1703
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !1703
  br i1 %4, label %panic, label %checkok, !dbg !1703

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !1704, !DIExpression(), !1705)
    #dbg_declare(ptr %2, !1706, !DIExpression(), !1705)
  %ptradd = getelementptr inbounds i8, ptr %2, i64 8, !dbg !1707
  %5 = load i64, ptr %ptradd, align 8, !dbg !1707
  %"introspect*" = inttoptr i64 %5 to ptr, !dbg !1707
  %typeid.kind = load i8, ptr %"introspect*", align 8, !dbg !1707
  %6 = call i8 @std.core.types.TypeKind.is_int(i8 %typeid.kind) #6, !dbg !1707
  %7 = trunc i8 %6 to i1, !dbg !1707
  br i1 %7, label %if.exit, label %if.else, !dbg !1707

if.else:                                          ; preds = %checkok
  %8 = load ptr, ptr %self, align 8
  store %"char[]" { ptr @.str.173, i64 10 }, ptr %indirectarg3, align 8
  %9 = call i64 @std.io.Formatter.out_substr(ptr %retparam, ptr %8, ptr align 8 %indirectarg3), !dbg !1708
  %not_err = icmp eq i64 %9, 0, !dbg !1708
  %10 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1708
  br i1 %10, label %after_check, label %assign_optional, !dbg !1708

assign_optional:                                  ; preds = %if.else
  store i64 %9, ptr %reterr, align 8, !dbg !1708
  br label %err_retblock, !dbg !1708

after_check:                                      ; preds = %if.else
  %11 = load i64, ptr %retparam, align 8, !dbg !1708
  store i64 %11, ptr %0, align 8, !dbg !1708
  ret i64 0, !dbg !1708

err_retblock:                                     ; preds = %assign_optional
  %12 = load i64, ptr %reterr, align 8, !dbg !1708
  ret i64 %12, !dbg !1708

if.exit:                                          ; preds = %checkok
    #dbg_declare(ptr %len, !1710, !DIExpression(), !1711)
  store i64 1, ptr %len, align 8, !dbg !1711
  %13 = load ptr, ptr %self, align 8, !dbg !1712
  %ptradd4 = getelementptr inbounds i8, ptr %13, i64 16, !dbg !1712
  %14 = load i32, ptr %ptradd4, align 8, !dbg !1712
  %lshrl = lshr i32 %14, 1, !dbg !1712
  %15 = and i32 1, %lshrl, !dbg !1712
  %trunc = trunc i32 %15 to i8, !dbg !1712
  %16 = trunc i8 %trunc to i1, !dbg !1712
  br i1 %16, label %if.exit12, label %if.else5, !dbg !1712

if.else5:                                         ; preds = %if.exit
  %17 = load i64, ptr %len, align 8, !dbg !1713
  %18 = load ptr, ptr %self, align 8, !dbg !1713
  %ptradd6 = getelementptr inbounds i8, ptr %18, i64 16, !dbg !1713
  %ptradd7 = getelementptr inbounds i8, ptr %ptradd6, i64 4, !dbg !1713
  %19 = load i32, ptr %ptradd7, align 4, !dbg !1713
  %zext = zext i32 %19 to i64, !dbg !1713
  %20 = load i64, ptr %len, align 8, !dbg !1713
  %21 = load ptr, ptr %self, align 8
  %22 = call i64 @std.io.Formatter.pad(ptr %retparam8, ptr %21, i8 32, i64 %zext, i64 %20) #6, !dbg !1713
  %not_err9 = icmp eq i64 %22, 0, !dbg !1713
  %23 = call i1 @llvm.expect.i1(i1 %not_err9, i1 true), !dbg !1713
  br i1 %23, label %after_check11, label %assign_optional10, !dbg !1713

assign_optional10:                                ; preds = %if.else5
  store i64 %22, ptr %error_var, align 8, !dbg !1713
  br label %guard_block, !dbg !1713

after_check11:                                    ; preds = %if.else5
  br label %noerr_block, !dbg !1713

guard_block:                                      ; preds = %assign_optional10
  %24 = load i64, ptr %error_var, align 8, !dbg !1713
  ret i64 %24, !dbg !1713

noerr_block:                                      ; preds = %after_check11
  %25 = load i64, ptr %retparam8, align 8, !dbg !1713
  %add = add i64 %17, %25, !dbg !1713
  store i64 %add, ptr %len, align 8, !dbg !1713
  br label %if.exit12, !dbg !1713

if.exit12:                                        ; preds = %noerr_block, %if.exit
    #dbg_declare(ptr %c, !1715, !DIExpression(), !1717)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %v, ptr align 8 %2, i32 16, i1 false)
  %26 = call i8 @std.core.types.TypeKind.is_int(i8 3) #6, !dbg !1718
  %27 = trunc i8 %26 to i1, !dbg !1718
  br i1 %27, label %assert_ok, label %assert_fail, !dbg !1718

assert_fail:                                      ; preds = %if.exit12
  store %"char[]" { ptr @.panic_msg.50, i64 69 }, ptr %indirectarg13, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg14, align 8
  store %"char[]" { ptr @.func.172, i64 8 }, ptr %indirectarg15, align 8
  %28 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %28(ptr align 8 %indirectarg13, ptr align 8 %indirectarg14, ptr align 8 %indirectarg15, i32 634) #5, !dbg !1718
  unreachable, !dbg !1718

assert_ok:                                        ; preds = %if.exit12
  %ptradd16 = getelementptr inbounds i8, ptr %v, i64 8, !dbg !1721
  %29 = load i64, ptr %ptradd16, align 8, !dbg !1721
  %"introspect*17" = inttoptr i64 %29 to ptr, !dbg !1721
  %typeid.kind18 = load i8, ptr %"introspect*17", align 8, !dbg !1721
  %30 = call i8 @std.core.types.TypeKind.is_int(i8 %typeid.kind18) #6, !dbg !1718
  %31 = trunc i8 %30 to i1, !dbg !1718
  br i1 %31, label %assert_ok23, label %assert_fail19, !dbg !1718

assert_fail19:                                    ; preds = %assert_ok
  store %"char[]" { ptr @.panic_msg.55, i64 71 }, ptr %indirectarg20, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg21, align 8
  store %"char[]" { ptr @.func.172, i64 8 }, ptr %indirectarg22, align 8
  %32 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %32(ptr align 8 %indirectarg20, ptr align 8 %indirectarg21, ptr align 8 %indirectarg22, i32 634) #5, !dbg !1718
  unreachable, !dbg !1718

assert_ok23:                                      ; preds = %assert_ok
    #dbg_declare(ptr %any_type, !1722, !DIExpression(), !1723)
  %ptradd24 = getelementptr inbounds i8, ptr %v, i64 8, !dbg !1723
  %33 = load i64, ptr %ptradd24, align 8, !dbg !1723
  store i64 %33, ptr %any_type, align 8, !dbg !1723
    #dbg_declare(ptr %kind, !1724, !DIExpression(), !1725)
  %34 = load i64, ptr %any_type, align 8, !dbg !1725
  %"introspect*25" = inttoptr i64 %34 to ptr, !dbg !1725
  %typeid.kind26 = load i8, ptr %"introspect*25", align 8, !dbg !1725
  store i8 %typeid.kind26, ptr %kind, align 1, !dbg !1725
    #dbg_declare(ptr %is_mixed_signed, !1726, !DIExpression(), !1727)
  %35 = load i64, ptr %any_type, align 8, !dbg !1727
  %"introspect*27" = inttoptr i64 %35 to ptr, !dbg !1727
  %typeid.kind28 = load i8, ptr %"introspect*27", align 8, !dbg !1727
  %neq = icmp ne i8 3, %typeid.kind28, !dbg !1727
  %36 = zext i1 %neq to i8, !dbg !1727
  store i8 %36, ptr %is_mixed_signed, align 1, !dbg !1727
    #dbg_declare(ptr %max, !1728, !DIExpression(), !1729)
  store i32 -1, ptr %max, align 4, !dbg !1729
    #dbg_declare(ptr %min, !1730, !DIExpression(), !1731)
  store i32 0, ptr %min, align 4, !dbg !1731
  %37 = load i64, ptr %any_type, align 8
  store i64 %37, ptr %switch, align 8
  br label %switch.entry

switch.entry:                                     ; preds = %assert_ok23
  %38 = load i64, ptr %switch, align 8
  br label %check_subtype, !dbg !1732

check_subtype:                                    ; preds = %parent_type_block, %switch.entry
  %39 = phi i64 [ %38, %switch.entry ], [ %typeid.parent, %parent_type_block ], !dbg !1732
  %eq = icmp eq i64 ptrtoint (ptr @"$ct.ichar" to i64), %39, !dbg !1732
  br i1 %eq, label %result_block, label %parent_type_block, !dbg !1732

parent_type_block:                                ; preds = %check_subtype
  %40 = inttoptr i64 %39 to ptr, !dbg !1732
  %ptradd29 = getelementptr inbounds i8, ptr %40, i64 8, !dbg !1732
  %typeid.parent = load i64, ptr %ptradd29, align 8, !dbg !1732
  %41 = icmp eq i64 %typeid.parent, 0, !dbg !1732
  br i1 %41, label %result_block, label %check_subtype, !dbg !1732

result_block:                                     ; preds = %parent_type_block, %check_subtype
  %42 = phi i1 [ false, %parent_type_block ], [ true, %check_subtype ], !dbg !1732
  br i1 %42, label %switch.case, label %next_if, !dbg !1732

switch.case:                                      ; preds = %result_block
    #dbg_declare(ptr %c30, !1734, !DIExpression(), !1736)
  %43 = load ptr, ptr %v, align 8, !dbg !1736
  %checknull = icmp eq ptr %43, null, !dbg !1736
  %44 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1736
  br i1 %44, label %panic31, label %checkok35, !dbg !1736

checkok35:                                        ; preds = %switch.case
  %45 = load i8, ptr %43, align 1, !dbg !1736
  store i8 %45, ptr %c30, align 1, !dbg !1736
  %46 = load i8, ptr %is_mixed_signed, align 1, !dbg !1737
  %47 = trunc i8 %46 to i1, !dbg !1737
  br i1 %47, label %and.rhs, label %and.phi, !dbg !1737

and.rhs:                                          ; preds = %checkok35
  %48 = load i8, ptr %c30, align 1, !dbg !1737
  %sext = sext i8 %48 to i32, !dbg !1737
  %lt = icmp slt i32 %sext, 0, !dbg !1737
  br label %and.phi, !dbg !1737

and.phi:                                          ; preds = %and.rhs, %checkok35
  %val = phi i1 [ false, %checkok35 ], [ %lt, %and.rhs ], !dbg !1737
  br i1 %val, label %if.then, label %if.exit36, !dbg !1737

if.then:                                          ; preds = %and.phi
  br label %else_block, !dbg !1737

if.exit36:                                        ; preds = %and.phi
  %49 = load i8, ptr %c30, align 1, !dbg !1738
  %sext37 = sext i8 %49 to i32, !dbg !1738
  store i32 %sext37, ptr %blockret, align 4, !dbg !1738
  br label %expr_block.exit, !dbg !1738

next_if:                                          ; preds = %result_block
  br label %check_subtype38, !dbg !1739

check_subtype38:                                  ; preds = %parent_type_block40, %next_if
  %50 = phi i64 [ %38, %next_if ], [ %typeid.parent42, %parent_type_block40 ], !dbg !1739
  %eq39 = icmp eq i64 ptrtoint (ptr @"$ct.short" to i64), %50, !dbg !1739
  br i1 %eq39, label %result_block43, label %parent_type_block40, !dbg !1739

parent_type_block40:                              ; preds = %check_subtype38
  %51 = inttoptr i64 %50 to ptr, !dbg !1739
  %ptradd41 = getelementptr inbounds i8, ptr %51, i64 8, !dbg !1739
  %typeid.parent42 = load i64, ptr %ptradd41, align 8, !dbg !1739
  %52 = icmp eq i64 %typeid.parent42, 0, !dbg !1739
  br i1 %52, label %result_block43, label %check_subtype38, !dbg !1739

result_block43:                                   ; preds = %parent_type_block40, %check_subtype38
  %53 = phi i1 [ false, %parent_type_block40 ], [ true, %check_subtype38 ], !dbg !1739
  br i1 %53, label %switch.case44, label %next_if74, !dbg !1739

switch.case44:                                    ; preds = %result_block43
    #dbg_declare(ptr %s, !1740, !DIExpression(), !1742)
  %54 = load ptr, ptr %v, align 8, !dbg !1742
  %checknull45 = icmp eq ptr %54, null, !dbg !1742
  %55 = call i1 @llvm.expect.i1(i1 %checknull45, i1 false), !dbg !1742
  br i1 %55, label %panic46, label %checkok50, !dbg !1742

checkok50:                                        ; preds = %switch.case44
  %56 = ptrtoint ptr %54 to i64, !dbg !1742
  %57 = urem i64 %56, 2, !dbg !1742
  %58 = icmp ne i64 %57, 0, !dbg !1742
  %59 = call i1 @llvm.expect.i1(i1 %58, i1 false), !dbg !1742
  br i1 %59, label %panic51, label %checkok58, !dbg !1742

checkok58:                                        ; preds = %checkok50
  %60 = load i16, ptr %54, align 2, !dbg !1742
  store i16 %60, ptr %s, align 2, !dbg !1742
  %61 = load i8, ptr %is_mixed_signed, align 1, !dbg !1743
  %62 = trunc i8 %61 to i1, !dbg !1743
  br i1 %62, label %and.rhs59, label %and.phi62, !dbg !1743

and.rhs59:                                        ; preds = %checkok58
  %63 = load i16, ptr %s, align 2, !dbg !1743
  %sext60 = sext i16 %63 to i32, !dbg !1743
  %lt61 = icmp slt i32 %sext60, 0, !dbg !1743
  br label %and.phi62, !dbg !1743

and.phi62:                                        ; preds = %and.rhs59, %checkok58
  %val63 = phi i1 [ false, %checkok58 ], [ %lt61, %and.rhs59 ], !dbg !1743
  br i1 %val63, label %if.then64, label %if.exit65, !dbg !1743

if.then64:                                        ; preds = %and.phi62
  br label %else_block, !dbg !1743

if.exit65:                                        ; preds = %and.phi62
  %64 = load i16, ptr %s, align 2, !dbg !1744
  %sext66 = sext i16 %64 to i32, !dbg !1744
  %65 = load i32, ptr %max, align 4, !dbg !1744
  %gt = icmp sgt i32 %sext66, %65, !dbg !1744
  %check = icmp sge i32 %65, 0, !dbg !1744
  %siui-gt = and i1 %check, %gt, !dbg !1744
  br i1 %siui-gt, label %or.phi, label %or.rhs, !dbg !1744

or.rhs:                                           ; preds = %if.exit65
  %66 = load i16, ptr %s, align 2, !dbg !1744
  %sext67 = sext i16 %66 to i32, !dbg !1744
  %67 = load i32, ptr %min, align 4, !dbg !1744
  %lt68 = icmp slt i32 %sext67, %67, !dbg !1744
  %check69 = icmp slt i32 %67, 0, !dbg !1744
  %siui-lt = or i1 %check69, %lt68, !dbg !1744
  br label %or.phi, !dbg !1744

or.phi:                                           ; preds = %or.rhs, %if.exit65
  %val70 = phi i1 [ true, %if.exit65 ], [ %siui-lt, %or.rhs ], !dbg !1744
  br i1 %val70, label %if.then71, label %if.exit72, !dbg !1744

if.then71:                                        ; preds = %or.phi
  br label %else_block, !dbg !1744

if.exit72:                                        ; preds = %or.phi
  %68 = load i16, ptr %s, align 2, !dbg !1745
  %sext73 = sext i16 %68 to i32, !dbg !1745
  store i32 %sext73, ptr %blockret, align 4, !dbg !1745
  br label %expr_block.exit, !dbg !1745

next_if74:                                        ; preds = %result_block43
  br label %check_subtype75, !dbg !1746

check_subtype75:                                  ; preds = %parent_type_block77, %next_if74
  %69 = phi i64 [ %38, %next_if74 ], [ %typeid.parent79, %parent_type_block77 ], !dbg !1746
  %eq76 = icmp eq i64 ptrtoint (ptr @"$ct.int" to i64), %69, !dbg !1746
  br i1 %eq76, label %result_block80, label %parent_type_block77, !dbg !1746

parent_type_block77:                              ; preds = %check_subtype75
  %70 = inttoptr i64 %69 to ptr, !dbg !1746
  %ptradd78 = getelementptr inbounds i8, ptr %70, i64 8, !dbg !1746
  %typeid.parent79 = load i64, ptr %ptradd78, align 8, !dbg !1746
  %71 = icmp eq i64 %typeid.parent79, 0, !dbg !1746
  br i1 %71, label %result_block80, label %check_subtype75, !dbg !1746

result_block80:                                   ; preds = %parent_type_block77, %check_subtype75
  %72 = phi i1 [ false, %parent_type_block77 ], [ true, %check_subtype75 ], !dbg !1746
  br i1 %72, label %switch.case81, label %next_if116, !dbg !1746

switch.case81:                                    ; preds = %result_block80
    #dbg_declare(ptr %i, !1747, !DIExpression(), !1749)
  %73 = load ptr, ptr %v, align 8, !dbg !1749
  %checknull82 = icmp eq ptr %73, null, !dbg !1749
  %74 = call i1 @llvm.expect.i1(i1 %checknull82, i1 false), !dbg !1749
  br i1 %74, label %panic83, label %checkok87, !dbg !1749

checkok87:                                        ; preds = %switch.case81
  %75 = ptrtoint ptr %73 to i64, !dbg !1749
  %76 = urem i64 %75, 4, !dbg !1749
  %77 = icmp ne i64 %76, 0, !dbg !1749
  %78 = call i1 @llvm.expect.i1(i1 %77, i1 false), !dbg !1749
  br i1 %78, label %panic88, label %checkok98, !dbg !1749

checkok98:                                        ; preds = %checkok87
  %79 = load i32, ptr %73, align 4, !dbg !1749
  store i32 %79, ptr %i, align 4, !dbg !1749
  %80 = load i8, ptr %is_mixed_signed, align 1, !dbg !1750
  %81 = trunc i8 %80 to i1, !dbg !1750
  br i1 %81, label %and.rhs99, label %and.phi101, !dbg !1750

and.rhs99:                                        ; preds = %checkok98
  %82 = load i32, ptr %i, align 4, !dbg !1750
  %lt100 = icmp slt i32 %82, 0, !dbg !1750
  br label %and.phi101, !dbg !1750

and.phi101:                                       ; preds = %and.rhs99, %checkok98
  %val102 = phi i1 [ false, %checkok98 ], [ %lt100, %and.rhs99 ], !dbg !1750
  br i1 %val102, label %if.then103, label %if.exit104, !dbg !1750

if.then103:                                       ; preds = %and.phi101
  br label %else_block, !dbg !1750

if.exit104:                                       ; preds = %and.phi101
  %83 = load i32, ptr %i, align 4, !dbg !1751
  %84 = load i32, ptr %max, align 4, !dbg !1751
  %gt105 = icmp sgt i32 %83, %84, !dbg !1751
  %check106 = icmp sge i32 %84, 0, !dbg !1751
  %siui-gt107 = and i1 %check106, %gt105, !dbg !1751
  br i1 %siui-gt107, label %or.phi112, label %or.rhs108, !dbg !1751

or.rhs108:                                        ; preds = %if.exit104
  %85 = load i32, ptr %i, align 4, !dbg !1751
  %86 = load i32, ptr %min, align 4, !dbg !1751
  %lt109 = icmp slt i32 %85, %86, !dbg !1751
  %check110 = icmp slt i32 %86, 0, !dbg !1751
  %siui-lt111 = or i1 %check110, %lt109, !dbg !1751
  br label %or.phi112, !dbg !1751

or.phi112:                                        ; preds = %or.rhs108, %if.exit104
  %val113 = phi i1 [ true, %if.exit104 ], [ %siui-lt111, %or.rhs108 ], !dbg !1751
  br i1 %val113, label %if.then114, label %if.exit115, !dbg !1751

if.then114:                                       ; preds = %or.phi112
  br label %else_block, !dbg !1751

if.exit115:                                       ; preds = %or.phi112
  %87 = load i32, ptr %i, align 4, !dbg !1752
  store i32 %87, ptr %blockret, align 4, !dbg !1752
  br label %expr_block.exit, !dbg !1752

next_if116:                                       ; preds = %result_block80
  br label %check_subtype117, !dbg !1753

check_subtype117:                                 ; preds = %parent_type_block119, %next_if116
  %88 = phi i64 [ %38, %next_if116 ], [ %typeid.parent121, %parent_type_block119 ], !dbg !1753
  %eq118 = icmp eq i64 ptrtoint (ptr @"$ct.long" to i64), %88, !dbg !1753
  br i1 %eq118, label %result_block122, label %parent_type_block119, !dbg !1753

parent_type_block119:                             ; preds = %check_subtype117
  %89 = inttoptr i64 %88 to ptr, !dbg !1753
  %ptradd120 = getelementptr inbounds i8, ptr %89, i64 8, !dbg !1753
  %typeid.parent121 = load i64, ptr %ptradd120, align 8, !dbg !1753
  %90 = icmp eq i64 %typeid.parent121, 0, !dbg !1753
  br i1 %90, label %result_block122, label %check_subtype117, !dbg !1753

result_block122:                                  ; preds = %parent_type_block119, %check_subtype117
  %91 = phi i1 [ false, %parent_type_block119 ], [ true, %check_subtype117 ], !dbg !1753
  br i1 %91, label %switch.case123, label %next_if161, !dbg !1753

switch.case123:                                   ; preds = %result_block122
    #dbg_declare(ptr %l, !1754, !DIExpression(), !1756)
  %92 = load ptr, ptr %v, align 8, !dbg !1756
  %checknull124 = icmp eq ptr %92, null, !dbg !1756
  %93 = call i1 @llvm.expect.i1(i1 %checknull124, i1 false), !dbg !1756
  br i1 %93, label %panic125, label %checkok129, !dbg !1756

checkok129:                                       ; preds = %switch.case123
  %94 = ptrtoint ptr %92 to i64, !dbg !1756
  %95 = urem i64 %94, 8, !dbg !1756
  %96 = icmp ne i64 %95, 0, !dbg !1756
  %97 = call i1 @llvm.expect.i1(i1 %96, i1 false), !dbg !1756
  br i1 %97, label %panic130, label %checkok140, !dbg !1756

checkok140:                                       ; preds = %checkok129
  %98 = load i64, ptr %92, align 8, !dbg !1756
  store i64 %98, ptr %l, align 8, !dbg !1756
  %99 = load i8, ptr %is_mixed_signed, align 1, !dbg !1757
  %100 = trunc i8 %99 to i1, !dbg !1757
  br i1 %100, label %and.rhs141, label %and.phi143, !dbg !1757

and.rhs141:                                       ; preds = %checkok140
  %101 = load i64, ptr %l, align 8, !dbg !1757
  %lt142 = icmp slt i64 %101, 0, !dbg !1757
  br label %and.phi143, !dbg !1757

and.phi143:                                       ; preds = %and.rhs141, %checkok140
  %val144 = phi i1 [ false, %checkok140 ], [ %lt142, %and.rhs141 ], !dbg !1757
  br i1 %val144, label %if.then145, label %if.exit146, !dbg !1757

if.then145:                                       ; preds = %and.phi143
  br label %else_block, !dbg !1757

if.exit146:                                       ; preds = %and.phi143
  %102 = load i64, ptr %l, align 8, !dbg !1758
  %103 = load i32, ptr %max, align 4, !dbg !1758
  %zext147 = zext i32 %103 to i64, !dbg !1758
  %gt148 = icmp sgt i64 %102, %zext147, !dbg !1758
  %check149 = icmp sge i64 %zext147, 0, !dbg !1758
  %siui-gt150 = and i1 %check149, %gt148, !dbg !1758
  br i1 %siui-gt150, label %or.phi156, label %or.rhs151, !dbg !1758

or.rhs151:                                        ; preds = %if.exit146
  %104 = load i64, ptr %l, align 8, !dbg !1758
  %105 = load i32, ptr %min, align 4, !dbg !1758
  %zext152 = zext i32 %105 to i64, !dbg !1758
  %lt153 = icmp slt i64 %104, %zext152, !dbg !1758
  %check154 = icmp slt i64 %zext152, 0, !dbg !1758
  %siui-lt155 = or i1 %check154, %lt153, !dbg !1758
  br label %or.phi156, !dbg !1758

or.phi156:                                        ; preds = %or.rhs151, %if.exit146
  %val157 = phi i1 [ true, %if.exit146 ], [ %siui-lt155, %or.rhs151 ], !dbg !1758
  br i1 %val157, label %if.then158, label %if.exit159, !dbg !1758

if.then158:                                       ; preds = %or.phi156
  br label %else_block, !dbg !1758

if.exit159:                                       ; preds = %or.phi156
  %106 = load i64, ptr %l, align 8, !dbg !1759
  %trunc160 = trunc i64 %106 to i32, !dbg !1759
  store i32 %trunc160, ptr %blockret, align 4, !dbg !1759
  br label %expr_block.exit, !dbg !1759

next_if161:                                       ; preds = %result_block122
  br label %check_subtype162, !dbg !1760

check_subtype162:                                 ; preds = %parent_type_block164, %next_if161
  %107 = phi i64 [ %38, %next_if161 ], [ %typeid.parent166, %parent_type_block164 ], !dbg !1760
  %eq163 = icmp eq i64 ptrtoint (ptr @"$ct.int128" to i64), %107, !dbg !1760
  br i1 %eq163, label %result_block167, label %parent_type_block164, !dbg !1760

parent_type_block164:                             ; preds = %check_subtype162
  %108 = inttoptr i64 %107 to ptr, !dbg !1760
  %ptradd165 = getelementptr inbounds i8, ptr %108, i64 8, !dbg !1760
  %typeid.parent166 = load i64, ptr %ptradd165, align 8, !dbg !1760
  %109 = icmp eq i64 %typeid.parent166, 0, !dbg !1760
  br i1 %109, label %result_block167, label %check_subtype162, !dbg !1760

result_block167:                                  ; preds = %parent_type_block164, %check_subtype162
  %110 = phi i1 [ false, %parent_type_block164 ], [ true, %check_subtype162 ], !dbg !1760
  br i1 %110, label %switch.case168, label %next_if207, !dbg !1760

switch.case168:                                   ; preds = %result_block167
    #dbg_declare(ptr %i169, !1761, !DIExpression(), !1763)
  %111 = load ptr, ptr %v, align 8, !dbg !1763
  %checknull170 = icmp eq ptr %111, null, !dbg !1763
  %112 = call i1 @llvm.expect.i1(i1 %checknull170, i1 false), !dbg !1763
  br i1 %112, label %panic171, label %checkok175, !dbg !1763

checkok175:                                       ; preds = %switch.case168
  %113 = ptrtoint ptr %111 to i64, !dbg !1763
  %114 = urem i64 %113, 16, !dbg !1763
  %115 = icmp ne i64 %114, 0, !dbg !1763
  %116 = call i1 @llvm.expect.i1(i1 %115, i1 false), !dbg !1763
  br i1 %116, label %panic176, label %checkok186, !dbg !1763

checkok186:                                       ; preds = %checkok175
  %117 = load i128, ptr %111, align 16, !dbg !1763
  store i128 %117, ptr %i169, align 16, !dbg !1763
  %118 = load i8, ptr %is_mixed_signed, align 1, !dbg !1764
  %119 = trunc i8 %118 to i1, !dbg !1764
  br i1 %119, label %and.rhs187, label %and.phi189, !dbg !1764

and.rhs187:                                       ; preds = %checkok186
  %120 = load i128, ptr %i169, align 16, !dbg !1764
  %lt188 = icmp slt i128 %120, 0, !dbg !1764
  br label %and.phi189, !dbg !1764

and.phi189:                                       ; preds = %and.rhs187, %checkok186
  %val190 = phi i1 [ false, %checkok186 ], [ %lt188, %and.rhs187 ], !dbg !1764
  br i1 %val190, label %if.then191, label %if.exit192, !dbg !1764

if.then191:                                       ; preds = %and.phi189
  br label %else_block, !dbg !1764

if.exit192:                                       ; preds = %and.phi189
  %121 = load i128, ptr %i169, align 16, !dbg !1765
  %122 = load i32, ptr %max, align 4, !dbg !1765
  %zext193 = zext i32 %122 to i128, !dbg !1765
  %gt194 = icmp sgt i128 %121, %zext193, !dbg !1765
  %check195 = icmp sge i128 %zext193, 0, !dbg !1765
  %siui-gt196 = and i1 %check195, %gt194, !dbg !1765
  br i1 %siui-gt196, label %or.phi202, label %or.rhs197, !dbg !1765

or.rhs197:                                        ; preds = %if.exit192
  %123 = load i128, ptr %i169, align 16, !dbg !1765
  %124 = load i32, ptr %min, align 4, !dbg !1765
  %zext198 = zext i32 %124 to i128, !dbg !1765
  %lt199 = icmp slt i128 %123, %zext198, !dbg !1765
  %check200 = icmp slt i128 %zext198, 0, !dbg !1765
  %siui-lt201 = or i1 %check200, %lt199, !dbg !1765
  br label %or.phi202, !dbg !1765

or.phi202:                                        ; preds = %or.rhs197, %if.exit192
  %val203 = phi i1 [ true, %if.exit192 ], [ %siui-lt201, %or.rhs197 ], !dbg !1765
  br i1 %val203, label %if.then204, label %if.exit205, !dbg !1765

if.then204:                                       ; preds = %or.phi202
  br label %else_block, !dbg !1765

if.exit205:                                       ; preds = %or.phi202
  %125 = load i128, ptr %i169, align 16, !dbg !1766
  %trunc206 = trunc i128 %125 to i32, !dbg !1766
  store i32 %trunc206, ptr %blockret, align 4, !dbg !1766
  br label %expr_block.exit, !dbg !1766

next_if207:                                       ; preds = %result_block167
  br label %check_subtype208, !dbg !1767

check_subtype208:                                 ; preds = %parent_type_block210, %next_if207
  %126 = phi i64 [ %38, %next_if207 ], [ %typeid.parent212, %parent_type_block210 ], !dbg !1767
  %eq209 = icmp eq i64 ptrtoint (ptr @"$ct.char" to i64), %126, !dbg !1767
  br i1 %eq209, label %result_block213, label %parent_type_block210, !dbg !1767

parent_type_block210:                             ; preds = %check_subtype208
  %127 = inttoptr i64 %126 to ptr, !dbg !1767
  %ptradd211 = getelementptr inbounds i8, ptr %127, i64 8, !dbg !1767
  %typeid.parent212 = load i64, ptr %ptradd211, align 8, !dbg !1767
  %128 = icmp eq i64 %typeid.parent212, 0, !dbg !1767
  br i1 %128, label %result_block213, label %check_subtype208, !dbg !1767

result_block213:                                  ; preds = %parent_type_block210, %check_subtype208
  %129 = phi i1 [ false, %parent_type_block210 ], [ true, %check_subtype208 ], !dbg !1767
  br i1 %129, label %switch.case214, label %next_if227, !dbg !1767

switch.case214:                                   ; preds = %result_block213
    #dbg_declare(ptr %c215, !1768, !DIExpression(), !1770)
  %130 = load ptr, ptr %v, align 8, !dbg !1770
  %checknull216 = icmp eq ptr %130, null, !dbg !1770
  %131 = call i1 @llvm.expect.i1(i1 %checknull216, i1 false), !dbg !1770
  br i1 %131, label %panic217, label %checkok221, !dbg !1770

checkok221:                                       ; preds = %switch.case214
  %132 = load i8, ptr %130, align 1, !dbg !1770
  store i8 %132, ptr %c215, align 1, !dbg !1770
  %133 = load i8, ptr %c215, align 1, !dbg !1771
  %zext222 = zext i8 %133 to i32, !dbg !1771
  %134 = load i32, ptr %max, align 4, !dbg !1771
  %gt223 = icmp ugt i32 %zext222, %134, !dbg !1771
  br i1 %gt223, label %if.then224, label %if.exit225, !dbg !1771

if.then224:                                       ; preds = %checkok221
  br label %else_block, !dbg !1771

if.exit225:                                       ; preds = %checkok221
  %135 = load i8, ptr %c215, align 1, !dbg !1772
  %zext226 = zext i8 %135 to i32, !dbg !1772
  store i32 %zext226, ptr %blockret, align 4, !dbg !1772
  br label %expr_block.exit, !dbg !1772

next_if227:                                       ; preds = %result_block213
  br label %check_subtype228, !dbg !1773

check_subtype228:                                 ; preds = %parent_type_block230, %next_if227
  %136 = phi i64 [ %38, %next_if227 ], [ %typeid.parent232, %parent_type_block230 ], !dbg !1773
  %eq229 = icmp eq i64 ptrtoint (ptr @"$ct.ushort" to i64), %136, !dbg !1773
  br i1 %eq229, label %result_block233, label %parent_type_block230, !dbg !1773

parent_type_block230:                             ; preds = %check_subtype228
  %137 = inttoptr i64 %136 to ptr, !dbg !1773
  %ptradd231 = getelementptr inbounds i8, ptr %137, i64 8, !dbg !1773
  %typeid.parent232 = load i64, ptr %ptradd231, align 8, !dbg !1773
  %138 = icmp eq i64 %typeid.parent232, 0, !dbg !1773
  br i1 %138, label %result_block233, label %check_subtype228, !dbg !1773

result_block233:                                  ; preds = %parent_type_block230, %check_subtype228
  %139 = phi i1 [ false, %parent_type_block230 ], [ true, %check_subtype228 ], !dbg !1773
  br i1 %139, label %switch.case234, label %next_if263, !dbg !1773

switch.case234:                                   ; preds = %result_block233
    #dbg_declare(ptr %s235, !1774, !DIExpression(), !1776)
  %140 = load ptr, ptr %v, align 8, !dbg !1776
  %checknull236 = icmp eq ptr %140, null, !dbg !1776
  %141 = call i1 @llvm.expect.i1(i1 %checknull236, i1 false), !dbg !1776
  br i1 %141, label %panic237, label %checkok241, !dbg !1776

checkok241:                                       ; preds = %switch.case234
  %142 = ptrtoint ptr %140 to i64, !dbg !1776
  %143 = urem i64 %142, 2, !dbg !1776
  %144 = icmp ne i64 %143, 0, !dbg !1776
  %145 = call i1 @llvm.expect.i1(i1 %144, i1 false), !dbg !1776
  br i1 %145, label %panic242, label %checkok252, !dbg !1776

checkok252:                                       ; preds = %checkok241
  %146 = load i16, ptr %140, align 2, !dbg !1776
  store i16 %146, ptr %s235, align 2, !dbg !1776
  %147 = load i16, ptr %s235, align 2, !dbg !1777
  %zext253 = zext i16 %147 to i32, !dbg !1777
  %148 = load i32, ptr %max, align 4, !dbg !1777
  %gt254 = icmp ugt i32 %zext253, %148, !dbg !1777
  br i1 %gt254, label %or.phi258, label %or.rhs255, !dbg !1777

or.rhs255:                                        ; preds = %checkok252
  %149 = load i16, ptr %s235, align 2, !dbg !1777
  %zext256 = zext i16 %149 to i32, !dbg !1777
  %150 = load i32, ptr %min, align 4, !dbg !1777
  %lt257 = icmp ult i32 %zext256, %150, !dbg !1777
  br label %or.phi258, !dbg !1777

or.phi258:                                        ; preds = %or.rhs255, %checkok252
  %val259 = phi i1 [ true, %checkok252 ], [ %lt257, %or.rhs255 ], !dbg !1777
  br i1 %val259, label %if.then260, label %if.exit261, !dbg !1777

if.then260:                                       ; preds = %or.phi258
  br label %else_block, !dbg !1777

if.exit261:                                       ; preds = %or.phi258
  %151 = load i16, ptr %s235, align 2, !dbg !1778
  %zext262 = zext i16 %151 to i32, !dbg !1778
  store i32 %zext262, ptr %blockret, align 4, !dbg !1778
  br label %expr_block.exit, !dbg !1778

next_if263:                                       ; preds = %result_block233
  br label %check_subtype264, !dbg !1779

check_subtype264:                                 ; preds = %parent_type_block266, %next_if263
  %152 = phi i64 [ %38, %next_if263 ], [ %typeid.parent268, %parent_type_block266 ], !dbg !1779
  %eq265 = icmp eq i64 ptrtoint (ptr @"$ct.uint" to i64), %152, !dbg !1779
  br i1 %eq265, label %result_block269, label %parent_type_block266, !dbg !1779

parent_type_block266:                             ; preds = %check_subtype264
  %153 = inttoptr i64 %152 to ptr, !dbg !1779
  %ptradd267 = getelementptr inbounds i8, ptr %153, i64 8, !dbg !1779
  %typeid.parent268 = load i64, ptr %ptradd267, align 8, !dbg !1779
  %154 = icmp eq i64 %typeid.parent268, 0, !dbg !1779
  br i1 %154, label %result_block269, label %check_subtype264, !dbg !1779

result_block269:                                  ; preds = %parent_type_block266, %check_subtype264
  %155 = phi i1 [ false, %parent_type_block266 ], [ true, %check_subtype264 ], !dbg !1779
  br i1 %155, label %switch.case270, label %next_if296, !dbg !1779

switch.case270:                                   ; preds = %result_block269
    #dbg_declare(ptr %i271, !1780, !DIExpression(), !1782)
  %156 = load ptr, ptr %v, align 8, !dbg !1782
  %checknull272 = icmp eq ptr %156, null, !dbg !1782
  %157 = call i1 @llvm.expect.i1(i1 %checknull272, i1 false), !dbg !1782
  br i1 %157, label %panic273, label %checkok277, !dbg !1782

checkok277:                                       ; preds = %switch.case270
  %158 = ptrtoint ptr %156 to i64, !dbg !1782
  %159 = urem i64 %158, 4, !dbg !1782
  %160 = icmp ne i64 %159, 0, !dbg !1782
  %161 = call i1 @llvm.expect.i1(i1 %160, i1 false), !dbg !1782
  br i1 %161, label %panic278, label %checkok288, !dbg !1782

checkok288:                                       ; preds = %checkok277
  %162 = load i32, ptr %156, align 4, !dbg !1782
  store i32 %162, ptr %i271, align 4, !dbg !1782
  %163 = load i32, ptr %i271, align 4, !dbg !1783
  %164 = load i32, ptr %max, align 4, !dbg !1783
  %gt289 = icmp ugt i32 %163, %164, !dbg !1783
  br i1 %gt289, label %or.phi292, label %or.rhs290, !dbg !1783

or.rhs290:                                        ; preds = %checkok288
  %165 = load i32, ptr %i271, align 4, !dbg !1783
  %166 = load i32, ptr %min, align 4, !dbg !1783
  %lt291 = icmp ult i32 %165, %166, !dbg !1783
  br label %or.phi292, !dbg !1783

or.phi292:                                        ; preds = %or.rhs290, %checkok288
  %val293 = phi i1 [ true, %checkok288 ], [ %lt291, %or.rhs290 ], !dbg !1783
  br i1 %val293, label %if.then294, label %if.exit295, !dbg !1783

if.then294:                                       ; preds = %or.phi292
  br label %else_block, !dbg !1783

if.exit295:                                       ; preds = %or.phi292
  %167 = load i32, ptr %i271, align 4, !dbg !1784
  store i32 %167, ptr %blockret, align 4, !dbg !1784
  br label %expr_block.exit, !dbg !1784

next_if296:                                       ; preds = %result_block269
  br label %check_subtype297, !dbg !1785

check_subtype297:                                 ; preds = %parent_type_block299, %next_if296
  %168 = phi i64 [ %38, %next_if296 ], [ %typeid.parent301, %parent_type_block299 ], !dbg !1785
  %eq298 = icmp eq i64 ptrtoint (ptr @"$ct.ulong" to i64), %168, !dbg !1785
  br i1 %eq298, label %result_block302, label %parent_type_block299, !dbg !1785

parent_type_block299:                             ; preds = %check_subtype297
  %169 = inttoptr i64 %168 to ptr, !dbg !1785
  %ptradd300 = getelementptr inbounds i8, ptr %169, i64 8, !dbg !1785
  %typeid.parent301 = load i64, ptr %ptradd300, align 8, !dbg !1785
  %170 = icmp eq i64 %typeid.parent301, 0, !dbg !1785
  br i1 %170, label %result_block302, label %check_subtype297, !dbg !1785

result_block302:                                  ; preds = %parent_type_block299, %check_subtype297
  %171 = phi i1 [ false, %parent_type_block299 ], [ true, %check_subtype297 ], !dbg !1785
  br i1 %171, label %switch.case303, label %next_if332, !dbg !1785

switch.case303:                                   ; preds = %result_block302
    #dbg_declare(ptr %l304, !1786, !DIExpression(), !1788)
  %172 = load ptr, ptr %v, align 8, !dbg !1788
  %checknull305 = icmp eq ptr %172, null, !dbg !1788
  %173 = call i1 @llvm.expect.i1(i1 %checknull305, i1 false), !dbg !1788
  br i1 %173, label %panic306, label %checkok310, !dbg !1788

checkok310:                                       ; preds = %switch.case303
  %174 = ptrtoint ptr %172 to i64, !dbg !1788
  %175 = urem i64 %174, 8, !dbg !1788
  %176 = icmp ne i64 %175, 0, !dbg !1788
  %177 = call i1 @llvm.expect.i1(i1 %176, i1 false), !dbg !1788
  br i1 %177, label %panic311, label %checkok321, !dbg !1788

checkok321:                                       ; preds = %checkok310
  %178 = load i64, ptr %172, align 8, !dbg !1788
  store i64 %178, ptr %l304, align 8, !dbg !1788
  %179 = load i64, ptr %l304, align 8, !dbg !1789
  %180 = load i32, ptr %max, align 4, !dbg !1789
  %zext322 = zext i32 %180 to i64, !dbg !1789
  %gt323 = icmp ugt i64 %179, %zext322, !dbg !1789
  br i1 %gt323, label %or.phi327, label %or.rhs324, !dbg !1789

or.rhs324:                                        ; preds = %checkok321
  %181 = load i64, ptr %l304, align 8, !dbg !1789
  %182 = load i32, ptr %min, align 4, !dbg !1789
  %zext325 = zext i32 %182 to i64, !dbg !1789
  %lt326 = icmp ult i64 %181, %zext325, !dbg !1789
  br label %or.phi327, !dbg !1789

or.phi327:                                        ; preds = %or.rhs324, %checkok321
  %val328 = phi i1 [ true, %checkok321 ], [ %lt326, %or.rhs324 ], !dbg !1789
  br i1 %val328, label %if.then329, label %if.exit330, !dbg !1789

if.then329:                                       ; preds = %or.phi327
  br label %else_block, !dbg !1789

if.exit330:                                       ; preds = %or.phi327
  %183 = load i64, ptr %l304, align 8, !dbg !1790
  %trunc331 = trunc i64 %183 to i32, !dbg !1790
  store i32 %trunc331, ptr %blockret, align 4, !dbg !1790
  br label %expr_block.exit, !dbg !1790

next_if332:                                       ; preds = %result_block302
  br label %check_subtype333, !dbg !1791

check_subtype333:                                 ; preds = %parent_type_block335, %next_if332
  %184 = phi i64 [ %38, %next_if332 ], [ %typeid.parent337, %parent_type_block335 ], !dbg !1791
  %eq334 = icmp eq i64 ptrtoint (ptr @"$ct.uint128" to i64), %184, !dbg !1791
  br i1 %eq334, label %result_block338, label %parent_type_block335, !dbg !1791

parent_type_block335:                             ; preds = %check_subtype333
  %185 = inttoptr i64 %184 to ptr, !dbg !1791
  %ptradd336 = getelementptr inbounds i8, ptr %185, i64 8, !dbg !1791
  %typeid.parent337 = load i64, ptr %ptradd336, align 8, !dbg !1791
  %186 = icmp eq i64 %typeid.parent337, 0, !dbg !1791
  br i1 %186, label %result_block338, label %check_subtype333, !dbg !1791

result_block338:                                  ; preds = %parent_type_block335, %check_subtype333
  %187 = phi i1 [ false, %parent_type_block335 ], [ true, %check_subtype333 ], !dbg !1791
  br i1 %187, label %switch.case339, label %next_if368, !dbg !1791

switch.case339:                                   ; preds = %result_block338
    #dbg_declare(ptr %i340, !1792, !DIExpression(), !1794)
  %188 = load ptr, ptr %v, align 8, !dbg !1794
  %checknull341 = icmp eq ptr %188, null, !dbg !1794
  %189 = call i1 @llvm.expect.i1(i1 %checknull341, i1 false), !dbg !1794
  br i1 %189, label %panic342, label %checkok346, !dbg !1794

checkok346:                                       ; preds = %switch.case339
  %190 = ptrtoint ptr %188 to i64, !dbg !1794
  %191 = urem i64 %190, 16, !dbg !1794
  %192 = icmp ne i64 %191, 0, !dbg !1794
  %193 = call i1 @llvm.expect.i1(i1 %192, i1 false), !dbg !1794
  br i1 %193, label %panic347, label %checkok357, !dbg !1794

checkok357:                                       ; preds = %checkok346
  %194 = load i128, ptr %188, align 16, !dbg !1794
  store i128 %194, ptr %i340, align 16, !dbg !1794
  %195 = load i128, ptr %i340, align 16, !dbg !1795
  %196 = load i32, ptr %max, align 4, !dbg !1795
  %zext358 = zext i32 %196 to i128, !dbg !1795
  %gt359 = icmp ugt i128 %195, %zext358, !dbg !1795
  br i1 %gt359, label %or.phi363, label %or.rhs360, !dbg !1795

or.rhs360:                                        ; preds = %checkok357
  %197 = load i128, ptr %i340, align 16, !dbg !1795
  %198 = load i32, ptr %min, align 4, !dbg !1795
  %zext361 = zext i32 %198 to i128, !dbg !1795
  %lt362 = icmp ult i128 %197, %zext361, !dbg !1795
  br label %or.phi363, !dbg !1795

or.phi363:                                        ; preds = %or.rhs360, %checkok357
  %val364 = phi i1 [ true, %checkok357 ], [ %lt362, %or.rhs360 ], !dbg !1795
  br i1 %val364, label %if.then365, label %if.exit366, !dbg !1795

if.then365:                                       ; preds = %or.phi363
  br label %else_block, !dbg !1795

if.exit366:                                       ; preds = %or.phi363
  %199 = load i128, ptr %i340, align 16, !dbg !1796
  %trunc367 = trunc i128 %199 to i32, !dbg !1796
  store i32 %trunc367, ptr %blockret, align 4, !dbg !1796
  br label %expr_block.exit, !dbg !1796

next_if368:                                       ; preds = %result_block338
  br label %switch.default, !dbg !1796

switch.default:                                   ; preds = %next_if368
  store %"char[]" { ptr @.str.174, i64 30 }, ptr %string, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg369, ptr align 8 %string, i32 16, i1 false)
  store %"char[]" { ptr @.str.175, i64 20 }, ptr %indirectarg370, align 8
  store %"char[]" { ptr @.str.176, i64 18 }, ptr %indirectarg371, align 8
  store %"any[]" zeroinitializer, ptr %indirectarg372, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg369, ptr align 8 %indirectarg370, ptr align 8 %indirectarg371, i32 634, ptr align 8 %indirectarg372), !dbg !1797
  unreachable, !dbg !1797

expr_block.exit:                                  ; preds = %if.exit366, %if.exit330, %if.exit295, %if.exit261, %if.exit225, %if.exit205, %if.exit159, %if.exit115, %if.exit72, %if.exit36
  %200 = load i32, ptr %blockret, align 4, !dbg !1797
  br label %phi_block, !dbg !1797

else_block:                                       ; preds = %if.then365, %if.then329, %if.then294, %if.then260, %if.then224, %if.then204, %if.then191, %if.then158, %if.then145, %if.then114, %if.then103, %if.then71, %if.then64, %if.then
  br label %phi_block, !dbg !1717

phi_block:                                        ; preds = %else_block, %expr_block.exit
  %val373 = phi i32 [ %200, %expr_block.exit ], [ 65533, %else_block ], !dbg !1717
  store i32 %val373, ptr %c, align 4, !dbg !1717
  store i8 1, ptr %switch374, align 1
  br label %switch.entry375

switch.entry375:                                  ; preds = %phi_block
  %201 = load i8, ptr %switch374, align 1
  %202 = trunc i8 %201 to i1
  %203 = load i32, ptr %c, align 4, !dbg !1801
  %lt376 = icmp ult i32 %203, 127, !dbg !1801
  %eq377 = icmp eq i1 %lt376, %202, !dbg !1801
  br i1 %eq377, label %switch.case378, label %next_if387, !dbg !1801

switch.case378:                                   ; preds = %switch.entry375
  %204 = load i32, ptr %c, align 4, !dbg !1803
  %trunc380 = trunc i32 %204 to i8, !dbg !1803
  %205 = load ptr, ptr %self, align 8
  %206 = call i64 @std.io.Formatter.out(ptr %retparam381, ptr %205, i8 %trunc380), !dbg !1803
  %not_err382 = icmp eq i64 %206, 0, !dbg !1803
  %207 = call i1 @llvm.expect.i1(i1 %not_err382, i1 true), !dbg !1803
  br i1 %207, label %after_check384, label %assign_optional383, !dbg !1803

assign_optional383:                               ; preds = %switch.case378
  store i64 %206, ptr %error_var379, align 8, !dbg !1803
  br label %guard_block385, !dbg !1803

after_check384:                                   ; preds = %switch.case378
  br label %noerr_block386, !dbg !1803

guard_block385:                                   ; preds = %assign_optional383
  %208 = load i64, ptr %error_var379, align 8, !dbg !1803
  ret i64 %208, !dbg !1803

noerr_block386:                                   ; preds = %after_check384
  br label %switch.exit, !dbg !1803

next_if387:                                       ; preds = %switch.entry375
  %209 = load i32, ptr %c, align 4, !dbg !1805
  %lt388 = icmp ult i32 %209, 2047, !dbg !1805
  %eq389 = icmp eq i1 %lt388, %202, !dbg !1805
  br i1 %eq389, label %switch.case390, label %next_if408, !dbg !1805

switch.case390:                                   ; preds = %next_if387
  %210 = load i32, ptr %c, align 4, !dbg !1806
  %lshr = lshr i32 %210, 6, !dbg !1806
  %211 = freeze i32 %lshr, !dbg !1806
  %or = or i32 192, %211, !dbg !1806
  %trunc392 = trunc i32 %or to i8, !dbg !1806
  %212 = load ptr, ptr %self, align 8
  %213 = call i64 @std.io.Formatter.out(ptr %retparam393, ptr %212, i8 %trunc392), !dbg !1806
  %not_err394 = icmp eq i64 %213, 0, !dbg !1806
  %214 = call i1 @llvm.expect.i1(i1 %not_err394, i1 true), !dbg !1806
  br i1 %214, label %after_check396, label %assign_optional395, !dbg !1806

assign_optional395:                               ; preds = %switch.case390
  store i64 %213, ptr %error_var391, align 8, !dbg !1806
  br label %guard_block397, !dbg !1806

after_check396:                                   ; preds = %switch.case390
  br label %noerr_block398, !dbg !1806

guard_block397:                                   ; preds = %assign_optional395
  %215 = load i64, ptr %error_var391, align 8, !dbg !1806
  ret i64 %215, !dbg !1806

noerr_block398:                                   ; preds = %after_check396
  %216 = load i32, ptr %c, align 4, !dbg !1808
  %and = and i32 %216, 63, !dbg !1808
  %or400 = or i32 128, %and, !dbg !1808
  %trunc401 = trunc i32 %or400 to i8, !dbg !1808
  %217 = load ptr, ptr %self, align 8
  %218 = call i64 @std.io.Formatter.out(ptr %retparam402, ptr %217, i8 %trunc401), !dbg !1808
  %not_err403 = icmp eq i64 %218, 0, !dbg !1808
  %219 = call i1 @llvm.expect.i1(i1 %not_err403, i1 true), !dbg !1808
  br i1 %219, label %after_check405, label %assign_optional404, !dbg !1808

assign_optional404:                               ; preds = %noerr_block398
  store i64 %218, ptr %error_var399, align 8, !dbg !1808
  br label %guard_block406, !dbg !1808

after_check405:                                   ; preds = %noerr_block398
  br label %noerr_block407, !dbg !1808

guard_block406:                                   ; preds = %assign_optional404
  %220 = load i64, ptr %error_var399, align 8, !dbg !1808
  ret i64 %220, !dbg !1808

noerr_block407:                                   ; preds = %after_check405
  br label %switch.exit, !dbg !1808

next_if408:                                       ; preds = %next_if387
  %221 = load i32, ptr %c, align 4, !dbg !1809
  %lt409 = icmp ult i32 %221, 65535, !dbg !1809
  %eq410 = icmp eq i1 %lt409, %202, !dbg !1809
  br i1 %eq410, label %switch.case411, label %next_if443, !dbg !1809

switch.case411:                                   ; preds = %next_if408
  %222 = load i32, ptr %c, align 4, !dbg !1810
  %lshr413 = lshr i32 %222, 12, !dbg !1810
  %223 = freeze i32 %lshr413, !dbg !1810
  %or414 = or i32 224, %223, !dbg !1810
  %trunc415 = trunc i32 %or414 to i8, !dbg !1810
  %224 = load ptr, ptr %self, align 8
  %225 = call i64 @std.io.Formatter.out(ptr %retparam416, ptr %224, i8 %trunc415), !dbg !1810
  %not_err417 = icmp eq i64 %225, 0, !dbg !1810
  %226 = call i1 @llvm.expect.i1(i1 %not_err417, i1 true), !dbg !1810
  br i1 %226, label %after_check419, label %assign_optional418, !dbg !1810

assign_optional418:                               ; preds = %switch.case411
  store i64 %225, ptr %error_var412, align 8, !dbg !1810
  br label %guard_block420, !dbg !1810

after_check419:                                   ; preds = %switch.case411
  br label %noerr_block421, !dbg !1810

guard_block420:                                   ; preds = %assign_optional418
  %227 = load i64, ptr %error_var412, align 8, !dbg !1810
  ret i64 %227, !dbg !1810

noerr_block421:                                   ; preds = %after_check419
  %228 = load i32, ptr %c, align 4, !dbg !1812
  %lshr423 = lshr i32 %228, 6, !dbg !1812
  %229 = freeze i32 %lshr423, !dbg !1812
  %and424 = and i32 %229, 63, !dbg !1812
  %or425 = or i32 128, %and424, !dbg !1812
  %trunc426 = trunc i32 %or425 to i8, !dbg !1812
  %230 = load ptr, ptr %self, align 8
  %231 = call i64 @std.io.Formatter.out(ptr %retparam427, ptr %230, i8 %trunc426), !dbg !1812
  %not_err428 = icmp eq i64 %231, 0, !dbg !1812
  %232 = call i1 @llvm.expect.i1(i1 %not_err428, i1 true), !dbg !1812
  br i1 %232, label %after_check430, label %assign_optional429, !dbg !1812

assign_optional429:                               ; preds = %noerr_block421
  store i64 %231, ptr %error_var422, align 8, !dbg !1812
  br label %guard_block431, !dbg !1812

after_check430:                                   ; preds = %noerr_block421
  br label %noerr_block432, !dbg !1812

guard_block431:                                   ; preds = %assign_optional429
  %233 = load i64, ptr %error_var422, align 8, !dbg !1812
  ret i64 %233, !dbg !1812

noerr_block432:                                   ; preds = %after_check430
  %234 = load i32, ptr %c, align 4, !dbg !1813
  %and434 = and i32 %234, 63, !dbg !1813
  %or435 = or i32 128, %and434, !dbg !1813
  %trunc436 = trunc i32 %or435 to i8, !dbg !1813
  %235 = load ptr, ptr %self, align 8
  %236 = call i64 @std.io.Formatter.out(ptr %retparam437, ptr %235, i8 %trunc436), !dbg !1813
  %not_err438 = icmp eq i64 %236, 0, !dbg !1813
  %237 = call i1 @llvm.expect.i1(i1 %not_err438, i1 true), !dbg !1813
  br i1 %237, label %after_check440, label %assign_optional439, !dbg !1813

assign_optional439:                               ; preds = %noerr_block432
  store i64 %236, ptr %error_var433, align 8, !dbg !1813
  br label %guard_block441, !dbg !1813

after_check440:                                   ; preds = %noerr_block432
  br label %noerr_block442, !dbg !1813

guard_block441:                                   ; preds = %assign_optional439
  %238 = load i64, ptr %error_var433, align 8, !dbg !1813
  ret i64 %238, !dbg !1813

noerr_block442:                                   ; preds = %after_check440
  br label %switch.exit, !dbg !1813

next_if443:                                       ; preds = %next_if408
  br label %switch.default444, !dbg !1813

switch.default444:                                ; preds = %next_if443
  %239 = load i32, ptr %c, align 4, !dbg !1814
  %lshr446 = lshr i32 %239, 18, !dbg !1814
  %240 = freeze i32 %lshr446, !dbg !1814
  %or447 = or i32 240, %240, !dbg !1814
  %trunc448 = trunc i32 %or447 to i8, !dbg !1814
  %241 = load ptr, ptr %self, align 8
  %242 = call i64 @std.io.Formatter.out(ptr %retparam449, ptr %241, i8 %trunc448), !dbg !1814
  %not_err450 = icmp eq i64 %242, 0, !dbg !1814
  %243 = call i1 @llvm.expect.i1(i1 %not_err450, i1 true), !dbg !1814
  br i1 %243, label %after_check452, label %assign_optional451, !dbg !1814

assign_optional451:                               ; preds = %switch.default444
  store i64 %242, ptr %error_var445, align 8, !dbg !1814
  br label %guard_block453, !dbg !1814

after_check452:                                   ; preds = %switch.default444
  br label %noerr_block454, !dbg !1814

guard_block453:                                   ; preds = %assign_optional451
  %244 = load i64, ptr %error_var445, align 8, !dbg !1814
  ret i64 %244, !dbg !1814

noerr_block454:                                   ; preds = %after_check452
  %245 = load i32, ptr %c, align 4, !dbg !1816
  %lshr456 = lshr i32 %245, 12, !dbg !1816
  %246 = freeze i32 %lshr456, !dbg !1816
  %and457 = and i32 %246, 63, !dbg !1816
  %or458 = or i32 128, %and457, !dbg !1816
  %trunc459 = trunc i32 %or458 to i8, !dbg !1816
  %247 = load ptr, ptr %self, align 8
  %248 = call i64 @std.io.Formatter.out(ptr %retparam460, ptr %247, i8 %trunc459), !dbg !1816
  %not_err461 = icmp eq i64 %248, 0, !dbg !1816
  %249 = call i1 @llvm.expect.i1(i1 %not_err461, i1 true), !dbg !1816
  br i1 %249, label %after_check463, label %assign_optional462, !dbg !1816

assign_optional462:                               ; preds = %noerr_block454
  store i64 %248, ptr %error_var455, align 8, !dbg !1816
  br label %guard_block464, !dbg !1816

after_check463:                                   ; preds = %noerr_block454
  br label %noerr_block465, !dbg !1816

guard_block464:                                   ; preds = %assign_optional462
  %250 = load i64, ptr %error_var455, align 8, !dbg !1816
  ret i64 %250, !dbg !1816

noerr_block465:                                   ; preds = %after_check463
  %251 = load i32, ptr %c, align 4, !dbg !1817
  %lshr467 = lshr i32 %251, 6, !dbg !1817
  %252 = freeze i32 %lshr467, !dbg !1817
  %and468 = and i32 %252, 63, !dbg !1817
  %or469 = or i32 128, %and468, !dbg !1817
  %trunc470 = trunc i32 %or469 to i8, !dbg !1817
  %253 = load ptr, ptr %self, align 8
  %254 = call i64 @std.io.Formatter.out(ptr %retparam471, ptr %253, i8 %trunc470), !dbg !1817
  %not_err472 = icmp eq i64 %254, 0, !dbg !1817
  %255 = call i1 @llvm.expect.i1(i1 %not_err472, i1 true), !dbg !1817
  br i1 %255, label %after_check474, label %assign_optional473, !dbg !1817

assign_optional473:                               ; preds = %noerr_block465
  store i64 %254, ptr %error_var466, align 8, !dbg !1817
  br label %guard_block475, !dbg !1817

after_check474:                                   ; preds = %noerr_block465
  br label %noerr_block476, !dbg !1817

guard_block475:                                   ; preds = %assign_optional473
  %256 = load i64, ptr %error_var466, align 8, !dbg !1817
  ret i64 %256, !dbg !1817

noerr_block476:                                   ; preds = %after_check474
  %257 = load i32, ptr %c, align 4, !dbg !1818
  %and478 = and i32 %257, 63, !dbg !1818
  %or479 = or i32 128, %and478, !dbg !1818
  %trunc480 = trunc i32 %or479 to i8, !dbg !1818
  %258 = load ptr, ptr %self, align 8
  %259 = call i64 @std.io.Formatter.out(ptr %retparam481, ptr %258, i8 %trunc480), !dbg !1818
  %not_err482 = icmp eq i64 %259, 0, !dbg !1818
  %260 = call i1 @llvm.expect.i1(i1 %not_err482, i1 true), !dbg !1818
  br i1 %260, label %after_check484, label %assign_optional483, !dbg !1818

assign_optional483:                               ; preds = %noerr_block476
  store i64 %259, ptr %error_var477, align 8, !dbg !1818
  br label %guard_block485, !dbg !1818

after_check484:                                   ; preds = %noerr_block476
  br label %noerr_block486, !dbg !1818

guard_block485:                                   ; preds = %assign_optional483
  %261 = load i64, ptr %error_var477, align 8, !dbg !1818
  ret i64 %261, !dbg !1818

noerr_block486:                                   ; preds = %after_check484
  br label %switch.exit, !dbg !1818

switch.exit:                                      ; preds = %noerr_block486, %noerr_block442, %noerr_block407, %noerr_block386
  %262 = load ptr, ptr %self, align 8, !dbg !1819
  %ptradd487 = getelementptr inbounds i8, ptr %262, i64 16, !dbg !1819
  %263 = load i32, ptr %ptradd487, align 8, !dbg !1819
  %lshrl488 = lshr i32 %263, 1, !dbg !1819
  %264 = and i32 1, %lshrl488, !dbg !1819
  %trunc489 = trunc i32 %264 to i8, !dbg !1819
  %265 = trunc i8 %trunc489 to i1, !dbg !1819
  br i1 %265, label %if.then490, label %if.exit502, !dbg !1819

if.then490:                                       ; preds = %switch.exit
  %266 = load i64, ptr %len, align 8, !dbg !1820
  %267 = load ptr, ptr %self, align 8, !dbg !1820
  %ptradd492 = getelementptr inbounds i8, ptr %267, i64 16, !dbg !1820
  %ptradd493 = getelementptr inbounds i8, ptr %ptradd492, i64 4, !dbg !1820
  %268 = load i32, ptr %ptradd493, align 4, !dbg !1820
  %zext494 = zext i32 %268 to i64, !dbg !1820
  %269 = load i64, ptr %len, align 8, !dbg !1820
  %270 = load ptr, ptr %self, align 8
  %271 = call i64 @std.io.Formatter.pad(ptr %retparam495, ptr %270, i8 32, i64 %zext494, i64 %269) #6, !dbg !1820
  %not_err496 = icmp eq i64 %271, 0, !dbg !1820
  %272 = call i1 @llvm.expect.i1(i1 %not_err496, i1 true), !dbg !1820
  br i1 %272, label %after_check498, label %assign_optional497, !dbg !1820

assign_optional497:                               ; preds = %if.then490
  store i64 %271, ptr %error_var491, align 8, !dbg !1820
  br label %guard_block499, !dbg !1820

after_check498:                                   ; preds = %if.then490
  br label %noerr_block500, !dbg !1820

guard_block499:                                   ; preds = %assign_optional497
  %273 = load i64, ptr %error_var491, align 8, !dbg !1820
  ret i64 %273, !dbg !1820

noerr_block500:                                   ; preds = %after_check498
  %274 = load i64, ptr %retparam495, align 8, !dbg !1820
  %add501 = add i64 %266, %274, !dbg !1820
  store i64 %add501, ptr %len, align 8, !dbg !1820
  br label %if.exit502, !dbg !1820

if.exit502:                                       ; preds = %noerr_block500, %switch.exit
  %275 = load i64, ptr %len, align 8, !dbg !1822
  store i64 %275, ptr %0, align 8, !dbg !1822
  ret i64 0, !dbg !1822

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.172, i64 8 }, ptr %indirectarg2, align 8
  %276 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %276(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 620) #5, !dbg !1705
  unreachable, !dbg !1705

panic31:                                          ; preds = %switch.case
  store %"char[]" { ptr @.panic_msg.56, i64 53 }, ptr %indirectarg32, align 8
  store %"char[]" { ptr @.file.54, i64 8 }, ptr %indirectarg33, align 8
  store %"char[]" { ptr @.func.172, i64 8 }, ptr %indirectarg34, align 8
  %277 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %277(ptr align 8 %indirectarg32, ptr align 8 %indirectarg33, ptr align 8 %indirectarg34, i32 31) #5, !dbg !1736
  unreachable, !dbg !1736

panic46:                                          ; preds = %switch.case44
  store %"char[]" { ptr @.panic_msg.57, i64 54 }, ptr %indirectarg47, align 8
  store %"char[]" { ptr @.file.54, i64 8 }, ptr %indirectarg48, align 8
  store %"char[]" { ptr @.func.172, i64 8 }, ptr %indirectarg49, align 8
  %278 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %278(ptr align 8 %indirectarg47, ptr align 8 %indirectarg48, ptr align 8 %indirectarg49, i32 35) #5, !dbg !1742
  unreachable, !dbg !1742

panic51:                                          ; preds = %checkok50
  store i64 2, ptr %taddr, align 8
  %279 = insertvalue %any undef, ptr %taddr, 0
  %280 = insertvalue %any %279, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %57, ptr %taddr52, align 8
  %281 = insertvalue %any undef, ptr %taddr52, 0
  %282 = insertvalue %any %281, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg53, align 8
  store %"char[]" { ptr @.file.54, i64 8 }, ptr %indirectarg54, align 8
  store %"char[]" { ptr @.func.172, i64 8 }, ptr %indirectarg55, align 8
  store %any %280, ptr %varargslots, align 16
  %ptradd56 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %282, ptr %ptradd56, align 16
  %283 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %283, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg57, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg53, ptr align 8 %indirectarg54, ptr align 8 %indirectarg55, i32 35, ptr align 8 %indirectarg57) #5, !dbg !1742
  unreachable, !dbg !1742

panic83:                                          ; preds = %switch.case81
  store %"char[]" { ptr @.panic_msg.58, i64 52 }, ptr %indirectarg84, align 8
  store %"char[]" { ptr @.file.54, i64 8 }, ptr %indirectarg85, align 8
  store %"char[]" { ptr @.func.172, i64 8 }, ptr %indirectarg86, align 8
  %284 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %284(ptr align 8 %indirectarg84, ptr align 8 %indirectarg85, ptr align 8 %indirectarg86, i32 40) #5, !dbg !1749
  unreachable, !dbg !1749

panic88:                                          ; preds = %checkok87
  store i64 4, ptr %taddr89, align 8
  %285 = insertvalue %any undef, ptr %taddr89, 0
  %286 = insertvalue %any %285, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %76, ptr %taddr90, align 8
  %287 = insertvalue %any undef, ptr %taddr90, 0
  %288 = insertvalue %any %287, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg91, align 8
  store %"char[]" { ptr @.file.54, i64 8 }, ptr %indirectarg92, align 8
  store %"char[]" { ptr @.func.172, i64 8 }, ptr %indirectarg93, align 8
  store %any %286, ptr %varargslots94, align 16
  %ptradd95 = getelementptr inbounds i8, ptr %varargslots94, i64 16
  store %any %288, ptr %ptradd95, align 16
  %289 = insertvalue %"any[]" undef, ptr %varargslots94, 0
  %"$$temp96" = insertvalue %"any[]" %289, i64 2, 1
  store %"any[]" %"$$temp96", ptr %indirectarg97, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg91, ptr align 8 %indirectarg92, ptr align 8 %indirectarg93, i32 40, ptr align 8 %indirectarg97) #5, !dbg !1749
  unreachable, !dbg !1749

panic125:                                         ; preds = %switch.case123
  store %"char[]" { ptr @.panic_msg.59, i64 53 }, ptr %indirectarg126, align 8
  store %"char[]" { ptr @.file.54, i64 8 }, ptr %indirectarg127, align 8
  store %"char[]" { ptr @.func.172, i64 8 }, ptr %indirectarg128, align 8
  %290 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %290(ptr align 8 %indirectarg126, ptr align 8 %indirectarg127, ptr align 8 %indirectarg128, i32 45) #5, !dbg !1756
  unreachable, !dbg !1756

panic130:                                         ; preds = %checkok129
  store i64 8, ptr %taddr131, align 8
  %291 = insertvalue %any undef, ptr %taddr131, 0
  %292 = insertvalue %any %291, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %95, ptr %taddr132, align 8
  %293 = insertvalue %any undef, ptr %taddr132, 0
  %294 = insertvalue %any %293, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg133, align 8
  store %"char[]" { ptr @.file.54, i64 8 }, ptr %indirectarg134, align 8
  store %"char[]" { ptr @.func.172, i64 8 }, ptr %indirectarg135, align 8
  store %any %292, ptr %varargslots136, align 16
  %ptradd137 = getelementptr inbounds i8, ptr %varargslots136, i64 16
  store %any %294, ptr %ptradd137, align 16
  %295 = insertvalue %"any[]" undef, ptr %varargslots136, 0
  %"$$temp138" = insertvalue %"any[]" %295, i64 2, 1
  store %"any[]" %"$$temp138", ptr %indirectarg139, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg133, ptr align 8 %indirectarg134, ptr align 8 %indirectarg135, i32 45, ptr align 8 %indirectarg139) #5, !dbg !1756
  unreachable, !dbg !1756

panic171:                                         ; preds = %switch.case168
  store %"char[]" { ptr @.panic_msg.60, i64 55 }, ptr %indirectarg172, align 8
  store %"char[]" { ptr @.file.54, i64 8 }, ptr %indirectarg173, align 8
  store %"char[]" { ptr @.func.172, i64 8 }, ptr %indirectarg174, align 8
  %296 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %296(ptr align 8 %indirectarg172, ptr align 8 %indirectarg173, ptr align 8 %indirectarg174, i32 50) #5, !dbg !1763
  unreachable, !dbg !1763

panic176:                                         ; preds = %checkok175
  store i64 16, ptr %taddr177, align 8
  %297 = insertvalue %any undef, ptr %taddr177, 0
  %298 = insertvalue %any %297, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %114, ptr %taddr178, align 8
  %299 = insertvalue %any undef, ptr %taddr178, 0
  %300 = insertvalue %any %299, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg179, align 8
  store %"char[]" { ptr @.file.54, i64 8 }, ptr %indirectarg180, align 8
  store %"char[]" { ptr @.func.172, i64 8 }, ptr %indirectarg181, align 8
  store %any %298, ptr %varargslots182, align 16
  %ptradd183 = getelementptr inbounds i8, ptr %varargslots182, i64 16
  store %any %300, ptr %ptradd183, align 16
  %301 = insertvalue %"any[]" undef, ptr %varargslots182, 0
  %"$$temp184" = insertvalue %"any[]" %301, i64 2, 1
  store %"any[]" %"$$temp184", ptr %indirectarg185, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg179, ptr align 8 %indirectarg180, ptr align 8 %indirectarg181, i32 50, ptr align 8 %indirectarg185) #5, !dbg !1763
  unreachable, !dbg !1763

panic217:                                         ; preds = %switch.case214
  store %"char[]" { ptr @.panic_msg.56, i64 53 }, ptr %indirectarg218, align 8
  store %"char[]" { ptr @.file.54, i64 8 }, ptr %indirectarg219, align 8
  store %"char[]" { ptr @.func.172, i64 8 }, ptr %indirectarg220, align 8
  %302 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %302(ptr align 8 %indirectarg218, ptr align 8 %indirectarg219, ptr align 8 %indirectarg220, i32 55) #5, !dbg !1770
  unreachable, !dbg !1770

panic237:                                         ; preds = %switch.case234
  store %"char[]" { ptr @.panic_msg.61, i64 55 }, ptr %indirectarg238, align 8
  store %"char[]" { ptr @.file.54, i64 8 }, ptr %indirectarg239, align 8
  store %"char[]" { ptr @.func.172, i64 8 }, ptr %indirectarg240, align 8
  %303 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %303(ptr align 8 %indirectarg238, ptr align 8 %indirectarg239, ptr align 8 %indirectarg240, i32 59) #5, !dbg !1776
  unreachable, !dbg !1776

panic242:                                         ; preds = %checkok241
  store i64 2, ptr %taddr243, align 8
  %304 = insertvalue %any undef, ptr %taddr243, 0
  %305 = insertvalue %any %304, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %143, ptr %taddr244, align 8
  %306 = insertvalue %any undef, ptr %taddr244, 0
  %307 = insertvalue %any %306, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg245, align 8
  store %"char[]" { ptr @.file.54, i64 8 }, ptr %indirectarg246, align 8
  store %"char[]" { ptr @.func.172, i64 8 }, ptr %indirectarg247, align 8
  store %any %305, ptr %varargslots248, align 16
  %ptradd249 = getelementptr inbounds i8, ptr %varargslots248, i64 16
  store %any %307, ptr %ptradd249, align 16
  %308 = insertvalue %"any[]" undef, ptr %varargslots248, 0
  %"$$temp250" = insertvalue %"any[]" %308, i64 2, 1
  store %"any[]" %"$$temp250", ptr %indirectarg251, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg245, ptr align 8 %indirectarg246, ptr align 8 %indirectarg247, i32 59, ptr align 8 %indirectarg251) #5, !dbg !1776
  unreachable, !dbg !1776

panic273:                                         ; preds = %switch.case270
  store %"char[]" { ptr @.panic_msg.62, i64 53 }, ptr %indirectarg274, align 8
  store %"char[]" { ptr @.file.54, i64 8 }, ptr %indirectarg275, align 8
  store %"char[]" { ptr @.func.172, i64 8 }, ptr %indirectarg276, align 8
  %309 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %309(ptr align 8 %indirectarg274, ptr align 8 %indirectarg275, ptr align 8 %indirectarg276, i32 63) #5, !dbg !1782
  unreachable, !dbg !1782

panic278:                                         ; preds = %checkok277
  store i64 4, ptr %taddr279, align 8
  %310 = insertvalue %any undef, ptr %taddr279, 0
  %311 = insertvalue %any %310, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %159, ptr %taddr280, align 8
  %312 = insertvalue %any undef, ptr %taddr280, 0
  %313 = insertvalue %any %312, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg281, align 8
  store %"char[]" { ptr @.file.54, i64 8 }, ptr %indirectarg282, align 8
  store %"char[]" { ptr @.func.172, i64 8 }, ptr %indirectarg283, align 8
  store %any %311, ptr %varargslots284, align 16
  %ptradd285 = getelementptr inbounds i8, ptr %varargslots284, i64 16
  store %any %313, ptr %ptradd285, align 16
  %314 = insertvalue %"any[]" undef, ptr %varargslots284, 0
  %"$$temp286" = insertvalue %"any[]" %314, i64 2, 1
  store %"any[]" %"$$temp286", ptr %indirectarg287, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg281, ptr align 8 %indirectarg282, ptr align 8 %indirectarg283, i32 63, ptr align 8 %indirectarg287) #5, !dbg !1782
  unreachable, !dbg !1782

panic306:                                         ; preds = %switch.case303
  store %"char[]" { ptr @.panic_msg.63, i64 54 }, ptr %indirectarg307, align 8
  store %"char[]" { ptr @.file.54, i64 8 }, ptr %indirectarg308, align 8
  store %"char[]" { ptr @.func.172, i64 8 }, ptr %indirectarg309, align 8
  %315 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %315(ptr align 8 %indirectarg307, ptr align 8 %indirectarg308, ptr align 8 %indirectarg309, i32 67) #5, !dbg !1788
  unreachable, !dbg !1788

panic311:                                         ; preds = %checkok310
  store i64 8, ptr %taddr312, align 8
  %316 = insertvalue %any undef, ptr %taddr312, 0
  %317 = insertvalue %any %316, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %175, ptr %taddr313, align 8
  %318 = insertvalue %any undef, ptr %taddr313, 0
  %319 = insertvalue %any %318, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg314, align 8
  store %"char[]" { ptr @.file.54, i64 8 }, ptr %indirectarg315, align 8
  store %"char[]" { ptr @.func.172, i64 8 }, ptr %indirectarg316, align 8
  store %any %317, ptr %varargslots317, align 16
  %ptradd318 = getelementptr inbounds i8, ptr %varargslots317, i64 16
  store %any %319, ptr %ptradd318, align 16
  %320 = insertvalue %"any[]" undef, ptr %varargslots317, 0
  %"$$temp319" = insertvalue %"any[]" %320, i64 2, 1
  store %"any[]" %"$$temp319", ptr %indirectarg320, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg314, ptr align 8 %indirectarg315, ptr align 8 %indirectarg316, i32 67, ptr align 8 %indirectarg320) #5, !dbg !1788
  unreachable, !dbg !1788

panic342:                                         ; preds = %switch.case339
  store %"char[]" { ptr @.panic_msg.64, i64 56 }, ptr %indirectarg343, align 8
  store %"char[]" { ptr @.file.54, i64 8 }, ptr %indirectarg344, align 8
  store %"char[]" { ptr @.func.172, i64 8 }, ptr %indirectarg345, align 8
  %321 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %321(ptr align 8 %indirectarg343, ptr align 8 %indirectarg344, ptr align 8 %indirectarg345, i32 71) #5, !dbg !1794
  unreachable, !dbg !1794

panic347:                                         ; preds = %checkok346
  store i64 16, ptr %taddr348, align 8
  %322 = insertvalue %any undef, ptr %taddr348, 0
  %323 = insertvalue %any %322, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %191, ptr %taddr349, align 8
  %324 = insertvalue %any undef, ptr %taddr349, 0
  %325 = insertvalue %any %324, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg350, align 8
  store %"char[]" { ptr @.file.54, i64 8 }, ptr %indirectarg351, align 8
  store %"char[]" { ptr @.func.172, i64 8 }, ptr %indirectarg352, align 8
  store %any %323, ptr %varargslots353, align 16
  %ptradd354 = getelementptr inbounds i8, ptr %varargslots353, i64 16
  store %any %325, ptr %ptradd354, align 16
  %326 = insertvalue %"any[]" undef, ptr %varargslots353, 0
  %"$$temp355" = insertvalue %"any[]" %326, i64 2, 1
  store %"any[]" %"$$temp355", ptr %indirectarg356, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg350, ptr align 8 %indirectarg351, ptr align 8 %indirectarg352, i32 71, ptr align 8 %indirectarg356) #5, !dbg !1794
  unreachable, !dbg !1794
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @std.io.Formatter.out_reverse(ptr %0, ptr %1, ptr align 8 %2) #0 !dbg !1823 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %n = alloca i64, align 8
  %len = alloca i64, align 8
  %error_var = alloca i64, align 8
  %retparam = alloca i64, align 8
  %error_var9 = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr12 = alloca i64, align 8
  %indirectarg13 = alloca %"char[]", align 8
  %indirectarg14 = alloca %"char[]", align 8
  %indirectarg15 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg17 = alloca %"any[]", align 8
  %retparam20 = alloca i64, align 8
  %error_var27 = alloca i64, align 8
  %retparam28 = alloca i64, align 8
  %reterr = alloca i64, align 8
  %3 = icmp eq ptr %1, null, !dbg !1824
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !1824
  br i1 %4, label %panic, label %checkok, !dbg !1824

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !1825, !DIExpression(), !1826)
    #dbg_declare(ptr %2, !1827, !DIExpression(), !1826)
    #dbg_declare(ptr %n, !1828, !DIExpression(), !1829)
  store i64 0, ptr %n, align 8, !dbg !1829
    #dbg_declare(ptr %len, !1830, !DIExpression(), !1831)
  %ptradd = getelementptr inbounds i8, ptr %2, i64 8, !dbg !1831
  %5 = load i64, ptr %ptradd, align 8, !dbg !1831
  store i64 %5, ptr %len, align 8, !dbg !1831
  %6 = load ptr, ptr %self, align 8, !dbg !1832
  %ptradd3 = getelementptr inbounds i8, ptr %6, i64 16, !dbg !1832
  %7 = load i32, ptr %ptradd3, align 8, !dbg !1832
  %8 = and i32 1, %7, !dbg !1832
  %trunc = trunc i32 %8 to i8, !dbg !1832
  %9 = trunc i8 %trunc to i1, !dbg !1832
  %not = xor i1 %9, true, !dbg !1832
  br i1 %not, label %and.rhs, label %and.phi, !dbg !1832

and.rhs:                                          ; preds = %checkok
  %10 = load ptr, ptr %self, align 8, !dbg !1832
  %ptradd4 = getelementptr inbounds i8, ptr %10, i64 16, !dbg !1832
  %11 = load i32, ptr %ptradd4, align 8, !dbg !1832
  %lshrl = lshr i32 %11, 1, !dbg !1832
  %12 = and i32 1, %lshrl, !dbg !1832
  %trunc5 = trunc i32 %12 to i8, !dbg !1832
  %13 = trunc i8 %trunc5 to i1, !dbg !1832
  %not6 = xor i1 %13, true, !dbg !1832
  br label %and.phi, !dbg !1832

and.phi:                                          ; preds = %and.rhs, %checkok
  %val = phi i1 [ false, %checkok ], [ %not6, %and.rhs ], !dbg !1832
  br i1 %val, label %if.then, label %if.exit, !dbg !1832

if.then:                                          ; preds = %and.phi
  %14 = load i64, ptr %n, align 8, !dbg !1833
  %15 = load ptr, ptr %self, align 8, !dbg !1833
  %ptradd7 = getelementptr inbounds i8, ptr %15, i64 16, !dbg !1833
  %ptradd8 = getelementptr inbounds i8, ptr %ptradd7, i64 4, !dbg !1833
  %16 = load i32, ptr %ptradd8, align 4, !dbg !1833
  %zext = zext i32 %16 to i64, !dbg !1833
  %17 = load i64, ptr %len, align 8, !dbg !1833
  %18 = load ptr, ptr %self, align 8
  %19 = call i64 @std.io.Formatter.pad(ptr %retparam, ptr %18, i8 32, i64 %zext, i64 %17) #6, !dbg !1833
  %not_err = icmp eq i64 %19, 0, !dbg !1833
  %20 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1833
  br i1 %20, label %after_check, label %assign_optional, !dbg !1833

assign_optional:                                  ; preds = %if.then
  store i64 %19, ptr %error_var, align 8, !dbg !1833
  br label %guard_block, !dbg !1833

after_check:                                      ; preds = %if.then
  br label %noerr_block, !dbg !1833

guard_block:                                      ; preds = %assign_optional
  %21 = load i64, ptr %error_var, align 8, !dbg !1833
  ret i64 %21, !dbg !1833

noerr_block:                                      ; preds = %after_check
  %22 = load i64, ptr %retparam, align 8, !dbg !1833
  %add = add i64 %14, %22, !dbg !1833
  store i64 %add, ptr %n, align 8, !dbg !1833
  br label %if.exit, !dbg !1833

if.exit:                                          ; preds = %noerr_block, %and.phi
  br label %loop.cond, !dbg !1835

loop.cond:                                        ; preds = %noerr_block25, %if.exit
  %23 = load i64, ptr %len, align 8, !dbg !1836
  %i2b = icmp ne i64 %23, 0, !dbg !1836
  br i1 %i2b, label %loop.body, label %loop.exit, !dbg !1836

loop.body:                                        ; preds = %loop.cond
  %24 = load i64, ptr %n, align 8, !dbg !1836
  %ptradd10 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !1836
  %25 = load i64, ptr %ptradd10, align 8, !dbg !1836
  %26 = load ptr, ptr %2, align 8, !dbg !1836
  %27 = load i64, ptr %len, align 8, !dbg !1836
  %sub = sub i64 %27, 1, !dbg !1836
  store i64 %sub, ptr %len, align 8, !dbg !1836
  %ge = icmp uge i64 %sub, %25, !dbg !1836
  %28 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !1836
  br i1 %28, label %panic11, label %checkok18, !dbg !1836

checkok18:                                        ; preds = %loop.body
  %ptradd19 = getelementptr inbounds i8, ptr %26, i64 %sub, !dbg !1836
  %29 = load ptr, ptr %self, align 8
  %30 = load i8, ptr %ptradd19, align 1
  %31 = call i64 @std.io.Formatter.out(ptr %retparam20, ptr %29, i8 %30), !dbg !1836
  %not_err21 = icmp eq i64 %31, 0, !dbg !1836
  %32 = call i1 @llvm.expect.i1(i1 %not_err21, i1 true), !dbg !1836
  br i1 %32, label %after_check23, label %assign_optional22, !dbg !1836

assign_optional22:                                ; preds = %checkok18
  store i64 %31, ptr %error_var9, align 8, !dbg !1836
  br label %guard_block24, !dbg !1836

after_check23:                                    ; preds = %checkok18
  br label %noerr_block25, !dbg !1836

guard_block24:                                    ; preds = %assign_optional22
  %33 = load i64, ptr %error_var9, align 8, !dbg !1836
  ret i64 %33, !dbg !1836

noerr_block25:                                    ; preds = %after_check23
  %34 = load i64, ptr %retparam20, align 8, !dbg !1836
  %add26 = add i64 %24, %34, !dbg !1836
  store i64 %add26, ptr %n, align 8, !dbg !1836
  br label %loop.cond, !dbg !1836

loop.exit:                                        ; preds = %loop.cond
  %35 = load i64, ptr %n, align 8, !dbg !1838
  %36 = load ptr, ptr %self, align 8
  %37 = load i64, ptr %n, align 8
  %38 = call i64 @std.io.Formatter.adjust(ptr %retparam28, ptr %36, i64 %37), !dbg !1838
  %not_err29 = icmp eq i64 %38, 0, !dbg !1838
  %39 = call i1 @llvm.expect.i1(i1 %not_err29, i1 true), !dbg !1838
  br i1 %39, label %after_check31, label %assign_optional30, !dbg !1838

assign_optional30:                                ; preds = %loop.exit
  store i64 %38, ptr %error_var27, align 8, !dbg !1838
  br label %guard_block32, !dbg !1838

after_check31:                                    ; preds = %loop.exit
  br label %noerr_block33, !dbg !1838

guard_block32:                                    ; preds = %assign_optional30
  %40 = load i64, ptr %error_var27, align 8, !dbg !1838
  ret i64 %40, !dbg !1838

noerr_block33:                                    ; preds = %after_check31
  %41 = load i64, ptr %retparam28, align 8, !dbg !1838
  %add34 = add i64 %35, %41, !dbg !1838
  store i64 %add34, ptr %n, align 8, !dbg !1838
  %42 = load i64, ptr %n, align 8, !dbg !1839
  store i64 %42, ptr %0, align 8, !dbg !1839
  ret i64 0, !dbg !1839

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.177, i64 11 }, ptr %indirectarg2, align 8
  %43 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %43(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 660) #5, !dbg !1826
  unreachable, !dbg !1826

panic11:                                          ; preds = %loop.body
  store i64 %25, ptr %taddr, align 8
  %44 = insertvalue %any undef, ptr %taddr, 0
  %45 = insertvalue %any %44, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %sub, ptr %taddr12, align 8
  %46 = insertvalue %any undef, ptr %taddr12, 0
  %47 = insertvalue %any %46, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.71, i64 59 }, ptr %indirectarg13, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg14, align 8
  store %"char[]" { ptr @.func.177, i64 11 }, ptr %indirectarg15, align 8
  store %any %45, ptr %varargslots, align 16
  %ptradd16 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %47, ptr %ptradd16, align 16
  %48 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %48, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg17, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg13, ptr align 8 %indirectarg14, ptr align 8 %indirectarg15, i32 670, ptr align 8 %indirectarg17) #5, !dbg !1836
  unreachable, !dbg !1836
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.print_hex_chars(ptr %0, ptr %1, ptr align 8 %2, i8 zeroext %3) #0 comdat !dbg !1840 {
entry:
  %f = alloca ptr, align 8
  %uppercase = alloca i8, align 1
  %past_10 = alloca i8, align 1
  %len = alloca i64, align 8
  %.anon = alloca i64, align 8
  %c = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr2 = alloca i64, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg6 = alloca %"any[]", align 8
  %digit = alloca i8, align 1
  %error_var = alloca i64, align 8
  %retparam = alloca i64, align 8
  %error_var17 = alloca i64, align 8
  %retparam28 = alloca i64, align 8
  %reterr = alloca i64, align 8
  store ptr %1, ptr %f, align 8
    #dbg_declare(ptr %f, !1843, !DIExpression(), !1844)
    #dbg_declare(ptr %2, !1845, !DIExpression(), !1844)
  store i8 %3, ptr %uppercase, align 1
    #dbg_declare(ptr %uppercase, !1846, !DIExpression(), !1844)
    #dbg_declare(ptr %past_10, !1847, !DIExpression(), !1848)
  %4 = load i8, ptr %uppercase, align 1, !dbg !1848
  %5 = trunc i8 %4 to i1, !dbg !1848
  %ternary = select i1 %5, i8 65, i8 97, !dbg !1848
  %zext = zext i8 %ternary to i32, !dbg !1848
  %sub = sub i32 %zext, 10, !dbg !1848
  %trunc = trunc i32 %sub to i8, !dbg !1848
  store i8 %trunc, ptr %past_10, align 1, !dbg !1848
    #dbg_declare(ptr %len, !1849, !DIExpression(), !1850)
  store i64 0, ptr %len, align 8, !dbg !1850
  %ptradd = getelementptr inbounds i8, ptr %2, i64 8, !dbg !1851
  %6 = load i64, ptr %ptradd, align 8, !dbg !1851
    #dbg_declare(ptr %.anon, !1853, !DIExpression(), !1851)
  store i64 0, ptr %.anon, align 8, !dbg !1851
  br label %loop.cond, !dbg !1851

loop.cond:                                        ; preds = %noerr_block33, %entry
  %7 = load i64, ptr %.anon, align 8, !dbg !1851
  %lt = icmp ult i64 %7, %6, !dbg !1851
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !1851

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %c, !1854, !DIExpression(), !1856)
  %ptradd1 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !1856
  %8 = load i64, ptr %ptradd1, align 8, !dbg !1856
  %9 = load ptr, ptr %2, align 8, !dbg !1856
  %10 = load i64, ptr %.anon, align 8, !dbg !1856
  %ge = icmp uge i64 %10, %8, !dbg !1856
  %11 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !1856
  br i1 %11, label %panic, label %checkok, !dbg !1856

checkok:                                          ; preds = %loop.body
  %ptradd7 = getelementptr inbounds i8, ptr %9, i64 %10, !dbg !1856
  %12 = load i8, ptr %ptradd7, align 1, !dbg !1856
  store i8 %12, ptr %c, align 1, !dbg !1856
    #dbg_declare(ptr %digit, !1857, !DIExpression(), !1859)
  %13 = load i8, ptr %c, align 1, !dbg !1859
  %zext8 = zext i8 %13 to i32, !dbg !1859
  %lshr = lshr i32 %zext8, 4, !dbg !1859
  %14 = freeze i32 %lshr, !dbg !1859
  %trunc9 = trunc i32 %14 to i8, !dbg !1859
  store i8 %trunc9, ptr %digit, align 1, !dbg !1859
  %15 = load i8, ptr %digit, align 1, !dbg !1860
  %zext10 = zext i8 %15 to i32, !dbg !1860
  %16 = load i8, ptr %digit, align 1, !dbg !1860
  %zext11 = zext i8 %16 to i32, !dbg !1860
  %gt = icmp ugt i32 10, %zext11, !dbg !1860
  br i1 %gt, label %cond.lhs, label %cond.rhs, !dbg !1860

cond.lhs:                                         ; preds = %checkok
  br label %cond.phi, !dbg !1860

cond.rhs:                                         ; preds = %checkok
  %17 = load i8, ptr %past_10, align 1, !dbg !1860
  br label %cond.phi, !dbg !1860

cond.phi:                                         ; preds = %cond.rhs, %cond.lhs
  %val = phi i8 [ 48, %cond.lhs ], [ %17, %cond.rhs ], !dbg !1860
  %zext12 = zext i8 %val to i32, !dbg !1860
  %add = add i32 %zext10, %zext12, !dbg !1860
  %trunc13 = trunc i32 %add to i8, !dbg !1860
  %18 = load ptr, ptr %f, align 8
  %19 = call i64 @std.io.Formatter.out(ptr %retparam, ptr %18, i8 %trunc13), !dbg !1860
  %not_err = icmp eq i64 %19, 0, !dbg !1860
  %20 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1860
  br i1 %20, label %after_check, label %assign_optional, !dbg !1860

assign_optional:                                  ; preds = %cond.phi
  store i64 %19, ptr %error_var, align 8, !dbg !1860
  br label %guard_block, !dbg !1860

after_check:                                      ; preds = %cond.phi
  br label %noerr_block, !dbg !1860

guard_block:                                      ; preds = %assign_optional
  %21 = load i64, ptr %error_var, align 8, !dbg !1860
  ret i64 %21, !dbg !1860

noerr_block:                                      ; preds = %after_check
  %22 = load i64, ptr %len, align 8, !dbg !1861
  %add14 = add i64 %22, 1, !dbg !1861
  store i64 %add14, ptr %len, align 8, !dbg !1861
  %23 = load i8, ptr %c, align 1, !dbg !1862
  %zext15 = zext i8 %23 to i32, !dbg !1862
  %and = and i32 %zext15, 15, !dbg !1862
  %trunc16 = trunc i32 %and to i8, !dbg !1862
  store i8 %trunc16, ptr %digit, align 1, !dbg !1862
  %24 = load i8, ptr %digit, align 1, !dbg !1863
  %zext18 = zext i8 %24 to i32, !dbg !1863
  %25 = load i8, ptr %digit, align 1, !dbg !1863
  %zext19 = zext i8 %25 to i32, !dbg !1863
  %gt20 = icmp ugt i32 10, %zext19, !dbg !1863
  br i1 %gt20, label %cond.lhs21, label %cond.rhs22, !dbg !1863

cond.lhs21:                                       ; preds = %noerr_block
  br label %cond.phi23, !dbg !1863

cond.rhs22:                                       ; preds = %noerr_block
  %26 = load i8, ptr %past_10, align 1, !dbg !1863
  br label %cond.phi23, !dbg !1863

cond.phi23:                                       ; preds = %cond.rhs22, %cond.lhs21
  %val24 = phi i8 [ 48, %cond.lhs21 ], [ %26, %cond.rhs22 ], !dbg !1863
  %zext25 = zext i8 %val24 to i32, !dbg !1863
  %add26 = add i32 %zext18, %zext25, !dbg !1863
  %trunc27 = trunc i32 %add26 to i8, !dbg !1863
  %27 = load ptr, ptr %f, align 8
  %28 = call i64 @std.io.Formatter.out(ptr %retparam28, ptr %27, i8 %trunc27), !dbg !1863
  %not_err29 = icmp eq i64 %28, 0, !dbg !1863
  %29 = call i1 @llvm.expect.i1(i1 %not_err29, i1 true), !dbg !1863
  br i1 %29, label %after_check31, label %assign_optional30, !dbg !1863

assign_optional30:                                ; preds = %cond.phi23
  store i64 %28, ptr %error_var17, align 8, !dbg !1863
  br label %guard_block32, !dbg !1863

after_check31:                                    ; preds = %cond.phi23
  br label %noerr_block33, !dbg !1863

guard_block32:                                    ; preds = %assign_optional30
  %30 = load i64, ptr %error_var17, align 8, !dbg !1863
  ret i64 %30, !dbg !1863

noerr_block33:                                    ; preds = %after_check31
  %31 = load i64, ptr %len, align 8, !dbg !1864
  %add34 = add i64 %31, 1, !dbg !1864
  store i64 %add34, ptr %len, align 8, !dbg !1864
  %32 = load i64, ptr %.anon, align 8, !dbg !1851
  %addnuw = add nuw i64 %32, 1, !dbg !1851
  store i64 %addnuw, ptr %.anon, align 8, !dbg !1851
  br label %loop.cond, !dbg !1851

loop.exit:                                        ; preds = %loop.cond
  %33 = load i64, ptr %len, align 8, !dbg !1865
  store i64 %33, ptr %0, align 8, !dbg !1865
  ret i64 0, !dbg !1865

panic:                                            ; preds = %loop.body
  store i64 %8, ptr %taddr, align 8
  %34 = insertvalue %any undef, ptr %taddr, 0
  %35 = insertvalue %any %34, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %10, ptr %taddr2, align 8
  %36 = insertvalue %any undef, ptr %taddr2, 0
  %37 = insertvalue %any %36, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.71, i64 59 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.func.113, i64 15 }, ptr %indirectarg4, align 8
  store %any %35, ptr %varargslots, align 16
  %ptradd5 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %37, ptr %ptradd5, align 16
  %38 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %38, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg6, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg, ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, i32 13, ptr align 8 %indirectarg6) #5, !dbg !1856
  unreachable, !dbg !1856
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @std.io.int_from_any(ptr %0, ptr align 8 %1, ptr %2) #0 !dbg !1866 {
entry:
  %is_neg = alloca ptr, align 8
  %switch = alloca i8, align 1
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %reterr = alloca i64, align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg7 = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr10 = alloca i64, align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %indirectarg13 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg15 = alloca %"any[]", align 8
  %reterr18 = alloca i64, align 8
  %self = alloca ptr, align 8
  %indirectarg19 = alloca %"char[]", align 8
  %indirectarg20 = alloca %"char[]", align 8
  %indirectarg21 = alloca %"char[]", align 8
  %indirectarg24 = alloca %"char[]", align 8
  %indirectarg25 = alloca %"char[]", align 8
  %indirectarg26 = alloca %"char[]", align 8
  %taddr29 = alloca i64, align 8
  %taddr30 = alloca i64, align 8
  %indirectarg31 = alloca %"char[]", align 8
  %indirectarg32 = alloca %"char[]", align 8
  %indirectarg33 = alloca %"char[]", align 8
  %varargslots34 = alloca [2 x %any], align 16
  %indirectarg37 = alloca %"any[]", align 8
  %indirectarg41 = alloca %"char[]", align 8
  %indirectarg42 = alloca %"char[]", align 8
  %indirectarg43 = alloca %"char[]", align 8
  %taddr46 = alloca i64, align 8
  %taddr47 = alloca i64, align 8
  %indirectarg48 = alloca %"char[]", align 8
  %indirectarg49 = alloca %"char[]", align 8
  %indirectarg50 = alloca %"char[]", align 8
  %varargslots51 = alloca [2 x %any], align 16
  %indirectarg54 = alloca %"any[]", align 8
  %indirectarg73 = alloca %"char[]", align 8
  %indirectarg74 = alloca %"char[]", align 8
  %indirectarg75 = alloca %"char[]", align 8
  %retparam = alloca i128, align 16
  %indirectarg77 = alloca %any, align 8
  %indirectarg80 = alloca %"char[]", align 8
  %indirectarg81 = alloca %"char[]", align 8
  %indirectarg82 = alloca %"char[]", align 8
  %switch85 = alloca i64, align 8
  %reterr90 = alloca i64, align 8
  %indirectarg93 = alloca %"char[]", align 8
  %indirectarg94 = alloca %"char[]", align 8
  %indirectarg95 = alloca %"char[]", align 8
  %val = alloca i32, align 4
  %indirectarg107 = alloca %"char[]", align 8
  %indirectarg108 = alloca %"char[]", align 8
  %indirectarg109 = alloca %"char[]", align 8
  %reterr111 = alloca i64, align 8
  %indirectarg114 = alloca %"char[]", align 8
  %indirectarg115 = alloca %"char[]", align 8
  %indirectarg116 = alloca %"char[]", align 8
  %val129 = alloca i32, align 4
  %indirectarg132 = alloca %"char[]", align 8
  %indirectarg133 = alloca %"char[]", align 8
  %indirectarg134 = alloca %"char[]", align 8
  %taddr137 = alloca i64, align 8
  %taddr138 = alloca i64, align 8
  %indirectarg139 = alloca %"char[]", align 8
  %indirectarg140 = alloca %"char[]", align 8
  %indirectarg141 = alloca %"char[]", align 8
  %varargslots142 = alloca [2 x %any], align 16
  %indirectarg145 = alloca %"any[]", align 8
  %reterr148 = alloca i64, align 8
  %indirectarg152 = alloca %"char[]", align 8
  %indirectarg153 = alloca %"char[]", align 8
  %indirectarg154 = alloca %"char[]", align 8
  %val172 = alloca i32, align 4
  %indirectarg175 = alloca %"char[]", align 8
  %indirectarg176 = alloca %"char[]", align 8
  %indirectarg177 = alloca %"char[]", align 8
  %taddr180 = alloca i64, align 8
  %taddr181 = alloca i64, align 8
  %indirectarg182 = alloca %"char[]", align 8
  %indirectarg183 = alloca %"char[]", align 8
  %indirectarg184 = alloca %"char[]", align 8
  %varargslots185 = alloca [2 x %any], align 16
  %indirectarg188 = alloca %"any[]", align 8
  %reterr190 = alloca i64, align 8
  %indirectarg194 = alloca %"char[]", align 8
  %indirectarg195 = alloca %"char[]", align 8
  %indirectarg196 = alloca %"char[]", align 8
  %val214 = alloca i64, align 8
  %indirectarg217 = alloca %"char[]", align 8
  %indirectarg218 = alloca %"char[]", align 8
  %indirectarg219 = alloca %"char[]", align 8
  %taddr222 = alloca i64, align 8
  %taddr223 = alloca i64, align 8
  %indirectarg224 = alloca %"char[]", align 8
  %indirectarg225 = alloca %"char[]", align 8
  %indirectarg226 = alloca %"char[]", align 8
  %varargslots227 = alloca [2 x %any], align 16
  %indirectarg230 = alloca %"any[]", align 8
  %reterr232 = alloca i64, align 8
  %indirectarg236 = alloca %"char[]", align 8
  %indirectarg237 = alloca %"char[]", align 8
  %indirectarg238 = alloca %"char[]", align 8
  %val256 = alloca i128, align 16
  %indirectarg259 = alloca %"char[]", align 8
  %indirectarg260 = alloca %"char[]", align 8
  %indirectarg261 = alloca %"char[]", align 8
  %taddr264 = alloca i64, align 8
  %taddr265 = alloca i64, align 8
  %indirectarg266 = alloca %"char[]", align 8
  %indirectarg267 = alloca %"char[]", align 8
  %indirectarg268 = alloca %"char[]", align 8
  %varargslots269 = alloca [2 x %any], align 16
  %indirectarg272 = alloca %"any[]", align 8
  %reterr274 = alloca i64, align 8
  %indirectarg278 = alloca %"char[]", align 8
  %indirectarg279 = alloca %"char[]", align 8
  %indirectarg280 = alloca %"char[]", align 8
  %reterr296 = alloca i64, align 8
  %indirectarg299 = alloca %"char[]", align 8
  %indirectarg300 = alloca %"char[]", align 8
  %indirectarg301 = alloca %"char[]", align 8
  %reterr312 = alloca i64, align 8
  %indirectarg315 = alloca %"char[]", align 8
  %indirectarg316 = alloca %"char[]", align 8
  %indirectarg317 = alloca %"char[]", align 8
  %taddr320 = alloca i64, align 8
  %taddr321 = alloca i64, align 8
  %indirectarg322 = alloca %"char[]", align 8
  %indirectarg323 = alloca %"char[]", align 8
  %indirectarg324 = alloca %"char[]", align 8
  %varargslots325 = alloca [2 x %any], align 16
  %indirectarg328 = alloca %"any[]", align 8
  %reterr339 = alloca i64, align 8
  %indirectarg342 = alloca %"char[]", align 8
  %indirectarg343 = alloca %"char[]", align 8
  %indirectarg344 = alloca %"char[]", align 8
  %taddr347 = alloca i64, align 8
  %taddr348 = alloca i64, align 8
  %indirectarg349 = alloca %"char[]", align 8
  %indirectarg350 = alloca %"char[]", align 8
  %indirectarg351 = alloca %"char[]", align 8
  %varargslots352 = alloca [2 x %any], align 16
  %indirectarg355 = alloca %"any[]", align 8
  %reterr366 = alloca i64, align 8
  %indirectarg369 = alloca %"char[]", align 8
  %indirectarg370 = alloca %"char[]", align 8
  %indirectarg371 = alloca %"char[]", align 8
  %taddr374 = alloca i64, align 8
  %taddr375 = alloca i64, align 8
  %indirectarg376 = alloca %"char[]", align 8
  %indirectarg377 = alloca %"char[]", align 8
  %indirectarg378 = alloca %"char[]", align 8
  %varargslots379 = alloca [2 x %any], align 16
  %indirectarg382 = alloca %"any[]", align 8
  %reterr393 = alloca i64, align 8
  %indirectarg396 = alloca %"char[]", align 8
  %indirectarg397 = alloca %"char[]", align 8
  %indirectarg398 = alloca %"char[]", align 8
  %taddr401 = alloca i64, align 8
  %taddr402 = alloca i64, align 8
  %indirectarg403 = alloca %"char[]", align 8
  %indirectarg404 = alloca %"char[]", align 8
  %indirectarg405 = alloca %"char[]", align 8
  %varargslots406 = alloca [2 x %any], align 16
  %indirectarg409 = alloca %"any[]", align 8
  %f = alloca float, align 4
  %indirectarg421 = alloca %"char[]", align 8
  %indirectarg422 = alloca %"char[]", align 8
  %indirectarg423 = alloca %"char[]", align 8
  %taddr426 = alloca i64, align 8
  %taddr427 = alloca i64, align 8
  %indirectarg428 = alloca %"char[]", align 8
  %indirectarg429 = alloca %"char[]", align 8
  %indirectarg430 = alloca %"char[]", align 8
  %varargslots431 = alloca [2 x %any], align 16
  %indirectarg434 = alloca %"any[]", align 8
  %reterr436 = alloca i64, align 8
  %indirectarg440 = alloca %"char[]", align 8
  %indirectarg441 = alloca %"char[]", align 8
  %indirectarg442 = alloca %"char[]", align 8
  %d = alloca double, align 8
  %indirectarg458 = alloca %"char[]", align 8
  %indirectarg459 = alloca %"char[]", align 8
  %indirectarg460 = alloca %"char[]", align 8
  %taddr463 = alloca i64, align 8
  %taddr464 = alloca i64, align 8
  %indirectarg465 = alloca %"char[]", align 8
  %indirectarg466 = alloca %"char[]", align 8
  %indirectarg467 = alloca %"char[]", align 8
  %varargslots468 = alloca [2 x %any], align 16
  %indirectarg471 = alloca %"any[]", align 8
  %reterr473 = alloca i64, align 8
  %indirectarg477 = alloca %"char[]", align 8
  %indirectarg478 = alloca %"char[]", align 8
  %indirectarg479 = alloca %"char[]", align 8
    #dbg_declare(ptr %1, !1871, !DIExpression(), !1872)
  store ptr %2, ptr %is_neg, align 8
    #dbg_declare(ptr %is_neg, !1873, !DIExpression(), !1872)
  %ptradd = getelementptr inbounds i8, ptr %1, i64 8, !dbg !1874
  %3 = load i64, ptr %ptradd, align 8, !dbg !1874
  %"introspect*" = inttoptr i64 %3 to ptr, !dbg !1874
  %typeid.kind = load i8, ptr %"introspect*", align 8, !dbg !1874
  store i8 %typeid.kind, ptr %switch, align 1
  br label %switch.entry

switch.entry:                                     ; preds = %entry
  %4 = load i8, ptr %switch, align 1
  switch i8 %4, label %switch.default [
    i8 13, label %switch.case
    i8 19, label %switch.case
    i8 18, label %switch.case17
    i8 9, label %switch.case17
  ]

switch.case:                                      ; preds = %switch.entry, %switch.entry
  %5 = load ptr, ptr %is_neg, align 8, !dbg !1876
  %checknull = icmp eq ptr %5, null, !dbg !1876
  %6 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1876
  br i1 %6, label %panic, label %checkok, !dbg !1876

checkok:                                          ; preds = %switch.case
  store i8 0, ptr %5, align 1, !dbg !1876
  %7 = load ptr, ptr %1, align 8, !dbg !1878
  %checknull3 = icmp eq ptr %7, null, !dbg !1878
  %8 = call i1 @llvm.expect.i1(i1 %checknull3, i1 false), !dbg !1878
  br i1 %8, label %panic4, label %checkok8, !dbg !1878

checkok8:                                         ; preds = %checkok
  %9 = ptrtoint ptr %7 to i64, !dbg !1878
  %10 = urem i64 %9, 8, !dbg !1878
  %11 = icmp ne i64 %10, 0, !dbg !1878
  %12 = call i1 @llvm.expect.i1(i1 %11, i1 false), !dbg !1878
  br i1 %12, label %panic9, label %checkok16, !dbg !1878

checkok16:                                        ; preds = %checkok8
  %13 = load ptr, ptr %7, align 8, !dbg !1878
  %ptrxi = ptrtoint ptr %13 to i64, !dbg !1878
  %zext = zext i64 %ptrxi to i128, !dbg !1878
  store i128 %zext, ptr %0, align 16, !dbg !1878
  ret i64 0, !dbg !1878

switch.case17:                                    ; preds = %switch.entry, %switch.entry
  store ptr %1, ptr %self, align 8
  %14 = load ptr, ptr %self, align 8, !dbg !1879
  %neq = icmp ne ptr %14, null, !dbg !1879
  br i1 %neq, label %assert_ok, label %assert_fail, !dbg !1879

assert_fail:                                      ; preds = %switch.case17
  store %"char[]" { ptr @.panic_msg.52, i64 32 }, ptr %indirectarg19, align 8
  store %"char[]" { ptr @.file.14, i64 10 }, ptr %indirectarg20, align 8
  store %"char[]" { ptr @.func.115, i64 12 }, ptr %indirectarg21, align 8
  %15 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %15(ptr align 8 %indirectarg19, ptr align 8 %indirectarg20, ptr align 8 %indirectarg21, i32 266) #5, !dbg !1879
  unreachable, !dbg !1879

assert_ok:                                        ; preds = %switch.case17
  %16 = load ptr, ptr %self, align 8, !dbg !1884
  %checknull22 = icmp eq ptr %16, null, !dbg !1884
  %17 = call i1 @llvm.expect.i1(i1 %checknull22, i1 false), !dbg !1884
  br i1 %17, label %panic23, label %checkok27, !dbg !1884

checkok27:                                        ; preds = %assert_ok
  %18 = ptrtoint ptr %16 to i64, !dbg !1884
  %19 = urem i64 %18, 8, !dbg !1884
  %20 = icmp ne i64 %19, 0, !dbg !1884
  %21 = call i1 @llvm.expect.i1(i1 %20, i1 false), !dbg !1884
  br i1 %21, label %panic28, label %checkok38, !dbg !1884

checkok38:                                        ; preds = %checkok27
  %22 = load ptr, ptr %16, align 8, !dbg !1884
  %23 = load ptr, ptr %self, align 8, !dbg !1884
  %checknull39 = icmp eq ptr %23, null, !dbg !1884
  %24 = call i1 @llvm.expect.i1(i1 %checknull39, i1 false), !dbg !1884
  br i1 %24, label %panic40, label %checkok44, !dbg !1884

checkok44:                                        ; preds = %checkok38
  %25 = ptrtoint ptr %23 to i64, !dbg !1884
  %26 = urem i64 %25, 8, !dbg !1884
  %27 = icmp ne i64 %26, 0, !dbg !1884
  %28 = call i1 @llvm.expect.i1(i1 %27, i1 false), !dbg !1884
  br i1 %28, label %panic45, label %checkok55, !dbg !1884

checkok55:                                        ; preds = %checkok44
  %ptradd56 = getelementptr inbounds i8, ptr %23, i64 8, !dbg !1884
  %29 = load i64, ptr %ptradd56, align 8, !dbg !1884
  %"introspect*57" = inttoptr i64 %29 to ptr, !dbg !1884
  %typeid.kind58 = load i8, ptr %"introspect*57", align 8, !dbg !1884
  %eq = icmp eq i8 %typeid.kind58, 15, !dbg !1884
  br i1 %eq, label %check_type_ok, label %check_next, !dbg !1884

check_next:                                       ; preds = %checkok55
  %eq59 = icmp eq i8 %typeid.kind58, 19, !dbg !1884
  br i1 %eq59, label %check_type_ok, label %check_next60, !dbg !1884

check_next60:                                     ; preds = %check_next
  %eq61 = icmp eq i8 %typeid.kind58, 17, !dbg !1884
  br i1 %eq61, label %check_type_ok, label %check_next62, !dbg !1884

check_next62:                                     ; preds = %check_next60
  %eq63 = icmp eq i8 %typeid.kind58, 8, !dbg !1884
  br i1 %eq63, label %check_type_ok, label %check_next64, !dbg !1884

check_next64:                                     ; preds = %check_next62
  %eq65 = icmp eq i8 %typeid.kind58, 16, !dbg !1884
  br i1 %eq65, label %check_type_ok, label %check_next66, !dbg !1884

check_next66:                                     ; preds = %check_next64
  %eq67 = icmp eq i8 %typeid.kind58, 18, !dbg !1884
  br i1 %eq67, label %check_type_ok, label %check_next68, !dbg !1884

check_next68:                                     ; preds = %check_next66
  %eq69 = icmp eq i8 %typeid.kind58, 9, !dbg !1884
  br i1 %eq69, label %check_type_ok, label %check_next70, !dbg !1884

check_next70:                                     ; preds = %check_next68
  %eq71 = icmp eq i8 %typeid.kind58, 12, !dbg !1884
  br i1 %eq71, label %check_type_ok, label %check_next72, !dbg !1884

check_next72:                                     ; preds = %check_next70
  store %"char[]" { ptr @.panic_msg.53, i64 49 }, ptr %indirectarg73, align 8
  store %"char[]" { ptr @.file.14, i64 10 }, ptr %indirectarg74, align 8
  store %"char[]" { ptr @.func.115, i64 12 }, ptr %indirectarg75, align 8
  %30 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %30(ptr align 8 %indirectarg73, ptr align 8 %indirectarg74, ptr align 8 %indirectarg75, i32 268) #5, !dbg !1884
  unreachable, !dbg !1884

check_type_ok:                                    ; preds = %check_next70, %check_next68, %check_next66, %check_next64, %check_next62, %check_next60, %check_next, %checkok55
  %ptradd76 = getelementptr inbounds i8, ptr %"introspect*57", i64 32, !dbg !1884
  %typeid.inner = load i64, ptr %ptradd76, align 8, !dbg !1884
  %31 = insertvalue %any undef, ptr %22, 0, !dbg !1884
  %32 = insertvalue %any %31, i64 %typeid.inner, 1, !dbg !1884
  store %any %32, ptr %indirectarg77, align 8
  %33 = load ptr, ptr %is_neg, align 8
  %34 = call i64 @std.io.int_from_any(ptr %retparam, ptr align 8 %indirectarg77, ptr %33), !dbg !1882
  %not_err = icmp eq i64 %34, 0, !dbg !1882
  %35 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1882
  br i1 %35, label %after_check, label %assign_optional, !dbg !1882

assign_optional:                                  ; preds = %check_type_ok
  store i64 %34, ptr %reterr18, align 8, !dbg !1882
  br label %err_retblock, !dbg !1882

after_check:                                      ; preds = %check_type_ok
  %36 = load i128, ptr %retparam, align 16, !dbg !1882
  store i128 %36, ptr %0, align 16, !dbg !1882
  ret i64 0, !dbg !1882

err_retblock:                                     ; preds = %assign_optional
  %37 = load i64, ptr %reterr18, align 8, !dbg !1882
  ret i64 %37, !dbg !1882

switch.default:                                   ; preds = %switch.entry
  br label %switch.exit, !dbg !1885

switch.exit:                                      ; preds = %switch.default
  %38 = load ptr, ptr %is_neg, align 8, !dbg !1887
  %checknull78 = icmp eq ptr %38, null, !dbg !1887
  %39 = call i1 @llvm.expect.i1(i1 %checknull78, i1 false), !dbg !1887
  br i1 %39, label %panic79, label %checkok83, !dbg !1887

checkok83:                                        ; preds = %switch.exit
  store i8 0, ptr %38, align 1, !dbg !1887
  %ptradd84 = getelementptr inbounds i8, ptr %1, i64 8, !dbg !1888
  %40 = load i64, ptr %ptradd84, align 8
  store i64 %40, ptr %switch85, align 8
  br label %switch.entry86

switch.entry86:                                   ; preds = %checkok83
  %41 = load i64, ptr %switch85, align 8
  br label %check_subtype, !dbg !1890

check_subtype:                                    ; preds = %parent_type_block, %switch.entry86
  %42 = phi i64 [ %41, %switch.entry86 ], [ %typeid.parent, %parent_type_block ], !dbg !1890
  %eq87 = icmp eq i64 ptrtoint (ptr @"$ct.bool" to i64), %42, !dbg !1890
  br i1 %eq87, label %result_block, label %parent_type_block, !dbg !1890

parent_type_block:                                ; preds = %check_subtype
  %43 = inttoptr i64 %42 to ptr, !dbg !1890
  %ptradd88 = getelementptr inbounds i8, ptr %43, i64 8, !dbg !1890
  %typeid.parent = load i64, ptr %ptradd88, align 8, !dbg !1890
  %44 = icmp eq i64 %typeid.parent, 0, !dbg !1890
  br i1 %44, label %result_block, label %check_subtype, !dbg !1890

result_block:                                     ; preds = %parent_type_block, %check_subtype
  %45 = phi i1 [ false, %parent_type_block ], [ true, %check_subtype ], !dbg !1890
  br i1 %45, label %switch.case89, label %next_if, !dbg !1890

switch.case89:                                    ; preds = %result_block
  %46 = load ptr, ptr %1, align 8, !dbg !1891
  %checknull91 = icmp eq ptr %46, null, !dbg !1891
  %47 = call i1 @llvm.expect.i1(i1 %checknull91, i1 false), !dbg !1891
  br i1 %47, label %panic92, label %checkok96, !dbg !1891

checkok96:                                        ; preds = %switch.case89
  %48 = load i8, ptr %46, align 1, !dbg !1891
  %49 = trunc i8 %48 to i1, !dbg !1891
  %zext97 = zext i1 %49 to i128, !dbg !1891
  store i128 %zext97, ptr %0, align 16, !dbg !1891
  ret i64 0, !dbg !1891

next_if:                                          ; preds = %result_block
  br label %check_subtype98, !dbg !1893

check_subtype98:                                  ; preds = %parent_type_block100, %next_if
  %50 = phi i64 [ %41, %next_if ], [ %typeid.parent102, %parent_type_block100 ], !dbg !1893
  %eq99 = icmp eq i64 ptrtoint (ptr @"$ct.ichar" to i64), %50, !dbg !1893
  br i1 %eq99, label %result_block103, label %parent_type_block100, !dbg !1893

parent_type_block100:                             ; preds = %check_subtype98
  %51 = inttoptr i64 %50 to ptr, !dbg !1893
  %ptradd101 = getelementptr inbounds i8, ptr %51, i64 8, !dbg !1893
  %typeid.parent102 = load i64, ptr %ptradd101, align 8, !dbg !1893
  %52 = icmp eq i64 %typeid.parent102, 0, !dbg !1893
  br i1 %52, label %result_block103, label %check_subtype98, !dbg !1893

result_block103:                                  ; preds = %parent_type_block100, %check_subtype98
  %53 = phi i1 [ false, %parent_type_block100 ], [ true, %check_subtype98 ], !dbg !1893
  br i1 %53, label %switch.case104, label %next_if121, !dbg !1893

switch.case104:                                   ; preds = %result_block103
    #dbg_declare(ptr %val, !1894, !DIExpression(), !1896)
  %54 = load ptr, ptr %1, align 8, !dbg !1896
  %checknull105 = icmp eq ptr %54, null, !dbg !1896
  %55 = call i1 @llvm.expect.i1(i1 %checknull105, i1 false), !dbg !1896
  br i1 %55, label %panic106, label %checkok110, !dbg !1896

checkok110:                                       ; preds = %switch.case104
  %56 = load i8, ptr %54, align 1, !dbg !1896
  %sext = sext i8 %56 to i32, !dbg !1896
  store i32 %sext, ptr %val, align 4, !dbg !1896
  %57 = load i32, ptr %val, align 4, !dbg !1897
  %lt = icmp slt i32 %57, 0, !dbg !1897
  %58 = load ptr, ptr %is_neg, align 8, !dbg !1897
  %checknull112 = icmp eq ptr %58, null, !dbg !1897
  %59 = call i1 @llvm.expect.i1(i1 %checknull112, i1 false), !dbg !1897
  br i1 %59, label %panic113, label %checkok117, !dbg !1897

checkok117:                                       ; preds = %checkok110
  %60 = zext i1 %lt to i8, !dbg !1897
  store i8 %60, ptr %58, align 1, !dbg !1897
  %61 = trunc i8 %60 to i1, !dbg !1897
  br i1 %61, label %cond.lhs, label %cond.rhs, !dbg !1897

cond.lhs:                                         ; preds = %checkok117
  %62 = load i32, ptr %val, align 4, !dbg !1897
  %sext118 = sext i32 %62 to i128, !dbg !1897
  %bnot = xor i128 %sext118, -1, !dbg !1897
  %add = add i128 %bnot, 1, !dbg !1897
  br label %cond.phi, !dbg !1897

cond.rhs:                                         ; preds = %checkok117
  %63 = load i32, ptr %val, align 4, !dbg !1897
  %sext119 = sext i32 %63 to i128, !dbg !1897
  br label %cond.phi, !dbg !1897

cond.phi:                                         ; preds = %cond.rhs, %cond.lhs
  %val120 = phi i128 [ %add, %cond.lhs ], [ %sext119, %cond.rhs ], !dbg !1897
  store i128 %val120, ptr %0, align 16, !dbg !1897
  ret i64 0, !dbg !1897

next_if121:                                       ; preds = %result_block103
  br label %check_subtype122, !dbg !1898

check_subtype122:                                 ; preds = %parent_type_block124, %next_if121
  %64 = phi i64 [ %41, %next_if121 ], [ %typeid.parent126, %parent_type_block124 ], !dbg !1898
  %eq123 = icmp eq i64 ptrtoint (ptr @"$ct.short" to i64), %64, !dbg !1898
  br i1 %eq123, label %result_block127, label %parent_type_block124, !dbg !1898

parent_type_block124:                             ; preds = %check_subtype122
  %65 = inttoptr i64 %64 to ptr, !dbg !1898
  %ptradd125 = getelementptr inbounds i8, ptr %65, i64 8, !dbg !1898
  %typeid.parent126 = load i64, ptr %ptradd125, align 8, !dbg !1898
  %66 = icmp eq i64 %typeid.parent126, 0, !dbg !1898
  br i1 %66, label %result_block127, label %check_subtype122, !dbg !1898

result_block127:                                  ; preds = %parent_type_block124, %check_subtype122
  %67 = phi i1 [ false, %parent_type_block124 ], [ true, %check_subtype122 ], !dbg !1898
  br i1 %67, label %switch.case128, label %next_if164, !dbg !1898

switch.case128:                                   ; preds = %result_block127
    #dbg_declare(ptr %val129, !1899, !DIExpression(), !1901)
  %68 = load ptr, ptr %1, align 8, !dbg !1901
  %checknull130 = icmp eq ptr %68, null, !dbg !1901
  %69 = call i1 @llvm.expect.i1(i1 %checknull130, i1 false), !dbg !1901
  br i1 %69, label %panic131, label %checkok135, !dbg !1901

checkok135:                                       ; preds = %switch.case128
  %70 = ptrtoint ptr %68 to i64, !dbg !1901
  %71 = urem i64 %70, 2, !dbg !1901
  %72 = icmp ne i64 %71, 0, !dbg !1901
  %73 = call i1 @llvm.expect.i1(i1 %72, i1 false), !dbg !1901
  br i1 %73, label %panic136, label %checkok146, !dbg !1901

checkok146:                                       ; preds = %checkok135
  %74 = load i16, ptr %68, align 2, !dbg !1901
  %sext147 = sext i16 %74 to i32, !dbg !1901
  store i32 %sext147, ptr %val129, align 4, !dbg !1901
  %75 = load i32, ptr %val129, align 4, !dbg !1902
  %lt149 = icmp slt i32 %75, 0, !dbg !1902
  %76 = load ptr, ptr %is_neg, align 8, !dbg !1902
  %checknull150 = icmp eq ptr %76, null, !dbg !1902
  %77 = call i1 @llvm.expect.i1(i1 %checknull150, i1 false), !dbg !1902
  br i1 %77, label %panic151, label %checkok155, !dbg !1902

checkok155:                                       ; preds = %checkok146
  %78 = zext i1 %lt149 to i8, !dbg !1902
  store i8 %78, ptr %76, align 1, !dbg !1902
  %79 = trunc i8 %78 to i1, !dbg !1902
  br i1 %79, label %cond.lhs156, label %cond.rhs160, !dbg !1902

cond.lhs156:                                      ; preds = %checkok155
  %80 = load i32, ptr %val129, align 4, !dbg !1902
  %sext157 = sext i32 %80 to i128, !dbg !1902
  %bnot158 = xor i128 %sext157, -1, !dbg !1902
  %add159 = add i128 %bnot158, 1, !dbg !1902
  br label %cond.phi162, !dbg !1902

cond.rhs160:                                      ; preds = %checkok155
  %81 = load i32, ptr %val129, align 4, !dbg !1902
  %sext161 = sext i32 %81 to i128, !dbg !1902
  br label %cond.phi162, !dbg !1902

cond.phi162:                                      ; preds = %cond.rhs160, %cond.lhs156
  %val163 = phi i128 [ %add159, %cond.lhs156 ], [ %sext161, %cond.rhs160 ], !dbg !1902
  store i128 %val163, ptr %0, align 16, !dbg !1902
  ret i64 0, !dbg !1902

next_if164:                                       ; preds = %result_block127
  br label %check_subtype165, !dbg !1903

check_subtype165:                                 ; preds = %parent_type_block167, %next_if164
  %82 = phi i64 [ %41, %next_if164 ], [ %typeid.parent169, %parent_type_block167 ], !dbg !1903
  %eq166 = icmp eq i64 ptrtoint (ptr @"$ct.int" to i64), %82, !dbg !1903
  br i1 %eq166, label %result_block170, label %parent_type_block167, !dbg !1903

parent_type_block167:                             ; preds = %check_subtype165
  %83 = inttoptr i64 %82 to ptr, !dbg !1903
  %ptradd168 = getelementptr inbounds i8, ptr %83, i64 8, !dbg !1903
  %typeid.parent169 = load i64, ptr %ptradd168, align 8, !dbg !1903
  %84 = icmp eq i64 %typeid.parent169, 0, !dbg !1903
  br i1 %84, label %result_block170, label %check_subtype165, !dbg !1903

result_block170:                                  ; preds = %parent_type_block167, %check_subtype165
  %85 = phi i1 [ false, %parent_type_block167 ], [ true, %check_subtype165 ], !dbg !1903
  br i1 %85, label %switch.case171, label %next_if206, !dbg !1903

switch.case171:                                   ; preds = %result_block170
    #dbg_declare(ptr %val172, !1904, !DIExpression(), !1906)
  %86 = load ptr, ptr %1, align 8, !dbg !1906
  %checknull173 = icmp eq ptr %86, null, !dbg !1906
  %87 = call i1 @llvm.expect.i1(i1 %checknull173, i1 false), !dbg !1906
  br i1 %87, label %panic174, label %checkok178, !dbg !1906

checkok178:                                       ; preds = %switch.case171
  %88 = ptrtoint ptr %86 to i64, !dbg !1906
  %89 = urem i64 %88, 4, !dbg !1906
  %90 = icmp ne i64 %89, 0, !dbg !1906
  %91 = call i1 @llvm.expect.i1(i1 %90, i1 false), !dbg !1906
  br i1 %91, label %panic179, label %checkok189, !dbg !1906

checkok189:                                       ; preds = %checkok178
  %92 = load i32, ptr %86, align 4, !dbg !1906
  store i32 %92, ptr %val172, align 4, !dbg !1906
  %93 = load i32, ptr %val172, align 4, !dbg !1907
  %lt191 = icmp slt i32 %93, 0, !dbg !1907
  %94 = load ptr, ptr %is_neg, align 8, !dbg !1907
  %checknull192 = icmp eq ptr %94, null, !dbg !1907
  %95 = call i1 @llvm.expect.i1(i1 %checknull192, i1 false), !dbg !1907
  br i1 %95, label %panic193, label %checkok197, !dbg !1907

checkok197:                                       ; preds = %checkok189
  %96 = zext i1 %lt191 to i8, !dbg !1907
  store i8 %96, ptr %94, align 1, !dbg !1907
  %97 = trunc i8 %96 to i1, !dbg !1907
  br i1 %97, label %cond.lhs198, label %cond.rhs202, !dbg !1907

cond.lhs198:                                      ; preds = %checkok197
  %98 = load i32, ptr %val172, align 4, !dbg !1907
  %sext199 = sext i32 %98 to i128, !dbg !1907
  %bnot200 = xor i128 %sext199, -1, !dbg !1907
  %add201 = add i128 %bnot200, 1, !dbg !1907
  br label %cond.phi204, !dbg !1907

cond.rhs202:                                      ; preds = %checkok197
  %99 = load i32, ptr %val172, align 4, !dbg !1907
  %sext203 = sext i32 %99 to i128, !dbg !1907
  br label %cond.phi204, !dbg !1907

cond.phi204:                                      ; preds = %cond.rhs202, %cond.lhs198
  %val205 = phi i128 [ %add201, %cond.lhs198 ], [ %sext203, %cond.rhs202 ], !dbg !1907
  store i128 %val205, ptr %0, align 16, !dbg !1907
  ret i64 0, !dbg !1907

next_if206:                                       ; preds = %result_block170
  br label %check_subtype207, !dbg !1908

check_subtype207:                                 ; preds = %parent_type_block209, %next_if206
  %100 = phi i64 [ %41, %next_if206 ], [ %typeid.parent211, %parent_type_block209 ], !dbg !1908
  %eq208 = icmp eq i64 ptrtoint (ptr @"$ct.long" to i64), %100, !dbg !1908
  br i1 %eq208, label %result_block212, label %parent_type_block209, !dbg !1908

parent_type_block209:                             ; preds = %check_subtype207
  %101 = inttoptr i64 %100 to ptr, !dbg !1908
  %ptradd210 = getelementptr inbounds i8, ptr %101, i64 8, !dbg !1908
  %typeid.parent211 = load i64, ptr %ptradd210, align 8, !dbg !1908
  %102 = icmp eq i64 %typeid.parent211, 0, !dbg !1908
  br i1 %102, label %result_block212, label %check_subtype207, !dbg !1908

result_block212:                                  ; preds = %parent_type_block209, %check_subtype207
  %103 = phi i1 [ false, %parent_type_block209 ], [ true, %check_subtype207 ], !dbg !1908
  br i1 %103, label %switch.case213, label %next_if248, !dbg !1908

switch.case213:                                   ; preds = %result_block212
    #dbg_declare(ptr %val214, !1909, !DIExpression(), !1911)
  %104 = load ptr, ptr %1, align 8, !dbg !1911
  %checknull215 = icmp eq ptr %104, null, !dbg !1911
  %105 = call i1 @llvm.expect.i1(i1 %checknull215, i1 false), !dbg !1911
  br i1 %105, label %panic216, label %checkok220, !dbg !1911

checkok220:                                       ; preds = %switch.case213
  %106 = ptrtoint ptr %104 to i64, !dbg !1911
  %107 = urem i64 %106, 8, !dbg !1911
  %108 = icmp ne i64 %107, 0, !dbg !1911
  %109 = call i1 @llvm.expect.i1(i1 %108, i1 false), !dbg !1911
  br i1 %109, label %panic221, label %checkok231, !dbg !1911

checkok231:                                       ; preds = %checkok220
  %110 = load i64, ptr %104, align 8, !dbg !1911
  store i64 %110, ptr %val214, align 8, !dbg !1911
  %111 = load i64, ptr %val214, align 8, !dbg !1912
  %lt233 = icmp slt i64 %111, 0, !dbg !1912
  %112 = load ptr, ptr %is_neg, align 8, !dbg !1912
  %checknull234 = icmp eq ptr %112, null, !dbg !1912
  %113 = call i1 @llvm.expect.i1(i1 %checknull234, i1 false), !dbg !1912
  br i1 %113, label %panic235, label %checkok239, !dbg !1912

checkok239:                                       ; preds = %checkok231
  %114 = zext i1 %lt233 to i8, !dbg !1912
  store i8 %114, ptr %112, align 1, !dbg !1912
  %115 = trunc i8 %114 to i1, !dbg !1912
  br i1 %115, label %cond.lhs240, label %cond.rhs244, !dbg !1912

cond.lhs240:                                      ; preds = %checkok239
  %116 = load i64, ptr %val214, align 8, !dbg !1912
  %sext241 = sext i64 %116 to i128, !dbg !1912
  %bnot242 = xor i128 %sext241, -1, !dbg !1912
  %add243 = add i128 %bnot242, 1, !dbg !1912
  br label %cond.phi246, !dbg !1912

cond.rhs244:                                      ; preds = %checkok239
  %117 = load i64, ptr %val214, align 8, !dbg !1912
  %sext245 = sext i64 %117 to i128, !dbg !1912
  br label %cond.phi246, !dbg !1912

cond.phi246:                                      ; preds = %cond.rhs244, %cond.lhs240
  %val247 = phi i128 [ %add243, %cond.lhs240 ], [ %sext245, %cond.rhs244 ], !dbg !1912
  store i128 %val247, ptr %0, align 16, !dbg !1912
  ret i64 0, !dbg !1912

next_if248:                                       ; preds = %result_block212
  br label %check_subtype249, !dbg !1913

check_subtype249:                                 ; preds = %parent_type_block251, %next_if248
  %118 = phi i64 [ %41, %next_if248 ], [ %typeid.parent253, %parent_type_block251 ], !dbg !1913
  %eq250 = icmp eq i64 ptrtoint (ptr @"$ct.int128" to i64), %118, !dbg !1913
  br i1 %eq250, label %result_block254, label %parent_type_block251, !dbg !1913

parent_type_block251:                             ; preds = %check_subtype249
  %119 = inttoptr i64 %118 to ptr, !dbg !1913
  %ptradd252 = getelementptr inbounds i8, ptr %119, i64 8, !dbg !1913
  %typeid.parent253 = load i64, ptr %ptradd252, align 8, !dbg !1913
  %120 = icmp eq i64 %typeid.parent253, 0, !dbg !1913
  br i1 %120, label %result_block254, label %check_subtype249, !dbg !1913

result_block254:                                  ; preds = %parent_type_block251, %check_subtype249
  %121 = phi i1 [ false, %parent_type_block251 ], [ true, %check_subtype249 ], !dbg !1913
  br i1 %121, label %switch.case255, label %next_if288, !dbg !1913

switch.case255:                                   ; preds = %result_block254
    #dbg_declare(ptr %val256, !1914, !DIExpression(), !1916)
  %122 = load ptr, ptr %1, align 8, !dbg !1916
  %checknull257 = icmp eq ptr %122, null, !dbg !1916
  %123 = call i1 @llvm.expect.i1(i1 %checknull257, i1 false), !dbg !1916
  br i1 %123, label %panic258, label %checkok262, !dbg !1916

checkok262:                                       ; preds = %switch.case255
  %124 = ptrtoint ptr %122 to i64, !dbg !1916
  %125 = urem i64 %124, 16, !dbg !1916
  %126 = icmp ne i64 %125, 0, !dbg !1916
  %127 = call i1 @llvm.expect.i1(i1 %126, i1 false), !dbg !1916
  br i1 %127, label %panic263, label %checkok273, !dbg !1916

checkok273:                                       ; preds = %checkok262
  %128 = load i128, ptr %122, align 16, !dbg !1916
  store i128 %128, ptr %val256, align 16, !dbg !1916
  %129 = load i128, ptr %val256, align 16, !dbg !1917
  %lt275 = icmp slt i128 %129, 0, !dbg !1917
  %130 = load ptr, ptr %is_neg, align 8, !dbg !1917
  %checknull276 = icmp eq ptr %130, null, !dbg !1917
  %131 = call i1 @llvm.expect.i1(i1 %checknull276, i1 false), !dbg !1917
  br i1 %131, label %panic277, label %checkok281, !dbg !1917

checkok281:                                       ; preds = %checkok273
  %132 = zext i1 %lt275 to i8, !dbg !1917
  store i8 %132, ptr %130, align 1, !dbg !1917
  %133 = trunc i8 %132 to i1, !dbg !1917
  br i1 %133, label %cond.lhs282, label %cond.rhs285, !dbg !1917

cond.lhs282:                                      ; preds = %checkok281
  %134 = load i128, ptr %val256, align 16, !dbg !1917
  %bnot283 = xor i128 %134, -1, !dbg !1917
  %add284 = add i128 %bnot283, 1, !dbg !1917
  br label %cond.phi286, !dbg !1917

cond.rhs285:                                      ; preds = %checkok281
  %135 = load i128, ptr %val256, align 16, !dbg !1917
  br label %cond.phi286, !dbg !1917

cond.phi286:                                      ; preds = %cond.rhs285, %cond.lhs282
  %val287 = phi i128 [ %add284, %cond.lhs282 ], [ %135, %cond.rhs285 ], !dbg !1917
  store i128 %val287, ptr %0, align 16, !dbg !1917
  ret i64 0, !dbg !1917

next_if288:                                       ; preds = %result_block254
  br label %check_subtype289, !dbg !1918

check_subtype289:                                 ; preds = %parent_type_block291, %next_if288
  %136 = phi i64 [ %41, %next_if288 ], [ %typeid.parent293, %parent_type_block291 ], !dbg !1918
  %eq290 = icmp eq i64 ptrtoint (ptr @"$ct.char" to i64), %136, !dbg !1918
  br i1 %eq290, label %result_block294, label %parent_type_block291, !dbg !1918

parent_type_block291:                             ; preds = %check_subtype289
  %137 = inttoptr i64 %136 to ptr, !dbg !1918
  %ptradd292 = getelementptr inbounds i8, ptr %137, i64 8, !dbg !1918
  %typeid.parent293 = load i64, ptr %ptradd292, align 8, !dbg !1918
  %138 = icmp eq i64 %typeid.parent293, 0, !dbg !1918
  br i1 %138, label %result_block294, label %check_subtype289, !dbg !1918

result_block294:                                  ; preds = %parent_type_block291, %check_subtype289
  %139 = phi i1 [ false, %parent_type_block291 ], [ true, %check_subtype289 ], !dbg !1918
  br i1 %139, label %switch.case295, label %next_if304, !dbg !1918

switch.case295:                                   ; preds = %result_block294
  %140 = load ptr, ptr %1, align 8, !dbg !1919
  %checknull297 = icmp eq ptr %140, null, !dbg !1919
  %141 = call i1 @llvm.expect.i1(i1 %checknull297, i1 false), !dbg !1919
  br i1 %141, label %panic298, label %checkok302, !dbg !1919

checkok302:                                       ; preds = %switch.case295
  %142 = load i8, ptr %140, align 1, !dbg !1919
  %zext303 = zext i8 %142 to i128, !dbg !1919
  store i128 %zext303, ptr %0, align 16, !dbg !1919
  ret i64 0, !dbg !1919

next_if304:                                       ; preds = %result_block294
  br label %check_subtype305, !dbg !1921

check_subtype305:                                 ; preds = %parent_type_block307, %next_if304
  %143 = phi i64 [ %41, %next_if304 ], [ %typeid.parent309, %parent_type_block307 ], !dbg !1921
  %eq306 = icmp eq i64 ptrtoint (ptr @"$ct.ushort" to i64), %143, !dbg !1921
  br i1 %eq306, label %result_block310, label %parent_type_block307, !dbg !1921

parent_type_block307:                             ; preds = %check_subtype305
  %144 = inttoptr i64 %143 to ptr, !dbg !1921
  %ptradd308 = getelementptr inbounds i8, ptr %144, i64 8, !dbg !1921
  %typeid.parent309 = load i64, ptr %ptradd308, align 8, !dbg !1921
  %145 = icmp eq i64 %typeid.parent309, 0, !dbg !1921
  br i1 %145, label %result_block310, label %check_subtype305, !dbg !1921

result_block310:                                  ; preds = %parent_type_block307, %check_subtype305
  %146 = phi i1 [ false, %parent_type_block307 ], [ true, %check_subtype305 ], !dbg !1921
  br i1 %146, label %switch.case311, label %next_if331, !dbg !1921

switch.case311:                                   ; preds = %result_block310
  %147 = load ptr, ptr %1, align 8, !dbg !1922
  %checknull313 = icmp eq ptr %147, null, !dbg !1922
  %148 = call i1 @llvm.expect.i1(i1 %checknull313, i1 false), !dbg !1922
  br i1 %148, label %panic314, label %checkok318, !dbg !1922

checkok318:                                       ; preds = %switch.case311
  %149 = ptrtoint ptr %147 to i64, !dbg !1922
  %150 = urem i64 %149, 2, !dbg !1922
  %151 = icmp ne i64 %150, 0, !dbg !1922
  %152 = call i1 @llvm.expect.i1(i1 %151, i1 false), !dbg !1922
  br i1 %152, label %panic319, label %checkok329, !dbg !1922

checkok329:                                       ; preds = %checkok318
  %153 = load i16, ptr %147, align 2, !dbg !1922
  %zext330 = zext i16 %153 to i128, !dbg !1922
  store i128 %zext330, ptr %0, align 16, !dbg !1922
  ret i64 0, !dbg !1922

next_if331:                                       ; preds = %result_block310
  br label %check_subtype332, !dbg !1924

check_subtype332:                                 ; preds = %parent_type_block334, %next_if331
  %154 = phi i64 [ %41, %next_if331 ], [ %typeid.parent336, %parent_type_block334 ], !dbg !1924
  %eq333 = icmp eq i64 ptrtoint (ptr @"$ct.uint" to i64), %154, !dbg !1924
  br i1 %eq333, label %result_block337, label %parent_type_block334, !dbg !1924

parent_type_block334:                             ; preds = %check_subtype332
  %155 = inttoptr i64 %154 to ptr, !dbg !1924
  %ptradd335 = getelementptr inbounds i8, ptr %155, i64 8, !dbg !1924
  %typeid.parent336 = load i64, ptr %ptradd335, align 8, !dbg !1924
  %156 = icmp eq i64 %typeid.parent336, 0, !dbg !1924
  br i1 %156, label %result_block337, label %check_subtype332, !dbg !1924

result_block337:                                  ; preds = %parent_type_block334, %check_subtype332
  %157 = phi i1 [ false, %parent_type_block334 ], [ true, %check_subtype332 ], !dbg !1924
  br i1 %157, label %switch.case338, label %next_if358, !dbg !1924

switch.case338:                                   ; preds = %result_block337
  %158 = load ptr, ptr %1, align 8, !dbg !1925
  %checknull340 = icmp eq ptr %158, null, !dbg !1925
  %159 = call i1 @llvm.expect.i1(i1 %checknull340, i1 false), !dbg !1925
  br i1 %159, label %panic341, label %checkok345, !dbg !1925

checkok345:                                       ; preds = %switch.case338
  %160 = ptrtoint ptr %158 to i64, !dbg !1925
  %161 = urem i64 %160, 4, !dbg !1925
  %162 = icmp ne i64 %161, 0, !dbg !1925
  %163 = call i1 @llvm.expect.i1(i1 %162, i1 false), !dbg !1925
  br i1 %163, label %panic346, label %checkok356, !dbg !1925

checkok356:                                       ; preds = %checkok345
  %164 = load i32, ptr %158, align 4, !dbg !1925
  %zext357 = zext i32 %164 to i128, !dbg !1925
  store i128 %zext357, ptr %0, align 16, !dbg !1925
  ret i64 0, !dbg !1925

next_if358:                                       ; preds = %result_block337
  br label %check_subtype359, !dbg !1927

check_subtype359:                                 ; preds = %parent_type_block361, %next_if358
  %165 = phi i64 [ %41, %next_if358 ], [ %typeid.parent363, %parent_type_block361 ], !dbg !1927
  %eq360 = icmp eq i64 ptrtoint (ptr @"$ct.ulong" to i64), %165, !dbg !1927
  br i1 %eq360, label %result_block364, label %parent_type_block361, !dbg !1927

parent_type_block361:                             ; preds = %check_subtype359
  %166 = inttoptr i64 %165 to ptr, !dbg !1927
  %ptradd362 = getelementptr inbounds i8, ptr %166, i64 8, !dbg !1927
  %typeid.parent363 = load i64, ptr %ptradd362, align 8, !dbg !1927
  %167 = icmp eq i64 %typeid.parent363, 0, !dbg !1927
  br i1 %167, label %result_block364, label %check_subtype359, !dbg !1927

result_block364:                                  ; preds = %parent_type_block361, %check_subtype359
  %168 = phi i1 [ false, %parent_type_block361 ], [ true, %check_subtype359 ], !dbg !1927
  br i1 %168, label %switch.case365, label %next_if385, !dbg !1927

switch.case365:                                   ; preds = %result_block364
  %169 = load ptr, ptr %1, align 8, !dbg !1928
  %checknull367 = icmp eq ptr %169, null, !dbg !1928
  %170 = call i1 @llvm.expect.i1(i1 %checknull367, i1 false), !dbg !1928
  br i1 %170, label %panic368, label %checkok372, !dbg !1928

checkok372:                                       ; preds = %switch.case365
  %171 = ptrtoint ptr %169 to i64, !dbg !1928
  %172 = urem i64 %171, 8, !dbg !1928
  %173 = icmp ne i64 %172, 0, !dbg !1928
  %174 = call i1 @llvm.expect.i1(i1 %173, i1 false), !dbg !1928
  br i1 %174, label %panic373, label %checkok383, !dbg !1928

checkok383:                                       ; preds = %checkok372
  %175 = load i64, ptr %169, align 8, !dbg !1928
  %zext384 = zext i64 %175 to i128, !dbg !1928
  store i128 %zext384, ptr %0, align 16, !dbg !1928
  ret i64 0, !dbg !1928

next_if385:                                       ; preds = %result_block364
  br label %check_subtype386, !dbg !1930

check_subtype386:                                 ; preds = %parent_type_block388, %next_if385
  %176 = phi i64 [ %41, %next_if385 ], [ %typeid.parent390, %parent_type_block388 ], !dbg !1930
  %eq387 = icmp eq i64 ptrtoint (ptr @"$ct.uint128" to i64), %176, !dbg !1930
  br i1 %eq387, label %result_block391, label %parent_type_block388, !dbg !1930

parent_type_block388:                             ; preds = %check_subtype386
  %177 = inttoptr i64 %176 to ptr, !dbg !1930
  %ptradd389 = getelementptr inbounds i8, ptr %177, i64 8, !dbg !1930
  %typeid.parent390 = load i64, ptr %ptradd389, align 8, !dbg !1930
  %178 = icmp eq i64 %typeid.parent390, 0, !dbg !1930
  br i1 %178, label %result_block391, label %check_subtype386, !dbg !1930

result_block391:                                  ; preds = %parent_type_block388, %check_subtype386
  %179 = phi i1 [ false, %parent_type_block388 ], [ true, %check_subtype386 ], !dbg !1930
  br i1 %179, label %switch.case392, label %next_if411, !dbg !1930

switch.case392:                                   ; preds = %result_block391
  %180 = load ptr, ptr %1, align 8, !dbg !1931
  %checknull394 = icmp eq ptr %180, null, !dbg !1931
  %181 = call i1 @llvm.expect.i1(i1 %checknull394, i1 false), !dbg !1931
  br i1 %181, label %panic395, label %checkok399, !dbg !1931

checkok399:                                       ; preds = %switch.case392
  %182 = ptrtoint ptr %180 to i64, !dbg !1931
  %183 = urem i64 %182, 16, !dbg !1931
  %184 = icmp ne i64 %183, 0, !dbg !1931
  %185 = call i1 @llvm.expect.i1(i1 %184, i1 false), !dbg !1931
  br i1 %185, label %panic400, label %checkok410, !dbg !1931

checkok410:                                       ; preds = %checkok399
  %186 = load i128, ptr %180, align 16, !dbg !1931
  store i128 %186, ptr %0, align 16, !dbg !1931
  ret i64 0, !dbg !1931

next_if411:                                       ; preds = %result_block391
  br label %check_subtype412, !dbg !1933

check_subtype412:                                 ; preds = %parent_type_block414, %next_if411
  %187 = phi i64 [ %41, %next_if411 ], [ %typeid.parent416, %parent_type_block414 ], !dbg !1933
  %eq413 = icmp eq i64 ptrtoint (ptr @"$ct.float" to i64), %187, !dbg !1933
  br i1 %eq413, label %result_block417, label %parent_type_block414, !dbg !1933

parent_type_block414:                             ; preds = %check_subtype412
  %188 = inttoptr i64 %187 to ptr, !dbg !1933
  %ptradd415 = getelementptr inbounds i8, ptr %188, i64 8, !dbg !1933
  %typeid.parent416 = load i64, ptr %ptradd415, align 8, !dbg !1933
  %189 = icmp eq i64 %typeid.parent416, 0, !dbg !1933
  br i1 %189, label %result_block417, label %check_subtype412, !dbg !1933

result_block417:                                  ; preds = %parent_type_block414, %check_subtype412
  %190 = phi i1 [ false, %parent_type_block414 ], [ true, %check_subtype412 ], !dbg !1933
  br i1 %190, label %switch.case418, label %next_if448, !dbg !1933

switch.case418:                                   ; preds = %result_block417
    #dbg_declare(ptr %f, !1934, !DIExpression(), !1937)
  %191 = load ptr, ptr %1, align 8, !dbg !1937
  %checknull419 = icmp eq ptr %191, null, !dbg !1937
  %192 = call i1 @llvm.expect.i1(i1 %checknull419, i1 false), !dbg !1937
  br i1 %192, label %panic420, label %checkok424, !dbg !1937

checkok424:                                       ; preds = %switch.case418
  %193 = ptrtoint ptr %191 to i64, !dbg !1937
  %194 = urem i64 %193, 4, !dbg !1937
  %195 = icmp ne i64 %194, 0, !dbg !1937
  %196 = call i1 @llvm.expect.i1(i1 %195, i1 false), !dbg !1937
  br i1 %196, label %panic425, label %checkok435, !dbg !1937

checkok435:                                       ; preds = %checkok424
  %197 = load float, ptr %191, align 4, !dbg !1937
  store float %197, ptr %f, align 4, !dbg !1937
  %198 = load float, ptr %f, align 4, !dbg !1938
  %lt437 = fcmp olt float %198, 0.000000e+00, !dbg !1938
  %199 = load ptr, ptr %is_neg, align 8, !dbg !1938
  %checknull438 = icmp eq ptr %199, null, !dbg !1938
  %200 = call i1 @llvm.expect.i1(i1 %checknull438, i1 false), !dbg !1938
  br i1 %200, label %panic439, label %checkok443, !dbg !1938

checkok443:                                       ; preds = %checkok435
  %201 = zext i1 %lt437 to i8, !dbg !1938
  store i8 %201, ptr %199, align 1, !dbg !1938
  %202 = trunc i8 %201 to i1, !dbg !1938
  br i1 %202, label %cond.lhs444, label %cond.rhs445, !dbg !1938

cond.lhs444:                                      ; preds = %checkok443
  %203 = load float, ptr %f, align 4, !dbg !1938
  %fneg = fneg float %203, !dbg !1938
  br label %cond.phi446, !dbg !1938

cond.rhs445:                                      ; preds = %checkok443
  %204 = load float, ptr %f, align 4, !dbg !1938
  br label %cond.phi446, !dbg !1938

cond.phi446:                                      ; preds = %cond.rhs445, %cond.lhs444
  %val447 = phi float [ %fneg, %cond.lhs444 ], [ %204, %cond.rhs445 ], !dbg !1938
  %fpui = fptoui float %val447 to i128, !dbg !1938
  store i128 %fpui, ptr %0, align 16, !dbg !1938
  ret i64 0, !dbg !1938

next_if448:                                       ; preds = %result_block417
  br label %check_subtype449, !dbg !1939

check_subtype449:                                 ; preds = %parent_type_block451, %next_if448
  %205 = phi i64 [ %41, %next_if448 ], [ %typeid.parent453, %parent_type_block451 ], !dbg !1939
  %eq450 = icmp eq i64 ptrtoint (ptr @"$ct.double" to i64), %205, !dbg !1939
  br i1 %eq450, label %result_block454, label %parent_type_block451, !dbg !1939

parent_type_block451:                             ; preds = %check_subtype449
  %206 = inttoptr i64 %205 to ptr, !dbg !1939
  %ptradd452 = getelementptr inbounds i8, ptr %206, i64 8, !dbg !1939
  %typeid.parent453 = load i64, ptr %ptradd452, align 8, !dbg !1939
  %207 = icmp eq i64 %typeid.parent453, 0, !dbg !1939
  br i1 %207, label %result_block454, label %check_subtype449, !dbg !1939

result_block454:                                  ; preds = %parent_type_block451, %check_subtype449
  %208 = phi i1 [ false, %parent_type_block451 ], [ true, %check_subtype449 ], !dbg !1939
  br i1 %208, label %switch.case455, label %next_if487, !dbg !1939

switch.case455:                                   ; preds = %result_block454
    #dbg_declare(ptr %d, !1940, !DIExpression(), !1942)
  %209 = load ptr, ptr %1, align 8, !dbg !1942
  %checknull456 = icmp eq ptr %209, null, !dbg !1942
  %210 = call i1 @llvm.expect.i1(i1 %checknull456, i1 false), !dbg !1942
  br i1 %210, label %panic457, label %checkok461, !dbg !1942

checkok461:                                       ; preds = %switch.case455
  %211 = ptrtoint ptr %209 to i64, !dbg !1942
  %212 = urem i64 %211, 8, !dbg !1942
  %213 = icmp ne i64 %212, 0, !dbg !1942
  %214 = call i1 @llvm.expect.i1(i1 %213, i1 false), !dbg !1942
  br i1 %214, label %panic462, label %checkok472, !dbg !1942

checkok472:                                       ; preds = %checkok461
  %215 = load double, ptr %209, align 8, !dbg !1942
  store double %215, ptr %d, align 8, !dbg !1942
  %216 = load double, ptr %d, align 8, !dbg !1943
  %lt474 = fcmp olt double %216, 0.000000e+00, !dbg !1943
  %217 = load ptr, ptr %is_neg, align 8, !dbg !1943
  %checknull475 = icmp eq ptr %217, null, !dbg !1943
  %218 = call i1 @llvm.expect.i1(i1 %checknull475, i1 false), !dbg !1943
  br i1 %218, label %panic476, label %checkok480, !dbg !1943

checkok480:                                       ; preds = %checkok472
  %219 = zext i1 %lt474 to i8, !dbg !1943
  store i8 %219, ptr %217, align 1, !dbg !1943
  %220 = trunc i8 %219 to i1, !dbg !1943
  br i1 %220, label %cond.lhs481, label %cond.rhs483, !dbg !1943

cond.lhs481:                                      ; preds = %checkok480
  %221 = load double, ptr %d, align 8, !dbg !1943
  %fneg482 = fneg double %221, !dbg !1943
  br label %cond.phi484, !dbg !1943

cond.rhs483:                                      ; preds = %checkok480
  %222 = load double, ptr %d, align 8, !dbg !1943
  br label %cond.phi484, !dbg !1943

cond.phi484:                                      ; preds = %cond.rhs483, %cond.lhs481
  %val485 = phi double [ %fneg482, %cond.lhs481 ], [ %222, %cond.rhs483 ], !dbg !1943
  %fpui486 = fptoui double %val485 to i128, !dbg !1943
  store i128 %fpui486, ptr %0, align 16, !dbg !1943
  ret i64 0, !dbg !1943

next_if487:                                       ; preds = %result_block454
  br label %switch.default488, !dbg !1943

switch.default488:                                ; preds = %next_if487
  ret i64 ptrtoint (ptr @std.io.BAD_FORMAT to i64), !dbg !1944

panic:                                            ; preds = %switch.case
  store %"char[]" { ptr @.panic_msg.114, i64 47 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.115, i64 12 }, ptr %indirectarg2, align 8
  %223 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %223(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 44) #5, !dbg !1876
  unreachable, !dbg !1876

panic4:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.116, i64 56 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg6, align 8
  store %"char[]" { ptr @.func.115, i64 12 }, ptr %indirectarg7, align 8
  %224 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %224(ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, ptr align 8 %indirectarg7, i32 45) #5, !dbg !1878
  unreachable, !dbg !1878

panic9:                                           ; preds = %checkok8
  store i64 8, ptr %taddr, align 8
  %225 = insertvalue %any undef, ptr %taddr, 0
  %226 = insertvalue %any %225, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %10, ptr %taddr10, align 8
  %227 = insertvalue %any undef, ptr %taddr10, 0
  %228 = insertvalue %any %227, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg12, align 8
  store %"char[]" { ptr @.func.115, i64 12 }, ptr %indirectarg13, align 8
  store %any %226, ptr %varargslots, align 16
  %ptradd14 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %228, ptr %ptradd14, align 16
  %229 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %229, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg15, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, ptr align 8 %indirectarg13, i32 45, ptr align 8 %indirectarg15) #5, !dbg !1878
  unreachable, !dbg !1878

panic23:                                          ; preds = %assert_ok
  store %"char[]" { ptr @.panic_msg.2, i64 45 }, ptr %indirectarg24, align 8
  store %"char[]" { ptr @.file.14, i64 10 }, ptr %indirectarg25, align 8
  store %"char[]" { ptr @.func.115, i64 12 }, ptr %indirectarg26, align 8
  %230 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %230(ptr align 8 %indirectarg24, ptr align 8 %indirectarg25, ptr align 8 %indirectarg26, i32 268) #5, !dbg !1884
  unreachable, !dbg !1884

panic28:                                          ; preds = %checkok27
  store i64 8, ptr %taddr29, align 8
  %231 = insertvalue %any undef, ptr %taddr29, 0
  %232 = insertvalue %any %231, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %19, ptr %taddr30, align 8
  %233 = insertvalue %any undef, ptr %taddr30, 0
  %234 = insertvalue %any %233, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg31, align 8
  store %"char[]" { ptr @.file.14, i64 10 }, ptr %indirectarg32, align 8
  store %"char[]" { ptr @.func.115, i64 12 }, ptr %indirectarg33, align 8
  store %any %232, ptr %varargslots34, align 16
  %ptradd35 = getelementptr inbounds i8, ptr %varargslots34, i64 16
  store %any %234, ptr %ptradd35, align 16
  %235 = insertvalue %"any[]" undef, ptr %varargslots34, 0
  %"$$temp36" = insertvalue %"any[]" %235, i64 2, 1
  store %"any[]" %"$$temp36", ptr %indirectarg37, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg31, ptr align 8 %indirectarg32, ptr align 8 %indirectarg33, i32 268, ptr align 8 %indirectarg37) #5, !dbg !1884
  unreachable, !dbg !1884

panic40:                                          ; preds = %checkok38
  store %"char[]" { ptr @.panic_msg.2, i64 45 }, ptr %indirectarg41, align 8
  store %"char[]" { ptr @.file.14, i64 10 }, ptr %indirectarg42, align 8
  store %"char[]" { ptr @.func.115, i64 12 }, ptr %indirectarg43, align 8
  %236 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %236(ptr align 8 %indirectarg41, ptr align 8 %indirectarg42, ptr align 8 %indirectarg43, i32 268) #5, !dbg !1884
  unreachable, !dbg !1884

panic45:                                          ; preds = %checkok44
  store i64 8, ptr %taddr46, align 8
  %237 = insertvalue %any undef, ptr %taddr46, 0
  %238 = insertvalue %any %237, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %26, ptr %taddr47, align 8
  %239 = insertvalue %any undef, ptr %taddr47, 0
  %240 = insertvalue %any %239, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg48, align 8
  store %"char[]" { ptr @.file.14, i64 10 }, ptr %indirectarg49, align 8
  store %"char[]" { ptr @.func.115, i64 12 }, ptr %indirectarg50, align 8
  store %any %238, ptr %varargslots51, align 16
  %ptradd52 = getelementptr inbounds i8, ptr %varargslots51, i64 16
  store %any %240, ptr %ptradd52, align 16
  %241 = insertvalue %"any[]" undef, ptr %varargslots51, 0
  %"$$temp53" = insertvalue %"any[]" %241, i64 2, 1
  store %"any[]" %"$$temp53", ptr %indirectarg54, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg48, ptr align 8 %indirectarg49, ptr align 8 %indirectarg50, i32 268, ptr align 8 %indirectarg54) #5, !dbg !1884
  unreachable, !dbg !1884

panic79:                                          ; preds = %switch.exit
  store %"char[]" { ptr @.panic_msg.114, i64 47 }, ptr %indirectarg80, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg81, align 8
  store %"char[]" { ptr @.func.115, i64 12 }, ptr %indirectarg82, align 8
  %242 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %242(ptr align 8 %indirectarg80, ptr align 8 %indirectarg81, ptr align 8 %indirectarg82, i32 52) #5, !dbg !1887
  unreachable, !dbg !1887

panic92:                                          ; preds = %switch.case89
  store %"char[]" { ptr @.panic_msg.117, i64 51 }, ptr %indirectarg93, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg94, align 8
  store %"char[]" { ptr @.func.115, i64 12 }, ptr %indirectarg95, align 8
  %243 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %243(ptr align 8 %indirectarg93, ptr align 8 %indirectarg94, ptr align 8 %indirectarg95, i32 56) #5, !dbg !1891
  unreachable, !dbg !1891

panic106:                                         ; preds = %switch.case104
  store %"char[]" { ptr @.panic_msg.118, i64 52 }, ptr %indirectarg107, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg108, align 8
  store %"char[]" { ptr @.func.115, i64 12 }, ptr %indirectarg109, align 8
  %244 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %244(ptr align 8 %indirectarg107, ptr align 8 %indirectarg108, ptr align 8 %indirectarg109, i32 58) #5, !dbg !1896
  unreachable, !dbg !1896

panic113:                                         ; preds = %checkok110
  store %"char[]" { ptr @.panic_msg.114, i64 47 }, ptr %indirectarg114, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg115, align 8
  store %"char[]" { ptr @.func.115, i64 12 }, ptr %indirectarg116, align 8
  %245 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %245(ptr align 8 %indirectarg114, ptr align 8 %indirectarg115, ptr align 8 %indirectarg116, i32 59) #5, !dbg !1897
  unreachable, !dbg !1897

panic131:                                         ; preds = %switch.case128
  store %"char[]" { ptr @.panic_msg.119, i64 52 }, ptr %indirectarg132, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg133, align 8
  store %"char[]" { ptr @.func.115, i64 12 }, ptr %indirectarg134, align 8
  %246 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %246(ptr align 8 %indirectarg132, ptr align 8 %indirectarg133, ptr align 8 %indirectarg134, i32 61) #5, !dbg !1901
  unreachable, !dbg !1901

panic136:                                         ; preds = %checkok135
  store i64 2, ptr %taddr137, align 8
  %247 = insertvalue %any undef, ptr %taddr137, 0
  %248 = insertvalue %any %247, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %71, ptr %taddr138, align 8
  %249 = insertvalue %any undef, ptr %taddr138, 0
  %250 = insertvalue %any %249, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg139, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg140, align 8
  store %"char[]" { ptr @.func.115, i64 12 }, ptr %indirectarg141, align 8
  store %any %248, ptr %varargslots142, align 16
  %ptradd143 = getelementptr inbounds i8, ptr %varargslots142, i64 16
  store %any %250, ptr %ptradd143, align 16
  %251 = insertvalue %"any[]" undef, ptr %varargslots142, 0
  %"$$temp144" = insertvalue %"any[]" %251, i64 2, 1
  store %"any[]" %"$$temp144", ptr %indirectarg145, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg139, ptr align 8 %indirectarg140, ptr align 8 %indirectarg141, i32 61, ptr align 8 %indirectarg145) #5, !dbg !1901
  unreachable, !dbg !1901

panic151:                                         ; preds = %checkok146
  store %"char[]" { ptr @.panic_msg.114, i64 47 }, ptr %indirectarg152, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg153, align 8
  store %"char[]" { ptr @.func.115, i64 12 }, ptr %indirectarg154, align 8
  %252 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %252(ptr align 8 %indirectarg152, ptr align 8 %indirectarg153, ptr align 8 %indirectarg154, i32 62) #5, !dbg !1902
  unreachable, !dbg !1902

panic174:                                         ; preds = %switch.case171
  store %"char[]" { ptr @.panic_msg.120, i64 50 }, ptr %indirectarg175, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg176, align 8
  store %"char[]" { ptr @.func.115, i64 12 }, ptr %indirectarg177, align 8
  %253 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %253(ptr align 8 %indirectarg175, ptr align 8 %indirectarg176, ptr align 8 %indirectarg177, i32 64) #5, !dbg !1906
  unreachable, !dbg !1906

panic179:                                         ; preds = %checkok178
  store i64 4, ptr %taddr180, align 8
  %254 = insertvalue %any undef, ptr %taddr180, 0
  %255 = insertvalue %any %254, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %89, ptr %taddr181, align 8
  %256 = insertvalue %any undef, ptr %taddr181, 0
  %257 = insertvalue %any %256, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg182, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg183, align 8
  store %"char[]" { ptr @.func.115, i64 12 }, ptr %indirectarg184, align 8
  store %any %255, ptr %varargslots185, align 16
  %ptradd186 = getelementptr inbounds i8, ptr %varargslots185, i64 16
  store %any %257, ptr %ptradd186, align 16
  %258 = insertvalue %"any[]" undef, ptr %varargslots185, 0
  %"$$temp187" = insertvalue %"any[]" %258, i64 2, 1
  store %"any[]" %"$$temp187", ptr %indirectarg188, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg182, ptr align 8 %indirectarg183, ptr align 8 %indirectarg184, i32 64, ptr align 8 %indirectarg188) #5, !dbg !1906
  unreachable, !dbg !1906

panic193:                                         ; preds = %checkok189
  store %"char[]" { ptr @.panic_msg.114, i64 47 }, ptr %indirectarg194, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg195, align 8
  store %"char[]" { ptr @.func.115, i64 12 }, ptr %indirectarg196, align 8
  %259 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %259(ptr align 8 %indirectarg194, ptr align 8 %indirectarg195, ptr align 8 %indirectarg196, i32 65) #5, !dbg !1907
  unreachable, !dbg !1907

panic216:                                         ; preds = %switch.case213
  store %"char[]" { ptr @.panic_msg.121, i64 51 }, ptr %indirectarg217, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg218, align 8
  store %"char[]" { ptr @.func.115, i64 12 }, ptr %indirectarg219, align 8
  %260 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %260(ptr align 8 %indirectarg217, ptr align 8 %indirectarg218, ptr align 8 %indirectarg219, i32 67) #5, !dbg !1911
  unreachable, !dbg !1911

panic221:                                         ; preds = %checkok220
  store i64 8, ptr %taddr222, align 8
  %261 = insertvalue %any undef, ptr %taddr222, 0
  %262 = insertvalue %any %261, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %107, ptr %taddr223, align 8
  %263 = insertvalue %any undef, ptr %taddr223, 0
  %264 = insertvalue %any %263, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg224, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg225, align 8
  store %"char[]" { ptr @.func.115, i64 12 }, ptr %indirectarg226, align 8
  store %any %262, ptr %varargslots227, align 16
  %ptradd228 = getelementptr inbounds i8, ptr %varargslots227, i64 16
  store %any %264, ptr %ptradd228, align 16
  %265 = insertvalue %"any[]" undef, ptr %varargslots227, 0
  %"$$temp229" = insertvalue %"any[]" %265, i64 2, 1
  store %"any[]" %"$$temp229", ptr %indirectarg230, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg224, ptr align 8 %indirectarg225, ptr align 8 %indirectarg226, i32 67, ptr align 8 %indirectarg230) #5, !dbg !1911
  unreachable, !dbg !1911

panic235:                                         ; preds = %checkok231
  store %"char[]" { ptr @.panic_msg.114, i64 47 }, ptr %indirectarg236, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg237, align 8
  store %"char[]" { ptr @.func.115, i64 12 }, ptr %indirectarg238, align 8
  %266 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %266(ptr align 8 %indirectarg236, ptr align 8 %indirectarg237, ptr align 8 %indirectarg238, i32 68) #5, !dbg !1912
  unreachable, !dbg !1912

panic258:                                         ; preds = %switch.case255
  store %"char[]" { ptr @.panic_msg.122, i64 53 }, ptr %indirectarg259, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg260, align 8
  store %"char[]" { ptr @.func.115, i64 12 }, ptr %indirectarg261, align 8
  %267 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %267(ptr align 8 %indirectarg259, ptr align 8 %indirectarg260, ptr align 8 %indirectarg261, i32 70) #5, !dbg !1916
  unreachable, !dbg !1916

panic263:                                         ; preds = %checkok262
  store i64 16, ptr %taddr264, align 8
  %268 = insertvalue %any undef, ptr %taddr264, 0
  %269 = insertvalue %any %268, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %125, ptr %taddr265, align 8
  %270 = insertvalue %any undef, ptr %taddr265, 0
  %271 = insertvalue %any %270, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg266, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg267, align 8
  store %"char[]" { ptr @.func.115, i64 12 }, ptr %indirectarg268, align 8
  store %any %269, ptr %varargslots269, align 16
  %ptradd270 = getelementptr inbounds i8, ptr %varargslots269, i64 16
  store %any %271, ptr %ptradd270, align 16
  %272 = insertvalue %"any[]" undef, ptr %varargslots269, 0
  %"$$temp271" = insertvalue %"any[]" %272, i64 2, 1
  store %"any[]" %"$$temp271", ptr %indirectarg272, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg266, ptr align 8 %indirectarg267, ptr align 8 %indirectarg268, i32 70, ptr align 8 %indirectarg272) #5, !dbg !1916
  unreachable, !dbg !1916

panic277:                                         ; preds = %checkok273
  store %"char[]" { ptr @.panic_msg.114, i64 47 }, ptr %indirectarg278, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg279, align 8
  store %"char[]" { ptr @.func.115, i64 12 }, ptr %indirectarg280, align 8
  %273 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %273(ptr align 8 %indirectarg278, ptr align 8 %indirectarg279, ptr align 8 %indirectarg280, i32 71) #5, !dbg !1917
  unreachable, !dbg !1917

panic298:                                         ; preds = %switch.case295
  store %"char[]" { ptr @.panic_msg.123, i64 51 }, ptr %indirectarg299, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg300, align 8
  store %"char[]" { ptr @.func.115, i64 12 }, ptr %indirectarg301, align 8
  %274 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %274(ptr align 8 %indirectarg299, ptr align 8 %indirectarg300, ptr align 8 %indirectarg301, i32 73) #5, !dbg !1919
  unreachable, !dbg !1919

panic314:                                         ; preds = %switch.case311
  store %"char[]" { ptr @.panic_msg.124, i64 53 }, ptr %indirectarg315, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg316, align 8
  store %"char[]" { ptr @.func.115, i64 12 }, ptr %indirectarg317, align 8
  %275 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %275(ptr align 8 %indirectarg315, ptr align 8 %indirectarg316, ptr align 8 %indirectarg317, i32 75) #5, !dbg !1922
  unreachable, !dbg !1922

panic319:                                         ; preds = %checkok318
  store i64 2, ptr %taddr320, align 8
  %276 = insertvalue %any undef, ptr %taddr320, 0
  %277 = insertvalue %any %276, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %150, ptr %taddr321, align 8
  %278 = insertvalue %any undef, ptr %taddr321, 0
  %279 = insertvalue %any %278, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg322, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg323, align 8
  store %"char[]" { ptr @.func.115, i64 12 }, ptr %indirectarg324, align 8
  store %any %277, ptr %varargslots325, align 16
  %ptradd326 = getelementptr inbounds i8, ptr %varargslots325, i64 16
  store %any %279, ptr %ptradd326, align 16
  %280 = insertvalue %"any[]" undef, ptr %varargslots325, 0
  %"$$temp327" = insertvalue %"any[]" %280, i64 2, 1
  store %"any[]" %"$$temp327", ptr %indirectarg328, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg322, ptr align 8 %indirectarg323, ptr align 8 %indirectarg324, i32 75, ptr align 8 %indirectarg328) #5, !dbg !1922
  unreachable, !dbg !1922

panic341:                                         ; preds = %switch.case338
  store %"char[]" { ptr @.panic_msg.125, i64 51 }, ptr %indirectarg342, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg343, align 8
  store %"char[]" { ptr @.func.115, i64 12 }, ptr %indirectarg344, align 8
  %281 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %281(ptr align 8 %indirectarg342, ptr align 8 %indirectarg343, ptr align 8 %indirectarg344, i32 77) #5, !dbg !1925
  unreachable, !dbg !1925

panic346:                                         ; preds = %checkok345
  store i64 4, ptr %taddr347, align 8
  %282 = insertvalue %any undef, ptr %taddr347, 0
  %283 = insertvalue %any %282, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %161, ptr %taddr348, align 8
  %284 = insertvalue %any undef, ptr %taddr348, 0
  %285 = insertvalue %any %284, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg349, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg350, align 8
  store %"char[]" { ptr @.func.115, i64 12 }, ptr %indirectarg351, align 8
  store %any %283, ptr %varargslots352, align 16
  %ptradd353 = getelementptr inbounds i8, ptr %varargslots352, i64 16
  store %any %285, ptr %ptradd353, align 16
  %286 = insertvalue %"any[]" undef, ptr %varargslots352, 0
  %"$$temp354" = insertvalue %"any[]" %286, i64 2, 1
  store %"any[]" %"$$temp354", ptr %indirectarg355, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg349, ptr align 8 %indirectarg350, ptr align 8 %indirectarg351, i32 77, ptr align 8 %indirectarg355) #5, !dbg !1925
  unreachable, !dbg !1925

panic368:                                         ; preds = %switch.case365
  store %"char[]" { ptr @.panic_msg.126, i64 52 }, ptr %indirectarg369, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg370, align 8
  store %"char[]" { ptr @.func.115, i64 12 }, ptr %indirectarg371, align 8
  %287 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %287(ptr align 8 %indirectarg369, ptr align 8 %indirectarg370, ptr align 8 %indirectarg371, i32 79) #5, !dbg !1928
  unreachable, !dbg !1928

panic373:                                         ; preds = %checkok372
  store i64 8, ptr %taddr374, align 8
  %288 = insertvalue %any undef, ptr %taddr374, 0
  %289 = insertvalue %any %288, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %172, ptr %taddr375, align 8
  %290 = insertvalue %any undef, ptr %taddr375, 0
  %291 = insertvalue %any %290, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg376, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg377, align 8
  store %"char[]" { ptr @.func.115, i64 12 }, ptr %indirectarg378, align 8
  store %any %289, ptr %varargslots379, align 16
  %ptradd380 = getelementptr inbounds i8, ptr %varargslots379, i64 16
  store %any %291, ptr %ptradd380, align 16
  %292 = insertvalue %"any[]" undef, ptr %varargslots379, 0
  %"$$temp381" = insertvalue %"any[]" %292, i64 2, 1
  store %"any[]" %"$$temp381", ptr %indirectarg382, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg376, ptr align 8 %indirectarg377, ptr align 8 %indirectarg378, i32 79, ptr align 8 %indirectarg382) #5, !dbg !1928
  unreachable, !dbg !1928

panic395:                                         ; preds = %switch.case392
  store %"char[]" { ptr @.panic_msg.127, i64 54 }, ptr %indirectarg396, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg397, align 8
  store %"char[]" { ptr @.func.115, i64 12 }, ptr %indirectarg398, align 8
  %293 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %293(ptr align 8 %indirectarg396, ptr align 8 %indirectarg397, ptr align 8 %indirectarg398, i32 81) #5, !dbg !1931
  unreachable, !dbg !1931

panic400:                                         ; preds = %checkok399
  store i64 16, ptr %taddr401, align 8
  %294 = insertvalue %any undef, ptr %taddr401, 0
  %295 = insertvalue %any %294, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %183, ptr %taddr402, align 8
  %296 = insertvalue %any undef, ptr %taddr402, 0
  %297 = insertvalue %any %296, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg403, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg404, align 8
  store %"char[]" { ptr @.func.115, i64 12 }, ptr %indirectarg405, align 8
  store %any %295, ptr %varargslots406, align 16
  %ptradd407 = getelementptr inbounds i8, ptr %varargslots406, i64 16
  store %any %297, ptr %ptradd407, align 16
  %298 = insertvalue %"any[]" undef, ptr %varargslots406, 0
  %"$$temp408" = insertvalue %"any[]" %298, i64 2, 1
  store %"any[]" %"$$temp408", ptr %indirectarg409, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg403, ptr align 8 %indirectarg404, ptr align 8 %indirectarg405, i32 81, ptr align 8 %indirectarg409) #5, !dbg !1931
  unreachable, !dbg !1931

panic420:                                         ; preds = %switch.case418
  store %"char[]" { ptr @.panic_msg.128, i64 52 }, ptr %indirectarg421, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg422, align 8
  store %"char[]" { ptr @.func.115, i64 12 }, ptr %indirectarg423, align 8
  %299 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %299(ptr align 8 %indirectarg421, ptr align 8 %indirectarg422, ptr align 8 %indirectarg423, i32 83) #5, !dbg !1937
  unreachable, !dbg !1937

panic425:                                         ; preds = %checkok424
  store i64 4, ptr %taddr426, align 8
  %300 = insertvalue %any undef, ptr %taddr426, 0
  %301 = insertvalue %any %300, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %194, ptr %taddr427, align 8
  %302 = insertvalue %any undef, ptr %taddr427, 0
  %303 = insertvalue %any %302, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg428, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg429, align 8
  store %"char[]" { ptr @.func.115, i64 12 }, ptr %indirectarg430, align 8
  store %any %301, ptr %varargslots431, align 16
  %ptradd432 = getelementptr inbounds i8, ptr %varargslots431, i64 16
  store %any %303, ptr %ptradd432, align 16
  %304 = insertvalue %"any[]" undef, ptr %varargslots431, 0
  %"$$temp433" = insertvalue %"any[]" %304, i64 2, 1
  store %"any[]" %"$$temp433", ptr %indirectarg434, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg428, ptr align 8 %indirectarg429, ptr align 8 %indirectarg430, i32 83, ptr align 8 %indirectarg434) #5, !dbg !1937
  unreachable, !dbg !1937

panic439:                                         ; preds = %checkok435
  store %"char[]" { ptr @.panic_msg.114, i64 47 }, ptr %indirectarg440, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg441, align 8
  store %"char[]" { ptr @.func.115, i64 12 }, ptr %indirectarg442, align 8
  %305 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %305(ptr align 8 %indirectarg440, ptr align 8 %indirectarg441, ptr align 8 %indirectarg442, i32 84) #5, !dbg !1938
  unreachable, !dbg !1938

panic457:                                         ; preds = %switch.case455
  store %"char[]" { ptr @.panic_msg.129, i64 53 }, ptr %indirectarg458, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg459, align 8
  store %"char[]" { ptr @.func.115, i64 12 }, ptr %indirectarg460, align 8
  %306 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %306(ptr align 8 %indirectarg458, ptr align 8 %indirectarg459, ptr align 8 %indirectarg460, i32 86) #5, !dbg !1942
  unreachable, !dbg !1942

panic462:                                         ; preds = %checkok461
  store i64 8, ptr %taddr463, align 8
  %307 = insertvalue %any undef, ptr %taddr463, 0
  %308 = insertvalue %any %307, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %212, ptr %taddr464, align 8
  %309 = insertvalue %any undef, ptr %taddr464, 0
  %310 = insertvalue %any %309, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg465, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg466, align 8
  store %"char[]" { ptr @.func.115, i64 12 }, ptr %indirectarg467, align 8
  store %any %308, ptr %varargslots468, align 16
  %ptradd469 = getelementptr inbounds i8, ptr %varargslots468, i64 16
  store %any %310, ptr %ptradd469, align 16
  %311 = insertvalue %"any[]" undef, ptr %varargslots468, 0
  %"$$temp470" = insertvalue %"any[]" %311, i64 2, 1
  store %"any[]" %"$$temp470", ptr %indirectarg471, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg465, ptr align 8 %indirectarg466, ptr align 8 %indirectarg467, i32 86, ptr align 8 %indirectarg471) #5, !dbg !1942
  unreachable, !dbg !1942

panic476:                                         ; preds = %checkok472
  store %"char[]" { ptr @.panic_msg.114, i64 47 }, ptr %indirectarg477, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg478, align 8
  store %"char[]" { ptr @.func.115, i64 12 }, ptr %indirectarg479, align 8
  %312 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %312(ptr align 8 %indirectarg477, ptr align 8 %indirectarg478, ptr align 8 %indirectarg479, i32 87) #5, !dbg !1943
  unreachable, !dbg !1943
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @std.io.float_from_any(ptr %0, ptr align 8 %1) #0 !dbg !1946 {
entry:
  %reterr = alloca i64, align 8
  %self = alloca ptr, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg7 = alloca %"char[]", align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr11 = alloca i64, align 8
  %indirectarg12 = alloca %"char[]", align 8
  %indirectarg13 = alloca %"char[]", align 8
  %indirectarg14 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg16 = alloca %"any[]", align 8
  %indirectarg20 = alloca %"char[]", align 8
  %indirectarg21 = alloca %"char[]", align 8
  %indirectarg22 = alloca %"char[]", align 8
  %taddr25 = alloca i64, align 8
  %taddr26 = alloca i64, align 8
  %indirectarg27 = alloca %"char[]", align 8
  %indirectarg28 = alloca %"char[]", align 8
  %indirectarg29 = alloca %"char[]", align 8
  %varargslots30 = alloca [2 x %any], align 16
  %indirectarg33 = alloca %"any[]", align 8
  %indirectarg53 = alloca %"char[]", align 8
  %indirectarg54 = alloca %"char[]", align 8
  %indirectarg55 = alloca %"char[]", align 8
  %retparam = alloca double, align 8
  %indirectarg57 = alloca %any, align 8
  %switch = alloca i64, align 8
  %reterr61 = alloca i64, align 8
  %indirectarg64 = alloca %"char[]", align 8
  %indirectarg65 = alloca %"char[]", align 8
  %indirectarg66 = alloca %"char[]", align 8
  %reterr75 = alloca i64, align 8
  %indirectarg78 = alloca %"char[]", align 8
  %indirectarg79 = alloca %"char[]", align 8
  %indirectarg80 = alloca %"char[]", align 8
  %reterr90 = alloca i64, align 8
  %indirectarg93 = alloca %"char[]", align 8
  %indirectarg94 = alloca %"char[]", align 8
  %indirectarg95 = alloca %"char[]", align 8
  %taddr98 = alloca i64, align 8
  %taddr99 = alloca i64, align 8
  %indirectarg100 = alloca %"char[]", align 8
  %indirectarg101 = alloca %"char[]", align 8
  %indirectarg102 = alloca %"char[]", align 8
  %varargslots103 = alloca [2 x %any], align 16
  %indirectarg106 = alloca %"any[]", align 8
  %reterr117 = alloca i64, align 8
  %indirectarg120 = alloca %"char[]", align 8
  %indirectarg121 = alloca %"char[]", align 8
  %indirectarg122 = alloca %"char[]", align 8
  %taddr125 = alloca i64, align 8
  %taddr126 = alloca i64, align 8
  %indirectarg127 = alloca %"char[]", align 8
  %indirectarg128 = alloca %"char[]", align 8
  %indirectarg129 = alloca %"char[]", align 8
  %varargslots130 = alloca [2 x %any], align 16
  %indirectarg133 = alloca %"any[]", align 8
  %reterr144 = alloca i64, align 8
  %indirectarg147 = alloca %"char[]", align 8
  %indirectarg148 = alloca %"char[]", align 8
  %indirectarg149 = alloca %"char[]", align 8
  %taddr152 = alloca i64, align 8
  %taddr153 = alloca i64, align 8
  %indirectarg154 = alloca %"char[]", align 8
  %indirectarg155 = alloca %"char[]", align 8
  %indirectarg156 = alloca %"char[]", align 8
  %varargslots157 = alloca [2 x %any], align 16
  %indirectarg160 = alloca %"any[]", align 8
  %reterr171 = alloca i64, align 8
  %indirectarg174 = alloca %"char[]", align 8
  %indirectarg175 = alloca %"char[]", align 8
  %indirectarg176 = alloca %"char[]", align 8
  %taddr179 = alloca i64, align 8
  %taddr180 = alloca i64, align 8
  %indirectarg181 = alloca %"char[]", align 8
  %indirectarg182 = alloca %"char[]", align 8
  %indirectarg183 = alloca %"char[]", align 8
  %varargslots184 = alloca [2 x %any], align 16
  %indirectarg187 = alloca %"any[]", align 8
  %reterr198 = alloca i64, align 8
  %indirectarg201 = alloca %"char[]", align 8
  %indirectarg202 = alloca %"char[]", align 8
  %indirectarg203 = alloca %"char[]", align 8
  %reterr214 = alloca i64, align 8
  %indirectarg217 = alloca %"char[]", align 8
  %indirectarg218 = alloca %"char[]", align 8
  %indirectarg219 = alloca %"char[]", align 8
  %taddr222 = alloca i64, align 8
  %taddr223 = alloca i64, align 8
  %indirectarg224 = alloca %"char[]", align 8
  %indirectarg225 = alloca %"char[]", align 8
  %indirectarg226 = alloca %"char[]", align 8
  %varargslots227 = alloca [2 x %any], align 16
  %indirectarg230 = alloca %"any[]", align 8
  %reterr241 = alloca i64, align 8
  %indirectarg244 = alloca %"char[]", align 8
  %indirectarg245 = alloca %"char[]", align 8
  %indirectarg246 = alloca %"char[]", align 8
  %taddr249 = alloca i64, align 8
  %taddr250 = alloca i64, align 8
  %indirectarg251 = alloca %"char[]", align 8
  %indirectarg252 = alloca %"char[]", align 8
  %indirectarg253 = alloca %"char[]", align 8
  %varargslots254 = alloca [2 x %any], align 16
  %indirectarg257 = alloca %"any[]", align 8
  %reterr268 = alloca i64, align 8
  %indirectarg271 = alloca %"char[]", align 8
  %indirectarg272 = alloca %"char[]", align 8
  %indirectarg273 = alloca %"char[]", align 8
  %taddr276 = alloca i64, align 8
  %taddr277 = alloca i64, align 8
  %indirectarg278 = alloca %"char[]", align 8
  %indirectarg279 = alloca %"char[]", align 8
  %indirectarg280 = alloca %"char[]", align 8
  %varargslots281 = alloca [2 x %any], align 16
  %indirectarg284 = alloca %"any[]", align 8
  %reterr295 = alloca i64, align 8
  %indirectarg298 = alloca %"char[]", align 8
  %indirectarg299 = alloca %"char[]", align 8
  %indirectarg300 = alloca %"char[]", align 8
  %taddr303 = alloca i64, align 8
  %taddr304 = alloca i64, align 8
  %indirectarg305 = alloca %"char[]", align 8
  %indirectarg306 = alloca %"char[]", align 8
  %indirectarg307 = alloca %"char[]", align 8
  %varargslots308 = alloca [2 x %any], align 16
  %indirectarg311 = alloca %"any[]", align 8
  %reterr322 = alloca i64, align 8
  %indirectarg325 = alloca %"char[]", align 8
  %indirectarg326 = alloca %"char[]", align 8
  %indirectarg327 = alloca %"char[]", align 8
  %taddr330 = alloca i64, align 8
  %taddr331 = alloca i64, align 8
  %indirectarg332 = alloca %"char[]", align 8
  %indirectarg333 = alloca %"char[]", align 8
  %indirectarg334 = alloca %"char[]", align 8
  %varargslots335 = alloca [2 x %any], align 16
  %indirectarg338 = alloca %"any[]", align 8
  %reterr348 = alloca i64, align 8
  %indirectarg351 = alloca %"char[]", align 8
  %indirectarg352 = alloca %"char[]", align 8
  %indirectarg353 = alloca %"char[]", align 8
  %taddr356 = alloca i64, align 8
  %taddr357 = alloca i64, align 8
  %indirectarg358 = alloca %"char[]", align 8
  %indirectarg359 = alloca %"char[]", align 8
  %indirectarg360 = alloca %"char[]", align 8
  %varargslots361 = alloca [2 x %any], align 16
  %indirectarg364 = alloca %"any[]", align 8
    #dbg_declare(ptr %1, !1951, !DIExpression(), !1952)
  %ptradd = getelementptr inbounds i8, ptr %1, i64 8, !dbg !1953
  %2 = load i64, ptr %ptradd, align 8, !dbg !1953
  %"introspect*" = inttoptr i64 %2 to ptr, !dbg !1953
  %typeid.kind = load i8, ptr %"introspect*", align 8, !dbg !1953
  %eq = icmp eq i8 %typeid.kind, 18, !dbg !1953
  br i1 %eq, label %or.phi, label %or.rhs, !dbg !1953

or.rhs:                                           ; preds = %entry
  %ptradd1 = getelementptr inbounds i8, ptr %1, i64 8, !dbg !1953
  %3 = load i64, ptr %ptradd1, align 8, !dbg !1953
  %"introspect*2" = inttoptr i64 %3 to ptr, !dbg !1953
  %typeid.kind3 = load i8, ptr %"introspect*2", align 8, !dbg !1953
  %eq4 = icmp eq i8 %typeid.kind3, 9, !dbg !1953
  br label %or.phi, !dbg !1953

or.phi:                                           ; preds = %or.rhs, %entry
  %val = phi i1 [ true, %entry ], [ %eq4, %or.rhs ], !dbg !1953
  br i1 %val, label %if.then, label %if.exit, !dbg !1953

if.then:                                          ; preds = %or.phi
  store ptr %1, ptr %self, align 8
  %4 = load ptr, ptr %self, align 8, !dbg !1954
  %neq = icmp ne ptr %4, null, !dbg !1954
  br i1 %neq, label %assert_ok, label %assert_fail, !dbg !1954

assert_fail:                                      ; preds = %if.then
  store %"char[]" { ptr @.panic_msg.52, i64 32 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.14, i64 10 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.130, i64 14 }, ptr %indirectarg6, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 266) #5, !dbg !1954
  unreachable, !dbg !1954

assert_ok:                                        ; preds = %if.then
  %6 = load ptr, ptr %self, align 8, !dbg !1959
  %checknull = icmp eq ptr %6, null, !dbg !1959
  %7 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1959
  br i1 %7, label %panic, label %checkok, !dbg !1959

checkok:                                          ; preds = %assert_ok
  %8 = ptrtoint ptr %6 to i64, !dbg !1959
  %9 = urem i64 %8, 8, !dbg !1959
  %10 = icmp ne i64 %9, 0, !dbg !1959
  %11 = call i1 @llvm.expect.i1(i1 %10, i1 false), !dbg !1959
  br i1 %11, label %panic10, label %checkok17, !dbg !1959

checkok17:                                        ; preds = %checkok
  %12 = load ptr, ptr %6, align 8, !dbg !1959
  %13 = load ptr, ptr %self, align 8, !dbg !1959
  %checknull18 = icmp eq ptr %13, null, !dbg !1959
  %14 = call i1 @llvm.expect.i1(i1 %checknull18, i1 false), !dbg !1959
  br i1 %14, label %panic19, label %checkok23, !dbg !1959

checkok23:                                        ; preds = %checkok17
  %15 = ptrtoint ptr %13 to i64, !dbg !1959
  %16 = urem i64 %15, 8, !dbg !1959
  %17 = icmp ne i64 %16, 0, !dbg !1959
  %18 = call i1 @llvm.expect.i1(i1 %17, i1 false), !dbg !1959
  br i1 %18, label %panic24, label %checkok34, !dbg !1959

checkok34:                                        ; preds = %checkok23
  %ptradd35 = getelementptr inbounds i8, ptr %13, i64 8, !dbg !1959
  %19 = load i64, ptr %ptradd35, align 8, !dbg !1959
  %"introspect*36" = inttoptr i64 %19 to ptr, !dbg !1959
  %typeid.kind37 = load i8, ptr %"introspect*36", align 8, !dbg !1959
  %eq38 = icmp eq i8 %typeid.kind37, 15, !dbg !1959
  br i1 %eq38, label %check_type_ok, label %check_next, !dbg !1959

check_next:                                       ; preds = %checkok34
  %eq39 = icmp eq i8 %typeid.kind37, 19, !dbg !1959
  br i1 %eq39, label %check_type_ok, label %check_next40, !dbg !1959

check_next40:                                     ; preds = %check_next
  %eq41 = icmp eq i8 %typeid.kind37, 17, !dbg !1959
  br i1 %eq41, label %check_type_ok, label %check_next42, !dbg !1959

check_next42:                                     ; preds = %check_next40
  %eq43 = icmp eq i8 %typeid.kind37, 8, !dbg !1959
  br i1 %eq43, label %check_type_ok, label %check_next44, !dbg !1959

check_next44:                                     ; preds = %check_next42
  %eq45 = icmp eq i8 %typeid.kind37, 16, !dbg !1959
  br i1 %eq45, label %check_type_ok, label %check_next46, !dbg !1959

check_next46:                                     ; preds = %check_next44
  %eq47 = icmp eq i8 %typeid.kind37, 18, !dbg !1959
  br i1 %eq47, label %check_type_ok, label %check_next48, !dbg !1959

check_next48:                                     ; preds = %check_next46
  %eq49 = icmp eq i8 %typeid.kind37, 9, !dbg !1959
  br i1 %eq49, label %check_type_ok, label %check_next50, !dbg !1959

check_next50:                                     ; preds = %check_next48
  %eq51 = icmp eq i8 %typeid.kind37, 12, !dbg !1959
  br i1 %eq51, label %check_type_ok, label %check_next52, !dbg !1959

check_next52:                                     ; preds = %check_next50
  store %"char[]" { ptr @.panic_msg.53, i64 49 }, ptr %indirectarg53, align 8
  store %"char[]" { ptr @.file.14, i64 10 }, ptr %indirectarg54, align 8
  store %"char[]" { ptr @.func.130, i64 14 }, ptr %indirectarg55, align 8
  %20 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %20(ptr align 8 %indirectarg53, ptr align 8 %indirectarg54, ptr align 8 %indirectarg55, i32 268) #5, !dbg !1959
  unreachable, !dbg !1959

check_type_ok:                                    ; preds = %check_next50, %check_next48, %check_next46, %check_next44, %check_next42, %check_next40, %check_next, %checkok34
  %ptradd56 = getelementptr inbounds i8, ptr %"introspect*36", i64 32, !dbg !1959
  %typeid.inner = load i64, ptr %ptradd56, align 8, !dbg !1959
  %21 = insertvalue %any undef, ptr %12, 0, !dbg !1959
  %22 = insertvalue %any %21, i64 %typeid.inner, 1, !dbg !1959
  store %any %22, ptr %indirectarg57, align 8
  %23 = call i64 @std.io.float_from_any(ptr %retparam, ptr align 8 %indirectarg57), !dbg !1957
  %not_err = icmp eq i64 %23, 0, !dbg !1957
  %24 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1957
  br i1 %24, label %after_check, label %assign_optional, !dbg !1957

assign_optional:                                  ; preds = %check_type_ok
  store i64 %23, ptr %reterr, align 8, !dbg !1957
  br label %err_retblock, !dbg !1957

after_check:                                      ; preds = %check_type_ok
  %25 = load double, ptr %retparam, align 8, !dbg !1957
  store double %25, ptr %0, align 8, !dbg !1957
  ret i64 0, !dbg !1957

err_retblock:                                     ; preds = %assign_optional
  %26 = load i64, ptr %reterr, align 8, !dbg !1957
  ret i64 %26, !dbg !1957

if.exit:                                          ; preds = %or.phi
  %ptradd58 = getelementptr inbounds i8, ptr %1, i64 8, !dbg !1960
  %27 = load i64, ptr %ptradd58, align 8
  store i64 %27, ptr %switch, align 8
  br label %switch.entry

switch.entry:                                     ; preds = %if.exit
  %28 = load i64, ptr %switch, align 8
  br label %check_subtype, !dbg !1962

check_subtype:                                    ; preds = %parent_type_block, %switch.entry
  %29 = phi i64 [ %28, %switch.entry ], [ %typeid.parent, %parent_type_block ], !dbg !1962
  %eq59 = icmp eq i64 ptrtoint (ptr @"$ct.bool" to i64), %29, !dbg !1962
  br i1 %eq59, label %result_block, label %parent_type_block, !dbg !1962

parent_type_block:                                ; preds = %check_subtype
  %30 = inttoptr i64 %29 to ptr, !dbg !1962
  %ptradd60 = getelementptr inbounds i8, ptr %30, i64 8, !dbg !1962
  %typeid.parent = load i64, ptr %ptradd60, align 8, !dbg !1962
  %31 = icmp eq i64 %typeid.parent, 0, !dbg !1962
  br i1 %31, label %result_block, label %check_subtype, !dbg !1962

result_block:                                     ; preds = %parent_type_block, %check_subtype
  %32 = phi i1 [ false, %parent_type_block ], [ true, %check_subtype ], !dbg !1962
  br i1 %32, label %switch.case, label %next_if, !dbg !1962

switch.case:                                      ; preds = %result_block
  %33 = load ptr, ptr %1, align 8, !dbg !1963
  %checknull62 = icmp eq ptr %33, null, !dbg !1963
  %34 = call i1 @llvm.expect.i1(i1 %checknull62, i1 false), !dbg !1963
  br i1 %34, label %panic63, label %checkok67, !dbg !1963

checkok67:                                        ; preds = %switch.case
  %35 = load i8, ptr %33, align 1, !dbg !1963
  %36 = trunc i8 %35 to i1, !dbg !1963
  %uifp = uitofp i1 %36 to double, !dbg !1963
  store double %uifp, ptr %0, align 8, !dbg !1963
  ret i64 0, !dbg !1963

next_if:                                          ; preds = %result_block
  br label %check_subtype68, !dbg !1965

check_subtype68:                                  ; preds = %parent_type_block70, %next_if
  %37 = phi i64 [ %28, %next_if ], [ %typeid.parent72, %parent_type_block70 ], !dbg !1965
  %eq69 = icmp eq i64 ptrtoint (ptr @"$ct.ichar" to i64), %37, !dbg !1965
  br i1 %eq69, label %result_block73, label %parent_type_block70, !dbg !1965

parent_type_block70:                              ; preds = %check_subtype68
  %38 = inttoptr i64 %37 to ptr, !dbg !1965
  %ptradd71 = getelementptr inbounds i8, ptr %38, i64 8, !dbg !1965
  %typeid.parent72 = load i64, ptr %ptradd71, align 8, !dbg !1965
  %39 = icmp eq i64 %typeid.parent72, 0, !dbg !1965
  br i1 %39, label %result_block73, label %check_subtype68, !dbg !1965

result_block73:                                   ; preds = %parent_type_block70, %check_subtype68
  %40 = phi i1 [ false, %parent_type_block70 ], [ true, %check_subtype68 ], !dbg !1965
  br i1 %40, label %switch.case74, label %next_if82, !dbg !1965

switch.case74:                                    ; preds = %result_block73
  %41 = load ptr, ptr %1, align 8, !dbg !1966
  %checknull76 = icmp eq ptr %41, null, !dbg !1966
  %42 = call i1 @llvm.expect.i1(i1 %checknull76, i1 false), !dbg !1966
  br i1 %42, label %panic77, label %checkok81, !dbg !1966

checkok81:                                        ; preds = %switch.case74
  %43 = load i8, ptr %41, align 1, !dbg !1966
  %sifp = sitofp i8 %43 to double, !dbg !1966
  store double %sifp, ptr %0, align 8, !dbg !1966
  ret i64 0, !dbg !1966

next_if82:                                        ; preds = %result_block73
  br label %check_subtype83, !dbg !1968

check_subtype83:                                  ; preds = %parent_type_block85, %next_if82
  %44 = phi i64 [ %28, %next_if82 ], [ %typeid.parent87, %parent_type_block85 ], !dbg !1968
  %eq84 = icmp eq i64 ptrtoint (ptr @"$ct.short" to i64), %44, !dbg !1968
  br i1 %eq84, label %result_block88, label %parent_type_block85, !dbg !1968

parent_type_block85:                              ; preds = %check_subtype83
  %45 = inttoptr i64 %44 to ptr, !dbg !1968
  %ptradd86 = getelementptr inbounds i8, ptr %45, i64 8, !dbg !1968
  %typeid.parent87 = load i64, ptr %ptradd86, align 8, !dbg !1968
  %46 = icmp eq i64 %typeid.parent87, 0, !dbg !1968
  br i1 %46, label %result_block88, label %check_subtype83, !dbg !1968

result_block88:                                   ; preds = %parent_type_block85, %check_subtype83
  %47 = phi i1 [ false, %parent_type_block85 ], [ true, %check_subtype83 ], !dbg !1968
  br i1 %47, label %switch.case89, label %next_if109, !dbg !1968

switch.case89:                                    ; preds = %result_block88
  %48 = load ptr, ptr %1, align 8, !dbg !1969
  %checknull91 = icmp eq ptr %48, null, !dbg !1969
  %49 = call i1 @llvm.expect.i1(i1 %checknull91, i1 false), !dbg !1969
  br i1 %49, label %panic92, label %checkok96, !dbg !1969

checkok96:                                        ; preds = %switch.case89
  %50 = ptrtoint ptr %48 to i64, !dbg !1969
  %51 = urem i64 %50, 2, !dbg !1969
  %52 = icmp ne i64 %51, 0, !dbg !1969
  %53 = call i1 @llvm.expect.i1(i1 %52, i1 false), !dbg !1969
  br i1 %53, label %panic97, label %checkok107, !dbg !1969

checkok107:                                       ; preds = %checkok96
  %54 = load i16, ptr %48, align 2, !dbg !1969
  %sifp108 = sitofp i16 %54 to double, !dbg !1969
  store double %sifp108, ptr %0, align 8, !dbg !1969
  ret i64 0, !dbg !1969

next_if109:                                       ; preds = %result_block88
  br label %check_subtype110, !dbg !1971

check_subtype110:                                 ; preds = %parent_type_block112, %next_if109
  %55 = phi i64 [ %28, %next_if109 ], [ %typeid.parent114, %parent_type_block112 ], !dbg !1971
  %eq111 = icmp eq i64 ptrtoint (ptr @"$ct.int" to i64), %55, !dbg !1971
  br i1 %eq111, label %result_block115, label %parent_type_block112, !dbg !1971

parent_type_block112:                             ; preds = %check_subtype110
  %56 = inttoptr i64 %55 to ptr, !dbg !1971
  %ptradd113 = getelementptr inbounds i8, ptr %56, i64 8, !dbg !1971
  %typeid.parent114 = load i64, ptr %ptradd113, align 8, !dbg !1971
  %57 = icmp eq i64 %typeid.parent114, 0, !dbg !1971
  br i1 %57, label %result_block115, label %check_subtype110, !dbg !1971

result_block115:                                  ; preds = %parent_type_block112, %check_subtype110
  %58 = phi i1 [ false, %parent_type_block112 ], [ true, %check_subtype110 ], !dbg !1971
  br i1 %58, label %switch.case116, label %next_if136, !dbg !1971

switch.case116:                                   ; preds = %result_block115
  %59 = load ptr, ptr %1, align 8, !dbg !1972
  %checknull118 = icmp eq ptr %59, null, !dbg !1972
  %60 = call i1 @llvm.expect.i1(i1 %checknull118, i1 false), !dbg !1972
  br i1 %60, label %panic119, label %checkok123, !dbg !1972

checkok123:                                       ; preds = %switch.case116
  %61 = ptrtoint ptr %59 to i64, !dbg !1972
  %62 = urem i64 %61, 4, !dbg !1972
  %63 = icmp ne i64 %62, 0, !dbg !1972
  %64 = call i1 @llvm.expect.i1(i1 %63, i1 false), !dbg !1972
  br i1 %64, label %panic124, label %checkok134, !dbg !1972

checkok134:                                       ; preds = %checkok123
  %65 = load i32, ptr %59, align 4, !dbg !1972
  %sifp135 = sitofp i32 %65 to double, !dbg !1972
  store double %sifp135, ptr %0, align 8, !dbg !1972
  ret i64 0, !dbg !1972

next_if136:                                       ; preds = %result_block115
  br label %check_subtype137, !dbg !1974

check_subtype137:                                 ; preds = %parent_type_block139, %next_if136
  %66 = phi i64 [ %28, %next_if136 ], [ %typeid.parent141, %parent_type_block139 ], !dbg !1974
  %eq138 = icmp eq i64 ptrtoint (ptr @"$ct.long" to i64), %66, !dbg !1974
  br i1 %eq138, label %result_block142, label %parent_type_block139, !dbg !1974

parent_type_block139:                             ; preds = %check_subtype137
  %67 = inttoptr i64 %66 to ptr, !dbg !1974
  %ptradd140 = getelementptr inbounds i8, ptr %67, i64 8, !dbg !1974
  %typeid.parent141 = load i64, ptr %ptradd140, align 8, !dbg !1974
  %68 = icmp eq i64 %typeid.parent141, 0, !dbg !1974
  br i1 %68, label %result_block142, label %check_subtype137, !dbg !1974

result_block142:                                  ; preds = %parent_type_block139, %check_subtype137
  %69 = phi i1 [ false, %parent_type_block139 ], [ true, %check_subtype137 ], !dbg !1974
  br i1 %69, label %switch.case143, label %next_if163, !dbg !1974

switch.case143:                                   ; preds = %result_block142
  %70 = load ptr, ptr %1, align 8, !dbg !1975
  %checknull145 = icmp eq ptr %70, null, !dbg !1975
  %71 = call i1 @llvm.expect.i1(i1 %checknull145, i1 false), !dbg !1975
  br i1 %71, label %panic146, label %checkok150, !dbg !1975

checkok150:                                       ; preds = %switch.case143
  %72 = ptrtoint ptr %70 to i64, !dbg !1975
  %73 = urem i64 %72, 8, !dbg !1975
  %74 = icmp ne i64 %73, 0, !dbg !1975
  %75 = call i1 @llvm.expect.i1(i1 %74, i1 false), !dbg !1975
  br i1 %75, label %panic151, label %checkok161, !dbg !1975

checkok161:                                       ; preds = %checkok150
  %76 = load i64, ptr %70, align 8, !dbg !1975
  %sifp162 = sitofp i64 %76 to double, !dbg !1975
  store double %sifp162, ptr %0, align 8, !dbg !1975
  ret i64 0, !dbg !1975

next_if163:                                       ; preds = %result_block142
  br label %check_subtype164, !dbg !1977

check_subtype164:                                 ; preds = %parent_type_block166, %next_if163
  %77 = phi i64 [ %28, %next_if163 ], [ %typeid.parent168, %parent_type_block166 ], !dbg !1977
  %eq165 = icmp eq i64 ptrtoint (ptr @"$ct.int128" to i64), %77, !dbg !1977
  br i1 %eq165, label %result_block169, label %parent_type_block166, !dbg !1977

parent_type_block166:                             ; preds = %check_subtype164
  %78 = inttoptr i64 %77 to ptr, !dbg !1977
  %ptradd167 = getelementptr inbounds i8, ptr %78, i64 8, !dbg !1977
  %typeid.parent168 = load i64, ptr %ptradd167, align 8, !dbg !1977
  %79 = icmp eq i64 %typeid.parent168, 0, !dbg !1977
  br i1 %79, label %result_block169, label %check_subtype164, !dbg !1977

result_block169:                                  ; preds = %parent_type_block166, %check_subtype164
  %80 = phi i1 [ false, %parent_type_block166 ], [ true, %check_subtype164 ], !dbg !1977
  br i1 %80, label %switch.case170, label %next_if190, !dbg !1977

switch.case170:                                   ; preds = %result_block169
  %81 = load ptr, ptr %1, align 8, !dbg !1978
  %checknull172 = icmp eq ptr %81, null, !dbg !1978
  %82 = call i1 @llvm.expect.i1(i1 %checknull172, i1 false), !dbg !1978
  br i1 %82, label %panic173, label %checkok177, !dbg !1978

checkok177:                                       ; preds = %switch.case170
  %83 = ptrtoint ptr %81 to i64, !dbg !1978
  %84 = urem i64 %83, 16, !dbg !1978
  %85 = icmp ne i64 %84, 0, !dbg !1978
  %86 = call i1 @llvm.expect.i1(i1 %85, i1 false), !dbg !1978
  br i1 %86, label %panic178, label %checkok188, !dbg !1978

checkok188:                                       ; preds = %checkok177
  %87 = load i128, ptr %81, align 16, !dbg !1978
  %sifp189 = sitofp i128 %87 to double, !dbg !1978
  store double %sifp189, ptr %0, align 8, !dbg !1978
  ret i64 0, !dbg !1978

next_if190:                                       ; preds = %result_block169
  br label %check_subtype191, !dbg !1980

check_subtype191:                                 ; preds = %parent_type_block193, %next_if190
  %88 = phi i64 [ %28, %next_if190 ], [ %typeid.parent195, %parent_type_block193 ], !dbg !1980
  %eq192 = icmp eq i64 ptrtoint (ptr @"$ct.char" to i64), %88, !dbg !1980
  br i1 %eq192, label %result_block196, label %parent_type_block193, !dbg !1980

parent_type_block193:                             ; preds = %check_subtype191
  %89 = inttoptr i64 %88 to ptr, !dbg !1980
  %ptradd194 = getelementptr inbounds i8, ptr %89, i64 8, !dbg !1980
  %typeid.parent195 = load i64, ptr %ptradd194, align 8, !dbg !1980
  %90 = icmp eq i64 %typeid.parent195, 0, !dbg !1980
  br i1 %90, label %result_block196, label %check_subtype191, !dbg !1980

result_block196:                                  ; preds = %parent_type_block193, %check_subtype191
  %91 = phi i1 [ false, %parent_type_block193 ], [ true, %check_subtype191 ], !dbg !1980
  br i1 %91, label %switch.case197, label %next_if206, !dbg !1980

switch.case197:                                   ; preds = %result_block196
  %92 = load ptr, ptr %1, align 8, !dbg !1981
  %checknull199 = icmp eq ptr %92, null, !dbg !1981
  %93 = call i1 @llvm.expect.i1(i1 %checknull199, i1 false), !dbg !1981
  br i1 %93, label %panic200, label %checkok204, !dbg !1981

checkok204:                                       ; preds = %switch.case197
  %94 = load i8, ptr %92, align 1, !dbg !1981
  %uifp205 = uitofp i8 %94 to double, !dbg !1981
  store double %uifp205, ptr %0, align 8, !dbg !1981
  ret i64 0, !dbg !1981

next_if206:                                       ; preds = %result_block196
  br label %check_subtype207, !dbg !1983

check_subtype207:                                 ; preds = %parent_type_block209, %next_if206
  %95 = phi i64 [ %28, %next_if206 ], [ %typeid.parent211, %parent_type_block209 ], !dbg !1983
  %eq208 = icmp eq i64 ptrtoint (ptr @"$ct.ushort" to i64), %95, !dbg !1983
  br i1 %eq208, label %result_block212, label %parent_type_block209, !dbg !1983

parent_type_block209:                             ; preds = %check_subtype207
  %96 = inttoptr i64 %95 to ptr, !dbg !1983
  %ptradd210 = getelementptr inbounds i8, ptr %96, i64 8, !dbg !1983
  %typeid.parent211 = load i64, ptr %ptradd210, align 8, !dbg !1983
  %97 = icmp eq i64 %typeid.parent211, 0, !dbg !1983
  br i1 %97, label %result_block212, label %check_subtype207, !dbg !1983

result_block212:                                  ; preds = %parent_type_block209, %check_subtype207
  %98 = phi i1 [ false, %parent_type_block209 ], [ true, %check_subtype207 ], !dbg !1983
  br i1 %98, label %switch.case213, label %next_if233, !dbg !1983

switch.case213:                                   ; preds = %result_block212
  %99 = load ptr, ptr %1, align 8, !dbg !1984
  %checknull215 = icmp eq ptr %99, null, !dbg !1984
  %100 = call i1 @llvm.expect.i1(i1 %checknull215, i1 false), !dbg !1984
  br i1 %100, label %panic216, label %checkok220, !dbg !1984

checkok220:                                       ; preds = %switch.case213
  %101 = ptrtoint ptr %99 to i64, !dbg !1984
  %102 = urem i64 %101, 2, !dbg !1984
  %103 = icmp ne i64 %102, 0, !dbg !1984
  %104 = call i1 @llvm.expect.i1(i1 %103, i1 false), !dbg !1984
  br i1 %104, label %panic221, label %checkok231, !dbg !1984

checkok231:                                       ; preds = %checkok220
  %105 = load i16, ptr %99, align 2, !dbg !1984
  %uifp232 = uitofp i16 %105 to double, !dbg !1984
  store double %uifp232, ptr %0, align 8, !dbg !1984
  ret i64 0, !dbg !1984

next_if233:                                       ; preds = %result_block212
  br label %check_subtype234, !dbg !1986

check_subtype234:                                 ; preds = %parent_type_block236, %next_if233
  %106 = phi i64 [ %28, %next_if233 ], [ %typeid.parent238, %parent_type_block236 ], !dbg !1986
  %eq235 = icmp eq i64 ptrtoint (ptr @"$ct.uint" to i64), %106, !dbg !1986
  br i1 %eq235, label %result_block239, label %parent_type_block236, !dbg !1986

parent_type_block236:                             ; preds = %check_subtype234
  %107 = inttoptr i64 %106 to ptr, !dbg !1986
  %ptradd237 = getelementptr inbounds i8, ptr %107, i64 8, !dbg !1986
  %typeid.parent238 = load i64, ptr %ptradd237, align 8, !dbg !1986
  %108 = icmp eq i64 %typeid.parent238, 0, !dbg !1986
  br i1 %108, label %result_block239, label %check_subtype234, !dbg !1986

result_block239:                                  ; preds = %parent_type_block236, %check_subtype234
  %109 = phi i1 [ false, %parent_type_block236 ], [ true, %check_subtype234 ], !dbg !1986
  br i1 %109, label %switch.case240, label %next_if260, !dbg !1986

switch.case240:                                   ; preds = %result_block239
  %110 = load ptr, ptr %1, align 8, !dbg !1987
  %checknull242 = icmp eq ptr %110, null, !dbg !1987
  %111 = call i1 @llvm.expect.i1(i1 %checknull242, i1 false), !dbg !1987
  br i1 %111, label %panic243, label %checkok247, !dbg !1987

checkok247:                                       ; preds = %switch.case240
  %112 = ptrtoint ptr %110 to i64, !dbg !1987
  %113 = urem i64 %112, 4, !dbg !1987
  %114 = icmp ne i64 %113, 0, !dbg !1987
  %115 = call i1 @llvm.expect.i1(i1 %114, i1 false), !dbg !1987
  br i1 %115, label %panic248, label %checkok258, !dbg !1987

checkok258:                                       ; preds = %checkok247
  %116 = load i32, ptr %110, align 4, !dbg !1987
  %uifp259 = uitofp i32 %116 to double, !dbg !1987
  store double %uifp259, ptr %0, align 8, !dbg !1987
  ret i64 0, !dbg !1987

next_if260:                                       ; preds = %result_block239
  br label %check_subtype261, !dbg !1989

check_subtype261:                                 ; preds = %parent_type_block263, %next_if260
  %117 = phi i64 [ %28, %next_if260 ], [ %typeid.parent265, %parent_type_block263 ], !dbg !1989
  %eq262 = icmp eq i64 ptrtoint (ptr @"$ct.ulong" to i64), %117, !dbg !1989
  br i1 %eq262, label %result_block266, label %parent_type_block263, !dbg !1989

parent_type_block263:                             ; preds = %check_subtype261
  %118 = inttoptr i64 %117 to ptr, !dbg !1989
  %ptradd264 = getelementptr inbounds i8, ptr %118, i64 8, !dbg !1989
  %typeid.parent265 = load i64, ptr %ptradd264, align 8, !dbg !1989
  %119 = icmp eq i64 %typeid.parent265, 0, !dbg !1989
  br i1 %119, label %result_block266, label %check_subtype261, !dbg !1989

result_block266:                                  ; preds = %parent_type_block263, %check_subtype261
  %120 = phi i1 [ false, %parent_type_block263 ], [ true, %check_subtype261 ], !dbg !1989
  br i1 %120, label %switch.case267, label %next_if287, !dbg !1989

switch.case267:                                   ; preds = %result_block266
  %121 = load ptr, ptr %1, align 8, !dbg !1990
  %checknull269 = icmp eq ptr %121, null, !dbg !1990
  %122 = call i1 @llvm.expect.i1(i1 %checknull269, i1 false), !dbg !1990
  br i1 %122, label %panic270, label %checkok274, !dbg !1990

checkok274:                                       ; preds = %switch.case267
  %123 = ptrtoint ptr %121 to i64, !dbg !1990
  %124 = urem i64 %123, 8, !dbg !1990
  %125 = icmp ne i64 %124, 0, !dbg !1990
  %126 = call i1 @llvm.expect.i1(i1 %125, i1 false), !dbg !1990
  br i1 %126, label %panic275, label %checkok285, !dbg !1990

checkok285:                                       ; preds = %checkok274
  %127 = load i64, ptr %121, align 8, !dbg !1990
  %uifp286 = uitofp i64 %127 to double, !dbg !1990
  store double %uifp286, ptr %0, align 8, !dbg !1990
  ret i64 0, !dbg !1990

next_if287:                                       ; preds = %result_block266
  br label %check_subtype288, !dbg !1992

check_subtype288:                                 ; preds = %parent_type_block290, %next_if287
  %128 = phi i64 [ %28, %next_if287 ], [ %typeid.parent292, %parent_type_block290 ], !dbg !1992
  %eq289 = icmp eq i64 ptrtoint (ptr @"$ct.uint128" to i64), %128, !dbg !1992
  br i1 %eq289, label %result_block293, label %parent_type_block290, !dbg !1992

parent_type_block290:                             ; preds = %check_subtype288
  %129 = inttoptr i64 %128 to ptr, !dbg !1992
  %ptradd291 = getelementptr inbounds i8, ptr %129, i64 8, !dbg !1992
  %typeid.parent292 = load i64, ptr %ptradd291, align 8, !dbg !1992
  %130 = icmp eq i64 %typeid.parent292, 0, !dbg !1992
  br i1 %130, label %result_block293, label %check_subtype288, !dbg !1992

result_block293:                                  ; preds = %parent_type_block290, %check_subtype288
  %131 = phi i1 [ false, %parent_type_block290 ], [ true, %check_subtype288 ], !dbg !1992
  br i1 %131, label %switch.case294, label %next_if314, !dbg !1992

switch.case294:                                   ; preds = %result_block293
  %132 = load ptr, ptr %1, align 8, !dbg !1993
  %checknull296 = icmp eq ptr %132, null, !dbg !1993
  %133 = call i1 @llvm.expect.i1(i1 %checknull296, i1 false), !dbg !1993
  br i1 %133, label %panic297, label %checkok301, !dbg !1993

checkok301:                                       ; preds = %switch.case294
  %134 = ptrtoint ptr %132 to i64, !dbg !1993
  %135 = urem i64 %134, 16, !dbg !1993
  %136 = icmp ne i64 %135, 0, !dbg !1993
  %137 = call i1 @llvm.expect.i1(i1 %136, i1 false), !dbg !1993
  br i1 %137, label %panic302, label %checkok312, !dbg !1993

checkok312:                                       ; preds = %checkok301
  %138 = load i128, ptr %132, align 16, !dbg !1993
  %uifp313 = uitofp i128 %138 to double, !dbg !1993
  store double %uifp313, ptr %0, align 8, !dbg !1993
  ret i64 0, !dbg !1993

next_if314:                                       ; preds = %result_block293
  br label %check_subtype315, !dbg !1995

check_subtype315:                                 ; preds = %parent_type_block317, %next_if314
  %139 = phi i64 [ %28, %next_if314 ], [ %typeid.parent319, %parent_type_block317 ], !dbg !1995
  %eq316 = icmp eq i64 ptrtoint (ptr @"$ct.float" to i64), %139, !dbg !1995
  br i1 %eq316, label %result_block320, label %parent_type_block317, !dbg !1995

parent_type_block317:                             ; preds = %check_subtype315
  %140 = inttoptr i64 %139 to ptr, !dbg !1995
  %ptradd318 = getelementptr inbounds i8, ptr %140, i64 8, !dbg !1995
  %typeid.parent319 = load i64, ptr %ptradd318, align 8, !dbg !1995
  %141 = icmp eq i64 %typeid.parent319, 0, !dbg !1995
  br i1 %141, label %result_block320, label %check_subtype315, !dbg !1995

result_block320:                                  ; preds = %parent_type_block317, %check_subtype315
  %142 = phi i1 [ false, %parent_type_block317 ], [ true, %check_subtype315 ], !dbg !1995
  br i1 %142, label %switch.case321, label %next_if340, !dbg !1995

switch.case321:                                   ; preds = %result_block320
  %143 = load ptr, ptr %1, align 8, !dbg !1996
  %checknull323 = icmp eq ptr %143, null, !dbg !1996
  %144 = call i1 @llvm.expect.i1(i1 %checknull323, i1 false), !dbg !1996
  br i1 %144, label %panic324, label %checkok328, !dbg !1996

checkok328:                                       ; preds = %switch.case321
  %145 = ptrtoint ptr %143 to i64, !dbg !1996
  %146 = urem i64 %145, 4, !dbg !1996
  %147 = icmp ne i64 %146, 0, !dbg !1996
  %148 = call i1 @llvm.expect.i1(i1 %147, i1 false), !dbg !1996
  br i1 %148, label %panic329, label %checkok339, !dbg !1996

checkok339:                                       ; preds = %checkok328
  %149 = load float, ptr %143, align 4, !dbg !1996
  %fpfpext = fpext float %149 to double, !dbg !1996
  store double %fpfpext, ptr %0, align 8, !dbg !1996
  ret i64 0, !dbg !1996

next_if340:                                       ; preds = %result_block320
  br label %check_subtype341, !dbg !1998

check_subtype341:                                 ; preds = %parent_type_block343, %next_if340
  %150 = phi i64 [ %28, %next_if340 ], [ %typeid.parent345, %parent_type_block343 ], !dbg !1998
  %eq342 = icmp eq i64 ptrtoint (ptr @"$ct.double" to i64), %150, !dbg !1998
  br i1 %eq342, label %result_block346, label %parent_type_block343, !dbg !1998

parent_type_block343:                             ; preds = %check_subtype341
  %151 = inttoptr i64 %150 to ptr, !dbg !1998
  %ptradd344 = getelementptr inbounds i8, ptr %151, i64 8, !dbg !1998
  %typeid.parent345 = load i64, ptr %ptradd344, align 8, !dbg !1998
  %152 = icmp eq i64 %typeid.parent345, 0, !dbg !1998
  br i1 %152, label %result_block346, label %check_subtype341, !dbg !1998

result_block346:                                  ; preds = %parent_type_block343, %check_subtype341
  %153 = phi i1 [ false, %parent_type_block343 ], [ true, %check_subtype341 ], !dbg !1998
  br i1 %153, label %switch.case347, label %next_if366, !dbg !1998

switch.case347:                                   ; preds = %result_block346
  %154 = load ptr, ptr %1, align 8, !dbg !1999
  %checknull349 = icmp eq ptr %154, null, !dbg !1999
  %155 = call i1 @llvm.expect.i1(i1 %checknull349, i1 false), !dbg !1999
  br i1 %155, label %panic350, label %checkok354, !dbg !1999

checkok354:                                       ; preds = %switch.case347
  %156 = ptrtoint ptr %154 to i64, !dbg !1999
  %157 = urem i64 %156, 8, !dbg !1999
  %158 = icmp ne i64 %157, 0, !dbg !1999
  %159 = call i1 @llvm.expect.i1(i1 %158, i1 false), !dbg !1999
  br i1 %159, label %panic355, label %checkok365, !dbg !1999

checkok365:                                       ; preds = %checkok354
  %160 = load double, ptr %154, align 8, !dbg !1999
  store double %160, ptr %0, align 8, !dbg !1999
  ret i64 0, !dbg !1999

next_if366:                                       ; preds = %result_block346
  br label %switch.default, !dbg !1999

switch.default:                                   ; preds = %next_if366
  ret i64 ptrtoint (ptr @std.io.BAD_FORMAT to i64), !dbg !2001

panic:                                            ; preds = %assert_ok
  store %"char[]" { ptr @.panic_msg.2, i64 45 }, ptr %indirectarg7, align 8
  store %"char[]" { ptr @.file.14, i64 10 }, ptr %indirectarg8, align 8
  store %"char[]" { ptr @.func.130, i64 14 }, ptr %indirectarg9, align 8
  %161 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %161(ptr align 8 %indirectarg7, ptr align 8 %indirectarg8, ptr align 8 %indirectarg9, i32 268) #5, !dbg !1959
  unreachable, !dbg !1959

panic10:                                          ; preds = %checkok
  store i64 8, ptr %taddr, align 8
  %162 = insertvalue %any undef, ptr %taddr, 0
  %163 = insertvalue %any %162, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %9, ptr %taddr11, align 8
  %164 = insertvalue %any undef, ptr %taddr11, 0
  %165 = insertvalue %any %164, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg12, align 8
  store %"char[]" { ptr @.file.14, i64 10 }, ptr %indirectarg13, align 8
  store %"char[]" { ptr @.func.130, i64 14 }, ptr %indirectarg14, align 8
  store %any %163, ptr %varargslots, align 16
  %ptradd15 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %165, ptr %ptradd15, align 16
  %166 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %166, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg16, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg12, ptr align 8 %indirectarg13, ptr align 8 %indirectarg14, i32 268, ptr align 8 %indirectarg16) #5, !dbg !1959
  unreachable, !dbg !1959

panic19:                                          ; preds = %checkok17
  store %"char[]" { ptr @.panic_msg.2, i64 45 }, ptr %indirectarg20, align 8
  store %"char[]" { ptr @.file.14, i64 10 }, ptr %indirectarg21, align 8
  store %"char[]" { ptr @.func.130, i64 14 }, ptr %indirectarg22, align 8
  %167 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %167(ptr align 8 %indirectarg20, ptr align 8 %indirectarg21, ptr align 8 %indirectarg22, i32 268) #5, !dbg !1959
  unreachable, !dbg !1959

panic24:                                          ; preds = %checkok23
  store i64 8, ptr %taddr25, align 8
  %168 = insertvalue %any undef, ptr %taddr25, 0
  %169 = insertvalue %any %168, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %16, ptr %taddr26, align 8
  %170 = insertvalue %any undef, ptr %taddr26, 0
  %171 = insertvalue %any %170, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg27, align 8
  store %"char[]" { ptr @.file.14, i64 10 }, ptr %indirectarg28, align 8
  store %"char[]" { ptr @.func.130, i64 14 }, ptr %indirectarg29, align 8
  store %any %169, ptr %varargslots30, align 16
  %ptradd31 = getelementptr inbounds i8, ptr %varargslots30, i64 16
  store %any %171, ptr %ptradd31, align 16
  %172 = insertvalue %"any[]" undef, ptr %varargslots30, 0
  %"$$temp32" = insertvalue %"any[]" %172, i64 2, 1
  store %"any[]" %"$$temp32", ptr %indirectarg33, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg27, ptr align 8 %indirectarg28, ptr align 8 %indirectarg29, i32 268, ptr align 8 %indirectarg33) #5, !dbg !1959
  unreachable, !dbg !1959

panic63:                                          ; preds = %switch.case
  store %"char[]" { ptr @.panic_msg.117, i64 51 }, ptr %indirectarg64, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg65, align 8
  store %"char[]" { ptr @.func.130, i64 14 }, ptr %indirectarg66, align 8
  %173 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %173(ptr align 8 %indirectarg64, ptr align 8 %indirectarg65, ptr align 8 %indirectarg66, i32 105) #5, !dbg !1963
  unreachable, !dbg !1963

panic77:                                          ; preds = %switch.case74
  store %"char[]" { ptr @.panic_msg.118, i64 52 }, ptr %indirectarg78, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg79, align 8
  store %"char[]" { ptr @.func.130, i64 14 }, ptr %indirectarg80, align 8
  %174 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %174(ptr align 8 %indirectarg78, ptr align 8 %indirectarg79, ptr align 8 %indirectarg80, i32 107) #5, !dbg !1966
  unreachable, !dbg !1966

panic92:                                          ; preds = %switch.case89
  store %"char[]" { ptr @.panic_msg.119, i64 52 }, ptr %indirectarg93, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg94, align 8
  store %"char[]" { ptr @.func.130, i64 14 }, ptr %indirectarg95, align 8
  %175 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %175(ptr align 8 %indirectarg93, ptr align 8 %indirectarg94, ptr align 8 %indirectarg95, i32 109) #5, !dbg !1969
  unreachable, !dbg !1969

panic97:                                          ; preds = %checkok96
  store i64 2, ptr %taddr98, align 8
  %176 = insertvalue %any undef, ptr %taddr98, 0
  %177 = insertvalue %any %176, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %51, ptr %taddr99, align 8
  %178 = insertvalue %any undef, ptr %taddr99, 0
  %179 = insertvalue %any %178, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg100, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg101, align 8
  store %"char[]" { ptr @.func.130, i64 14 }, ptr %indirectarg102, align 8
  store %any %177, ptr %varargslots103, align 16
  %ptradd104 = getelementptr inbounds i8, ptr %varargslots103, i64 16
  store %any %179, ptr %ptradd104, align 16
  %180 = insertvalue %"any[]" undef, ptr %varargslots103, 0
  %"$$temp105" = insertvalue %"any[]" %180, i64 2, 1
  store %"any[]" %"$$temp105", ptr %indirectarg106, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg100, ptr align 8 %indirectarg101, ptr align 8 %indirectarg102, i32 109, ptr align 8 %indirectarg106) #5, !dbg !1969
  unreachable, !dbg !1969

panic119:                                         ; preds = %switch.case116
  store %"char[]" { ptr @.panic_msg.120, i64 50 }, ptr %indirectarg120, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg121, align 8
  store %"char[]" { ptr @.func.130, i64 14 }, ptr %indirectarg122, align 8
  %181 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %181(ptr align 8 %indirectarg120, ptr align 8 %indirectarg121, ptr align 8 %indirectarg122, i32 111) #5, !dbg !1972
  unreachable, !dbg !1972

panic124:                                         ; preds = %checkok123
  store i64 4, ptr %taddr125, align 8
  %182 = insertvalue %any undef, ptr %taddr125, 0
  %183 = insertvalue %any %182, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %62, ptr %taddr126, align 8
  %184 = insertvalue %any undef, ptr %taddr126, 0
  %185 = insertvalue %any %184, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg127, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg128, align 8
  store %"char[]" { ptr @.func.130, i64 14 }, ptr %indirectarg129, align 8
  store %any %183, ptr %varargslots130, align 16
  %ptradd131 = getelementptr inbounds i8, ptr %varargslots130, i64 16
  store %any %185, ptr %ptradd131, align 16
  %186 = insertvalue %"any[]" undef, ptr %varargslots130, 0
  %"$$temp132" = insertvalue %"any[]" %186, i64 2, 1
  store %"any[]" %"$$temp132", ptr %indirectarg133, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg127, ptr align 8 %indirectarg128, ptr align 8 %indirectarg129, i32 111, ptr align 8 %indirectarg133) #5, !dbg !1972
  unreachable, !dbg !1972

panic146:                                         ; preds = %switch.case143
  store %"char[]" { ptr @.panic_msg.121, i64 51 }, ptr %indirectarg147, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg148, align 8
  store %"char[]" { ptr @.func.130, i64 14 }, ptr %indirectarg149, align 8
  %187 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %187(ptr align 8 %indirectarg147, ptr align 8 %indirectarg148, ptr align 8 %indirectarg149, i32 113) #5, !dbg !1975
  unreachable, !dbg !1975

panic151:                                         ; preds = %checkok150
  store i64 8, ptr %taddr152, align 8
  %188 = insertvalue %any undef, ptr %taddr152, 0
  %189 = insertvalue %any %188, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %73, ptr %taddr153, align 8
  %190 = insertvalue %any undef, ptr %taddr153, 0
  %191 = insertvalue %any %190, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg154, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg155, align 8
  store %"char[]" { ptr @.func.130, i64 14 }, ptr %indirectarg156, align 8
  store %any %189, ptr %varargslots157, align 16
  %ptradd158 = getelementptr inbounds i8, ptr %varargslots157, i64 16
  store %any %191, ptr %ptradd158, align 16
  %192 = insertvalue %"any[]" undef, ptr %varargslots157, 0
  %"$$temp159" = insertvalue %"any[]" %192, i64 2, 1
  store %"any[]" %"$$temp159", ptr %indirectarg160, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg154, ptr align 8 %indirectarg155, ptr align 8 %indirectarg156, i32 113, ptr align 8 %indirectarg160) #5, !dbg !1975
  unreachable, !dbg !1975

panic173:                                         ; preds = %switch.case170
  store %"char[]" { ptr @.panic_msg.122, i64 53 }, ptr %indirectarg174, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg175, align 8
  store %"char[]" { ptr @.func.130, i64 14 }, ptr %indirectarg176, align 8
  %193 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %193(ptr align 8 %indirectarg174, ptr align 8 %indirectarg175, ptr align 8 %indirectarg176, i32 115) #5, !dbg !1978
  unreachable, !dbg !1978

panic178:                                         ; preds = %checkok177
  store i64 16, ptr %taddr179, align 8
  %194 = insertvalue %any undef, ptr %taddr179, 0
  %195 = insertvalue %any %194, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %84, ptr %taddr180, align 8
  %196 = insertvalue %any undef, ptr %taddr180, 0
  %197 = insertvalue %any %196, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg181, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg182, align 8
  store %"char[]" { ptr @.func.130, i64 14 }, ptr %indirectarg183, align 8
  store %any %195, ptr %varargslots184, align 16
  %ptradd185 = getelementptr inbounds i8, ptr %varargslots184, i64 16
  store %any %197, ptr %ptradd185, align 16
  %198 = insertvalue %"any[]" undef, ptr %varargslots184, 0
  %"$$temp186" = insertvalue %"any[]" %198, i64 2, 1
  store %"any[]" %"$$temp186", ptr %indirectarg187, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg181, ptr align 8 %indirectarg182, ptr align 8 %indirectarg183, i32 115, ptr align 8 %indirectarg187) #5, !dbg !1978
  unreachable, !dbg !1978

panic200:                                         ; preds = %switch.case197
  store %"char[]" { ptr @.panic_msg.123, i64 51 }, ptr %indirectarg201, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg202, align 8
  store %"char[]" { ptr @.func.130, i64 14 }, ptr %indirectarg203, align 8
  %199 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %199(ptr align 8 %indirectarg201, ptr align 8 %indirectarg202, ptr align 8 %indirectarg203, i32 117) #5, !dbg !1981
  unreachable, !dbg !1981

panic216:                                         ; preds = %switch.case213
  store %"char[]" { ptr @.panic_msg.124, i64 53 }, ptr %indirectarg217, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg218, align 8
  store %"char[]" { ptr @.func.130, i64 14 }, ptr %indirectarg219, align 8
  %200 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %200(ptr align 8 %indirectarg217, ptr align 8 %indirectarg218, ptr align 8 %indirectarg219, i32 119) #5, !dbg !1984
  unreachable, !dbg !1984

panic221:                                         ; preds = %checkok220
  store i64 2, ptr %taddr222, align 8
  %201 = insertvalue %any undef, ptr %taddr222, 0
  %202 = insertvalue %any %201, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %102, ptr %taddr223, align 8
  %203 = insertvalue %any undef, ptr %taddr223, 0
  %204 = insertvalue %any %203, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg224, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg225, align 8
  store %"char[]" { ptr @.func.130, i64 14 }, ptr %indirectarg226, align 8
  store %any %202, ptr %varargslots227, align 16
  %ptradd228 = getelementptr inbounds i8, ptr %varargslots227, i64 16
  store %any %204, ptr %ptradd228, align 16
  %205 = insertvalue %"any[]" undef, ptr %varargslots227, 0
  %"$$temp229" = insertvalue %"any[]" %205, i64 2, 1
  store %"any[]" %"$$temp229", ptr %indirectarg230, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg224, ptr align 8 %indirectarg225, ptr align 8 %indirectarg226, i32 119, ptr align 8 %indirectarg230) #5, !dbg !1984
  unreachable, !dbg !1984

panic243:                                         ; preds = %switch.case240
  store %"char[]" { ptr @.panic_msg.125, i64 51 }, ptr %indirectarg244, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg245, align 8
  store %"char[]" { ptr @.func.130, i64 14 }, ptr %indirectarg246, align 8
  %206 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %206(ptr align 8 %indirectarg244, ptr align 8 %indirectarg245, ptr align 8 %indirectarg246, i32 121) #5, !dbg !1987
  unreachable, !dbg !1987

panic248:                                         ; preds = %checkok247
  store i64 4, ptr %taddr249, align 8
  %207 = insertvalue %any undef, ptr %taddr249, 0
  %208 = insertvalue %any %207, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %113, ptr %taddr250, align 8
  %209 = insertvalue %any undef, ptr %taddr250, 0
  %210 = insertvalue %any %209, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg251, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg252, align 8
  store %"char[]" { ptr @.func.130, i64 14 }, ptr %indirectarg253, align 8
  store %any %208, ptr %varargslots254, align 16
  %ptradd255 = getelementptr inbounds i8, ptr %varargslots254, i64 16
  store %any %210, ptr %ptradd255, align 16
  %211 = insertvalue %"any[]" undef, ptr %varargslots254, 0
  %"$$temp256" = insertvalue %"any[]" %211, i64 2, 1
  store %"any[]" %"$$temp256", ptr %indirectarg257, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg251, ptr align 8 %indirectarg252, ptr align 8 %indirectarg253, i32 121, ptr align 8 %indirectarg257) #5, !dbg !1987
  unreachable, !dbg !1987

panic270:                                         ; preds = %switch.case267
  store %"char[]" { ptr @.panic_msg.126, i64 52 }, ptr %indirectarg271, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg272, align 8
  store %"char[]" { ptr @.func.130, i64 14 }, ptr %indirectarg273, align 8
  %212 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %212(ptr align 8 %indirectarg271, ptr align 8 %indirectarg272, ptr align 8 %indirectarg273, i32 123) #5, !dbg !1990
  unreachable, !dbg !1990

panic275:                                         ; preds = %checkok274
  store i64 8, ptr %taddr276, align 8
  %213 = insertvalue %any undef, ptr %taddr276, 0
  %214 = insertvalue %any %213, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %124, ptr %taddr277, align 8
  %215 = insertvalue %any undef, ptr %taddr277, 0
  %216 = insertvalue %any %215, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg278, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg279, align 8
  store %"char[]" { ptr @.func.130, i64 14 }, ptr %indirectarg280, align 8
  store %any %214, ptr %varargslots281, align 16
  %ptradd282 = getelementptr inbounds i8, ptr %varargslots281, i64 16
  store %any %216, ptr %ptradd282, align 16
  %217 = insertvalue %"any[]" undef, ptr %varargslots281, 0
  %"$$temp283" = insertvalue %"any[]" %217, i64 2, 1
  store %"any[]" %"$$temp283", ptr %indirectarg284, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg278, ptr align 8 %indirectarg279, ptr align 8 %indirectarg280, i32 123, ptr align 8 %indirectarg284) #5, !dbg !1990
  unreachable, !dbg !1990

panic297:                                         ; preds = %switch.case294
  store %"char[]" { ptr @.panic_msg.127, i64 54 }, ptr %indirectarg298, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg299, align 8
  store %"char[]" { ptr @.func.130, i64 14 }, ptr %indirectarg300, align 8
  %218 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %218(ptr align 8 %indirectarg298, ptr align 8 %indirectarg299, ptr align 8 %indirectarg300, i32 125) #5, !dbg !1993
  unreachable, !dbg !1993

panic302:                                         ; preds = %checkok301
  store i64 16, ptr %taddr303, align 8
  %219 = insertvalue %any undef, ptr %taddr303, 0
  %220 = insertvalue %any %219, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %135, ptr %taddr304, align 8
  %221 = insertvalue %any undef, ptr %taddr304, 0
  %222 = insertvalue %any %221, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg305, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg306, align 8
  store %"char[]" { ptr @.func.130, i64 14 }, ptr %indirectarg307, align 8
  store %any %220, ptr %varargslots308, align 16
  %ptradd309 = getelementptr inbounds i8, ptr %varargslots308, i64 16
  store %any %222, ptr %ptradd309, align 16
  %223 = insertvalue %"any[]" undef, ptr %varargslots308, 0
  %"$$temp310" = insertvalue %"any[]" %223, i64 2, 1
  store %"any[]" %"$$temp310", ptr %indirectarg311, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg305, ptr align 8 %indirectarg306, ptr align 8 %indirectarg307, i32 125, ptr align 8 %indirectarg311) #5, !dbg !1993
  unreachable, !dbg !1993

panic324:                                         ; preds = %switch.case321
  store %"char[]" { ptr @.panic_msg.128, i64 52 }, ptr %indirectarg325, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg326, align 8
  store %"char[]" { ptr @.func.130, i64 14 }, ptr %indirectarg327, align 8
  %224 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %224(ptr align 8 %indirectarg325, ptr align 8 %indirectarg326, ptr align 8 %indirectarg327, i32 127) #5, !dbg !1996
  unreachable, !dbg !1996

panic329:                                         ; preds = %checkok328
  store i64 4, ptr %taddr330, align 8
  %225 = insertvalue %any undef, ptr %taddr330, 0
  %226 = insertvalue %any %225, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %146, ptr %taddr331, align 8
  %227 = insertvalue %any undef, ptr %taddr331, 0
  %228 = insertvalue %any %227, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg332, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg333, align 8
  store %"char[]" { ptr @.func.130, i64 14 }, ptr %indirectarg334, align 8
  store %any %226, ptr %varargslots335, align 16
  %ptradd336 = getelementptr inbounds i8, ptr %varargslots335, i64 16
  store %any %228, ptr %ptradd336, align 16
  %229 = insertvalue %"any[]" undef, ptr %varargslots335, 0
  %"$$temp337" = insertvalue %"any[]" %229, i64 2, 1
  store %"any[]" %"$$temp337", ptr %indirectarg338, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg332, ptr align 8 %indirectarg333, ptr align 8 %indirectarg334, i32 127, ptr align 8 %indirectarg338) #5, !dbg !1996
  unreachable, !dbg !1996

panic350:                                         ; preds = %switch.case347
  store %"char[]" { ptr @.panic_msg.129, i64 53 }, ptr %indirectarg351, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg352, align 8
  store %"char[]" { ptr @.func.130, i64 14 }, ptr %indirectarg353, align 8
  %230 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %230(ptr align 8 %indirectarg351, ptr align 8 %indirectarg352, ptr align 8 %indirectarg353, i32 129) #5, !dbg !1999
  unreachable, !dbg !1999

panic355:                                         ; preds = %checkok354
  store i64 8, ptr %taddr356, align 8
  %231 = insertvalue %any undef, ptr %taddr356, 0
  %232 = insertvalue %any %231, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %157, ptr %taddr357, align 8
  %233 = insertvalue %any undef, ptr %taddr357, 0
  %234 = insertvalue %any %233, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg358, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg359, align 8
  store %"char[]" { ptr @.func.130, i64 14 }, ptr %indirectarg360, align 8
  store %any %232, ptr %varargslots361, align 16
  %ptradd362 = getelementptr inbounds i8, ptr %varargslots361, i64 16
  store %any %234, ptr %ptradd362, align 16
  %235 = insertvalue %"any[]" undef, ptr %varargslots361, 0
  %"$$temp363" = insertvalue %"any[]" %235, i64 2, 1
  store %"any[]" %"$$temp363", ptr %indirectarg364, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg358, ptr align 8 %indirectarg359, ptr align 8 %indirectarg360, i32 129, ptr align 8 %indirectarg364) #5, !dbg !1999
  unreachable, !dbg !1999
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @std.io.simple_atoi(ptr %0, i64 %1, ptr %2) #0 !dbg !2003 {
entry:
  %buf = alloca ptr, align 8
  %maxlen = alloca i64, align 8
  %len_ptr = alloca ptr, align 8
  %i = alloca i32, align 4
  %len = alloca i64, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr4 = alloca i64, align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg7 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg8 = alloca %"any[]", align 8
  %c = alloca i8, align 1
  %c11 = alloca i8, align 1
  %c12 = alloca i8, align 1
  %taddr14 = alloca i64, align 8
  %taddr15 = alloca i64, align 8
  %indirectarg16 = alloca %"char[]", align 8
  %indirectarg17 = alloca %"char[]", align 8
  %indirectarg18 = alloca %"char[]", align 8
  %varargslots19 = alloca [2 x %any], align 16
  %indirectarg22 = alloca %"any[]", align 8
  %indirectarg28 = alloca %"char[]", align 8
  %indirectarg29 = alloca %"char[]", align 8
  %indirectarg30 = alloca %"char[]", align 8
  %taddr33 = alloca i64, align 8
  %taddr34 = alloca i64, align 8
  %indirectarg35 = alloca %"char[]", align 8
  %indirectarg36 = alloca %"char[]", align 8
  %indirectarg37 = alloca %"char[]", align 8
  %varargslots38 = alloca [2 x %any], align 16
  %indirectarg41 = alloca %"any[]", align 8
  store ptr %0, ptr %buf, align 8
    #dbg_declare(ptr %buf, !2007, !DIExpression(), !2008)
  store i64 %1, ptr %maxlen, align 8
    #dbg_declare(ptr %maxlen, !2009, !DIExpression(), !2008)
  store ptr %2, ptr %len_ptr, align 8
    #dbg_declare(ptr %len_ptr, !2010, !DIExpression(), !2008)
    #dbg_declare(ptr %i, !2011, !DIExpression(), !2012)
  store i32 0, ptr %i, align 4, !dbg !2012
    #dbg_declare(ptr %len, !2013, !DIExpression(), !2014)
  %3 = load ptr, ptr %len_ptr, align 8, !dbg !2014
  %checknull = icmp eq ptr %3, null, !dbg !2014
  %4 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !2014
  br i1 %4, label %panic, label %checkok, !dbg !2014

checkok:                                          ; preds = %entry
  %5 = ptrtoint ptr %3 to i64, !dbg !2014
  %6 = urem i64 %5, 8, !dbg !2014
  %7 = icmp ne i64 %6, 0, !dbg !2014
  %8 = call i1 @llvm.expect.i1(i1 %7, i1 false), !dbg !2014
  br i1 %8, label %panic3, label %checkok9, !dbg !2014

checkok9:                                         ; preds = %checkok
  %9 = load i64, ptr %3, align 8, !dbg !2014
  store i64 %9, ptr %len, align 8, !dbg !2014
  br label %loop.cond, !dbg !2015

loop.cond:                                        ; preds = %if.exit, %checkok9
  %10 = load i64, ptr %len, align 8, !dbg !2016
  %11 = load i64, ptr %maxlen, align 8, !dbg !2016
  %lt = icmp ult i64 %10, %11, !dbg !2016
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !2016

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %c, !2018, !DIExpression(), !2020)
  %12 = load ptr, ptr %buf, align 8, !dbg !2020
  %13 = load i64, ptr %len, align 8, !dbg !2020
  %ptradd10 = getelementptr inbounds i8, ptr %12, i64 %13, !dbg !2020
  %14 = load i8, ptr %ptradd10, align 1, !dbg !2020
  store i8 %14, ptr %c, align 1, !dbg !2020
  %15 = load i8, ptr %c, align 1
  store i8 %15, ptr %c11, align 1
  %16 = load i8, ptr %c11, align 1
  store i8 %16, ptr %c12, align 1
  %17 = load i8, ptr %c12, align 1, !dbg !2021
  %zext = zext i8 %17 to i64, !dbg !2021
  %ge = icmp uge i64 %zext, 256, !dbg !2021
  %18 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !2021
  br i1 %18, label %panic13, label %checkok23, !dbg !2021

checkok23:                                        ; preds = %loop.body
  %ptroffset = getelementptr inbounds [2 x i8], ptr @std.core.ascii.ASCII_LOOKUP, i64 %zext, !dbg !2021
  %19 = load i16, ptr %ptroffset, align 2, !dbg !2021
  %lshrl = lshr i16 %19, 2, !dbg !2021
  %20 = and i16 1, %lshrl, !dbg !2021
  %trunc = trunc i16 %20 to i8, !dbg !2021
  %21 = trunc i8 %trunc to i1, !dbg !2021
  br i1 %21, label %if.exit, label %if.else, !dbg !2021

if.else:                                          ; preds = %checkok23
  br label %loop.exit, !dbg !2026

if.exit:                                          ; preds = %checkok23
  %22 = load i32, ptr %i, align 4, !dbg !2027
  %mul = mul i32 %22, 10, !dbg !2027
  %23 = load i8, ptr %c, align 1, !dbg !2027
  %zext24 = zext i8 %23 to i32, !dbg !2027
  %add = add i32 %mul, %zext24, !dbg !2027
  %sub = sub i32 %add, 48, !dbg !2027
  store i32 %sub, ptr %i, align 4, !dbg !2027
  %24 = load i64, ptr %len, align 8, !dbg !2028
  %add25 = add i64 %24, 1, !dbg !2028
  store i64 %add25, ptr %len, align 8, !dbg !2028
  br label %loop.cond, !dbg !2028

loop.exit:                                        ; preds = %if.else, %loop.cond
  %25 = load ptr, ptr %len_ptr, align 8, !dbg !2029
  %checknull26 = icmp eq ptr %25, null, !dbg !2029
  %26 = call i1 @llvm.expect.i1(i1 %checknull26, i1 false), !dbg !2029
  br i1 %26, label %panic27, label %checkok31, !dbg !2029

checkok31:                                        ; preds = %loop.exit
  %27 = ptrtoint ptr %25 to i64, !dbg !2029
  %28 = urem i64 %27, 8, !dbg !2029
  %29 = icmp ne i64 %28, 0, !dbg !2029
  %30 = call i1 @llvm.expect.i1(i1 %29, i1 false), !dbg !2029
  br i1 %30, label %panic32, label %checkok42, !dbg !2029

checkok42:                                        ; preds = %checkok31
  %31 = load i64, ptr %len, align 8, !dbg !2029
  store i64 %31, ptr %25, align 8, !dbg !2029
  %32 = load i32, ptr %i, align 4, !dbg !2030
  ret i32 %32, !dbg !2030

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.131, i64 48 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.132, i64 11 }, ptr %indirectarg2, align 8
  %33 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %33(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 147) #5, !dbg !2014
  unreachable, !dbg !2014

panic3:                                           ; preds = %checkok
  store i64 8, ptr %taddr, align 8
  %34 = insertvalue %any undef, ptr %taddr, 0
  %35 = insertvalue %any %34, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %6, ptr %taddr4, align 8
  %36 = insertvalue %any undef, ptr %taddr4, 0
  %37 = insertvalue %any %36, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg6, align 8
  store %"char[]" { ptr @.func.132, i64 11 }, ptr %indirectarg7, align 8
  store %any %35, ptr %varargslots, align 16
  %ptradd = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %37, ptr %ptradd, align 16
  %38 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %38, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg8, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, ptr align 8 %indirectarg7, i32 147, ptr align 8 %indirectarg8) #5, !dbg !2014
  unreachable, !dbg !2014

panic13:                                          ; preds = %loop.body
  store i64 256, ptr %taddr14, align 8
  %39 = insertvalue %any undef, ptr %taddr14, 0
  %40 = insertvalue %any %39, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %zext, ptr %taddr15, align 8
  %41 = insertvalue %any undef, ptr %taddr15, 0
  %42 = insertvalue %any %41, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.71, i64 59 }, ptr %indirectarg16, align 8
  store %"char[]" { ptr @.file.133, i64 8 }, ptr %indirectarg17, align 8
  store %"char[]" { ptr @.func.132, i64 11 }, ptr %indirectarg18, align 8
  store %any %40, ptr %varargslots19, align 16
  %ptradd20 = getelementptr inbounds i8, ptr %varargslots19, i64 16
  store %any %42, ptr %ptradd20, align 16
  %43 = insertvalue %"any[]" undef, ptr %varargslots19, 0
  %"$$temp21" = insertvalue %"any[]" %43, i64 2, 1
  store %"any[]" %"$$temp21", ptr %indirectarg22, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg16, ptr align 8 %indirectarg17, ptr align 8 %indirectarg18, i32 9, ptr align 8 %indirectarg22) #5, !dbg !2021
  unreachable, !dbg !2021

panic27:                                          ; preds = %loop.exit
  store %"char[]" { ptr @.panic_msg.131, i64 48 }, ptr %indirectarg28, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg29, align 8
  store %"char[]" { ptr @.func.132, i64 11 }, ptr %indirectarg30, align 8
  %44 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %44(ptr align 8 %indirectarg28, ptr align 8 %indirectarg29, ptr align 8 %indirectarg30, i32 155) #5, !dbg !2029
  unreachable, !dbg !2029

panic32:                                          ; preds = %checkok31
  store i64 8, ptr %taddr33, align 8
  %45 = insertvalue %any undef, ptr %taddr33, 0
  %46 = insertvalue %any %45, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %28, ptr %taddr34, align 8
  %47 = insertvalue %any undef, ptr %taddr34, 0
  %48 = insertvalue %any %47, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg35, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg36, align 8
  store %"char[]" { ptr @.func.132, i64 11 }, ptr %indirectarg37, align 8
  store %any %46, ptr %varargslots38, align 16
  %ptradd39 = getelementptr inbounds i8, ptr %varargslots38, i64 16
  store %any %48, ptr %ptradd39, align 16
  %49 = insertvalue %"any[]" undef, ptr %varargslots38, 0
  %"$$temp40" = insertvalue %"any[]" %49, i64 2, 1
  store %"any[]" %"$$temp40", ptr %indirectarg41, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg35, ptr align 8 %indirectarg36, ptr align 8 %indirectarg37, i32 155, ptr align 8 %indirectarg41) #5, !dbg !2029
  unreachable, !dbg !2029
}

; Function Attrs: nounwind ssp uwtable
define weak_odr ptr @std.io.fmt_u(ptr align 16 %0, ptr %1) #0 comdat !dbg !2031 {
entry:
  %s = alloca ptr, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %indirectarg3 = alloca %"char[]", align 8
  %y = alloca i64, align 8
  %indirectarg15 = alloca %"char[]", align 8
  %indirectarg16 = alloca %"char[]", align 8
  %indirectarg17 = alloca %"char[]", align 8
    #dbg_declare(ptr %0, !2034, !DIExpression(), !2035)
  store ptr %1, ptr %s, align 8
    #dbg_declare(ptr %s, !2036, !DIExpression(), !2035)
  br label %loop.cond, !dbg !2037

loop.cond:                                        ; preds = %checkok, %entry
  %2 = load i128, ptr %0, align 16, !dbg !2038
  %gt = icmp ugt i128 %2, 18446744073709551615, !dbg !2038
  br i1 %gt, label %loop.body, label %loop.exit, !dbg !2038

loop.body:                                        ; preds = %loop.cond
  %3 = load i128, ptr %0, align 16, !dbg !2038
  %smod = srem i128 %3, 10, !dbg !2038
  %trunc = trunc i128 %smod to i8, !dbg !2038
  %zext = zext i8 %trunc to i32, !dbg !2038
  %add = add i32 48, %zext, !dbg !2038
  %trunc1 = trunc i32 %add to i8, !dbg !2038
  %4 = load ptr, ptr %s, align 8, !dbg !2038
  %ptradd_any = getelementptr i8, ptr %4, i64 -1, !dbg !2038
  store ptr %ptradd_any, ptr %s, align 8, !dbg !2038
  %checknull = icmp eq ptr %ptradd_any, null, !dbg !2038
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !2038
  br i1 %5, label %panic, label %checkok, !dbg !2038

checkok:                                          ; preds = %loop.body
  store i8 %trunc1, ptr %ptradd_any, align 1, !dbg !2038
  %6 = load i128, ptr %0, align 16, !dbg !2038
  %udiv = udiv i128 %6, 10, !dbg !2038
  store i128 %udiv, ptr %0, align 16, !dbg !2038
  br label %loop.cond, !dbg !2038

loop.exit:                                        ; preds = %loop.cond
    #dbg_declare(ptr %y, !2040, !DIExpression(), !2042)
  %7 = load i128, ptr %0, align 16, !dbg !2042
  %trunc4 = trunc i128 %7 to i64, !dbg !2042
  store i64 %trunc4, ptr %y, align 8, !dbg !2042
  br label %loop.cond5, !dbg !2042

loop.cond5:                                       ; preds = %checkok18, %loop.exit
  %8 = load i64, ptr %y, align 8, !dbg !2042
  %i2b = icmp ne i64 %8, 0, !dbg !2042
  br i1 %i2b, label %loop.body6, label %loop.exit20, !dbg !2042

loop.body6:                                       ; preds = %loop.cond5
  %9 = load i64, ptr %y, align 8, !dbg !2042
  %smod7 = srem i64 %9, 10, !dbg !2042
  %trunc8 = trunc i64 %smod7 to i8, !dbg !2042
  %zext9 = zext i8 %trunc8 to i32, !dbg !2042
  %add10 = add i32 48, %zext9, !dbg !2042
  %trunc11 = trunc i32 %add10 to i8, !dbg !2042
  %10 = load ptr, ptr %s, align 8, !dbg !2042
  %ptradd_any12 = getelementptr i8, ptr %10, i64 -1, !dbg !2042
  store ptr %ptradd_any12, ptr %s, align 8, !dbg !2042
  %checknull13 = icmp eq ptr %ptradd_any12, null, !dbg !2042
  %11 = call i1 @llvm.expect.i1(i1 %checknull13, i1 false), !dbg !2042
  br i1 %11, label %panic14, label %checkok18, !dbg !2042

checkok18:                                        ; preds = %loop.body6
  store i8 %trunc11, ptr %ptradd_any12, align 1, !dbg !2042
  %12 = load i64, ptr %y, align 8, !dbg !2042
  %udiv19 = udiv i64 %12, 10, !dbg !2042
  store i64 %udiv19, ptr %y, align 8, !dbg !2042
  br label %loop.cond5, !dbg !2042

loop.exit20:                                      ; preds = %loop.cond5
  %13 = load ptr, ptr %s, align 8, !dbg !2043
  ret ptr %13, !dbg !2043

panic:                                            ; preds = %loop.body
  store %"char[]" { ptr @.panic_msg.134, i64 44 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg2, align 8
  store %"char[]" { ptr @.func.135, i64 5 }, ptr %indirectarg3, align 8
  %14 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %14(ptr align 8 %indirectarg, ptr align 8 %indirectarg2, ptr align 8 %indirectarg3, i32 187) #5, !dbg !2038
  unreachable, !dbg !2038

panic14:                                          ; preds = %loop.body6
  store %"char[]" { ptr @.panic_msg.134, i64 44 }, ptr %indirectarg15, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg16, align 8
  store %"char[]" { ptr @.func.135, i64 5 }, ptr %indirectarg17, align 8
  %15 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %15(ptr align 8 %indirectarg15, ptr align 8 %indirectarg16, ptr align 8 %indirectarg17, i32 188) #5, !dbg !2042
  unreachable, !dbg !2042
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @std.io.printf_parse_format_field(ptr %0, ptr %1, i64 %2, ptr %3, ptr %4, i64 %5, ptr %6) #0 !dbg !2044 {
entry:
  %args_ptr = alloca ptr, align 8
  %args_len = alloca i64, align 8
  %args_index_ptr = alloca ptr, align 8
  %format_ptr = alloca ptr, align 8
  %format_len = alloca i64, align 8
  %index_ptr = alloca ptr, align 8
  %c = alloca i8, align 1
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr4 = alloca i64, align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg7 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg8 = alloca %"any[]", align 8
  %c11 = alloca i8, align 1
  %c12 = alloca i8, align 1
  %taddr14 = alloca i64, align 8
  %taddr15 = alloca i64, align 8
  %indirectarg16 = alloca %"char[]", align 8
  %indirectarg17 = alloca %"char[]", align 8
  %indirectarg18 = alloca %"char[]", align 8
  %varargslots19 = alloca [2 x %any], align 16
  %indirectarg22 = alloca %"any[]", align 8
  %reterr = alloca i64, align 8
  %reterr25 = alloca i64, align 8
  %len = alloca i64, align 8
  %indirectarg29 = alloca %"char[]", align 8
  %indirectarg30 = alloca %"char[]", align 8
  %indirectarg31 = alloca %"char[]", align 8
  %taddr34 = alloca i64, align 8
  %taddr35 = alloca i64, align 8
  %indirectarg36 = alloca %"char[]", align 8
  %indirectarg37 = alloca %"char[]", align 8
  %indirectarg38 = alloca %"char[]", align 8
  %varargslots39 = alloca [2 x %any], align 16
  %indirectarg42 = alloca %"any[]", align 8
  %indirectarg49 = alloca %"char[]", align 8
  %indirectarg50 = alloca %"char[]", align 8
  %indirectarg51 = alloca %"char[]", align 8
  %taddr54 = alloca i64, align 8
  %taddr55 = alloca i64, align 8
  %indirectarg56 = alloca %"char[]", align 8
  %indirectarg57 = alloca %"char[]", align 8
  %indirectarg58 = alloca %"char[]", align 8
  %varargslots59 = alloca [2 x %any], align 16
  %indirectarg62 = alloca %"any[]", align 8
  %val = alloca %any, align 8
  %indirectarg69 = alloca %"char[]", align 8
  %indirectarg70 = alloca %"char[]", align 8
  %indirectarg71 = alloca %"char[]", align 8
  %taddr74 = alloca i64, align 8
  %taddr75 = alloca i64, align 8
  %indirectarg76 = alloca %"char[]", align 8
  %indirectarg77 = alloca %"char[]", align 8
  %indirectarg78 = alloca %"char[]", align 8
  %varargslots79 = alloca [2 x %any], align 16
  %indirectarg82 = alloca %"any[]", align 8
  %taddr87 = alloca i64, align 8
  %taddr88 = alloca i64, align 8
  %indirectarg89 = alloca %"char[]", align 8
  %indirectarg90 = alloca %"char[]", align 8
  %indirectarg91 = alloca %"char[]", align 8
  %varargslots92 = alloca [2 x %any], align 16
  %indirectarg95 = alloca %"any[]", align 8
  %intval = alloca i32, align 4
  %intval.f = alloca i64, align 8
  %v = alloca %any, align 8
  %blockret = alloca i32, align 4
  %indirectarg99 = alloca %"char[]", align 8
  %indirectarg100 = alloca %"char[]", align 8
  %indirectarg101 = alloca %"char[]", align 8
  %indirectarg106 = alloca %"char[]", align 8
  %indirectarg107 = alloca %"char[]", align 8
  %indirectarg108 = alloca %"char[]", align 8
  %any_type = alloca i64, align 8
  %kind = alloca i8, align 1
  %is_mixed_signed = alloca i8, align 1
  %max = alloca i32, align 4
  %min = alloca i32, align 4
  %switch = alloca i64, align 8
  %c117 = alloca i8, align 1
  %indirectarg120 = alloca %"char[]", align 8
  %indirectarg121 = alloca %"char[]", align 8
  %indirectarg122 = alloca %"char[]", align 8
  %s = alloca i16, align 2
  %indirectarg137 = alloca %"char[]", align 8
  %indirectarg138 = alloca %"char[]", align 8
  %indirectarg139 = alloca %"char[]", align 8
  %taddr142 = alloca i64, align 8
  %taddr143 = alloca i64, align 8
  %indirectarg144 = alloca %"char[]", align 8
  %indirectarg145 = alloca %"char[]", align 8
  %indirectarg146 = alloca %"char[]", align 8
  %varargslots147 = alloca [2 x %any], align 16
  %indirectarg150 = alloca %"any[]", align 8
  %i = alloca i32, align 4
  %indirectarg176 = alloca %"char[]", align 8
  %indirectarg177 = alloca %"char[]", align 8
  %indirectarg178 = alloca %"char[]", align 8
  %taddr181 = alloca i64, align 8
  %taddr182 = alloca i64, align 8
  %indirectarg183 = alloca %"char[]", align 8
  %indirectarg184 = alloca %"char[]", align 8
  %indirectarg185 = alloca %"char[]", align 8
  %varargslots186 = alloca [2 x %any], align 16
  %indirectarg189 = alloca %"any[]", align 8
  %l = alloca i64, align 8
  %indirectarg214 = alloca %"char[]", align 8
  %indirectarg215 = alloca %"char[]", align 8
  %indirectarg216 = alloca %"char[]", align 8
  %taddr219 = alloca i64, align 8
  %taddr220 = alloca i64, align 8
  %indirectarg221 = alloca %"char[]", align 8
  %indirectarg222 = alloca %"char[]", align 8
  %indirectarg223 = alloca %"char[]", align 8
  %varargslots224 = alloca [2 x %any], align 16
  %indirectarg227 = alloca %"any[]", align 8
  %i253 = alloca i128, align 16
  %indirectarg256 = alloca %"char[]", align 8
  %indirectarg257 = alloca %"char[]", align 8
  %indirectarg258 = alloca %"char[]", align 8
  %taddr261 = alloca i64, align 8
  %taddr262 = alloca i64, align 8
  %indirectarg263 = alloca %"char[]", align 8
  %indirectarg264 = alloca %"char[]", align 8
  %indirectarg265 = alloca %"char[]", align 8
  %varargslots266 = alloca [2 x %any], align 16
  %indirectarg269 = alloca %"any[]", align 8
  %c295 = alloca i8, align 1
  %indirectarg298 = alloca %"char[]", align 8
  %indirectarg299 = alloca %"char[]", align 8
  %indirectarg300 = alloca %"char[]", align 8
  %s315 = alloca i16, align 2
  %indirectarg318 = alloca %"char[]", align 8
  %indirectarg319 = alloca %"char[]", align 8
  %indirectarg320 = alloca %"char[]", align 8
  %taddr323 = alloca i64, align 8
  %taddr324 = alloca i64, align 8
  %indirectarg325 = alloca %"char[]", align 8
  %indirectarg326 = alloca %"char[]", align 8
  %indirectarg327 = alloca %"char[]", align 8
  %varargslots328 = alloca [2 x %any], align 16
  %indirectarg331 = alloca %"any[]", align 8
  %i354 = alloca i32, align 4
  %indirectarg357 = alloca %"char[]", align 8
  %indirectarg358 = alloca %"char[]", align 8
  %indirectarg359 = alloca %"char[]", align 8
  %taddr362 = alloca i64, align 8
  %taddr363 = alloca i64, align 8
  %indirectarg364 = alloca %"char[]", align 8
  %indirectarg365 = alloca %"char[]", align 8
  %indirectarg366 = alloca %"char[]", align 8
  %varargslots367 = alloca [2 x %any], align 16
  %indirectarg370 = alloca %"any[]", align 8
  %l391 = alloca i64, align 8
  %indirectarg394 = alloca %"char[]", align 8
  %indirectarg395 = alloca %"char[]", align 8
  %indirectarg396 = alloca %"char[]", align 8
  %taddr399 = alloca i64, align 8
  %taddr400 = alloca i64, align 8
  %indirectarg401 = alloca %"char[]", align 8
  %indirectarg402 = alloca %"char[]", align 8
  %indirectarg403 = alloca %"char[]", align 8
  %varargslots404 = alloca [2 x %any], align 16
  %indirectarg407 = alloca %"any[]", align 8
  %i431 = alloca i128, align 16
  %indirectarg434 = alloca %"char[]", align 8
  %indirectarg435 = alloca %"char[]", align 8
  %indirectarg436 = alloca %"char[]", align 8
  %taddr439 = alloca i64, align 8
  %taddr440 = alloca i64, align 8
  %indirectarg441 = alloca %"char[]", align 8
  %indirectarg442 = alloca %"char[]", align 8
  %indirectarg443 = alloca %"char[]", align 8
  %varargslots444 = alloca [2 x %any], align 16
  %indirectarg447 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg464 = alloca %"char[]", align 8
  %indirectarg465 = alloca %"char[]", align 8
  %indirectarg466 = alloca %"char[]", align 8
  %indirectarg467 = alloca %"any[]", align 8
  %reterr468 = alloca i64, align 8
  store ptr %1, ptr %args_ptr, align 8
    #dbg_declare(ptr %args_ptr, !2048, !DIExpression(), !2049)
  store i64 %2, ptr %args_len, align 8
    #dbg_declare(ptr %args_len, !2050, !DIExpression(), !2049)
  store ptr %3, ptr %args_index_ptr, align 8
    #dbg_declare(ptr %args_index_ptr, !2051, !DIExpression(), !2049)
  store ptr %4, ptr %format_ptr, align 8
    #dbg_declare(ptr %format_ptr, !2052, !DIExpression(), !2053)
  store i64 %5, ptr %format_len, align 8
    #dbg_declare(ptr %format_len, !2054, !DIExpression(), !2053)
  store ptr %6, ptr %index_ptr, align 8
    #dbg_declare(ptr %index_ptr, !2055, !DIExpression(), !2053)
    #dbg_declare(ptr %c, !2056, !DIExpression(), !2057)
  %7 = load ptr, ptr %format_ptr, align 8, !dbg !2057
  %8 = load ptr, ptr %index_ptr, align 8, !dbg !2057
  %checknull = icmp eq ptr %8, null, !dbg !2057
  %9 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !2057
  br i1 %9, label %panic, label %checkok, !dbg !2057

checkok:                                          ; preds = %entry
  %10 = ptrtoint ptr %8 to i64, !dbg !2057
  %11 = urem i64 %10, 8, !dbg !2057
  %12 = icmp ne i64 %11, 0, !dbg !2057
  %13 = call i1 @llvm.expect.i1(i1 %12, i1 false), !dbg !2057
  br i1 %13, label %panic3, label %checkok9, !dbg !2057

checkok9:                                         ; preds = %checkok
  %14 = load i64, ptr %8, align 8, !dbg !2057
  %ptradd10 = getelementptr inbounds i8, ptr %7, i64 %14, !dbg !2057
  %15 = load i8, ptr %ptradd10, align 1, !dbg !2057
  store i8 %15, ptr %c, align 1, !dbg !2057
  %16 = load i8, ptr %c, align 1
  store i8 %16, ptr %c11, align 1
  %17 = load i8, ptr %c11, align 1
  store i8 %17, ptr %c12, align 1
  %18 = load i8, ptr %c12, align 1, !dbg !2058
  %zext = zext i8 %18 to i64, !dbg !2058
  %ge = icmp uge i64 %zext, 256, !dbg !2058
  %19 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !2058
  br i1 %19, label %panic13, label %checkok23, !dbg !2058

checkok23:                                        ; preds = %checkok9
  %ptroffset = getelementptr inbounds [2 x i8], ptr @std.core.ascii.ASCII_LOOKUP, i64 %zext, !dbg !2058
  %20 = load i16, ptr %ptroffset, align 2, !dbg !2058
  %lshrl = lshr i16 %20, 2, !dbg !2058
  %21 = and i16 1, %lshrl, !dbg !2058
  %trunc = trunc i16 %21 to i8, !dbg !2058
  %22 = trunc i8 %trunc to i1, !dbg !2058
  br i1 %22, label %if.then, label %if.exit, !dbg !2058

if.then:                                          ; preds = %checkok23
  %23 = load ptr, ptr %format_ptr, align 8, !dbg !2062
  %24 = load i64, ptr %format_len, align 8, !dbg !2062
  %25 = load ptr, ptr %index_ptr, align 8, !dbg !2062
  %26 = call i32 @std.io.simple_atoi(ptr %23, i64 %24, ptr %25) #6, !dbg !2062
  store i32 %26, ptr %0, align 4, !dbg !2062
  ret i64 0, !dbg !2062

if.exit:                                          ; preds = %checkok23
  %27 = load i8, ptr %c, align 1, !dbg !2063
  %neq = icmp ne i8 %27, 42, !dbg !2063
  br i1 %neq, label %if.then24, label %if.exit26, !dbg !2063

if.then24:                                        ; preds = %if.exit
  store i32 0, ptr %0, align 4, !dbg !2063
  ret i64 0, !dbg !2063

if.exit26:                                        ; preds = %if.exit
    #dbg_declare(ptr %len, !2064, !DIExpression(), !2065)
  %28 = load ptr, ptr %index_ptr, align 8, !dbg !2065
  %checknull27 = icmp eq ptr %28, null, !dbg !2065
  %29 = call i1 @llvm.expect.i1(i1 %checknull27, i1 false), !dbg !2065
  br i1 %29, label %panic28, label %checkok32, !dbg !2065

checkok32:                                        ; preds = %if.exit26
  %30 = ptrtoint ptr %28 to i64, !dbg !2065
  %31 = urem i64 %30, 8, !dbg !2065
  %32 = icmp ne i64 %31, 0, !dbg !2065
  %33 = call i1 @llvm.expect.i1(i1 %32, i1 false), !dbg !2065
  br i1 %33, label %panic33, label %checkok43, !dbg !2065

checkok43:                                        ; preds = %checkok32
  %34 = load i64, ptr %28, align 8, !dbg !2065
  %add = add i64 %34, 1, !dbg !2065
  store i64 %add, ptr %28, align 8, !dbg !2065
  store i64 %add, ptr %len, align 8, !dbg !2065
  %35 = load i64, ptr %len, align 8, !dbg !2066
  %36 = load i64, ptr %format_len, align 8, !dbg !2066
  %ge44 = icmp uge i64 %35, %36, !dbg !2066
  br i1 %ge44, label %if.then45, label %if.exit46, !dbg !2066

if.then45:                                        ; preds = %checkok43
  ret i64 ptrtoint (ptr @std.io.BAD_FORMAT to i64), !dbg !2066

if.exit46:                                        ; preds = %checkok43
  %37 = load ptr, ptr %args_index_ptr, align 8, !dbg !2067
  %checknull47 = icmp eq ptr %37, null, !dbg !2067
  %38 = call i1 @llvm.expect.i1(i1 %checknull47, i1 false), !dbg !2067
  br i1 %38, label %panic48, label %checkok52, !dbg !2067

checkok52:                                        ; preds = %if.exit46
  %39 = ptrtoint ptr %37 to i64, !dbg !2067
  %40 = urem i64 %39, 8, !dbg !2067
  %41 = icmp ne i64 %40, 0, !dbg !2067
  %42 = call i1 @llvm.expect.i1(i1 %41, i1 false), !dbg !2067
  br i1 %42, label %panic53, label %checkok63, !dbg !2067

checkok63:                                        ; preds = %checkok52
  %43 = load i64, ptr %37, align 8, !dbg !2067
  %44 = load i64, ptr %args_len, align 8, !dbg !2067
  %ge64 = icmp uge i64 %43, %44, !dbg !2067
  br i1 %ge64, label %if.then65, label %if.exit66, !dbg !2067

if.then65:                                        ; preds = %checkok63
  ret i64 ptrtoint (ptr @std.io.BAD_FORMAT to i64), !dbg !2067

if.exit66:                                        ; preds = %checkok63
    #dbg_declare(ptr %val, !2068, !DIExpression(), !2069)
  %45 = load ptr, ptr %args_ptr, align 8, !dbg !2069
  %46 = load ptr, ptr %args_index_ptr, align 8, !dbg !2069
  %checknull67 = icmp eq ptr %46, null, !dbg !2069
  %47 = call i1 @llvm.expect.i1(i1 %checknull67, i1 false), !dbg !2069
  br i1 %47, label %panic68, label %checkok72, !dbg !2069

checkok72:                                        ; preds = %if.exit66
  %48 = ptrtoint ptr %46 to i64, !dbg !2069
  %49 = urem i64 %48, 8, !dbg !2069
  %50 = icmp ne i64 %49, 0, !dbg !2069
  %51 = call i1 @llvm.expect.i1(i1 %50, i1 false), !dbg !2069
  br i1 %51, label %panic73, label %checkok83, !dbg !2069

checkok83:                                        ; preds = %checkok72
  %52 = load i64, ptr %46, align 8, !dbg !2069
  %add84 = add i64 %52, 1, !dbg !2069
  store i64 %add84, ptr %46, align 8, !dbg !2069
  %ptroffset85 = getelementptr inbounds [16 x i8], ptr %45, i64 %52, !dbg !2069
  %53 = ptrtoint ptr %ptroffset85 to i64, !dbg !2069
  %54 = urem i64 %53, 8, !dbg !2069
  %55 = icmp ne i64 %54, 0, !dbg !2069
  %56 = call i1 @llvm.expect.i1(i1 %55, i1 false), !dbg !2069
  br i1 %56, label %panic86, label %checkok96, !dbg !2069

checkok96:                                        ; preds = %checkok83
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %val, ptr align 8 %ptroffset85, i32 16, i1 false), !dbg !2069
  %ptradd97 = getelementptr inbounds i8, ptr %val, i64 8, !dbg !2070
  %57 = load i64, ptr %ptradd97, align 8, !dbg !2070
  %"introspect*" = inttoptr i64 %57 to ptr, !dbg !2070
  %typeid.kind = load i8, ptr %"introspect*", align 8, !dbg !2070
  %58 = call i8 @std.core.types.TypeKind.is_int(i8 %typeid.kind) #6, !dbg !2070
  %59 = trunc i8 %58 to i1, !dbg !2070
  br i1 %59, label %if.exit98, label %if.else, !dbg !2070

if.else:                                          ; preds = %checkok96
  ret i64 ptrtoint (ptr @std.io.BAD_FORMAT to i64), !dbg !2070

if.exit98:                                        ; preds = %checkok96
    #dbg_declare(ptr %intval, !2071, !DIExpression(), !2072)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %v, ptr align 8 %val, i32 16, i1 false)
  %60 = call i8 @std.core.types.TypeKind.is_int(i8 2) #6, !dbg !2073
  %61 = trunc i8 %60 to i1, !dbg !2073
  br i1 %61, label %assert_ok, label %assert_fail, !dbg !2073

assert_fail:                                      ; preds = %if.exit98
  store %"char[]" { ptr @.panic_msg.50, i64 69 }, ptr %indirectarg99, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg100, align 8
  store %"char[]" { ptr @.func.137, i64 25 }, ptr %indirectarg101, align 8
  %62 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %62(ptr align 8 %indirectarg99, ptr align 8 %indirectarg100, ptr align 8 %indirectarg101, i32 690) #5, !dbg !2073
  unreachable, !dbg !2073

assert_ok:                                        ; preds = %if.exit98
  %ptradd102 = getelementptr inbounds i8, ptr %v, i64 8, !dbg !2076
  %63 = load i64, ptr %ptradd102, align 8, !dbg !2076
  %"introspect*103" = inttoptr i64 %63 to ptr, !dbg !2076
  %typeid.kind104 = load i8, ptr %"introspect*103", align 8, !dbg !2076
  %64 = call i8 @std.core.types.TypeKind.is_int(i8 %typeid.kind104) #6, !dbg !2073
  %65 = trunc i8 %64 to i1, !dbg !2073
  br i1 %65, label %assert_ok109, label %assert_fail105, !dbg !2073

assert_fail105:                                   ; preds = %assert_ok
  store %"char[]" { ptr @.panic_msg.55, i64 71 }, ptr %indirectarg106, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg107, align 8
  store %"char[]" { ptr @.func.137, i64 25 }, ptr %indirectarg108, align 8
  %66 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %66(ptr align 8 %indirectarg106, ptr align 8 %indirectarg107, ptr align 8 %indirectarg108, i32 690) #5, !dbg !2073
  unreachable, !dbg !2073

assert_ok109:                                     ; preds = %assert_ok
    #dbg_declare(ptr %any_type, !2077, !DIExpression(), !2078)
  %ptradd110 = getelementptr inbounds i8, ptr %v, i64 8, !dbg !2078
  %67 = load i64, ptr %ptradd110, align 8, !dbg !2078
  store i64 %67, ptr %any_type, align 8, !dbg !2078
    #dbg_declare(ptr %kind, !2079, !DIExpression(), !2080)
  %68 = load i64, ptr %any_type, align 8, !dbg !2080
  %"introspect*111" = inttoptr i64 %68 to ptr, !dbg !2080
  %typeid.kind112 = load i8, ptr %"introspect*111", align 8, !dbg !2080
  store i8 %typeid.kind112, ptr %kind, align 1, !dbg !2080
    #dbg_declare(ptr %is_mixed_signed, !2081, !DIExpression(), !2082)
  %69 = load i64, ptr %any_type, align 8, !dbg !2082
  %"introspect*113" = inttoptr i64 %69 to ptr, !dbg !2082
  %typeid.kind114 = load i8, ptr %"introspect*113", align 8, !dbg !2082
  %neq115 = icmp ne i8 2, %typeid.kind114, !dbg !2082
  %70 = zext i1 %neq115 to i8, !dbg !2082
  store i8 %70, ptr %is_mixed_signed, align 1, !dbg !2082
    #dbg_declare(ptr %max, !2083, !DIExpression(), !2084)
  store i32 2147483647, ptr %max, align 4, !dbg !2084
    #dbg_declare(ptr %min, !2085, !DIExpression(), !2086)
  store i32 -2147483648, ptr %min, align 4, !dbg !2086
  %71 = load i64, ptr %any_type, align 8
  store i64 %71, ptr %switch, align 8
  br label %switch.entry

switch.entry:                                     ; preds = %assert_ok109
  %72 = load i64, ptr %switch, align 8
  br label %check_subtype, !dbg !2087

check_subtype:                                    ; preds = %parent_type_block, %switch.entry
  %73 = phi i64 [ %72, %switch.entry ], [ %typeid.parent, %parent_type_block ], !dbg !2087
  %eq = icmp eq i64 ptrtoint (ptr @"$ct.ichar" to i64), %73, !dbg !2087
  br i1 %eq, label %result_block, label %parent_type_block, !dbg !2087

parent_type_block:                                ; preds = %check_subtype
  %74 = inttoptr i64 %73 to ptr, !dbg !2087
  %ptradd116 = getelementptr inbounds i8, ptr %74, i64 8, !dbg !2087
  %typeid.parent = load i64, ptr %ptradd116, align 8, !dbg !2087
  %75 = icmp eq i64 %typeid.parent, 0, !dbg !2087
  br i1 %75, label %result_block, label %check_subtype, !dbg !2087

result_block:                                     ; preds = %parent_type_block, %check_subtype
  %76 = phi i1 [ false, %parent_type_block ], [ true, %check_subtype ], !dbg !2087
  br i1 %76, label %switch.case, label %next_if, !dbg !2087

switch.case:                                      ; preds = %result_block
    #dbg_declare(ptr %c117, !2089, !DIExpression(), !2091)
  %77 = load ptr, ptr %v, align 8, !dbg !2091
  %checknull118 = icmp eq ptr %77, null, !dbg !2091
  %78 = call i1 @llvm.expect.i1(i1 %checknull118, i1 false), !dbg !2091
  br i1 %78, label %panic119, label %checkok123, !dbg !2091

checkok123:                                       ; preds = %switch.case
  %79 = load i8, ptr %77, align 1, !dbg !2091
  store i8 %79, ptr %c117, align 1, !dbg !2091
  %80 = load i8, ptr %is_mixed_signed, align 1, !dbg !2092
  %81 = trunc i8 %80 to i1, !dbg !2092
  br i1 %81, label %and.rhs, label %and.phi, !dbg !2092

and.rhs:                                          ; preds = %checkok123
  %82 = load i8, ptr %c117, align 1, !dbg !2092
  %sext = sext i8 %82 to i32, !dbg !2092
  %lt = icmp slt i32 %sext, 0, !dbg !2092
  br label %and.phi, !dbg !2092

and.phi:                                          ; preds = %and.rhs, %checkok123
  %val124 = phi i1 [ false, %checkok123 ], [ %lt, %and.rhs ], !dbg !2092
  br i1 %val124, label %if.then125, label %if.exit126, !dbg !2092

if.then125:                                       ; preds = %and.phi
  store i64 ptrtoint (ptr @std.core.types.VALUE_OUT_OF_UNSIGNED_RANGE to i64), ptr %intval.f, align 8, !dbg !2092
  br label %after_assign, !dbg !2092

if.exit126:                                       ; preds = %and.phi
  %83 = load i8, ptr %c117, align 1, !dbg !2093
  %sext127 = sext i8 %83 to i32, !dbg !2093
  store i32 %sext127, ptr %blockret, align 4, !dbg !2093
  br label %expr_block.exit, !dbg !2093

next_if:                                          ; preds = %result_block
  br label %check_subtype128, !dbg !2094

check_subtype128:                                 ; preds = %parent_type_block130, %next_if
  %84 = phi i64 [ %72, %next_if ], [ %typeid.parent132, %parent_type_block130 ], !dbg !2094
  %eq129 = icmp eq i64 ptrtoint (ptr @"$ct.short" to i64), %84, !dbg !2094
  br i1 %eq129, label %result_block133, label %parent_type_block130, !dbg !2094

parent_type_block130:                             ; preds = %check_subtype128
  %85 = inttoptr i64 %84 to ptr, !dbg !2094
  %ptradd131 = getelementptr inbounds i8, ptr %85, i64 8, !dbg !2094
  %typeid.parent132 = load i64, ptr %ptradd131, align 8, !dbg !2094
  %86 = icmp eq i64 %typeid.parent132, 0, !dbg !2094
  br i1 %86, label %result_block133, label %check_subtype128, !dbg !2094

result_block133:                                  ; preds = %parent_type_block130, %check_subtype128
  %87 = phi i1 [ false, %parent_type_block130 ], [ true, %check_subtype128 ], !dbg !2094
  br i1 %87, label %switch.case134, label %next_if166, !dbg !2094

switch.case134:                                   ; preds = %result_block133
    #dbg_declare(ptr %s, !2095, !DIExpression(), !2097)
  %88 = load ptr, ptr %v, align 8, !dbg !2097
  %checknull135 = icmp eq ptr %88, null, !dbg !2097
  %89 = call i1 @llvm.expect.i1(i1 %checknull135, i1 false), !dbg !2097
  br i1 %89, label %panic136, label %checkok140, !dbg !2097

checkok140:                                       ; preds = %switch.case134
  %90 = ptrtoint ptr %88 to i64, !dbg !2097
  %91 = urem i64 %90, 2, !dbg !2097
  %92 = icmp ne i64 %91, 0, !dbg !2097
  %93 = call i1 @llvm.expect.i1(i1 %92, i1 false), !dbg !2097
  br i1 %93, label %panic141, label %checkok151, !dbg !2097

checkok151:                                       ; preds = %checkok140
  %94 = load i16, ptr %88, align 2, !dbg !2097
  store i16 %94, ptr %s, align 2, !dbg !2097
  %95 = load i8, ptr %is_mixed_signed, align 1, !dbg !2098
  %96 = trunc i8 %95 to i1, !dbg !2098
  br i1 %96, label %and.rhs152, label %and.phi155, !dbg !2098

and.rhs152:                                       ; preds = %checkok151
  %97 = load i16, ptr %s, align 2, !dbg !2098
  %sext153 = sext i16 %97 to i32, !dbg !2098
  %lt154 = icmp slt i32 %sext153, 0, !dbg !2098
  br label %and.phi155, !dbg !2098

and.phi155:                                       ; preds = %and.rhs152, %checkok151
  %val156 = phi i1 [ false, %checkok151 ], [ %lt154, %and.rhs152 ], !dbg !2098
  br i1 %val156, label %if.then157, label %if.exit158, !dbg !2098

if.then157:                                       ; preds = %and.phi155
  store i64 ptrtoint (ptr @std.core.types.VALUE_OUT_OF_UNSIGNED_RANGE to i64), ptr %intval.f, align 8, !dbg !2098
  br label %after_assign, !dbg !2098

if.exit158:                                       ; preds = %and.phi155
  %98 = load i16, ptr %s, align 2, !dbg !2099
  %sext159 = sext i16 %98 to i32, !dbg !2099
  %99 = load i32, ptr %max, align 4, !dbg !2099
  %gt = icmp sgt i32 %sext159, %99, !dbg !2099
  br i1 %gt, label %or.phi, label %or.rhs, !dbg !2099

or.rhs:                                           ; preds = %if.exit158
  %100 = load i16, ptr %s, align 2, !dbg !2099
  %sext160 = sext i16 %100 to i32, !dbg !2099
  %101 = load i32, ptr %min, align 4, !dbg !2099
  %lt161 = icmp slt i32 %sext160, %101, !dbg !2099
  br label %or.phi, !dbg !2099

or.phi:                                           ; preds = %or.rhs, %if.exit158
  %val162 = phi i1 [ true, %if.exit158 ], [ %lt161, %or.rhs ], !dbg !2099
  br i1 %val162, label %if.then163, label %if.exit164, !dbg !2099

if.then163:                                       ; preds = %or.phi
  store i64 ptrtoint (ptr @std.core.types.VALUE_OUT_OF_RANGE to i64), ptr %intval.f, align 8, !dbg !2099
  br label %after_assign, !dbg !2099

if.exit164:                                       ; preds = %or.phi
  %102 = load i16, ptr %s, align 2, !dbg !2100
  %sext165 = sext i16 %102 to i32, !dbg !2100
  store i32 %sext165, ptr %blockret, align 4, !dbg !2100
  br label %expr_block.exit, !dbg !2100

next_if166:                                       ; preds = %result_block133
  br label %check_subtype167, !dbg !2101

check_subtype167:                                 ; preds = %parent_type_block169, %next_if166
  %103 = phi i64 [ %72, %next_if166 ], [ %typeid.parent171, %parent_type_block169 ], !dbg !2101
  %eq168 = icmp eq i64 ptrtoint (ptr @"$ct.int" to i64), %103, !dbg !2101
  br i1 %eq168, label %result_block172, label %parent_type_block169, !dbg !2101

parent_type_block169:                             ; preds = %check_subtype167
  %104 = inttoptr i64 %103 to ptr, !dbg !2101
  %ptradd170 = getelementptr inbounds i8, ptr %104, i64 8, !dbg !2101
  %typeid.parent171 = load i64, ptr %ptradd170, align 8, !dbg !2101
  %105 = icmp eq i64 %typeid.parent171, 0, !dbg !2101
  br i1 %105, label %result_block172, label %check_subtype167, !dbg !2101

result_block172:                                  ; preds = %parent_type_block169, %check_subtype167
  %106 = phi i1 [ false, %parent_type_block169 ], [ true, %check_subtype167 ], !dbg !2101
  br i1 %106, label %switch.case173, label %next_if204, !dbg !2101

switch.case173:                                   ; preds = %result_block172
    #dbg_declare(ptr %i, !2102, !DIExpression(), !2104)
  %107 = load ptr, ptr %v, align 8, !dbg !2104
  %checknull174 = icmp eq ptr %107, null, !dbg !2104
  %108 = call i1 @llvm.expect.i1(i1 %checknull174, i1 false), !dbg !2104
  br i1 %108, label %panic175, label %checkok179, !dbg !2104

checkok179:                                       ; preds = %switch.case173
  %109 = ptrtoint ptr %107 to i64, !dbg !2104
  %110 = urem i64 %109, 4, !dbg !2104
  %111 = icmp ne i64 %110, 0, !dbg !2104
  %112 = call i1 @llvm.expect.i1(i1 %111, i1 false), !dbg !2104
  br i1 %112, label %panic180, label %checkok190, !dbg !2104

checkok190:                                       ; preds = %checkok179
  %113 = load i32, ptr %107, align 4, !dbg !2104
  store i32 %113, ptr %i, align 4, !dbg !2104
  %114 = load i8, ptr %is_mixed_signed, align 1, !dbg !2105
  %115 = trunc i8 %114 to i1, !dbg !2105
  br i1 %115, label %and.rhs191, label %and.phi193, !dbg !2105

and.rhs191:                                       ; preds = %checkok190
  %116 = load i32, ptr %i, align 4, !dbg !2105
  %lt192 = icmp slt i32 %116, 0, !dbg !2105
  br label %and.phi193, !dbg !2105

and.phi193:                                       ; preds = %and.rhs191, %checkok190
  %val194 = phi i1 [ false, %checkok190 ], [ %lt192, %and.rhs191 ], !dbg !2105
  br i1 %val194, label %if.then195, label %if.exit196, !dbg !2105

if.then195:                                       ; preds = %and.phi193
  store i64 ptrtoint (ptr @std.core.types.VALUE_OUT_OF_UNSIGNED_RANGE to i64), ptr %intval.f, align 8, !dbg !2105
  br label %after_assign, !dbg !2105

if.exit196:                                       ; preds = %and.phi193
  %117 = load i32, ptr %i, align 4, !dbg !2106
  %118 = load i32, ptr %max, align 4, !dbg !2106
  %gt197 = icmp sgt i32 %117, %118, !dbg !2106
  br i1 %gt197, label %or.phi200, label %or.rhs198, !dbg !2106

or.rhs198:                                        ; preds = %if.exit196
  %119 = load i32, ptr %i, align 4, !dbg !2106
  %120 = load i32, ptr %min, align 4, !dbg !2106
  %lt199 = icmp slt i32 %119, %120, !dbg !2106
  br label %or.phi200, !dbg !2106

or.phi200:                                        ; preds = %or.rhs198, %if.exit196
  %val201 = phi i1 [ true, %if.exit196 ], [ %lt199, %or.rhs198 ], !dbg !2106
  br i1 %val201, label %if.then202, label %if.exit203, !dbg !2106

if.then202:                                       ; preds = %or.phi200
  store i64 ptrtoint (ptr @std.core.types.VALUE_OUT_OF_RANGE to i64), ptr %intval.f, align 8, !dbg !2106
  br label %after_assign, !dbg !2106

if.exit203:                                       ; preds = %or.phi200
  %121 = load i32, ptr %i, align 4, !dbg !2107
  store i32 %121, ptr %blockret, align 4, !dbg !2107
  br label %expr_block.exit, !dbg !2107

next_if204:                                       ; preds = %result_block172
  br label %check_subtype205, !dbg !2108

check_subtype205:                                 ; preds = %parent_type_block207, %next_if204
  %122 = phi i64 [ %72, %next_if204 ], [ %typeid.parent209, %parent_type_block207 ], !dbg !2108
  %eq206 = icmp eq i64 ptrtoint (ptr @"$ct.long" to i64), %122, !dbg !2108
  br i1 %eq206, label %result_block210, label %parent_type_block207, !dbg !2108

parent_type_block207:                             ; preds = %check_subtype205
  %123 = inttoptr i64 %122 to ptr, !dbg !2108
  %ptradd208 = getelementptr inbounds i8, ptr %123, i64 8, !dbg !2108
  %typeid.parent209 = load i64, ptr %ptradd208, align 8, !dbg !2108
  %124 = icmp eq i64 %typeid.parent209, 0, !dbg !2108
  br i1 %124, label %result_block210, label %check_subtype205, !dbg !2108

result_block210:                                  ; preds = %parent_type_block207, %check_subtype205
  %125 = phi i1 [ false, %parent_type_block207 ], [ true, %check_subtype205 ], !dbg !2108
  br i1 %125, label %switch.case211, label %next_if245, !dbg !2108

switch.case211:                                   ; preds = %result_block210
    #dbg_declare(ptr %l, !2109, !DIExpression(), !2111)
  %126 = load ptr, ptr %v, align 8, !dbg !2111
  %checknull212 = icmp eq ptr %126, null, !dbg !2111
  %127 = call i1 @llvm.expect.i1(i1 %checknull212, i1 false), !dbg !2111
  br i1 %127, label %panic213, label %checkok217, !dbg !2111

checkok217:                                       ; preds = %switch.case211
  %128 = ptrtoint ptr %126 to i64, !dbg !2111
  %129 = urem i64 %128, 8, !dbg !2111
  %130 = icmp ne i64 %129, 0, !dbg !2111
  %131 = call i1 @llvm.expect.i1(i1 %130, i1 false), !dbg !2111
  br i1 %131, label %panic218, label %checkok228, !dbg !2111

checkok228:                                       ; preds = %checkok217
  %132 = load i64, ptr %126, align 8, !dbg !2111
  store i64 %132, ptr %l, align 8, !dbg !2111
  %133 = load i8, ptr %is_mixed_signed, align 1, !dbg !2112
  %134 = trunc i8 %133 to i1, !dbg !2112
  br i1 %134, label %and.rhs229, label %and.phi231, !dbg !2112

and.rhs229:                                       ; preds = %checkok228
  %135 = load i64, ptr %l, align 8, !dbg !2112
  %lt230 = icmp slt i64 %135, 0, !dbg !2112
  br label %and.phi231, !dbg !2112

and.phi231:                                       ; preds = %and.rhs229, %checkok228
  %val232 = phi i1 [ false, %checkok228 ], [ %lt230, %and.rhs229 ], !dbg !2112
  br i1 %val232, label %if.then233, label %if.exit234, !dbg !2112

if.then233:                                       ; preds = %and.phi231
  store i64 ptrtoint (ptr @std.core.types.VALUE_OUT_OF_UNSIGNED_RANGE to i64), ptr %intval.f, align 8, !dbg !2112
  br label %after_assign, !dbg !2112

if.exit234:                                       ; preds = %and.phi231
  %136 = load i64, ptr %l, align 8, !dbg !2113
  %137 = load i32, ptr %max, align 4, !dbg !2113
  %sext235 = sext i32 %137 to i64, !dbg !2113
  %gt236 = icmp sgt i64 %136, %sext235, !dbg !2113
  br i1 %gt236, label %or.phi240, label %or.rhs237, !dbg !2113

or.rhs237:                                        ; preds = %if.exit234
  %138 = load i64, ptr %l, align 8, !dbg !2113
  %139 = load i32, ptr %min, align 4, !dbg !2113
  %sext238 = sext i32 %139 to i64, !dbg !2113
  %lt239 = icmp slt i64 %138, %sext238, !dbg !2113
  br label %or.phi240, !dbg !2113

or.phi240:                                        ; preds = %or.rhs237, %if.exit234
  %val241 = phi i1 [ true, %if.exit234 ], [ %lt239, %or.rhs237 ], !dbg !2113
  br i1 %val241, label %if.then242, label %if.exit243, !dbg !2113

if.then242:                                       ; preds = %or.phi240
  store i64 ptrtoint (ptr @std.core.types.VALUE_OUT_OF_RANGE to i64), ptr %intval.f, align 8, !dbg !2113
  br label %after_assign, !dbg !2113

if.exit243:                                       ; preds = %or.phi240
  %140 = load i64, ptr %l, align 8, !dbg !2114
  %trunc244 = trunc i64 %140 to i32, !dbg !2114
  store i32 %trunc244, ptr %blockret, align 4, !dbg !2114
  br label %expr_block.exit, !dbg !2114

next_if245:                                       ; preds = %result_block210
  br label %check_subtype246, !dbg !2115

check_subtype246:                                 ; preds = %parent_type_block248, %next_if245
  %141 = phi i64 [ %72, %next_if245 ], [ %typeid.parent250, %parent_type_block248 ], !dbg !2115
  %eq247 = icmp eq i64 ptrtoint (ptr @"$ct.int128" to i64), %141, !dbg !2115
  br i1 %eq247, label %result_block251, label %parent_type_block248, !dbg !2115

parent_type_block248:                             ; preds = %check_subtype246
  %142 = inttoptr i64 %141 to ptr, !dbg !2115
  %ptradd249 = getelementptr inbounds i8, ptr %142, i64 8, !dbg !2115
  %typeid.parent250 = load i64, ptr %ptradd249, align 8, !dbg !2115
  %143 = icmp eq i64 %typeid.parent250, 0, !dbg !2115
  br i1 %143, label %result_block251, label %check_subtype246, !dbg !2115

result_block251:                                  ; preds = %parent_type_block248, %check_subtype246
  %144 = phi i1 [ false, %parent_type_block248 ], [ true, %check_subtype246 ], !dbg !2115
  br i1 %144, label %switch.case252, label %next_if287, !dbg !2115

switch.case252:                                   ; preds = %result_block251
    #dbg_declare(ptr %i253, !2116, !DIExpression(), !2118)
  %145 = load ptr, ptr %v, align 8, !dbg !2118
  %checknull254 = icmp eq ptr %145, null, !dbg !2118
  %146 = call i1 @llvm.expect.i1(i1 %checknull254, i1 false), !dbg !2118
  br i1 %146, label %panic255, label %checkok259, !dbg !2118

checkok259:                                       ; preds = %switch.case252
  %147 = ptrtoint ptr %145 to i64, !dbg !2118
  %148 = urem i64 %147, 16, !dbg !2118
  %149 = icmp ne i64 %148, 0, !dbg !2118
  %150 = call i1 @llvm.expect.i1(i1 %149, i1 false), !dbg !2118
  br i1 %150, label %panic260, label %checkok270, !dbg !2118

checkok270:                                       ; preds = %checkok259
  %151 = load i128, ptr %145, align 16, !dbg !2118
  store i128 %151, ptr %i253, align 16, !dbg !2118
  %152 = load i8, ptr %is_mixed_signed, align 1, !dbg !2119
  %153 = trunc i8 %152 to i1, !dbg !2119
  br i1 %153, label %and.rhs271, label %and.phi273, !dbg !2119

and.rhs271:                                       ; preds = %checkok270
  %154 = load i128, ptr %i253, align 16, !dbg !2119
  %lt272 = icmp slt i128 %154, 0, !dbg !2119
  br label %and.phi273, !dbg !2119

and.phi273:                                       ; preds = %and.rhs271, %checkok270
  %val274 = phi i1 [ false, %checkok270 ], [ %lt272, %and.rhs271 ], !dbg !2119
  br i1 %val274, label %if.then275, label %if.exit276, !dbg !2119

if.then275:                                       ; preds = %and.phi273
  store i64 ptrtoint (ptr @std.core.types.VALUE_OUT_OF_UNSIGNED_RANGE to i64), ptr %intval.f, align 8, !dbg !2119
  br label %after_assign, !dbg !2119

if.exit276:                                       ; preds = %and.phi273
  %155 = load i128, ptr %i253, align 16, !dbg !2120
  %156 = load i32, ptr %max, align 4, !dbg !2120
  %sext277 = sext i32 %156 to i128, !dbg !2120
  %gt278 = icmp sgt i128 %155, %sext277, !dbg !2120
  br i1 %gt278, label %or.phi282, label %or.rhs279, !dbg !2120

or.rhs279:                                        ; preds = %if.exit276
  %157 = load i128, ptr %i253, align 16, !dbg !2120
  %158 = load i32, ptr %min, align 4, !dbg !2120
  %sext280 = sext i32 %158 to i128, !dbg !2120
  %lt281 = icmp slt i128 %157, %sext280, !dbg !2120
  br label %or.phi282, !dbg !2120

or.phi282:                                        ; preds = %or.rhs279, %if.exit276
  %val283 = phi i1 [ true, %if.exit276 ], [ %lt281, %or.rhs279 ], !dbg !2120
  br i1 %val283, label %if.then284, label %if.exit285, !dbg !2120

if.then284:                                       ; preds = %or.phi282
  store i64 ptrtoint (ptr @std.core.types.VALUE_OUT_OF_RANGE to i64), ptr %intval.f, align 8, !dbg !2120
  br label %after_assign, !dbg !2120

if.exit285:                                       ; preds = %or.phi282
  %159 = load i128, ptr %i253, align 16, !dbg !2121
  %trunc286 = trunc i128 %159 to i32, !dbg !2121
  store i32 %trunc286, ptr %blockret, align 4, !dbg !2121
  br label %expr_block.exit, !dbg !2121

next_if287:                                       ; preds = %result_block251
  br label %check_subtype288, !dbg !2122

check_subtype288:                                 ; preds = %parent_type_block290, %next_if287
  %160 = phi i64 [ %72, %next_if287 ], [ %typeid.parent292, %parent_type_block290 ], !dbg !2122
  %eq289 = icmp eq i64 ptrtoint (ptr @"$ct.char" to i64), %160, !dbg !2122
  br i1 %eq289, label %result_block293, label %parent_type_block290, !dbg !2122

parent_type_block290:                             ; preds = %check_subtype288
  %161 = inttoptr i64 %160 to ptr, !dbg !2122
  %ptradd291 = getelementptr inbounds i8, ptr %161, i64 8, !dbg !2122
  %typeid.parent292 = load i64, ptr %ptradd291, align 8, !dbg !2122
  %162 = icmp eq i64 %typeid.parent292, 0, !dbg !2122
  br i1 %162, label %result_block293, label %check_subtype288, !dbg !2122

result_block293:                                  ; preds = %parent_type_block290, %check_subtype288
  %163 = phi i1 [ false, %parent_type_block290 ], [ true, %check_subtype288 ], !dbg !2122
  br i1 %163, label %switch.case294, label %next_if307, !dbg !2122

switch.case294:                                   ; preds = %result_block293
    #dbg_declare(ptr %c295, !2123, !DIExpression(), !2125)
  %164 = load ptr, ptr %v, align 8, !dbg !2125
  %checknull296 = icmp eq ptr %164, null, !dbg !2125
  %165 = call i1 @llvm.expect.i1(i1 %checknull296, i1 false), !dbg !2125
  br i1 %165, label %panic297, label %checkok301, !dbg !2125

checkok301:                                       ; preds = %switch.case294
  %166 = load i8, ptr %164, align 1, !dbg !2125
  store i8 %166, ptr %c295, align 1, !dbg !2125
  %167 = load i8, ptr %c295, align 1, !dbg !2126
  %zext302 = zext i8 %167 to i32, !dbg !2126
  %168 = load i32, ptr %max, align 4, !dbg !2126
  %lt303 = icmp slt i32 %168, %zext302, !dbg !2126
  %check = icmp slt i32 %zext302, 0, !dbg !2126
  %siui-lt = or i1 %check, %lt303, !dbg !2126
  br i1 %siui-lt, label %if.then304, label %if.exit305, !dbg !2126

if.then304:                                       ; preds = %checkok301
  store i64 ptrtoint (ptr @std.core.types.VALUE_OUT_OF_RANGE to i64), ptr %intval.f, align 8, !dbg !2126
  br label %after_assign, !dbg !2126

if.exit305:                                       ; preds = %checkok301
  %169 = load i8, ptr %c295, align 1, !dbg !2127
  %zext306 = zext i8 %169 to i32, !dbg !2127
  store i32 %zext306, ptr %blockret, align 4, !dbg !2127
  br label %expr_block.exit, !dbg !2127

next_if307:                                       ; preds = %result_block293
  br label %check_subtype308, !dbg !2128

check_subtype308:                                 ; preds = %parent_type_block310, %next_if307
  %170 = phi i64 [ %72, %next_if307 ], [ %typeid.parent312, %parent_type_block310 ], !dbg !2128
  %eq309 = icmp eq i64 ptrtoint (ptr @"$ct.ushort" to i64), %170, !dbg !2128
  br i1 %eq309, label %result_block313, label %parent_type_block310, !dbg !2128

parent_type_block310:                             ; preds = %check_subtype308
  %171 = inttoptr i64 %170 to ptr, !dbg !2128
  %ptradd311 = getelementptr inbounds i8, ptr %171, i64 8, !dbg !2128
  %typeid.parent312 = load i64, ptr %ptradd311, align 8, !dbg !2128
  %172 = icmp eq i64 %typeid.parent312, 0, !dbg !2128
  br i1 %172, label %result_block313, label %check_subtype308, !dbg !2128

result_block313:                                  ; preds = %parent_type_block310, %check_subtype308
  %173 = phi i1 [ false, %parent_type_block310 ], [ true, %check_subtype308 ], !dbg !2128
  br i1 %173, label %switch.case314, label %next_if346, !dbg !2128

switch.case314:                                   ; preds = %result_block313
    #dbg_declare(ptr %s315, !2129, !DIExpression(), !2131)
  %174 = load ptr, ptr %v, align 8, !dbg !2131
  %checknull316 = icmp eq ptr %174, null, !dbg !2131
  %175 = call i1 @llvm.expect.i1(i1 %checknull316, i1 false), !dbg !2131
  br i1 %175, label %panic317, label %checkok321, !dbg !2131

checkok321:                                       ; preds = %switch.case314
  %176 = ptrtoint ptr %174 to i64, !dbg !2131
  %177 = urem i64 %176, 2, !dbg !2131
  %178 = icmp ne i64 %177, 0, !dbg !2131
  %179 = call i1 @llvm.expect.i1(i1 %178, i1 false), !dbg !2131
  br i1 %179, label %panic322, label %checkok332, !dbg !2131

checkok332:                                       ; preds = %checkok321
  %180 = load i16, ptr %174, align 2, !dbg !2131
  store i16 %180, ptr %s315, align 2, !dbg !2131
  %181 = load i16, ptr %s315, align 2, !dbg !2132
  %zext333 = zext i16 %181 to i32, !dbg !2132
  %182 = load i32, ptr %max, align 4, !dbg !2132
  %lt334 = icmp slt i32 %182, %zext333, !dbg !2132
  %check335 = icmp slt i32 %zext333, 0, !dbg !2132
  %siui-lt336 = or i1 %check335, %lt334, !dbg !2132
  br i1 %siui-lt336, label %or.phi341, label %or.rhs337, !dbg !2132

or.rhs337:                                        ; preds = %checkok332
  %183 = load i16, ptr %s315, align 2, !dbg !2132
  %zext338 = zext i16 %183 to i32, !dbg !2132
  %184 = load i32, ptr %min, align 4, !dbg !2132
  %gt339 = icmp sgt i32 %184, %zext338, !dbg !2132
  %check340 = icmp sge i32 %zext338, 0, !dbg !2132
  %siui-gt = and i1 %check340, %gt339, !dbg !2132
  br label %or.phi341, !dbg !2132

or.phi341:                                        ; preds = %or.rhs337, %checkok332
  %val342 = phi i1 [ true, %checkok332 ], [ %siui-gt, %or.rhs337 ], !dbg !2132
  br i1 %val342, label %if.then343, label %if.exit344, !dbg !2132

if.then343:                                       ; preds = %or.phi341
  store i64 ptrtoint (ptr @std.core.types.VALUE_OUT_OF_RANGE to i64), ptr %intval.f, align 8, !dbg !2132
  br label %after_assign, !dbg !2132

if.exit344:                                       ; preds = %or.phi341
  %185 = load i16, ptr %s315, align 2, !dbg !2133
  %zext345 = zext i16 %185 to i32, !dbg !2133
  store i32 %zext345, ptr %blockret, align 4, !dbg !2133
  br label %expr_block.exit, !dbg !2133

next_if346:                                       ; preds = %result_block313
  br label %check_subtype347, !dbg !2134

check_subtype347:                                 ; preds = %parent_type_block349, %next_if346
  %186 = phi i64 [ %72, %next_if346 ], [ %typeid.parent351, %parent_type_block349 ], !dbg !2134
  %eq348 = icmp eq i64 ptrtoint (ptr @"$ct.uint" to i64), %186, !dbg !2134
  br i1 %eq348, label %result_block352, label %parent_type_block349, !dbg !2134

parent_type_block349:                             ; preds = %check_subtype347
  %187 = inttoptr i64 %186 to ptr, !dbg !2134
  %ptradd350 = getelementptr inbounds i8, ptr %187, i64 8, !dbg !2134
  %typeid.parent351 = load i64, ptr %ptradd350, align 8, !dbg !2134
  %188 = icmp eq i64 %typeid.parent351, 0, !dbg !2134
  br i1 %188, label %result_block352, label %check_subtype347, !dbg !2134

result_block352:                                  ; preds = %parent_type_block349, %check_subtype347
  %189 = phi i1 [ false, %parent_type_block349 ], [ true, %check_subtype347 ], !dbg !2134
  br i1 %189, label %switch.case353, label %next_if383, !dbg !2134

switch.case353:                                   ; preds = %result_block352
    #dbg_declare(ptr %i354, !2135, !DIExpression(), !2137)
  %190 = load ptr, ptr %v, align 8, !dbg !2137
  %checknull355 = icmp eq ptr %190, null, !dbg !2137
  %191 = call i1 @llvm.expect.i1(i1 %checknull355, i1 false), !dbg !2137
  br i1 %191, label %panic356, label %checkok360, !dbg !2137

checkok360:                                       ; preds = %switch.case353
  %192 = ptrtoint ptr %190 to i64, !dbg !2137
  %193 = urem i64 %192, 4, !dbg !2137
  %194 = icmp ne i64 %193, 0, !dbg !2137
  %195 = call i1 @llvm.expect.i1(i1 %194, i1 false), !dbg !2137
  br i1 %195, label %panic361, label %checkok371, !dbg !2137

checkok371:                                       ; preds = %checkok360
  %196 = load i32, ptr %190, align 4, !dbg !2137
  store i32 %196, ptr %i354, align 4, !dbg !2137
  %197 = load i32, ptr %i354, align 4, !dbg !2138
  %198 = load i32, ptr %max, align 4, !dbg !2138
  %lt372 = icmp slt i32 %198, %197, !dbg !2138
  %check373 = icmp slt i32 %197, 0, !dbg !2138
  %siui-lt374 = or i1 %check373, %lt372, !dbg !2138
  br i1 %siui-lt374, label %or.phi379, label %or.rhs375, !dbg !2138

or.rhs375:                                        ; preds = %checkok371
  %199 = load i32, ptr %i354, align 4, !dbg !2138
  %200 = load i32, ptr %min, align 4, !dbg !2138
  %gt376 = icmp sgt i32 %200, %199, !dbg !2138
  %check377 = icmp sge i32 %199, 0, !dbg !2138
  %siui-gt378 = and i1 %check377, %gt376, !dbg !2138
  br label %or.phi379, !dbg !2138

or.phi379:                                        ; preds = %or.rhs375, %checkok371
  %val380 = phi i1 [ true, %checkok371 ], [ %siui-gt378, %or.rhs375 ], !dbg !2138
  br i1 %val380, label %if.then381, label %if.exit382, !dbg !2138

if.then381:                                       ; preds = %or.phi379
  store i64 ptrtoint (ptr @std.core.types.VALUE_OUT_OF_RANGE to i64), ptr %intval.f, align 8, !dbg !2138
  br label %after_assign, !dbg !2138

if.exit382:                                       ; preds = %or.phi379
  %201 = load i32, ptr %i354, align 4, !dbg !2139
  store i32 %201, ptr %blockret, align 4, !dbg !2139
  br label %expr_block.exit, !dbg !2139

next_if383:                                       ; preds = %result_block352
  br label %check_subtype384, !dbg !2140

check_subtype384:                                 ; preds = %parent_type_block386, %next_if383
  %202 = phi i64 [ %72, %next_if383 ], [ %typeid.parent388, %parent_type_block386 ], !dbg !2140
  %eq385 = icmp eq i64 ptrtoint (ptr @"$ct.ulong" to i64), %202, !dbg !2140
  br i1 %eq385, label %result_block389, label %parent_type_block386, !dbg !2140

parent_type_block386:                             ; preds = %check_subtype384
  %203 = inttoptr i64 %202 to ptr, !dbg !2140
  %ptradd387 = getelementptr inbounds i8, ptr %203, i64 8, !dbg !2140
  %typeid.parent388 = load i64, ptr %ptradd387, align 8, !dbg !2140
  %204 = icmp eq i64 %typeid.parent388, 0, !dbg !2140
  br i1 %204, label %result_block389, label %check_subtype384, !dbg !2140

result_block389:                                  ; preds = %parent_type_block386, %check_subtype384
  %205 = phi i1 [ false, %parent_type_block386 ], [ true, %check_subtype384 ], !dbg !2140
  br i1 %205, label %switch.case390, label %next_if423, !dbg !2140

switch.case390:                                   ; preds = %result_block389
    #dbg_declare(ptr %l391, !2141, !DIExpression(), !2143)
  %206 = load ptr, ptr %v, align 8, !dbg !2143
  %checknull392 = icmp eq ptr %206, null, !dbg !2143
  %207 = call i1 @llvm.expect.i1(i1 %checknull392, i1 false), !dbg !2143
  br i1 %207, label %panic393, label %checkok397, !dbg !2143

checkok397:                                       ; preds = %switch.case390
  %208 = ptrtoint ptr %206 to i64, !dbg !2143
  %209 = urem i64 %208, 8, !dbg !2143
  %210 = icmp ne i64 %209, 0, !dbg !2143
  %211 = call i1 @llvm.expect.i1(i1 %210, i1 false), !dbg !2143
  br i1 %211, label %panic398, label %checkok408, !dbg !2143

checkok408:                                       ; preds = %checkok397
  %212 = load i64, ptr %206, align 8, !dbg !2143
  store i64 %212, ptr %l391, align 8, !dbg !2143
  %213 = load i64, ptr %l391, align 8, !dbg !2144
  %214 = load i32, ptr %max, align 4, !dbg !2144
  %sext409 = sext i32 %214 to i64, !dbg !2144
  %lt410 = icmp slt i64 %sext409, %213, !dbg !2144
  %check411 = icmp slt i64 %213, 0, !dbg !2144
  %siui-lt412 = or i1 %check411, %lt410, !dbg !2144
  br i1 %siui-lt412, label %or.phi418, label %or.rhs413, !dbg !2144

or.rhs413:                                        ; preds = %checkok408
  %215 = load i64, ptr %l391, align 8, !dbg !2144
  %216 = load i32, ptr %min, align 4, !dbg !2144
  %sext414 = sext i32 %216 to i64, !dbg !2144
  %gt415 = icmp sgt i64 %sext414, %215, !dbg !2144
  %check416 = icmp sge i64 %215, 0, !dbg !2144
  %siui-gt417 = and i1 %check416, %gt415, !dbg !2144
  br label %or.phi418, !dbg !2144

or.phi418:                                        ; preds = %or.rhs413, %checkok408
  %val419 = phi i1 [ true, %checkok408 ], [ %siui-gt417, %or.rhs413 ], !dbg !2144
  br i1 %val419, label %if.then420, label %if.exit421, !dbg !2144

if.then420:                                       ; preds = %or.phi418
  store i64 ptrtoint (ptr @std.core.types.VALUE_OUT_OF_RANGE to i64), ptr %intval.f, align 8, !dbg !2144
  br label %after_assign, !dbg !2144

if.exit421:                                       ; preds = %or.phi418
  %217 = load i64, ptr %l391, align 8, !dbg !2145
  %trunc422 = trunc i64 %217 to i32, !dbg !2145
  store i32 %trunc422, ptr %blockret, align 4, !dbg !2145
  br label %expr_block.exit, !dbg !2145

next_if423:                                       ; preds = %result_block389
  br label %check_subtype424, !dbg !2146

check_subtype424:                                 ; preds = %parent_type_block426, %next_if423
  %218 = phi i64 [ %72, %next_if423 ], [ %typeid.parent428, %parent_type_block426 ], !dbg !2146
  %eq425 = icmp eq i64 ptrtoint (ptr @"$ct.uint128" to i64), %218, !dbg !2146
  br i1 %eq425, label %result_block429, label %parent_type_block426, !dbg !2146

parent_type_block426:                             ; preds = %check_subtype424
  %219 = inttoptr i64 %218 to ptr, !dbg !2146
  %ptradd427 = getelementptr inbounds i8, ptr %219, i64 8, !dbg !2146
  %typeid.parent428 = load i64, ptr %ptradd427, align 8, !dbg !2146
  %220 = icmp eq i64 %typeid.parent428, 0, !dbg !2146
  br i1 %220, label %result_block429, label %check_subtype424, !dbg !2146

result_block429:                                  ; preds = %parent_type_block426, %check_subtype424
  %221 = phi i1 [ false, %parent_type_block426 ], [ true, %check_subtype424 ], !dbg !2146
  br i1 %221, label %switch.case430, label %next_if463, !dbg !2146

switch.case430:                                   ; preds = %result_block429
    #dbg_declare(ptr %i431, !2147, !DIExpression(), !2149)
  %222 = load ptr, ptr %v, align 8, !dbg !2149
  %checknull432 = icmp eq ptr %222, null, !dbg !2149
  %223 = call i1 @llvm.expect.i1(i1 %checknull432, i1 false), !dbg !2149
  br i1 %223, label %panic433, label %checkok437, !dbg !2149

checkok437:                                       ; preds = %switch.case430
  %224 = ptrtoint ptr %222 to i64, !dbg !2149
  %225 = urem i64 %224, 16, !dbg !2149
  %226 = icmp ne i64 %225, 0, !dbg !2149
  %227 = call i1 @llvm.expect.i1(i1 %226, i1 false), !dbg !2149
  br i1 %227, label %panic438, label %checkok448, !dbg !2149

checkok448:                                       ; preds = %checkok437
  %228 = load i128, ptr %222, align 16, !dbg !2149
  store i128 %228, ptr %i431, align 16, !dbg !2149
  %229 = load i128, ptr %i431, align 16, !dbg !2150
  %230 = load i32, ptr %max, align 4, !dbg !2150
  %sext449 = sext i32 %230 to i128, !dbg !2150
  %lt450 = icmp slt i128 %sext449, %229, !dbg !2150
  %check451 = icmp slt i128 %229, 0, !dbg !2150
  %siui-lt452 = or i1 %check451, %lt450, !dbg !2150
  br i1 %siui-lt452, label %or.phi458, label %or.rhs453, !dbg !2150

or.rhs453:                                        ; preds = %checkok448
  %231 = load i128, ptr %i431, align 16, !dbg !2150
  %232 = load i32, ptr %min, align 4, !dbg !2150
  %sext454 = sext i32 %232 to i128, !dbg !2150
  %gt455 = icmp sgt i128 %sext454, %231, !dbg !2150
  %check456 = icmp sge i128 %231, 0, !dbg !2150
  %siui-gt457 = and i1 %check456, %gt455, !dbg !2150
  br label %or.phi458, !dbg !2150

or.phi458:                                        ; preds = %or.rhs453, %checkok448
  %val459 = phi i1 [ true, %checkok448 ], [ %siui-gt457, %or.rhs453 ], !dbg !2150
  br i1 %val459, label %if.then460, label %if.exit461, !dbg !2150

if.then460:                                       ; preds = %or.phi458
  store i64 ptrtoint (ptr @std.core.types.VALUE_OUT_OF_RANGE to i64), ptr %intval.f, align 8, !dbg !2150
  br label %after_assign, !dbg !2150

if.exit461:                                       ; preds = %or.phi458
  %233 = load i128, ptr %i431, align 16, !dbg !2151
  %trunc462 = trunc i128 %233 to i32, !dbg !2151
  store i32 %trunc462, ptr %blockret, align 4, !dbg !2151
  br label %expr_block.exit, !dbg !2151

next_if463:                                       ; preds = %result_block429
  br label %switch.default, !dbg !2151

switch.default:                                   ; preds = %next_if463
  store %"char[]" { ptr @.str.139, i64 30 }, ptr %string, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg464, ptr align 8 %string, i32 16, i1 false)
  store %"char[]" { ptr @.str.140, i64 20 }, ptr %indirectarg465, align 8
  store %"char[]" { ptr @.str.141, i64 25 }, ptr %indirectarg466, align 8
  store %"any[]" zeroinitializer, ptr %indirectarg467, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg464, ptr align 8 %indirectarg465, ptr align 8 %indirectarg466, i32 690, ptr align 8 %indirectarg467), !dbg !2152
  unreachable, !dbg !2152

expr_block.exit:                                  ; preds = %if.exit461, %if.exit421, %if.exit382, %if.exit344, %if.exit305, %if.exit285, %if.exit243, %if.exit203, %if.exit164, %if.exit126
  %234 = load i32, ptr %blockret, align 4, !dbg !2152
  store i32 %234, ptr %intval, align 4, !dbg !2152
  store i64 0, ptr %intval.f, align 8, !dbg !2152
  br label %after_assign, !dbg !2152

after_assign:                                     ; preds = %expr_block.exit, %if.then460, %if.then420, %if.then381, %if.then343, %if.then304, %if.then284, %if.then275, %if.then242, %if.then233, %if.then202, %if.then195, %if.then163, %if.then157, %if.then125
  %optval = load i64, ptr %intval.f, align 8, !dbg !2156
  %not_err = icmp eq i64 %optval, 0, !dbg !2156
  %235 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !2156
  br i1 %235, label %after_check, label %else_block, !dbg !2156

after_check:                                      ; preds = %after_assign
  %236 = load i32, ptr %intval, align 4, !dbg !2156
  br label %phi_block, !dbg !2156

else_block:                                       ; preds = %after_assign
  store i64 ptrtoint (ptr @std.io.BAD_FORMAT to i64), ptr %reterr468, align 8, !dbg !2156
  br label %err_retblock, !dbg !2156

phi_block:                                        ; preds = %after_check
  store i32 %236, ptr %0, align 4, !dbg !2156
  ret i64 0, !dbg !2156

err_retblock:                                     ; preds = %else_block
  %237 = load i64, ptr %reterr468, align 8, !dbg !2156
  ret i64 %237, !dbg !2156

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.136, i64 50 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.137, i64 25 }, ptr %indirectarg2, align 8
  %238 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %238(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 682) #5, !dbg !2057
  unreachable, !dbg !2057

panic3:                                           ; preds = %checkok
  store i64 8, ptr %taddr, align 8
  %239 = insertvalue %any undef, ptr %taddr, 0
  %240 = insertvalue %any %239, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %11, ptr %taddr4, align 8
  %241 = insertvalue %any undef, ptr %taddr4, 0
  %242 = insertvalue %any %241, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg6, align 8
  store %"char[]" { ptr @.func.137, i64 25 }, ptr %indirectarg7, align 8
  store %any %240, ptr %varargslots, align 16
  %ptradd = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %242, ptr %ptradd, align 16
  %243 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %243, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg8, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, ptr align 8 %indirectarg7, i32 682, ptr align 8 %indirectarg8) #5, !dbg !2057
  unreachable, !dbg !2057

panic13:                                          ; preds = %checkok9
  store i64 256, ptr %taddr14, align 8
  %244 = insertvalue %any undef, ptr %taddr14, 0
  %245 = insertvalue %any %244, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %zext, ptr %taddr15, align 8
  %246 = insertvalue %any undef, ptr %taddr15, 0
  %247 = insertvalue %any %246, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.71, i64 59 }, ptr %indirectarg16, align 8
  store %"char[]" { ptr @.file.133, i64 8 }, ptr %indirectarg17, align 8
  store %"char[]" { ptr @.func.137, i64 25 }, ptr %indirectarg18, align 8
  store %any %245, ptr %varargslots19, align 16
  %ptradd20 = getelementptr inbounds i8, ptr %varargslots19, i64 16
  store %any %247, ptr %ptradd20, align 16
  %248 = insertvalue %"any[]" undef, ptr %varargslots19, 0
  %"$$temp21" = insertvalue %"any[]" %248, i64 2, 1
  store %"any[]" %"$$temp21", ptr %indirectarg22, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg16, ptr align 8 %indirectarg17, ptr align 8 %indirectarg18, i32 9, ptr align 8 %indirectarg22) #5, !dbg !2058
  unreachable, !dbg !2058

panic28:                                          ; preds = %if.exit26
  store %"char[]" { ptr @.panic_msg.136, i64 50 }, ptr %indirectarg29, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg30, align 8
  store %"char[]" { ptr @.func.137, i64 25 }, ptr %indirectarg31, align 8
  %249 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %249(ptr align 8 %indirectarg29, ptr align 8 %indirectarg30, ptr align 8 %indirectarg31, i32 685) #5, !dbg !2065
  unreachable, !dbg !2065

panic33:                                          ; preds = %checkok32
  store i64 8, ptr %taddr34, align 8
  %250 = insertvalue %any undef, ptr %taddr34, 0
  %251 = insertvalue %any %250, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %31, ptr %taddr35, align 8
  %252 = insertvalue %any undef, ptr %taddr35, 0
  %253 = insertvalue %any %252, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg36, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg37, align 8
  store %"char[]" { ptr @.func.137, i64 25 }, ptr %indirectarg38, align 8
  store %any %251, ptr %varargslots39, align 16
  %ptradd40 = getelementptr inbounds i8, ptr %varargslots39, i64 16
  store %any %253, ptr %ptradd40, align 16
  %254 = insertvalue %"any[]" undef, ptr %varargslots39, 0
  %"$$temp41" = insertvalue %"any[]" %254, i64 2, 1
  store %"any[]" %"$$temp41", ptr %indirectarg42, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg36, ptr align 8 %indirectarg37, ptr align 8 %indirectarg38, i32 685, ptr align 8 %indirectarg42) #5, !dbg !2065
  unreachable, !dbg !2065

panic48:                                          ; preds = %if.exit46
  store %"char[]" { ptr @.panic_msg.138, i64 55 }, ptr %indirectarg49, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg50, align 8
  store %"char[]" { ptr @.func.137, i64 25 }, ptr %indirectarg51, align 8
  %255 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %255(ptr align 8 %indirectarg49, ptr align 8 %indirectarg50, ptr align 8 %indirectarg51, i32 687) #5, !dbg !2067
  unreachable, !dbg !2067

panic53:                                          ; preds = %checkok52
  store i64 8, ptr %taddr54, align 8
  %256 = insertvalue %any undef, ptr %taddr54, 0
  %257 = insertvalue %any %256, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %40, ptr %taddr55, align 8
  %258 = insertvalue %any undef, ptr %taddr55, 0
  %259 = insertvalue %any %258, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg56, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg57, align 8
  store %"char[]" { ptr @.func.137, i64 25 }, ptr %indirectarg58, align 8
  store %any %257, ptr %varargslots59, align 16
  %ptradd60 = getelementptr inbounds i8, ptr %varargslots59, i64 16
  store %any %259, ptr %ptradd60, align 16
  %260 = insertvalue %"any[]" undef, ptr %varargslots59, 0
  %"$$temp61" = insertvalue %"any[]" %260, i64 2, 1
  store %"any[]" %"$$temp61", ptr %indirectarg62, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg56, ptr align 8 %indirectarg57, ptr align 8 %indirectarg58, i32 687, ptr align 8 %indirectarg62) #5, !dbg !2067
  unreachable, !dbg !2067

panic68:                                          ; preds = %if.exit66
  store %"char[]" { ptr @.panic_msg.138, i64 55 }, ptr %indirectarg69, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg70, align 8
  store %"char[]" { ptr @.func.137, i64 25 }, ptr %indirectarg71, align 8
  %261 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %261(ptr align 8 %indirectarg69, ptr align 8 %indirectarg70, ptr align 8 %indirectarg71, i32 688) #5, !dbg !2069
  unreachable, !dbg !2069

panic73:                                          ; preds = %checkok72
  store i64 8, ptr %taddr74, align 8
  %262 = insertvalue %any undef, ptr %taddr74, 0
  %263 = insertvalue %any %262, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %49, ptr %taddr75, align 8
  %264 = insertvalue %any undef, ptr %taddr75, 0
  %265 = insertvalue %any %264, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg76, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg77, align 8
  store %"char[]" { ptr @.func.137, i64 25 }, ptr %indirectarg78, align 8
  store %any %263, ptr %varargslots79, align 16
  %ptradd80 = getelementptr inbounds i8, ptr %varargslots79, i64 16
  store %any %265, ptr %ptradd80, align 16
  %266 = insertvalue %"any[]" undef, ptr %varargslots79, 0
  %"$$temp81" = insertvalue %"any[]" %266, i64 2, 1
  store %"any[]" %"$$temp81", ptr %indirectarg82, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg76, ptr align 8 %indirectarg77, ptr align 8 %indirectarg78, i32 688, ptr align 8 %indirectarg82) #5, !dbg !2069
  unreachable, !dbg !2069

panic86:                                          ; preds = %checkok83
  store i64 8, ptr %taddr87, align 8
  %267 = insertvalue %any undef, ptr %taddr87, 0
  %268 = insertvalue %any %267, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %54, ptr %taddr88, align 8
  %269 = insertvalue %any undef, ptr %taddr88, 0
  %270 = insertvalue %any %269, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg89, align 8
  store %"char[]" { ptr @.file.100, i64 20 }, ptr %indirectarg90, align 8
  store %"char[]" { ptr @.func.137, i64 25 }, ptr %indirectarg91, align 8
  store %any %268, ptr %varargslots92, align 16
  %ptradd93 = getelementptr inbounds i8, ptr %varargslots92, i64 16
  store %any %270, ptr %ptradd93, align 16
  %271 = insertvalue %"any[]" undef, ptr %varargslots92, 0
  %"$$temp94" = insertvalue %"any[]" %271, i64 2, 1
  store %"any[]" %"$$temp94", ptr %indirectarg95, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg89, ptr align 8 %indirectarg90, ptr align 8 %indirectarg91, i32 688, ptr align 8 %indirectarg95) #5, !dbg !2069
  unreachable, !dbg !2069

panic119:                                         ; preds = %switch.case
  store %"char[]" { ptr @.panic_msg.56, i64 53 }, ptr %indirectarg120, align 8
  store %"char[]" { ptr @.file.54, i64 8 }, ptr %indirectarg121, align 8
  store %"char[]" { ptr @.func.137, i64 25 }, ptr %indirectarg122, align 8
  %272 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %272(ptr align 8 %indirectarg120, ptr align 8 %indirectarg121, ptr align 8 %indirectarg122, i32 31) #5, !dbg !2091
  unreachable, !dbg !2091

panic136:                                         ; preds = %switch.case134
  store %"char[]" { ptr @.panic_msg.57, i64 54 }, ptr %indirectarg137, align 8
  store %"char[]" { ptr @.file.54, i64 8 }, ptr %indirectarg138, align 8
  store %"char[]" { ptr @.func.137, i64 25 }, ptr %indirectarg139, align 8
  %273 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %273(ptr align 8 %indirectarg137, ptr align 8 %indirectarg138, ptr align 8 %indirectarg139, i32 35) #5, !dbg !2097
  unreachable, !dbg !2097

panic141:                                         ; preds = %checkok140
  store i64 2, ptr %taddr142, align 8
  %274 = insertvalue %any undef, ptr %taddr142, 0
  %275 = insertvalue %any %274, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %91, ptr %taddr143, align 8
  %276 = insertvalue %any undef, ptr %taddr143, 0
  %277 = insertvalue %any %276, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg144, align 8
  store %"char[]" { ptr @.file.54, i64 8 }, ptr %indirectarg145, align 8
  store %"char[]" { ptr @.func.137, i64 25 }, ptr %indirectarg146, align 8
  store %any %275, ptr %varargslots147, align 16
  %ptradd148 = getelementptr inbounds i8, ptr %varargslots147, i64 16
  store %any %277, ptr %ptradd148, align 16
  %278 = insertvalue %"any[]" undef, ptr %varargslots147, 0
  %"$$temp149" = insertvalue %"any[]" %278, i64 2, 1
  store %"any[]" %"$$temp149", ptr %indirectarg150, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg144, ptr align 8 %indirectarg145, ptr align 8 %indirectarg146, i32 35, ptr align 8 %indirectarg150) #5, !dbg !2097
  unreachable, !dbg !2097

panic175:                                         ; preds = %switch.case173
  store %"char[]" { ptr @.panic_msg.58, i64 52 }, ptr %indirectarg176, align 8
  store %"char[]" { ptr @.file.54, i64 8 }, ptr %indirectarg177, align 8
  store %"char[]" { ptr @.func.137, i64 25 }, ptr %indirectarg178, align 8
  %279 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %279(ptr align 8 %indirectarg176, ptr align 8 %indirectarg177, ptr align 8 %indirectarg178, i32 40) #5, !dbg !2104
  unreachable, !dbg !2104

panic180:                                         ; preds = %checkok179
  store i64 4, ptr %taddr181, align 8
  %280 = insertvalue %any undef, ptr %taddr181, 0
  %281 = insertvalue %any %280, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %110, ptr %taddr182, align 8
  %282 = insertvalue %any undef, ptr %taddr182, 0
  %283 = insertvalue %any %282, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg183, align 8
  store %"char[]" { ptr @.file.54, i64 8 }, ptr %indirectarg184, align 8
  store %"char[]" { ptr @.func.137, i64 25 }, ptr %indirectarg185, align 8
  store %any %281, ptr %varargslots186, align 16
  %ptradd187 = getelementptr inbounds i8, ptr %varargslots186, i64 16
  store %any %283, ptr %ptradd187, align 16
  %284 = insertvalue %"any[]" undef, ptr %varargslots186, 0
  %"$$temp188" = insertvalue %"any[]" %284, i64 2, 1
  store %"any[]" %"$$temp188", ptr %indirectarg189, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg183, ptr align 8 %indirectarg184, ptr align 8 %indirectarg185, i32 40, ptr align 8 %indirectarg189) #5, !dbg !2104
  unreachable, !dbg !2104

panic213:                                         ; preds = %switch.case211
  store %"char[]" { ptr @.panic_msg.59, i64 53 }, ptr %indirectarg214, align 8
  store %"char[]" { ptr @.file.54, i64 8 }, ptr %indirectarg215, align 8
  store %"char[]" { ptr @.func.137, i64 25 }, ptr %indirectarg216, align 8
  %285 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %285(ptr align 8 %indirectarg214, ptr align 8 %indirectarg215, ptr align 8 %indirectarg216, i32 45) #5, !dbg !2111
  unreachable, !dbg !2111

panic218:                                         ; preds = %checkok217
  store i64 8, ptr %taddr219, align 8
  %286 = insertvalue %any undef, ptr %taddr219, 0
  %287 = insertvalue %any %286, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %129, ptr %taddr220, align 8
  %288 = insertvalue %any undef, ptr %taddr220, 0
  %289 = insertvalue %any %288, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg221, align 8
  store %"char[]" { ptr @.file.54, i64 8 }, ptr %indirectarg222, align 8
  store %"char[]" { ptr @.func.137, i64 25 }, ptr %indirectarg223, align 8
  store %any %287, ptr %varargslots224, align 16
  %ptradd225 = getelementptr inbounds i8, ptr %varargslots224, i64 16
  store %any %289, ptr %ptradd225, align 16
  %290 = insertvalue %"any[]" undef, ptr %varargslots224, 0
  %"$$temp226" = insertvalue %"any[]" %290, i64 2, 1
  store %"any[]" %"$$temp226", ptr %indirectarg227, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg221, ptr align 8 %indirectarg222, ptr align 8 %indirectarg223, i32 45, ptr align 8 %indirectarg227) #5, !dbg !2111
  unreachable, !dbg !2111

panic255:                                         ; preds = %switch.case252
  store %"char[]" { ptr @.panic_msg.60, i64 55 }, ptr %indirectarg256, align 8
  store %"char[]" { ptr @.file.54, i64 8 }, ptr %indirectarg257, align 8
  store %"char[]" { ptr @.func.137, i64 25 }, ptr %indirectarg258, align 8
  %291 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %291(ptr align 8 %indirectarg256, ptr align 8 %indirectarg257, ptr align 8 %indirectarg258, i32 50) #5, !dbg !2118
  unreachable, !dbg !2118

panic260:                                         ; preds = %checkok259
  store i64 16, ptr %taddr261, align 8
  %292 = insertvalue %any undef, ptr %taddr261, 0
  %293 = insertvalue %any %292, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %148, ptr %taddr262, align 8
  %294 = insertvalue %any undef, ptr %taddr262, 0
  %295 = insertvalue %any %294, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg263, align 8
  store %"char[]" { ptr @.file.54, i64 8 }, ptr %indirectarg264, align 8
  store %"char[]" { ptr @.func.137, i64 25 }, ptr %indirectarg265, align 8
  store %any %293, ptr %varargslots266, align 16
  %ptradd267 = getelementptr inbounds i8, ptr %varargslots266, i64 16
  store %any %295, ptr %ptradd267, align 16
  %296 = insertvalue %"any[]" undef, ptr %varargslots266, 0
  %"$$temp268" = insertvalue %"any[]" %296, i64 2, 1
  store %"any[]" %"$$temp268", ptr %indirectarg269, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg263, ptr align 8 %indirectarg264, ptr align 8 %indirectarg265, i32 50, ptr align 8 %indirectarg269) #5, !dbg !2118
  unreachable, !dbg !2118

panic297:                                         ; preds = %switch.case294
  store %"char[]" { ptr @.panic_msg.56, i64 53 }, ptr %indirectarg298, align 8
  store %"char[]" { ptr @.file.54, i64 8 }, ptr %indirectarg299, align 8
  store %"char[]" { ptr @.func.137, i64 25 }, ptr %indirectarg300, align 8
  %297 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %297(ptr align 8 %indirectarg298, ptr align 8 %indirectarg299, ptr align 8 %indirectarg300, i32 55) #5, !dbg !2125
  unreachable, !dbg !2125

panic317:                                         ; preds = %switch.case314
  store %"char[]" { ptr @.panic_msg.61, i64 55 }, ptr %indirectarg318, align 8
  store %"char[]" { ptr @.file.54, i64 8 }, ptr %indirectarg319, align 8
  store %"char[]" { ptr @.func.137, i64 25 }, ptr %indirectarg320, align 8
  %298 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %298(ptr align 8 %indirectarg318, ptr align 8 %indirectarg319, ptr align 8 %indirectarg320, i32 59) #5, !dbg !2131
  unreachable, !dbg !2131

panic322:                                         ; preds = %checkok321
  store i64 2, ptr %taddr323, align 8
  %299 = insertvalue %any undef, ptr %taddr323, 0
  %300 = insertvalue %any %299, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %177, ptr %taddr324, align 8
  %301 = insertvalue %any undef, ptr %taddr324, 0
  %302 = insertvalue %any %301, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg325, align 8
  store %"char[]" { ptr @.file.54, i64 8 }, ptr %indirectarg326, align 8
  store %"char[]" { ptr @.func.137, i64 25 }, ptr %indirectarg327, align 8
  store %any %300, ptr %varargslots328, align 16
  %ptradd329 = getelementptr inbounds i8, ptr %varargslots328, i64 16
  store %any %302, ptr %ptradd329, align 16
  %303 = insertvalue %"any[]" undef, ptr %varargslots328, 0
  %"$$temp330" = insertvalue %"any[]" %303, i64 2, 1
  store %"any[]" %"$$temp330", ptr %indirectarg331, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg325, ptr align 8 %indirectarg326, ptr align 8 %indirectarg327, i32 59, ptr align 8 %indirectarg331) #5, !dbg !2131
  unreachable, !dbg !2131

panic356:                                         ; preds = %switch.case353
  store %"char[]" { ptr @.panic_msg.62, i64 53 }, ptr %indirectarg357, align 8
  store %"char[]" { ptr @.file.54, i64 8 }, ptr %indirectarg358, align 8
  store %"char[]" { ptr @.func.137, i64 25 }, ptr %indirectarg359, align 8
  %304 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %304(ptr align 8 %indirectarg357, ptr align 8 %indirectarg358, ptr align 8 %indirectarg359, i32 63) #5, !dbg !2137
  unreachable, !dbg !2137

panic361:                                         ; preds = %checkok360
  store i64 4, ptr %taddr362, align 8
  %305 = insertvalue %any undef, ptr %taddr362, 0
  %306 = insertvalue %any %305, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %193, ptr %taddr363, align 8
  %307 = insertvalue %any undef, ptr %taddr363, 0
  %308 = insertvalue %any %307, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg364, align 8
  store %"char[]" { ptr @.file.54, i64 8 }, ptr %indirectarg365, align 8
  store %"char[]" { ptr @.func.137, i64 25 }, ptr %indirectarg366, align 8
  store %any %306, ptr %varargslots367, align 16
  %ptradd368 = getelementptr inbounds i8, ptr %varargslots367, i64 16
  store %any %308, ptr %ptradd368, align 16
  %309 = insertvalue %"any[]" undef, ptr %varargslots367, 0
  %"$$temp369" = insertvalue %"any[]" %309, i64 2, 1
  store %"any[]" %"$$temp369", ptr %indirectarg370, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg364, ptr align 8 %indirectarg365, ptr align 8 %indirectarg366, i32 63, ptr align 8 %indirectarg370) #5, !dbg !2137
  unreachable, !dbg !2137

panic393:                                         ; preds = %switch.case390
  store %"char[]" { ptr @.panic_msg.63, i64 54 }, ptr %indirectarg394, align 8
  store %"char[]" { ptr @.file.54, i64 8 }, ptr %indirectarg395, align 8
  store %"char[]" { ptr @.func.137, i64 25 }, ptr %indirectarg396, align 8
  %310 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %310(ptr align 8 %indirectarg394, ptr align 8 %indirectarg395, ptr align 8 %indirectarg396, i32 67) #5, !dbg !2143
  unreachable, !dbg !2143

panic398:                                         ; preds = %checkok397
  store i64 8, ptr %taddr399, align 8
  %311 = insertvalue %any undef, ptr %taddr399, 0
  %312 = insertvalue %any %311, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %209, ptr %taddr400, align 8
  %313 = insertvalue %any undef, ptr %taddr400, 0
  %314 = insertvalue %any %313, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg401, align 8
  store %"char[]" { ptr @.file.54, i64 8 }, ptr %indirectarg402, align 8
  store %"char[]" { ptr @.func.137, i64 25 }, ptr %indirectarg403, align 8
  store %any %312, ptr %varargslots404, align 16
  %ptradd405 = getelementptr inbounds i8, ptr %varargslots404, i64 16
  store %any %314, ptr %ptradd405, align 16
  %315 = insertvalue %"any[]" undef, ptr %varargslots404, 0
  %"$$temp406" = insertvalue %"any[]" %315, i64 2, 1
  store %"any[]" %"$$temp406", ptr %indirectarg407, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg401, ptr align 8 %indirectarg402, ptr align 8 %indirectarg403, i32 67, ptr align 8 %indirectarg407) #5, !dbg !2143
  unreachable, !dbg !2143

panic433:                                         ; preds = %switch.case430
  store %"char[]" { ptr @.panic_msg.64, i64 56 }, ptr %indirectarg434, align 8
  store %"char[]" { ptr @.file.54, i64 8 }, ptr %indirectarg435, align 8
  store %"char[]" { ptr @.func.137, i64 25 }, ptr %indirectarg436, align 8
  %316 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %316(ptr align 8 %indirectarg434, ptr align 8 %indirectarg435, ptr align 8 %indirectarg436, i32 71) #5, !dbg !2149
  unreachable, !dbg !2149

panic438:                                         ; preds = %checkok437
  store i64 16, ptr %taddr439, align 8
  %317 = insertvalue %any undef, ptr %taddr439, 0
  %318 = insertvalue %any %317, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %225, ptr %taddr440, align 8
  %319 = insertvalue %any undef, ptr %taddr440, 0
  %320 = insertvalue %any %319, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg441, align 8
  store %"char[]" { ptr @.file.54, i64 8 }, ptr %indirectarg442, align 8
  store %"char[]" { ptr @.func.137, i64 25 }, ptr %indirectarg443, align 8
  store %any %318, ptr %varargslots444, align 16
  %ptradd445 = getelementptr inbounds i8, ptr %varargslots444, i64 16
  store %any %320, ptr %ptradd445, align 16
  %321 = insertvalue %"any[]" undef, ptr %varargslots444, 0
  %"$$temp446" = insertvalue %"any[]" %321, i64 2, 1
  store %"any[]" %"$$temp446", ptr %indirectarg447, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg441, ptr align 8 %indirectarg442, ptr align 8 %indirectarg443, i32 71, ptr align 8 %indirectarg447) #5, !dbg !2149
  unreachable, !dbg !2149
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.fprintf(ptr %0, ptr align 8 %1, ptr align 8 %2, ptr align 8 %3) #0 comdat !dbg !2157 {
entry:
  %formatter = alloca %Formatter, align 8
  %reterr = alloca i64, align 8
  %retparam = alloca i64, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"any[]", align 8
    #dbg_declare(ptr %1, !2160, !DIExpression(), !2161)
    #dbg_declare(ptr %2, !2162, !DIExpression(), !2161)
    #dbg_declare(ptr %3, !2163, !DIExpression(), !2161)
    #dbg_declare(ptr %formatter, !2164, !DIExpression(), !2165)
  call void @llvm.memset.p0.i64(ptr align 8 %formatter, i8 0, i64 40, i1 false), !dbg !2165
  call void @std.io.Formatter.init(ptr %formatter, ptr @std.io.out_putstream_fn, ptr %1), !dbg !2166
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg, ptr align 8 %2, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg1, ptr align 8 %3, i32 16, i1 false)
  %4 = call i64 @std.io.Formatter.vprintf(ptr %retparam, ptr %formatter, ptr align 8 %indirectarg, ptr align 8 %indirectarg1), !dbg !2167
  %not_err = icmp eq i64 %4, 0, !dbg !2167
  %5 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !2167
  br i1 %5, label %after_check, label %assign_optional, !dbg !2167

assign_optional:                                  ; preds = %entry
  store i64 %4, ptr %reterr, align 8, !dbg !2167
  br label %err_retblock, !dbg !2167

after_check:                                      ; preds = %entry
  %6 = load i64, ptr %retparam, align 8, !dbg !2167
  store i64 %6, ptr %0, align 8, !dbg !2167
  ret i64 0, !dbg !2167

err_retblock:                                     ; preds = %assign_optional
  %7 = load i64, ptr %reterr, align 8, !dbg !2167
  ret i64 %7, !dbg !2167
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.fprintfn(ptr %0, ptr align 8 %1, ptr align 8 %2, ptr align 8 %3) #0 comdat !dbg !2168 {
entry:
  %formatter = alloca %Formatter, align 8
  %len = alloca i64, align 8
  %error_var = alloca i64, align 8
  %retparam = alloca i64, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"any[]", align 8
  %error_var2 = alloca i64, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %.inlinecache12 = alloca ptr, align 8
  %.cachedtype13 = alloca ptr, align 8
  %error_var20 = alloca i64, align 8
  %.inlinecache22 = alloca ptr, align 8
  %.cachedtype23 = alloca ptr, align 8
  %indirectarg31 = alloca %"char[]", align 8
  %indirectarg32 = alloca %"char[]", align 8
  %indirectarg33 = alloca %"char[]", align 8
  %reterr = alloca i64, align 8
    #dbg_declare(ptr %1, !2169, !DIExpression(), !2170)
    #dbg_declare(ptr %2, !2171, !DIExpression(), !2170)
    #dbg_declare(ptr %3, !2172, !DIExpression(), !2170)
    #dbg_declare(ptr %formatter, !2173, !DIExpression(), !2174)
  store ptr null, ptr %.cachedtype23, align 8, !dbg !2174
  store ptr null, ptr %.cachedtype13, align 8, !dbg !2174
  store ptr null, ptr %.cachedtype, align 8, !dbg !2174
  call void @llvm.memset.p0.i64(ptr align 8 %formatter, i8 0, i64 40, i1 false), !dbg !2174
  call void @std.io.Formatter.init(ptr %formatter, ptr @std.io.out_putstream_fn, ptr %1), !dbg !2175
    #dbg_declare(ptr %len, !2176, !DIExpression(), !2177)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg, ptr align 8 %2, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg1, ptr align 8 %3, i32 16, i1 false)
  %4 = call i64 @std.io.Formatter.vprintf(ptr %retparam, ptr %formatter, ptr align 8 %indirectarg, ptr align 8 %indirectarg1), !dbg !2177
  %not_err = icmp eq i64 %4, 0, !dbg !2177
  %5 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !2177
  br i1 %5, label %after_check, label %assign_optional, !dbg !2177

assign_optional:                                  ; preds = %entry
  store i64 %4, ptr %error_var, align 8, !dbg !2177
  br label %guard_block, !dbg !2177

after_check:                                      ; preds = %entry
  br label %noerr_block, !dbg !2177

guard_block:                                      ; preds = %assign_optional
  %6 = load i64, ptr %error_var, align 8, !dbg !2177
  ret i64 %6, !dbg !2177

noerr_block:                                      ; preds = %after_check
  %7 = load i64, ptr %retparam, align 8, !dbg !2177
  store i64 %7, ptr %len, align 8, !dbg !2177
  %ptradd = getelementptr inbounds i8, ptr %1, i64 8, !dbg !2178
  %8 = load i64, ptr %ptradd, align 8, !dbg !2178
  %9 = inttoptr i64 %8 to ptr, !dbg !2178
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !2174
  %10 = icmp eq ptr %9, %type, !dbg !2174
  br i1 %10, label %cache_hit, label %cache_miss, !dbg !2174

cache_miss:                                       ; preds = %noerr_block
  %ptradd3 = getelementptr inbounds i8, ptr %9, i64 16, !dbg !2174
  %11 = load ptr, ptr %ptradd3, align 8, !dbg !2174
  %12 = call ptr @.dyn_search(ptr %11, ptr @"$sel.write_byte"), !dbg !2174
  store ptr %12, ptr %.inlinecache, align 8, !dbg !2174
  store ptr %9, ptr %.cachedtype, align 8, !dbg !2174
  br label %13, !dbg !2174

cache_hit:                                        ; preds = %noerr_block
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !2174
  br label %13, !dbg !2174

13:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %12, %cache_miss ], !dbg !2174
  %14 = icmp eq ptr %fn_phi, null, !dbg !2174
  br i1 %14, label %missing_function, label %match, !dbg !2174

missing_function:                                 ; preds = %13
  store %"char[]" { ptr @.panic_msg.178, i64 47 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.179, i64 5 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.180, i64 8 }, ptr %indirectarg6, align 8
  %15 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %15(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 205) #5, !dbg !2178
  unreachable, !dbg !2178

match:                                            ; preds = %13
  %16 = load ptr, ptr %1, align 8, !dbg !2178
  %17 = call i64 %fn_phi(ptr %16, i8 10), !dbg !2178
  %not_err7 = icmp eq i64 %17, 0, !dbg !2178
  %18 = call i1 @llvm.expect.i1(i1 %not_err7, i1 true), !dbg !2178
  br i1 %18, label %after_check9, label %assign_optional8, !dbg !2178

assign_optional8:                                 ; preds = %match
  store i64 %17, ptr %error_var2, align 8, !dbg !2178
  br label %guard_block10, !dbg !2178

after_check9:                                     ; preds = %match
  br label %noerr_block11, !dbg !2178

guard_block10:                                    ; preds = %assign_optional8
  %19 = load i64, ptr %error_var2, align 8, !dbg !2178
  ret i64 %19, !dbg !2178

noerr_block11:                                    ; preds = %after_check9
  %20 = load %any, ptr %1, align 8, !dbg !2179
  %21 = extractvalue %any %20, 1, !dbg !2179
  %22 = inttoptr i64 %21 to ptr, !dbg !2179
  %type14 = load ptr, ptr %.cachedtype13, align 8, !dbg !2174
  %23 = icmp eq ptr %22, %type14, !dbg !2174
  br i1 %23, label %cache_hit17, label %cache_miss15, !dbg !2174

cache_miss15:                                     ; preds = %noerr_block11
  %ptradd16 = getelementptr inbounds i8, ptr %22, i64 16, !dbg !2174
  %24 = load ptr, ptr %ptradd16, align 8, !dbg !2174
  %25 = call ptr @.dyn_search(ptr %24, ptr @"$sel.flush"), !dbg !2174
  store ptr %25, ptr %.inlinecache12, align 8, !dbg !2174
  store ptr %22, ptr %.cachedtype13, align 8, !dbg !2174
  br label %26, !dbg !2174

cache_hit17:                                      ; preds = %noerr_block11
  %cache_hit_fn18 = load ptr, ptr %.inlinecache12, align 8, !dbg !2174
  br label %26, !dbg !2174

26:                                               ; preds = %cache_hit17, %cache_miss15
  %fn_phi19 = phi ptr [ %cache_hit_fn18, %cache_hit17 ], [ %25, %cache_miss15 ], !dbg !2174
  %i2b = icmp ne ptr %fn_phi19, null, !dbg !2174
  br i1 %i2b, label %if.then, label %if.exit, !dbg !2174

if.then:                                          ; preds = %26
  %ptradd21 = getelementptr inbounds i8, ptr %1, i64 8, !dbg !2179
  %27 = load i64, ptr %ptradd21, align 8, !dbg !2179
  %28 = inttoptr i64 %27 to ptr, !dbg !2179
  %type24 = load ptr, ptr %.cachedtype23, align 8, !dbg !2174
  %29 = icmp eq ptr %28, %type24, !dbg !2174
  br i1 %29, label %cache_hit27, label %cache_miss25, !dbg !2174

cache_miss25:                                     ; preds = %if.then
  %ptradd26 = getelementptr inbounds i8, ptr %28, i64 16, !dbg !2174
  %30 = load ptr, ptr %ptradd26, align 8, !dbg !2174
  %31 = call ptr @.dyn_search(ptr %30, ptr @"$sel.flush"), !dbg !2174
  store ptr %31, ptr %.inlinecache22, align 8, !dbg !2174
  store ptr %28, ptr %.cachedtype23, align 8, !dbg !2174
  br label %32, !dbg !2174

cache_hit27:                                      ; preds = %if.then
  %cache_hit_fn28 = load ptr, ptr %.inlinecache22, align 8, !dbg !2174
  br label %32, !dbg !2174

32:                                               ; preds = %cache_hit27, %cache_miss25
  %fn_phi29 = phi ptr [ %cache_hit_fn28, %cache_hit27 ], [ %31, %cache_miss25 ], !dbg !2174
  %33 = icmp eq ptr %fn_phi29, null, !dbg !2174
  br i1 %33, label %missing_function30, label %match34, !dbg !2174

missing_function30:                               ; preds = %32
  store %"char[]" { ptr @.panic_msg.181, i64 42 }, ptr %indirectarg31, align 8
  store %"char[]" { ptr @.file.179, i64 5 }, ptr %indirectarg32, align 8
  store %"char[]" { ptr @.func.180, i64 8 }, ptr %indirectarg33, align 8
  %34 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %34(ptr align 8 %indirectarg31, ptr align 8 %indirectarg32, ptr align 8 %indirectarg33, i32 206) #5, !dbg !2179
  unreachable, !dbg !2179

match34:                                          ; preds = %32
  %35 = load ptr, ptr %1, align 8, !dbg !2179
  %36 = call i64 %fn_phi29(ptr %35), !dbg !2179
  %not_err35 = icmp eq i64 %36, 0, !dbg !2179
  %37 = call i1 @llvm.expect.i1(i1 %not_err35, i1 true), !dbg !2179
  br i1 %37, label %after_check37, label %assign_optional36, !dbg !2179

assign_optional36:                                ; preds = %match34
  store i64 %36, ptr %error_var20, align 8, !dbg !2179
  br label %guard_block38, !dbg !2179

after_check37:                                    ; preds = %match34
  br label %noerr_block39, !dbg !2179

guard_block38:                                    ; preds = %assign_optional36
  %38 = load i64, ptr %error_var20, align 8, !dbg !2179
  ret i64 %38, !dbg !2179

noerr_block39:                                    ; preds = %after_check37
  br label %if.exit, !dbg !2179

if.exit:                                          ; preds = %noerr_block39, %26
  %39 = load i64, ptr %len, align 8, !dbg !2180
  %add = add i64 %39, 1, !dbg !2180
  store i64 %add, ptr %0, align 8, !dbg !2180
  ret i64 0, !dbg !2180
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @std.io.out_putstream_fn(ptr %0, i8 %1) #0 !dbg !2181 {
entry:
  %data = alloca ptr, align 8
  %c = alloca i8, align 1
  %stream = alloca ptr, align 8
  %reterr = alloca i64, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr4 = alloca i64, align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg7 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg8 = alloca %"any[]", align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %indirectarg12 = alloca %"char[]", align 8
  %indirectarg13 = alloca %"char[]", align 8
  %indirectarg14 = alloca %"char[]", align 8
  store ptr null, ptr %.cachedtype, align 8
  store ptr %0, ptr %data, align 8
    #dbg_declare(ptr %data, !2182, !DIExpression(), !2183)
  store i8 %1, ptr %c, align 1
    #dbg_declare(ptr %c, !2184, !DIExpression(), !2183)
    #dbg_declare(ptr %stream, !2185, !DIExpression(), !2187)
  %2 = load ptr, ptr %data, align 8, !dbg !2187
  store ptr %2, ptr %stream, align 8, !dbg !2187
  %3 = load ptr, ptr %stream, align 8, !dbg !2188
  %checknull = icmp eq ptr %3, null, !dbg !2188
  %4 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !2188
  br i1 %4, label %panic, label %checkok, !dbg !2188

checkok:                                          ; preds = %entry
  %5 = ptrtoint ptr %3 to i64, !dbg !2188
  %6 = urem i64 %5, 8, !dbg !2188
  %7 = icmp ne i64 %6, 0, !dbg !2188
  %8 = call i1 @llvm.expect.i1(i1 %7, i1 false), !dbg !2188
  br i1 %8, label %panic3, label %checkok9, !dbg !2188

checkok9:                                         ; preds = %checkok
  %ptradd10 = getelementptr inbounds i8, ptr %3, i64 8, !dbg !2188
  %9 = load i64, ptr %ptradd10, align 8, !dbg !2188
  %10 = inttoptr i64 %9 to ptr, !dbg !2188
  %type = load ptr, ptr %.cachedtype, align 8
  %11 = icmp eq ptr %10, %type
  br i1 %11, label %cache_hit, label %cache_miss

cache_miss:                                       ; preds = %checkok9
  %ptradd11 = getelementptr inbounds i8, ptr %10, i64 16
  %12 = load ptr, ptr %ptradd11, align 8
  %13 = call ptr @.dyn_search(ptr %12, ptr @"$sel.write_byte")
  store ptr %13, ptr %.inlinecache, align 8
  store ptr %10, ptr %.cachedtype, align 8
  br label %14

cache_hit:                                        ; preds = %checkok9
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8
  br label %14

14:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %13, %cache_miss ]
  %15 = icmp eq ptr %fn_phi, null
  br i1 %15, label %missing_function, label %match

missing_function:                                 ; preds = %14
  store %"char[]" { ptr @.panic_msg.178, i64 47 }, ptr %indirectarg12, align 8
  store %"char[]" { ptr @.file.179, i64 5 }, ptr %indirectarg13, align 8
  store %"char[]" { ptr @.func.183, i64 16 }, ptr %indirectarg14, align 8
  %16 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %16(ptr align 8 %indirectarg12, ptr align 8 %indirectarg13, ptr align 8 %indirectarg14, i32 266) #5, !dbg !2188
  unreachable, !dbg !2188

match:                                            ; preds = %14
  %17 = load ptr, ptr %3, align 8, !dbg !2188
  %18 = load i8, ptr %c, align 1, !dbg !2188
  %19 = call i64 %fn_phi(ptr %17, i8 %18), !dbg !2188
  %not_err = icmp eq i64 %19, 0, !dbg !2188
  %20 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !2188
  br i1 %20, label %after_check, label %assign_optional, !dbg !2188

assign_optional:                                  ; preds = %match
  store i64 %19, ptr %reterr, align 8, !dbg !2188
  br label %err_retblock, !dbg !2188

after_check:                                      ; preds = %match
  ret i64 0, !dbg !2188

err_retblock:                                     ; preds = %assign_optional
  %21 = load i64, ptr %reterr, align 8, !dbg !2188
  ret i64 %21, !dbg !2188

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.182, i64 47 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.179, i64 5 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.183, i64 16 }, ptr %indirectarg2, align 8
  %22 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %22(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 266) #5, !dbg !2188
  unreachable, !dbg !2188

panic3:                                           ; preds = %checkok
  store i64 8, ptr %taddr, align 8
  %23 = insertvalue %any undef, ptr %taddr, 0
  %24 = insertvalue %any %23, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %6, ptr %taddr4, align 8
  %25 = insertvalue %any undef, ptr %taddr4, 0
  %26 = insertvalue %any %25, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.file.179, i64 5 }, ptr %indirectarg6, align 8
  store %"char[]" { ptr @.func.183, i64 16 }, ptr %indirectarg7, align 8
  store %any %24, ptr %varargslots, align 16
  %ptradd = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %26, ptr %ptradd, align 16
  %27 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %27, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg8, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, ptr align 8 %indirectarg7, i32 266, ptr align 8 %indirectarg8) #5, !dbg !2188
  unreachable, !dbg !2188
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @std.io.out_putchar_fn(ptr %0, i8 %1) #0 !dbg !2189 {
entry:
  %data = alloca ptr, align 8
  %c = alloca i8, align 1
  store ptr %0, ptr %data, align 8
    #dbg_declare(ptr %data, !2190, !DIExpression(), !2191)
  store i8 %1, ptr %c, align 1
    #dbg_declare(ptr %c, !2192, !DIExpression(), !2191)
  %2 = load i8, ptr %c, align 1, !dbg !2193
  %zext = zext i8 %2 to i32, !dbg !2193
  %3 = call i32 @putchar(i32 %zext), !dbg !2193
  ret i64 0, !dbg !2193
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.printf(ptr %0, ptr align 8 %1, ptr align 8 %2) #0 comdat !dbg !2194 {
entry:
  %formatter = alloca %Formatter, align 8
  %reterr = alloca i64, align 8
  %retparam = alloca i64, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"any[]", align 8
    #dbg_declare(ptr %1, !2197, !DIExpression(), !2198)
    #dbg_declare(ptr %2, !2199, !DIExpression(), !2198)
    #dbg_declare(ptr %formatter, !2200, !DIExpression(), !2201)
  call void @llvm.memset.p0.i64(ptr align 8 %formatter, i8 0, i64 40, i1 false), !dbg !2201
  call void @std.io.Formatter.init(ptr %formatter, ptr @std.io.out_putchar_fn, ptr null), !dbg !2202
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg, ptr align 8 %1, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg1, ptr align 8 %2, i32 16, i1 false)
  %3 = call i64 @std.io.Formatter.vprintf(ptr %retparam, ptr %formatter, ptr align 8 %indirectarg, ptr align 8 %indirectarg1), !dbg !2203
  %not_err = icmp eq i64 %3, 0, !dbg !2203
  %4 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !2203
  br i1 %4, label %after_check, label %assign_optional, !dbg !2203

assign_optional:                                  ; preds = %entry
  store i64 %3, ptr %reterr, align 8, !dbg !2203
  br label %err_retblock, !dbg !2203

after_check:                                      ; preds = %entry
  %5 = load i64, ptr %retparam, align 8, !dbg !2203
  store i64 %5, ptr %0, align 8, !dbg !2203
  ret i64 0, !dbg !2203

err_retblock:                                     ; preds = %assign_optional
  %6 = load i64, ptr %reterr, align 8, !dbg !2203
  ret i64 %6, !dbg !2203
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.printfn(ptr %0, ptr align 8 %1, ptr align 8 %2) #0 comdat !dbg !2204 {
entry:
  %formatter = alloca %Formatter, align 8
  %len = alloca i64, align 8
  %len.f = alloca i64, align 8
  %retparam = alloca i64, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"any[]", align 8
  %error_var = alloca i64, align 8
  %error_var5 = alloca i64, align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg7 = alloca %"char[]", align 8
  %indirectarg8 = alloca %"char[]", align 8
  %reterr = alloca i64, align 8
    #dbg_declare(ptr %1, !2205, !DIExpression(), !2206)
    #dbg_declare(ptr %2, !2207, !DIExpression(), !2206)
    #dbg_declare(ptr %formatter, !2208, !DIExpression(), !2209)
  call void @llvm.memset.p0.i64(ptr align 8 %formatter, i8 0, i64 40, i1 false), !dbg !2209
  call void @std.io.Formatter.init(ptr %formatter, ptr @std.io.out_putchar_fn, ptr null), !dbg !2210
    #dbg_declare(ptr %len, !2211, !DIExpression(), !2212)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg, ptr align 8 %1, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg1, ptr align 8 %2, i32 16, i1 false)
  %3 = call i64 @std.io.Formatter.vprintf(ptr %retparam, ptr %formatter, ptr align 8 %indirectarg, ptr align 8 %indirectarg1), !dbg !2212
  %not_err = icmp eq i64 %3, 0, !dbg !2212
  %4 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !2212
  br i1 %4, label %after_check, label %assign_optional, !dbg !2212

assign_optional:                                  ; preds = %entry
  store i64 %3, ptr %len.f, align 8, !dbg !2212
  br label %after_assign, !dbg !2212

after_check:                                      ; preds = %entry
  %5 = load i64, ptr %retparam, align 8, !dbg !2212
  store i64 %5, ptr %len, align 8, !dbg !2212
  store i64 0, ptr %len.f, align 8, !dbg !2212
  br label %after_assign, !dbg !2212

after_assign:                                     ; preds = %after_check, %assign_optional
  %6 = call i64 @std.io.out_putchar_fn(ptr null, i8 10), !dbg !2213
  %not_err2 = icmp eq i64 %6, 0, !dbg !2213
  %7 = call i1 @llvm.expect.i1(i1 %not_err2, i1 true), !dbg !2213
  br i1 %7, label %after_check4, label %assign_optional3, !dbg !2213

assign_optional3:                                 ; preds = %after_assign
  store i64 %6, ptr %error_var, align 8, !dbg !2213
  br label %guard_block, !dbg !2213

after_check4:                                     ; preds = %after_assign
  br label %noerr_block, !dbg !2213

guard_block:                                      ; preds = %assign_optional3
  %8 = load i64, ptr %error_var, align 8, !dbg !2213
  ret i64 %8, !dbg !2213

noerr_block:                                      ; preds = %after_check4
  %9 = call ptr @std.io.stdout(), !dbg !2214
  %10 = load ptr, ptr %9, align 8, !dbg !2215
  %neq = icmp ne ptr %10, null, !dbg !2214
  br i1 %neq, label %assert_ok, label %assert_fail, !dbg !2214

assert_fail:                                      ; preds = %noerr_block
  store %"char[]" { ptr @.panic_msg.184, i64 66 }, ptr %indirectarg6, align 8
  store %"char[]" { ptr @.file.179, i64 5 }, ptr %indirectarg7, align 8
  store %"char[]" { ptr @.func.185, i64 7 }, ptr %indirectarg8, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11(ptr align 8 %indirectarg6, ptr align 8 %indirectarg7, ptr align 8 %indirectarg8, i32 315) #5, !dbg !2214
  unreachable, !dbg !2214

assert_ok:                                        ; preds = %noerr_block
  %12 = call i64 @std.io.File.flush(ptr %9), !dbg !2214
  %not_err9 = icmp eq i64 %12, 0, !dbg !2214
  %13 = call i1 @llvm.expect.i1(i1 %not_err9, i1 true), !dbg !2214
  br i1 %13, label %after_check11, label %assign_optional10, !dbg !2214

assign_optional10:                                ; preds = %assert_ok
  store i64 %12, ptr %error_var5, align 8, !dbg !2214
  br label %guard_block12, !dbg !2214

after_check11:                                    ; preds = %assert_ok
  br label %noerr_block13, !dbg !2214

guard_block12:                                    ; preds = %assign_optional10
  %14 = load i64, ptr %error_var5, align 8, !dbg !2214
  ret i64 %14, !dbg !2214

noerr_block13:                                    ; preds = %after_check11
  %optval = load i64, ptr %len.f, align 8, !dbg !2216
  %not_err14 = icmp eq i64 %optval, 0, !dbg !2216
  %15 = call i1 @llvm.expect.i1(i1 %not_err14, i1 true), !dbg !2216
  br i1 %15, label %after_check16, label %assign_optional15, !dbg !2216

assign_optional15:                                ; preds = %noerr_block13
  store i64 %optval, ptr %reterr, align 8, !dbg !2216
  br label %err_retblock, !dbg !2216

after_check16:                                    ; preds = %noerr_block13
  %16 = load i64, ptr %len, align 8, !dbg !2216
  %add = add i64 %16, 1, !dbg !2216
  store i64 %add, ptr %0, align 8, !dbg !2216
  ret i64 0, !dbg !2216

err_retblock:                                     ; preds = %assign_optional15
  %17 = load i64, ptr %reterr, align 8, !dbg !2216
  ret i64 %17, !dbg !2216
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.eprintf(ptr %0, ptr align 8 %1, ptr align 8 %2) #0 comdat !dbg !2217 {
entry:
  %formatter = alloca %Formatter, align 8
  %stream = alloca %any, align 8
  %reterr = alloca i64, align 8
  %retparam = alloca i64, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"any[]", align 8
    #dbg_declare(ptr %1, !2218, !DIExpression(), !2219)
    #dbg_declare(ptr %2, !2220, !DIExpression(), !2219)
    #dbg_declare(ptr %formatter, !2221, !DIExpression(), !2222)
  call void @llvm.memset.p0.i64(ptr align 8 %formatter, i8 0, i64 40, i1 false), !dbg !2222
    #dbg_declare(ptr %stream, !2223, !DIExpression(), !2224)
  %3 = call ptr @std.io.stderr(), !dbg !2224
  %4 = insertvalue %any undef, ptr %3, 0, !dbg !2224
  %5 = insertvalue %any %4, i64 ptrtoint (ptr @"$ct.std.io.File" to i64), 1, !dbg !2224
  store %any %5, ptr %stream, align 8, !dbg !2224
  call void @std.io.Formatter.init(ptr %formatter, ptr @std.io.out_putstream_fn, ptr %stream), !dbg !2225
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg, ptr align 8 %1, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg1, ptr align 8 %2, i32 16, i1 false)
  %6 = call i64 @std.io.Formatter.vprintf(ptr %retparam, ptr %formatter, ptr align 8 %indirectarg, ptr align 8 %indirectarg1), !dbg !2226
  %not_err = icmp eq i64 %6, 0, !dbg !2226
  %7 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !2226
  br i1 %7, label %after_check, label %assign_optional, !dbg !2226

assign_optional:                                  ; preds = %entry
  store i64 %6, ptr %reterr, align 8, !dbg !2226
  br label %err_retblock, !dbg !2226

after_check:                                      ; preds = %entry
  %8 = load i64, ptr %retparam, align 8, !dbg !2226
  store i64 %8, ptr %0, align 8, !dbg !2226
  ret i64 0, !dbg !2226

err_retblock:                                     ; preds = %assign_optional
  %9 = load i64, ptr %reterr, align 8, !dbg !2226
  ret i64 %9, !dbg !2226
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.eprintfn(ptr %0, ptr align 8 %1, ptr align 8 %2) #0 comdat !dbg !2227 {
entry:
  %formatter = alloca %Formatter, align 8
  %stream = alloca %any, align 8
  %len = alloca i64, align 8
  %len.f = alloca i64, align 8
  %retparam = alloca i64, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"any[]", align 8
  %error_var = alloca i64, align 8
  %indirectarg2 = alloca %"char[]", align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %error_var8 = alloca i64, align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %indirectarg13 = alloca %"char[]", align 8
  %reterr = alloca i64, align 8
    #dbg_declare(ptr %1, !2228, !DIExpression(), !2229)
    #dbg_declare(ptr %2, !2230, !DIExpression(), !2229)
    #dbg_declare(ptr %formatter, !2231, !DIExpression(), !2232)
  call void @llvm.memset.p0.i64(ptr align 8 %formatter, i8 0, i64 40, i1 false), !dbg !2232
    #dbg_declare(ptr %stream, !2233, !DIExpression(), !2234)
  %3 = call ptr @std.io.stderr(), !dbg !2234
  %4 = insertvalue %any undef, ptr %3, 0, !dbg !2234
  %5 = insertvalue %any %4, i64 ptrtoint (ptr @"$ct.std.io.File" to i64), 1, !dbg !2234
  store %any %5, ptr %stream, align 8, !dbg !2234
  call void @std.io.Formatter.init(ptr %formatter, ptr @std.io.out_putstream_fn, ptr %stream), !dbg !2235
    #dbg_declare(ptr %len, !2236, !DIExpression(), !2237)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg, ptr align 8 %1, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg1, ptr align 8 %2, i32 16, i1 false)
  %6 = call i64 @std.io.Formatter.vprintf(ptr %retparam, ptr %formatter, ptr align 8 %indirectarg, ptr align 8 %indirectarg1), !dbg !2237
  %not_err = icmp eq i64 %6, 0, !dbg !2237
  %7 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !2237
  br i1 %7, label %after_check, label %assign_optional, !dbg !2237

assign_optional:                                  ; preds = %entry
  store i64 %6, ptr %len.f, align 8, !dbg !2237
  br label %after_assign, !dbg !2237

after_check:                                      ; preds = %entry
  %8 = load i64, ptr %retparam, align 8, !dbg !2237
  store i64 %8, ptr %len, align 8, !dbg !2237
  store i64 0, ptr %len.f, align 8, !dbg !2237
  br label %after_assign, !dbg !2237

after_assign:                                     ; preds = %after_check, %assign_optional
  %9 = call ptr @std.io.stderr(), !dbg !2238
  %10 = load ptr, ptr %9, align 8, !dbg !2239
  %neq = icmp ne ptr %10, null, !dbg !2238
  br i1 %neq, label %assert_ok, label %assert_fail, !dbg !2238

assert_fail:                                      ; preds = %after_assign
  store %"char[]" { ptr @.panic_msg.186, i64 38 }, ptr %indirectarg2, align 8
  store %"char[]" { ptr @.file.179, i64 5 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.func.187, i64 8 }, ptr %indirectarg4, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11(ptr align 8 %indirectarg2, ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, i32 348) #5, !dbg !2238
  unreachable, !dbg !2238

assert_ok:                                        ; preds = %after_assign
  %12 = call i64 @std.io.File.write_byte(ptr %9, i8 10), !dbg !2238
  %not_err5 = icmp eq i64 %12, 0, !dbg !2238
  %13 = call i1 @llvm.expect.i1(i1 %not_err5, i1 true), !dbg !2238
  br i1 %13, label %after_check7, label %assign_optional6, !dbg !2238

assign_optional6:                                 ; preds = %assert_ok
  store i64 %12, ptr %error_var, align 8, !dbg !2238
  br label %guard_block, !dbg !2238

after_check7:                                     ; preds = %assert_ok
  br label %noerr_block, !dbg !2238

guard_block:                                      ; preds = %assign_optional6
  %14 = load i64, ptr %error_var, align 8, !dbg !2238
  ret i64 %14, !dbg !2238

noerr_block:                                      ; preds = %after_check7
  %15 = call ptr @std.io.stderr(), !dbg !2240
  %16 = load ptr, ptr %15, align 8, !dbg !2241
  %neq9 = icmp ne ptr %16, null, !dbg !2240
  br i1 %neq9, label %assert_ok14, label %assert_fail10, !dbg !2240

assert_fail10:                                    ; preds = %noerr_block
  store %"char[]" { ptr @.panic_msg.184, i64 66 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.file.179, i64 5 }, ptr %indirectarg12, align 8
  store %"char[]" { ptr @.func.187, i64 8 }, ptr %indirectarg13, align 8
  %17 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %17(ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, ptr align 8 %indirectarg13, i32 349) #5, !dbg !2240
  unreachable, !dbg !2240

assert_ok14:                                      ; preds = %noerr_block
  %18 = call i64 @std.io.File.flush(ptr %15), !dbg !2240
  %not_err15 = icmp eq i64 %18, 0, !dbg !2240
  %19 = call i1 @llvm.expect.i1(i1 %not_err15, i1 true), !dbg !2240
  br i1 %19, label %after_check17, label %assign_optional16, !dbg !2240

assign_optional16:                                ; preds = %assert_ok14
  store i64 %18, ptr %error_var8, align 8, !dbg !2240
  br label %guard_block18, !dbg !2240

after_check17:                                    ; preds = %assert_ok14
  br label %noerr_block19, !dbg !2240

guard_block18:                                    ; preds = %assign_optional16
  %20 = load i64, ptr %error_var8, align 8, !dbg !2240
  ret i64 %20, !dbg !2240

noerr_block19:                                    ; preds = %after_check17
  %optval = load i64, ptr %len.f, align 8, !dbg !2242
  %not_err20 = icmp eq i64 %optval, 0, !dbg !2242
  %21 = call i1 @llvm.expect.i1(i1 %not_err20, i1 true), !dbg !2242
  br i1 %21, label %after_check22, label %assign_optional21, !dbg !2242

assign_optional21:                                ; preds = %noerr_block19
  store i64 %optval, ptr %reterr, align 8, !dbg !2242
  br label %err_retblock, !dbg !2242

after_check22:                                    ; preds = %noerr_block19
  %22 = load i64, ptr %len, align 8, !dbg !2242
  %add = add i64 %22, 1, !dbg !2242
  store i64 %add, ptr %0, align 8, !dbg !2242
  ret i64 0, !dbg !2242

err_retblock:                                     ; preds = %assign_optional21
  %23 = load i64, ptr %reterr, align 8, !dbg !2242
  ret i64 %23, !dbg !2242
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.bprintf(ptr %0, ptr align 8 %1, ptr align 8 %2, ptr align 8 %3) #0 comdat !dbg !2243 {
entry:
  %formatter = alloca %Formatter, align 8
  %data = alloca %BufferData, align 8
  %size = alloca i64, align 8
  %error_var = alloca i64, align 8
  %retparam = alloca i64, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"any[]", align 8
  %reterr = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr2 = alloca i64, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg6 = alloca %"any[]", align 8
  %taddr10 = alloca i64, align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %indirectarg13 = alloca %"char[]", align 8
  %varargslots14 = alloca [1 x %any], align 16
  %indirectarg16 = alloca %"any[]", align 8
  %taddr20 = alloca i64, align 8
  %taddr21 = alloca i64, align 8
  %indirectarg22 = alloca %"char[]", align 8
  %indirectarg23 = alloca %"char[]", align 8
  %indirectarg24 = alloca %"char[]", align 8
  %varargslots25 = alloca [2 x %any], align 16
  %indirectarg28 = alloca %"any[]", align 8
    #dbg_declare(ptr %1, !2247, !DIExpression(), !2248)
    #dbg_declare(ptr %2, !2249, !DIExpression(), !2248)
    #dbg_declare(ptr %3, !2250, !DIExpression(), !2248)
    #dbg_declare(ptr %formatter, !2251, !DIExpression(), !2252)
  call void @llvm.memset.p0.i64(ptr align 8 %formatter, i8 0, i64 40, i1 false), !dbg !2252
    #dbg_declare(ptr %data, !2253, !DIExpression(), !2258)
  call void @llvm.memset.p0.i64(ptr align 8 %data, i8 0, i64 24, i1 false), !dbg !2258
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %data, ptr align 8 %1, i32 16, i1 false), !dbg !2258
  call void @std.io.Formatter.init(ptr %formatter, ptr @std.io.out_buffer_fn, ptr %data), !dbg !2259
    #dbg_declare(ptr %size, !2260, !DIExpression(), !2261)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg, ptr align 8 %2, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg1, ptr align 8 %3, i32 16, i1 false)
  %4 = call i64 @std.io.Formatter.vprintf(ptr %retparam, ptr %formatter, ptr align 8 %indirectarg, ptr align 8 %indirectarg1), !dbg !2261
  %not_err = icmp eq i64 %4, 0, !dbg !2261
  %5 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !2261
  br i1 %5, label %after_check, label %assign_optional, !dbg !2261

assign_optional:                                  ; preds = %entry
  store i64 %4, ptr %error_var, align 8, !dbg !2261
  br label %guard_block, !dbg !2261

after_check:                                      ; preds = %entry
  br label %noerr_block, !dbg !2261

guard_block:                                      ; preds = %assign_optional
  %6 = load i64, ptr %error_var, align 8, !dbg !2261
  ret i64 %6, !dbg !2261

noerr_block:                                      ; preds = %after_check
  %7 = load i64, ptr %retparam, align 8, !dbg !2261
  store i64 %7, ptr %size, align 8, !dbg !2261
  %8 = load %"char[]", ptr %1, align 8, !dbg !2262
  %9 = extractvalue %"char[]" %8, 0, !dbg !2262
  %10 = extractvalue %"char[]" %8, 1, !dbg !2262
  %gt = icmp ugt i64 0, %10, !dbg !2262
  %11 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !2262
  br i1 %11, label %panic, label %checkok, !dbg !2262

checkok:                                          ; preds = %noerr_block
  %ptradd7 = getelementptr inbounds i8, ptr %data, i64 16, !dbg !2262
  %12 = load i64, ptr %ptradd7, align 8, !dbg !2262
  %add = add i64 0, %12, !dbg !2262
  %gt8 = icmp ugt i64 0, %add, !dbg !2262
  %sub = sub i64 %add, 0, !dbg !2262
  %13 = call i1 @llvm.expect.i1(i1 %gt8, i1 false), !dbg !2262
  br i1 %13, label %panic9, label %checkok17, !dbg !2262

checkok17:                                        ; preds = %checkok
  %lt = icmp ult i64 %10, %add, !dbg !2262
  %sub18 = sub i64 %add, 1, !dbg !2262
  %14 = call i1 @llvm.expect.i1(i1 %lt, i1 false), !dbg !2262
  br i1 %14, label %panic19, label %checkok29, !dbg !2262

checkok29:                                        ; preds = %checkok17
  %size30 = sub i64 %add, 0, !dbg !2262
  %15 = insertvalue %"char[]" undef, ptr %9, 0, !dbg !2262
  %16 = insertvalue %"char[]" %15, i64 %size30, 1, !dbg !2262
  store %"char[]" %16, ptr %0, align 8, !dbg !2262
  ret i64 0, !dbg !2262

panic:                                            ; preds = %noerr_block
  store i64 %10, ptr %taddr, align 8
  %17 = insertvalue %any undef, ptr %taddr, 0
  %18 = insertvalue %any %17, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr2, align 8
  %19 = insertvalue %any undef, ptr %taddr2, 0
  %20 = insertvalue %any %19, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.170, i64 61 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.file.179, i64 5 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.func.188, i64 7 }, ptr %indirectarg5, align 8
  store %any %18, ptr %varargslots, align 16
  %ptradd = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %20, ptr %ptradd, align 16
  %21 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %21, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg6, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, i32 367, ptr align 8 %indirectarg6) #5, !dbg !2262
  unreachable, !dbg !2262

panic9:                                           ; preds = %checkok
  store i64 %sub, ptr %taddr10, align 8
  %22 = insertvalue %any undef, ptr %taddr10, 0
  %23 = insertvalue %any %22, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.16, i64 43 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.file.179, i64 5 }, ptr %indirectarg12, align 8
  store %"char[]" { ptr @.func.188, i64 7 }, ptr %indirectarg13, align 8
  store %any %23, ptr %varargslots14, align 16
  %24 = insertvalue %"any[]" undef, ptr %varargslots14, 0
  %"$$temp15" = insertvalue %"any[]" %24, i64 1, 1
  store %"any[]" %"$$temp15", ptr %indirectarg16, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, ptr align 8 %indirectarg13, i32 367, ptr align 8 %indirectarg16) #5, !dbg !2262
  unreachable, !dbg !2262

panic19:                                          ; preds = %checkok17
  store i64 %sub18, ptr %taddr20, align 8
  %25 = insertvalue %any undef, ptr %taddr20, 0
  %26 = insertvalue %any %25, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %10, ptr %taddr21, align 8
  %27 = insertvalue %any undef, ptr %taddr21, 0
  %28 = insertvalue %any %27, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 60 }, ptr %indirectarg22, align 8
  store %"char[]" { ptr @.file.179, i64 5 }, ptr %indirectarg23, align 8
  store %"char[]" { ptr @.func.188, i64 7 }, ptr %indirectarg24, align 8
  store %any %26, ptr %varargslots25, align 16
  %ptradd26 = getelementptr inbounds i8, ptr %varargslots25, i64 16
  store %any %28, ptr %ptradd26, align 16
  %29 = insertvalue %"any[]" undef, ptr %varargslots25, 0
  %"$$temp27" = insertvalue %"any[]" %29, i64 2, 1
  store %"any[]" %"$$temp27", ptr %indirectarg28, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg22, ptr align 8 %indirectarg23, ptr align 8 %indirectarg24, i32 367, ptr align 8 %indirectarg28) #5, !dbg !2262
  unreachable, !dbg !2262
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @std.io.out_buffer_fn(ptr %0, i8 %1) #0 !dbg !2263 {
entry:
  %data = alloca ptr, align 8
  %c = alloca i8, align 1
  %buffer_data = alloca ptr, align 8
  %taddr = alloca i64, align 8
  %taddr5 = alloca i64, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg7 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg9 = alloca %"any[]", align 8
  store ptr %0, ptr %data, align 8
    #dbg_declare(ptr %data, !2264, !DIExpression(), !2265)
  store i8 %1, ptr %c, align 1
    #dbg_declare(ptr %c, !2266, !DIExpression(), !2265)
    #dbg_declare(ptr %buffer_data, !2267, !DIExpression(), !2269)
  %2 = load ptr, ptr %data, align 8, !dbg !2269
  store ptr %2, ptr %buffer_data, align 8, !dbg !2269
  %3 = load ptr, ptr %buffer_data, align 8, !dbg !2270
  %ptradd = getelementptr inbounds i8, ptr %3, i64 16, !dbg !2270
  %4 = load i64, ptr %ptradd, align 8, !dbg !2270
  %5 = load ptr, ptr %buffer_data, align 8, !dbg !2270
  %ptradd1 = getelementptr inbounds i8, ptr %5, i64 8, !dbg !2270
  %6 = load i64, ptr %ptradd1, align 8, !dbg !2270
  %ge = icmp uge i64 %4, %6, !dbg !2270
  br i1 %ge, label %if.then, label %if.exit, !dbg !2270

if.then:                                          ; preds = %entry
  ret i64 ptrtoint (ptr @std.io.BUFFER_EXCEEDED to i64), !dbg !2270

if.exit:                                          ; preds = %entry
  %7 = load ptr, ptr %buffer_data, align 8, !dbg !2271
  %ptradd2 = getelementptr inbounds i8, ptr %7, i64 8, !dbg !2271
  %8 = load i64, ptr %ptradd2, align 8, !dbg !2271
  %9 = load ptr, ptr %7, align 8, !dbg !2271
  %10 = load ptr, ptr %buffer_data, align 8, !dbg !2271
  %ptradd3 = getelementptr inbounds i8, ptr %10, i64 16, !dbg !2271
  %11 = load i64, ptr %ptradd3, align 8, !dbg !2271
  %add = add i64 %11, 1, !dbg !2271
  store i64 %add, ptr %ptradd3, align 8, !dbg !2271
  %ge4 = icmp uge i64 %11, %8, !dbg !2271
  %12 = call i1 @llvm.expect.i1(i1 %ge4, i1 false), !dbg !2271
  br i1 %12, label %panic, label %checkok, !dbg !2271

checkok:                                          ; preds = %if.exit
  %ptradd10 = getelementptr inbounds i8, ptr %9, i64 %11, !dbg !2271
  %13 = load i8, ptr %c, align 1, !dbg !2271
  store i8 %13, ptr %ptradd10, align 1, !dbg !2271
  ret i64 0, !dbg !2271

panic:                                            ; preds = %if.exit
  store i64 %8, ptr %taddr, align 8
  %14 = insertvalue %any undef, ptr %taddr, 0
  %15 = insertvalue %any %14, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %11, ptr %taddr5, align 8
  %16 = insertvalue %any undef, ptr %taddr5, 0
  %17 = insertvalue %any %16, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.71, i64 59 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.179, i64 5 }, ptr %indirectarg6, align 8
  store %"char[]" { ptr @.func.189, i64 13 }, ptr %indirectarg7, align 8
  store %any %15, ptr %varargslots, align 16
  %ptradd8 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %17, ptr %ptradd8, align 16
  %18 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %18, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg9, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg, ptr align 8 %indirectarg6, ptr align 8 %indirectarg7, i32 375, ptr align 8 %indirectarg9) #5, !dbg !2271
  unreachable, !dbg !2271
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.io.putchar(i8 %0) #0 comdat !dbg !2272 {
entry:
  %c = alloca i8, align 1
  store i8 %0, ptr %c, align 1
    #dbg_declare(ptr %c, !2275, !DIExpression(), !2276)
  %1 = load i8, ptr %c, align 1, !dbg !2277
  %zext = zext i8 %1 to i32, !dbg !2277
  %2 = call i32 @putchar(i32 %zext), !dbg !2277
  ret void, !dbg !2277
}

; Function Attrs: nounwind ssp uwtable
define weak_odr ptr @std.io.stdout() #0 comdat !dbg !2278 {
entry:
  %result = alloca %File, align 8
  %0 = load ptr, ptr @stdout.file, align 8, !dbg !2282
  %i2nb = icmp eq ptr %0, null, !dbg !2282
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !2282

if.then:                                          ; preds = %entry
  %1 = call ptr @__acrt_iob_func(i32 1), !dbg !2283
  %2 = call i64 @std.io.file.from_handle(ptr %1), !dbg !2282
  %3 = inttoptr i64 %2 to ptr
  store ptr %3, ptr %result, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 @stdout.file, ptr align 8 %result, i32 8, i1 false)
  br label %if.exit

if.exit:                                          ; preds = %if.then, %entry
  ret ptr @stdout.file, !dbg !2286
}

; Function Attrs: nounwind ssp uwtable
define weak_odr ptr @std.io.stderr() #0 comdat !dbg !2287 {
entry:
  %result = alloca %File, align 8
  %0 = load ptr, ptr @stderr.file, align 8, !dbg !2288
  %i2nb = icmp eq ptr %0, null, !dbg !2288
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !2288

if.then:                                          ; preds = %entry
  %1 = call ptr @__acrt_iob_func(i32 2), !dbg !2289
  %2 = call i64 @std.io.file.from_handle(ptr %1), !dbg !2288
  %3 = inttoptr i64 %2 to ptr
  store ptr %3, ptr %result, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 @stderr.file, ptr align 8 %result, i32 8, i1 false)
  br label %if.exit

if.exit:                                          ; preds = %if.then, %entry
  ret ptr @stderr.file, !dbg !2291
}

; Function Attrs: nounwind ssp uwtable
define weak_odr ptr @std.io.stdin() #0 comdat !dbg !2292 {
entry:
  %result = alloca %File, align 8
  %0 = load ptr, ptr @stdin.file, align 8, !dbg !2293
  %i2nb = icmp eq ptr %0, null, !dbg !2293
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !2293

if.then:                                          ; preds = %entry
  %1 = call ptr @__acrt_iob_func(i32 0), !dbg !2294
  %2 = call i64 @std.io.file.from_handle(ptr %1), !dbg !2293
  %3 = inttoptr i64 %2 to ptr
  store ptr %3, ptr %result, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 @stdin.file, ptr align 8 %result, i32 8, i1 false)
  br label %if.exit

if.exit:                                          ; preds = %if.then, %entry
  ret ptr @stdin.file, !dbg !2296
}

; Function Attrs: nounwind ssp uwtable
define weak_odr ptr @std.io.ReadBuffer.init(ptr %0, ptr align 8 %1, ptr align 8 %2) #0 comdat !dbg !2297 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %.assign_list = alloca %ReadBuffer, align 8
  %indirectarg15 = alloca %"char[]", align 8
  %indirectarg16 = alloca %"char[]", align 8
  %indirectarg17 = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr20 = alloca i64, align 8
  %indirectarg21 = alloca %"char[]", align 8
  %indirectarg22 = alloca %"char[]", align 8
  %indirectarg23 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg25 = alloca %"any[]", align 8
  %3 = icmp eq ptr %0, null, !dbg !2308
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !2308
  br i1 %4, label %panic, label %checkok, !dbg !2308

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2309, !DIExpression(), !2310)
    #dbg_declare(ptr %1, !2311, !DIExpression(), !2310)
    #dbg_declare(ptr %2, !2312, !DIExpression(), !2310)
  %ptradd = getelementptr inbounds i8, ptr %2, i64 8, !dbg !2313
  %5 = load i64, ptr %ptradd, align 8, !dbg !2313
  %lt = icmp ult i64 0, %5, !dbg !2313
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !2313

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.191, i64 34 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.file.190, i64 9 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg5, align 8
  %6 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %6(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, i32 14) #5, !dbg !2313
  unreachable, !dbg !2313

assert_ok:                                        ; preds = %checkok
  %7 = load ptr, ptr %self, align 8, !dbg !2315
  %ptradd6 = getelementptr inbounds i8, ptr %7, i64 16, !dbg !2315
  %ptradd7 = getelementptr inbounds i8, ptr %ptradd6, i64 8, !dbg !2315
  %8 = load i64, ptr %ptradd7, align 8, !dbg !2315
  %eq = icmp eq i64 0, %8, !dbg !2315
  br i1 %eq, label %assert_ok12, label %assert_fail8, !dbg !2315

assert_fail8:                                     ; preds = %assert_ok
  store %"char[]" { ptr @.panic_msg.192, i64 88 }, ptr %indirectarg9, align 8
  store %"char[]" { ptr @.file.190, i64 9 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg11, align 8
  %9 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %9(ptr align 8 %indirectarg9, ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, i32 15) #5, !dbg !2315
  unreachable, !dbg !2315

assert_ok12:                                      ; preds = %assert_ok
  call void @llvm.memset.p0.i64(ptr align 8 %.assign_list, i8 0, i64 48, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %.assign_list, ptr align 8 %1, i32 16, i1 false), !dbg !2316
  %ptradd13 = getelementptr inbounds i8, ptr %.assign_list, i64 16, !dbg !2316
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %ptradd13, ptr align 8 %2, i32 16, i1 false), !dbg !2316
  %10 = load ptr, ptr %self, align 8, !dbg !2316
  %checknull = icmp eq ptr %10, null, !dbg !2316
  %11 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !2316
  br i1 %11, label %panic14, label %checkok18, !dbg !2316

checkok18:                                        ; preds = %assert_ok12
  %12 = ptrtoint ptr %10 to i64, !dbg !2316
  %13 = urem i64 %12, 8, !dbg !2316
  %14 = icmp ne i64 %13, 0, !dbg !2316
  %15 = call i1 @llvm.expect.i1(i1 %14, i1 false), !dbg !2316
  br i1 %15, label %panic19, label %checkok26, !dbg !2316

checkok26:                                        ; preds = %checkok18
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %10, ptr align 8 %.assign_list, i32 48, i1 false), !dbg !2316
  %16 = load ptr, ptr %self, align 8, !dbg !2317
  ret ptr %16, !dbg !2317

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.190, i64 9 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg2, align 8
  %17 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %17(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 17) #5, !dbg !2310
  unreachable, !dbg !2310

panic14:                                          ; preds = %assert_ok12
  store %"char[]" { ptr @.panic_msg.2, i64 45 }, ptr %indirectarg15, align 8
  store %"char[]" { ptr @.file.190, i64 9 }, ptr %indirectarg16, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg17, align 8
  %18 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %18(ptr align 8 %indirectarg15, ptr align 8 %indirectarg16, ptr align 8 %indirectarg17, i32 19) #5, !dbg !2316
  unreachable, !dbg !2316

panic19:                                          ; preds = %checkok18
  store i64 8, ptr %taddr, align 8
  %19 = insertvalue %any undef, ptr %taddr, 0
  %20 = insertvalue %any %19, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %13, ptr %taddr20, align 8
  %21 = insertvalue %any undef, ptr %taddr20, 0
  %22 = insertvalue %any %21, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg21, align 8
  store %"char[]" { ptr @.file.190, i64 9 }, ptr %indirectarg22, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg23, align 8
  store %any %20, ptr %varargslots, align 16
  %ptradd24 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %22, ptr %ptradd24, align 16
  %23 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %23, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg25, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg21, ptr align 8 %indirectarg22, ptr align 8 %indirectarg23, i32 19, ptr align 8 %indirectarg25) #5, !dbg !2316
  unreachable, !dbg !2316
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.io.ReadBuffer.str_view(ptr noalias sret(%"char[]") align 8 %0, ptr %1) #0 comdat !dbg !2318 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %taddr = alloca i64, align 8
  %taddr5 = alloca i64, align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg7 = alloca %"char[]", align 8
  %indirectarg8 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg10 = alloca %"any[]", align 8
  %taddr17 = alloca i64, align 8
  %indirectarg18 = alloca %"char[]", align 8
  %indirectarg19 = alloca %"char[]", align 8
  %indirectarg20 = alloca %"char[]", align 8
  %varargslots21 = alloca [1 x %any], align 16
  %indirectarg23 = alloca %"any[]", align 8
  %taddr27 = alloca i64, align 8
  %taddr28 = alloca i64, align 8
  %indirectarg29 = alloca %"char[]", align 8
  %indirectarg30 = alloca %"char[]", align 8
  %indirectarg31 = alloca %"char[]", align 8
  %varargslots32 = alloca [2 x %any], align 16
  %indirectarg35 = alloca %"any[]", align 8
  %2 = icmp eq ptr %1, null, !dbg !2321
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !2321
  br i1 %3, label %panic, label %checkok, !dbg !2321

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !2322, !DIExpression(), !2323)
  %4 = load ptr, ptr %self, align 8, !dbg !2324
  %ptradd = getelementptr inbounds i8, ptr %4, i64 16, !dbg !2324
  %5 = load %"char[]", ptr %ptradd, align 8, !dbg !2324
  %6 = extractvalue %"char[]" %5, 0, !dbg !2324
  %7 = load ptr, ptr %self, align 8, !dbg !2324
  %ptradd3 = getelementptr inbounds i8, ptr %7, i64 32, !dbg !2324
  %8 = load i64, ptr %ptradd3, align 8, !dbg !2324
  %9 = extractvalue %"char[]" %5, 1, !dbg !2324
  %gt = icmp ugt i64 %8, %9, !dbg !2324
  %10 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !2324
  br i1 %10, label %panic4, label %checkok11, !dbg !2324

checkok11:                                        ; preds = %checkok
  %11 = load ptr, ptr %self, align 8, !dbg !2324
  %ptradd12 = getelementptr inbounds i8, ptr %11, i64 40, !dbg !2324
  %12 = load i64, ptr %ptradd12, align 8, !dbg !2324
  %13 = load ptr, ptr %self, align 8, !dbg !2324
  %ptradd13 = getelementptr inbounds i8, ptr %13, i64 32, !dbg !2324
  %14 = load i64, ptr %ptradd13, align 8, !dbg !2324
  %sub = sub i64 %12, %14, !dbg !2324
  %add = add i64 %8, %sub, !dbg !2324
  %gt14 = icmp ugt i64 %8, %add, !dbg !2324
  %sub15 = sub i64 %add, %8, !dbg !2324
  %15 = call i1 @llvm.expect.i1(i1 %gt14, i1 false), !dbg !2324
  br i1 %15, label %panic16, label %checkok24, !dbg !2324

checkok24:                                        ; preds = %checkok11
  %lt = icmp ult i64 %9, %add, !dbg !2324
  %sub25 = sub i64 %add, 1, !dbg !2324
  %16 = call i1 @llvm.expect.i1(i1 %lt, i1 false), !dbg !2324
  br i1 %16, label %panic26, label %checkok36, !dbg !2324

checkok36:                                        ; preds = %checkok24
  %size = sub i64 %add, %8, !dbg !2324
  %ptradd37 = getelementptr inbounds i8, ptr %6, i64 %8, !dbg !2324
  %17 = insertvalue %"char[]" undef, ptr %ptradd37, 0, !dbg !2324
  %18 = insertvalue %"char[]" %17, i64 %size, 1, !dbg !2324
  store %"char[]" %18, ptr %0, align 8, !dbg !2324
  ret void, !dbg !2324

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.190, i64 9 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.193, i64 8 }, ptr %indirectarg2, align 8
  %19 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %19(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 22) #5, !dbg !2323
  unreachable, !dbg !2323

panic4:                                           ; preds = %checkok
  store i64 %9, ptr %taddr, align 8
  %20 = insertvalue %any undef, ptr %taddr, 0
  %21 = insertvalue %any %20, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %8, ptr %taddr5, align 8
  %22 = insertvalue %any undef, ptr %taddr5, 0
  %23 = insertvalue %any %22, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.170, i64 61 }, ptr %indirectarg6, align 8
  store %"char[]" { ptr @.file.190, i64 9 }, ptr %indirectarg7, align 8
  store %"char[]" { ptr @.func.193, i64 8 }, ptr %indirectarg8, align 8
  store %any %21, ptr %varargslots, align 16
  %ptradd9 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %23, ptr %ptradd9, align 16
  %24 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %24, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg10, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg6, ptr align 8 %indirectarg7, ptr align 8 %indirectarg8, i32 24, ptr align 8 %indirectarg10) #5, !dbg !2324
  unreachable, !dbg !2324

panic16:                                          ; preds = %checkok11
  store i64 %sub15, ptr %taddr17, align 8
  %25 = insertvalue %any undef, ptr %taddr17, 0
  %26 = insertvalue %any %25, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.16, i64 43 }, ptr %indirectarg18, align 8
  store %"char[]" { ptr @.file.190, i64 9 }, ptr %indirectarg19, align 8
  store %"char[]" { ptr @.func.193, i64 8 }, ptr %indirectarg20, align 8
  store %any %26, ptr %varargslots21, align 16
  %27 = insertvalue %"any[]" undef, ptr %varargslots21, 0
  %"$$temp22" = insertvalue %"any[]" %27, i64 1, 1
  store %"any[]" %"$$temp22", ptr %indirectarg23, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg18, ptr align 8 %indirectarg19, ptr align 8 %indirectarg20, i32 24, ptr align 8 %indirectarg23) #5, !dbg !2324
  unreachable, !dbg !2324

panic26:                                          ; preds = %checkok24
  store i64 %sub25, ptr %taddr27, align 8
  %28 = insertvalue %any undef, ptr %taddr27, 0
  %29 = insertvalue %any %28, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %9, ptr %taddr28, align 8
  %30 = insertvalue %any undef, ptr %taddr28, 0
  %31 = insertvalue %any %30, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 60 }, ptr %indirectarg29, align 8
  store %"char[]" { ptr @.file.190, i64 9 }, ptr %indirectarg30, align 8
  store %"char[]" { ptr @.func.193, i64 8 }, ptr %indirectarg31, align 8
  store %any %29, ptr %varargslots32, align 16
  %ptradd33 = getelementptr inbounds i8, ptr %varargslots32, i64 16
  store %any %31, ptr %ptradd33, align 16
  %32 = insertvalue %"any[]" undef, ptr %varargslots32, 0
  %"$$temp34" = insertvalue %"any[]" %32, i64 2, 1
  store %"any[]" %"$$temp34", ptr %indirectarg35, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg29, ptr align 8 %indirectarg30, ptr align 8 %indirectarg31, i32 24, ptr align 8 %indirectarg35) #5, !dbg !2324
  unreachable, !dbg !2324
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.ReadBuffer.close(ptr %0) #0 comdat !dbg !2325 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %error_var = alloca i64, align 8
  %.inlinecache4 = alloca ptr, align 8
  %.cachedtype5 = alloca ptr, align 8
  %indirectarg12 = alloca %"char[]", align 8
  %indirectarg13 = alloca %"char[]", align 8
  %indirectarg14 = alloca %"char[]", align 8
  store ptr null, ptr %.cachedtype5, align 8, !dbg !2328
  store ptr null, ptr %.cachedtype, align 8, !dbg !2328
  %1 = icmp eq ptr %0, null, !dbg !2328
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2328
  br i1 %2, label %panic, label %checkok, !dbg !2328

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2329, !DIExpression(), !2330)
  %3 = load ptr, ptr %self, align 8, !dbg !2331
  %4 = load %any, ptr %3, align 8, !dbg !2331
  %5 = extractvalue %any %4, 1, !dbg !2331
  %6 = inttoptr i64 %5 to ptr, !dbg !2331
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !2328
  %7 = icmp eq ptr %6, %type, !dbg !2328
  br i1 %7, label %cache_hit, label %cache_miss, !dbg !2328

cache_miss:                                       ; preds = %checkok
  %ptradd = getelementptr inbounds i8, ptr %6, i64 16, !dbg !2328
  %8 = load ptr, ptr %ptradd, align 8, !dbg !2328
  %9 = call ptr @.dyn_search(ptr %8, ptr @"$sel.close"), !dbg !2328
  store ptr %9, ptr %.inlinecache, align 8, !dbg !2328
  store ptr %6, ptr %.cachedtype, align 8, !dbg !2328
  br label %10, !dbg !2328

cache_hit:                                        ; preds = %checkok
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !2328
  br label %10, !dbg !2328

10:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %9, %cache_miss ], !dbg !2328
  %i2b = icmp ne ptr %fn_phi, null, !dbg !2328
  br i1 %i2b, label %if.then, label %if.exit, !dbg !2328

if.then:                                          ; preds = %10
  %11 = load ptr, ptr %self, align 8, !dbg !2331
  %ptradd3 = getelementptr inbounds i8, ptr %11, i64 8, !dbg !2331
  %12 = load i64, ptr %ptradd3, align 8, !dbg !2331
  %13 = inttoptr i64 %12 to ptr, !dbg !2331
  %type6 = load ptr, ptr %.cachedtype5, align 8, !dbg !2328
  %14 = icmp eq ptr %13, %type6, !dbg !2328
  br i1 %14, label %cache_hit9, label %cache_miss7, !dbg !2328

cache_miss7:                                      ; preds = %if.then
  %ptradd8 = getelementptr inbounds i8, ptr %13, i64 16, !dbg !2328
  %15 = load ptr, ptr %ptradd8, align 8, !dbg !2328
  %16 = call ptr @.dyn_search(ptr %15, ptr @"$sel.close"), !dbg !2328
  store ptr %16, ptr %.inlinecache4, align 8, !dbg !2328
  store ptr %13, ptr %.cachedtype5, align 8, !dbg !2328
  br label %17, !dbg !2328

cache_hit9:                                       ; preds = %if.then
  %cache_hit_fn10 = load ptr, ptr %.inlinecache4, align 8, !dbg !2328
  br label %17, !dbg !2328

17:                                               ; preds = %cache_hit9, %cache_miss7
  %fn_phi11 = phi ptr [ %cache_hit_fn10, %cache_hit9 ], [ %16, %cache_miss7 ], !dbg !2328
  %18 = icmp eq ptr %fn_phi11, null, !dbg !2328
  br i1 %18, label %missing_function, label %match, !dbg !2328

missing_function:                                 ; preds = %17
  store %"char[]" { ptr @.panic_msg.195, i64 42 }, ptr %indirectarg12, align 8
  store %"char[]" { ptr @.file.190, i64 9 }, ptr %indirectarg13, align 8
  store %"char[]" { ptr @.func.194, i64 5 }, ptr %indirectarg14, align 8
  %19 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %19(ptr align 8 %indirectarg12, ptr align 8 %indirectarg13, ptr align 8 %indirectarg14, i32 29) #5, !dbg !2331
  unreachable, !dbg !2331

match:                                            ; preds = %17
  %20 = load ptr, ptr %11, align 8, !dbg !2331
  %21 = call i64 %fn_phi11(ptr %20), !dbg !2331
  %not_err = icmp eq i64 %21, 0, !dbg !2331
  %22 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !2331
  br i1 %22, label %after_check, label %assign_optional, !dbg !2331

assign_optional:                                  ; preds = %match
  store i64 %21, ptr %error_var, align 8, !dbg !2331
  br label %guard_block, !dbg !2331

after_check:                                      ; preds = %match
  br label %noerr_block, !dbg !2331

guard_block:                                      ; preds = %assign_optional
  %23 = load i64, ptr %error_var, align 8, !dbg !2331
  ret i64 %23, !dbg !2331

noerr_block:                                      ; preds = %after_check
  br label %if.exit, !dbg !2331

if.exit:                                          ; preds = %noerr_block, %10
  ret i64 0, !dbg !2331

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.190, i64 9 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.194, i64 5 }, ptr %indirectarg2, align 8
  %24 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %24(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 27) #5, !dbg !2330
  unreachable, !dbg !2330
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.ReadBuffer.read(ptr %0, ptr %1, ptr align 8 %2) #0 comdat !dbg !2332 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %reterr = alloca i64, align 8
  %error_var = alloca i64, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %indirectarg12 = alloca %"char[]", align 8
  %indirectarg13 = alloca %"char[]", align 8
  %indirectarg14 = alloca %"char[]", align 8
  %retparam = alloca i64, align 8
  %indirectarg15 = alloca %"char[]", align 8
  %error_var16 = alloca i64, align 8
  %n = alloca i64, align 8
  %x = alloca i64, align 8
  %.anon = alloca i64, align 8
  %a = alloca i64, align 8
  %b = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr30 = alloca i64, align 8
  %indirectarg31 = alloca %"char[]", align 8
  %indirectarg32 = alloca %"char[]", align 8
  %indirectarg33 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg35 = alloca %"any[]", align 8
  %taddr40 = alloca i64, align 8
  %indirectarg41 = alloca %"char[]", align 8
  %indirectarg42 = alloca %"char[]", align 8
  %indirectarg43 = alloca %"char[]", align 8
  %varargslots44 = alloca [1 x %any], align 16
  %indirectarg46 = alloca %"any[]", align 8
  %taddr51 = alloca i64, align 8
  %taddr52 = alloca i64, align 8
  %indirectarg53 = alloca %"char[]", align 8
  %indirectarg54 = alloca %"char[]", align 8
  %indirectarg55 = alloca %"char[]", align 8
  %varargslots56 = alloca [2 x %any], align 16
  %indirectarg59 = alloca %"any[]", align 8
  %taddr64 = alloca i64, align 8
  %taddr65 = alloca i64, align 8
  %indirectarg66 = alloca %"char[]", align 8
  %indirectarg67 = alloca %"char[]", align 8
  %indirectarg68 = alloca %"char[]", align 8
  %varargslots69 = alloca [2 x %any], align 16
  %indirectarg72 = alloca %"any[]", align 8
  %taddr78 = alloca i64, align 8
  %indirectarg79 = alloca %"char[]", align 8
  %indirectarg80 = alloca %"char[]", align 8
  %indirectarg81 = alloca %"char[]", align 8
  %varargslots82 = alloca [1 x %any], align 16
  %indirectarg84 = alloca %"any[]", align 8
  %taddr89 = alloca i64, align 8
  %taddr90 = alloca i64, align 8
  %indirectarg91 = alloca %"char[]", align 8
  %indirectarg92 = alloca %"char[]", align 8
  %indirectarg93 = alloca %"char[]", align 8
  %varargslots94 = alloca [2 x %any], align 16
  %indirectarg97 = alloca %"any[]", align 8
  %taddr101 = alloca i64, align 8
  %taddr102 = alloca i64, align 8
  %indirectarg103 = alloca %"char[]", align 8
  %indirectarg104 = alloca %"char[]", align 8
  %indirectarg105 = alloca %"char[]", align 8
  %varargslots106 = alloca [2 x %any], align 16
  %indirectarg109 = alloca %"any[]", align 8
  %reterr113 = alloca i64, align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !2335
  %3 = icmp eq ptr %1, null, !dbg !2335
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !2335
  br i1 %4, label %panic, label %checkok, !dbg !2335

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !2336, !DIExpression(), !2337)
    #dbg_declare(ptr %2, !2338, !DIExpression(), !2337)
  %5 = load ptr, ptr %self, align 8, !dbg !2339
  %ptradd = getelementptr inbounds i8, ptr %5, i64 32, !dbg !2339
  %6 = load i64, ptr %ptradd, align 8, !dbg !2339
  %7 = load ptr, ptr %self, align 8, !dbg !2339
  %ptradd3 = getelementptr inbounds i8, ptr %7, i64 40, !dbg !2339
  %8 = load i64, ptr %ptradd3, align 8, !dbg !2339
  %eq = icmp eq i64 %6, %8, !dbg !2339
  br i1 %eq, label %if.then, label %if.exit22, !dbg !2339

if.then:                                          ; preds = %checkok
  %9 = load ptr, ptr %self, align 8, !dbg !2340
  %ptradd4 = getelementptr inbounds i8, ptr %9, i64 32, !dbg !2340
  %10 = load i64, ptr %ptradd4, align 8, !dbg !2340
  %eq5 = icmp eq i64 0, %10, !dbg !2340
  br i1 %eq5, label %and.rhs, label %and.phi, !dbg !2340

and.rhs:                                          ; preds = %if.then
  %ptradd6 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !2340
  %11 = load i64, ptr %ptradd6, align 8, !dbg !2340
  %12 = load ptr, ptr %self, align 8, !dbg !2340
  %ptradd7 = getelementptr inbounds i8, ptr %12, i64 16, !dbg !2340
  %ptradd8 = getelementptr inbounds i8, ptr %ptradd7, i64 8, !dbg !2340
  %13 = load i64, ptr %ptradd8, align 8, !dbg !2340
  %ge = icmp uge i64 %11, %13, !dbg !2340
  br label %and.phi, !dbg !2340

and.phi:                                          ; preds = %and.rhs, %if.then
  %val = phi i1 [ false, %if.then ], [ %ge, %and.rhs ], !dbg !2340
  br i1 %val, label %if.then9, label %if.exit, !dbg !2340

if.then9:                                         ; preds = %and.phi
  %14 = load ptr, ptr %self, align 8, !dbg !2342
  %ptradd10 = getelementptr inbounds i8, ptr %14, i64 8, !dbg !2342
  %15 = load i64, ptr %ptradd10, align 8, !dbg !2342
  %16 = inttoptr i64 %15 to ptr, !dbg !2342
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !2335
  %17 = icmp eq ptr %16, %type, !dbg !2335
  br i1 %17, label %cache_hit, label %cache_miss, !dbg !2335

cache_miss:                                       ; preds = %if.then9
  %ptradd11 = getelementptr inbounds i8, ptr %16, i64 16, !dbg !2335
  %18 = load ptr, ptr %ptradd11, align 8, !dbg !2335
  %19 = call ptr @.dyn_search(ptr %18, ptr @"$sel.read"), !dbg !2335
  store ptr %19, ptr %.inlinecache, align 8, !dbg !2335
  store ptr %16, ptr %.cachedtype, align 8, !dbg !2335
  br label %20, !dbg !2335

cache_hit:                                        ; preds = %if.then9
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !2335
  br label %20, !dbg !2335

20:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %19, %cache_miss ], !dbg !2335
  %21 = icmp eq ptr %fn_phi, null, !dbg !2335
  br i1 %21, label %missing_function, label %match, !dbg !2335

missing_function:                                 ; preds = %20
  store %"char[]" { ptr @.panic_msg.197, i64 41 }, ptr %indirectarg12, align 8
  store %"char[]" { ptr @.file.190, i64 9 }, ptr %indirectarg13, align 8
  store %"char[]" { ptr @.func.196, i64 4 }, ptr %indirectarg14, align 8
  %22 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %22(ptr align 8 %indirectarg12, ptr align 8 %indirectarg13, ptr align 8 %indirectarg14, i32 39) #5, !dbg !2342
  unreachable, !dbg !2342

match:                                            ; preds = %20
  %23 = load ptr, ptr %14, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg15, ptr align 8 %2, i32 16, i1 false)
  %24 = call i64 %fn_phi(ptr %retparam, ptr %23, ptr align 8 %indirectarg15), !dbg !2342
  %not_err = icmp eq i64 %24, 0, !dbg !2342
  %25 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !2342
  br i1 %25, label %after_check, label %assign_optional, !dbg !2342

assign_optional:                                  ; preds = %match
  store i64 %24, ptr %error_var, align 8, !dbg !2342
  br label %guard_block, !dbg !2342

after_check:                                      ; preds = %match
  br label %noerr_block, !dbg !2342

guard_block:                                      ; preds = %assign_optional
  %26 = load i64, ptr %error_var, align 8, !dbg !2342
  ret i64 %26, !dbg !2342

noerr_block:                                      ; preds = %after_check
  %27 = load i64, ptr %retparam, align 8, !dbg !2342
  store i64 %27, ptr %0, align 8, !dbg !2342
  ret i64 0, !dbg !2342

if.exit:                                          ; preds = %and.phi
  %28 = load ptr, ptr %self, align 8, !dbg !2344
  %29 = call i64 @std.io.ReadBuffer.refill(ptr %28) #6, !dbg !2344
  %not_err17 = icmp eq i64 %29, 0, !dbg !2344
  %30 = call i1 @llvm.expect.i1(i1 %not_err17, i1 true), !dbg !2344
  br i1 %30, label %after_check19, label %assign_optional18, !dbg !2344

assign_optional18:                                ; preds = %if.exit
  store i64 %29, ptr %error_var16, align 8, !dbg !2344
  br label %guard_block20, !dbg !2344

after_check19:                                    ; preds = %if.exit
  br label %noerr_block21, !dbg !2344

guard_block20:                                    ; preds = %assign_optional18
  %31 = load i64, ptr %error_var16, align 8, !dbg !2344
  ret i64 %31, !dbg !2344

noerr_block21:                                    ; preds = %after_check19
  br label %if.exit22, !dbg !2344

if.exit22:                                        ; preds = %noerr_block21, %checkok
    #dbg_declare(ptr %n, !2345, !DIExpression(), !2346)
  %32 = load ptr, ptr %self, align 8, !dbg !2346
  %ptradd23 = getelementptr inbounds i8, ptr %32, i64 40, !dbg !2346
  %33 = load i64, ptr %ptradd23, align 8, !dbg !2346
  %34 = load ptr, ptr %self, align 8, !dbg !2346
  %ptradd24 = getelementptr inbounds i8, ptr %34, i64 32, !dbg !2346
  %35 = load i64, ptr %ptradd24, align 8, !dbg !2346
  %sub = sub i64 %33, %35, !dbg !2346
  store i64 %sub, ptr %x, align 8
  %ptradd25 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !2346
  %36 = load i64, ptr %ptradd25, align 8
  store i64 %36, ptr %.anon, align 8
  %37 = load i64, ptr %x, align 8
  store i64 %37, ptr %a, align 8
  %38 = load i64, ptr %.anon, align 8
  store i64 %38, ptr %b, align 8
  %39 = load i64, ptr %a, align 8, !dbg !2347
  %40 = load i64, ptr %b, align 8, !dbg !2347
  %lt = icmp ult i64 %39, %40, !dbg !2347
  br i1 %lt, label %cond.lhs, label %cond.rhs, !dbg !2347

cond.lhs:                                         ; preds = %if.exit22
  %41 = load i64, ptr %x, align 8, !dbg !2349
  br label %cond.phi, !dbg !2349

cond.rhs:                                         ; preds = %if.exit22
  %42 = load i64, ptr %.anon, align 8, !dbg !2349
  br label %cond.phi, !dbg !2349

cond.phi:                                         ; preds = %cond.rhs, %cond.lhs
  %val26 = phi i64 [ %41, %cond.lhs ], [ %42, %cond.rhs ], !dbg !2349
  store i64 %val26, ptr %n, align 8, !dbg !2349
  %43 = load ptr, ptr %self, align 8, !dbg !2351
  %ptradd27 = getelementptr inbounds i8, ptr %43, i64 16, !dbg !2351
  %44 = load %"char[]", ptr %ptradd27, align 8, !dbg !2351
  %45 = extractvalue %"char[]" %44, 0, !dbg !2351
  %46 = load ptr, ptr %self, align 8, !dbg !2351
  %ptradd28 = getelementptr inbounds i8, ptr %46, i64 32, !dbg !2351
  %47 = load i64, ptr %ptradd28, align 8, !dbg !2351
  %48 = extractvalue %"char[]" %44, 1, !dbg !2351
  %gt = icmp ugt i64 %47, %48, !dbg !2351
  %49 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !2351
  br i1 %49, label %panic29, label %checkok36, !dbg !2351

checkok36:                                        ; preds = %cond.phi
  %50 = load i64, ptr %n, align 8, !dbg !2351
  %add = add i64 %47, %50, !dbg !2351
  %gt37 = icmp ugt i64 %47, %add, !dbg !2351
  %sub38 = sub i64 %add, %47, !dbg !2351
  %51 = call i1 @llvm.expect.i1(i1 %gt37, i1 false), !dbg !2351
  br i1 %51, label %panic39, label %checkok47, !dbg !2351

checkok47:                                        ; preds = %checkok36
  %lt48 = icmp ult i64 %48, %add, !dbg !2351
  %sub49 = sub i64 %add, 1, !dbg !2351
  %52 = call i1 @llvm.expect.i1(i1 %lt48, i1 false), !dbg !2351
  br i1 %52, label %panic50, label %checkok60, !dbg !2351

checkok60:                                        ; preds = %checkok47
  %size = sub i64 %add, %47, !dbg !2351
  %ptradd61 = getelementptr inbounds i8, ptr %45, i64 %47, !dbg !2351
  %53 = insertvalue %"char[]" undef, ptr %ptradd61, 0, !dbg !2351
  %54 = insertvalue %"char[]" %53, i64 %size, 1, !dbg !2351
  %55 = load %"char[]", ptr %2, align 8, !dbg !2351
  %56 = extractvalue %"char[]" %55, 0, !dbg !2351
  %57 = extractvalue %"char[]" %55, 1, !dbg !2351
  %gt62 = icmp ugt i64 0, %57, !dbg !2351
  %58 = call i1 @llvm.expect.i1(i1 %gt62, i1 false), !dbg !2351
  br i1 %58, label %panic63, label %checkok73, !dbg !2351

checkok73:                                        ; preds = %checkok60
  %59 = load i64, ptr %n, align 8, !dbg !2351
  %add74 = add i64 0, %59, !dbg !2351
  %gt75 = icmp ugt i64 0, %add74, !dbg !2351
  %sub76 = sub i64 %add74, 0, !dbg !2351
  %60 = call i1 @llvm.expect.i1(i1 %gt75, i1 false), !dbg !2351
  br i1 %60, label %panic77, label %checkok85, !dbg !2351

checkok85:                                        ; preds = %checkok73
  %lt86 = icmp ult i64 %57, %add74, !dbg !2351
  %sub87 = sub i64 %add74, 1, !dbg !2351
  %61 = call i1 @llvm.expect.i1(i1 %lt86, i1 false), !dbg !2351
  br i1 %61, label %panic88, label %checkok98, !dbg !2351

checkok98:                                        ; preds = %checkok85
  %size99 = sub i64 %add74, 0, !dbg !2351
  %62 = insertvalue %"char[]" undef, ptr %56, 0, !dbg !2351
  %63 = insertvalue %"char[]" %62, i64 %size99, 1, !dbg !2351
  %64 = extractvalue %"char[]" %63, 0, !dbg !2351
  %65 = extractvalue %"char[]" %54, 0, !dbg !2351
  %66 = extractvalue %"char[]" %54, 1, !dbg !2351
  %67 = extractvalue %"char[]" %63, 1, !dbg !2351
  %neq = icmp ne i64 %67, %66, !dbg !2351
  %68 = call i1 @llvm.expect.i1(i1 %neq, i1 false), !dbg !2351
  br i1 %68, label %panic100, label %checkok110, !dbg !2351

checkok110:                                       ; preds = %checkok98
  %69 = mul i64 %66, 1, !dbg !2351
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %64, ptr align 1 %65, i64 %69, i1 false), !dbg !2351
  %70 = load ptr, ptr %self, align 8, !dbg !2352
  %ptradd111 = getelementptr inbounds i8, ptr %70, i64 32, !dbg !2352
  %71 = load i64, ptr %ptradd111, align 8, !dbg !2352
  %72 = load i64, ptr %n, align 8, !dbg !2352
  %add112 = add i64 %71, %72, !dbg !2352
  store i64 %add112, ptr %ptradd111, align 8, !dbg !2352
  %73 = load i64, ptr %n, align 8, !dbg !2353
  store i64 %73, ptr %0, align 8, !dbg !2353
  ret i64 0, !dbg !2353

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.190, i64 9 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.196, i64 4 }, ptr %indirectarg2, align 8
  %74 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %74(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 32) #5, !dbg !2337
  unreachable, !dbg !2337

panic29:                                          ; preds = %cond.phi
  store i64 %48, ptr %taddr, align 8
  %75 = insertvalue %any undef, ptr %taddr, 0
  %76 = insertvalue %any %75, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %47, ptr %taddr30, align 8
  %77 = insertvalue %any undef, ptr %taddr30, 0
  %78 = insertvalue %any %77, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.170, i64 61 }, ptr %indirectarg31, align 8
  store %"char[]" { ptr @.file.190, i64 9 }, ptr %indirectarg32, align 8
  store %"char[]" { ptr @.func.196, i64 4 }, ptr %indirectarg33, align 8
  store %any %76, ptr %varargslots, align 16
  %ptradd34 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %78, ptr %ptradd34, align 16
  %79 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %79, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg35, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg31, ptr align 8 %indirectarg32, ptr align 8 %indirectarg33, i32 44, ptr align 8 %indirectarg35) #5, !dbg !2351
  unreachable, !dbg !2351

panic39:                                          ; preds = %checkok36
  store i64 %sub38, ptr %taddr40, align 8
  %80 = insertvalue %any undef, ptr %taddr40, 0
  %81 = insertvalue %any %80, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.16, i64 43 }, ptr %indirectarg41, align 8
  store %"char[]" { ptr @.file.190, i64 9 }, ptr %indirectarg42, align 8
  store %"char[]" { ptr @.func.196, i64 4 }, ptr %indirectarg43, align 8
  store %any %81, ptr %varargslots44, align 16
  %82 = insertvalue %"any[]" undef, ptr %varargslots44, 0
  %"$$temp45" = insertvalue %"any[]" %82, i64 1, 1
  store %"any[]" %"$$temp45", ptr %indirectarg46, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg41, ptr align 8 %indirectarg42, ptr align 8 %indirectarg43, i32 44, ptr align 8 %indirectarg46) #5, !dbg !2351
  unreachable, !dbg !2351

panic50:                                          ; preds = %checkok47
  store i64 %sub49, ptr %taddr51, align 8
  %83 = insertvalue %any undef, ptr %taddr51, 0
  %84 = insertvalue %any %83, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %48, ptr %taddr52, align 8
  %85 = insertvalue %any undef, ptr %taddr52, 0
  %86 = insertvalue %any %85, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 60 }, ptr %indirectarg53, align 8
  store %"char[]" { ptr @.file.190, i64 9 }, ptr %indirectarg54, align 8
  store %"char[]" { ptr @.func.196, i64 4 }, ptr %indirectarg55, align 8
  store %any %84, ptr %varargslots56, align 16
  %ptradd57 = getelementptr inbounds i8, ptr %varargslots56, i64 16
  store %any %86, ptr %ptradd57, align 16
  %87 = insertvalue %"any[]" undef, ptr %varargslots56, 0
  %"$$temp58" = insertvalue %"any[]" %87, i64 2, 1
  store %"any[]" %"$$temp58", ptr %indirectarg59, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg53, ptr align 8 %indirectarg54, ptr align 8 %indirectarg55, i32 44, ptr align 8 %indirectarg59) #5, !dbg !2351
  unreachable, !dbg !2351

panic63:                                          ; preds = %checkok60
  store i64 %57, ptr %taddr64, align 8
  %88 = insertvalue %any undef, ptr %taddr64, 0
  %89 = insertvalue %any %88, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr65, align 8
  %90 = insertvalue %any undef, ptr %taddr65, 0
  %91 = insertvalue %any %90, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.170, i64 61 }, ptr %indirectarg66, align 8
  store %"char[]" { ptr @.file.190, i64 9 }, ptr %indirectarg67, align 8
  store %"char[]" { ptr @.func.196, i64 4 }, ptr %indirectarg68, align 8
  store %any %89, ptr %varargslots69, align 16
  %ptradd70 = getelementptr inbounds i8, ptr %varargslots69, i64 16
  store %any %91, ptr %ptradd70, align 16
  %92 = insertvalue %"any[]" undef, ptr %varargslots69, 0
  %"$$temp71" = insertvalue %"any[]" %92, i64 2, 1
  store %"any[]" %"$$temp71", ptr %indirectarg72, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg66, ptr align 8 %indirectarg67, ptr align 8 %indirectarg68, i32 44, ptr align 8 %indirectarg72) #5, !dbg !2351
  unreachable, !dbg !2351

panic77:                                          ; preds = %checkok73
  store i64 %sub76, ptr %taddr78, align 8
  %93 = insertvalue %any undef, ptr %taddr78, 0
  %94 = insertvalue %any %93, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.16, i64 43 }, ptr %indirectarg79, align 8
  store %"char[]" { ptr @.file.190, i64 9 }, ptr %indirectarg80, align 8
  store %"char[]" { ptr @.func.196, i64 4 }, ptr %indirectarg81, align 8
  store %any %94, ptr %varargslots82, align 16
  %95 = insertvalue %"any[]" undef, ptr %varargslots82, 0
  %"$$temp83" = insertvalue %"any[]" %95, i64 1, 1
  store %"any[]" %"$$temp83", ptr %indirectarg84, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg79, ptr align 8 %indirectarg80, ptr align 8 %indirectarg81, i32 44, ptr align 8 %indirectarg84) #5, !dbg !2351
  unreachable, !dbg !2351

panic88:                                          ; preds = %checkok85
  store i64 %sub87, ptr %taddr89, align 8
  %96 = insertvalue %any undef, ptr %taddr89, 0
  %97 = insertvalue %any %96, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %57, ptr %taddr90, align 8
  %98 = insertvalue %any undef, ptr %taddr90, 0
  %99 = insertvalue %any %98, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 60 }, ptr %indirectarg91, align 8
  store %"char[]" { ptr @.file.190, i64 9 }, ptr %indirectarg92, align 8
  store %"char[]" { ptr @.func.196, i64 4 }, ptr %indirectarg93, align 8
  store %any %97, ptr %varargslots94, align 16
  %ptradd95 = getelementptr inbounds i8, ptr %varargslots94, i64 16
  store %any %99, ptr %ptradd95, align 16
  %100 = insertvalue %"any[]" undef, ptr %varargslots94, 0
  %"$$temp96" = insertvalue %"any[]" %100, i64 2, 1
  store %"any[]" %"$$temp96", ptr %indirectarg97, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg91, ptr align 8 %indirectarg92, ptr align 8 %indirectarg93, i32 44, ptr align 8 %indirectarg97) #5, !dbg !2351
  unreachable, !dbg !2351

panic100:                                         ; preds = %checkok98
  store i64 %67, ptr %taddr101, align 8
  %101 = insertvalue %any undef, ptr %taddr101, 0
  %102 = insertvalue %any %101, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %66, ptr %taddr102, align 8
  %103 = insertvalue %any undef, ptr %taddr102, 0
  %104 = insertvalue %any %103, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.198, i64 38 }, ptr %indirectarg103, align 8
  store %"char[]" { ptr @.file.190, i64 9 }, ptr %indirectarg104, align 8
  store %"char[]" { ptr @.func.196, i64 4 }, ptr %indirectarg105, align 8
  store %any %102, ptr %varargslots106, align 16
  %ptradd107 = getelementptr inbounds i8, ptr %varargslots106, i64 16
  store %any %104, ptr %ptradd107, align 16
  %105 = insertvalue %"any[]" undef, ptr %varargslots106, 0
  %"$$temp108" = insertvalue %"any[]" %105, i64 2, 1
  store %"any[]" %"$$temp108", ptr %indirectarg109, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg103, ptr align 8 %indirectarg104, ptr align 8 %indirectarg105, i32 44, ptr align 8 %indirectarg109) #5, !dbg !2351
  unreachable, !dbg !2351
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.ReadBuffer.read_byte(ptr %0, ptr %1) #0 comdat !dbg !2354 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %error_var = alloca i64, align 8
  %c = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr13 = alloca i64, align 8
  %indirectarg14 = alloca %"char[]", align 8
  %indirectarg15 = alloca %"char[]", align 8
  %indirectarg16 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg18 = alloca %"any[]", align 8
  %reterr = alloca i64, align 8
  %2 = icmp eq ptr %1, null, !dbg !2357
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !2357
  br i1 %3, label %panic, label %checkok, !dbg !2357

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !2358, !DIExpression(), !2359)
  %4 = load ptr, ptr %self, align 8, !dbg !2360
  %ptradd = getelementptr inbounds i8, ptr %4, i64 32, !dbg !2360
  %5 = load i64, ptr %ptradd, align 8, !dbg !2360
  %6 = load ptr, ptr %self, align 8, !dbg !2360
  %ptradd3 = getelementptr inbounds i8, ptr %6, i64 40, !dbg !2360
  %7 = load i64, ptr %ptradd3, align 8, !dbg !2360
  %eq = icmp eq i64 %5, %7, !dbg !2360
  br i1 %eq, label %if.then, label %if.exit, !dbg !2360

if.then:                                          ; preds = %checkok
  %8 = load ptr, ptr %self, align 8, !dbg !2360
  %9 = call i64 @std.io.ReadBuffer.refill(ptr %8) #6, !dbg !2360
  %not_err = icmp eq i64 %9, 0, !dbg !2360
  %10 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !2360
  br i1 %10, label %after_check, label %assign_optional, !dbg !2360

assign_optional:                                  ; preds = %if.then
  store i64 %9, ptr %error_var, align 8, !dbg !2360
  br label %guard_block, !dbg !2360

after_check:                                      ; preds = %if.then
  br label %noerr_block, !dbg !2360

guard_block:                                      ; preds = %assign_optional
  %11 = load i64, ptr %error_var, align 8, !dbg !2360
  ret i64 %11, !dbg !2360

noerr_block:                                      ; preds = %after_check
  br label %if.exit, !dbg !2360

if.exit:                                          ; preds = %noerr_block, %checkok
  %12 = load ptr, ptr %self, align 8, !dbg !2361
  %ptradd4 = getelementptr inbounds i8, ptr %12, i64 32, !dbg !2361
  %13 = load i64, ptr %ptradd4, align 8, !dbg !2361
  %14 = load ptr, ptr %self, align 8, !dbg !2361
  %ptradd5 = getelementptr inbounds i8, ptr %14, i64 40, !dbg !2361
  %15 = load i64, ptr %ptradd5, align 8, !dbg !2361
  %eq6 = icmp eq i64 %13, %15, !dbg !2361
  br i1 %eq6, label %if.then7, label %if.exit8, !dbg !2361

if.then7:                                         ; preds = %if.exit
  ret i64 ptrtoint (ptr @std.io.EOF to i64), !dbg !2361

if.exit8:                                         ; preds = %if.exit
    #dbg_declare(ptr %c, !2362, !DIExpression(), !2363)
  %16 = load ptr, ptr %self, align 8, !dbg !2363
  %ptradd9 = getelementptr inbounds i8, ptr %16, i64 16, !dbg !2363
  %ptradd10 = getelementptr inbounds i8, ptr %ptradd9, i64 8, !dbg !2363
  %17 = load i64, ptr %ptradd10, align 8, !dbg !2363
  %18 = load ptr, ptr %ptradd9, align 8, !dbg !2363
  %19 = load ptr, ptr %self, align 8, !dbg !2363
  %ptradd11 = getelementptr inbounds i8, ptr %19, i64 32, !dbg !2363
  %20 = load i64, ptr %ptradd11, align 8, !dbg !2363
  %ge = icmp uge i64 %20, %17, !dbg !2363
  %21 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !2363
  br i1 %21, label %panic12, label %checkok19, !dbg !2363

checkok19:                                        ; preds = %if.exit8
  %ptradd20 = getelementptr inbounds i8, ptr %18, i64 %20, !dbg !2363
  %22 = load i8, ptr %ptradd20, align 1, !dbg !2363
  store i8 %22, ptr %c, align 1, !dbg !2363
  %23 = load ptr, ptr %self, align 8, !dbg !2364
  %ptradd21 = getelementptr inbounds i8, ptr %23, i64 32, !dbg !2364
  %24 = load i64, ptr %ptradd21, align 8, !dbg !2364
  %add = add i64 %24, 1, !dbg !2364
  store i64 %add, ptr %ptradd21, align 8, !dbg !2364
  %25 = load i8, ptr %c, align 1, !dbg !2365
  store i8 %25, ptr %0, align 1, !dbg !2365
  ret i64 0, !dbg !2365

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.190, i64 9 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.199, i64 9 }, ptr %indirectarg2, align 8
  %26 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %26(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 49) #5, !dbg !2359
  unreachable, !dbg !2359

panic12:                                          ; preds = %if.exit8
  store i64 %17, ptr %taddr, align 8
  %27 = insertvalue %any undef, ptr %taddr, 0
  %28 = insertvalue %any %27, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %20, ptr %taddr13, align 8
  %29 = insertvalue %any undef, ptr %taddr13, 0
  %30 = insertvalue %any %29, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.71, i64 59 }, ptr %indirectarg14, align 8
  store %"char[]" { ptr @.file.190, i64 9 }, ptr %indirectarg15, align 8
  store %"char[]" { ptr @.func.199, i64 9 }, ptr %indirectarg16, align 8
  store %any %28, ptr %varargslots, align 16
  %ptradd17 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %30, ptr %ptradd17, align 16
  %31 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %31, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg18, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg14, ptr align 8 %indirectarg15, ptr align 8 %indirectarg16, i32 53, ptr align 8 %indirectarg18) #5, !dbg !2363
  unreachable, !dbg !2363
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @std.io.ReadBuffer.refill(ptr %0) #0 !dbg !2366 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %error_var = alloca i64, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg7 = alloca %"char[]", align 8
  %indirectarg8 = alloca %"char[]", align 8
  %retparam = alloca i64, align 8
  %indirectarg9 = alloca %"char[]", align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !2367
  %1 = icmp eq ptr %0, null, !dbg !2367
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2367
  br i1 %2, label %panic, label %checkok, !dbg !2367

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2368, !DIExpression(), !2369)
  %3 = load ptr, ptr %self, align 8, !dbg !2370
  %ptradd = getelementptr inbounds i8, ptr %3, i64 32, !dbg !2370
  store i64 0, ptr %ptradd, align 8, !dbg !2370
  %4 = load ptr, ptr %self, align 8, !dbg !2371
  %5 = load ptr, ptr %self, align 8, !dbg !2371
  %ptradd3 = getelementptr inbounds i8, ptr %5, i64 16, !dbg !2371
  %ptradd4 = getelementptr inbounds i8, ptr %4, i64 8, !dbg !2371
  %6 = load i64, ptr %ptradd4, align 8, !dbg !2371
  %7 = inttoptr i64 %6 to ptr, !dbg !2371
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !2367
  %8 = icmp eq ptr %7, %type, !dbg !2367
  br i1 %8, label %cache_hit, label %cache_miss, !dbg !2367

cache_miss:                                       ; preds = %checkok
  %ptradd5 = getelementptr inbounds i8, ptr %7, i64 16, !dbg !2367
  %9 = load ptr, ptr %ptradd5, align 8, !dbg !2367
  %10 = call ptr @.dyn_search(ptr %9, ptr @"$sel.read"), !dbg !2367
  store ptr %10, ptr %.inlinecache, align 8, !dbg !2367
  store ptr %7, ptr %.cachedtype, align 8, !dbg !2367
  br label %11, !dbg !2367

cache_hit:                                        ; preds = %checkok
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !2367
  br label %11, !dbg !2367

11:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %10, %cache_miss ], !dbg !2367
  %12 = icmp eq ptr %fn_phi, null, !dbg !2367
  br i1 %12, label %missing_function, label %match, !dbg !2367

missing_function:                                 ; preds = %11
  store %"char[]" { ptr @.panic_msg.197, i64 41 }, ptr %indirectarg6, align 8
  store %"char[]" { ptr @.file.190, i64 9 }, ptr %indirectarg7, align 8
  store %"char[]" { ptr @.func.200, i64 6 }, ptr %indirectarg8, align 8
  %13 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %13(ptr align 8 %indirectarg6, ptr align 8 %indirectarg7, ptr align 8 %indirectarg8, i32 61) #5, !dbg !2371
  unreachable, !dbg !2371

match:                                            ; preds = %11
  %14 = load ptr, ptr %4, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg9, ptr align 8 %ptradd3, i32 16, i1 false)
  %15 = call i64 %fn_phi(ptr %retparam, ptr %14, ptr align 8 %indirectarg9), !dbg !2371
  %not_err = icmp eq i64 %15, 0, !dbg !2371
  %16 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !2371
  br i1 %16, label %after_check, label %assign_optional, !dbg !2371

assign_optional:                                  ; preds = %match
  store i64 %15, ptr %error_var, align 8, !dbg !2371
  br label %guard_block, !dbg !2371

after_check:                                      ; preds = %match
  br label %noerr_block, !dbg !2371

guard_block:                                      ; preds = %assign_optional
  %17 = load i64, ptr %error_var, align 8, !dbg !2371
  ret i64 %17, !dbg !2371

noerr_block:                                      ; preds = %after_check
  %18 = load ptr, ptr %self, align 8, !dbg !2371
  %ptradd10 = getelementptr inbounds i8, ptr %18, i64 40, !dbg !2371
  %19 = load i64, ptr %retparam, align 8, !dbg !2371
  store i64 %19, ptr %ptradd10, align 8, !dbg !2371
  ret i64 0, !dbg !2371

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.190, i64 9 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.200, i64 6 }, ptr %indirectarg2, align 8
  %20 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %20(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 58) #5, !dbg !2369
  unreachable, !dbg !2369
}

; Function Attrs: nounwind ssp uwtable
define weak_odr ptr @std.io.WriteBuffer.init(ptr %0, ptr align 8 %1, ptr align 8 %2) #0 comdat !dbg !2372 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %.assign_list = alloca %WriteBuffer, align 8
  %indirectarg15 = alloca %"char[]", align 8
  %indirectarg16 = alloca %"char[]", align 8
  %indirectarg17 = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr20 = alloca i64, align 8
  %indirectarg21 = alloca %"char[]", align 8
  %indirectarg22 = alloca %"char[]", align 8
  %indirectarg23 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg25 = alloca %"any[]", align 8
  %3 = icmp eq ptr %0, null, !dbg !2381
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !2381
  br i1 %4, label %panic, label %checkok, !dbg !2381

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2382, !DIExpression(), !2383)
    #dbg_declare(ptr %1, !2384, !DIExpression(), !2383)
    #dbg_declare(ptr %2, !2385, !DIExpression(), !2383)
  %ptradd = getelementptr inbounds i8, ptr %2, i64 8, !dbg !2386
  %5 = load i64, ptr %ptradd, align 8, !dbg !2386
  %lt = icmp ult i64 0, %5, !dbg !2386
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !2386

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.201, i64 63 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.file.190, i64 9 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg5, align 8
  %6 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %6(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, i32 74) #5, !dbg !2386
  unreachable, !dbg !2386

assert_ok:                                        ; preds = %checkok
  %7 = load ptr, ptr %self, align 8, !dbg !2388
  %ptradd6 = getelementptr inbounds i8, ptr %7, i64 16, !dbg !2388
  %ptradd7 = getelementptr inbounds i8, ptr %ptradd6, i64 8, !dbg !2388
  %8 = load i64, ptr %ptradd7, align 8, !dbg !2388
  %eq = icmp eq i64 0, %8, !dbg !2388
  br i1 %eq, label %assert_ok12, label %assert_fail8, !dbg !2388

assert_fail8:                                     ; preds = %assert_ok
  store %"char[]" { ptr @.panic_msg.192, i64 88 }, ptr %indirectarg9, align 8
  store %"char[]" { ptr @.file.190, i64 9 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg11, align 8
  %9 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %9(ptr align 8 %indirectarg9, ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, i32 75) #5, !dbg !2388
  unreachable, !dbg !2388

assert_ok12:                                      ; preds = %assert_ok
  call void @llvm.memset.p0.i64(ptr align 8 %.assign_list, i8 0, i64 40, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %.assign_list, ptr align 8 %1, i32 16, i1 false), !dbg !2389
  %ptradd13 = getelementptr inbounds i8, ptr %.assign_list, i64 16, !dbg !2389
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %ptradd13, ptr align 8 %2, i32 16, i1 false), !dbg !2389
  %10 = load ptr, ptr %self, align 8, !dbg !2389
  %checknull = icmp eq ptr %10, null, !dbg !2389
  %11 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !2389
  br i1 %11, label %panic14, label %checkok18, !dbg !2389

checkok18:                                        ; preds = %assert_ok12
  %12 = ptrtoint ptr %10 to i64, !dbg !2389
  %13 = urem i64 %12, 8, !dbg !2389
  %14 = icmp ne i64 %13, 0, !dbg !2389
  %15 = call i1 @llvm.expect.i1(i1 %14, i1 false), !dbg !2389
  br i1 %15, label %panic19, label %checkok26, !dbg !2389

checkok26:                                        ; preds = %checkok18
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %10, ptr align 8 %.assign_list, i32 40, i1 false), !dbg !2389
  %16 = load ptr, ptr %self, align 8, !dbg !2390
  ret ptr %16, !dbg !2390

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.190, i64 9 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg2, align 8
  %17 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %17(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 77) #5, !dbg !2383
  unreachable, !dbg !2383

panic14:                                          ; preds = %assert_ok12
  store %"char[]" { ptr @.panic_msg.2, i64 45 }, ptr %indirectarg15, align 8
  store %"char[]" { ptr @.file.190, i64 9 }, ptr %indirectarg16, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg17, align 8
  %18 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %18(ptr align 8 %indirectarg15, ptr align 8 %indirectarg16, ptr align 8 %indirectarg17, i32 79) #5, !dbg !2389
  unreachable, !dbg !2389

panic19:                                          ; preds = %checkok18
  store i64 8, ptr %taddr, align 8
  %19 = insertvalue %any undef, ptr %taddr, 0
  %20 = insertvalue %any %19, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %13, ptr %taddr20, align 8
  %21 = insertvalue %any undef, ptr %taddr20, 0
  %22 = insertvalue %any %21, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg21, align 8
  store %"char[]" { ptr @.file.190, i64 9 }, ptr %indirectarg22, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg23, align 8
  store %any %20, ptr %varargslots, align 16
  %ptradd24 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %22, ptr %ptradd24, align 16
  %23 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %23, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg25, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg21, ptr align 8 %indirectarg22, ptr align 8 %indirectarg23, i32 79, ptr align 8 %indirectarg25) #5, !dbg !2389
  unreachable, !dbg !2389
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.io.WriteBuffer.str_view(ptr noalias sret(%"char[]") align 8 %0, ptr %1) #0 comdat !dbg !2391 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %taddr = alloca i64, align 8
  %taddr4 = alloca i64, align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg7 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg9 = alloca %"any[]", align 8
  %taddr14 = alloca i64, align 8
  %indirectarg15 = alloca %"char[]", align 8
  %indirectarg16 = alloca %"char[]", align 8
  %indirectarg17 = alloca %"char[]", align 8
  %varargslots18 = alloca [1 x %any], align 16
  %indirectarg20 = alloca %"any[]", align 8
  %taddr24 = alloca i64, align 8
  %taddr25 = alloca i64, align 8
  %indirectarg26 = alloca %"char[]", align 8
  %indirectarg27 = alloca %"char[]", align 8
  %indirectarg28 = alloca %"char[]", align 8
  %varargslots29 = alloca [2 x %any], align 16
  %indirectarg32 = alloca %"any[]", align 8
  %2 = icmp eq ptr %1, null, !dbg !2394
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !2394
  br i1 %3, label %panic, label %checkok, !dbg !2394

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !2395, !DIExpression(), !2396)
  %4 = load ptr, ptr %self, align 8, !dbg !2397
  %ptradd = getelementptr inbounds i8, ptr %4, i64 16, !dbg !2397
  %5 = load %"char[]", ptr %ptradd, align 8, !dbg !2397
  %6 = extractvalue %"char[]" %5, 0, !dbg !2397
  %7 = extractvalue %"char[]" %5, 1, !dbg !2397
  %gt = icmp ugt i64 0, %7, !dbg !2397
  %8 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !2397
  br i1 %8, label %panic3, label %checkok10, !dbg !2397

checkok10:                                        ; preds = %checkok
  %9 = load ptr, ptr %self, align 8, !dbg !2397
  %ptradd11 = getelementptr inbounds i8, ptr %9, i64 32, !dbg !2397
  %10 = load i64, ptr %ptradd11, align 8, !dbg !2397
  %add = add i64 0, %10, !dbg !2397
  %gt12 = icmp ugt i64 0, %add, !dbg !2397
  %sub = sub i64 %add, 0, !dbg !2397
  %11 = call i1 @llvm.expect.i1(i1 %gt12, i1 false), !dbg !2397
  br i1 %11, label %panic13, label %checkok21, !dbg !2397

checkok21:                                        ; preds = %checkok10
  %lt = icmp ult i64 %7, %add, !dbg !2397
  %sub22 = sub i64 %add, 1, !dbg !2397
  %12 = call i1 @llvm.expect.i1(i1 %lt, i1 false), !dbg !2397
  br i1 %12, label %panic23, label %checkok33, !dbg !2397

checkok33:                                        ; preds = %checkok21
  %size = sub i64 %add, 0, !dbg !2397
  %13 = insertvalue %"char[]" undef, ptr %6, 0, !dbg !2397
  %14 = insertvalue %"char[]" %13, i64 %size, 1, !dbg !2397
  store %"char[]" %14, ptr %0, align 8, !dbg !2397
  ret void, !dbg !2397

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.190, i64 9 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.193, i64 8 }, ptr %indirectarg2, align 8
  %15 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %15(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 83) #5, !dbg !2396
  unreachable, !dbg !2396

panic3:                                           ; preds = %checkok
  store i64 %7, ptr %taddr, align 8
  %16 = insertvalue %any undef, ptr %taddr, 0
  %17 = insertvalue %any %16, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr4, align 8
  %18 = insertvalue %any undef, ptr %taddr4, 0
  %19 = insertvalue %any %18, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.170, i64 61 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.file.190, i64 9 }, ptr %indirectarg6, align 8
  store %"char[]" { ptr @.func.193, i64 8 }, ptr %indirectarg7, align 8
  store %any %17, ptr %varargslots, align 16
  %ptradd8 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %19, ptr %ptradd8, align 16
  %20 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %20, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg9, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, ptr align 8 %indirectarg7, i32 85, ptr align 8 %indirectarg9) #5, !dbg !2397
  unreachable, !dbg !2397

panic13:                                          ; preds = %checkok10
  store i64 %sub, ptr %taddr14, align 8
  %21 = insertvalue %any undef, ptr %taddr14, 0
  %22 = insertvalue %any %21, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.16, i64 43 }, ptr %indirectarg15, align 8
  store %"char[]" { ptr @.file.190, i64 9 }, ptr %indirectarg16, align 8
  store %"char[]" { ptr @.func.193, i64 8 }, ptr %indirectarg17, align 8
  store %any %22, ptr %varargslots18, align 16
  %23 = insertvalue %"any[]" undef, ptr %varargslots18, 0
  %"$$temp19" = insertvalue %"any[]" %23, i64 1, 1
  store %"any[]" %"$$temp19", ptr %indirectarg20, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg15, ptr align 8 %indirectarg16, ptr align 8 %indirectarg17, i32 85, ptr align 8 %indirectarg20) #5, !dbg !2397
  unreachable, !dbg !2397

panic23:                                          ; preds = %checkok21
  store i64 %sub22, ptr %taddr24, align 8
  %24 = insertvalue %any undef, ptr %taddr24, 0
  %25 = insertvalue %any %24, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %7, ptr %taddr25, align 8
  %26 = insertvalue %any undef, ptr %taddr25, 0
  %27 = insertvalue %any %26, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 60 }, ptr %indirectarg26, align 8
  store %"char[]" { ptr @.file.190, i64 9 }, ptr %indirectarg27, align 8
  store %"char[]" { ptr @.func.193, i64 8 }, ptr %indirectarg28, align 8
  store %any %25, ptr %varargslots29, align 16
  %ptradd30 = getelementptr inbounds i8, ptr %varargslots29, i64 16
  store %any %27, ptr %ptradd30, align 16
  %28 = insertvalue %"any[]" undef, ptr %varargslots29, 0
  %"$$temp31" = insertvalue %"any[]" %28, i64 2, 1
  store %"any[]" %"$$temp31", ptr %indirectarg32, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg26, ptr align 8 %indirectarg27, ptr align 8 %indirectarg28, i32 85, ptr align 8 %indirectarg32) #5, !dbg !2397
  unreachable, !dbg !2397
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.WriteBuffer.close(ptr %0) #0 comdat !dbg !2398 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %reterr = alloca i64, align 8
  %.inlinecache4 = alloca ptr, align 8
  %.cachedtype5 = alloca ptr, align 8
  %indirectarg12 = alloca %"char[]", align 8
  %indirectarg13 = alloca %"char[]", align 8
  %indirectarg14 = alloca %"char[]", align 8
  store ptr null, ptr %.cachedtype5, align 8, !dbg !2401
  store ptr null, ptr %.cachedtype, align 8, !dbg !2401
  %1 = icmp eq ptr %0, null, !dbg !2401
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2401
  br i1 %2, label %panic, label %checkok, !dbg !2401

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2402, !DIExpression(), !2403)
  %3 = load ptr, ptr %self, align 8, !dbg !2404
  %4 = load %any, ptr %3, align 8, !dbg !2404
  %5 = extractvalue %any %4, 1, !dbg !2404
  %6 = inttoptr i64 %5 to ptr, !dbg !2404
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !2401
  %7 = icmp eq ptr %6, %type, !dbg !2401
  br i1 %7, label %cache_hit, label %cache_miss, !dbg !2401

cache_miss:                                       ; preds = %checkok
  %ptradd = getelementptr inbounds i8, ptr %6, i64 16, !dbg !2401
  %8 = load ptr, ptr %ptradd, align 8, !dbg !2401
  %9 = call ptr @.dyn_search(ptr %8, ptr @"$sel.close"), !dbg !2401
  store ptr %9, ptr %.inlinecache, align 8, !dbg !2401
  store ptr %6, ptr %.cachedtype, align 8, !dbg !2401
  br label %10, !dbg !2401

cache_hit:                                        ; preds = %checkok
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !2401
  br label %10, !dbg !2401

10:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %9, %cache_miss ], !dbg !2401
  %i2b = icmp ne ptr %fn_phi, null, !dbg !2401
  br i1 %i2b, label %if.then, label %if.exit, !dbg !2401

if.then:                                          ; preds = %10
  %11 = load ptr, ptr %self, align 8, !dbg !2404
  %ptradd3 = getelementptr inbounds i8, ptr %11, i64 8, !dbg !2404
  %12 = load i64, ptr %ptradd3, align 8, !dbg !2404
  %13 = inttoptr i64 %12 to ptr, !dbg !2404
  %type6 = load ptr, ptr %.cachedtype5, align 8, !dbg !2401
  %14 = icmp eq ptr %13, %type6, !dbg !2401
  br i1 %14, label %cache_hit9, label %cache_miss7, !dbg !2401

cache_miss7:                                      ; preds = %if.then
  %ptradd8 = getelementptr inbounds i8, ptr %13, i64 16, !dbg !2401
  %15 = load ptr, ptr %ptradd8, align 8, !dbg !2401
  %16 = call ptr @.dyn_search(ptr %15, ptr @"$sel.close"), !dbg !2401
  store ptr %16, ptr %.inlinecache4, align 8, !dbg !2401
  store ptr %13, ptr %.cachedtype5, align 8, !dbg !2401
  br label %17, !dbg !2401

cache_hit9:                                       ; preds = %if.then
  %cache_hit_fn10 = load ptr, ptr %.inlinecache4, align 8, !dbg !2401
  br label %17, !dbg !2401

17:                                               ; preds = %cache_hit9, %cache_miss7
  %fn_phi11 = phi ptr [ %cache_hit_fn10, %cache_hit9 ], [ %16, %cache_miss7 ], !dbg !2401
  %18 = icmp eq ptr %fn_phi11, null, !dbg !2401
  br i1 %18, label %missing_function, label %match, !dbg !2401

missing_function:                                 ; preds = %17
  store %"char[]" { ptr @.panic_msg.195, i64 42 }, ptr %indirectarg12, align 8
  store %"char[]" { ptr @.file.190, i64 9 }, ptr %indirectarg13, align 8
  store %"char[]" { ptr @.func.194, i64 5 }, ptr %indirectarg14, align 8
  %19 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %19(ptr align 8 %indirectarg12, ptr align 8 %indirectarg13, ptr align 8 %indirectarg14, i32 90) #5, !dbg !2404
  unreachable, !dbg !2404

match:                                            ; preds = %17
  %20 = load ptr, ptr %11, align 8, !dbg !2404
  %21 = call i64 %fn_phi11(ptr %20), !dbg !2404
  %not_err = icmp eq i64 %21, 0, !dbg !2404
  %22 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !2404
  br i1 %22, label %after_check, label %assign_optional, !dbg !2404

assign_optional:                                  ; preds = %match
  store i64 %21, ptr %reterr, align 8, !dbg !2404
  br label %err_retblock, !dbg !2404

after_check:                                      ; preds = %match
  ret i64 0, !dbg !2404

err_retblock:                                     ; preds = %assign_optional
  %23 = load i64, ptr %reterr, align 8, !dbg !2404
  ret i64 %23, !dbg !2404

if.exit:                                          ; preds = %10
  ret i64 0, !dbg !2404

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.190, i64 9 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.194, i64 5 }, ptr %indirectarg2, align 8
  %24 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %24(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 88) #5, !dbg !2403
  unreachable, !dbg !2403
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.WriteBuffer.flush(ptr %0) #0 comdat !dbg !2405 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %error_var = alloca i64, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %error_var3 = alloca i64, align 8
  %.inlinecache5 = alloca ptr, align 8
  %.cachedtype6 = alloca ptr, align 8
  %indirectarg13 = alloca %"char[]", align 8
  %indirectarg14 = alloca %"char[]", align 8
  %indirectarg15 = alloca %"char[]", align 8
  store ptr null, ptr %.cachedtype6, align 8, !dbg !2406
  store ptr null, ptr %.cachedtype, align 8, !dbg !2406
  %1 = icmp eq ptr %0, null, !dbg !2406
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2406
  br i1 %2, label %panic, label %checkok, !dbg !2406

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2407, !DIExpression(), !2408)
  %3 = load ptr, ptr %self, align 8, !dbg !2409
  %4 = call i64 @std.io.WriteBuffer.write_pending(ptr %3), !dbg !2409
  %not_err = icmp eq i64 %4, 0, !dbg !2409
  %5 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !2409
  br i1 %5, label %after_check, label %assign_optional, !dbg !2409

assign_optional:                                  ; preds = %checkok
  store i64 %4, ptr %error_var, align 8, !dbg !2409
  br label %guard_block, !dbg !2409

after_check:                                      ; preds = %checkok
  br label %noerr_block, !dbg !2409

guard_block:                                      ; preds = %assign_optional
  %6 = load i64, ptr %error_var, align 8, !dbg !2409
  ret i64 %6, !dbg !2409

noerr_block:                                      ; preds = %after_check
  %7 = load ptr, ptr %self, align 8, !dbg !2410
  %8 = load %any, ptr %7, align 8, !dbg !2410
  %9 = extractvalue %any %8, 1, !dbg !2410
  %10 = inttoptr i64 %9 to ptr, !dbg !2410
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !2406
  %11 = icmp eq ptr %10, %type, !dbg !2406
  br i1 %11, label %cache_hit, label %cache_miss, !dbg !2406

cache_miss:                                       ; preds = %noerr_block
  %ptradd = getelementptr inbounds i8, ptr %10, i64 16, !dbg !2406
  %12 = load ptr, ptr %ptradd, align 8, !dbg !2406
  %13 = call ptr @.dyn_search(ptr %12, ptr @"$sel.flush"), !dbg !2406
  store ptr %13, ptr %.inlinecache, align 8, !dbg !2406
  store ptr %10, ptr %.cachedtype, align 8, !dbg !2406
  br label %14, !dbg !2406

cache_hit:                                        ; preds = %noerr_block
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !2406
  br label %14, !dbg !2406

14:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %13, %cache_miss ], !dbg !2406
  %i2b = icmp ne ptr %fn_phi, null, !dbg !2406
  br i1 %i2b, label %if.then, label %if.exit, !dbg !2406

if.then:                                          ; preds = %14
  %15 = load ptr, ptr %self, align 8, !dbg !2410
  %ptradd4 = getelementptr inbounds i8, ptr %15, i64 8, !dbg !2410
  %16 = load i64, ptr %ptradd4, align 8, !dbg !2410
  %17 = inttoptr i64 %16 to ptr, !dbg !2410
  %type7 = load ptr, ptr %.cachedtype6, align 8, !dbg !2406
  %18 = icmp eq ptr %17, %type7, !dbg !2406
  br i1 %18, label %cache_hit10, label %cache_miss8, !dbg !2406

cache_miss8:                                      ; preds = %if.then
  %ptradd9 = getelementptr inbounds i8, ptr %17, i64 16, !dbg !2406
  %19 = load ptr, ptr %ptradd9, align 8, !dbg !2406
  %20 = call ptr @.dyn_search(ptr %19, ptr @"$sel.flush"), !dbg !2406
  store ptr %20, ptr %.inlinecache5, align 8, !dbg !2406
  store ptr %17, ptr %.cachedtype6, align 8, !dbg !2406
  br label %21, !dbg !2406

cache_hit10:                                      ; preds = %if.then
  %cache_hit_fn11 = load ptr, ptr %.inlinecache5, align 8, !dbg !2406
  br label %21, !dbg !2406

21:                                               ; preds = %cache_hit10, %cache_miss8
  %fn_phi12 = phi ptr [ %cache_hit_fn11, %cache_hit10 ], [ %20, %cache_miss8 ], !dbg !2406
  %22 = icmp eq ptr %fn_phi12, null, !dbg !2406
  br i1 %22, label %missing_function, label %match, !dbg !2406

missing_function:                                 ; preds = %21
  store %"char[]" { ptr @.panic_msg.181, i64 42 }, ptr %indirectarg13, align 8
  store %"char[]" { ptr @.file.190, i64 9 }, ptr %indirectarg14, align 8
  store %"char[]" { ptr @.func.10, i64 5 }, ptr %indirectarg15, align 8
  %23 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %23(ptr align 8 %indirectarg13, ptr align 8 %indirectarg14, ptr align 8 %indirectarg15, i32 96) #5, !dbg !2410
  unreachable, !dbg !2410

match:                                            ; preds = %21
  %24 = load ptr, ptr %15, align 8, !dbg !2410
  %25 = call i64 %fn_phi12(ptr %24), !dbg !2410
  %not_err16 = icmp eq i64 %25, 0, !dbg !2410
  %26 = call i1 @llvm.expect.i1(i1 %not_err16, i1 true), !dbg !2410
  br i1 %26, label %after_check18, label %assign_optional17, !dbg !2410

assign_optional17:                                ; preds = %match
  store i64 %25, ptr %error_var3, align 8, !dbg !2410
  br label %guard_block19, !dbg !2410

after_check18:                                    ; preds = %match
  br label %noerr_block20, !dbg !2410

guard_block19:                                    ; preds = %assign_optional17
  %27 = load i64, ptr %error_var3, align 8, !dbg !2410
  ret i64 %27, !dbg !2410

noerr_block20:                                    ; preds = %after_check18
  br label %if.exit, !dbg !2410

if.exit:                                          ; preds = %noerr_block20, %14
  ret i64 0, !dbg !2410

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.190, i64 9 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.10, i64 5 }, ptr %indirectarg2, align 8
  %28 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %28(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 93) #5, !dbg !2408
  unreachable, !dbg !2408
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.WriteBuffer.write(ptr %0, ptr %1, ptr align 8 %2) #0 comdat !dbg !2411 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %n = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr7 = alloca i64, align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg12 = alloca %"any[]", align 8
  %taddr18 = alloca i64, align 8
  %taddr19 = alloca i64, align 8
  %indirectarg20 = alloca %"char[]", align 8
  %indirectarg21 = alloca %"char[]", align 8
  %indirectarg22 = alloca %"char[]", align 8
  %varargslots23 = alloca [2 x %any], align 16
  %indirectarg26 = alloca %"any[]", align 8
  %taddr32 = alloca i64, align 8
  %indirectarg33 = alloca %"char[]", align 8
  %indirectarg34 = alloca %"char[]", align 8
  %indirectarg35 = alloca %"char[]", align 8
  %varargslots36 = alloca [1 x %any], align 16
  %indirectarg38 = alloca %"any[]", align 8
  %taddr43 = alloca i64, align 8
  %taddr44 = alloca i64, align 8
  %indirectarg45 = alloca %"char[]", align 8
  %indirectarg46 = alloca %"char[]", align 8
  %indirectarg47 = alloca %"char[]", align 8
  %varargslots48 = alloca [2 x %any], align 16
  %indirectarg51 = alloca %"any[]", align 8
  %taddr56 = alloca i64, align 8
  %taddr57 = alloca i64, align 8
  %indirectarg58 = alloca %"char[]", align 8
  %indirectarg59 = alloca %"char[]", align 8
  %indirectarg60 = alloca %"char[]", align 8
  %varargslots61 = alloca [2 x %any], align 16
  %indirectarg64 = alloca %"any[]", align 8
  %reterr = alloca i64, align 8
  %error_var = alloca i64, align 8
  %reterr74 = alloca i64, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %indirectarg77 = alloca %"char[]", align 8
  %indirectarg78 = alloca %"char[]", align 8
  %indirectarg79 = alloca %"char[]", align 8
  %retparam = alloca i64, align 8
  %indirectarg80 = alloca %"char[]", align 8
  %taddr87 = alloca i64, align 8
  %taddr88 = alloca i64, align 8
  %indirectarg89 = alloca %"char[]", align 8
  %indirectarg90 = alloca %"char[]", align 8
  %indirectarg91 = alloca %"char[]", align 8
  %varargslots92 = alloca [2 x %any], align 16
  %indirectarg95 = alloca %"any[]", align 8
  %taddr101 = alloca i64, align 8
  %taddr102 = alloca i64, align 8
  %indirectarg103 = alloca %"char[]", align 8
  %indirectarg104 = alloca %"char[]", align 8
  %indirectarg105 = alloca %"char[]", align 8
  %varargslots106 = alloca [2 x %any], align 16
  %indirectarg109 = alloca %"any[]", align 8
  %taddr116 = alloca i64, align 8
  %indirectarg117 = alloca %"char[]", align 8
  %indirectarg118 = alloca %"char[]", align 8
  %indirectarg119 = alloca %"char[]", align 8
  %varargslots120 = alloca [1 x %any], align 16
  %indirectarg122 = alloca %"any[]", align 8
  %taddr127 = alloca i64, align 8
  %taddr128 = alloca i64, align 8
  %indirectarg129 = alloca %"char[]", align 8
  %indirectarg130 = alloca %"char[]", align 8
  %indirectarg131 = alloca %"char[]", align 8
  %varargslots132 = alloca [2 x %any], align 16
  %indirectarg135 = alloca %"any[]", align 8
  %taddr140 = alloca i64, align 8
  %taddr141 = alloca i64, align 8
  %indirectarg142 = alloca %"char[]", align 8
  %indirectarg143 = alloca %"char[]", align 8
  %indirectarg144 = alloca %"char[]", align 8
  %varargslots145 = alloca [2 x %any], align 16
  %indirectarg148 = alloca %"any[]", align 8
  %reterr152 = alloca i64, align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !2414
  %3 = icmp eq ptr %1, null, !dbg !2414
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !2414
  br i1 %4, label %panic, label %checkok, !dbg !2414

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !2415, !DIExpression(), !2416)
    #dbg_declare(ptr %2, !2417, !DIExpression(), !2416)
    #dbg_declare(ptr %n, !2418, !DIExpression(), !2419)
  %5 = load ptr, ptr %self, align 8, !dbg !2419
  %ptradd = getelementptr inbounds i8, ptr %5, i64 16, !dbg !2419
  %ptradd3 = getelementptr inbounds i8, ptr %ptradd, i64 8, !dbg !2419
  %6 = load i64, ptr %ptradd3, align 8, !dbg !2419
  %7 = load ptr, ptr %self, align 8, !dbg !2419
  %ptradd4 = getelementptr inbounds i8, ptr %7, i64 32, !dbg !2419
  %8 = load i64, ptr %ptradd4, align 8, !dbg !2419
  %sub = sub i64 %6, %8, !dbg !2419
  store i64 %sub, ptr %n, align 8, !dbg !2419
  %ptradd5 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !2420
  %9 = load i64, ptr %ptradd5, align 8, !dbg !2420
  %10 = load i64, ptr %n, align 8, !dbg !2420
  %lt = icmp ult i64 %9, %10, !dbg !2420
  br i1 %lt, label %if.then, label %if.exit, !dbg !2420

if.then:                                          ; preds = %checkok
  %11 = load %"char[]", ptr %2, align 8, !dbg !2421
  %12 = extractvalue %"char[]" %11, 0, !dbg !2421
  %13 = extractvalue %"char[]" %11, 1, !dbg !2421
  %gt = icmp ugt i64 0, %13, !dbg !2421
  %14 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !2421
  br i1 %14, label %panic6, label %checkok13, !dbg !2421

checkok13:                                        ; preds = %if.then
  %size = sub i64 %13, 0, !dbg !2421
  %15 = insertvalue %"char[]" undef, ptr %12, 0, !dbg !2421
  %16 = insertvalue %"char[]" %15, i64 %size, 1, !dbg !2421
  %17 = load ptr, ptr %self, align 8, !dbg !2421
  %ptradd14 = getelementptr inbounds i8, ptr %17, i64 16, !dbg !2421
  %18 = load %"char[]", ptr %ptradd14, align 8, !dbg !2421
  %19 = extractvalue %"char[]" %18, 0, !dbg !2421
  %20 = load ptr, ptr %self, align 8, !dbg !2421
  %ptradd15 = getelementptr inbounds i8, ptr %20, i64 32, !dbg !2421
  %21 = load i64, ptr %ptradd15, align 8, !dbg !2421
  %22 = extractvalue %"char[]" %18, 1, !dbg !2421
  %gt16 = icmp ugt i64 %21, %22, !dbg !2421
  %23 = call i1 @llvm.expect.i1(i1 %gt16, i1 false), !dbg !2421
  br i1 %23, label %panic17, label %checkok27, !dbg !2421

checkok27:                                        ; preds = %checkok13
  %ptradd28 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !2421
  %24 = load i64, ptr %ptradd28, align 8, !dbg !2421
  %add = add i64 %21, %24, !dbg !2421
  %gt29 = icmp ugt i64 %21, %add, !dbg !2421
  %sub30 = sub i64 %add, %21, !dbg !2421
  %25 = call i1 @llvm.expect.i1(i1 %gt29, i1 false), !dbg !2421
  br i1 %25, label %panic31, label %checkok39, !dbg !2421

checkok39:                                        ; preds = %checkok27
  %lt40 = icmp ult i64 %22, %add, !dbg !2421
  %sub41 = sub i64 %add, 1, !dbg !2421
  %26 = call i1 @llvm.expect.i1(i1 %lt40, i1 false), !dbg !2421
  br i1 %26, label %panic42, label %checkok52, !dbg !2421

checkok52:                                        ; preds = %checkok39
  %size53 = sub i64 %add, %21, !dbg !2421
  %ptradd54 = getelementptr inbounds i8, ptr %19, i64 %21, !dbg !2421
  %27 = insertvalue %"char[]" undef, ptr %ptradd54, 0, !dbg !2421
  %28 = insertvalue %"char[]" %27, i64 %size53, 1, !dbg !2421
  %29 = extractvalue %"char[]" %28, 0, !dbg !2421
  %30 = extractvalue %"char[]" %16, 0, !dbg !2421
  %31 = extractvalue %"char[]" %16, 1, !dbg !2421
  %32 = extractvalue %"char[]" %28, 1, !dbg !2421
  %neq = icmp ne i64 %32, %31, !dbg !2421
  %33 = call i1 @llvm.expect.i1(i1 %neq, i1 false), !dbg !2421
  br i1 %33, label %panic55, label %checkok65, !dbg !2421

checkok65:                                        ; preds = %checkok52
  %34 = mul i64 %31, 1, !dbg !2421
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %29, ptr align 1 %30, i64 %34, i1 false), !dbg !2421
  %35 = load ptr, ptr %self, align 8, !dbg !2423
  %ptradd66 = getelementptr inbounds i8, ptr %35, i64 32, !dbg !2423
  %36 = load i64, ptr %ptradd66, align 8, !dbg !2423
  %ptradd67 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !2423
  %37 = load i64, ptr %ptradd67, align 8, !dbg !2423
  %add68 = add i64 %36, %37, !dbg !2423
  store i64 %add68, ptr %ptradd66, align 8, !dbg !2423
  %ptradd69 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !2424
  %38 = load i64, ptr %ptradd69, align 8, !dbg !2424
  store i64 %38, ptr %0, align 8, !dbg !2424
  ret i64 0, !dbg !2424

if.exit:                                          ; preds = %checkok
  %39 = load ptr, ptr %self, align 8, !dbg !2425
  %40 = call i64 @std.io.WriteBuffer.write_pending(ptr %39), !dbg !2425
  %not_err = icmp eq i64 %40, 0, !dbg !2425
  %41 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !2425
  br i1 %41, label %after_check, label %assign_optional, !dbg !2425

assign_optional:                                  ; preds = %if.exit
  store i64 %40, ptr %error_var, align 8, !dbg !2425
  br label %guard_block, !dbg !2425

after_check:                                      ; preds = %if.exit
  br label %noerr_block, !dbg !2425

guard_block:                                      ; preds = %assign_optional
  %42 = load i64, ptr %error_var, align 8, !dbg !2425
  ret i64 %42, !dbg !2425

noerr_block:                                      ; preds = %after_check
  %ptradd70 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !2426
  %43 = load i64, ptr %ptradd70, align 8, !dbg !2426
  %44 = load ptr, ptr %self, align 8, !dbg !2426
  %ptradd71 = getelementptr inbounds i8, ptr %44, i64 16, !dbg !2426
  %ptradd72 = getelementptr inbounds i8, ptr %ptradd71, i64 8, !dbg !2426
  %45 = load i64, ptr %ptradd72, align 8, !dbg !2426
  %ge = icmp uge i64 %43, %45, !dbg !2426
  br i1 %ge, label %if.then73, label %if.exit84, !dbg !2426

if.then73:                                        ; preds = %noerr_block
  %46 = load ptr, ptr %self, align 8, !dbg !2427
  %ptradd75 = getelementptr inbounds i8, ptr %46, i64 8, !dbg !2427
  %47 = load i64, ptr %ptradd75, align 8, !dbg !2427
  %48 = inttoptr i64 %47 to ptr, !dbg !2427
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !2414
  %49 = icmp eq ptr %48, %type, !dbg !2414
  br i1 %49, label %cache_hit, label %cache_miss, !dbg !2414

cache_miss:                                       ; preds = %if.then73
  %ptradd76 = getelementptr inbounds i8, ptr %48, i64 16, !dbg !2414
  %50 = load ptr, ptr %ptradd76, align 8, !dbg !2414
  %51 = call ptr @.dyn_search(ptr %50, ptr @"$sel.write"), !dbg !2414
  store ptr %51, ptr %.inlinecache, align 8, !dbg !2414
  store ptr %48, ptr %.cachedtype, align 8, !dbg !2414
  br label %52, !dbg !2414

cache_hit:                                        ; preds = %if.then73
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !2414
  br label %52, !dbg !2414

52:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %51, %cache_miss ], !dbg !2414
  %53 = icmp eq ptr %fn_phi, null, !dbg !2414
  br i1 %53, label %missing_function, label %match, !dbg !2414

missing_function:                                 ; preds = %52
  store %"char[]" { ptr @.panic_msg.18, i64 42 }, ptr %indirectarg77, align 8
  store %"char[]" { ptr @.file.190, i64 9 }, ptr %indirectarg78, align 8
  store %"char[]" { ptr @.func.202, i64 5 }, ptr %indirectarg79, align 8
  %54 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %54(ptr align 8 %indirectarg77, ptr align 8 %indirectarg78, ptr align 8 %indirectarg79, i32 113) #5, !dbg !2427
  unreachable, !dbg !2427

match:                                            ; preds = %52
  %55 = load ptr, ptr %46, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg80, ptr align 8 %2, i32 16, i1 false)
  %56 = call i64 %fn_phi(ptr %retparam, ptr %55, ptr align 8 %indirectarg80), !dbg !2427
  %not_err81 = icmp eq i64 %56, 0, !dbg !2427
  %57 = call i1 @llvm.expect.i1(i1 %not_err81, i1 true), !dbg !2427
  br i1 %57, label %after_check83, label %assign_optional82, !dbg !2427

assign_optional82:                                ; preds = %match
  store i64 %56, ptr %reterr74, align 8, !dbg !2427
  br label %err_retblock, !dbg !2427

after_check83:                                    ; preds = %match
  %58 = load i64, ptr %retparam, align 8, !dbg !2427
  store i64 %58, ptr %0, align 8, !dbg !2427
  ret i64 0, !dbg !2427

err_retblock:                                     ; preds = %assign_optional82
  %59 = load i64, ptr %reterr74, align 8, !dbg !2427
  ret i64 %59, !dbg !2427

if.exit84:                                        ; preds = %noerr_block
  %60 = load %"char[]", ptr %2, align 8, !dbg !2429
  %61 = extractvalue %"char[]" %60, 0, !dbg !2429
  %62 = extractvalue %"char[]" %60, 1, !dbg !2429
  %gt85 = icmp ugt i64 0, %62, !dbg !2429
  %63 = call i1 @llvm.expect.i1(i1 %gt85, i1 false), !dbg !2429
  br i1 %63, label %panic86, label %checkok96, !dbg !2429

checkok96:                                        ; preds = %if.exit84
  %size97 = sub i64 %62, 0, !dbg !2429
  %64 = insertvalue %"char[]" undef, ptr %61, 0, !dbg !2429
  %65 = insertvalue %"char[]" %64, i64 %size97, 1, !dbg !2429
  %66 = load ptr, ptr %self, align 8, !dbg !2429
  %ptradd98 = getelementptr inbounds i8, ptr %66, i64 16, !dbg !2429
  %67 = load %"char[]", ptr %ptradd98, align 8, !dbg !2429
  %68 = extractvalue %"char[]" %67, 0, !dbg !2429
  %69 = extractvalue %"char[]" %67, 1, !dbg !2429
  %gt99 = icmp ugt i64 0, %69, !dbg !2429
  %70 = call i1 @llvm.expect.i1(i1 %gt99, i1 false), !dbg !2429
  br i1 %70, label %panic100, label %checkok110, !dbg !2429

checkok110:                                       ; preds = %checkok96
  %ptradd111 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !2429
  %71 = load i64, ptr %ptradd111, align 8, !dbg !2429
  %add112 = add i64 0, %71, !dbg !2429
  %gt113 = icmp ugt i64 0, %add112, !dbg !2429
  %sub114 = sub i64 %add112, 0, !dbg !2429
  %72 = call i1 @llvm.expect.i1(i1 %gt113, i1 false), !dbg !2429
  br i1 %72, label %panic115, label %checkok123, !dbg !2429

checkok123:                                       ; preds = %checkok110
  %lt124 = icmp ult i64 %69, %add112, !dbg !2429
  %sub125 = sub i64 %add112, 1, !dbg !2429
  %73 = call i1 @llvm.expect.i1(i1 %lt124, i1 false), !dbg !2429
  br i1 %73, label %panic126, label %checkok136, !dbg !2429

checkok136:                                       ; preds = %checkok123
  %size137 = sub i64 %add112, 0, !dbg !2429
  %74 = insertvalue %"char[]" undef, ptr %68, 0, !dbg !2429
  %75 = insertvalue %"char[]" %74, i64 %size137, 1, !dbg !2429
  %76 = extractvalue %"char[]" %75, 0, !dbg !2429
  %77 = extractvalue %"char[]" %65, 0, !dbg !2429
  %78 = extractvalue %"char[]" %65, 1, !dbg !2429
  %79 = extractvalue %"char[]" %75, 1, !dbg !2429
  %neq138 = icmp ne i64 %79, %78, !dbg !2429
  %80 = call i1 @llvm.expect.i1(i1 %neq138, i1 false), !dbg !2429
  br i1 %80, label %panic139, label %checkok149, !dbg !2429

checkok149:                                       ; preds = %checkok136
  %81 = mul i64 %78, 1, !dbg !2429
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %76, ptr align 1 %77, i64 %81, i1 false), !dbg !2429
  %ptradd150 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !2430
  %82 = load ptr, ptr %self, align 8, !dbg !2430
  %ptradd151 = getelementptr inbounds i8, ptr %82, i64 32, !dbg !2430
  %83 = load i64, ptr %ptradd150, align 8, !dbg !2430
  store i64 %83, ptr %ptradd151, align 8, !dbg !2430
  %ptradd153 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !2431
  %84 = load i64, ptr %ptradd153, align 8, !dbg !2431
  store i64 %84, ptr %0, align 8, !dbg !2431
  ret i64 0, !dbg !2431

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.190, i64 9 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.202, i64 5 }, ptr %indirectarg2, align 8
  %85 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %85(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 99) #5, !dbg !2416
  unreachable, !dbg !2416

panic6:                                           ; preds = %if.then
  store i64 %13, ptr %taddr, align 8
  %86 = insertvalue %any undef, ptr %taddr, 0
  %87 = insertvalue %any %86, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr7, align 8
  %88 = insertvalue %any undef, ptr %taddr7, 0
  %89 = insertvalue %any %88, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.170, i64 61 }, ptr %indirectarg8, align 8
  store %"char[]" { ptr @.file.190, i64 9 }, ptr %indirectarg9, align 8
  store %"char[]" { ptr @.func.202, i64 5 }, ptr %indirectarg10, align 8
  store %any %87, ptr %varargslots, align 16
  %ptradd11 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %89, ptr %ptradd11, align 16
  %90 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %90, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg12, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg8, ptr align 8 %indirectarg9, ptr align 8 %indirectarg10, i32 105, ptr align 8 %indirectarg12) #5, !dbg !2421
  unreachable, !dbg !2421

panic17:                                          ; preds = %checkok13
  store i64 %22, ptr %taddr18, align 8
  %91 = insertvalue %any undef, ptr %taddr18, 0
  %92 = insertvalue %any %91, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %21, ptr %taddr19, align 8
  %93 = insertvalue %any undef, ptr %taddr19, 0
  %94 = insertvalue %any %93, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.170, i64 61 }, ptr %indirectarg20, align 8
  store %"char[]" { ptr @.file.190, i64 9 }, ptr %indirectarg21, align 8
  store %"char[]" { ptr @.func.202, i64 5 }, ptr %indirectarg22, align 8
  store %any %92, ptr %varargslots23, align 16
  %ptradd24 = getelementptr inbounds i8, ptr %varargslots23, i64 16
  store %any %94, ptr %ptradd24, align 16
  %95 = insertvalue %"any[]" undef, ptr %varargslots23, 0
  %"$$temp25" = insertvalue %"any[]" %95, i64 2, 1
  store %"any[]" %"$$temp25", ptr %indirectarg26, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg20, ptr align 8 %indirectarg21, ptr align 8 %indirectarg22, i32 105, ptr align 8 %indirectarg26) #5, !dbg !2421
  unreachable, !dbg !2421

panic31:                                          ; preds = %checkok27
  store i64 %sub30, ptr %taddr32, align 8
  %96 = insertvalue %any undef, ptr %taddr32, 0
  %97 = insertvalue %any %96, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.16, i64 43 }, ptr %indirectarg33, align 8
  store %"char[]" { ptr @.file.190, i64 9 }, ptr %indirectarg34, align 8
  store %"char[]" { ptr @.func.202, i64 5 }, ptr %indirectarg35, align 8
  store %any %97, ptr %varargslots36, align 16
  %98 = insertvalue %"any[]" undef, ptr %varargslots36, 0
  %"$$temp37" = insertvalue %"any[]" %98, i64 1, 1
  store %"any[]" %"$$temp37", ptr %indirectarg38, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg33, ptr align 8 %indirectarg34, ptr align 8 %indirectarg35, i32 105, ptr align 8 %indirectarg38) #5, !dbg !2421
  unreachable, !dbg !2421

panic42:                                          ; preds = %checkok39
  store i64 %sub41, ptr %taddr43, align 8
  %99 = insertvalue %any undef, ptr %taddr43, 0
  %100 = insertvalue %any %99, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %22, ptr %taddr44, align 8
  %101 = insertvalue %any undef, ptr %taddr44, 0
  %102 = insertvalue %any %101, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 60 }, ptr %indirectarg45, align 8
  store %"char[]" { ptr @.file.190, i64 9 }, ptr %indirectarg46, align 8
  store %"char[]" { ptr @.func.202, i64 5 }, ptr %indirectarg47, align 8
  store %any %100, ptr %varargslots48, align 16
  %ptradd49 = getelementptr inbounds i8, ptr %varargslots48, i64 16
  store %any %102, ptr %ptradd49, align 16
  %103 = insertvalue %"any[]" undef, ptr %varargslots48, 0
  %"$$temp50" = insertvalue %"any[]" %103, i64 2, 1
  store %"any[]" %"$$temp50", ptr %indirectarg51, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg45, ptr align 8 %indirectarg46, ptr align 8 %indirectarg47, i32 105, ptr align 8 %indirectarg51) #5, !dbg !2421
  unreachable, !dbg !2421

panic55:                                          ; preds = %checkok52
  store i64 %32, ptr %taddr56, align 8
  %104 = insertvalue %any undef, ptr %taddr56, 0
  %105 = insertvalue %any %104, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %31, ptr %taddr57, align 8
  %106 = insertvalue %any undef, ptr %taddr57, 0
  %107 = insertvalue %any %106, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.198, i64 38 }, ptr %indirectarg58, align 8
  store %"char[]" { ptr @.file.190, i64 9 }, ptr %indirectarg59, align 8
  store %"char[]" { ptr @.func.202, i64 5 }, ptr %indirectarg60, align 8
  store %any %105, ptr %varargslots61, align 16
  %ptradd62 = getelementptr inbounds i8, ptr %varargslots61, i64 16
  store %any %107, ptr %ptradd62, align 16
  %108 = insertvalue %"any[]" undef, ptr %varargslots61, 0
  %"$$temp63" = insertvalue %"any[]" %108, i64 2, 1
  store %"any[]" %"$$temp63", ptr %indirectarg64, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg58, ptr align 8 %indirectarg59, ptr align 8 %indirectarg60, i32 105, ptr align 8 %indirectarg64) #5, !dbg !2421
  unreachable, !dbg !2421

panic86:                                          ; preds = %if.exit84
  store i64 %62, ptr %taddr87, align 8
  %109 = insertvalue %any undef, ptr %taddr87, 0
  %110 = insertvalue %any %109, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr88, align 8
  %111 = insertvalue %any undef, ptr %taddr88, 0
  %112 = insertvalue %any %111, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.170, i64 61 }, ptr %indirectarg89, align 8
  store %"char[]" { ptr @.file.190, i64 9 }, ptr %indirectarg90, align 8
  store %"char[]" { ptr @.func.202, i64 5 }, ptr %indirectarg91, align 8
  store %any %110, ptr %varargslots92, align 16
  %ptradd93 = getelementptr inbounds i8, ptr %varargslots92, i64 16
  store %any %112, ptr %ptradd93, align 16
  %113 = insertvalue %"any[]" undef, ptr %varargslots92, 0
  %"$$temp94" = insertvalue %"any[]" %113, i64 2, 1
  store %"any[]" %"$$temp94", ptr %indirectarg95, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg89, ptr align 8 %indirectarg90, ptr align 8 %indirectarg91, i32 116, ptr align 8 %indirectarg95) #5, !dbg !2429
  unreachable, !dbg !2429

panic100:                                         ; preds = %checkok96
  store i64 %69, ptr %taddr101, align 8
  %114 = insertvalue %any undef, ptr %taddr101, 0
  %115 = insertvalue %any %114, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr102, align 8
  %116 = insertvalue %any undef, ptr %taddr102, 0
  %117 = insertvalue %any %116, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.170, i64 61 }, ptr %indirectarg103, align 8
  store %"char[]" { ptr @.file.190, i64 9 }, ptr %indirectarg104, align 8
  store %"char[]" { ptr @.func.202, i64 5 }, ptr %indirectarg105, align 8
  store %any %115, ptr %varargslots106, align 16
  %ptradd107 = getelementptr inbounds i8, ptr %varargslots106, i64 16
  store %any %117, ptr %ptradd107, align 16
  %118 = insertvalue %"any[]" undef, ptr %varargslots106, 0
  %"$$temp108" = insertvalue %"any[]" %118, i64 2, 1
  store %"any[]" %"$$temp108", ptr %indirectarg109, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg103, ptr align 8 %indirectarg104, ptr align 8 %indirectarg105, i32 116, ptr align 8 %indirectarg109) #5, !dbg !2429
  unreachable, !dbg !2429

panic115:                                         ; preds = %checkok110
  store i64 %sub114, ptr %taddr116, align 8
  %119 = insertvalue %any undef, ptr %taddr116, 0
  %120 = insertvalue %any %119, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.16, i64 43 }, ptr %indirectarg117, align 8
  store %"char[]" { ptr @.file.190, i64 9 }, ptr %indirectarg118, align 8
  store %"char[]" { ptr @.func.202, i64 5 }, ptr %indirectarg119, align 8
  store %any %120, ptr %varargslots120, align 16
  %121 = insertvalue %"any[]" undef, ptr %varargslots120, 0
  %"$$temp121" = insertvalue %"any[]" %121, i64 1, 1
  store %"any[]" %"$$temp121", ptr %indirectarg122, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg117, ptr align 8 %indirectarg118, ptr align 8 %indirectarg119, i32 116, ptr align 8 %indirectarg122) #5, !dbg !2429
  unreachable, !dbg !2429

panic126:                                         ; preds = %checkok123
  store i64 %sub125, ptr %taddr127, align 8
  %122 = insertvalue %any undef, ptr %taddr127, 0
  %123 = insertvalue %any %122, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %69, ptr %taddr128, align 8
  %124 = insertvalue %any undef, ptr %taddr128, 0
  %125 = insertvalue %any %124, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 60 }, ptr %indirectarg129, align 8
  store %"char[]" { ptr @.file.190, i64 9 }, ptr %indirectarg130, align 8
  store %"char[]" { ptr @.func.202, i64 5 }, ptr %indirectarg131, align 8
  store %any %123, ptr %varargslots132, align 16
  %ptradd133 = getelementptr inbounds i8, ptr %varargslots132, i64 16
  store %any %125, ptr %ptradd133, align 16
  %126 = insertvalue %"any[]" undef, ptr %varargslots132, 0
  %"$$temp134" = insertvalue %"any[]" %126, i64 2, 1
  store %"any[]" %"$$temp134", ptr %indirectarg135, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg129, ptr align 8 %indirectarg130, ptr align 8 %indirectarg131, i32 116, ptr align 8 %indirectarg135) #5, !dbg !2429
  unreachable, !dbg !2429

panic139:                                         ; preds = %checkok136
  store i64 %79, ptr %taddr140, align 8
  %127 = insertvalue %any undef, ptr %taddr140, 0
  %128 = insertvalue %any %127, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %78, ptr %taddr141, align 8
  %129 = insertvalue %any undef, ptr %taddr141, 0
  %130 = insertvalue %any %129, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.198, i64 38 }, ptr %indirectarg142, align 8
  store %"char[]" { ptr @.file.190, i64 9 }, ptr %indirectarg143, align 8
  store %"char[]" { ptr @.func.202, i64 5 }, ptr %indirectarg144, align 8
  store %any %128, ptr %varargslots145, align 16
  %ptradd146 = getelementptr inbounds i8, ptr %varargslots145, i64 16
  store %any %130, ptr %ptradd146, align 16
  %131 = insertvalue %"any[]" undef, ptr %varargslots145, 0
  %"$$temp147" = insertvalue %"any[]" %131, i64 2, 1
  store %"any[]" %"$$temp147", ptr %indirectarg148, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg142, ptr align 8 %indirectarg143, ptr align 8 %indirectarg144, i32 116, ptr align 8 %indirectarg148) #5, !dbg !2429
  unreachable, !dbg !2429
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.WriteBuffer.write_byte(ptr %0, i8 %1) #0 comdat !dbg !2432 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %c = alloca i8, align 1
  %n = alloca i64, align 8
  %error_var = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr9 = alloca i64, align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg14 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !2435
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !2435
  br i1 %3, label %panic, label %checkok, !dbg !2435

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2436, !DIExpression(), !2437)
  store i8 %1, ptr %c, align 1
    #dbg_declare(ptr %c, !2438, !DIExpression(), !2437)
    #dbg_declare(ptr %n, !2439, !DIExpression(), !2440)
  %4 = load ptr, ptr %self, align 8, !dbg !2440
  %ptradd = getelementptr inbounds i8, ptr %4, i64 16, !dbg !2440
  %ptradd3 = getelementptr inbounds i8, ptr %ptradd, i64 8, !dbg !2440
  %5 = load i64, ptr %ptradd3, align 8, !dbg !2440
  %6 = load ptr, ptr %self, align 8, !dbg !2440
  %ptradd4 = getelementptr inbounds i8, ptr %6, i64 32, !dbg !2440
  %7 = load i64, ptr %ptradd4, align 8, !dbg !2440
  %sub = sub i64 %5, %7, !dbg !2440
  store i64 %sub, ptr %n, align 8, !dbg !2440
  %8 = load i64, ptr %n, align 8, !dbg !2441
  %eq = icmp eq i64 0, %8, !dbg !2441
  br i1 %eq, label %if.then, label %if.exit, !dbg !2441

if.then:                                          ; preds = %checkok
  %9 = load ptr, ptr %self, align 8, !dbg !2442
  %10 = call i64 @std.io.WriteBuffer.write_pending(ptr %9), !dbg !2442
  %not_err = icmp eq i64 %10, 0, !dbg !2442
  %11 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !2442
  br i1 %11, label %after_check, label %assign_optional, !dbg !2442

assign_optional:                                  ; preds = %if.then
  store i64 %10, ptr %error_var, align 8, !dbg !2442
  br label %guard_block, !dbg !2442

after_check:                                      ; preds = %if.then
  br label %noerr_block, !dbg !2442

guard_block:                                      ; preds = %assign_optional
  %12 = load i64, ptr %error_var, align 8, !dbg !2442
  ret i64 %12, !dbg !2442

noerr_block:                                      ; preds = %after_check
  br label %if.exit, !dbg !2442

if.exit:                                          ; preds = %noerr_block, %checkok
  %13 = load ptr, ptr %self, align 8, !dbg !2444
  %ptradd5 = getelementptr inbounds i8, ptr %13, i64 16, !dbg !2444
  %ptradd6 = getelementptr inbounds i8, ptr %ptradd5, i64 8, !dbg !2444
  %14 = load i64, ptr %ptradd6, align 8, !dbg !2444
  %15 = load ptr, ptr %ptradd5, align 8, !dbg !2444
  %16 = load ptr, ptr %self, align 8, !dbg !2444
  %ptradd7 = getelementptr inbounds i8, ptr %16, i64 32, !dbg !2444
  %17 = load i64, ptr %ptradd7, align 8, !dbg !2444
  %ge = icmp uge i64 %17, %14, !dbg !2444
  %18 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !2444
  br i1 %18, label %panic8, label %checkok15, !dbg !2444

checkok15:                                        ; preds = %if.exit
  %ptradd16 = getelementptr inbounds i8, ptr %15, i64 %17, !dbg !2444
  %19 = load i8, ptr %c, align 1, !dbg !2444
  store i8 %19, ptr %ptradd16, align 1, !dbg !2444
  %20 = load ptr, ptr %self, align 8, !dbg !2445
  %ptradd17 = getelementptr inbounds i8, ptr %20, i64 32, !dbg !2445
  %21 = load i64, ptr %ptradd17, align 8, !dbg !2445
  %add = add i64 %21, 1, !dbg !2445
  store i64 %add, ptr %ptradd17, align 8, !dbg !2445
  ret i64 0, !dbg !2445

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.190, i64 9 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.203, i64 10 }, ptr %indirectarg2, align 8
  %22 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %22(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 121) #5, !dbg !2437
  unreachable, !dbg !2437

panic8:                                           ; preds = %if.exit
  store i64 %14, ptr %taddr, align 8
  %23 = insertvalue %any undef, ptr %taddr, 0
  %24 = insertvalue %any %23, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %17, ptr %taddr9, align 8
  %25 = insertvalue %any undef, ptr %taddr9, 0
  %26 = insertvalue %any %25, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.71, i64 59 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.file.190, i64 9 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.func.203, i64 10 }, ptr %indirectarg12, align 8
  store %any %24, ptr %varargslots, align 16
  %ptradd13 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %26, ptr %ptradd13, align 16
  %27 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %27, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg14, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, i32 128, ptr align 8 %indirectarg14) #5, !dbg !2444
  unreachable, !dbg !2444
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @std.io.WriteBuffer.write_pending(ptr %0) #0 !dbg !2446 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %error_var = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr5 = alloca i64, align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg7 = alloca %"char[]", align 8
  %indirectarg8 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg10 = alloca %"any[]", align 8
  %taddr15 = alloca i64, align 8
  %indirectarg16 = alloca %"char[]", align 8
  %indirectarg17 = alloca %"char[]", align 8
  %indirectarg18 = alloca %"char[]", align 8
  %varargslots19 = alloca [1 x %any], align 16
  %indirectarg21 = alloca %"any[]", align 8
  %taddr25 = alloca i64, align 8
  %taddr26 = alloca i64, align 8
  %indirectarg27 = alloca %"char[]", align 8
  %indirectarg28 = alloca %"char[]", align 8
  %indirectarg29 = alloca %"char[]", align 8
  %varargslots30 = alloca [2 x %any], align 16
  %indirectarg33 = alloca %"any[]", align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %indirectarg37 = alloca %"char[]", align 8
  %indirectarg38 = alloca %"char[]", align 8
  %indirectarg39 = alloca %"char[]", align 8
  %retparam = alloca i64, align 8
  %indirectarg40 = alloca %"char[]", align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !2447
  %1 = icmp eq ptr %0, null, !dbg !2447
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2447
  br i1 %2, label %panic, label %checkok, !dbg !2447

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2448, !DIExpression(), !2449)
  %3 = load ptr, ptr %self, align 8, !dbg !2450
  %ptradd = getelementptr inbounds i8, ptr %3, i64 32, !dbg !2450
  %4 = load i64, ptr %ptradd, align 8, !dbg !2450
  %5 = load ptr, ptr %self, align 8, !dbg !2450
  %6 = load ptr, ptr %self, align 8, !dbg !2450
  %ptradd3 = getelementptr inbounds i8, ptr %6, i64 16, !dbg !2450
  %7 = load %"char[]", ptr %ptradd3, align 8, !dbg !2450
  %8 = extractvalue %"char[]" %7, 0, !dbg !2450
  %9 = extractvalue %"char[]" %7, 1, !dbg !2450
  %gt = icmp ugt i64 0, %9, !dbg !2450
  %10 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !2450
  br i1 %10, label %panic4, label %checkok11, !dbg !2450

checkok11:                                        ; preds = %checkok
  %11 = load ptr, ptr %self, align 8, !dbg !2450
  %ptradd12 = getelementptr inbounds i8, ptr %11, i64 32, !dbg !2450
  %12 = load i64, ptr %ptradd12, align 8, !dbg !2450
  %add = add i64 0, %12, !dbg !2450
  %gt13 = icmp ugt i64 0, %add, !dbg !2450
  %sub = sub i64 %add, 0, !dbg !2450
  %13 = call i1 @llvm.expect.i1(i1 %gt13, i1 false), !dbg !2450
  br i1 %13, label %panic14, label %checkok22, !dbg !2450

checkok22:                                        ; preds = %checkok11
  %lt = icmp ult i64 %9, %add, !dbg !2450
  %sub23 = sub i64 %add, 1, !dbg !2450
  %14 = call i1 @llvm.expect.i1(i1 %lt, i1 false), !dbg !2450
  br i1 %14, label %panic24, label %checkok34, !dbg !2450

checkok34:                                        ; preds = %checkok22
  %size = sub i64 %add, 0, !dbg !2450
  %15 = insertvalue %"char[]" undef, ptr %8, 0, !dbg !2450
  %16 = insertvalue %"char[]" %15, i64 %size, 1, !dbg !2450
  %ptradd35 = getelementptr inbounds i8, ptr %5, i64 8, !dbg !2450
  %17 = load i64, ptr %ptradd35, align 8, !dbg !2450
  %18 = inttoptr i64 %17 to ptr, !dbg !2450
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !2447
  %19 = icmp eq ptr %18, %type, !dbg !2447
  br i1 %19, label %cache_hit, label %cache_miss, !dbg !2447

cache_miss:                                       ; preds = %checkok34
  %ptradd36 = getelementptr inbounds i8, ptr %18, i64 16, !dbg !2447
  %20 = load ptr, ptr %ptradd36, align 8, !dbg !2447
  %21 = call ptr @.dyn_search(ptr %20, ptr @"$sel.write"), !dbg !2447
  store ptr %21, ptr %.inlinecache, align 8, !dbg !2447
  store ptr %18, ptr %.cachedtype, align 8, !dbg !2447
  br label %22, !dbg !2447

cache_hit:                                        ; preds = %checkok34
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !2447
  br label %22, !dbg !2447

22:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %21, %cache_miss ], !dbg !2447
  %23 = icmp eq ptr %fn_phi, null, !dbg !2447
  br i1 %23, label %missing_function, label %match, !dbg !2447

missing_function:                                 ; preds = %22
  store %"char[]" { ptr @.panic_msg.18, i64 42 }, ptr %indirectarg37, align 8
  store %"char[]" { ptr @.file.190, i64 9 }, ptr %indirectarg38, align 8
  store %"char[]" { ptr @.func.204, i64 13 }, ptr %indirectarg39, align 8
  %24 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %24(ptr align 8 %indirectarg37, ptr align 8 %indirectarg38, ptr align 8 %indirectarg39, i32 134) #5, !dbg !2450
  unreachable, !dbg !2450

match:                                            ; preds = %22
  %25 = load ptr, ptr %5, align 8
  store %"char[]" %16, ptr %indirectarg40, align 8
  %26 = call i64 %fn_phi(ptr %retparam, ptr %25, ptr align 8 %indirectarg40), !dbg !2450
  %not_err = icmp eq i64 %26, 0, !dbg !2450
  %27 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !2450
  br i1 %27, label %after_check, label %assign_optional, !dbg !2450

assign_optional:                                  ; preds = %match
  store i64 %26, ptr %error_var, align 8, !dbg !2450
  br label %guard_block, !dbg !2450

after_check:                                      ; preds = %match
  br label %noerr_block, !dbg !2450

guard_block:                                      ; preds = %assign_optional
  %28 = load i64, ptr %error_var, align 8, !dbg !2450
  ret i64 %28, !dbg !2450

noerr_block:                                      ; preds = %after_check
  %29 = load i64, ptr %retparam, align 8, !dbg !2450
  %sub41 = sub i64 %4, %29, !dbg !2450
  store i64 %sub41, ptr %ptradd, align 8, !dbg !2450
  %30 = load ptr, ptr %self, align 8, !dbg !2451
  %ptradd42 = getelementptr inbounds i8, ptr %30, i64 32, !dbg !2451
  %31 = load i64, ptr %ptradd42, align 8, !dbg !2451
  %neq = icmp ne i64 0, %31, !dbg !2451
  br i1 %neq, label %if.then, label %if.exit, !dbg !2451

if.then:                                          ; preds = %noerr_block
  ret i64 ptrtoint (ptr @std.io.INCOMPLETE_WRITE to i64), !dbg !2451

if.exit:                                          ; preds = %noerr_block
  ret i64 0, !dbg !2451

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.190, i64 9 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.204, i64 13 }, ptr %indirectarg2, align 8
  %32 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %32(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 132) #5, !dbg !2449
  unreachable, !dbg !2449

panic4:                                           ; preds = %checkok
  store i64 %9, ptr %taddr, align 8
  %33 = insertvalue %any undef, ptr %taddr, 0
  %34 = insertvalue %any %33, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr5, align 8
  %35 = insertvalue %any undef, ptr %taddr5, 0
  %36 = insertvalue %any %35, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.170, i64 61 }, ptr %indirectarg6, align 8
  store %"char[]" { ptr @.file.190, i64 9 }, ptr %indirectarg7, align 8
  store %"char[]" { ptr @.func.204, i64 13 }, ptr %indirectarg8, align 8
  store %any %34, ptr %varargslots, align 16
  %ptradd9 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %36, ptr %ptradd9, align 16
  %37 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %37, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg10, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg6, ptr align 8 %indirectarg7, ptr align 8 %indirectarg8, i32 134, ptr align 8 %indirectarg10) #5, !dbg !2450
  unreachable, !dbg !2450

panic14:                                          ; preds = %checkok11
  store i64 %sub, ptr %taddr15, align 8
  %38 = insertvalue %any undef, ptr %taddr15, 0
  %39 = insertvalue %any %38, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.16, i64 43 }, ptr %indirectarg16, align 8
  store %"char[]" { ptr @.file.190, i64 9 }, ptr %indirectarg17, align 8
  store %"char[]" { ptr @.func.204, i64 13 }, ptr %indirectarg18, align 8
  store %any %39, ptr %varargslots19, align 16
  %40 = insertvalue %"any[]" undef, ptr %varargslots19, 0
  %"$$temp20" = insertvalue %"any[]" %40, i64 1, 1
  store %"any[]" %"$$temp20", ptr %indirectarg21, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg16, ptr align 8 %indirectarg17, ptr align 8 %indirectarg18, i32 134, ptr align 8 %indirectarg21) #5, !dbg !2450
  unreachable, !dbg !2450

panic24:                                          ; preds = %checkok22
  store i64 %sub23, ptr %taddr25, align 8
  %41 = insertvalue %any undef, ptr %taddr25, 0
  %42 = insertvalue %any %41, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %9, ptr %taddr26, align 8
  %43 = insertvalue %any undef, ptr %taddr26, 0
  %44 = insertvalue %any %43, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 60 }, ptr %indirectarg27, align 8
  store %"char[]" { ptr @.file.190, i64 9 }, ptr %indirectarg28, align 8
  store %"char[]" { ptr @.func.204, i64 13 }, ptr %indirectarg29, align 8
  store %any %42, ptr %varargslots30, align 16
  %ptradd31 = getelementptr inbounds i8, ptr %varargslots30, i64 16
  store %any %44, ptr %ptradd31, align 16
  %45 = insertvalue %"any[]" undef, ptr %varargslots30, 0
  %"$$temp32" = insertvalue %"any[]" %45, i64 2, 1
  store %"any[]" %"$$temp32", ptr %indirectarg33, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg27, ptr align 8 %indirectarg28, ptr align 8 %indirectarg29, i32 134, ptr align 8 %indirectarg33) #5, !dbg !2450
  unreachable, !dbg !2450
}

; Function Attrs: nounwind ssp uwtable
define weak_odr ptr @std.io.ByteBuffer.init(ptr %0, ptr align 8 %1, i64 %2, i64 %3) #0 comdat !dbg !2452 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %max_read = alloca i64, align 8
  %initial_capacity = alloca i64, align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %.assign_list = alloca %ByteBuffer, align 8
  %indirectarg9 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr14 = alloca i64, align 8
  %indirectarg15 = alloca %"char[]", align 8
  %indirectarg16 = alloca %"char[]", align 8
  %indirectarg17 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg19 = alloca %"any[]", align 8
  %x = alloca i64, align 8
  %.anon = alloca i32, align 4
  %a = alloca i64, align 8
  %b = alloca i32, align 4
  %4 = icmp eq ptr %0, null, !dbg !2468
  %5 = call i1 @llvm.expect.i1(i1 %4, i1 false), !dbg !2468
  br i1 %5, label %panic, label %checkok, !dbg !2468

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2469, !DIExpression(), !2470)
    #dbg_declare(ptr %1, !2471, !DIExpression(), !2470)
  store i64 %2, ptr %max_read, align 8
    #dbg_declare(ptr %max_read, !2472, !DIExpression(), !2470)
  store i64 %3, ptr %initial_capacity, align 8
    #dbg_declare(ptr %initial_capacity, !2473, !DIExpression(), !2470)
  %6 = load ptr, ptr %self, align 8, !dbg !2474
  %ptradd = getelementptr inbounds i8, ptr %6, i64 24, !dbg !2474
  %ptradd3 = getelementptr inbounds i8, ptr %ptradd, i64 8, !dbg !2474
  %7 = load i64, ptr %ptradd3, align 8, !dbg !2474
  %eq = icmp eq i64 0, %7, !dbg !2474
  br i1 %eq, label %assert_ok, label %assert_fail, !dbg !2474

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.206, i64 71 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.205, i64 13 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg6, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 17) #5, !dbg !2474
  unreachable, !dbg !2474

assert_ok:                                        ; preds = %checkok
  call void @llvm.memset.p0.i64(ptr align 8 %.assign_list, i8 0, i64 64, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %.assign_list, ptr align 8 %1, i32 16, i1 false), !dbg !2476
  %ptradd7 = getelementptr inbounds i8, ptr %.assign_list, i64 16, !dbg !2476
  %9 = load i64, ptr %max_read, align 8, !dbg !2476
  store i64 %9, ptr %ptradd7, align 8, !dbg !2476
  %10 = load ptr, ptr %self, align 8, !dbg !2476
  %checknull = icmp eq ptr %10, null, !dbg !2476
  %11 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !2476
  br i1 %11, label %panic8, label %checkok12, !dbg !2476

checkok12:                                        ; preds = %assert_ok
  %12 = ptrtoint ptr %10 to i64, !dbg !2476
  %13 = urem i64 %12, 8, !dbg !2476
  %14 = icmp ne i64 %13, 0, !dbg !2476
  %15 = call i1 @llvm.expect.i1(i1 %14, i1 false), !dbg !2476
  br i1 %15, label %panic13, label %checkok20, !dbg !2476

checkok20:                                        ; preds = %checkok12
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %10, ptr align 8 %.assign_list, i32 64, i1 false), !dbg !2476
  %16 = load i64, ptr %initial_capacity, align 8
  store i64 %16, ptr %x, align 8
  store i32 16, ptr %.anon, align 4
  %17 = load i64, ptr %x, align 8
  store i64 %17, ptr %a, align 8
  %18 = load i32, ptr %.anon, align 4
  store i32 %18, ptr %b, align 4
  %19 = load i64, ptr %a, align 8, !dbg !2477
  %20 = load i32, ptr %b, align 4, !dbg !2477
  %sext = sext i32 %20 to i64, !dbg !2477
  %lt = icmp slt i64 %sext, %19, !dbg !2477
  %check = icmp slt i64 %19, 0, !dbg !2477
  %siui-lt = or i1 %check, %lt, !dbg !2477
  br i1 %siui-lt, label %cond.lhs, label %cond.rhs, !dbg !2477

cond.lhs:                                         ; preds = %checkok20
  %21 = load i64, ptr %x, align 8, !dbg !2479
  br label %cond.phi, !dbg !2479

cond.rhs:                                         ; preds = %checkok20
  %22 = load i32, ptr %.anon, align 4, !dbg !2479
  %sext21 = sext i32 %22 to i64, !dbg !2479
  br label %cond.phi, !dbg !2479

cond.phi:                                         ; preds = %cond.rhs, %cond.lhs
  %val = phi i64 [ %21, %cond.lhs ], [ %sext21, %cond.rhs ], !dbg !2479
  store i64 %val, ptr %initial_capacity, align 8, !dbg !2479
  %23 = load ptr, ptr %self, align 8, !dbg !2482
  %24 = load i64, ptr %initial_capacity, align 8, !dbg !2482
  call void @std.io.ByteBuffer.grow(ptr %23, i64 %24), !dbg !2482
  %25 = load ptr, ptr %self, align 8, !dbg !2483
  ret ptr %25, !dbg !2483

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.205, i64 13 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg2, align 8
  %26 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %26(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 19) #5, !dbg !2470
  unreachable, !dbg !2470

panic8:                                           ; preds = %assert_ok
  store %"char[]" { ptr @.panic_msg.2, i64 45 }, ptr %indirectarg9, align 8
  store %"char[]" { ptr @.file.205, i64 13 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg11, align 8
  %27 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %27(ptr align 8 %indirectarg9, ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, i32 21) #5, !dbg !2476
  unreachable, !dbg !2476

panic13:                                          ; preds = %checkok12
  store i64 8, ptr %taddr, align 8
  %28 = insertvalue %any undef, ptr %taddr, 0
  %29 = insertvalue %any %28, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %13, ptr %taddr14, align 8
  %30 = insertvalue %any undef, ptr %taddr14, 0
  %31 = insertvalue %any %30, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg15, align 8
  store %"char[]" { ptr @.file.205, i64 13 }, ptr %indirectarg16, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg17, align 8
  store %any %29, ptr %varargslots, align 16
  %ptradd18 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %31, ptr %ptradd18, align 16
  %32 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %32, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg19, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg15, ptr align 8 %indirectarg16, ptr align 8 %indirectarg17, i32 21, ptr align 8 %indirectarg19) #5, !dbg !2476
  unreachable, !dbg !2476
}

; Function Attrs: nounwind ssp uwtable
define weak_odr ptr @std.io.ByteBuffer.tinit(ptr %0, i64 %1, i64 %2) #0 comdat !dbg !2484 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %max_read = alloca i64, align 8
  %initial_capacity = alloca i64, align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg7 = alloca %any, align 8
  %3 = icmp eq ptr %0, null, !dbg !2487
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !2487
  br i1 %4, label %panic, label %checkok, !dbg !2487

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2488, !DIExpression(), !2489)
  store i64 %1, ptr %max_read, align 8
    #dbg_declare(ptr %max_read, !2490, !DIExpression(), !2489)
  store i64 %2, ptr %initial_capacity, align 8
    #dbg_declare(ptr %initial_capacity, !2491, !DIExpression(), !2489)
  %5 = load ptr, ptr %self, align 8, !dbg !2492
  %6 = call ptr @llvm.threadlocal.address.p0(ptr @std.core.mem.allocator.current_temp), !dbg !2492
  %7 = load %any, ptr %6, align 8, !dbg !2492
  %8 = load i64, ptr %max_read, align 8, !dbg !2492
  %9 = load i64, ptr %initial_capacity, align 8, !dbg !2492
  %ptradd = getelementptr inbounds i8, ptr %5, i64 24, !dbg !2493
  %ptradd3 = getelementptr inbounds i8, ptr %ptradd, i64 8, !dbg !2493
  %10 = load i64, ptr %ptradd3, align 8, !dbg !2493
  %eq = icmp eq i64 0, %10, !dbg !2492
  br i1 %eq, label %assert_ok, label %assert_fail, !dbg !2492

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.206, i64 71 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.205, i64 13 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.207, i64 5 }, ptr %indirectarg6, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 29) #5, !dbg !2492
  unreachable, !dbg !2492

assert_ok:                                        ; preds = %checkok
  store %any %7, ptr %indirectarg7, align 8
  %12 = call ptr @std.io.ByteBuffer.init(ptr %5, ptr align 8 %indirectarg7, i64 %8, i64 %9), !dbg !2492
  ret ptr %12, !dbg !2492

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.205, i64 13 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.207, i64 5 }, ptr %indirectarg2, align 8
  %13 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %13(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 27) #5, !dbg !2489
  unreachable, !dbg !2489
}

; Function Attrs: nounwind ssp uwtable
define weak_odr ptr @std.io.ByteBuffer.init_with_buffer(ptr %0, ptr align 8 %1) #0 comdat !dbg !2494 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %.assign_list = alloca %ByteBuffer, align 8
  %indirectarg17 = alloca %"char[]", align 8
  %indirectarg18 = alloca %"char[]", align 8
  %indirectarg19 = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr22 = alloca i64, align 8
  %indirectarg23 = alloca %"char[]", align 8
  %indirectarg24 = alloca %"char[]", align 8
  %indirectarg25 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg27 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !2497
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !2497
  br i1 %3, label %panic, label %checkok, !dbg !2497

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2498, !DIExpression(), !2499)
    #dbg_declare(ptr %1, !2500, !DIExpression(), !2499)
  %ptradd = getelementptr inbounds i8, ptr %1, i64 8, !dbg !2501
  %4 = load i64, ptr %ptradd, align 8, !dbg !2501
  %lt = icmp ult i64 0, %4, !dbg !2501
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !2501

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.209, i64 32 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.file.205, i64 13 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.func.208, i64 16 }, ptr %indirectarg5, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, i32 33) #5, !dbg !2501
  unreachable, !dbg !2501

assert_ok:                                        ; preds = %checkok
  %6 = load ptr, ptr %self, align 8, !dbg !2503
  %ptradd6 = getelementptr inbounds i8, ptr %6, i64 24, !dbg !2503
  %ptradd7 = getelementptr inbounds i8, ptr %ptradd6, i64 8, !dbg !2503
  %7 = load i64, ptr %ptradd7, align 8, !dbg !2503
  %eq = icmp eq i64 0, %7, !dbg !2503
  br i1 %eq, label %assert_ok12, label %assert_fail8, !dbg !2503

assert_fail8:                                     ; preds = %assert_ok
  store %"char[]" { ptr @.panic_msg.206, i64 71 }, ptr %indirectarg9, align 8
  store %"char[]" { ptr @.file.205, i64 13 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.func.208, i64 16 }, ptr %indirectarg11, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8(ptr align 8 %indirectarg9, ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, i32 34) #5, !dbg !2503
  unreachable, !dbg !2503

assert_ok12:                                      ; preds = %assert_ok
  call void @llvm.memset.p0.i64(ptr align 8 %.assign_list, i8 0, i64 64, i1 false)
  %ptradd13 = getelementptr inbounds i8, ptr %.assign_list, i64 16
  %ptradd14 = getelementptr inbounds i8, ptr %1, i64 8, !dbg !2504
  %9 = load i64, ptr %ptradd14, align 8, !dbg !2504
  store i64 %9, ptr %ptradd13, align 8, !dbg !2504
  %ptradd15 = getelementptr inbounds i8, ptr %.assign_list, i64 24, !dbg !2504
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %ptradd15, ptr align 8 %1, i32 16, i1 false), !dbg !2504
  %10 = load ptr, ptr %self, align 8, !dbg !2504
  %checknull = icmp eq ptr %10, null, !dbg !2504
  %11 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !2504
  br i1 %11, label %panic16, label %checkok20, !dbg !2504

checkok20:                                        ; preds = %assert_ok12
  %12 = ptrtoint ptr %10 to i64, !dbg !2504
  %13 = urem i64 %12, 8, !dbg !2504
  %14 = icmp ne i64 %13, 0, !dbg !2504
  %15 = call i1 @llvm.expect.i1(i1 %14, i1 false), !dbg !2504
  br i1 %15, label %panic21, label %checkok28, !dbg !2504

checkok28:                                        ; preds = %checkok20
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %10, ptr align 8 %.assign_list, i32 64, i1 false), !dbg !2504
  %16 = load ptr, ptr %self, align 8, !dbg !2505
  ret ptr %16, !dbg !2505

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.205, i64 13 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.208, i64 16 }, ptr %indirectarg2, align 8
  %17 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %17(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 36) #5, !dbg !2499
  unreachable, !dbg !2499

panic16:                                          ; preds = %assert_ok12
  store %"char[]" { ptr @.panic_msg.2, i64 45 }, ptr %indirectarg17, align 8
  store %"char[]" { ptr @.file.205, i64 13 }, ptr %indirectarg18, align 8
  store %"char[]" { ptr @.func.208, i64 16 }, ptr %indirectarg19, align 8
  %18 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %18(ptr align 8 %indirectarg17, ptr align 8 %indirectarg18, ptr align 8 %indirectarg19, i32 38) #5, !dbg !2504
  unreachable, !dbg !2504

panic21:                                          ; preds = %checkok20
  store i64 8, ptr %taddr, align 8
  %19 = insertvalue %any undef, ptr %taddr, 0
  %20 = insertvalue %any %19, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %13, ptr %taddr22, align 8
  %21 = insertvalue %any undef, ptr %taddr22, 0
  %22 = insertvalue %any %21, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg23, align 8
  store %"char[]" { ptr @.file.205, i64 13 }, ptr %indirectarg24, align 8
  store %"char[]" { ptr @.func.208, i64 16 }, ptr %indirectarg25, align 8
  store %any %20, ptr %varargslots, align 16
  %ptradd26 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %22, ptr %ptradd26, align 16
  %23 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %23, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg27, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg23, ptr align 8 %indirectarg24, ptr align 8 %indirectarg25, i32 38, ptr align 8 %indirectarg27) #5, !dbg !2504
  unreachable, !dbg !2504
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.io.ByteBuffer.free(ptr %0) #0 comdat !dbg !2506 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %allocator = alloca %any, align 8
  %ptr = alloca ptr, align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %indirectarg9 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg14 = alloca %"char[]", align 8
  %indirectarg15 = alloca %"char[]", align 8
  %indirectarg16 = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr19 = alloca i64, align 8
  %indirectarg20 = alloca %"char[]", align 8
  %indirectarg21 = alloca %"char[]", align 8
  %indirectarg22 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg24 = alloca %"any[]", align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !2509
  %1 = icmp eq ptr %0, null, !dbg !2509
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2509
  br i1 %2, label %panic, label %checkok, !dbg !2509

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2510, !DIExpression(), !2511)
  %3 = load ptr, ptr %self, align 8, !dbg !2512
  %4 = load ptr, ptr %3, align 8, !dbg !2512
  %i2b = icmp ne ptr %4, null, !dbg !2512
  br i1 %i2b, label %if.then, label %if.exit12, !dbg !2512

if.then:                                          ; preds = %checkok
  %5 = load ptr, ptr %self, align 8, !dbg !2512
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator, ptr align 8 %5, i32 16, i1 false)
  %6 = load ptr, ptr %self, align 8, !dbg !2512
  %ptradd = getelementptr inbounds i8, ptr %6, i64 24, !dbg !2512
  %7 = load ptr, ptr %ptradd, align 8
  store ptr %7, ptr %ptr, align 8
  %8 = load ptr, ptr %ptr, align 8, !dbg !2513
  %i2nb = icmp eq ptr %8, null, !dbg !2513
  br i1 %i2nb, label %if.then3, label %if.exit, !dbg !2513

if.then3:                                         ; preds = %if.then
  br label %expr_block.exit, !dbg !2513

if.exit:                                          ; preds = %if.then
  %9 = load ptr, ptr %ptr, align 8, !dbg !2516
  %neq = icmp ne ptr %9, null, !dbg !2516
  br i1 %neq, label %assert_ok, label %assert_fail, !dbg !2516

assert_fail:                                      ; preds = %if.exit
  store %"char[]" { ptr @.panic_msg.211, i64 75 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.212, i64 16 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.210, i64 4 }, ptr %indirectarg6, align 8
  %10 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %10(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 123) #5, !dbg !2516
  unreachable, !dbg !2516

assert_ok:                                        ; preds = %if.exit
  %ptradd7 = getelementptr inbounds i8, ptr %allocator, i64 8, !dbg !2516
  %11 = load i64, ptr %ptradd7, align 8, !dbg !2516
  %12 = inttoptr i64 %11 to ptr, !dbg !2516
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !2509
  %13 = icmp eq ptr %12, %type, !dbg !2509
  br i1 %13, label %cache_hit, label %cache_miss, !dbg !2509

cache_miss:                                       ; preds = %assert_ok
  %ptradd8 = getelementptr inbounds i8, ptr %12, i64 16, !dbg !2509
  %14 = load ptr, ptr %ptradd8, align 8, !dbg !2509
  %15 = call ptr @.dyn_search(ptr %14, ptr @"$sel.release"), !dbg !2509
  store ptr %15, ptr %.inlinecache, align 8, !dbg !2509
  store ptr %12, ptr %.cachedtype, align 8, !dbg !2509
  br label %16, !dbg !2509

cache_hit:                                        ; preds = %assert_ok
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !2509
  br label %16, !dbg !2509

16:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %15, %cache_miss ], !dbg !2509
  %17 = icmp eq ptr %fn_phi, null, !dbg !2509
  br i1 %17, label %missing_function, label %match, !dbg !2509

missing_function:                                 ; preds = %16
  store %"char[]" { ptr @.panic_msg.213, i64 44 }, ptr %indirectarg9, align 8
  store %"char[]" { ptr @.file.212, i64 16 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.func.210, i64 4 }, ptr %indirectarg11, align 8
  %18 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %18(ptr align 8 %indirectarg9, ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, i32 123) #5, !dbg !2516
  unreachable, !dbg !2516

match:                                            ; preds = %16
  %19 = load ptr, ptr %allocator, align 8, !dbg !2516
  call void %fn_phi(ptr %19, ptr %9, i8 zeroext 0), !dbg !2516
  br label %expr_block.exit, !dbg !2516

expr_block.exit:                                  ; preds = %match, %if.then3
  br label %if.exit12, !dbg !2516

if.exit12:                                        ; preds = %expr_block.exit, %checkok
  %20 = load ptr, ptr %self, align 8, !dbg !2517
  %checknull = icmp eq ptr %20, null, !dbg !2517
  %21 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !2517
  br i1 %21, label %panic13, label %checkok17, !dbg !2517

checkok17:                                        ; preds = %if.exit12
  %22 = ptrtoint ptr %20 to i64, !dbg !2517
  %23 = urem i64 %22, 8, !dbg !2517
  %24 = icmp ne i64 %23, 0, !dbg !2517
  %25 = call i1 @llvm.expect.i1(i1 %24, i1 false), !dbg !2517
  br i1 %25, label %panic18, label %checkok25, !dbg !2517

checkok25:                                        ; preds = %checkok17
  call void @llvm.memset.p0.i64(ptr align 8 %20, i8 0, i64 64, i1 false), !dbg !2517
  ret void, !dbg !2517

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.205, i64 13 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.210, i64 4 }, ptr %indirectarg2, align 8
  %26 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %26(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 42) #5, !dbg !2511
  unreachable, !dbg !2511

panic13:                                          ; preds = %if.exit12
  store %"char[]" { ptr @.panic_msg.2, i64 45 }, ptr %indirectarg14, align 8
  store %"char[]" { ptr @.file.205, i64 13 }, ptr %indirectarg15, align 8
  store %"char[]" { ptr @.func.210, i64 4 }, ptr %indirectarg16, align 8
  %27 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %27(ptr align 8 %indirectarg14, ptr align 8 %indirectarg15, ptr align 8 %indirectarg16, i32 45) #5, !dbg !2517
  unreachable, !dbg !2517

panic18:                                          ; preds = %checkok17
  store i64 8, ptr %taddr, align 8
  %28 = insertvalue %any undef, ptr %taddr, 0
  %29 = insertvalue %any %28, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %23, ptr %taddr19, align 8
  %30 = insertvalue %any undef, ptr %taddr19, 0
  %31 = insertvalue %any %30, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg20, align 8
  store %"char[]" { ptr @.file.205, i64 13 }, ptr %indirectarg21, align 8
  store %"char[]" { ptr @.func.210, i64 4 }, ptr %indirectarg22, align 8
  store %any %29, ptr %varargslots, align 16
  %ptradd23 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %31, ptr %ptradd23, align 16
  %32 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %32, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg24, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg20, ptr align 8 %indirectarg21, ptr align 8 %indirectarg22, i32 45, ptr align 8 %indirectarg24) #5, !dbg !2517
  unreachable, !dbg !2517
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.ByteBuffer.write(ptr %0, ptr %1, ptr align 8 %2) #0 comdat !dbg !2518 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %cap = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr8 = alloca i64, align 8
  %indirectarg9 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg13 = alloca %"any[]", align 8
  %taddr19 = alloca i64, align 8
  %taddr20 = alloca i64, align 8
  %indirectarg21 = alloca %"char[]", align 8
  %indirectarg22 = alloca %"char[]", align 8
  %indirectarg23 = alloca %"char[]", align 8
  %varargslots24 = alloca [2 x %any], align 16
  %indirectarg27 = alloca %"any[]", align 8
  %taddr33 = alloca i64, align 8
  %indirectarg34 = alloca %"char[]", align 8
  %indirectarg35 = alloca %"char[]", align 8
  %indirectarg36 = alloca %"char[]", align 8
  %varargslots37 = alloca [1 x %any], align 16
  %indirectarg39 = alloca %"any[]", align 8
  %taddr44 = alloca i64, align 8
  %taddr45 = alloca i64, align 8
  %indirectarg46 = alloca %"char[]", align 8
  %indirectarg47 = alloca %"char[]", align 8
  %indirectarg48 = alloca %"char[]", align 8
  %varargslots49 = alloca [2 x %any], align 16
  %indirectarg52 = alloca %"any[]", align 8
  %taddr57 = alloca i64, align 8
  %taddr58 = alloca i64, align 8
  %indirectarg59 = alloca %"char[]", align 8
  %indirectarg60 = alloca %"char[]", align 8
  %indirectarg61 = alloca %"char[]", align 8
  %varargslots62 = alloca [2 x %any], align 16
  %indirectarg65 = alloca %"any[]", align 8
  %reterr = alloca i64, align 8
  %3 = icmp eq ptr %1, null, !dbg !2521
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !2521
  br i1 %4, label %panic, label %checkok, !dbg !2521

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !2522, !DIExpression(), !2523)
    #dbg_declare(ptr %2, !2524, !DIExpression(), !2523)
    #dbg_declare(ptr %cap, !2525, !DIExpression(), !2526)
  %5 = load ptr, ptr %self, align 8, !dbg !2526
  %ptradd = getelementptr inbounds i8, ptr %5, i64 24, !dbg !2526
  %ptradd3 = getelementptr inbounds i8, ptr %ptradd, i64 8, !dbg !2526
  %6 = load i64, ptr %ptradd3, align 8, !dbg !2526
  %7 = load ptr, ptr %self, align 8, !dbg !2526
  %ptradd4 = getelementptr inbounds i8, ptr %7, i64 48, !dbg !2526
  %8 = load i64, ptr %ptradd4, align 8, !dbg !2526
  %sub = sub i64 %6, %8, !dbg !2526
  store i64 %sub, ptr %cap, align 8, !dbg !2526
  %9 = load i64, ptr %cap, align 8, !dbg !2527
  %ptradd5 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !2527
  %10 = load i64, ptr %ptradd5, align 8, !dbg !2527
  %lt = icmp ult i64 %9, %10, !dbg !2527
  br i1 %lt, label %if.then, label %if.exit, !dbg !2527

if.then:                                          ; preds = %checkok
  %ptradd6 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !2527
  %11 = load ptr, ptr %self, align 8, !dbg !2527
  %12 = load i64, ptr %ptradd6, align 8, !dbg !2527
  call void @std.io.ByteBuffer.grow(ptr %11, i64 %12), !dbg !2527
  br label %if.exit, !dbg !2527

if.exit:                                          ; preds = %if.then, %checkok
  %13 = load %"char[]", ptr %2, align 8, !dbg !2528
  %14 = extractvalue %"char[]" %13, 0, !dbg !2528
  %15 = extractvalue %"char[]" %13, 1, !dbg !2528
  %gt = icmp ugt i64 0, %15, !dbg !2528
  %16 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !2528
  br i1 %16, label %panic7, label %checkok14, !dbg !2528

checkok14:                                        ; preds = %if.exit
  %size = sub i64 %15, 0, !dbg !2528
  %17 = insertvalue %"char[]" undef, ptr %14, 0, !dbg !2528
  %18 = insertvalue %"char[]" %17, i64 %size, 1, !dbg !2528
  %19 = load ptr, ptr %self, align 8, !dbg !2528
  %ptradd15 = getelementptr inbounds i8, ptr %19, i64 24, !dbg !2528
  %20 = load %"char[]", ptr %ptradd15, align 8, !dbg !2528
  %21 = extractvalue %"char[]" %20, 0, !dbg !2528
  %22 = load ptr, ptr %self, align 8, !dbg !2528
  %ptradd16 = getelementptr inbounds i8, ptr %22, i64 48, !dbg !2528
  %23 = load i64, ptr %ptradd16, align 8, !dbg !2528
  %24 = extractvalue %"char[]" %20, 1, !dbg !2528
  %gt17 = icmp ugt i64 %23, %24, !dbg !2528
  %25 = call i1 @llvm.expect.i1(i1 %gt17, i1 false), !dbg !2528
  br i1 %25, label %panic18, label %checkok28, !dbg !2528

checkok28:                                        ; preds = %checkok14
  %ptradd29 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !2528
  %26 = load i64, ptr %ptradd29, align 8, !dbg !2528
  %add = add i64 %23, %26, !dbg !2528
  %gt30 = icmp ugt i64 %23, %add, !dbg !2528
  %sub31 = sub i64 %add, %23, !dbg !2528
  %27 = call i1 @llvm.expect.i1(i1 %gt30, i1 false), !dbg !2528
  br i1 %27, label %panic32, label %checkok40, !dbg !2528

checkok40:                                        ; preds = %checkok28
  %lt41 = icmp ult i64 %24, %add, !dbg !2528
  %sub42 = sub i64 %add, 1, !dbg !2528
  %28 = call i1 @llvm.expect.i1(i1 %lt41, i1 false), !dbg !2528
  br i1 %28, label %panic43, label %checkok53, !dbg !2528

checkok53:                                        ; preds = %checkok40
  %size54 = sub i64 %add, %23, !dbg !2528
  %ptradd55 = getelementptr inbounds i8, ptr %21, i64 %23, !dbg !2528
  %29 = insertvalue %"char[]" undef, ptr %ptradd55, 0, !dbg !2528
  %30 = insertvalue %"char[]" %29, i64 %size54, 1, !dbg !2528
  %31 = extractvalue %"char[]" %30, 0, !dbg !2528
  %32 = extractvalue %"char[]" %18, 0, !dbg !2528
  %33 = extractvalue %"char[]" %18, 1, !dbg !2528
  %34 = extractvalue %"char[]" %30, 1, !dbg !2528
  %neq = icmp ne i64 %34, %33, !dbg !2528
  %35 = call i1 @llvm.expect.i1(i1 %neq, i1 false), !dbg !2528
  br i1 %35, label %panic56, label %checkok66, !dbg !2528

checkok66:                                        ; preds = %checkok53
  %36 = mul i64 %33, 1, !dbg !2528
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %31, ptr align 1 %32, i64 %36, i1 false), !dbg !2528
  %37 = load ptr, ptr %self, align 8, !dbg !2529
  %ptradd67 = getelementptr inbounds i8, ptr %37, i64 48, !dbg !2529
  %38 = load i64, ptr %ptradd67, align 8, !dbg !2529
  %ptradd68 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !2529
  %39 = load i64, ptr %ptradd68, align 8, !dbg !2529
  %add69 = add i64 %38, %39, !dbg !2529
  store i64 %add69, ptr %ptradd67, align 8, !dbg !2529
  %ptradd70 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !2530
  %40 = load i64, ptr %ptradd70, align 8, !dbg !2530
  store i64 %40, ptr %0, align 8, !dbg !2530
  ret i64 0, !dbg !2530

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.205, i64 13 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.202, i64 5 }, ptr %indirectarg2, align 8
  %41 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %41(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 48) #5, !dbg !2523
  unreachable, !dbg !2523

panic7:                                           ; preds = %if.exit
  store i64 %15, ptr %taddr, align 8
  %42 = insertvalue %any undef, ptr %taddr, 0
  %43 = insertvalue %any %42, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr8, align 8
  %44 = insertvalue %any undef, ptr %taddr8, 0
  %45 = insertvalue %any %44, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.170, i64 61 }, ptr %indirectarg9, align 8
  store %"char[]" { ptr @.file.205, i64 13 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.func.202, i64 5 }, ptr %indirectarg11, align 8
  store %any %43, ptr %varargslots, align 16
  %ptradd12 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %45, ptr %ptradd12, align 16
  %46 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %46, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg13, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg9, ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, i32 52, ptr align 8 %indirectarg13) #5, !dbg !2528
  unreachable, !dbg !2528

panic18:                                          ; preds = %checkok14
  store i64 %24, ptr %taddr19, align 8
  %47 = insertvalue %any undef, ptr %taddr19, 0
  %48 = insertvalue %any %47, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %23, ptr %taddr20, align 8
  %49 = insertvalue %any undef, ptr %taddr20, 0
  %50 = insertvalue %any %49, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.170, i64 61 }, ptr %indirectarg21, align 8
  store %"char[]" { ptr @.file.205, i64 13 }, ptr %indirectarg22, align 8
  store %"char[]" { ptr @.func.202, i64 5 }, ptr %indirectarg23, align 8
  store %any %48, ptr %varargslots24, align 16
  %ptradd25 = getelementptr inbounds i8, ptr %varargslots24, i64 16
  store %any %50, ptr %ptradd25, align 16
  %51 = insertvalue %"any[]" undef, ptr %varargslots24, 0
  %"$$temp26" = insertvalue %"any[]" %51, i64 2, 1
  store %"any[]" %"$$temp26", ptr %indirectarg27, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg21, ptr align 8 %indirectarg22, ptr align 8 %indirectarg23, i32 52, ptr align 8 %indirectarg27) #5, !dbg !2528
  unreachable, !dbg !2528

panic32:                                          ; preds = %checkok28
  store i64 %sub31, ptr %taddr33, align 8
  %52 = insertvalue %any undef, ptr %taddr33, 0
  %53 = insertvalue %any %52, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.16, i64 43 }, ptr %indirectarg34, align 8
  store %"char[]" { ptr @.file.205, i64 13 }, ptr %indirectarg35, align 8
  store %"char[]" { ptr @.func.202, i64 5 }, ptr %indirectarg36, align 8
  store %any %53, ptr %varargslots37, align 16
  %54 = insertvalue %"any[]" undef, ptr %varargslots37, 0
  %"$$temp38" = insertvalue %"any[]" %54, i64 1, 1
  store %"any[]" %"$$temp38", ptr %indirectarg39, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg34, ptr align 8 %indirectarg35, ptr align 8 %indirectarg36, i32 52, ptr align 8 %indirectarg39) #5, !dbg !2528
  unreachable, !dbg !2528

panic43:                                          ; preds = %checkok40
  store i64 %sub42, ptr %taddr44, align 8
  %55 = insertvalue %any undef, ptr %taddr44, 0
  %56 = insertvalue %any %55, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %24, ptr %taddr45, align 8
  %57 = insertvalue %any undef, ptr %taddr45, 0
  %58 = insertvalue %any %57, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 60 }, ptr %indirectarg46, align 8
  store %"char[]" { ptr @.file.205, i64 13 }, ptr %indirectarg47, align 8
  store %"char[]" { ptr @.func.202, i64 5 }, ptr %indirectarg48, align 8
  store %any %56, ptr %varargslots49, align 16
  %ptradd50 = getelementptr inbounds i8, ptr %varargslots49, i64 16
  store %any %58, ptr %ptradd50, align 16
  %59 = insertvalue %"any[]" undef, ptr %varargslots49, 0
  %"$$temp51" = insertvalue %"any[]" %59, i64 2, 1
  store %"any[]" %"$$temp51", ptr %indirectarg52, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg46, ptr align 8 %indirectarg47, ptr align 8 %indirectarg48, i32 52, ptr align 8 %indirectarg52) #5, !dbg !2528
  unreachable, !dbg !2528

panic56:                                          ; preds = %checkok53
  store i64 %34, ptr %taddr57, align 8
  %60 = insertvalue %any undef, ptr %taddr57, 0
  %61 = insertvalue %any %60, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %33, ptr %taddr58, align 8
  %62 = insertvalue %any undef, ptr %taddr58, 0
  %63 = insertvalue %any %62, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.198, i64 38 }, ptr %indirectarg59, align 8
  store %"char[]" { ptr @.file.205, i64 13 }, ptr %indirectarg60, align 8
  store %"char[]" { ptr @.func.202, i64 5 }, ptr %indirectarg61, align 8
  store %any %61, ptr %varargslots62, align 16
  %ptradd63 = getelementptr inbounds i8, ptr %varargslots62, i64 16
  store %any %63, ptr %ptradd63, align 16
  %64 = insertvalue %"any[]" undef, ptr %varargslots62, 0
  %"$$temp64" = insertvalue %"any[]" %64, i64 2, 1
  store %"any[]" %"$$temp64", ptr %indirectarg65, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg59, ptr align 8 %indirectarg60, ptr align 8 %indirectarg61, i32 52, ptr align 8 %indirectarg65) #5, !dbg !2528
  unreachable, !dbg !2528
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.ByteBuffer.write_byte(ptr %0, i8 %1) #0 comdat !dbg !2531 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %c = alloca i8, align 1
  %cap = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr9 = alloca i64, align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg14 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !2534
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !2534
  br i1 %3, label %panic, label %checkok, !dbg !2534

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2535, !DIExpression(), !2536)
  store i8 %1, ptr %c, align 1
    #dbg_declare(ptr %c, !2537, !DIExpression(), !2536)
    #dbg_declare(ptr %cap, !2538, !DIExpression(), !2539)
  %4 = load ptr, ptr %self, align 8, !dbg !2539
  %ptradd = getelementptr inbounds i8, ptr %4, i64 24, !dbg !2539
  %ptradd3 = getelementptr inbounds i8, ptr %ptradd, i64 8, !dbg !2539
  %5 = load i64, ptr %ptradd3, align 8, !dbg !2539
  %6 = load ptr, ptr %self, align 8, !dbg !2539
  %ptradd4 = getelementptr inbounds i8, ptr %6, i64 48, !dbg !2539
  %7 = load i64, ptr %ptradd4, align 8, !dbg !2539
  %sub = sub i64 %5, %7, !dbg !2539
  store i64 %sub, ptr %cap, align 8, !dbg !2539
  %8 = load i64, ptr %cap, align 8, !dbg !2540
  %eq = icmp eq i64 0, %8, !dbg !2540
  br i1 %eq, label %if.then, label %if.exit, !dbg !2540

if.then:                                          ; preds = %checkok
  %9 = load ptr, ptr %self, align 8, !dbg !2540
  call void @std.io.ByteBuffer.grow(ptr %9, i64 1), !dbg !2540
  br label %if.exit, !dbg !2540

if.exit:                                          ; preds = %if.then, %checkok
  %10 = load ptr, ptr %self, align 8, !dbg !2541
  %ptradd5 = getelementptr inbounds i8, ptr %10, i64 24, !dbg !2541
  %ptradd6 = getelementptr inbounds i8, ptr %ptradd5, i64 8, !dbg !2541
  %11 = load i64, ptr %ptradd6, align 8, !dbg !2541
  %12 = load ptr, ptr %ptradd5, align 8, !dbg !2541
  %13 = load ptr, ptr %self, align 8, !dbg !2541
  %ptradd7 = getelementptr inbounds i8, ptr %13, i64 48, !dbg !2541
  %14 = load i64, ptr %ptradd7, align 8, !dbg !2541
  %ge = icmp uge i64 %14, %11, !dbg !2541
  %15 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !2541
  br i1 %15, label %panic8, label %checkok15, !dbg !2541

checkok15:                                        ; preds = %if.exit
  %ptradd16 = getelementptr inbounds i8, ptr %12, i64 %14, !dbg !2541
  %16 = load i8, ptr %c, align 1, !dbg !2541
  store i8 %16, ptr %ptradd16, align 1, !dbg !2541
  %17 = load ptr, ptr %self, align 8, !dbg !2542
  %ptradd17 = getelementptr inbounds i8, ptr %17, i64 48, !dbg !2542
  %18 = load i64, ptr %ptradd17, align 8, !dbg !2542
  %add = add i64 %18, 1, !dbg !2542
  store i64 %add, ptr %ptradd17, align 8, !dbg !2542
  ret i64 0, !dbg !2542

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.205, i64 13 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.203, i64 10 }, ptr %indirectarg2, align 8
  %19 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %19(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 57) #5, !dbg !2536
  unreachable, !dbg !2536

panic8:                                           ; preds = %if.exit
  store i64 %11, ptr %taddr, align 8
  %20 = insertvalue %any undef, ptr %taddr, 0
  %21 = insertvalue %any %20, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %14, ptr %taddr9, align 8
  %22 = insertvalue %any undef, ptr %taddr9, 0
  %23 = insertvalue %any %22, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.71, i64 59 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.file.205, i64 13 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.func.203, i64 10 }, ptr %indirectarg12, align 8
  store %any %21, ptr %varargslots, align 16
  %ptradd13 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %23, ptr %ptradd13, align 16
  %24 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %24, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg14, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, i32 61, ptr align 8 %indirectarg14) #5, !dbg !2541
  unreachable, !dbg !2541
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.ByteBuffer.read(ptr %0, ptr %1, ptr align 8 %2) #0 comdat !dbg !2543 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %readable = alloca i64, align 8
  %n = alloca i64, align 8
  %x = alloca i64, align 8
  %.anon = alloca i64, align 8
  %a = alloca i64, align 8
  %b = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr9 = alloca i64, align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg14 = alloca %"any[]", align 8
  %taddr19 = alloca i64, align 8
  %indirectarg20 = alloca %"char[]", align 8
  %indirectarg21 = alloca %"char[]", align 8
  %indirectarg22 = alloca %"char[]", align 8
  %varargslots23 = alloca [1 x %any], align 16
  %indirectarg25 = alloca %"any[]", align 8
  %taddr30 = alloca i64, align 8
  %taddr31 = alloca i64, align 8
  %indirectarg32 = alloca %"char[]", align 8
  %indirectarg33 = alloca %"char[]", align 8
  %indirectarg34 = alloca %"char[]", align 8
  %varargslots35 = alloca [2 x %any], align 16
  %indirectarg38 = alloca %"any[]", align 8
  %taddr43 = alloca i64, align 8
  %taddr44 = alloca i64, align 8
  %indirectarg45 = alloca %"char[]", align 8
  %indirectarg46 = alloca %"char[]", align 8
  %indirectarg47 = alloca %"char[]", align 8
  %varargslots48 = alloca [2 x %any], align 16
  %indirectarg51 = alloca %"any[]", align 8
  %taddr57 = alloca i64, align 8
  %indirectarg58 = alloca %"char[]", align 8
  %indirectarg59 = alloca %"char[]", align 8
  %indirectarg60 = alloca %"char[]", align 8
  %varargslots61 = alloca [1 x %any], align 16
  %indirectarg63 = alloca %"any[]", align 8
  %taddr68 = alloca i64, align 8
  %taddr69 = alloca i64, align 8
  %indirectarg70 = alloca %"char[]", align 8
  %indirectarg71 = alloca %"char[]", align 8
  %indirectarg72 = alloca %"char[]", align 8
  %varargslots73 = alloca [2 x %any], align 16
  %indirectarg76 = alloca %"any[]", align 8
  %taddr80 = alloca i64, align 8
  %taddr81 = alloca i64, align 8
  %indirectarg82 = alloca %"char[]", align 8
  %indirectarg83 = alloca %"char[]", align 8
  %indirectarg84 = alloca %"char[]", align 8
  %varargslots85 = alloca [2 x %any], align 16
  %indirectarg88 = alloca %"any[]", align 8
  %self94 = alloca ptr, align 8
  %indirectarg96 = alloca %"char[]", align 8
  %indirectarg97 = alloca %"char[]", align 8
  %indirectarg98 = alloca %"char[]", align 8
  %readable102 = alloca i64, align 8
  %taddr111 = alloca i64, align 8
  %taddr112 = alloca i64, align 8
  %indirectarg113 = alloca %"char[]", align 8
  %indirectarg114 = alloca %"char[]", align 8
  %indirectarg115 = alloca %"char[]", align 8
  %varargslots116 = alloca [2 x %any], align 16
  %indirectarg119 = alloca %"any[]", align 8
  %taddr122 = alloca i64, align 8
  %indirectarg123 = alloca %"char[]", align 8
  %indirectarg124 = alloca %"char[]", align 8
  %indirectarg125 = alloca %"char[]", align 8
  %varargslots126 = alloca [1 x %any], align 16
  %indirectarg128 = alloca %"any[]", align 8
  %taddr135 = alloca i64, align 8
  %indirectarg136 = alloca %"char[]", align 8
  %indirectarg137 = alloca %"char[]", align 8
  %indirectarg138 = alloca %"char[]", align 8
  %varargslots139 = alloca [1 x %any], align 16
  %indirectarg141 = alloca %"any[]", align 8
  %taddr146 = alloca i64, align 8
  %taddr147 = alloca i64, align 8
  %indirectarg148 = alloca %"char[]", align 8
  %indirectarg149 = alloca %"char[]", align 8
  %indirectarg150 = alloca %"char[]", align 8
  %varargslots151 = alloca [2 x %any], align 16
  %indirectarg154 = alloca %"any[]", align 8
  %taddr161 = alloca i64, align 8
  %taddr162 = alloca i64, align 8
  %indirectarg163 = alloca %"char[]", align 8
  %indirectarg164 = alloca %"char[]", align 8
  %indirectarg165 = alloca %"char[]", align 8
  %varargslots166 = alloca [2 x %any], align 16
  %indirectarg169 = alloca %"any[]", align 8
  %taddr176 = alloca i64, align 8
  %indirectarg177 = alloca %"char[]", align 8
  %indirectarg178 = alloca %"char[]", align 8
  %indirectarg179 = alloca %"char[]", align 8
  %varargslots180 = alloca [1 x %any], align 16
  %indirectarg182 = alloca %"any[]", align 8
  %taddr187 = alloca i64, align 8
  %taddr188 = alloca i64, align 8
  %indirectarg189 = alloca %"char[]", align 8
  %indirectarg190 = alloca %"char[]", align 8
  %indirectarg191 = alloca %"char[]", align 8
  %varargslots192 = alloca [2 x %any], align 16
  %indirectarg195 = alloca %"any[]", align 8
  %taddr200 = alloca i64, align 8
  %taddr201 = alloca i64, align 8
  %indirectarg202 = alloca %"char[]", align 8
  %indirectarg203 = alloca %"char[]", align 8
  %indirectarg204 = alloca %"char[]", align 8
  %varargslots205 = alloca [2 x %any], align 16
  %indirectarg208 = alloca %"any[]", align 8
  %reterr = alloca i64, align 8
  %3 = icmp eq ptr %1, null, !dbg !2544
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !2544
  br i1 %4, label %panic, label %checkok, !dbg !2544

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !2545, !DIExpression(), !2546)
    #dbg_declare(ptr %2, !2547, !DIExpression(), !2546)
    #dbg_declare(ptr %readable, !2548, !DIExpression(), !2549)
  %5 = load ptr, ptr %self, align 8, !dbg !2549
  %ptradd = getelementptr inbounds i8, ptr %5, i64 48, !dbg !2549
  %6 = load i64, ptr %ptradd, align 8, !dbg !2549
  %7 = load ptr, ptr %self, align 8, !dbg !2549
  %ptradd3 = getelementptr inbounds i8, ptr %7, i64 40, !dbg !2549
  %8 = load i64, ptr %ptradd3, align 8, !dbg !2549
  %sub = sub i64 %6, %8, !dbg !2549
  store i64 %sub, ptr %readable, align 8, !dbg !2549
  %9 = load i64, ptr %readable, align 8, !dbg !2550
  %eq = icmp eq i64 0, %9, !dbg !2550
  br i1 %eq, label %if.then, label %if.exit, !dbg !2550

if.then:                                          ; preds = %checkok
  %10 = load ptr, ptr %self, align 8, !dbg !2551
  %ptradd4 = getelementptr inbounds i8, ptr %10, i64 56, !dbg !2551
  store i8 0, ptr %ptradd4, align 8, !dbg !2551
  ret i64 ptrtoint (ptr @std.io.EOF to i64), !dbg !2553

if.exit:                                          ; preds = %checkok
    #dbg_declare(ptr %n, !2554, !DIExpression(), !2555)
  %11 = load i64, ptr %readable, align 8
  store i64 %11, ptr %x, align 8
  %ptradd5 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !2555
  %12 = load i64, ptr %ptradd5, align 8
  store i64 %12, ptr %.anon, align 8
  %13 = load i64, ptr %x, align 8
  store i64 %13, ptr %a, align 8
  %14 = load i64, ptr %.anon, align 8
  store i64 %14, ptr %b, align 8
  %15 = load i64, ptr %a, align 8, !dbg !2556
  %16 = load i64, ptr %b, align 8, !dbg !2556
  %lt = icmp ult i64 %15, %16, !dbg !2556
  br i1 %lt, label %cond.lhs, label %cond.rhs, !dbg !2556

cond.lhs:                                         ; preds = %if.exit
  %17 = load i64, ptr %x, align 8, !dbg !2558
  br label %cond.phi, !dbg !2558

cond.rhs:                                         ; preds = %if.exit
  %18 = load i64, ptr %.anon, align 8, !dbg !2558
  br label %cond.phi, !dbg !2558

cond.phi:                                         ; preds = %cond.rhs, %cond.lhs
  %val = phi i64 [ %17, %cond.lhs ], [ %18, %cond.rhs ], !dbg !2558
  store i64 %val, ptr %n, align 8, !dbg !2558
  %19 = load ptr, ptr %self, align 8, !dbg !2560
  %ptradd6 = getelementptr inbounds i8, ptr %19, i64 24, !dbg !2560
  %20 = load %"char[]", ptr %ptradd6, align 8, !dbg !2560
  %21 = extractvalue %"char[]" %20, 0, !dbg !2560
  %22 = load ptr, ptr %self, align 8, !dbg !2560
  %ptradd7 = getelementptr inbounds i8, ptr %22, i64 40, !dbg !2560
  %23 = load i64, ptr %ptradd7, align 8, !dbg !2560
  %24 = extractvalue %"char[]" %20, 1, !dbg !2560
  %gt = icmp ugt i64 %23, %24, !dbg !2560
  %25 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !2560
  br i1 %25, label %panic8, label %checkok15, !dbg !2560

checkok15:                                        ; preds = %cond.phi
  %26 = load i64, ptr %n, align 8, !dbg !2560
  %add = add i64 %23, %26, !dbg !2560
  %gt16 = icmp ugt i64 %23, %add, !dbg !2560
  %sub17 = sub i64 %add, %23, !dbg !2560
  %27 = call i1 @llvm.expect.i1(i1 %gt16, i1 false), !dbg !2560
  br i1 %27, label %panic18, label %checkok26, !dbg !2560

checkok26:                                        ; preds = %checkok15
  %lt27 = icmp ult i64 %24, %add, !dbg !2560
  %sub28 = sub i64 %add, 1, !dbg !2560
  %28 = call i1 @llvm.expect.i1(i1 %lt27, i1 false), !dbg !2560
  br i1 %28, label %panic29, label %checkok39, !dbg !2560

checkok39:                                        ; preds = %checkok26
  %size = sub i64 %add, %23, !dbg !2560
  %ptradd40 = getelementptr inbounds i8, ptr %21, i64 %23, !dbg !2560
  %29 = insertvalue %"char[]" undef, ptr %ptradd40, 0, !dbg !2560
  %30 = insertvalue %"char[]" %29, i64 %size, 1, !dbg !2560
  %31 = load %"char[]", ptr %2, align 8, !dbg !2560
  %32 = extractvalue %"char[]" %31, 0, !dbg !2560
  %33 = extractvalue %"char[]" %31, 1, !dbg !2560
  %gt41 = icmp ugt i64 0, %33, !dbg !2560
  %34 = call i1 @llvm.expect.i1(i1 %gt41, i1 false), !dbg !2560
  br i1 %34, label %panic42, label %checkok52, !dbg !2560

checkok52:                                        ; preds = %checkok39
  %35 = load i64, ptr %n, align 8, !dbg !2560
  %add53 = add i64 0, %35, !dbg !2560
  %gt54 = icmp ugt i64 0, %add53, !dbg !2560
  %sub55 = sub i64 %add53, 0, !dbg !2560
  %36 = call i1 @llvm.expect.i1(i1 %gt54, i1 false), !dbg !2560
  br i1 %36, label %panic56, label %checkok64, !dbg !2560

checkok64:                                        ; preds = %checkok52
  %lt65 = icmp ult i64 %33, %add53, !dbg !2560
  %sub66 = sub i64 %add53, 1, !dbg !2560
  %37 = call i1 @llvm.expect.i1(i1 %lt65, i1 false), !dbg !2560
  br i1 %37, label %panic67, label %checkok77, !dbg !2560

checkok77:                                        ; preds = %checkok64
  %size78 = sub i64 %add53, 0, !dbg !2560
  %38 = insertvalue %"char[]" undef, ptr %32, 0, !dbg !2560
  %39 = insertvalue %"char[]" %38, i64 %size78, 1, !dbg !2560
  %40 = extractvalue %"char[]" %39, 0, !dbg !2560
  %41 = extractvalue %"char[]" %30, 0, !dbg !2560
  %42 = extractvalue %"char[]" %30, 1, !dbg !2560
  %43 = extractvalue %"char[]" %39, 1, !dbg !2560
  %neq = icmp ne i64 %43, %42, !dbg !2560
  %44 = call i1 @llvm.expect.i1(i1 %neq, i1 false), !dbg !2560
  br i1 %44, label %panic79, label %checkok89, !dbg !2560

checkok89:                                        ; preds = %checkok77
  %45 = mul i64 %42, 1, !dbg !2560
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %40, ptr align 1 %41, i64 %45, i1 false), !dbg !2560
  %46 = load ptr, ptr %self, align 8, !dbg !2561
  %ptradd90 = getelementptr inbounds i8, ptr %46, i64 40, !dbg !2561
  %47 = load i64, ptr %ptradd90, align 8, !dbg !2561
  %48 = load i64, ptr %n, align 8, !dbg !2561
  %add91 = add i64 %47, %48, !dbg !2561
  store i64 %add91, ptr %ptradd90, align 8, !dbg !2561
  %49 = load i64, ptr %n, align 8, !dbg !2562
  %lt92 = icmp ult i64 0, %49, !dbg !2562
  %50 = load ptr, ptr %self, align 8, !dbg !2562
  %ptradd93 = getelementptr inbounds i8, ptr %50, i64 56, !dbg !2562
  %51 = zext i1 %lt92 to i8, !dbg !2562
  store i8 %51, ptr %ptradd93, align 8, !dbg !2562
  %52 = load ptr, ptr %self, align 8
  store ptr %52, ptr %self94, align 8
  %53 = load ptr, ptr %self94, align 8, !dbg !2563
  %neq95 = icmp ne ptr %53, null, !dbg !2563
  br i1 %neq95, label %assert_ok, label %assert_fail, !dbg !2563

assert_fail:                                      ; preds = %checkok89
  store %"char[]" { ptr @.panic_msg.52, i64 32 }, ptr %indirectarg96, align 8
  store %"char[]" { ptr @.file.205, i64 13 }, ptr %indirectarg97, align 8
  store %"char[]" { ptr @.func.196, i64 4 }, ptr %indirectarg98, align 8
  %54 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %54(ptr align 8 %indirectarg96, ptr align 8 %indirectarg97, ptr align 8 %indirectarg98, i32 138) #5, !dbg !2563
  unreachable, !dbg !2563

assert_ok:                                        ; preds = %checkok89
  %55 = load ptr, ptr %self94, align 8, !dbg !2567
  %ptradd99 = getelementptr inbounds i8, ptr %55, i64 40, !dbg !2567
  %56 = load i64, ptr %ptradd99, align 8, !dbg !2567
  %57 = load ptr, ptr %self94, align 8, !dbg !2567
  %ptradd100 = getelementptr inbounds i8, ptr %57, i64 16, !dbg !2567
  %58 = load i64, ptr %ptradd100, align 8, !dbg !2567
  %ge = icmp uge i64 %56, %58, !dbg !2567
  br i1 %ge, label %if.then101, label %if.exit213, !dbg !2567

if.then101:                                       ; preds = %assert_ok
    #dbg_declare(ptr %readable102, !2568, !DIExpression(), !2570)
  %59 = load ptr, ptr %self94, align 8, !dbg !2570
  %ptradd103 = getelementptr inbounds i8, ptr %59, i64 48, !dbg !2570
  %60 = load i64, ptr %ptradd103, align 8, !dbg !2570
  %61 = load ptr, ptr %self94, align 8, !dbg !2570
  %ptradd104 = getelementptr inbounds i8, ptr %61, i64 40, !dbg !2570
  %62 = load i64, ptr %ptradd104, align 8, !dbg !2570
  %sub105 = sub i64 %60, %62, !dbg !2570
  store i64 %sub105, ptr %readable102, align 8, !dbg !2570
  %63 = load ptr, ptr %self94, align 8, !dbg !2571
  %ptradd106 = getelementptr inbounds i8, ptr %63, i64 24, !dbg !2571
  %64 = load %"char[]", ptr %ptradd106, align 8, !dbg !2571
  %65 = extractvalue %"char[]" %64, 0, !dbg !2571
  %66 = load ptr, ptr %self94, align 8, !dbg !2571
  %ptradd107 = getelementptr inbounds i8, ptr %66, i64 40, !dbg !2571
  %67 = load i64, ptr %ptradd107, align 8, !dbg !2571
  %sub108 = sub i64 %67, 1, !dbg !2571
  %68 = extractvalue %"char[]" %64, 1, !dbg !2571
  %gt109 = icmp sgt i64 %sub108, %68, !dbg !2571
  %69 = call i1 @llvm.expect.i1(i1 %gt109, i1 false), !dbg !2571
  br i1 %69, label %panic110, label %checkok120, !dbg !2571

checkok120:                                       ; preds = %if.then101
  %underflow = icmp slt i64 %sub108, 0, !dbg !2571
  %70 = call i1 @llvm.expect.i1(i1 %underflow, i1 false), !dbg !2571
  br i1 %70, label %panic121, label %checkok129, !dbg !2571

checkok129:                                       ; preds = %checkok120
  %71 = load i64, ptr %readable102, align 8, !dbg !2571
  %add130 = add i64 1, %71, !dbg !2571
  %add131 = add i64 %sub108, %add130, !dbg !2571
  %gt132 = icmp sgt i64 %sub108, %add131, !dbg !2571
  %sub133 = sub i64 %add131, %sub108, !dbg !2571
  %72 = call i1 @llvm.expect.i1(i1 %gt132, i1 false), !dbg !2571
  br i1 %72, label %panic134, label %checkok142, !dbg !2571

checkok142:                                       ; preds = %checkok129
  %lt143 = icmp slt i64 %68, %add131, !dbg !2571
  %sub144 = sub i64 %add131, 1, !dbg !2571
  %73 = call i1 @llvm.expect.i1(i1 %lt143, i1 false), !dbg !2571
  br i1 %73, label %panic145, label %checkok155, !dbg !2571

checkok155:                                       ; preds = %checkok142
  %size156 = sub i64 %add131, %sub108, !dbg !2571
  %ptradd157 = getelementptr inbounds i8, ptr %65, i64 %sub108, !dbg !2571
  %74 = insertvalue %"char[]" undef, ptr %ptradd157, 0, !dbg !2571
  %75 = insertvalue %"char[]" %74, i64 %size156, 1, !dbg !2571
  %76 = load ptr, ptr %self94, align 8, !dbg !2571
  %ptradd158 = getelementptr inbounds i8, ptr %76, i64 24, !dbg !2571
  %77 = load %"char[]", ptr %ptradd158, align 8, !dbg !2571
  %78 = extractvalue %"char[]" %77, 0, !dbg !2571
  %79 = extractvalue %"char[]" %77, 1, !dbg !2571
  %gt159 = icmp sgt i64 0, %79, !dbg !2571
  %80 = call i1 @llvm.expect.i1(i1 %gt159, i1 false), !dbg !2571
  br i1 %80, label %panic160, label %checkok170, !dbg !2571

checkok170:                                       ; preds = %checkok155
  %81 = load i64, ptr %readable102, align 8, !dbg !2571
  %add171 = add i64 1, %81, !dbg !2571
  %add172 = add i64 0, %add171, !dbg !2571
  %gt173 = icmp sgt i64 0, %add172, !dbg !2571
  %sub174 = sub i64 %add172, 0, !dbg !2571
  %82 = call i1 @llvm.expect.i1(i1 %gt173, i1 false), !dbg !2571
  br i1 %82, label %panic175, label %checkok183, !dbg !2571

checkok183:                                       ; preds = %checkok170
  %lt184 = icmp slt i64 %79, %add172, !dbg !2571
  %sub185 = sub i64 %add172, 1, !dbg !2571
  %83 = call i1 @llvm.expect.i1(i1 %lt184, i1 false), !dbg !2571
  br i1 %83, label %panic186, label %checkok196, !dbg !2571

checkok196:                                       ; preds = %checkok183
  %size197 = sub i64 %add172, 0, !dbg !2571
  %84 = insertvalue %"char[]" undef, ptr %78, 0, !dbg !2571
  %85 = insertvalue %"char[]" %84, i64 %size197, 1, !dbg !2571
  %86 = extractvalue %"char[]" %85, 0, !dbg !2571
  %87 = extractvalue %"char[]" %75, 0, !dbg !2571
  %88 = extractvalue %"char[]" %75, 1, !dbg !2571
  %89 = extractvalue %"char[]" %85, 1, !dbg !2571
  %neq198 = icmp ne i64 %89, %88, !dbg !2571
  %90 = call i1 @llvm.expect.i1(i1 %neq198, i1 false), !dbg !2571
  br i1 %90, label %panic199, label %checkok209, !dbg !2571

checkok209:                                       ; preds = %checkok196
  %91 = mul i64 %88, 1, !dbg !2571
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %86, ptr align 1 %87, i64 %91, i1 false), !dbg !2571
  %92 = load i64, ptr %readable102, align 8, !dbg !2572
  %add210 = add i64 1, %92, !dbg !2572
  %93 = load ptr, ptr %self94, align 8, !dbg !2572
  %ptradd211 = getelementptr inbounds i8, ptr %93, i64 48, !dbg !2572
  store i64 %add210, ptr %ptradd211, align 8, !dbg !2572
  %94 = load ptr, ptr %self94, align 8, !dbg !2573
  %ptradd212 = getelementptr inbounds i8, ptr %94, i64 40, !dbg !2573
  store i64 1, ptr %ptradd212, align 8, !dbg !2573
  br label %if.exit213, !dbg !2573

if.exit213:                                       ; preds = %checkok209, %assert_ok
  %95 = load i64, ptr %n, align 8, !dbg !2574
  store i64 %95, ptr %0, align 8, !dbg !2574
  ret i64 0, !dbg !2574

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.205, i64 13 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.196, i64 4 }, ptr %indirectarg2, align 8
  %96 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %96(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 65) #5, !dbg !2546
  unreachable, !dbg !2546

panic8:                                           ; preds = %cond.phi
  store i64 %24, ptr %taddr, align 8
  %97 = insertvalue %any undef, ptr %taddr, 0
  %98 = insertvalue %any %97, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %23, ptr %taddr9, align 8
  %99 = insertvalue %any undef, ptr %taddr9, 0
  %100 = insertvalue %any %99, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.170, i64 61 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.file.205, i64 13 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.func.196, i64 4 }, ptr %indirectarg12, align 8
  store %any %98, ptr %varargslots, align 16
  %ptradd13 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %100, ptr %ptradd13, align 16
  %101 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %101, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg14, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, i32 74, ptr align 8 %indirectarg14) #5, !dbg !2560
  unreachable, !dbg !2560

panic18:                                          ; preds = %checkok15
  store i64 %sub17, ptr %taddr19, align 8
  %102 = insertvalue %any undef, ptr %taddr19, 0
  %103 = insertvalue %any %102, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.16, i64 43 }, ptr %indirectarg20, align 8
  store %"char[]" { ptr @.file.205, i64 13 }, ptr %indirectarg21, align 8
  store %"char[]" { ptr @.func.196, i64 4 }, ptr %indirectarg22, align 8
  store %any %103, ptr %varargslots23, align 16
  %104 = insertvalue %"any[]" undef, ptr %varargslots23, 0
  %"$$temp24" = insertvalue %"any[]" %104, i64 1, 1
  store %"any[]" %"$$temp24", ptr %indirectarg25, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg20, ptr align 8 %indirectarg21, ptr align 8 %indirectarg22, i32 74, ptr align 8 %indirectarg25) #5, !dbg !2560
  unreachable, !dbg !2560

panic29:                                          ; preds = %checkok26
  store i64 %sub28, ptr %taddr30, align 8
  %105 = insertvalue %any undef, ptr %taddr30, 0
  %106 = insertvalue %any %105, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %24, ptr %taddr31, align 8
  %107 = insertvalue %any undef, ptr %taddr31, 0
  %108 = insertvalue %any %107, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 60 }, ptr %indirectarg32, align 8
  store %"char[]" { ptr @.file.205, i64 13 }, ptr %indirectarg33, align 8
  store %"char[]" { ptr @.func.196, i64 4 }, ptr %indirectarg34, align 8
  store %any %106, ptr %varargslots35, align 16
  %ptradd36 = getelementptr inbounds i8, ptr %varargslots35, i64 16
  store %any %108, ptr %ptradd36, align 16
  %109 = insertvalue %"any[]" undef, ptr %varargslots35, 0
  %"$$temp37" = insertvalue %"any[]" %109, i64 2, 1
  store %"any[]" %"$$temp37", ptr %indirectarg38, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg32, ptr align 8 %indirectarg33, ptr align 8 %indirectarg34, i32 74, ptr align 8 %indirectarg38) #5, !dbg !2560
  unreachable, !dbg !2560

panic42:                                          ; preds = %checkok39
  store i64 %33, ptr %taddr43, align 8
  %110 = insertvalue %any undef, ptr %taddr43, 0
  %111 = insertvalue %any %110, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr44, align 8
  %112 = insertvalue %any undef, ptr %taddr44, 0
  %113 = insertvalue %any %112, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.170, i64 61 }, ptr %indirectarg45, align 8
  store %"char[]" { ptr @.file.205, i64 13 }, ptr %indirectarg46, align 8
  store %"char[]" { ptr @.func.196, i64 4 }, ptr %indirectarg47, align 8
  store %any %111, ptr %varargslots48, align 16
  %ptradd49 = getelementptr inbounds i8, ptr %varargslots48, i64 16
  store %any %113, ptr %ptradd49, align 16
  %114 = insertvalue %"any[]" undef, ptr %varargslots48, 0
  %"$$temp50" = insertvalue %"any[]" %114, i64 2, 1
  store %"any[]" %"$$temp50", ptr %indirectarg51, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg45, ptr align 8 %indirectarg46, ptr align 8 %indirectarg47, i32 74, ptr align 8 %indirectarg51) #5, !dbg !2560
  unreachable, !dbg !2560

panic56:                                          ; preds = %checkok52
  store i64 %sub55, ptr %taddr57, align 8
  %115 = insertvalue %any undef, ptr %taddr57, 0
  %116 = insertvalue %any %115, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.16, i64 43 }, ptr %indirectarg58, align 8
  store %"char[]" { ptr @.file.205, i64 13 }, ptr %indirectarg59, align 8
  store %"char[]" { ptr @.func.196, i64 4 }, ptr %indirectarg60, align 8
  store %any %116, ptr %varargslots61, align 16
  %117 = insertvalue %"any[]" undef, ptr %varargslots61, 0
  %"$$temp62" = insertvalue %"any[]" %117, i64 1, 1
  store %"any[]" %"$$temp62", ptr %indirectarg63, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg58, ptr align 8 %indirectarg59, ptr align 8 %indirectarg60, i32 74, ptr align 8 %indirectarg63) #5, !dbg !2560
  unreachable, !dbg !2560

panic67:                                          ; preds = %checkok64
  store i64 %sub66, ptr %taddr68, align 8
  %118 = insertvalue %any undef, ptr %taddr68, 0
  %119 = insertvalue %any %118, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %33, ptr %taddr69, align 8
  %120 = insertvalue %any undef, ptr %taddr69, 0
  %121 = insertvalue %any %120, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 60 }, ptr %indirectarg70, align 8
  store %"char[]" { ptr @.file.205, i64 13 }, ptr %indirectarg71, align 8
  store %"char[]" { ptr @.func.196, i64 4 }, ptr %indirectarg72, align 8
  store %any %119, ptr %varargslots73, align 16
  %ptradd74 = getelementptr inbounds i8, ptr %varargslots73, i64 16
  store %any %121, ptr %ptradd74, align 16
  %122 = insertvalue %"any[]" undef, ptr %varargslots73, 0
  %"$$temp75" = insertvalue %"any[]" %122, i64 2, 1
  store %"any[]" %"$$temp75", ptr %indirectarg76, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg70, ptr align 8 %indirectarg71, ptr align 8 %indirectarg72, i32 74, ptr align 8 %indirectarg76) #5, !dbg !2560
  unreachable, !dbg !2560

panic79:                                          ; preds = %checkok77
  store i64 %43, ptr %taddr80, align 8
  %123 = insertvalue %any undef, ptr %taddr80, 0
  %124 = insertvalue %any %123, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %42, ptr %taddr81, align 8
  %125 = insertvalue %any undef, ptr %taddr81, 0
  %126 = insertvalue %any %125, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.198, i64 38 }, ptr %indirectarg82, align 8
  store %"char[]" { ptr @.file.205, i64 13 }, ptr %indirectarg83, align 8
  store %"char[]" { ptr @.func.196, i64 4 }, ptr %indirectarg84, align 8
  store %any %124, ptr %varargslots85, align 16
  %ptradd86 = getelementptr inbounds i8, ptr %varargslots85, i64 16
  store %any %126, ptr %ptradd86, align 16
  %127 = insertvalue %"any[]" undef, ptr %varargslots85, 0
  %"$$temp87" = insertvalue %"any[]" %127, i64 2, 1
  store %"any[]" %"$$temp87", ptr %indirectarg88, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg82, ptr align 8 %indirectarg83, ptr align 8 %indirectarg84, i32 74, ptr align 8 %indirectarg88) #5, !dbg !2560
  unreachable, !dbg !2560

panic110:                                         ; preds = %if.then101
  store i64 %68, ptr %taddr111, align 8
  %128 = insertvalue %any undef, ptr %taddr111, 0
  %129 = insertvalue %any %128, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sub108, ptr %taddr112, align 8
  %130 = insertvalue %any undef, ptr %taddr112, 0
  %131 = insertvalue %any %130, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.170, i64 61 }, ptr %indirectarg113, align 8
  store %"char[]" { ptr @.file.205, i64 13 }, ptr %indirectarg114, align 8
  store %"char[]" { ptr @.func.196, i64 4 }, ptr %indirectarg115, align 8
  store %any %129, ptr %varargslots116, align 16
  %ptradd117 = getelementptr inbounds i8, ptr %varargslots116, i64 16
  store %any %131, ptr %ptradd117, align 16
  %132 = insertvalue %"any[]" undef, ptr %varargslots116, 0
  %"$$temp118" = insertvalue %"any[]" %132, i64 2, 1
  store %"any[]" %"$$temp118", ptr %indirectarg119, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg113, ptr align 8 %indirectarg114, ptr align 8 %indirectarg115, i32 144, ptr align 8 %indirectarg119) #5, !dbg !2571
  unreachable, !dbg !2571

panic121:                                         ; preds = %checkok120
  store i64 %sub108, ptr %taddr122, align 8
  %133 = insertvalue %any undef, ptr %taddr122, 0
  %134 = insertvalue %any %133, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.214, i64 22 }, ptr %indirectarg123, align 8
  store %"char[]" { ptr @.file.205, i64 13 }, ptr %indirectarg124, align 8
  store %"char[]" { ptr @.func.196, i64 4 }, ptr %indirectarg125, align 8
  store %any %134, ptr %varargslots126, align 16
  %135 = insertvalue %"any[]" undef, ptr %varargslots126, 0
  %"$$temp127" = insertvalue %"any[]" %135, i64 1, 1
  store %"any[]" %"$$temp127", ptr %indirectarg128, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg123, ptr align 8 %indirectarg124, ptr align 8 %indirectarg125, i32 144, ptr align 8 %indirectarg128) #5, !dbg !2571
  unreachable, !dbg !2571

panic134:                                         ; preds = %checkok129
  store i64 %sub133, ptr %taddr135, align 8
  %136 = insertvalue %any undef, ptr %taddr135, 0
  %137 = insertvalue %any %136, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.16, i64 43 }, ptr %indirectarg136, align 8
  store %"char[]" { ptr @.file.205, i64 13 }, ptr %indirectarg137, align 8
  store %"char[]" { ptr @.func.196, i64 4 }, ptr %indirectarg138, align 8
  store %any %137, ptr %varargslots139, align 16
  %138 = insertvalue %"any[]" undef, ptr %varargslots139, 0
  %"$$temp140" = insertvalue %"any[]" %138, i64 1, 1
  store %"any[]" %"$$temp140", ptr %indirectarg141, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg136, ptr align 8 %indirectarg137, ptr align 8 %indirectarg138, i32 144, ptr align 8 %indirectarg141) #5, !dbg !2571
  unreachable, !dbg !2571

panic145:                                         ; preds = %checkok142
  store i64 %sub144, ptr %taddr146, align 8
  %139 = insertvalue %any undef, ptr %taddr146, 0
  %140 = insertvalue %any %139, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %68, ptr %taddr147, align 8
  %141 = insertvalue %any undef, ptr %taddr147, 0
  %142 = insertvalue %any %141, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 60 }, ptr %indirectarg148, align 8
  store %"char[]" { ptr @.file.205, i64 13 }, ptr %indirectarg149, align 8
  store %"char[]" { ptr @.func.196, i64 4 }, ptr %indirectarg150, align 8
  store %any %140, ptr %varargslots151, align 16
  %ptradd152 = getelementptr inbounds i8, ptr %varargslots151, i64 16
  store %any %142, ptr %ptradd152, align 16
  %143 = insertvalue %"any[]" undef, ptr %varargslots151, 0
  %"$$temp153" = insertvalue %"any[]" %143, i64 2, 1
  store %"any[]" %"$$temp153", ptr %indirectarg154, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg148, ptr align 8 %indirectarg149, ptr align 8 %indirectarg150, i32 144, ptr align 8 %indirectarg154) #5, !dbg !2571
  unreachable, !dbg !2571

panic160:                                         ; preds = %checkok155
  store i64 %79, ptr %taddr161, align 8
  %144 = insertvalue %any undef, ptr %taddr161, 0
  %145 = insertvalue %any %144, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr162, align 8
  %146 = insertvalue %any undef, ptr %taddr162, 0
  %147 = insertvalue %any %146, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.170, i64 61 }, ptr %indirectarg163, align 8
  store %"char[]" { ptr @.file.205, i64 13 }, ptr %indirectarg164, align 8
  store %"char[]" { ptr @.func.196, i64 4 }, ptr %indirectarg165, align 8
  store %any %145, ptr %varargslots166, align 16
  %ptradd167 = getelementptr inbounds i8, ptr %varargslots166, i64 16
  store %any %147, ptr %ptradd167, align 16
  %148 = insertvalue %"any[]" undef, ptr %varargslots166, 0
  %"$$temp168" = insertvalue %"any[]" %148, i64 2, 1
  store %"any[]" %"$$temp168", ptr %indirectarg169, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg163, ptr align 8 %indirectarg164, ptr align 8 %indirectarg165, i32 144, ptr align 8 %indirectarg169) #5, !dbg !2571
  unreachable, !dbg !2571

panic175:                                         ; preds = %checkok170
  store i64 %sub174, ptr %taddr176, align 8
  %149 = insertvalue %any undef, ptr %taddr176, 0
  %150 = insertvalue %any %149, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.16, i64 43 }, ptr %indirectarg177, align 8
  store %"char[]" { ptr @.file.205, i64 13 }, ptr %indirectarg178, align 8
  store %"char[]" { ptr @.func.196, i64 4 }, ptr %indirectarg179, align 8
  store %any %150, ptr %varargslots180, align 16
  %151 = insertvalue %"any[]" undef, ptr %varargslots180, 0
  %"$$temp181" = insertvalue %"any[]" %151, i64 1, 1
  store %"any[]" %"$$temp181", ptr %indirectarg182, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg177, ptr align 8 %indirectarg178, ptr align 8 %indirectarg179, i32 144, ptr align 8 %indirectarg182) #5, !dbg !2571
  unreachable, !dbg !2571

panic186:                                         ; preds = %checkok183
  store i64 %sub185, ptr %taddr187, align 8
  %152 = insertvalue %any undef, ptr %taddr187, 0
  %153 = insertvalue %any %152, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %79, ptr %taddr188, align 8
  %154 = insertvalue %any undef, ptr %taddr188, 0
  %155 = insertvalue %any %154, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 60 }, ptr %indirectarg189, align 8
  store %"char[]" { ptr @.file.205, i64 13 }, ptr %indirectarg190, align 8
  store %"char[]" { ptr @.func.196, i64 4 }, ptr %indirectarg191, align 8
  store %any %153, ptr %varargslots192, align 16
  %ptradd193 = getelementptr inbounds i8, ptr %varargslots192, i64 16
  store %any %155, ptr %ptradd193, align 16
  %156 = insertvalue %"any[]" undef, ptr %varargslots192, 0
  %"$$temp194" = insertvalue %"any[]" %156, i64 2, 1
  store %"any[]" %"$$temp194", ptr %indirectarg195, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg189, ptr align 8 %indirectarg190, ptr align 8 %indirectarg191, i32 144, ptr align 8 %indirectarg195) #5, !dbg !2571
  unreachable, !dbg !2571

panic199:                                         ; preds = %checkok196
  store i64 %89, ptr %taddr200, align 8
  %157 = insertvalue %any undef, ptr %taddr200, 0
  %158 = insertvalue %any %157, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %88, ptr %taddr201, align 8
  %159 = insertvalue %any undef, ptr %taddr201, 0
  %160 = insertvalue %any %159, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.198, i64 38 }, ptr %indirectarg202, align 8
  store %"char[]" { ptr @.file.205, i64 13 }, ptr %indirectarg203, align 8
  store %"char[]" { ptr @.func.196, i64 4 }, ptr %indirectarg204, align 8
  store %any %158, ptr %varargslots205, align 16
  %ptradd206 = getelementptr inbounds i8, ptr %varargslots205, i64 16
  store %any %160, ptr %ptradd206, align 16
  %161 = insertvalue %"any[]" undef, ptr %varargslots205, 0
  %"$$temp207" = insertvalue %"any[]" %161, i64 2, 1
  store %"any[]" %"$$temp207", ptr %indirectarg208, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg202, ptr align 8 %indirectarg203, ptr align 8 %indirectarg204, i32 144, ptr align 8 %indirectarg208) #5, !dbg !2571
  unreachable, !dbg !2571
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.ByteBuffer.read_byte(ptr %0, ptr %1) #0 comdat !dbg !2575 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %readable = alloca i64, align 8
  %c = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr9 = alloca i64, align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg14 = alloca %"any[]", align 8
  %self19 = alloca ptr, align 8
  %indirectarg20 = alloca %"char[]", align 8
  %indirectarg21 = alloca %"char[]", align 8
  %indirectarg22 = alloca %"char[]", align 8
  %readable27 = alloca i64, align 8
  %taddr35 = alloca i64, align 8
  %taddr36 = alloca i64, align 8
  %indirectarg37 = alloca %"char[]", align 8
  %indirectarg38 = alloca %"char[]", align 8
  %indirectarg39 = alloca %"char[]", align 8
  %varargslots40 = alloca [2 x %any], align 16
  %indirectarg43 = alloca %"any[]", align 8
  %taddr46 = alloca i64, align 8
  %indirectarg47 = alloca %"char[]", align 8
  %indirectarg48 = alloca %"char[]", align 8
  %indirectarg49 = alloca %"char[]", align 8
  %varargslots50 = alloca [1 x %any], align 16
  %indirectarg52 = alloca %"any[]", align 8
  %taddr59 = alloca i64, align 8
  %indirectarg60 = alloca %"char[]", align 8
  %indirectarg61 = alloca %"char[]", align 8
  %indirectarg62 = alloca %"char[]", align 8
  %varargslots63 = alloca [1 x %any], align 16
  %indirectarg65 = alloca %"any[]", align 8
  %taddr69 = alloca i64, align 8
  %taddr70 = alloca i64, align 8
  %indirectarg71 = alloca %"char[]", align 8
  %indirectarg72 = alloca %"char[]", align 8
  %indirectarg73 = alloca %"char[]", align 8
  %varargslots74 = alloca [2 x %any], align 16
  %indirectarg77 = alloca %"any[]", align 8
  %taddr83 = alloca i64, align 8
  %taddr84 = alloca i64, align 8
  %indirectarg85 = alloca %"char[]", align 8
  %indirectarg86 = alloca %"char[]", align 8
  %indirectarg87 = alloca %"char[]", align 8
  %varargslots88 = alloca [2 x %any], align 16
  %indirectarg91 = alloca %"any[]", align 8
  %taddr98 = alloca i64, align 8
  %indirectarg99 = alloca %"char[]", align 8
  %indirectarg100 = alloca %"char[]", align 8
  %indirectarg101 = alloca %"char[]", align 8
  %varargslots102 = alloca [1 x %any], align 16
  %indirectarg104 = alloca %"any[]", align 8
  %taddr109 = alloca i64, align 8
  %taddr110 = alloca i64, align 8
  %indirectarg111 = alloca %"char[]", align 8
  %indirectarg112 = alloca %"char[]", align 8
  %indirectarg113 = alloca %"char[]", align 8
  %varargslots114 = alloca [2 x %any], align 16
  %indirectarg117 = alloca %"any[]", align 8
  %taddr122 = alloca i64, align 8
  %taddr123 = alloca i64, align 8
  %indirectarg124 = alloca %"char[]", align 8
  %indirectarg125 = alloca %"char[]", align 8
  %indirectarg126 = alloca %"char[]", align 8
  %varargslots127 = alloca [2 x %any], align 16
  %indirectarg130 = alloca %"any[]", align 8
  %reterr = alloca i64, align 8
  %2 = icmp eq ptr %1, null, !dbg !2578
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !2578
  br i1 %3, label %panic, label %checkok, !dbg !2578

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !2579, !DIExpression(), !2580)
    #dbg_declare(ptr %readable, !2581, !DIExpression(), !2582)
  %4 = load ptr, ptr %self, align 8, !dbg !2582
  %ptradd = getelementptr inbounds i8, ptr %4, i64 48, !dbg !2582
  %5 = load i64, ptr %ptradd, align 8, !dbg !2582
  %6 = load ptr, ptr %self, align 8, !dbg !2582
  %ptradd3 = getelementptr inbounds i8, ptr %6, i64 40, !dbg !2582
  %7 = load i64, ptr %ptradd3, align 8, !dbg !2582
  %sub = sub i64 %5, %7, !dbg !2582
  store i64 %sub, ptr %readable, align 8, !dbg !2582
  %8 = load i64, ptr %readable, align 8, !dbg !2583
  %eq = icmp eq i64 0, %8, !dbg !2583
  br i1 %eq, label %if.then, label %if.exit, !dbg !2583

if.then:                                          ; preds = %checkok
  %9 = load ptr, ptr %self, align 8, !dbg !2584
  %ptradd4 = getelementptr inbounds i8, ptr %9, i64 56, !dbg !2584
  store i8 0, ptr %ptradd4, align 8, !dbg !2584
  ret i64 ptrtoint (ptr @std.io.EOF to i64), !dbg !2586

if.exit:                                          ; preds = %checkok
    #dbg_declare(ptr %c, !2587, !DIExpression(), !2588)
  %10 = load ptr, ptr %self, align 8, !dbg !2588
  %ptradd5 = getelementptr inbounds i8, ptr %10, i64 24, !dbg !2588
  %ptradd6 = getelementptr inbounds i8, ptr %ptradd5, i64 8, !dbg !2588
  %11 = load i64, ptr %ptradd6, align 8, !dbg !2588
  %12 = load ptr, ptr %ptradd5, align 8, !dbg !2588
  %13 = load ptr, ptr %self, align 8, !dbg !2588
  %ptradd7 = getelementptr inbounds i8, ptr %13, i64 40, !dbg !2588
  %14 = load i64, ptr %ptradd7, align 8, !dbg !2588
  %ge = icmp uge i64 %14, %11, !dbg !2588
  %15 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !2588
  br i1 %15, label %panic8, label %checkok15, !dbg !2588

checkok15:                                        ; preds = %if.exit
  %ptradd16 = getelementptr inbounds i8, ptr %12, i64 %14, !dbg !2588
  %16 = load i8, ptr %ptradd16, align 1, !dbg !2588
  store i8 %16, ptr %c, align 1, !dbg !2588
  %17 = load ptr, ptr %self, align 8, !dbg !2589
  %ptradd17 = getelementptr inbounds i8, ptr %17, i64 40, !dbg !2589
  %18 = load i64, ptr %ptradd17, align 8, !dbg !2589
  %add = add i64 %18, 1, !dbg !2589
  store i64 %add, ptr %ptradd17, align 8, !dbg !2589
  %19 = load ptr, ptr %self, align 8, !dbg !2590
  %ptradd18 = getelementptr inbounds i8, ptr %19, i64 56, !dbg !2590
  store i8 1, ptr %ptradd18, align 8, !dbg !2590
  %20 = load ptr, ptr %self, align 8
  store ptr %20, ptr %self19, align 8
  %21 = load ptr, ptr %self19, align 8, !dbg !2591
  %neq = icmp ne ptr %21, null, !dbg !2591
  br i1 %neq, label %assert_ok, label %assert_fail, !dbg !2591

assert_fail:                                      ; preds = %checkok15
  store %"char[]" { ptr @.panic_msg.52, i64 32 }, ptr %indirectarg20, align 8
  store %"char[]" { ptr @.file.205, i64 13 }, ptr %indirectarg21, align 8
  store %"char[]" { ptr @.func.199, i64 9 }, ptr %indirectarg22, align 8
  %22 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %22(ptr align 8 %indirectarg20, ptr align 8 %indirectarg21, ptr align 8 %indirectarg22, i32 138) #5, !dbg !2591
  unreachable, !dbg !2591

assert_ok:                                        ; preds = %checkok15
  %23 = load ptr, ptr %self19, align 8, !dbg !2595
  %ptradd23 = getelementptr inbounds i8, ptr %23, i64 40, !dbg !2595
  %24 = load i64, ptr %ptradd23, align 8, !dbg !2595
  %25 = load ptr, ptr %self19, align 8, !dbg !2595
  %ptradd24 = getelementptr inbounds i8, ptr %25, i64 16, !dbg !2595
  %26 = load i64, ptr %ptradd24, align 8, !dbg !2595
  %ge25 = icmp uge i64 %24, %26, !dbg !2595
  br i1 %ge25, label %if.then26, label %if.exit135, !dbg !2595

if.then26:                                        ; preds = %assert_ok
    #dbg_declare(ptr %readable27, !2596, !DIExpression(), !2598)
  %27 = load ptr, ptr %self19, align 8, !dbg !2598
  %ptradd28 = getelementptr inbounds i8, ptr %27, i64 48, !dbg !2598
  %28 = load i64, ptr %ptradd28, align 8, !dbg !2598
  %29 = load ptr, ptr %self19, align 8, !dbg !2598
  %ptradd29 = getelementptr inbounds i8, ptr %29, i64 40, !dbg !2598
  %30 = load i64, ptr %ptradd29, align 8, !dbg !2598
  %sub30 = sub i64 %28, %30, !dbg !2598
  store i64 %sub30, ptr %readable27, align 8, !dbg !2598
  %31 = load ptr, ptr %self19, align 8, !dbg !2599
  %ptradd31 = getelementptr inbounds i8, ptr %31, i64 24, !dbg !2599
  %32 = load %"char[]", ptr %ptradd31, align 8, !dbg !2599
  %33 = extractvalue %"char[]" %32, 0, !dbg !2599
  %34 = load ptr, ptr %self19, align 8, !dbg !2599
  %ptradd32 = getelementptr inbounds i8, ptr %34, i64 40, !dbg !2599
  %35 = load i64, ptr %ptradd32, align 8, !dbg !2599
  %sub33 = sub i64 %35, 1, !dbg !2599
  %36 = extractvalue %"char[]" %32, 1, !dbg !2599
  %gt = icmp sgt i64 %sub33, %36, !dbg !2599
  %37 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !2599
  br i1 %37, label %panic34, label %checkok44, !dbg !2599

checkok44:                                        ; preds = %if.then26
  %underflow = icmp slt i64 %sub33, 0, !dbg !2599
  %38 = call i1 @llvm.expect.i1(i1 %underflow, i1 false), !dbg !2599
  br i1 %38, label %panic45, label %checkok53, !dbg !2599

checkok53:                                        ; preds = %checkok44
  %39 = load i64, ptr %readable27, align 8, !dbg !2599
  %add54 = add i64 1, %39, !dbg !2599
  %add55 = add i64 %sub33, %add54, !dbg !2599
  %gt56 = icmp sgt i64 %sub33, %add55, !dbg !2599
  %sub57 = sub i64 %add55, %sub33, !dbg !2599
  %40 = call i1 @llvm.expect.i1(i1 %gt56, i1 false), !dbg !2599
  br i1 %40, label %panic58, label %checkok66, !dbg !2599

checkok66:                                        ; preds = %checkok53
  %lt = icmp slt i64 %36, %add55, !dbg !2599
  %sub67 = sub i64 %add55, 1, !dbg !2599
  %41 = call i1 @llvm.expect.i1(i1 %lt, i1 false), !dbg !2599
  br i1 %41, label %panic68, label %checkok78, !dbg !2599

checkok78:                                        ; preds = %checkok66
  %size = sub i64 %add55, %sub33, !dbg !2599
  %ptradd79 = getelementptr inbounds i8, ptr %33, i64 %sub33, !dbg !2599
  %42 = insertvalue %"char[]" undef, ptr %ptradd79, 0, !dbg !2599
  %43 = insertvalue %"char[]" %42, i64 %size, 1, !dbg !2599
  %44 = load ptr, ptr %self19, align 8, !dbg !2599
  %ptradd80 = getelementptr inbounds i8, ptr %44, i64 24, !dbg !2599
  %45 = load %"char[]", ptr %ptradd80, align 8, !dbg !2599
  %46 = extractvalue %"char[]" %45, 0, !dbg !2599
  %47 = extractvalue %"char[]" %45, 1, !dbg !2599
  %gt81 = icmp sgt i64 0, %47, !dbg !2599
  %48 = call i1 @llvm.expect.i1(i1 %gt81, i1 false), !dbg !2599
  br i1 %48, label %panic82, label %checkok92, !dbg !2599

checkok92:                                        ; preds = %checkok78
  %49 = load i64, ptr %readable27, align 8, !dbg !2599
  %add93 = add i64 1, %49, !dbg !2599
  %add94 = add i64 0, %add93, !dbg !2599
  %gt95 = icmp sgt i64 0, %add94, !dbg !2599
  %sub96 = sub i64 %add94, 0, !dbg !2599
  %50 = call i1 @llvm.expect.i1(i1 %gt95, i1 false), !dbg !2599
  br i1 %50, label %panic97, label %checkok105, !dbg !2599

checkok105:                                       ; preds = %checkok92
  %lt106 = icmp slt i64 %47, %add94, !dbg !2599
  %sub107 = sub i64 %add94, 1, !dbg !2599
  %51 = call i1 @llvm.expect.i1(i1 %lt106, i1 false), !dbg !2599
  br i1 %51, label %panic108, label %checkok118, !dbg !2599

checkok118:                                       ; preds = %checkok105
  %size119 = sub i64 %add94, 0, !dbg !2599
  %52 = insertvalue %"char[]" undef, ptr %46, 0, !dbg !2599
  %53 = insertvalue %"char[]" %52, i64 %size119, 1, !dbg !2599
  %54 = extractvalue %"char[]" %53, 0, !dbg !2599
  %55 = extractvalue %"char[]" %43, 0, !dbg !2599
  %56 = extractvalue %"char[]" %43, 1, !dbg !2599
  %57 = extractvalue %"char[]" %53, 1, !dbg !2599
  %neq120 = icmp ne i64 %57, %56, !dbg !2599
  %58 = call i1 @llvm.expect.i1(i1 %neq120, i1 false), !dbg !2599
  br i1 %58, label %panic121, label %checkok131, !dbg !2599

checkok131:                                       ; preds = %checkok118
  %59 = mul i64 %56, 1, !dbg !2599
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %54, ptr align 1 %55, i64 %59, i1 false), !dbg !2599
  %60 = load i64, ptr %readable27, align 8, !dbg !2600
  %add132 = add i64 1, %60, !dbg !2600
  %61 = load ptr, ptr %self19, align 8, !dbg !2600
  %ptradd133 = getelementptr inbounds i8, ptr %61, i64 48, !dbg !2600
  store i64 %add132, ptr %ptradd133, align 8, !dbg !2600
  %62 = load ptr, ptr %self19, align 8, !dbg !2601
  %ptradd134 = getelementptr inbounds i8, ptr %62, i64 40, !dbg !2601
  store i64 1, ptr %ptradd134, align 8, !dbg !2601
  br label %if.exit135, !dbg !2601

if.exit135:                                       ; preds = %checkok131, %assert_ok
  %63 = load i8, ptr %c, align 1, !dbg !2602
  store i8 %63, ptr %0, align 1, !dbg !2602
  ret i64 0, !dbg !2602

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.205, i64 13 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.199, i64 9 }, ptr %indirectarg2, align 8
  %64 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %64(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 81) #5, !dbg !2580
  unreachable, !dbg !2580

panic8:                                           ; preds = %if.exit
  store i64 %11, ptr %taddr, align 8
  %65 = insertvalue %any undef, ptr %taddr, 0
  %66 = insertvalue %any %65, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %14, ptr %taddr9, align 8
  %67 = insertvalue %any undef, ptr %taddr9, 0
  %68 = insertvalue %any %67, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.71, i64 59 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.file.205, i64 13 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.func.199, i64 9 }, ptr %indirectarg12, align 8
  store %any %66, ptr %varargslots, align 16
  %ptradd13 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %68, ptr %ptradd13, align 16
  %69 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %69, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg14, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, i32 89, ptr align 8 %indirectarg14) #5, !dbg !2588
  unreachable, !dbg !2588

panic34:                                          ; preds = %if.then26
  store i64 %36, ptr %taddr35, align 8
  %70 = insertvalue %any undef, ptr %taddr35, 0
  %71 = insertvalue %any %70, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sub33, ptr %taddr36, align 8
  %72 = insertvalue %any undef, ptr %taddr36, 0
  %73 = insertvalue %any %72, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.170, i64 61 }, ptr %indirectarg37, align 8
  store %"char[]" { ptr @.file.205, i64 13 }, ptr %indirectarg38, align 8
  store %"char[]" { ptr @.func.199, i64 9 }, ptr %indirectarg39, align 8
  store %any %71, ptr %varargslots40, align 16
  %ptradd41 = getelementptr inbounds i8, ptr %varargslots40, i64 16
  store %any %73, ptr %ptradd41, align 16
  %74 = insertvalue %"any[]" undef, ptr %varargslots40, 0
  %"$$temp42" = insertvalue %"any[]" %74, i64 2, 1
  store %"any[]" %"$$temp42", ptr %indirectarg43, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg37, ptr align 8 %indirectarg38, ptr align 8 %indirectarg39, i32 144, ptr align 8 %indirectarg43) #5, !dbg !2599
  unreachable, !dbg !2599

panic45:                                          ; preds = %checkok44
  store i64 %sub33, ptr %taddr46, align 8
  %75 = insertvalue %any undef, ptr %taddr46, 0
  %76 = insertvalue %any %75, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.214, i64 22 }, ptr %indirectarg47, align 8
  store %"char[]" { ptr @.file.205, i64 13 }, ptr %indirectarg48, align 8
  store %"char[]" { ptr @.func.199, i64 9 }, ptr %indirectarg49, align 8
  store %any %76, ptr %varargslots50, align 16
  %77 = insertvalue %"any[]" undef, ptr %varargslots50, 0
  %"$$temp51" = insertvalue %"any[]" %77, i64 1, 1
  store %"any[]" %"$$temp51", ptr %indirectarg52, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg47, ptr align 8 %indirectarg48, ptr align 8 %indirectarg49, i32 144, ptr align 8 %indirectarg52) #5, !dbg !2599
  unreachable, !dbg !2599

panic58:                                          ; preds = %checkok53
  store i64 %sub57, ptr %taddr59, align 8
  %78 = insertvalue %any undef, ptr %taddr59, 0
  %79 = insertvalue %any %78, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.16, i64 43 }, ptr %indirectarg60, align 8
  store %"char[]" { ptr @.file.205, i64 13 }, ptr %indirectarg61, align 8
  store %"char[]" { ptr @.func.199, i64 9 }, ptr %indirectarg62, align 8
  store %any %79, ptr %varargslots63, align 16
  %80 = insertvalue %"any[]" undef, ptr %varargslots63, 0
  %"$$temp64" = insertvalue %"any[]" %80, i64 1, 1
  store %"any[]" %"$$temp64", ptr %indirectarg65, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg60, ptr align 8 %indirectarg61, ptr align 8 %indirectarg62, i32 144, ptr align 8 %indirectarg65) #5, !dbg !2599
  unreachable, !dbg !2599

panic68:                                          ; preds = %checkok66
  store i64 %sub67, ptr %taddr69, align 8
  %81 = insertvalue %any undef, ptr %taddr69, 0
  %82 = insertvalue %any %81, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %36, ptr %taddr70, align 8
  %83 = insertvalue %any undef, ptr %taddr70, 0
  %84 = insertvalue %any %83, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 60 }, ptr %indirectarg71, align 8
  store %"char[]" { ptr @.file.205, i64 13 }, ptr %indirectarg72, align 8
  store %"char[]" { ptr @.func.199, i64 9 }, ptr %indirectarg73, align 8
  store %any %82, ptr %varargslots74, align 16
  %ptradd75 = getelementptr inbounds i8, ptr %varargslots74, i64 16
  store %any %84, ptr %ptradd75, align 16
  %85 = insertvalue %"any[]" undef, ptr %varargslots74, 0
  %"$$temp76" = insertvalue %"any[]" %85, i64 2, 1
  store %"any[]" %"$$temp76", ptr %indirectarg77, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg71, ptr align 8 %indirectarg72, ptr align 8 %indirectarg73, i32 144, ptr align 8 %indirectarg77) #5, !dbg !2599
  unreachable, !dbg !2599

panic82:                                          ; preds = %checkok78
  store i64 %47, ptr %taddr83, align 8
  %86 = insertvalue %any undef, ptr %taddr83, 0
  %87 = insertvalue %any %86, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr84, align 8
  %88 = insertvalue %any undef, ptr %taddr84, 0
  %89 = insertvalue %any %88, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.170, i64 61 }, ptr %indirectarg85, align 8
  store %"char[]" { ptr @.file.205, i64 13 }, ptr %indirectarg86, align 8
  store %"char[]" { ptr @.func.199, i64 9 }, ptr %indirectarg87, align 8
  store %any %87, ptr %varargslots88, align 16
  %ptradd89 = getelementptr inbounds i8, ptr %varargslots88, i64 16
  store %any %89, ptr %ptradd89, align 16
  %90 = insertvalue %"any[]" undef, ptr %varargslots88, 0
  %"$$temp90" = insertvalue %"any[]" %90, i64 2, 1
  store %"any[]" %"$$temp90", ptr %indirectarg91, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg85, ptr align 8 %indirectarg86, ptr align 8 %indirectarg87, i32 144, ptr align 8 %indirectarg91) #5, !dbg !2599
  unreachable, !dbg !2599

panic97:                                          ; preds = %checkok92
  store i64 %sub96, ptr %taddr98, align 8
  %91 = insertvalue %any undef, ptr %taddr98, 0
  %92 = insertvalue %any %91, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.16, i64 43 }, ptr %indirectarg99, align 8
  store %"char[]" { ptr @.file.205, i64 13 }, ptr %indirectarg100, align 8
  store %"char[]" { ptr @.func.199, i64 9 }, ptr %indirectarg101, align 8
  store %any %92, ptr %varargslots102, align 16
  %93 = insertvalue %"any[]" undef, ptr %varargslots102, 0
  %"$$temp103" = insertvalue %"any[]" %93, i64 1, 1
  store %"any[]" %"$$temp103", ptr %indirectarg104, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg99, ptr align 8 %indirectarg100, ptr align 8 %indirectarg101, i32 144, ptr align 8 %indirectarg104) #5, !dbg !2599
  unreachable, !dbg !2599

panic108:                                         ; preds = %checkok105
  store i64 %sub107, ptr %taddr109, align 8
  %94 = insertvalue %any undef, ptr %taddr109, 0
  %95 = insertvalue %any %94, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %47, ptr %taddr110, align 8
  %96 = insertvalue %any undef, ptr %taddr110, 0
  %97 = insertvalue %any %96, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 60 }, ptr %indirectarg111, align 8
  store %"char[]" { ptr @.file.205, i64 13 }, ptr %indirectarg112, align 8
  store %"char[]" { ptr @.func.199, i64 9 }, ptr %indirectarg113, align 8
  store %any %95, ptr %varargslots114, align 16
  %ptradd115 = getelementptr inbounds i8, ptr %varargslots114, i64 16
  store %any %97, ptr %ptradd115, align 16
  %98 = insertvalue %"any[]" undef, ptr %varargslots114, 0
  %"$$temp116" = insertvalue %"any[]" %98, i64 2, 1
  store %"any[]" %"$$temp116", ptr %indirectarg117, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg111, ptr align 8 %indirectarg112, ptr align 8 %indirectarg113, i32 144, ptr align 8 %indirectarg117) #5, !dbg !2599
  unreachable, !dbg !2599

panic121:                                         ; preds = %checkok118
  store i64 %57, ptr %taddr122, align 8
  %99 = insertvalue %any undef, ptr %taddr122, 0
  %100 = insertvalue %any %99, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %56, ptr %taddr123, align 8
  %101 = insertvalue %any undef, ptr %taddr123, 0
  %102 = insertvalue %any %101, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.198, i64 38 }, ptr %indirectarg124, align 8
  store %"char[]" { ptr @.file.205, i64 13 }, ptr %indirectarg125, align 8
  store %"char[]" { ptr @.func.199, i64 9 }, ptr %indirectarg126, align 8
  store %any %100, ptr %varargslots127, align 16
  %ptradd128 = getelementptr inbounds i8, ptr %varargslots127, i64 16
  store %any %102, ptr %ptradd128, align 16
  %103 = insertvalue %"any[]" undef, ptr %varargslots127, 0
  %"$$temp129" = insertvalue %"any[]" %103, i64 2, 1
  store %"any[]" %"$$temp129", ptr %indirectarg130, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg124, ptr align 8 %indirectarg125, ptr align 8 %indirectarg126, i32 144, ptr align 8 %indirectarg130) #5, !dbg !2599
  unreachable, !dbg !2599
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.ByteBuffer.pushback_byte(ptr %0) #0 comdat !dbg !2603 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %1 = icmp eq ptr %0, null, !dbg !2606
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2606
  br i1 %2, label %panic, label %checkok, !dbg !2606

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2607, !DIExpression(), !2608)
  %3 = load ptr, ptr %self, align 8, !dbg !2609
  %ptradd = getelementptr inbounds i8, ptr %3, i64 56, !dbg !2609
  %4 = load i8, ptr %ptradd, align 8, !dbg !2609
  %5 = trunc i8 %4 to i1, !dbg !2609
  br i1 %5, label %if.exit, label %if.else, !dbg !2609

if.else:                                          ; preds = %checkok
  ret i64 ptrtoint (ptr @std.io.EOF to i64), !dbg !2609

if.exit:                                          ; preds = %checkok
  %6 = load ptr, ptr %self, align 8, !dbg !2610
  %ptradd3 = getelementptr inbounds i8, ptr %6, i64 40, !dbg !2610
  %7 = load i64, ptr %ptradd3, align 8, !dbg !2610
  %lt = icmp ult i64 0, %7, !dbg !2610
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !2610

assert_fail:                                      ; preds = %if.exit
  store %"char[]" { ptr @.panic_msg.216, i64 34 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.205, i64 13 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.215, i64 13 }, ptr %indirectarg6, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 102) #5, !dbg !2610
  unreachable, !dbg !2610

assert_ok:                                        ; preds = %if.exit
  %9 = load ptr, ptr %self, align 8, !dbg !2611
  %ptradd7 = getelementptr inbounds i8, ptr %9, i64 40, !dbg !2611
  %10 = load i64, ptr %ptradd7, align 8, !dbg !2611
  %sub = sub i64 %10, 1, !dbg !2611
  store i64 %sub, ptr %ptradd7, align 8, !dbg !2611
  %11 = load ptr, ptr %self, align 8, !dbg !2612
  %ptradd8 = getelementptr inbounds i8, ptr %11, i64 56, !dbg !2612
  store i8 0, ptr %ptradd8, align 8, !dbg !2612
  ret i64 0, !dbg !2612

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.205, i64 13 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.215, i64 13 }, ptr %indirectarg2, align 8
  %12 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %12(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 99) #5, !dbg !2608
  unreachable, !dbg !2608
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.ByteBuffer.seek(ptr %0, ptr %1, i64 %2, i32 %3) #0 comdat !dbg !2613 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %offset = alloca i64, align 8
  %seek = alloca i32, align 4
  %switch = alloca i32, align 4
  %reterr = alloca i64, align 8
  %reterr40 = alloca i64, align 8
  %4 = icmp eq ptr %1, null, !dbg !2616
  %5 = call i1 @llvm.expect.i1(i1 %4, i1 false), !dbg !2616
  br i1 %5, label %panic, label %checkok, !dbg !2616

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !2617, !DIExpression(), !2618)
  store i64 %2, ptr %offset, align 8
    #dbg_declare(ptr %offset, !2619, !DIExpression(), !2618)
  store i32 %3, ptr %seek, align 4
    #dbg_declare(ptr %seek, !2620, !DIExpression(), !2618)
  %6 = load i32, ptr %seek, align 4
  store i32 %6, ptr %switch, align 4
  br label %switch.entry

switch.entry:                                     ; preds = %checkok
  %7 = load i32, ptr %switch, align 4
  switch i32 %7, label %switch.exit [
    i32 0, label %switch.case
    i32 1, label %switch.case4
    i32 2, label %switch.case27
  ]

switch.case:                                      ; preds = %switch.entry
  %8 = load i64, ptr %offset, align 8, !dbg !2621
  %lt = icmp slt i64 %8, 0, !dbg !2621
  br i1 %lt, label %or.phi, label %or.rhs, !dbg !2621

or.rhs:                                           ; preds = %switch.case
  %9 = load i64, ptr %offset, align 8, !dbg !2621
  %10 = load ptr, ptr %self, align 8, !dbg !2621
  %ptradd = getelementptr inbounds i8, ptr %10, i64 48, !dbg !2621
  %11 = load i64, ptr %ptradd, align 8, !dbg !2621
  %gt = icmp sgt i64 %9, %11, !dbg !2621
  %check = icmp sge i64 %11, 0, !dbg !2621
  %siui-gt = and i1 %check, %gt, !dbg !2621
  br label %or.phi, !dbg !2621

or.phi:                                           ; preds = %or.rhs, %switch.case
  %val = phi i1 [ true, %switch.case ], [ %siui-gt, %or.rhs ], !dbg !2621
  br i1 %val, label %if.then, label %if.exit, !dbg !2621

if.then:                                          ; preds = %or.phi
  ret i64 ptrtoint (ptr @std.io.INVALID_POSITION to i64), !dbg !2621

if.exit:                                          ; preds = %or.phi
  %12 = load i64, ptr %offset, align 8, !dbg !2624
  %13 = load ptr, ptr %self, align 8, !dbg !2624
  %ptradd3 = getelementptr inbounds i8, ptr %13, i64 40, !dbg !2624
  store i64 %12, ptr %ptradd3, align 8, !dbg !2624
  %14 = load i64, ptr %offset, align 8, !dbg !2625
  store i64 %14, ptr %0, align 8, !dbg !2625
  ret i64 0, !dbg !2625

switch.case4:                                     ; preds = %switch.entry
  %15 = load i64, ptr %offset, align 8, !dbg !2626
  %lt5 = icmp slt i64 %15, 0, !dbg !2626
  br i1 %lt5, label %and.rhs, label %and.phi, !dbg !2626

and.rhs:                                          ; preds = %switch.case4
  %16 = load ptr, ptr %self, align 8, !dbg !2626
  %ptradd6 = getelementptr inbounds i8, ptr %16, i64 40, !dbg !2626
  %17 = load i64, ptr %ptradd6, align 8, !dbg !2626
  %18 = load i64, ptr %offset, align 8, !dbg !2626
  %neg = sub i64 0, %18, !dbg !2626
  %gt7 = icmp sgt i64 %neg, %17, !dbg !2626
  %check8 = icmp sge i64 %17, 0, !dbg !2626
  %siui-gt9 = and i1 %check8, %gt7, !dbg !2626
  br label %and.phi, !dbg !2626

and.phi:                                          ; preds = %and.rhs, %switch.case4
  %val10 = phi i1 [ false, %switch.case4 ], [ %siui-gt9, %and.rhs ], !dbg !2626
  br i1 %val10, label %or.phi21, label %or.rhs11, !dbg !2626

or.rhs11:                                         ; preds = %and.phi
  %19 = load i64, ptr %offset, align 8, !dbg !2628
  %gt12 = icmp sgt i64 %19, 0, !dbg !2628
  br i1 %gt12, label %and.rhs13, label %and.phi19, !dbg !2628

and.rhs13:                                        ; preds = %or.rhs11
  %20 = load ptr, ptr %self, align 8, !dbg !2628
  %ptradd14 = getelementptr inbounds i8, ptr %20, i64 40, !dbg !2628
  %21 = load i64, ptr %ptradd14, align 8, !dbg !2628
  %22 = load i64, ptr %offset, align 8, !dbg !2628
  %add = add i64 %21, %22, !dbg !2628
  %23 = load ptr, ptr %self, align 8, !dbg !2628
  %ptradd15 = getelementptr inbounds i8, ptr %23, i64 48, !dbg !2628
  %24 = load i64, ptr %ptradd15, align 8, !dbg !2628
  %gt16 = icmp sgt i64 %add, %24, !dbg !2628
  %check17 = icmp sge i64 %24, 0, !dbg !2628
  %siui-gt18 = and i1 %check17, %gt16, !dbg !2628
  br label %and.phi19, !dbg !2628

and.phi19:                                        ; preds = %and.rhs13, %or.rhs11
  %val20 = phi i1 [ false, %or.rhs11 ], [ %siui-gt18, %and.rhs13 ], !dbg !2628
  br label %or.phi21, !dbg !2628

or.phi21:                                         ; preds = %and.phi19, %and.phi
  %val22 = phi i1 [ true, %and.phi ], [ %val20, %and.phi19 ], !dbg !2628
  br i1 %val22, label %if.then23, label %if.exit24, !dbg !2628

if.then23:                                        ; preds = %or.phi21
  ret i64 ptrtoint (ptr @std.io.INVALID_POSITION to i64), !dbg !2628

if.exit24:                                        ; preds = %or.phi21
  %25 = load ptr, ptr %self, align 8, !dbg !2629
  %ptradd25 = getelementptr inbounds i8, ptr %25, i64 40, !dbg !2629
  %26 = load i64, ptr %ptradd25, align 8, !dbg !2629
  %27 = load i64, ptr %offset, align 8, !dbg !2629
  %add26 = add i64 %26, %27, !dbg !2629
  store i64 %add26, ptr %ptradd25, align 8, !dbg !2629
  br label %switch.exit, !dbg !2629

switch.case27:                                    ; preds = %switch.entry
  %28 = load i64, ptr %offset, align 8, !dbg !2630
  %lt28 = icmp slt i64 %28, 0, !dbg !2630
  br i1 %lt28, label %or.phi34, label %or.rhs29, !dbg !2630

or.rhs29:                                         ; preds = %switch.case27
  %29 = load i64, ptr %offset, align 8, !dbg !2630
  %30 = load ptr, ptr %self, align 8, !dbg !2630
  %ptradd30 = getelementptr inbounds i8, ptr %30, i64 48, !dbg !2630
  %31 = load i64, ptr %ptradd30, align 8, !dbg !2630
  %gt31 = icmp sgt i64 %29, %31, !dbg !2630
  %check32 = icmp sge i64 %31, 0, !dbg !2630
  %siui-gt33 = and i1 %check32, %gt31, !dbg !2630
  br label %or.phi34, !dbg !2630

or.phi34:                                         ; preds = %or.rhs29, %switch.case27
  %val35 = phi i1 [ true, %switch.case27 ], [ %siui-gt33, %or.rhs29 ], !dbg !2630
  br i1 %val35, label %if.then36, label %if.exit37, !dbg !2630

if.then36:                                        ; preds = %or.phi34
  ret i64 ptrtoint (ptr @std.io.INVALID_POSITION to i64), !dbg !2630

if.exit37:                                        ; preds = %or.phi34
  %32 = load ptr, ptr %self, align 8, !dbg !2632
  %ptradd38 = getelementptr inbounds i8, ptr %32, i64 48, !dbg !2632
  %33 = load i64, ptr %ptradd38, align 8, !dbg !2632
  %34 = load i64, ptr %offset, align 8, !dbg !2632
  %sub = sub i64 %33, %34, !dbg !2632
  %35 = load ptr, ptr %self, align 8, !dbg !2632
  %ptradd39 = getelementptr inbounds i8, ptr %35, i64 40, !dbg !2632
  store i64 %sub, ptr %ptradd39, align 8, !dbg !2632
  br label %switch.exit, !dbg !2632

switch.exit:                                      ; preds = %if.exit37, %if.exit24, %switch.entry
  %36 = load ptr, ptr %self, align 8, !dbg !2633
  %ptradd41 = getelementptr inbounds i8, ptr %36, i64 40, !dbg !2633
  %37 = load i64, ptr %ptradd41, align 8, !dbg !2633
  store i64 %37, ptr %0, align 8, !dbg !2633
  ret i64 0, !dbg !2633

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.205, i64 13 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.217, i64 4 }, ptr %indirectarg2, align 8
  %38 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %38(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 107) #5, !dbg !2618
  unreachable, !dbg !2618
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.ByteBuffer.available(ptr %0, ptr %1) #0 comdat !dbg !2634 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %reterr = alloca i64, align 8
  %2 = icmp eq ptr %1, null, !dbg !2637
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !2637
  br i1 %3, label %panic, label %checkok, !dbg !2637

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !2638, !DIExpression(), !2639)
  %4 = load ptr, ptr %self, align 8, !dbg !2640
  %ptradd = getelementptr inbounds i8, ptr %4, i64 48, !dbg !2640
  %5 = load i64, ptr %ptradd, align 8, !dbg !2640
  %6 = load ptr, ptr %self, align 8, !dbg !2640
  %ptradd3 = getelementptr inbounds i8, ptr %6, i64 40, !dbg !2640
  %7 = load i64, ptr %ptradd3, align 8, !dbg !2640
  %sub = sub i64 %5, %7, !dbg !2640
  store i64 %sub, ptr %0, align 8, !dbg !2640
  ret i64 0, !dbg !2640

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.205, i64 13 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.218, i64 9 }, ptr %indirectarg2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 126) #5, !dbg !2639
  unreachable, !dbg !2639
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.io.ByteBuffer.grow(ptr %0, i64 %1) #0 comdat !dbg !2641 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %n = alloca i64, align 8
  %x = alloca i64, align 8
  %y = alloca i64, align 8
  %p = alloca ptr, align 8
  %allocator = alloca %any, align 8
  %ptr = alloca ptr, align 8
  %new_size = alloca i64, align 8
  %error_var = alloca i64, align 8
  %allocator3 = alloca %any, align 8
  %ptr4 = alloca ptr, align 8
  %new_size5 = alloca i64, align 8
  %blockret = alloca ptr, align 8
  %allocator6 = alloca %any, align 8
  %ptr7 = alloca ptr, align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %indirectarg15 = alloca %"char[]", align 8
  %indirectarg16 = alloca %"char[]", align 8
  %indirectarg17 = alloca %"char[]", align 8
  %x21 = alloca i64, align 8
  %indirectarg25 = alloca %"char[]", align 8
  %indirectarg26 = alloca %"char[]", align 8
  %indirectarg27 = alloca %"char[]", align 8
  %indirectarg30 = alloca %"char[]", align 8
  %indirectarg31 = alloca %"char[]", align 8
  %indirectarg32 = alloca %"char[]", align 8
  %indirectarg36 = alloca %"char[]", align 8
  %indirectarg37 = alloca %"char[]", align 8
  %indirectarg38 = alloca %"char[]", align 8
  %.inlinecache41 = alloca ptr, align 8
  %.cachedtype42 = alloca ptr, align 8
  %indirectarg50 = alloca %"char[]", align 8
  %indirectarg51 = alloca %"char[]", align 8
  %indirectarg52 = alloca %"char[]", align 8
  %retparam = alloca ptr, align 8
  %x56 = alloca i64, align 8
  %indirectarg67 = alloca %"char[]", align 8
  %indirectarg68 = alloca %"char[]", align 8
  %indirectarg69 = alloca %"char[]", align 8
  %indirectarg72 = alloca %"char[]", align 8
  %indirectarg73 = alloca %"char[]", align 8
  %indirectarg74 = alloca %"char[]", align 8
  %indirectarg78 = alloca %"char[]", align 8
  %indirectarg79 = alloca %"char[]", align 8
  %indirectarg80 = alloca %"char[]", align 8
  %indirectarg84 = alloca %"char[]", align 8
  %indirectarg85 = alloca %"char[]", align 8
  %indirectarg86 = alloca %"char[]", align 8
  %.inlinecache89 = alloca ptr, align 8
  %.cachedtype90 = alloca ptr, align 8
  %indirectarg98 = alloca %"char[]", align 8
  %indirectarg99 = alloca %"char[]", align 8
  %indirectarg100 = alloca %"char[]", align 8
  %retparam102 = alloca ptr, align 8
  %indirectarg107 = alloca %"char[]", align 8
  %indirectarg108 = alloca %"char[]", align 8
  %indirectarg109 = alloca %"char[]", align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg110 = alloca %"any[]", align 8
  %taddr = alloca i64, align 8
  %indirectarg114 = alloca %"char[]", align 8
  %indirectarg115 = alloca %"char[]", align 8
  %indirectarg116 = alloca %"char[]", align 8
  %varargslots117 = alloca [1 x %any], align 16
  %indirectarg119 = alloca %"any[]", align 8
  store ptr null, ptr %.cachedtype90, align 8, !dbg !2644
  store ptr null, ptr %.cachedtype42, align 8, !dbg !2644
  store ptr null, ptr %.cachedtype, align 8, !dbg !2644
  %2 = icmp eq ptr %0, null, !dbg !2644
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !2644
  br i1 %3, label %panic, label %checkok, !dbg !2644

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2645, !DIExpression(), !2646)
  store i64 %1, ptr %n, align 8
    #dbg_declare(ptr %n, !2647, !DIExpression(), !2646)
  %4 = load i64, ptr %n, align 8
  store i64 %4, ptr %x, align 8
    #dbg_declare(ptr %y, !2648, !DIExpression(), !2650)
  store i64 1, ptr %y, align 8, !dbg !2650
  br label %loop.cond, !dbg !2652

loop.cond:                                        ; preds = %loop.body, %checkok
  %5 = load i64, ptr %y, align 8, !dbg !2653
  %6 = load i64, ptr %x, align 8, !dbg !2653
  %lt = icmp ult i64 %5, %6, !dbg !2653
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !2653

loop.body:                                        ; preds = %loop.cond
  %7 = load i64, ptr %y, align 8, !dbg !2653
  %8 = load i64, ptr %y, align 8, !dbg !2653
  %add = add i64 %7, %8, !dbg !2653
  store i64 %add, ptr %y, align 8, !dbg !2653
  br label %loop.cond, !dbg !2653

loop.exit:                                        ; preds = %loop.cond
  %9 = load i64, ptr %y, align 8, !dbg !2655
  store i64 %9, ptr %n, align 8, !dbg !2655
    #dbg_declare(ptr %p, !2656, !DIExpression(), !2657)
  %10 = load ptr, ptr %self, align 8, !dbg !2657
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator, ptr align 8 %10, i32 16, i1 false)
  %11 = load ptr, ptr %self, align 8, !dbg !2657
  %ptradd = getelementptr inbounds i8, ptr %11, i64 24, !dbg !2657
  %12 = load ptr, ptr %ptradd, align 8
  store ptr %12, ptr %ptr, align 8
  %13 = load i64, ptr %n, align 8
  store i64 %13, ptr %new_size, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator3, ptr align 8 %allocator, i32 16, i1 false)
  %14 = load ptr, ptr %ptr, align 8
  store ptr %14, ptr %ptr4, align 8
  %15 = load i64, ptr %new_size, align 8
  store i64 %15, ptr %new_size5, align 8
  %16 = load i64, ptr %new_size5, align 8, !dbg !2658
  %i2nb = icmp eq i64 %16, 0, !dbg !2658
  br i1 %i2nb, label %if.then, label %if.exit18, !dbg !2658

if.then:                                          ; preds = %loop.exit
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator6, ptr align 8 %allocator3, i32 16, i1 false)
  %17 = load ptr, ptr %ptr4, align 8
  store ptr %17, ptr %ptr7, align 8
  %18 = load ptr, ptr %ptr7, align 8, !dbg !2662
  %i2nb8 = icmp eq ptr %18, null, !dbg !2662
  br i1 %i2nb8, label %if.then9, label %if.exit, !dbg !2662

if.then9:                                         ; preds = %if.then
  br label %expr_block.exit, !dbg !2662

if.exit:                                          ; preds = %if.then
  %19 = load ptr, ptr %ptr7, align 8, !dbg !2666
  %neq = icmp ne ptr %19, null, !dbg !2666
  br i1 %neq, label %assert_ok, label %assert_fail, !dbg !2666

assert_fail:                                      ; preds = %if.exit
  store %"char[]" { ptr @.panic_msg.211, i64 75 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.file.212, i64 16 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.func.219, i64 4 }, ptr %indirectarg12, align 8
  %20 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %20(ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, i32 123) #5, !dbg !2666
  unreachable, !dbg !2666

assert_ok:                                        ; preds = %if.exit
  %ptradd13 = getelementptr inbounds i8, ptr %allocator6, i64 8, !dbg !2666
  %21 = load i64, ptr %ptradd13, align 8, !dbg !2666
  %22 = inttoptr i64 %21 to ptr, !dbg !2666
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !2644
  %23 = icmp eq ptr %22, %type, !dbg !2644
  br i1 %23, label %cache_hit, label %cache_miss, !dbg !2644

cache_miss:                                       ; preds = %assert_ok
  %ptradd14 = getelementptr inbounds i8, ptr %22, i64 16, !dbg !2644
  %24 = load ptr, ptr %ptradd14, align 8, !dbg !2644
  %25 = call ptr @.dyn_search(ptr %24, ptr @"$sel.release"), !dbg !2644
  store ptr %25, ptr %.inlinecache, align 8, !dbg !2644
  store ptr %22, ptr %.cachedtype, align 8, !dbg !2644
  br label %26, !dbg !2644

cache_hit:                                        ; preds = %assert_ok
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !2644
  br label %26, !dbg !2644

26:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %25, %cache_miss ], !dbg !2644
  %27 = icmp eq ptr %fn_phi, null, !dbg !2644
  br i1 %27, label %missing_function, label %match, !dbg !2644

missing_function:                                 ; preds = %26
  store %"char[]" { ptr @.panic_msg.213, i64 44 }, ptr %indirectarg15, align 8
  store %"char[]" { ptr @.file.212, i64 16 }, ptr %indirectarg16, align 8
  store %"char[]" { ptr @.func.219, i64 4 }, ptr %indirectarg17, align 8
  %28 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %28(ptr align 8 %indirectarg15, ptr align 8 %indirectarg16, ptr align 8 %indirectarg17, i32 123) #5, !dbg !2666
  unreachable, !dbg !2666

match:                                            ; preds = %26
  %29 = load ptr, ptr %allocator6, align 8, !dbg !2666
  call void %fn_phi(ptr %29, ptr %19, i8 zeroext 0), !dbg !2666
  br label %expr_block.exit, !dbg !2666

expr_block.exit:                                  ; preds = %match, %if.then9
  store ptr null, ptr %blockret, align 8, !dbg !2667
  br label %expr_block.exit106, !dbg !2667

if.exit18:                                        ; preds = %loop.exit
  %30 = load ptr, ptr %ptr4, align 8, !dbg !2668
  %i2nb19 = icmp eq ptr %30, null, !dbg !2668
  br i1 %i2nb19, label %if.then20, label %if.exit54, !dbg !2668

if.then20:                                        ; preds = %if.exit18
  %31 = load i64, ptr %new_size5, align 8, !dbg !2668
  br i1 true, label %or.phi, label %or.rhs, !dbg !2669

or.rhs:                                           ; preds = %if.then20
  store i64 0, ptr %x21, align 8
  %32 = load i64, ptr %x21, align 8, !dbg !2670
  %neq22 = icmp ne i64 0, %32, !dbg !2670
  br i1 %neq22, label %and.rhs, label %and.phi, !dbg !2670

and.rhs:                                          ; preds = %or.rhs
  %33 = load i64, ptr %x21, align 8, !dbg !2670
  %34 = load i64, ptr %x21, align 8, !dbg !2670
  %sub = sub i64 %34, 1, !dbg !2670
  %and = and i64 %33, %sub, !dbg !2670
  %eq = icmp eq i64 %and, 0, !dbg !2670
  br label %and.phi, !dbg !2670

and.phi:                                          ; preds = %and.rhs, %or.rhs
  %val = phi i1 [ false, %or.rhs ], [ %eq, %and.rhs ], !dbg !2670
  br label %or.phi, !dbg !2670

or.phi:                                           ; preds = %and.phi, %if.then20
  %val23 = phi i1 [ true, %if.then20 ], [ %val, %and.phi ], !dbg !2670
  br i1 %val23, label %assert_ok28, label %assert_fail24, !dbg !2670

assert_fail24:                                    ; preds = %or.phi
  store %"char[]" { ptr @.panic_msg.220, i64 65 }, ptr %indirectarg25, align 8
  store %"char[]" { ptr @.file.212, i64 16 }, ptr %indirectarg26, align 8
  store %"char[]" { ptr @.func.219, i64 4 }, ptr %indirectarg27, align 8
  %35 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %35(ptr align 8 %indirectarg25, ptr align 8 %indirectarg26, ptr align 8 %indirectarg27, i32 113) #5, !dbg !2668
  unreachable, !dbg !2668

assert_ok28:                                      ; preds = %or.phi
  br i1 true, label %assert_ok33, label %assert_fail29, !dbg !2668

assert_fail29:                                    ; preds = %assert_ok28
  store %"char[]" { ptr @.panic_msg.221, i64 80 }, ptr %indirectarg30, align 8
  store %"char[]" { ptr @.file.212, i64 16 }, ptr %indirectarg31, align 8
  store %"char[]" { ptr @.func.219, i64 4 }, ptr %indirectarg32, align 8
  %36 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %36(ptr align 8 %indirectarg30, ptr align 8 %indirectarg31, ptr align 8 %indirectarg32, i32 113) #5, !dbg !2668
  unreachable, !dbg !2668

assert_ok33:                                      ; preds = %assert_ok28
  %lt34 = icmp ult i64 0, %31, !dbg !2668
  br i1 %lt34, label %assert_ok39, label %assert_fail35, !dbg !2668

assert_fail35:                                    ; preds = %assert_ok33
  store %"char[]" { ptr @.panic_msg.222, i64 59 }, ptr %indirectarg36, align 8
  store %"char[]" { ptr @.file.212, i64 16 }, ptr %indirectarg37, align 8
  store %"char[]" { ptr @.func.219, i64 4 }, ptr %indirectarg38, align 8
  %37 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %37(ptr align 8 %indirectarg36, ptr align 8 %indirectarg37, ptr align 8 %indirectarg38, i32 113) #5, !dbg !2668
  unreachable, !dbg !2668

assert_ok39:                                      ; preds = %assert_ok33
  %ptradd40 = getelementptr inbounds i8, ptr %allocator3, i64 8, !dbg !2668
  %38 = load i64, ptr %ptradd40, align 8, !dbg !2668
  %39 = inttoptr i64 %38 to ptr, !dbg !2668
  %type43 = load ptr, ptr %.cachedtype42, align 8, !dbg !2644
  %40 = icmp eq ptr %39, %type43, !dbg !2644
  br i1 %40, label %cache_hit46, label %cache_miss44, !dbg !2644

cache_miss44:                                     ; preds = %assert_ok39
  %ptradd45 = getelementptr inbounds i8, ptr %39, i64 16, !dbg !2644
  %41 = load ptr, ptr %ptradd45, align 8, !dbg !2644
  %42 = call ptr @.dyn_search(ptr %41, ptr @"$sel.acquire"), !dbg !2644
  store ptr %42, ptr %.inlinecache41, align 8, !dbg !2644
  store ptr %39, ptr %.cachedtype42, align 8, !dbg !2644
  br label %43, !dbg !2644

cache_hit46:                                      ; preds = %assert_ok39
  %cache_hit_fn47 = load ptr, ptr %.inlinecache41, align 8, !dbg !2644
  br label %43, !dbg !2644

43:                                               ; preds = %cache_hit46, %cache_miss44
  %fn_phi48 = phi ptr [ %cache_hit_fn47, %cache_hit46 ], [ %42, %cache_miss44 ], !dbg !2644
  %44 = icmp eq ptr %fn_phi48, null, !dbg !2644
  br i1 %44, label %missing_function49, label %match53, !dbg !2644

missing_function49:                               ; preds = %43
  store %"char[]" { ptr @.panic_msg.223, i64 44 }, ptr %indirectarg50, align 8
  store %"char[]" { ptr @.file.212, i64 16 }, ptr %indirectarg51, align 8
  store %"char[]" { ptr @.func.219, i64 4 }, ptr %indirectarg52, align 8
  %45 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %45(ptr align 8 %indirectarg50, ptr align 8 %indirectarg51, ptr align 8 %indirectarg52, i32 113) #5, !dbg !2668
  unreachable, !dbg !2668

match53:                                          ; preds = %43
  %46 = load ptr, ptr %allocator3, align 8
  %47 = call i64 %fn_phi48(ptr %retparam, ptr %46, i64 %31, i32 0, i64 0), !dbg !2668
  %not_err = icmp eq i64 %47, 0, !dbg !2668
  %48 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !2668
  br i1 %48, label %after_check, label %assign_optional, !dbg !2668

assign_optional:                                  ; preds = %match53
  store i64 %47, ptr %error_var, align 8, !dbg !2668
  br label %panic_block, !dbg !2668

after_check:                                      ; preds = %match53
  %49 = load ptr, ptr %retparam, align 8, !dbg !2668
  store ptr %49, ptr %blockret, align 8, !dbg !2668
  br label %expr_block.exit106, !dbg !2668

if.exit54:                                        ; preds = %if.exit18
  %50 = load ptr, ptr %ptr4, align 8, !dbg !2672
  %51 = load i64, ptr %new_size5, align 8, !dbg !2672
  br i1 true, label %or.phi64, label %or.rhs55, !dbg !2673

or.rhs55:                                         ; preds = %if.exit54
  store i64 0, ptr %x56, align 8
  %52 = load i64, ptr %x56, align 8, !dbg !2674
  %neq57 = icmp ne i64 0, %52, !dbg !2674
  br i1 %neq57, label %and.rhs58, label %and.phi62, !dbg !2674

and.rhs58:                                        ; preds = %or.rhs55
  %53 = load i64, ptr %x56, align 8, !dbg !2674
  %54 = load i64, ptr %x56, align 8, !dbg !2674
  %sub59 = sub i64 %54, 1, !dbg !2674
  %and60 = and i64 %53, %sub59, !dbg !2674
  %eq61 = icmp eq i64 %and60, 0, !dbg !2674
  br label %and.phi62, !dbg !2674

and.phi62:                                        ; preds = %and.rhs58, %or.rhs55
  %val63 = phi i1 [ false, %or.rhs55 ], [ %eq61, %and.rhs58 ], !dbg !2674
  br label %or.phi64, !dbg !2674

or.phi64:                                         ; preds = %and.phi62, %if.exit54
  %val65 = phi i1 [ true, %if.exit54 ], [ %val63, %and.phi62 ], !dbg !2674
  br i1 %val65, label %assert_ok70, label %assert_fail66, !dbg !2674

assert_fail66:                                    ; preds = %or.phi64
  store %"char[]" { ptr @.panic_msg.220, i64 65 }, ptr %indirectarg67, align 8
  store %"char[]" { ptr @.file.212, i64 16 }, ptr %indirectarg68, align 8
  store %"char[]" { ptr @.func.219, i64 4 }, ptr %indirectarg69, align 8
  %55 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %55(ptr align 8 %indirectarg67, ptr align 8 %indirectarg68, ptr align 8 %indirectarg69, i32 114) #5, !dbg !2672
  unreachable, !dbg !2672

assert_ok70:                                      ; preds = %or.phi64
  br i1 true, label %assert_ok75, label %assert_fail71, !dbg !2672

assert_fail71:                                    ; preds = %assert_ok70
  store %"char[]" { ptr @.panic_msg.221, i64 80 }, ptr %indirectarg72, align 8
  store %"char[]" { ptr @.file.212, i64 16 }, ptr %indirectarg73, align 8
  store %"char[]" { ptr @.func.219, i64 4 }, ptr %indirectarg74, align 8
  %56 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %56(ptr align 8 %indirectarg72, ptr align 8 %indirectarg73, ptr align 8 %indirectarg74, i32 114) #5, !dbg !2672
  unreachable, !dbg !2672

assert_ok75:                                      ; preds = %assert_ok70
  %neq76 = icmp ne ptr %50, null, !dbg !2672
  br i1 %neq76, label %assert_ok81, label %assert_fail77, !dbg !2672

assert_fail77:                                    ; preds = %assert_ok75
  store %"char[]" { ptr @.panic_msg.224, i64 32 }, ptr %indirectarg78, align 8
  store %"char[]" { ptr @.file.212, i64 16 }, ptr %indirectarg79, align 8
  store %"char[]" { ptr @.func.219, i64 4 }, ptr %indirectarg80, align 8
  %57 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %57(ptr align 8 %indirectarg78, ptr align 8 %indirectarg79, ptr align 8 %indirectarg80, i32 114) #5, !dbg !2672
  unreachable, !dbg !2672

assert_ok81:                                      ; preds = %assert_ok75
  %lt82 = icmp ult i64 0, %51, !dbg !2672
  br i1 %lt82, label %assert_ok87, label %assert_fail83, !dbg !2672

assert_fail83:                                    ; preds = %assert_ok81
  store %"char[]" { ptr @.panic_msg.225, i64 33 }, ptr %indirectarg84, align 8
  store %"char[]" { ptr @.file.212, i64 16 }, ptr %indirectarg85, align 8
  store %"char[]" { ptr @.func.219, i64 4 }, ptr %indirectarg86, align 8
  %58 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %58(ptr align 8 %indirectarg84, ptr align 8 %indirectarg85, ptr align 8 %indirectarg86, i32 114) #5, !dbg !2672
  unreachable, !dbg !2672

assert_ok87:                                      ; preds = %assert_ok81
  %ptradd88 = getelementptr inbounds i8, ptr %allocator3, i64 8, !dbg !2672
  %59 = load i64, ptr %ptradd88, align 8, !dbg !2672
  %60 = inttoptr i64 %59 to ptr, !dbg !2672
  %type91 = load ptr, ptr %.cachedtype90, align 8, !dbg !2644
  %61 = icmp eq ptr %60, %type91, !dbg !2644
  br i1 %61, label %cache_hit94, label %cache_miss92, !dbg !2644

cache_miss92:                                     ; preds = %assert_ok87
  %ptradd93 = getelementptr inbounds i8, ptr %60, i64 16, !dbg !2644
  %62 = load ptr, ptr %ptradd93, align 8, !dbg !2644
  %63 = call ptr @.dyn_search(ptr %62, ptr @"$sel.resize"), !dbg !2644
  store ptr %63, ptr %.inlinecache89, align 8, !dbg !2644
  store ptr %60, ptr %.cachedtype90, align 8, !dbg !2644
  br label %64, !dbg !2644

cache_hit94:                                      ; preds = %assert_ok87
  %cache_hit_fn95 = load ptr, ptr %.inlinecache89, align 8, !dbg !2644
  br label %64, !dbg !2644

64:                                               ; preds = %cache_hit94, %cache_miss92
  %fn_phi96 = phi ptr [ %cache_hit_fn95, %cache_hit94 ], [ %63, %cache_miss92 ], !dbg !2644
  %65 = icmp eq ptr %fn_phi96, null, !dbg !2644
  br i1 %65, label %missing_function97, label %match101, !dbg !2644

missing_function97:                               ; preds = %64
  store %"char[]" { ptr @.panic_msg.226, i64 43 }, ptr %indirectarg98, align 8
  store %"char[]" { ptr @.file.212, i64 16 }, ptr %indirectarg99, align 8
  store %"char[]" { ptr @.func.219, i64 4 }, ptr %indirectarg100, align 8
  %66 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %66(ptr align 8 %indirectarg98, ptr align 8 %indirectarg99, ptr align 8 %indirectarg100, i32 114) #5, !dbg !2672
  unreachable, !dbg !2672

match101:                                         ; preds = %64
  %67 = load ptr, ptr %allocator3, align 8
  %68 = call i64 %fn_phi96(ptr %retparam102, ptr %67, ptr %50, i64 %51, i64 0), !dbg !2672
  %not_err103 = icmp eq i64 %68, 0, !dbg !2672
  %69 = call i1 @llvm.expect.i1(i1 %not_err103, i1 true), !dbg !2672
  br i1 %69, label %after_check105, label %assign_optional104, !dbg !2672

assign_optional104:                               ; preds = %match101
  store i64 %68, ptr %error_var, align 8, !dbg !2672
  br label %panic_block, !dbg !2672

after_check105:                                   ; preds = %match101
  %70 = load ptr, ptr %retparam102, align 8, !dbg !2672
  store ptr %70, ptr %blockret, align 8, !dbg !2672
  br label %expr_block.exit106, !dbg !2672

expr_block.exit106:                               ; preds = %after_check105, %after_check, %expr_block.exit
  br label %noerr_block, !dbg !2672

panic_block:                                      ; preds = %assign_optional104, %assign_optional
  %71 = insertvalue %any undef, ptr %error_var, 0, !dbg !2672
  %72 = insertvalue %any %71, i64 ptrtoint (ptr @"$ct.fault" to i64), 1, !dbg !2672
  store %"char[]" { ptr @.panic_msg.68, i64 36 }, ptr %indirectarg107, align 8
  store %"char[]" { ptr @.file.212, i64 16 }, ptr %indirectarg108, align 8
  store %"char[]" { ptr @.func.219, i64 4 }, ptr %indirectarg109, align 8
  store %any %72, ptr %varargslots, align 16
  %73 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %73, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg110, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg107, ptr align 8 %indirectarg108, ptr align 8 %indirectarg109, i32 103, ptr align 8 %indirectarg110) #5, !dbg !2660
  unreachable, !dbg !2660

noerr_block:                                      ; preds = %expr_block.exit106
  %74 = load ptr, ptr %blockret, align 8, !dbg !2660
  store ptr %74, ptr %p, align 8, !dbg !2660
  %75 = load ptr, ptr %p, align 8, !dbg !2676
  %76 = load i64, ptr %n, align 8, !dbg !2676
  %add111 = add i64 0, %76, !dbg !2676
  %gt = icmp ugt i64 0, %add111, !dbg !2676
  %sub112 = sub i64 %add111, 0, !dbg !2676
  %77 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !2676
  br i1 %77, label %panic113, label %checkok120, !dbg !2676

checkok120:                                       ; preds = %noerr_block
  %size = sub i64 %add111, 0, !dbg !2676
  %78 = insertvalue %"char[]" undef, ptr %75, 0, !dbg !2676
  %79 = insertvalue %"char[]" %78, i64 %size, 1, !dbg !2676
  %80 = load ptr, ptr %self, align 8, !dbg !2676
  %ptradd121 = getelementptr inbounds i8, ptr %80, i64 24, !dbg !2676
  store %"char[]" %79, ptr %ptradd121, align 8, !dbg !2676
  ret void, !dbg !2676

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.205, i64 13 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.219, i64 4 }, ptr %indirectarg2, align 8
  %81 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %81(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 131) #5, !dbg !2646
  unreachable, !dbg !2646

panic113:                                         ; preds = %noerr_block
  store i64 %sub112, ptr %taddr, align 8
  %82 = insertvalue %any undef, ptr %taddr, 0
  %83 = insertvalue %any %82, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.16, i64 43 }, ptr %indirectarg114, align 8
  store %"char[]" { ptr @.file.205, i64 13 }, ptr %indirectarg115, align 8
  store %"char[]" { ptr @.func.219, i64 4 }, ptr %indirectarg116, align 8
  store %any %83, ptr %varargslots117, align 16
  %84 = insertvalue %"any[]" undef, ptr %varargslots117, 0
  %"$$temp118" = insertvalue %"any[]" %84, i64 1, 1
  store %"any[]" %"$$temp118", ptr %indirectarg119, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg114, ptr align 8 %indirectarg115, ptr align 8 %indirectarg116, i32 135, ptr align 8 %indirectarg119) #5, !dbg !2676
  unreachable, !dbg !2676
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.ByteReader.len(ptr %0) #0 comdat !dbg !2677 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2686
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2686
  br i1 %2, label %panic, label %checkok, !dbg !2686

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2687, !DIExpression(), !2688)
  %3 = load ptr, ptr %self, align 8, !dbg !2689
  %ptradd = getelementptr inbounds i8, ptr %3, i64 8, !dbg !2689
  %4 = load i64, ptr %ptradd, align 8, !dbg !2689
  ret i64 %4, !dbg !2689

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.227, i64 13 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.228, i64 3 }, ptr %indirectarg2, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 9) #5, !dbg !2688
  unreachable, !dbg !2688
}

; Function Attrs: nounwind ssp uwtable
define weak_odr ptr @std.io.ByteReader.init(ptr %0, ptr align 8 %1) #0 comdat !dbg !2690 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %.assign_list = alloca %ByteReader, align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr9 = alloca i64, align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg13 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !2693
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !2693
  br i1 %3, label %panic, label %checkok, !dbg !2693

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2694, !DIExpression(), !2695)
    #dbg_declare(ptr %1, !2696, !DIExpression(), !2695)
  call void @llvm.memset.p0.i64(ptr align 8 %.assign_list, i8 0, i64 24, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %.assign_list, ptr align 8 %1, i32 16, i1 false), !dbg !2697
  %4 = load ptr, ptr %self, align 8, !dbg !2697
  %checknull = icmp eq ptr %4, null, !dbg !2697
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !2697
  br i1 %5, label %panic3, label %checkok7, !dbg !2697

checkok7:                                         ; preds = %checkok
  %6 = ptrtoint ptr %4 to i64, !dbg !2697
  %7 = urem i64 %6, 8, !dbg !2697
  %8 = icmp ne i64 %7, 0, !dbg !2697
  %9 = call i1 @llvm.expect.i1(i1 %8, i1 false), !dbg !2697
  br i1 %9, label %panic8, label %checkok14, !dbg !2697

checkok14:                                        ; preds = %checkok7
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %4, ptr align 8 %.assign_list, i32 24, i1 false), !dbg !2697
  %10 = load ptr, ptr %self, align 8, !dbg !2698
  ret ptr %10, !dbg !2698

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.227, i64 13 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg2, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 14) #5, !dbg !2695
  unreachable, !dbg !2695

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.2, i64 45 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.227, i64 13 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg6, align 8
  %12 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %12(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 16) #5, !dbg !2697
  unreachable, !dbg !2697

panic8:                                           ; preds = %checkok7
  store i64 8, ptr %taddr, align 8
  %13 = insertvalue %any undef, ptr %taddr, 0
  %14 = insertvalue %any %13, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %7, ptr %taddr9, align 8
  %15 = insertvalue %any undef, ptr %taddr9, 0
  %16 = insertvalue %any %15, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.file.227, i64 13 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg12, align 8
  store %any %14, ptr %varargslots, align 16
  %ptradd = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %16, ptr %ptradd, align 16
  %17 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %17, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg13, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, i32 16, ptr align 8 %indirectarg13) #5, !dbg !2697
  unreachable, !dbg !2697
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.ByteReader.read(ptr %0, ptr %1, ptr align 8 %2) #0 comdat !dbg !2699 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %len = alloca i64, align 8
  %x = alloca i64, align 8
  %.anon = alloca i64, align 8
  %a = alloca i64, align 8
  %b = alloca i64, align 8
  %reterr = alloca i64, align 8
  %dst = alloca ptr, align 8
  %taddr = alloca i64, align 8
  %taddr13 = alloca i64, align 8
  %indirectarg14 = alloca %"char[]", align 8
  %indirectarg15 = alloca %"char[]", align 8
  %indirectarg16 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg18 = alloca %"any[]", align 8
  %src = alloca ptr, align 8
  %len21 = alloca i64, align 8
  %indirectarg22 = alloca %"char[]", align 8
  %indirectarg23 = alloca %"char[]", align 8
  %indirectarg24 = alloca %"char[]", align 8
  %indirectarg29 = alloca %"char[]", align 8
  %indirectarg30 = alloca %"char[]", align 8
  %indirectarg31 = alloca %"char[]", align 8
  %indirectarg43 = alloca %"char[]", align 8
  %indirectarg44 = alloca %"char[]", align 8
  %indirectarg45 = alloca %"char[]", align 8
  %reterr48 = alloca i64, align 8
  %3 = icmp eq ptr %1, null, !dbg !2702
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !2702
  br i1 %4, label %panic, label %checkok, !dbg !2702

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !2703, !DIExpression(), !2704)
    #dbg_declare(ptr %2, !2705, !DIExpression(), !2704)
  %5 = load ptr, ptr %self, align 8, !dbg !2706
  %ptradd = getelementptr inbounds i8, ptr %5, i64 16, !dbg !2706
  %6 = load i64, ptr %ptradd, align 8, !dbg !2706
  %7 = load ptr, ptr %self, align 8, !dbg !2706
  %ptradd3 = getelementptr inbounds i8, ptr %7, i64 8, !dbg !2706
  %8 = load i64, ptr %ptradd3, align 8, !dbg !2706
  %ge = icmp uge i64 %6, %8, !dbg !2706
  br i1 %ge, label %if.then, label %if.exit, !dbg !2706

if.then:                                          ; preds = %checkok
  ret i64 ptrtoint (ptr @std.io.EOF to i64), !dbg !2706

if.exit:                                          ; preds = %checkok
    #dbg_declare(ptr %len, !2707, !DIExpression(), !2708)
  %9 = load ptr, ptr %self, align 8, !dbg !2708
  %ptradd4 = getelementptr inbounds i8, ptr %9, i64 8, !dbg !2708
  %10 = load i64, ptr %ptradd4, align 8, !dbg !2708
  %11 = load ptr, ptr %self, align 8, !dbg !2708
  %ptradd5 = getelementptr inbounds i8, ptr %11, i64 16, !dbg !2708
  %12 = load i64, ptr %ptradd5, align 8, !dbg !2708
  %sub = sub i64 %10, %12, !dbg !2708
  store i64 %sub, ptr %x, align 8
  %ptradd6 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !2708
  %13 = load i64, ptr %ptradd6, align 8
  store i64 %13, ptr %.anon, align 8
  %14 = load i64, ptr %x, align 8
  store i64 %14, ptr %a, align 8
  %15 = load i64, ptr %.anon, align 8
  store i64 %15, ptr %b, align 8
  %16 = load i64, ptr %a, align 8, !dbg !2709
  %17 = load i64, ptr %b, align 8, !dbg !2709
  %lt = icmp ult i64 %16, %17, !dbg !2709
  br i1 %lt, label %cond.lhs, label %cond.rhs, !dbg !2709

cond.lhs:                                         ; preds = %if.exit
  %18 = load i64, ptr %x, align 8, !dbg !2711
  br label %cond.phi, !dbg !2711

cond.rhs:                                         ; preds = %if.exit
  %19 = load i64, ptr %.anon, align 8, !dbg !2711
  br label %cond.phi, !dbg !2711

cond.phi:                                         ; preds = %cond.rhs, %cond.lhs
  %val = phi i64 [ %18, %cond.lhs ], [ %19, %cond.rhs ], !dbg !2711
  store i64 %val, ptr %len, align 8, !dbg !2711
  %20 = load i64, ptr %len, align 8, !dbg !2713
  %eq = icmp eq i64 0, %20, !dbg !2713
  br i1 %eq, label %if.then7, label %if.exit8, !dbg !2713

if.then7:                                         ; preds = %cond.phi
  store i64 0, ptr %0, align 8, !dbg !2713
  ret i64 0, !dbg !2713

if.exit8:                                         ; preds = %cond.phi
  %21 = load ptr, ptr %2, align 8, !dbg !2714
  store ptr %21, ptr %dst, align 8
  %22 = load ptr, ptr %self, align 8, !dbg !2714
  %ptradd9 = getelementptr inbounds i8, ptr %22, i64 8, !dbg !2714
  %23 = load i64, ptr %ptradd9, align 8, !dbg !2714
  %24 = load ptr, ptr %22, align 8, !dbg !2714
  %25 = load ptr, ptr %self, align 8, !dbg !2714
  %ptradd10 = getelementptr inbounds i8, ptr %25, i64 16, !dbg !2714
  %26 = load i64, ptr %ptradd10, align 8, !dbg !2714
  %ge11 = icmp uge i64 %26, %23, !dbg !2714
  %27 = call i1 @llvm.expect.i1(i1 %ge11, i1 false), !dbg !2714
  br i1 %27, label %panic12, label %checkok19, !dbg !2714

checkok19:                                        ; preds = %if.exit8
  %ptradd20 = getelementptr inbounds i8, ptr %24, i64 %26, !dbg !2714
  store ptr %ptradd20, ptr %src, align 8
  %28 = load i64, ptr %len, align 8
  store i64 %28, ptr %len21, align 8
  %29 = load ptr, ptr %dst, align 8, !dbg !2715
  %neq = icmp ne ptr %29, null, !dbg !2715
  br i1 %neq, label %assert_ok, label %assert_fail, !dbg !2715

assert_fail:                                      ; preds = %checkok19
  store %"char[]" { ptr @.panic_msg.229, i64 37 }, ptr %indirectarg22, align 8
  store %"char[]" { ptr @.file.230, i64 6 }, ptr %indirectarg23, align 8
  store %"char[]" { ptr @.func.196, i64 4 }, ptr %indirectarg24, align 8
  %30 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %30(ptr align 8 %indirectarg22, ptr align 8 %indirectarg23, ptr align 8 %indirectarg24, i32 357) #5, !dbg !2715
  unreachable, !dbg !2715

assert_ok:                                        ; preds = %checkok19
  %31 = load ptr, ptr %src, align 8, !dbg !2719
  %neq25 = icmp ne ptr %31, null, !dbg !2719
  br i1 %neq25, label %or.phi, label %or.rhs, !dbg !2719

or.rhs:                                           ; preds = %assert_ok
  %32 = load i64, ptr %len21, align 8, !dbg !2719
  %eq26 = icmp eq i64 0, %32, !dbg !2719
  br label %or.phi, !dbg !2719

or.phi:                                           ; preds = %or.rhs, %assert_ok
  %val27 = phi i1 [ true, %assert_ok ], [ %eq26, %or.rhs ], !dbg !2719
  br i1 %val27, label %assert_ok32, label %assert_fail28, !dbg !2719

assert_fail28:                                    ; preds = %or.phi
  store %"char[]" { ptr @.panic_msg.231, i64 94 }, ptr %indirectarg29, align 8
  store %"char[]" { ptr @.file.227, i64 13 }, ptr %indirectarg30, align 8
  store %"char[]" { ptr @.func.196, i64 4 }, ptr %indirectarg31, align 8
  %33 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %33(ptr align 8 %indirectarg29, ptr align 8 %indirectarg30, ptr align 8 %indirectarg31, i32 25) #5, !dbg !2720
  unreachable, !dbg !2720

assert_ok32:                                      ; preds = %or.phi
  %34 = load i64, ptr %len21, align 8, !dbg !2721
  %eq33 = icmp eq i64 0, %34, !dbg !2721
  br i1 %eq33, label %or.phi35, label %or.rhs34, !dbg !2721

or.rhs34:                                         ; preds = %assert_ok32
  %35 = load ptr, ptr %dst, align 8, !dbg !2721
  %36 = load i64, ptr %len21, align 8, !dbg !2721
  %ptradd_any = getelementptr i8, ptr %35, i64 %36, !dbg !2721
  %37 = load ptr, ptr %src, align 8, !dbg !2721
  %le = icmp ule ptr %ptradd_any, %37, !dbg !2721
  br label %or.phi35, !dbg !2721

or.phi35:                                         ; preds = %or.rhs34, %assert_ok32
  %val36 = phi i1 [ true, %assert_ok32 ], [ %le, %or.rhs34 ], !dbg !2721
  br i1 %val36, label %or.phi40, label %or.rhs37, !dbg !2721

or.rhs37:                                         ; preds = %or.phi35
  %38 = load ptr, ptr %src, align 8, !dbg !2721
  %39 = load i64, ptr %len21, align 8, !dbg !2721
  %ptradd_any38 = getelementptr i8, ptr %38, i64 %39, !dbg !2721
  %40 = load ptr, ptr %dst, align 8, !dbg !2721
  %le39 = icmp ule ptr %ptradd_any38, %40, !dbg !2721
  br label %or.phi40, !dbg !2721

or.phi40:                                         ; preds = %or.rhs37, %or.phi35
  %val41 = phi i1 [ true, %or.phi35 ], [ %le39, %or.rhs37 ], !dbg !2721
  br i1 %val41, label %assert_ok46, label %assert_fail42, !dbg !2721

assert_fail42:                                    ; preds = %or.phi40
  store %"char[]" { ptr @.panic_msg.232, i64 95 }, ptr %indirectarg43, align 8
  store %"char[]" { ptr @.file.227, i64 13 }, ptr %indirectarg44, align 8
  store %"char[]" { ptr @.func.196, i64 4 }, ptr %indirectarg45, align 8
  %41 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %41(ptr align 8 %indirectarg43, ptr align 8 %indirectarg44, ptr align 8 %indirectarg45, i32 25) #5, !dbg !2720
  unreachable, !dbg !2720

assert_ok46:                                      ; preds = %or.phi40
  %42 = load ptr, ptr %dst, align 8, !dbg !2722
  %43 = load ptr, ptr %src, align 8, !dbg !2722
  %44 = load i64, ptr %len21, align 8, !dbg !2722
  call void @llvm.memcpy.p0.p0.i64(ptr %42, ptr %43, i64 %44, i1 false), !dbg !2722
  %45 = load ptr, ptr %self, align 8, !dbg !2723
  %ptradd47 = getelementptr inbounds i8, ptr %45, i64 16, !dbg !2723
  %46 = load i64, ptr %ptradd47, align 8, !dbg !2723
  %47 = load i64, ptr %len, align 8, !dbg !2723
  %add = add i64 %46, %47, !dbg !2723
  store i64 %add, ptr %ptradd47, align 8, !dbg !2723
  %48 = load i64, ptr %len, align 8, !dbg !2724
  store i64 %48, ptr %0, align 8, !dbg !2724
  ret i64 0, !dbg !2724

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.227, i64 13 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.196, i64 4 }, ptr %indirectarg2, align 8
  %49 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %49(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 20) #5, !dbg !2704
  unreachable, !dbg !2704

panic12:                                          ; preds = %if.exit8
  store i64 %23, ptr %taddr, align 8
  %50 = insertvalue %any undef, ptr %taddr, 0
  %51 = insertvalue %any %50, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %26, ptr %taddr13, align 8
  %52 = insertvalue %any undef, ptr %taddr13, 0
  %53 = insertvalue %any %52, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.71, i64 59 }, ptr %indirectarg14, align 8
  store %"char[]" { ptr @.file.227, i64 13 }, ptr %indirectarg15, align 8
  store %"char[]" { ptr @.func.196, i64 4 }, ptr %indirectarg16, align 8
  store %any %51, ptr %varargslots, align 16
  %ptradd17 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %53, ptr %ptradd17, align 16
  %54 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %54, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg18, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg14, ptr align 8 %indirectarg15, ptr align 8 %indirectarg16, i32 25, ptr align 8 %indirectarg18) #5, !dbg !2714
  unreachable, !dbg !2714
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.ByteReader.read_byte(ptr %0, ptr %1) #0 comdat !dbg !2725 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %reterr = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr8 = alloca i64, align 8
  %indirectarg9 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg13 = alloca %"any[]", align 8
  %2 = icmp eq ptr %1, null, !dbg !2728
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !2728
  br i1 %3, label %panic, label %checkok, !dbg !2728

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !2729, !DIExpression(), !2730)
  %4 = load ptr, ptr %self, align 8, !dbg !2731
  %ptradd = getelementptr inbounds i8, ptr %4, i64 16, !dbg !2731
  %5 = load i64, ptr %ptradd, align 8, !dbg !2731
  %6 = load ptr, ptr %self, align 8, !dbg !2731
  %ptradd3 = getelementptr inbounds i8, ptr %6, i64 8, !dbg !2731
  %7 = load i64, ptr %ptradd3, align 8, !dbg !2731
  %ge = icmp uge i64 %5, %7, !dbg !2731
  br i1 %ge, label %if.then, label %if.exit, !dbg !2731

if.then:                                          ; preds = %checkok
  ret i64 ptrtoint (ptr @std.io.EOF to i64), !dbg !2731

if.exit:                                          ; preds = %checkok
  %8 = load ptr, ptr %self, align 8, !dbg !2732
  %ptradd4 = getelementptr inbounds i8, ptr %8, i64 8, !dbg !2732
  %9 = load i64, ptr %ptradd4, align 8, !dbg !2732
  %10 = load ptr, ptr %8, align 8, !dbg !2732
  %11 = load ptr, ptr %self, align 8, !dbg !2732
  %ptradd5 = getelementptr inbounds i8, ptr %11, i64 16, !dbg !2732
  %12 = load i64, ptr %ptradd5, align 8, !dbg !2732
  %add = add i64 %12, 1, !dbg !2732
  store i64 %add, ptr %ptradd5, align 8, !dbg !2732
  %ge6 = icmp uge i64 %12, %9, !dbg !2732
  %13 = call i1 @llvm.expect.i1(i1 %ge6, i1 false), !dbg !2732
  br i1 %13, label %panic7, label %checkok14, !dbg !2732

checkok14:                                        ; preds = %if.exit
  %ptradd15 = getelementptr inbounds i8, ptr %10, i64 %12, !dbg !2732
  %14 = load i8, ptr %ptradd15, align 1, !dbg !2732
  store i8 %14, ptr %0, align 1, !dbg !2732
  ret i64 0, !dbg !2732

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.227, i64 13 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.199, i64 9 }, ptr %indirectarg2, align 8
  %15 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %15(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 30) #5, !dbg !2730
  unreachable, !dbg !2730

panic7:                                           ; preds = %if.exit
  store i64 %9, ptr %taddr, align 8
  %16 = insertvalue %any undef, ptr %taddr, 0
  %17 = insertvalue %any %16, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %12, ptr %taddr8, align 8
  %18 = insertvalue %any undef, ptr %taddr8, 0
  %19 = insertvalue %any %18, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.71, i64 59 }, ptr %indirectarg9, align 8
  store %"char[]" { ptr @.file.227, i64 13 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.func.199, i64 9 }, ptr %indirectarg11, align 8
  store %any %17, ptr %varargslots, align 16
  %ptradd12 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %19, ptr %ptradd12, align 16
  %20 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %20, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg13, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg9, ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, i32 33, ptr align 8 %indirectarg13) #5, !dbg !2732
  unreachable, !dbg !2732
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.ByteReader.pushback_byte(ptr %0) #0 comdat !dbg !2733 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2736
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2736
  br i1 %2, label %panic, label %checkok, !dbg !2736

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2737, !DIExpression(), !2738)
  %3 = load ptr, ptr %self, align 8, !dbg !2739
  %ptradd = getelementptr inbounds i8, ptr %3, i64 16, !dbg !2739
  %4 = load i64, ptr %ptradd, align 8, !dbg !2739
  %i2nb = icmp eq i64 %4, 0, !dbg !2739
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !2739

if.then:                                          ; preds = %checkok
  ret i64 ptrtoint (ptr @std.io.INVALID_PUSHBACK to i64), !dbg !2739

if.exit:                                          ; preds = %checkok
  %5 = load ptr, ptr %self, align 8, !dbg !2740
  %ptradd3 = getelementptr inbounds i8, ptr %5, i64 16, !dbg !2740
  %6 = load i64, ptr %ptradd3, align 8, !dbg !2740
  %sub = sub i64 %6, 1, !dbg !2740
  store i64 %sub, ptr %ptradd3, align 8, !dbg !2740
  ret i64 0, !dbg !2740

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.227, i64 13 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.215, i64 13 }, ptr %indirectarg2, align 8
  %7 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %7(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 36) #5, !dbg !2738
  unreachable, !dbg !2738
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.ByteReader.seek(ptr %0, ptr %1, i64 %2, i32 %3) #0 comdat !dbg !2741 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %offset = alloca i64, align 8
  %seek = alloca i32, align 4
  %new_index = alloca i64, align 8
  %switch = alloca i32, align 4
  %reterr = alloca i64, align 8
  %4 = icmp eq ptr %1, null, !dbg !2744
  %5 = call i1 @llvm.expect.i1(i1 %4, i1 false), !dbg !2744
  br i1 %5, label %panic, label %checkok, !dbg !2744

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !2745, !DIExpression(), !2746)
  store i64 %2, ptr %offset, align 8
    #dbg_declare(ptr %offset, !2747, !DIExpression(), !2746)
  store i32 %3, ptr %seek, align 4
    #dbg_declare(ptr %seek, !2748, !DIExpression(), !2746)
    #dbg_declare(ptr %new_index, !2749, !DIExpression(), !2750)
  store i64 0, ptr %new_index, align 8, !dbg !2750
  %6 = load i32, ptr %seek, align 4
  store i32 %6, ptr %switch, align 4
  br label %switch.entry

switch.entry:                                     ; preds = %checkok
  %7 = load i32, ptr %switch, align 4
  switch i32 %7, label %switch.exit [
    i32 0, label %switch.case
    i32 1, label %switch.case3
    i32 2, label %switch.case4
  ]

switch.case:                                      ; preds = %switch.entry
  %8 = load i64, ptr %offset, align 8, !dbg !2751
  store i64 %8, ptr %new_index, align 8, !dbg !2751
  br label %switch.exit, !dbg !2751

switch.case3:                                     ; preds = %switch.entry
  %9 = load ptr, ptr %self, align 8, !dbg !2754
  %ptradd = getelementptr inbounds i8, ptr %9, i64 16, !dbg !2754
  %10 = load i64, ptr %ptradd, align 8, !dbg !2754
  %11 = load i64, ptr %offset, align 8, !dbg !2754
  %add = add i64 %10, %11, !dbg !2754
  store i64 %add, ptr %new_index, align 8, !dbg !2754
  br label %switch.exit, !dbg !2754

switch.case4:                                     ; preds = %switch.entry
  %12 = load ptr, ptr %self, align 8, !dbg !2756
  %ptradd5 = getelementptr inbounds i8, ptr %12, i64 8, !dbg !2756
  %13 = load i64, ptr %ptradd5, align 8, !dbg !2756
  %14 = load i64, ptr %offset, align 8, !dbg !2756
  %add6 = add i64 %13, %14, !dbg !2756
  store i64 %add6, ptr %new_index, align 8, !dbg !2756
  br label %switch.exit, !dbg !2756

switch.exit:                                      ; preds = %switch.case4, %switch.case3, %switch.case, %switch.entry
  %15 = load i64, ptr %new_index, align 8, !dbg !2758
  %lt = icmp slt i64 %15, 0, !dbg !2758
  br i1 %lt, label %if.then, label %if.exit, !dbg !2758

if.then:                                          ; preds = %switch.exit
  ret i64 ptrtoint (ptr @std.io.INVALID_POSITION to i64), !dbg !2758

if.exit:                                          ; preds = %switch.exit
  %16 = load i64, ptr %new_index, align 8, !dbg !2759
  %17 = load ptr, ptr %self, align 8, !dbg !2759
  %ptradd7 = getelementptr inbounds i8, ptr %17, i64 16, !dbg !2759
  store i64 %16, ptr %ptradd7, align 8, !dbg !2759
  %18 = load i64, ptr %new_index, align 8, !dbg !2760
  store i64 %18, ptr %0, align 8, !dbg !2760
  ret i64 0, !dbg !2760

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.227, i64 13 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.217, i64 4 }, ptr %indirectarg2, align 8
  %19 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %19(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 42) #5, !dbg !2746
  unreachable, !dbg !2746
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.ByteReader.write_to(ptr %0, ptr %1, ptr align 8 %2) #0 comdat !dbg !2761 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %reterr = alloca i64, align 8
  %written = alloca i64, align 8
  %error_var = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr6 = alloca i64, align 8
  %indirectarg7 = alloca %"char[]", align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg11 = alloca %"any[]", align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %indirectarg16 = alloca %"char[]", align 8
  %indirectarg17 = alloca %"char[]", align 8
  %indirectarg18 = alloca %"char[]", align 8
  %retparam = alloca i64, align 8
  %indirectarg19 = alloca %"char[]", align 8
  %indirectarg23 = alloca %"char[]", align 8
  %indirectarg24 = alloca %"char[]", align 8
  %indirectarg25 = alloca %"char[]", align 8
  %reterr26 = alloca i64, align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !2764
  %3 = icmp eq ptr %1, null, !dbg !2764
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !2764
  br i1 %4, label %panic, label %checkok, !dbg !2764

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !2765, !DIExpression(), !2766)
    #dbg_declare(ptr %2, !2767, !DIExpression(), !2766)
  %5 = load ptr, ptr %self, align 8, !dbg !2768
  %ptradd = getelementptr inbounds i8, ptr %5, i64 16, !dbg !2768
  %6 = load i64, ptr %ptradd, align 8, !dbg !2768
  %7 = load ptr, ptr %self, align 8, !dbg !2768
  %ptradd3 = getelementptr inbounds i8, ptr %7, i64 8, !dbg !2768
  %8 = load i64, ptr %ptradd3, align 8, !dbg !2768
  %ge = icmp uge i64 %6, %8, !dbg !2768
  br i1 %ge, label %if.then, label %if.exit, !dbg !2768

if.then:                                          ; preds = %checkok
  store i64 0, ptr %0, align 8, !dbg !2768
  ret i64 0, !dbg !2768

if.exit:                                          ; preds = %checkok
    #dbg_declare(ptr %written, !2769, !DIExpression(), !2770)
  %9 = load ptr, ptr %self, align 8, !dbg !2770
  %10 = load %"char[]", ptr %9, align 8, !dbg !2770
  %11 = extractvalue %"char[]" %10, 0, !dbg !2770
  %12 = load ptr, ptr %self, align 8, !dbg !2770
  %ptradd4 = getelementptr inbounds i8, ptr %12, i64 16, !dbg !2770
  %13 = load i64, ptr %ptradd4, align 8, !dbg !2770
  %14 = extractvalue %"char[]" %10, 1, !dbg !2770
  %gt = icmp ugt i64 %13, %14, !dbg !2770
  %15 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !2770
  br i1 %15, label %panic5, label %checkok12, !dbg !2770

checkok12:                                        ; preds = %if.exit
  %size = sub i64 %14, %13, !dbg !2770
  %ptradd13 = getelementptr inbounds i8, ptr %11, i64 %13, !dbg !2770
  %16 = insertvalue %"char[]" undef, ptr %ptradd13, 0, !dbg !2770
  %17 = insertvalue %"char[]" %16, i64 %size, 1, !dbg !2770
  %ptradd14 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !2770
  %18 = load i64, ptr %ptradd14, align 8, !dbg !2770
  %19 = inttoptr i64 %18 to ptr, !dbg !2770
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !2764
  %20 = icmp eq ptr %19, %type, !dbg !2764
  br i1 %20, label %cache_hit, label %cache_miss, !dbg !2764

cache_miss:                                       ; preds = %checkok12
  %ptradd15 = getelementptr inbounds i8, ptr %19, i64 16, !dbg !2764
  %21 = load ptr, ptr %ptradd15, align 8, !dbg !2764
  %22 = call ptr @.dyn_search(ptr %21, ptr @"$sel.write"), !dbg !2764
  store ptr %22, ptr %.inlinecache, align 8, !dbg !2764
  store ptr %19, ptr %.cachedtype, align 8, !dbg !2764
  br label %23, !dbg !2764

cache_hit:                                        ; preds = %checkok12
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !2764
  br label %23, !dbg !2764

23:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %22, %cache_miss ], !dbg !2764
  %24 = icmp eq ptr %fn_phi, null, !dbg !2764
  br i1 %24, label %missing_function, label %match, !dbg !2764

missing_function:                                 ; preds = %23
  store %"char[]" { ptr @.panic_msg.18, i64 42 }, ptr %indirectarg16, align 8
  store %"char[]" { ptr @.file.227, i64 13 }, ptr %indirectarg17, align 8
  store %"char[]" { ptr @.func.233, i64 8 }, ptr %indirectarg18, align 8
  %25 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %25(ptr align 8 %indirectarg16, ptr align 8 %indirectarg17, ptr align 8 %indirectarg18, i32 59) #5, !dbg !2770
  unreachable, !dbg !2770

match:                                            ; preds = %23
  %26 = load ptr, ptr %2, align 8
  store %"char[]" %17, ptr %indirectarg19, align 8
  %27 = call i64 %fn_phi(ptr %retparam, ptr %26, ptr align 8 %indirectarg19), !dbg !2770
  %not_err = icmp eq i64 %27, 0, !dbg !2770
  %28 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !2770
  br i1 %28, label %after_check, label %assign_optional, !dbg !2770

assign_optional:                                  ; preds = %match
  store i64 %27, ptr %error_var, align 8, !dbg !2770
  br label %guard_block, !dbg !2770

after_check:                                      ; preds = %match
  br label %noerr_block, !dbg !2770

guard_block:                                      ; preds = %assign_optional
  %29 = load i64, ptr %error_var, align 8, !dbg !2770
  ret i64 %29, !dbg !2770

noerr_block:                                      ; preds = %after_check
  %30 = load i64, ptr %retparam, align 8, !dbg !2770
  store i64 %30, ptr %written, align 8, !dbg !2770
  %31 = load ptr, ptr %self, align 8, !dbg !2771
  %ptradd20 = getelementptr inbounds i8, ptr %31, i64 16, !dbg !2771
  %32 = load i64, ptr %ptradd20, align 8, !dbg !2771
  %33 = load i64, ptr %written, align 8, !dbg !2771
  %add = add i64 %32, %33, !dbg !2771
  store i64 %add, ptr %ptradd20, align 8, !dbg !2771
  %34 = load ptr, ptr %self, align 8, !dbg !2772
  %ptradd21 = getelementptr inbounds i8, ptr %34, i64 16, !dbg !2772
  %35 = load i64, ptr %ptradd21, align 8, !dbg !2772
  %36 = load ptr, ptr %self, align 8, !dbg !2772
  %ptradd22 = getelementptr inbounds i8, ptr %36, i64 8, !dbg !2772
  %37 = load i64, ptr %ptradd22, align 8, !dbg !2772
  %le = icmp ule i64 %35, %37, !dbg !2772
  br i1 %le, label %assert_ok, label %assert_fail, !dbg !2772

assert_fail:                                      ; preds = %noerr_block
  store %"char[]" { ptr @.panic_msg.234, i64 45 }, ptr %indirectarg23, align 8
  store %"char[]" { ptr @.file.227, i64 13 }, ptr %indirectarg24, align 8
  store %"char[]" { ptr @.func.233, i64 8 }, ptr %indirectarg25, align 8
  %38 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %38(ptr align 8 %indirectarg23, ptr align 8 %indirectarg24, ptr align 8 %indirectarg25, i32 61) #5, !dbg !2772
  unreachable, !dbg !2772

assert_ok:                                        ; preds = %noerr_block
  %39 = load i64, ptr %written, align 8, !dbg !2773
  store i64 %39, ptr %0, align 8, !dbg !2773
  ret i64 0, !dbg !2773

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.227, i64 13 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.233, i64 8 }, ptr %indirectarg2, align 8
  %40 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %40(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 56) #5, !dbg !2766
  unreachable, !dbg !2766

panic5:                                           ; preds = %if.exit
  store i64 %14, ptr %taddr, align 8
  %41 = insertvalue %any undef, ptr %taddr, 0
  %42 = insertvalue %any %41, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %13, ptr %taddr6, align 8
  %43 = insertvalue %any undef, ptr %taddr6, 0
  %44 = insertvalue %any %43, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.170, i64 61 }, ptr %indirectarg7, align 8
  store %"char[]" { ptr @.file.227, i64 13 }, ptr %indirectarg8, align 8
  store %"char[]" { ptr @.func.233, i64 8 }, ptr %indirectarg9, align 8
  store %any %42, ptr %varargslots, align 16
  %ptradd10 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %44, ptr %ptradd10, align 16
  %45 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %45, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg11, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg7, ptr align 8 %indirectarg8, ptr align 8 %indirectarg9, i32 59, ptr align 8 %indirectarg11) #5, !dbg !2770
  unreachable, !dbg !2770
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.ByteReader.available(ptr %0, ptr %1) #0 comdat !dbg !2774 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %reterr = alloca i64, align 8
  %x = alloca i32, align 4
  %.anon = alloca i64, align 8
  %a = alloca i32, align 4
  %b = alloca i64, align 8
  %2 = icmp eq ptr %1, null, !dbg !2777
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !2777
  br i1 %3, label %panic, label %checkok, !dbg !2777

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !2778, !DIExpression(), !2779)
  store i32 0, ptr %x, align 4
  %4 = load ptr, ptr %self, align 8, !dbg !2780
  %ptradd = getelementptr inbounds i8, ptr %4, i64 8, !dbg !2780
  %5 = load i64, ptr %ptradd, align 8, !dbg !2780
  %6 = load ptr, ptr %self, align 8, !dbg !2780
  %ptradd3 = getelementptr inbounds i8, ptr %6, i64 16, !dbg !2780
  %7 = load i64, ptr %ptradd3, align 8, !dbg !2780
  %sub = sub i64 %5, %7, !dbg !2780
  store i64 %sub, ptr %.anon, align 8
  %8 = load i32, ptr %x, align 4
  store i32 %8, ptr %a, align 4
  %9 = load i64, ptr %.anon, align 8
  store i64 %9, ptr %b, align 8
  %10 = load i32, ptr %a, align 4, !dbg !2781
  %sext = sext i32 %10 to i64, !dbg !2781
  %11 = load i64, ptr %b, align 8, !dbg !2781
  %gt = icmp sgt i64 %sext, %11, !dbg !2781
  %check = icmp sge i64 %11, 0, !dbg !2781
  %siui-gt = and i1 %check, %gt, !dbg !2781
  br i1 %siui-gt, label %cond.lhs, label %cond.rhs, !dbg !2781

cond.lhs:                                         ; preds = %checkok
  %12 = load i32, ptr %x, align 4, !dbg !2783
  %sext4 = sext i32 %12 to i64, !dbg !2783
  br label %cond.phi, !dbg !2783

cond.rhs:                                         ; preds = %checkok
  %13 = load i64, ptr %.anon, align 8, !dbg !2783
  br label %cond.phi, !dbg !2783

cond.phi:                                         ; preds = %cond.rhs, %cond.lhs
  %val = phi i64 [ %sext4, %cond.lhs ], [ %13, %cond.rhs ], !dbg !2783
  store i64 %val, ptr %0, align 8, !dbg !2783
  ret i64 0, !dbg !2783

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.227, i64 13 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.218, i64 9 }, ptr %indirectarg2, align 8
  %14 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %14(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 65) #5, !dbg !2779
  unreachable, !dbg !2779
}

; Function Attrs: nounwind ssp uwtable
define weak_odr ptr @std.io.ByteWriter.init(ptr %0, ptr align 8 %1) #0 comdat !dbg !2785 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %.assign_list = alloca %ByteWriter, align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr13 = alloca i64, align 8
  %indirectarg14 = alloca %"char[]", align 8
  %indirectarg15 = alloca %"char[]", align 8
  %indirectarg16 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg18 = alloca %"any[]", align 8
  %indirectarg21 = alloca %"char[]", align 8
  %indirectarg22 = alloca %"char[]", align 8
  %indirectarg23 = alloca %"char[]", align 8
  %indirectarg28 = alloca %"char[]", align 8
  %indirectarg29 = alloca %"char[]", align 8
  %indirectarg30 = alloca %"char[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !2795
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !2795
  br i1 %3, label %panic, label %checkok, !dbg !2795

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2796, !DIExpression(), !2797)
    #dbg_declare(ptr %1, !2798, !DIExpression(), !2797)
  %4 = load ptr, ptr %self, align 8, !dbg !2799
  %ptradd = getelementptr inbounds i8, ptr %4, i64 8, !dbg !2799
  %5 = load i64, ptr %ptradd, align 8, !dbg !2799
  %eq = icmp eq i64 0, %5, !dbg !2799
  br i1 %eq, label %assert_ok, label %assert_fail, !dbg !2799

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.192, i64 88 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.file.235, i64 13 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg5, align 8
  %6 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %6(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, i32 14) #5, !dbg !2799
  unreachable, !dbg !2799

assert_ok:                                        ; preds = %checkok
  call void @llvm.memset.p0.i64(ptr align 8 %.assign_list, i8 0, i64 40, i1 false)
  store %"char[]" zeroinitializer, ptr %.assign_list, align 8, !dbg !2801
  %ptradd6 = getelementptr inbounds i8, ptr %.assign_list, i64 24, !dbg !2801
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %ptradd6, ptr align 8 %1, i32 16, i1 false), !dbg !2801
  %7 = load ptr, ptr %self, align 8, !dbg !2801
  %checknull = icmp eq ptr %7, null, !dbg !2801
  %8 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !2801
  br i1 %8, label %panic7, label %checkok11, !dbg !2801

checkok11:                                        ; preds = %assert_ok
  %9 = ptrtoint ptr %7 to i64, !dbg !2801
  %10 = urem i64 %9, 8, !dbg !2801
  %11 = icmp ne i64 %10, 0, !dbg !2801
  %12 = call i1 @llvm.expect.i1(i1 %11, i1 false), !dbg !2801
  br i1 %12, label %panic12, label %checkok19, !dbg !2801

checkok19:                                        ; preds = %checkok11
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %7, ptr align 8 %.assign_list, i32 40, i1 false), !dbg !2801
  %13 = load ptr, ptr %self, align 8, !dbg !2802
  %14 = load ptr, ptr %1, align 8, !dbg !2803
  %i2b = icmp ne ptr %14, null, !dbg !2803
  br i1 %i2b, label %assert_ok24, label %assert_fail20, !dbg !2803

assert_fail20:                                    ; preds = %checkok19
  store %"char[]" { ptr @.panic_msg.236, i64 52 }, ptr %indirectarg21, align 8
  store %"char[]" { ptr @.file.235, i64 13 }, ptr %indirectarg22, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg23, align 8
  %15 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %15(ptr align 8 %indirectarg21, ptr align 8 %indirectarg22, ptr align 8 %indirectarg23, i32 20) #5, !dbg !2802
  unreachable, !dbg !2802

assert_ok24:                                      ; preds = %checkok19
  %16 = load ptr, ptr %self, align 8, !dbg !2803
  %ptradd25 = getelementptr inbounds i8, ptr %16, i64 16, !dbg !2803
  %17 = load i64, ptr %ptradd25, align 8, !dbg !2803
  %eq26 = icmp eq i64 0, %17, !dbg !2802
  br i1 %eq26, label %assert_ok31, label %assert_fail27, !dbg !2802

assert_fail27:                                    ; preds = %assert_ok24
  store %"char[]" { ptr @.panic_msg.236, i64 52 }, ptr %indirectarg28, align 8
  store %"char[]" { ptr @.file.235, i64 13 }, ptr %indirectarg29, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg30, align 8
  %18 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %18(ptr align 8 %indirectarg28, ptr align 8 %indirectarg29, ptr align 8 %indirectarg30, i32 20) #5, !dbg !2802
  unreachable, !dbg !2802

assert_ok31:                                      ; preds = %assert_ok24
  ret ptr %13, !dbg !2802

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.235, i64 13 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg2, align 8
  %19 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %19(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 17) #5, !dbg !2797
  unreachable, !dbg !2797

panic7:                                           ; preds = %assert_ok
  store %"char[]" { ptr @.panic_msg.2, i64 45 }, ptr %indirectarg8, align 8
  store %"char[]" { ptr @.file.235, i64 13 }, ptr %indirectarg9, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg10, align 8
  %20 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %20(ptr align 8 %indirectarg8, ptr align 8 %indirectarg9, ptr align 8 %indirectarg10, i32 19) #5, !dbg !2801
  unreachable, !dbg !2801

panic12:                                          ; preds = %checkok11
  store i64 8, ptr %taddr, align 8
  %21 = insertvalue %any undef, ptr %taddr, 0
  %22 = insertvalue %any %21, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %10, ptr %taddr13, align 8
  %23 = insertvalue %any undef, ptr %taddr13, 0
  %24 = insertvalue %any %23, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg14, align 8
  store %"char[]" { ptr @.file.235, i64 13 }, ptr %indirectarg15, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg16, align 8
  store %any %22, ptr %varargslots, align 16
  %ptradd17 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %24, ptr %ptradd17, align 16
  %25 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %25, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg18, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg14, ptr align 8 %indirectarg15, ptr align 8 %indirectarg16, i32 19, ptr align 8 %indirectarg18) #5, !dbg !2801
  unreachable, !dbg !2801
}

; Function Attrs: nounwind ssp uwtable
define weak_odr ptr @std.io.ByteWriter.tinit(ptr %0) #0 comdat !dbg !2804 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg13 = alloca %any, align 8
  %indirectarg17 = alloca %"char[]", align 8
  %indirectarg18 = alloca %"char[]", align 8
  %indirectarg19 = alloca %"char[]", align 8
  %1 = icmp eq ptr %0, null, !dbg !2807
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2807
  br i1 %2, label %panic, label %checkok, !dbg !2807

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2808, !DIExpression(), !2809)
  %3 = load ptr, ptr %self, align 8, !dbg !2810
  %ptradd = getelementptr inbounds i8, ptr %3, i64 8, !dbg !2810
  %4 = load i64, ptr %ptradd, align 8, !dbg !2810
  %eq = icmp eq i64 0, %4, !dbg !2810
  br i1 %eq, label %assert_ok, label %assert_fail, !dbg !2810

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.192, i64 88 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.file.235, i64 13 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.func.207, i64 5 }, ptr %indirectarg5, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, i32 25) #5, !dbg !2810
  unreachable, !dbg !2810

assert_ok:                                        ; preds = %checkok
  %6 = load ptr, ptr %self, align 8, !dbg !2812
  %7 = call ptr @llvm.threadlocal.address.p0(ptr @std.core.mem.allocator.current_temp), !dbg !2812
  %8 = load %any, ptr %7, align 8, !dbg !2812
  %ptradd6 = getelementptr inbounds i8, ptr %6, i64 8, !dbg !2813
  %9 = load i64, ptr %ptradd6, align 8, !dbg !2813
  %eq7 = icmp eq i64 0, %9, !dbg !2812
  br i1 %eq7, label %assert_ok12, label %assert_fail8, !dbg !2812

assert_fail8:                                     ; preds = %assert_ok
  store %"char[]" { ptr @.panic_msg.192, i64 88 }, ptr %indirectarg9, align 8
  store %"char[]" { ptr @.file.235, i64 13 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.func.207, i64 5 }, ptr %indirectarg11, align 8
  %10 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %10(ptr align 8 %indirectarg9, ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, i32 30) #5, !dbg !2812
  unreachable, !dbg !2812

assert_ok12:                                      ; preds = %assert_ok
  store %any %8, ptr %indirectarg13, align 8
  %11 = call ptr @std.io.ByteWriter.init(ptr %6, ptr align 8 %indirectarg13) #6, !dbg !2812
  %12 = load ptr, ptr %self, align 8, !dbg !2814
  %ptradd14 = getelementptr inbounds i8, ptr %12, i64 16, !dbg !2814
  %13 = load i64, ptr %ptradd14, align 8, !dbg !2814
  %eq15 = icmp eq i64 0, %13, !dbg !2812
  br i1 %eq15, label %assert_ok20, label %assert_fail16, !dbg !2812

assert_fail16:                                    ; preds = %assert_ok12
  store %"char[]" { ptr @.panic_msg.237, i64 35 }, ptr %indirectarg17, align 8
  store %"char[]" { ptr @.file.235, i64 13 }, ptr %indirectarg18, align 8
  store %"char[]" { ptr @.func.207, i64 5 }, ptr %indirectarg19, align 8
  %14 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %14(ptr align 8 %indirectarg17, ptr align 8 %indirectarg18, ptr align 8 %indirectarg19, i32 30) #5, !dbg !2812
  unreachable, !dbg !2812

assert_ok20:                                      ; preds = %assert_ok12
  ret ptr %11, !dbg !2812

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.235, i64 13 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.207, i64 5 }, ptr %indirectarg2, align 8
  %15 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %15(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 28) #5, !dbg !2809
  unreachable, !dbg !2809
}

; Function Attrs: nounwind ssp uwtable
define weak_odr ptr @std.io.ByteWriter.init_with_buffer(ptr %0, ptr align 8 %1) #0 comdat !dbg !2815 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %.assign_list = alloca %ByteWriter, align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr9 = alloca i64, align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg14 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !2818
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !2818
  br i1 %3, label %panic, label %checkok, !dbg !2818

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2819, !DIExpression(), !2820)
    #dbg_declare(ptr %1, !2821, !DIExpression(), !2820)
  call void @llvm.memset.p0.i64(ptr align 8 %.assign_list, i8 0, i64 40, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %.assign_list, ptr align 8 %1, i32 16, i1 false), !dbg !2822
  %ptradd = getelementptr inbounds i8, ptr %.assign_list, i64 24, !dbg !2822
  store %any { ptr null, i64 ptrtoint (ptr @"$ct.void" to i64) }, ptr %ptradd, align 8, !dbg !2822
  %4 = load ptr, ptr %self, align 8, !dbg !2822
  %checknull = icmp eq ptr %4, null, !dbg !2822
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !2822
  br i1 %5, label %panic3, label %checkok7, !dbg !2822

checkok7:                                         ; preds = %checkok
  %6 = ptrtoint ptr %4 to i64, !dbg !2822
  %7 = urem i64 %6, 8, !dbg !2822
  %8 = icmp ne i64 %7, 0, !dbg !2822
  %9 = call i1 @llvm.expect.i1(i1 %8, i1 false), !dbg !2822
  br i1 %9, label %panic8, label %checkok15, !dbg !2822

checkok15:                                        ; preds = %checkok7
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %4, ptr align 8 %.assign_list, i32 40, i1 false), !dbg !2822
  %10 = load ptr, ptr %self, align 8, !dbg !2823
  ret ptr %10, !dbg !2823

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.235, i64 13 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.208, i64 16 }, ptr %indirectarg2, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 33) #5, !dbg !2820
  unreachable, !dbg !2820

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.2, i64 45 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.235, i64 13 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.208, i64 16 }, ptr %indirectarg6, align 8
  %12 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %12(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 35) #5, !dbg !2822
  unreachable, !dbg !2822

panic8:                                           ; preds = %checkok7
  store i64 8, ptr %taddr, align 8
  %13 = insertvalue %any undef, ptr %taddr, 0
  %14 = insertvalue %any %13, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %7, ptr %taddr9, align 8
  %15 = insertvalue %any undef, ptr %taddr9, 0
  %16 = insertvalue %any %15, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.file.235, i64 13 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.func.208, i64 16 }, ptr %indirectarg12, align 8
  store %any %14, ptr %varargslots, align 16
  %ptradd13 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %16, ptr %ptradd13, align 16
  %17 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %17, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg14, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, i32 35, ptr align 8 %indirectarg14) #5, !dbg !2822
  unreachable, !dbg !2822
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.ByteWriter.destroy(ptr %0) #0 comdat !dbg !2824 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %reterr = alloca i64, align 8
  %ptr = alloca ptr, align 8
  %allocator = alloca %any, align 8
  %ptr5 = alloca ptr, align 8
  %indirectarg9 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %indirectarg14 = alloca %"char[]", align 8
  %indirectarg15 = alloca %"char[]", align 8
  %indirectarg16 = alloca %"char[]", align 8
  %indirectarg19 = alloca %"char[]", align 8
  %indirectarg20 = alloca %"char[]", align 8
  %indirectarg21 = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr24 = alloca i64, align 8
  %indirectarg25 = alloca %"char[]", align 8
  %indirectarg26 = alloca %"char[]", align 8
  %indirectarg27 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg29 = alloca %"any[]", align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !2827
  %1 = icmp eq ptr %0, null, !dbg !2827
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2827
  br i1 %2, label %panic, label %checkok, !dbg !2827

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2828, !DIExpression(), !2829)
  %3 = load ptr, ptr %self, align 8, !dbg !2830
  %ptradd = getelementptr inbounds i8, ptr %3, i64 24, !dbg !2830
  %4 = load ptr, ptr %ptradd, align 8, !dbg !2830
  %i2nb = icmp eq ptr %4, null, !dbg !2830
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !2830

if.then:                                          ; preds = %checkok
  ret i64 0

if.exit:                                          ; preds = %checkok
    #dbg_declare(ptr %ptr, !2831, !DIExpression(), !2832)
  %5 = load ptr, ptr %self, align 8, !dbg !2832
  %6 = load ptr, ptr %5, align 8, !dbg !2832
  store ptr %6, ptr %ptr, align 8, !dbg !2832
  %i2b = icmp ne ptr %6, null, !dbg !2832
  br i1 %i2b, label %if.then3, label %if.exit17, !dbg !2832

if.then3:                                         ; preds = %if.exit
  %7 = load ptr, ptr %self, align 8, !dbg !2832
  %ptradd4 = getelementptr inbounds i8, ptr %7, i64 24, !dbg !2832
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator, ptr align 8 %ptradd4, i32 16, i1 false)
  %8 = load ptr, ptr %ptr, align 8
  store ptr %8, ptr %ptr5, align 8
  %9 = load ptr, ptr %ptr5, align 8, !dbg !2833
  %i2nb6 = icmp eq ptr %9, null, !dbg !2833
  br i1 %i2nb6, label %if.then7, label %if.exit8, !dbg !2833

if.then7:                                         ; preds = %if.then3
  br label %expr_block.exit, !dbg !2833

if.exit8:                                         ; preds = %if.then3
  %10 = load ptr, ptr %ptr5, align 8, !dbg !2835
  %neq = icmp ne ptr %10, null, !dbg !2835
  br i1 %neq, label %assert_ok, label %assert_fail, !dbg !2835

assert_fail:                                      ; preds = %if.exit8
  store %"char[]" { ptr @.panic_msg.211, i64 75 }, ptr %indirectarg9, align 8
  store %"char[]" { ptr @.file.212, i64 16 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.func.238, i64 7 }, ptr %indirectarg11, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11(ptr align 8 %indirectarg9, ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, i32 123) #5, !dbg !2835
  unreachable, !dbg !2835

assert_ok:                                        ; preds = %if.exit8
  %ptradd12 = getelementptr inbounds i8, ptr %allocator, i64 8, !dbg !2835
  %12 = load i64, ptr %ptradd12, align 8, !dbg !2835
  %13 = inttoptr i64 %12 to ptr, !dbg !2835
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !2827
  %14 = icmp eq ptr %13, %type, !dbg !2827
  br i1 %14, label %cache_hit, label %cache_miss, !dbg !2827

cache_miss:                                       ; preds = %assert_ok
  %ptradd13 = getelementptr inbounds i8, ptr %13, i64 16, !dbg !2827
  %15 = load ptr, ptr %ptradd13, align 8, !dbg !2827
  %16 = call ptr @.dyn_search(ptr %15, ptr @"$sel.release"), !dbg !2827
  store ptr %16, ptr %.inlinecache, align 8, !dbg !2827
  store ptr %13, ptr %.cachedtype, align 8, !dbg !2827
  br label %17, !dbg !2827

cache_hit:                                        ; preds = %assert_ok
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !2827
  br label %17, !dbg !2827

17:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %16, %cache_miss ], !dbg !2827
  %18 = icmp eq ptr %fn_phi, null, !dbg !2827
  br i1 %18, label %missing_function, label %match, !dbg !2827

missing_function:                                 ; preds = %17
  store %"char[]" { ptr @.panic_msg.213, i64 44 }, ptr %indirectarg14, align 8
  store %"char[]" { ptr @.file.212, i64 16 }, ptr %indirectarg15, align 8
  store %"char[]" { ptr @.func.238, i64 7 }, ptr %indirectarg16, align 8
  %19 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %19(ptr align 8 %indirectarg14, ptr align 8 %indirectarg15, ptr align 8 %indirectarg16, i32 123) #5, !dbg !2835
  unreachable, !dbg !2835

match:                                            ; preds = %17
  %20 = load ptr, ptr %allocator, align 8, !dbg !2835
  call void %fn_phi(ptr %20, ptr %10, i8 zeroext 0), !dbg !2835
  br label %expr_block.exit, !dbg !2835

expr_block.exit:                                  ; preds = %match, %if.then7
  br label %if.exit17, !dbg !2835

if.exit17:                                        ; preds = %expr_block.exit, %if.exit
  %21 = load ptr, ptr %self, align 8, !dbg !2836
  %checknull = icmp eq ptr %21, null, !dbg !2836
  %22 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !2836
  br i1 %22, label %panic18, label %checkok22, !dbg !2836

checkok22:                                        ; preds = %if.exit17
  %23 = ptrtoint ptr %21 to i64, !dbg !2836
  %24 = urem i64 %23, 8, !dbg !2836
  %25 = icmp ne i64 %24, 0, !dbg !2836
  %26 = call i1 @llvm.expect.i1(i1 %25, i1 false), !dbg !2836
  br i1 %26, label %panic23, label %checkok30, !dbg !2836

checkok30:                                        ; preds = %checkok22
  call void @llvm.memset.p0.i64(ptr align 8 %21, i8 0, i64 40, i1 false), !dbg !2836
  ret i64 0, !dbg !2836

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.235, i64 13 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.238, i64 7 }, ptr %indirectarg2, align 8
  %27 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %27(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 39) #5, !dbg !2829
  unreachable, !dbg !2829

panic18:                                          ; preds = %if.exit17
  store %"char[]" { ptr @.panic_msg.2, i64 45 }, ptr %indirectarg19, align 8
  store %"char[]" { ptr @.file.235, i64 13 }, ptr %indirectarg20, align 8
  store %"char[]" { ptr @.func.238, i64 7 }, ptr %indirectarg21, align 8
  %28 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %28(ptr align 8 %indirectarg19, ptr align 8 %indirectarg20, ptr align 8 %indirectarg21, i32 43) #5, !dbg !2836
  unreachable, !dbg !2836

panic23:                                          ; preds = %checkok22
  store i64 8, ptr %taddr, align 8
  %29 = insertvalue %any undef, ptr %taddr, 0
  %30 = insertvalue %any %29, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %24, ptr %taddr24, align 8
  %31 = insertvalue %any undef, ptr %taddr24, 0
  %32 = insertvalue %any %31, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg25, align 8
  store %"char[]" { ptr @.file.235, i64 13 }, ptr %indirectarg26, align 8
  store %"char[]" { ptr @.func.238, i64 7 }, ptr %indirectarg27, align 8
  store %any %30, ptr %varargslots, align 16
  %ptradd28 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %32, ptr %ptradd28, align 16
  %33 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %33, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg29, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg25, ptr align 8 %indirectarg26, ptr align 8 %indirectarg27, i32 43, ptr align 8 %indirectarg29) #5, !dbg !2836
  unreachable, !dbg !2836
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.io.ByteWriter.str_view(ptr noalias sret(%"char[]") align 8 %0, ptr %1) #0 comdat !dbg !2837 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %taddr = alloca i64, align 8
  %taddr4 = alloca i64, align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg7 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg8 = alloca %"any[]", align 8
  %taddr13 = alloca i64, align 8
  %indirectarg14 = alloca %"char[]", align 8
  %indirectarg15 = alloca %"char[]", align 8
  %indirectarg16 = alloca %"char[]", align 8
  %varargslots17 = alloca [1 x %any], align 16
  %indirectarg19 = alloca %"any[]", align 8
  %taddr23 = alloca i64, align 8
  %taddr24 = alloca i64, align 8
  %indirectarg25 = alloca %"char[]", align 8
  %indirectarg26 = alloca %"char[]", align 8
  %indirectarg27 = alloca %"char[]", align 8
  %varargslots28 = alloca [2 x %any], align 16
  %indirectarg31 = alloca %"any[]", align 8
  %2 = icmp eq ptr %1, null, !dbg !2840
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !2840
  br i1 %3, label %panic, label %checkok, !dbg !2840

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !2841, !DIExpression(), !2842)
  %4 = load ptr, ptr %self, align 8, !dbg !2843
  %5 = load %"char[]", ptr %4, align 8, !dbg !2843
  %6 = extractvalue %"char[]" %5, 0, !dbg !2843
  %7 = extractvalue %"char[]" %5, 1, !dbg !2843
  %gt = icmp ugt i64 0, %7, !dbg !2843
  %8 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !2843
  br i1 %8, label %panic3, label %checkok9, !dbg !2843

checkok9:                                         ; preds = %checkok
  %9 = load ptr, ptr %self, align 8, !dbg !2843
  %ptradd10 = getelementptr inbounds i8, ptr %9, i64 16, !dbg !2843
  %10 = load i64, ptr %ptradd10, align 8, !dbg !2843
  %add = add i64 0, %10, !dbg !2843
  %gt11 = icmp ugt i64 0, %add, !dbg !2843
  %sub = sub i64 %add, 0, !dbg !2843
  %11 = call i1 @llvm.expect.i1(i1 %gt11, i1 false), !dbg !2843
  br i1 %11, label %panic12, label %checkok20, !dbg !2843

checkok20:                                        ; preds = %checkok9
  %lt = icmp ult i64 %7, %add, !dbg !2843
  %sub21 = sub i64 %add, 1, !dbg !2843
  %12 = call i1 @llvm.expect.i1(i1 %lt, i1 false), !dbg !2843
  br i1 %12, label %panic22, label %checkok32, !dbg !2843

checkok32:                                        ; preds = %checkok20
  %size = sub i64 %add, 0, !dbg !2843
  %13 = insertvalue %"char[]" undef, ptr %6, 0, !dbg !2843
  %14 = insertvalue %"char[]" %13, i64 %size, 1, !dbg !2843
  store %"char[]" %14, ptr %0, align 8, !dbg !2843
  ret void, !dbg !2843

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.235, i64 13 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.193, i64 8 }, ptr %indirectarg2, align 8
  %15 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %15(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 46) #5, !dbg !2842
  unreachable, !dbg !2842

panic3:                                           ; preds = %checkok
  store i64 %7, ptr %taddr, align 8
  %16 = insertvalue %any undef, ptr %taddr, 0
  %17 = insertvalue %any %16, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr4, align 8
  %18 = insertvalue %any undef, ptr %taddr4, 0
  %19 = insertvalue %any %18, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.170, i64 61 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.file.235, i64 13 }, ptr %indirectarg6, align 8
  store %"char[]" { ptr @.func.193, i64 8 }, ptr %indirectarg7, align 8
  store %any %17, ptr %varargslots, align 16
  %ptradd = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %19, ptr %ptradd, align 16
  %20 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %20, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg8, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, ptr align 8 %indirectarg7, i32 48, ptr align 8 %indirectarg8) #5, !dbg !2843
  unreachable, !dbg !2843

panic12:                                          ; preds = %checkok9
  store i64 %sub, ptr %taddr13, align 8
  %21 = insertvalue %any undef, ptr %taddr13, 0
  %22 = insertvalue %any %21, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.16, i64 43 }, ptr %indirectarg14, align 8
  store %"char[]" { ptr @.file.235, i64 13 }, ptr %indirectarg15, align 8
  store %"char[]" { ptr @.func.193, i64 8 }, ptr %indirectarg16, align 8
  store %any %22, ptr %varargslots17, align 16
  %23 = insertvalue %"any[]" undef, ptr %varargslots17, 0
  %"$$temp18" = insertvalue %"any[]" %23, i64 1, 1
  store %"any[]" %"$$temp18", ptr %indirectarg19, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg14, ptr align 8 %indirectarg15, ptr align 8 %indirectarg16, i32 48, ptr align 8 %indirectarg19) #5, !dbg !2843
  unreachable, !dbg !2843

panic22:                                          ; preds = %checkok20
  store i64 %sub21, ptr %taddr23, align 8
  %24 = insertvalue %any undef, ptr %taddr23, 0
  %25 = insertvalue %any %24, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %7, ptr %taddr24, align 8
  %26 = insertvalue %any undef, ptr %taddr24, 0
  %27 = insertvalue %any %26, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 60 }, ptr %indirectarg25, align 8
  store %"char[]" { ptr @.file.235, i64 13 }, ptr %indirectarg26, align 8
  store %"char[]" { ptr @.func.193, i64 8 }, ptr %indirectarg27, align 8
  store %any %25, ptr %varargslots28, align 16
  %ptradd29 = getelementptr inbounds i8, ptr %varargslots28, i64 16
  store %any %27, ptr %ptradd29, align 16
  %28 = insertvalue %"any[]" undef, ptr %varargslots28, 0
  %"$$temp30" = insertvalue %"any[]" %28, i64 2, 1
  store %"any[]" %"$$temp30", ptr %indirectarg31, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg25, ptr align 8 %indirectarg26, ptr align 8 %indirectarg27, i32 48, ptr align 8 %indirectarg31) #5, !dbg !2843
  unreachable, !dbg !2843
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.ByteWriter.ensure_capacity(ptr %0, i64 %1) #0 comdat !dbg !2844 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %len = alloca i64, align 8
  %reterr = alloca i64, align 8
  %new_capacity = alloca i64, align 8
  %x = alloca i64, align 8
  %y = alloca i64, align 8
  %new_ptr = alloca ptr, align 8
  %error_var = alloca i64, align 8
  %allocator = alloca %any, align 8
  %ptr = alloca ptr, align 8
  %new_size = alloca i64, align 8
  %blockret = alloca ptr, align 8
  %allocator12 = alloca %any, align 8
  %ptr13 = alloca ptr, align 8
  %indirectarg17 = alloca %"char[]", align 8
  %indirectarg18 = alloca %"char[]", align 8
  %indirectarg19 = alloca %"char[]", align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %indirectarg22 = alloca %"char[]", align 8
  %indirectarg23 = alloca %"char[]", align 8
  %indirectarg24 = alloca %"char[]", align 8
  %x28 = alloca i64, align 8
  %indirectarg32 = alloca %"char[]", align 8
  %indirectarg33 = alloca %"char[]", align 8
  %indirectarg34 = alloca %"char[]", align 8
  %indirectarg37 = alloca %"char[]", align 8
  %indirectarg38 = alloca %"char[]", align 8
  %indirectarg39 = alloca %"char[]", align 8
  %indirectarg43 = alloca %"char[]", align 8
  %indirectarg44 = alloca %"char[]", align 8
  %indirectarg45 = alloca %"char[]", align 8
  %.inlinecache48 = alloca ptr, align 8
  %.cachedtype49 = alloca ptr, align 8
  %indirectarg57 = alloca %"char[]", align 8
  %indirectarg58 = alloca %"char[]", align 8
  %indirectarg59 = alloca %"char[]", align 8
  %retparam = alloca ptr, align 8
  %x63 = alloca i64, align 8
  %indirectarg74 = alloca %"char[]", align 8
  %indirectarg75 = alloca %"char[]", align 8
  %indirectarg76 = alloca %"char[]", align 8
  %indirectarg79 = alloca %"char[]", align 8
  %indirectarg80 = alloca %"char[]", align 8
  %indirectarg81 = alloca %"char[]", align 8
  %indirectarg85 = alloca %"char[]", align 8
  %indirectarg86 = alloca %"char[]", align 8
  %indirectarg87 = alloca %"char[]", align 8
  %indirectarg91 = alloca %"char[]", align 8
  %indirectarg92 = alloca %"char[]", align 8
  %indirectarg93 = alloca %"char[]", align 8
  %.inlinecache96 = alloca ptr, align 8
  %.cachedtype97 = alloca ptr, align 8
  %indirectarg105 = alloca %"char[]", align 8
  %indirectarg106 = alloca %"char[]", align 8
  %indirectarg107 = alloca %"char[]", align 8
  %retparam109 = alloca ptr, align 8
  %taddr = alloca i64, align 8
  %indirectarg118 = alloca %"char[]", align 8
  %indirectarg119 = alloca %"char[]", align 8
  %indirectarg120 = alloca %"char[]", align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg121 = alloca %"any[]", align 8
  store ptr null, ptr %.cachedtype97, align 8, !dbg !2847
  store ptr null, ptr %.cachedtype49, align 8, !dbg !2847
  store ptr null, ptr %.cachedtype, align 8, !dbg !2847
  %2 = icmp eq ptr %0, null, !dbg !2847
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !2847
  br i1 %3, label %panic, label %checkok, !dbg !2847

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2848, !DIExpression(), !2849)
  store i64 %1, ptr %len, align 8
    #dbg_declare(ptr %len, !2850, !DIExpression(), !2849)
  %4 = load ptr, ptr %self, align 8, !dbg !2851
  %ptradd = getelementptr inbounds i8, ptr %4, i64 8, !dbg !2851
  %5 = load i64, ptr %ptradd, align 8, !dbg !2851
  %6 = load i64, ptr %len, align 8, !dbg !2851
  %gt = icmp ugt i64 %5, %6, !dbg !2851
  br i1 %gt, label %if.then, label %if.exit, !dbg !2851

if.then:                                          ; preds = %checkok
  ret i64 0

if.exit:                                          ; preds = %checkok
  %7 = load ptr, ptr %self, align 8, !dbg !2852
  %ptradd3 = getelementptr inbounds i8, ptr %7, i64 24, !dbg !2852
  %8 = load ptr, ptr %ptradd3, align 8, !dbg !2852
  %i2nb = icmp eq ptr %8, null, !dbg !2852
  br i1 %i2nb, label %if.then4, label %if.exit5, !dbg !2852

if.then4:                                         ; preds = %if.exit
  ret i64 ptrtoint (ptr @std.io.OUT_OF_SPACE to i64), !dbg !2852

if.exit5:                                         ; preds = %if.exit
  %9 = load i64, ptr %len, align 8, !dbg !2853
  %gt6 = icmp ugt i64 16, %9, !dbg !2853
  br i1 %gt6, label %if.then7, label %if.exit8, !dbg !2853

if.then7:                                         ; preds = %if.exit5
  store i64 16, ptr %len, align 8, !dbg !2853
  br label %if.exit8, !dbg !2853

if.exit8:                                         ; preds = %if.then7, %if.exit5
    #dbg_declare(ptr %new_capacity, !2854, !DIExpression(), !2855)
  %10 = load i64, ptr %len, align 8
  store i64 %10, ptr %x, align 8
    #dbg_declare(ptr %y, !2856, !DIExpression(), !2858)
  store i64 1, ptr %y, align 8, !dbg !2858
  br label %loop.cond, !dbg !2859

loop.cond:                                        ; preds = %loop.body, %if.exit8
  %11 = load i64, ptr %y, align 8, !dbg !2860
  %12 = load i64, ptr %x, align 8, !dbg !2860
  %lt = icmp ult i64 %11, %12, !dbg !2860
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !2860

loop.body:                                        ; preds = %loop.cond
  %13 = load i64, ptr %y, align 8, !dbg !2860
  %14 = load i64, ptr %y, align 8, !dbg !2860
  %add = add i64 %13, %14, !dbg !2860
  store i64 %add, ptr %y, align 8, !dbg !2860
  br label %loop.cond, !dbg !2860

loop.exit:                                        ; preds = %loop.cond
  %15 = load i64, ptr %y, align 8, !dbg !2862
  store i64 %15, ptr %new_capacity, align 8, !dbg !2862
    #dbg_declare(ptr %new_ptr, !2863, !DIExpression(), !2864)
  %16 = load ptr, ptr %self, align 8, !dbg !2864
  %ptradd9 = getelementptr inbounds i8, ptr %16, i64 24, !dbg !2864
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator, ptr align 8 %ptradd9, i32 16, i1 false)
  %17 = load ptr, ptr %self, align 8, !dbg !2864
  %18 = load ptr, ptr %17, align 8, !dbg !2864
  store ptr %18, ptr %ptr, align 8
  %19 = load i64, ptr %new_capacity, align 8
  store i64 %19, ptr %new_size, align 8
  %20 = load i64, ptr %new_size, align 8, !dbg !2865
  %i2nb10 = icmp eq i64 %20, 0, !dbg !2865
  br i1 %i2nb10, label %if.then11, label %if.exit25, !dbg !2865

if.then11:                                        ; preds = %loop.exit
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator12, ptr align 8 %allocator, i32 16, i1 false)
  %21 = load ptr, ptr %ptr, align 8
  store ptr %21, ptr %ptr13, align 8
  %22 = load ptr, ptr %ptr13, align 8, !dbg !2867
  %i2nb14 = icmp eq ptr %22, null, !dbg !2867
  br i1 %i2nb14, label %if.then15, label %if.exit16, !dbg !2867

if.then15:                                        ; preds = %if.then11
  br label %expr_block.exit, !dbg !2867

if.exit16:                                        ; preds = %if.then11
  %23 = load ptr, ptr %ptr13, align 8, !dbg !2871
  %neq = icmp ne ptr %23, null, !dbg !2871
  br i1 %neq, label %assert_ok, label %assert_fail, !dbg !2871

assert_fail:                                      ; preds = %if.exit16
  store %"char[]" { ptr @.panic_msg.211, i64 75 }, ptr %indirectarg17, align 8
  store %"char[]" { ptr @.file.212, i64 16 }, ptr %indirectarg18, align 8
  store %"char[]" { ptr @.func.239, i64 15 }, ptr %indirectarg19, align 8
  %24 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %24(ptr align 8 %indirectarg17, ptr align 8 %indirectarg18, ptr align 8 %indirectarg19, i32 123) #5, !dbg !2871
  unreachable, !dbg !2871

assert_ok:                                        ; preds = %if.exit16
  %ptradd20 = getelementptr inbounds i8, ptr %allocator12, i64 8, !dbg !2871
  %25 = load i64, ptr %ptradd20, align 8, !dbg !2871
  %26 = inttoptr i64 %25 to ptr, !dbg !2871
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !2847
  %27 = icmp eq ptr %26, %type, !dbg !2847
  br i1 %27, label %cache_hit, label %cache_miss, !dbg !2847

cache_miss:                                       ; preds = %assert_ok
  %ptradd21 = getelementptr inbounds i8, ptr %26, i64 16, !dbg !2847
  %28 = load ptr, ptr %ptradd21, align 8, !dbg !2847
  %29 = call ptr @.dyn_search(ptr %28, ptr @"$sel.release"), !dbg !2847
  store ptr %29, ptr %.inlinecache, align 8, !dbg !2847
  store ptr %26, ptr %.cachedtype, align 8, !dbg !2847
  br label %30, !dbg !2847

cache_hit:                                        ; preds = %assert_ok
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !2847
  br label %30, !dbg !2847

30:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %29, %cache_miss ], !dbg !2847
  %31 = icmp eq ptr %fn_phi, null, !dbg !2847
  br i1 %31, label %missing_function, label %match, !dbg !2847

missing_function:                                 ; preds = %30
  store %"char[]" { ptr @.panic_msg.213, i64 44 }, ptr %indirectarg22, align 8
  store %"char[]" { ptr @.file.212, i64 16 }, ptr %indirectarg23, align 8
  store %"char[]" { ptr @.func.239, i64 15 }, ptr %indirectarg24, align 8
  %32 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %32(ptr align 8 %indirectarg22, ptr align 8 %indirectarg23, ptr align 8 %indirectarg24, i32 123) #5, !dbg !2871
  unreachable, !dbg !2871

match:                                            ; preds = %30
  %33 = load ptr, ptr %allocator12, align 8, !dbg !2871
  call void %fn_phi(ptr %33, ptr %23, i8 zeroext 0), !dbg !2871
  br label %expr_block.exit, !dbg !2871

expr_block.exit:                                  ; preds = %match, %if.then15
  store ptr null, ptr %blockret, align 8, !dbg !2872
  br label %expr_block.exit113, !dbg !2872

if.exit25:                                        ; preds = %loop.exit
  %34 = load ptr, ptr %ptr, align 8, !dbg !2873
  %i2nb26 = icmp eq ptr %34, null, !dbg !2873
  br i1 %i2nb26, label %if.then27, label %if.exit61, !dbg !2873

if.then27:                                        ; preds = %if.exit25
  %35 = load i64, ptr %new_size, align 8, !dbg !2873
  br i1 true, label %or.phi, label %or.rhs, !dbg !2874

or.rhs:                                           ; preds = %if.then27
  store i64 0, ptr %x28, align 8
  %36 = load i64, ptr %x28, align 8, !dbg !2875
  %neq29 = icmp ne i64 0, %36, !dbg !2875
  br i1 %neq29, label %and.rhs, label %and.phi, !dbg !2875

and.rhs:                                          ; preds = %or.rhs
  %37 = load i64, ptr %x28, align 8, !dbg !2875
  %38 = load i64, ptr %x28, align 8, !dbg !2875
  %sub = sub i64 %38, 1, !dbg !2875
  %and = and i64 %37, %sub, !dbg !2875
  %eq = icmp eq i64 %and, 0, !dbg !2875
  br label %and.phi, !dbg !2875

and.phi:                                          ; preds = %and.rhs, %or.rhs
  %val = phi i1 [ false, %or.rhs ], [ %eq, %and.rhs ], !dbg !2875
  br label %or.phi, !dbg !2875

or.phi:                                           ; preds = %and.phi, %if.then27
  %val30 = phi i1 [ true, %if.then27 ], [ %val, %and.phi ], !dbg !2875
  br i1 %val30, label %assert_ok35, label %assert_fail31, !dbg !2875

assert_fail31:                                    ; preds = %or.phi
  store %"char[]" { ptr @.panic_msg.220, i64 65 }, ptr %indirectarg32, align 8
  store %"char[]" { ptr @.file.212, i64 16 }, ptr %indirectarg33, align 8
  store %"char[]" { ptr @.func.239, i64 15 }, ptr %indirectarg34, align 8
  %39 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %39(ptr align 8 %indirectarg32, ptr align 8 %indirectarg33, ptr align 8 %indirectarg34, i32 113) #5, !dbg !2873
  unreachable, !dbg !2873

assert_ok35:                                      ; preds = %or.phi
  br i1 true, label %assert_ok40, label %assert_fail36, !dbg !2873

assert_fail36:                                    ; preds = %assert_ok35
  store %"char[]" { ptr @.panic_msg.221, i64 80 }, ptr %indirectarg37, align 8
  store %"char[]" { ptr @.file.212, i64 16 }, ptr %indirectarg38, align 8
  store %"char[]" { ptr @.func.239, i64 15 }, ptr %indirectarg39, align 8
  %40 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %40(ptr align 8 %indirectarg37, ptr align 8 %indirectarg38, ptr align 8 %indirectarg39, i32 113) #5, !dbg !2873
  unreachable, !dbg !2873

assert_ok40:                                      ; preds = %assert_ok35
  %lt41 = icmp ult i64 0, %35, !dbg !2873
  br i1 %lt41, label %assert_ok46, label %assert_fail42, !dbg !2873

assert_fail42:                                    ; preds = %assert_ok40
  store %"char[]" { ptr @.panic_msg.222, i64 59 }, ptr %indirectarg43, align 8
  store %"char[]" { ptr @.file.212, i64 16 }, ptr %indirectarg44, align 8
  store %"char[]" { ptr @.func.239, i64 15 }, ptr %indirectarg45, align 8
  %41 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %41(ptr align 8 %indirectarg43, ptr align 8 %indirectarg44, ptr align 8 %indirectarg45, i32 113) #5, !dbg !2873
  unreachable, !dbg !2873

assert_ok46:                                      ; preds = %assert_ok40
  %ptradd47 = getelementptr inbounds i8, ptr %allocator, i64 8, !dbg !2873
  %42 = load i64, ptr %ptradd47, align 8, !dbg !2873
  %43 = inttoptr i64 %42 to ptr, !dbg !2873
  %type50 = load ptr, ptr %.cachedtype49, align 8, !dbg !2847
  %44 = icmp eq ptr %43, %type50, !dbg !2847
  br i1 %44, label %cache_hit53, label %cache_miss51, !dbg !2847

cache_miss51:                                     ; preds = %assert_ok46
  %ptradd52 = getelementptr inbounds i8, ptr %43, i64 16, !dbg !2847
  %45 = load ptr, ptr %ptradd52, align 8, !dbg !2847
  %46 = call ptr @.dyn_search(ptr %45, ptr @"$sel.acquire"), !dbg !2847
  store ptr %46, ptr %.inlinecache48, align 8, !dbg !2847
  store ptr %43, ptr %.cachedtype49, align 8, !dbg !2847
  br label %47, !dbg !2847

cache_hit53:                                      ; preds = %assert_ok46
  %cache_hit_fn54 = load ptr, ptr %.inlinecache48, align 8, !dbg !2847
  br label %47, !dbg !2847

47:                                               ; preds = %cache_hit53, %cache_miss51
  %fn_phi55 = phi ptr [ %cache_hit_fn54, %cache_hit53 ], [ %46, %cache_miss51 ], !dbg !2847
  %48 = icmp eq ptr %fn_phi55, null, !dbg !2847
  br i1 %48, label %missing_function56, label %match60, !dbg !2847

missing_function56:                               ; preds = %47
  store %"char[]" { ptr @.panic_msg.223, i64 44 }, ptr %indirectarg57, align 8
  store %"char[]" { ptr @.file.212, i64 16 }, ptr %indirectarg58, align 8
  store %"char[]" { ptr @.func.239, i64 15 }, ptr %indirectarg59, align 8
  %49 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %49(ptr align 8 %indirectarg57, ptr align 8 %indirectarg58, ptr align 8 %indirectarg59, i32 113) #5, !dbg !2873
  unreachable, !dbg !2873

match60:                                          ; preds = %47
  %50 = load ptr, ptr %allocator, align 8
  %51 = call i64 %fn_phi55(ptr %retparam, ptr %50, i64 %35, i32 0, i64 0), !dbg !2873
  %not_err = icmp eq i64 %51, 0, !dbg !2873
  %52 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !2873
  br i1 %52, label %after_check, label %assign_optional, !dbg !2873

assign_optional:                                  ; preds = %match60
  store i64 %51, ptr %error_var, align 8, !dbg !2873
  br label %guard_block, !dbg !2873

after_check:                                      ; preds = %match60
  %53 = load ptr, ptr %retparam, align 8, !dbg !2873
  store ptr %53, ptr %blockret, align 8, !dbg !2873
  br label %expr_block.exit113, !dbg !2873

if.exit61:                                        ; preds = %if.exit25
  %54 = load ptr, ptr %ptr, align 8, !dbg !2877
  %55 = load i64, ptr %new_size, align 8, !dbg !2877
  br i1 true, label %or.phi71, label %or.rhs62, !dbg !2878

or.rhs62:                                         ; preds = %if.exit61
  store i64 0, ptr %x63, align 8
  %56 = load i64, ptr %x63, align 8, !dbg !2879
  %neq64 = icmp ne i64 0, %56, !dbg !2879
  br i1 %neq64, label %and.rhs65, label %and.phi69, !dbg !2879

and.rhs65:                                        ; preds = %or.rhs62
  %57 = load i64, ptr %x63, align 8, !dbg !2879
  %58 = load i64, ptr %x63, align 8, !dbg !2879
  %sub66 = sub i64 %58, 1, !dbg !2879
  %and67 = and i64 %57, %sub66, !dbg !2879
  %eq68 = icmp eq i64 %and67, 0, !dbg !2879
  br label %and.phi69, !dbg !2879

and.phi69:                                        ; preds = %and.rhs65, %or.rhs62
  %val70 = phi i1 [ false, %or.rhs62 ], [ %eq68, %and.rhs65 ], !dbg !2879
  br label %or.phi71, !dbg !2879

or.phi71:                                         ; preds = %and.phi69, %if.exit61
  %val72 = phi i1 [ true, %if.exit61 ], [ %val70, %and.phi69 ], !dbg !2879
  br i1 %val72, label %assert_ok77, label %assert_fail73, !dbg !2879

assert_fail73:                                    ; preds = %or.phi71
  store %"char[]" { ptr @.panic_msg.220, i64 65 }, ptr %indirectarg74, align 8
  store %"char[]" { ptr @.file.212, i64 16 }, ptr %indirectarg75, align 8
  store %"char[]" { ptr @.func.239, i64 15 }, ptr %indirectarg76, align 8
  %59 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %59(ptr align 8 %indirectarg74, ptr align 8 %indirectarg75, ptr align 8 %indirectarg76, i32 114) #5, !dbg !2877
  unreachable, !dbg !2877

assert_ok77:                                      ; preds = %or.phi71
  br i1 true, label %assert_ok82, label %assert_fail78, !dbg !2877

assert_fail78:                                    ; preds = %assert_ok77
  store %"char[]" { ptr @.panic_msg.221, i64 80 }, ptr %indirectarg79, align 8
  store %"char[]" { ptr @.file.212, i64 16 }, ptr %indirectarg80, align 8
  store %"char[]" { ptr @.func.239, i64 15 }, ptr %indirectarg81, align 8
  %60 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %60(ptr align 8 %indirectarg79, ptr align 8 %indirectarg80, ptr align 8 %indirectarg81, i32 114) #5, !dbg !2877
  unreachable, !dbg !2877

assert_ok82:                                      ; preds = %assert_ok77
  %neq83 = icmp ne ptr %54, null, !dbg !2877
  br i1 %neq83, label %assert_ok88, label %assert_fail84, !dbg !2877

assert_fail84:                                    ; preds = %assert_ok82
  store %"char[]" { ptr @.panic_msg.224, i64 32 }, ptr %indirectarg85, align 8
  store %"char[]" { ptr @.file.212, i64 16 }, ptr %indirectarg86, align 8
  store %"char[]" { ptr @.func.239, i64 15 }, ptr %indirectarg87, align 8
  %61 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %61(ptr align 8 %indirectarg85, ptr align 8 %indirectarg86, ptr align 8 %indirectarg87, i32 114) #5, !dbg !2877
  unreachable, !dbg !2877

assert_ok88:                                      ; preds = %assert_ok82
  %lt89 = icmp ult i64 0, %55, !dbg !2877
  br i1 %lt89, label %assert_ok94, label %assert_fail90, !dbg !2877

assert_fail90:                                    ; preds = %assert_ok88
  store %"char[]" { ptr @.panic_msg.225, i64 33 }, ptr %indirectarg91, align 8
  store %"char[]" { ptr @.file.212, i64 16 }, ptr %indirectarg92, align 8
  store %"char[]" { ptr @.func.239, i64 15 }, ptr %indirectarg93, align 8
  %62 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %62(ptr align 8 %indirectarg91, ptr align 8 %indirectarg92, ptr align 8 %indirectarg93, i32 114) #5, !dbg !2877
  unreachable, !dbg !2877

assert_ok94:                                      ; preds = %assert_ok88
  %ptradd95 = getelementptr inbounds i8, ptr %allocator, i64 8, !dbg !2877
  %63 = load i64, ptr %ptradd95, align 8, !dbg !2877
  %64 = inttoptr i64 %63 to ptr, !dbg !2877
  %type98 = load ptr, ptr %.cachedtype97, align 8, !dbg !2847
  %65 = icmp eq ptr %64, %type98, !dbg !2847
  br i1 %65, label %cache_hit101, label %cache_miss99, !dbg !2847

cache_miss99:                                     ; preds = %assert_ok94
  %ptradd100 = getelementptr inbounds i8, ptr %64, i64 16, !dbg !2847
  %66 = load ptr, ptr %ptradd100, align 8, !dbg !2847
  %67 = call ptr @.dyn_search(ptr %66, ptr @"$sel.resize"), !dbg !2847
  store ptr %67, ptr %.inlinecache96, align 8, !dbg !2847
  store ptr %64, ptr %.cachedtype97, align 8, !dbg !2847
  br label %68, !dbg !2847

cache_hit101:                                     ; preds = %assert_ok94
  %cache_hit_fn102 = load ptr, ptr %.inlinecache96, align 8, !dbg !2847
  br label %68, !dbg !2847

68:                                               ; preds = %cache_hit101, %cache_miss99
  %fn_phi103 = phi ptr [ %cache_hit_fn102, %cache_hit101 ], [ %67, %cache_miss99 ], !dbg !2847
  %69 = icmp eq ptr %fn_phi103, null, !dbg !2847
  br i1 %69, label %missing_function104, label %match108, !dbg !2847

missing_function104:                              ; preds = %68
  store %"char[]" { ptr @.panic_msg.226, i64 43 }, ptr %indirectarg105, align 8
  store %"char[]" { ptr @.file.212, i64 16 }, ptr %indirectarg106, align 8
  store %"char[]" { ptr @.func.239, i64 15 }, ptr %indirectarg107, align 8
  %70 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %70(ptr align 8 %indirectarg105, ptr align 8 %indirectarg106, ptr align 8 %indirectarg107, i32 114) #5, !dbg !2877
  unreachable, !dbg !2877

match108:                                         ; preds = %68
  %71 = load ptr, ptr %allocator, align 8
  %72 = call i64 %fn_phi103(ptr %retparam109, ptr %71, ptr %54, i64 %55, i64 0), !dbg !2877
  %not_err110 = icmp eq i64 %72, 0, !dbg !2877
  %73 = call i1 @llvm.expect.i1(i1 %not_err110, i1 true), !dbg !2877
  br i1 %73, label %after_check112, label %assign_optional111, !dbg !2877

assign_optional111:                               ; preds = %match108
  store i64 %72, ptr %error_var, align 8, !dbg !2877
  br label %guard_block, !dbg !2877

after_check112:                                   ; preds = %match108
  %74 = load ptr, ptr %retparam109, align 8, !dbg !2877
  store ptr %74, ptr %blockret, align 8, !dbg !2877
  br label %expr_block.exit113, !dbg !2877

expr_block.exit113:                               ; preds = %after_check112, %after_check, %expr_block.exit
  br label %noerr_block, !dbg !2877

guard_block:                                      ; preds = %assign_optional111, %assign_optional
  %75 = load i64, ptr %error_var, align 8, !dbg !2877
  ret i64 %75, !dbg !2877

noerr_block:                                      ; preds = %expr_block.exit113
  %76 = load ptr, ptr %blockret, align 8, !dbg !2877
  store ptr %76, ptr %new_ptr, align 8, !dbg !2877
  %77 = load ptr, ptr %new_ptr, align 8, !dbg !2881
  %78 = load i64, ptr %new_capacity, align 8, !dbg !2881
  %add114 = add i64 0, %78, !dbg !2881
  %gt115 = icmp ugt i64 0, %add114, !dbg !2881
  %sub116 = sub i64 %add114, 0, !dbg !2881
  %79 = call i1 @llvm.expect.i1(i1 %gt115, i1 false), !dbg !2881
  br i1 %79, label %panic117, label %checkok122, !dbg !2881

checkok122:                                       ; preds = %noerr_block
  %size = sub i64 %add114, 0, !dbg !2881
  %80 = insertvalue %"char[]" undef, ptr %77, 0, !dbg !2881
  %81 = insertvalue %"char[]" %80, i64 %size, 1, !dbg !2881
  %82 = load ptr, ptr %self, align 8, !dbg !2881
  store %"char[]" %81, ptr %82, align 8, !dbg !2881
  ret i64 0, !dbg !2881

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.235, i64 13 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.239, i64 15 }, ptr %indirectarg2, align 8
  %83 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %83(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 51) #5, !dbg !2849
  unreachable, !dbg !2849

panic117:                                         ; preds = %noerr_block
  store i64 %sub116, ptr %taddr, align 8
  %84 = insertvalue %any undef, ptr %taddr, 0
  %85 = insertvalue %any %84, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.16, i64 43 }, ptr %indirectarg118, align 8
  store %"char[]" { ptr @.file.235, i64 13 }, ptr %indirectarg119, align 8
  store %"char[]" { ptr @.func.239, i64 15 }, ptr %indirectarg120, align 8
  store %any %85, ptr %varargslots, align 16
  %86 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %86, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg121, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg118, ptr align 8 %indirectarg119, ptr align 8 %indirectarg120, i32 58, ptr align 8 %indirectarg121) #5, !dbg !2881
  unreachable, !dbg !2881
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.ByteWriter.write(ptr %0, ptr %1, ptr align 8 %2) #0 comdat !dbg !2882 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %error_var = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr7 = alloca i64, align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg12 = alloca %"any[]", align 8
  %dst = alloca ptr, align 8
  %src = alloca ptr, align 8
  %len = alloca i64, align 8
  %indirectarg16 = alloca %"char[]", align 8
  %indirectarg17 = alloca %"char[]", align 8
  %indirectarg18 = alloca %"char[]", align 8
  %indirectarg21 = alloca %"char[]", align 8
  %indirectarg22 = alloca %"char[]", align 8
  %indirectarg23 = alloca %"char[]", align 8
  %indirectarg35 = alloca %"char[]", align 8
  %indirectarg36 = alloca %"char[]", align 8
  %indirectarg37 = alloca %"char[]", align 8
  %reterr = alloca i64, align 8
  %3 = icmp eq ptr %1, null, !dbg !2885
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !2885
  br i1 %4, label %panic, label %checkok, !dbg !2885

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !2886, !DIExpression(), !2887)
    #dbg_declare(ptr %2, !2888, !DIExpression(), !2887)
  %5 = load ptr, ptr %self, align 8, !dbg !2889
  %ptradd = getelementptr inbounds i8, ptr %5, i64 16, !dbg !2889
  %6 = load i64, ptr %ptradd, align 8, !dbg !2889
  %ptradd3 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !2889
  %7 = load i64, ptr %ptradd3, align 8, !dbg !2889
  %add = add i64 %6, %7, !dbg !2889
  %8 = load ptr, ptr %self, align 8, !dbg !2889
  %9 = call i64 @std.io.ByteWriter.ensure_capacity(ptr %8, i64 %add) #6, !dbg !2889
  %not_err = icmp eq i64 %9, 0, !dbg !2889
  %10 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !2889
  br i1 %10, label %after_check, label %assign_optional, !dbg !2889

assign_optional:                                  ; preds = %checkok
  store i64 %9, ptr %error_var, align 8, !dbg !2889
  br label %guard_block, !dbg !2889

after_check:                                      ; preds = %checkok
  br label %noerr_block, !dbg !2889

guard_block:                                      ; preds = %assign_optional
  %11 = load i64, ptr %error_var, align 8, !dbg !2889
  ret i64 %11, !dbg !2889

noerr_block:                                      ; preds = %after_check
  %12 = load ptr, ptr %self, align 8, !dbg !2890
  %ptradd4 = getelementptr inbounds i8, ptr %12, i64 8, !dbg !2890
  %13 = load i64, ptr %ptradd4, align 8, !dbg !2890
  %14 = load ptr, ptr %12, align 8, !dbg !2890
  %15 = load ptr, ptr %self, align 8, !dbg !2890
  %ptradd5 = getelementptr inbounds i8, ptr %15, i64 16, !dbg !2890
  %16 = load i64, ptr %ptradd5, align 8, !dbg !2890
  %ge = icmp uge i64 %16, %13, !dbg !2890
  %17 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !2890
  br i1 %17, label %panic6, label %checkok13, !dbg !2890

checkok13:                                        ; preds = %noerr_block
  %ptradd14 = getelementptr inbounds i8, ptr %14, i64 %16, !dbg !2890
  store ptr %ptradd14, ptr %dst, align 8
  %18 = load ptr, ptr %2, align 8, !dbg !2890
  store ptr %18, ptr %src, align 8
  %ptradd15 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !2890
  %19 = load i64, ptr %ptradd15, align 8
  store i64 %19, ptr %len, align 8
  %20 = load ptr, ptr %dst, align 8, !dbg !2891
  %neq = icmp ne ptr %20, null, !dbg !2891
  br i1 %neq, label %assert_ok, label %assert_fail, !dbg !2891

assert_fail:                                      ; preds = %checkok13
  store %"char[]" { ptr @.panic_msg.229, i64 37 }, ptr %indirectarg16, align 8
  store %"char[]" { ptr @.file.230, i64 6 }, ptr %indirectarg17, align 8
  store %"char[]" { ptr @.func.202, i64 5 }, ptr %indirectarg18, align 8
  %21 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %21(ptr align 8 %indirectarg16, ptr align 8 %indirectarg17, ptr align 8 %indirectarg18, i32 357) #5, !dbg !2891
  unreachable, !dbg !2891

assert_ok:                                        ; preds = %checkok13
  %22 = load ptr, ptr %src, align 8, !dbg !2894
  %neq19 = icmp ne ptr %22, null, !dbg !2894
  br i1 %neq19, label %or.phi, label %or.rhs, !dbg !2894

or.rhs:                                           ; preds = %assert_ok
  %23 = load i64, ptr %len, align 8, !dbg !2894
  %eq = icmp eq i64 0, %23, !dbg !2894
  br label %or.phi, !dbg !2894

or.phi:                                           ; preds = %or.rhs, %assert_ok
  %val = phi i1 [ true, %assert_ok ], [ %eq, %or.rhs ], !dbg !2894
  br i1 %val, label %assert_ok24, label %assert_fail20, !dbg !2894

assert_fail20:                                    ; preds = %or.phi
  store %"char[]" { ptr @.panic_msg.231, i64 94 }, ptr %indirectarg21, align 8
  store %"char[]" { ptr @.file.235, i64 13 }, ptr %indirectarg22, align 8
  store %"char[]" { ptr @.func.202, i64 5 }, ptr %indirectarg23, align 8
  %24 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %24(ptr align 8 %indirectarg21, ptr align 8 %indirectarg22, ptr align 8 %indirectarg23, i32 64) #5, !dbg !2895
  unreachable, !dbg !2895

assert_ok24:                                      ; preds = %or.phi
  %25 = load i64, ptr %len, align 8, !dbg !2896
  %eq25 = icmp eq i64 0, %25, !dbg !2896
  br i1 %eq25, label %or.phi27, label %or.rhs26, !dbg !2896

or.rhs26:                                         ; preds = %assert_ok24
  %26 = load ptr, ptr %dst, align 8, !dbg !2896
  %27 = load i64, ptr %len, align 8, !dbg !2896
  %ptradd_any = getelementptr i8, ptr %26, i64 %27, !dbg !2896
  %28 = load ptr, ptr %src, align 8, !dbg !2896
  %le = icmp ule ptr %ptradd_any, %28, !dbg !2896
  br label %or.phi27, !dbg !2896

or.phi27:                                         ; preds = %or.rhs26, %assert_ok24
  %val28 = phi i1 [ true, %assert_ok24 ], [ %le, %or.rhs26 ], !dbg !2896
  br i1 %val28, label %or.phi32, label %or.rhs29, !dbg !2896

or.rhs29:                                         ; preds = %or.phi27
  %29 = load ptr, ptr %src, align 8, !dbg !2896
  %30 = load i64, ptr %len, align 8, !dbg !2896
  %ptradd_any30 = getelementptr i8, ptr %29, i64 %30, !dbg !2896
  %31 = load ptr, ptr %dst, align 8, !dbg !2896
  %le31 = icmp ule ptr %ptradd_any30, %31, !dbg !2896
  br label %or.phi32, !dbg !2896

or.phi32:                                         ; preds = %or.rhs29, %or.phi27
  %val33 = phi i1 [ true, %or.phi27 ], [ %le31, %or.rhs29 ], !dbg !2896
  br i1 %val33, label %assert_ok38, label %assert_fail34, !dbg !2896

assert_fail34:                                    ; preds = %or.phi32
  store %"char[]" { ptr @.panic_msg.232, i64 95 }, ptr %indirectarg35, align 8
  store %"char[]" { ptr @.file.235, i64 13 }, ptr %indirectarg36, align 8
  store %"char[]" { ptr @.func.202, i64 5 }, ptr %indirectarg37, align 8
  %32 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %32(ptr align 8 %indirectarg35, ptr align 8 %indirectarg36, ptr align 8 %indirectarg37, i32 64) #5, !dbg !2895
  unreachable, !dbg !2895

assert_ok38:                                      ; preds = %or.phi32
  %33 = load ptr, ptr %dst, align 8, !dbg !2897
  %34 = load ptr, ptr %src, align 8, !dbg !2897
  %35 = load i64, ptr %len, align 8, !dbg !2897
  call void @llvm.memcpy.p0.p0.i64(ptr %33, ptr %34, i64 %35, i1 false), !dbg !2897
  %36 = load ptr, ptr %self, align 8, !dbg !2898
  %ptradd39 = getelementptr inbounds i8, ptr %36, i64 16, !dbg !2898
  %37 = load i64, ptr %ptradd39, align 8, !dbg !2898
  %ptradd40 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !2898
  %38 = load i64, ptr %ptradd40, align 8, !dbg !2898
  %add41 = add i64 %37, %38, !dbg !2898
  store i64 %add41, ptr %ptradd39, align 8, !dbg !2898
  %ptradd42 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !2899
  %39 = load i64, ptr %ptradd42, align 8, !dbg !2899
  store i64 %39, ptr %0, align 8, !dbg !2899
  ret i64 0, !dbg !2899

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.235, i64 13 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.202, i64 5 }, ptr %indirectarg2, align 8
  %40 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %40(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 61) #5, !dbg !2887
  unreachable, !dbg !2887

panic6:                                           ; preds = %noerr_block
  store i64 %13, ptr %taddr, align 8
  %41 = insertvalue %any undef, ptr %taddr, 0
  %42 = insertvalue %any %41, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %16, ptr %taddr7, align 8
  %43 = insertvalue %any undef, ptr %taddr7, 0
  %44 = insertvalue %any %43, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.71, i64 59 }, ptr %indirectarg8, align 8
  store %"char[]" { ptr @.file.235, i64 13 }, ptr %indirectarg9, align 8
  store %"char[]" { ptr @.func.202, i64 5 }, ptr %indirectarg10, align 8
  store %any %42, ptr %varargslots, align 16
  %ptradd11 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %44, ptr %ptradd11, align 16
  %45 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %45, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg12, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg8, ptr align 8 %indirectarg9, ptr align 8 %indirectarg10, i32 64, ptr align 8 %indirectarg12) #5, !dbg !2890
  unreachable, !dbg !2890
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.ByteWriter.write_byte(ptr %0, i8 %1) #0 comdat !dbg !2900 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %c = alloca i8, align 1
  %error_var = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr7 = alloca i64, align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg12 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !2903
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !2903
  br i1 %3, label %panic, label %checkok, !dbg !2903

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2904, !DIExpression(), !2905)
  store i8 %1, ptr %c, align 1
    #dbg_declare(ptr %c, !2906, !DIExpression(), !2905)
  %4 = load ptr, ptr %self, align 8, !dbg !2907
  %ptradd = getelementptr inbounds i8, ptr %4, i64 16, !dbg !2907
  %5 = load i64, ptr %ptradd, align 8, !dbg !2907
  %add = add i64 %5, 1, !dbg !2907
  %6 = load ptr, ptr %self, align 8, !dbg !2907
  %7 = call i64 @std.io.ByteWriter.ensure_capacity(ptr %6, i64 %add) #6, !dbg !2907
  %not_err = icmp eq i64 %7, 0, !dbg !2907
  %8 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !2907
  br i1 %8, label %after_check, label %assign_optional, !dbg !2907

assign_optional:                                  ; preds = %checkok
  store i64 %7, ptr %error_var, align 8, !dbg !2907
  br label %guard_block, !dbg !2907

after_check:                                      ; preds = %checkok
  br label %noerr_block, !dbg !2907

guard_block:                                      ; preds = %assign_optional
  %9 = load i64, ptr %error_var, align 8, !dbg !2907
  ret i64 %9, !dbg !2907

noerr_block:                                      ; preds = %after_check
  %10 = load ptr, ptr %self, align 8, !dbg !2908
  %ptradd3 = getelementptr inbounds i8, ptr %10, i64 8, !dbg !2908
  %11 = load i64, ptr %ptradd3, align 8, !dbg !2908
  %12 = load ptr, ptr %10, align 8, !dbg !2908
  %13 = load ptr, ptr %self, align 8, !dbg !2908
  %ptradd4 = getelementptr inbounds i8, ptr %13, i64 16, !dbg !2908
  %14 = load i64, ptr %ptradd4, align 8, !dbg !2908
  %add5 = add i64 %14, 1, !dbg !2908
  store i64 %add5, ptr %ptradd4, align 8, !dbg !2908
  %ge = icmp uge i64 %14, %11, !dbg !2908
  %15 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !2908
  br i1 %15, label %panic6, label %checkok13, !dbg !2908

checkok13:                                        ; preds = %noerr_block
  %ptradd14 = getelementptr inbounds i8, ptr %12, i64 %14, !dbg !2908
  %16 = load i8, ptr %c, align 1, !dbg !2908
  store i8 %16, ptr %ptradd14, align 1, !dbg !2908
  ret i64 0, !dbg !2908

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.235, i64 13 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.203, i64 10 }, ptr %indirectarg2, align 8
  %17 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %17(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 69) #5, !dbg !2905
  unreachable, !dbg !2905

panic6:                                           ; preds = %noerr_block
  store i64 %11, ptr %taddr, align 8
  %18 = insertvalue %any undef, ptr %taddr, 0
  %19 = insertvalue %any %18, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %14, ptr %taddr7, align 8
  %20 = insertvalue %any undef, ptr %taddr7, 0
  %21 = insertvalue %any %20, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.71, i64 59 }, ptr %indirectarg8, align 8
  store %"char[]" { ptr @.file.235, i64 13 }, ptr %indirectarg9, align 8
  store %"char[]" { ptr @.func.203, i64 10 }, ptr %indirectarg10, align 8
  store %any %19, ptr %varargslots, align 16
  %ptradd11 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %21, ptr %ptradd11, align 16
  %22 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %22, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg12, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg8, ptr align 8 %indirectarg9, ptr align 8 %indirectarg10, i32 72, ptr align 8 %indirectarg12) #5, !dbg !2908
  unreachable, !dbg !2908
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.ByteWriter.read_from(ptr %0, ptr %1, ptr align 8 %2) #0 comdat !dbg !2909 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %start_index = alloca i64, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %available = alloca i64, align 8
  %error_var = alloca i64, align 8
  %.inlinecache5 = alloca ptr, align 8
  %.cachedtype6 = alloca ptr, align 8
  %indirectarg13 = alloca %"char[]", align 8
  %indirectarg14 = alloca %"char[]", align 8
  %indirectarg15 = alloca %"char[]", align 8
  %retparam = alloca i64, align 8
  %error_var17 = alloca i64, align 8
  %read = alloca i64, align 8
  %error_var24 = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr27 = alloca i64, align 8
  %indirectarg28 = alloca %"char[]", align 8
  %indirectarg29 = alloca %"char[]", align 8
  %indirectarg30 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg32 = alloca %"any[]", align 8
  %.inlinecache36 = alloca ptr, align 8
  %.cachedtype37 = alloca ptr, align 8
  %indirectarg45 = alloca %"char[]", align 8
  %indirectarg46 = alloca %"char[]", align 8
  %indirectarg47 = alloca %"char[]", align 8
  %retparam49 = alloca i64, align 8
  %indirectarg50 = alloca %"char[]", align 8
  %reterr = alloca i64, align 8
  %error_var61 = alloca i64, align 8
  %len_to_read = alloca i64, align 8
  %error_var74 = alloca i64, align 8
  %read85 = alloca i64, align 8
  %error_var86 = alloca i64, align 8
  %taddr90 = alloca i64, align 8
  %taddr91 = alloca i64, align 8
  %indirectarg92 = alloca %"char[]", align 8
  %indirectarg93 = alloca %"char[]", align 8
  %indirectarg94 = alloca %"char[]", align 8
  %varargslots95 = alloca [2 x %any], align 16
  %indirectarg98 = alloca %"any[]", align 8
  %.inlinecache103 = alloca ptr, align 8
  %.cachedtype104 = alloca ptr, align 8
  %indirectarg112 = alloca %"char[]", align 8
  %indirectarg113 = alloca %"char[]", align 8
  %indirectarg114 = alloca %"char[]", align 8
  %retparam116 = alloca i64, align 8
  %indirectarg117 = alloca %"char[]", align 8
  %reterr126 = alloca i64, align 8
  store ptr null, ptr %.cachedtype104, align 8, !dbg !2912
  store ptr null, ptr %.cachedtype37, align 8, !dbg !2912
  store ptr null, ptr %.cachedtype6, align 8, !dbg !2912
  store ptr null, ptr %.cachedtype, align 8, !dbg !2912
  %3 = icmp eq ptr %1, null, !dbg !2912
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !2912
  br i1 %4, label %panic, label %checkok, !dbg !2912

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !2913, !DIExpression(), !2914)
    #dbg_declare(ptr %2, !2915, !DIExpression(), !2914)
    #dbg_declare(ptr %start_index, !2916, !DIExpression(), !2917)
  %5 = load ptr, ptr %self, align 8, !dbg !2917
  %ptradd = getelementptr inbounds i8, ptr %5, i64 16, !dbg !2917
  %6 = load i64, ptr %ptradd, align 8, !dbg !2917
  store i64 %6, ptr %start_index, align 8, !dbg !2917
  %7 = load %any, ptr %2, align 8, !dbg !2918
  %8 = extractvalue %any %7, 1, !dbg !2918
  %9 = inttoptr i64 %8 to ptr, !dbg !2918
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !2912
  %10 = icmp eq ptr %9, %type, !dbg !2912
  br i1 %10, label %cache_hit, label %cache_miss, !dbg !2912

cache_miss:                                       ; preds = %checkok
  %ptradd3 = getelementptr inbounds i8, ptr %9, i64 16, !dbg !2912
  %11 = load ptr, ptr %ptradd3, align 8, !dbg !2912
  %12 = call ptr @.dyn_search(ptr %11, ptr @"$sel.available"), !dbg !2912
  store ptr %12, ptr %.inlinecache, align 8, !dbg !2912
  store ptr %9, ptr %.cachedtype, align 8, !dbg !2912
  br label %13, !dbg !2912

cache_hit:                                        ; preds = %checkok
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !2912
  br label %13, !dbg !2912

13:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %12, %cache_miss ], !dbg !2912
  %i2b = icmp ne ptr %fn_phi, null, !dbg !2912
  br i1 %i2b, label %if.then, label %if.exit, !dbg !2912

if.then:                                          ; preds = %13
  br label %loop.cond, !dbg !2919

loop.cond:                                        ; preds = %noerr_block55, %if.then
    #dbg_declare(ptr %available, !2921, !DIExpression(), !2923)
  %ptradd4 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !2923
  %14 = load i64, ptr %ptradd4, align 8, !dbg !2923
  %15 = inttoptr i64 %14 to ptr, !dbg !2923
  %type7 = load ptr, ptr %.cachedtype6, align 8, !dbg !2912
  %16 = icmp eq ptr %15, %type7, !dbg !2912
  br i1 %16, label %cache_hit10, label %cache_miss8, !dbg !2912

cache_miss8:                                      ; preds = %loop.cond
  %ptradd9 = getelementptr inbounds i8, ptr %15, i64 16, !dbg !2912
  %17 = load ptr, ptr %ptradd9, align 8, !dbg !2912
  %18 = call ptr @.dyn_search(ptr %17, ptr @"$sel.available"), !dbg !2912
  store ptr %18, ptr %.inlinecache5, align 8, !dbg !2912
  store ptr %15, ptr %.cachedtype6, align 8, !dbg !2912
  br label %19, !dbg !2912

cache_hit10:                                      ; preds = %loop.cond
  %cache_hit_fn11 = load ptr, ptr %.inlinecache5, align 8, !dbg !2912
  br label %19, !dbg !2912

19:                                               ; preds = %cache_hit10, %cache_miss8
  %fn_phi12 = phi ptr [ %cache_hit_fn11, %cache_hit10 ], [ %18, %cache_miss8 ], !dbg !2912
  %20 = icmp eq ptr %fn_phi12, null, !dbg !2912
  br i1 %20, label %missing_function, label %match, !dbg !2912

missing_function:                                 ; preds = %19
  store %"char[]" { ptr @.panic_msg.241, i64 46 }, ptr %indirectarg13, align 8
  store %"char[]" { ptr @.file.235, i64 13 }, ptr %indirectarg14, align 8
  store %"char[]" { ptr @.func.240, i64 9 }, ptr %indirectarg15, align 8
  %21 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %21(ptr align 8 %indirectarg13, ptr align 8 %indirectarg14, ptr align 8 %indirectarg15, i32 84) #5, !dbg !2923
  unreachable, !dbg !2923

match:                                            ; preds = %19
  %22 = load ptr, ptr %2, align 8
  %23 = call i64 %fn_phi12(ptr %retparam, ptr %22), !dbg !2923
  %not_err = icmp eq i64 %23, 0, !dbg !2923
  %24 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !2923
  br i1 %24, label %after_check, label %assign_optional, !dbg !2923

assign_optional:                                  ; preds = %match
  store i64 %23, ptr %error_var, align 8, !dbg !2923
  br label %guard_block, !dbg !2923

after_check:                                      ; preds = %match
  br label %noerr_block, !dbg !2923

guard_block:                                      ; preds = %assign_optional
  %25 = load i64, ptr %error_var, align 8, !dbg !2923
  ret i64 %25, !dbg !2923

noerr_block:                                      ; preds = %after_check
  %26 = load i64, ptr %retparam, align 8, !dbg !2923
  store i64 %26, ptr %available, align 8, !dbg !2923
  %i2b16 = icmp ne i64 %26, 0, !dbg !2923
  br i1 %i2b16, label %loop.body, label %loop.exit, !dbg !2923

loop.body:                                        ; preds = %noerr_block
  %27 = load ptr, ptr %self, align 8, !dbg !2924
  %ptradd18 = getelementptr inbounds i8, ptr %27, i64 16, !dbg !2924
  %28 = load i64, ptr %ptradd18, align 8, !dbg !2924
  %29 = load i64, ptr %available, align 8, !dbg !2924
  %add = add i64 %28, %29, !dbg !2924
  %30 = load ptr, ptr %self, align 8, !dbg !2924
  %31 = call i64 @std.io.ByteWriter.ensure_capacity(ptr %30, i64 %add) #6, !dbg !2924
  %not_err19 = icmp eq i64 %31, 0, !dbg !2924
  %32 = call i1 @llvm.expect.i1(i1 %not_err19, i1 true), !dbg !2924
  br i1 %32, label %after_check21, label %assign_optional20, !dbg !2924

assign_optional20:                                ; preds = %loop.body
  store i64 %31, ptr %error_var17, align 8, !dbg !2924
  br label %guard_block22, !dbg !2924

after_check21:                                    ; preds = %loop.body
  br label %noerr_block23, !dbg !2924

guard_block22:                                    ; preds = %assign_optional20
  %33 = load i64, ptr %error_var17, align 8, !dbg !2924
  ret i64 %33, !dbg !2924

noerr_block23:                                    ; preds = %after_check21
    #dbg_declare(ptr %read, !2926, !DIExpression(), !2927)
  %34 = load ptr, ptr %self, align 8, !dbg !2927
  %35 = load %"char[]", ptr %34, align 8, !dbg !2927
  %36 = extractvalue %"char[]" %35, 0, !dbg !2927
  %37 = load ptr, ptr %self, align 8, !dbg !2927
  %ptradd25 = getelementptr inbounds i8, ptr %37, i64 16, !dbg !2927
  %38 = load i64, ptr %ptradd25, align 8, !dbg !2927
  %39 = extractvalue %"char[]" %35, 1, !dbg !2927
  %gt = icmp ugt i64 %38, %39, !dbg !2927
  %40 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !2927
  br i1 %40, label %panic26, label %checkok33, !dbg !2927

checkok33:                                        ; preds = %noerr_block23
  %size = sub i64 %39, %38, !dbg !2927
  %ptradd34 = getelementptr inbounds i8, ptr %36, i64 %38, !dbg !2927
  %41 = insertvalue %"char[]" undef, ptr %ptradd34, 0, !dbg !2927
  %42 = insertvalue %"char[]" %41, i64 %size, 1, !dbg !2927
  %ptradd35 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !2927
  %43 = load i64, ptr %ptradd35, align 8, !dbg !2927
  %44 = inttoptr i64 %43 to ptr, !dbg !2927
  %type38 = load ptr, ptr %.cachedtype37, align 8, !dbg !2912
  %45 = icmp eq ptr %44, %type38, !dbg !2912
  br i1 %45, label %cache_hit41, label %cache_miss39, !dbg !2912

cache_miss39:                                     ; preds = %checkok33
  %ptradd40 = getelementptr inbounds i8, ptr %44, i64 16, !dbg !2912
  %46 = load ptr, ptr %ptradd40, align 8, !dbg !2912
  %47 = call ptr @.dyn_search(ptr %46, ptr @"$sel.read"), !dbg !2912
  store ptr %47, ptr %.inlinecache36, align 8, !dbg !2912
  store ptr %44, ptr %.cachedtype37, align 8, !dbg !2912
  br label %48, !dbg !2912

cache_hit41:                                      ; preds = %checkok33
  %cache_hit_fn42 = load ptr, ptr %.inlinecache36, align 8, !dbg !2912
  br label %48, !dbg !2912

48:                                               ; preds = %cache_hit41, %cache_miss39
  %fn_phi43 = phi ptr [ %cache_hit_fn42, %cache_hit41 ], [ %47, %cache_miss39 ], !dbg !2912
  %49 = icmp eq ptr %fn_phi43, null, !dbg !2912
  br i1 %49, label %missing_function44, label %match48, !dbg !2912

missing_function44:                               ; preds = %48
  store %"char[]" { ptr @.panic_msg.197, i64 41 }, ptr %indirectarg45, align 8
  store %"char[]" { ptr @.file.235, i64 13 }, ptr %indirectarg46, align 8
  store %"char[]" { ptr @.func.240, i64 9 }, ptr %indirectarg47, align 8
  %50 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %50(ptr align 8 %indirectarg45, ptr align 8 %indirectarg46, ptr align 8 %indirectarg47, i32 87) #5, !dbg !2927
  unreachable, !dbg !2927

match48:                                          ; preds = %48
  %51 = load ptr, ptr %2, align 8
  store %"char[]" %42, ptr %indirectarg50, align 8
  %52 = call i64 %fn_phi43(ptr %retparam49, ptr %51, ptr align 8 %indirectarg50), !dbg !2927
  %not_err51 = icmp eq i64 %52, 0, !dbg !2927
  %53 = call i1 @llvm.expect.i1(i1 %not_err51, i1 true), !dbg !2927
  br i1 %53, label %after_check53, label %assign_optional52, !dbg !2927

assign_optional52:                                ; preds = %match48
  store i64 %52, ptr %error_var24, align 8, !dbg !2927
  br label %guard_block54, !dbg !2927

after_check53:                                    ; preds = %match48
  br label %noerr_block55, !dbg !2927

guard_block54:                                    ; preds = %assign_optional52
  %54 = load i64, ptr %error_var24, align 8, !dbg !2927
  ret i64 %54, !dbg !2927

noerr_block55:                                    ; preds = %after_check53
  %55 = load i64, ptr %retparam49, align 8, !dbg !2927
  store i64 %55, ptr %read, align 8, !dbg !2927
  %56 = load ptr, ptr %self, align 8, !dbg !2928
  %ptradd56 = getelementptr inbounds i8, ptr %56, i64 16, !dbg !2928
  %57 = load i64, ptr %ptradd56, align 8, !dbg !2928
  %58 = load i64, ptr %read, align 8, !dbg !2928
  %add57 = add i64 %57, %58, !dbg !2928
  store i64 %add57, ptr %ptradd56, align 8, !dbg !2928
  br label %loop.cond, !dbg !2928

loop.exit:                                        ; preds = %noerr_block
  %59 = load ptr, ptr %self, align 8, !dbg !2929
  %ptradd58 = getelementptr inbounds i8, ptr %59, i64 16, !dbg !2929
  %60 = load i64, ptr %ptradd58, align 8, !dbg !2929
  %61 = load i64, ptr %start_index, align 8, !dbg !2929
  %sub = sub i64 %60, %61, !dbg !2929
  store i64 %sub, ptr %0, align 8, !dbg !2929
  ret i64 0, !dbg !2929

if.exit:                                          ; preds = %13
  %62 = load ptr, ptr %self, align 8, !dbg !2930
  %ptradd59 = getelementptr inbounds i8, ptr %62, i64 8, !dbg !2930
  %63 = load i64, ptr %ptradd59, align 8, !dbg !2930
  %eq = icmp eq i64 0, %63, !dbg !2930
  br i1 %eq, label %if.then60, label %if.exit67, !dbg !2930

if.then60:                                        ; preds = %if.exit
  %64 = load ptr, ptr %self, align 8, !dbg !2931
  %65 = call i64 @std.io.ByteWriter.ensure_capacity(ptr %64, i64 16) #6, !dbg !2931
  %not_err62 = icmp eq i64 %65, 0, !dbg !2931
  %66 = call i1 @llvm.expect.i1(i1 %not_err62, i1 true), !dbg !2931
  br i1 %66, label %after_check64, label %assign_optional63, !dbg !2931

assign_optional63:                                ; preds = %if.then60
  store i64 %65, ptr %error_var61, align 8, !dbg !2931
  br label %guard_block65, !dbg !2931

after_check64:                                    ; preds = %if.then60
  br label %noerr_block66, !dbg !2931

guard_block65:                                    ; preds = %assign_optional63
  %67 = load i64, ptr %error_var61, align 8, !dbg !2931
  ret i64 %67, !dbg !2931

noerr_block66:                                    ; preds = %after_check64
  br label %if.exit67, !dbg !2931

if.exit67:                                        ; preds = %noerr_block66, %if.exit
  br label %loop.body68, !dbg !2933

loop.body68:                                      ; preds = %if.exit129, %if.exit67
    #dbg_declare(ptr %len_to_read, !2934, !DIExpression(), !2937)
  %68 = load ptr, ptr %self, align 8, !dbg !2937
  %ptradd69 = getelementptr inbounds i8, ptr %68, i64 8, !dbg !2937
  %69 = load i64, ptr %ptradd69, align 8, !dbg !2937
  %70 = load ptr, ptr %self, align 8, !dbg !2937
  %ptradd70 = getelementptr inbounds i8, ptr %70, i64 16, !dbg !2937
  %71 = load i64, ptr %ptradd70, align 8, !dbg !2937
  %sub71 = sub i64 %69, %71, !dbg !2937
  store i64 %sub71, ptr %len_to_read, align 8, !dbg !2937
  %72 = load i64, ptr %len_to_read, align 8, !dbg !2938
  %gt72 = icmp ugt i64 16, %72, !dbg !2938
  br i1 %gt72, label %if.then73, label %if.exit84, !dbg !2938

if.then73:                                        ; preds = %loop.body68
  %73 = load ptr, ptr %self, align 8, !dbg !2939
  %ptradd75 = getelementptr inbounds i8, ptr %73, i64 8, !dbg !2939
  %74 = load i64, ptr %ptradd75, align 8, !dbg !2939
  %mul = mul i64 %74, 2, !dbg !2939
  %75 = load ptr, ptr %self, align 8, !dbg !2939
  %76 = call i64 @std.io.ByteWriter.ensure_capacity(ptr %75, i64 %mul) #6, !dbg !2939
  %not_err76 = icmp eq i64 %76, 0, !dbg !2939
  %77 = call i1 @llvm.expect.i1(i1 %not_err76, i1 true), !dbg !2939
  br i1 %77, label %after_check78, label %assign_optional77, !dbg !2939

assign_optional77:                                ; preds = %if.then73
  store i64 %76, ptr %error_var74, align 8, !dbg !2939
  br label %guard_block79, !dbg !2939

after_check78:                                    ; preds = %if.then73
  br label %noerr_block80, !dbg !2939

guard_block79:                                    ; preds = %assign_optional77
  %78 = load i64, ptr %error_var74, align 8, !dbg !2939
  ret i64 %78, !dbg !2939

noerr_block80:                                    ; preds = %after_check78
  %79 = load ptr, ptr %self, align 8, !dbg !2941
  %ptradd81 = getelementptr inbounds i8, ptr %79, i64 8, !dbg !2941
  %80 = load i64, ptr %ptradd81, align 8, !dbg !2941
  %81 = load ptr, ptr %self, align 8, !dbg !2941
  %ptradd82 = getelementptr inbounds i8, ptr %81, i64 16, !dbg !2941
  %82 = load i64, ptr %ptradd82, align 8, !dbg !2941
  %sub83 = sub i64 %80, %82, !dbg !2941
  store i64 %sub83, ptr %len_to_read, align 8, !dbg !2941
  br label %if.exit84, !dbg !2941

if.exit84:                                        ; preds = %noerr_block80, %loop.body68
    #dbg_declare(ptr %read85, !2942, !DIExpression(), !2943)
  %83 = load ptr, ptr %self, align 8, !dbg !2943
  %84 = load %"char[]", ptr %83, align 8, !dbg !2943
  %85 = extractvalue %"char[]" %84, 0, !dbg !2943
  %86 = load ptr, ptr %self, align 8, !dbg !2943
  %ptradd87 = getelementptr inbounds i8, ptr %86, i64 16, !dbg !2943
  %87 = load i64, ptr %ptradd87, align 8, !dbg !2943
  %88 = extractvalue %"char[]" %84, 1, !dbg !2943
  %gt88 = icmp ugt i64 %87, %88, !dbg !2943
  %89 = call i1 @llvm.expect.i1(i1 %gt88, i1 false), !dbg !2943
  br i1 %89, label %panic89, label %checkok99, !dbg !2943

checkok99:                                        ; preds = %if.exit84
  %size100 = sub i64 %88, %87, !dbg !2943
  %ptradd101 = getelementptr inbounds i8, ptr %85, i64 %87, !dbg !2943
  %90 = insertvalue %"char[]" undef, ptr %ptradd101, 0, !dbg !2943
  %91 = insertvalue %"char[]" %90, i64 %size100, 1, !dbg !2943
  %ptradd102 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !2943
  %92 = load i64, ptr %ptradd102, align 8, !dbg !2943
  %93 = inttoptr i64 %92 to ptr, !dbg !2943
  %type105 = load ptr, ptr %.cachedtype104, align 8, !dbg !2912
  %94 = icmp eq ptr %93, %type105, !dbg !2912
  br i1 %94, label %cache_hit108, label %cache_miss106, !dbg !2912

cache_miss106:                                    ; preds = %checkok99
  %ptradd107 = getelementptr inbounds i8, ptr %93, i64 16, !dbg !2912
  %95 = load ptr, ptr %ptradd107, align 8, !dbg !2912
  %96 = call ptr @.dyn_search(ptr %95, ptr @"$sel.read"), !dbg !2912
  store ptr %96, ptr %.inlinecache103, align 8, !dbg !2912
  store ptr %93, ptr %.cachedtype104, align 8, !dbg !2912
  br label %97, !dbg !2912

cache_hit108:                                     ; preds = %checkok99
  %cache_hit_fn109 = load ptr, ptr %.inlinecache103, align 8, !dbg !2912
  br label %97, !dbg !2912

97:                                               ; preds = %cache_hit108, %cache_miss106
  %fn_phi110 = phi ptr [ %cache_hit_fn109, %cache_hit108 ], [ %96, %cache_miss106 ], !dbg !2912
  %98 = icmp eq ptr %fn_phi110, null, !dbg !2912
  br i1 %98, label %missing_function111, label %match115, !dbg !2912

missing_function111:                              ; preds = %97
  store %"char[]" { ptr @.panic_msg.197, i64 41 }, ptr %indirectarg112, align 8
  store %"char[]" { ptr @.file.235, i64 13 }, ptr %indirectarg113, align 8
  store %"char[]" { ptr @.func.240, i64 9 }, ptr %indirectarg114, align 8
  %99 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %99(ptr align 8 %indirectarg112, ptr align 8 %indirectarg113, ptr align 8 %indirectarg114, i32 107) #5, !dbg !2943
  unreachable, !dbg !2943

match115:                                         ; preds = %97
  %100 = load ptr, ptr %2, align 8
  store %"char[]" %91, ptr %indirectarg117, align 8
  %101 = call i64 %fn_phi110(ptr %retparam116, ptr %100, ptr align 8 %indirectarg117), !dbg !2943
  %not_err118 = icmp eq i64 %101, 0, !dbg !2943
  %102 = call i1 @llvm.expect.i1(i1 %not_err118, i1 true), !dbg !2943
  br i1 %102, label %after_check120, label %assign_optional119, !dbg !2943

assign_optional119:                               ; preds = %match115
  store i64 %101, ptr %error_var86, align 8, !dbg !2943
  br label %guard_block121, !dbg !2943

after_check120:                                   ; preds = %match115
  br label %noerr_block122, !dbg !2943

guard_block121:                                   ; preds = %assign_optional119
  %103 = load i64, ptr %error_var86, align 8, !dbg !2943
  ret i64 %103, !dbg !2943

noerr_block122:                                   ; preds = %after_check120
  %104 = load i64, ptr %retparam116, align 8, !dbg !2943
  store i64 %104, ptr %read85, align 8, !dbg !2943
  %105 = load ptr, ptr %self, align 8, !dbg !2944
  %ptradd123 = getelementptr inbounds i8, ptr %105, i64 16, !dbg !2944
  %106 = load i64, ptr %ptradd123, align 8, !dbg !2944
  %107 = load i64, ptr %read85, align 8, !dbg !2944
  %add124 = add i64 %106, %107, !dbg !2944
  store i64 %add124, ptr %ptradd123, align 8, !dbg !2944
  %108 = load i64, ptr %read85, align 8, !dbg !2945
  %109 = load i64, ptr %len_to_read, align 8, !dbg !2945
  %lt = icmp ult i64 %108, %109, !dbg !2945
  br i1 %lt, label %if.then125, label %if.exit129, !dbg !2945

if.then125:                                       ; preds = %noerr_block122
  %110 = load ptr, ptr %self, align 8, !dbg !2945
  %ptradd127 = getelementptr inbounds i8, ptr %110, i64 16, !dbg !2945
  %111 = load i64, ptr %ptradd127, align 8, !dbg !2945
  %112 = load i64, ptr %start_index, align 8, !dbg !2945
  %sub128 = sub i64 %111, %112, !dbg !2945
  store i64 %sub128, ptr %0, align 8, !dbg !2945
  ret i64 0, !dbg !2945

if.exit129:                                       ; preds = %noerr_block122
  br label %loop.body68, !dbg !2945

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.235, i64 13 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.240, i64 9 }, ptr %indirectarg2, align 8
  %113 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %113(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 79) #5, !dbg !2914
  unreachable, !dbg !2914

panic26:                                          ; preds = %noerr_block23
  store i64 %39, ptr %taddr, align 8
  %114 = insertvalue %any undef, ptr %taddr, 0
  %115 = insertvalue %any %114, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %38, ptr %taddr27, align 8
  %116 = insertvalue %any undef, ptr %taddr27, 0
  %117 = insertvalue %any %116, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.170, i64 61 }, ptr %indirectarg28, align 8
  store %"char[]" { ptr @.file.235, i64 13 }, ptr %indirectarg29, align 8
  store %"char[]" { ptr @.func.240, i64 9 }, ptr %indirectarg30, align 8
  store %any %115, ptr %varargslots, align 16
  %ptradd31 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %117, ptr %ptradd31, align 16
  %118 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %118, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg32, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg28, ptr align 8 %indirectarg29, ptr align 8 %indirectarg30, i32 87, ptr align 8 %indirectarg32) #5, !dbg !2927
  unreachable, !dbg !2927

panic89:                                          ; preds = %if.exit84
  store i64 %88, ptr %taddr90, align 8
  %119 = insertvalue %any undef, ptr %taddr90, 0
  %120 = insertvalue %any %119, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %87, ptr %taddr91, align 8
  %121 = insertvalue %any undef, ptr %taddr91, 0
  %122 = insertvalue %any %121, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.170, i64 61 }, ptr %indirectarg92, align 8
  store %"char[]" { ptr @.file.235, i64 13 }, ptr %indirectarg93, align 8
  store %"char[]" { ptr @.func.240, i64 9 }, ptr %indirectarg94, align 8
  store %any %120, ptr %varargslots95, align 16
  %ptradd96 = getelementptr inbounds i8, ptr %varargslots95, i64 16
  store %any %122, ptr %ptradd96, align 16
  %123 = insertvalue %"any[]" undef, ptr %varargslots95, 0
  %"$$temp97" = insertvalue %"any[]" %123, i64 2, 1
  store %"any[]" %"$$temp97", ptr %indirectarg98, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg92, ptr align 8 %indirectarg93, ptr align 8 %indirectarg94, i32 107, ptr align 8 %indirectarg98) #5, !dbg !2943
  unreachable, !dbg !2943
}

; Function Attrs: nounwind ssp uwtable
define weak_odr ptr @std.io.LimitReader.init(ptr %0, ptr align 8 %1, i64 %2) #0 comdat !dbg !2946 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %limit = alloca i64, align 8
  %.assign_list = alloca %LimitReader, align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr9 = alloca i64, align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg14 = alloca %"any[]", align 8
  %3 = icmp eq ptr %0, null, !dbg !2955
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !2955
  br i1 %4, label %panic, label %checkok, !dbg !2955

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2956, !DIExpression(), !2957)
    #dbg_declare(ptr %1, !2958, !DIExpression(), !2957)
  store i64 %2, ptr %limit, align 8
    #dbg_declare(ptr %limit, !2959, !DIExpression(), !2957)
  call void @llvm.memset.p0.i64(ptr align 8 %.assign_list, i8 0, i64 24, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %.assign_list, ptr align 8 %1, i32 16, i1 false), !dbg !2960
  %ptradd = getelementptr inbounds i8, ptr %.assign_list, i64 16, !dbg !2960
  %5 = load i64, ptr %limit, align 8, !dbg !2960
  store i64 %5, ptr %ptradd, align 8, !dbg !2960
  %6 = load ptr, ptr %self, align 8, !dbg !2960
  %checknull = icmp eq ptr %6, null, !dbg !2960
  %7 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !2960
  br i1 %7, label %panic3, label %checkok7, !dbg !2960

checkok7:                                         ; preds = %checkok
  %8 = ptrtoint ptr %6 to i64, !dbg !2960
  %9 = urem i64 %8, 8, !dbg !2960
  %10 = icmp ne i64 %9, 0, !dbg !2960
  %11 = call i1 @llvm.expect.i1(i1 %10, i1 false), !dbg !2960
  br i1 %11, label %panic8, label %checkok15, !dbg !2960

checkok15:                                        ; preds = %checkok7
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %6, ptr align 8 %.assign_list, i32 24, i1 false), !dbg !2960
  %12 = load ptr, ptr %self, align 8, !dbg !2961
  ret ptr %12, !dbg !2961

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.242, i64 14 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg2, align 8
  %13 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %13(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 13) #5, !dbg !2957
  unreachable, !dbg !2957

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.2, i64 45 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.242, i64 14 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg6, align 8
  %14 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %14(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 15) #5, !dbg !2960
  unreachable, !dbg !2960

panic8:                                           ; preds = %checkok7
  store i64 8, ptr %taddr, align 8
  %15 = insertvalue %any undef, ptr %taddr, 0
  %16 = insertvalue %any %15, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %9, ptr %taddr9, align 8
  %17 = insertvalue %any undef, ptr %taddr9, 0
  %18 = insertvalue %any %17, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.file.242, i64 14 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg12, align 8
  store %any %16, ptr %varargslots, align 16
  %ptradd13 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %18, ptr %ptradd13, align 16
  %19 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %19, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg14, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, i32 15, ptr align 8 %indirectarg14) #5, !dbg !2960
  unreachable, !dbg !2960
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.LimitReader.close(ptr %0) #0 comdat !dbg !2962 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %reterr = alloca i64, align 8
  %.inlinecache4 = alloca ptr, align 8
  %.cachedtype5 = alloca ptr, align 8
  %indirectarg12 = alloca %"char[]", align 8
  %indirectarg13 = alloca %"char[]", align 8
  %indirectarg14 = alloca %"char[]", align 8
  store ptr null, ptr %.cachedtype5, align 8, !dbg !2965
  store ptr null, ptr %.cachedtype, align 8, !dbg !2965
  %1 = icmp eq ptr %0, null, !dbg !2965
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2965
  br i1 %2, label %panic, label %checkok, !dbg !2965

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2966, !DIExpression(), !2967)
  %3 = load ptr, ptr %self, align 8, !dbg !2968
  %4 = load %any, ptr %3, align 8, !dbg !2968
  %5 = extractvalue %any %4, 1, !dbg !2968
  %6 = inttoptr i64 %5 to ptr, !dbg !2968
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !2965
  %7 = icmp eq ptr %6, %type, !dbg !2965
  br i1 %7, label %cache_hit, label %cache_miss, !dbg !2965

cache_miss:                                       ; preds = %checkok
  %ptradd = getelementptr inbounds i8, ptr %6, i64 16, !dbg !2965
  %8 = load ptr, ptr %ptradd, align 8, !dbg !2965
  %9 = call ptr @.dyn_search(ptr %8, ptr @"$sel.close"), !dbg !2965
  store ptr %9, ptr %.inlinecache, align 8, !dbg !2965
  store ptr %6, ptr %.cachedtype, align 8, !dbg !2965
  br label %10, !dbg !2965

cache_hit:                                        ; preds = %checkok
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !2965
  br label %10, !dbg !2965

10:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %9, %cache_miss ], !dbg !2965
  %i2b = icmp ne ptr %fn_phi, null, !dbg !2965
  br i1 %i2b, label %if.then, label %if.exit, !dbg !2965

if.then:                                          ; preds = %10
  %11 = load ptr, ptr %self, align 8, !dbg !2968
  %ptradd3 = getelementptr inbounds i8, ptr %11, i64 8, !dbg !2968
  %12 = load i64, ptr %ptradd3, align 8, !dbg !2968
  %13 = inttoptr i64 %12 to ptr, !dbg !2968
  %type6 = load ptr, ptr %.cachedtype5, align 8, !dbg !2965
  %14 = icmp eq ptr %13, %type6, !dbg !2965
  br i1 %14, label %cache_hit9, label %cache_miss7, !dbg !2965

cache_miss7:                                      ; preds = %if.then
  %ptradd8 = getelementptr inbounds i8, ptr %13, i64 16, !dbg !2965
  %15 = load ptr, ptr %ptradd8, align 8, !dbg !2965
  %16 = call ptr @.dyn_search(ptr %15, ptr @"$sel.close"), !dbg !2965
  store ptr %16, ptr %.inlinecache4, align 8, !dbg !2965
  store ptr %13, ptr %.cachedtype5, align 8, !dbg !2965
  br label %17, !dbg !2965

cache_hit9:                                       ; preds = %if.then
  %cache_hit_fn10 = load ptr, ptr %.inlinecache4, align 8, !dbg !2965
  br label %17, !dbg !2965

17:                                               ; preds = %cache_hit9, %cache_miss7
  %fn_phi11 = phi ptr [ %cache_hit_fn10, %cache_hit9 ], [ %16, %cache_miss7 ], !dbg !2965
  %18 = icmp eq ptr %fn_phi11, null, !dbg !2965
  br i1 %18, label %missing_function, label %match, !dbg !2965

missing_function:                                 ; preds = %17
  store %"char[]" { ptr @.panic_msg.195, i64 42 }, ptr %indirectarg12, align 8
  store %"char[]" { ptr @.file.242, i64 14 }, ptr %indirectarg13, align 8
  store %"char[]" { ptr @.func.194, i64 5 }, ptr %indirectarg14, align 8
  %19 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %19(ptr align 8 %indirectarg12, ptr align 8 %indirectarg13, ptr align 8 %indirectarg14, i32 21) #5, !dbg !2968
  unreachable, !dbg !2968

match:                                            ; preds = %17
  %20 = load ptr, ptr %11, align 8, !dbg !2968
  %21 = call i64 %fn_phi11(ptr %20), !dbg !2968
  %not_err = icmp eq i64 %21, 0, !dbg !2968
  %22 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !2968
  br i1 %22, label %after_check, label %assign_optional, !dbg !2968

assign_optional:                                  ; preds = %match
  store i64 %21, ptr %reterr, align 8, !dbg !2968
  br label %err_retblock, !dbg !2968

after_check:                                      ; preds = %match
  ret i64 0, !dbg !2968

err_retblock:                                     ; preds = %assign_optional
  %23 = load i64, ptr %reterr, align 8, !dbg !2968
  ret i64 %23, !dbg !2968

if.exit:                                          ; preds = %10
  ret i64 0, !dbg !2968

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.242, i64 14 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.194, i64 5 }, ptr %indirectarg2, align 8
  %24 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %24(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 19) #5, !dbg !2967
  unreachable, !dbg !2967
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.LimitReader.read(ptr %0, ptr %1, ptr align 8 %2) #0 comdat !dbg !2969 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %m = alloca i64, align 8
  %x = alloca i64, align 8
  %.anon = alloca i64, align 8
  %a = alloca i64, align 8
  %b = alloca i64, align 8
  %n = alloca i64, align 8
  %error_var = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr6 = alloca i64, align 8
  %indirectarg7 = alloca %"char[]", align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg11 = alloca %"any[]", align 8
  %taddr15 = alloca i64, align 8
  %indirectarg16 = alloca %"char[]", align 8
  %indirectarg17 = alloca %"char[]", align 8
  %indirectarg18 = alloca %"char[]", align 8
  %varargslots19 = alloca [1 x %any], align 16
  %indirectarg21 = alloca %"any[]", align 8
  %taddr26 = alloca i64, align 8
  %taddr27 = alloca i64, align 8
  %indirectarg28 = alloca %"char[]", align 8
  %indirectarg29 = alloca %"char[]", align 8
  %indirectarg30 = alloca %"char[]", align 8
  %varargslots31 = alloca [2 x %any], align 16
  %indirectarg34 = alloca %"any[]", align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %indirectarg38 = alloca %"char[]", align 8
  %indirectarg39 = alloca %"char[]", align 8
  %indirectarg40 = alloca %"char[]", align 8
  %retparam = alloca i64, align 8
  %indirectarg41 = alloca %"char[]", align 8
  %reterr = alloca i64, align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !2972
  %3 = icmp eq ptr %1, null, !dbg !2972
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !2972
  br i1 %4, label %panic, label %checkok, !dbg !2972

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !2973, !DIExpression(), !2974)
    #dbg_declare(ptr %2, !2975, !DIExpression(), !2974)
  %5 = load ptr, ptr %self, align 8, !dbg !2976
  %ptradd = getelementptr inbounds i8, ptr %5, i64 16, !dbg !2976
  %6 = load i64, ptr %ptradd, align 8, !dbg !2976
  %eq = icmp eq i64 0, %6, !dbg !2976
  br i1 %eq, label %if.then, label %if.exit, !dbg !2976

if.then:                                          ; preds = %checkok
  ret i64 ptrtoint (ptr @std.io.EOF to i64), !dbg !2976

if.exit:                                          ; preds = %checkok
    #dbg_declare(ptr %m, !2977, !DIExpression(), !2978)
  %ptradd3 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !2978
  %7 = load i64, ptr %ptradd3, align 8
  store i64 %7, ptr %x, align 8
  %8 = load ptr, ptr %self, align 8, !dbg !2978
  %ptradd4 = getelementptr inbounds i8, ptr %8, i64 16, !dbg !2978
  %9 = load i64, ptr %ptradd4, align 8
  store i64 %9, ptr %.anon, align 8
  %10 = load i64, ptr %x, align 8
  store i64 %10, ptr %a, align 8
  %11 = load i64, ptr %.anon, align 8
  store i64 %11, ptr %b, align 8
  %12 = load i64, ptr %a, align 8, !dbg !2979
  %13 = load i64, ptr %b, align 8, !dbg !2979
  %lt = icmp ult i64 %12, %13, !dbg !2979
  br i1 %lt, label %cond.lhs, label %cond.rhs, !dbg !2979

cond.lhs:                                         ; preds = %if.exit
  %14 = load i64, ptr %x, align 8, !dbg !2981
  br label %cond.phi, !dbg !2981

cond.rhs:                                         ; preds = %if.exit
  %15 = load i64, ptr %.anon, align 8, !dbg !2981
  br label %cond.phi, !dbg !2981

cond.phi:                                         ; preds = %cond.rhs, %cond.lhs
  %val = phi i64 [ %14, %cond.lhs ], [ %15, %cond.rhs ], !dbg !2981
  store i64 %val, ptr %m, align 8, !dbg !2981
    #dbg_declare(ptr %n, !2983, !DIExpression(), !2984)
  %16 = load ptr, ptr %self, align 8, !dbg !2984
  %17 = load %"char[]", ptr %2, align 8, !dbg !2984
  %18 = extractvalue %"char[]" %17, 0, !dbg !2984
  %19 = extractvalue %"char[]" %17, 1, !dbg !2984
  %gt = icmp ugt i64 0, %19, !dbg !2984
  %20 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !2984
  br i1 %20, label %panic5, label %checkok12, !dbg !2984

checkok12:                                        ; preds = %cond.phi
  %21 = load i64, ptr %m, align 8, !dbg !2984
  %add = add i64 0, %21, !dbg !2984
  %gt13 = icmp ugt i64 0, %add, !dbg !2984
  %sub = sub i64 %add, 0, !dbg !2984
  %22 = call i1 @llvm.expect.i1(i1 %gt13, i1 false), !dbg !2984
  br i1 %22, label %panic14, label %checkok22, !dbg !2984

checkok22:                                        ; preds = %checkok12
  %lt23 = icmp ult i64 %19, %add, !dbg !2984
  %sub24 = sub i64 %add, 1, !dbg !2984
  %23 = call i1 @llvm.expect.i1(i1 %lt23, i1 false), !dbg !2984
  br i1 %23, label %panic25, label %checkok35, !dbg !2984

checkok35:                                        ; preds = %checkok22
  %size = sub i64 %add, 0, !dbg !2984
  %24 = insertvalue %"char[]" undef, ptr %18, 0, !dbg !2984
  %25 = insertvalue %"char[]" %24, i64 %size, 1, !dbg !2984
  %ptradd36 = getelementptr inbounds i8, ptr %16, i64 8, !dbg !2984
  %26 = load i64, ptr %ptradd36, align 8, !dbg !2984
  %27 = inttoptr i64 %26 to ptr, !dbg !2984
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !2972
  %28 = icmp eq ptr %27, %type, !dbg !2972
  br i1 %28, label %cache_hit, label %cache_miss, !dbg !2972

cache_miss:                                       ; preds = %checkok35
  %ptradd37 = getelementptr inbounds i8, ptr %27, i64 16, !dbg !2972
  %29 = load ptr, ptr %ptradd37, align 8, !dbg !2972
  %30 = call ptr @.dyn_search(ptr %29, ptr @"$sel.read"), !dbg !2972
  store ptr %30, ptr %.inlinecache, align 8, !dbg !2972
  store ptr %27, ptr %.cachedtype, align 8, !dbg !2972
  br label %31, !dbg !2972

cache_hit:                                        ; preds = %checkok35
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !2972
  br label %31, !dbg !2972

31:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %30, %cache_miss ], !dbg !2972
  %32 = icmp eq ptr %fn_phi, null, !dbg !2972
  br i1 %32, label %missing_function, label %match, !dbg !2972

missing_function:                                 ; preds = %31
  store %"char[]" { ptr @.panic_msg.197, i64 41 }, ptr %indirectarg38, align 8
  store %"char[]" { ptr @.file.242, i64 14 }, ptr %indirectarg39, align 8
  store %"char[]" { ptr @.func.196, i64 4 }, ptr %indirectarg40, align 8
  %33 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %33(ptr align 8 %indirectarg38, ptr align 8 %indirectarg39, ptr align 8 %indirectarg40, i32 29) #5, !dbg !2984
  unreachable, !dbg !2984

match:                                            ; preds = %31
  %34 = load ptr, ptr %16, align 8
  store %"char[]" %25, ptr %indirectarg41, align 8
  %35 = call i64 %fn_phi(ptr %retparam, ptr %34, ptr align 8 %indirectarg41), !dbg !2984
  %not_err = icmp eq i64 %35, 0, !dbg !2984
  %36 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !2984
  br i1 %36, label %after_check, label %assign_optional, !dbg !2984

assign_optional:                                  ; preds = %match
  store i64 %35, ptr %error_var, align 8, !dbg !2984
  br label %guard_block, !dbg !2984

after_check:                                      ; preds = %match
  br label %noerr_block, !dbg !2984

guard_block:                                      ; preds = %assign_optional
  %37 = load i64, ptr %error_var, align 8, !dbg !2984
  ret i64 %37, !dbg !2984

noerr_block:                                      ; preds = %after_check
  %38 = load i64, ptr %retparam, align 8, !dbg !2984
  store i64 %38, ptr %n, align 8, !dbg !2984
  %39 = load ptr, ptr %self, align 8, !dbg !2985
  %ptradd42 = getelementptr inbounds i8, ptr %39, i64 16, !dbg !2985
  %40 = load i64, ptr %ptradd42, align 8, !dbg !2985
  %41 = load i64, ptr %n, align 8, !dbg !2985
  %sub43 = sub i64 %40, %41, !dbg !2985
  store i64 %sub43, ptr %ptradd42, align 8, !dbg !2985
  %42 = load i64, ptr %n, align 8, !dbg !2986
  store i64 %42, ptr %0, align 8, !dbg !2986
  ret i64 0, !dbg !2986

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.242, i64 14 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.196, i64 4 }, ptr %indirectarg2, align 8
  %43 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %43(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 25) #5, !dbg !2974
  unreachable, !dbg !2974

panic5:                                           ; preds = %cond.phi
  store i64 %19, ptr %taddr, align 8
  %44 = insertvalue %any undef, ptr %taddr, 0
  %45 = insertvalue %any %44, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr6, align 8
  %46 = insertvalue %any undef, ptr %taddr6, 0
  %47 = insertvalue %any %46, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.170, i64 61 }, ptr %indirectarg7, align 8
  store %"char[]" { ptr @.file.242, i64 14 }, ptr %indirectarg8, align 8
  store %"char[]" { ptr @.func.196, i64 4 }, ptr %indirectarg9, align 8
  store %any %45, ptr %varargslots, align 16
  %ptradd10 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %47, ptr %ptradd10, align 16
  %48 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %48, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg11, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg7, ptr align 8 %indirectarg8, ptr align 8 %indirectarg9, i32 29, ptr align 8 %indirectarg11) #5, !dbg !2984
  unreachable, !dbg !2984

panic14:                                          ; preds = %checkok12
  store i64 %sub, ptr %taddr15, align 8
  %49 = insertvalue %any undef, ptr %taddr15, 0
  %50 = insertvalue %any %49, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.16, i64 43 }, ptr %indirectarg16, align 8
  store %"char[]" { ptr @.file.242, i64 14 }, ptr %indirectarg17, align 8
  store %"char[]" { ptr @.func.196, i64 4 }, ptr %indirectarg18, align 8
  store %any %50, ptr %varargslots19, align 16
  %51 = insertvalue %"any[]" undef, ptr %varargslots19, 0
  %"$$temp20" = insertvalue %"any[]" %51, i64 1, 1
  store %"any[]" %"$$temp20", ptr %indirectarg21, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg16, ptr align 8 %indirectarg17, ptr align 8 %indirectarg18, i32 29, ptr align 8 %indirectarg21) #5, !dbg !2984
  unreachable, !dbg !2984

panic25:                                          ; preds = %checkok22
  store i64 %sub24, ptr %taddr26, align 8
  %52 = insertvalue %any undef, ptr %taddr26, 0
  %53 = insertvalue %any %52, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %19, ptr %taddr27, align 8
  %54 = insertvalue %any undef, ptr %taddr27, 0
  %55 = insertvalue %any %54, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 60 }, ptr %indirectarg28, align 8
  store %"char[]" { ptr @.file.242, i64 14 }, ptr %indirectarg29, align 8
  store %"char[]" { ptr @.func.196, i64 4 }, ptr %indirectarg30, align 8
  store %any %53, ptr %varargslots31, align 16
  %ptradd32 = getelementptr inbounds i8, ptr %varargslots31, i64 16
  store %any %55, ptr %ptradd32, align 16
  %56 = insertvalue %"any[]" undef, ptr %varargslots31, 0
  %"$$temp33" = insertvalue %"any[]" %56, i64 2, 1
  store %"any[]" %"$$temp33", ptr %indirectarg34, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg28, ptr align 8 %indirectarg29, ptr align 8 %indirectarg30, i32 29, ptr align 8 %indirectarg34) #5, !dbg !2984
  unreachable, !dbg !2984
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.LimitReader.read_byte(ptr %0, ptr %1) #0 comdat !dbg !2987 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %reterr = alloca i64, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg7 = alloca %"char[]", align 8
  %retparam = alloca i8, align 1
  store ptr null, ptr %.cachedtype, align 8, !dbg !2990
  %2 = icmp eq ptr %1, null, !dbg !2990
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !2990
  br i1 %3, label %panic, label %checkok, !dbg !2990

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !2991, !DIExpression(), !2992)
  %4 = load ptr, ptr %self, align 8, !dbg !2993
  %ptradd = getelementptr inbounds i8, ptr %4, i64 16, !dbg !2993
  %5 = load i64, ptr %ptradd, align 8, !dbg !2993
  %eq = icmp eq i64 0, %5, !dbg !2993
  br i1 %eq, label %if.then, label %if.exit, !dbg !2993

if.then:                                          ; preds = %checkok
  ret i64 ptrtoint (ptr @std.io.EOF to i64), !dbg !2993

if.exit:                                          ; preds = %checkok
  %6 = load ptr, ptr %self, align 8, !dbg !2994
  %ptradd3 = getelementptr inbounds i8, ptr %6, i64 8, !dbg !2994
  %7 = load i64, ptr %ptradd3, align 8, !dbg !2994
  %8 = inttoptr i64 %7 to ptr, !dbg !2994
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !2990
  %9 = icmp eq ptr %8, %type, !dbg !2990
  br i1 %9, label %cache_hit, label %cache_miss, !dbg !2990

cache_miss:                                       ; preds = %if.exit
  %ptradd4 = getelementptr inbounds i8, ptr %8, i64 16, !dbg !2990
  %10 = load ptr, ptr %ptradd4, align 8, !dbg !2990
  %11 = call ptr @.dyn_search(ptr %10, ptr @"$sel.read_byte"), !dbg !2990
  store ptr %11, ptr %.inlinecache, align 8, !dbg !2990
  store ptr %8, ptr %.cachedtype, align 8, !dbg !2990
  br label %12, !dbg !2990

cache_hit:                                        ; preds = %if.exit
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !2990
  br label %12, !dbg !2990

12:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %11, %cache_miss ], !dbg !2990
  %13 = icmp eq ptr %fn_phi, null, !dbg !2990
  br i1 %13, label %missing_function, label %match, !dbg !2990

missing_function:                                 ; preds = %12
  store %"char[]" { ptr @.panic_msg.8, i64 46 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.file.242, i64 14 }, ptr %indirectarg6, align 8
  store %"char[]" { ptr @.func.199, i64 9 }, ptr %indirectarg7, align 8
  %14 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %14(ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, ptr align 8 %indirectarg7, i32 38) #5, !dbg !2994
  unreachable, !dbg !2994

match:                                            ; preds = %12
  %15 = load ptr, ptr %6, align 8
  %16 = call i64 %fn_phi(ptr %retparam, ptr %15), !dbg !2994
  %not_err = icmp eq i64 %16, 0, !dbg !2994
  %17 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !2994
  br i1 %17, label %after_check, label %assign_optional, !dbg !2994

assign_optional:                                  ; preds = %match
  store i64 %16, ptr %reterr, align 8, !dbg !2994
  br label %err_retblock, !dbg !2994

after_check:                                      ; preds = %match
  %18 = load i8, ptr %retparam, align 1, !dbg !2994
  %19 = load ptr, ptr %self, align 8, !dbg !2995
  %ptradd8 = getelementptr inbounds i8, ptr %19, i64 16, !dbg !2995
  %20 = load i64, ptr %ptradd8, align 8, !dbg !2995
  %sub = sub i64 %20, 1, !dbg !2995
  store i64 %sub, ptr %ptradd8, align 8, !dbg !2995
  store i8 %18, ptr %0, align 1, !dbg !2995
  ret i64 0, !dbg !2995

err_retblock:                                     ; preds = %assign_optional
  %21 = load i64, ptr %reterr, align 8, !dbg !2995
  ret i64 %21, !dbg !2995

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.242, i64 14 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.199, i64 9 }, ptr %indirectarg2, align 8
  %22 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %22(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 34) #5, !dbg !2992
  unreachable, !dbg !2992
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.LimitReader.available(ptr %0, ptr %1) #0 comdat !dbg !2997 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %reterr = alloca i64, align 8
  %2 = icmp eq ptr %1, null, !dbg !3000
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !3000
  br i1 %3, label %panic, label %checkok, !dbg !3000

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !3001, !DIExpression(), !3002)
  %4 = load ptr, ptr %self, align 8, !dbg !3003
  %ptradd = getelementptr inbounds i8, ptr %4, i64 16, !dbg !3003
  %5 = load i64, ptr %ptradd, align 8, !dbg !3003
  store i64 %5, ptr %0, align 8, !dbg !3003
  ret i64 0, !dbg !3003

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.242, i64 14 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.218, i64 9 }, ptr %indirectarg2, align 8
  %6 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %6(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 41) #5, !dbg !3002
  unreachable, !dbg !3002
}

; Function Attrs: nounwind ssp uwtable
define weak_odr ptr @std.io.MultiReader.init(ptr %0, ptr align 8 %1, ptr align 8 %2) #0 comdat !dbg !3004 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %copy = alloca %"any[]", align 8
  %allocator = alloca %any, align 8
  %elements = alloca i64, align 8
  %error_var = alloca i64, align 8
  %allocator7 = alloca %any, align 8
  %elements8 = alloca i64, align 8
  %allocator9 = alloca %any, align 8
  %size = alloca i64, align 8
  %blockret = alloca ptr, align 8
  %x = alloca i64, align 8
  %indirectarg13 = alloca %"char[]", align 8
  %indirectarg14 = alloca %"char[]", align 8
  %indirectarg15 = alloca %"char[]", align 8
  %indirectarg18 = alloca %"char[]", align 8
  %indirectarg19 = alloca %"char[]", align 8
  %indirectarg20 = alloca %"char[]", align 8
  %indirectarg23 = alloca %"char[]", align 8
  %indirectarg24 = alloca %"char[]", align 8
  %indirectarg25 = alloca %"char[]", align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %indirectarg29 = alloca %"char[]", align 8
  %indirectarg30 = alloca %"char[]", align 8
  %indirectarg31 = alloca %"char[]", align 8
  %retparam = alloca ptr, align 8
  %taddr = alloca ptr, align 8
  %taddr34 = alloca i64, align 8
  %indirectarg35 = alloca %"char[]", align 8
  %indirectarg36 = alloca %"char[]", align 8
  %indirectarg37 = alloca %"char[]", align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg38 = alloca %"any[]", align 8
  %indirectarg41 = alloca %"char[]", align 8
  %indirectarg42 = alloca %"char[]", align 8
  %indirectarg43 = alloca %"char[]", align 8
  %varargslots44 = alloca [1 x %any], align 16
  %indirectarg46 = alloca %"any[]", align 8
  %taddr49 = alloca i64, align 8
  %taddr50 = alloca i64, align 8
  %indirectarg51 = alloca %"char[]", align 8
  %indirectarg52 = alloca %"char[]", align 8
  %indirectarg53 = alloca %"char[]", align 8
  %varargslots54 = alloca [2 x %any], align 16
  %indirectarg57 = alloca %"any[]", align 8
  %taddr62 = alloca i64, align 8
  %taddr63 = alloca i64, align 8
  %indirectarg64 = alloca %"char[]", align 8
  %indirectarg65 = alloca %"char[]", align 8
  %indirectarg66 = alloca %"char[]", align 8
  %varargslots67 = alloca [2 x %any], align 16
  %indirectarg70 = alloca %"any[]", align 8
  %taddr75 = alloca i64, align 8
  %taddr76 = alloca i64, align 8
  %indirectarg77 = alloca %"char[]", align 8
  %indirectarg78 = alloca %"char[]", align 8
  %indirectarg79 = alloca %"char[]", align 8
  %varargslots80 = alloca [2 x %any], align 16
  %indirectarg83 = alloca %"any[]", align 8
  %.assign_list = alloca %MultiReader, align 8
  %indirectarg87 = alloca %"char[]", align 8
  %indirectarg88 = alloca %"char[]", align 8
  %indirectarg89 = alloca %"char[]", align 8
  %taddr92 = alloca i64, align 8
  %taddr93 = alloca i64, align 8
  %indirectarg94 = alloca %"char[]", align 8
  %indirectarg95 = alloca %"char[]", align 8
  %indirectarg96 = alloca %"char[]", align 8
  %varargslots97 = alloca [2 x %any], align 16
  %indirectarg100 = alloca %"any[]", align 8
  %indirectarg105 = alloca %"char[]", align 8
  %indirectarg106 = alloca %"char[]", align 8
  %indirectarg107 = alloca %"char[]", align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !3019
  %3 = icmp eq ptr %0, null, !dbg !3019
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !3019
  br i1 %4, label %panic, label %checkok, !dbg !3019

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !3020, !DIExpression(), !3021)
    #dbg_declare(ptr %1, !3022, !DIExpression(), !3021)
    #dbg_declare(ptr %2, !3023, !DIExpression(), !3021)
  %5 = load ptr, ptr %self, align 8, !dbg !3024
  %ptradd = getelementptr inbounds i8, ptr %5, i64 8, !dbg !3024
  %6 = load i64, ptr %ptradd, align 8, !dbg !3024
  %eq = icmp eq i64 0, %6, !dbg !3024
  br i1 %eq, label %assert_ok, label %assert_fail, !dbg !3024

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.244, i64 90 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.file.243, i64 14 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg5, align 8
  %7 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %7(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, i32 18) #5, !dbg !3024
  unreachable, !dbg !3024

assert_ok:                                        ; preds = %checkok
    #dbg_declare(ptr %copy, !3026, !DIExpression(), !3027)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator, ptr align 8 %1, i32 16, i1 false)
  %ptradd6 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !3027
  %8 = load i64, ptr %ptradd6, align 8
  store i64 %8, ptr %elements, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator7, ptr align 8 %allocator, i32 16, i1 false)
  %9 = load i64, ptr %elements, align 8
  store i64 %9, ptr %elements8, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator9, ptr align 8 %allocator7, i32 16, i1 false)
  %10 = load i64, ptr %elements8, align 8, !dbg !3028
  %mul = mul i64 16, %10, !dbg !3028
  store i64 %mul, ptr %size, align 8
  %11 = load i64, ptr %size, align 8, !dbg !3032
  %i2nb = icmp eq i64 %11, 0, !dbg !3032
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !3032

if.then:                                          ; preds = %assert_ok
  store ptr null, ptr %blockret, align 8, !dbg !3032
  br label %expr_block.exit, !dbg !3032

if.exit:                                          ; preds = %assert_ok
  %12 = load i64, ptr %size, align 8, !dbg !3034
  br i1 true, label %or.phi, label %or.rhs, !dbg !3035

or.rhs:                                           ; preds = %if.exit
  store i64 0, ptr %x, align 8
  %13 = load i64, ptr %x, align 8, !dbg !3036
  %neq = icmp ne i64 0, %13, !dbg !3036
  br i1 %neq, label %and.rhs, label %and.phi, !dbg !3036

and.rhs:                                          ; preds = %or.rhs
  %14 = load i64, ptr %x, align 8, !dbg !3036
  %15 = load i64, ptr %x, align 8, !dbg !3036
  %sub = sub i64 %15, 1, !dbg !3036
  %and = and i64 %14, %sub, !dbg !3036
  %eq10 = icmp eq i64 %and, 0, !dbg !3036
  br label %and.phi, !dbg !3036

and.phi:                                          ; preds = %and.rhs, %or.rhs
  %val = phi i1 [ false, %or.rhs ], [ %eq10, %and.rhs ], !dbg !3036
  br label %or.phi, !dbg !3036

or.phi:                                           ; preds = %and.phi, %if.exit
  %val11 = phi i1 [ true, %if.exit ], [ %val, %and.phi ], !dbg !3036
  br i1 %val11, label %assert_ok16, label %assert_fail12, !dbg !3036

assert_fail12:                                    ; preds = %or.phi
  store %"char[]" { ptr @.panic_msg.220, i64 65 }, ptr %indirectarg13, align 8
  store %"char[]" { ptr @.file.212, i64 16 }, ptr %indirectarg14, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg15, align 8
  %16 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %16(ptr align 8 %indirectarg13, ptr align 8 %indirectarg14, ptr align 8 %indirectarg15, i32 98) #5, !dbg !3034
  unreachable, !dbg !3034

assert_ok16:                                      ; preds = %or.phi
  br i1 true, label %assert_ok21, label %assert_fail17, !dbg !3034

assert_fail17:                                    ; preds = %assert_ok16
  store %"char[]" { ptr @.panic_msg.221, i64 80 }, ptr %indirectarg18, align 8
  store %"char[]" { ptr @.file.212, i64 16 }, ptr %indirectarg19, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg20, align 8
  %17 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %17(ptr align 8 %indirectarg18, ptr align 8 %indirectarg19, ptr align 8 %indirectarg20, i32 98) #5, !dbg !3034
  unreachable, !dbg !3034

assert_ok21:                                      ; preds = %assert_ok16
  %lt = icmp ult i64 0, %12, !dbg !3034
  br i1 %lt, label %assert_ok26, label %assert_fail22, !dbg !3034

assert_fail22:                                    ; preds = %assert_ok21
  store %"char[]" { ptr @.panic_msg.222, i64 59 }, ptr %indirectarg23, align 8
  store %"char[]" { ptr @.file.212, i64 16 }, ptr %indirectarg24, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg25, align 8
  %18 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %18(ptr align 8 %indirectarg23, ptr align 8 %indirectarg24, ptr align 8 %indirectarg25, i32 98) #5, !dbg !3034
  unreachable, !dbg !3034

assert_ok26:                                      ; preds = %assert_ok21
  %ptradd27 = getelementptr inbounds i8, ptr %allocator9, i64 8, !dbg !3034
  %19 = load i64, ptr %ptradd27, align 8, !dbg !3034
  %20 = inttoptr i64 %19 to ptr, !dbg !3034
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !3019
  %21 = icmp eq ptr %20, %type, !dbg !3019
  br i1 %21, label %cache_hit, label %cache_miss, !dbg !3019

cache_miss:                                       ; preds = %assert_ok26
  %ptradd28 = getelementptr inbounds i8, ptr %20, i64 16, !dbg !3019
  %22 = load ptr, ptr %ptradd28, align 8, !dbg !3019
  %23 = call ptr @.dyn_search(ptr %22, ptr @"$sel.acquire"), !dbg !3019
  store ptr %23, ptr %.inlinecache, align 8, !dbg !3019
  store ptr %20, ptr %.cachedtype, align 8, !dbg !3019
  br label %24, !dbg !3019

cache_hit:                                        ; preds = %assert_ok26
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !3019
  br label %24, !dbg !3019

24:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %23, %cache_miss ], !dbg !3019
  %25 = icmp eq ptr %fn_phi, null, !dbg !3019
  br i1 %25, label %missing_function, label %match, !dbg !3019

missing_function:                                 ; preds = %24
  store %"char[]" { ptr @.panic_msg.223, i64 44 }, ptr %indirectarg29, align 8
  store %"char[]" { ptr @.file.212, i64 16 }, ptr %indirectarg30, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg31, align 8
  %26 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %26(ptr align 8 %indirectarg29, ptr align 8 %indirectarg30, ptr align 8 %indirectarg31, i32 98) #5, !dbg !3034
  unreachable, !dbg !3034

match:                                            ; preds = %24
  %27 = load ptr, ptr %allocator9, align 8
  %28 = call i64 %fn_phi(ptr %retparam, ptr %27, i64 %12, i32 1, i64 0), !dbg !3034
  %not_err = icmp eq i64 %28, 0, !dbg !3034
  %29 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !3034
  br i1 %29, label %after_check, label %assign_optional, !dbg !3034

assign_optional:                                  ; preds = %match
  store i64 %28, ptr %error_var, align 8, !dbg !3034
  br label %panic_block, !dbg !3034

after_check:                                      ; preds = %match
  %30 = load ptr, ptr %retparam, align 8, !dbg !3034
  store ptr %30, ptr %blockret, align 8, !dbg !3034
  br label %expr_block.exit, !dbg !3034

expr_block.exit:                                  ; preds = %after_check, %if.then
  %31 = load ptr, ptr %blockret, align 8, !dbg !3034
  store ptr %31, ptr %taddr, align 8
  %32 = load ptr, ptr %taddr, align 8
  %33 = load i64, ptr %elements8, align 8, !dbg !3028
  %add = add i64 0, %33, !dbg !3028
  %gt = icmp ugt i64 0, %add, !dbg !3028
  %sub32 = sub i64 %add, 0, !dbg !3028
  %34 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !3028
  br i1 %34, label %panic33, label %checkok39, !dbg !3028

checkok39:                                        ; preds = %expr_block.exit
  %size40 = sub i64 %add, 0, !dbg !3028
  %35 = insertvalue %"any[]" undef, ptr %32, 0, !dbg !3028
  %36 = insertvalue %"any[]" %35, i64 %size40, 1, !dbg !3028
  br label %noerr_block, !dbg !3028

panic_block:                                      ; preds = %assign_optional
  %37 = insertvalue %any undef, ptr %error_var, 0, !dbg !3028
  %38 = insertvalue %any %37, i64 ptrtoint (ptr @"$ct.fault" to i64), 1, !dbg !3028
  store %"char[]" { ptr @.panic_msg.68, i64 36 }, ptr %indirectarg41, align 8
  store %"char[]" { ptr @.file.212, i64 16 }, ptr %indirectarg42, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg43, align 8
  store %any %38, ptr %varargslots44, align 16
  %39 = insertvalue %"any[]" undef, ptr %varargslots44, 0
  %"$$temp45" = insertvalue %"any[]" %39, i64 1, 1
  store %"any[]" %"$$temp45", ptr %indirectarg46, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg41, ptr align 8 %indirectarg42, ptr align 8 %indirectarg43, i32 262, ptr align 8 %indirectarg46) #5, !dbg !3030
  unreachable, !dbg !3030

noerr_block:                                      ; preds = %checkok39
  store %"any[]" %36, ptr %copy, align 8, !dbg !3030
  %40 = load %"any[]", ptr %2, align 8, !dbg !3038
  %41 = extractvalue %"any[]" %40, 0, !dbg !3038
  %42 = extractvalue %"any[]" %40, 1, !dbg !3038
  %gt47 = icmp ugt i64 0, %42, !dbg !3038
  %43 = call i1 @llvm.expect.i1(i1 %gt47, i1 false), !dbg !3038
  br i1 %43, label %panic48, label %checkok58, !dbg !3038

checkok58:                                        ; preds = %noerr_block
  %size59 = sub i64 %42, 0, !dbg !3038
  %44 = insertvalue %"any[]" undef, ptr %41, 0, !dbg !3038
  %45 = insertvalue %"any[]" %44, i64 %size59, 1, !dbg !3038
  %46 = load %"any[]", ptr %copy, align 8, !dbg !3038
  %47 = extractvalue %"any[]" %46, 0, !dbg !3038
  %48 = extractvalue %"any[]" %46, 1, !dbg !3038
  %gt60 = icmp ugt i64 0, %48, !dbg !3038
  %49 = call i1 @llvm.expect.i1(i1 %gt60, i1 false), !dbg !3038
  br i1 %49, label %panic61, label %checkok71, !dbg !3038

checkok71:                                        ; preds = %checkok58
  %size72 = sub i64 %48, 0, !dbg !3038
  %50 = insertvalue %"any[]" undef, ptr %47, 0, !dbg !3038
  %51 = insertvalue %"any[]" %50, i64 %size72, 1, !dbg !3038
  %52 = extractvalue %"any[]" %51, 0, !dbg !3038
  %53 = extractvalue %"any[]" %45, 0, !dbg !3038
  %54 = extractvalue %"any[]" %45, 1, !dbg !3038
  %55 = extractvalue %"any[]" %51, 1, !dbg !3038
  %neq73 = icmp ne i64 %55, %54, !dbg !3038
  %56 = call i1 @llvm.expect.i1(i1 %neq73, i1 false), !dbg !3038
  br i1 %56, label %panic74, label %checkok84, !dbg !3038

checkok84:                                        ; preds = %checkok71
  %57 = mul i64 %54, 16, !dbg !3038
  call void @llvm.memmove.p0.p0.i64(ptr align 8 %52, ptr align 8 %53, i64 %57, i1 false), !dbg !3038
  call void @llvm.memset.p0.i64(ptr align 8 %.assign_list, i8 0, i64 40, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %.assign_list, ptr align 8 %copy, i32 16, i1 false), !dbg !3039
  %ptradd85 = getelementptr inbounds i8, ptr %.assign_list, i64 24, !dbg !3039
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %ptradd85, ptr align 8 %1, i32 16, i1 false), !dbg !3039
  %58 = load ptr, ptr %self, align 8, !dbg !3039
  %checknull = icmp eq ptr %58, null, !dbg !3039
  %59 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !3039
  br i1 %59, label %panic86, label %checkok90, !dbg !3039

checkok90:                                        ; preds = %checkok84
  %60 = ptrtoint ptr %58 to i64, !dbg !3039
  %61 = urem i64 %60, 8, !dbg !3039
  %62 = icmp ne i64 %61, 0, !dbg !3039
  %63 = call i1 @llvm.expect.i1(i1 %62, i1 false), !dbg !3039
  br i1 %63, label %panic91, label %checkok101, !dbg !3039

checkok101:                                       ; preds = %checkok90
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %58, ptr align 8 %.assign_list, i32 40, i1 false), !dbg !3039
  %64 = load ptr, ptr %self, align 8, !dbg !3040
  %65 = load ptr, ptr %self, align 8, !dbg !3041
  %ptradd102 = getelementptr inbounds i8, ptr %65, i64 16, !dbg !3041
  %66 = load i64, ptr %ptradd102, align 8, !dbg !3041
  %eq103 = icmp eq i64 0, %66, !dbg !3040
  br i1 %eq103, label %assert_ok108, label %assert_fail104, !dbg !3040

assert_fail104:                                   ; preds = %checkok101
  store %"char[]" { ptr @.panic_msg.237, i64 35 }, ptr %indirectarg105, align 8
  store %"char[]" { ptr @.file.243, i64 14 }, ptr %indirectarg106, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg107, align 8
  %67 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %67(ptr align 8 %indirectarg105, ptr align 8 %indirectarg106, ptr align 8 %indirectarg107, i32 26) #5, !dbg !3040
  unreachable, !dbg !3040

assert_ok108:                                     ; preds = %checkok101
  ret ptr %64, !dbg !3040

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.243, i64 14 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg2, align 8
  %68 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %68(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 21) #5, !dbg !3021
  unreachable, !dbg !3021

panic33:                                          ; preds = %expr_block.exit
  store i64 %sub32, ptr %taddr34, align 8
  %69 = insertvalue %any undef, ptr %taddr34, 0
  %70 = insertvalue %any %69, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.16, i64 43 }, ptr %indirectarg35, align 8
  store %"char[]" { ptr @.file.212, i64 16 }, ptr %indirectarg36, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg37, align 8
  store %any %70, ptr %varargslots, align 16
  %71 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %71, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg38, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg35, ptr align 8 %indirectarg36, ptr align 8 %indirectarg37, i32 270, ptr align 8 %indirectarg38) #5, !dbg !3028
  unreachable, !dbg !3028

panic48:                                          ; preds = %noerr_block
  store i64 %42, ptr %taddr49, align 8
  %72 = insertvalue %any undef, ptr %taddr49, 0
  %73 = insertvalue %any %72, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr50, align 8
  %74 = insertvalue %any undef, ptr %taddr50, 0
  %75 = insertvalue %any %74, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.170, i64 61 }, ptr %indirectarg51, align 8
  store %"char[]" { ptr @.file.243, i64 14 }, ptr %indirectarg52, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg53, align 8
  store %any %73, ptr %varargslots54, align 16
  %ptradd55 = getelementptr inbounds i8, ptr %varargslots54, i64 16
  store %any %75, ptr %ptradd55, align 16
  %76 = insertvalue %"any[]" undef, ptr %varargslots54, 0
  %"$$temp56" = insertvalue %"any[]" %76, i64 2, 1
  store %"any[]" %"$$temp56", ptr %indirectarg57, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg51, ptr align 8 %indirectarg52, ptr align 8 %indirectarg53, i32 24, ptr align 8 %indirectarg57) #5, !dbg !3038
  unreachable, !dbg !3038

panic61:                                          ; preds = %checkok58
  store i64 %48, ptr %taddr62, align 8
  %77 = insertvalue %any undef, ptr %taddr62, 0
  %78 = insertvalue %any %77, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr63, align 8
  %79 = insertvalue %any undef, ptr %taddr63, 0
  %80 = insertvalue %any %79, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.170, i64 61 }, ptr %indirectarg64, align 8
  store %"char[]" { ptr @.file.243, i64 14 }, ptr %indirectarg65, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg66, align 8
  store %any %78, ptr %varargslots67, align 16
  %ptradd68 = getelementptr inbounds i8, ptr %varargslots67, i64 16
  store %any %80, ptr %ptradd68, align 16
  %81 = insertvalue %"any[]" undef, ptr %varargslots67, 0
  %"$$temp69" = insertvalue %"any[]" %81, i64 2, 1
  store %"any[]" %"$$temp69", ptr %indirectarg70, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg64, ptr align 8 %indirectarg65, ptr align 8 %indirectarg66, i32 24, ptr align 8 %indirectarg70) #5, !dbg !3038
  unreachable, !dbg !3038

panic74:                                          ; preds = %checkok71
  store i64 %55, ptr %taddr75, align 8
  %82 = insertvalue %any undef, ptr %taddr75, 0
  %83 = insertvalue %any %82, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %54, ptr %taddr76, align 8
  %84 = insertvalue %any undef, ptr %taddr76, 0
  %85 = insertvalue %any %84, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.198, i64 38 }, ptr %indirectarg77, align 8
  store %"char[]" { ptr @.file.243, i64 14 }, ptr %indirectarg78, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg79, align 8
  store %any %83, ptr %varargslots80, align 16
  %ptradd81 = getelementptr inbounds i8, ptr %varargslots80, i64 16
  store %any %85, ptr %ptradd81, align 16
  %86 = insertvalue %"any[]" undef, ptr %varargslots80, 0
  %"$$temp82" = insertvalue %"any[]" %86, i64 2, 1
  store %"any[]" %"$$temp82", ptr %indirectarg83, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg77, ptr align 8 %indirectarg78, ptr align 8 %indirectarg79, i32 24, ptr align 8 %indirectarg83) #5, !dbg !3038
  unreachable, !dbg !3038

panic86:                                          ; preds = %checkok84
  store %"char[]" { ptr @.panic_msg.2, i64 45 }, ptr %indirectarg87, align 8
  store %"char[]" { ptr @.file.243, i64 14 }, ptr %indirectarg88, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg89, align 8
  %87 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %87(ptr align 8 %indirectarg87, ptr align 8 %indirectarg88, ptr align 8 %indirectarg89, i32 25) #5, !dbg !3039
  unreachable, !dbg !3039

panic91:                                          ; preds = %checkok90
  store i64 8, ptr %taddr92, align 8
  %88 = insertvalue %any undef, ptr %taddr92, 0
  %89 = insertvalue %any %88, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %61, ptr %taddr93, align 8
  %90 = insertvalue %any undef, ptr %taddr93, 0
  %91 = insertvalue %any %90, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg94, align 8
  store %"char[]" { ptr @.file.243, i64 14 }, ptr %indirectarg95, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg96, align 8
  store %any %89, ptr %varargslots97, align 16
  %ptradd98 = getelementptr inbounds i8, ptr %varargslots97, i64 16
  store %any %91, ptr %ptradd98, align 16
  %92 = insertvalue %"any[]" undef, ptr %varargslots97, 0
  %"$$temp99" = insertvalue %"any[]" %92, i64 2, 1
  store %"any[]" %"$$temp99", ptr %indirectarg100, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg94, ptr align 8 %indirectarg95, ptr align 8 %indirectarg96, i32 25, ptr align 8 %indirectarg100) #5, !dbg !3039
  unreachable, !dbg !3039
}

; Function Attrs: nounwind ssp uwtable
define weak_odr ptr @std.io.MultiReader.tinit(ptr %0, ptr align 8 %1) #0 comdat !dbg !3042 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg13 = alloca %any, align 8
  %indirectarg14 = alloca %"any[]", align 8
  %indirectarg18 = alloca %"char[]", align 8
  %indirectarg19 = alloca %"char[]", align 8
  %indirectarg20 = alloca %"char[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !3045
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !3045
  br i1 %3, label %panic, label %checkok, !dbg !3045

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !3046, !DIExpression(), !3047)
    #dbg_declare(ptr %1, !3048, !DIExpression(), !3047)
  %4 = load ptr, ptr %self, align 8, !dbg !3049
  %ptradd = getelementptr inbounds i8, ptr %4, i64 8, !dbg !3049
  %5 = load i64, ptr %ptradd, align 8, !dbg !3049
  %eq = icmp eq i64 0, %5, !dbg !3049
  br i1 %eq, label %assert_ok, label %assert_fail, !dbg !3049

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.244, i64 90 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.file.243, i64 14 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.func.207, i64 5 }, ptr %indirectarg5, align 8
  %6 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %6(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, i32 31) #5, !dbg !3049
  unreachable, !dbg !3049

assert_ok:                                        ; preds = %checkok
  %7 = load ptr, ptr %self, align 8, !dbg !3051
  %8 = call ptr @llvm.threadlocal.address.p0(ptr @std.core.mem.allocator.current_temp), !dbg !3051
  %9 = load %any, ptr %8, align 8, !dbg !3051
  %10 = load %"any[]", ptr %1, align 8, !dbg !3051
  %ptradd6 = getelementptr inbounds i8, ptr %7, i64 8, !dbg !3052
  %11 = load i64, ptr %ptradd6, align 8, !dbg !3052
  %eq7 = icmp eq i64 0, %11, !dbg !3051
  br i1 %eq7, label %assert_ok12, label %assert_fail8, !dbg !3051

assert_fail8:                                     ; preds = %assert_ok
  store %"char[]" { ptr @.panic_msg.244, i64 90 }, ptr %indirectarg9, align 8
  store %"char[]" { ptr @.file.243, i64 14 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.func.207, i64 5 }, ptr %indirectarg11, align 8
  %12 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %12(ptr align 8 %indirectarg9, ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, i32 36) #5, !dbg !3051
  unreachable, !dbg !3051

assert_ok12:                                      ; preds = %assert_ok
  store %any %9, ptr %indirectarg13, align 8
  store %"any[]" %10, ptr %indirectarg14, align 8
  %13 = call ptr @std.io.MultiReader.init(ptr %7, ptr align 8 %indirectarg13, ptr align 8 %indirectarg14), !dbg !3051
  %14 = load ptr, ptr %self, align 8, !dbg !3053
  %ptradd15 = getelementptr inbounds i8, ptr %14, i64 16, !dbg !3053
  %15 = load i64, ptr %ptradd15, align 8, !dbg !3053
  %eq16 = icmp eq i64 0, %15, !dbg !3051
  br i1 %eq16, label %assert_ok21, label %assert_fail17, !dbg !3051

assert_fail17:                                    ; preds = %assert_ok12
  store %"char[]" { ptr @.panic_msg.237, i64 35 }, ptr %indirectarg18, align 8
  store %"char[]" { ptr @.file.243, i64 14 }, ptr %indirectarg19, align 8
  store %"char[]" { ptr @.func.207, i64 5 }, ptr %indirectarg20, align 8
  %16 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %16(ptr align 8 %indirectarg18, ptr align 8 %indirectarg19, ptr align 8 %indirectarg20, i32 36) #5, !dbg !3051
  unreachable, !dbg !3051

assert_ok21:                                      ; preds = %assert_ok12
  ret ptr %13, !dbg !3051

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.243, i64 14 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.207, i64 5 }, ptr %indirectarg2, align 8
  %17 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %17(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 34) #5, !dbg !3047
  unreachable, !dbg !3047
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.io.MultiReader.free(ptr %0) #0 comdat !dbg !3054 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %allocator = alloca %any, align 8
  %ptr = alloca ptr, align 8
  %indirectarg7 = alloca %"char[]", align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %indirectarg12 = alloca %"char[]", align 8
  %indirectarg13 = alloca %"char[]", align 8
  %indirectarg14 = alloca %"char[]", align 8
  %indirectarg16 = alloca %"char[]", align 8
  %indirectarg17 = alloca %"char[]", align 8
  %indirectarg18 = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr21 = alloca i64, align 8
  %indirectarg22 = alloca %"char[]", align 8
  %indirectarg23 = alloca %"char[]", align 8
  %indirectarg24 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg26 = alloca %"any[]", align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !3057
  %1 = icmp eq ptr %0, null, !dbg !3057
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !3057
  br i1 %2, label %panic, label %checkok, !dbg !3057

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !3058, !DIExpression(), !3059)
  %3 = load ptr, ptr %self, align 8, !dbg !3060
  %ptradd = getelementptr inbounds i8, ptr %3, i64 24, !dbg !3060
  %4 = load ptr, ptr %ptradd, align 8, !dbg !3060
  %i2nb = icmp eq ptr %4, null, !dbg !3060
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !3060

if.then:                                          ; preds = %checkok
  ret void, !dbg !3060

if.exit:                                          ; preds = %checkok
  %5 = load ptr, ptr %self, align 8, !dbg !3061
  %ptradd3 = getelementptr inbounds i8, ptr %5, i64 24, !dbg !3061
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator, ptr align 8 %ptradd3, i32 16, i1 false)
  %6 = load ptr, ptr %self, align 8, !dbg !3061
  %7 = load ptr, ptr %6, align 8
  store ptr %7, ptr %ptr, align 8
  %8 = load ptr, ptr %ptr, align 8, !dbg !3062
  %i2nb4 = icmp eq ptr %8, null, !dbg !3062
  br i1 %i2nb4, label %if.then5, label %if.exit6, !dbg !3062

if.then5:                                         ; preds = %if.exit
  br label %expr_block.exit, !dbg !3062

if.exit6:                                         ; preds = %if.exit
  %9 = load ptr, ptr %ptr, align 8, !dbg !3064
  %neq = icmp ne ptr %9, null, !dbg !3064
  br i1 %neq, label %assert_ok, label %assert_fail, !dbg !3064

assert_fail:                                      ; preds = %if.exit6
  store %"char[]" { ptr @.panic_msg.211, i64 75 }, ptr %indirectarg7, align 8
  store %"char[]" { ptr @.file.212, i64 16 }, ptr %indirectarg8, align 8
  store %"char[]" { ptr @.func.210, i64 4 }, ptr %indirectarg9, align 8
  %10 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %10(ptr align 8 %indirectarg7, ptr align 8 %indirectarg8, ptr align 8 %indirectarg9, i32 123) #5, !dbg !3064
  unreachable, !dbg !3064

assert_ok:                                        ; preds = %if.exit6
  %ptradd10 = getelementptr inbounds i8, ptr %allocator, i64 8, !dbg !3064
  %11 = load i64, ptr %ptradd10, align 8, !dbg !3064
  %12 = inttoptr i64 %11 to ptr, !dbg !3064
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !3057
  %13 = icmp eq ptr %12, %type, !dbg !3057
  br i1 %13, label %cache_hit, label %cache_miss, !dbg !3057

cache_miss:                                       ; preds = %assert_ok
  %ptradd11 = getelementptr inbounds i8, ptr %12, i64 16, !dbg !3057
  %14 = load ptr, ptr %ptradd11, align 8, !dbg !3057
  %15 = call ptr @.dyn_search(ptr %14, ptr @"$sel.release"), !dbg !3057
  store ptr %15, ptr %.inlinecache, align 8, !dbg !3057
  store ptr %12, ptr %.cachedtype, align 8, !dbg !3057
  br label %16, !dbg !3057

cache_hit:                                        ; preds = %assert_ok
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !3057
  br label %16, !dbg !3057

16:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %15, %cache_miss ], !dbg !3057
  %17 = icmp eq ptr %fn_phi, null, !dbg !3057
  br i1 %17, label %missing_function, label %match, !dbg !3057

missing_function:                                 ; preds = %16
  store %"char[]" { ptr @.panic_msg.213, i64 44 }, ptr %indirectarg12, align 8
  store %"char[]" { ptr @.file.212, i64 16 }, ptr %indirectarg13, align 8
  store %"char[]" { ptr @.func.210, i64 4 }, ptr %indirectarg14, align 8
  %18 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %18(ptr align 8 %indirectarg12, ptr align 8 %indirectarg13, ptr align 8 %indirectarg14, i32 123) #5, !dbg !3064
  unreachable, !dbg !3064

match:                                            ; preds = %16
  %19 = load ptr, ptr %allocator, align 8, !dbg !3064
  call void %fn_phi(ptr %19, ptr %9, i8 zeroext 0), !dbg !3064
  br label %expr_block.exit, !dbg !3064

expr_block.exit:                                  ; preds = %match, %if.then5
  %20 = load ptr, ptr %self, align 8, !dbg !3065
  %checknull = icmp eq ptr %20, null, !dbg !3065
  %21 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !3065
  br i1 %21, label %panic15, label %checkok19, !dbg !3065

checkok19:                                        ; preds = %expr_block.exit
  %22 = ptrtoint ptr %20 to i64, !dbg !3065
  %23 = urem i64 %22, 8, !dbg !3065
  %24 = icmp ne i64 %23, 0, !dbg !3065
  %25 = call i1 @llvm.expect.i1(i1 %24, i1 false), !dbg !3065
  br i1 %25, label %panic20, label %checkok27, !dbg !3065

checkok27:                                        ; preds = %checkok19
  call void @llvm.memset.p0.i64(ptr align 8 %20, i8 0, i64 40, i1 false), !dbg !3065
  ret void, !dbg !3065

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.243, i64 14 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.210, i64 4 }, ptr %indirectarg2, align 8
  %26 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %26(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 39) #5, !dbg !3059
  unreachable, !dbg !3059

panic15:                                          ; preds = %expr_block.exit
  store %"char[]" { ptr @.panic_msg.2, i64 45 }, ptr %indirectarg16, align 8
  store %"char[]" { ptr @.file.243, i64 14 }, ptr %indirectarg17, align 8
  store %"char[]" { ptr @.func.210, i64 4 }, ptr %indirectarg18, align 8
  %27 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %27(ptr align 8 %indirectarg16, ptr align 8 %indirectarg17, ptr align 8 %indirectarg18, i32 43) #5, !dbg !3065
  unreachable, !dbg !3065

panic20:                                          ; preds = %checkok19
  store i64 8, ptr %taddr, align 8
  %28 = insertvalue %any undef, ptr %taddr, 0
  %29 = insertvalue %any %28, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %23, ptr %taddr21, align 8
  %30 = insertvalue %any undef, ptr %taddr21, 0
  %31 = insertvalue %any %30, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg22, align 8
  store %"char[]" { ptr @.file.243, i64 14 }, ptr %indirectarg23, align 8
  store %"char[]" { ptr @.func.210, i64 4 }, ptr %indirectarg24, align 8
  store %any %29, ptr %varargslots, align 16
  %ptradd25 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %31, ptr %ptradd25, align 16
  %32 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %32, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg26, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg22, ptr align 8 %indirectarg23, ptr align 8 %indirectarg24, i32 43, ptr align 8 %indirectarg26) #5, !dbg !3065
  unreachable, !dbg !3065
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.MultiReader.read(ptr %0, ptr %1, ptr align 8 %2) #0 comdat !dbg !3066 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %r = alloca %any, align 8
  %taddr = alloca i64, align 8
  %taddr5 = alloca i64, align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg7 = alloca %"char[]", align 8
  %indirectarg8 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg10 = alloca %"any[]", align 8
  %taddr13 = alloca i64, align 8
  %taddr14 = alloca i64, align 8
  %indirectarg15 = alloca %"char[]", align 8
  %indirectarg16 = alloca %"char[]", align 8
  %indirectarg17 = alloca %"char[]", align 8
  %varargslots18 = alloca [2 x %any], align 16
  %indirectarg21 = alloca %"any[]", align 8
  %n = alloca i64, align 8
  %n.f = alloca i64, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %indirectarg25 = alloca %"char[]", align 8
  %indirectarg26 = alloca %"char[]", align 8
  %indirectarg27 = alloca %"char[]", align 8
  %retparam = alloca i64, align 8
  %indirectarg28 = alloca %"char[]", align 8
  %err = alloca i64, align 8
  %reterr = alloca i64, align 8
  %retparam39 = alloca i64, align 8
  %indirectarg40 = alloca %"char[]", align 8
  %reterr45 = alloca i64, align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !3069
  %3 = icmp eq ptr %1, null, !dbg !3069
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !3069
  br i1 %4, label %panic, label %checkok, !dbg !3069

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !3070, !DIExpression(), !3071)
    #dbg_declare(ptr %2, !3072, !DIExpression(), !3071)
    #dbg_declare(ptr %r, !3073, !DIExpression(), !3074)
  %5 = load ptr, ptr %self, align 8, !dbg !3074
  %ptradd = getelementptr inbounds i8, ptr %5, i64 8, !dbg !3074
  %6 = load i64, ptr %ptradd, align 8, !dbg !3074
  %7 = load ptr, ptr %5, align 8, !dbg !3074
  %8 = load ptr, ptr %self, align 8, !dbg !3074
  %ptradd3 = getelementptr inbounds i8, ptr %8, i64 16, !dbg !3074
  %9 = load i64, ptr %ptradd3, align 8, !dbg !3074
  %ge = icmp uge i64 %9, %6, !dbg !3074
  %10 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !3074
  br i1 %10, label %panic4, label %checkok11, !dbg !3074

checkok11:                                        ; preds = %checkok
  %ptroffset = getelementptr inbounds [16 x i8], ptr %7, i64 %9, !dbg !3074
  %11 = ptrtoint ptr %ptroffset to i64, !dbg !3074
  %12 = urem i64 %11, 8, !dbg !3074
  %13 = icmp ne i64 %12, 0, !dbg !3074
  %14 = call i1 @llvm.expect.i1(i1 %13, i1 false), !dbg !3074
  br i1 %14, label %panic12, label %checkok22, !dbg !3074

checkok22:                                        ; preds = %checkok11
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %r, ptr align 8 %ptroffset, i32 16, i1 false), !dbg !3074
    #dbg_declare(ptr %n, !3075, !DIExpression(), !3076)
  %ptradd23 = getelementptr inbounds i8, ptr %r, i64 8, !dbg !3076
  %15 = load i64, ptr %ptradd23, align 8, !dbg !3076
  %16 = inttoptr i64 %15 to ptr, !dbg !3076
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !3069
  %17 = icmp eq ptr %16, %type, !dbg !3069
  br i1 %17, label %cache_hit, label %cache_miss, !dbg !3069

cache_miss:                                       ; preds = %checkok22
  %ptradd24 = getelementptr inbounds i8, ptr %16, i64 16, !dbg !3069
  %18 = load ptr, ptr %ptradd24, align 8, !dbg !3069
  %19 = call ptr @.dyn_search(ptr %18, ptr @"$sel.read"), !dbg !3069
  store ptr %19, ptr %.inlinecache, align 8, !dbg !3069
  store ptr %16, ptr %.cachedtype, align 8, !dbg !3069
  br label %20, !dbg !3069

cache_hit:                                        ; preds = %checkok22
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !3069
  br label %20, !dbg !3069

20:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %19, %cache_miss ], !dbg !3069
  %21 = icmp eq ptr %fn_phi, null, !dbg !3069
  br i1 %21, label %missing_function, label %match, !dbg !3069

missing_function:                                 ; preds = %20
  store %"char[]" { ptr @.panic_msg.197, i64 41 }, ptr %indirectarg25, align 8
  store %"char[]" { ptr @.file.243, i64 14 }, ptr %indirectarg26, align 8
  store %"char[]" { ptr @.func.196, i64 4 }, ptr %indirectarg27, align 8
  %22 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %22(ptr align 8 %indirectarg25, ptr align 8 %indirectarg26, ptr align 8 %indirectarg27, i32 49) #5, !dbg !3076
  unreachable, !dbg !3076

match:                                            ; preds = %20
  %23 = load ptr, ptr %r, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg28, ptr align 8 %2, i32 16, i1 false)
  %24 = call i64 %fn_phi(ptr %retparam, ptr %23, ptr align 8 %indirectarg28), !dbg !3076
  %not_err = icmp eq i64 %24, 0, !dbg !3076
  %25 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !3076
  br i1 %25, label %after_check, label %assign_optional, !dbg !3076

assign_optional:                                  ; preds = %match
  store i64 %24, ptr %n.f, align 8, !dbg !3076
  br label %after_assign, !dbg !3076

after_check:                                      ; preds = %match
  %26 = load i64, ptr %retparam, align 8, !dbg !3076
  store i64 %26, ptr %n, align 8, !dbg !3076
  store i64 0, ptr %n.f, align 8, !dbg !3076
  br label %after_assign, !dbg !3076

after_assign:                                     ; preds = %after_check, %assign_optional
    #dbg_declare(ptr %err, !3077, !DIExpression(), !3078)
  br label %testblock, !dbg !3078

testblock:                                        ; preds = %after_assign
  %optval = load i64, ptr %n.f, align 8, !dbg !3078
  %not_err29 = icmp eq i64 %optval, 0, !dbg !3078
  %27 = call i1 @llvm.expect.i1(i1 %not_err29, i1 true), !dbg !3078
  br i1 %27, label %after_check31, label %assign_optional30, !dbg !3078

assign_optional30:                                ; preds = %testblock
  store i64 %optval, ptr %err, align 8, !dbg !3078
  br label %end_block, !dbg !3078

after_check31:                                    ; preds = %testblock
  store i64 0, ptr %err, align 8, !dbg !3078
  br label %end_block, !dbg !3078

end_block:                                        ; preds = %after_check31, %assign_optional30
  %28 = load i64, ptr %err, align 8, !dbg !3078
  %i2b = icmp ne i64 %28, 0, !dbg !3078
  br i1 %i2b, label %if.then, label %if.exit44, !dbg !3078

if.then:                                          ; preds = %end_block
  %29 = load i64, ptr %err, align 8, !dbg !3079
  %neq = icmp ne i64 %29, ptrtoint (ptr @std.io.EOF to i64), !dbg !3079
  br i1 %neq, label %if.then32, label %if.exit, !dbg !3079

if.then32:                                        ; preds = %if.then
  %30 = load i64, ptr %err, align 8, !dbg !3079
  ret i64 %30, !dbg !3079

if.exit:                                          ; preds = %if.then
  %31 = load ptr, ptr %self, align 8, !dbg !3081
  %ptradd33 = getelementptr inbounds i8, ptr %31, i64 16, !dbg !3081
  %32 = load i64, ptr %ptradd33, align 8, !dbg !3081
  %add = add i64 %32, 1, !dbg !3081
  store i64 %add, ptr %ptradd33, align 8, !dbg !3081
  %33 = load ptr, ptr %self, align 8, !dbg !3082
  %ptradd34 = getelementptr inbounds i8, ptr %33, i64 16, !dbg !3082
  %34 = load i64, ptr %ptradd34, align 8, !dbg !3082
  %35 = load ptr, ptr %self, align 8, !dbg !3082
  %ptradd35 = getelementptr inbounds i8, ptr %35, i64 8, !dbg !3082
  %36 = load i64, ptr %ptradd35, align 8, !dbg !3082
  %ge36 = icmp uge i64 %34, %36, !dbg !3082
  br i1 %ge36, label %if.then37, label %if.exit38, !dbg !3082

if.then37:                                        ; preds = %if.exit
  ret i64 ptrtoint (ptr @std.io.EOF to i64), !dbg !3083

if.exit38:                                        ; preds = %if.exit
  %37 = load ptr, ptr %self, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg40, ptr align 8 %2, i32 16, i1 false)
  %38 = call i64 @std.io.MultiReader.read(ptr %retparam39, ptr %37, ptr align 8 %indirectarg40), !dbg !3085
  %not_err41 = icmp eq i64 %38, 0, !dbg !3085
  %39 = call i1 @llvm.expect.i1(i1 %not_err41, i1 true), !dbg !3085
  br i1 %39, label %after_check43, label %assign_optional42, !dbg !3085

assign_optional42:                                ; preds = %if.exit38
  store i64 %38, ptr %reterr, align 8, !dbg !3085
  br label %err_retblock, !dbg !3085

after_check43:                                    ; preds = %if.exit38
  %40 = load i64, ptr %retparam39, align 8, !dbg !3085
  store i64 %40, ptr %0, align 8, !dbg !3085
  ret i64 0, !dbg !3085

err_retblock:                                     ; preds = %assign_optional42
  %41 = load i64, ptr %reterr, align 8, !dbg !3085
  ret i64 %41, !dbg !3085

if.exit44:                                        ; preds = %end_block
  %42 = load i64, ptr %n, align 8, !dbg !3086
  store i64 %42, ptr %0, align 8, !dbg !3086
  ret i64 0, !dbg !3086

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.243, i64 14 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.196, i64 4 }, ptr %indirectarg2, align 8
  %43 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %43(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 46) #5, !dbg !3071
  unreachable, !dbg !3071

panic4:                                           ; preds = %checkok
  store i64 %6, ptr %taddr, align 8
  %44 = insertvalue %any undef, ptr %taddr, 0
  %45 = insertvalue %any %44, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %9, ptr %taddr5, align 8
  %46 = insertvalue %any undef, ptr %taddr5, 0
  %47 = insertvalue %any %46, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.71, i64 59 }, ptr %indirectarg6, align 8
  store %"char[]" { ptr @.file.243, i64 14 }, ptr %indirectarg7, align 8
  store %"char[]" { ptr @.func.196, i64 4 }, ptr %indirectarg8, align 8
  store %any %45, ptr %varargslots, align 16
  %ptradd9 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %47, ptr %ptradd9, align 16
  %48 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %48, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg10, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg6, ptr align 8 %indirectarg7, ptr align 8 %indirectarg8, i32 48, ptr align 8 %indirectarg10) #5, !dbg !3074
  unreachable, !dbg !3074

panic12:                                          ; preds = %checkok11
  store i64 8, ptr %taddr13, align 8
  %49 = insertvalue %any undef, ptr %taddr13, 0
  %50 = insertvalue %any %49, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %12, ptr %taddr14, align 8
  %51 = insertvalue %any undef, ptr %taddr14, 0
  %52 = insertvalue %any %51, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg15, align 8
  store %"char[]" { ptr @.file.243, i64 14 }, ptr %indirectarg16, align 8
  store %"char[]" { ptr @.func.196, i64 4 }, ptr %indirectarg17, align 8
  store %any %50, ptr %varargslots18, align 16
  %ptradd19 = getelementptr inbounds i8, ptr %varargslots18, i64 16
  store %any %52, ptr %ptradd19, align 16
  %53 = insertvalue %"any[]" undef, ptr %varargslots18, 0
  %"$$temp20" = insertvalue %"any[]" %53, i64 2, 1
  store %"any[]" %"$$temp20", ptr %indirectarg21, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg15, ptr align 8 %indirectarg16, ptr align 8 %indirectarg17, i32 48, ptr align 8 %indirectarg21) #5, !dbg !3074
  unreachable, !dbg !3074
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.MultiReader.read_byte(ptr %0, ptr %1) #0 comdat !dbg !3087 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %data = alloca [1 x i8], align 1
  %error_var = alloca i64, align 8
  %retparam = alloca i64, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %reterr = alloca i64, align 8
  %2 = icmp eq ptr %1, null, !dbg !3090
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !3090
  br i1 %3, label %panic, label %checkok, !dbg !3090

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !3091, !DIExpression(), !3092)
    #dbg_declare(ptr %data, !3093, !DIExpression(), !3097)
  store i8 0, ptr %data, align 1, !dbg !3097
  %4 = insertvalue %"char[]" undef, ptr %data, 0, !dbg !3098
  %5 = insertvalue %"char[]" %4, i64 1, 1, !dbg !3098
  %6 = load ptr, ptr %self, align 8
  store %"char[]" %5, ptr %indirectarg3, align 8
  %7 = call i64 @std.io.MultiReader.read(ptr %retparam, ptr %6, ptr align 8 %indirectarg3), !dbg !3098
  %not_err = icmp eq i64 %7, 0, !dbg !3098
  %8 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !3098
  br i1 %8, label %after_check, label %assign_optional, !dbg !3098

assign_optional:                                  ; preds = %checkok
  store i64 %7, ptr %error_var, align 8, !dbg !3098
  br label %guard_block, !dbg !3098

after_check:                                      ; preds = %checkok
  br label %noerr_block, !dbg !3098

guard_block:                                      ; preds = %assign_optional
  %9 = load i64, ptr %error_var, align 8, !dbg !3098
  ret i64 %9, !dbg !3098

noerr_block:                                      ; preds = %after_check
  %10 = load i8, ptr %data, align 1, !dbg !3099
  store i8 %10, ptr %0, align 1, !dbg !3099
  ret i64 0, !dbg !3099

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.243, i64 14 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.199, i64 9 }, ptr %indirectarg2, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 63) #5, !dbg !3092
  unreachable, !dbg !3092
}

; Function Attrs: nounwind ssp uwtable
define weak_odr ptr @std.io.MultiWriter.init(ptr %0, ptr align 8 %1, ptr align 8 %2) #0 comdat !dbg !3100 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %copy = alloca %"any[]", align 8
  %allocator = alloca %any, align 8
  %elements = alloca i64, align 8
  %error_var = alloca i64, align 8
  %allocator13 = alloca %any, align 8
  %elements14 = alloca i64, align 8
  %allocator15 = alloca %any, align 8
  %size = alloca i64, align 8
  %blockret = alloca ptr, align 8
  %x = alloca i64, align 8
  %indirectarg19 = alloca %"char[]", align 8
  %indirectarg20 = alloca %"char[]", align 8
  %indirectarg21 = alloca %"char[]", align 8
  %indirectarg24 = alloca %"char[]", align 8
  %indirectarg25 = alloca %"char[]", align 8
  %indirectarg26 = alloca %"char[]", align 8
  %indirectarg30 = alloca %"char[]", align 8
  %indirectarg31 = alloca %"char[]", align 8
  %indirectarg32 = alloca %"char[]", align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %indirectarg36 = alloca %"char[]", align 8
  %indirectarg37 = alloca %"char[]", align 8
  %indirectarg38 = alloca %"char[]", align 8
  %retparam = alloca ptr, align 8
  %taddr = alloca ptr, align 8
  %taddr41 = alloca i64, align 8
  %indirectarg42 = alloca %"char[]", align 8
  %indirectarg43 = alloca %"char[]", align 8
  %indirectarg44 = alloca %"char[]", align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg45 = alloca %"any[]", align 8
  %indirectarg48 = alloca %"char[]", align 8
  %indirectarg49 = alloca %"char[]", align 8
  %indirectarg50 = alloca %"char[]", align 8
  %varargslots51 = alloca [1 x %any], align 16
  %indirectarg53 = alloca %"any[]", align 8
  %taddr56 = alloca i64, align 8
  %taddr57 = alloca i64, align 8
  %indirectarg58 = alloca %"char[]", align 8
  %indirectarg59 = alloca %"char[]", align 8
  %indirectarg60 = alloca %"char[]", align 8
  %varargslots61 = alloca [2 x %any], align 16
  %indirectarg64 = alloca %"any[]", align 8
  %taddr69 = alloca i64, align 8
  %taddr70 = alloca i64, align 8
  %indirectarg71 = alloca %"char[]", align 8
  %indirectarg72 = alloca %"char[]", align 8
  %indirectarg73 = alloca %"char[]", align 8
  %varargslots74 = alloca [2 x %any], align 16
  %indirectarg77 = alloca %"any[]", align 8
  %taddr82 = alloca i64, align 8
  %taddr83 = alloca i64, align 8
  %indirectarg84 = alloca %"char[]", align 8
  %indirectarg85 = alloca %"char[]", align 8
  %indirectarg86 = alloca %"char[]", align 8
  %varargslots87 = alloca [2 x %any], align 16
  %indirectarg90 = alloca %"any[]", align 8
  %.assign_list = alloca %MultiWriter, align 8
  %indirectarg94 = alloca %"char[]", align 8
  %indirectarg95 = alloca %"char[]", align 8
  %indirectarg96 = alloca %"char[]", align 8
  %taddr99 = alloca i64, align 8
  %taddr100 = alloca i64, align 8
  %indirectarg101 = alloca %"char[]", align 8
  %indirectarg102 = alloca %"char[]", align 8
  %indirectarg103 = alloca %"char[]", align 8
  %varargslots104 = alloca [2 x %any], align 16
  %indirectarg107 = alloca %"any[]", align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !3113
  %3 = icmp eq ptr %0, null, !dbg !3113
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !3113
  br i1 %4, label %panic, label %checkok, !dbg !3113

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !3114, !DIExpression(), !3115)
    #dbg_declare(ptr %1, !3116, !DIExpression(), !3115)
    #dbg_declare(ptr %2, !3117, !DIExpression(), !3115)
  %ptradd = getelementptr inbounds i8, ptr %2, i64 8, !dbg !3118
  %5 = load i64, ptr %ptradd, align 8, !dbg !3118
  %lt = icmp ult i64 0, %5, !dbg !3118
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !3118

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.246, i64 36 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.file.245, i64 14 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg5, align 8
  %6 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %6(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, i32 15) #5, !dbg !3118
  unreachable, !dbg !3118

assert_ok:                                        ; preds = %checkok
  %7 = load ptr, ptr %self, align 8, !dbg !3120
  %ptradd6 = getelementptr inbounds i8, ptr %7, i64 8, !dbg !3120
  %8 = load i64, ptr %ptradd6, align 8, !dbg !3120
  %eq = icmp eq i64 0, %8, !dbg !3120
  br i1 %eq, label %assert_ok11, label %assert_fail7, !dbg !3120

assert_fail7:                                     ; preds = %assert_ok
  store %"char[]" { ptr @.panic_msg.247, i64 90 }, ptr %indirectarg8, align 8
  store %"char[]" { ptr @.file.245, i64 14 }, ptr %indirectarg9, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg10, align 8
  %9 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %9(ptr align 8 %indirectarg8, ptr align 8 %indirectarg9, ptr align 8 %indirectarg10, i32 16) #5, !dbg !3120
  unreachable, !dbg !3120

assert_ok11:                                      ; preds = %assert_ok
    #dbg_declare(ptr %copy, !3121, !DIExpression(), !3122)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator, ptr align 8 %1, i32 16, i1 false)
  %ptradd12 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !3122
  %10 = load i64, ptr %ptradd12, align 8
  store i64 %10, ptr %elements, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator13, ptr align 8 %allocator, i32 16, i1 false)
  %11 = load i64, ptr %elements, align 8
  store i64 %11, ptr %elements14, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator15, ptr align 8 %allocator13, i32 16, i1 false)
  %12 = load i64, ptr %elements14, align 8, !dbg !3123
  %mul = mul i64 16, %12, !dbg !3123
  store i64 %mul, ptr %size, align 8
  %13 = load i64, ptr %size, align 8, !dbg !3127
  %i2nb = icmp eq i64 %13, 0, !dbg !3127
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !3127

if.then:                                          ; preds = %assert_ok11
  store ptr null, ptr %blockret, align 8, !dbg !3127
  br label %expr_block.exit, !dbg !3127

if.exit:                                          ; preds = %assert_ok11
  %14 = load i64, ptr %size, align 8, !dbg !3129
  br i1 true, label %or.phi, label %or.rhs, !dbg !3130

or.rhs:                                           ; preds = %if.exit
  store i64 0, ptr %x, align 8
  %15 = load i64, ptr %x, align 8, !dbg !3131
  %neq = icmp ne i64 0, %15, !dbg !3131
  br i1 %neq, label %and.rhs, label %and.phi, !dbg !3131

and.rhs:                                          ; preds = %or.rhs
  %16 = load i64, ptr %x, align 8, !dbg !3131
  %17 = load i64, ptr %x, align 8, !dbg !3131
  %sub = sub i64 %17, 1, !dbg !3131
  %and = and i64 %16, %sub, !dbg !3131
  %eq16 = icmp eq i64 %and, 0, !dbg !3131
  br label %and.phi, !dbg !3131

and.phi:                                          ; preds = %and.rhs, %or.rhs
  %val = phi i1 [ false, %or.rhs ], [ %eq16, %and.rhs ], !dbg !3131
  br label %or.phi, !dbg !3131

or.phi:                                           ; preds = %and.phi, %if.exit
  %val17 = phi i1 [ true, %if.exit ], [ %val, %and.phi ], !dbg !3131
  br i1 %val17, label %assert_ok22, label %assert_fail18, !dbg !3131

assert_fail18:                                    ; preds = %or.phi
  store %"char[]" { ptr @.panic_msg.220, i64 65 }, ptr %indirectarg19, align 8
  store %"char[]" { ptr @.file.212, i64 16 }, ptr %indirectarg20, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg21, align 8
  %18 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %18(ptr align 8 %indirectarg19, ptr align 8 %indirectarg20, ptr align 8 %indirectarg21, i32 98) #5, !dbg !3129
  unreachable, !dbg !3129

assert_ok22:                                      ; preds = %or.phi
  br i1 true, label %assert_ok27, label %assert_fail23, !dbg !3129

assert_fail23:                                    ; preds = %assert_ok22
  store %"char[]" { ptr @.panic_msg.221, i64 80 }, ptr %indirectarg24, align 8
  store %"char[]" { ptr @.file.212, i64 16 }, ptr %indirectarg25, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg26, align 8
  %19 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %19(ptr align 8 %indirectarg24, ptr align 8 %indirectarg25, ptr align 8 %indirectarg26, i32 98) #5, !dbg !3129
  unreachable, !dbg !3129

assert_ok27:                                      ; preds = %assert_ok22
  %lt28 = icmp ult i64 0, %14, !dbg !3129
  br i1 %lt28, label %assert_ok33, label %assert_fail29, !dbg !3129

assert_fail29:                                    ; preds = %assert_ok27
  store %"char[]" { ptr @.panic_msg.222, i64 59 }, ptr %indirectarg30, align 8
  store %"char[]" { ptr @.file.212, i64 16 }, ptr %indirectarg31, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg32, align 8
  %20 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %20(ptr align 8 %indirectarg30, ptr align 8 %indirectarg31, ptr align 8 %indirectarg32, i32 98) #5, !dbg !3129
  unreachable, !dbg !3129

assert_ok33:                                      ; preds = %assert_ok27
  %ptradd34 = getelementptr inbounds i8, ptr %allocator15, i64 8, !dbg !3129
  %21 = load i64, ptr %ptradd34, align 8, !dbg !3129
  %22 = inttoptr i64 %21 to ptr, !dbg !3129
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !3113
  %23 = icmp eq ptr %22, %type, !dbg !3113
  br i1 %23, label %cache_hit, label %cache_miss, !dbg !3113

cache_miss:                                       ; preds = %assert_ok33
  %ptradd35 = getelementptr inbounds i8, ptr %22, i64 16, !dbg !3113
  %24 = load ptr, ptr %ptradd35, align 8, !dbg !3113
  %25 = call ptr @.dyn_search(ptr %24, ptr @"$sel.acquire"), !dbg !3113
  store ptr %25, ptr %.inlinecache, align 8, !dbg !3113
  store ptr %22, ptr %.cachedtype, align 8, !dbg !3113
  br label %26, !dbg !3113

cache_hit:                                        ; preds = %assert_ok33
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !3113
  br label %26, !dbg !3113

26:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %25, %cache_miss ], !dbg !3113
  %27 = icmp eq ptr %fn_phi, null, !dbg !3113
  br i1 %27, label %missing_function, label %match, !dbg !3113

missing_function:                                 ; preds = %26
  store %"char[]" { ptr @.panic_msg.223, i64 44 }, ptr %indirectarg36, align 8
  store %"char[]" { ptr @.file.212, i64 16 }, ptr %indirectarg37, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg38, align 8
  %28 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %28(ptr align 8 %indirectarg36, ptr align 8 %indirectarg37, ptr align 8 %indirectarg38, i32 98) #5, !dbg !3129
  unreachable, !dbg !3129

match:                                            ; preds = %26
  %29 = load ptr, ptr %allocator15, align 8
  %30 = call i64 %fn_phi(ptr %retparam, ptr %29, i64 %14, i32 1, i64 0), !dbg !3129
  %not_err = icmp eq i64 %30, 0, !dbg !3129
  %31 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !3129
  br i1 %31, label %after_check, label %assign_optional, !dbg !3129

assign_optional:                                  ; preds = %match
  store i64 %30, ptr %error_var, align 8, !dbg !3129
  br label %panic_block, !dbg !3129

after_check:                                      ; preds = %match
  %32 = load ptr, ptr %retparam, align 8, !dbg !3129
  store ptr %32, ptr %blockret, align 8, !dbg !3129
  br label %expr_block.exit, !dbg !3129

expr_block.exit:                                  ; preds = %after_check, %if.then
  %33 = load ptr, ptr %blockret, align 8, !dbg !3129
  store ptr %33, ptr %taddr, align 8
  %34 = load ptr, ptr %taddr, align 8
  %35 = load i64, ptr %elements14, align 8, !dbg !3123
  %add = add i64 0, %35, !dbg !3123
  %gt = icmp ugt i64 0, %add, !dbg !3123
  %sub39 = sub i64 %add, 0, !dbg !3123
  %36 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !3123
  br i1 %36, label %panic40, label %checkok46, !dbg !3123

checkok46:                                        ; preds = %expr_block.exit
  %size47 = sub i64 %add, 0, !dbg !3123
  %37 = insertvalue %"any[]" undef, ptr %34, 0, !dbg !3123
  %38 = insertvalue %"any[]" %37, i64 %size47, 1, !dbg !3123
  br label %noerr_block, !dbg !3123

panic_block:                                      ; preds = %assign_optional
  %39 = insertvalue %any undef, ptr %error_var, 0, !dbg !3123
  %40 = insertvalue %any %39, i64 ptrtoint (ptr @"$ct.fault" to i64), 1, !dbg !3123
  store %"char[]" { ptr @.panic_msg.68, i64 36 }, ptr %indirectarg48, align 8
  store %"char[]" { ptr @.file.212, i64 16 }, ptr %indirectarg49, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg50, align 8
  store %any %40, ptr %varargslots51, align 16
  %41 = insertvalue %"any[]" undef, ptr %varargslots51, 0
  %"$$temp52" = insertvalue %"any[]" %41, i64 1, 1
  store %"any[]" %"$$temp52", ptr %indirectarg53, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg48, ptr align 8 %indirectarg49, ptr align 8 %indirectarg50, i32 262, ptr align 8 %indirectarg53) #5, !dbg !3125
  unreachable, !dbg !3125

noerr_block:                                      ; preds = %checkok46
  store %"any[]" %38, ptr %copy, align 8, !dbg !3125
  %42 = load %"any[]", ptr %2, align 8, !dbg !3133
  %43 = extractvalue %"any[]" %42, 0, !dbg !3133
  %44 = extractvalue %"any[]" %42, 1, !dbg !3133
  %gt54 = icmp ugt i64 0, %44, !dbg !3133
  %45 = call i1 @llvm.expect.i1(i1 %gt54, i1 false), !dbg !3133
  br i1 %45, label %panic55, label %checkok65, !dbg !3133

checkok65:                                        ; preds = %noerr_block
  %size66 = sub i64 %44, 0, !dbg !3133
  %46 = insertvalue %"any[]" undef, ptr %43, 0, !dbg !3133
  %47 = insertvalue %"any[]" %46, i64 %size66, 1, !dbg !3133
  %48 = load %"any[]", ptr %copy, align 8, !dbg !3133
  %49 = extractvalue %"any[]" %48, 0, !dbg !3133
  %50 = extractvalue %"any[]" %48, 1, !dbg !3133
  %gt67 = icmp ugt i64 0, %50, !dbg !3133
  %51 = call i1 @llvm.expect.i1(i1 %gt67, i1 false), !dbg !3133
  br i1 %51, label %panic68, label %checkok78, !dbg !3133

checkok78:                                        ; preds = %checkok65
  %size79 = sub i64 %50, 0, !dbg !3133
  %52 = insertvalue %"any[]" undef, ptr %49, 0, !dbg !3133
  %53 = insertvalue %"any[]" %52, i64 %size79, 1, !dbg !3133
  %54 = extractvalue %"any[]" %53, 0, !dbg !3133
  %55 = extractvalue %"any[]" %47, 0, !dbg !3133
  %56 = extractvalue %"any[]" %47, 1, !dbg !3133
  %57 = extractvalue %"any[]" %53, 1, !dbg !3133
  %neq80 = icmp ne i64 %57, %56, !dbg !3133
  %58 = call i1 @llvm.expect.i1(i1 %neq80, i1 false), !dbg !3133
  br i1 %58, label %panic81, label %checkok91, !dbg !3133

checkok91:                                        ; preds = %checkok78
  %59 = mul i64 %56, 16, !dbg !3133
  call void @llvm.memmove.p0.p0.i64(ptr align 8 %54, ptr align 8 %55, i64 %59, i1 false), !dbg !3133
  call void @llvm.memset.p0.i64(ptr align 8 %.assign_list, i8 0, i64 32, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %.assign_list, ptr align 8 %copy, i32 16, i1 false), !dbg !3134
  %ptradd92 = getelementptr inbounds i8, ptr %.assign_list, i64 16, !dbg !3134
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %ptradd92, ptr align 8 %1, i32 16, i1 false), !dbg !3134
  %60 = load ptr, ptr %self, align 8, !dbg !3134
  %checknull = icmp eq ptr %60, null, !dbg !3134
  %61 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !3134
  br i1 %61, label %panic93, label %checkok97, !dbg !3134

checkok97:                                        ; preds = %checkok91
  %62 = ptrtoint ptr %60 to i64, !dbg !3134
  %63 = urem i64 %62, 8, !dbg !3134
  %64 = icmp ne i64 %63, 0, !dbg !3134
  %65 = call i1 @llvm.expect.i1(i1 %64, i1 false), !dbg !3134
  br i1 %65, label %panic98, label %checkok108, !dbg !3134

checkok108:                                       ; preds = %checkok97
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %60, ptr align 8 %.assign_list, i32 32, i1 false), !dbg !3134
  %66 = load ptr, ptr %self, align 8, !dbg !3135
  ret ptr %66, !dbg !3135

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.245, i64 14 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg2, align 8
  %67 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %67(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 18) #5, !dbg !3115
  unreachable, !dbg !3115

panic40:                                          ; preds = %expr_block.exit
  store i64 %sub39, ptr %taddr41, align 8
  %68 = insertvalue %any undef, ptr %taddr41, 0
  %69 = insertvalue %any %68, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.16, i64 43 }, ptr %indirectarg42, align 8
  store %"char[]" { ptr @.file.212, i64 16 }, ptr %indirectarg43, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg44, align 8
  store %any %69, ptr %varargslots, align 16
  %70 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %70, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg45, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg42, ptr align 8 %indirectarg43, ptr align 8 %indirectarg44, i32 270, ptr align 8 %indirectarg45) #5, !dbg !3123
  unreachable, !dbg !3123

panic55:                                          ; preds = %noerr_block
  store i64 %44, ptr %taddr56, align 8
  %71 = insertvalue %any undef, ptr %taddr56, 0
  %72 = insertvalue %any %71, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr57, align 8
  %73 = insertvalue %any undef, ptr %taddr57, 0
  %74 = insertvalue %any %73, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.170, i64 61 }, ptr %indirectarg58, align 8
  store %"char[]" { ptr @.file.245, i64 14 }, ptr %indirectarg59, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg60, align 8
  store %any %72, ptr %varargslots61, align 16
  %ptradd62 = getelementptr inbounds i8, ptr %varargslots61, i64 16
  store %any %74, ptr %ptradd62, align 16
  %75 = insertvalue %"any[]" undef, ptr %varargslots61, 0
  %"$$temp63" = insertvalue %"any[]" %75, i64 2, 1
  store %"any[]" %"$$temp63", ptr %indirectarg64, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg58, ptr align 8 %indirectarg59, ptr align 8 %indirectarg60, i32 21, ptr align 8 %indirectarg64) #5, !dbg !3133
  unreachable, !dbg !3133

panic68:                                          ; preds = %checkok65
  store i64 %50, ptr %taddr69, align 8
  %76 = insertvalue %any undef, ptr %taddr69, 0
  %77 = insertvalue %any %76, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr70, align 8
  %78 = insertvalue %any undef, ptr %taddr70, 0
  %79 = insertvalue %any %78, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.170, i64 61 }, ptr %indirectarg71, align 8
  store %"char[]" { ptr @.file.245, i64 14 }, ptr %indirectarg72, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg73, align 8
  store %any %77, ptr %varargslots74, align 16
  %ptradd75 = getelementptr inbounds i8, ptr %varargslots74, i64 16
  store %any %79, ptr %ptradd75, align 16
  %80 = insertvalue %"any[]" undef, ptr %varargslots74, 0
  %"$$temp76" = insertvalue %"any[]" %80, i64 2, 1
  store %"any[]" %"$$temp76", ptr %indirectarg77, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg71, ptr align 8 %indirectarg72, ptr align 8 %indirectarg73, i32 21, ptr align 8 %indirectarg77) #5, !dbg !3133
  unreachable, !dbg !3133

panic81:                                          ; preds = %checkok78
  store i64 %57, ptr %taddr82, align 8
  %81 = insertvalue %any undef, ptr %taddr82, 0
  %82 = insertvalue %any %81, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %56, ptr %taddr83, align 8
  %83 = insertvalue %any undef, ptr %taddr83, 0
  %84 = insertvalue %any %83, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.198, i64 38 }, ptr %indirectarg84, align 8
  store %"char[]" { ptr @.file.245, i64 14 }, ptr %indirectarg85, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg86, align 8
  store %any %82, ptr %varargslots87, align 16
  %ptradd88 = getelementptr inbounds i8, ptr %varargslots87, i64 16
  store %any %84, ptr %ptradd88, align 16
  %85 = insertvalue %"any[]" undef, ptr %varargslots87, 0
  %"$$temp89" = insertvalue %"any[]" %85, i64 2, 1
  store %"any[]" %"$$temp89", ptr %indirectarg90, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg84, ptr align 8 %indirectarg85, ptr align 8 %indirectarg86, i32 21, ptr align 8 %indirectarg90) #5, !dbg !3133
  unreachable, !dbg !3133

panic93:                                          ; preds = %checkok91
  store %"char[]" { ptr @.panic_msg.2, i64 45 }, ptr %indirectarg94, align 8
  store %"char[]" { ptr @.file.245, i64 14 }, ptr %indirectarg95, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg96, align 8
  %86 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %86(ptr align 8 %indirectarg94, ptr align 8 %indirectarg95, ptr align 8 %indirectarg96, i32 22) #5, !dbg !3134
  unreachable, !dbg !3134

panic98:                                          ; preds = %checkok97
  store i64 8, ptr %taddr99, align 8
  %87 = insertvalue %any undef, ptr %taddr99, 0
  %88 = insertvalue %any %87, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %63, ptr %taddr100, align 8
  %89 = insertvalue %any undef, ptr %taddr100, 0
  %90 = insertvalue %any %89, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg101, align 8
  store %"char[]" { ptr @.file.245, i64 14 }, ptr %indirectarg102, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg103, align 8
  store %any %88, ptr %varargslots104, align 16
  %ptradd105 = getelementptr inbounds i8, ptr %varargslots104, i64 16
  store %any %90, ptr %ptradd105, align 16
  %91 = insertvalue %"any[]" undef, ptr %varargslots104, 0
  %"$$temp106" = insertvalue %"any[]" %91, i64 2, 1
  store %"any[]" %"$$temp106", ptr %indirectarg107, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg101, ptr align 8 %indirectarg102, ptr align 8 %indirectarg103, i32 22, ptr align 8 %indirectarg107) #5, !dbg !3134
  unreachable, !dbg !3134
}

; Function Attrs: nounwind ssp uwtable
define weak_odr ptr @std.io.MultiWriter.tinit(ptr %0, ptr align 8 %1) #0 comdat !dbg !3136 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg14 = alloca %"char[]", align 8
  %indirectarg15 = alloca %"char[]", align 8
  %indirectarg16 = alloca %"char[]", align 8
  %indirectarg21 = alloca %"char[]", align 8
  %indirectarg22 = alloca %"char[]", align 8
  %indirectarg23 = alloca %"char[]", align 8
  %indirectarg25 = alloca %any, align 8
  %indirectarg26 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !3139
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !3139
  br i1 %3, label %panic, label %checkok, !dbg !3139

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !3140, !DIExpression(), !3141)
    #dbg_declare(ptr %1, !3142, !DIExpression(), !3141)
  %ptradd = getelementptr inbounds i8, ptr %1, i64 8, !dbg !3143
  %4 = load i64, ptr %ptradd, align 8, !dbg !3143
  %lt = icmp ult i64 0, %4, !dbg !3143
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !3143

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.246, i64 36 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.file.245, i64 14 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.func.207, i64 5 }, ptr %indirectarg5, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, i32 28) #5, !dbg !3143
  unreachable, !dbg !3143

assert_ok:                                        ; preds = %checkok
  %6 = load ptr, ptr %self, align 8, !dbg !3145
  %ptradd6 = getelementptr inbounds i8, ptr %6, i64 8, !dbg !3145
  %7 = load i64, ptr %ptradd6, align 8, !dbg !3145
  %eq = icmp eq i64 0, %7, !dbg !3145
  br i1 %eq, label %assert_ok11, label %assert_fail7, !dbg !3145

assert_fail7:                                     ; preds = %assert_ok
  store %"char[]" { ptr @.panic_msg.247, i64 90 }, ptr %indirectarg8, align 8
  store %"char[]" { ptr @.file.245, i64 14 }, ptr %indirectarg9, align 8
  store %"char[]" { ptr @.func.207, i64 5 }, ptr %indirectarg10, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8(ptr align 8 %indirectarg8, ptr align 8 %indirectarg9, ptr align 8 %indirectarg10, i32 29) #5, !dbg !3145
  unreachable, !dbg !3145

assert_ok11:                                      ; preds = %assert_ok
  %9 = load ptr, ptr %self, align 8, !dbg !3146
  %10 = call ptr @llvm.threadlocal.address.p0(ptr @std.core.mem.allocator.current_temp), !dbg !3146
  %11 = load %any, ptr %10, align 8, !dbg !3146
  %12 = load %"any[]", ptr %1, align 8, !dbg !3146
  %13 = extractvalue %"any[]" %12, 1, !dbg !3147
  %lt12 = icmp ult i64 0, %13, !dbg !3146
  br i1 %lt12, label %assert_ok17, label %assert_fail13, !dbg !3146

assert_fail13:                                    ; preds = %assert_ok11
  store %"char[]" { ptr @.panic_msg.246, i64 36 }, ptr %indirectarg14, align 8
  store %"char[]" { ptr @.file.245, i64 14 }, ptr %indirectarg15, align 8
  store %"char[]" { ptr @.func.207, i64 5 }, ptr %indirectarg16, align 8
  %14 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %14(ptr align 8 %indirectarg14, ptr align 8 %indirectarg15, ptr align 8 %indirectarg16, i32 33) #5, !dbg !3146
  unreachable, !dbg !3146

assert_ok17:                                      ; preds = %assert_ok11
  %ptradd18 = getelementptr inbounds i8, ptr %9, i64 8, !dbg !3148
  %15 = load i64, ptr %ptradd18, align 8, !dbg !3148
  %eq19 = icmp eq i64 0, %15, !dbg !3146
  br i1 %eq19, label %assert_ok24, label %assert_fail20, !dbg !3146

assert_fail20:                                    ; preds = %assert_ok17
  store %"char[]" { ptr @.panic_msg.247, i64 90 }, ptr %indirectarg21, align 8
  store %"char[]" { ptr @.file.245, i64 14 }, ptr %indirectarg22, align 8
  store %"char[]" { ptr @.func.207, i64 5 }, ptr %indirectarg23, align 8
  %16 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %16(ptr align 8 %indirectarg21, ptr align 8 %indirectarg22, ptr align 8 %indirectarg23, i32 33) #5, !dbg !3146
  unreachable, !dbg !3146

assert_ok24:                                      ; preds = %assert_ok17
  store %any %11, ptr %indirectarg25, align 8
  store %"any[]" %12, ptr %indirectarg26, align 8
  %17 = call ptr @std.io.MultiWriter.init(ptr %9, ptr align 8 %indirectarg25, ptr align 8 %indirectarg26), !dbg !3146
  ret ptr %17, !dbg !3146

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.245, i64 14 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.207, i64 5 }, ptr %indirectarg2, align 8
  %18 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %18(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 31) #5, !dbg !3141
  unreachable, !dbg !3141
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.io.MultiWriter.free(ptr %0) #0 comdat !dbg !3149 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %allocator = alloca %any, align 8
  %ptr = alloca ptr, align 8
  %indirectarg7 = alloca %"char[]", align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %indirectarg12 = alloca %"char[]", align 8
  %indirectarg13 = alloca %"char[]", align 8
  %indirectarg14 = alloca %"char[]", align 8
  %indirectarg16 = alloca %"char[]", align 8
  %indirectarg17 = alloca %"char[]", align 8
  %indirectarg18 = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr21 = alloca i64, align 8
  %indirectarg22 = alloca %"char[]", align 8
  %indirectarg23 = alloca %"char[]", align 8
  %indirectarg24 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg26 = alloca %"any[]", align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !3152
  %1 = icmp eq ptr %0, null, !dbg !3152
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !3152
  br i1 %2, label %panic, label %checkok, !dbg !3152

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !3153, !DIExpression(), !3154)
  %3 = load ptr, ptr %self, align 8, !dbg !3155
  %ptradd = getelementptr inbounds i8, ptr %3, i64 16, !dbg !3155
  %4 = load ptr, ptr %ptradd, align 8, !dbg !3155
  %i2nb = icmp eq ptr %4, null, !dbg !3155
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !3155

if.then:                                          ; preds = %checkok
  ret void, !dbg !3155

if.exit:                                          ; preds = %checkok
  %5 = load ptr, ptr %self, align 8, !dbg !3156
  %ptradd3 = getelementptr inbounds i8, ptr %5, i64 16, !dbg !3156
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator, ptr align 8 %ptradd3, i32 16, i1 false)
  %6 = load ptr, ptr %self, align 8, !dbg !3156
  %7 = load ptr, ptr %6, align 8
  store ptr %7, ptr %ptr, align 8
  %8 = load ptr, ptr %ptr, align 8, !dbg !3157
  %i2nb4 = icmp eq ptr %8, null, !dbg !3157
  br i1 %i2nb4, label %if.then5, label %if.exit6, !dbg !3157

if.then5:                                         ; preds = %if.exit
  br label %expr_block.exit, !dbg !3157

if.exit6:                                         ; preds = %if.exit
  %9 = load ptr, ptr %ptr, align 8, !dbg !3159
  %neq = icmp ne ptr %9, null, !dbg !3159
  br i1 %neq, label %assert_ok, label %assert_fail, !dbg !3159

assert_fail:                                      ; preds = %if.exit6
  store %"char[]" { ptr @.panic_msg.211, i64 75 }, ptr %indirectarg7, align 8
  store %"char[]" { ptr @.file.212, i64 16 }, ptr %indirectarg8, align 8
  store %"char[]" { ptr @.func.210, i64 4 }, ptr %indirectarg9, align 8
  %10 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %10(ptr align 8 %indirectarg7, ptr align 8 %indirectarg8, ptr align 8 %indirectarg9, i32 123) #5, !dbg !3159
  unreachable, !dbg !3159

assert_ok:                                        ; preds = %if.exit6
  %ptradd10 = getelementptr inbounds i8, ptr %allocator, i64 8, !dbg !3159
  %11 = load i64, ptr %ptradd10, align 8, !dbg !3159
  %12 = inttoptr i64 %11 to ptr, !dbg !3159
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !3152
  %13 = icmp eq ptr %12, %type, !dbg !3152
  br i1 %13, label %cache_hit, label %cache_miss, !dbg !3152

cache_miss:                                       ; preds = %assert_ok
  %ptradd11 = getelementptr inbounds i8, ptr %12, i64 16, !dbg !3152
  %14 = load ptr, ptr %ptradd11, align 8, !dbg !3152
  %15 = call ptr @.dyn_search(ptr %14, ptr @"$sel.release"), !dbg !3152
  store ptr %15, ptr %.inlinecache, align 8, !dbg !3152
  store ptr %12, ptr %.cachedtype, align 8, !dbg !3152
  br label %16, !dbg !3152

cache_hit:                                        ; preds = %assert_ok
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !3152
  br label %16, !dbg !3152

16:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %15, %cache_miss ], !dbg !3152
  %17 = icmp eq ptr %fn_phi, null, !dbg !3152
  br i1 %17, label %missing_function, label %match, !dbg !3152

missing_function:                                 ; preds = %16
  store %"char[]" { ptr @.panic_msg.213, i64 44 }, ptr %indirectarg12, align 8
  store %"char[]" { ptr @.file.212, i64 16 }, ptr %indirectarg13, align 8
  store %"char[]" { ptr @.func.210, i64 4 }, ptr %indirectarg14, align 8
  %18 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %18(ptr align 8 %indirectarg12, ptr align 8 %indirectarg13, ptr align 8 %indirectarg14, i32 123) #5, !dbg !3159
  unreachable, !dbg !3159

match:                                            ; preds = %16
  %19 = load ptr, ptr %allocator, align 8, !dbg !3159
  call void %fn_phi(ptr %19, ptr %9, i8 zeroext 0), !dbg !3159
  br label %expr_block.exit, !dbg !3159

expr_block.exit:                                  ; preds = %match, %if.then5
  %20 = load ptr, ptr %self, align 8, !dbg !3160
  %checknull = icmp eq ptr %20, null, !dbg !3160
  %21 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !3160
  br i1 %21, label %panic15, label %checkok19, !dbg !3160

checkok19:                                        ; preds = %expr_block.exit
  %22 = ptrtoint ptr %20 to i64, !dbg !3160
  %23 = urem i64 %22, 8, !dbg !3160
  %24 = icmp ne i64 %23, 0, !dbg !3160
  %25 = call i1 @llvm.expect.i1(i1 %24, i1 false), !dbg !3160
  br i1 %25, label %panic20, label %checkok27, !dbg !3160

checkok27:                                        ; preds = %checkok19
  call void @llvm.memset.p0.i64(ptr align 8 %20, i8 0, i64 32, i1 false), !dbg !3160
  ret void, !dbg !3160

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.245, i64 14 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.210, i64 4 }, ptr %indirectarg2, align 8
  %26 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %26(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 36) #5, !dbg !3154
  unreachable, !dbg !3154

panic15:                                          ; preds = %expr_block.exit
  store %"char[]" { ptr @.panic_msg.2, i64 45 }, ptr %indirectarg16, align 8
  store %"char[]" { ptr @.file.245, i64 14 }, ptr %indirectarg17, align 8
  store %"char[]" { ptr @.func.210, i64 4 }, ptr %indirectarg18, align 8
  %27 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %27(ptr align 8 %indirectarg16, ptr align 8 %indirectarg17, ptr align 8 %indirectarg18, i32 40) #5, !dbg !3160
  unreachable, !dbg !3160

panic20:                                          ; preds = %checkok19
  store i64 8, ptr %taddr, align 8
  %28 = insertvalue %any undef, ptr %taddr, 0
  %29 = insertvalue %any %28, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %23, ptr %taddr21, align 8
  %30 = insertvalue %any undef, ptr %taddr21, 0
  %31 = insertvalue %any %30, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg22, align 8
  store %"char[]" { ptr @.file.245, i64 14 }, ptr %indirectarg23, align 8
  store %"char[]" { ptr @.func.210, i64 4 }, ptr %indirectarg24, align 8
  store %any %29, ptr %varargslots, align 16
  %ptradd25 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %31, ptr %ptradd25, align 16
  %32 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %32, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg26, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg22, ptr align 8 %indirectarg23, ptr align 8 %indirectarg24, i32 40, ptr align 8 %indirectarg26) #5, !dbg !3160
  unreachable, !dbg !3160
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.MultiWriter.write(ptr %0, ptr %1, ptr align 8 %2) #0 comdat !dbg !3161 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %n = alloca i64, align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr9 = alloca i64, align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg13 = alloca %"any[]", align 8
  %.anon = alloca i64, align 8
  %w = alloca %any, align 8
  %indirectarg18 = alloca %"char[]", align 8
  %indirectarg19 = alloca %"char[]", align 8
  %indirectarg20 = alloca %"char[]", align 8
  %taddr23 = alloca i64, align 8
  %taddr24 = alloca i64, align 8
  %indirectarg25 = alloca %"char[]", align 8
  %indirectarg26 = alloca %"char[]", align 8
  %indirectarg27 = alloca %"char[]", align 8
  %varargslots28 = alloca [2 x %any], align 16
  %indirectarg31 = alloca %"any[]", align 8
  %taddr35 = alloca i64, align 8
  %taddr36 = alloca i64, align 8
  %indirectarg37 = alloca %"char[]", align 8
  %indirectarg38 = alloca %"char[]", align 8
  %indirectarg39 = alloca %"char[]", align 8
  %varargslots40 = alloca [2 x %any], align 16
  %indirectarg43 = alloca %"any[]", align 8
  %taddr46 = alloca i64, align 8
  %taddr47 = alloca i64, align 8
  %indirectarg48 = alloca %"char[]", align 8
  %indirectarg49 = alloca %"char[]", align 8
  %indirectarg50 = alloca %"char[]", align 8
  %varargslots51 = alloca [2 x %any], align 16
  %indirectarg54 = alloca %"any[]", align 8
  %error_var = alloca i64, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %indirectarg58 = alloca %"char[]", align 8
  %indirectarg59 = alloca %"char[]", align 8
  %indirectarg60 = alloca %"char[]", align 8
  %retparam = alloca i64, align 8
  %indirectarg61 = alloca %"char[]", align 8
  %reterr = alloca i64, align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !3164
  %3 = icmp eq ptr %1, null, !dbg !3164
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !3164
  br i1 %4, label %panic, label %checkok, !dbg !3164

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !3165, !DIExpression(), !3166)
    #dbg_declare(ptr %2, !3167, !DIExpression(), !3166)
    #dbg_declare(ptr %n, !3168, !DIExpression(), !3169)
  store i64 0, ptr %n, align 8, !dbg !3169
  %5 = load ptr, ptr %self, align 8, !dbg !3170
  %checknull = icmp eq ptr %5, null, !dbg !3170
  %6 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !3170
  br i1 %6, label %panic3, label %checkok7, !dbg !3170

checkok7:                                         ; preds = %checkok
  %7 = ptrtoint ptr %5 to i64, !dbg !3170
  %8 = urem i64 %7, 8, !dbg !3170
  %9 = icmp ne i64 %8, 0, !dbg !3170
  %10 = call i1 @llvm.expect.i1(i1 %9, i1 false), !dbg !3170
  br i1 %10, label %panic8, label %checkok14, !dbg !3170

checkok14:                                        ; preds = %checkok7
  %ptradd15 = getelementptr inbounds i8, ptr %5, i64 8, !dbg !3170
  %11 = load i64, ptr %ptradd15, align 8, !dbg !3170
    #dbg_declare(ptr %.anon, !3172, !DIExpression(), !3170)
  store i64 0, ptr %.anon, align 8, !dbg !3170
  br label %loop.cond, !dbg !3170

loop.cond:                                        ; preds = %if.exit, %checkok14
  %12 = load i64, ptr %.anon, align 8, !dbg !3170
  %lt = icmp ult i64 %12, %11, !dbg !3170
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !3170

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %w, !3173, !DIExpression(), !3175)
  %checknull16 = icmp eq ptr %5, null, !dbg !3175
  %13 = call i1 @llvm.expect.i1(i1 %checknull16, i1 false), !dbg !3175
  br i1 %13, label %panic17, label %checkok21, !dbg !3175

checkok21:                                        ; preds = %loop.body
  %14 = ptrtoint ptr %5 to i64, !dbg !3175
  %15 = urem i64 %14, 8, !dbg !3175
  %16 = icmp ne i64 %15, 0, !dbg !3175
  %17 = call i1 @llvm.expect.i1(i1 %16, i1 false), !dbg !3175
  br i1 %17, label %panic22, label %checkok32, !dbg !3175

checkok32:                                        ; preds = %checkok21
  %ptradd33 = getelementptr inbounds i8, ptr %5, i64 8, !dbg !3175
  %18 = load i64, ptr %ptradd33, align 8, !dbg !3175
  %19 = load ptr, ptr %5, align 8, !dbg !3175
  %20 = load i64, ptr %.anon, align 8, !dbg !3175
  %ge = icmp uge i64 %20, %18, !dbg !3175
  %21 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !3175
  br i1 %21, label %panic34, label %checkok44, !dbg !3175

checkok44:                                        ; preds = %checkok32
  %ptroffset = getelementptr inbounds [16 x i8], ptr %19, i64 %20, !dbg !3175
  %22 = ptrtoint ptr %ptroffset to i64, !dbg !3175
  %23 = urem i64 %22, 8, !dbg !3175
  %24 = icmp ne i64 %23, 0, !dbg !3175
  %25 = call i1 @llvm.expect.i1(i1 %24, i1 false), !dbg !3175
  br i1 %25, label %panic45, label %checkok55, !dbg !3175

checkok55:                                        ; preds = %checkok44
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %w, ptr align 8 %ptroffset, i32 16, i1 false), !dbg !3175
  %ptradd56 = getelementptr inbounds i8, ptr %w, i64 8, !dbg !3176
  %26 = load i64, ptr %ptradd56, align 8, !dbg !3176
  %27 = inttoptr i64 %26 to ptr, !dbg !3176
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !3164
  %28 = icmp eq ptr %27, %type, !dbg !3164
  br i1 %28, label %cache_hit, label %cache_miss, !dbg !3164

cache_miss:                                       ; preds = %checkok55
  %ptradd57 = getelementptr inbounds i8, ptr %27, i64 16, !dbg !3164
  %29 = load ptr, ptr %ptradd57, align 8, !dbg !3164
  %30 = call ptr @.dyn_search(ptr %29, ptr @"$sel.write"), !dbg !3164
  store ptr %30, ptr %.inlinecache, align 8, !dbg !3164
  store ptr %27, ptr %.cachedtype, align 8, !dbg !3164
  br label %31, !dbg !3164

cache_hit:                                        ; preds = %checkok55
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !3164
  br label %31, !dbg !3164

31:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %30, %cache_miss ], !dbg !3164
  %32 = icmp eq ptr %fn_phi, null, !dbg !3164
  br i1 %32, label %missing_function, label %match, !dbg !3164

missing_function:                                 ; preds = %31
  store %"char[]" { ptr @.panic_msg.18, i64 42 }, ptr %indirectarg58, align 8
  store %"char[]" { ptr @.file.245, i64 14 }, ptr %indirectarg59, align 8
  store %"char[]" { ptr @.func.202, i64 5 }, ptr %indirectarg60, align 8
  %33 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %33(ptr align 8 %indirectarg58, ptr align 8 %indirectarg59, ptr align 8 %indirectarg60, i32 48) #5, !dbg !3176
  unreachable, !dbg !3176

match:                                            ; preds = %31
  %34 = load ptr, ptr %w, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg61, ptr align 8 %2, i32 16, i1 false)
  %35 = call i64 %fn_phi(ptr %retparam, ptr %34, ptr align 8 %indirectarg61), !dbg !3176
  %not_err = icmp eq i64 %35, 0, !dbg !3176
  %36 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !3176
  br i1 %36, label %after_check, label %assign_optional, !dbg !3176

assign_optional:                                  ; preds = %match
  store i64 %35, ptr %error_var, align 8, !dbg !3176
  br label %guard_block, !dbg !3176

after_check:                                      ; preds = %match
  br label %noerr_block, !dbg !3176

guard_block:                                      ; preds = %assign_optional
  %37 = load i64, ptr %error_var, align 8, !dbg !3176
  ret i64 %37, !dbg !3176

noerr_block:                                      ; preds = %after_check
  %38 = load i64, ptr %retparam, align 8, !dbg !3176
  store i64 %38, ptr %n, align 8, !dbg !3176
  %39 = load i64, ptr %n, align 8, !dbg !3178
  %ptradd62 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !3178
  %40 = load i64, ptr %ptradd62, align 8, !dbg !3178
  %neq = icmp ne i64 %39, %40, !dbg !3178
  br i1 %neq, label %if.then, label %if.exit, !dbg !3178

if.then:                                          ; preds = %noerr_block
  ret i64 ptrtoint (ptr @std.io.INCOMPLETE_WRITE to i64), !dbg !3178

if.exit:                                          ; preds = %noerr_block
  %41 = load i64, ptr %.anon, align 8, !dbg !3170
  %addnuw = add nuw i64 %41, 1, !dbg !3170
  store i64 %addnuw, ptr %.anon, align 8, !dbg !3170
  br label %loop.cond, !dbg !3170

loop.exit:                                        ; preds = %loop.cond
  %ptradd63 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !3179
  %42 = load i64, ptr %ptradd63, align 8, !dbg !3179
  store i64 %42, ptr %0, align 8, !dbg !3179
  ret i64 0, !dbg !3179

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.245, i64 14 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.202, i64 5 }, ptr %indirectarg2, align 8
  %43 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %43(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 43) #5, !dbg !3166
  unreachable, !dbg !3166

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.248, i64 53 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.245, i64 14 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.202, i64 5 }, ptr %indirectarg6, align 8
  %44 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %44(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 46) #5, !dbg !3170
  unreachable, !dbg !3170

panic8:                                           ; preds = %checkok7
  store i64 8, ptr %taddr, align 8
  %45 = insertvalue %any undef, ptr %taddr, 0
  %46 = insertvalue %any %45, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %8, ptr %taddr9, align 8
  %47 = insertvalue %any undef, ptr %taddr9, 0
  %48 = insertvalue %any %47, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.file.245, i64 14 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.func.202, i64 5 }, ptr %indirectarg12, align 8
  store %any %46, ptr %varargslots, align 16
  %ptradd = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %48, ptr %ptradd, align 16
  %49 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %49, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg13, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, i32 46, ptr align 8 %indirectarg13) #5, !dbg !3170
  unreachable, !dbg !3170

panic17:                                          ; preds = %loop.body
  store %"char[]" { ptr @.panic_msg.248, i64 53 }, ptr %indirectarg18, align 8
  store %"char[]" { ptr @.file.245, i64 14 }, ptr %indirectarg19, align 8
  store %"char[]" { ptr @.func.202, i64 5 }, ptr %indirectarg20, align 8
  %50 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %50(ptr align 8 %indirectarg18, ptr align 8 %indirectarg19, ptr align 8 %indirectarg20, i32 46) #5, !dbg !3175
  unreachable, !dbg !3175

panic22:                                          ; preds = %checkok21
  store i64 8, ptr %taddr23, align 8
  %51 = insertvalue %any undef, ptr %taddr23, 0
  %52 = insertvalue %any %51, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %15, ptr %taddr24, align 8
  %53 = insertvalue %any undef, ptr %taddr24, 0
  %54 = insertvalue %any %53, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg25, align 8
  store %"char[]" { ptr @.file.245, i64 14 }, ptr %indirectarg26, align 8
  store %"char[]" { ptr @.func.202, i64 5 }, ptr %indirectarg27, align 8
  store %any %52, ptr %varargslots28, align 16
  %ptradd29 = getelementptr inbounds i8, ptr %varargslots28, i64 16
  store %any %54, ptr %ptradd29, align 16
  %55 = insertvalue %"any[]" undef, ptr %varargslots28, 0
  %"$$temp30" = insertvalue %"any[]" %55, i64 2, 1
  store %"any[]" %"$$temp30", ptr %indirectarg31, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg25, ptr align 8 %indirectarg26, ptr align 8 %indirectarg27, i32 46, ptr align 8 %indirectarg31) #5, !dbg !3175
  unreachable, !dbg !3175

panic34:                                          ; preds = %checkok32
  store i64 %18, ptr %taddr35, align 8
  %56 = insertvalue %any undef, ptr %taddr35, 0
  %57 = insertvalue %any %56, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %20, ptr %taddr36, align 8
  %58 = insertvalue %any undef, ptr %taddr36, 0
  %59 = insertvalue %any %58, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.71, i64 59 }, ptr %indirectarg37, align 8
  store %"char[]" { ptr @.file.245, i64 14 }, ptr %indirectarg38, align 8
  store %"char[]" { ptr @.func.202, i64 5 }, ptr %indirectarg39, align 8
  store %any %57, ptr %varargslots40, align 16
  %ptradd41 = getelementptr inbounds i8, ptr %varargslots40, i64 16
  store %any %59, ptr %ptradd41, align 16
  %60 = insertvalue %"any[]" undef, ptr %varargslots40, 0
  %"$$temp42" = insertvalue %"any[]" %60, i64 2, 1
  store %"any[]" %"$$temp42", ptr %indirectarg43, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg37, ptr align 8 %indirectarg38, ptr align 8 %indirectarg39, i32 46, ptr align 8 %indirectarg43) #5, !dbg !3175
  unreachable, !dbg !3175

panic45:                                          ; preds = %checkok44
  store i64 8, ptr %taddr46, align 8
  %61 = insertvalue %any undef, ptr %taddr46, 0
  %62 = insertvalue %any %61, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %23, ptr %taddr47, align 8
  %63 = insertvalue %any undef, ptr %taddr47, 0
  %64 = insertvalue %any %63, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg48, align 8
  store %"char[]" { ptr @.file.245, i64 14 }, ptr %indirectarg49, align 8
  store %"char[]" { ptr @.func.202, i64 5 }, ptr %indirectarg50, align 8
  store %any %62, ptr %varargslots51, align 16
  %ptradd52 = getelementptr inbounds i8, ptr %varargslots51, i64 16
  store %any %64, ptr %ptradd52, align 16
  %65 = insertvalue %"any[]" undef, ptr %varargslots51, 0
  %"$$temp53" = insertvalue %"any[]" %65, i64 2, 1
  store %"any[]" %"$$temp53", ptr %indirectarg54, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg48, ptr align 8 %indirectarg49, ptr align 8 %indirectarg50, i32 46, ptr align 8 %indirectarg54) #5, !dbg !3175
  unreachable, !dbg !3175
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.MultiWriter.write_byte(ptr %0, i8 %1) #0 comdat !dbg !3180 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %c = alloca i8, align 1
  %data = alloca [1 x i8], align 1
  %error_var = alloca i64, align 8
  %retparam = alloca i64, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !3183
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !3183
  br i1 %3, label %panic, label %checkok, !dbg !3183

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !3184, !DIExpression(), !3185)
  store i8 %1, ptr %c, align 1
    #dbg_declare(ptr %c, !3186, !DIExpression(), !3185)
    #dbg_declare(ptr %data, !3187, !DIExpression(), !3188)
  store i8 0, ptr %data, align 1, !dbg !3188
  %4 = load i8, ptr %c, align 1, !dbg !3189
  store i8 %4, ptr %data, align 1, !dbg !3189
  %5 = insertvalue %"char[]" undef, ptr %data, 0, !dbg !3190
  %6 = insertvalue %"char[]" %5, i64 1, 1, !dbg !3190
  %7 = load ptr, ptr %self, align 8
  store %"char[]" %6, ptr %indirectarg3, align 8
  %8 = call i64 @std.io.MultiWriter.write(ptr %retparam, ptr %7, ptr align 8 %indirectarg3), !dbg !3190
  %not_err = icmp eq i64 %8, 0, !dbg !3190
  %9 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !3190
  br i1 %9, label %after_check, label %assign_optional, !dbg !3190

assign_optional:                                  ; preds = %checkok
  store i64 %8, ptr %error_var, align 8, !dbg !3190
  br label %guard_block, !dbg !3190

after_check:                                      ; preds = %checkok
  br label %noerr_block, !dbg !3190

guard_block:                                      ; preds = %assign_optional
  %10 = load i64, ptr %error_var, align 8, !dbg !3190
  ret i64 %10, !dbg !3190

noerr_block:                                      ; preds = %after_check
  ret i64 0, !dbg !3190

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.245, i64 14 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.203, i64 10 }, ptr %indirectarg2, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 54) #5, !dbg !3185
  unreachable, !dbg !3185
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.io.Scanner.init(ptr %0, ptr align 8 %1, ptr align 8 %2) #0 comdat !dbg !3191 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %.assign_list = alloca %Scanner, align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr13 = alloca i64, align 8
  %indirectarg14 = alloca %"char[]", align 8
  %indirectarg15 = alloca %"char[]", align 8
  %indirectarg16 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg18 = alloca %"any[]", align 8
  %3 = icmp eq ptr %0, null, !dbg !3202
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !3202
  br i1 %4, label %panic, label %checkok, !dbg !3202

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !3203, !DIExpression(), !3204)
    #dbg_declare(ptr %1, !3205, !DIExpression(), !3204)
    #dbg_declare(ptr %2, !3206, !DIExpression(), !3204)
  %ptradd = getelementptr inbounds i8, ptr %2, i64 8, !dbg !3207
  %5 = load i64, ptr %ptradd, align 8, !dbg !3207
  %lt = icmp ult i64 0, %5, !dbg !3207
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !3207

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.250, i64 65 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.file.249, i64 10 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg5, align 8
  %6 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %6(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, i32 17) #5, !dbg !3207
  unreachable, !dbg !3207

assert_ok:                                        ; preds = %checkok
  call void @llvm.memset.p0.i64(ptr align 8 %.assign_list, i8 0, i64 48, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %.assign_list, ptr align 8 %1, i32 16, i1 false), !dbg !3209
  %ptradd6 = getelementptr inbounds i8, ptr %.assign_list, i64 16, !dbg !3209
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %ptradd6, ptr align 8 %2, i32 16, i1 false), !dbg !3209
  %7 = load ptr, ptr %self, align 8, !dbg !3209
  %checknull = icmp eq ptr %7, null, !dbg !3209
  %8 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !3209
  br i1 %8, label %panic7, label %checkok11, !dbg !3209

checkok11:                                        ; preds = %assert_ok
  %9 = ptrtoint ptr %7 to i64, !dbg !3209
  %10 = urem i64 %9, 8, !dbg !3209
  %11 = icmp ne i64 %10, 0, !dbg !3209
  %12 = call i1 @llvm.expect.i1(i1 %11, i1 false), !dbg !3209
  br i1 %12, label %panic12, label %checkok19, !dbg !3209

checkok19:                                        ; preds = %checkok11
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %7, ptr align 8 %.assign_list, i32 48, i1 false), !dbg !3209
  ret void, !dbg !3209

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.249, i64 10 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg2, align 8
  %13 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %13(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 19) #5, !dbg !3204
  unreachable, !dbg !3204

panic7:                                           ; preds = %assert_ok
  store %"char[]" { ptr @.panic_msg.2, i64 45 }, ptr %indirectarg8, align 8
  store %"char[]" { ptr @.file.249, i64 10 }, ptr %indirectarg9, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg10, align 8
  %14 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %14(ptr align 8 %indirectarg8, ptr align 8 %indirectarg9, ptr align 8 %indirectarg10, i32 21) #5, !dbg !3209
  unreachable, !dbg !3209

panic12:                                          ; preds = %checkok11
  store i64 8, ptr %taddr, align 8
  %15 = insertvalue %any undef, ptr %taddr, 0
  %16 = insertvalue %any %15, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %10, ptr %taddr13, align 8
  %17 = insertvalue %any undef, ptr %taddr13, 0
  %18 = insertvalue %any %17, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg14, align 8
  store %"char[]" { ptr @.file.249, i64 10 }, ptr %indirectarg15, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg16, align 8
  store %any %16, ptr %varargslots, align 16
  %ptradd17 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %18, ptr %ptradd17, align 16
  %19 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %19, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg18, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg14, ptr align 8 %indirectarg15, ptr align 8 %indirectarg16, i32 21, ptr align 8 %indirectarg18) #5, !dbg !3209
  unreachable, !dbg !3209
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.io.Scanner.flush(ptr noalias sret(%"char[]") align 8 %0, ptr %1) #0 comdat !dbg !3210 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %n = alloca i64, align 8
  %buf = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr12 = alloca i64, align 8
  %indirectarg13 = alloca %"char[]", align 8
  %indirectarg14 = alloca %"char[]", align 8
  %indirectarg15 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg17 = alloca %"any[]", align 8
  %taddr22 = alloca i64, align 8
  %indirectarg23 = alloca %"char[]", align 8
  %indirectarg24 = alloca %"char[]", align 8
  %indirectarg25 = alloca %"char[]", align 8
  %varargslots26 = alloca [1 x %any], align 16
  %indirectarg28 = alloca %"any[]", align 8
  %taddr32 = alloca i64, align 8
  %taddr33 = alloca i64, align 8
  %indirectarg34 = alloca %"char[]", align 8
  %indirectarg35 = alloca %"char[]", align 8
  %indirectarg36 = alloca %"char[]", align 8
  %varargslots37 = alloca [2 x %any], align 16
  %indirectarg40 = alloca %"any[]", align 8
  %2 = icmp eq ptr %1, null, !dbg !3213
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !3213
  br i1 %3, label %panic, label %checkok, !dbg !3213

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !3214, !DIExpression(), !3215)
  %4 = load ptr, ptr %self, align 8, !dbg !3216
  %ptradd = getelementptr inbounds i8, ptr %4, i64 40, !dbg !3216
  %5 = load i64, ptr %ptradd, align 8, !dbg !3216
  %6 = load ptr, ptr %self, align 8, !dbg !3216
  %ptradd3 = getelementptr inbounds i8, ptr %6, i64 32, !dbg !3216
  %7 = load i64, ptr %ptradd3, align 8, !dbg !3216
  %ge = icmp uge i64 %5, %7, !dbg !3216
  br i1 %ge, label %assert_ok, label %assert_fail, !dbg !3216

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.251, i64 50 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.249, i64 10 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.10, i64 5 }, ptr %indirectarg6, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 30) #5, !dbg !3216
  unreachable, !dbg !3216

assert_ok:                                        ; preds = %checkok
    #dbg_declare(ptr %n, !3217, !DIExpression(), !3218)
  %9 = load ptr, ptr %self, align 8, !dbg !3218
  %ptradd7 = getelementptr inbounds i8, ptr %9, i64 40, !dbg !3218
  %10 = load i64, ptr %ptradd7, align 8, !dbg !3218
  %11 = load ptr, ptr %self, align 8, !dbg !3218
  %ptradd8 = getelementptr inbounds i8, ptr %11, i64 32, !dbg !3218
  %12 = load i64, ptr %ptradd8, align 8, !dbg !3218
  %sub = sub i64 %10, %12, !dbg !3218
  store i64 %sub, ptr %n, align 8, !dbg !3218
    #dbg_declare(ptr %buf, !3219, !DIExpression(), !3220)
  %13 = load ptr, ptr %self, align 8, !dbg !3220
  %ptradd9 = getelementptr inbounds i8, ptr %13, i64 16, !dbg !3220
  %14 = load %"char[]", ptr %ptradd9, align 8, !dbg !3220
  %15 = extractvalue %"char[]" %14, 0, !dbg !3220
  %16 = load ptr, ptr %self, align 8, !dbg !3220
  %ptradd10 = getelementptr inbounds i8, ptr %16, i64 32, !dbg !3220
  %17 = load i64, ptr %ptradd10, align 8, !dbg !3220
  %18 = extractvalue %"char[]" %14, 1, !dbg !3220
  %gt = icmp ugt i64 %17, %18, !dbg !3220
  %19 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !3220
  br i1 %19, label %panic11, label %checkok18, !dbg !3220

checkok18:                                        ; preds = %assert_ok
  %20 = load i64, ptr %n, align 8, !dbg !3220
  %add = add i64 %17, %20, !dbg !3220
  %gt19 = icmp ugt i64 %17, %add, !dbg !3220
  %sub20 = sub i64 %add, %17, !dbg !3220
  %21 = call i1 @llvm.expect.i1(i1 %gt19, i1 false), !dbg !3220
  br i1 %21, label %panic21, label %checkok29, !dbg !3220

checkok29:                                        ; preds = %checkok18
  %lt = icmp ult i64 %18, %add, !dbg !3220
  %sub30 = sub i64 %add, 1, !dbg !3220
  %22 = call i1 @llvm.expect.i1(i1 %lt, i1 false), !dbg !3220
  br i1 %22, label %panic31, label %checkok41, !dbg !3220

checkok41:                                        ; preds = %checkok29
  %size = sub i64 %add, %17, !dbg !3220
  %ptradd42 = getelementptr inbounds i8, ptr %15, i64 %17, !dbg !3220
  %23 = insertvalue %"char[]" undef, ptr %ptradd42, 0, !dbg !3220
  %24 = insertvalue %"char[]" %23, i64 %size, 1, !dbg !3220
  store %"char[]" %24, ptr %buf, align 8, !dbg !3220
  %25 = load ptr, ptr %self, align 8, !dbg !3221
  %ptradd43 = getelementptr inbounds i8, ptr %25, i64 32, !dbg !3221
  store i64 0, ptr %ptradd43, align 8, !dbg !3221
  %26 = load ptr, ptr %self, align 8, !dbg !3222
  %ptradd44 = getelementptr inbounds i8, ptr %26, i64 40, !dbg !3222
  store i64 0, ptr %ptradd44, align 8, !dbg !3222
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %buf, i32 16, i1 false), !dbg !3223
  ret void, !dbg !3223

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.249, i64 10 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.10, i64 5 }, ptr %indirectarg2, align 8
  %27 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %27(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 28) #5, !dbg !3215
  unreachable, !dbg !3215

panic11:                                          ; preds = %assert_ok
  store i64 %18, ptr %taddr, align 8
  %28 = insertvalue %any undef, ptr %taddr, 0
  %29 = insertvalue %any %28, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %17, ptr %taddr12, align 8
  %30 = insertvalue %any undef, ptr %taddr12, 0
  %31 = insertvalue %any %30, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.170, i64 61 }, ptr %indirectarg13, align 8
  store %"char[]" { ptr @.file.249, i64 10 }, ptr %indirectarg14, align 8
  store %"char[]" { ptr @.func.10, i64 5 }, ptr %indirectarg15, align 8
  store %any %29, ptr %varargslots, align 16
  %ptradd16 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %31, ptr %ptradd16, align 16
  %32 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %32, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg17, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg13, ptr align 8 %indirectarg14, ptr align 8 %indirectarg15, i32 32, ptr align 8 %indirectarg17) #5, !dbg !3220
  unreachable, !dbg !3220

panic21:                                          ; preds = %checkok18
  store i64 %sub20, ptr %taddr22, align 8
  %33 = insertvalue %any undef, ptr %taddr22, 0
  %34 = insertvalue %any %33, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.16, i64 43 }, ptr %indirectarg23, align 8
  store %"char[]" { ptr @.file.249, i64 10 }, ptr %indirectarg24, align 8
  store %"char[]" { ptr @.func.10, i64 5 }, ptr %indirectarg25, align 8
  store %any %34, ptr %varargslots26, align 16
  %35 = insertvalue %"any[]" undef, ptr %varargslots26, 0
  %"$$temp27" = insertvalue %"any[]" %35, i64 1, 1
  store %"any[]" %"$$temp27", ptr %indirectarg28, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg23, ptr align 8 %indirectarg24, ptr align 8 %indirectarg25, i32 32, ptr align 8 %indirectarg28) #5, !dbg !3220
  unreachable, !dbg !3220

panic31:                                          ; preds = %checkok29
  store i64 %sub30, ptr %taddr32, align 8
  %36 = insertvalue %any undef, ptr %taddr32, 0
  %37 = insertvalue %any %36, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %18, ptr %taddr33, align 8
  %38 = insertvalue %any undef, ptr %taddr33, 0
  %39 = insertvalue %any %38, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 60 }, ptr %indirectarg34, align 8
  store %"char[]" { ptr @.file.249, i64 10 }, ptr %indirectarg35, align 8
  store %"char[]" { ptr @.func.10, i64 5 }, ptr %indirectarg36, align 8
  store %any %37, ptr %varargslots37, align 16
  %ptradd38 = getelementptr inbounds i8, ptr %varargslots37, i64 16
  store %any %39, ptr %ptradd38, align 16
  %40 = insertvalue %"any[]" undef, ptr %varargslots37, 0
  %"$$temp39" = insertvalue %"any[]" %40, i64 2, 1
  store %"any[]" %"$$temp39", ptr %indirectarg40, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg34, ptr align 8 %indirectarg35, ptr align 8 %indirectarg36, i32 32, ptr align 8 %indirectarg40) #5, !dbg !3220
  unreachable, !dbg !3220
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.Scanner.close(ptr %0) #0 comdat !dbg !3224 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %reterr = alloca i64, align 8
  %.inlinecache4 = alloca ptr, align 8
  %.cachedtype5 = alloca ptr, align 8
  %indirectarg12 = alloca %"char[]", align 8
  %indirectarg13 = alloca %"char[]", align 8
  %indirectarg14 = alloca %"char[]", align 8
  store ptr null, ptr %.cachedtype5, align 8, !dbg !3227
  store ptr null, ptr %.cachedtype, align 8, !dbg !3227
  %1 = icmp eq ptr %0, null, !dbg !3227
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !3227
  br i1 %2, label %panic, label %checkok, !dbg !3227

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !3228, !DIExpression(), !3229)
  %3 = load ptr, ptr %self, align 8, !dbg !3230
  %4 = load %any, ptr %3, align 8, !dbg !3230
  %5 = extractvalue %any %4, 1, !dbg !3230
  %6 = inttoptr i64 %5 to ptr, !dbg !3230
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !3227
  %7 = icmp eq ptr %6, %type, !dbg !3227
  br i1 %7, label %cache_hit, label %cache_miss, !dbg !3227

cache_miss:                                       ; preds = %checkok
  %ptradd = getelementptr inbounds i8, ptr %6, i64 16, !dbg !3227
  %8 = load ptr, ptr %ptradd, align 8, !dbg !3227
  %9 = call ptr @.dyn_search(ptr %8, ptr @"$sel.close"), !dbg !3227
  store ptr %9, ptr %.inlinecache, align 8, !dbg !3227
  store ptr %6, ptr %.cachedtype, align 8, !dbg !3227
  br label %10, !dbg !3227

cache_hit:                                        ; preds = %checkok
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !3227
  br label %10, !dbg !3227

10:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %9, %cache_miss ], !dbg !3227
  %i2b = icmp ne ptr %fn_phi, null, !dbg !3227
  br i1 %i2b, label %if.then, label %if.exit, !dbg !3227

if.then:                                          ; preds = %10
  %11 = load ptr, ptr %self, align 8, !dbg !3230
  %ptradd3 = getelementptr inbounds i8, ptr %11, i64 8, !dbg !3230
  %12 = load i64, ptr %ptradd3, align 8, !dbg !3230
  %13 = inttoptr i64 %12 to ptr, !dbg !3230
  %type6 = load ptr, ptr %.cachedtype5, align 8, !dbg !3227
  %14 = icmp eq ptr %13, %type6, !dbg !3227
  br i1 %14, label %cache_hit9, label %cache_miss7, !dbg !3227

cache_miss7:                                      ; preds = %if.then
  %ptradd8 = getelementptr inbounds i8, ptr %13, i64 16, !dbg !3227
  %15 = load ptr, ptr %ptradd8, align 8, !dbg !3227
  %16 = call ptr @.dyn_search(ptr %15, ptr @"$sel.close"), !dbg !3227
  store ptr %16, ptr %.inlinecache4, align 8, !dbg !3227
  store ptr %13, ptr %.cachedtype5, align 8, !dbg !3227
  br label %17, !dbg !3227

cache_hit9:                                       ; preds = %if.then
  %cache_hit_fn10 = load ptr, ptr %.inlinecache4, align 8, !dbg !3227
  br label %17, !dbg !3227

17:                                               ; preds = %cache_hit9, %cache_miss7
  %fn_phi11 = phi ptr [ %cache_hit_fn10, %cache_hit9 ], [ %16, %cache_miss7 ], !dbg !3227
  %18 = icmp eq ptr %fn_phi11, null, !dbg !3227
  br i1 %18, label %missing_function, label %match, !dbg !3227

missing_function:                                 ; preds = %17
  store %"char[]" { ptr @.panic_msg.195, i64 42 }, ptr %indirectarg12, align 8
  store %"char[]" { ptr @.file.249, i64 10 }, ptr %indirectarg13, align 8
  store %"char[]" { ptr @.func.194, i64 5 }, ptr %indirectarg14, align 8
  %19 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %19(ptr align 8 %indirectarg12, ptr align 8 %indirectarg13, ptr align 8 %indirectarg14, i32 40) #5, !dbg !3230
  unreachable, !dbg !3230

match:                                            ; preds = %17
  %20 = load ptr, ptr %11, align 8, !dbg !3230
  %21 = call i64 %fn_phi11(ptr %20), !dbg !3230
  %not_err = icmp eq i64 %21, 0, !dbg !3230
  %22 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !3230
  br i1 %22, label %after_check, label %assign_optional, !dbg !3230

assign_optional:                                  ; preds = %match
  store i64 %21, ptr %reterr, align 8, !dbg !3230
  br label %err_retblock, !dbg !3230

after_check:                                      ; preds = %match
  ret i64 0, !dbg !3230

err_retblock:                                     ; preds = %assign_optional
  %23 = load i64, ptr %reterr, align 8, !dbg !3230
  ret i64 %23, !dbg !3230

if.exit:                                          ; preds = %10
  ret i64 0, !dbg !3230

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.249, i64 10 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.194, i64 5 }, ptr %indirectarg2, align 8
  %24 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %24(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 38) #5, !dbg !3229
  unreachable, !dbg !3229
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.Scanner.scan(ptr %0, ptr %1, ptr align 8 %2) #0 comdat !dbg !3231 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %error_var = alloca i64, align 8
  %self15 = alloca ptr, align 8
  %buf = alloca %"char[]", align 8
  %indirectarg18 = alloca %"char[]", align 8
  %indirectarg19 = alloca %"char[]", align 8
  %indirectarg20 = alloca %"char[]", align 8
  %n = alloca i64, align 8
  %n.f = alloca i64, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %indirectarg24 = alloca %"char[]", align 8
  %indirectarg25 = alloca %"char[]", align 8
  %indirectarg26 = alloca %"char[]", align 8
  %retparam = alloca i64, align 8
  %indirectarg27 = alloca %"char[]", align 8
  %err = alloca i64, align 8
  %indirectarg41 = alloca %"char[]", align 8
  %indirectarg42 = alloca %"char[]", align 8
  %indirectarg43 = alloca %"char[]", align 8
  %n45 = alloca i64, align 8
  %buf48 = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr53 = alloca i64, align 8
  %indirectarg54 = alloca %"char[]", align 8
  %indirectarg55 = alloca %"char[]", align 8
  %indirectarg56 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg58 = alloca %"any[]", align 8
  %taddr63 = alloca i64, align 8
  %indirectarg64 = alloca %"char[]", align 8
  %indirectarg65 = alloca %"char[]", align 8
  %indirectarg66 = alloca %"char[]", align 8
  %varargslots67 = alloca [1 x %any], align 16
  %indirectarg69 = alloca %"any[]", align 8
  %taddr74 = alloca i64, align 8
  %taddr75 = alloca i64, align 8
  %indirectarg76 = alloca %"char[]", align 8
  %indirectarg77 = alloca %"char[]", align 8
  %indirectarg78 = alloca %"char[]", align 8
  %varargslots79 = alloca [2 x %any], align 16
  %indirectarg82 = alloca %"any[]", align 8
  %i = alloca i64, align 8
  %self85 = alloca ptr, align 8
  %buf86 = alloca %"char[]", align 8
  %pattern = alloca %"char[]", align 8
  %indirectarg89 = alloca %"char[]", align 8
  %indirectarg90 = alloca %"char[]", align 8
  %indirectarg91 = alloca %"char[]", align 8
  %indirectarg95 = alloca %"char[]", align 8
  %indirectarg96 = alloca %"char[]", align 8
  %indirectarg97 = alloca %"char[]", align 8
  %retparam99 = alloca i64, align 8
  %indirectarg100 = alloca %"char[]", align 8
  %indirectarg101 = alloca %"char[]", align 8
  %reterr = alloca i64, align 8
  %taddr111 = alloca i64, align 8
  %taddr112 = alloca i64, align 8
  %indirectarg113 = alloca %"char[]", align 8
  %indirectarg114 = alloca %"char[]", align 8
  %indirectarg115 = alloca %"char[]", align 8
  %varargslots116 = alloca [2 x %any], align 16
  %indirectarg119 = alloca %"any[]", align 8
  %taddr125 = alloca i64, align 8
  %indirectarg126 = alloca %"char[]", align 8
  %indirectarg127 = alloca %"char[]", align 8
  %indirectarg128 = alloca %"char[]", align 8
  %varargslots129 = alloca [1 x %any], align 16
  %indirectarg131 = alloca %"any[]", align 8
  %taddr136 = alloca i64, align 8
  %taddr137 = alloca i64, align 8
  %indirectarg138 = alloca %"char[]", align 8
  %indirectarg139 = alloca %"char[]", align 8
  %indirectarg140 = alloca %"char[]", align 8
  %varargslots141 = alloca [2 x %any], align 16
  %indirectarg144 = alloca %"any[]", align 8
  %taddr159 = alloca i64, align 8
  %taddr160 = alloca i64, align 8
  %indirectarg161 = alloca %"char[]", align 8
  %indirectarg162 = alloca %"char[]", align 8
  %indirectarg163 = alloca %"char[]", align 8
  %varargslots164 = alloca [2 x %any], align 16
  %indirectarg167 = alloca %"any[]", align 8
  %taddr173 = alloca i64, align 8
  %taddr174 = alloca i64, align 8
  %indirectarg175 = alloca %"char[]", align 8
  %indirectarg176 = alloca %"char[]", align 8
  %indirectarg177 = alloca %"char[]", align 8
  %varargslots178 = alloca [2 x %any], align 16
  %indirectarg181 = alloca %"any[]", align 8
  %taddr187 = alloca i64, align 8
  %indirectarg188 = alloca %"char[]", align 8
  %indirectarg189 = alloca %"char[]", align 8
  %indirectarg190 = alloca %"char[]", align 8
  %varargslots191 = alloca [1 x %any], align 16
  %indirectarg193 = alloca %"any[]", align 8
  %taddr198 = alloca i64, align 8
  %taddr199 = alloca i64, align 8
  %indirectarg200 = alloca %"char[]", align 8
  %indirectarg201 = alloca %"char[]", align 8
  %indirectarg202 = alloca %"char[]", align 8
  %varargslots203 = alloca [2 x %any], align 16
  %indirectarg206 = alloca %"any[]", align 8
  %taddr211 = alloca i64, align 8
  %taddr212 = alloca i64, align 8
  %indirectarg213 = alloca %"char[]", align 8
  %indirectarg214 = alloca %"char[]", align 8
  %indirectarg215 = alloca %"char[]", align 8
  %varargslots216 = alloca [2 x %any], align 16
  %indirectarg219 = alloca %"any[]", align 8
  %taddr225 = alloca i64, align 8
  %taddr226 = alloca i64, align 8
  %indirectarg227 = alloca %"char[]", align 8
  %indirectarg228 = alloca %"char[]", align 8
  %indirectarg229 = alloca %"char[]", align 8
  %varargslots230 = alloca [2 x %any], align 16
  %indirectarg233 = alloca %"any[]", align 8
  %p = alloca i64, align 8
  %error_var237 = alloca i64, align 8
  %self238 = alloca ptr, align 8
  %buf239 = alloca %"char[]", align 8
  %indirectarg242 = alloca %"char[]", align 8
  %indirectarg243 = alloca %"char[]", align 8
  %indirectarg244 = alloca %"char[]", align 8
  %n246 = alloca i64, align 8
  %n.f247 = alloca i64, align 8
  %.inlinecache249 = alloca ptr, align 8
  %.cachedtype250 = alloca ptr, align 8
  %indirectarg258 = alloca %"char[]", align 8
  %indirectarg259 = alloca %"char[]", align 8
  %indirectarg260 = alloca %"char[]", align 8
  %retparam262 = alloca i64, align 8
  %indirectarg263 = alloca %"char[]", align 8
  %err268 = alloca i64, align 8
  %taddr287 = alloca i64, align 8
  %taddr288 = alloca i64, align 8
  %indirectarg289 = alloca %"char[]", align 8
  %indirectarg290 = alloca %"char[]", align 8
  %indirectarg291 = alloca %"char[]", align 8
  %varargslots292 = alloca [2 x %any], align 16
  %indirectarg295 = alloca %"any[]", align 8
  %taddr301 = alloca i64, align 8
  %indirectarg302 = alloca %"char[]", align 8
  %indirectarg303 = alloca %"char[]", align 8
  %indirectarg304 = alloca %"char[]", align 8
  %varargslots305 = alloca [1 x %any], align 16
  %indirectarg307 = alloca %"any[]", align 8
  %taddr312 = alloca i64, align 8
  %taddr313 = alloca i64, align 8
  %indirectarg314 = alloca %"char[]", align 8
  %indirectarg315 = alloca %"char[]", align 8
  %indirectarg316 = alloca %"char[]", align 8
  %varargslots317 = alloca [2 x %any], align 16
  %indirectarg320 = alloca %"any[]", align 8
  %i323 = alloca i64, align 8
  %error_var324 = alloca i64, align 8
  %self325 = alloca ptr, align 8
  %buf326 = alloca %"char[]", align 8
  %pattern327 = alloca %"char[]", align 8
  %indirectarg330 = alloca %"char[]", align 8
  %indirectarg331 = alloca %"char[]", align 8
  %indirectarg332 = alloca %"char[]", align 8
  %indirectarg336 = alloca %"char[]", align 8
  %indirectarg337 = alloca %"char[]", align 8
  %indirectarg338 = alloca %"char[]", align 8
  %retparam340 = alloca i64, align 8
  %indirectarg341 = alloca %"char[]", align 8
  %indirectarg342 = alloca %"char[]", align 8
  %reterr352 = alloca i64, align 8
  %taddr356 = alloca i64, align 8
  %taddr357 = alloca i64, align 8
  %indirectarg358 = alloca %"char[]", align 8
  %indirectarg359 = alloca %"char[]", align 8
  %indirectarg360 = alloca %"char[]", align 8
  %varargslots361 = alloca [2 x %any], align 16
  %indirectarg364 = alloca %"any[]", align 8
  %taddr371 = alloca i64, align 8
  %indirectarg372 = alloca %"char[]", align 8
  %indirectarg373 = alloca %"char[]", align 8
  %indirectarg374 = alloca %"char[]", align 8
  %varargslots375 = alloca [1 x %any], align 16
  %indirectarg377 = alloca %"any[]", align 8
  %taddr382 = alloca i64, align 8
  %taddr383 = alloca i64, align 8
  %indirectarg384 = alloca %"char[]", align 8
  %indirectarg385 = alloca %"char[]", align 8
  %indirectarg386 = alloca %"char[]", align 8
  %varargslots387 = alloca [2 x %any], align 16
  %indirectarg390 = alloca %"any[]", align 8
  store ptr null, ptr %.cachedtype250, align 8, !dbg !3234
  store ptr null, ptr %.cachedtype, align 8, !dbg !3234
  %3 = icmp eq ptr %1, null, !dbg !3234
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !3234
  br i1 %4, label %panic, label %checkok, !dbg !3234

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !3235, !DIExpression(), !3236)
    #dbg_declare(ptr %2, !3237, !DIExpression(), !3236)
  %ptradd = getelementptr inbounds i8, ptr %2, i64 8, !dbg !3238
  %5 = load i64, ptr %ptradd, align 8, !dbg !3238
  %lt = icmp ult i64 0, %5, !dbg !3238
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !3238

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.253, i64 67 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.file.249, i64 10 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.func.252, i64 4 }, ptr %indirectarg5, align 8
  %6 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %6(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, i32 45) #5, !dbg !3238
  unreachable, !dbg !3238

assert_ok:                                        ; preds = %checkok
  %7 = load ptr, ptr %self, align 8, !dbg !3240
  %ptradd6 = getelementptr inbounds i8, ptr %7, i64 16, !dbg !3240
  %ptradd7 = getelementptr inbounds i8, ptr %ptradd6, i64 8, !dbg !3240
  %8 = load i64, ptr %ptradd7, align 8, !dbg !3240
  %ptradd8 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !3240
  %9 = load i64, ptr %ptradd8, align 8, !dbg !3240
  %gt = icmp ugt i64 %8, %9, !dbg !3240
  br i1 %gt, label %assert_ok13, label %assert_fail9, !dbg !3240

assert_fail9:                                     ; preds = %assert_ok
  store %"char[]" { ptr @.panic_msg.254, i64 69 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.file.249, i64 10 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.func.252, i64 4 }, ptr %indirectarg12, align 8
  %10 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %10(ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, i32 46) #5, !dbg !3240
  unreachable, !dbg !3240

assert_ok13:                                      ; preds = %assert_ok
  %11 = load ptr, ptr %self, align 8, !dbg !3241
  %ptradd14 = getelementptr inbounds i8, ptr %11, i64 40, !dbg !3241
  %12 = load i64, ptr %ptradd14, align 8, !dbg !3241
  %eq = icmp eq i64 0, %12, !dbg !3241
  br i1 %eq, label %if.then, label %if.exit37, !dbg !3241

if.then:                                          ; preds = %assert_ok13
  %13 = load ptr, ptr %self, align 8
  store ptr %13, ptr %self15, align 8
  %14 = load ptr, ptr %self, align 8, !dbg !3242
  %ptradd16 = getelementptr inbounds i8, ptr %14, i64 16, !dbg !3242
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %buf, ptr align 8 %ptradd16, i32 16, i1 false)
  %15 = load ptr, ptr %self15, align 8, !dbg !3244
  %neq = icmp ne ptr %15, null, !dbg !3244
  br i1 %neq, label %assert_ok21, label %assert_fail17, !dbg !3244

assert_fail17:                                    ; preds = %if.then
  store %"char[]" { ptr @.panic_msg.52, i64 32 }, ptr %indirectarg18, align 8
  store %"char[]" { ptr @.file.249, i64 10 }, ptr %indirectarg19, align 8
  store %"char[]" { ptr @.func.252, i64 4 }, ptr %indirectarg20, align 8
  %16 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %16(ptr align 8 %indirectarg18, ptr align 8 %indirectarg19, ptr align 8 %indirectarg20, i32 90) #5, !dbg !3244
  unreachable, !dbg !3244

assert_ok21:                                      ; preds = %if.then
    #dbg_declare(ptr %n, !3247, !DIExpression(), !3248)
  %17 = load ptr, ptr %self15, align 8, !dbg !3248
  %ptradd22 = getelementptr inbounds i8, ptr %17, i64 8, !dbg !3248
  %18 = load i64, ptr %ptradd22, align 8, !dbg !3248
  %19 = inttoptr i64 %18 to ptr, !dbg !3248
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !3234
  %20 = icmp eq ptr %19, %type, !dbg !3234
  br i1 %20, label %cache_hit, label %cache_miss, !dbg !3234

cache_miss:                                       ; preds = %assert_ok21
  %ptradd23 = getelementptr inbounds i8, ptr %19, i64 16, !dbg !3234
  %21 = load ptr, ptr %ptradd23, align 8, !dbg !3234
  %22 = call ptr @.dyn_search(ptr %21, ptr @"$sel.read"), !dbg !3234
  store ptr %22, ptr %.inlinecache, align 8, !dbg !3234
  store ptr %19, ptr %.cachedtype, align 8, !dbg !3234
  br label %23, !dbg !3234

cache_hit:                                        ; preds = %assert_ok21
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !3234
  br label %23, !dbg !3234

23:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %22, %cache_miss ], !dbg !3234
  %24 = icmp eq ptr %fn_phi, null, !dbg !3234
  br i1 %24, label %missing_function, label %match, !dbg !3234

missing_function:                                 ; preds = %23
  store %"char[]" { ptr @.panic_msg.197, i64 41 }, ptr %indirectarg24, align 8
  store %"char[]" { ptr @.file.249, i64 10 }, ptr %indirectarg25, align 8
  store %"char[]" { ptr @.func.252, i64 4 }, ptr %indirectarg26, align 8
  %25 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %25(ptr align 8 %indirectarg24, ptr align 8 %indirectarg25, ptr align 8 %indirectarg26, i32 92) #5, !dbg !3248
  unreachable, !dbg !3248

match:                                            ; preds = %23
  %26 = load ptr, ptr %17, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg27, ptr align 8 %buf, i32 16, i1 false)
  %27 = call i64 %fn_phi(ptr %retparam, ptr %26, ptr align 8 %indirectarg27), !dbg !3248
  %not_err = icmp eq i64 %27, 0, !dbg !3248
  %28 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !3248
  br i1 %28, label %after_check, label %assign_optional, !dbg !3248

assign_optional:                                  ; preds = %match
  store i64 %27, ptr %n.f, align 8, !dbg !3248
  br label %after_assign, !dbg !3248

after_check:                                      ; preds = %match
  %29 = load i64, ptr %retparam, align 8, !dbg !3248
  store i64 %29, ptr %n, align 8, !dbg !3248
  store i64 0, ptr %n.f, align 8, !dbg !3248
  br label %after_assign, !dbg !3248

after_assign:                                     ; preds = %after_check, %assign_optional
    #dbg_declare(ptr %err, !3249, !DIExpression(), !3250)
  br label %testblock, !dbg !3250

testblock:                                        ; preds = %after_assign
  %optval = load i64, ptr %n.f, align 8, !dbg !3250
  %not_err28 = icmp eq i64 %optval, 0, !dbg !3250
  %30 = call i1 @llvm.expect.i1(i1 %not_err28, i1 true), !dbg !3250
  br i1 %30, label %after_check30, label %assign_optional29, !dbg !3250

assign_optional29:                                ; preds = %testblock
  store i64 %optval, ptr %err, align 8, !dbg !3250
  br label %end_block, !dbg !3250

after_check30:                                    ; preds = %testblock
  store i64 0, ptr %err, align 8, !dbg !3250
  br label %end_block, !dbg !3250

end_block:                                        ; preds = %after_check30, %assign_optional29
  %31 = load i64, ptr %err, align 8, !dbg !3250
  %i2b = icmp ne i64 %31, 0, !dbg !3250
  br i1 %i2b, label %if.then31, label %if.exit34, !dbg !3250

if.then31:                                        ; preds = %end_block
  %32 = load i64, ptr %err, align 8, !dbg !3251
  %eq32 = icmp eq i64 %32, ptrtoint (ptr @std.io.EOF to i64), !dbg !3251
  br i1 %eq32, label %if.then33, label %if.exit, !dbg !3251

if.then33:                                        ; preds = %if.then31
  store i64 ptrtoint (ptr @std.core.builtin.NOT_FOUND to i64), ptr %error_var, align 8, !dbg !3251
  br label %guard_block, !dbg !3251

if.exit:                                          ; preds = %if.then31
  %33 = load i64, ptr %err, align 8, !dbg !3253
  store i64 %33, ptr %error_var, align 8, !dbg !3253
  br label %guard_block, !dbg !3253

if.exit34:                                        ; preds = %end_block
  br label %noerr_block, !dbg !3254

guard_block:                                      ; preds = %if.exit, %if.then33
  %34 = load i64, ptr %error_var, align 8, !dbg !3254
  ret i64 %34, !dbg !3254

noerr_block:                                      ; preds = %if.exit34
  %35 = load ptr, ptr %self, align 8, !dbg !3242
  %ptradd35 = getelementptr inbounds i8, ptr %35, i64 40, !dbg !3242
  %36 = load i64, ptr %n, align 8, !dbg !3242
  store i64 %36, ptr %ptradd35, align 8, !dbg !3242
  %37 = load ptr, ptr %self, align 8, !dbg !3255
  %ptradd36 = getelementptr inbounds i8, ptr %37, i64 32, !dbg !3255
  store i64 0, ptr %ptradd36, align 8, !dbg !3255
  br label %if.exit37, !dbg !3255

if.exit37:                                        ; preds = %noerr_block, %assert_ok13
  %38 = load ptr, ptr %self, align 8, !dbg !3256
  %ptradd38 = getelementptr inbounds i8, ptr %38, i64 40, !dbg !3256
  %39 = load i64, ptr %ptradd38, align 8, !dbg !3256
  %40 = load ptr, ptr %self, align 8, !dbg !3256
  %ptradd39 = getelementptr inbounds i8, ptr %40, i64 32, !dbg !3256
  %41 = load i64, ptr %ptradd39, align 8, !dbg !3256
  %ge = icmp uge i64 %39, %41, !dbg !3256
  br i1 %ge, label %assert_ok44, label %assert_fail40, !dbg !3256

assert_fail40:                                    ; preds = %if.exit37
  store %"char[]" { ptr @.panic_msg.251, i64 50 }, ptr %indirectarg41, align 8
  store %"char[]" { ptr @.file.249, i64 10 }, ptr %indirectarg42, align 8
  store %"char[]" { ptr @.func.252, i64 4 }, ptr %indirectarg43, align 8
  %42 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %42(ptr align 8 %indirectarg41, ptr align 8 %indirectarg42, ptr align 8 %indirectarg43, i32 56) #5, !dbg !3256
  unreachable, !dbg !3256

assert_ok44:                                      ; preds = %if.exit37
    #dbg_declare(ptr %n45, !3257, !DIExpression(), !3258)
  %43 = load ptr, ptr %self, align 8, !dbg !3258
  %ptradd46 = getelementptr inbounds i8, ptr %43, i64 40, !dbg !3258
  %44 = load i64, ptr %ptradd46, align 8, !dbg !3258
  %45 = load ptr, ptr %self, align 8, !dbg !3258
  %ptradd47 = getelementptr inbounds i8, ptr %45, i64 32, !dbg !3258
  %46 = load i64, ptr %ptradd47, align 8, !dbg !3258
  %sub = sub i64 %44, %46, !dbg !3258
  store i64 %sub, ptr %n45, align 8, !dbg !3258
    #dbg_declare(ptr %buf48, !3259, !DIExpression(), !3260)
  %47 = load ptr, ptr %self, align 8, !dbg !3260
  %ptradd49 = getelementptr inbounds i8, ptr %47, i64 16, !dbg !3260
  %48 = load %"char[]", ptr %ptradd49, align 8, !dbg !3260
  %49 = extractvalue %"char[]" %48, 0, !dbg !3260
  %50 = load ptr, ptr %self, align 8, !dbg !3260
  %ptradd50 = getelementptr inbounds i8, ptr %50, i64 32, !dbg !3260
  %51 = load i64, ptr %ptradd50, align 8, !dbg !3260
  %52 = extractvalue %"char[]" %48, 1, !dbg !3260
  %gt51 = icmp ugt i64 %51, %52, !dbg !3260
  %53 = call i1 @llvm.expect.i1(i1 %gt51, i1 false), !dbg !3260
  br i1 %53, label %panic52, label %checkok59, !dbg !3260

checkok59:                                        ; preds = %assert_ok44
  %54 = load i64, ptr %n45, align 8, !dbg !3260
  %add = add i64 %51, %54, !dbg !3260
  %gt60 = icmp ugt i64 %51, %add, !dbg !3260
  %sub61 = sub i64 %add, %51, !dbg !3260
  %55 = call i1 @llvm.expect.i1(i1 %gt60, i1 false), !dbg !3260
  br i1 %55, label %panic62, label %checkok70, !dbg !3260

checkok70:                                        ; preds = %checkok59
  %lt71 = icmp ult i64 %52, %add, !dbg !3260
  %sub72 = sub i64 %add, 1, !dbg !3260
  %56 = call i1 @llvm.expect.i1(i1 %lt71, i1 false), !dbg !3260
  br i1 %56, label %panic73, label %checkok83, !dbg !3260

checkok83:                                        ; preds = %checkok70
  %size = sub i64 %add, %51, !dbg !3260
  %ptradd84 = getelementptr inbounds i8, ptr %49, i64 %51, !dbg !3260
  %57 = insertvalue %"char[]" undef, ptr %ptradd84, 0, !dbg !3260
  %58 = insertvalue %"char[]" %57, i64 %size, 1, !dbg !3260
  store %"char[]" %58, ptr %buf48, align 8, !dbg !3260
    #dbg_declare(ptr %i, !3261, !DIExpression(), !3262)
  store i64 0, ptr %i, align 8, !dbg !3262
  %59 = load ptr, ptr %self, align 8
  store ptr %59, ptr %self85, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %buf86, ptr align 8 %buf48, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %pattern, ptr align 8 %2, i32 16, i1 false)
  %60 = load ptr, ptr %self85, align 8, !dbg !3263
  %neq87 = icmp ne ptr %60, null, !dbg !3263
  br i1 %neq87, label %assert_ok92, label %assert_fail88, !dbg !3263

assert_fail88:                                    ; preds = %checkok83
  store %"char[]" { ptr @.panic_msg.52, i64 32 }, ptr %indirectarg89, align 8
  store %"char[]" { ptr @.file.249, i64 10 }, ptr %indirectarg90, align 8
  store %"char[]" { ptr @.func.252, i64 4 }, ptr %indirectarg91, align 8
  %61 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %61(ptr align 8 %indirectarg89, ptr align 8 %indirectarg90, ptr align 8 %indirectarg91, i32 85) #5, !dbg !3263
  unreachable, !dbg !3263

assert_ok92:                                      ; preds = %checkok83
  %62 = load %"char[]", ptr %buf86, align 8, !dbg !3266
  %63 = load %"char[]", ptr %pattern, align 8, !dbg !3266
  %64 = extractvalue %"char[]" %63, 1, !dbg !3267
  %lt93 = icmp ult i64 0, %64, !dbg !3266
  br i1 %lt93, label %assert_ok98, label %assert_fail94, !dbg !3266

assert_fail94:                                    ; preds = %assert_ok92
  store %"char[]" { ptr @.panic_msg.255, i64 71 }, ptr %indirectarg95, align 8
  store %"char[]" { ptr @.file.249, i64 10 }, ptr %indirectarg96, align 8
  store %"char[]" { ptr @.func.252, i64 4 }, ptr %indirectarg97, align 8
  %65 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %65(ptr align 8 %indirectarg95, ptr align 8 %indirectarg96, ptr align 8 %indirectarg97, i32 87) #5, !dbg !3266
  unreachable, !dbg !3266

assert_ok98:                                      ; preds = %assert_ok92
  store %"char[]" %62, ptr %indirectarg100, align 8
  store %"char[]" %63, ptr %indirectarg101, align 8
  %66 = call i64 @std.core.String.index_of(ptr %retparam99, ptr align 8 %indirectarg100, ptr align 8 %indirectarg101), !dbg !3266
  %not_err102 = icmp eq i64 %66, 0, !dbg !3266
  %67 = call i1 @llvm.expect.i1(i1 %not_err102, i1 true), !dbg !3266
  br i1 %67, label %after_check103, label %catch_landing, !dbg !3266

after_check103:                                   ; preds = %assert_ok98
  %68 = load i64, ptr %retparam99, align 8, !dbg !3266
  store i64 %68, ptr %i, align 8, !dbg !3266
  br label %phi_try_catch, !dbg !3266

catch_landing:                                    ; preds = %assert_ok98
  br label %phi_try_catch, !dbg !3266

phi_try_catch:                                    ; preds = %catch_landing, %after_check103
  %val = phi i1 [ true, %after_check103 ], [ false, %catch_landing ], !dbg !3266
  br i1 %val, label %if.then104, label %if.exit147, !dbg !3266

if.then104:                                       ; preds = %phi_try_catch
  %69 = load ptr, ptr %self, align 8, !dbg !3268
  %ptradd105 = getelementptr inbounds i8, ptr %69, i64 32, !dbg !3268
  %70 = load i64, ptr %ptradd105, align 8, !dbg !3268
  %71 = load i64, ptr %i, align 8, !dbg !3268
  %ptradd106 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !3268
  %72 = load i64, ptr %ptradd106, align 8, !dbg !3268
  %add107 = add i64 %71, %72, !dbg !3268
  %add108 = add i64 %70, %add107, !dbg !3268
  store i64 %add108, ptr %ptradd105, align 8, !dbg !3268
  %73 = load %"char[]", ptr %buf48, align 8, !dbg !3270
  %74 = extractvalue %"char[]" %73, 0, !dbg !3270
  %75 = extractvalue %"char[]" %73, 1, !dbg !3270
  %gt109 = icmp ugt i64 0, %75, !dbg !3270
  %76 = call i1 @llvm.expect.i1(i1 %gt109, i1 false), !dbg !3270
  br i1 %76, label %panic110, label %checkok120, !dbg !3270

checkok120:                                       ; preds = %if.then104
  %77 = load i64, ptr %i, align 8, !dbg !3270
  %add121 = add i64 0, %77, !dbg !3270
  %gt122 = icmp ugt i64 0, %add121, !dbg !3270
  %sub123 = sub i64 %add121, 0, !dbg !3270
  %78 = call i1 @llvm.expect.i1(i1 %gt122, i1 false), !dbg !3270
  br i1 %78, label %panic124, label %checkok132, !dbg !3270

checkok132:                                       ; preds = %checkok120
  %lt133 = icmp ult i64 %75, %add121, !dbg !3270
  %sub134 = sub i64 %add121, 1, !dbg !3270
  %79 = call i1 @llvm.expect.i1(i1 %lt133, i1 false), !dbg !3270
  br i1 %79, label %panic135, label %checkok145, !dbg !3270

checkok145:                                       ; preds = %checkok132
  %size146 = sub i64 %add121, 0, !dbg !3270
  %80 = insertvalue %"char[]" undef, ptr %74, 0, !dbg !3270
  %81 = insertvalue %"char[]" %80, i64 %size146, 1, !dbg !3270
  store %"char[]" %81, ptr %0, align 8, !dbg !3270
  ret i64 0, !dbg !3270

if.exit147:                                       ; preds = %phi_try_catch
  %82 = load ptr, ptr %self, align 8, !dbg !3271
  %ptradd148 = getelementptr inbounds i8, ptr %82, i64 32, !dbg !3271
  %83 = load i64, ptr %ptradd148, align 8, !dbg !3271
  %eq149 = icmp eq i64 0, %83, !dbg !3271
  br i1 %eq149, label %or.phi, label %or.rhs, !dbg !3271

or.rhs:                                           ; preds = %if.exit147
  %84 = load ptr, ptr %self, align 8, !dbg !3271
  %ptradd150 = getelementptr inbounds i8, ptr %84, i64 40, !dbg !3271
  %85 = load i64, ptr %ptradd150, align 8, !dbg !3271
  %86 = load ptr, ptr %self, align 8, !dbg !3271
  %ptradd151 = getelementptr inbounds i8, ptr %86, i64 16, !dbg !3271
  %ptradd152 = getelementptr inbounds i8, ptr %ptradd151, i64 8, !dbg !3271
  %87 = load i64, ptr %ptradd152, align 8, !dbg !3271
  %lt153 = icmp ult i64 %85, %87, !dbg !3271
  br label %or.phi, !dbg !3271

or.phi:                                           ; preds = %or.rhs, %if.exit147
  %val154 = phi i1 [ true, %if.exit147 ], [ %lt153, %or.rhs ], !dbg !3271
  br i1 %val154, label %if.then155, label %if.exit156, !dbg !3271

if.then155:                                       ; preds = %or.phi
  ret i64 ptrtoint (ptr @std.core.builtin.NOT_FOUND to i64), !dbg !3272

if.exit156:                                       ; preds = %or.phi
  %88 = load %"char[]", ptr %buf48, align 8, !dbg !3274
  %89 = extractvalue %"char[]" %88, 0, !dbg !3274
  %90 = extractvalue %"char[]" %88, 1, !dbg !3274
  %gt157 = icmp ugt i64 0, %90, !dbg !3274
  %91 = call i1 @llvm.expect.i1(i1 %gt157, i1 false), !dbg !3274
  br i1 %91, label %panic158, label %checkok168, !dbg !3274

checkok168:                                       ; preds = %if.exit156
  %size169 = sub i64 %90, 0, !dbg !3274
  %92 = insertvalue %"char[]" undef, ptr %89, 0, !dbg !3274
  %93 = insertvalue %"char[]" %92, i64 %size169, 1, !dbg !3274
  %94 = load ptr, ptr %self, align 8, !dbg !3274
  %ptradd170 = getelementptr inbounds i8, ptr %94, i64 16, !dbg !3274
  %95 = load %"char[]", ptr %ptradd170, align 8, !dbg !3274
  %96 = extractvalue %"char[]" %95, 0, !dbg !3274
  %97 = extractvalue %"char[]" %95, 1, !dbg !3274
  %gt171 = icmp ugt i64 0, %97, !dbg !3274
  %98 = call i1 @llvm.expect.i1(i1 %gt171, i1 false), !dbg !3274
  br i1 %98, label %panic172, label %checkok182, !dbg !3274

checkok182:                                       ; preds = %checkok168
  %99 = load i64, ptr %n45, align 8, !dbg !3274
  %add183 = add i64 0, %99, !dbg !3274
  %gt184 = icmp ugt i64 0, %add183, !dbg !3274
  %sub185 = sub i64 %add183, 0, !dbg !3274
  %100 = call i1 @llvm.expect.i1(i1 %gt184, i1 false), !dbg !3274
  br i1 %100, label %panic186, label %checkok194, !dbg !3274

checkok194:                                       ; preds = %checkok182
  %lt195 = icmp ult i64 %97, %add183, !dbg !3274
  %sub196 = sub i64 %add183, 1, !dbg !3274
  %101 = call i1 @llvm.expect.i1(i1 %lt195, i1 false), !dbg !3274
  br i1 %101, label %panic197, label %checkok207, !dbg !3274

checkok207:                                       ; preds = %checkok194
  %size208 = sub i64 %add183, 0, !dbg !3274
  %102 = insertvalue %"char[]" undef, ptr %96, 0, !dbg !3274
  %103 = insertvalue %"char[]" %102, i64 %size208, 1, !dbg !3274
  %104 = extractvalue %"char[]" %103, 0, !dbg !3274
  %105 = extractvalue %"char[]" %93, 0, !dbg !3274
  %106 = extractvalue %"char[]" %93, 1, !dbg !3274
  %107 = extractvalue %"char[]" %103, 1, !dbg !3274
  %neq209 = icmp ne i64 %107, %106, !dbg !3274
  %108 = call i1 @llvm.expect.i1(i1 %neq209, i1 false), !dbg !3274
  br i1 %108, label %panic210, label %checkok220, !dbg !3274

checkok220:                                       ; preds = %checkok207
  %109 = mul i64 %106, 1, !dbg !3274
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %104, ptr align 1 %105, i64 %109, i1 false), !dbg !3274
  %110 = load ptr, ptr %self, align 8, !dbg !3275
  %ptradd221 = getelementptr inbounds i8, ptr %110, i64 32, !dbg !3275
  store i64 0, ptr %ptradd221, align 8, !dbg !3275
  %111 = load ptr, ptr %self, align 8, !dbg !3276
  %ptradd222 = getelementptr inbounds i8, ptr %111, i64 16, !dbg !3276
  %112 = load %"char[]", ptr %ptradd222, align 8, !dbg !3276
  %113 = extractvalue %"char[]" %112, 0, !dbg !3276
  %114 = load i64, ptr %n45, align 8, !dbg !3276
  %115 = extractvalue %"char[]" %112, 1, !dbg !3276
  %gt223 = icmp ugt i64 %114, %115, !dbg !3276
  %116 = call i1 @llvm.expect.i1(i1 %gt223, i1 false), !dbg !3276
  br i1 %116, label %panic224, label %checkok234, !dbg !3276

checkok234:                                       ; preds = %checkok220
  %size235 = sub i64 %115, %114, !dbg !3276
  %ptradd236 = getelementptr inbounds i8, ptr %113, i64 %114, !dbg !3276
  %117 = insertvalue %"char[]" undef, ptr %ptradd236, 0, !dbg !3276
  %118 = insertvalue %"char[]" %117, i64 %size235, 1, !dbg !3276
  store %"char[]" %118, ptr %buf48, align 8, !dbg !3276
    #dbg_declare(ptr %p, !3277, !DIExpression(), !3278)
  %119 = load ptr, ptr %self, align 8
  store ptr %119, ptr %self238, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %buf239, ptr align 8 %buf48, i32 16, i1 false)
  %120 = load ptr, ptr %self238, align 8, !dbg !3279
  %neq240 = icmp ne ptr %120, null, !dbg !3279
  br i1 %neq240, label %assert_ok245, label %assert_fail241, !dbg !3279

assert_fail241:                                   ; preds = %checkok234
  store %"char[]" { ptr @.panic_msg.52, i64 32 }, ptr %indirectarg242, align 8
  store %"char[]" { ptr @.file.249, i64 10 }, ptr %indirectarg243, align 8
  store %"char[]" { ptr @.func.252, i64 4 }, ptr %indirectarg244, align 8
  %121 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %121(ptr align 8 %indirectarg242, ptr align 8 %indirectarg243, ptr align 8 %indirectarg244, i32 90) #5, !dbg !3279
  unreachable, !dbg !3279

assert_ok245:                                     ; preds = %checkok234
    #dbg_declare(ptr %n246, !3282, !DIExpression(), !3283)
  %122 = load ptr, ptr %self238, align 8, !dbg !3283
  %ptradd248 = getelementptr inbounds i8, ptr %122, i64 8, !dbg !3283
  %123 = load i64, ptr %ptradd248, align 8, !dbg !3283
  %124 = inttoptr i64 %123 to ptr, !dbg !3283
  %type251 = load ptr, ptr %.cachedtype250, align 8, !dbg !3234
  %125 = icmp eq ptr %124, %type251, !dbg !3234
  br i1 %125, label %cache_hit254, label %cache_miss252, !dbg !3234

cache_miss252:                                    ; preds = %assert_ok245
  %ptradd253 = getelementptr inbounds i8, ptr %124, i64 16, !dbg !3234
  %126 = load ptr, ptr %ptradd253, align 8, !dbg !3234
  %127 = call ptr @.dyn_search(ptr %126, ptr @"$sel.read"), !dbg !3234
  store ptr %127, ptr %.inlinecache249, align 8, !dbg !3234
  store ptr %124, ptr %.cachedtype250, align 8, !dbg !3234
  br label %128, !dbg !3234

cache_hit254:                                     ; preds = %assert_ok245
  %cache_hit_fn255 = load ptr, ptr %.inlinecache249, align 8, !dbg !3234
  br label %128, !dbg !3234

128:                                              ; preds = %cache_hit254, %cache_miss252
  %fn_phi256 = phi ptr [ %cache_hit_fn255, %cache_hit254 ], [ %127, %cache_miss252 ], !dbg !3234
  %129 = icmp eq ptr %fn_phi256, null, !dbg !3234
  br i1 %129, label %missing_function257, label %match261, !dbg !3234

missing_function257:                              ; preds = %128
  store %"char[]" { ptr @.panic_msg.197, i64 41 }, ptr %indirectarg258, align 8
  store %"char[]" { ptr @.file.249, i64 10 }, ptr %indirectarg259, align 8
  store %"char[]" { ptr @.func.252, i64 4 }, ptr %indirectarg260, align 8
  %130 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %130(ptr align 8 %indirectarg258, ptr align 8 %indirectarg259, ptr align 8 %indirectarg260, i32 92) #5, !dbg !3283
  unreachable, !dbg !3283

match261:                                         ; preds = %128
  %131 = load ptr, ptr %122, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg263, ptr align 8 %buf239, i32 16, i1 false)
  %132 = call i64 %fn_phi256(ptr %retparam262, ptr %131, ptr align 8 %indirectarg263), !dbg !3283
  %not_err264 = icmp eq i64 %132, 0, !dbg !3283
  %133 = call i1 @llvm.expect.i1(i1 %not_err264, i1 true), !dbg !3283
  br i1 %133, label %after_check266, label %assign_optional265, !dbg !3283

assign_optional265:                               ; preds = %match261
  store i64 %132, ptr %n.f247, align 8, !dbg !3283
  br label %after_assign267, !dbg !3283

after_check266:                                   ; preds = %match261
  %134 = load i64, ptr %retparam262, align 8, !dbg !3283
  store i64 %134, ptr %n246, align 8, !dbg !3283
  store i64 0, ptr %n.f247, align 8, !dbg !3283
  br label %after_assign267, !dbg !3283

after_assign267:                                  ; preds = %after_check266, %assign_optional265
    #dbg_declare(ptr %err268, !3284, !DIExpression(), !3285)
  br label %testblock269, !dbg !3285

testblock269:                                     ; preds = %after_assign267
  %optval270 = load i64, ptr %n.f247, align 8, !dbg !3285
  %not_err271 = icmp eq i64 %optval270, 0, !dbg !3285
  %135 = call i1 @llvm.expect.i1(i1 %not_err271, i1 true), !dbg !3285
  br i1 %135, label %after_check273, label %assign_optional272, !dbg !3285

assign_optional272:                               ; preds = %testblock269
  store i64 %optval270, ptr %err268, align 8, !dbg !3285
  br label %end_block274, !dbg !3285

after_check273:                                   ; preds = %testblock269
  store i64 0, ptr %err268, align 8, !dbg !3285
  br label %end_block274, !dbg !3285

end_block274:                                     ; preds = %after_check273, %assign_optional272
  %136 = load i64, ptr %err268, align 8, !dbg !3285
  %i2b275 = icmp ne i64 %136, 0, !dbg !3285
  br i1 %i2b275, label %if.then276, label %if.exit280, !dbg !3285

if.then276:                                       ; preds = %end_block274
  %137 = load i64, ptr %err268, align 8, !dbg !3286
  %eq277 = icmp eq i64 %137, ptrtoint (ptr @std.io.EOF to i64), !dbg !3286
  br i1 %eq277, label %if.then278, label %if.exit279, !dbg !3286

if.then278:                                       ; preds = %if.then276
  store i64 ptrtoint (ptr @std.core.builtin.NOT_FOUND to i64), ptr %error_var237, align 8, !dbg !3286
  br label %guard_block281, !dbg !3286

if.exit279:                                       ; preds = %if.then276
  %138 = load i64, ptr %err268, align 8, !dbg !3288
  store i64 %138, ptr %error_var237, align 8, !dbg !3288
  br label %guard_block281, !dbg !3288

if.exit280:                                       ; preds = %end_block274
  br label %noerr_block282, !dbg !3289

guard_block281:                                   ; preds = %if.exit279, %if.then278
  %139 = load i64, ptr %error_var237, align 8, !dbg !3289
  ret i64 %139, !dbg !3289

noerr_block282:                                   ; preds = %if.exit280
  %140 = load i64, ptr %n246, align 8, !dbg !3289
  store i64 %140, ptr %p, align 8, !dbg !3289
  %141 = load i64, ptr %n45, align 8, !dbg !3290
  %142 = load i64, ptr %p, align 8, !dbg !3290
  %add283 = add i64 %141, %142, !dbg !3290
  %143 = load ptr, ptr %self, align 8, !dbg !3290
  %ptradd284 = getelementptr inbounds i8, ptr %143, i64 40, !dbg !3290
  store i64 %add283, ptr %ptradd284, align 8, !dbg !3290
  %144 = load %"char[]", ptr %buf48, align 8, !dbg !3291
  %145 = extractvalue %"char[]" %144, 0, !dbg !3291
  %146 = extractvalue %"char[]" %144, 1, !dbg !3291
  %gt285 = icmp ugt i64 0, %146, !dbg !3291
  %147 = call i1 @llvm.expect.i1(i1 %gt285, i1 false), !dbg !3291
  br i1 %147, label %panic286, label %checkok296, !dbg !3291

checkok296:                                       ; preds = %noerr_block282
  %148 = load i64, ptr %p, align 8, !dbg !3291
  %add297 = add i64 0, %148, !dbg !3291
  %gt298 = icmp ugt i64 0, %add297, !dbg !3291
  %sub299 = sub i64 %add297, 0, !dbg !3291
  %149 = call i1 @llvm.expect.i1(i1 %gt298, i1 false), !dbg !3291
  br i1 %149, label %panic300, label %checkok308, !dbg !3291

checkok308:                                       ; preds = %checkok296
  %lt309 = icmp ult i64 %146, %add297, !dbg !3291
  %sub310 = sub i64 %add297, 1, !dbg !3291
  %150 = call i1 @llvm.expect.i1(i1 %lt309, i1 false), !dbg !3291
  br i1 %150, label %panic311, label %checkok321, !dbg !3291

checkok321:                                       ; preds = %checkok308
  %size322 = sub i64 %add297, 0, !dbg !3291
  %151 = insertvalue %"char[]" undef, ptr %145, 0, !dbg !3291
  %152 = insertvalue %"char[]" %151, i64 %size322, 1, !dbg !3291
  store %"char[]" %152, ptr %buf48, align 8, !dbg !3291
    #dbg_declare(ptr %i323, !3292, !DIExpression(), !3293)
  %153 = load ptr, ptr %self, align 8
  store ptr %153, ptr %self325, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %buf326, ptr align 8 %buf48, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %pattern327, ptr align 8 %2, i32 16, i1 false)
  %154 = load ptr, ptr %self325, align 8, !dbg !3294
  %neq328 = icmp ne ptr %154, null, !dbg !3294
  br i1 %neq328, label %assert_ok333, label %assert_fail329, !dbg !3294

assert_fail329:                                   ; preds = %checkok321
  store %"char[]" { ptr @.panic_msg.52, i64 32 }, ptr %indirectarg330, align 8
  store %"char[]" { ptr @.file.249, i64 10 }, ptr %indirectarg331, align 8
  store %"char[]" { ptr @.func.252, i64 4 }, ptr %indirectarg332, align 8
  %155 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %155(ptr align 8 %indirectarg330, ptr align 8 %indirectarg331, ptr align 8 %indirectarg332, i32 85) #5, !dbg !3294
  unreachable, !dbg !3294

assert_ok333:                                     ; preds = %checkok321
  %156 = load %"char[]", ptr %buf326, align 8, !dbg !3297
  %157 = load %"char[]", ptr %pattern327, align 8, !dbg !3297
  %158 = extractvalue %"char[]" %157, 1, !dbg !3298
  %lt334 = icmp ult i64 0, %158, !dbg !3297
  br i1 %lt334, label %assert_ok339, label %assert_fail335, !dbg !3297

assert_fail335:                                   ; preds = %assert_ok333
  store %"char[]" { ptr @.panic_msg.255, i64 71 }, ptr %indirectarg336, align 8
  store %"char[]" { ptr @.file.249, i64 10 }, ptr %indirectarg337, align 8
  store %"char[]" { ptr @.func.252, i64 4 }, ptr %indirectarg338, align 8
  %159 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %159(ptr align 8 %indirectarg336, ptr align 8 %indirectarg337, ptr align 8 %indirectarg338, i32 87) #5, !dbg !3297
  unreachable, !dbg !3297

assert_ok339:                                     ; preds = %assert_ok333
  store %"char[]" %156, ptr %indirectarg341, align 8
  store %"char[]" %157, ptr %indirectarg342, align 8
  %160 = call i64 @std.core.String.index_of(ptr %retparam340, ptr align 8 %indirectarg341, ptr align 8 %indirectarg342), !dbg !3297
  %not_err343 = icmp eq i64 %160, 0, !dbg !3297
  %161 = call i1 @llvm.expect.i1(i1 %not_err343, i1 true), !dbg !3297
  br i1 %161, label %after_check345, label %assign_optional344, !dbg !3297

assign_optional344:                               ; preds = %assert_ok339
  store i64 %160, ptr %error_var324, align 8, !dbg !3297
  br label %guard_block346, !dbg !3297

after_check345:                                   ; preds = %assert_ok339
  br label %noerr_block347, !dbg !3297

guard_block346:                                   ; preds = %assign_optional344
  %162 = load i64, ptr %error_var324, align 8, !dbg !3297
  ret i64 %162, !dbg !3297

noerr_block347:                                   ; preds = %after_check345
  %163 = load i64, ptr %retparam340, align 8, !dbg !3297
  store i64 %163, ptr %i323, align 8, !dbg !3297
  %164 = load i64, ptr %n45, align 8, !dbg !3299
  %165 = load i64, ptr %i323, align 8, !dbg !3299
  %add348 = add i64 %164, %165, !dbg !3299
  %ptradd349 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !3299
  %166 = load i64, ptr %ptradd349, align 8, !dbg !3299
  %add350 = add i64 %add348, %166, !dbg !3299
  %167 = load ptr, ptr %self, align 8, !dbg !3299
  %ptradd351 = getelementptr inbounds i8, ptr %167, i64 32, !dbg !3299
  store i64 %add350, ptr %ptradd351, align 8, !dbg !3299
  %168 = load ptr, ptr %self, align 8, !dbg !3300
  %ptradd353 = getelementptr inbounds i8, ptr %168, i64 16, !dbg !3300
  %169 = load %"char[]", ptr %ptradd353, align 8, !dbg !3300
  %170 = extractvalue %"char[]" %169, 0, !dbg !3300
  %171 = extractvalue %"char[]" %169, 1, !dbg !3300
  %gt354 = icmp ugt i64 0, %171, !dbg !3300
  %172 = call i1 @llvm.expect.i1(i1 %gt354, i1 false), !dbg !3300
  br i1 %172, label %panic355, label %checkok365, !dbg !3300

checkok365:                                       ; preds = %noerr_block347
  %173 = load i64, ptr %n45, align 8, !dbg !3300
  %174 = load i64, ptr %i323, align 8, !dbg !3300
  %add366 = add i64 %173, %174, !dbg !3300
  %add367 = add i64 0, %add366, !dbg !3300
  %gt368 = icmp ugt i64 0, %add367, !dbg !3300
  %sub369 = sub i64 %add367, 0, !dbg !3300
  %175 = call i1 @llvm.expect.i1(i1 %gt368, i1 false), !dbg !3300
  br i1 %175, label %panic370, label %checkok378, !dbg !3300

checkok378:                                       ; preds = %checkok365
  %lt379 = icmp ult i64 %171, %add367, !dbg !3300
  %sub380 = sub i64 %add367, 1, !dbg !3300
  %176 = call i1 @llvm.expect.i1(i1 %lt379, i1 false), !dbg !3300
  br i1 %176, label %panic381, label %checkok391, !dbg !3300

checkok391:                                       ; preds = %checkok378
  %size392 = sub i64 %add367, 0, !dbg !3300
  %177 = insertvalue %"char[]" undef, ptr %170, 0, !dbg !3300
  %178 = insertvalue %"char[]" %177, i64 %size392, 1, !dbg !3300
  store %"char[]" %178, ptr %0, align 8, !dbg !3300
  ret i64 0, !dbg !3300

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.249, i64 10 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.252, i64 4 }, ptr %indirectarg2, align 8
  %179 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %179(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 48) #5, !dbg !3236
  unreachable, !dbg !3236

panic52:                                          ; preds = %assert_ok44
  store i64 %52, ptr %taddr, align 8
  %180 = insertvalue %any undef, ptr %taddr, 0
  %181 = insertvalue %any %180, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %51, ptr %taddr53, align 8
  %182 = insertvalue %any undef, ptr %taddr53, 0
  %183 = insertvalue %any %182, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.170, i64 61 }, ptr %indirectarg54, align 8
  store %"char[]" { ptr @.file.249, i64 10 }, ptr %indirectarg55, align 8
  store %"char[]" { ptr @.func.252, i64 4 }, ptr %indirectarg56, align 8
  store %any %181, ptr %varargslots, align 16
  %ptradd57 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %183, ptr %ptradd57, align 16
  %184 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %184, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg58, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg54, ptr align 8 %indirectarg55, ptr align 8 %indirectarg56, i32 58, ptr align 8 %indirectarg58) #5, !dbg !3260
  unreachable, !dbg !3260

panic62:                                          ; preds = %checkok59
  store i64 %sub61, ptr %taddr63, align 8
  %185 = insertvalue %any undef, ptr %taddr63, 0
  %186 = insertvalue %any %185, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.16, i64 43 }, ptr %indirectarg64, align 8
  store %"char[]" { ptr @.file.249, i64 10 }, ptr %indirectarg65, align 8
  store %"char[]" { ptr @.func.252, i64 4 }, ptr %indirectarg66, align 8
  store %any %186, ptr %varargslots67, align 16
  %187 = insertvalue %"any[]" undef, ptr %varargslots67, 0
  %"$$temp68" = insertvalue %"any[]" %187, i64 1, 1
  store %"any[]" %"$$temp68", ptr %indirectarg69, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg64, ptr align 8 %indirectarg65, ptr align 8 %indirectarg66, i32 58, ptr align 8 %indirectarg69) #5, !dbg !3260
  unreachable, !dbg !3260

panic73:                                          ; preds = %checkok70
  store i64 %sub72, ptr %taddr74, align 8
  %188 = insertvalue %any undef, ptr %taddr74, 0
  %189 = insertvalue %any %188, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %52, ptr %taddr75, align 8
  %190 = insertvalue %any undef, ptr %taddr75, 0
  %191 = insertvalue %any %190, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 60 }, ptr %indirectarg76, align 8
  store %"char[]" { ptr @.file.249, i64 10 }, ptr %indirectarg77, align 8
  store %"char[]" { ptr @.func.252, i64 4 }, ptr %indirectarg78, align 8
  store %any %189, ptr %varargslots79, align 16
  %ptradd80 = getelementptr inbounds i8, ptr %varargslots79, i64 16
  store %any %191, ptr %ptradd80, align 16
  %192 = insertvalue %"any[]" undef, ptr %varargslots79, 0
  %"$$temp81" = insertvalue %"any[]" %192, i64 2, 1
  store %"any[]" %"$$temp81", ptr %indirectarg82, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg76, ptr align 8 %indirectarg77, ptr align 8 %indirectarg78, i32 58, ptr align 8 %indirectarg82) #5, !dbg !3260
  unreachable, !dbg !3260

panic110:                                         ; preds = %if.then104
  store i64 %75, ptr %taddr111, align 8
  %193 = insertvalue %any undef, ptr %taddr111, 0
  %194 = insertvalue %any %193, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr112, align 8
  %195 = insertvalue %any undef, ptr %taddr112, 0
  %196 = insertvalue %any %195, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.170, i64 61 }, ptr %indirectarg113, align 8
  store %"char[]" { ptr @.file.249, i64 10 }, ptr %indirectarg114, align 8
  store %"char[]" { ptr @.func.252, i64 4 }, ptr %indirectarg115, align 8
  store %any %194, ptr %varargslots116, align 16
  %ptradd117 = getelementptr inbounds i8, ptr %varargslots116, i64 16
  store %any %196, ptr %ptradd117, align 16
  %197 = insertvalue %"any[]" undef, ptr %varargslots116, 0
  %"$$temp118" = insertvalue %"any[]" %197, i64 2, 1
  store %"any[]" %"$$temp118", ptr %indirectarg119, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg113, ptr align 8 %indirectarg114, ptr align 8 %indirectarg115, i32 62, ptr align 8 %indirectarg119) #5, !dbg !3270
  unreachable, !dbg !3270

panic124:                                         ; preds = %checkok120
  store i64 %sub123, ptr %taddr125, align 8
  %198 = insertvalue %any undef, ptr %taddr125, 0
  %199 = insertvalue %any %198, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.16, i64 43 }, ptr %indirectarg126, align 8
  store %"char[]" { ptr @.file.249, i64 10 }, ptr %indirectarg127, align 8
  store %"char[]" { ptr @.func.252, i64 4 }, ptr %indirectarg128, align 8
  store %any %199, ptr %varargslots129, align 16
  %200 = insertvalue %"any[]" undef, ptr %varargslots129, 0
  %"$$temp130" = insertvalue %"any[]" %200, i64 1, 1
  store %"any[]" %"$$temp130", ptr %indirectarg131, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg126, ptr align 8 %indirectarg127, ptr align 8 %indirectarg128, i32 62, ptr align 8 %indirectarg131) #5, !dbg !3270
  unreachable, !dbg !3270

panic135:                                         ; preds = %checkok132
  store i64 %sub134, ptr %taddr136, align 8
  %201 = insertvalue %any undef, ptr %taddr136, 0
  %202 = insertvalue %any %201, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %75, ptr %taddr137, align 8
  %203 = insertvalue %any undef, ptr %taddr137, 0
  %204 = insertvalue %any %203, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 60 }, ptr %indirectarg138, align 8
  store %"char[]" { ptr @.file.249, i64 10 }, ptr %indirectarg139, align 8
  store %"char[]" { ptr @.func.252, i64 4 }, ptr %indirectarg140, align 8
  store %any %202, ptr %varargslots141, align 16
  %ptradd142 = getelementptr inbounds i8, ptr %varargslots141, i64 16
  store %any %204, ptr %ptradd142, align 16
  %205 = insertvalue %"any[]" undef, ptr %varargslots141, 0
  %"$$temp143" = insertvalue %"any[]" %205, i64 2, 1
  store %"any[]" %"$$temp143", ptr %indirectarg144, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg138, ptr align 8 %indirectarg139, ptr align 8 %indirectarg140, i32 62, ptr align 8 %indirectarg144) #5, !dbg !3270
  unreachable, !dbg !3270

panic158:                                         ; preds = %if.exit156
  store i64 %90, ptr %taddr159, align 8
  %206 = insertvalue %any undef, ptr %taddr159, 0
  %207 = insertvalue %any %206, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr160, align 8
  %208 = insertvalue %any undef, ptr %taddr160, 0
  %209 = insertvalue %any %208, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.170, i64 61 }, ptr %indirectarg161, align 8
  store %"char[]" { ptr @.file.249, i64 10 }, ptr %indirectarg162, align 8
  store %"char[]" { ptr @.func.252, i64 4 }, ptr %indirectarg163, align 8
  store %any %207, ptr %varargslots164, align 16
  %ptradd165 = getelementptr inbounds i8, ptr %varargslots164, i64 16
  store %any %209, ptr %ptradd165, align 16
  %210 = insertvalue %"any[]" undef, ptr %varargslots164, 0
  %"$$temp166" = insertvalue %"any[]" %210, i64 2, 1
  store %"any[]" %"$$temp166", ptr %indirectarg167, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg161, ptr align 8 %indirectarg162, ptr align 8 %indirectarg163, i32 71, ptr align 8 %indirectarg167) #5, !dbg !3274
  unreachable, !dbg !3274

panic172:                                         ; preds = %checkok168
  store i64 %97, ptr %taddr173, align 8
  %211 = insertvalue %any undef, ptr %taddr173, 0
  %212 = insertvalue %any %211, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr174, align 8
  %213 = insertvalue %any undef, ptr %taddr174, 0
  %214 = insertvalue %any %213, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.170, i64 61 }, ptr %indirectarg175, align 8
  store %"char[]" { ptr @.file.249, i64 10 }, ptr %indirectarg176, align 8
  store %"char[]" { ptr @.func.252, i64 4 }, ptr %indirectarg177, align 8
  store %any %212, ptr %varargslots178, align 16
  %ptradd179 = getelementptr inbounds i8, ptr %varargslots178, i64 16
  store %any %214, ptr %ptradd179, align 16
  %215 = insertvalue %"any[]" undef, ptr %varargslots178, 0
  %"$$temp180" = insertvalue %"any[]" %215, i64 2, 1
  store %"any[]" %"$$temp180", ptr %indirectarg181, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg175, ptr align 8 %indirectarg176, ptr align 8 %indirectarg177, i32 71, ptr align 8 %indirectarg181) #5, !dbg !3274
  unreachable, !dbg !3274

panic186:                                         ; preds = %checkok182
  store i64 %sub185, ptr %taddr187, align 8
  %216 = insertvalue %any undef, ptr %taddr187, 0
  %217 = insertvalue %any %216, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.16, i64 43 }, ptr %indirectarg188, align 8
  store %"char[]" { ptr @.file.249, i64 10 }, ptr %indirectarg189, align 8
  store %"char[]" { ptr @.func.252, i64 4 }, ptr %indirectarg190, align 8
  store %any %217, ptr %varargslots191, align 16
  %218 = insertvalue %"any[]" undef, ptr %varargslots191, 0
  %"$$temp192" = insertvalue %"any[]" %218, i64 1, 1
  store %"any[]" %"$$temp192", ptr %indirectarg193, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg188, ptr align 8 %indirectarg189, ptr align 8 %indirectarg190, i32 71, ptr align 8 %indirectarg193) #5, !dbg !3274
  unreachable, !dbg !3274

panic197:                                         ; preds = %checkok194
  store i64 %sub196, ptr %taddr198, align 8
  %219 = insertvalue %any undef, ptr %taddr198, 0
  %220 = insertvalue %any %219, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %97, ptr %taddr199, align 8
  %221 = insertvalue %any undef, ptr %taddr199, 0
  %222 = insertvalue %any %221, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 60 }, ptr %indirectarg200, align 8
  store %"char[]" { ptr @.file.249, i64 10 }, ptr %indirectarg201, align 8
  store %"char[]" { ptr @.func.252, i64 4 }, ptr %indirectarg202, align 8
  store %any %220, ptr %varargslots203, align 16
  %ptradd204 = getelementptr inbounds i8, ptr %varargslots203, i64 16
  store %any %222, ptr %ptradd204, align 16
  %223 = insertvalue %"any[]" undef, ptr %varargslots203, 0
  %"$$temp205" = insertvalue %"any[]" %223, i64 2, 1
  store %"any[]" %"$$temp205", ptr %indirectarg206, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg200, ptr align 8 %indirectarg201, ptr align 8 %indirectarg202, i32 71, ptr align 8 %indirectarg206) #5, !dbg !3274
  unreachable, !dbg !3274

panic210:                                         ; preds = %checkok207
  store i64 %107, ptr %taddr211, align 8
  %224 = insertvalue %any undef, ptr %taddr211, 0
  %225 = insertvalue %any %224, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %106, ptr %taddr212, align 8
  %226 = insertvalue %any undef, ptr %taddr212, 0
  %227 = insertvalue %any %226, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.198, i64 38 }, ptr %indirectarg213, align 8
  store %"char[]" { ptr @.file.249, i64 10 }, ptr %indirectarg214, align 8
  store %"char[]" { ptr @.func.252, i64 4 }, ptr %indirectarg215, align 8
  store %any %225, ptr %varargslots216, align 16
  %ptradd217 = getelementptr inbounds i8, ptr %varargslots216, i64 16
  store %any %227, ptr %ptradd217, align 16
  %228 = insertvalue %"any[]" undef, ptr %varargslots216, 0
  %"$$temp218" = insertvalue %"any[]" %228, i64 2, 1
  store %"any[]" %"$$temp218", ptr %indirectarg219, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg213, ptr align 8 %indirectarg214, ptr align 8 %indirectarg215, i32 71, ptr align 8 %indirectarg219) #5, !dbg !3274
  unreachable, !dbg !3274

panic224:                                         ; preds = %checkok220
  store i64 %115, ptr %taddr225, align 8
  %229 = insertvalue %any undef, ptr %taddr225, 0
  %230 = insertvalue %any %229, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %114, ptr %taddr226, align 8
  %231 = insertvalue %any undef, ptr %taddr226, 0
  %232 = insertvalue %any %231, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.170, i64 61 }, ptr %indirectarg227, align 8
  store %"char[]" { ptr @.file.249, i64 10 }, ptr %indirectarg228, align 8
  store %"char[]" { ptr @.func.252, i64 4 }, ptr %indirectarg229, align 8
  store %any %230, ptr %varargslots230, align 16
  %ptradd231 = getelementptr inbounds i8, ptr %varargslots230, i64 16
  store %any %232, ptr %ptradd231, align 16
  %233 = insertvalue %"any[]" undef, ptr %varargslots230, 0
  %"$$temp232" = insertvalue %"any[]" %233, i64 2, 1
  store %"any[]" %"$$temp232", ptr %indirectarg233, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg227, ptr align 8 %indirectarg228, ptr align 8 %indirectarg229, i32 74, ptr align 8 %indirectarg233) #5, !dbg !3276
  unreachable, !dbg !3276

panic286:                                         ; preds = %noerr_block282
  store i64 %146, ptr %taddr287, align 8
  %234 = insertvalue %any undef, ptr %taddr287, 0
  %235 = insertvalue %any %234, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr288, align 8
  %236 = insertvalue %any undef, ptr %taddr288, 0
  %237 = insertvalue %any %236, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.170, i64 61 }, ptr %indirectarg289, align 8
  store %"char[]" { ptr @.file.249, i64 10 }, ptr %indirectarg290, align 8
  store %"char[]" { ptr @.func.252, i64 4 }, ptr %indirectarg291, align 8
  store %any %235, ptr %varargslots292, align 16
  %ptradd293 = getelementptr inbounds i8, ptr %varargslots292, i64 16
  store %any %237, ptr %ptradd293, align 16
  %238 = insertvalue %"any[]" undef, ptr %varargslots292, 0
  %"$$temp294" = insertvalue %"any[]" %238, i64 2, 1
  store %"any[]" %"$$temp294", ptr %indirectarg295, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg289, ptr align 8 %indirectarg290, ptr align 8 %indirectarg291, i32 78, ptr align 8 %indirectarg295) #5, !dbg !3291
  unreachable, !dbg !3291

panic300:                                         ; preds = %checkok296
  store i64 %sub299, ptr %taddr301, align 8
  %239 = insertvalue %any undef, ptr %taddr301, 0
  %240 = insertvalue %any %239, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.16, i64 43 }, ptr %indirectarg302, align 8
  store %"char[]" { ptr @.file.249, i64 10 }, ptr %indirectarg303, align 8
  store %"char[]" { ptr @.func.252, i64 4 }, ptr %indirectarg304, align 8
  store %any %240, ptr %varargslots305, align 16
  %241 = insertvalue %"any[]" undef, ptr %varargslots305, 0
  %"$$temp306" = insertvalue %"any[]" %241, i64 1, 1
  store %"any[]" %"$$temp306", ptr %indirectarg307, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg302, ptr align 8 %indirectarg303, ptr align 8 %indirectarg304, i32 78, ptr align 8 %indirectarg307) #5, !dbg !3291
  unreachable, !dbg !3291

panic311:                                         ; preds = %checkok308
  store i64 %sub310, ptr %taddr312, align 8
  %242 = insertvalue %any undef, ptr %taddr312, 0
  %243 = insertvalue %any %242, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %146, ptr %taddr313, align 8
  %244 = insertvalue %any undef, ptr %taddr313, 0
  %245 = insertvalue %any %244, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 60 }, ptr %indirectarg314, align 8
  store %"char[]" { ptr @.file.249, i64 10 }, ptr %indirectarg315, align 8
  store %"char[]" { ptr @.func.252, i64 4 }, ptr %indirectarg316, align 8
  store %any %243, ptr %varargslots317, align 16
  %ptradd318 = getelementptr inbounds i8, ptr %varargslots317, i64 16
  store %any %245, ptr %ptradd318, align 16
  %246 = insertvalue %"any[]" undef, ptr %varargslots317, 0
  %"$$temp319" = insertvalue %"any[]" %246, i64 2, 1
  store %"any[]" %"$$temp319", ptr %indirectarg320, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg314, ptr align 8 %indirectarg315, ptr align 8 %indirectarg316, i32 78, ptr align 8 %indirectarg320) #5, !dbg !3291
  unreachable, !dbg !3291

panic355:                                         ; preds = %noerr_block347
  store i64 %171, ptr %taddr356, align 8
  %247 = insertvalue %any undef, ptr %taddr356, 0
  %248 = insertvalue %any %247, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr357, align 8
  %249 = insertvalue %any undef, ptr %taddr357, 0
  %250 = insertvalue %any %249, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.170, i64 61 }, ptr %indirectarg358, align 8
  store %"char[]" { ptr @.file.249, i64 10 }, ptr %indirectarg359, align 8
  store %"char[]" { ptr @.func.252, i64 4 }, ptr %indirectarg360, align 8
  store %any %248, ptr %varargslots361, align 16
  %ptradd362 = getelementptr inbounds i8, ptr %varargslots361, i64 16
  store %any %250, ptr %ptradd362, align 16
  %251 = insertvalue %"any[]" undef, ptr %varargslots361, 0
  %"$$temp363" = insertvalue %"any[]" %251, i64 2, 1
  store %"any[]" %"$$temp363", ptr %indirectarg364, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg358, ptr align 8 %indirectarg359, ptr align 8 %indirectarg360, i32 82, ptr align 8 %indirectarg364) #5, !dbg !3300
  unreachable, !dbg !3300

panic370:                                         ; preds = %checkok365
  store i64 %sub369, ptr %taddr371, align 8
  %252 = insertvalue %any undef, ptr %taddr371, 0
  %253 = insertvalue %any %252, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.16, i64 43 }, ptr %indirectarg372, align 8
  store %"char[]" { ptr @.file.249, i64 10 }, ptr %indirectarg373, align 8
  store %"char[]" { ptr @.func.252, i64 4 }, ptr %indirectarg374, align 8
  store %any %253, ptr %varargslots375, align 16
  %254 = insertvalue %"any[]" undef, ptr %varargslots375, 0
  %"$$temp376" = insertvalue %"any[]" %254, i64 1, 1
  store %"any[]" %"$$temp376", ptr %indirectarg377, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg372, ptr align 8 %indirectarg373, ptr align 8 %indirectarg374, i32 82, ptr align 8 %indirectarg377) #5, !dbg !3300
  unreachable, !dbg !3300

panic381:                                         ; preds = %checkok378
  store i64 %sub380, ptr %taddr382, align 8
  %255 = insertvalue %any undef, ptr %taddr382, 0
  %256 = insertvalue %any %255, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %171, ptr %taddr383, align 8
  %257 = insertvalue %any undef, ptr %taddr383, 0
  %258 = insertvalue %any %257, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 60 }, ptr %indirectarg384, align 8
  store %"char[]" { ptr @.file.249, i64 10 }, ptr %indirectarg385, align 8
  store %"char[]" { ptr @.func.252, i64 4 }, ptr %indirectarg386, align 8
  store %any %256, ptr %varargslots387, align 16
  %ptradd388 = getelementptr inbounds i8, ptr %varargslots387, i64 16
  store %any %258, ptr %ptradd388, align 16
  %259 = insertvalue %"any[]" undef, ptr %varargslots387, 0
  %"$$temp389" = insertvalue %"any[]" %259, i64 2, 1
  store %"any[]" %"$$temp389", ptr %indirectarg390, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg384, ptr align 8 %indirectarg385, ptr align 8 %indirectarg386, i32 82, ptr align 8 %indirectarg390) #5, !dbg !3300
  unreachable, !dbg !3300
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.Scanner.read(ptr %0, ptr %1, ptr align 8 %2) #0 comdat !dbg !3301 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %n = alloca i64, align 8
  %x = alloca i64, align 8
  %.anon = alloca i64, align 8
  %a = alloca i64, align 8
  %b = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr11 = alloca i64, align 8
  %indirectarg12 = alloca %"char[]", align 8
  %indirectarg13 = alloca %"char[]", align 8
  %indirectarg14 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg16 = alloca %"any[]", align 8
  %taddr21 = alloca i64, align 8
  %indirectarg22 = alloca %"char[]", align 8
  %indirectarg23 = alloca %"char[]", align 8
  %indirectarg24 = alloca %"char[]", align 8
  %varargslots25 = alloca [1 x %any], align 16
  %indirectarg27 = alloca %"any[]", align 8
  %taddr32 = alloca i64, align 8
  %taddr33 = alloca i64, align 8
  %indirectarg34 = alloca %"char[]", align 8
  %indirectarg35 = alloca %"char[]", align 8
  %indirectarg36 = alloca %"char[]", align 8
  %varargslots37 = alloca [2 x %any], align 16
  %indirectarg40 = alloca %"any[]", align 8
  %taddr45 = alloca i64, align 8
  %taddr46 = alloca i64, align 8
  %indirectarg47 = alloca %"char[]", align 8
  %indirectarg48 = alloca %"char[]", align 8
  %indirectarg49 = alloca %"char[]", align 8
  %varargslots50 = alloca [2 x %any], align 16
  %indirectarg53 = alloca %"any[]", align 8
  %taddr59 = alloca i64, align 8
  %indirectarg60 = alloca %"char[]", align 8
  %indirectarg61 = alloca %"char[]", align 8
  %indirectarg62 = alloca %"char[]", align 8
  %varargslots63 = alloca [1 x %any], align 16
  %indirectarg65 = alloca %"any[]", align 8
  %taddr70 = alloca i64, align 8
  %taddr71 = alloca i64, align 8
  %indirectarg72 = alloca %"char[]", align 8
  %indirectarg73 = alloca %"char[]", align 8
  %indirectarg74 = alloca %"char[]", align 8
  %varargslots75 = alloca [2 x %any], align 16
  %indirectarg78 = alloca %"any[]", align 8
  %taddr82 = alloca i64, align 8
  %taddr83 = alloca i64, align 8
  %indirectarg84 = alloca %"char[]", align 8
  %indirectarg85 = alloca %"char[]", align 8
  %indirectarg86 = alloca %"char[]", align 8
  %varargslots87 = alloca [2 x %any], align 16
  %indirectarg90 = alloca %"any[]", align 8
  %taddr96 = alloca i64, align 8
  %taddr97 = alloca i64, align 8
  %indirectarg98 = alloca %"char[]", align 8
  %indirectarg99 = alloca %"char[]", align 8
  %indirectarg100 = alloca %"char[]", align 8
  %varargslots101 = alloca [2 x %any], align 16
  %indirectarg104 = alloca %"any[]", align 8
  %error_var = alloca i64, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %indirectarg110 = alloca %"char[]", align 8
  %indirectarg111 = alloca %"char[]", align 8
  %indirectarg112 = alloca %"char[]", align 8
  %retparam = alloca i64, align 8
  %indirectarg113 = alloca %"char[]", align 8
  %reterr = alloca i64, align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !3304
  %3 = icmp eq ptr %1, null, !dbg !3304
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !3304
  br i1 %4, label %panic, label %checkok, !dbg !3304

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !3305, !DIExpression(), !3306)
    #dbg_declare(ptr %2, !3307, !DIExpression(), !3306)
    #dbg_declare(ptr %n, !3308, !DIExpression(), !3309)
  store i64 0, ptr %n, align 8, !dbg !3309
  %5 = load ptr, ptr %self, align 8, !dbg !3310
  %ptradd = getelementptr inbounds i8, ptr %5, i64 32, !dbg !3310
  %6 = load i64, ptr %ptradd, align 8, !dbg !3310
  %7 = load ptr, ptr %self, align 8, !dbg !3310
  %ptradd3 = getelementptr inbounds i8, ptr %7, i64 40, !dbg !3310
  %8 = load i64, ptr %ptradd3, align 8, !dbg !3310
  %lt = icmp ult i64 %6, %8, !dbg !3310
  br i1 %lt, label %if.then, label %if.exit, !dbg !3310

if.then:                                          ; preds = %checkok
  %ptradd4 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !3311
  %9 = load i64, ptr %ptradd4, align 8
  store i64 %9, ptr %x, align 8
  %10 = load ptr, ptr %self, align 8, !dbg !3311
  %ptradd5 = getelementptr inbounds i8, ptr %10, i64 40, !dbg !3311
  %11 = load i64, ptr %ptradd5, align 8, !dbg !3311
  %12 = load ptr, ptr %self, align 8, !dbg !3311
  %ptradd6 = getelementptr inbounds i8, ptr %12, i64 32, !dbg !3311
  %13 = load i64, ptr %ptradd6, align 8, !dbg !3311
  %sub = sub i64 %11, %13, !dbg !3311
  store i64 %sub, ptr %.anon, align 8
  %14 = load i64, ptr %x, align 8
  store i64 %14, ptr %a, align 8
  %15 = load i64, ptr %.anon, align 8
  store i64 %15, ptr %b, align 8
  %16 = load i64, ptr %a, align 8, !dbg !3313
  %17 = load i64, ptr %b, align 8, !dbg !3313
  %lt7 = icmp ult i64 %16, %17, !dbg !3313
  br i1 %lt7, label %cond.lhs, label %cond.rhs, !dbg !3313

cond.lhs:                                         ; preds = %if.then
  %18 = load i64, ptr %x, align 8, !dbg !3315
  br label %cond.phi, !dbg !3315

cond.rhs:                                         ; preds = %if.then
  %19 = load i64, ptr %.anon, align 8, !dbg !3315
  br label %cond.phi, !dbg !3315

cond.phi:                                         ; preds = %cond.rhs, %cond.lhs
  %val = phi i64 [ %18, %cond.lhs ], [ %19, %cond.rhs ], !dbg !3315
  store i64 %val, ptr %n, align 8, !dbg !3315
  %20 = load ptr, ptr %self, align 8, !dbg !3317
  %ptradd8 = getelementptr inbounds i8, ptr %20, i64 16, !dbg !3317
  %21 = load %"char[]", ptr %ptradd8, align 8, !dbg !3317
  %22 = extractvalue %"char[]" %21, 0, !dbg !3317
  %23 = load ptr, ptr %self, align 8, !dbg !3317
  %ptradd9 = getelementptr inbounds i8, ptr %23, i64 32, !dbg !3317
  %24 = load i64, ptr %ptradd9, align 8, !dbg !3317
  %25 = extractvalue %"char[]" %21, 1, !dbg !3317
  %gt = icmp ugt i64 %24, %25, !dbg !3317
  %26 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !3317
  br i1 %26, label %panic10, label %checkok17, !dbg !3317

checkok17:                                        ; preds = %cond.phi
  %27 = load i64, ptr %n, align 8, !dbg !3317
  %add = add i64 %24, %27, !dbg !3317
  %gt18 = icmp ugt i64 %24, %add, !dbg !3317
  %sub19 = sub i64 %add, %24, !dbg !3317
  %28 = call i1 @llvm.expect.i1(i1 %gt18, i1 false), !dbg !3317
  br i1 %28, label %panic20, label %checkok28, !dbg !3317

checkok28:                                        ; preds = %checkok17
  %lt29 = icmp ult i64 %25, %add, !dbg !3317
  %sub30 = sub i64 %add, 1, !dbg !3317
  %29 = call i1 @llvm.expect.i1(i1 %lt29, i1 false), !dbg !3317
  br i1 %29, label %panic31, label %checkok41, !dbg !3317

checkok41:                                        ; preds = %checkok28
  %size = sub i64 %add, %24, !dbg !3317
  %ptradd42 = getelementptr inbounds i8, ptr %22, i64 %24, !dbg !3317
  %30 = insertvalue %"char[]" undef, ptr %ptradd42, 0, !dbg !3317
  %31 = insertvalue %"char[]" %30, i64 %size, 1, !dbg !3317
  %32 = load %"char[]", ptr %2, align 8, !dbg !3317
  %33 = extractvalue %"char[]" %32, 0, !dbg !3317
  %34 = extractvalue %"char[]" %32, 1, !dbg !3317
  %gt43 = icmp ugt i64 0, %34, !dbg !3317
  %35 = call i1 @llvm.expect.i1(i1 %gt43, i1 false), !dbg !3317
  br i1 %35, label %panic44, label %checkok54, !dbg !3317

checkok54:                                        ; preds = %checkok41
  %36 = load i64, ptr %n, align 8, !dbg !3317
  %add55 = add i64 0, %36, !dbg !3317
  %gt56 = icmp ugt i64 0, %add55, !dbg !3317
  %sub57 = sub i64 %add55, 0, !dbg !3317
  %37 = call i1 @llvm.expect.i1(i1 %gt56, i1 false), !dbg !3317
  br i1 %37, label %panic58, label %checkok66, !dbg !3317

checkok66:                                        ; preds = %checkok54
  %lt67 = icmp ult i64 %34, %add55, !dbg !3317
  %sub68 = sub i64 %add55, 1, !dbg !3317
  %38 = call i1 @llvm.expect.i1(i1 %lt67, i1 false), !dbg !3317
  br i1 %38, label %panic69, label %checkok79, !dbg !3317

checkok79:                                        ; preds = %checkok66
  %size80 = sub i64 %add55, 0, !dbg !3317
  %39 = insertvalue %"char[]" undef, ptr %33, 0, !dbg !3317
  %40 = insertvalue %"char[]" %39, i64 %size80, 1, !dbg !3317
  %41 = extractvalue %"char[]" %40, 0, !dbg !3317
  %42 = extractvalue %"char[]" %31, 0, !dbg !3317
  %43 = extractvalue %"char[]" %31, 1, !dbg !3317
  %44 = extractvalue %"char[]" %40, 1, !dbg !3317
  %neq = icmp ne i64 %44, %43, !dbg !3317
  %45 = call i1 @llvm.expect.i1(i1 %neq, i1 false), !dbg !3317
  br i1 %45, label %panic81, label %checkok91, !dbg !3317

checkok91:                                        ; preds = %checkok79
  %46 = mul i64 %43, 1, !dbg !3317
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %41, ptr align 1 %42, i64 %46, i1 false), !dbg !3317
  %47 = load ptr, ptr %self, align 8, !dbg !3318
  %ptradd92 = getelementptr inbounds i8, ptr %47, i64 32, !dbg !3318
  %48 = load i64, ptr %ptradd92, align 8, !dbg !3318
  %49 = load i64, ptr %n, align 8, !dbg !3318
  %add93 = add i64 %48, %49, !dbg !3318
  store i64 %add93, ptr %ptradd92, align 8, !dbg !3318
  %50 = load %"char[]", ptr %2, align 8, !dbg !3319
  %51 = extractvalue %"char[]" %50, 0, !dbg !3319
  %52 = load i64, ptr %n, align 8, !dbg !3319
  %53 = extractvalue %"char[]" %50, 1, !dbg !3319
  %gt94 = icmp ugt i64 %52, %53, !dbg !3319
  %54 = call i1 @llvm.expect.i1(i1 %gt94, i1 false), !dbg !3319
  br i1 %54, label %panic95, label %checkok105, !dbg !3319

checkok105:                                       ; preds = %checkok91
  %size106 = sub i64 %53, %52, !dbg !3319
  %ptradd107 = getelementptr inbounds i8, ptr %51, i64 %52, !dbg !3319
  %55 = insertvalue %"char[]" undef, ptr %ptradd107, 0, !dbg !3319
  %56 = insertvalue %"char[]" %55, i64 %size106, 1, !dbg !3319
  store %"char[]" %56, ptr %2, align 8, !dbg !3319
  br label %if.exit, !dbg !3319

if.exit:                                          ; preds = %checkok105, %checkok
  %57 = load i64, ptr %n, align 8, !dbg !3320
  %58 = load ptr, ptr %self, align 8, !dbg !3320
  %ptradd108 = getelementptr inbounds i8, ptr %58, i64 8, !dbg !3320
  %59 = load i64, ptr %ptradd108, align 8, !dbg !3320
  %60 = inttoptr i64 %59 to ptr, !dbg !3320
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !3304
  %61 = icmp eq ptr %60, %type, !dbg !3304
  br i1 %61, label %cache_hit, label %cache_miss, !dbg !3304

cache_miss:                                       ; preds = %if.exit
  %ptradd109 = getelementptr inbounds i8, ptr %60, i64 16, !dbg !3304
  %62 = load ptr, ptr %ptradd109, align 8, !dbg !3304
  %63 = call ptr @.dyn_search(ptr %62, ptr @"$sel.read"), !dbg !3304
  store ptr %63, ptr %.inlinecache, align 8, !dbg !3304
  store ptr %60, ptr %.cachedtype, align 8, !dbg !3304
  br label %64, !dbg !3304

cache_hit:                                        ; preds = %if.exit
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !3304
  br label %64, !dbg !3304

64:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %63, %cache_miss ], !dbg !3304
  %65 = icmp eq ptr %fn_phi, null, !dbg !3304
  br i1 %65, label %missing_function, label %match, !dbg !3304

missing_function:                                 ; preds = %64
  store %"char[]" { ptr @.panic_msg.197, i64 41 }, ptr %indirectarg110, align 8
  store %"char[]" { ptr @.file.249, i64 10 }, ptr %indirectarg111, align 8
  store %"char[]" { ptr @.func.196, i64 4 }, ptr %indirectarg112, align 8
  %66 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %66(ptr align 8 %indirectarg110, ptr align 8 %indirectarg111, ptr align 8 %indirectarg112, i32 111) #5, !dbg !3320
  unreachable, !dbg !3320

match:                                            ; preds = %64
  %67 = load ptr, ptr %58, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg113, ptr align 8 %2, i32 16, i1 false)
  %68 = call i64 %fn_phi(ptr %retparam, ptr %67, ptr align 8 %indirectarg113), !dbg !3320
  %not_err = icmp eq i64 %68, 0, !dbg !3320
  %69 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !3320
  br i1 %69, label %after_check, label %assign_optional, !dbg !3320

assign_optional:                                  ; preds = %match
  store i64 %68, ptr %error_var, align 8, !dbg !3320
  br label %guard_block, !dbg !3320

after_check:                                      ; preds = %match
  br label %noerr_block, !dbg !3320

guard_block:                                      ; preds = %assign_optional
  %70 = load i64, ptr %error_var, align 8, !dbg !3320
  ret i64 %70, !dbg !3320

noerr_block:                                      ; preds = %after_check
  %71 = load i64, ptr %retparam, align 8, !dbg !3320
  %add114 = add i64 %57, %71, !dbg !3320
  store i64 %add114, ptr %n, align 8, !dbg !3320
  %72 = load i64, ptr %n, align 8, !dbg !3321
  store i64 %72, ptr %0, align 8, !dbg !3321
  ret i64 0, !dbg !3321

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.249, i64 10 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.196, i64 4 }, ptr %indirectarg2, align 8
  %73 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %73(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 101) #5, !dbg !3306
  unreachable, !dbg !3306

panic10:                                          ; preds = %cond.phi
  store i64 %25, ptr %taddr, align 8
  %74 = insertvalue %any undef, ptr %taddr, 0
  %75 = insertvalue %any %74, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %24, ptr %taddr11, align 8
  %76 = insertvalue %any undef, ptr %taddr11, 0
  %77 = insertvalue %any %76, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.170, i64 61 }, ptr %indirectarg12, align 8
  store %"char[]" { ptr @.file.249, i64 10 }, ptr %indirectarg13, align 8
  store %"char[]" { ptr @.func.196, i64 4 }, ptr %indirectarg14, align 8
  store %any %75, ptr %varargslots, align 16
  %ptradd15 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %77, ptr %ptradd15, align 16
  %78 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %78, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg16, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg12, ptr align 8 %indirectarg13, ptr align 8 %indirectarg14, i32 107, ptr align 8 %indirectarg16) #5, !dbg !3317
  unreachable, !dbg !3317

panic20:                                          ; preds = %checkok17
  store i64 %sub19, ptr %taddr21, align 8
  %79 = insertvalue %any undef, ptr %taddr21, 0
  %80 = insertvalue %any %79, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.16, i64 43 }, ptr %indirectarg22, align 8
  store %"char[]" { ptr @.file.249, i64 10 }, ptr %indirectarg23, align 8
  store %"char[]" { ptr @.func.196, i64 4 }, ptr %indirectarg24, align 8
  store %any %80, ptr %varargslots25, align 16
  %81 = insertvalue %"any[]" undef, ptr %varargslots25, 0
  %"$$temp26" = insertvalue %"any[]" %81, i64 1, 1
  store %"any[]" %"$$temp26", ptr %indirectarg27, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg22, ptr align 8 %indirectarg23, ptr align 8 %indirectarg24, i32 107, ptr align 8 %indirectarg27) #5, !dbg !3317
  unreachable, !dbg !3317

panic31:                                          ; preds = %checkok28
  store i64 %sub30, ptr %taddr32, align 8
  %82 = insertvalue %any undef, ptr %taddr32, 0
  %83 = insertvalue %any %82, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %25, ptr %taddr33, align 8
  %84 = insertvalue %any undef, ptr %taddr33, 0
  %85 = insertvalue %any %84, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 60 }, ptr %indirectarg34, align 8
  store %"char[]" { ptr @.file.249, i64 10 }, ptr %indirectarg35, align 8
  store %"char[]" { ptr @.func.196, i64 4 }, ptr %indirectarg36, align 8
  store %any %83, ptr %varargslots37, align 16
  %ptradd38 = getelementptr inbounds i8, ptr %varargslots37, i64 16
  store %any %85, ptr %ptradd38, align 16
  %86 = insertvalue %"any[]" undef, ptr %varargslots37, 0
  %"$$temp39" = insertvalue %"any[]" %86, i64 2, 1
  store %"any[]" %"$$temp39", ptr %indirectarg40, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg34, ptr align 8 %indirectarg35, ptr align 8 %indirectarg36, i32 107, ptr align 8 %indirectarg40) #5, !dbg !3317
  unreachable, !dbg !3317

panic44:                                          ; preds = %checkok41
  store i64 %34, ptr %taddr45, align 8
  %87 = insertvalue %any undef, ptr %taddr45, 0
  %88 = insertvalue %any %87, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr46, align 8
  %89 = insertvalue %any undef, ptr %taddr46, 0
  %90 = insertvalue %any %89, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.170, i64 61 }, ptr %indirectarg47, align 8
  store %"char[]" { ptr @.file.249, i64 10 }, ptr %indirectarg48, align 8
  store %"char[]" { ptr @.func.196, i64 4 }, ptr %indirectarg49, align 8
  store %any %88, ptr %varargslots50, align 16
  %ptradd51 = getelementptr inbounds i8, ptr %varargslots50, i64 16
  store %any %90, ptr %ptradd51, align 16
  %91 = insertvalue %"any[]" undef, ptr %varargslots50, 0
  %"$$temp52" = insertvalue %"any[]" %91, i64 2, 1
  store %"any[]" %"$$temp52", ptr %indirectarg53, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg47, ptr align 8 %indirectarg48, ptr align 8 %indirectarg49, i32 107, ptr align 8 %indirectarg53) #5, !dbg !3317
  unreachable, !dbg !3317

panic58:                                          ; preds = %checkok54
  store i64 %sub57, ptr %taddr59, align 8
  %92 = insertvalue %any undef, ptr %taddr59, 0
  %93 = insertvalue %any %92, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.16, i64 43 }, ptr %indirectarg60, align 8
  store %"char[]" { ptr @.file.249, i64 10 }, ptr %indirectarg61, align 8
  store %"char[]" { ptr @.func.196, i64 4 }, ptr %indirectarg62, align 8
  store %any %93, ptr %varargslots63, align 16
  %94 = insertvalue %"any[]" undef, ptr %varargslots63, 0
  %"$$temp64" = insertvalue %"any[]" %94, i64 1, 1
  store %"any[]" %"$$temp64", ptr %indirectarg65, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg60, ptr align 8 %indirectarg61, ptr align 8 %indirectarg62, i32 107, ptr align 8 %indirectarg65) #5, !dbg !3317
  unreachable, !dbg !3317

panic69:                                          ; preds = %checkok66
  store i64 %sub68, ptr %taddr70, align 8
  %95 = insertvalue %any undef, ptr %taddr70, 0
  %96 = insertvalue %any %95, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %34, ptr %taddr71, align 8
  %97 = insertvalue %any undef, ptr %taddr71, 0
  %98 = insertvalue %any %97, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 60 }, ptr %indirectarg72, align 8
  store %"char[]" { ptr @.file.249, i64 10 }, ptr %indirectarg73, align 8
  store %"char[]" { ptr @.func.196, i64 4 }, ptr %indirectarg74, align 8
  store %any %96, ptr %varargslots75, align 16
  %ptradd76 = getelementptr inbounds i8, ptr %varargslots75, i64 16
  store %any %98, ptr %ptradd76, align 16
  %99 = insertvalue %"any[]" undef, ptr %varargslots75, 0
  %"$$temp77" = insertvalue %"any[]" %99, i64 2, 1
  store %"any[]" %"$$temp77", ptr %indirectarg78, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg72, ptr align 8 %indirectarg73, ptr align 8 %indirectarg74, i32 107, ptr align 8 %indirectarg78) #5, !dbg !3317
  unreachable, !dbg !3317

panic81:                                          ; preds = %checkok79
  store i64 %44, ptr %taddr82, align 8
  %100 = insertvalue %any undef, ptr %taddr82, 0
  %101 = insertvalue %any %100, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %43, ptr %taddr83, align 8
  %102 = insertvalue %any undef, ptr %taddr83, 0
  %103 = insertvalue %any %102, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.198, i64 38 }, ptr %indirectarg84, align 8
  store %"char[]" { ptr @.file.249, i64 10 }, ptr %indirectarg85, align 8
  store %"char[]" { ptr @.func.196, i64 4 }, ptr %indirectarg86, align 8
  store %any %101, ptr %varargslots87, align 16
  %ptradd88 = getelementptr inbounds i8, ptr %varargslots87, i64 16
  store %any %103, ptr %ptradd88, align 16
  %104 = insertvalue %"any[]" undef, ptr %varargslots87, 0
  %"$$temp89" = insertvalue %"any[]" %104, i64 2, 1
  store %"any[]" %"$$temp89", ptr %indirectarg90, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg84, ptr align 8 %indirectarg85, ptr align 8 %indirectarg86, i32 107, ptr align 8 %indirectarg90) #5, !dbg !3317
  unreachable, !dbg !3317

panic95:                                          ; preds = %checkok91
  store i64 %53, ptr %taddr96, align 8
  %105 = insertvalue %any undef, ptr %taddr96, 0
  %106 = insertvalue %any %105, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %52, ptr %taddr97, align 8
  %107 = insertvalue %any undef, ptr %taddr97, 0
  %108 = insertvalue %any %107, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.170, i64 61 }, ptr %indirectarg98, align 8
  store %"char[]" { ptr @.file.249, i64 10 }, ptr %indirectarg99, align 8
  store %"char[]" { ptr @.func.196, i64 4 }, ptr %indirectarg100, align 8
  store %any %106, ptr %varargslots101, align 16
  %ptradd102 = getelementptr inbounds i8, ptr %varargslots101, i64 16
  store %any %108, ptr %ptradd102, align 16
  %109 = insertvalue %"any[]" undef, ptr %varargslots101, 0
  %"$$temp103" = insertvalue %"any[]" %109, i64 2, 1
  store %"any[]" %"$$temp103", ptr %indirectarg104, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg98, ptr align 8 %indirectarg99, ptr align 8 %indirectarg100, i32 109, ptr align 8 %indirectarg104) #5, !dbg !3319
  unreachable, !dbg !3319
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.Scanner.read_byte(ptr %0, ptr %1) #0 comdat !dbg !3322 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %reterr = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr8 = alloca i64, align 8
  %indirectarg9 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg13 = alloca %"any[]", align 8
  %reterr16 = alloca i64, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %indirectarg19 = alloca %"char[]", align 8
  %indirectarg20 = alloca %"char[]", align 8
  %indirectarg21 = alloca %"char[]", align 8
  %retparam = alloca i8, align 1
  store ptr null, ptr %.cachedtype, align 8, !dbg !3325
  %2 = icmp eq ptr %1, null, !dbg !3325
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !3325
  br i1 %3, label %panic, label %checkok, !dbg !3325

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !3326, !DIExpression(), !3327)
  %4 = load ptr, ptr %self, align 8, !dbg !3328
  %ptradd = getelementptr inbounds i8, ptr %4, i64 32, !dbg !3328
  %5 = load i64, ptr %ptradd, align 8, !dbg !3328
  %6 = load ptr, ptr %self, align 8, !dbg !3328
  %ptradd3 = getelementptr inbounds i8, ptr %6, i64 40, !dbg !3328
  %7 = load i64, ptr %ptradd3, align 8, !dbg !3328
  %lt = icmp ult i64 %5, %7, !dbg !3328
  br i1 %lt, label %if.then, label %if.exit, !dbg !3328

if.then:                                          ; preds = %checkok
  %8 = load ptr, ptr %self, align 8, !dbg !3329
  %ptradd4 = getelementptr inbounds i8, ptr %8, i64 16, !dbg !3329
  %ptradd5 = getelementptr inbounds i8, ptr %ptradd4, i64 8, !dbg !3329
  %9 = load i64, ptr %ptradd5, align 8, !dbg !3329
  %10 = load ptr, ptr %ptradd4, align 8, !dbg !3329
  %11 = load ptr, ptr %self, align 8, !dbg !3329
  %ptradd6 = getelementptr inbounds i8, ptr %11, i64 32, !dbg !3329
  %12 = load i64, ptr %ptradd6, align 8, !dbg !3329
  %add = add i64 %12, 1, !dbg !3329
  store i64 %add, ptr %ptradd6, align 8, !dbg !3329
  %ge = icmp uge i64 %12, %9, !dbg !3329
  %13 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !3329
  br i1 %13, label %panic7, label %checkok14, !dbg !3329

checkok14:                                        ; preds = %if.then
  %ptradd15 = getelementptr inbounds i8, ptr %10, i64 %12, !dbg !3329
  %14 = load i8, ptr %ptradd15, align 1, !dbg !3329
  store i8 %14, ptr %0, align 1, !dbg !3329
  ret i64 0, !dbg !3329

if.exit:                                          ; preds = %checkok
  %15 = load ptr, ptr %self, align 8, !dbg !3331
  %ptradd17 = getelementptr inbounds i8, ptr %15, i64 8, !dbg !3331
  %16 = load i64, ptr %ptradd17, align 8, !dbg !3331
  %17 = inttoptr i64 %16 to ptr, !dbg !3331
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !3325
  %18 = icmp eq ptr %17, %type, !dbg !3325
  br i1 %18, label %cache_hit, label %cache_miss, !dbg !3325

cache_miss:                                       ; preds = %if.exit
  %ptradd18 = getelementptr inbounds i8, ptr %17, i64 16, !dbg !3325
  %19 = load ptr, ptr %ptradd18, align 8, !dbg !3325
  %20 = call ptr @.dyn_search(ptr %19, ptr @"$sel.read_byte"), !dbg !3325
  store ptr %20, ptr %.inlinecache, align 8, !dbg !3325
  store ptr %17, ptr %.cachedtype, align 8, !dbg !3325
  br label %21, !dbg !3325

cache_hit:                                        ; preds = %if.exit
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !3325
  br label %21, !dbg !3325

21:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %20, %cache_miss ], !dbg !3325
  %22 = icmp eq ptr %fn_phi, null, !dbg !3325
  br i1 %22, label %missing_function, label %match, !dbg !3325

missing_function:                                 ; preds = %21
  store %"char[]" { ptr @.panic_msg.8, i64 46 }, ptr %indirectarg19, align 8
  store %"char[]" { ptr @.file.249, i64 10 }, ptr %indirectarg20, align 8
  store %"char[]" { ptr @.func.199, i64 9 }, ptr %indirectarg21, align 8
  %23 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %23(ptr align 8 %indirectarg19, ptr align 8 %indirectarg20, ptr align 8 %indirectarg21, i32 121) #5, !dbg !3331
  unreachable, !dbg !3331

match:                                            ; preds = %21
  %24 = load ptr, ptr %15, align 8
  %25 = call i64 %fn_phi(ptr %retparam, ptr %24), !dbg !3331
  %not_err = icmp eq i64 %25, 0, !dbg !3331
  %26 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !3331
  br i1 %26, label %after_check, label %assign_optional, !dbg !3331

assign_optional:                                  ; preds = %match
  store i64 %25, ptr %reterr16, align 8, !dbg !3331
  br label %err_retblock, !dbg !3331

after_check:                                      ; preds = %match
  %27 = load i8, ptr %retparam, align 1, !dbg !3331
  store i8 %27, ptr %0, align 1, !dbg !3331
  ret i64 0, !dbg !3331

err_retblock:                                     ; preds = %assign_optional
  %28 = load i64, ptr %reterr16, align 8, !dbg !3331
  ret i64 %28, !dbg !3331

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.249, i64 10 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.199, i64 9 }, ptr %indirectarg2, align 8
  %29 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %29(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 115) #5, !dbg !3327
  unreachable, !dbg !3327

panic7:                                           ; preds = %if.then
  store i64 %9, ptr %taddr, align 8
  %30 = insertvalue %any undef, ptr %taddr, 0
  %31 = insertvalue %any %30, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %12, ptr %taddr8, align 8
  %32 = insertvalue %any undef, ptr %taddr8, 0
  %33 = insertvalue %any %32, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.71, i64 59 }, ptr %indirectarg9, align 8
  store %"char[]" { ptr @.file.249, i64 10 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.func.199, i64 9 }, ptr %indirectarg11, align 8
  store %any %31, ptr %varargslots, align 16
  %ptradd12 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %33, ptr %ptradd12, align 16
  %34 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %34, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg13, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg9, ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, i32 119, ptr align 8 %indirectarg13) #5, !dbg !3329
  unreachable, !dbg !3329
}

; Function Attrs: nounwind ssp uwtable
define weak_odr ptr @std.io.TeeReader.init(ptr %0, ptr align 8 %1, ptr align 8 %2) #0 comdat !dbg !3332 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %r = alloca %any, align 8
  %w = alloca %any, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %literal = alloca %TeeReader, align 8
  %indirectarg13 = alloca %"char[]", align 8
  %indirectarg14 = alloca %"char[]", align 8
  %indirectarg15 = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr18 = alloca i64, align 8
  %indirectarg19 = alloca %"char[]", align 8
  %indirectarg20 = alloca %"char[]", align 8
  %indirectarg21 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg23 = alloca %"any[]", align 8
  %3 = icmp eq ptr %0, null, !dbg !3341
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !3341
  br i1 %4, label %panic, label %checkok, !dbg !3341

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !3342, !DIExpression(), !3343)
    #dbg_declare(ptr %1, !3344, !DIExpression(), !3343)
    #dbg_declare(ptr %2, !3345, !DIExpression(), !3343)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %r, ptr align 8 %1, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %w, ptr align 8 %2, i32 16, i1 false)
  %5 = load ptr, ptr %r, align 8, !dbg !3346
  %neq = icmp ne ptr %5, null, !dbg !3346
  br i1 %neq, label %assert_ok, label %assert_fail, !dbg !3346

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.229, i64 37 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.file.256, i64 12 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg5, align 8
  %6 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %6(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, i32 15) #5, !dbg !3346
  unreachable, !dbg !3346

assert_ok:                                        ; preds = %checkok
  %7 = load ptr, ptr %w, align 8, !dbg !3346
  %neq6 = icmp ne ptr %7, null, !dbg !3346
  br i1 %neq6, label %assert_ok11, label %assert_fail7, !dbg !3346

assert_fail7:                                     ; preds = %assert_ok
  store %"char[]" { ptr @.panic_msg.229, i64 37 }, ptr %indirectarg8, align 8
  store %"char[]" { ptr @.file.256, i64 12 }, ptr %indirectarg9, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg10, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8(ptr align 8 %indirectarg8, ptr align 8 %indirectarg9, ptr align 8 %indirectarg10, i32 15) #5, !dbg !3346
  unreachable, !dbg !3346

assert_ok11:                                      ; preds = %assert_ok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %literal, ptr align 8 %r, i32 16, i1 false), !dbg !3350
  %ptradd = getelementptr inbounds i8, ptr %literal, i64 16, !dbg !3350
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %ptradd, ptr align 8 %w, i32 16, i1 false), !dbg !3350
  %9 = load ptr, ptr %self, align 8, !dbg !3349
  %checknull = icmp eq ptr %9, null, !dbg !3349
  %10 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !3349
  br i1 %10, label %panic12, label %checkok16, !dbg !3349

checkok16:                                        ; preds = %assert_ok11
  %11 = ptrtoint ptr %9 to i64, !dbg !3349
  %12 = urem i64 %11, 8, !dbg !3349
  %13 = icmp ne i64 %12, 0, !dbg !3349
  %14 = call i1 @llvm.expect.i1(i1 %13, i1 false), !dbg !3349
  br i1 %14, label %panic17, label %checkok24, !dbg !3349

checkok24:                                        ; preds = %checkok16
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %9, ptr align 8 %literal, i32 32, i1 false), !dbg !3349
  %15 = load ptr, ptr %self, align 8, !dbg !3351
  ret ptr %15, !dbg !3351

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.256, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg2, align 8
  %16 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %16(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 22) #5, !dbg !3343
  unreachable, !dbg !3343

panic12:                                          ; preds = %assert_ok11
  store %"char[]" { ptr @.panic_msg.2, i64 45 }, ptr %indirectarg13, align 8
  store %"char[]" { ptr @.file.256, i64 12 }, ptr %indirectarg14, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg15, align 8
  %17 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %17(ptr align 8 %indirectarg13, ptr align 8 %indirectarg14, ptr align 8 %indirectarg15, i32 24) #5, !dbg !3349
  unreachable, !dbg !3349

panic17:                                          ; preds = %checkok16
  store i64 8, ptr %taddr, align 8
  %18 = insertvalue %any undef, ptr %taddr, 0
  %19 = insertvalue %any %18, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %12, ptr %taddr18, align 8
  %20 = insertvalue %any undef, ptr %taddr18, 0
  %21 = insertvalue %any %20, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 94 }, ptr %indirectarg19, align 8
  store %"char[]" { ptr @.file.256, i64 12 }, ptr %indirectarg20, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg21, align 8
  store %any %19, ptr %varargslots, align 16
  %ptradd22 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %21, ptr %ptradd22, align 16
  %22 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %22, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg23, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg19, ptr align 8 %indirectarg20, ptr align 8 %indirectarg21, i32 24, ptr align 8 %indirectarg23) #5, !dbg !3349
  unreachable, !dbg !3349
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.TeeReader.read(ptr %0, ptr %1, ptr align 8 %2) #0 comdat !dbg !3352 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %nr = alloca i64, align 8
  %nw = alloca i64, align 8
  %error_var = alloca i64, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %retparam = alloca i64, align 8
  %indirectarg7 = alloca %"char[]", align 8
  %error_var8 = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr11 = alloca i64, align 8
  %indirectarg12 = alloca %"char[]", align 8
  %indirectarg13 = alloca %"char[]", align 8
  %indirectarg14 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg16 = alloca %"any[]", align 8
  %taddr20 = alloca i64, align 8
  %indirectarg21 = alloca %"char[]", align 8
  %indirectarg22 = alloca %"char[]", align 8
  %indirectarg23 = alloca %"char[]", align 8
  %varargslots24 = alloca [1 x %any], align 16
  %indirectarg26 = alloca %"any[]", align 8
  %taddr30 = alloca i64, align 8
  %taddr31 = alloca i64, align 8
  %indirectarg32 = alloca %"char[]", align 8
  %indirectarg33 = alloca %"char[]", align 8
  %indirectarg34 = alloca %"char[]", align 8
  %varargslots35 = alloca [2 x %any], align 16
  %indirectarg38 = alloca %"any[]", align 8
  %.inlinecache41 = alloca ptr, align 8
  %.cachedtype42 = alloca ptr, align 8
  %indirectarg50 = alloca %"char[]", align 8
  %indirectarg51 = alloca %"char[]", align 8
  %indirectarg52 = alloca %"char[]", align 8
  %retparam54 = alloca i64, align 8
  %indirectarg55 = alloca %"char[]", align 8
  %reterr = alloca i64, align 8
  store ptr null, ptr %.cachedtype42, align 8, !dbg !3355
  store ptr null, ptr %.cachedtype, align 8, !dbg !3355
  %3 = icmp eq ptr %1, null, !dbg !3355
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !3355
  br i1 %4, label %panic, label %checkok, !dbg !3355

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !3356, !DIExpression(), !3357)
    #dbg_declare(ptr %2, !3358, !DIExpression(), !3357)
    #dbg_declare(ptr %nr, !3359, !DIExpression(), !3360)
  store i64 0, ptr %nr, align 8, !dbg !3360
    #dbg_declare(ptr %nw, !3361, !DIExpression(), !3360)
  store i64 0, ptr %nw, align 8, !dbg !3360
  %5 = load ptr, ptr %self, align 8, !dbg !3362
  %ptradd = getelementptr inbounds i8, ptr %5, i64 8, !dbg !3362
  %6 = load i64, ptr %ptradd, align 8, !dbg !3362
  %7 = inttoptr i64 %6 to ptr, !dbg !3362
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !3355
  %8 = icmp eq ptr %7, %type, !dbg !3355
  br i1 %8, label %cache_hit, label %cache_miss, !dbg !3355

cache_miss:                                       ; preds = %checkok
  %ptradd3 = getelementptr inbounds i8, ptr %7, i64 16, !dbg !3355
  %9 = load ptr, ptr %ptradd3, align 8, !dbg !3355
  %10 = call ptr @.dyn_search(ptr %9, ptr @"$sel.read"), !dbg !3355
  store ptr %10, ptr %.inlinecache, align 8, !dbg !3355
  store ptr %7, ptr %.cachedtype, align 8, !dbg !3355
  br label %11, !dbg !3355

cache_hit:                                        ; preds = %checkok
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !3355
  br label %11, !dbg !3355

11:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %10, %cache_miss ], !dbg !3355
  %12 = icmp eq ptr %fn_phi, null, !dbg !3355
  br i1 %12, label %missing_function, label %match, !dbg !3355

missing_function:                                 ; preds = %11
  store %"char[]" { ptr @.panic_msg.197, i64 41 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.256, i64 12 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.196, i64 4 }, ptr %indirectarg6, align 8
  %13 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %13(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 31) #5, !dbg !3362
  unreachable, !dbg !3362

match:                                            ; preds = %11
  %14 = load ptr, ptr %5, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg7, ptr align 8 %2, i32 16, i1 false)
  %15 = call i64 %fn_phi(ptr %retparam, ptr %14, ptr align 8 %indirectarg7), !dbg !3362
  %not_err = icmp eq i64 %15, 0, !dbg !3362
  %16 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !3362
  br i1 %16, label %after_check, label %assign_optional, !dbg !3362

assign_optional:                                  ; preds = %match
  store i64 %15, ptr %error_var, align 8, !dbg !3362
  br label %guard_block, !dbg !3362

after_check:                                      ; preds = %match
  br label %noerr_block, !dbg !3362

guard_block:                                      ; preds = %assign_optional
  %17 = load i64, ptr %error_var, align 8, !dbg !3362
  ret i64 %17, !dbg !3362

noerr_block:                                      ; preds = %after_check
  %18 = load i64, ptr %retparam, align 8, !dbg !3362
  store i64 %18, ptr %nr, align 8, !dbg !3362
  %19 = load ptr, ptr %self, align 8, !dbg !3363
  %ptradd9 = getelementptr inbounds i8, ptr %19, i64 16, !dbg !3363
  %20 = load %"char[]", ptr %2, align 8, !dbg !3363
  %21 = extractvalue %"char[]" %20, 0, !dbg !3363
  %22 = extractvalue %"char[]" %20, 1, !dbg !3363
  %gt = icmp ugt i64 0, %22, !dbg !3363
  %23 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !3363
  br i1 %23, label %panic10, label %checkok17, !dbg !3363

checkok17:                                        ; preds = %noerr_block
  %24 = load i64, ptr %nr, align 8, !dbg !3363
  %add = add i64 0, %24, !dbg !3363
  %gt18 = icmp ugt i64 0, %add, !dbg !3363
  %sub = sub i64 %add, 0, !dbg !3363
  %25 = call i1 @llvm.expect.i1(i1 %gt18, i1 false), !dbg !3363
  br i1 %25, label %panic19, label %checkok27, !dbg !3363

checkok27:                                        ; preds = %checkok17
  %lt = icmp ult i64 %22, %add, !dbg !3363
  %sub28 = sub i64 %add, 1, !dbg !3363
  %26 = call i1 @llvm.expect.i1(i1 %lt, i1 false), !dbg !3363
  br i1 %26, label %panic29, label %checkok39, !dbg !3363

checkok39:                                        ; preds = %checkok27
  %size = sub i64 %add, 0, !dbg !3363
  %27 = insertvalue %"char[]" undef, ptr %21, 0, !dbg !3363
  %28 = insertvalue %"char[]" %27, i64 %size, 1, !dbg !3363
  %ptradd40 = getelementptr inbounds i8, ptr %ptradd9, i64 8, !dbg !3363
  %29 = load i64, ptr %ptradd40, align 8, !dbg !3363
  %30 = inttoptr i64 %29 to ptr, !dbg !3363
  %type43 = load ptr, ptr %.cachedtype42, align 8, !dbg !3355
  %31 = icmp eq ptr %30, %type43, !dbg !3355
  br i1 %31, label %cache_hit46, label %cache_miss44, !dbg !3355

cache_miss44:                                     ; preds = %checkok39
  %ptradd45 = getelementptr inbounds i8, ptr %30, i64 16, !dbg !3355
  %32 = load ptr, ptr %ptradd45, align 8, !dbg !3355
  %33 = call ptr @.dyn_search(ptr %32, ptr @"$sel.write"), !dbg !3355
  store ptr %33, ptr %.inlinecache41, align 8, !dbg !3355
  store ptr %30, ptr %.cachedtype42, align 8, !dbg !3355
  br label %34, !dbg !3355

cache_hit46:                                      ; preds = %checkok39
  %cache_hit_fn47 = load ptr, ptr %.inlinecache41, align 8, !dbg !3355
  br label %34, !dbg !3355

34:                                               ; preds = %cache_hit46, %cache_miss44
  %fn_phi48 = phi ptr [ %cache_hit_fn47, %cache_hit46 ], [ %33, %cache_miss44 ], !dbg !3355
  %35 = icmp eq ptr %fn_phi48, null, !dbg !3355
  br i1 %35, label %missing_function49, label %match53, !dbg !3355

missing_function49:                               ; preds = %34
  store %"char[]" { ptr @.panic_msg.18, i64 42 }, ptr %indirectarg50, align 8
  store %"char[]" { ptr @.file.256, i64 12 }, ptr %indirectarg51, align 8
  store %"char[]" { ptr @.func.196, i64 4 }, ptr %indirectarg52, align 8
  %36 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %36(ptr align 8 %indirectarg50, ptr align 8 %indirectarg51, ptr align 8 %indirectarg52, i32 32) #5, !dbg !3363
  unreachable, !dbg !3363

match53:                                          ; preds = %34
  %37 = load ptr, ptr %ptradd9, align 8
  store %"char[]" %28, ptr %indirectarg55, align 8
  %38 = call i64 %fn_phi48(ptr %retparam54, ptr %37, ptr align 8 %indirectarg55), !dbg !3363
  %not_err56 = icmp eq i64 %38, 0, !dbg !3363
  %39 = call i1 @llvm.expect.i1(i1 %not_err56, i1 true), !dbg !3363
  br i1 %39, label %after_check58, label %assign_optional57, !dbg !3363

assign_optional57:                                ; preds = %match53
  store i64 %38, ptr %error_var8, align 8, !dbg !3363
  br label %guard_block59, !dbg !3363

after_check58:                                    ; preds = %match53
  br label %noerr_block60, !dbg !3363

guard_block59:                                    ; preds = %assign_optional57
  %40 = load i64, ptr %error_var8, align 8, !dbg !3363
  ret i64 %40, !dbg !3363

noerr_block60:                                    ; preds = %after_check58
  %41 = load i64, ptr %retparam54, align 8, !dbg !3363
  store i64 %41, ptr %nw, align 8, !dbg !3363
  %42 = load i64, ptr %nr, align 8, !dbg !3364
  %43 = load i64, ptr %nw, align 8, !dbg !3364
  %neq = icmp ne i64 %42, %43, !dbg !3364
  br i1 %neq, label %if.then, label %if.exit, !dbg !3364

if.then:                                          ; preds = %noerr_block60
  ret i64 ptrtoint (ptr @std.io.GENERAL_ERROR to i64), !dbg !3364

if.exit:                                          ; preds = %noerr_block60
  %44 = load i64, ptr %nr, align 8, !dbg !3365
  store i64 %44, ptr %0, align 8, !dbg !3365
  ret i64 0, !dbg !3365

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.256, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.196, i64 4 }, ptr %indirectarg2, align 8
  %45 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %45(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 28) #5, !dbg !3357
  unreachable, !dbg !3357

panic10:                                          ; preds = %noerr_block
  store i64 %22, ptr %taddr, align 8
  %46 = insertvalue %any undef, ptr %taddr, 0
  %47 = insertvalue %any %46, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr11, align 8
  %48 = insertvalue %any undef, ptr %taddr11, 0
  %49 = insertvalue %any %48, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.170, i64 61 }, ptr %indirectarg12, align 8
  store %"char[]" { ptr @.file.256, i64 12 }, ptr %indirectarg13, align 8
  store %"char[]" { ptr @.func.196, i64 4 }, ptr %indirectarg14, align 8
  store %any %47, ptr %varargslots, align 16
  %ptradd15 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %49, ptr %ptradd15, align 16
  %50 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %50, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg16, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg12, ptr align 8 %indirectarg13, ptr align 8 %indirectarg14, i32 32, ptr align 8 %indirectarg16) #5, !dbg !3363
  unreachable, !dbg !3363

panic19:                                          ; preds = %checkok17
  store i64 %sub, ptr %taddr20, align 8
  %51 = insertvalue %any undef, ptr %taddr20, 0
  %52 = insertvalue %any %51, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.16, i64 43 }, ptr %indirectarg21, align 8
  store %"char[]" { ptr @.file.256, i64 12 }, ptr %indirectarg22, align 8
  store %"char[]" { ptr @.func.196, i64 4 }, ptr %indirectarg23, align 8
  store %any %52, ptr %varargslots24, align 16
  %53 = insertvalue %"any[]" undef, ptr %varargslots24, 0
  %"$$temp25" = insertvalue %"any[]" %53, i64 1, 1
  store %"any[]" %"$$temp25", ptr %indirectarg26, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg21, ptr align 8 %indirectarg22, ptr align 8 %indirectarg23, i32 32, ptr align 8 %indirectarg26) #5, !dbg !3363
  unreachable, !dbg !3363

panic29:                                          ; preds = %checkok27
  store i64 %sub28, ptr %taddr30, align 8
  %54 = insertvalue %any undef, ptr %taddr30, 0
  %55 = insertvalue %any %54, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %22, ptr %taddr31, align 8
  %56 = insertvalue %any undef, ptr %taddr31, 0
  %57 = insertvalue %any %56, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 60 }, ptr %indirectarg32, align 8
  store %"char[]" { ptr @.file.256, i64 12 }, ptr %indirectarg33, align 8
  store %"char[]" { ptr @.func.196, i64 4 }, ptr %indirectarg34, align 8
  store %any %55, ptr %varargslots35, align 16
  %ptradd36 = getelementptr inbounds i8, ptr %varargslots35, i64 16
  store %any %57, ptr %ptradd36, align 16
  %58 = insertvalue %"any[]" undef, ptr %varargslots35, 0
  %"$$temp37" = insertvalue %"any[]" %58, i64 2, 1
  store %"any[]" %"$$temp37", ptr %indirectarg38, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg32, ptr align 8 %indirectarg33, ptr align 8 %indirectarg34, i32 32, ptr align 8 %indirectarg38) #5, !dbg !3363
  unreachable, !dbg !3363
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.TeeReader.read_byte(ptr %0, ptr %1) #0 comdat !dbg !3366 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %data = alloca [1 x i8], align 1
  %error_var = alloca i64, align 8
  %retparam = alloca i64, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %reterr = alloca i64, align 8
  %2 = icmp eq ptr %1, null, !dbg !3369
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !3369
  br i1 %3, label %panic, label %checkok, !dbg !3369

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !3370, !DIExpression(), !3371)
    #dbg_declare(ptr %data, !3372, !DIExpression(), !3373)
  store i8 0, ptr %data, align 1, !dbg !3373
  %4 = insertvalue %"char[]" undef, ptr %data, 0, !dbg !3374
  %5 = insertvalue %"char[]" %4, i64 1, 1, !dbg !3374
  %6 = load ptr, ptr %self, align 8
  store %"char[]" %5, ptr %indirectarg3, align 8
  %7 = call i64 @std.io.TeeReader.read(ptr %retparam, ptr %6, ptr align 8 %indirectarg3), !dbg !3374
  %not_err = icmp eq i64 %7, 0, !dbg !3374
  %8 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !3374
  br i1 %8, label %after_check, label %assign_optional, !dbg !3374

assign_optional:                                  ; preds = %checkok
  store i64 %7, ptr %error_var, align 8, !dbg !3374
  br label %guard_block, !dbg !3374

after_check:                                      ; preds = %checkok
  br label %noerr_block, !dbg !3374

guard_block:                                      ; preds = %assign_optional
  %9 = load i64, ptr %error_var, align 8, !dbg !3374
  ret i64 %9, !dbg !3374

noerr_block:                                      ; preds = %after_check
  %10 = load i8, ptr %data, align 1, !dbg !3375
  store i8 %10, ptr %0, align 1, !dbg !3375
  ret i64 0, !dbg !3375

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.256, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.199, i64 9 }, ptr %indirectarg2, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 37) #5, !dbg !3371
  unreachable, !dbg !3371
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.available(ptr %0, ptr align 8 %1) #0 comdat !dbg !3376 {
entry:
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %reterr = alloca i64, align 8
  %.inlinecache2 = alloca ptr, align 8
  %.cachedtype3 = alloca ptr, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %retparam = alloca i64, align 8
  %.inlinecache12 = alloca ptr, align 8
  %.cachedtype13 = alloca ptr, align 8
  %curr = alloca i64, align 8
  %error_var = alloca i64, align 8
  %.inlinecache23 = alloca ptr, align 8
  %.cachedtype24 = alloca ptr, align 8
  %indirectarg32 = alloca %"char[]", align 8
  %indirectarg33 = alloca %"char[]", align 8
  %indirectarg34 = alloca %"char[]", align 8
  %retparam36 = alloca i64, align 8
  %len = alloca i64, align 8
  %error_var40 = alloca i64, align 8
  %.inlinecache42 = alloca ptr, align 8
  %.cachedtype43 = alloca ptr, align 8
  %indirectarg51 = alloca %"char[]", align 8
  %indirectarg52 = alloca %"char[]", align 8
  %indirectarg53 = alloca %"char[]", align 8
  %retparam55 = alloca i64, align 8
  %error_var61 = alloca i64, align 8
  %.inlinecache63 = alloca ptr, align 8
  %.cachedtype64 = alloca ptr, align 8
  %indirectarg72 = alloca %"char[]", align 8
  %indirectarg73 = alloca %"char[]", align 8
  %indirectarg74 = alloca %"char[]", align 8
  %retparam76 = alloca i64, align 8
  %reterr82 = alloca i64, align 8
  %reterr84 = alloca i64, align 8
    #dbg_declare(ptr %1, !3379, !DIExpression(), !3380)
  store ptr null, ptr %.cachedtype64, align 8, !dbg !3381
  store ptr null, ptr %.cachedtype43, align 8, !dbg !3381
  store ptr null, ptr %.cachedtype24, align 8, !dbg !3381
  store ptr null, ptr %.cachedtype13, align 8, !dbg !3381
  store ptr null, ptr %.cachedtype3, align 8, !dbg !3381
  store ptr null, ptr %.cachedtype, align 8, !dbg !3381
  %2 = load %any, ptr %1, align 8, !dbg !3381
  %3 = extractvalue %any %2, 1, !dbg !3381
  %4 = inttoptr i64 %3 to ptr, !dbg !3381
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !3381
  %5 = icmp eq ptr %4, %type, !dbg !3381
  br i1 %5, label %cache_hit, label %cache_miss, !dbg !3381

cache_miss:                                       ; preds = %entry
  %ptradd = getelementptr inbounds i8, ptr %4, i64 16, !dbg !3381
  %6 = load ptr, ptr %ptradd, align 8, !dbg !3381
  %7 = call ptr @.dyn_search(ptr %6, ptr @"$sel.available"), !dbg !3381
  store ptr %7, ptr %.inlinecache, align 8, !dbg !3381
  store ptr %4, ptr %.cachedtype, align 8, !dbg !3381
  br label %8, !dbg !3381

cache_hit:                                        ; preds = %entry
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !3381
  br label %8, !dbg !3381

8:                                                ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %7, %cache_miss ], !dbg !3381
  %i2b = icmp ne ptr %fn_phi, null, !dbg !3381
  br i1 %i2b, label %if.then, label %if.exit, !dbg !3381

if.then:                                          ; preds = %8
  %ptradd1 = getelementptr inbounds i8, ptr %1, i64 8, !dbg !3381
  %9 = load i64, ptr %ptradd1, align 8, !dbg !3381
  %10 = inttoptr i64 %9 to ptr, !dbg !3381
  %type4 = load ptr, ptr %.cachedtype3, align 8, !dbg !3381
  %11 = icmp eq ptr %10, %type4, !dbg !3381
  br i1 %11, label %cache_hit7, label %cache_miss5, !dbg !3381

cache_miss5:                                      ; preds = %if.then
  %ptradd6 = getelementptr inbounds i8, ptr %10, i64 16, !dbg !3381
  %12 = load ptr, ptr %ptradd6, align 8, !dbg !3381
  %13 = call ptr @.dyn_search(ptr %12, ptr @"$sel.available"), !dbg !3381
  store ptr %13, ptr %.inlinecache2, align 8, !dbg !3381
  store ptr %10, ptr %.cachedtype3, align 8, !dbg !3381
  br label %14, !dbg !3381

cache_hit7:                                       ; preds = %if.then
  %cache_hit_fn8 = load ptr, ptr %.inlinecache2, align 8, !dbg !3381
  br label %14, !dbg !3381

14:                                               ; preds = %cache_hit7, %cache_miss5
  %fn_phi9 = phi ptr [ %cache_hit_fn8, %cache_hit7 ], [ %13, %cache_miss5 ], !dbg !3381
  %15 = icmp eq ptr %fn_phi9, null, !dbg !3381
  br i1 %15, label %missing_function, label %match, !dbg !3381

missing_function:                                 ; preds = %14
  store %"char[]" { ptr @.panic_msg.241, i64 46 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.19, i64 9 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.func.218, i64 9 }, ptr %indirectarg11, align 8
  %16 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %16(ptr align 8 %indirectarg, ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, i32 29) #5, !dbg !3381
  unreachable, !dbg !3381

match:                                            ; preds = %14
  %17 = load ptr, ptr %1, align 8
  %18 = call i64 %fn_phi9(ptr %retparam, ptr %17), !dbg !3381
  %not_err = icmp eq i64 %18, 0, !dbg !3381
  %19 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !3381
  br i1 %19, label %after_check, label %assign_optional, !dbg !3381

assign_optional:                                  ; preds = %match
  store i64 %18, ptr %reterr, align 8, !dbg !3381
  br label %err_retblock, !dbg !3381

after_check:                                      ; preds = %match
  %20 = load i64, ptr %retparam, align 8, !dbg !3381
  store i64 %20, ptr %0, align 8, !dbg !3381
  ret i64 0, !dbg !3381

err_retblock:                                     ; preds = %assign_optional
  %21 = load i64, ptr %reterr, align 8, !dbg !3381
  ret i64 %21, !dbg !3381

if.exit:                                          ; preds = %8
  %22 = load %any, ptr %1, align 8, !dbg !3382
  %23 = extractvalue %any %22, 1, !dbg !3382
  %24 = inttoptr i64 %23 to ptr, !dbg !3382
  %type14 = load ptr, ptr %.cachedtype13, align 8, !dbg !3381
  %25 = icmp eq ptr %24, %type14, !dbg !3381
  br i1 %25, label %cache_hit17, label %cache_miss15, !dbg !3381

cache_miss15:                                     ; preds = %if.exit
  %ptradd16 = getelementptr inbounds i8, ptr %24, i64 16, !dbg !3381
  %26 = load ptr, ptr %ptradd16, align 8, !dbg !3381
  %27 = call ptr @.dyn_search(ptr %26, ptr @"$sel.seek"), !dbg !3381
  store ptr %27, ptr %.inlinecache12, align 8, !dbg !3381
  store ptr %24, ptr %.cachedtype13, align 8, !dbg !3381
  br label %28, !dbg !3381

cache_hit17:                                      ; preds = %if.exit
  %cache_hit_fn18 = load ptr, ptr %.inlinecache12, align 8, !dbg !3381
  br label %28, !dbg !3381

28:                                               ; preds = %cache_hit17, %cache_miss15
  %fn_phi19 = phi ptr [ %cache_hit_fn18, %cache_hit17 ], [ %27, %cache_miss15 ], !dbg !3381
  %i2b20 = icmp ne ptr %fn_phi19, null, !dbg !3381
  br i1 %i2b20, label %if.then21, label %if.exit83, !dbg !3381

if.then21:                                        ; preds = %28
    #dbg_declare(ptr %curr, !3383, !DIExpression(), !3385)
  %ptradd22 = getelementptr inbounds i8, ptr %1, i64 8, !dbg !3385
  %29 = load i64, ptr %ptradd22, align 8, !dbg !3385
  %30 = inttoptr i64 %29 to ptr, !dbg !3385
  %type25 = load ptr, ptr %.cachedtype24, align 8, !dbg !3381
  %31 = icmp eq ptr %30, %type25, !dbg !3381
  br i1 %31, label %cache_hit28, label %cache_miss26, !dbg !3381

cache_miss26:                                     ; preds = %if.then21
  %ptradd27 = getelementptr inbounds i8, ptr %30, i64 16, !dbg !3381
  %32 = load ptr, ptr %ptradd27, align 8, !dbg !3381
  %33 = call ptr @.dyn_search(ptr %32, ptr @"$sel.seek"), !dbg !3381
  store ptr %33, ptr %.inlinecache23, align 8, !dbg !3381
  store ptr %30, ptr %.cachedtype24, align 8, !dbg !3381
  br label %34, !dbg !3381

cache_hit28:                                      ; preds = %if.then21
  %cache_hit_fn29 = load ptr, ptr %.inlinecache23, align 8, !dbg !3381
  br label %34, !dbg !3381

34:                                               ; preds = %cache_hit28, %cache_miss26
  %fn_phi30 = phi ptr [ %cache_hit_fn29, %cache_hit28 ], [ %33, %cache_miss26 ], !dbg !3381
  %35 = icmp eq ptr %fn_phi30, null, !dbg !3381
  br i1 %35, label %missing_function31, label %match35, !dbg !3381

missing_function31:                               ; preds = %34
  store %"char[]" { ptr @.panic_msg.257, i64 41 }, ptr %indirectarg32, align 8
  store %"char[]" { ptr @.file.19, i64 9 }, ptr %indirectarg33, align 8
  store %"char[]" { ptr @.func.218, i64 9 }, ptr %indirectarg34, align 8
  %36 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %36(ptr align 8 %indirectarg32, ptr align 8 %indirectarg33, ptr align 8 %indirectarg34, i32 32) #5, !dbg !3385
  unreachable, !dbg !3385

match35:                                          ; preds = %34
  %37 = load ptr, ptr %1, align 8
  %38 = call i64 %fn_phi30(ptr %retparam36, ptr %37, i64 0, i32 1), !dbg !3385
  %not_err37 = icmp eq i64 %38, 0, !dbg !3385
  %39 = call i1 @llvm.expect.i1(i1 %not_err37, i1 true), !dbg !3385
  br i1 %39, label %after_check39, label %assign_optional38, !dbg !3385

assign_optional38:                                ; preds = %match35
  store i64 %38, ptr %error_var, align 8, !dbg !3385
  br label %guard_block, !dbg !3385

after_check39:                                    ; preds = %match35
  br label %noerr_block, !dbg !3385

guard_block:                                      ; preds = %assign_optional38
  %40 = load i64, ptr %error_var, align 8, !dbg !3385
  ret i64 %40, !dbg !3385

noerr_block:                                      ; preds = %after_check39
  %41 = load i64, ptr %retparam36, align 8, !dbg !3385
  store i64 %41, ptr %curr, align 8, !dbg !3385
    #dbg_declare(ptr %len, !3386, !DIExpression(), !3387)
  %ptradd41 = getelementptr inbounds i8, ptr %1, i64 8, !dbg !3387
  %42 = load i64, ptr %ptradd41, align 8, !dbg !3387
  %43 = inttoptr i64 %42 to ptr, !dbg !3387
  %type44 = load ptr, ptr %.cachedtype43, align 8, !dbg !3381
  %44 = icmp eq ptr %43, %type44, !dbg !3381
  br i1 %44, label %cache_hit47, label %cache_miss45, !dbg !3381

cache_miss45:                                     ; preds = %noerr_block
  %ptradd46 = getelementptr inbounds i8, ptr %43, i64 16, !dbg !3381
  %45 = load ptr, ptr %ptradd46, align 8, !dbg !3381
  %46 = call ptr @.dyn_search(ptr %45, ptr @"$sel.seek"), !dbg !3381
  store ptr %46, ptr %.inlinecache42, align 8, !dbg !3381
  store ptr %43, ptr %.cachedtype43, align 8, !dbg !3381
  br label %47, !dbg !3381

cache_hit47:                                      ; preds = %noerr_block
  %cache_hit_fn48 = load ptr, ptr %.inlinecache42, align 8, !dbg !3381
  br label %47, !dbg !3381

47:                                               ; preds = %cache_hit47, %cache_miss45
  %fn_phi49 = phi ptr [ %cache_hit_fn48, %cache_hit47 ], [ %46, %cache_miss45 ], !dbg !3381
  %48 = icmp eq ptr %fn_phi49, null, !dbg !3381
  br i1 %48, label %missing_function50, label %match54, !dbg !3381

missing_function50:                               ; preds = %47
  store %"char[]" { ptr @.panic_msg.257, i64 41 }, ptr %indirectarg51, align 8
  store %"char[]" { ptr @.file.19, i64 9 }, ptr %indirectarg52, align 8
  store %"char[]" { ptr @.func.218, i64 9 }, ptr %indirectarg53, align 8
  %49 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %49(ptr align 8 %indirectarg51, ptr align 8 %indirectarg52, ptr align 8 %indirectarg53, i32 33) #5, !dbg !3387
  unreachable, !dbg !3387

match54:                                          ; preds = %47
  %50 = load ptr, ptr %1, align 8
  %51 = call i64 %fn_phi49(ptr %retparam55, ptr %50, i64 0, i32 2), !dbg !3387
  %not_err56 = icmp eq i64 %51, 0, !dbg !3387
  %52 = call i1 @llvm.expect.i1(i1 %not_err56, i1 true), !dbg !3387
  br i1 %52, label %after_check58, label %assign_optional57, !dbg !3387

assign_optional57:                                ; preds = %match54
  store i64 %51, ptr %error_var40, align 8, !dbg !3387
  br label %guard_block59, !dbg !3387

after_check58:                                    ; preds = %match54
  br label %noerr_block60, !dbg !3387

guard_block59:                                    ; preds = %assign_optional57
  %53 = load i64, ptr %error_var40, align 8, !dbg !3387
  ret i64 %53, !dbg !3387

noerr_block60:                                    ; preds = %after_check58
  %54 = load i64, ptr %retparam55, align 8, !dbg !3387
  store i64 %54, ptr %len, align 8, !dbg !3387
  %55 = load i64, ptr %curr, align 8, !dbg !3388
  %ptradd62 = getelementptr inbounds i8, ptr %1, i64 8, !dbg !3388
  %56 = load i64, ptr %ptradd62, align 8, !dbg !3388
  %57 = inttoptr i64 %56 to ptr, !dbg !3388
  %type65 = load ptr, ptr %.cachedtype64, align 8, !dbg !3381
  %58 = icmp eq ptr %57, %type65, !dbg !3381
  br i1 %58, label %cache_hit68, label %cache_miss66, !dbg !3381

cache_miss66:                                     ; preds = %noerr_block60
  %ptradd67 = getelementptr inbounds i8, ptr %57, i64 16, !dbg !3381
  %59 = load ptr, ptr %ptradd67, align 8, !dbg !3381
  %60 = call ptr @.dyn_search(ptr %59, ptr @"$sel.seek"), !dbg !3381
  store ptr %60, ptr %.inlinecache63, align 8, !dbg !3381
  store ptr %57, ptr %.cachedtype64, align 8, !dbg !3381
  br label %61, !dbg !3381

cache_hit68:                                      ; preds = %noerr_block60
  %cache_hit_fn69 = load ptr, ptr %.inlinecache63, align 8, !dbg !3381
  br label %61, !dbg !3381

61:                                               ; preds = %cache_hit68, %cache_miss66
  %fn_phi70 = phi ptr [ %cache_hit_fn69, %cache_hit68 ], [ %60, %cache_miss66 ], !dbg !3381
  %62 = icmp eq ptr %fn_phi70, null, !dbg !3381
  br i1 %62, label %missing_function71, label %match75, !dbg !3381

missing_function71:                               ; preds = %61
  store %"char[]" { ptr @.panic_msg.257, i64 41 }, ptr %indirectarg72, align 8
  store %"char[]" { ptr @.file.19, i64 9 }, ptr %indirectarg73, align 8
  store %"char[]" { ptr @.func.218, i64 9 }, ptr %indirectarg74, align 8
  %63 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %63(ptr align 8 %indirectarg72, ptr align 8 %indirectarg73, ptr align 8 %indirectarg74, i32 34) #5, !dbg !3388
  unreachable, !dbg !3388

match75:                                          ; preds = %61
  %64 = load ptr, ptr %1, align 8
  %65 = call i64 %fn_phi70(ptr %retparam76, ptr %64, i64 %55, i32 0), !dbg !3388
  %not_err77 = icmp eq i64 %65, 0, !dbg !3388
  %66 = call i1 @llvm.expect.i1(i1 %not_err77, i1 true), !dbg !3388
  br i1 %66, label %after_check79, label %assign_optional78, !dbg !3388

assign_optional78:                                ; preds = %match75
  store i64 %65, ptr %error_var61, align 8, !dbg !3388
  br label %guard_block80, !dbg !3388

after_check79:                                    ; preds = %match75
  br label %noerr_block81, !dbg !3388

guard_block80:                                    ; preds = %assign_optional78
  %67 = load i64, ptr %error_var61, align 8, !dbg !3388
  ret i64 %67, !dbg !3388

noerr_block81:                                    ; preds = %after_check79
  %68 = load i64, ptr %len, align 8, !dbg !3389
  %69 = load i64, ptr %curr, align 8, !dbg !3389
  %sub = sub i64 %68, %69, !dbg !3389
  store i64 %sub, ptr %0, align 8, !dbg !3389
  ret i64 0, !dbg !3389

if.exit83:                                        ; preds = %28
  store i64 0, ptr %0, align 8, !dbg !3390
  ret i64 0, !dbg !3390
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.copy_to(ptr %0, ptr align 8 %1, ptr align 8 %2, ptr align 8 %3) #0 comdat !dbg !3391 {
entry:
  %reterr = alloca i64, align 8
  %in = alloca %any, align 8
  %dst = alloca %any, align 8
  %buffer = alloca %"char[]", align 8
  %blockret = alloca i64, align 8
  %total_copied = alloca i64, align 8
  %len = alloca i64, align 8
  %len.f = alloca i64, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %retparam = alloca i64, align 8
  %indirectarg5 = alloca %"char[]", align 8
  %err = alloca i64, align 8
  %written = alloca i64, align 8
  %error_var = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr15 = alloca i64, align 8
  %indirectarg16 = alloca %"char[]", align 8
  %indirectarg17 = alloca %"char[]", align 8
  %indirectarg18 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg20 = alloca %"any[]", align 8
  %taddr23 = alloca i64, align 8
  %indirectarg24 = alloca %"char[]", align 8
  %indirectarg25 = alloca %"char[]", align 8
  %indirectarg26 = alloca %"char[]", align 8
  %varargslots27 = alloca [1 x %any], align 16
  %indirectarg29 = alloca %"any[]", align 8
  %taddr33 = alloca i64, align 8
  %taddr34 = alloca i64, align 8
  %indirectarg35 = alloca %"char[]", align 8
  %indirectarg36 = alloca %"char[]", align 8
  %indirectarg37 = alloca %"char[]", align 8
  %varargslots38 = alloca [2 x %any], align 16
  %indirectarg41 = alloca %"any[]", align 8
  %.inlinecache44 = alloca ptr, align 8
  %.cachedtype45 = alloca ptr, align 8
  %indirectarg53 = alloca %"char[]", align 8
  %indirectarg54 = alloca %"char[]", align 8
  %indirectarg55 = alloca %"char[]", align 8
  %retparam57 = alloca i64, align 8
  %indirectarg58 = alloca %"char[]", align 8
  %.inlinecache66 = alloca ptr, align 8
  %.cachedtype67 = alloca ptr, align 8
  %reterr76 = alloca i64, align 8
  %.inlinecache78 = alloca ptr, align 8
  %.cachedtype79 = alloca ptr, align 8
  %indirectarg87 = alloca %"char[]", align 8
  %indirectarg88 = alloca %"char[]", align 8
  %indirectarg89 = alloca %"char[]", align 8
  %retparam91 = alloca i64, align 8
  %indirectarg92 = alloca %any, align 8
  %.inlinecache98 = alloca ptr, align 8
  %.cachedtype99 = alloca ptr, align 8
  %reterr108 = alloca i64, align 8
  %.inlinecache110 = alloca ptr, align 8
  %.cachedtype111 = alloca ptr, align 8
  %indirectarg119 = alloca %"char[]", align 8
  %indirectarg120 = alloca %"char[]", align 8
  %indirectarg121 = alloca %"char[]", align 8
  %retparam123 = alloca i64, align 8
  %indirectarg124 = alloca %any, align 8
  %reterr130 = alloca i64, align 8
  %in131 = alloca %any, align 8
  %dst132 = alloca %any, align 8
  %literal = alloca [4096 x i8], align 16
  %buffer133 = alloca %"char[]", align 8
  %blockret134 = alloca i64, align 8
  %total_copied135 = alloca i64, align 8
  %len137 = alloca i64, align 8
  %len.f138 = alloca i64, align 8
  %.inlinecache140 = alloca ptr, align 8
  %.cachedtype141 = alloca ptr, align 8
  %indirectarg149 = alloca %"char[]", align 8
  %indirectarg150 = alloca %"char[]", align 8
  %indirectarg151 = alloca %"char[]", align 8
  %retparam153 = alloca i64, align 8
  %indirectarg154 = alloca %"char[]", align 8
  %err159 = alloca i64, align 8
  %written175 = alloca i64, align 8
  %error_var176 = alloca i64, align 8
  %taddr179 = alloca i64, align 8
  %taddr180 = alloca i64, align 8
  %indirectarg181 = alloca %"char[]", align 8
  %indirectarg182 = alloca %"char[]", align 8
  %indirectarg183 = alloca %"char[]", align 8
  %varargslots184 = alloca [2 x %any], align 16
  %indirectarg187 = alloca %"any[]", align 8
  %taddr193 = alloca i64, align 8
  %indirectarg194 = alloca %"char[]", align 8
  %indirectarg195 = alloca %"char[]", align 8
  %indirectarg196 = alloca %"char[]", align 8
  %varargslots197 = alloca [1 x %any], align 16
  %indirectarg199 = alloca %"any[]", align 8
  %taddr204 = alloca i64, align 8
  %taddr205 = alloca i64, align 8
  %indirectarg206 = alloca %"char[]", align 8
  %indirectarg207 = alloca %"char[]", align 8
  %indirectarg208 = alloca %"char[]", align 8
  %varargslots209 = alloca [2 x %any], align 16
  %indirectarg212 = alloca %"any[]", align 8
  %.inlinecache216 = alloca ptr, align 8
  %.cachedtype217 = alloca ptr, align 8
  %indirectarg225 = alloca %"char[]", align 8
  %indirectarg226 = alloca %"char[]", align 8
  %indirectarg227 = alloca %"char[]", align 8
  %retparam229 = alloca i64, align 8
  %indirectarg230 = alloca %"char[]", align 8
    #dbg_declare(ptr %1, !3394, !DIExpression(), !3395)
    #dbg_declare(ptr %2, !3396, !DIExpression(), !3395)
    #dbg_declare(ptr %3, !3397, !DIExpression(), !3395)
  store ptr null, ptr %.cachedtype217, align 8, !dbg !3398
  store ptr null, ptr %.cachedtype141, align 8, !dbg !3398
  store ptr null, ptr %.cachedtype111, align 8, !dbg !3398
  store ptr null, ptr %.cachedtype99, align 8, !dbg !3398
  store ptr null, ptr %.cachedtype79, align 8, !dbg !3398
  store ptr null, ptr %.cachedtype67, align 8, !dbg !3398
  store ptr null, ptr %.cachedtype45, align 8, !dbg !3398
  store ptr null, ptr %.cachedtype, align 8, !dbg !3398
  %ptradd = getelementptr inbounds i8, ptr %3, i64 8, !dbg !3398
  %4 = load i64, ptr %ptradd, align 8, !dbg !3398
  %i2b = icmp ne i64 %4, 0, !dbg !3398
  br i1 %i2b, label %if.then, label %if.exit65, !dbg !3398

if.then:                                          ; preds = %entry
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %in, ptr align 8 %1, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %dst, ptr align 8 %2, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %buffer, ptr align 8 %3, i32 16, i1 false)
    #dbg_declare(ptr %total_copied, !3399, !DIExpression(), !3401)
  store i64 0, ptr %total_copied, align 8, !dbg !3401
  br label %loop.body, !dbg !3402

loop.body:                                        ; preds = %if.exit64, %if.then
    #dbg_declare(ptr %len, !3403, !DIExpression(), !3406)
  %ptradd1 = getelementptr inbounds i8, ptr %in, i64 8, !dbg !3406
  %5 = load i64, ptr %ptradd1, align 8, !dbg !3406
  %6 = inttoptr i64 %5 to ptr, !dbg !3406
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !3398
  %7 = icmp eq ptr %6, %type, !dbg !3398
  br i1 %7, label %cache_hit, label %cache_miss, !dbg !3398

cache_miss:                                       ; preds = %loop.body
  %ptradd2 = getelementptr inbounds i8, ptr %6, i64 16, !dbg !3398
  %8 = load ptr, ptr %ptradd2, align 8, !dbg !3398
  %9 = call ptr @.dyn_search(ptr %8, ptr @"$sel.read"), !dbg !3398
  store ptr %9, ptr %.inlinecache, align 8, !dbg !3398
  store ptr %6, ptr %.cachedtype, align 8, !dbg !3398
  br label %10, !dbg !3398

cache_hit:                                        ; preds = %loop.body
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !3398
  br label %10, !dbg !3398

10:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %9, %cache_miss ], !dbg !3398
  %11 = icmp eq ptr %fn_phi, null, !dbg !3398
  br i1 %11, label %missing_function, label %match, !dbg !3398

missing_function:                                 ; preds = %10
  store %"char[]" { ptr @.panic_msg.197, i64 41 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.19, i64 9 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.func.258, i64 7 }, ptr %indirectarg4, align 8
  %12 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %12(ptr align 8 %indirectarg, ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, i32 173) #5, !dbg !3406
  unreachable, !dbg !3406

match:                                            ; preds = %10
  %13 = load ptr, ptr %in, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg5, ptr align 8 %buffer, i32 16, i1 false)
  %14 = call i64 %fn_phi(ptr %retparam, ptr %13, ptr align 8 %indirectarg5), !dbg !3406
  %not_err = icmp eq i64 %14, 0, !dbg !3406
  %15 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !3406
  br i1 %15, label %after_check, label %assign_optional, !dbg !3406

assign_optional:                                  ; preds = %match
  store i64 %14, ptr %len.f, align 8, !dbg !3406
  br label %after_assign, !dbg !3406

after_check:                                      ; preds = %match
  %16 = load i64, ptr %retparam, align 8, !dbg !3406
  store i64 %16, ptr %len, align 8, !dbg !3406
  store i64 0, ptr %len.f, align 8, !dbg !3406
  br label %after_assign, !dbg !3406

after_assign:                                     ; preds = %after_check, %assign_optional
    #dbg_declare(ptr %err, !3407, !DIExpression(), !3408)
  br label %testblock, !dbg !3408

testblock:                                        ; preds = %after_assign
  %optval = load i64, ptr %len.f, align 8, !dbg !3408
  %not_err6 = icmp eq i64 %optval, 0, !dbg !3408
  %17 = call i1 @llvm.expect.i1(i1 %not_err6, i1 true), !dbg !3408
  br i1 %17, label %after_check8, label %assign_optional7, !dbg !3408

assign_optional7:                                 ; preds = %testblock
  store i64 %optval, ptr %err, align 8, !dbg !3408
  br label %end_block, !dbg !3408

after_check8:                                     ; preds = %testblock
  store i64 0, ptr %err, align 8, !dbg !3408
  br label %end_block, !dbg !3408

end_block:                                        ; preds = %after_check8, %assign_optional7
  %18 = load i64, ptr %err, align 8, !dbg !3408
  %i2b9 = icmp ne i64 %18, 0, !dbg !3408
  br i1 %i2b9, label %if.then10, label %if.exit12, !dbg !3408

if.then10:                                        ; preds = %end_block
  %19 = load i64, ptr %err, align 8, !dbg !3409
  %eq = icmp eq i64 %19, ptrtoint (ptr @std.io.EOF to i64), !dbg !3409
  br i1 %eq, label %if.then11, label %if.exit, !dbg !3409

if.then11:                                        ; preds = %if.then10
  %20 = load i64, ptr %total_copied, align 8, !dbg !3409
  store i64 %20, ptr %blockret, align 8, !dbg !3409
  br label %expr_block.exit, !dbg !3409

if.exit:                                          ; preds = %if.then10
  %21 = load i64, ptr %err, align 8, !dbg !3411
  store i64 %21, ptr %reterr, align 8, !dbg !3411
  br label %err_retblock, !dbg !3411

if.exit12:                                        ; preds = %end_block
  %22 = load i64, ptr %len, align 8, !dbg !3412
  %i2nb = icmp eq i64 %22, 0, !dbg !3412
  br i1 %i2nb, label %if.then13, label %if.exit14, !dbg !3412

if.then13:                                        ; preds = %if.exit12
  %23 = load i64, ptr %total_copied, align 8, !dbg !3412
  store i64 %23, ptr %blockret, align 8, !dbg !3412
  br label %expr_block.exit, !dbg !3412

if.exit14:                                        ; preds = %if.exit12
    #dbg_declare(ptr %written, !3413, !DIExpression(), !3414)
  %24 = load %"char[]", ptr %buffer, align 8, !dbg !3414
  %25 = extractvalue %"char[]" %24, 0, !dbg !3414
  %26 = extractvalue %"char[]" %24, 1, !dbg !3414
  %gt = icmp ugt i64 0, %26, !dbg !3414
  %27 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !3414
  br i1 %27, label %panic, label %checkok, !dbg !3414

checkok:                                          ; preds = %if.exit14
  %28 = load i64, ptr %len, align 8, !dbg !3414
  %add = add i64 0, %28, !dbg !3414
  %gt21 = icmp ugt i64 0, %add, !dbg !3414
  %sub = sub i64 %add, 0, !dbg !3414
  %29 = call i1 @llvm.expect.i1(i1 %gt21, i1 false), !dbg !3414
  br i1 %29, label %panic22, label %checkok30, !dbg !3414

checkok30:                                        ; preds = %checkok
  %lt = icmp ult i64 %26, %add, !dbg !3414
  %sub31 = sub i64 %add, 1, !dbg !3414
  %30 = call i1 @llvm.expect.i1(i1 %lt, i1 false), !dbg !3414
  br i1 %30, label %panic32, label %checkok42, !dbg !3414

checkok42:                                        ; preds = %checkok30
  %size = sub i64 %add, 0, !dbg !3414
  %31 = insertvalue %"char[]" undef, ptr %25, 0, !dbg !3414
  %32 = insertvalue %"char[]" %31, i64 %size, 1, !dbg !3414
  %ptradd43 = getelementptr inbounds i8, ptr %dst, i64 8, !dbg !3414
  %33 = load i64, ptr %ptradd43, align 8, !dbg !3414
  %34 = inttoptr i64 %33 to ptr, !dbg !3414
  %type46 = load ptr, ptr %.cachedtype45, align 8, !dbg !3398
  %35 = icmp eq ptr %34, %type46, !dbg !3398
  br i1 %35, label %cache_hit49, label %cache_miss47, !dbg !3398

cache_miss47:                                     ; preds = %checkok42
  %ptradd48 = getelementptr inbounds i8, ptr %34, i64 16, !dbg !3398
  %36 = load ptr, ptr %ptradd48, align 8, !dbg !3398
  %37 = call ptr @.dyn_search(ptr %36, ptr @"$sel.write"), !dbg !3398
  store ptr %37, ptr %.inlinecache44, align 8, !dbg !3398
  store ptr %34, ptr %.cachedtype45, align 8, !dbg !3398
  br label %38, !dbg !3398

cache_hit49:                                      ; preds = %checkok42
  %cache_hit_fn50 = load ptr, ptr %.inlinecache44, align 8, !dbg !3398
  br label %38, !dbg !3398

38:                                               ; preds = %cache_hit49, %cache_miss47
  %fn_phi51 = phi ptr [ %cache_hit_fn50, %cache_hit49 ], [ %37, %cache_miss47 ], !dbg !3398
  %39 = icmp eq ptr %fn_phi51, null, !dbg !3398
  br i1 %39, label %missing_function52, label %match56, !dbg !3398

missing_function52:                               ; preds = %38
  store %"char[]" { ptr @.panic_msg.18, i64 42 }, ptr %indirectarg53, align 8
  store %"char[]" { ptr @.file.19, i64 9 }, ptr %indirectarg54, align 8
  store %"char[]" { ptr @.func.258, i64 7 }, ptr %indirectarg55, align 8
  %40 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %40(ptr align 8 %indirectarg53, ptr align 8 %indirectarg54, ptr align 8 %indirectarg55, i32 180) #5, !dbg !3414
  unreachable, !dbg !3414

match56:                                          ; preds = %38
  %41 = load ptr, ptr %dst, align 8
  store %"char[]" %32, ptr %indirectarg58, align 8
  %42 = call i64 %fn_phi51(ptr %retparam57, ptr %41, ptr align 8 %indirectarg58), !dbg !3414
  %not_err59 = icmp eq i64 %42, 0, !dbg !3414
  %43 = call i1 @llvm.expect.i1(i1 %not_err59, i1 true), !dbg !3414
  br i1 %43, label %after_check61, label %assign_optional60, !dbg !3414

assign_optional60:                                ; preds = %match56
  store i64 %42, ptr %error_var, align 8, !dbg !3414
  br label %guard_block, !dbg !3414

after_check61:                                    ; preds = %match56
  br label %noerr_block, !dbg !3414

guard_block:                                      ; preds = %assign_optional60
  %44 = load i64, ptr %error_var, align 8, !dbg !3414
  store i64 %44, ptr %reterr, align 8, !dbg !3414
  br label %err_retblock, !dbg !3414

noerr_block:                                      ; preds = %after_check61
  %45 = load i64, ptr %retparam57, align 8, !dbg !3414
  store i64 %45, ptr %written, align 8, !dbg !3414
  %46 = load i64, ptr %total_copied, align 8, !dbg !3415
  %47 = load i64, ptr %len, align 8, !dbg !3415
  %add62 = add i64 %46, %47, !dbg !3415
  store i64 %add62, ptr %total_copied, align 8, !dbg !3415
  %48 = load i64, ptr %written, align 8, !dbg !3416
  %49 = load i64, ptr %len, align 8, !dbg !3416
  %neq = icmp ne i64 %48, %49, !dbg !3416
  br i1 %neq, label %if.then63, label %if.exit64, !dbg !3416

if.then63:                                        ; preds = %noerr_block
  store i64 ptrtoint (ptr @std.io.INCOMPLETE_WRITE to i64), ptr %reterr, align 8, !dbg !3416
  br label %err_retblock, !dbg !3416

if.exit64:                                        ; preds = %noerr_block
  br label %loop.body, !dbg !3416

expr_block.exit:                                  ; preds = %if.then13, %if.then11
  %50 = load i64, ptr %blockret, align 8, !dbg !3416
  store i64 %50, ptr %0, align 8, !dbg !3416
  ret i64 0, !dbg !3416

err_retblock:                                     ; preds = %if.then63, %guard_block, %if.exit
  %51 = load i64, ptr %reterr, align 8, !dbg !3416
  ret i64 %51, !dbg !3416

if.exit65:                                        ; preds = %entry
  %52 = load %any, ptr %1, align 8, !dbg !3417
  %53 = extractvalue %any %52, 1, !dbg !3417
  %54 = inttoptr i64 %53 to ptr, !dbg !3417
  %type68 = load ptr, ptr %.cachedtype67, align 8, !dbg !3398
  %55 = icmp eq ptr %54, %type68, !dbg !3398
  br i1 %55, label %cache_hit71, label %cache_miss69, !dbg !3398

cache_miss69:                                     ; preds = %if.exit65
  %ptradd70 = getelementptr inbounds i8, ptr %54, i64 16, !dbg !3398
  %56 = load ptr, ptr %ptradd70, align 8, !dbg !3398
  %57 = call ptr @.dyn_search(ptr %56, ptr @"$sel.write_to"), !dbg !3398
  store ptr %57, ptr %.inlinecache66, align 8, !dbg !3398
  store ptr %54, ptr %.cachedtype67, align 8, !dbg !3398
  br label %58, !dbg !3398

cache_hit71:                                      ; preds = %if.exit65
  %cache_hit_fn72 = load ptr, ptr %.inlinecache66, align 8, !dbg !3398
  br label %58, !dbg !3398

58:                                               ; preds = %cache_hit71, %cache_miss69
  %fn_phi73 = phi ptr [ %cache_hit_fn72, %cache_hit71 ], [ %57, %cache_miss69 ], !dbg !3398
  %i2b74 = icmp ne ptr %fn_phi73, null, !dbg !3398
  br i1 %i2b74, label %if.then75, label %if.exit97, !dbg !3398

if.then75:                                        ; preds = %58
  %ptradd77 = getelementptr inbounds i8, ptr %1, i64 8, !dbg !3417
  %59 = load i64, ptr %ptradd77, align 8, !dbg !3417
  %60 = inttoptr i64 %59 to ptr, !dbg !3417
  %type80 = load ptr, ptr %.cachedtype79, align 8, !dbg !3398
  %61 = icmp eq ptr %60, %type80, !dbg !3398
  br i1 %61, label %cache_hit83, label %cache_miss81, !dbg !3398

cache_miss81:                                     ; preds = %if.then75
  %ptradd82 = getelementptr inbounds i8, ptr %60, i64 16, !dbg !3398
  %62 = load ptr, ptr %ptradd82, align 8, !dbg !3398
  %63 = call ptr @.dyn_search(ptr %62, ptr @"$sel.write_to"), !dbg !3398
  store ptr %63, ptr %.inlinecache78, align 8, !dbg !3398
  store ptr %60, ptr %.cachedtype79, align 8, !dbg !3398
  br label %64, !dbg !3398

cache_hit83:                                      ; preds = %if.then75
  %cache_hit_fn84 = load ptr, ptr %.inlinecache78, align 8, !dbg !3398
  br label %64, !dbg !3398

64:                                               ; preds = %cache_hit83, %cache_miss81
  %fn_phi85 = phi ptr [ %cache_hit_fn84, %cache_hit83 ], [ %63, %cache_miss81 ], !dbg !3398
  %65 = icmp eq ptr %fn_phi85, null, !dbg !3398
  br i1 %65, label %missing_function86, label %match90, !dbg !3398

missing_function86:                               ; preds = %64
  store %"char[]" { ptr @.panic_msg.259, i64 45 }, ptr %indirectarg87, align 8
  store %"char[]" { ptr @.file.19, i64 9 }, ptr %indirectarg88, align 8
  store %"char[]" { ptr @.func.258, i64 7 }, ptr %indirectarg89, align 8
  %66 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %66(ptr align 8 %indirectarg87, ptr align 8 %indirectarg88, ptr align 8 %indirectarg89, i32 155) #5, !dbg !3417
  unreachable, !dbg !3417

match90:                                          ; preds = %64
  %67 = load ptr, ptr %1, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg92, ptr align 8 %2, i32 16, i1 false)
  %68 = call i64 %fn_phi85(ptr %retparam91, ptr %67, ptr align 8 %indirectarg92), !dbg !3417
  %not_err93 = icmp eq i64 %68, 0, !dbg !3417
  %69 = call i1 @llvm.expect.i1(i1 %not_err93, i1 true), !dbg !3417
  br i1 %69, label %after_check95, label %assign_optional94, !dbg !3417

assign_optional94:                                ; preds = %match90
  store i64 %68, ptr %reterr76, align 8, !dbg !3417
  br label %err_retblock96, !dbg !3417

after_check95:                                    ; preds = %match90
  %70 = load i64, ptr %retparam91, align 8, !dbg !3417
  store i64 %70, ptr %0, align 8, !dbg !3417
  ret i64 0, !dbg !3417

err_retblock96:                                   ; preds = %assign_optional94
  %71 = load i64, ptr %reterr76, align 8, !dbg !3417
  ret i64 %71, !dbg !3417

if.exit97:                                        ; preds = %58
  %72 = load %any, ptr %2, align 8, !dbg !3418
  %73 = extractvalue %any %72, 1, !dbg !3418
  %74 = inttoptr i64 %73 to ptr, !dbg !3418
  %type100 = load ptr, ptr %.cachedtype99, align 8, !dbg !3398
  %75 = icmp eq ptr %74, %type100, !dbg !3398
  br i1 %75, label %cache_hit103, label %cache_miss101, !dbg !3398

cache_miss101:                                    ; preds = %if.exit97
  %ptradd102 = getelementptr inbounds i8, ptr %74, i64 16, !dbg !3398
  %76 = load ptr, ptr %ptradd102, align 8, !dbg !3398
  %77 = call ptr @.dyn_search(ptr %76, ptr @"$sel.read_to"), !dbg !3398
  store ptr %77, ptr %.inlinecache98, align 8, !dbg !3398
  store ptr %74, ptr %.cachedtype99, align 8, !dbg !3398
  br label %78, !dbg !3398

cache_hit103:                                     ; preds = %if.exit97
  %cache_hit_fn104 = load ptr, ptr %.inlinecache98, align 8, !dbg !3398
  br label %78, !dbg !3398

78:                                               ; preds = %cache_hit103, %cache_miss101
  %fn_phi105 = phi ptr [ %cache_hit_fn104, %cache_hit103 ], [ %77, %cache_miss101 ], !dbg !3398
  %i2b106 = icmp ne ptr %fn_phi105, null, !dbg !3398
  br i1 %i2b106, label %if.then107, label %if.exit129, !dbg !3398

if.then107:                                       ; preds = %78
  %ptradd109 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !3418
  %79 = load i64, ptr %ptradd109, align 8, !dbg !3418
  %80 = inttoptr i64 %79 to ptr, !dbg !3418
  %type112 = load ptr, ptr %.cachedtype111, align 8, !dbg !3398
  %81 = icmp eq ptr %80, %type112, !dbg !3398
  br i1 %81, label %cache_hit115, label %cache_miss113, !dbg !3398

cache_miss113:                                    ; preds = %if.then107
  %ptradd114 = getelementptr inbounds i8, ptr %80, i64 16, !dbg !3398
  %82 = load ptr, ptr %ptradd114, align 8, !dbg !3398
  %83 = call ptr @.dyn_search(ptr %82, ptr @"$sel.read_to"), !dbg !3398
  store ptr %83, ptr %.inlinecache110, align 8, !dbg !3398
  store ptr %80, ptr %.cachedtype111, align 8, !dbg !3398
  br label %84, !dbg !3398

cache_hit115:                                     ; preds = %if.then107
  %cache_hit_fn116 = load ptr, ptr %.inlinecache110, align 8, !dbg !3398
  br label %84, !dbg !3398

84:                                               ; preds = %cache_hit115, %cache_miss113
  %fn_phi117 = phi ptr [ %cache_hit_fn116, %cache_hit115 ], [ %83, %cache_miss113 ], !dbg !3398
  %85 = icmp eq ptr %fn_phi117, null, !dbg !3398
  br i1 %85, label %missing_function118, label %match122, !dbg !3398

missing_function118:                              ; preds = %84
  store %"char[]" { ptr @.panic_msg.260, i64 44 }, ptr %indirectarg119, align 8
  store %"char[]" { ptr @.file.19, i64 9 }, ptr %indirectarg120, align 8
  store %"char[]" { ptr @.func.258, i64 7 }, ptr %indirectarg121, align 8
  %86 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %86(ptr align 8 %indirectarg119, ptr align 8 %indirectarg120, ptr align 8 %indirectarg121, i32 156) #5, !dbg !3418
  unreachable, !dbg !3418

match122:                                         ; preds = %84
  %87 = load ptr, ptr %2, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg124, ptr align 8 %1, i32 16, i1 false)
  %88 = call i64 %fn_phi117(ptr %retparam123, ptr %87, ptr align 8 %indirectarg124), !dbg !3418
  %not_err125 = icmp eq i64 %88, 0, !dbg !3418
  %89 = call i1 @llvm.expect.i1(i1 %not_err125, i1 true), !dbg !3418
  br i1 %89, label %after_check127, label %assign_optional126, !dbg !3418

assign_optional126:                               ; preds = %match122
  store i64 %88, ptr %reterr108, align 8, !dbg !3418
  br label %err_retblock128, !dbg !3418

after_check127:                                   ; preds = %match122
  %90 = load i64, ptr %retparam123, align 8, !dbg !3418
  store i64 %90, ptr %0, align 8, !dbg !3418
  ret i64 0, !dbg !3418

err_retblock128:                                  ; preds = %assign_optional126
  %91 = load i64, ptr %reterr108, align 8, !dbg !3418
  ret i64 %91, !dbg !3418

if.exit129:                                       ; preds = %78
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %in131, ptr align 8 %1, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %dst132, ptr align 8 %2, i32 16, i1 false)
  call void @llvm.memset.p0.i64(ptr align 1 %literal, i8 0, i64 4096, i1 false)
  %92 = insertvalue %"char[]" undef, ptr %literal, 0
  %93 = insertvalue %"char[]" %92, i64 4096, 1
  store %"char[]" %93, ptr %buffer133, align 8
    #dbg_declare(ptr %total_copied135, !3419, !DIExpression(), !3421)
  store i64 0, ptr %total_copied135, align 8, !dbg !3421
  br label %loop.body136, !dbg !3423

loop.body136:                                     ; preds = %if.exit239, %if.exit129
    #dbg_declare(ptr %len137, !3424, !DIExpression(), !3427)
  %ptradd139 = getelementptr inbounds i8, ptr %in131, i64 8, !dbg !3427
  %94 = load i64, ptr %ptradd139, align 8, !dbg !3427
  %95 = inttoptr i64 %94 to ptr, !dbg !3427
  %type142 = load ptr, ptr %.cachedtype141, align 8, !dbg !3398
  %96 = icmp eq ptr %95, %type142, !dbg !3398
  br i1 %96, label %cache_hit145, label %cache_miss143, !dbg !3398

cache_miss143:                                    ; preds = %loop.body136
  %ptradd144 = getelementptr inbounds i8, ptr %95, i64 16, !dbg !3398
  %97 = load ptr, ptr %ptradd144, align 8, !dbg !3398
  %98 = call ptr @.dyn_search(ptr %97, ptr @"$sel.read"), !dbg !3398
  store ptr %98, ptr %.inlinecache140, align 8, !dbg !3398
  store ptr %95, ptr %.cachedtype141, align 8, !dbg !3398
  br label %99, !dbg !3398

cache_hit145:                                     ; preds = %loop.body136
  %cache_hit_fn146 = load ptr, ptr %.inlinecache140, align 8, !dbg !3398
  br label %99, !dbg !3398

99:                                               ; preds = %cache_hit145, %cache_miss143
  %fn_phi147 = phi ptr [ %cache_hit_fn146, %cache_hit145 ], [ %98, %cache_miss143 ], !dbg !3398
  %100 = icmp eq ptr %fn_phi147, null, !dbg !3398
  br i1 %100, label %missing_function148, label %match152, !dbg !3398

missing_function148:                              ; preds = %99
  store %"char[]" { ptr @.panic_msg.197, i64 41 }, ptr %indirectarg149, align 8
  store %"char[]" { ptr @.file.19, i64 9 }, ptr %indirectarg150, align 8
  store %"char[]" { ptr @.func.258, i64 7 }, ptr %indirectarg151, align 8
  %101 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %101(ptr align 8 %indirectarg149, ptr align 8 %indirectarg150, ptr align 8 %indirectarg151, i32 173) #5, !dbg !3427
  unreachable, !dbg !3427

match152:                                         ; preds = %99
  %102 = load ptr, ptr %in131, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg154, ptr align 8 %buffer133, i32 16, i1 false)
  %103 = call i64 %fn_phi147(ptr %retparam153, ptr %102, ptr align 8 %indirectarg154), !dbg !3427
  %not_err155 = icmp eq i64 %103, 0, !dbg !3427
  %104 = call i1 @llvm.expect.i1(i1 %not_err155, i1 true), !dbg !3427
  br i1 %104, label %after_check157, label %assign_optional156, !dbg !3427

assign_optional156:                               ; preds = %match152
  store i64 %103, ptr %len.f138, align 8, !dbg !3427
  br label %after_assign158, !dbg !3427

after_check157:                                   ; preds = %match152
  %105 = load i64, ptr %retparam153, align 8, !dbg !3427
  store i64 %105, ptr %len137, align 8, !dbg !3427
  store i64 0, ptr %len.f138, align 8, !dbg !3427
  br label %after_assign158, !dbg !3427

after_assign158:                                  ; preds = %after_check157, %assign_optional156
    #dbg_declare(ptr %err159, !3428, !DIExpression(), !3429)
  br label %testblock160, !dbg !3429

testblock160:                                     ; preds = %after_assign158
  %optval161 = load i64, ptr %len.f138, align 8, !dbg !3429
  %not_err162 = icmp eq i64 %optval161, 0, !dbg !3429
  %106 = call i1 @llvm.expect.i1(i1 %not_err162, i1 true), !dbg !3429
  br i1 %106, label %after_check164, label %assign_optional163, !dbg !3429

assign_optional163:                               ; preds = %testblock160
  store i64 %optval161, ptr %err159, align 8, !dbg !3429
  br label %end_block165, !dbg !3429

after_check164:                                   ; preds = %testblock160
  store i64 0, ptr %err159, align 8, !dbg !3429
  br label %end_block165, !dbg !3429

end_block165:                                     ; preds = %after_check164, %assign_optional163
  %107 = load i64, ptr %err159, align 8, !dbg !3429
  %i2b166 = icmp ne i64 %107, 0, !dbg !3429
  br i1 %i2b166, label %if.then167, label %if.exit171, !dbg !3429

if.then167:                                       ; preds = %end_block165
  %108 = load i64, ptr %err159, align 8, !dbg !3430
  %eq168 = icmp eq i64 %108, ptrtoint (ptr @std.io.EOF to i64), !dbg !3430
  br i1 %eq168, label %if.then169, label %if.exit170, !dbg !3430

if.then169:                                       ; preds = %if.then167
  %109 = load i64, ptr %total_copied135, align 8, !dbg !3430
  store i64 %109, ptr %blockret134, align 8, !dbg !3430
  br label %expr_block.exit240, !dbg !3430

if.exit170:                                       ; preds = %if.then167
  %110 = load i64, ptr %err159, align 8, !dbg !3432
  store i64 %110, ptr %reterr130, align 8, !dbg !3432
  br label %err_retblock241, !dbg !3432

if.exit171:                                       ; preds = %end_block165
  %111 = load i64, ptr %len137, align 8, !dbg !3433
  %i2nb172 = icmp eq i64 %111, 0, !dbg !3433
  br i1 %i2nb172, label %if.then173, label %if.exit174, !dbg !3433

if.then173:                                       ; preds = %if.exit171
  %112 = load i64, ptr %total_copied135, align 8, !dbg !3433
  store i64 %112, ptr %blockret134, align 8, !dbg !3433
  br label %expr_block.exit240, !dbg !3433

if.exit174:                                       ; preds = %if.exit171
    #dbg_declare(ptr %written175, !3434, !DIExpression(), !3435)
  %113 = load %"char[]", ptr %buffer133, align 8, !dbg !3435
  %114 = extractvalue %"char[]" %113, 0, !dbg !3435
  %115 = extractvalue %"char[]" %113, 1, !dbg !3435
  %gt177 = icmp ugt i64 0, %115, !dbg !3435
  %116 = call i1 @llvm.expect.i1(i1 %gt177, i1 false), !dbg !3435
  br i1 %116, label %panic178, label %checkok188, !dbg !3435

checkok188:                                       ; preds = %if.exit174
  %117 = load i64, ptr %len137, align 8, !dbg !3435
  %add189 = add i64 0, %117, !dbg !3435
  %gt190 = icmp ugt i64 0, %add189, !dbg !3435
  %sub191 = sub i64 %add189, 0, !dbg !3435
  %118 = call i1 @llvm.expect.i1(i1 %gt190, i1 false), !dbg !3435
  br i1 %118, label %panic192, label %checkok200, !dbg !3435

checkok200:                                       ; preds = %checkok188
  %lt201 = icmp ult i64 %115, %add189, !dbg !3435
  %sub202 = sub i64 %add189, 1, !dbg !3435
  %119 = call i1 @llvm.expect.i1(i1 %lt201, i1 false), !dbg !3435
  br i1 %119, label %panic203, label %checkok213, !dbg !3435

checkok213:                                       ; preds = %checkok200
  %size214 = sub i64 %add189, 0, !dbg !3435
  %120 = insertvalue %"char[]" undef, ptr %114, 0, !dbg !3435
  %121 = insertvalue %"char[]" %120, i64 %size214, 1, !dbg !3435
  %ptradd215 = getelementptr inbounds i8, ptr %dst132, i64 8, !dbg !3435
  %122 = load i64, ptr %ptradd215, align 8, !dbg !3435
  %123 = inttoptr i64 %122 to ptr, !dbg !3435
  %type218 = load ptr, ptr %.cachedtype217, align 8, !dbg !3398
  %124 = icmp eq ptr %123, %type218, !dbg !3398
  br i1 %124, label %cache_hit221, label %cache_miss219, !dbg !3398

cache_miss219:                                    ; preds = %checkok213
  %ptradd220 = getelementptr inbounds i8, ptr %123, i64 16, !dbg !3398
  %125 = load ptr, ptr %ptradd220, align 8, !dbg !3398
  %126 = call ptr @.dyn_search(ptr %125, ptr @"$sel.write"), !dbg !3398
  store ptr %126, ptr %.inlinecache216, align 8, !dbg !3398
  store ptr %123, ptr %.cachedtype217, align 8, !dbg !3398
  br label %127, !dbg !3398

cache_hit221:                                     ; preds = %checkok213
  %cache_hit_fn222 = load ptr, ptr %.inlinecache216, align 8, !dbg !3398
  br label %127, !dbg !3398

127:                                              ; preds = %cache_hit221, %cache_miss219
  %fn_phi223 = phi ptr [ %cache_hit_fn222, %cache_hit221 ], [ %126, %cache_miss219 ], !dbg !3398
  %128 = icmp eq ptr %fn_phi223, null, !dbg !3398
  br i1 %128, label %missing_function224, label %match228, !dbg !3398

missing_function224:                              ; preds = %127
  store %"char[]" { ptr @.panic_msg.18, i64 42 }, ptr %indirectarg225, align 8
  store %"char[]" { ptr @.file.19, i64 9 }, ptr %indirectarg226, align 8
  store %"char[]" { ptr @.func.258, i64 7 }, ptr %indirectarg227, align 8
  %129 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %129(ptr align 8 %indirectarg225, ptr align 8 %indirectarg226, ptr align 8 %indirectarg227, i32 180) #5, !dbg !3435
  unreachable, !dbg !3435

match228:                                         ; preds = %127
  %130 = load ptr, ptr %dst132, align 8
  store %"char[]" %121, ptr %indirectarg230, align 8
  %131 = call i64 %fn_phi223(ptr %retparam229, ptr %130, ptr align 8 %indirectarg230), !dbg !3435
  %not_err231 = icmp eq i64 %131, 0, !dbg !3435
  %132 = call i1 @llvm.expect.i1(i1 %not_err231, i1 true), !dbg !3435
  br i1 %132, label %after_check233, label %assign_optional232, !dbg !3435

assign_optional232:                               ; preds = %match228
  store i64 %131, ptr %error_var176, align 8, !dbg !3435
  br label %guard_block234, !dbg !3435

after_check233:                                   ; preds = %match228
  br label %noerr_block235, !dbg !3435

guard_block234:                                   ; preds = %assign_optional232
  %133 = load i64, ptr %error_var176, align 8, !dbg !3435
  store i64 %133, ptr %reterr130, align 8, !dbg !3435
  br label %err_retblock241, !dbg !3435

noerr_block235:                                   ; preds = %after_check233
  %134 = load i64, ptr %retparam229, align 8, !dbg !3435
  store i64 %134, ptr %written175, align 8, !dbg !3435
  %135 = load i64, ptr %total_copied135, align 8, !dbg !3436
  %136 = load i64, ptr %len137, align 8, !dbg !3436
  %add236 = add i64 %135, %136, !dbg !3436
  store i64 %add236, ptr %total_copied135, align 8, !dbg !3436
  %137 = load i64, ptr %written175, align 8, !dbg !3437
  %138 = load i64, ptr %len137, align 8, !dbg !3437
  %neq237 = icmp ne i64 %137, %138, !dbg !3437
  br i1 %neq237, label %if.then238, label %if.exit239, !dbg !3437

if.then238:                                       ; preds = %noerr_block235
  store i64 ptrtoint (ptr @std.io.INCOMPLETE_WRITE to i64), ptr %reterr130, align 8, !dbg !3437
  br label %err_retblock241, !dbg !3437

if.exit239:                                       ; preds = %noerr_block235
  br label %loop.body136, !dbg !3437

expr_block.exit240:                               ; preds = %if.then173, %if.then169
  %139 = load i64, ptr %blockret134, align 8, !dbg !3437
  store i64 %139, ptr %0, align 8, !dbg !3437
  ret i64 0, !dbg !3437

err_retblock241:                                  ; preds = %if.then238, %guard_block234, %if.exit170
  %140 = load i64, ptr %reterr130, align 8, !dbg !3437
  ret i64 %140, !dbg !3437

panic:                                            ; preds = %if.exit14
  store i64 %26, ptr %taddr, align 8
  %141 = insertvalue %any undef, ptr %taddr, 0
  %142 = insertvalue %any %141, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr15, align 8
  %143 = insertvalue %any undef, ptr %taddr15, 0
  %144 = insertvalue %any %143, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.170, i64 61 }, ptr %indirectarg16, align 8
  store %"char[]" { ptr @.file.19, i64 9 }, ptr %indirectarg17, align 8
  store %"char[]" { ptr @.func.258, i64 7 }, ptr %indirectarg18, align 8
  store %any %142, ptr %varargslots, align 16
  %ptradd19 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %144, ptr %ptradd19, align 16
  %145 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %145, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg20, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg16, ptr align 8 %indirectarg17, ptr align 8 %indirectarg18, i32 180, ptr align 8 %indirectarg20) #5, !dbg !3414
  unreachable, !dbg !3414

panic22:                                          ; preds = %checkok
  store i64 %sub, ptr %taddr23, align 8
  %146 = insertvalue %any undef, ptr %taddr23, 0
  %147 = insertvalue %any %146, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.16, i64 43 }, ptr %indirectarg24, align 8
  store %"char[]" { ptr @.file.19, i64 9 }, ptr %indirectarg25, align 8
  store %"char[]" { ptr @.func.258, i64 7 }, ptr %indirectarg26, align 8
  store %any %147, ptr %varargslots27, align 16
  %148 = insertvalue %"any[]" undef, ptr %varargslots27, 0
  %"$$temp28" = insertvalue %"any[]" %148, i64 1, 1
  store %"any[]" %"$$temp28", ptr %indirectarg29, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg24, ptr align 8 %indirectarg25, ptr align 8 %indirectarg26, i32 180, ptr align 8 %indirectarg29) #5, !dbg !3414
  unreachable, !dbg !3414

panic32:                                          ; preds = %checkok30
  store i64 %sub31, ptr %taddr33, align 8
  %149 = insertvalue %any undef, ptr %taddr33, 0
  %150 = insertvalue %any %149, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %26, ptr %taddr34, align 8
  %151 = insertvalue %any undef, ptr %taddr34, 0
  %152 = insertvalue %any %151, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 60 }, ptr %indirectarg35, align 8
  store %"char[]" { ptr @.file.19, i64 9 }, ptr %indirectarg36, align 8
  store %"char[]" { ptr @.func.258, i64 7 }, ptr %indirectarg37, align 8
  store %any %150, ptr %varargslots38, align 16
  %ptradd39 = getelementptr inbounds i8, ptr %varargslots38, i64 16
  store %any %152, ptr %ptradd39, align 16
  %153 = insertvalue %"any[]" undef, ptr %varargslots38, 0
  %"$$temp40" = insertvalue %"any[]" %153, i64 2, 1
  store %"any[]" %"$$temp40", ptr %indirectarg41, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg35, ptr align 8 %indirectarg36, ptr align 8 %indirectarg37, i32 180, ptr align 8 %indirectarg41) #5, !dbg !3414
  unreachable, !dbg !3414

panic178:                                         ; preds = %if.exit174
  store i64 %115, ptr %taddr179, align 8
  %154 = insertvalue %any undef, ptr %taddr179, 0
  %155 = insertvalue %any %154, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr180, align 8
  %156 = insertvalue %any undef, ptr %taddr180, 0
  %157 = insertvalue %any %156, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.170, i64 61 }, ptr %indirectarg181, align 8
  store %"char[]" { ptr @.file.19, i64 9 }, ptr %indirectarg182, align 8
  store %"char[]" { ptr @.func.258, i64 7 }, ptr %indirectarg183, align 8
  store %any %155, ptr %varargslots184, align 16
  %ptradd185 = getelementptr inbounds i8, ptr %varargslots184, i64 16
  store %any %157, ptr %ptradd185, align 16
  %158 = insertvalue %"any[]" undef, ptr %varargslots184, 0
  %"$$temp186" = insertvalue %"any[]" %158, i64 2, 1
  store %"any[]" %"$$temp186", ptr %indirectarg187, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg181, ptr align 8 %indirectarg182, ptr align 8 %indirectarg183, i32 180, ptr align 8 %indirectarg187) #5, !dbg !3435
  unreachable, !dbg !3435

panic192:                                         ; preds = %checkok188
  store i64 %sub191, ptr %taddr193, align 8
  %159 = insertvalue %any undef, ptr %taddr193, 0
  %160 = insertvalue %any %159, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.16, i64 43 }, ptr %indirectarg194, align 8
  store %"char[]" { ptr @.file.19, i64 9 }, ptr %indirectarg195, align 8
  store %"char[]" { ptr @.func.258, i64 7 }, ptr %indirectarg196, align 8
  store %any %160, ptr %varargslots197, align 16
  %161 = insertvalue %"any[]" undef, ptr %varargslots197, 0
  %"$$temp198" = insertvalue %"any[]" %161, i64 1, 1
  store %"any[]" %"$$temp198", ptr %indirectarg199, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg194, ptr align 8 %indirectarg195, ptr align 8 %indirectarg196, i32 180, ptr align 8 %indirectarg199) #5, !dbg !3435
  unreachable, !dbg !3435

panic203:                                         ; preds = %checkok200
  store i64 %sub202, ptr %taddr204, align 8
  %162 = insertvalue %any undef, ptr %taddr204, 0
  %163 = insertvalue %any %162, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %115, ptr %taddr205, align 8
  %164 = insertvalue %any undef, ptr %taddr205, 0
  %165 = insertvalue %any %164, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 60 }, ptr %indirectarg206, align 8
  store %"char[]" { ptr @.file.19, i64 9 }, ptr %indirectarg207, align 8
  store %"char[]" { ptr @.func.258, i64 7 }, ptr %indirectarg208, align 8
  store %any %163, ptr %varargslots209, align 16
  %ptradd210 = getelementptr inbounds i8, ptr %varargslots209, i64 16
  store %any %165, ptr %ptradd210, align 16
  %166 = insertvalue %"any[]" undef, ptr %varargslots209, 0
  %"$$temp211" = insertvalue %"any[]" %166, i64 2, 1
  store %"any[]" %"$$temp211", ptr %indirectarg212, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg206, ptr align 8 %indirectarg207, ptr align 8 %indirectarg208, i32 180, ptr align 8 %indirectarg212) #5, !dbg !3435
  unreachable, !dbg !3435
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.io.wrap_bytes(ptr noalias sret(%ByteReader) align 8 %0, ptr align 8 %1) #0 comdat !dbg !3438 {
entry:
  %literal = alloca %ByteReader, align 8
    #dbg_declare(ptr %1, !3441, !DIExpression(), !3442)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %literal, ptr align 8 %1, i32 16, i1 false), !dbg !3443
  %ptradd = getelementptr inbounds i8, ptr %literal, i64 16, !dbg !3443
  store i64 0, ptr %ptradd, align 8, !dbg !3443
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %literal, i32 24, i1 false), !dbg !3443
  ret void, !dbg !3443
}

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(none)
declare i1 @llvm.expect.i1(i1, i1) #1

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i32(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i32, i1 immarg) #3

; Function Attrs: nounwind ssp uwtable
declare void @std.core.builtin.panicf(ptr align 8, ptr align 8, ptr align 8, i32, ptr align 8) #0

define weak ptr @.dyn_search(ptr %0, ptr %1) unnamed_addr comdat {
entry:
  br label %check

check:                                            ; preds = %no_match, %entry
  %2 = phi ptr [ %0, %entry ], [ %9, %no_match ]
  %3 = icmp eq ptr %2, null
  br i1 %3, label %missing_function, label %compare

missing_function:                                 ; preds = %check
  ret ptr null

compare:                                          ; preds = %check
  %4 = getelementptr inbounds { ptr, ptr, ptr }, ptr %2, i32 0, i32 1
  %5 = load ptr, ptr %4, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %match, label %no_match

match:                                            ; preds = %compare
  %7 = load ptr, ptr %2, align 8
  ret ptr %7

no_match:                                         ; preds = %compare
  %8 = getelementptr inbounds { ptr, ptr, ptr }, ptr %2, i32 0, i32 2
  %9 = load ptr, ptr %8, align 8
  br label %check
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.bswap.i32(i32) #4

; Function Attrs: nounwind ssp uwtable
declare zeroext i8 @std.core.types.TypeKind.is_int(i8) #0

; Function Attrs: nounwind ssp uwtable
declare void @std.core.string.ZString.str_view(ptr noalias sret(%"char[]") align 8, ptr) #0

; Function Attrs: nounwind ssp uwtable
declare void @std.core.dstring.DString.str_view(ptr noalias sret(%"char[]") align 8, ptr) #0

; Function Attrs: nounwind ssp uwtable
declare i64 @std.core.string.conv.utf8_codepoints(ptr align 8) #0

; Function Attrs: nounwind ssp uwtable
declare double @std.math._frexp(double, ptr) #0

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #4

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.smax.i64(i64, i64) #4

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.smin.i64(i64, i64) #4

; Function Attrs: nounwind ssp uwtable
declare i32 @putchar(i32) #0

; Function Attrs: nounwind ssp uwtable
declare i64 @std.io.File.flush(ptr) #0

; Function Attrs: nounwind ssp uwtable
declare i64 @std.io.File.write_byte(ptr, i8) #0

; Function Attrs: nounwind ssp uwtable
declare i64 @std.io.file.from_handle(ptr) #0

; Function Attrs: nounwind ssp uwtable
declare ptr @__acrt_iob_func(i32) #0

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memmove.p0.p0.i64(ptr nocapture writeonly, ptr nocapture readonly, i64, i1 immarg) #3

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare nonnull ptr @llvm.threadlocal.address.p0(ptr nonnull) #4

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: nounwind ssp uwtable
declare i64 @std.core.String.index_of(ptr, ptr align 8, ptr align 8) #0

define internal void @.c3_dynamic_register() align 8 {
entry:
  %next_val = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.ReflectedParam.to_format", i32 0, i32 2), align 8
  %0 = icmp eq ptr %next_val, inttoptr (i64 -1 to ptr)
  br i1 %0, label %dtable_check, label %dtable_skip

dtable_check:                                     ; preds = %dtable_check, %entry
  %dtable_ref = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.ReflectedParam", i32 0, i32 2), %entry ], [ %next_dtable_ref, %dtable_check ]
  %dtable_ptr = load ptr, ptr %dtable_ref, align 8
  %1 = icmp eq ptr %dtable_ptr, null
  %next_dtable_ref = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr, i32 0, i32 2
  br i1 %1, label %dtable_found, label %dtable_check

dtable_found:                                     ; preds = %dtable_check
  store ptr @"$ct.dyn.std.core.ReflectedParam.to_format", ptr %dtable_ref, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.ReflectedParam.to_format", i32 0, i32 2), align 8
  br label %dtable_skip

dtable_skip:                                      ; preds = %dtable_found, %entry
  %next_val1 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ReadBuffer.close", i32 0, i32 2), align 8
  %2 = icmp eq ptr %next_val1, inttoptr (i64 -1 to ptr)
  br i1 %2, label %dtable_check2, label %dtable_skip7

dtable_check2:                                    ; preds = %dtable_check2, %dtable_skip
  %dtable_ref3 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.ReadBuffer", i32 0, i32 2), %dtable_skip ], [ %next_dtable_ref5, %dtable_check2 ]
  %dtable_ptr4 = load ptr, ptr %dtable_ref3, align 8
  %3 = icmp eq ptr %dtable_ptr4, null
  %next_dtable_ref5 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr4, i32 0, i32 2
  br i1 %3, label %dtable_found6, label %dtable_check2

dtable_found6:                                    ; preds = %dtable_check2
  store ptr @"$ct.dyn.std.io.ReadBuffer.close", ptr %dtable_ref3, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ReadBuffer.close", i32 0, i32 2), align 8
  br label %dtable_skip7

dtable_skip7:                                     ; preds = %dtable_found6, %dtable_skip
  %next_val8 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ReadBuffer.read", i32 0, i32 2), align 8
  %4 = icmp eq ptr %next_val8, inttoptr (i64 -1 to ptr)
  br i1 %4, label %dtable_check9, label %dtable_skip14

dtable_check9:                                    ; preds = %dtable_check9, %dtable_skip7
  %dtable_ref10 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.ReadBuffer", i32 0, i32 2), %dtable_skip7 ], [ %next_dtable_ref12, %dtable_check9 ]
  %dtable_ptr11 = load ptr, ptr %dtable_ref10, align 8
  %5 = icmp eq ptr %dtable_ptr11, null
  %next_dtable_ref12 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr11, i32 0, i32 2
  br i1 %5, label %dtable_found13, label %dtable_check9

dtable_found13:                                   ; preds = %dtable_check9
  store ptr @"$ct.dyn.std.io.ReadBuffer.read", ptr %dtable_ref10, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ReadBuffer.read", i32 0, i32 2), align 8
  br label %dtable_skip14

dtable_skip14:                                    ; preds = %dtable_found13, %dtable_skip7
  %next_val15 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ReadBuffer.read_byte", i32 0, i32 2), align 8
  %6 = icmp eq ptr %next_val15, inttoptr (i64 -1 to ptr)
  br i1 %6, label %dtable_check16, label %dtable_skip21

dtable_check16:                                   ; preds = %dtable_check16, %dtable_skip14
  %dtable_ref17 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.ReadBuffer", i32 0, i32 2), %dtable_skip14 ], [ %next_dtable_ref19, %dtable_check16 ]
  %dtable_ptr18 = load ptr, ptr %dtable_ref17, align 8
  %7 = icmp eq ptr %dtable_ptr18, null
  %next_dtable_ref19 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr18, i32 0, i32 2
  br i1 %7, label %dtable_found20, label %dtable_check16

dtable_found20:                                   ; preds = %dtable_check16
  store ptr @"$ct.dyn.std.io.ReadBuffer.read_byte", ptr %dtable_ref17, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ReadBuffer.read_byte", i32 0, i32 2), align 8
  br label %dtable_skip21

dtable_skip21:                                    ; preds = %dtable_found20, %dtable_skip14
  %next_val22 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.WriteBuffer.close", i32 0, i32 2), align 8
  %8 = icmp eq ptr %next_val22, inttoptr (i64 -1 to ptr)
  br i1 %8, label %dtable_check23, label %dtable_skip28

dtable_check23:                                   ; preds = %dtable_check23, %dtable_skip21
  %dtable_ref24 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.WriteBuffer", i32 0, i32 2), %dtable_skip21 ], [ %next_dtable_ref26, %dtable_check23 ]
  %dtable_ptr25 = load ptr, ptr %dtable_ref24, align 8
  %9 = icmp eq ptr %dtable_ptr25, null
  %next_dtable_ref26 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr25, i32 0, i32 2
  br i1 %9, label %dtable_found27, label %dtable_check23

dtable_found27:                                   ; preds = %dtable_check23
  store ptr @"$ct.dyn.std.io.WriteBuffer.close", ptr %dtable_ref24, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.WriteBuffer.close", i32 0, i32 2), align 8
  br label %dtable_skip28

dtable_skip28:                                    ; preds = %dtable_found27, %dtable_skip21
  %next_val29 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.WriteBuffer.flush", i32 0, i32 2), align 8
  %10 = icmp eq ptr %next_val29, inttoptr (i64 -1 to ptr)
  br i1 %10, label %dtable_check30, label %dtable_skip35

dtable_check30:                                   ; preds = %dtable_check30, %dtable_skip28
  %dtable_ref31 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.WriteBuffer", i32 0, i32 2), %dtable_skip28 ], [ %next_dtable_ref33, %dtable_check30 ]
  %dtable_ptr32 = load ptr, ptr %dtable_ref31, align 8
  %11 = icmp eq ptr %dtable_ptr32, null
  %next_dtable_ref33 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr32, i32 0, i32 2
  br i1 %11, label %dtable_found34, label %dtable_check30

dtable_found34:                                   ; preds = %dtable_check30
  store ptr @"$ct.dyn.std.io.WriteBuffer.flush", ptr %dtable_ref31, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.WriteBuffer.flush", i32 0, i32 2), align 8
  br label %dtable_skip35

dtable_skip35:                                    ; preds = %dtable_found34, %dtable_skip28
  %next_val36 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.WriteBuffer.write", i32 0, i32 2), align 8
  %12 = icmp eq ptr %next_val36, inttoptr (i64 -1 to ptr)
  br i1 %12, label %dtable_check37, label %dtable_skip42

dtable_check37:                                   ; preds = %dtable_check37, %dtable_skip35
  %dtable_ref38 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.WriteBuffer", i32 0, i32 2), %dtable_skip35 ], [ %next_dtable_ref40, %dtable_check37 ]
  %dtable_ptr39 = load ptr, ptr %dtable_ref38, align 8
  %13 = icmp eq ptr %dtable_ptr39, null
  %next_dtable_ref40 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr39, i32 0, i32 2
  br i1 %13, label %dtable_found41, label %dtable_check37

dtable_found41:                                   ; preds = %dtable_check37
  store ptr @"$ct.dyn.std.io.WriteBuffer.write", ptr %dtable_ref38, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.WriteBuffer.write", i32 0, i32 2), align 8
  br label %dtable_skip42

dtable_skip42:                                    ; preds = %dtable_found41, %dtable_skip35
  %next_val43 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.WriteBuffer.write_byte", i32 0, i32 2), align 8
  %14 = icmp eq ptr %next_val43, inttoptr (i64 -1 to ptr)
  br i1 %14, label %dtable_check44, label %dtable_skip49

dtable_check44:                                   ; preds = %dtable_check44, %dtable_skip42
  %dtable_ref45 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.WriteBuffer", i32 0, i32 2), %dtable_skip42 ], [ %next_dtable_ref47, %dtable_check44 ]
  %dtable_ptr46 = load ptr, ptr %dtable_ref45, align 8
  %15 = icmp eq ptr %dtable_ptr46, null
  %next_dtable_ref47 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr46, i32 0, i32 2
  br i1 %15, label %dtable_found48, label %dtable_check44

dtable_found48:                                   ; preds = %dtable_check44
  store ptr @"$ct.dyn.std.io.WriteBuffer.write_byte", ptr %dtable_ref45, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.WriteBuffer.write_byte", i32 0, i32 2), align 8
  br label %dtable_skip49

dtable_skip49:                                    ; preds = %dtable_found48, %dtable_skip42
  %next_val50 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteBuffer.write", i32 0, i32 2), align 8
  %16 = icmp eq ptr %next_val50, inttoptr (i64 -1 to ptr)
  br i1 %16, label %dtable_check51, label %dtable_skip56

dtable_check51:                                   ; preds = %dtable_check51, %dtable_skip49
  %dtable_ref52 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.ByteBuffer", i32 0, i32 2), %dtable_skip49 ], [ %next_dtable_ref54, %dtable_check51 ]
  %dtable_ptr53 = load ptr, ptr %dtable_ref52, align 8
  %17 = icmp eq ptr %dtable_ptr53, null
  %next_dtable_ref54 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr53, i32 0, i32 2
  br i1 %17, label %dtable_found55, label %dtable_check51

dtable_found55:                                   ; preds = %dtable_check51
  store ptr @"$ct.dyn.std.io.ByteBuffer.write", ptr %dtable_ref52, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteBuffer.write", i32 0, i32 2), align 8
  br label %dtable_skip56

dtable_skip56:                                    ; preds = %dtable_found55, %dtable_skip49
  %next_val57 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteBuffer.write_byte", i32 0, i32 2), align 8
  %18 = icmp eq ptr %next_val57, inttoptr (i64 -1 to ptr)
  br i1 %18, label %dtable_check58, label %dtable_skip63

dtable_check58:                                   ; preds = %dtable_check58, %dtable_skip56
  %dtable_ref59 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.ByteBuffer", i32 0, i32 2), %dtable_skip56 ], [ %next_dtable_ref61, %dtable_check58 ]
  %dtable_ptr60 = load ptr, ptr %dtable_ref59, align 8
  %19 = icmp eq ptr %dtable_ptr60, null
  %next_dtable_ref61 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr60, i32 0, i32 2
  br i1 %19, label %dtable_found62, label %dtable_check58

dtable_found62:                                   ; preds = %dtable_check58
  store ptr @"$ct.dyn.std.io.ByteBuffer.write_byte", ptr %dtable_ref59, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteBuffer.write_byte", i32 0, i32 2), align 8
  br label %dtable_skip63

dtable_skip63:                                    ; preds = %dtable_found62, %dtable_skip56
  %next_val64 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteBuffer.read", i32 0, i32 2), align 8
  %20 = icmp eq ptr %next_val64, inttoptr (i64 -1 to ptr)
  br i1 %20, label %dtable_check65, label %dtable_skip70

dtable_check65:                                   ; preds = %dtable_check65, %dtable_skip63
  %dtable_ref66 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.ByteBuffer", i32 0, i32 2), %dtable_skip63 ], [ %next_dtable_ref68, %dtable_check65 ]
  %dtable_ptr67 = load ptr, ptr %dtable_ref66, align 8
  %21 = icmp eq ptr %dtable_ptr67, null
  %next_dtable_ref68 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr67, i32 0, i32 2
  br i1 %21, label %dtable_found69, label %dtable_check65

dtable_found69:                                   ; preds = %dtable_check65
  store ptr @"$ct.dyn.std.io.ByteBuffer.read", ptr %dtable_ref66, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteBuffer.read", i32 0, i32 2), align 8
  br label %dtable_skip70

dtable_skip70:                                    ; preds = %dtable_found69, %dtable_skip63
  %next_val71 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteBuffer.read_byte", i32 0, i32 2), align 8
  %22 = icmp eq ptr %next_val71, inttoptr (i64 -1 to ptr)
  br i1 %22, label %dtable_check72, label %dtable_skip77

dtable_check72:                                   ; preds = %dtable_check72, %dtable_skip70
  %dtable_ref73 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.ByteBuffer", i32 0, i32 2), %dtable_skip70 ], [ %next_dtable_ref75, %dtable_check72 ]
  %dtable_ptr74 = load ptr, ptr %dtable_ref73, align 8
  %23 = icmp eq ptr %dtable_ptr74, null
  %next_dtable_ref75 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr74, i32 0, i32 2
  br i1 %23, label %dtable_found76, label %dtable_check72

dtable_found76:                                   ; preds = %dtable_check72
  store ptr @"$ct.dyn.std.io.ByteBuffer.read_byte", ptr %dtable_ref73, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteBuffer.read_byte", i32 0, i32 2), align 8
  br label %dtable_skip77

dtable_skip77:                                    ; preds = %dtable_found76, %dtable_skip70
  %next_val78 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteBuffer.pushback_byte", i32 0, i32 2), align 8
  %24 = icmp eq ptr %next_val78, inttoptr (i64 -1 to ptr)
  br i1 %24, label %dtable_check79, label %dtable_skip84

dtable_check79:                                   ; preds = %dtable_check79, %dtable_skip77
  %dtable_ref80 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.ByteBuffer", i32 0, i32 2), %dtable_skip77 ], [ %next_dtable_ref82, %dtable_check79 ]
  %dtable_ptr81 = load ptr, ptr %dtable_ref80, align 8
  %25 = icmp eq ptr %dtable_ptr81, null
  %next_dtable_ref82 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr81, i32 0, i32 2
  br i1 %25, label %dtable_found83, label %dtable_check79

dtable_found83:                                   ; preds = %dtable_check79
  store ptr @"$ct.dyn.std.io.ByteBuffer.pushback_byte", ptr %dtable_ref80, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteBuffer.pushback_byte", i32 0, i32 2), align 8
  br label %dtable_skip84

dtable_skip84:                                    ; preds = %dtable_found83, %dtable_skip77
  %next_val85 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteBuffer.seek", i32 0, i32 2), align 8
  %26 = icmp eq ptr %next_val85, inttoptr (i64 -1 to ptr)
  br i1 %26, label %dtable_check86, label %dtable_skip91

dtable_check86:                                   ; preds = %dtable_check86, %dtable_skip84
  %dtable_ref87 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.ByteBuffer", i32 0, i32 2), %dtable_skip84 ], [ %next_dtable_ref89, %dtable_check86 ]
  %dtable_ptr88 = load ptr, ptr %dtable_ref87, align 8
  %27 = icmp eq ptr %dtable_ptr88, null
  %next_dtable_ref89 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr88, i32 0, i32 2
  br i1 %27, label %dtable_found90, label %dtable_check86

dtable_found90:                                   ; preds = %dtable_check86
  store ptr @"$ct.dyn.std.io.ByteBuffer.seek", ptr %dtable_ref87, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteBuffer.seek", i32 0, i32 2), align 8
  br label %dtable_skip91

dtable_skip91:                                    ; preds = %dtable_found90, %dtable_skip84
  %next_val92 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteBuffer.available", i32 0, i32 2), align 8
  %28 = icmp eq ptr %next_val92, inttoptr (i64 -1 to ptr)
  br i1 %28, label %dtable_check93, label %dtable_skip98

dtable_check93:                                   ; preds = %dtable_check93, %dtable_skip91
  %dtable_ref94 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.ByteBuffer", i32 0, i32 2), %dtable_skip91 ], [ %next_dtable_ref96, %dtable_check93 ]
  %dtable_ptr95 = load ptr, ptr %dtable_ref94, align 8
  %29 = icmp eq ptr %dtable_ptr95, null
  %next_dtable_ref96 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr95, i32 0, i32 2
  br i1 %29, label %dtable_found97, label %dtable_check93

dtable_found97:                                   ; preds = %dtable_check93
  store ptr @"$ct.dyn.std.io.ByteBuffer.available", ptr %dtable_ref94, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteBuffer.available", i32 0, i32 2), align 8
  br label %dtable_skip98

dtable_skip98:                                    ; preds = %dtable_found97, %dtable_skip91
  %next_val99 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteReader.len", i32 0, i32 2), align 8
  %30 = icmp eq ptr %next_val99, inttoptr (i64 -1 to ptr)
  br i1 %30, label %dtable_check100, label %dtable_skip105

dtable_check100:                                  ; preds = %dtable_check100, %dtable_skip98
  %dtable_ref101 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.ByteReader", i32 0, i32 2), %dtable_skip98 ], [ %next_dtable_ref103, %dtable_check100 ]
  %dtable_ptr102 = load ptr, ptr %dtable_ref101, align 8
  %31 = icmp eq ptr %dtable_ptr102, null
  %next_dtable_ref103 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr102, i32 0, i32 2
  br i1 %31, label %dtable_found104, label %dtable_check100

dtable_found104:                                  ; preds = %dtable_check100
  store ptr @"$ct.dyn.std.io.ByteReader.len", ptr %dtable_ref101, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteReader.len", i32 0, i32 2), align 8
  br label %dtable_skip105

dtable_skip105:                                   ; preds = %dtable_found104, %dtable_skip98
  %next_val106 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteReader.read", i32 0, i32 2), align 8
  %32 = icmp eq ptr %next_val106, inttoptr (i64 -1 to ptr)
  br i1 %32, label %dtable_check107, label %dtable_skip112

dtable_check107:                                  ; preds = %dtable_check107, %dtable_skip105
  %dtable_ref108 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.ByteReader", i32 0, i32 2), %dtable_skip105 ], [ %next_dtable_ref110, %dtable_check107 ]
  %dtable_ptr109 = load ptr, ptr %dtable_ref108, align 8
  %33 = icmp eq ptr %dtable_ptr109, null
  %next_dtable_ref110 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr109, i32 0, i32 2
  br i1 %33, label %dtable_found111, label %dtable_check107

dtable_found111:                                  ; preds = %dtable_check107
  store ptr @"$ct.dyn.std.io.ByteReader.read", ptr %dtable_ref108, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteReader.read", i32 0, i32 2), align 8
  br label %dtable_skip112

dtable_skip112:                                   ; preds = %dtable_found111, %dtable_skip105
  %next_val113 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteReader.read_byte", i32 0, i32 2), align 8
  %34 = icmp eq ptr %next_val113, inttoptr (i64 -1 to ptr)
  br i1 %34, label %dtable_check114, label %dtable_skip119

dtable_check114:                                  ; preds = %dtable_check114, %dtable_skip112
  %dtable_ref115 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.ByteReader", i32 0, i32 2), %dtable_skip112 ], [ %next_dtable_ref117, %dtable_check114 ]
  %dtable_ptr116 = load ptr, ptr %dtable_ref115, align 8
  %35 = icmp eq ptr %dtable_ptr116, null
  %next_dtable_ref117 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr116, i32 0, i32 2
  br i1 %35, label %dtable_found118, label %dtable_check114

dtable_found118:                                  ; preds = %dtable_check114
  store ptr @"$ct.dyn.std.io.ByteReader.read_byte", ptr %dtable_ref115, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteReader.read_byte", i32 0, i32 2), align 8
  br label %dtable_skip119

dtable_skip119:                                   ; preds = %dtable_found118, %dtable_skip112
  %next_val120 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteReader.pushback_byte", i32 0, i32 2), align 8
  %36 = icmp eq ptr %next_val120, inttoptr (i64 -1 to ptr)
  br i1 %36, label %dtable_check121, label %dtable_skip126

dtable_check121:                                  ; preds = %dtable_check121, %dtable_skip119
  %dtable_ref122 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.ByteReader", i32 0, i32 2), %dtable_skip119 ], [ %next_dtable_ref124, %dtable_check121 ]
  %dtable_ptr123 = load ptr, ptr %dtable_ref122, align 8
  %37 = icmp eq ptr %dtable_ptr123, null
  %next_dtable_ref124 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr123, i32 0, i32 2
  br i1 %37, label %dtable_found125, label %dtable_check121

dtable_found125:                                  ; preds = %dtable_check121
  store ptr @"$ct.dyn.std.io.ByteReader.pushback_byte", ptr %dtable_ref122, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteReader.pushback_byte", i32 0, i32 2), align 8
  br label %dtable_skip126

dtable_skip126:                                   ; preds = %dtable_found125, %dtable_skip119
  %next_val127 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteReader.seek", i32 0, i32 2), align 8
  %38 = icmp eq ptr %next_val127, inttoptr (i64 -1 to ptr)
  br i1 %38, label %dtable_check128, label %dtable_skip133

dtable_check128:                                  ; preds = %dtable_check128, %dtable_skip126
  %dtable_ref129 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.ByteReader", i32 0, i32 2), %dtable_skip126 ], [ %next_dtable_ref131, %dtable_check128 ]
  %dtable_ptr130 = load ptr, ptr %dtable_ref129, align 8
  %39 = icmp eq ptr %dtable_ptr130, null
  %next_dtable_ref131 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr130, i32 0, i32 2
  br i1 %39, label %dtable_found132, label %dtable_check128

dtable_found132:                                  ; preds = %dtable_check128
  store ptr @"$ct.dyn.std.io.ByteReader.seek", ptr %dtable_ref129, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteReader.seek", i32 0, i32 2), align 8
  br label %dtable_skip133

dtable_skip133:                                   ; preds = %dtable_found132, %dtable_skip126
  %next_val134 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteReader.write_to", i32 0, i32 2), align 8
  %40 = icmp eq ptr %next_val134, inttoptr (i64 -1 to ptr)
  br i1 %40, label %dtable_check135, label %dtable_skip140

dtable_check135:                                  ; preds = %dtable_check135, %dtable_skip133
  %dtable_ref136 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.ByteReader", i32 0, i32 2), %dtable_skip133 ], [ %next_dtable_ref138, %dtable_check135 ]
  %dtable_ptr137 = load ptr, ptr %dtable_ref136, align 8
  %41 = icmp eq ptr %dtable_ptr137, null
  %next_dtable_ref138 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr137, i32 0, i32 2
  br i1 %41, label %dtable_found139, label %dtable_check135

dtable_found139:                                  ; preds = %dtable_check135
  store ptr @"$ct.dyn.std.io.ByteReader.write_to", ptr %dtable_ref136, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteReader.write_to", i32 0, i32 2), align 8
  br label %dtable_skip140

dtable_skip140:                                   ; preds = %dtable_found139, %dtable_skip133
  %next_val141 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteReader.available", i32 0, i32 2), align 8
  %42 = icmp eq ptr %next_val141, inttoptr (i64 -1 to ptr)
  br i1 %42, label %dtable_check142, label %dtable_skip147

dtable_check142:                                  ; preds = %dtable_check142, %dtable_skip140
  %dtable_ref143 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.ByteReader", i32 0, i32 2), %dtable_skip140 ], [ %next_dtable_ref145, %dtable_check142 ]
  %dtable_ptr144 = load ptr, ptr %dtable_ref143, align 8
  %43 = icmp eq ptr %dtable_ptr144, null
  %next_dtable_ref145 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr144, i32 0, i32 2
  br i1 %43, label %dtable_found146, label %dtable_check142

dtable_found146:                                  ; preds = %dtable_check142
  store ptr @"$ct.dyn.std.io.ByteReader.available", ptr %dtable_ref143, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteReader.available", i32 0, i32 2), align 8
  br label %dtable_skip147

dtable_skip147:                                   ; preds = %dtable_found146, %dtable_skip140
  %next_val148 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteWriter.destroy", i32 0, i32 2), align 8
  %44 = icmp eq ptr %next_val148, inttoptr (i64 -1 to ptr)
  br i1 %44, label %dtable_check149, label %dtable_skip154

dtable_check149:                                  ; preds = %dtable_check149, %dtable_skip147
  %dtable_ref150 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.ByteWriter", i32 0, i32 2), %dtable_skip147 ], [ %next_dtable_ref152, %dtable_check149 ]
  %dtable_ptr151 = load ptr, ptr %dtable_ref150, align 8
  %45 = icmp eq ptr %dtable_ptr151, null
  %next_dtable_ref152 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr151, i32 0, i32 2
  br i1 %45, label %dtable_found153, label %dtable_check149

dtable_found153:                                  ; preds = %dtable_check149
  store ptr @"$ct.dyn.std.io.ByteWriter.destroy", ptr %dtable_ref150, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteWriter.destroy", i32 0, i32 2), align 8
  br label %dtable_skip154

dtable_skip154:                                   ; preds = %dtable_found153, %dtable_skip147
  %next_val155 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteWriter.write", i32 0, i32 2), align 8
  %46 = icmp eq ptr %next_val155, inttoptr (i64 -1 to ptr)
  br i1 %46, label %dtable_check156, label %dtable_skip161

dtable_check156:                                  ; preds = %dtable_check156, %dtable_skip154
  %dtable_ref157 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.ByteWriter", i32 0, i32 2), %dtable_skip154 ], [ %next_dtable_ref159, %dtable_check156 ]
  %dtable_ptr158 = load ptr, ptr %dtable_ref157, align 8
  %47 = icmp eq ptr %dtable_ptr158, null
  %next_dtable_ref159 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr158, i32 0, i32 2
  br i1 %47, label %dtable_found160, label %dtable_check156

dtable_found160:                                  ; preds = %dtable_check156
  store ptr @"$ct.dyn.std.io.ByteWriter.write", ptr %dtable_ref157, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteWriter.write", i32 0, i32 2), align 8
  br label %dtable_skip161

dtable_skip161:                                   ; preds = %dtable_found160, %dtable_skip154
  %next_val162 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteWriter.write_byte", i32 0, i32 2), align 8
  %48 = icmp eq ptr %next_val162, inttoptr (i64 -1 to ptr)
  br i1 %48, label %dtable_check163, label %dtable_skip168

dtable_check163:                                  ; preds = %dtable_check163, %dtable_skip161
  %dtable_ref164 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.ByteWriter", i32 0, i32 2), %dtable_skip161 ], [ %next_dtable_ref166, %dtable_check163 ]
  %dtable_ptr165 = load ptr, ptr %dtable_ref164, align 8
  %49 = icmp eq ptr %dtable_ptr165, null
  %next_dtable_ref166 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr165, i32 0, i32 2
  br i1 %49, label %dtable_found167, label %dtable_check163

dtable_found167:                                  ; preds = %dtable_check163
  store ptr @"$ct.dyn.std.io.ByteWriter.write_byte", ptr %dtable_ref164, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteWriter.write_byte", i32 0, i32 2), align 8
  br label %dtable_skip168

dtable_skip168:                                   ; preds = %dtable_found167, %dtable_skip161
  %next_val169 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteWriter.read_from", i32 0, i32 2), align 8
  %50 = icmp eq ptr %next_val169, inttoptr (i64 -1 to ptr)
  br i1 %50, label %dtable_check170, label %dtable_skip175

dtable_check170:                                  ; preds = %dtable_check170, %dtable_skip168
  %dtable_ref171 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.ByteWriter", i32 0, i32 2), %dtable_skip168 ], [ %next_dtable_ref173, %dtable_check170 ]
  %dtable_ptr172 = load ptr, ptr %dtable_ref171, align 8
  %51 = icmp eq ptr %dtable_ptr172, null
  %next_dtable_ref173 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr172, i32 0, i32 2
  br i1 %51, label %dtable_found174, label %dtable_check170

dtable_found174:                                  ; preds = %dtable_check170
  store ptr @"$ct.dyn.std.io.ByteWriter.read_from", ptr %dtable_ref171, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteWriter.read_from", i32 0, i32 2), align 8
  br label %dtable_skip175

dtable_skip175:                                   ; preds = %dtable_found174, %dtable_skip168
  %next_val176 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.LimitReader.close", i32 0, i32 2), align 8
  %52 = icmp eq ptr %next_val176, inttoptr (i64 -1 to ptr)
  br i1 %52, label %dtable_check177, label %dtable_skip182

dtable_check177:                                  ; preds = %dtable_check177, %dtable_skip175
  %dtable_ref178 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.LimitReader", i32 0, i32 2), %dtable_skip175 ], [ %next_dtable_ref180, %dtable_check177 ]
  %dtable_ptr179 = load ptr, ptr %dtable_ref178, align 8
  %53 = icmp eq ptr %dtable_ptr179, null
  %next_dtable_ref180 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr179, i32 0, i32 2
  br i1 %53, label %dtable_found181, label %dtable_check177

dtable_found181:                                  ; preds = %dtable_check177
  store ptr @"$ct.dyn.std.io.LimitReader.close", ptr %dtable_ref178, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.LimitReader.close", i32 0, i32 2), align 8
  br label %dtable_skip182

dtable_skip182:                                   ; preds = %dtable_found181, %dtable_skip175
  %next_val183 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.LimitReader.read", i32 0, i32 2), align 8
  %54 = icmp eq ptr %next_val183, inttoptr (i64 -1 to ptr)
  br i1 %54, label %dtable_check184, label %dtable_skip189

dtable_check184:                                  ; preds = %dtable_check184, %dtable_skip182
  %dtable_ref185 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.LimitReader", i32 0, i32 2), %dtable_skip182 ], [ %next_dtable_ref187, %dtable_check184 ]
  %dtable_ptr186 = load ptr, ptr %dtable_ref185, align 8
  %55 = icmp eq ptr %dtable_ptr186, null
  %next_dtable_ref187 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr186, i32 0, i32 2
  br i1 %55, label %dtable_found188, label %dtable_check184

dtable_found188:                                  ; preds = %dtable_check184
  store ptr @"$ct.dyn.std.io.LimitReader.read", ptr %dtable_ref185, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.LimitReader.read", i32 0, i32 2), align 8
  br label %dtable_skip189

dtable_skip189:                                   ; preds = %dtable_found188, %dtable_skip182
  %next_val190 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.LimitReader.read_byte", i32 0, i32 2), align 8
  %56 = icmp eq ptr %next_val190, inttoptr (i64 -1 to ptr)
  br i1 %56, label %dtable_check191, label %dtable_skip196

dtable_check191:                                  ; preds = %dtable_check191, %dtable_skip189
  %dtable_ref192 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.LimitReader", i32 0, i32 2), %dtable_skip189 ], [ %next_dtable_ref194, %dtable_check191 ]
  %dtable_ptr193 = load ptr, ptr %dtable_ref192, align 8
  %57 = icmp eq ptr %dtable_ptr193, null
  %next_dtable_ref194 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr193, i32 0, i32 2
  br i1 %57, label %dtable_found195, label %dtable_check191

dtable_found195:                                  ; preds = %dtable_check191
  store ptr @"$ct.dyn.std.io.LimitReader.read_byte", ptr %dtable_ref192, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.LimitReader.read_byte", i32 0, i32 2), align 8
  br label %dtable_skip196

dtable_skip196:                                   ; preds = %dtable_found195, %dtable_skip189
  %next_val197 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.LimitReader.available", i32 0, i32 2), align 8
  %58 = icmp eq ptr %next_val197, inttoptr (i64 -1 to ptr)
  br i1 %58, label %dtable_check198, label %dtable_skip203

dtable_check198:                                  ; preds = %dtable_check198, %dtable_skip196
  %dtable_ref199 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.LimitReader", i32 0, i32 2), %dtable_skip196 ], [ %next_dtable_ref201, %dtable_check198 ]
  %dtable_ptr200 = load ptr, ptr %dtable_ref199, align 8
  %59 = icmp eq ptr %dtable_ptr200, null
  %next_dtable_ref201 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr200, i32 0, i32 2
  br i1 %59, label %dtable_found202, label %dtable_check198

dtable_found202:                                  ; preds = %dtable_check198
  store ptr @"$ct.dyn.std.io.LimitReader.available", ptr %dtable_ref199, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.LimitReader.available", i32 0, i32 2), align 8
  br label %dtable_skip203

dtable_skip203:                                   ; preds = %dtable_found202, %dtable_skip196
  %next_val204 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.MultiReader.read", i32 0, i32 2), align 8
  %60 = icmp eq ptr %next_val204, inttoptr (i64 -1 to ptr)
  br i1 %60, label %dtable_check205, label %dtable_skip210

dtable_check205:                                  ; preds = %dtable_check205, %dtable_skip203
  %dtable_ref206 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.MultiReader", i32 0, i32 2), %dtable_skip203 ], [ %next_dtable_ref208, %dtable_check205 ]
  %dtable_ptr207 = load ptr, ptr %dtable_ref206, align 8
  %61 = icmp eq ptr %dtable_ptr207, null
  %next_dtable_ref208 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr207, i32 0, i32 2
  br i1 %61, label %dtable_found209, label %dtable_check205

dtable_found209:                                  ; preds = %dtable_check205
  store ptr @"$ct.dyn.std.io.MultiReader.read", ptr %dtable_ref206, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.MultiReader.read", i32 0, i32 2), align 8
  br label %dtable_skip210

dtable_skip210:                                   ; preds = %dtable_found209, %dtable_skip203
  %next_val211 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.MultiReader.read_byte", i32 0, i32 2), align 8
  %62 = icmp eq ptr %next_val211, inttoptr (i64 -1 to ptr)
  br i1 %62, label %dtable_check212, label %dtable_skip217

dtable_check212:                                  ; preds = %dtable_check212, %dtable_skip210
  %dtable_ref213 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.MultiReader", i32 0, i32 2), %dtable_skip210 ], [ %next_dtable_ref215, %dtable_check212 ]
  %dtable_ptr214 = load ptr, ptr %dtable_ref213, align 8
  %63 = icmp eq ptr %dtable_ptr214, null
  %next_dtable_ref215 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr214, i32 0, i32 2
  br i1 %63, label %dtable_found216, label %dtable_check212

dtable_found216:                                  ; preds = %dtable_check212
  store ptr @"$ct.dyn.std.io.MultiReader.read_byte", ptr %dtable_ref213, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.MultiReader.read_byte", i32 0, i32 2), align 8
  br label %dtable_skip217

dtable_skip217:                                   ; preds = %dtable_found216, %dtable_skip210
  %next_val218 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.MultiWriter.write", i32 0, i32 2), align 8
  %64 = icmp eq ptr %next_val218, inttoptr (i64 -1 to ptr)
  br i1 %64, label %dtable_check219, label %dtable_skip224

dtable_check219:                                  ; preds = %dtable_check219, %dtable_skip217
  %dtable_ref220 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.MultiWriter", i32 0, i32 2), %dtable_skip217 ], [ %next_dtable_ref222, %dtable_check219 ]
  %dtable_ptr221 = load ptr, ptr %dtable_ref220, align 8
  %65 = icmp eq ptr %dtable_ptr221, null
  %next_dtable_ref222 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr221, i32 0, i32 2
  br i1 %65, label %dtable_found223, label %dtable_check219

dtable_found223:                                  ; preds = %dtable_check219
  store ptr @"$ct.dyn.std.io.MultiWriter.write", ptr %dtable_ref220, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.MultiWriter.write", i32 0, i32 2), align 8
  br label %dtable_skip224

dtable_skip224:                                   ; preds = %dtable_found223, %dtable_skip217
  %next_val225 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.MultiWriter.write_byte", i32 0, i32 2), align 8
  %66 = icmp eq ptr %next_val225, inttoptr (i64 -1 to ptr)
  br i1 %66, label %dtable_check226, label %dtable_skip231

dtable_check226:                                  ; preds = %dtable_check226, %dtable_skip224
  %dtable_ref227 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.MultiWriter", i32 0, i32 2), %dtable_skip224 ], [ %next_dtable_ref229, %dtable_check226 ]
  %dtable_ptr228 = load ptr, ptr %dtable_ref227, align 8
  %67 = icmp eq ptr %dtable_ptr228, null
  %next_dtable_ref229 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr228, i32 0, i32 2
  br i1 %67, label %dtable_found230, label %dtable_check226

dtable_found230:                                  ; preds = %dtable_check226
  store ptr @"$ct.dyn.std.io.MultiWriter.write_byte", ptr %dtable_ref227, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.MultiWriter.write_byte", i32 0, i32 2), align 8
  br label %dtable_skip231

dtable_skip231:                                   ; preds = %dtable_found230, %dtable_skip224
  %next_val232 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.Scanner.flush", i32 0, i32 2), align 8
  %68 = icmp eq ptr %next_val232, inttoptr (i64 -1 to ptr)
  br i1 %68, label %dtable_check233, label %dtable_skip238

dtable_check233:                                  ; preds = %dtable_check233, %dtable_skip231
  %dtable_ref234 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.Scanner", i32 0, i32 2), %dtable_skip231 ], [ %next_dtable_ref236, %dtable_check233 ]
  %dtable_ptr235 = load ptr, ptr %dtable_ref234, align 8
  %69 = icmp eq ptr %dtable_ptr235, null
  %next_dtable_ref236 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr235, i32 0, i32 2
  br i1 %69, label %dtable_found237, label %dtable_check233

dtable_found237:                                  ; preds = %dtable_check233
  store ptr @"$ct.dyn.std.io.Scanner.flush", ptr %dtable_ref234, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.Scanner.flush", i32 0, i32 2), align 8
  br label %dtable_skip238

dtable_skip238:                                   ; preds = %dtable_found237, %dtable_skip231
  %next_val239 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.Scanner.close", i32 0, i32 2), align 8
  %70 = icmp eq ptr %next_val239, inttoptr (i64 -1 to ptr)
  br i1 %70, label %dtable_check240, label %dtable_skip245

dtable_check240:                                  ; preds = %dtable_check240, %dtable_skip238
  %dtable_ref241 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.Scanner", i32 0, i32 2), %dtable_skip238 ], [ %next_dtable_ref243, %dtable_check240 ]
  %dtable_ptr242 = load ptr, ptr %dtable_ref241, align 8
  %71 = icmp eq ptr %dtable_ptr242, null
  %next_dtable_ref243 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr242, i32 0, i32 2
  br i1 %71, label %dtable_found244, label %dtable_check240

dtable_found244:                                  ; preds = %dtable_check240
  store ptr @"$ct.dyn.std.io.Scanner.close", ptr %dtable_ref241, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.Scanner.close", i32 0, i32 2), align 8
  br label %dtable_skip245

dtable_skip245:                                   ; preds = %dtable_found244, %dtable_skip238
  %next_val246 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.Scanner.read", i32 0, i32 2), align 8
  %72 = icmp eq ptr %next_val246, inttoptr (i64 -1 to ptr)
  br i1 %72, label %dtable_check247, label %dtable_skip252

dtable_check247:                                  ; preds = %dtable_check247, %dtable_skip245
  %dtable_ref248 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.Scanner", i32 0, i32 2), %dtable_skip245 ], [ %next_dtable_ref250, %dtable_check247 ]
  %dtable_ptr249 = load ptr, ptr %dtable_ref248, align 8
  %73 = icmp eq ptr %dtable_ptr249, null
  %next_dtable_ref250 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr249, i32 0, i32 2
  br i1 %73, label %dtable_found251, label %dtable_check247

dtable_found251:                                  ; preds = %dtable_check247
  store ptr @"$ct.dyn.std.io.Scanner.read", ptr %dtable_ref248, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.Scanner.read", i32 0, i32 2), align 8
  br label %dtable_skip252

dtable_skip252:                                   ; preds = %dtable_found251, %dtable_skip245
  %next_val253 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.Scanner.read_byte", i32 0, i32 2), align 8
  %74 = icmp eq ptr %next_val253, inttoptr (i64 -1 to ptr)
  br i1 %74, label %dtable_check254, label %dtable_skip259

dtable_check254:                                  ; preds = %dtable_check254, %dtable_skip252
  %dtable_ref255 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.Scanner", i32 0, i32 2), %dtable_skip252 ], [ %next_dtable_ref257, %dtable_check254 ]
  %dtable_ptr256 = load ptr, ptr %dtable_ref255, align 8
  %75 = icmp eq ptr %dtable_ptr256, null
  %next_dtable_ref257 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr256, i32 0, i32 2
  br i1 %75, label %dtable_found258, label %dtable_check254

dtable_found258:                                  ; preds = %dtable_check254
  store ptr @"$ct.dyn.std.io.Scanner.read_byte", ptr %dtable_ref255, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.Scanner.read_byte", i32 0, i32 2), align 8
  br label %dtable_skip259

dtable_skip259:                                   ; preds = %dtable_found258, %dtable_skip252
  %next_val260 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.TeeReader.read", i32 0, i32 2), align 8
  %76 = icmp eq ptr %next_val260, inttoptr (i64 -1 to ptr)
  br i1 %76, label %dtable_check261, label %dtable_skip266

dtable_check261:                                  ; preds = %dtable_check261, %dtable_skip259
  %dtable_ref262 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.TeeReader", i32 0, i32 2), %dtable_skip259 ], [ %next_dtable_ref264, %dtable_check261 ]
  %dtable_ptr263 = load ptr, ptr %dtable_ref262, align 8
  %77 = icmp eq ptr %dtable_ptr263, null
  %next_dtable_ref264 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr263, i32 0, i32 2
  br i1 %77, label %dtable_found265, label %dtable_check261

dtable_found265:                                  ; preds = %dtable_check261
  store ptr @"$ct.dyn.std.io.TeeReader.read", ptr %dtable_ref262, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.TeeReader.read", i32 0, i32 2), align 8
  br label %dtable_skip266

dtable_skip266:                                   ; preds = %dtable_found265, %dtable_skip259
  %next_val267 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.TeeReader.read_byte", i32 0, i32 2), align 8
  %78 = icmp eq ptr %next_val267, inttoptr (i64 -1 to ptr)
  br i1 %78, label %dtable_check268, label %dtable_skip273

dtable_check268:                                  ; preds = %dtable_check268, %dtable_skip266
  %dtable_ref269 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.TeeReader", i32 0, i32 2), %dtable_skip266 ], [ %next_dtable_ref271, %dtable_check268 ]
  %dtable_ptr270 = load ptr, ptr %dtable_ref269, align 8
  %79 = icmp eq ptr %dtable_ptr270, null
  %next_dtable_ref271 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr270, i32 0, i32 2
  br i1 %79, label %dtable_found272, label %dtable_check268

dtable_found272:                                  ; preds = %dtable_check268
  store ptr @"$ct.dyn.std.io.TeeReader.read_byte", ptr %dtable_ref269, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.TeeReader.read_byte", i32 0, i32 2), align 8
  br label %dtable_skip273

dtable_skip273:                                   ; preds = %dtable_found272, %dtable_skip266
  ret void
}

attributes #0 = { nounwind ssp uwtable "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" }
attributes #1 = { nocallback nofree nosync nounwind willreturn memory(none) }
attributes #2 = { nocallback nofree nounwind willreturn memory(argmem: write) }
attributes #3 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }
attributes #4 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #5 = { noreturn }
attributes #6 = { alwaysinline }

!llvm.module.flags = !{!36, !37, !38, !39, !40, !41}
!llvm.dbg.cu = !{!42}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "WRITER_BITS", linkageName: "std.io.WRITER_BITS", scope: !2, file: !2, line: 50, type: !3, isLocal: false, isDefinition: true, align: 4)
!2 = !DIFile(filename: "bits.c3", directory: "C:/Compilers/C3/lib/std/io")
!3 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!4 = !DIGlobalVariableExpression(var: !5, expr: !DIExpression())
!5 = distinct !DIGlobalVariable(name: "PRINTF_NTOA_BUFFER_SIZE", linkageName: "std.io.PRINTF_NTOA_BUFFER_SIZE", scope: !6, file: !6, line: 5, type: !3, isLocal: false, isDefinition: true, align: 4)
!6 = !DIFile(filename: "formatter.c3", directory: "C:/Compilers/C3/lib/std/io")
!7 = !DIGlobalVariableExpression(var: !8, expr: !DIExpression())
!8 = distinct !DIGlobalVariable(name: "XDIGITS_H", linkageName: "std.io.XDIGITS_H", scope: !9, file: !9, line: 4, type: !10, isLocal: false, isDefinition: true, align: 16)
!9 = !DIFile(filename: "formatter_private.c3", directory: "C:/Compilers/C3/lib/std/io")
!10 = !DICompositeType(tag: DW_TAG_array_type, baseType: !11, size: 128, align: 8, elements: !12)
!11 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_unsigned_char)
!12 = !{!13}
!13 = !DISubrange(count: 16, lowerBound: 0)
!14 = !DIGlobalVariableExpression(var: !15, expr: !DIExpression())
!15 = distinct !DIGlobalVariable(name: "XDIGITS_L", linkageName: "std.io.XDIGITS_L", scope: !9, file: !9, line: 5, type: !10, isLocal: false, isDefinition: true, align: 16)
!16 = !DIGlobalVariableExpression(var: !17, expr: !DIExpression())
!17 = distinct !DIGlobalVariable(name: "BUF_SIZE", linkageName: "floatformat.BUF_SIZE", scope: !9, file: !9, line: 214, type: !3, isLocal: true, isDefinition: true, align: 4)
!18 = !DIGlobalVariableExpression(var: !19, expr: !DIExpression())
!19 = distinct !DIGlobalVariable(name: "file", linkageName: "stdout.file", scope: !20, file: !20, line: 404, type: !21, isLocal: true, isDefinition: true, align: 8)
!20 = !DIFile(filename: "io.c3", directory: "C:/Compilers/C3/lib/std/io")
!21 = !DICompositeType(tag: DW_TAG_structure_type, name: "File", scope: !20, file: !20, line: 4, size: 64, align: 64, elements: !22, identifier: "std.io.File")
!22 = !{!23}
!23 = !DIDerivedType(tag: DW_TAG_member, name: "file", scope: !21, file: !20, line: 6, baseType: !24, size: 64, align: 64)
!24 = !DIDerivedType(tag: DW_TAG_typedef, name: "CFile", scope: !20, file: !20, line: 379, baseType: !25, align: 8)
!25 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "void*", baseType: null, size: 64, align: 64, dwarfAddressSpace: 0)
!26 = !DIGlobalVariableExpression(var: !27, expr: !DIExpression())
!27 = distinct !DIGlobalVariable(name: "file", linkageName: "stderr.file", scope: !20, file: !20, line: 416, type: !21, isLocal: true, isDefinition: true, align: 8)
!28 = !DIGlobalVariableExpression(var: !29, expr: !DIExpression())
!29 = distinct !DIGlobalVariable(name: "file", linkageName: "stdin.file", scope: !20, file: !20, line: 428, type: !21, isLocal: true, isDefinition: true, align: 8)
!30 = !DIGlobalVariableExpression(var: !31, expr: !DIExpression())
!31 = distinct !DIGlobalVariable(name: "MAX_VARS", linkageName: "std.io.MAX_VARS", scope: !32, file: !32, line: 186, type: !33, isLocal: true, isDefinition: true, align: 1)
!32 = !DIFile(filename: "stream.c3", directory: "C:/Compilers/C3/lib/std/io")
!33 = !DICompositeType(tag: DW_TAG_array_type, baseType: !11, size: 72, align: 8, elements: !34)
!34 = !{!35}
!35 = !DISubrange(count: 9, lowerBound: 0)
!36 = !{i32 1, !"CodeView", i32 1}
!37 = !{i32 2, !"Debug Info Version", i32 3}
!38 = !{i32 2, !"wchar_size", i32 2}
!39 = !{i32 4, !"PIC Level", i32 2}
!40 = !{i32 1, !"uwtable", i32 2}
!41 = !{i32 1, !"MaxTLSAlign", i32 65536}
!42 = distinct !DICompileUnit(language: DW_LANG_C11, file: !2, producer: "c3c", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !43, globals: !79, splitDebugInlining: false)
!43 = !{!44, !50, !56}
!44 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "FloatFormatting", scope: !9, file: !9, line: 198, baseType: !3, size: 32, align: 32, elements: !45)
!45 = !{!46, !47, !48, !49}
!46 = !DIEnumerator(name: "FLOAT", value: 0)
!47 = !DIEnumerator(name: "EXPONENTIAL", value: 1)
!48 = !DIEnumerator(name: "ADAPTIVE", value: 2)
!49 = !DIEnumerator(name: "HEX", value: 3)
!50 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "Seek", scope: !51, file: !51, line: 7, baseType: !3, size: 32, align: 32, elements: !52)
!51 = !DIFile(filename: "bytebuffer.c3", directory: "C:/Compilers/C3/lib/std/io/stream")
!52 = !{!53, !54, !55}
!53 = !DIEnumerator(name: "SET", value: 0)
!54 = !DIEnumerator(name: "CURSOR", value: 1)
!55 = !DIEnumerator(name: "END", value: 2)
!56 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "TypeKind", scope: !6, file: !6, line: 373, baseType: !11, size: 8, align: 8, elements: !57)
!57 = !{!58, !59, !60, !61, !62, !63, !64, !65, !66, !67, !68, !69, !70, !71, !72, !73, !74, !75, !76, !77, !78}
!58 = !DIEnumerator(name: "VOID", value: 0, isUnsigned: true)
!59 = !DIEnumerator(name: "BOOL", value: 1, isUnsigned: true)
!60 = !DIEnumerator(name: "SIGNED_INT", value: 2, isUnsigned: true)
!61 = !DIEnumerator(name: "UNSIGNED_INT", value: 3, isUnsigned: true)
!62 = !DIEnumerator(name: "FLOAT", value: 4, isUnsigned: true)
!63 = !DIEnumerator(name: "TYPEID", value: 5, isUnsigned: true)
!64 = !DIEnumerator(name: "FAULT", value: 6, isUnsigned: true)
!65 = !DIEnumerator(name: "ANY", value: 7, isUnsigned: true)
!66 = !DIEnumerator(name: "ENUM", value: 8, isUnsigned: true)
!67 = !DIEnumerator(name: "CONST_ENUM", value: 9, isUnsigned: true)
!68 = !DIEnumerator(name: "STRUCT", value: 10, isUnsigned: true)
!69 = !DIEnumerator(name: "UNION", value: 11, isUnsigned: true)
!70 = !DIEnumerator(name: "BITSTRUCT", value: 12, isUnsigned: true)
!71 = !DIEnumerator(name: "FUNC", value: 13, isUnsigned: true)
!72 = !DIEnumerator(name: "OPTIONAL", value: 14, isUnsigned: true)
!73 = !DIEnumerator(name: "ARRAY", value: 15, isUnsigned: true)
!74 = !DIEnumerator(name: "SLICE", value: 16, isUnsigned: true)
!75 = !DIEnumerator(name: "VECTOR", value: 17, isUnsigned: true)
!76 = !DIEnumerator(name: "DISTINCT", value: 18, isUnsigned: true)
!77 = !DIEnumerator(name: "POINTER", value: 19, isUnsigned: true)
!78 = !DIEnumerator(name: "INTERFACE", value: 20, isUnsigned: true)
!79 = !{!0, !4, !7, !14, !16, !18, !26, !28, !30}
!80 = distinct !DISubprogram(name: "init", linkageName: "std.io.BitReader.init", scope: !2, file: !2, line: 10, type: !81, scopeLine: 10, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!81 = !DISubroutineType(types: !82)
!82 = !{null, !83, !87}
!83 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "BitReader*", baseType: !84, size: 64, align: 64, dwarfAddressSpace: 0)
!84 = !DICompositeType(tag: DW_TAG_structure_type, name: "BitReader", scope: !2, file: !2, line: 3, size: 192, align: 64, elements: !85, identifier: "std.io.BitReader")
!85 = !{!86, !92, !94}
!86 = !DIDerivedType(tag: DW_TAG_member, name: "reader", scope: !84, file: !2, line: 5, baseType: !87, size: 128, align: 64)
!87 = !DICompositeType(tag: DW_TAG_structure_type, name: "InStream", size: 128, align: 64, elements: !88, identifier: "InStream")
!88 = !{!89, !90}
!89 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !87, baseType: !25, size: 64, align: 64)
!90 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !87, baseType: !91, size: 64, align: 64, offset: 64)
!91 = !DIBasicType(name: "typeid", size: 64, encoding: DW_ATE_address)
!92 = !DIDerivedType(tag: DW_TAG_member, name: "bits", scope: !84, file: !2, line: 6, baseType: !93, size: 32, align: 32, offset: 128)
!93 = !DIBasicType(name: "uint", size: 32, encoding: DW_ATE_unsigned)
!94 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !84, file: !2, line: 7, baseType: !93, size: 32, align: 32, offset: 160)
!95 = !{}
!96 = !DILocation(line: 11, scope: !80)
!97 = !DILocalVariable(name: "self", arg: 1, scope: !80, file: !2, line: 10, type: !83)
!98 = !DILocation(line: 10, scope: !80)
!99 = !DILocalVariable(name: "byte_reader", arg: 2, scope: !80, file: !2, line: 10, type: !87)
!100 = !DILocation(line: 12, scope: !80)
!101 = distinct !DISubprogram(name: "clear", linkageName: "std.io.BitReader.clear", scope: !2, file: !2, line: 15, type: !102, scopeLine: 15, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!102 = !DISubroutineType(types: !103)
!103 = !{null, !83}
!104 = !DILocation(line: 16, scope: !101)
!105 = !DILocalVariable(name: "self", arg: 1, scope: !101, file: !2, line: 15, type: !83)
!106 = !DILocation(line: 15, scope: !101)
!107 = !DILocation(line: 17, scope: !101)
!108 = distinct !DISubprogram(name: "read_bits", linkageName: "std.io.BitReader.read_bits", scope: !2, file: !2, line: 24, type: !109, scopeLine: 24, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!109 = !DISubroutineType(types: !110)
!110 = !{!111, !113, !83, !93}
!111 = !DIDerivedType(tag: DW_TAG_typedef, name: "fault", baseType: !112)
!112 = !DIBasicType(name: "long", size: 64, encoding: DW_ATE_signed)
!113 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "char*", baseType: !11, size: 64, align: 64, dwarfAddressSpace: 0)
!114 = !DILocation(line: 25, scope: !108)
!115 = !DILocalVariable(name: "self", arg: 1, scope: !108, file: !2, line: 24, type: !83)
!116 = !DILocation(line: 24, scope: !108)
!117 = !DILocalVariable(name: "nbits", arg: 2, scope: !108, file: !2, line: 24, type: !93)
!118 = !DILocation(line: 21, scope: !119)
!119 = distinct !DILexicalBlock(scope: !108, file: !2, line: 25, column: 1)
!120 = !DILocation(line: 22, scope: !119)
!121 = !DILocalVariable(name: "bits", scope: !108, file: !2, line: 26, type: !93, align: 4)
!122 = !DILocation(line: 26, scope: !108)
!123 = !DILocation(line: 27, scope: !108)
!124 = !DILocalVariable(name: "c", scope: !125, file: !2, line: 30, type: !11, align: 1)
!125 = distinct !DILexicalBlock(scope: !108, file: !2, line: 28, column: 2)
!126 = !DILocation(line: 30, scope: !125)
!127 = !DILocation(line: 31, scope: !125)
!128 = !DILocation(line: 32, scope: !125)
!129 = !DILocation(line: 33, scope: !125)
!130 = !DILocation(line: 34, scope: !125)
!131 = !DILocation(line: 36, scope: !108)
!132 = !DILocalVariable(name: "mask", scope: !108, file: !2, line: 37, type: !93, align: 4)
!133 = !DILocation(line: 37, scope: !108)
!134 = !DILocation(line: 38, scope: !108)
!135 = distinct !DISubprogram(name: "init", linkageName: "std.io.BitWriter.init", scope: !2, file: !2, line: 52, type: !136, scopeLine: 52, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!136 = !DISubroutineType(types: !137)
!137 = !{null, !138, !142}
!138 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "BitWriter*", baseType: !139, size: 64, align: 64, dwarfAddressSpace: 0)
!139 = !DICompositeType(tag: DW_TAG_structure_type, name: "BitWriter", scope: !2, file: !2, line: 41, size: 192, align: 64, elements: !140, identifier: "std.io.BitWriter")
!140 = !{!141, !146, !147}
!141 = !DIDerivedType(tag: DW_TAG_member, name: "writer", scope: !139, file: !2, line: 43, baseType: !142, size: 128, align: 64)
!142 = !DICompositeType(tag: DW_TAG_structure_type, name: "OutStream", size: 128, align: 64, elements: !143, identifier: "OutStream")
!143 = !{!144, !145}
!144 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !142, baseType: !25, size: 64, align: 64)
!145 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !142, baseType: !91, size: 64, align: 64, offset: 64)
!146 = !DIDerivedType(tag: DW_TAG_member, name: "bits", scope: !139, file: !2, line: 44, baseType: !93, size: 32, align: 32, offset: 128)
!147 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !139, file: !2, line: 45, baseType: !93, size: 32, align: 32, offset: 160)
!148 = !DILocation(line: 53, scope: !135)
!149 = !DILocalVariable(name: "self", arg: 1, scope: !135, file: !2, line: 52, type: !138)
!150 = !DILocation(line: 52, scope: !135)
!151 = !DILocalVariable(name: "byte_writer", arg: 2, scope: !135, file: !2, line: 52, type: !142)
!152 = !DILocation(line: 54, scope: !135)
!153 = distinct !DISubprogram(name: "flush", linkageName: "std.io.BitWriter.flush", scope: !2, file: !2, line: 57, type: !154, scopeLine: 57, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!154 = !DISubroutineType(types: !155)
!155 = !{!111, !25, !138}
!156 = !DILocation(line: 58, scope: !153)
!157 = !DILocalVariable(name: "self", arg: 1, scope: !153, file: !2, line: 57, type: !138)
!158 = !DILocation(line: 57, scope: !153)
!159 = !DILocation(line: 59, scope: !153)
!160 = !DILocalVariable(name: "padding", scope: !153, file: !2, line: 61, type: !3, align: 4)
!161 = !DILocation(line: 61, scope: !153)
!162 = !DILocalVariable(name: "bits", scope: !153, file: !2, line: 62, type: !93, align: 4)
!163 = !DILocation(line: 62, scope: !153)
!164 = !DILocalVariable(name: "n", scope: !153, file: !2, line: 63, type: !93, align: 4)
!165 = !DILocation(line: 63, scope: !153)
!166 = !DILocalVariable(name: "buffer", scope: !153, file: !2, line: 64, type: !167, align: 1)
!167 = !DICompositeType(tag: DW_TAG_array_type, baseType: !11, size: 32, align: 8, elements: !168)
!168 = !{!169}
!169 = !DISubrange(count: 4, lowerBound: 0)
!170 = !DILocation(line: 64, scope: !153)
!171 = !DILocalVariable(name: "s", scope: !172, file: !2, line: 112, type: !174, align: 8)
!172 = distinct !DISubprogram(name: "write", linkageName: "write", scope: !173, file: !173, line: 110, scopeLine: 110, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42, retainedNodes: !95)
!173 = !DIFile(filename: "bitorder.c3", directory: "C:/Compilers/C3/lib/std/core")
!174 = !DICompositeType(tag: DW_TAG_structure_type, name: "char[]", size: 128, align: 64, elements: !175, identifier: "char[]")
!175 = !{!176, !177}
!176 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !174, baseType: !113, size: 64, align: 64)
!177 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !174, baseType: !178, size: 64, align: 64, offset: 64)
!178 = !DIDerivedType(tag: DW_TAG_typedef, name: "usz", baseType: !179)
!179 = !DIBasicType(name: "ulong", size: 64, encoding: DW_ATE_unsigned)
!180 = !DILocation(line: 112, scope: !172, inlinedAt: !181)
!181 = !DILocation(line: 65, scope: !153)
!182 = !DILocation(line: 115, scope: !172, inlinedAt: !181)
!183 = !DILocation(line: 281, scope: !184, inlinedAt: !186)
!184 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !185, file: !185, line: 278, scopeLine: 278, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!185 = !DIFile(filename: "builtin.c3", directory: "C:/Compilers/C3/lib/std/core")
!186 = !DILocation(line: 119, scope: !172, inlinedAt: !181)
!187 = !DILocation(line: 66, scope: !153)
!188 = !DILocation(line: 101, scope: !189, inlinedAt: !187)
!189 = distinct !DISubprogram(name: "write_all", linkageName: "write_all", scope: !32, file: !32, line: 99, scopeLine: 99, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42, retainedNodes: !95)
!190 = !DILocalVariable(name: "n", scope: !189, file: !2, line: 102, type: !178, align: 8)
!191 = !DILocation(line: 102, scope: !189, inlinedAt: !187)
!192 = !DILocation(line: 103, scope: !189, inlinedAt: !187)
!193 = !DILocation(line: 104, scope: !189, inlinedAt: !187)
!194 = !DILocation(line: 67, scope: !153)
!195 = distinct !DISubprogram(name: "write_bits", linkageName: "std.io.BitWriter.write_bits", scope: !2, file: !2, line: 73, type: !196, scopeLine: 73, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!196 = !DISubroutineType(types: !197)
!197 = !{!111, !25, !138, !93, !93}
!198 = !DILocation(line: 74, scope: !195)
!199 = !DILocalVariable(name: "self", arg: 1, scope: !195, file: !2, line: 73, type: !138)
!200 = !DILocation(line: 73, scope: !195)
!201 = !DILocalVariable(name: "bits", arg: 2, scope: !195, file: !2, line: 73, type: !93)
!202 = !DILocalVariable(name: "nbits", arg: 3, scope: !195, file: !2, line: 73, type: !93)
!203 = !DILocation(line: 71, scope: !204)
!204 = distinct !DILexicalBlock(scope: !195, file: !2, line: 74, column: 1)
!205 = !DILocation(line: 75, scope: !195)
!206 = !DILocation(line: 76, scope: !195)
!207 = !DILocation(line: 76, scope: !208)
!208 = distinct !DILexicalBlock(scope: !195, file: !2, line: 76, column: 2)
!209 = !DILocalVariable(name: "to_push", scope: !210, file: !2, line: 78, type: !93, align: 4)
!210 = distinct !DILexicalBlock(scope: !208, file: !2, line: 77, column: 2)
!211 = !DILocation(line: 78, scope: !210)
!212 = !DILocalVariable(name: "bits_to_push", scope: !210, file: !2, line: 79, type: !93, align: 4)
!213 = !DILocation(line: 79, scope: !210)
!214 = !DILocation(line: 81, scope: !210)
!215 = !DILocation(line: 82, scope: !210)
!216 = !DILocation(line: 83, scope: !210)
!217 = !DILocation(line: 84, scope: !210)
!218 = !DILocation(line: 86, scope: !210)
!219 = !DILocation(line: 89, scope: !195)
!220 = !DILocation(line: 91, scope: !195)
!221 = !DILocation(line: 92, scope: !195)
!222 = !DILocation(line: 93, scope: !195)
!223 = distinct !DISubprogram(name: "to_format", linkageName: "std.core.ReflectedParam.to_format", scope: !6, file: !6, line: 53, type: !224, scopeLine: 53, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!224 = !DISubroutineType(types: !225)
!225 = !{!111, !226, !227, !233}
!226 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "usz*", baseType: !178, size: 64, align: 64, dwarfAddressSpace: 0)
!227 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "ReflectedParam*", baseType: !228, size: 64, align: 64, dwarfAddressSpace: 0)
!228 = !DICompositeType(tag: DW_TAG_structure_type, name: "ReflectedParam", scope: !6, file: !6, line: 1, size: 192, align: 64, elements: !229, identifier: "ReflectedParam")
!229 = !{!230, !232}
!230 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !228, file: !6, baseType: !231, size: 128, align: 64)
!231 = !DIDerivedType(tag: DW_TAG_typedef, name: "String", baseType: !174)
!232 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !228, file: !6, baseType: !91, size: 64, align: 64, offset: 128)
!233 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Formatter*", baseType: !234, size: 64, align: 64, dwarfAddressSpace: 0)
!234 = !DICompositeType(tag: DW_TAG_structure_type, name: "Formatter", scope: !6, file: !6, line: 63, size: 320, align: 64, elements: !235, identifier: "std.io.Formatter")
!235 = !{!236, !237, !242}
!236 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !234, file: !6, line: 65, baseType: !25, size: 64, align: 64)
!237 = !DIDerivedType(tag: DW_TAG_member, name: "out_fn", scope: !234, file: !6, line: 66, baseType: !238, size: 64, align: 64, offset: 64)
!238 = !DIDerivedType(tag: DW_TAG_typedef, name: "OutputFn", scope: !6, file: !6, line: 16, baseType: !239, align: 8)
!239 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "OutputFn", baseType: !240, size: 64, align: 64, dwarfAddressSpace: 0)
!240 = !DISubroutineType(types: !241)
!241 = !{!111, !25, !25, !11}
!242 = !DIDerivedType(tag: DW_TAG_member, scope: !234, file: !6, line: 67, baseType: !243, size: 192, align: 64, offset: 128)
!243 = !DICompositeType(tag: DW_TAG_structure_type, name: "$anon", scope: !234, file: !6, line: 67, size: 192, align: 64, elements: !244)
!244 = !{!245, !246, !247, !248}
!245 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !243, file: !6, line: 69, baseType: !93, size: 32, align: 32)
!246 = !DIDerivedType(tag: DW_TAG_member, name: "width", scope: !243, file: !6, line: 70, baseType: !93, size: 32, align: 32, offset: 32)
!247 = !DIDerivedType(tag: DW_TAG_member, name: "prec", scope: !243, file: !6, line: 71, baseType: !93, size: 32, align: 32, offset: 64)
!248 = !DIDerivedType(tag: DW_TAG_member, name: "first_fault", scope: !243, file: !6, line: 72, baseType: !111, size: 64, align: 64, offset: 128)
!249 = !DILocation(line: 54, scope: !223)
!250 = !DILocalVariable(name: "self", arg: 1, scope: !223, file: !6, line: 53, type: !227)
!251 = !DILocation(line: 53, scope: !223)
!252 = !DILocalVariable(name: "f", arg: 2, scope: !223, file: !6, line: 53, type: !233)
!253 = !DILocation(line: 55, scope: !223)
!254 = distinct !DISubprogram(name: "printf", linkageName: "std.io.Formatter.printf", scope: !6, file: !6, line: 58, type: !255, scopeLine: 58, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!255 = !DISubroutineType(types: !256)
!256 = !{!111, !226, !233, !231, !257}
!257 = !DICompositeType(tag: DW_TAG_structure_type, name: "any[]", size: 128, align: 64, elements: !258, identifier: "any[]")
!258 = !{!259, !265}
!259 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !257, baseType: !260, size: 64, align: 64)
!260 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "any*", baseType: !261, size: 64, align: 64, dwarfAddressSpace: 0)
!261 = !DICompositeType(tag: DW_TAG_structure_type, name: "any", size: 128, align: 64, elements: !262, identifier: "any")
!262 = !{!263, !264}
!263 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !261, baseType: !25, size: 64, align: 64)
!264 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !261, baseType: !91, size: 64, align: 64, offset: 64)
!265 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !257, baseType: !178, size: 64, align: 64, offset: 64)
!266 = !DILocation(line: 59, scope: !254)
!267 = !DILocalVariable(name: "self", arg: 1, scope: !254, file: !6, line: 58, type: !233)
!268 = !DILocation(line: 58, scope: !254)
!269 = !DILocalVariable(name: "format", arg: 2, scope: !254, file: !6, line: 58, type: !231)
!270 = !DILocalVariable(name: "args", arg: 3, scope: !254, file: !6, line: 58, type: !257)
!271 = !DILocation(line: 60, scope: !254)
!272 = distinct !DISubprogram(name: "init", linkageName: "std.io.Formatter.init", scope: !6, file: !6, line: 87, type: !273, scopeLine: 87, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!273 = !DISubroutineType(types: !274)
!274 = !{null, !233, !239, !25}
!275 = !DILocation(line: 88, scope: !272)
!276 = !DILocalVariable(name: "self", arg: 1, scope: !272, file: !6, line: 87, type: !233)
!277 = !DILocation(line: 87, scope: !272)
!278 = !DILocalVariable(name: "out_fn", arg: 2, scope: !272, file: !6, line: 87, type: !238)
!279 = !DILocalVariable(name: "data", arg: 3, scope: !272, file: !6, line: 87, type: !25)
!280 = !DILocation(line: 89, scope: !272)
!281 = distinct !DISubprogram(name: "out", linkageName: "std.io.Formatter.out", scope: !6, file: !6, line: 92, type: !282, scopeLine: 92, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42, retainedNodes: !95)
!282 = !DISubroutineType(types: !283)
!283 = !{!111, !226, !233, !11}
!284 = !DILocation(line: 93, scope: !281)
!285 = !DILocalVariable(name: "self", arg: 1, scope: !281, file: !6, line: 92, type: !233)
!286 = !DILocation(line: 92, scope: !281)
!287 = !DILocalVariable(name: "c", arg: 2, scope: !281, file: !6, line: 92, type: !11)
!288 = !DILocalVariable(name: "err", scope: !281, file: !6, line: 94, type: !111, align: 8)
!289 = !DILocation(line: 94, scope: !281)
!290 = !DILocation(line: 96, scope: !291)
!291 = distinct !DILexicalBlock(scope: !281, file: !6, line: 95, column: 2)
!292 = !DILocation(line: 97, scope: !291)
!293 = !DILocation(line: 98, scope: !291)
!294 = !DILocation(line: 100, scope: !281)
!295 = distinct !DISubprogram(name: "print_with_function", linkageName: "std.io.Formatter.print_with_function", scope: !6, file: !6, line: 103, type: !296, scopeLine: 103, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!296 = !DISubroutineType(types: !297)
!297 = !{!111, !226, !233, !298}
!298 = !DICompositeType(tag: DW_TAG_structure_type, name: "Printable", size: 128, align: 64, elements: !299, identifier: "Printable")
!299 = !{!300, !301}
!300 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !298, baseType: !25, size: 64, align: 64)
!301 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !298, baseType: !91, size: 64, align: 64, offset: 64)
!302 = !DILocation(line: 104, scope: !295)
!303 = !DILocalVariable(name: "self", arg: 1, scope: !295, file: !6, line: 103, type: !233)
!304 = !DILocation(line: 103, scope: !295)
!305 = !DILocalVariable(name: "arg", arg: 2, scope: !295, file: !6, line: 103, type: !298)
!306 = !DILocation(line: 105, scope: !295)
!307 = !DILocalVariable(name: "old", scope: !308, file: !6, line: 107, type: !93, align: 4)
!308 = distinct !DILexicalBlock(scope: !295, file: !6, line: 106, column: 2)
!309 = !DILocation(line: 107, scope: !308)
!310 = !DILocalVariable(name: "old_width", scope: !308, file: !6, line: 108, type: !93, align: 4)
!311 = !DILocation(line: 108, scope: !308)
!312 = !DILocalVariable(name: "old_prec", scope: !308, file: !6, line: 109, type: !93, align: 4)
!313 = !DILocation(line: 109, scope: !308)
!314 = !DILocation(line: 116, scope: !308)
!315 = !DILocation(line: 112, scope: !316)
!316 = distinct !DILexicalBlock(scope: !308, file: !6, line: 111, column: 3)
!317 = !DILocation(line: 113, scope: !316)
!318 = !DILocation(line: 114, scope: !316)
!319 = !DILocation(line: 112, scope: !320)
!320 = distinct !DILexicalBlock(scope: !308, file: !6, line: 111, column: 3)
!321 = !DILocation(line: 113, scope: !320)
!322 = !DILocation(line: 114, scope: !320)
!323 = !DILocation(line: 117, scope: !308)
!324 = !DILocation(line: 112, scope: !325)
!325 = distinct !DILexicalBlock(scope: !308, file: !6, line: 111, column: 3)
!326 = !DILocation(line: 113, scope: !325)
!327 = !DILocation(line: 114, scope: !325)
!328 = !DILocation(line: 112, scope: !329)
!329 = distinct !DILexicalBlock(scope: !308, file: !6, line: 111, column: 3)
!330 = !DILocation(line: 113, scope: !329)
!331 = !DILocation(line: 114, scope: !329)
!332 = !DILocation(line: 119, scope: !295)
!333 = !DILocalVariable(name: "old", scope: !334, file: !6, line: 121, type: !93, align: 4)
!334 = distinct !DILexicalBlock(scope: !295, file: !6, line: 120, column: 2)
!335 = !DILocation(line: 121, scope: !334)
!336 = !DILocalVariable(name: "old_width", scope: !334, file: !6, line: 122, type: !93, align: 4)
!337 = !DILocation(line: 122, scope: !334)
!338 = !DILocalVariable(name: "old_prec", scope: !334, file: !6, line: 123, type: !93, align: 4)
!339 = !DILocation(line: 123, scope: !334)
!340 = !DILocation(line: 130, scope: !334)
!341 = !DILocation(line: 126, scope: !342)
!342 = distinct !DILexicalBlock(scope: !334, file: !6, line: 125, column: 3)
!343 = !DILocation(line: 127, scope: !342)
!344 = !DILocation(line: 128, scope: !342)
!345 = !DILocation(line: 126, scope: !346)
!346 = distinct !DILexicalBlock(scope: !334, file: !6, line: 125, column: 3)
!347 = !DILocation(line: 127, scope: !346)
!348 = !DILocation(line: 128, scope: !346)
!349 = !DILocation(line: 131, scope: !334)
!350 = !DILocation(line: 126, scope: !351)
!351 = distinct !DILexicalBlock(scope: !334, file: !6, line: 125, column: 3)
!352 = !DILocation(line: 127, scope: !351)
!353 = !DILocation(line: 128, scope: !351)
!354 = !DILocation(line: 126, scope: !355)
!355 = distinct !DILexicalBlock(scope: !334, file: !6, line: 125, column: 3)
!356 = !DILocation(line: 127, scope: !355)
!357 = !DILocation(line: 128, scope: !355)
!358 = !DILocation(line: 133, scope: !295)
!359 = distinct !DISubprogram(name: "out_unknown", linkageName: "std.io.Formatter.out_unknown", scope: !6, file: !6, line: 136, type: !360, scopeLine: 136, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42, retainedNodes: !95)
!360 = !DISubroutineType(types: !361)
!361 = !{!111, !226, !233, !231, !261}
!362 = !DILocation(line: 137, scope: !359)
!363 = !DILocalVariable(name: "self", arg: 1, scope: !359, file: !6, line: 136, type: !233)
!364 = !DILocation(line: 136, scope: !359)
!365 = !DILocalVariable(name: "category", arg: 2, scope: !359, file: !6, line: 136, type: !231)
!366 = !DILocalVariable(name: "arg", arg: 3, scope: !359, file: !6, line: 136, type: !261)
!367 = !DILocation(line: 138, scope: !359)
!368 = distinct !DISubprogram(name: "out_str", linkageName: "std.io.Formatter.out_str", scope: !6, file: !6, line: 140, type: !369, scopeLine: 140, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42, retainedNodes: !95)
!369 = !DISubroutineType(types: !370)
!370 = !{!111, !226, !233, !261}
!371 = !DILocation(line: 141, scope: !368)
!372 = !DILocalVariable(name: "self", arg: 1, scope: !368, file: !6, line: 140, type: !233)
!373 = !DILocation(line: 140, scope: !368)
!374 = !DILocalVariable(name: "arg", arg: 2, scope: !368, file: !6, line: 140, type: !261)
!375 = !DILocation(line: 142, scope: !376)
!376 = distinct !DILexicalBlock(scope: !368, file: !6, line: 142, column: 2)
!377 = !DILocation(line: 145, scope: !378)
!378 = distinct !DILexicalBlock(scope: !376, file: !6, line: 145, column: 4)
!379 = !DILocation(line: 147, scope: !380)
!380 = distinct !DILexicalBlock(scope: !376, file: !6, line: 147, column: 4)
!381 = !DILocation(line: 149, scope: !382)
!382 = distinct !DILexicalBlock(scope: !376, file: !6, line: 149, column: 4)
!383 = !DILocation(line: 152, scope: !384)
!384 = distinct !DILexicalBlock(scope: !376, file: !6, line: 152, column: 4)
!385 = !DILocation(line: 232, scope: !386, inlinedAt: !387)
!386 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !185, file: !185, line: 229, scopeLine: 229, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!387 = !DILocation(line: 154, scope: !388)
!388 = distinct !DILexicalBlock(scope: !376, file: !6, line: 154, column: 4)
!389 = !DILocalVariable(name: "flags", scope: !390, file: !6, line: 157, type: !93, align: 4)
!390 = distinct !DILexicalBlock(scope: !376, file: !6, line: 157, column: 4)
!391 = !DILocation(line: 157, scope: !390)
!392 = !DILocalVariable(name: "width", scope: !390, file: !6, line: 158, type: !93, align: 4)
!393 = !DILocation(line: 158, scope: !390)
!394 = !DILocation(line: 164, scope: !390)
!395 = !DILocation(line: 165, scope: !390)
!396 = !DILocation(line: 166, scope: !390)
!397 = !DILocation(line: 161, scope: !398)
!398 = distinct !DILexicalBlock(scope: !390, file: !6, line: 160, column: 4)
!399 = !DILocation(line: 162, scope: !398)
!400 = !DILocation(line: 161, scope: !401)
!401 = distinct !DILexicalBlock(scope: !390, file: !6, line: 160, column: 4)
!402 = !DILocation(line: 162, scope: !401)
!403 = !DILocalVariable(name: "flags", scope: !404, file: !6, line: 168, type: !93, align: 4)
!404 = distinct !DILexicalBlock(scope: !376, file: !6, line: 168, column: 4)
!405 = !DILocation(line: 168, scope: !404)
!406 = !DILocalVariable(name: "width", scope: !404, file: !6, line: 169, type: !93, align: 4)
!407 = !DILocation(line: 169, scope: !404)
!408 = !DILocation(line: 175, scope: !404)
!409 = !DILocation(line: 176, scope: !404)
!410 = !DILocation(line: 177, scope: !404)
!411 = !DILocation(line: 172, scope: !412)
!412 = distinct !DILexicalBlock(scope: !404, file: !6, line: 171, column: 4)
!413 = !DILocation(line: 173, scope: !412)
!414 = !DILocation(line: 172, scope: !415)
!415 = distinct !DILexicalBlock(scope: !404, file: !6, line: 171, column: 4)
!416 = !DILocation(line: 173, scope: !415)
!417 = !DILocation(line: 179, scope: !418)
!418 = distinct !DILexicalBlock(scope: !376, file: !6, line: 179, column: 4)
!419 = !DILocalVariable(name: "n", scope: !368, file: !6, line: 182, type: !179, align: 8)
!420 = !DILocation(line: 182, scope: !368)
!421 = !DILocation(line: 183, scope: !368)
!422 = !DILocalVariable(name: "f", scope: !423, file: !6, line: 422, type: !111, align: 8)
!423 = distinct !DISubprogram(name: "@catch", linkageName: "@catch", scope: !185, file: !185, line: 420, scopeLine: 420, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42, retainedNodes: !95)
!424 = !DILocation(line: 422, scope: !423, inlinedAt: !425)
!425 = !DILocation(line: 184, scope: !368)
!426 = !DILocation(line: 423, scope: !423, inlinedAt: !425)
!427 = !DILocation(line: 185, scope: !428)
!428 = distinct !DILexicalBlock(scope: !368, file: !6, line: 185, column: 2)
!429 = !DILocalVariable(name: "i", scope: !430, file: !6, line: 188, type: !178, align: 8)
!430 = distinct !DILexicalBlock(scope: !428, file: !6, line: 188, column: 4)
!431 = !DILocation(line: 188, scope: !430)
!432 = !DILocation(line: 188, scope: !433, inlinedAt: !431)
!433 = distinct !DILexicalBlock(scope: !435, file: !434, line: 13, column: 1)
!434 = !DIFile(filename: "types.c3", directory: "C:/Compilers/C3/lib/std/core")
!435 = distinct !DISubprogram(name: "any_to_enum_ordinal", linkageName: "any_to_enum_ordinal", scope: !434, file: !434, line: 12, scopeLine: 12, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!436 = !DILocation(line: 10, scope: !433, inlinedAt: !431)
!437 = !DILocation(line: 266, scope: !438, inlinedAt: !440)
!438 = distinct !DILexicalBlock(scope: !439, file: !185, line: 267, column: 1)
!439 = distinct !DISubprogram(name: "as_inner", linkageName: "as_inner", scope: !185, file: !185, line: 266, scopeLine: 266, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!440 = !DILocation(line: 14, scope: !435, inlinedAt: !431)
!441 = !DILocation(line: 268, scope: !439, inlinedAt: !440)
!442 = !DILocation(line: 14, scope: !443, inlinedAt: !440)
!443 = distinct !DILexicalBlock(scope: !444, file: !434, line: 22, column: 1)
!444 = distinct !DISubprogram(name: "any_to_int", linkageName: "any_to_int", scope: !434, file: !434, line: 21, scopeLine: 21, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42, retainedNodes: !95)
!445 = !DILocation(line: 19, scope: !443, inlinedAt: !440)
!446 = !DILocalVariable(name: "any_type", scope: !444, file: !6, line: 23, type: !91, align: 8)
!447 = !DILocation(line: 23, scope: !444, inlinedAt: !440)
!448 = !DILocalVariable(name: "kind", scope: !444, file: !6, line: 24, type: !56, align: 1)
!449 = !DILocation(line: 24, scope: !444, inlinedAt: !440)
!450 = !DILocalVariable(name: "is_mixed_signed", scope: !444, file: !6, line: 25, type: !451, align: 1)
!451 = !DIBasicType(name: "bool", size: 8, encoding: DW_ATE_boolean)
!452 = !DILocation(line: 25, scope: !444, inlinedAt: !440)
!453 = !DILocalVariable(name: "max", scope: !444, file: !6, line: 26, type: !179, align: 8)
!454 = !DILocation(line: 26, scope: !444, inlinedAt: !440)
!455 = !DILocalVariable(name: "min", scope: !444, file: !6, line: 27, type: !179, align: 8)
!456 = !DILocation(line: 27, scope: !444, inlinedAt: !440)
!457 = !DILocation(line: 30, scope: !458, inlinedAt: !440)
!458 = distinct !DILexicalBlock(scope: !444, file: !434, line: 28, column: 2)
!459 = !DILocalVariable(name: "c", scope: !460, file: !6, line: 31, type: !461, align: 1)
!460 = distinct !DILexicalBlock(scope: !458, file: !434, line: 31, column: 4)
!461 = !DIBasicType(name: "ichar", size: 8, encoding: DW_ATE_signed_char)
!462 = !DILocation(line: 31, scope: !460, inlinedAt: !440)
!463 = !DILocation(line: 32, scope: !460, inlinedAt: !440)
!464 = !DILocation(line: 33, scope: !460, inlinedAt: !440)
!465 = !DILocation(line: 34, scope: !458, inlinedAt: !440)
!466 = !DILocalVariable(name: "s", scope: !467, file: !6, line: 35, type: !468, align: 2)
!467 = distinct !DILexicalBlock(scope: !458, file: !434, line: 35, column: 4)
!468 = !DIBasicType(name: "short", size: 16, encoding: DW_ATE_signed)
!469 = !DILocation(line: 35, scope: !467, inlinedAt: !440)
!470 = !DILocation(line: 36, scope: !467, inlinedAt: !440)
!471 = !DILocation(line: 37, scope: !467, inlinedAt: !440)
!472 = !DILocation(line: 38, scope: !467, inlinedAt: !440)
!473 = !DILocation(line: 39, scope: !458, inlinedAt: !440)
!474 = !DILocalVariable(name: "i", scope: !475, file: !6, line: 40, type: !3, align: 4)
!475 = distinct !DILexicalBlock(scope: !458, file: !434, line: 40, column: 4)
!476 = !DILocation(line: 40, scope: !475, inlinedAt: !440)
!477 = !DILocation(line: 41, scope: !475, inlinedAt: !440)
!478 = !DILocation(line: 42, scope: !475, inlinedAt: !440)
!479 = !DILocation(line: 43, scope: !475, inlinedAt: !440)
!480 = !DILocation(line: 44, scope: !458, inlinedAt: !440)
!481 = !DILocalVariable(name: "l", scope: !482, file: !6, line: 45, type: !112, align: 8)
!482 = distinct !DILexicalBlock(scope: !458, file: !434, line: 45, column: 4)
!483 = !DILocation(line: 45, scope: !482, inlinedAt: !440)
!484 = !DILocation(line: 46, scope: !482, inlinedAt: !440)
!485 = !DILocation(line: 47, scope: !482, inlinedAt: !440)
!486 = !DILocation(line: 48, scope: !482, inlinedAt: !440)
!487 = !DILocation(line: 49, scope: !458, inlinedAt: !440)
!488 = !DILocalVariable(name: "i", scope: !489, file: !6, line: 50, type: !490, align: 16)
!489 = distinct !DILexicalBlock(scope: !458, file: !434, line: 50, column: 4)
!490 = !DIBasicType(name: "int128", size: 128, encoding: DW_ATE_signed)
!491 = !DILocation(line: 50, scope: !489, inlinedAt: !440)
!492 = !DILocation(line: 51, scope: !489, inlinedAt: !440)
!493 = !DILocation(line: 52, scope: !489, inlinedAt: !440)
!494 = !DILocation(line: 53, scope: !489, inlinedAt: !440)
!495 = !DILocation(line: 54, scope: !458, inlinedAt: !440)
!496 = !DILocalVariable(name: "c", scope: !497, file: !6, line: 55, type: !11, align: 1)
!497 = distinct !DILexicalBlock(scope: !458, file: !434, line: 55, column: 4)
!498 = !DILocation(line: 55, scope: !497, inlinedAt: !440)
!499 = !DILocation(line: 56, scope: !497, inlinedAt: !440)
!500 = !DILocation(line: 57, scope: !497, inlinedAt: !440)
!501 = !DILocation(line: 58, scope: !458, inlinedAt: !440)
!502 = !DILocalVariable(name: "s", scope: !503, file: !6, line: 59, type: !504, align: 2)
!503 = distinct !DILexicalBlock(scope: !458, file: !434, line: 59, column: 4)
!504 = !DIBasicType(name: "ushort", size: 16, encoding: DW_ATE_unsigned)
!505 = !DILocation(line: 59, scope: !503, inlinedAt: !440)
!506 = !DILocation(line: 60, scope: !503, inlinedAt: !440)
!507 = !DILocation(line: 61, scope: !503, inlinedAt: !440)
!508 = !DILocation(line: 62, scope: !458, inlinedAt: !440)
!509 = !DILocalVariable(name: "i", scope: !510, file: !6, line: 63, type: !93, align: 4)
!510 = distinct !DILexicalBlock(scope: !458, file: !434, line: 63, column: 4)
!511 = !DILocation(line: 63, scope: !510, inlinedAt: !440)
!512 = !DILocation(line: 64, scope: !510, inlinedAt: !440)
!513 = !DILocation(line: 65, scope: !510, inlinedAt: !440)
!514 = !DILocation(line: 66, scope: !458, inlinedAt: !440)
!515 = !DILocalVariable(name: "l", scope: !516, file: !6, line: 67, type: !179, align: 8)
!516 = distinct !DILexicalBlock(scope: !458, file: !434, line: 67, column: 4)
!517 = !DILocation(line: 67, scope: !516, inlinedAt: !440)
!518 = !DILocation(line: 68, scope: !516, inlinedAt: !440)
!519 = !DILocation(line: 69, scope: !516, inlinedAt: !440)
!520 = !DILocation(line: 70, scope: !458, inlinedAt: !440)
!521 = !DILocalVariable(name: "i", scope: !522, file: !6, line: 71, type: !523, align: 16)
!522 = distinct !DILexicalBlock(scope: !458, file: !434, line: 71, column: 4)
!523 = !DIBasicType(name: "uint128", size: 128, encoding: DW_ATE_unsigned)
!524 = !DILocation(line: 71, scope: !522, inlinedAt: !440)
!525 = !DILocation(line: 72, scope: !522, inlinedAt: !440)
!526 = !DILocation(line: 73, scope: !522, inlinedAt: !440)
!527 = !DILocation(line: 232, scope: !528, inlinedAt: !529)
!528 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !185, file: !185, line: 229, scopeLine: 229, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!529 = !DILocation(line: 75, scope: !530, inlinedAt: !440)
!530 = distinct !DILexicalBlock(scope: !458, file: !434, line: 75, column: 4)
!531 = !DILocation(line: 189, scope: !430)
!532 = !DILocation(line: 190, scope: !430)
!533 = !DILocation(line: 192, scope: !534)
!534 = distinct !DILexicalBlock(scope: !428, file: !6, line: 192, column: 4)
!535 = !DILocation(line: 194, scope: !536)
!536 = distinct !DILexicalBlock(scope: !428, file: !6, line: 194, column: 4)
!537 = !DILocation(line: 196, scope: !538)
!538 = distinct !DILexicalBlock(scope: !428, file: !6, line: 196, column: 4)
!539 = !DILocalVariable(name: "flags", scope: !540, file: !6, line: 198, type: !93, align: 4)
!540 = distinct !DILexicalBlock(scope: !428, file: !6, line: 198, column: 4)
!541 = !DILocation(line: 198, scope: !540)
!542 = !DILocalVariable(name: "width", scope: !540, file: !6, line: 199, type: !93, align: 4)
!543 = !DILocation(line: 199, scope: !540)
!544 = !DILocation(line: 205, scope: !540)
!545 = !DILocation(line: 206, scope: !540)
!546 = !DILocation(line: 202, scope: !547)
!547 = distinct !DILexicalBlock(scope: !540, file: !6, line: 201, column: 4)
!548 = !DILocation(line: 203, scope: !547)
!549 = !DILocation(line: 202, scope: !550)
!550 = distinct !DILexicalBlock(scope: !540, file: !6, line: 201, column: 4)
!551 = !DILocation(line: 203, scope: !550)
!552 = !DILocation(line: 202, scope: !553)
!553 = distinct !DILexicalBlock(scope: !540, file: !6, line: 201, column: 4)
!554 = !DILocation(line: 203, scope: !553)
!555 = !DILocation(line: 209, scope: !556)
!556 = distinct !DILexicalBlock(scope: !428, file: !6, line: 209, column: 4)
!557 = !DILocation(line: 211, scope: !558)
!558 = distinct !DILexicalBlock(scope: !556, file: !6, line: 210, column: 4)
!559 = !DILocation(line: 213, scope: !556)
!560 = !DILocation(line: 215, scope: !561)
!561 = distinct !DILexicalBlock(scope: !556, file: !6, line: 214, column: 4)
!562 = !DILocation(line: 217, scope: !556)
!563 = !DILocation(line: 219, scope: !564)
!564 = distinct !DILexicalBlock(scope: !556, file: !6, line: 218, column: 4)
!565 = !DILocation(line: 266, scope: !566, inlinedAt: !568)
!566 = distinct !DILexicalBlock(scope: !567, file: !185, line: 267, column: 1)
!567 = distinct !DISubprogram(name: "as_inner", linkageName: "as_inner", scope: !185, file: !185, line: 266, scopeLine: 266, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!568 = !DILocation(line: 221, scope: !556)
!569 = !DILocation(line: 268, scope: !567, inlinedAt: !568)
!570 = !DILocalVariable(name: "inner", scope: !571, file: !6, line: 223, type: !91, align: 8)
!571 = distinct !DILexicalBlock(scope: !428, file: !6, line: 223, column: 4)
!572 = !DILocation(line: 223, scope: !571)
!573 = !DILocalVariable(name: "pointer", scope: !571, file: !6, line: 224, type: !574, align: 8)
!574 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "void**", baseType: !25, size: 64, align: 64, dwarfAddressSpace: 0)
!575 = !DILocation(line: 224, scope: !571)
!576 = !DILocation(line: 225, scope: !571)
!577 = !DILocalVariable(name: "deref", scope: !578, file: !6, line: 227, type: !261, align: 8)
!578 = distinct !DILexicalBlock(scope: !571, file: !6, line: 226, column: 4)
!579 = !DILocation(line: 227, scope: !578)
!580 = !DILocation(line: 258, scope: !581, inlinedAt: !579)
!581 = distinct !DISubprogram(name: "any_make", linkageName: "any_make", scope: !185, file: !185, line: 256, scopeLine: 256, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!582 = !DILocation(line: 228, scope: !578)
!583 = !DILocation(line: 229, scope: !578)
!584 = !DILocalVariable(name: "f", scope: !585, file: !6, line: 422, type: !111, align: 8)
!585 = distinct !DISubprogram(name: "@catch", linkageName: "@catch", scope: !185, file: !185, line: 420, scopeLine: 420, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42, retainedNodes: !95)
!586 = !DILocation(line: 422, scope: !585, inlinedAt: !587)
!587 = !DILocation(line: 230, scope: !578)
!588 = !DILocation(line: 423, scope: !585, inlinedAt: !587)
!589 = !DILocalVariable(name: "flags", scope: !571, file: !6, line: 232, type: !93, align: 4)
!590 = !DILocation(line: 232, scope: !571)
!591 = !DILocalVariable(name: "width", scope: !571, file: !6, line: 233, type: !93, align: 4)
!592 = !DILocation(line: 233, scope: !571)
!593 = !DILocation(line: 239, scope: !571)
!594 = !DILocation(line: 240, scope: !571)
!595 = !DILocation(line: 236, scope: !596)
!596 = distinct !DILexicalBlock(scope: !571, file: !6, line: 235, column: 4)
!597 = !DILocation(line: 237, scope: !596)
!598 = !DILocation(line: 236, scope: !599)
!599 = distinct !DILexicalBlock(scope: !571, file: !6, line: 235, column: 4)
!600 = !DILocation(line: 237, scope: !599)
!601 = !DILocation(line: 236, scope: !602)
!602 = distinct !DILexicalBlock(scope: !571, file: !6, line: 235, column: 4)
!603 = !DILocation(line: 237, scope: !602)
!604 = !DILocalVariable(name: "flags", scope: !605, file: !6, line: 243, type: !93, align: 4)
!605 = distinct !DILexicalBlock(scope: !428, file: !6, line: 243, column: 4)
!606 = !DILocation(line: 243, scope: !605)
!607 = !DILocalVariable(name: "width", scope: !605, file: !6, line: 244, type: !93, align: 4)
!608 = !DILocation(line: 244, scope: !605)
!609 = !DILocation(line: 250, scope: !605)
!610 = !DILocation(line: 251, scope: !605)
!611 = !DILocalVariable(name: "inner", scope: !605, file: !6, line: 252, type: !91, align: 8)
!612 = !DILocation(line: 252, scope: !605)
!613 = !DILocalVariable(name: "size", scope: !605, file: !6, line: 253, type: !178, align: 8)
!614 = !DILocation(line: 253, scope: !605)
!615 = !DILocalVariable(name: "alen", scope: !605, file: !6, line: 254, type: !178, align: 8)
!616 = !DILocation(line: 254, scope: !605)
!617 = !DILocalVariable(name: "ptr", scope: !605, file: !6, line: 256, type: !25, align: 8)
!618 = !DILocation(line: 256, scope: !605)
!619 = !DILocalVariable(name: "len", scope: !605, file: !6, line: 257, type: !178, align: 8)
!620 = !DILocation(line: 257, scope: !605)
!621 = !DILocation(line: 247, scope: !622)
!622 = distinct !DILexicalBlock(scope: !605, file: !6, line: 246, column: 4)
!623 = !DILocation(line: 248, scope: !622)
!624 = !DILocalVariable(name: "i", scope: !625, file: !6, line: 258, type: !178, align: 8)
!625 = distinct !DILexicalBlock(scope: !605, file: !6, line: 258, column: 4)
!626 = !DILocation(line: 258, scope: !625)
!627 = !DILocation(line: 260, scope: !628)
!628 = distinct !DILexicalBlock(scope: !625, file: !6, line: 259, column: 4)
!629 = !DILocation(line: 247, scope: !630)
!630 = distinct !DILexicalBlock(scope: !605, file: !6, line: 246, column: 4)
!631 = !DILocation(line: 248, scope: !630)
!632 = !DILocation(line: 261, scope: !628)
!633 = !DILocation(line: 258, scope: !634, inlinedAt: !632)
!634 = distinct !DISubprogram(name: "any_make", linkageName: "any_make", scope: !185, file: !185, line: 256, scopeLine: 256, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!635 = !DILocation(line: 247, scope: !636)
!636 = distinct !DILexicalBlock(scope: !605, file: !6, line: 246, column: 4)
!637 = !DILocation(line: 248, scope: !636)
!638 = !DILocation(line: 262, scope: !628)
!639 = !DILocation(line: 264, scope: !605)
!640 = !DILocation(line: 247, scope: !641)
!641 = distinct !DILexicalBlock(scope: !605, file: !6, line: 246, column: 4)
!642 = !DILocation(line: 248, scope: !641)
!643 = !DILocation(line: 265, scope: !605)
!644 = !DILocation(line: 247, scope: !645)
!645 = distinct !DILexicalBlock(scope: !605, file: !6, line: 246, column: 4)
!646 = !DILocation(line: 248, scope: !645)
!647 = !DILocalVariable(name: "flags", scope: !648, file: !6, line: 267, type: !93, align: 4)
!648 = distinct !DILexicalBlock(scope: !428, file: !6, line: 267, column: 4)
!649 = !DILocation(line: 267, scope: !648)
!650 = !DILocalVariable(name: "width", scope: !648, file: !6, line: 268, type: !93, align: 4)
!651 = !DILocation(line: 268, scope: !648)
!652 = !DILocation(line: 274, scope: !648)
!653 = !DILocation(line: 275, scope: !648)
!654 = !DILocalVariable(name: "inner", scope: !648, file: !6, line: 277, type: !91, align: 8)
!655 = !DILocation(line: 277, scope: !648)
!656 = !DILocalVariable(name: "size", scope: !648, file: !6, line: 278, type: !178, align: 8)
!657 = !DILocation(line: 278, scope: !648)
!658 = !DILocalVariable(name: "vlen", scope: !648, file: !6, line: 279, type: !178, align: 8)
!659 = !DILocation(line: 279, scope: !648)
!660 = !DILocalVariable(name: "ptr", scope: !648, file: !6, line: 281, type: !25, align: 8)
!661 = !DILocation(line: 281, scope: !648)
!662 = !DILocalVariable(name: "len", scope: !648, file: !6, line: 282, type: !178, align: 8)
!663 = !DILocation(line: 282, scope: !648)
!664 = !DILocation(line: 271, scope: !665)
!665 = distinct !DILexicalBlock(scope: !648, file: !6, line: 270, column: 4)
!666 = !DILocation(line: 272, scope: !665)
!667 = !DILocalVariable(name: "i", scope: !668, file: !6, line: 283, type: !178, align: 8)
!668 = distinct !DILexicalBlock(scope: !648, file: !6, line: 283, column: 4)
!669 = !DILocation(line: 283, scope: !668)
!670 = !DILocation(line: 285, scope: !671)
!671 = distinct !DILexicalBlock(scope: !668, file: !6, line: 284, column: 4)
!672 = !DILocation(line: 271, scope: !673)
!673 = distinct !DILexicalBlock(scope: !648, file: !6, line: 270, column: 4)
!674 = !DILocation(line: 272, scope: !673)
!675 = !DILocation(line: 286, scope: !671)
!676 = !DILocation(line: 258, scope: !677, inlinedAt: !675)
!677 = distinct !DISubprogram(name: "any_make", linkageName: "any_make", scope: !185, file: !185, line: 256, scopeLine: 256, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!678 = !DILocation(line: 271, scope: !679)
!679 = distinct !DILexicalBlock(scope: !648, file: !6, line: 270, column: 4)
!680 = !DILocation(line: 272, scope: !679)
!681 = !DILocation(line: 287, scope: !671)
!682 = !DILocation(line: 289, scope: !648)
!683 = !DILocation(line: 271, scope: !684)
!684 = distinct !DILexicalBlock(scope: !648, file: !6, line: 270, column: 4)
!685 = !DILocation(line: 272, scope: !684)
!686 = !DILocation(line: 290, scope: !648)
!687 = !DILocation(line: 271, scope: !688)
!688 = distinct !DILexicalBlock(scope: !648, file: !6, line: 270, column: 4)
!689 = !DILocation(line: 272, scope: !688)
!690 = !DILocalVariable(name: "inner", scope: !691, file: !6, line: 293, type: !91, align: 8)
!691 = distinct !DILexicalBlock(scope: !428, file: !6, line: 293, column: 4)
!692 = !DILocation(line: 293, scope: !691)
!693 = !DILocation(line: 294, scope: !691)
!694 = !DILocalVariable(name: "flags", scope: !691, file: !6, line: 295, type: !93, align: 4)
!695 = !DILocation(line: 295, scope: !691)
!696 = !DILocalVariable(name: "width", scope: !691, file: !6, line: 296, type: !93, align: 4)
!697 = !DILocation(line: 296, scope: !691)
!698 = !DILocation(line: 302, scope: !691)
!699 = !DILocation(line: 303, scope: !691)
!700 = !DILocalVariable(name: "size", scope: !691, file: !6, line: 304, type: !178, align: 8)
!701 = !DILocation(line: 304, scope: !691)
!702 = !DILocalVariable(name: "temp", scope: !691, file: !6, line: 306, type: !703, align: 8)
!703 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "String*", baseType: !231, size: 64, align: 64, dwarfAddressSpace: 0)
!704 = !DILocation(line: 306, scope: !691)
!705 = !DILocalVariable(name: "ptr", scope: !691, file: !6, line: 307, type: !25, align: 8)
!706 = !DILocation(line: 307, scope: !691)
!707 = !DILocalVariable(name: "slen", scope: !691, file: !6, line: 308, type: !178, align: 8)
!708 = !DILocation(line: 308, scope: !691)
!709 = !DILocalVariable(name: "len", scope: !691, file: !6, line: 309, type: !178, align: 8)
!710 = !DILocation(line: 309, scope: !691)
!711 = !DILocation(line: 299, scope: !712)
!712 = distinct !DILexicalBlock(scope: !691, file: !6, line: 298, column: 4)
!713 = !DILocation(line: 300, scope: !712)
!714 = !DILocalVariable(name: "i", scope: !715, file: !6, line: 310, type: !178, align: 8)
!715 = distinct !DILexicalBlock(scope: !691, file: !6, line: 310, column: 4)
!716 = !DILocation(line: 310, scope: !715)
!717 = !DILocation(line: 312, scope: !718)
!718 = distinct !DILexicalBlock(scope: !715, file: !6, line: 311, column: 4)
!719 = !DILocation(line: 299, scope: !720)
!720 = distinct !DILexicalBlock(scope: !691, file: !6, line: 298, column: 4)
!721 = !DILocation(line: 300, scope: !720)
!722 = !DILocation(line: 313, scope: !718)
!723 = !DILocation(line: 258, scope: !724, inlinedAt: !722)
!724 = distinct !DISubprogram(name: "any_make", linkageName: "any_make", scope: !185, file: !185, line: 256, scopeLine: 256, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!725 = !DILocation(line: 299, scope: !726)
!726 = distinct !DILexicalBlock(scope: !691, file: !6, line: 298, column: 4)
!727 = !DILocation(line: 300, scope: !726)
!728 = !DILocation(line: 314, scope: !718)
!729 = !DILocation(line: 316, scope: !691)
!730 = !DILocation(line: 299, scope: !731)
!731 = distinct !DILexicalBlock(scope: !691, file: !6, line: 298, column: 4)
!732 = !DILocation(line: 300, scope: !731)
!733 = !DILocation(line: 317, scope: !691)
!734 = !DILocation(line: 299, scope: !735)
!735 = distinct !DILexicalBlock(scope: !691, file: !6, line: 298, column: 4)
!736 = !DILocation(line: 300, scope: !735)
!737 = !DILocation(line: 232, scope: !738, inlinedAt: !739)
!738 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !185, file: !185, line: 229, scopeLine: 229, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!739 = !DILocation(line: 320, scope: !740)
!740 = distinct !DILexicalBlock(scope: !428, file: !6, line: 320, column: 4)
!741 = !DILocation(line: 323, scope: !368)
!742 = distinct !DISubprogram(name: "vprintf", linkageName: "std.io.Formatter.vprintf", scope: !6, file: !6, line: 358, type: !255, scopeLine: 358, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!743 = !DILocation(line: 359, scope: !742)
!744 = !DILocalVariable(name: "self", arg: 1, scope: !742, file: !6, line: 358, type: !233)
!745 = !DILocation(line: 358, scope: !742)
!746 = !DILocalVariable(name: "format", arg: 2, scope: !742, file: !6, line: 358, type: !231)
!747 = !DILocalVariable(name: "anys", arg: 3, scope: !742, file: !6, line: 358, type: !257)
!748 = !DILocation(line: 360, scope: !742)
!749 = !DILocation(line: 361, scope: !742)
!750 = !DILocation(line: 364, scope: !751)
!751 = distinct !DILexicalBlock(scope: !742, file: !6, line: 362, column: 2)
!752 = !DILocalVariable(name: "total_len", scope: !742, file: !6, line: 366, type: !178, align: 8)
!753 = !DILocation(line: 366, scope: !742)
!754 = !DILocalVariable(name: "format_len", scope: !742, file: !6, line: 367, type: !178, align: 8)
!755 = !DILocation(line: 367, scope: !742)
!756 = !DILocalVariable(name: "variant_index", scope: !742, file: !6, line: 368, type: !178, align: 8)
!757 = !DILocation(line: 368, scope: !742)
!758 = !DILocalVariable(name: "i", scope: !759, file: !6, line: 369, type: !178, align: 8)
!759 = distinct !DILexicalBlock(scope: !742, file: !6, line: 369, column: 2)
!760 = !DILocation(line: 369, scope: !759)
!761 = !DILocalVariable(name: "c", scope: !762, file: !6, line: 372, type: !11, align: 1)
!762 = distinct !DILexicalBlock(scope: !759, file: !6, line: 370, column: 2)
!763 = !DILocation(line: 372, scope: !762)
!764 = !DILocation(line: 373, scope: !762)
!765 = !DILocation(line: 376, scope: !766)
!766 = distinct !DILexicalBlock(scope: !762, file: !6, line: 374, column: 3)
!767 = !DILocation(line: 377, scope: !766)
!768 = !DILocation(line: 379, scope: !762)
!769 = !DILocation(line: 380, scope: !762)
!770 = !DILocation(line: 335, scope: !771, inlinedAt: !769)
!771 = distinct !DISubprogram(name: "@report_fault", linkageName: "@report_fault", scope: !6, file: !6, line: 333, scopeLine: 333, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!772 = !DILocation(line: 336, scope: !771, inlinedAt: !769)
!773 = !DILocation(line: 381, scope: !762)
!774 = !DILocation(line: 382, scope: !762)
!775 = !DILocation(line: 384, scope: !776)
!776 = distinct !DILexicalBlock(scope: !762, file: !6, line: 383, column: 3)
!777 = !DILocation(line: 385, scope: !776)
!778 = !DILocation(line: 388, scope: !762)
!779 = !DILocation(line: 389, scope: !762)
!780 = !DILocation(line: 393, scope: !781)
!781 = distinct !DILexicalBlock(scope: !782, file: !6, line: 393, column: 15)
!782 = distinct !DILexicalBlock(scope: !783, file: !6, line: 391, column: 4)
!783 = distinct !DILexicalBlock(scope: !784, file: !6, line: 390, column: 3)
!784 = distinct !DILexicalBlock(scope: !762, file: !6, line: 389, column: 3)
!785 = !DILocation(line: 394, scope: !786)
!786 = distinct !DILexicalBlock(scope: !782, file: !6, line: 394, column: 15)
!787 = !DILocation(line: 395, scope: !788)
!788 = distinct !DILexicalBlock(scope: !782, file: !6, line: 395, column: 15)
!789 = !DILocation(line: 396, scope: !790)
!790 = distinct !DILexicalBlock(scope: !782, file: !6, line: 396, column: 15)
!791 = !DILocation(line: 397, scope: !792)
!792 = distinct !DILexicalBlock(scope: !782, file: !6, line: 397, column: 15)
!793 = !DILocation(line: 398, scope: !794)
!794 = distinct !DILexicalBlock(scope: !782, file: !6, line: 398, column: 14)
!795 = !DILocation(line: 400, scope: !783)
!796 = !DILocation(line: 335, scope: !797, inlinedAt: !795)
!797 = distinct !DISubprogram(name: "@report_fault", linkageName: "@report_fault", scope: !6, file: !6, line: 333, scopeLine: 333, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!798 = !DILocation(line: 336, scope: !797, inlinedAt: !795)
!799 = !DILocation(line: 401, scope: !783)
!800 = !DILocalVariable(name: "w", scope: !762, file: !6, line: 404, type: !3, align: 4)
!801 = !DILocation(line: 404, scope: !762)
!802 = !DILocation(line: 405, scope: !762)
!803 = !DILocation(line: 335, scope: !804, inlinedAt: !802)
!804 = distinct !DISubprogram(name: "@report_fault", linkageName: "@report_fault", scope: !6, file: !6, line: 333, scopeLine: 333, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!805 = !DILocation(line: 336, scope: !804, inlinedAt: !802)
!806 = !DILocation(line: 406, scope: !762)
!807 = !DILocation(line: 407, scope: !762)
!808 = !DILocation(line: 409, scope: !809)
!809 = distinct !DILexicalBlock(scope: !762, file: !6, line: 408, column: 3)
!810 = !DILocation(line: 410, scope: !809)
!811 = !DILocation(line: 412, scope: !762)
!812 = !DILocation(line: 414, scope: !762)
!813 = !DILocation(line: 415, scope: !762)
!814 = !DILocation(line: 417, scope: !815)
!815 = distinct !DILexicalBlock(scope: !762, file: !6, line: 416, column: 3)
!816 = !DILocation(line: 418, scope: !815)
!817 = !DILocation(line: 335, scope: !818, inlinedAt: !816)
!818 = distinct !DISubprogram(name: "@report_fault", linkageName: "@report_fault", scope: !6, file: !6, line: 333, scopeLine: 333, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!819 = !DILocation(line: 336, scope: !818, inlinedAt: !816)
!820 = !DILocalVariable(name: "prec", scope: !815, file: !6, line: 419, type: !3, align: 4)
!821 = !DILocation(line: 419, scope: !815)
!822 = !DILocation(line: 420, scope: !815)
!823 = !DILocation(line: 335, scope: !824, inlinedAt: !822)
!824 = distinct !DISubprogram(name: "@report_fault", linkageName: "@report_fault", scope: !6, file: !6, line: 333, scopeLine: 333, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!825 = !DILocation(line: 336, scope: !824, inlinedAt: !822)
!826 = !DILocation(line: 421, scope: !815)
!827 = !DILocation(line: 422, scope: !815)
!828 = !DILocalVariable(name: "base", scope: !762, file: !6, line: 426, type: !93, align: 4)
!829 = !DILocation(line: 426, scope: !762)
!830 = !DILocation(line: 427, scope: !762)
!831 = !DILocation(line: 25, scope: !832, inlinedAt: !834)
!832 = distinct !DILexicalBlock(scope: !833, file: !9, line: 26, column: 1)
!833 = distinct !DISubprogram(name: "first_err", linkageName: "first_err", scope: !9, file: !9, line: 25, scopeLine: 25, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!834 = !DILocation(line: 429, scope: !835)
!835 = distinct !DILexicalBlock(scope: !762, file: !6, line: 428, column: 3)
!836 = !DILocation(line: 27, scope: !833, inlinedAt: !834)
!837 = !DILocation(line: 28, scope: !833, inlinedAt: !834)
!838 = !DILocation(line: 29, scope: !833, inlinedAt: !834)
!839 = !DILocation(line: 430, scope: !835)
!840 = !DILocation(line: 431, scope: !835)
!841 = !DILocalVariable(name: "current", scope: !762, file: !6, line: 433, type: !261, align: 8)
!842 = !DILocation(line: 433, scope: !762)
!843 = !DILocation(line: 437, scope: !844)
!844 = distinct !DILexicalBlock(scope: !845, file: !6, line: 437, column: 5)
!845 = distinct !DILexicalBlock(scope: !762, file: !6, line: 434, column: 3)
!846 = !DILocation(line: 438, scope: !844)
!847 = !DILocation(line: 440, scope: !848)
!848 = distinct !DILexicalBlock(scope: !845, file: !6, line: 440, column: 5)
!849 = !DILocation(line: 441, scope: !848)
!850 = !DILocation(line: 443, scope: !851)
!851 = distinct !DILexicalBlock(scope: !845, file: !6, line: 443, column: 5)
!852 = !DILocation(line: 445, scope: !853)
!853 = distinct !DILexicalBlock(scope: !845, file: !6, line: 445, column: 5)
!854 = !DILocation(line: 446, scope: !853)
!855 = !DILocation(line: 448, scope: !856)
!856 = distinct !DILexicalBlock(scope: !845, file: !6, line: 448, column: 5)
!857 = !DILocation(line: 450, scope: !858)
!858 = distinct !DILexicalBlock(scope: !845, file: !6, line: 450, column: 5)
!859 = !DILocation(line: 451, scope: !858)
!860 = !DILocation(line: 453, scope: !861)
!861 = distinct !DILexicalBlock(scope: !845, file: !6, line: 453, column: 5)
!862 = !DILocation(line: 455, scope: !863)
!863 = distinct !DILexicalBlock(scope: !845, file: !6, line: 455, column: 5)
!864 = !DILocation(line: 456, scope: !863)
!865 = !DILocation(line: 458, scope: !866)
!866 = distinct !DILexicalBlock(scope: !845, file: !6, line: 458, column: 5)
!867 = !DILocalVariable(name: "len", scope: !868, file: !6, line: 341, type: !179, align: 8)
!868 = distinct !DISubprogram(name: "@wrap_bad", linkageName: "@wrap_bad", scope: !6, file: !6, line: 339, scopeLine: 339, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42, retainedNodes: !95)
!869 = !DILocation(line: 341, scope: !868, inlinedAt: !865)
!870 = !DILocation(line: 458, scope: !868, inlinedAt: !865)
!871 = !DILocalVariable(name: "err", scope: !868, file: !6, line: 342, type: !111, align: 8)
!872 = !DILocation(line: 342, scope: !868, inlinedAt: !865)
!873 = !DILocation(line: 346, scope: !874, inlinedAt: !865)
!874 = distinct !DILexicalBlock(scope: !875, file: !6, line: 344, column: 3)
!875 = distinct !DILexicalBlock(scope: !868, file: !6, line: 343, column: 2)
!876 = !DILocation(line: 347, scope: !874, inlinedAt: !865)
!877 = !DILocation(line: 25, scope: !878, inlinedAt: !880)
!878 = distinct !DILexicalBlock(scope: !879, file: !9, line: 26, column: 1)
!879 = distinct !DISubprogram(name: "first_err", linkageName: "first_err", scope: !9, file: !9, line: 25, scopeLine: 25, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!880 = !DILocation(line: 348, scope: !881, inlinedAt: !865)
!881 = distinct !DILexicalBlock(scope: !874, file: !6, line: 348, column: 11)
!882 = !DILocation(line: 27, scope: !879, inlinedAt: !880)
!883 = !DILocation(line: 28, scope: !879, inlinedAt: !880)
!884 = !DILocation(line: 29, scope: !879, inlinedAt: !880)
!885 = !DILocation(line: 25, scope: !886, inlinedAt: !888)
!886 = distinct !DILexicalBlock(scope: !887, file: !9, line: 26, column: 1)
!887 = distinct !DISubprogram(name: "first_err", linkageName: "first_err", scope: !9, file: !9, line: 25, scopeLine: 25, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!888 = !DILocation(line: 350, scope: !889, inlinedAt: !865)
!889 = distinct !DILexicalBlock(scope: !874, file: !6, line: 350, column: 5)
!890 = !DILocation(line: 27, scope: !887, inlinedAt: !888)
!891 = !DILocation(line: 28, scope: !887, inlinedAt: !888)
!892 = !DILocation(line: 29, scope: !887, inlinedAt: !888)
!893 = !DILocation(line: 351, scope: !889, inlinedAt: !865)
!894 = !DILocation(line: 352, scope: !889, inlinedAt: !865)
!895 = !DILocation(line: 355, scope: !868, inlinedAt: !865)
!896 = !DILocation(line: 459, scope: !866)
!897 = !DILocation(line: 461, scope: !898)
!898 = distinct !DILexicalBlock(scope: !845, file: !6, line: 461, column: 5)
!899 = !DILocation(line: 462, scope: !898)
!900 = !DILocation(line: 464, scope: !901)
!901 = distinct !DILexicalBlock(scope: !845, file: !6, line: 464, column: 5)
!902 = !DILocalVariable(name: "len", scope: !903, file: !6, line: 341, type: !179, align: 8)
!903 = distinct !DISubprogram(name: "@wrap_bad", linkageName: "@wrap_bad", scope: !6, file: !6, line: 339, scopeLine: 339, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42, retainedNodes: !95)
!904 = !DILocation(line: 341, scope: !903, inlinedAt: !900)
!905 = !DILocation(line: 464, scope: !903, inlinedAt: !900)
!906 = !DILocalVariable(name: "err", scope: !903, file: !6, line: 342, type: !111, align: 8)
!907 = !DILocation(line: 342, scope: !903, inlinedAt: !900)
!908 = !DILocation(line: 346, scope: !909, inlinedAt: !900)
!909 = distinct !DILexicalBlock(scope: !910, file: !6, line: 344, column: 3)
!910 = distinct !DILexicalBlock(scope: !903, file: !6, line: 343, column: 2)
!911 = !DILocation(line: 347, scope: !909, inlinedAt: !900)
!912 = !DILocation(line: 25, scope: !913, inlinedAt: !915)
!913 = distinct !DILexicalBlock(scope: !914, file: !9, line: 26, column: 1)
!914 = distinct !DISubprogram(name: "first_err", linkageName: "first_err", scope: !9, file: !9, line: 25, scopeLine: 25, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!915 = !DILocation(line: 348, scope: !916, inlinedAt: !900)
!916 = distinct !DILexicalBlock(scope: !909, file: !6, line: 348, column: 11)
!917 = !DILocation(line: 27, scope: !914, inlinedAt: !915)
!918 = !DILocation(line: 28, scope: !914, inlinedAt: !915)
!919 = !DILocation(line: 29, scope: !914, inlinedAt: !915)
!920 = !DILocation(line: 25, scope: !921, inlinedAt: !923)
!921 = distinct !DILexicalBlock(scope: !922, file: !9, line: 26, column: 1)
!922 = distinct !DISubprogram(name: "first_err", linkageName: "first_err", scope: !9, file: !9, line: 25, scopeLine: 25, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!923 = !DILocation(line: 350, scope: !924, inlinedAt: !900)
!924 = distinct !DILexicalBlock(scope: !909, file: !6, line: 350, column: 5)
!925 = !DILocation(line: 27, scope: !922, inlinedAt: !923)
!926 = !DILocation(line: 28, scope: !922, inlinedAt: !923)
!927 = !DILocation(line: 29, scope: !922, inlinedAt: !923)
!928 = !DILocation(line: 351, scope: !924, inlinedAt: !900)
!929 = !DILocation(line: 352, scope: !924, inlinedAt: !900)
!930 = !DILocation(line: 355, scope: !903, inlinedAt: !900)
!931 = !DILocation(line: 465, scope: !901)
!932 = !DILocation(line: 467, scope: !933)
!933 = distinct !DILexicalBlock(scope: !845, file: !6, line: 467, column: 5)
!934 = !DILocation(line: 468, scope: !933)
!935 = !DILocation(line: 470, scope: !936)
!936 = distinct !DILexicalBlock(scope: !845, file: !6, line: 470, column: 5)
!937 = !DILocalVariable(name: "len", scope: !938, file: !6, line: 341, type: !179, align: 8)
!938 = distinct !DISubprogram(name: "@wrap_bad", linkageName: "@wrap_bad", scope: !6, file: !6, line: 339, scopeLine: 339, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42, retainedNodes: !95)
!939 = !DILocation(line: 341, scope: !938, inlinedAt: !935)
!940 = !DILocation(line: 470, scope: !938, inlinedAt: !935)
!941 = !DILocalVariable(name: "err", scope: !938, file: !6, line: 342, type: !111, align: 8)
!942 = !DILocation(line: 342, scope: !938, inlinedAt: !935)
!943 = !DILocation(line: 346, scope: !944, inlinedAt: !935)
!944 = distinct !DILexicalBlock(scope: !945, file: !6, line: 344, column: 3)
!945 = distinct !DILexicalBlock(scope: !938, file: !6, line: 343, column: 2)
!946 = !DILocation(line: 347, scope: !944, inlinedAt: !935)
!947 = !DILocation(line: 25, scope: !948, inlinedAt: !950)
!948 = distinct !DILexicalBlock(scope: !949, file: !9, line: 26, column: 1)
!949 = distinct !DISubprogram(name: "first_err", linkageName: "first_err", scope: !9, file: !9, line: 25, scopeLine: 25, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!950 = !DILocation(line: 348, scope: !951, inlinedAt: !935)
!951 = distinct !DILexicalBlock(scope: !944, file: !6, line: 348, column: 11)
!952 = !DILocation(line: 27, scope: !949, inlinedAt: !950)
!953 = !DILocation(line: 28, scope: !949, inlinedAt: !950)
!954 = !DILocation(line: 29, scope: !949, inlinedAt: !950)
!955 = !DILocation(line: 25, scope: !956, inlinedAt: !958)
!956 = distinct !DILexicalBlock(scope: !957, file: !9, line: 26, column: 1)
!957 = distinct !DISubprogram(name: "first_err", linkageName: "first_err", scope: !9, file: !9, line: 25, scopeLine: 25, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!958 = !DILocation(line: 350, scope: !959, inlinedAt: !935)
!959 = distinct !DILexicalBlock(scope: !944, file: !6, line: 350, column: 5)
!960 = !DILocation(line: 27, scope: !957, inlinedAt: !958)
!961 = !DILocation(line: 28, scope: !957, inlinedAt: !958)
!962 = !DILocation(line: 29, scope: !957, inlinedAt: !958)
!963 = !DILocation(line: 351, scope: !959, inlinedAt: !935)
!964 = !DILocation(line: 352, scope: !959, inlinedAt: !935)
!965 = !DILocation(line: 355, scope: !938, inlinedAt: !935)
!966 = !DILocation(line: 471, scope: !936)
!967 = !DILocation(line: 473, scope: !968)
!968 = distinct !DILexicalBlock(scope: !845, file: !6, line: 473, column: 5)
!969 = !DILocation(line: 474, scope: !968)
!970 = !DILocation(line: 476, scope: !971)
!971 = distinct !DILexicalBlock(scope: !845, file: !6, line: 476, column: 5)
!972 = !DILocalVariable(name: "len", scope: !973, file: !6, line: 341, type: !179, align: 8)
!973 = distinct !DISubprogram(name: "@wrap_bad", linkageName: "@wrap_bad", scope: !6, file: !6, line: 339, scopeLine: 339, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42, retainedNodes: !95)
!974 = !DILocation(line: 341, scope: !973, inlinedAt: !970)
!975 = !DILocation(line: 476, scope: !973, inlinedAt: !970)
!976 = !DILocalVariable(name: "err", scope: !973, file: !6, line: 342, type: !111, align: 8)
!977 = !DILocation(line: 342, scope: !973, inlinedAt: !970)
!978 = !DILocation(line: 346, scope: !979, inlinedAt: !970)
!979 = distinct !DILexicalBlock(scope: !980, file: !6, line: 344, column: 3)
!980 = distinct !DILexicalBlock(scope: !973, file: !6, line: 343, column: 2)
!981 = !DILocation(line: 347, scope: !979, inlinedAt: !970)
!982 = !DILocation(line: 25, scope: !983, inlinedAt: !985)
!983 = distinct !DILexicalBlock(scope: !984, file: !9, line: 26, column: 1)
!984 = distinct !DISubprogram(name: "first_err", linkageName: "first_err", scope: !9, file: !9, line: 25, scopeLine: 25, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!985 = !DILocation(line: 348, scope: !986, inlinedAt: !970)
!986 = distinct !DILexicalBlock(scope: !979, file: !6, line: 348, column: 11)
!987 = !DILocation(line: 27, scope: !984, inlinedAt: !985)
!988 = !DILocation(line: 28, scope: !984, inlinedAt: !985)
!989 = !DILocation(line: 29, scope: !984, inlinedAt: !985)
!990 = !DILocation(line: 25, scope: !991, inlinedAt: !993)
!991 = distinct !DILexicalBlock(scope: !992, file: !9, line: 26, column: 1)
!992 = distinct !DISubprogram(name: "first_err", linkageName: "first_err", scope: !9, file: !9, line: 25, scopeLine: 25, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!993 = !DILocation(line: 350, scope: !994, inlinedAt: !970)
!994 = distinct !DILexicalBlock(scope: !979, file: !6, line: 350, column: 5)
!995 = !DILocation(line: 27, scope: !992, inlinedAt: !993)
!996 = !DILocation(line: 28, scope: !992, inlinedAt: !993)
!997 = !DILocation(line: 29, scope: !992, inlinedAt: !993)
!998 = !DILocation(line: 351, scope: !994, inlinedAt: !970)
!999 = !DILocation(line: 352, scope: !994, inlinedAt: !970)
!1000 = !DILocation(line: 355, scope: !973, inlinedAt: !970)
!1001 = !DILocation(line: 477, scope: !971)
!1002 = !DILocation(line: 479, scope: !1003)
!1003 = distinct !DILexicalBlock(scope: !845, file: !6, line: 479, column: 5)
!1004 = !DILocation(line: 480, scope: !1003)
!1005 = !DILocation(line: 482, scope: !1006)
!1006 = distinct !DILexicalBlock(scope: !845, file: !6, line: 482, column: 5)
!1007 = !DILocation(line: 483, scope: !1006)
!1008 = !DILocalVariable(name: "out", scope: !1009, file: !6, line: 485, type: !174, align: 8)
!1009 = distinct !DILexicalBlock(scope: !845, file: !6, line: 485, column: 14)
!1010 = !DILocation(line: 485, scope: !1009)
!1011 = !DILocation(line: 486, scope: !1012)
!1012 = distinct !DILexicalBlock(scope: !1009, file: !6, line: 486, column: 5)
!1013 = !DILocation(line: 488, scope: !1012)
!1014 = !DILocation(line: 489, scope: !1012)
!1015 = !DILocation(line: 490, scope: !1016)
!1016 = distinct !DILexicalBlock(scope: !1012, file: !6, line: 490, column: 7)
!1017 = !DILocation(line: 492, scope: !1018)
!1018 = distinct !DILexicalBlock(scope: !1012, file: !6, line: 492, column: 7)
!1019 = !DILocation(line: 494, scope: !1020)
!1020 = distinct !DILexicalBlock(scope: !1018, file: !6, line: 493, column: 7)
!1021 = !DILocation(line: 495, scope: !1020)
!1022 = !DILocation(line: 497, scope: !1018)
!1023 = !DILocation(line: 499, scope: !1024)
!1024 = distinct !DILexicalBlock(scope: !1018, file: !6, line: 498, column: 7)
!1025 = !DILocation(line: 500, scope: !1024)
!1026 = !DILocation(line: 502, scope: !1018)
!1027 = !DILocation(line: 503, scope: !1018)
!1028 = !DILocation(line: 505, scope: !1009)
!1029 = !DILocalVariable(name: "len", scope: !1030, file: !6, line: 507, type: !178, align: 8)
!1030 = distinct !DILexicalBlock(scope: !1009, file: !6, line: 506, column: 5)
!1031 = !DILocation(line: 507, scope: !1030)
!1032 = !DILocation(line: 508, scope: !1030)
!1033 = !DILocation(line: 509, scope: !1030)
!1034 = !DILocation(line: 510, scope: !1030)
!1035 = !DILocation(line: 512, scope: !1009)
!1036 = !DILocation(line: 514, scope: !1037)
!1037 = distinct !DILexicalBlock(scope: !1009, file: !6, line: 513, column: 5)
!1038 = !DILocation(line: 516, scope: !1009)
!1039 = !DILocation(line: 517, scope: !1009)
!1040 = !DILocation(line: 519, scope: !1041)
!1041 = distinct !DILexicalBlock(scope: !845, file: !6, line: 519, column: 5)
!1042 = !DILocalVariable(name: "len", scope: !1043, file: !6, line: 521, type: !178, align: 8)
!1043 = distinct !DILexicalBlock(scope: !1041, file: !6, line: 520, column: 5)
!1044 = !DILocation(line: 521, scope: !1043)
!1045 = !DILocation(line: 522, scope: !1043)
!1046 = !DILocation(line: 523, scope: !1043)
!1047 = !DILocation(line: 524, scope: !1043)
!1048 = !DILocation(line: 526, scope: !1041)
!1049 = !DILocalVariable(name: "out_fn", scope: !1050, file: !6, line: 528, type: !238, align: 8)
!1050 = distinct !DILexicalBlock(scope: !1041, file: !6, line: 527, column: 5)
!1051 = !DILocation(line: 528, scope: !1050)
!1052 = !DILocation(line: 529, scope: !1050)
!1053 = !DILocalVariable(name: "len", scope: !1050, file: !6, line: 530, type: !178, align: 8)
!1054 = !DILocation(line: 530, scope: !1050)
!1055 = !DILocation(line: 531, scope: !1050)
!1056 = !DILocation(line: 532, scope: !1050)
!1057 = !DILocation(line: 534, scope: !1041)
!1058 = !DILocation(line: 535, scope: !1041)
!1059 = !DILocation(line: 537, scope: !1060)
!1060 = distinct !DILexicalBlock(scope: !845, file: !6, line: 537, column: 5)
!1061 = !DILocation(line: 538, scope: !1060)
!1062 = !DILocation(line: 539, scope: !1060)
!1063 = !DILocation(line: 25, scope: !1064, inlinedAt: !1066)
!1064 = distinct !DILexicalBlock(scope: !1065, file: !9, line: 26, column: 1)
!1065 = distinct !DISubprogram(name: "first_err", linkageName: "first_err", scope: !9, file: !9, line: 25, scopeLine: 25, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!1066 = !DILocation(line: 541, scope: !1067)
!1067 = distinct !DILexicalBlock(scope: !845, file: !6, line: 541, column: 5)
!1068 = !DILocation(line: 27, scope: !1065, inlinedAt: !1066)
!1069 = !DILocation(line: 28, scope: !1065, inlinedAt: !1066)
!1070 = !DILocation(line: 29, scope: !1065, inlinedAt: !1066)
!1071 = !DILocation(line: 542, scope: !1067)
!1072 = !DILocation(line: 543, scope: !1067)
!1073 = !DILocation(line: 545, scope: !762)
!1074 = !DILocation(line: 547, scope: !1075)
!1075 = distinct !DILexicalBlock(scope: !762, file: !6, line: 546, column: 3)
!1076 = !DILocation(line: 548, scope: !1075)
!1077 = !DILocation(line: 551, scope: !762)
!1078 = !DILocalVariable(name: "is_neg", scope: !762, file: !6, line: 553, type: !451, align: 1)
!1079 = !DILocation(line: 553, scope: !762)
!1080 = !DILocation(line: 554, scope: !762)
!1081 = !DILocalVariable(name: "len", scope: !1082, file: !6, line: 341, type: !179, align: 8)
!1082 = distinct !DISubprogram(name: "@wrap_bad", linkageName: "@wrap_bad", scope: !6, file: !6, line: 339, scopeLine: 339, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42, retainedNodes: !95)
!1083 = !DILocation(line: 341, scope: !1082, inlinedAt: !1080)
!1084 = !DILocation(line: 554, scope: !1082, inlinedAt: !1080)
!1085 = !DILocalVariable(name: "err", scope: !1082, file: !6, line: 342, type: !111, align: 8)
!1086 = !DILocation(line: 342, scope: !1082, inlinedAt: !1080)
!1087 = !DILocation(line: 346, scope: !1088, inlinedAt: !1080)
!1088 = distinct !DILexicalBlock(scope: !1089, file: !6, line: 344, column: 3)
!1089 = distinct !DILexicalBlock(scope: !1082, file: !6, line: 343, column: 2)
!1090 = !DILocation(line: 347, scope: !1088, inlinedAt: !1080)
!1091 = !DILocation(line: 25, scope: !1092, inlinedAt: !1094)
!1092 = distinct !DILexicalBlock(scope: !1093, file: !9, line: 26, column: 1)
!1093 = distinct !DISubprogram(name: "first_err", linkageName: "first_err", scope: !9, file: !9, line: 25, scopeLine: 25, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!1094 = !DILocation(line: 348, scope: !1095, inlinedAt: !1080)
!1095 = distinct !DILexicalBlock(scope: !1088, file: !6, line: 348, column: 11)
!1096 = !DILocation(line: 27, scope: !1093, inlinedAt: !1094)
!1097 = !DILocation(line: 28, scope: !1093, inlinedAt: !1094)
!1098 = !DILocation(line: 29, scope: !1093, inlinedAt: !1094)
!1099 = !DILocation(line: 25, scope: !1100, inlinedAt: !1102)
!1100 = distinct !DILexicalBlock(scope: !1101, file: !9, line: 26, column: 1)
!1101 = distinct !DISubprogram(name: "first_err", linkageName: "first_err", scope: !9, file: !9, line: 25, scopeLine: 25, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!1102 = !DILocation(line: 350, scope: !1103, inlinedAt: !1080)
!1103 = distinct !DILexicalBlock(scope: !1088, file: !6, line: 350, column: 5)
!1104 = !DILocation(line: 27, scope: !1101, inlinedAt: !1102)
!1105 = !DILocation(line: 28, scope: !1101, inlinedAt: !1102)
!1106 = !DILocation(line: 29, scope: !1101, inlinedAt: !1102)
!1107 = !DILocation(line: 351, scope: !1103, inlinedAt: !1080)
!1108 = !DILocation(line: 352, scope: !1103, inlinedAt: !1080)
!1109 = !DILocation(line: 355, scope: !1082, inlinedAt: !1080)
!1110 = !DILocation(line: 560, scope: !742)
!1111 = !DILocation(line: 561, scope: !742)
!1112 = distinct !DISubprogram(name: "print", linkageName: "std.io.Formatter.print", scope: !6, file: !6, line: 565, type: !1113, scopeLine: 565, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!1113 = !DISubroutineType(types: !1114)
!1114 = !{!111, !226, !233, !231}
!1115 = !DILocation(line: 566, scope: !1112)
!1116 = !DILocalVariable(name: "self", arg: 1, scope: !1112, file: !6, line: 565, type: !233)
!1117 = !DILocation(line: 565, scope: !1112)
!1118 = !DILocalVariable(name: "str", arg: 2, scope: !1112, file: !6, line: 565, type: !231)
!1119 = !DILocation(line: 567, scope: !1112)
!1120 = !DILocation(line: 570, scope: !1121)
!1121 = distinct !DILexicalBlock(scope: !1112, file: !6, line: 568, column: 2)
!1122 = !DILocation(line: 572, scope: !1123)
!1123 = distinct !DILexicalBlock(scope: !1112, file: !6, line: 572, column: 2)
!1124 = !DILocalVariable(name: ".temp", scope: !1123, file: !6, line: 572, type: !178, align: 8)
!1125 = !DILocalVariable(name: "c", scope: !1126, file: !6, line: 572, type: !11, align: 1)
!1126 = distinct !DILexicalBlock(scope: !1123, file: !6, line: 572, column: 20)
!1127 = !DILocation(line: 572, scope: !1126)
!1128 = !DILocation(line: 573, scope: !1112)
!1129 = distinct !DISubprogram(name: "out_null_fn", linkageName: "std.io.out_null_fn", scope: !6, file: !6, line: 329, type: !240, scopeLine: 329, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42, retainedNodes: !95)
!1130 = !DILocalVariable(name: "data", arg: 1, scope: !1129, file: !6, line: 329, type: !25)
!1131 = !DILocation(line: 329, scope: !1129)
!1132 = !DILocalVariable(name: "c", arg: 2, scope: !1129, file: !6, line: 329, type: !11)
!1133 = distinct !DISubprogram(name: "adjust", linkageName: "std.io.Formatter.adjust", scope: !9, file: !9, line: 32, type: !1134, scopeLine: 32, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42, retainedNodes: !95)
!1134 = !DISubroutineType(types: !1135)
!1135 = !{!111, !226, !233, !179}
!1136 = !DILocation(line: 33, scope: !1133)
!1137 = !DILocalVariable(name: "self", arg: 1, scope: !1133, file: !9, line: 32, type: !233)
!1138 = !DILocation(line: 32, scope: !1133)
!1139 = !DILocalVariable(name: "len", arg: 2, scope: !1133, file: !9, line: 32, type: !178)
!1140 = !DILocation(line: 34, scope: !1133)
!1141 = !DILocation(line: 35, scope: !1133)
!1142 = distinct !DISubprogram(name: "out_substr", linkageName: "std.io.Formatter.out_substr", scope: !9, file: !9, line: 159, type: !1113, scopeLine: 159, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42, retainedNodes: !95)
!1143 = !DILocation(line: 160, scope: !1142)
!1144 = !DILocalVariable(name: "self", arg: 1, scope: !1142, file: !9, line: 159, type: !233)
!1145 = !DILocation(line: 159, scope: !1142)
!1146 = !DILocalVariable(name: "str", arg: 2, scope: !1142, file: !9, line: 159, type: !231)
!1147 = !DILocalVariable(name: "l", scope: !1142, file: !9, line: 161, type: !178, align: 8)
!1148 = !DILocation(line: 161, scope: !1142)
!1149 = !DILocalVariable(name: "prec", scope: !1142, file: !9, line: 162, type: !93, align: 4)
!1150 = !DILocation(line: 162, scope: !1142)
!1151 = !DILocation(line: 163, scope: !1142)
!1152 = !DILocalVariable(name: "index", scope: !1142, file: !9, line: 164, type: !178, align: 8)
!1153 = !DILocation(line: 164, scope: !1142)
!1154 = !DILocalVariable(name: "chars", scope: !1142, file: !9, line: 165, type: !178, align: 8)
!1155 = !DILocation(line: 165, scope: !1142)
!1156 = !DILocalVariable(name: "ptr", scope: !1142, file: !9, line: 166, type: !113, align: 8)
!1157 = !DILocation(line: 166, scope: !1142)
!1158 = !DILocation(line: 167, scope: !1142)
!1159 = !DILocation(line: 167, scope: !1160)
!1160 = distinct !DILexicalBlock(scope: !1142, file: !9, line: 167, column: 2)
!1161 = !DILocalVariable(name: "c", scope: !1162, file: !9, line: 169, type: !11, align: 1)
!1162 = distinct !DILexicalBlock(scope: !1160, file: !9, line: 168, column: 2)
!1163 = !DILocation(line: 169, scope: !1162)
!1164 = !DILocation(line: 171, scope: !1162)
!1165 = !DILocation(line: 172, scope: !1162)
!1166 = !DILocation(line: 173, scope: !1162)
!1167 = !DILocation(line: 175, scope: !1142)
!1168 = distinct !DISubprogram(name: "pad", linkageName: "std.io.Formatter.pad", scope: !9, file: !9, line: 178, type: !1169, scopeLine: 178, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!1169 = !DISubroutineType(types: !1170)
!1170 = !{!111, !226, !233, !11, !112, !112}
!1171 = !DILocation(line: 179, scope: !1168)
!1172 = !DILocalVariable(name: "self", arg: 1, scope: !1168, file: !9, line: 178, type: !233)
!1173 = !DILocation(line: 178, scope: !1168)
!1174 = !DILocalVariable(name: "c", arg: 2, scope: !1168, file: !9, line: 178, type: !11)
!1175 = !DILocalVariable(name: "width", arg: 3, scope: !1168, file: !9, line: 178, type: !1176)
!1176 = !DIDerivedType(tag: DW_TAG_typedef, name: "isz", baseType: !112)
!1177 = !DILocalVariable(name: "len", arg: 4, scope: !1168, file: !9, line: 178, type: !1176)
!1178 = !DILocalVariable(name: "delta", scope: !1168, file: !9, line: 180, type: !1176, align: 8)
!1179 = !DILocation(line: 180, scope: !1168)
!1180 = !DILocalVariable(name: "i", scope: !1181, file: !9, line: 181, type: !1176, align: 8)
!1181 = distinct !DILexicalBlock(scope: !1168, file: !9, line: 181, column: 2)
!1182 = !DILocation(line: 181, scope: !1181)
!1183 = !DILocation(line: 47, scope: !1184, inlinedAt: !1186)
!1184 = distinct !DISubprogram(name: "greater", linkageName: "greater", scope: !1185, file: !1185, line: 39, scopeLine: 39, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!1185 = !DIFile(filename: "builtin_comparison.c3", directory: "C:/Compilers/C3/lib/std/core")
!1186 = !DILocation(line: 116, scope: !1187, inlinedAt: !1188)
!1187 = distinct !DISubprogram(name: "max", linkageName: "max", scope: !1185, file: !1185, line: 113, scopeLine: 113, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!1188 = !DILocation(line: 182, scope: !1168)
!1189 = distinct !DISubprogram(name: "out_chars", linkageName: "std.io.Formatter.out_chars", scope: !9, file: !9, line: 192, type: !1190, scopeLine: 192, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!1190 = !DISubroutineType(types: !1191)
!1191 = !{!111, !226, !233, !174}
!1192 = !DILocation(line: 193, scope: !1189)
!1193 = !DILocalVariable(name: "self", arg: 1, scope: !1189, file: !9, line: 192, type: !233)
!1194 = !DILocation(line: 192, scope: !1189)
!1195 = !DILocalVariable(name: "s", arg: 2, scope: !1189, file: !9, line: 192, type: !174)
!1196 = !DILocation(line: 194, scope: !1197)
!1197 = distinct !DILexicalBlock(scope: !1189, file: !9, line: 194, column: 2)
!1198 = !DILocalVariable(name: ".temp", scope: !1197, file: !9, line: 194, type: !178, align: 8)
!1199 = !DILocalVariable(name: "c", scope: !1200, file: !9, line: 194, type: !11, align: 1)
!1200 = distinct !DILexicalBlock(scope: !1197, file: !9, line: 194, column: 18)
!1201 = !DILocation(line: 194, scope: !1200)
!1202 = !DILocation(line: 195, scope: !1189)
!1203 = distinct !DISubprogram(name: "etoa", linkageName: "std.io.Formatter.etoa", scope: !9, file: !9, line: 206, type: !1204, scopeLine: 206, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!1204 = !DISubroutineType(types: !1205)
!1205 = !{!111, !226, !233, !1206}
!1206 = !DIBasicType(name: "double", size: 64, encoding: DW_ATE_float)
!1207 = !DILocation(line: 206, scope: !1203)
!1208 = !DILocalVariable(name: "self", arg: 1, scope: !1203, file: !9, line: 206, type: !233)
!1209 = !DILocalVariable(name: "y", arg: 2, scope: !1203, file: !9, line: 206, type: !1206)
!1210 = distinct !DISubprogram(name: "ftoa", linkageName: "std.io.Formatter.ftoa", scope: !9, file: !9, line: 207, type: !1204, scopeLine: 207, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!1211 = !DILocation(line: 207, scope: !1210)
!1212 = !DILocalVariable(name: "self", arg: 1, scope: !1210, file: !9, line: 207, type: !233)
!1213 = !DILocalVariable(name: "y", arg: 2, scope: !1210, file: !9, line: 207, type: !1206)
!1214 = distinct !DISubprogram(name: "gtoa", linkageName: "std.io.Formatter.gtoa", scope: !9, file: !9, line: 208, type: !1204, scopeLine: 208, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!1215 = !DILocation(line: 208, scope: !1214)
!1216 = !DILocalVariable(name: "self", arg: 1, scope: !1214, file: !9, line: 208, type: !233)
!1217 = !DILocalVariable(name: "y", arg: 2, scope: !1214, file: !9, line: 208, type: !1206)
!1218 = distinct !DISubprogram(name: "atoa", linkageName: "std.io.Formatter.atoa", scope: !9, file: !9, line: 209, type: !1204, scopeLine: 209, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!1219 = !DILocation(line: 209, scope: !1218)
!1220 = !DILocalVariable(name: "self", arg: 1, scope: !1218, file: !9, line: 209, type: !233)
!1221 = !DILocalVariable(name: "y", arg: 2, scope: !1218, file: !9, line: 209, type: !1206)
!1222 = distinct !DISubprogram(name: "floatformat", linkageName: "std.io.Formatter.floatformat", scope: !9, file: !9, line: 211, type: !1223, scopeLine: 211, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42, retainedNodes: !95)
!1223 = !DISubroutineType(types: !1224)
!1224 = !{!111, !226, !233, !44, !1206}
!1225 = !DILocation(line: 212, scope: !1222)
!1226 = !DILocalVariable(name: "self", arg: 1, scope: !1222, file: !9, line: 211, type: !233)
!1227 = !DILocation(line: 211, scope: !1222)
!1228 = !DILocalVariable(name: "formatting", arg: 2, scope: !1222, file: !9, line: 211, type: !44)
!1229 = !DILocalVariable(name: "y", arg: 3, scope: !1222, file: !9, line: 211, type: !1206)
!1230 = !DILocalVariable(name: "big", scope: !1222, file: !9, line: 216, type: !1231, align: 16)
!1231 = !DICompositeType(tag: DW_TAG_array_type, baseType: !93, size: 4032, align: 32, elements: !1232)
!1232 = !{!1233}
!1233 = !DISubrange(count: 126, lowerBound: 0)
!1234 = !DILocation(line: 216, scope: !1222)
!1235 = !DILocalVariable(name: "is_neg", scope: !1222, file: !9, line: 217, type: !451, align: 1)
!1236 = !DILocation(line: 217, scope: !1222)
!1237 = !DILocation(line: 281, scope: !1238, inlinedAt: !1239)
!1238 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !185, file: !185, line: 278, scopeLine: 278, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!1239 = !DILocation(line: 434, scope: !1240, inlinedAt: !1242)
!1240 = distinct !DISubprogram(name: "signbit", linkageName: "signbit", scope: !1241, file: !1241, line: 427, scopeLine: 427, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!1241 = !DIFile(filename: "math.c3", directory: "C:/Compilers/C3/lib/std/math")
!1242 = !DILocation(line: 218, scope: !1222)
!1243 = !DILocation(line: 220, scope: !1244)
!1244 = distinct !DILexicalBlock(scope: !1222, file: !9, line: 219, column: 2)
!1245 = !DILocation(line: 221, scope: !1244)
!1246 = !DILocalVariable(name: "pl", scope: !1222, file: !9, line: 223, type: !1176, align: 8)
!1247 = !DILocation(line: 223, scope: !1222)
!1248 = !DILocation(line: 281, scope: !1249, inlinedAt: !1250)
!1249 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !185, file: !185, line: 278, scopeLine: 278, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!1250 = !DILocation(line: 519, scope: !1251, inlinedAt: !1252)
!1251 = distinct !DISubprogram(name: "is_finite", linkageName: "is_finite", scope: !1241, file: !1241, line: 512, scopeLine: 512, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!1252 = !DILocation(line: 225, scope: !1222)
!1253 = !DILocalVariable(name: "len", scope: !1254, file: !9, line: 227, type: !178, align: 8)
!1254 = distinct !DILexicalBlock(scope: !1222, file: !9, line: 226, column: 2)
!1255 = !DILocation(line: 227, scope: !1254)
!1256 = !DILocation(line: 229, scope: !1254)
!1257 = !DILocalVariable(name: "s", scope: !1254, file: !9, line: 230, type: !231, align: 8)
!1258 = !DILocation(line: 230, scope: !1254)
!1259 = !DILocation(line: 281, scope: !1260, inlinedAt: !1261)
!1260 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !185, file: !185, line: 278, scopeLine: 278, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!1261 = !DILocation(line: 533, scope: !1262, inlinedAt: !1263)
!1262 = distinct !DISubprogram(name: "is_nan", linkageName: "is_nan", scope: !1241, file: !1241, line: 526, scopeLine: 526, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!1263 = !DILocation(line: 231, scope: !1254)
!1264 = !DILocation(line: 232, scope: !1254)
!1265 = !DILocation(line: 233, scope: !1254)
!1266 = !DILocation(line: 234, scope: !1254)
!1267 = !DILocation(line: 235, scope: !1254)
!1268 = !DILocalVariable(name: "e2", scope: !1222, file: !9, line: 238, type: !3, align: 4)
!1269 = !DILocation(line: 238, scope: !1222)
!1270 = !DILocation(line: 420, scope: !1271, inlinedAt: !1272)
!1271 = distinct !DISubprogram(name: "frexp", linkageName: "frexp", scope: !1241, file: !1241, line: 413, scopeLine: 413, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!1272 = !DILocation(line: 240, scope: !1222)
!1273 = !DILocation(line: 241, scope: !1222)
!1274 = !DILocalVariable(name: "ebuf0", scope: !1222, file: !9, line: 242, type: !1275, align: 1)
!1275 = !DICompositeType(tag: DW_TAG_array_type, baseType: !11, size: 96, align: 8, elements: !1276)
!1276 = !{!1277}
!1277 = !DISubrange(count: 12, lowerBound: 0)
!1278 = !DILocation(line: 242, scope: !1222)
!1279 = !DILocalVariable(name: "ebuf", scope: !1222, file: !9, line: 243, type: !113, align: 8)
!1280 = !DILocation(line: 243, scope: !1222)
!1281 = !DILocalVariable(name: "buf_array", scope: !1222, file: !9, line: 244, type: !1282, align: 16)
!1282 = !DICompositeType(tag: DW_TAG_array_type, baseType: !11, size: 176, align: 8, elements: !1283)
!1283 = !{!1284}
!1284 = !DISubrange(count: 22, lowerBound: 0)
!1285 = !DILocation(line: 244, scope: !1222)
!1286 = !DILocalVariable(name: "buf", scope: !1222, file: !9, line: 245, type: !113, align: 8)
!1287 = !DILocation(line: 245, scope: !1222)
!1288 = !DILocalVariable(name: "p", scope: !1222, file: !9, line: 246, type: !1176, align: 8)
!1289 = !DILocation(line: 246, scope: !1222)
!1290 = !DILocation(line: 247, scope: !1222)
!1291 = !DILocalVariable(name: "round", scope: !1292, file: !9, line: 249, type: !1206, align: 8)
!1292 = distinct !DILexicalBlock(scope: !1222, file: !9, line: 248, column: 2)
!1293 = !DILocation(line: 249, scope: !1292)
!1294 = !DILocation(line: 251, scope: !1292)
!1295 = !DILocation(line: 252, scope: !1292)
!1296 = !DILocalVariable(name: "re", scope: !1297, file: !9, line: 254, type: !3, align: 4)
!1297 = distinct !DILexicalBlock(scope: !1292, file: !9, line: 253, column: 3)
!1298 = !DILocation(line: 254, scope: !1297)
!1299 = !DILocation(line: 255, scope: !1297)
!1300 = !DILocation(line: 256, scope: !1297)
!1301 = !DILocation(line: 256, scope: !1302)
!1302 = distinct !DILexicalBlock(scope: !1297, file: !9, line: 256, column: 4)
!1303 = !DILocation(line: 257, scope: !1297)
!1304 = !DILocation(line: 259, scope: !1305)
!1305 = distinct !DILexicalBlock(scope: !1297, file: !9, line: 258, column: 4)
!1306 = !DILocation(line: 260, scope: !1305)
!1307 = !DILocation(line: 261, scope: !1305)
!1308 = !DILocation(line: 262, scope: !1305)
!1309 = !DILocation(line: 266, scope: !1310)
!1310 = distinct !DILexicalBlock(scope: !1297, file: !9, line: 265, column: 4)
!1311 = !DILocation(line: 267, scope: !1310)
!1312 = !DILocalVariable(name: "estr", scope: !1292, file: !9, line: 271, type: !113, align: 8)
!1313 = !DILocation(line: 271, scope: !1292)
!1314 = !DILocation(line: 272, scope: !1292)
!1315 = !DILocation(line: 273, scope: !1292)
!1316 = !DILocation(line: 274, scope: !1292)
!1317 = !DILocalVariable(name: "s", scope: !1292, file: !9, line: 275, type: !113, align: 8)
!1318 = !DILocation(line: 275, scope: !1292)
!1319 = !DILocalVariable(name: "xdigits", scope: !1292, file: !9, line: 276, type: !113, align: 8)
!1320 = !DILocation(line: 276, scope: !1292)
!1321 = !DILocation(line: 277, scope: !1292)
!1322 = !DILocation(line: 283, scope: !1323)
!1323 = distinct !DILexicalBlock(scope: !1292, file: !9, line: 277, column: 3)
!1324 = !DILocalVariable(name: "x", scope: !1325, file: !9, line: 279, type: !3, align: 4)
!1325 = distinct !DILexicalBlock(scope: !1323, file: !9, line: 278, column: 3)
!1326 = !DILocation(line: 279, scope: !1325)
!1327 = !DILocation(line: 280, scope: !1325)
!1328 = !DILocation(line: 281, scope: !1325)
!1329 = !DILocation(line: 282, scope: !1325)
!1330 = !DILocalVariable(name: "outlen", scope: !1292, file: !9, line: 284, type: !1176, align: 8)
!1331 = !DILocation(line: 284, scope: !1292)
!1332 = !DILocalVariable(name: "explen", scope: !1292, file: !9, line: 285, type: !1176, align: 8)
!1333 = !DILocation(line: 285, scope: !1292)
!1334 = !DILocation(line: 286, scope: !1292)
!1335 = !DILocalVariable(name: "len", scope: !1292, file: !9, line: 287, type: !178, align: 8)
!1336 = !DILocation(line: 287, scope: !1292)
!1337 = !DILocalVariable(name: "l", scope: !1292, file: !9, line: 288, type: !178, align: 8)
!1338 = !DILocation(line: 288, scope: !1292)
!1339 = !DILocation(line: 289, scope: !1292)
!1340 = !DILocation(line: 290, scope: !1292)
!1341 = !DILocation(line: 291, scope: !1292)
!1342 = !DILocation(line: 292, scope: !1292)
!1343 = !DILocation(line: 293, scope: !1292)
!1344 = !DILocation(line: 294, scope: !1292)
!1345 = !DILocation(line: 295, scope: !1292)
!1346 = !DILocation(line: 296, scope: !1292)
!1347 = !DILocation(line: 297, scope: !1292)
!1348 = !DILocation(line: 298, scope: !1292)
!1349 = !DILocation(line: 299, scope: !1292)
!1350 = !DILocation(line: 301, scope: !1222)
!1351 = !DILocation(line: 302, scope: !1222)
!1352 = !DILocation(line: 304, scope: !1353)
!1353 = distinct !DILexicalBlock(scope: !1222, file: !9, line: 303, column: 2)
!1354 = !DILocation(line: 305, scope: !1353)
!1355 = !DILocalVariable(name: "a", scope: !1222, file: !9, line: 308, type: !1356, align: 8)
!1356 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "uint*", baseType: !93, size: 64, align: 64, dwarfAddressSpace: 0)
!1357 = !DILocation(line: 308, scope: !1222)
!1358 = !DILocalVariable(name: "z", scope: !1222, file: !9, line: 308, type: !1356, align: 8)
!1359 = !DILocalVariable(name: "r", scope: !1222, file: !9, line: 308, type: !1356, align: 8)
!1360 = !DILocation(line: 309, scope: !1222)
!1361 = !DILocation(line: 311, scope: !1362)
!1362 = distinct !DILexicalBlock(scope: !1222, file: !9, line: 310, column: 2)
!1363 = !DILocation(line: 315, scope: !1364)
!1364 = distinct !DILexicalBlock(scope: !1222, file: !9, line: 314, column: 2)
!1365 = !DILocation(line: 318, scope: !1222)
!1366 = !DILocation(line: 322, scope: !1367)
!1367 = distinct !DILexicalBlock(scope: !1222, file: !9, line: 318, column: 2)
!1368 = !DILocalVariable(name: "v", scope: !1369, file: !9, line: 320, type: !93, align: 4)
!1369 = distinct !DILexicalBlock(scope: !1367, file: !9, line: 319, column: 2)
!1370 = !DILocation(line: 320, scope: !1369)
!1371 = !DILocation(line: 321, scope: !1369)
!1372 = !DILocation(line: 324, scope: !1222)
!1373 = !DILocation(line: 324, scope: !1374)
!1374 = distinct !DILexicalBlock(scope: !1222, file: !9, line: 324, column: 2)
!1375 = !DILocalVariable(name: "carry", scope: !1376, file: !9, line: 326, type: !93, align: 4)
!1376 = distinct !DILexicalBlock(scope: !1374, file: !9, line: 325, column: 2)
!1377 = !DILocation(line: 326, scope: !1376)
!1378 = !DILocalVariable(name: "sh", scope: !1376, file: !9, line: 327, type: !3, align: 4)
!1379 = !DILocation(line: 327, scope: !1376)
!1380 = !DILocation(line: 376, scope: !1381, inlinedAt: !1379)
!1381 = distinct !DISubprogram(name: "min", linkageName: "min", scope: !1241, file: !1241, line: 373, scopeLine: 373, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!1382 = !DILocalVariable(name: "d", scope: !1383, file: !9, line: 328, type: !1356, align: 8)
!1383 = distinct !DILexicalBlock(scope: !1376, file: !9, line: 328, column: 3)
!1384 = !DILocation(line: 328, scope: !1383)
!1385 = !DILocalVariable(name: "x", scope: !1386, file: !9, line: 330, type: !179, align: 8)
!1386 = distinct !DILexicalBlock(scope: !1383, file: !9, line: 329, column: 3)
!1387 = !DILocation(line: 330, scope: !1386)
!1388 = !DILocation(line: 331, scope: !1386)
!1389 = !DILocation(line: 332, scope: !1386)
!1390 = !DILocation(line: 334, scope: !1376)
!1391 = !DILocation(line: 335, scope: !1376)
!1392 = !DILocation(line: 335, scope: !1393)
!1393 = distinct !DILexicalBlock(scope: !1376, file: !9, line: 335, column: 3)
!1394 = !DILocation(line: 336, scope: !1376)
!1395 = !DILocation(line: 339, scope: !1222)
!1396 = !DILocation(line: 339, scope: !1397)
!1397 = distinct !DILexicalBlock(scope: !1222, file: !9, line: 339, column: 2)
!1398 = !DILocalVariable(name: "carry", scope: !1399, file: !9, line: 341, type: !93, align: 4)
!1399 = distinct !DILexicalBlock(scope: !1397, file: !9, line: 340, column: 2)
!1400 = !DILocation(line: 341, scope: !1399)
!1401 = !DILocalVariable(name: "b", scope: !1399, file: !9, line: 342, type: !1356, align: 8)
!1402 = !DILocation(line: 342, scope: !1399)
!1403 = !DILocalVariable(name: "sh", scope: !1399, file: !9, line: 343, type: !3, align: 4)
!1404 = !DILocation(line: 343, scope: !1399)
!1405 = !DILocation(line: 376, scope: !1406, inlinedAt: !1404)
!1406 = distinct !DISubprogram(name: "min", linkageName: "min", scope: !1241, file: !1241, line: 373, scopeLine: 373, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!1407 = !DILocalVariable(name: "need", scope: !1399, file: !9, line: 344, type: !3, align: 4)
!1408 = !DILocation(line: 344, scope: !1399)
!1409 = !DILocalVariable(name: "d", scope: !1410, file: !9, line: 345, type: !1356, align: 8)
!1410 = distinct !DILexicalBlock(scope: !1399, file: !9, line: 345, column: 3)
!1411 = !DILocation(line: 345, scope: !1410)
!1412 = !DILocalVariable(name: "rm", scope: !1413, file: !9, line: 348, type: !93, align: 4)
!1413 = distinct !DILexicalBlock(scope: !1410, file: !9, line: 346, column: 3)
!1414 = !DILocation(line: 348, scope: !1413)
!1415 = !DILocation(line: 349, scope: !1413)
!1416 = !DILocation(line: 350, scope: !1413)
!1417 = !DILocation(line: 352, scope: !1399)
!1418 = !DILocation(line: 353, scope: !1399)
!1419 = !DILocation(line: 355, scope: !1399)
!1420 = !DILocation(line: 356, scope: !1399)
!1421 = !DILocation(line: 357, scope: !1399)
!1422 = !DILocalVariable(name: "e", scope: !1222, file: !9, line: 360, type: !3, align: 4)
!1423 = !DILocation(line: 360, scope: !1222)
!1424 = !DILocation(line: 361, scope: !1222)
!1425 = !DILocalVariable(name: "i", scope: !1426, file: !9, line: 363, type: !3, align: 4)
!1426 = distinct !DILexicalBlock(scope: !1427, file: !9, line: 363, column: 3)
!1427 = distinct !DILexicalBlock(scope: !1222, file: !9, line: 362, column: 2)
!1428 = !DILocation(line: 363, scope: !1426)
!1429 = !DILocalVariable(name: "j", scope: !1222, file: !9, line: 367, type: !3, align: 4)
!1430 = !DILocation(line: 367, scope: !1222)
!1431 = !DILocation(line: 368, scope: !1222)
!1432 = !DILocalVariable(name: "x", scope: !1433, file: !9, line: 370, type: !93, align: 4)
!1433 = distinct !DILexicalBlock(scope: !1222, file: !9, line: 369, column: 2)
!1434 = !DILocation(line: 370, scope: !1433)
!1435 = !DILocalVariable(name: "d", scope: !1433, file: !9, line: 372, type: !1356, align: 8)
!1436 = !DILocation(line: 372, scope: !1433)
!1437 = !DILocation(line: 373, scope: !1433)
!1438 = !DILocation(line: 374, scope: !1433)
!1439 = !DILocalVariable(name: "i", scope: !1433, file: !9, line: 375, type: !3, align: 4)
!1440 = !DILocation(line: 375, scope: !1433)
!1441 = !DILocation(line: 376, scope: !1442)
!1442 = distinct !DILexicalBlock(scope: !1433, file: !9, line: 376, column: 3)
!1443 = !DILocation(line: 377, scope: !1433)
!1444 = !DILocation(line: 379, scope: !1433)
!1445 = !DILocalVariable(name: "round", scope: !1446, file: !9, line: 381, type: !1206, align: 8)
!1446 = distinct !DILexicalBlock(scope: !1433, file: !9, line: 380, column: 3)
!1447 = !DILocation(line: 381, scope: !1446)
!1448 = !DILocalVariable(name: "small", scope: !1446, file: !9, line: 382, type: !1206, align: 8)
!1449 = !DILocation(line: 382, scope: !1446)
!1450 = !DILocation(line: 383, scope: !1446)
!1451 = !DILocation(line: 385, scope: !1452)
!1452 = distinct !DILexicalBlock(scope: !1446, file: !9, line: 384, column: 4)
!1453 = !DILocation(line: 389, scope: !1454)
!1454 = distinct !DILexicalBlock(scope: !1446, file: !9, line: 387, column: 4)
!1455 = !DILocation(line: 390, scope: !1456)
!1456 = distinct !DILexicalBlock(scope: !1454, file: !9, line: 390, column: 6)
!1457 = !DILocation(line: 391, scope: !1454)
!1458 = !DILocation(line: 392, scope: !1459)
!1459 = distinct !DILexicalBlock(scope: !1454, file: !9, line: 392, column: 6)
!1460 = !DILocation(line: 394, scope: !1461)
!1461 = distinct !DILexicalBlock(scope: !1454, file: !9, line: 394, column: 6)
!1462 = !DILocation(line: 396, scope: !1446)
!1463 = !DILocation(line: 398, scope: !1464)
!1464 = distinct !DILexicalBlock(scope: !1446, file: !9, line: 397, column: 4)
!1465 = !DILocation(line: 399, scope: !1464)
!1466 = !DILocation(line: 401, scope: !1446)
!1467 = !DILocation(line: 403, scope: !1446)
!1468 = !DILocation(line: 405, scope: !1469)
!1469 = distinct !DILexicalBlock(scope: !1446, file: !9, line: 404, column: 4)
!1470 = !DILocation(line: 406, scope: !1469)
!1471 = !DILocation(line: 406, scope: !1472)
!1472 = distinct !DILexicalBlock(scope: !1469, file: !9, line: 406, column: 5)
!1473 = !DILocation(line: 408, scope: !1474)
!1474 = distinct !DILexicalBlock(scope: !1472, file: !9, line: 407, column: 5)
!1475 = !DILocation(line: 409, scope: !1474)
!1476 = !DILocation(line: 410, scope: !1474)
!1477 = !DILocation(line: 412, scope: !1478)
!1478 = distinct !DILexicalBlock(scope: !1469, file: !9, line: 412, column: 5)
!1479 = !DILocation(line: 415, scope: !1433)
!1480 = !DILocation(line: 417, scope: !1222)
!1481 = !DILocation(line: 417, scope: !1482)
!1482 = distinct !DILexicalBlock(scope: !1222, file: !9, line: 417, column: 2)
!1483 = !DILocation(line: 419, scope: !1222)
!1484 = !DILocation(line: 421, scope: !1485)
!1485 = distinct !DILexicalBlock(scope: !1222, file: !9, line: 420, column: 2)
!1486 = !DILocation(line: 422, scope: !1485)
!1487 = !DILocation(line: 424, scope: !1488)
!1488 = distinct !DILexicalBlock(scope: !1485, file: !9, line: 423, column: 3)
!1489 = !DILocation(line: 425, scope: !1488)
!1490 = !DILocation(line: 429, scope: !1491)
!1491 = distinct !DILexicalBlock(scope: !1485, file: !9, line: 428, column: 3)
!1492 = !DILocation(line: 430, scope: !1491)
!1493 = !DILocation(line: 432, scope: !1485)
!1494 = !DILocation(line: 435, scope: !1495)
!1495 = distinct !DILexicalBlock(scope: !1485, file: !9, line: 433, column: 3)
!1496 = !DILocalVariable(name: "i", scope: !1497, file: !9, line: 437, type: !3, align: 4)
!1497 = distinct !DILexicalBlock(scope: !1498, file: !9, line: 437, column: 5)
!1498 = distinct !DILexicalBlock(scope: !1495, file: !9, line: 436, column: 4)
!1499 = !DILocation(line: 437, scope: !1497)
!1500 = !DILocation(line: 441, scope: !1501)
!1501 = distinct !DILexicalBlock(scope: !1495, file: !9, line: 440, column: 4)
!1502 = !DILocation(line: 443, scope: !1495)
!1503 = !DILocation(line: 445, scope: !1504)
!1504 = distinct !DILexicalBlock(scope: !1495, file: !9, line: 444, column: 4)
!1505 = !DILocation(line: 359, scope: !1506, inlinedAt: !1503)
!1506 = distinct !DISubprogram(name: "max", linkageName: "max", scope: !1241, file: !1241, line: 356, scopeLine: 356, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!1507 = !DILocation(line: 376, scope: !1508, inlinedAt: !1503)
!1508 = distinct !DISubprogram(name: "min", linkageName: "min", scope: !1241, file: !1241, line: 373, scopeLine: 373, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!1509 = !DILocation(line: 449, scope: !1510)
!1510 = distinct !DILexicalBlock(scope: !1495, file: !9, line: 448, column: 4)
!1511 = !DILocation(line: 359, scope: !1512, inlinedAt: !1509)
!1512 = distinct !DISubprogram(name: "max", linkageName: "max", scope: !1241, file: !1241, line: 356, scopeLine: 356, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!1513 = !DILocation(line: 376, scope: !1514, inlinedAt: !1509)
!1514 = distinct !DISubprogram(name: "min", linkageName: "min", scope: !1241, file: !1241, line: 373, scopeLine: 373, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!1515 = !DILocation(line: 454, scope: !1222)
!1516 = !DILocalVariable(name: "l", scope: !1222, file: !9, line: 455, type: !3, align: 4)
!1517 = !DILocation(line: 455, scope: !1222)
!1518 = !DILocalVariable(name: "estr", scope: !1222, file: !9, line: 456, type: !113, align: 8)
!1519 = !DILocation(line: 456, scope: !1222)
!1520 = !DILocation(line: 457, scope: !1222)
!1521 = !DILocation(line: 459, scope: !1522)
!1522 = distinct !DILexicalBlock(scope: !1222, file: !9, line: 458, column: 2)
!1523 = !DILocation(line: 460, scope: !1522)
!1524 = !DILocation(line: 464, scope: !1525)
!1525 = distinct !DILexicalBlock(scope: !1222, file: !9, line: 463, column: 2)
!1526 = !DILocation(line: 465, scope: !1525)
!1527 = !DILocation(line: 465, scope: !1528)
!1528 = distinct !DILexicalBlock(scope: !1525, file: !9, line: 465, column: 3)
!1529 = !DILocation(line: 466, scope: !1525)
!1530 = !DILocation(line: 467, scope: !1525)
!1531 = !DILocation(line: 468, scope: !1525)
!1532 = !DILocation(line: 469, scope: !1525)
!1533 = !DILocation(line: 471, scope: !1222)
!1534 = !DILocalVariable(name: "len", scope: !1222, file: !9, line: 472, type: !178, align: 8)
!1535 = !DILocation(line: 472, scope: !1222)
!1536 = !DILocation(line: 473, scope: !1222)
!1537 = !DILocation(line: 474, scope: !1222)
!1538 = !DILocation(line: 475, scope: !1222)
!1539 = !DILocation(line: 476, scope: !1222)
!1540 = !DILocation(line: 478, scope: !1541)
!1541 = distinct !DILexicalBlock(scope: !1222, file: !9, line: 477, column: 2)
!1542 = !DILocalVariable(name: "d", scope: !1541, file: !9, line: 479, type: !1356, align: 8)
!1543 = !DILocation(line: 479, scope: !1541)
!1544 = !DILocation(line: 480, scope: !1541)
!1545 = !DILocation(line: 480, scope: !1546)
!1546 = distinct !DILexicalBlock(scope: !1541, file: !9, line: 480, column: 3)
!1547 = !DILocalVariable(name: "s", scope: !1548, file: !9, line: 482, type: !113, align: 8)
!1548 = distinct !DILexicalBlock(scope: !1546, file: !9, line: 481, column: 3)
!1549 = !DILocation(line: 482, scope: !1548)
!1550 = !DILocation(line: 485, scope: !1551)
!1551 = distinct !DILexicalBlock(scope: !1548, file: !9, line: 483, column: 4)
!1552 = !DILocation(line: 486, scope: !1553)
!1553 = distinct !DILexicalBlock(scope: !1551, file: !9, line: 486, column: 6)
!1554 = !DILocation(line: 486, scope: !1555)
!1555 = distinct !DILexicalBlock(scope: !1553, file: !9, line: 486, column: 6)
!1556 = !DILocation(line: 487, scope: !1551)
!1557 = !DILocation(line: 488, scope: !1558)
!1558 = distinct !DILexicalBlock(scope: !1551, file: !9, line: 488, column: 6)
!1559 = !DILocation(line: 490, scope: !1548)
!1560 = !DILocation(line: 492, scope: !1541)
!1561 = !DILocation(line: 493, scope: !1541)
!1562 = !DILocation(line: 493, scope: !1563)
!1563 = distinct !DILexicalBlock(scope: !1541, file: !9, line: 493, column: 3)
!1564 = !DILocalVariable(name: "s", scope: !1565, file: !9, line: 495, type: !113, align: 8)
!1565 = distinct !DILexicalBlock(scope: !1563, file: !9, line: 494, column: 3)
!1566 = !DILocation(line: 495, scope: !1565)
!1567 = !DILocation(line: 496, scope: !1565)
!1568 = !DILocation(line: 496, scope: !1569)
!1569 = distinct !DILexicalBlock(scope: !1565, file: !9, line: 496, column: 4)
!1570 = !DILocation(line: 497, scope: !1565)
!1571 = !DILocation(line: 376, scope: !1572, inlinedAt: !1570)
!1572 = distinct !DISubprogram(name: "min", linkageName: "min", scope: !1241, file: !1241, line: 373, scopeLine: 373, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!1573 = !DILocation(line: 499, scope: !1541)
!1574 = !DILocation(line: 503, scope: !1575)
!1575 = distinct !DILexicalBlock(scope: !1222, file: !9, line: 502, column: 2)
!1576 = !DILocalVariable(name: "d", scope: !1577, file: !9, line: 504, type: !1356, align: 8)
!1577 = distinct !DILexicalBlock(scope: !1575, file: !9, line: 504, column: 3)
!1578 = !DILocation(line: 504, scope: !1577)
!1579 = !DILocalVariable(name: "s", scope: !1580, file: !9, line: 506, type: !113, align: 8)
!1580 = distinct !DILexicalBlock(scope: !1577, file: !9, line: 505, column: 3)
!1581 = !DILocation(line: 506, scope: !1580)
!1582 = !DILocation(line: 507, scope: !1580)
!1583 = !DILocation(line: 508, scope: !1580)
!1584 = !DILocation(line: 510, scope: !1585)
!1585 = distinct !DILexicalBlock(scope: !1580, file: !9, line: 509, column: 4)
!1586 = !DILocation(line: 510, scope: !1587)
!1587 = distinct !DILexicalBlock(scope: !1585, file: !9, line: 510, column: 5)
!1588 = !DILocation(line: 514, scope: !1589)
!1589 = distinct !DILexicalBlock(scope: !1580, file: !9, line: 513, column: 4)
!1590 = !DILocation(line: 515, scope: !1589)
!1591 = !DILocation(line: 517, scope: !1580)
!1592 = !DILocation(line: 376, scope: !1593, inlinedAt: !1591)
!1593 = distinct !DISubprogram(name: "min", linkageName: "min", scope: !1241, file: !1241, line: 373, scopeLine: 373, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!1594 = !DILocation(line: 518, scope: !1580)
!1595 = !DILocation(line: 520, scope: !1575)
!1596 = !DILocation(line: 521, scope: !1575)
!1597 = !DILocation(line: 524, scope: !1222)
!1598 = !DILocation(line: 526, scope: !1222)
!1599 = distinct !DISubprogram(name: "ntoa", linkageName: "std.io.Formatter.ntoa", scope: !9, file: !9, line: 529, type: !1600, scopeLine: 529, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42, retainedNodes: !95)
!1600 = !DISubroutineType(types: !1601)
!1601 = !{!111, !226, !233, !523, !451, !93}
!1602 = !DILocation(line: 530, scope: !1599)
!1603 = !DILocalVariable(name: "self", arg: 1, scope: !1599, file: !9, line: 529, type: !233)
!1604 = !DILocation(line: 529, scope: !1599)
!1605 = !DILocalVariable(name: "value", arg: 2, scope: !1599, file: !9, line: 529, type: !523)
!1606 = !DILocalVariable(name: "negative", arg: 3, scope: !1599, file: !9, line: 529, type: !451)
!1607 = !DILocalVariable(name: "base", arg: 4, scope: !1599, file: !9, line: 529, type: !93)
!1608 = !DILocalVariable(name: "buf", scope: !1599, file: !9, line: 531, type: !1609, align: 16)
!1609 = !DICompositeType(tag: DW_TAG_array_type, baseType: !11, size: 2048, align: 8, elements: !1610)
!1610 = !{!1611}
!1611 = !DISubrange(count: 256, lowerBound: 0)
!1612 = !DILocation(line: 531, scope: !1599)
!1613 = !DILocalVariable(name: "len", scope: !1599, file: !9, line: 532, type: !178, align: 8)
!1614 = !DILocation(line: 532, scope: !1599)
!1615 = !DILocation(line: 535, scope: !1599)
!1616 = !DILocation(line: 538, scope: !1599)
!1617 = !DILocalVariable(name: "past_10", scope: !1618, file: !9, line: 540, type: !11, align: 1)
!1618 = distinct !DILexicalBlock(scope: !1599, file: !9, line: 539, column: 2)
!1619 = !DILocation(line: 540, scope: !1618)
!1620 = !DILocation(line: 541, scope: !1618)
!1621 = !DILocation(line: 548, scope: !1622)
!1622 = distinct !DILexicalBlock(scope: !1618, file: !9, line: 541, column: 3)
!1623 = !DILocation(line: 543, scope: !1624)
!1624 = distinct !DILexicalBlock(scope: !1622, file: !9, line: 542, column: 3)
!1625 = !DILocalVariable(name: "digit", scope: !1624, file: !9, line: 544, type: !11, align: 1)
!1626 = !DILocation(line: 544, scope: !1624)
!1627 = !DILocation(line: 545, scope: !1624)
!1628 = !DILocation(line: 546, scope: !1624)
!1629 = !DILocation(line: 550, scope: !1599)
!1630 = distinct !DISubprogram(name: "ntoa_format", linkageName: "std.io.Formatter.ntoa_format", scope: !9, file: !9, line: 553, type: !1631, scopeLine: 553, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42, retainedNodes: !95)
!1631 = !DISubroutineType(types: !1632)
!1632 = !{!111, !226, !233, !231, !179, !451, !93}
!1633 = !DILocation(line: 554, scope: !1630)
!1634 = !DILocalVariable(name: "self", arg: 1, scope: !1630, file: !9, line: 553, type: !233)
!1635 = !DILocation(line: 553, scope: !1630)
!1636 = !DILocalVariable(name: "buf", arg: 2, scope: !1630, file: !9, line: 553, type: !231)
!1637 = !DILocalVariable(name: "len", arg: 3, scope: !1630, file: !9, line: 553, type: !178)
!1638 = !DILocalVariable(name: "negative", arg: 4, scope: !1630, file: !9, line: 553, type: !451)
!1639 = !DILocalVariable(name: "base", arg: 5, scope: !1630, file: !9, line: 553, type: !93)
!1640 = !DILocation(line: 556, scope: !1630)
!1641 = !DILocation(line: 558, scope: !1642)
!1642 = distinct !DILexicalBlock(scope: !1630, file: !9, line: 557, column: 2)
!1643 = !DILocation(line: 559, scope: !1642)
!1644 = !DILocation(line: 559, scope: !1645)
!1645 = distinct !DILexicalBlock(scope: !1642, file: !9, line: 559, column: 3)
!1646 = !DILocation(line: 561, scope: !1647)
!1647 = distinct !DILexicalBlock(scope: !1645, file: !9, line: 560, column: 3)
!1648 = !DILocation(line: 562, scope: !1647)
!1649 = !DILocation(line: 564, scope: !1642)
!1650 = !DILocation(line: 564, scope: !1651)
!1651 = distinct !DILexicalBlock(scope: !1642, file: !9, line: 564, column: 3)
!1652 = !DILocation(line: 566, scope: !1653)
!1653 = distinct !DILexicalBlock(scope: !1651, file: !9, line: 565, column: 3)
!1654 = !DILocation(line: 567, scope: !1653)
!1655 = !DILocation(line: 572, scope: !1630)
!1656 = !DILocation(line: 574, scope: !1657)
!1657 = distinct !DILexicalBlock(scope: !1630, file: !9, line: 573, column: 2)
!1658 = !DILocation(line: 576, scope: !1659)
!1659 = distinct !DILexicalBlock(scope: !1657, file: !9, line: 575, column: 3)
!1660 = !DILocation(line: 577, scope: !1659)
!1661 = !DILocation(line: 579, scope: !1657)
!1662 = !DILocation(line: 581, scope: !1663)
!1663 = distinct !DILexicalBlock(scope: !1657, file: !9, line: 580, column: 3)
!1664 = !DILocation(line: 585, scope: !1665)
!1665 = distinct !DILexicalBlock(scope: !1666, file: !9, line: 585, column: 6)
!1666 = distinct !DILexicalBlock(scope: !1663, file: !9, line: 582, column: 4)
!1667 = !DILocation(line: 587, scope: !1668)
!1668 = distinct !DILexicalBlock(scope: !1666, file: !9, line: 587, column: 6)
!1669 = !DILocation(line: 589, scope: !1670)
!1670 = distinct !DILexicalBlock(scope: !1666, file: !9, line: 589, column: 6)
!1671 = !DILocation(line: 232, scope: !1672, inlinedAt: !1673)
!1672 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !185, file: !185, line: 229, scopeLine: 229, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!1673 = !DILocation(line: 591, scope: !1674)
!1674 = distinct !DILexicalBlock(scope: !1666, file: !9, line: 591, column: 6)
!1675 = !DILocation(line: 593, scope: !1663)
!1676 = !DILocation(line: 599, scope: !1677)
!1677 = distinct !DILexicalBlock(scope: !1630, file: !9, line: 597, column: 2)
!1678 = !DILocation(line: 600, scope: !1679)
!1679 = distinct !DILexicalBlock(scope: !1677, file: !9, line: 600, column: 4)
!1680 = !DILocation(line: 601, scope: !1679)
!1681 = !DILocation(line: 602, scope: !1677)
!1682 = !DILocation(line: 603, scope: !1683)
!1683 = distinct !DILexicalBlock(scope: !1677, file: !9, line: 603, column: 4)
!1684 = !DILocation(line: 604, scope: !1683)
!1685 = !DILocation(line: 605, scope: !1677)
!1686 = !DILocation(line: 606, scope: !1687)
!1687 = distinct !DILexicalBlock(scope: !1677, file: !9, line: 606, column: 4)
!1688 = !DILocation(line: 607, scope: !1687)
!1689 = !DILocation(line: 609, scope: !1630)
!1690 = !DILocation(line: 610, scope: !1630)
!1691 = distinct !DISubprogram(name: "ntoa_any", linkageName: "std.io.Formatter.ntoa_any", scope: !9, file: !9, line: 614, type: !1692, scopeLine: 614, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42, retainedNodes: !95)
!1692 = !DISubroutineType(types: !1693)
!1693 = !{!111, !226, !233, !261, !93}
!1694 = !DILocation(line: 615, scope: !1691)
!1695 = !DILocalVariable(name: "self", arg: 1, scope: !1691, file: !9, line: 614, type: !233)
!1696 = !DILocation(line: 614, scope: !1691)
!1697 = !DILocalVariable(name: "arg", arg: 2, scope: !1691, file: !9, line: 614, type: !261)
!1698 = !DILocalVariable(name: "base", arg: 3, scope: !1691, file: !9, line: 614, type: !93)
!1699 = !DILocalVariable(name: "is_neg", scope: !1691, file: !9, line: 616, type: !451, align: 1)
!1700 = !DILocation(line: 616, scope: !1691)
!1701 = !DILocation(line: 617, scope: !1691)
!1702 = distinct !DISubprogram(name: "out_char", linkageName: "std.io.Formatter.out_char", scope: !9, file: !9, line: 620, type: !369, scopeLine: 620, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42, retainedNodes: !95)
!1703 = !DILocation(line: 621, scope: !1702)
!1704 = !DILocalVariable(name: "self", arg: 1, scope: !1702, file: !9, line: 620, type: !233)
!1705 = !DILocation(line: 620, scope: !1702)
!1706 = !DILocalVariable(name: "arg", arg: 2, scope: !1702, file: !9, line: 620, type: !261)
!1707 = !DILocation(line: 622, scope: !1702)
!1708 = !DILocation(line: 624, scope: !1709)
!1709 = distinct !DILexicalBlock(scope: !1702, file: !9, line: 623, column: 2)
!1710 = !DILocalVariable(name: "len", scope: !1702, file: !9, line: 626, type: !178, align: 8)
!1711 = !DILocation(line: 626, scope: !1702)
!1712 = !DILocation(line: 628, scope: !1702)
!1713 = !DILocation(line: 630, scope: !1714)
!1714 = distinct !DILexicalBlock(scope: !1702, file: !9, line: 629, column: 5)
!1715 = !DILocalVariable(name: "c", scope: !1702, file: !9, line: 634, type: !1716, align: 4)
!1716 = !DIDerivedType(tag: DW_TAG_typedef, name: "Char32", scope: !9, file: !9, line: 28, baseType: !93, align: 4)
!1717 = !DILocation(line: 634, scope: !1702)
!1718 = !DILocation(line: 634, scope: !1719, inlinedAt: !1717)
!1719 = distinct !DILexicalBlock(scope: !1720, file: !434, line: 22, column: 1)
!1720 = distinct !DISubprogram(name: "any_to_int", linkageName: "any_to_int", scope: !434, file: !434, line: 21, scopeLine: 21, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42, retainedNodes: !95)
!1721 = !DILocation(line: 19, scope: !1719, inlinedAt: !1717)
!1722 = !DILocalVariable(name: "any_type", scope: !1720, file: !9, line: 23, type: !91, align: 8)
!1723 = !DILocation(line: 23, scope: !1720, inlinedAt: !1717)
!1724 = !DILocalVariable(name: "kind", scope: !1720, file: !9, line: 24, type: !56, align: 1)
!1725 = !DILocation(line: 24, scope: !1720, inlinedAt: !1717)
!1726 = !DILocalVariable(name: "is_mixed_signed", scope: !1720, file: !9, line: 25, type: !451, align: 1)
!1727 = !DILocation(line: 25, scope: !1720, inlinedAt: !1717)
!1728 = !DILocalVariable(name: "max", scope: !1720, file: !9, line: 26, type: !93, align: 4)
!1729 = !DILocation(line: 26, scope: !1720, inlinedAt: !1717)
!1730 = !DILocalVariable(name: "min", scope: !1720, file: !9, line: 27, type: !93, align: 4)
!1731 = !DILocation(line: 27, scope: !1720, inlinedAt: !1717)
!1732 = !DILocation(line: 30, scope: !1733, inlinedAt: !1717)
!1733 = distinct !DILexicalBlock(scope: !1720, file: !434, line: 28, column: 2)
!1734 = !DILocalVariable(name: "c", scope: !1735, file: !9, line: 31, type: !461, align: 1)
!1735 = distinct !DILexicalBlock(scope: !1733, file: !434, line: 31, column: 4)
!1736 = !DILocation(line: 31, scope: !1735, inlinedAt: !1717)
!1737 = !DILocation(line: 32, scope: !1735, inlinedAt: !1717)
!1738 = !DILocation(line: 33, scope: !1735, inlinedAt: !1717)
!1739 = !DILocation(line: 34, scope: !1733, inlinedAt: !1717)
!1740 = !DILocalVariable(name: "s", scope: !1741, file: !9, line: 35, type: !468, align: 2)
!1741 = distinct !DILexicalBlock(scope: !1733, file: !434, line: 35, column: 4)
!1742 = !DILocation(line: 35, scope: !1741, inlinedAt: !1717)
!1743 = !DILocation(line: 36, scope: !1741, inlinedAt: !1717)
!1744 = !DILocation(line: 37, scope: !1741, inlinedAt: !1717)
!1745 = !DILocation(line: 38, scope: !1741, inlinedAt: !1717)
!1746 = !DILocation(line: 39, scope: !1733, inlinedAt: !1717)
!1747 = !DILocalVariable(name: "i", scope: !1748, file: !9, line: 40, type: !3, align: 4)
!1748 = distinct !DILexicalBlock(scope: !1733, file: !434, line: 40, column: 4)
!1749 = !DILocation(line: 40, scope: !1748, inlinedAt: !1717)
!1750 = !DILocation(line: 41, scope: !1748, inlinedAt: !1717)
!1751 = !DILocation(line: 42, scope: !1748, inlinedAt: !1717)
!1752 = !DILocation(line: 43, scope: !1748, inlinedAt: !1717)
!1753 = !DILocation(line: 44, scope: !1733, inlinedAt: !1717)
!1754 = !DILocalVariable(name: "l", scope: !1755, file: !9, line: 45, type: !112, align: 8)
!1755 = distinct !DILexicalBlock(scope: !1733, file: !434, line: 45, column: 4)
!1756 = !DILocation(line: 45, scope: !1755, inlinedAt: !1717)
!1757 = !DILocation(line: 46, scope: !1755, inlinedAt: !1717)
!1758 = !DILocation(line: 47, scope: !1755, inlinedAt: !1717)
!1759 = !DILocation(line: 48, scope: !1755, inlinedAt: !1717)
!1760 = !DILocation(line: 49, scope: !1733, inlinedAt: !1717)
!1761 = !DILocalVariable(name: "i", scope: !1762, file: !9, line: 50, type: !490, align: 16)
!1762 = distinct !DILexicalBlock(scope: !1733, file: !434, line: 50, column: 4)
!1763 = !DILocation(line: 50, scope: !1762, inlinedAt: !1717)
!1764 = !DILocation(line: 51, scope: !1762, inlinedAt: !1717)
!1765 = !DILocation(line: 52, scope: !1762, inlinedAt: !1717)
!1766 = !DILocation(line: 53, scope: !1762, inlinedAt: !1717)
!1767 = !DILocation(line: 54, scope: !1733, inlinedAt: !1717)
!1768 = !DILocalVariable(name: "c", scope: !1769, file: !9, line: 55, type: !11, align: 1)
!1769 = distinct !DILexicalBlock(scope: !1733, file: !434, line: 55, column: 4)
!1770 = !DILocation(line: 55, scope: !1769, inlinedAt: !1717)
!1771 = !DILocation(line: 56, scope: !1769, inlinedAt: !1717)
!1772 = !DILocation(line: 57, scope: !1769, inlinedAt: !1717)
!1773 = !DILocation(line: 58, scope: !1733, inlinedAt: !1717)
!1774 = !DILocalVariable(name: "s", scope: !1775, file: !9, line: 59, type: !504, align: 2)
!1775 = distinct !DILexicalBlock(scope: !1733, file: !434, line: 59, column: 4)
!1776 = !DILocation(line: 59, scope: !1775, inlinedAt: !1717)
!1777 = !DILocation(line: 60, scope: !1775, inlinedAt: !1717)
!1778 = !DILocation(line: 61, scope: !1775, inlinedAt: !1717)
!1779 = !DILocation(line: 62, scope: !1733, inlinedAt: !1717)
!1780 = !DILocalVariable(name: "i", scope: !1781, file: !9, line: 63, type: !93, align: 4)
!1781 = distinct !DILexicalBlock(scope: !1733, file: !434, line: 63, column: 4)
!1782 = !DILocation(line: 63, scope: !1781, inlinedAt: !1717)
!1783 = !DILocation(line: 64, scope: !1781, inlinedAt: !1717)
!1784 = !DILocation(line: 65, scope: !1781, inlinedAt: !1717)
!1785 = !DILocation(line: 66, scope: !1733, inlinedAt: !1717)
!1786 = !DILocalVariable(name: "l", scope: !1787, file: !9, line: 67, type: !179, align: 8)
!1787 = distinct !DILexicalBlock(scope: !1733, file: !434, line: 67, column: 4)
!1788 = !DILocation(line: 67, scope: !1787, inlinedAt: !1717)
!1789 = !DILocation(line: 68, scope: !1787, inlinedAt: !1717)
!1790 = !DILocation(line: 69, scope: !1787, inlinedAt: !1717)
!1791 = !DILocation(line: 70, scope: !1733, inlinedAt: !1717)
!1792 = !DILocalVariable(name: "i", scope: !1793, file: !9, line: 71, type: !523, align: 16)
!1793 = distinct !DILexicalBlock(scope: !1733, file: !434, line: 71, column: 4)
!1794 = !DILocation(line: 71, scope: !1793, inlinedAt: !1717)
!1795 = !DILocation(line: 72, scope: !1793, inlinedAt: !1717)
!1796 = !DILocation(line: 73, scope: !1793, inlinedAt: !1717)
!1797 = !DILocation(line: 232, scope: !1798, inlinedAt: !1799)
!1798 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !185, file: !185, line: 229, scopeLine: 229, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!1799 = !DILocation(line: 75, scope: !1800, inlinedAt: !1717)
!1800 = distinct !DILexicalBlock(scope: !1733, file: !434, line: 75, column: 4)
!1801 = !DILocation(line: 637, scope: !1802)
!1802 = distinct !DILexicalBlock(scope: !1702, file: !9, line: 635, column: 2)
!1803 = !DILocation(line: 638, scope: !1804)
!1804 = distinct !DILexicalBlock(scope: !1802, file: !9, line: 638, column: 4)
!1805 = !DILocation(line: 639, scope: !1802)
!1806 = !DILocation(line: 640, scope: !1807)
!1807 = distinct !DILexicalBlock(scope: !1802, file: !9, line: 640, column: 4)
!1808 = !DILocation(line: 641, scope: !1807)
!1809 = !DILocation(line: 642, scope: !1802)
!1810 = !DILocation(line: 643, scope: !1811)
!1811 = distinct !DILexicalBlock(scope: !1802, file: !9, line: 643, column: 4)
!1812 = !DILocation(line: 644, scope: !1811)
!1813 = !DILocation(line: 645, scope: !1811)
!1814 = !DILocation(line: 647, scope: !1815)
!1815 = distinct !DILexicalBlock(scope: !1802, file: !9, line: 647, column: 4)
!1816 = !DILocation(line: 648, scope: !1815)
!1817 = !DILocation(line: 649, scope: !1815)
!1818 = !DILocation(line: 650, scope: !1815)
!1819 = !DILocation(line: 652, scope: !1702)
!1820 = !DILocation(line: 654, scope: !1821)
!1821 = distinct !DILexicalBlock(scope: !1702, file: !9, line: 653, column: 5)
!1822 = !DILocation(line: 656, scope: !1702)
!1823 = distinct !DISubprogram(name: "out_reverse", linkageName: "std.io.Formatter.out_reverse", scope: !9, file: !9, line: 660, type: !1190, scopeLine: 660, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42, retainedNodes: !95)
!1824 = !DILocation(line: 661, scope: !1823)
!1825 = !DILocalVariable(name: "self", arg: 1, scope: !1823, file: !9, line: 660, type: !233)
!1826 = !DILocation(line: 660, scope: !1823)
!1827 = !DILocalVariable(name: "buf", arg: 2, scope: !1823, file: !9, line: 660, type: !174)
!1828 = !DILocalVariable(name: "n", scope: !1823, file: !9, line: 662, type: !178, align: 8)
!1829 = !DILocation(line: 662, scope: !1823)
!1830 = !DILocalVariable(name: "len", scope: !1823, file: !9, line: 663, type: !178, align: 8)
!1831 = !DILocation(line: 663, scope: !1823)
!1832 = !DILocation(line: 665, scope: !1823)
!1833 = !DILocation(line: 667, scope: !1834)
!1834 = distinct !DILexicalBlock(scope: !1823, file: !9, line: 666, column: 2)
!1835 = !DILocation(line: 670, scope: !1823)
!1836 = !DILocation(line: 670, scope: !1837)
!1837 = distinct !DILexicalBlock(scope: !1823, file: !9, line: 670, column: 2)
!1838 = !DILocation(line: 673, scope: !1823)
!1839 = !DILocation(line: 674, scope: !1823)
!1840 = distinct !DISubprogram(name: "print_hex_chars", linkageName: "std.io.print_hex_chars", scope: !9, file: !9, line: 9, type: !1841, scopeLine: 9, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!1841 = !DISubroutineType(types: !1842)
!1842 = !{!111, !226, !233, !174, !451}
!1843 = !DILocalVariable(name: "f", arg: 1, scope: !1840, file: !9, line: 9, type: !233)
!1844 = !DILocation(line: 9, scope: !1840)
!1845 = !DILocalVariable(name: "out", arg: 2, scope: !1840, file: !9, line: 9, type: !174)
!1846 = !DILocalVariable(name: "uppercase", arg: 3, scope: !1840, file: !9, line: 9, type: !451)
!1847 = !DILocalVariable(name: "past_10", scope: !1840, file: !9, line: 11, type: !11, align: 1)
!1848 = !DILocation(line: 11, scope: !1840)
!1849 = !DILocalVariable(name: "len", scope: !1840, file: !9, line: 12, type: !178, align: 8)
!1850 = !DILocation(line: 12, scope: !1840)
!1851 = !DILocation(line: 13, scope: !1852)
!1852 = distinct !DILexicalBlock(scope: !1840, file: !9, line: 13, column: 2)
!1853 = !DILocalVariable(name: ".temp", scope: !1852, file: !9, line: 13, type: !178, align: 8)
!1854 = !DILocalVariable(name: "c", scope: !1855, file: !9, line: 13, type: !11, align: 1)
!1855 = distinct !DILexicalBlock(scope: !1852, file: !9, line: 14, column: 2)
!1856 = !DILocation(line: 13, scope: !1855)
!1857 = !DILocalVariable(name: "digit", scope: !1858, file: !9, line: 15, type: !11, align: 1)
!1858 = distinct !DILexicalBlock(scope: !1855, file: !9, line: 14, column: 2)
!1859 = !DILocation(line: 15, scope: !1858)
!1860 = !DILocation(line: 16, scope: !1858)
!1861 = !DILocation(line: 17, scope: !1858)
!1862 = !DILocation(line: 18, scope: !1858)
!1863 = !DILocation(line: 19, scope: !1858)
!1864 = !DILocation(line: 20, scope: !1858)
!1865 = !DILocation(line: 22, scope: !1840)
!1866 = distinct !DISubprogram(name: "int_from_any", linkageName: "std.io.int_from_any", scope: !9, file: !9, line: 38, type: !1867, scopeLine: 38, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42, retainedNodes: !95)
!1867 = !DISubroutineType(types: !1868)
!1868 = !{!111, !1869, !261, !1870}
!1869 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "uint128*", baseType: !523, size: 64, align: 64, dwarfAddressSpace: 0)
!1870 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "bool*", baseType: !451, size: 64, align: 64, dwarfAddressSpace: 0)
!1871 = !DILocalVariable(name: "arg", arg: 1, scope: !1866, file: !9, line: 38, type: !261)
!1872 = !DILocation(line: 38, scope: !1866)
!1873 = !DILocalVariable(name: "is_neg", arg: 2, scope: !1866, file: !9, line: 38, type: !1870)
!1874 = !DILocation(line: 40, scope: !1875)
!1875 = distinct !DILexicalBlock(scope: !1866, file: !9, line: 40, column: 2)
!1876 = !DILocation(line: 44, scope: !1877)
!1877 = distinct !DILexicalBlock(scope: !1875, file: !9, line: 44, column: 4)
!1878 = !DILocation(line: 45, scope: !1877)
!1879 = !DILocation(line: 266, scope: !1880, inlinedAt: !1882)
!1880 = distinct !DILexicalBlock(scope: !1881, file: !185, line: 267, column: 1)
!1881 = distinct !DISubprogram(name: "as_inner", linkageName: "as_inner", scope: !185, file: !185, line: 266, scopeLine: 266, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!1882 = !DILocation(line: 48, scope: !1883)
!1883 = distinct !DILexicalBlock(scope: !1875, file: !9, line: 48, column: 4)
!1884 = !DILocation(line: 268, scope: !1881, inlinedAt: !1882)
!1885 = !DILocation(line: 50, scope: !1886)
!1886 = distinct !DILexicalBlock(scope: !1875, file: !9, line: 50, column: 4)
!1887 = !DILocation(line: 52, scope: !1866)
!1888 = !DILocation(line: 53, scope: !1889)
!1889 = distinct !DILexicalBlock(scope: !1866, file: !9, line: 53, column: 2)
!1890 = !DILocation(line: 55, scope: !1889)
!1891 = !DILocation(line: 56, scope: !1892)
!1892 = distinct !DILexicalBlock(scope: !1889, file: !9, line: 56, column: 4)
!1893 = !DILocation(line: 57, scope: !1889)
!1894 = !DILocalVariable(name: "val", scope: !1895, file: !9, line: 58, type: !3, align: 4)
!1895 = distinct !DILexicalBlock(scope: !1889, file: !9, line: 58, column: 4)
!1896 = !DILocation(line: 58, scope: !1895)
!1897 = !DILocation(line: 59, scope: !1895)
!1898 = !DILocation(line: 60, scope: !1889)
!1899 = !DILocalVariable(name: "val", scope: !1900, file: !9, line: 61, type: !3, align: 4)
!1900 = distinct !DILexicalBlock(scope: !1889, file: !9, line: 61, column: 4)
!1901 = !DILocation(line: 61, scope: !1900)
!1902 = !DILocation(line: 62, scope: !1900)
!1903 = !DILocation(line: 63, scope: !1889)
!1904 = !DILocalVariable(name: "val", scope: !1905, file: !9, line: 64, type: !3, align: 4)
!1905 = distinct !DILexicalBlock(scope: !1889, file: !9, line: 64, column: 4)
!1906 = !DILocation(line: 64, scope: !1905)
!1907 = !DILocation(line: 65, scope: !1905)
!1908 = !DILocation(line: 66, scope: !1889)
!1909 = !DILocalVariable(name: "val", scope: !1910, file: !9, line: 67, type: !112, align: 8)
!1910 = distinct !DILexicalBlock(scope: !1889, file: !9, line: 67, column: 4)
!1911 = !DILocation(line: 67, scope: !1910)
!1912 = !DILocation(line: 68, scope: !1910)
!1913 = !DILocation(line: 69, scope: !1889)
!1914 = !DILocalVariable(name: "val", scope: !1915, file: !9, line: 70, type: !490, align: 16)
!1915 = distinct !DILexicalBlock(scope: !1889, file: !9, line: 70, column: 4)
!1916 = !DILocation(line: 70, scope: !1915)
!1917 = !DILocation(line: 71, scope: !1915)
!1918 = !DILocation(line: 72, scope: !1889)
!1919 = !DILocation(line: 73, scope: !1920)
!1920 = distinct !DILexicalBlock(scope: !1889, file: !9, line: 73, column: 4)
!1921 = !DILocation(line: 74, scope: !1889)
!1922 = !DILocation(line: 75, scope: !1923)
!1923 = distinct !DILexicalBlock(scope: !1889, file: !9, line: 75, column: 4)
!1924 = !DILocation(line: 76, scope: !1889)
!1925 = !DILocation(line: 77, scope: !1926)
!1926 = distinct !DILexicalBlock(scope: !1889, file: !9, line: 77, column: 4)
!1927 = !DILocation(line: 78, scope: !1889)
!1928 = !DILocation(line: 79, scope: !1929)
!1929 = distinct !DILexicalBlock(scope: !1889, file: !9, line: 79, column: 4)
!1930 = !DILocation(line: 80, scope: !1889)
!1931 = !DILocation(line: 81, scope: !1932)
!1932 = distinct !DILexicalBlock(scope: !1889, file: !9, line: 81, column: 4)
!1933 = !DILocation(line: 82, scope: !1889)
!1934 = !DILocalVariable(name: "f", scope: !1935, file: !9, line: 83, type: !1936, align: 4)
!1935 = distinct !DILexicalBlock(scope: !1889, file: !9, line: 83, column: 4)
!1936 = !DIBasicType(name: "float", size: 32, encoding: DW_ATE_float)
!1937 = !DILocation(line: 83, scope: !1935)
!1938 = !DILocation(line: 84, scope: !1935)
!1939 = !DILocation(line: 85, scope: !1889)
!1940 = !DILocalVariable(name: "d", scope: !1941, file: !9, line: 86, type: !1206, align: 8)
!1941 = distinct !DILexicalBlock(scope: !1889, file: !9, line: 86, column: 4)
!1942 = !DILocation(line: 86, scope: !1941)
!1943 = !DILocation(line: 87, scope: !1941)
!1944 = !DILocation(line: 89, scope: !1945)
!1945 = distinct !DILexicalBlock(scope: !1889, file: !9, line: 89, column: 4)
!1946 = distinct !DISubprogram(name: "float_from_any", linkageName: "std.io.float_from_any", scope: !9, file: !9, line: 93, type: !1947, scopeLine: 93, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42, retainedNodes: !95)
!1947 = !DISubroutineType(types: !1948)
!1948 = !{!111, !1949, !261}
!1949 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "FloatType*", baseType: !1950, size: 64, align: 64, dwarfAddressSpace: 0)
!1950 = !DIDerivedType(tag: DW_TAG_typedef, name: "FloatType", scope: !9, file: !9, line: 17, baseType: !1206, align: 8)
!1951 = !DILocalVariable(name: "arg", arg: 1, scope: !1946, file: !9, line: 93, type: !261)
!1952 = !DILocation(line: 93, scope: !1946)
!1953 = !DILocation(line: 98, scope: !1946)
!1954 = !DILocation(line: 266, scope: !1955, inlinedAt: !1957)
!1955 = distinct !DILexicalBlock(scope: !1956, file: !185, line: 267, column: 1)
!1956 = distinct !DISubprogram(name: "as_inner", linkageName: "as_inner", scope: !185, file: !185, line: 266, scopeLine: 266, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!1957 = !DILocation(line: 100, scope: !1958)
!1958 = distinct !DILexicalBlock(scope: !1946, file: !9, line: 99, column: 2)
!1959 = !DILocation(line: 268, scope: !1956, inlinedAt: !1957)
!1960 = !DILocation(line: 102, scope: !1961)
!1961 = distinct !DILexicalBlock(scope: !1946, file: !9, line: 102, column: 2)
!1962 = !DILocation(line: 104, scope: !1961)
!1963 = !DILocation(line: 105, scope: !1964)
!1964 = distinct !DILexicalBlock(scope: !1961, file: !9, line: 105, column: 4)
!1965 = !DILocation(line: 106, scope: !1961)
!1966 = !DILocation(line: 107, scope: !1967)
!1967 = distinct !DILexicalBlock(scope: !1961, file: !9, line: 107, column: 4)
!1968 = !DILocation(line: 108, scope: !1961)
!1969 = !DILocation(line: 109, scope: !1970)
!1970 = distinct !DILexicalBlock(scope: !1961, file: !9, line: 109, column: 4)
!1971 = !DILocation(line: 110, scope: !1961)
!1972 = !DILocation(line: 111, scope: !1973)
!1973 = distinct !DILexicalBlock(scope: !1961, file: !9, line: 111, column: 4)
!1974 = !DILocation(line: 112, scope: !1961)
!1975 = !DILocation(line: 113, scope: !1976)
!1976 = distinct !DILexicalBlock(scope: !1961, file: !9, line: 113, column: 4)
!1977 = !DILocation(line: 114, scope: !1961)
!1978 = !DILocation(line: 115, scope: !1979)
!1979 = distinct !DILexicalBlock(scope: !1961, file: !9, line: 115, column: 4)
!1980 = !DILocation(line: 116, scope: !1961)
!1981 = !DILocation(line: 117, scope: !1982)
!1982 = distinct !DILexicalBlock(scope: !1961, file: !9, line: 117, column: 4)
!1983 = !DILocation(line: 118, scope: !1961)
!1984 = !DILocation(line: 119, scope: !1985)
!1985 = distinct !DILexicalBlock(scope: !1961, file: !9, line: 119, column: 4)
!1986 = !DILocation(line: 120, scope: !1961)
!1987 = !DILocation(line: 121, scope: !1988)
!1988 = distinct !DILexicalBlock(scope: !1961, file: !9, line: 121, column: 4)
!1989 = !DILocation(line: 122, scope: !1961)
!1990 = !DILocation(line: 123, scope: !1991)
!1991 = distinct !DILexicalBlock(scope: !1961, file: !9, line: 123, column: 4)
!1992 = !DILocation(line: 124, scope: !1961)
!1993 = !DILocation(line: 125, scope: !1994)
!1994 = distinct !DILexicalBlock(scope: !1961, file: !9, line: 125, column: 4)
!1995 = !DILocation(line: 126, scope: !1961)
!1996 = !DILocation(line: 127, scope: !1997)
!1997 = distinct !DILexicalBlock(scope: !1961, file: !9, line: 127, column: 4)
!1998 = !DILocation(line: 128, scope: !1961)
!1999 = !DILocation(line: 129, scope: !2000)
!2000 = distinct !DILexicalBlock(scope: !1961, file: !9, line: 129, column: 4)
!2001 = !DILocation(line: 131, scope: !2002)
!2002 = distinct !DILexicalBlock(scope: !1961, file: !9, line: 131, column: 4)
!2003 = distinct !DISubprogram(name: "simple_atoi", linkageName: "std.io.simple_atoi", scope: !9, file: !9, line: 144, type: !2004, scopeLine: 144, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2004 = !DISubroutineType(types: !2005)
!2005 = !{!93, !113, !179, !2006}
!2006 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "ulong*", baseType: !179, size: 64, align: 64, dwarfAddressSpace: 0)
!2007 = !DILocalVariable(name: "buf", arg: 1, scope: !2003, file: !9, line: 144, type: !113)
!2008 = !DILocation(line: 144, scope: !2003)
!2009 = !DILocalVariable(name: "maxlen", arg: 2, scope: !2003, file: !9, line: 144, type: !178)
!2010 = !DILocalVariable(name: "len_ptr", arg: 3, scope: !2003, file: !9, line: 144, type: !226)
!2011 = !DILocalVariable(name: "i", scope: !2003, file: !9, line: 146, type: !93, align: 4)
!2012 = !DILocation(line: 146, scope: !2003)
!2013 = !DILocalVariable(name: "len", scope: !2003, file: !9, line: 147, type: !178, align: 8)
!2014 = !DILocation(line: 147, scope: !2003)
!2015 = !DILocation(line: 148, scope: !2003)
!2016 = !DILocation(line: 148, scope: !2017)
!2017 = distinct !DILexicalBlock(scope: !2003, file: !9, line: 148, column: 2)
!2018 = !DILocalVariable(name: "c", scope: !2019, file: !9, line: 150, type: !11, align: 1)
!2019 = distinct !DILexicalBlock(scope: !2017, file: !9, line: 149, column: 2)
!2020 = !DILocation(line: 150, scope: !2019)
!2021 = !DILocation(line: 9, scope: !2022, inlinedAt: !2024)
!2022 = distinct !DISubprogram(name: "@is_digit", linkageName: "@is_digit", scope: !2023, file: !2023, line: 9, scopeLine: 9, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!2023 = !DIFile(filename: "ascii.c3", directory: "C:/Compilers/C3/lib/std/core")
!2024 = !DILocation(line: 44, scope: !2025, inlinedAt: !2026)
!2025 = distinct !DISubprogram(name: "is_digit", linkageName: "is_digit", scope: !2023, file: !2023, line: 44, scopeLine: 44, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!2026 = !DILocation(line: 151, scope: !2019)
!2027 = !DILocation(line: 152, scope: !2019)
!2028 = !DILocation(line: 153, scope: !2019)
!2029 = !DILocation(line: 155, scope: !2003)
!2030 = !DILocation(line: 156, scope: !2003)
!2031 = distinct !DISubprogram(name: "fmt_u", linkageName: "std.io.fmt_u", scope: !9, file: !9, line: 185, type: !2032, scopeLine: 185, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2032 = !DISubroutineType(types: !2033)
!2033 = !{!113, !523, !113}
!2034 = !DILocalVariable(name: "x", arg: 1, scope: !2031, file: !9, line: 185, type: !523)
!2035 = !DILocation(line: 185, scope: !2031)
!2036 = !DILocalVariable(name: "s", arg: 2, scope: !2031, file: !9, line: 185, type: !113)
!2037 = !DILocation(line: 187, scope: !2031)
!2038 = !DILocation(line: 187, scope: !2039)
!2039 = distinct !DILexicalBlock(scope: !2031, file: !9, line: 187, column: 2)
!2040 = !DILocalVariable(name: "y", scope: !2041, file: !9, line: 188, type: !179, align: 8)
!2041 = distinct !DILexicalBlock(scope: !2031, file: !9, line: 188, column: 2)
!2042 = !DILocation(line: 188, scope: !2041)
!2043 = !DILocation(line: 189, scope: !2031)
!2044 = distinct !DISubprogram(name: "printf_parse_format_field", linkageName: "std.io.printf_parse_format_field", scope: !9, file: !9, line: 678, type: !2045, scopeLine: 678, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2045 = !DISubroutineType(types: !2046)
!2046 = !{!111, !2047, !260, !179, !2006, !113, !179, !2006}
!2047 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "int*", baseType: !3, size: 64, align: 64, dwarfAddressSpace: 0)
!2048 = !DILocalVariable(name: "args_ptr", arg: 1, scope: !2044, file: !9, line: 679, type: !260)
!2049 = !DILocation(line: 679, scope: !2044)
!2050 = !DILocalVariable(name: "args_len", arg: 2, scope: !2044, file: !9, line: 679, type: !178)
!2051 = !DILocalVariable(name: "args_index_ptr", arg: 3, scope: !2044, file: !9, line: 679, type: !226)
!2052 = !DILocalVariable(name: "format_ptr", arg: 4, scope: !2044, file: !9, line: 680, type: !113)
!2053 = !DILocation(line: 680, scope: !2044)
!2054 = !DILocalVariable(name: "format_len", arg: 5, scope: !2044, file: !9, line: 680, type: !178)
!2055 = !DILocalVariable(name: "index_ptr", arg: 6, scope: !2044, file: !9, line: 680, type: !226)
!2056 = !DILocalVariable(name: "c", scope: !2044, file: !9, line: 682, type: !11, align: 1)
!2057 = !DILocation(line: 682, scope: !2044)
!2058 = !DILocation(line: 9, scope: !2059, inlinedAt: !2060)
!2059 = distinct !DISubprogram(name: "@is_digit", linkageName: "@is_digit", scope: !2023, file: !2023, line: 9, scopeLine: 9, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!2060 = !DILocation(line: 44, scope: !2061, inlinedAt: !2062)
!2061 = distinct !DISubprogram(name: "is_digit", linkageName: "is_digit", scope: !2023, file: !2023, line: 44, scopeLine: 44, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!2062 = !DILocation(line: 683, scope: !2044)
!2063 = !DILocation(line: 684, scope: !2044)
!2064 = !DILocalVariable(name: "len", scope: !2044, file: !9, line: 685, type: !178, align: 8)
!2065 = !DILocation(line: 685, scope: !2044)
!2066 = !DILocation(line: 686, scope: !2044)
!2067 = !DILocation(line: 687, scope: !2044)
!2068 = !DILocalVariable(name: "val", scope: !2044, file: !9, line: 688, type: !261, align: 8)
!2069 = !DILocation(line: 688, scope: !2044)
!2070 = !DILocation(line: 689, scope: !2044)
!2071 = !DILocalVariable(name: "intval", scope: !2044, file: !9, line: 690, type: !93, align: 4)
!2072 = !DILocation(line: 690, scope: !2044)
!2073 = !DILocation(line: 690, scope: !2074, inlinedAt: !2072)
!2074 = distinct !DILexicalBlock(scope: !2075, file: !434, line: 22, column: 1)
!2075 = distinct !DISubprogram(name: "any_to_int", linkageName: "any_to_int", scope: !434, file: !434, line: 21, scopeLine: 21, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2076 = !DILocation(line: 19, scope: !2074, inlinedAt: !2072)
!2077 = !DILocalVariable(name: "any_type", scope: !2075, file: !9, line: 23, type: !91, align: 8)
!2078 = !DILocation(line: 23, scope: !2075, inlinedAt: !2072)
!2079 = !DILocalVariable(name: "kind", scope: !2075, file: !9, line: 24, type: !56, align: 1)
!2080 = !DILocation(line: 24, scope: !2075, inlinedAt: !2072)
!2081 = !DILocalVariable(name: "is_mixed_signed", scope: !2075, file: !9, line: 25, type: !451, align: 1)
!2082 = !DILocation(line: 25, scope: !2075, inlinedAt: !2072)
!2083 = !DILocalVariable(name: "max", scope: !2075, file: !9, line: 26, type: !3, align: 4)
!2084 = !DILocation(line: 26, scope: !2075, inlinedAt: !2072)
!2085 = !DILocalVariable(name: "min", scope: !2075, file: !9, line: 27, type: !3, align: 4)
!2086 = !DILocation(line: 27, scope: !2075, inlinedAt: !2072)
!2087 = !DILocation(line: 30, scope: !2088, inlinedAt: !2072)
!2088 = distinct !DILexicalBlock(scope: !2075, file: !434, line: 28, column: 2)
!2089 = !DILocalVariable(name: "c", scope: !2090, file: !9, line: 31, type: !461, align: 1)
!2090 = distinct !DILexicalBlock(scope: !2088, file: !434, line: 31, column: 4)
!2091 = !DILocation(line: 31, scope: !2090, inlinedAt: !2072)
!2092 = !DILocation(line: 32, scope: !2090, inlinedAt: !2072)
!2093 = !DILocation(line: 33, scope: !2090, inlinedAt: !2072)
!2094 = !DILocation(line: 34, scope: !2088, inlinedAt: !2072)
!2095 = !DILocalVariable(name: "s", scope: !2096, file: !9, line: 35, type: !468, align: 2)
!2096 = distinct !DILexicalBlock(scope: !2088, file: !434, line: 35, column: 4)
!2097 = !DILocation(line: 35, scope: !2096, inlinedAt: !2072)
!2098 = !DILocation(line: 36, scope: !2096, inlinedAt: !2072)
!2099 = !DILocation(line: 37, scope: !2096, inlinedAt: !2072)
!2100 = !DILocation(line: 38, scope: !2096, inlinedAt: !2072)
!2101 = !DILocation(line: 39, scope: !2088, inlinedAt: !2072)
!2102 = !DILocalVariable(name: "i", scope: !2103, file: !9, line: 40, type: !3, align: 4)
!2103 = distinct !DILexicalBlock(scope: !2088, file: !434, line: 40, column: 4)
!2104 = !DILocation(line: 40, scope: !2103, inlinedAt: !2072)
!2105 = !DILocation(line: 41, scope: !2103, inlinedAt: !2072)
!2106 = !DILocation(line: 42, scope: !2103, inlinedAt: !2072)
!2107 = !DILocation(line: 43, scope: !2103, inlinedAt: !2072)
!2108 = !DILocation(line: 44, scope: !2088, inlinedAt: !2072)
!2109 = !DILocalVariable(name: "l", scope: !2110, file: !9, line: 45, type: !112, align: 8)
!2110 = distinct !DILexicalBlock(scope: !2088, file: !434, line: 45, column: 4)
!2111 = !DILocation(line: 45, scope: !2110, inlinedAt: !2072)
!2112 = !DILocation(line: 46, scope: !2110, inlinedAt: !2072)
!2113 = !DILocation(line: 47, scope: !2110, inlinedAt: !2072)
!2114 = !DILocation(line: 48, scope: !2110, inlinedAt: !2072)
!2115 = !DILocation(line: 49, scope: !2088, inlinedAt: !2072)
!2116 = !DILocalVariable(name: "i", scope: !2117, file: !9, line: 50, type: !490, align: 16)
!2117 = distinct !DILexicalBlock(scope: !2088, file: !434, line: 50, column: 4)
!2118 = !DILocation(line: 50, scope: !2117, inlinedAt: !2072)
!2119 = !DILocation(line: 51, scope: !2117, inlinedAt: !2072)
!2120 = !DILocation(line: 52, scope: !2117, inlinedAt: !2072)
!2121 = !DILocation(line: 53, scope: !2117, inlinedAt: !2072)
!2122 = !DILocation(line: 54, scope: !2088, inlinedAt: !2072)
!2123 = !DILocalVariable(name: "c", scope: !2124, file: !9, line: 55, type: !11, align: 1)
!2124 = distinct !DILexicalBlock(scope: !2088, file: !434, line: 55, column: 4)
!2125 = !DILocation(line: 55, scope: !2124, inlinedAt: !2072)
!2126 = !DILocation(line: 56, scope: !2124, inlinedAt: !2072)
!2127 = !DILocation(line: 57, scope: !2124, inlinedAt: !2072)
!2128 = !DILocation(line: 58, scope: !2088, inlinedAt: !2072)
!2129 = !DILocalVariable(name: "s", scope: !2130, file: !9, line: 59, type: !504, align: 2)
!2130 = distinct !DILexicalBlock(scope: !2088, file: !434, line: 59, column: 4)
!2131 = !DILocation(line: 59, scope: !2130, inlinedAt: !2072)
!2132 = !DILocation(line: 60, scope: !2130, inlinedAt: !2072)
!2133 = !DILocation(line: 61, scope: !2130, inlinedAt: !2072)
!2134 = !DILocation(line: 62, scope: !2088, inlinedAt: !2072)
!2135 = !DILocalVariable(name: "i", scope: !2136, file: !9, line: 63, type: !93, align: 4)
!2136 = distinct !DILexicalBlock(scope: !2088, file: !434, line: 63, column: 4)
!2137 = !DILocation(line: 63, scope: !2136, inlinedAt: !2072)
!2138 = !DILocation(line: 64, scope: !2136, inlinedAt: !2072)
!2139 = !DILocation(line: 65, scope: !2136, inlinedAt: !2072)
!2140 = !DILocation(line: 66, scope: !2088, inlinedAt: !2072)
!2141 = !DILocalVariable(name: "l", scope: !2142, file: !9, line: 67, type: !179, align: 8)
!2142 = distinct !DILexicalBlock(scope: !2088, file: !434, line: 67, column: 4)
!2143 = !DILocation(line: 67, scope: !2142, inlinedAt: !2072)
!2144 = !DILocation(line: 68, scope: !2142, inlinedAt: !2072)
!2145 = !DILocation(line: 69, scope: !2142, inlinedAt: !2072)
!2146 = !DILocation(line: 70, scope: !2088, inlinedAt: !2072)
!2147 = !DILocalVariable(name: "i", scope: !2148, file: !9, line: 71, type: !523, align: 16)
!2148 = distinct !DILexicalBlock(scope: !2088, file: !434, line: 71, column: 4)
!2149 = !DILocation(line: 71, scope: !2148, inlinedAt: !2072)
!2150 = !DILocation(line: 72, scope: !2148, inlinedAt: !2072)
!2151 = !DILocation(line: 73, scope: !2148, inlinedAt: !2072)
!2152 = !DILocation(line: 232, scope: !2153, inlinedAt: !2154)
!2153 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !185, file: !185, line: 229, scopeLine: 229, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!2154 = !DILocation(line: 75, scope: !2155, inlinedAt: !2072)
!2155 = distinct !DILexicalBlock(scope: !2088, file: !434, line: 75, column: 4)
!2156 = !DILocation(line: 691, scope: !2044)
!2157 = distinct !DISubprogram(name: "fprintf", linkageName: "std.io.fprintf", scope: !20, file: !20, line: 185, type: !2158, scopeLine: 185, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2158 = !DISubroutineType(types: !2159)
!2159 = !{!111, !226, !142, !231, !257}
!2160 = !DILocalVariable(name: "out", arg: 1, scope: !2157, file: !20, line: 185, type: !142)
!2161 = !DILocation(line: 185, scope: !2157)
!2162 = !DILocalVariable(name: "format", arg: 2, scope: !2157, file: !20, line: 185, type: !231)
!2163 = !DILocalVariable(name: "args", arg: 3, scope: !2157, file: !20, line: 185, type: !257)
!2164 = !DILocalVariable(name: "formatter", scope: !2157, file: !20, line: 187, type: !234, align: 8)
!2165 = !DILocation(line: 187, scope: !2157)
!2166 = !DILocation(line: 188, scope: !2157)
!2167 = !DILocation(line: 189, scope: !2157)
!2168 = distinct !DISubprogram(name: "fprintfn", linkageName: "std.io.fprintfn", scope: !20, file: !20, line: 200, type: !2158, scopeLine: 200, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2169 = !DILocalVariable(name: "out", arg: 1, scope: !2168, file: !20, line: 200, type: !142)
!2170 = !DILocation(line: 200, scope: !2168)
!2171 = !DILocalVariable(name: "format", arg: 2, scope: !2168, file: !20, line: 200, type: !231)
!2172 = !DILocalVariable(name: "args", arg: 3, scope: !2168, file: !20, line: 200, type: !257)
!2173 = !DILocalVariable(name: "formatter", scope: !2168, file: !20, line: 202, type: !234, align: 8)
!2174 = !DILocation(line: 202, scope: !2168)
!2175 = !DILocation(line: 203, scope: !2168)
!2176 = !DILocalVariable(name: "len", scope: !2168, file: !20, line: 204, type: !178, align: 8)
!2177 = !DILocation(line: 204, scope: !2168)
!2178 = !DILocation(line: 205, scope: !2168)
!2179 = !DILocation(line: 206, scope: !2168)
!2180 = !DILocation(line: 207, scope: !2168)
!2181 = distinct !DISubprogram(name: "out_putstream_fn", linkageName: "std.io.out_putstream_fn", scope: !20, file: !20, line: 263, type: !240, scopeLine: 263, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2182 = !DILocalVariable(name: "data", arg: 1, scope: !2181, file: !20, line: 263, type: !25)
!2183 = !DILocation(line: 263, scope: !2181)
!2184 = !DILocalVariable(name: "c", arg: 2, scope: !2181, file: !20, line: 263, type: !11)
!2185 = !DILocalVariable(name: "stream", scope: !2181, file: !20, line: 265, type: !2186, align: 8)
!2186 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "OutStream*", baseType: !142, size: 64, align: 64, dwarfAddressSpace: 0)
!2187 = !DILocation(line: 265, scope: !2181)
!2188 = !DILocation(line: 266, scope: !2181)
!2189 = distinct !DISubprogram(name: "out_putchar_fn", linkageName: "std.io.out_putchar_fn", scope: !20, file: !20, line: 269, type: !240, scopeLine: 269, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2190 = !DILocalVariable(name: "data", arg: 1, scope: !2189, file: !20, line: 269, type: !25)
!2191 = !DILocation(line: 269, scope: !2189)
!2192 = !DILocalVariable(name: "c", arg: 2, scope: !2189, file: !20, line: 269, type: !11)
!2193 = !DILocation(line: 277, scope: !2189)
!2194 = distinct !DISubprogram(name: "printf", linkageName: "std.io.printf", scope: !20, file: !20, line: 295, type: !2195, scopeLine: 295, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2195 = !DISubroutineType(types: !2196)
!2196 = !{!111, !226, !231, !257}
!2197 = !DILocalVariable(name: "format", arg: 1, scope: !2194, file: !20, line: 295, type: !231)
!2198 = !DILocation(line: 295, scope: !2194)
!2199 = !DILocalVariable(name: "args", arg: 2, scope: !2194, file: !20, line: 295, type: !257)
!2200 = !DILocalVariable(name: "formatter", scope: !2194, file: !20, line: 297, type: !234, align: 8)
!2201 = !DILocation(line: 297, scope: !2194)
!2202 = !DILocation(line: 298, scope: !2194)
!2203 = !DILocation(line: 299, scope: !2194)
!2204 = distinct !DISubprogram(name: "printfn", linkageName: "std.io.printfn", scope: !20, file: !20, line: 309, type: !2195, scopeLine: 309, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2205 = !DILocalVariable(name: "format", arg: 1, scope: !2204, file: !20, line: 309, type: !231)
!2206 = !DILocation(line: 309, scope: !2204)
!2207 = !DILocalVariable(name: "args", arg: 2, scope: !2204, file: !20, line: 309, type: !257)
!2208 = !DILocalVariable(name: "formatter", scope: !2204, file: !20, line: 311, type: !234, align: 8)
!2209 = !DILocation(line: 311, scope: !2204)
!2210 = !DILocation(line: 312, scope: !2204)
!2211 = !DILocalVariable(name: "len", scope: !2204, file: !20, line: 313, type: !179, align: 8)
!2212 = !DILocation(line: 313, scope: !2204)
!2213 = !DILocation(line: 314, scope: !2204)
!2214 = !DILocation(line: 315, scope: !2204)
!2215 = !DILocation(line: 220, scope: !2204)
!2216 = !DILocation(line: 316, scope: !2204)
!2217 = distinct !DISubprogram(name: "eprintf", linkageName: "std.io.eprintf", scope: !20, file: !20, line: 326, type: !2195, scopeLine: 326, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2218 = !DILocalVariable(name: "format", arg: 1, scope: !2217, file: !20, line: 326, type: !231)
!2219 = !DILocation(line: 326, scope: !2217)
!2220 = !DILocalVariable(name: "args", arg: 2, scope: !2217, file: !20, line: 326, type: !257)
!2221 = !DILocalVariable(name: "formatter", scope: !2217, file: !20, line: 328, type: !234, align: 8)
!2222 = !DILocation(line: 328, scope: !2217)
!2223 = !DILocalVariable(name: "stream", scope: !2217, file: !20, line: 329, type: !142, align: 8)
!2224 = !DILocation(line: 329, scope: !2217)
!2225 = !DILocation(line: 330, scope: !2217)
!2226 = !DILocation(line: 331, scope: !2217)
!2227 = distinct !DISubprogram(name: "eprintfn", linkageName: "std.io.eprintfn", scope: !20, file: !20, line: 342, type: !2195, scopeLine: 342, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2228 = !DILocalVariable(name: "format", arg: 1, scope: !2227, file: !20, line: 342, type: !231)
!2229 = !DILocation(line: 342, scope: !2227)
!2230 = !DILocalVariable(name: "args", arg: 2, scope: !2227, file: !20, line: 342, type: !257)
!2231 = !DILocalVariable(name: "formatter", scope: !2227, file: !20, line: 344, type: !234, align: 8)
!2232 = !DILocation(line: 344, scope: !2227)
!2233 = !DILocalVariable(name: "stream", scope: !2227, file: !20, line: 345, type: !142, align: 8)
!2234 = !DILocation(line: 345, scope: !2227)
!2235 = !DILocation(line: 346, scope: !2227)
!2236 = !DILocalVariable(name: "len", scope: !2227, file: !20, line: 347, type: !179, align: 8)
!2237 = !DILocation(line: 347, scope: !2227)
!2238 = !DILocation(line: 348, scope: !2227)
!2239 = !DILocation(line: 88, scope: !2227)
!2240 = !DILocation(line: 349, scope: !2227)
!2241 = !DILocation(line: 220, scope: !2227)
!2242 = !DILocation(line: 350, scope: !2227)
!2243 = distinct !DISubprogram(name: "bprintf", linkageName: "std.io.bprintf", scope: !20, file: !20, line: 361, type: !2244, scopeLine: 361, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2244 = !DISubroutineType(types: !2245)
!2245 = !{!111, !2246, !174, !231, !257}
!2246 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "char[]*", baseType: !174, size: 64, align: 64, dwarfAddressSpace: 0)
!2247 = !DILocalVariable(name: "buffer", arg: 1, scope: !2243, file: !20, line: 361, type: !174)
!2248 = !DILocation(line: 361, scope: !2243)
!2249 = !DILocalVariable(name: "format", arg: 2, scope: !2243, file: !20, line: 361, type: !231)
!2250 = !DILocalVariable(name: "args", arg: 3, scope: !2243, file: !20, line: 361, type: !257)
!2251 = !DILocalVariable(name: "formatter", scope: !2243, file: !20, line: 363, type: !234, align: 8)
!2252 = !DILocation(line: 363, scope: !2243)
!2253 = !DILocalVariable(name: "data", scope: !2243, file: !20, line: 364, type: !2254, align: 8)
!2254 = !DICompositeType(tag: DW_TAG_structure_type, name: "BufferData", scope: !20, file: !20, line: 379, size: 192, align: 64, elements: !2255, identifier: "std.io.BufferData")
!2255 = !{!2256, !2257}
!2256 = !DIDerivedType(tag: DW_TAG_member, name: "buffer", scope: !2254, file: !20, line: 381, baseType: !174, size: 128, align: 64)
!2257 = !DIDerivedType(tag: DW_TAG_member, name: "written", scope: !2254, file: !20, line: 382, baseType: !178, size: 64, align: 64, offset: 128)
!2258 = !DILocation(line: 364, scope: !2243)
!2259 = !DILocation(line: 365, scope: !2243)
!2260 = !DILocalVariable(name: "size", scope: !2243, file: !20, line: 366, type: !178, align: 8)
!2261 = !DILocation(line: 366, scope: !2243)
!2262 = !DILocation(line: 367, scope: !2243)
!2263 = distinct !DISubprogram(name: "out_buffer_fn", linkageName: "std.io.out_buffer_fn", scope: !20, file: !20, line: 371, type: !240, scopeLine: 371, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2264 = !DILocalVariable(name: "data", arg: 1, scope: !2263, file: !20, line: 371, type: !25)
!2265 = !DILocation(line: 371, scope: !2263)
!2266 = !DILocalVariable(name: "c", arg: 2, scope: !2263, file: !20, line: 371, type: !11)
!2267 = !DILocalVariable(name: "buffer_data", scope: !2263, file: !20, line: 373, type: !2268, align: 8)
!2268 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "BufferData*", baseType: !2254, size: 64, align: 64, dwarfAddressSpace: 0)
!2269 = !DILocation(line: 373, scope: !2263)
!2270 = !DILocation(line: 374, scope: !2263)
!2271 = !DILocation(line: 375, scope: !2263)
!2272 = distinct !DISubprogram(name: "putchar", linkageName: "std.io.putchar", scope: !20, file: !20, line: 392, type: !2273, scopeLine: 392, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2273 = !DISubroutineType(types: !2274)
!2274 = !{null, !11}
!2275 = !DILocalVariable(name: "c", arg: 1, scope: !2272, file: !20, line: 392, type: !11)
!2276 = !DILocation(line: 392, scope: !2272)
!2277 = !DILocation(line: 394, scope: !2272)
!2278 = distinct !DISubprogram(name: "stdout", linkageName: "std.io.stdout", scope: !20, file: !20, line: 402, type: !2279, scopeLine: 402, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42)
!2279 = !DISubroutineType(types: !2280)
!2280 = !{!2281}
!2281 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "File*", baseType: !21, size: 64, align: 64, dwarfAddressSpace: 0)
!2282 = !DILocation(line: 405, scope: !2278)
!2283 = !DILocation(line: 253, scope: !2284, inlinedAt: !2282)
!2284 = distinct !DISubprogram(name: "stdout", linkageName: "stdout", scope: !2285, file: !2285, line: 253, scopeLine: 253, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!2285 = !DIFile(filename: "libc.c3", directory: "C:/Compilers/C3/lib/std/libc")
!2286 = !DILocation(line: 406, scope: !2278)
!2287 = distinct !DISubprogram(name: "stderr", linkageName: "std.io.stderr", scope: !20, file: !20, line: 414, type: !2279, scopeLine: 414, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42)
!2288 = !DILocation(line: 417, scope: !2287)
!2289 = !DILocation(line: 254, scope: !2290, inlinedAt: !2288)
!2290 = distinct !DISubprogram(name: "stderr", linkageName: "stderr", scope: !2285, file: !2285, line: 254, scopeLine: 254, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!2291 = !DILocation(line: 418, scope: !2287)
!2292 = distinct !DISubprogram(name: "stdin", linkageName: "std.io.stdin", scope: !20, file: !20, line: 426, type: !2279, scopeLine: 426, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42)
!2293 = !DILocation(line: 429, scope: !2292)
!2294 = !DILocation(line: 252, scope: !2295, inlinedAt: !2293)
!2295 = distinct !DISubprogram(name: "stdin", linkageName: "stdin", scope: !2285, file: !2285, line: 252, scopeLine: 252, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!2296 = !DILocation(line: 430, scope: !2292)
!2297 = distinct !DISubprogram(name: "init", linkageName: "std.io.ReadBuffer.init", scope: !2298, file: !2298, line: 17, type: !2299, scopeLine: 17, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2298 = !DIFile(filename: "buffer.c3", directory: "C:/Compilers/C3/lib/std/io/stream")
!2299 = !DISubroutineType(types: !2300)
!2300 = !{!2301, !2301, !87, !174}
!2301 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "ReadBuffer*", baseType: !2302, size: 64, align: 64, dwarfAddressSpace: 0)
!2302 = !DICompositeType(tag: DW_TAG_structure_type, name: "ReadBuffer", scope: !2298, file: !2298, line: 3, size: 384, align: 64, elements: !2303, identifier: "std.io.ReadBuffer")
!2303 = !{!2304, !2305, !2306, !2307}
!2304 = !DIDerivedType(tag: DW_TAG_member, name: "wrapped_stream", scope: !2302, file: !2298, line: 5, baseType: !87, size: 128, align: 64)
!2305 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !2302, file: !2298, line: 6, baseType: !174, size: 128, align: 64, offset: 128)
!2306 = !DIDerivedType(tag: DW_TAG_member, name: "read_idx", scope: !2302, file: !2298, line: 7, baseType: !178, size: 64, align: 64, offset: 256)
!2307 = !DIDerivedType(tag: DW_TAG_member, name: "write_idx", scope: !2302, file: !2298, line: 8, baseType: !178, size: 64, align: 64, offset: 320)
!2308 = !DILocation(line: 18, scope: !2297)
!2309 = !DILocalVariable(name: "self", arg: 1, scope: !2297, file: !2298, line: 17, type: !2301)
!2310 = !DILocation(line: 17, scope: !2297)
!2311 = !DILocalVariable(name: "wrapped_stream", arg: 2, scope: !2297, file: !2298, line: 17, type: !87)
!2312 = !DILocalVariable(name: "bytes", arg: 3, scope: !2297, file: !2298, line: 17, type: !174)
!2313 = !DILocation(line: 14, scope: !2314)
!2314 = distinct !DILexicalBlock(scope: !2297, file: !2298, line: 18, column: 1)
!2315 = !DILocation(line: 15, scope: !2314)
!2316 = !DILocation(line: 19, scope: !2297)
!2317 = !DILocation(line: 20, scope: !2297)
!2318 = distinct !DISubprogram(name: "str_view", linkageName: "std.io.ReadBuffer.str_view", scope: !2298, file: !2298, line: 22, type: !2319, scopeLine: 22, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2319 = !DISubroutineType(types: !2320)
!2320 = !{!231, !2301}
!2321 = !DILocation(line: 23, scope: !2318)
!2322 = !DILocalVariable(name: "self", arg: 1, scope: !2318, file: !2298, line: 22, type: !2301)
!2323 = !DILocation(line: 22, scope: !2318)
!2324 = !DILocation(line: 24, scope: !2318)
!2325 = distinct !DISubprogram(name: "close", linkageName: "std.io.ReadBuffer.close", scope: !2298, file: !2298, line: 27, type: !2326, scopeLine: 27, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2326 = !DISubroutineType(types: !2327)
!2327 = !{!111, !25, !2301}
!2328 = !DILocation(line: 28, scope: !2325)
!2329 = !DILocalVariable(name: "self", arg: 1, scope: !2325, file: !2298, line: 27, type: !2301)
!2330 = !DILocation(line: 27, scope: !2325)
!2331 = !DILocation(line: 29, scope: !2325)
!2332 = distinct !DISubprogram(name: "read", linkageName: "std.io.ReadBuffer.read", scope: !2298, file: !2298, line: 32, type: !2333, scopeLine: 32, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2333 = !DISubroutineType(types: !2334)
!2334 = !{!111, !226, !2301, !174}
!2335 = !DILocation(line: 33, scope: !2332)
!2336 = !DILocalVariable(name: "self", arg: 1, scope: !2332, file: !2298, line: 32, type: !2301)
!2337 = !DILocation(line: 32, scope: !2332)
!2338 = !DILocalVariable(name: "bytes", arg: 2, scope: !2332, file: !2298, line: 32, type: !174)
!2339 = !DILocation(line: 34, scope: !2332)
!2340 = !DILocation(line: 36, scope: !2341)
!2341 = distinct !DILexicalBlock(scope: !2332, file: !2298, line: 35, column: 2)
!2342 = !DILocation(line: 39, scope: !2343)
!2343 = distinct !DILexicalBlock(scope: !2341, file: !2298, line: 37, column: 3)
!2344 = !DILocation(line: 41, scope: !2341)
!2345 = !DILocalVariable(name: "n", scope: !2332, file: !2298, line: 43, type: !178, align: 8)
!2346 = !DILocation(line: 43, scope: !2332)
!2347 = !DILocation(line: 17, scope: !2348, inlinedAt: !2349)
!2348 = distinct !DISubprogram(name: "less", linkageName: "less", scope: !1185, file: !1185, line: 9, scopeLine: 9, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!2349 = !DILocation(line: 100, scope: !2350, inlinedAt: !2346)
!2350 = distinct !DISubprogram(name: "min", linkageName: "min", scope: !1185, file: !1185, line: 97, scopeLine: 97, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!2351 = !DILocation(line: 44, scope: !2332)
!2352 = !DILocation(line: 45, scope: !2332)
!2353 = !DILocation(line: 46, scope: !2332)
!2354 = distinct !DISubprogram(name: "read_byte", linkageName: "std.io.ReadBuffer.read_byte", scope: !2298, file: !2298, line: 49, type: !2355, scopeLine: 49, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2355 = !DISubroutineType(types: !2356)
!2356 = !{!111, !113, !2301}
!2357 = !DILocation(line: 50, scope: !2354)
!2358 = !DILocalVariable(name: "self", arg: 1, scope: !2354, file: !2298, line: 49, type: !2301)
!2359 = !DILocation(line: 49, scope: !2354)
!2360 = !DILocation(line: 51, scope: !2354)
!2361 = !DILocation(line: 52, scope: !2354)
!2362 = !DILocalVariable(name: "c", scope: !2354, file: !2298, line: 53, type: !11, align: 1)
!2363 = !DILocation(line: 53, scope: !2354)
!2364 = !DILocation(line: 54, scope: !2354)
!2365 = !DILocation(line: 55, scope: !2354)
!2366 = distinct !DISubprogram(name: "refill", linkageName: "std.io.ReadBuffer.refill", scope: !2298, file: !2298, line: 58, type: !2326, scopeLine: 58, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2367 = !DILocation(line: 59, scope: !2366)
!2368 = !DILocalVariable(name: "self", arg: 1, scope: !2366, file: !2298, line: 58, type: !2301)
!2369 = !DILocation(line: 58, scope: !2366)
!2370 = !DILocation(line: 60, scope: !2366)
!2371 = !DILocation(line: 61, scope: !2366)
!2372 = distinct !DISubprogram(name: "init", linkageName: "std.io.WriteBuffer.init", scope: !2298, file: !2298, line: 77, type: !2373, scopeLine: 77, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2373 = !DISubroutineType(types: !2374)
!2374 = !{!2375, !2375, !142, !174}
!2375 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "WriteBuffer*", baseType: !2376, size: 64, align: 64, dwarfAddressSpace: 0)
!2376 = !DICompositeType(tag: DW_TAG_structure_type, name: "WriteBuffer", scope: !2298, file: !2298, line: 64, size: 320, align: 64, elements: !2377, identifier: "std.io.WriteBuffer")
!2377 = !{!2378, !2379, !2380}
!2378 = !DIDerivedType(tag: DW_TAG_member, name: "wrapped_stream", scope: !2376, file: !2298, line: 66, baseType: !142, size: 128, align: 64)
!2379 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !2376, file: !2298, line: 67, baseType: !174, size: 128, align: 64, offset: 128)
!2380 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !2376, file: !2298, line: 68, baseType: !178, size: 64, align: 64, offset: 256)
!2381 = !DILocation(line: 78, scope: !2372)
!2382 = !DILocalVariable(name: "self", arg: 1, scope: !2372, file: !2298, line: 77, type: !2375)
!2383 = !DILocation(line: 77, scope: !2372)
!2384 = !DILocalVariable(name: "wrapped_stream", arg: 2, scope: !2372, file: !2298, line: 77, type: !142)
!2385 = !DILocalVariable(name: "bytes", arg: 3, scope: !2372, file: !2298, line: 77, type: !174)
!2386 = !DILocation(line: 74, scope: !2387)
!2387 = distinct !DILexicalBlock(scope: !2372, file: !2298, line: 78, column: 1)
!2388 = !DILocation(line: 75, scope: !2387)
!2389 = !DILocation(line: 79, scope: !2372)
!2390 = !DILocation(line: 80, scope: !2372)
!2391 = distinct !DISubprogram(name: "str_view", linkageName: "std.io.WriteBuffer.str_view", scope: !2298, file: !2298, line: 83, type: !2392, scopeLine: 83, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2392 = !DISubroutineType(types: !2393)
!2393 = !{!231, !2375}
!2394 = !DILocation(line: 84, scope: !2391)
!2395 = !DILocalVariable(name: "self", arg: 1, scope: !2391, file: !2298, line: 83, type: !2375)
!2396 = !DILocation(line: 83, scope: !2391)
!2397 = !DILocation(line: 85, scope: !2391)
!2398 = distinct !DISubprogram(name: "close", linkageName: "std.io.WriteBuffer.close", scope: !2298, file: !2298, line: 88, type: !2399, scopeLine: 88, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2399 = !DISubroutineType(types: !2400)
!2400 = !{!111, !25, !2375}
!2401 = !DILocation(line: 89, scope: !2398)
!2402 = !DILocalVariable(name: "self", arg: 1, scope: !2398, file: !2298, line: 88, type: !2375)
!2403 = !DILocation(line: 88, scope: !2398)
!2404 = !DILocation(line: 90, scope: !2398)
!2405 = distinct !DISubprogram(name: "flush", linkageName: "std.io.WriteBuffer.flush", scope: !2298, file: !2298, line: 93, type: !2399, scopeLine: 93, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2406 = !DILocation(line: 94, scope: !2405)
!2407 = !DILocalVariable(name: "self", arg: 1, scope: !2405, file: !2298, line: 93, type: !2375)
!2408 = !DILocation(line: 93, scope: !2405)
!2409 = !DILocation(line: 95, scope: !2405)
!2410 = !DILocation(line: 96, scope: !2405)
!2411 = distinct !DISubprogram(name: "write", linkageName: "std.io.WriteBuffer.write", scope: !2298, file: !2298, line: 99, type: !2412, scopeLine: 99, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2412 = !DISubroutineType(types: !2413)
!2413 = !{!111, !226, !2375, !174}
!2414 = !DILocation(line: 100, scope: !2411)
!2415 = !DILocalVariable(name: "self", arg: 1, scope: !2411, file: !2298, line: 99, type: !2375)
!2416 = !DILocation(line: 99, scope: !2411)
!2417 = !DILocalVariable(name: "bytes", arg: 2, scope: !2411, file: !2298, line: 99, type: !174)
!2418 = !DILocalVariable(name: "n", scope: !2411, file: !2298, line: 101, type: !178, align: 8)
!2419 = !DILocation(line: 101, scope: !2411)
!2420 = !DILocation(line: 102, scope: !2411)
!2421 = !DILocation(line: 105, scope: !2422)
!2422 = distinct !DILexicalBlock(scope: !2411, file: !2298, line: 103, column: 2)
!2423 = !DILocation(line: 106, scope: !2422)
!2424 = !DILocation(line: 107, scope: !2422)
!2425 = !DILocation(line: 109, scope: !2411)
!2426 = !DILocation(line: 110, scope: !2411)
!2427 = !DILocation(line: 113, scope: !2428)
!2428 = distinct !DILexicalBlock(scope: !2411, file: !2298, line: 111, column: 2)
!2429 = !DILocation(line: 116, scope: !2411)
!2430 = !DILocation(line: 117, scope: !2411)
!2431 = !DILocation(line: 118, scope: !2411)
!2432 = distinct !DISubprogram(name: "write_byte", linkageName: "std.io.WriteBuffer.write_byte", scope: !2298, file: !2298, line: 121, type: !2433, scopeLine: 121, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2433 = !DISubroutineType(types: !2434)
!2434 = !{!111, !25, !2375, !11}
!2435 = !DILocation(line: 122, scope: !2432)
!2436 = !DILocalVariable(name: "self", arg: 1, scope: !2432, file: !2298, line: 121, type: !2375)
!2437 = !DILocation(line: 121, scope: !2432)
!2438 = !DILocalVariable(name: "c", arg: 2, scope: !2432, file: !2298, line: 121, type: !11)
!2439 = !DILocalVariable(name: "n", scope: !2432, file: !2298, line: 123, type: !178, align: 8)
!2440 = !DILocation(line: 123, scope: !2432)
!2441 = !DILocation(line: 124, scope: !2432)
!2442 = !DILocation(line: 126, scope: !2443)
!2443 = distinct !DILexicalBlock(scope: !2432, file: !2298, line: 125, column: 2)
!2444 = !DILocation(line: 128, scope: !2432)
!2445 = !DILocation(line: 129, scope: !2432)
!2446 = distinct !DISubprogram(name: "write_pending", linkageName: "std.io.WriteBuffer.write_pending", scope: !2298, file: !2298, line: 132, type: !2399, scopeLine: 132, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2447 = !DILocation(line: 133, scope: !2446)
!2448 = !DILocalVariable(name: "self", arg: 1, scope: !2446, file: !2298, line: 132, type: !2375)
!2449 = !DILocation(line: 132, scope: !2446)
!2450 = !DILocation(line: 134, scope: !2446)
!2451 = !DILocation(line: 135, scope: !2446)
!2452 = distinct !DISubprogram(name: "init", linkageName: "std.io.ByteBuffer.init", scope: !51, file: !51, line: 19, type: !2453, scopeLine: 19, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2453 = !DISubroutineType(types: !2454)
!2454 = !{!2455, !2455, !2459, !179, !179}
!2455 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "ByteBuffer*", baseType: !2456, size: 64, align: 64, dwarfAddressSpace: 0)
!2456 = !DICompositeType(tag: DW_TAG_structure_type, name: "ByteBuffer", scope: !51, file: !51, line: 4, size: 512, align: 64, elements: !2457, identifier: "std.io.ByteBuffer")
!2457 = !{!2458, !2463, !2464, !2465, !2466, !2467}
!2458 = !DIDerivedType(tag: DW_TAG_member, name: "allocator", scope: !2456, file: !51, line: 6, baseType: !2459, size: 128, align: 64)
!2459 = !DICompositeType(tag: DW_TAG_structure_type, name: "Allocator", size: 128, align: 64, elements: !2460, identifier: "Allocator")
!2460 = !{!2461, !2462}
!2461 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !2459, baseType: !25, size: 64, align: 64)
!2462 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !2459, baseType: !91, size: 64, align: 64, offset: 64)
!2463 = !DIDerivedType(tag: DW_TAG_member, name: "max_read", scope: !2456, file: !51, line: 7, baseType: !178, size: 64, align: 64, offset: 128)
!2464 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !2456, file: !51, line: 8, baseType: !174, size: 128, align: 64, offset: 192)
!2465 = !DIDerivedType(tag: DW_TAG_member, name: "read_idx", scope: !2456, file: !51, line: 9, baseType: !178, size: 64, align: 64, offset: 320)
!2466 = !DIDerivedType(tag: DW_TAG_member, name: "write_idx", scope: !2456, file: !51, line: 10, baseType: !178, size: 64, align: 64, offset: 384)
!2467 = !DIDerivedType(tag: DW_TAG_member, name: "has_last", scope: !2456, file: !51, line: 11, baseType: !451, size: 8, align: 8, offset: 448)
!2468 = !DILocation(line: 20, scope: !2452)
!2469 = !DILocalVariable(name: "self", arg: 1, scope: !2452, file: !51, line: 19, type: !2455)
!2470 = !DILocation(line: 19, scope: !2452)
!2471 = !DILocalVariable(name: "allocator", arg: 2, scope: !2452, file: !51, line: 19, type: !2459)
!2472 = !DILocalVariable(name: "max_read", arg: 3, scope: !2452, file: !51, line: 19, type: !178)
!2473 = !DILocalVariable(name: "initial_capacity", arg: 4, scope: !2452, file: !51, line: 19, type: !178)
!2474 = !DILocation(line: 17, scope: !2475)
!2475 = distinct !DILexicalBlock(scope: !2452, file: !51, line: 20, column: 1)
!2476 = !DILocation(line: 21, scope: !2452)
!2477 = !DILocation(line: 47, scope: !2478, inlinedAt: !2479)
!2478 = distinct !DISubprogram(name: "greater", linkageName: "greater", scope: !1185, file: !1185, line: 39, scopeLine: 39, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!2479 = !DILocation(line: 116, scope: !2480, inlinedAt: !2481)
!2480 = distinct !DISubprogram(name: "max", linkageName: "max", scope: !1185, file: !1185, line: 113, scopeLine: 113, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!2481 = !DILocation(line: 22, scope: !2452)
!2482 = !DILocation(line: 23, scope: !2452)
!2483 = !DILocation(line: 24, scope: !2452)
!2484 = distinct !DISubprogram(name: "tinit", linkageName: "std.io.ByteBuffer.tinit", scope: !51, file: !51, line: 27, type: !2485, scopeLine: 27, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2485 = !DISubroutineType(types: !2486)
!2486 = !{!2455, !2455, !179, !179}
!2487 = !DILocation(line: 28, scope: !2484)
!2488 = !DILocalVariable(name: "self", arg: 1, scope: !2484, file: !51, line: 27, type: !2455)
!2489 = !DILocation(line: 27, scope: !2484)
!2490 = !DILocalVariable(name: "max_read", arg: 2, scope: !2484, file: !51, line: 27, type: !178)
!2491 = !DILocalVariable(name: "initial_capacity", arg: 3, scope: !2484, file: !51, line: 27, type: !178)
!2492 = !DILocation(line: 29, scope: !2484)
!2493 = !DILocation(line: 17, scope: !2484)
!2494 = distinct !DISubprogram(name: "init_with_buffer", linkageName: "std.io.ByteBuffer.init_with_buffer", scope: !51, file: !51, line: 36, type: !2495, scopeLine: 36, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2495 = !DISubroutineType(types: !2496)
!2496 = !{!2455, !2455, !174}
!2497 = !DILocation(line: 37, scope: !2494)
!2498 = !DILocalVariable(name: "self", arg: 1, scope: !2494, file: !51, line: 36, type: !2455)
!2499 = !DILocation(line: 36, scope: !2494)
!2500 = !DILocalVariable(name: "buf", arg: 2, scope: !2494, file: !51, line: 36, type: !174)
!2501 = !DILocation(line: 33, scope: !2502)
!2502 = distinct !DILexicalBlock(scope: !2494, file: !51, line: 37, column: 1)
!2503 = !DILocation(line: 34, scope: !2502)
!2504 = !DILocation(line: 38, scope: !2494)
!2505 = !DILocation(line: 39, scope: !2494)
!2506 = distinct !DISubprogram(name: "free", linkageName: "std.io.ByteBuffer.free", scope: !51, file: !51, line: 42, type: !2507, scopeLine: 42, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2507 = !DISubroutineType(types: !2508)
!2508 = !{null, !2455}
!2509 = !DILocation(line: 43, scope: !2506)
!2510 = !DILocalVariable(name: "self", arg: 1, scope: !2506, file: !51, line: 42, type: !2455)
!2511 = !DILocation(line: 42, scope: !2506)
!2512 = !DILocation(line: 44, scope: !2506)
!2513 = !DILocation(line: 119, scope: !2514, inlinedAt: !2512)
!2514 = distinct !DISubprogram(name: "free", linkageName: "free", scope: !2515, file: !2515, line: 117, scopeLine: 117, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!2515 = !DIFile(filename: "mem_allocator.c3", directory: "C:/Compilers/C3/lib/std/core")
!2516 = !DILocation(line: 123, scope: !2514, inlinedAt: !2512)
!2517 = !DILocation(line: 45, scope: !2506)
!2518 = distinct !DISubprogram(name: "write", linkageName: "std.io.ByteBuffer.write", scope: !51, file: !51, line: 48, type: !2519, scopeLine: 48, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2519 = !DISubroutineType(types: !2520)
!2520 = !{!111, !226, !2455, !174}
!2521 = !DILocation(line: 49, scope: !2518)
!2522 = !DILocalVariable(name: "self", arg: 1, scope: !2518, file: !51, line: 48, type: !2455)
!2523 = !DILocation(line: 48, scope: !2518)
!2524 = !DILocalVariable(name: "bytes", arg: 2, scope: !2518, file: !51, line: 48, type: !174)
!2525 = !DILocalVariable(name: "cap", scope: !2518, file: !51, line: 50, type: !178, align: 8)
!2526 = !DILocation(line: 50, scope: !2518)
!2527 = !DILocation(line: 51, scope: !2518)
!2528 = !DILocation(line: 52, scope: !2518)
!2529 = !DILocation(line: 53, scope: !2518)
!2530 = !DILocation(line: 54, scope: !2518)
!2531 = distinct !DISubprogram(name: "write_byte", linkageName: "std.io.ByteBuffer.write_byte", scope: !51, file: !51, line: 57, type: !2532, scopeLine: 57, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2532 = !DISubroutineType(types: !2533)
!2533 = !{!111, !25, !2455, !11}
!2534 = !DILocation(line: 58, scope: !2531)
!2535 = !DILocalVariable(name: "self", arg: 1, scope: !2531, file: !51, line: 57, type: !2455)
!2536 = !DILocation(line: 57, scope: !2531)
!2537 = !DILocalVariable(name: "c", arg: 2, scope: !2531, file: !51, line: 57, type: !11)
!2538 = !DILocalVariable(name: "cap", scope: !2531, file: !51, line: 59, type: !178, align: 8)
!2539 = !DILocation(line: 59, scope: !2531)
!2540 = !DILocation(line: 60, scope: !2531)
!2541 = !DILocation(line: 61, scope: !2531)
!2542 = !DILocation(line: 62, scope: !2531)
!2543 = distinct !DISubprogram(name: "read", linkageName: "std.io.ByteBuffer.read", scope: !51, file: !51, line: 65, type: !2519, scopeLine: 65, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2544 = !DILocation(line: 66, scope: !2543)
!2545 = !DILocalVariable(name: "self", arg: 1, scope: !2543, file: !51, line: 65, type: !2455)
!2546 = !DILocation(line: 65, scope: !2543)
!2547 = !DILocalVariable(name: "bytes", arg: 2, scope: !2543, file: !51, line: 65, type: !174)
!2548 = !DILocalVariable(name: "readable", scope: !2543, file: !51, line: 67, type: !178, align: 8)
!2549 = !DILocation(line: 67, scope: !2543)
!2550 = !DILocation(line: 68, scope: !2543)
!2551 = !DILocation(line: 70, scope: !2552)
!2552 = distinct !DILexicalBlock(scope: !2543, file: !51, line: 69, column: 2)
!2553 = !DILocation(line: 71, scope: !2552)
!2554 = !DILocalVariable(name: "n", scope: !2543, file: !51, line: 73, type: !178, align: 8)
!2555 = !DILocation(line: 73, scope: !2543)
!2556 = !DILocation(line: 17, scope: !2557, inlinedAt: !2558)
!2557 = distinct !DISubprogram(name: "less", linkageName: "less", scope: !1185, file: !1185, line: 9, scopeLine: 9, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!2558 = !DILocation(line: 100, scope: !2559, inlinedAt: !2555)
!2559 = distinct !DISubprogram(name: "min", linkageName: "min", scope: !1185, file: !1185, line: 97, scopeLine: 97, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!2560 = !DILocation(line: 74, scope: !2543)
!2561 = !DILocation(line: 75, scope: !2543)
!2562 = !DILocation(line: 76, scope: !2543)
!2563 = !DILocation(line: 138, scope: !2564, inlinedAt: !2566)
!2564 = distinct !DILexicalBlock(scope: !2565, file: !51, line: 139, column: 1)
!2565 = distinct !DISubprogram(name: "shrink", linkageName: "shrink", scope: !51, file: !51, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2566 = !DILocation(line: 77, scope: !2543)
!2567 = !DILocation(line: 140, scope: !2565, inlinedAt: !2566)
!2568 = !DILocalVariable(name: "readable", scope: !2569, file: !51, line: 143, type: !178, align: 8)
!2569 = distinct !DILexicalBlock(scope: !2565, file: !51, line: 141, column: 2)
!2570 = !DILocation(line: 143, scope: !2569, inlinedAt: !2566)
!2571 = !DILocation(line: 144, scope: !2569, inlinedAt: !2566)
!2572 = !DILocation(line: 145, scope: !2569, inlinedAt: !2566)
!2573 = !DILocation(line: 146, scope: !2569, inlinedAt: !2566)
!2574 = !DILocation(line: 78, scope: !2543)
!2575 = distinct !DISubprogram(name: "read_byte", linkageName: "std.io.ByteBuffer.read_byte", scope: !51, file: !51, line: 81, type: !2576, scopeLine: 81, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2576 = !DISubroutineType(types: !2577)
!2577 = !{!111, !113, !2455}
!2578 = !DILocation(line: 82, scope: !2575)
!2579 = !DILocalVariable(name: "self", arg: 1, scope: !2575, file: !51, line: 81, type: !2455)
!2580 = !DILocation(line: 81, scope: !2575)
!2581 = !DILocalVariable(name: "readable", scope: !2575, file: !51, line: 83, type: !178, align: 8)
!2582 = !DILocation(line: 83, scope: !2575)
!2583 = !DILocation(line: 84, scope: !2575)
!2584 = !DILocation(line: 86, scope: !2585)
!2585 = distinct !DILexicalBlock(scope: !2575, file: !51, line: 85, column: 2)
!2586 = !DILocation(line: 87, scope: !2585)
!2587 = !DILocalVariable(name: "c", scope: !2575, file: !51, line: 89, type: !11, align: 1)
!2588 = !DILocation(line: 89, scope: !2575)
!2589 = !DILocation(line: 90, scope: !2575)
!2590 = !DILocation(line: 91, scope: !2575)
!2591 = !DILocation(line: 138, scope: !2592, inlinedAt: !2594)
!2592 = distinct !DILexicalBlock(scope: !2593, file: !51, line: 139, column: 1)
!2593 = distinct !DISubprogram(name: "shrink", linkageName: "shrink", scope: !51, file: !51, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2594 = !DILocation(line: 92, scope: !2575)
!2595 = !DILocation(line: 140, scope: !2593, inlinedAt: !2594)
!2596 = !DILocalVariable(name: "readable", scope: !2597, file: !51, line: 143, type: !178, align: 8)
!2597 = distinct !DILexicalBlock(scope: !2593, file: !51, line: 141, column: 2)
!2598 = !DILocation(line: 143, scope: !2597, inlinedAt: !2594)
!2599 = !DILocation(line: 144, scope: !2597, inlinedAt: !2594)
!2600 = !DILocation(line: 145, scope: !2597, inlinedAt: !2594)
!2601 = !DILocation(line: 146, scope: !2597, inlinedAt: !2594)
!2602 = !DILocation(line: 93, scope: !2575)
!2603 = distinct !DISubprogram(name: "pushback_byte", linkageName: "std.io.ByteBuffer.pushback_byte", scope: !51, file: !51, line: 99, type: !2604, scopeLine: 99, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2604 = !DISubroutineType(types: !2605)
!2605 = !{!111, !25, !2455}
!2606 = !DILocation(line: 100, scope: !2603)
!2607 = !DILocalVariable(name: "self", arg: 1, scope: !2603, file: !51, line: 99, type: !2455)
!2608 = !DILocation(line: 99, scope: !2603)
!2609 = !DILocation(line: 101, scope: !2603)
!2610 = !DILocation(line: 102, scope: !2603)
!2611 = !DILocation(line: 103, scope: !2603)
!2612 = !DILocation(line: 104, scope: !2603)
!2613 = distinct !DISubprogram(name: "seek", linkageName: "std.io.ByteBuffer.seek", scope: !51, file: !51, line: 107, type: !2614, scopeLine: 107, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2614 = !DISubroutineType(types: !2615)
!2615 = !{!111, !226, !2455, !112, !50}
!2616 = !DILocation(line: 108, scope: !2613)
!2617 = !DILocalVariable(name: "self", arg: 1, scope: !2613, file: !51, line: 107, type: !2455)
!2618 = !DILocation(line: 107, scope: !2613)
!2619 = !DILocalVariable(name: "offset", arg: 2, scope: !2613, file: !51, line: 107, type: !1176)
!2620 = !DILocalVariable(name: "seek", arg: 3, scope: !2613, file: !51, line: 107, type: !50)
!2621 = !DILocation(line: 112, scope: !2622)
!2622 = distinct !DILexicalBlock(scope: !2623, file: !51, line: 112, column: 4)
!2623 = distinct !DILexicalBlock(scope: !2613, file: !51, line: 109, column: 2)
!2624 = !DILocation(line: 113, scope: !2622)
!2625 = !DILocation(line: 114, scope: !2622)
!2626 = !DILocation(line: 116, scope: !2627)
!2627 = distinct !DILexicalBlock(scope: !2623, file: !51, line: 116, column: 4)
!2628 = !DILocation(line: 117, scope: !2627)
!2629 = !DILocation(line: 118, scope: !2627)
!2630 = !DILocation(line: 120, scope: !2631)
!2631 = distinct !DILexicalBlock(scope: !2623, file: !51, line: 120, column: 4)
!2632 = !DILocation(line: 121, scope: !2631)
!2633 = !DILocation(line: 123, scope: !2613)
!2634 = distinct !DISubprogram(name: "available", linkageName: "std.io.ByteBuffer.available", scope: !51, file: !51, line: 126, type: !2635, scopeLine: 126, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2635 = !DISubroutineType(types: !2636)
!2636 = !{!111, !226, !2455}
!2637 = !DILocation(line: 127, scope: !2634)
!2638 = !DILocalVariable(name: "self", arg: 1, scope: !2634, file: !51, line: 126, type: !2455)
!2639 = !DILocation(line: 126, scope: !2634)
!2640 = !DILocation(line: 128, scope: !2634)
!2641 = distinct !DISubprogram(name: "grow", linkageName: "std.io.ByteBuffer.grow", scope: !51, file: !51, line: 131, type: !2642, scopeLine: 131, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2642 = !DISubroutineType(types: !2643)
!2643 = !{null, !2455, !179}
!2644 = !DILocation(line: 132, scope: !2641)
!2645 = !DILocalVariable(name: "self", arg: 1, scope: !2641, file: !51, line: 131, type: !2455)
!2646 = !DILocation(line: 131, scope: !2641)
!2647 = !DILocalVariable(name: "n", arg: 2, scope: !2641, file: !51, line: 131, type: !178)
!2648 = !DILocalVariable(name: "y", scope: !2649, file: !51, line: 980, type: !178, align: 8)
!2649 = distinct !DISubprogram(name: "next_power_of_2", linkageName: "next_power_of_2", scope: !1241, file: !1241, line: 978, scopeLine: 978, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2650 = !DILocation(line: 980, scope: !2649, inlinedAt: !2651)
!2651 = !DILocation(line: 133, scope: !2641)
!2652 = !DILocation(line: 981, scope: !2649, inlinedAt: !2651)
!2653 = !DILocation(line: 981, scope: !2654, inlinedAt: !2651)
!2654 = distinct !DILexicalBlock(scope: !2649, file: !1241, line: 981, column: 2)
!2655 = !DILocation(line: 982, scope: !2649, inlinedAt: !2651)
!2656 = !DILocalVariable(name: "p", scope: !2641, file: !51, line: 134, type: !113, align: 8)
!2657 = !DILocation(line: 134, scope: !2641)
!2658 = !DILocation(line: 108, scope: !2659, inlinedAt: !2660)
!2659 = distinct !DISubprogram(name: "realloc_try", linkageName: "realloc_try", scope: !2515, file: !2515, line: 106, scopeLine: 106, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!2660 = !DILocation(line: 103, scope: !2661, inlinedAt: !2657)
!2661 = distinct !DISubprogram(name: "realloc", linkageName: "realloc", scope: !2515, file: !2515, line: 101, scopeLine: 101, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!2662 = !DILocation(line: 119, scope: !2663, inlinedAt: !2664)
!2663 = distinct !DISubprogram(name: "free", linkageName: "free", scope: !2515, file: !2515, line: 117, scopeLine: 117, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!2664 = !DILocation(line: 110, scope: !2665, inlinedAt: !2660)
!2665 = distinct !DILexicalBlock(scope: !2659, file: !2515, line: 109, column: 2)
!2666 = !DILocation(line: 123, scope: !2663, inlinedAt: !2664)
!2667 = !DILocation(line: 111, scope: !2665, inlinedAt: !2660)
!2668 = !DILocation(line: 113, scope: !2659, inlinedAt: !2660)
!2669 = !DILocation(line: 38, scope: !2659, inlinedAt: !2660)
!2670 = !DILocation(line: 975, scope: !2671, inlinedAt: !2669)
!2671 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !1241, file: !1241, line: 973, scopeLine: 973, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!2672 = !DILocation(line: 114, scope: !2659, inlinedAt: !2660)
!2673 = !DILocation(line: 48, scope: !2659, inlinedAt: !2660)
!2674 = !DILocation(line: 975, scope: !2675, inlinedAt: !2673)
!2675 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !1241, file: !1241, line: 973, scopeLine: 973, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!2676 = !DILocation(line: 135, scope: !2641)
!2677 = distinct !DISubprogram(name: "len", linkageName: "std.io.ByteReader.len", scope: !2678, file: !2678, line: 9, type: !2679, scopeLine: 9, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2678 = !DIFile(filename: "bytereader.c3", directory: "C:/Compilers/C3/lib/std/io/stream")
!2679 = !DISubroutineType(types: !2680)
!2680 = !{!178, !2681}
!2681 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "ByteReader*", baseType: !2682, size: 64, align: 64, dwarfAddressSpace: 0)
!2682 = !DICompositeType(tag: DW_TAG_structure_type, name: "ByteReader", scope: !2678, file: !2678, line: 3, size: 192, align: 64, elements: !2683, identifier: "std.io.ByteReader")
!2683 = !{!2684, !2685}
!2684 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !2682, file: !2678, line: 5, baseType: !174, size: 128, align: 64)
!2685 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !2682, file: !2678, line: 6, baseType: !178, size: 64, align: 64, offset: 128)
!2686 = !DILocation(line: 10, scope: !2677)
!2687 = !DILocalVariable(name: "self", arg: 1, scope: !2677, file: !2678, line: 9, type: !2681)
!2688 = !DILocation(line: 9, scope: !2677)
!2689 = !DILocation(line: 11, scope: !2677)
!2690 = distinct !DISubprogram(name: "init", linkageName: "std.io.ByteReader.init", scope: !2678, file: !2678, line: 14, type: !2691, scopeLine: 14, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2691 = !DISubroutineType(types: !2692)
!2692 = !{!2681, !2681, !174}
!2693 = !DILocation(line: 15, scope: !2690)
!2694 = !DILocalVariable(name: "self", arg: 1, scope: !2690, file: !2678, line: 14, type: !2681)
!2695 = !DILocation(line: 14, scope: !2690)
!2696 = !DILocalVariable(name: "bytes", arg: 2, scope: !2690, file: !2678, line: 14, type: !174)
!2697 = !DILocation(line: 16, scope: !2690)
!2698 = !DILocation(line: 17, scope: !2690)
!2699 = distinct !DISubprogram(name: "read", linkageName: "std.io.ByteReader.read", scope: !2678, file: !2678, line: 20, type: !2700, scopeLine: 20, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2700 = !DISubroutineType(types: !2701)
!2701 = !{!111, !226, !2681, !174}
!2702 = !DILocation(line: 21, scope: !2699)
!2703 = !DILocalVariable(name: "self", arg: 1, scope: !2699, file: !2678, line: 20, type: !2681)
!2704 = !DILocation(line: 20, scope: !2699)
!2705 = !DILocalVariable(name: "bytes", arg: 2, scope: !2699, file: !2678, line: 20, type: !174)
!2706 = !DILocation(line: 22, scope: !2699)
!2707 = !DILocalVariable(name: "len", scope: !2699, file: !2678, line: 23, type: !178, align: 8)
!2708 = !DILocation(line: 23, scope: !2699)
!2709 = !DILocation(line: 17, scope: !2710, inlinedAt: !2711)
!2710 = distinct !DISubprogram(name: "less", linkageName: "less", scope: !1185, file: !1185, line: 9, scopeLine: 9, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!2711 = !DILocation(line: 100, scope: !2712, inlinedAt: !2708)
!2712 = distinct !DISubprogram(name: "min", linkageName: "min", scope: !1185, file: !1185, line: 97, scopeLine: 97, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!2713 = !DILocation(line: 24, scope: !2699)
!2714 = !DILocation(line: 25, scope: !2699)
!2715 = !DILocation(line: 357, scope: !2716, inlinedAt: !2714)
!2716 = distinct !DILexicalBlock(scope: !2718, file: !2717, line: 358, column: 1)
!2717 = !DIFile(filename: "mem.c3", directory: "C:/Compilers/C3/lib/std/core")
!2718 = distinct !DISubprogram(name: "copy", linkageName: "copy", scope: !2717, file: !2717, line: 357, scopeLine: 357, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!2719 = !DILocation(line: 354, scope: !2716, inlinedAt: !2714)
!2720 = !DILocation(line: 25, scope: !2716, inlinedAt: !2714)
!2721 = !DILocation(line: 355, scope: !2716, inlinedAt: !2714)
!2722 = !DILocation(line: 359, scope: !2718, inlinedAt: !2714)
!2723 = !DILocation(line: 26, scope: !2699)
!2724 = !DILocation(line: 27, scope: !2699)
!2725 = distinct !DISubprogram(name: "read_byte", linkageName: "std.io.ByteReader.read_byte", scope: !2678, file: !2678, line: 30, type: !2726, scopeLine: 30, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2726 = !DISubroutineType(types: !2727)
!2727 = !{!111, !113, !2681}
!2728 = !DILocation(line: 31, scope: !2725)
!2729 = !DILocalVariable(name: "self", arg: 1, scope: !2725, file: !2678, line: 30, type: !2681)
!2730 = !DILocation(line: 30, scope: !2725)
!2731 = !DILocation(line: 32, scope: !2725)
!2732 = !DILocation(line: 33, scope: !2725)
!2733 = distinct !DISubprogram(name: "pushback_byte", linkageName: "std.io.ByteReader.pushback_byte", scope: !2678, file: !2678, line: 36, type: !2734, scopeLine: 36, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2734 = !DISubroutineType(types: !2735)
!2735 = !{!111, !25, !2681}
!2736 = !DILocation(line: 37, scope: !2733)
!2737 = !DILocalVariable(name: "self", arg: 1, scope: !2733, file: !2678, line: 36, type: !2681)
!2738 = !DILocation(line: 36, scope: !2733)
!2739 = !DILocation(line: 38, scope: !2733)
!2740 = !DILocation(line: 39, scope: !2733)
!2741 = distinct !DISubprogram(name: "seek", linkageName: "std.io.ByteReader.seek", scope: !2678, file: !2678, line: 42, type: !2742, scopeLine: 42, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2742 = !DISubroutineType(types: !2743)
!2743 = !{!111, !226, !2681, !112, !50}
!2744 = !DILocation(line: 43, scope: !2741)
!2745 = !DILocalVariable(name: "self", arg: 1, scope: !2741, file: !2678, line: 42, type: !2681)
!2746 = !DILocation(line: 42, scope: !2741)
!2747 = !DILocalVariable(name: "offset", arg: 2, scope: !2741, file: !2678, line: 42, type: !1176)
!2748 = !DILocalVariable(name: "seek", arg: 3, scope: !2741, file: !2678, line: 42, type: !50)
!2749 = !DILocalVariable(name: "new_index", scope: !2741, file: !2678, line: 44, type: !1176, align: 8)
!2750 = !DILocation(line: 44, scope: !2741)
!2751 = !DILocation(line: 47, scope: !2752)
!2752 = distinct !DILexicalBlock(scope: !2753, file: !2678, line: 47, column: 13)
!2753 = distinct !DILexicalBlock(scope: !2741, file: !2678, line: 45, column: 2)
!2754 = !DILocation(line: 48, scope: !2755)
!2755 = distinct !DILexicalBlock(scope: !2753, file: !2678, line: 48, column: 16)
!2756 = !DILocation(line: 49, scope: !2757)
!2757 = distinct !DILexicalBlock(scope: !2753, file: !2678, line: 49, column: 13)
!2758 = !DILocation(line: 51, scope: !2741)
!2759 = !DILocation(line: 52, scope: !2741)
!2760 = !DILocation(line: 53, scope: !2741)
!2761 = distinct !DISubprogram(name: "write_to", linkageName: "std.io.ByteReader.write_to", scope: !2678, file: !2678, line: 56, type: !2762, scopeLine: 56, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2762 = !DISubroutineType(types: !2763)
!2763 = !{!111, !226, !2681, !142}
!2764 = !DILocation(line: 57, scope: !2761)
!2765 = !DILocalVariable(name: "self", arg: 1, scope: !2761, file: !2678, line: 56, type: !2681)
!2766 = !DILocation(line: 56, scope: !2761)
!2767 = !DILocalVariable(name: "writer", arg: 2, scope: !2761, file: !2678, line: 56, type: !142)
!2768 = !DILocation(line: 58, scope: !2761)
!2769 = !DILocalVariable(name: "written", scope: !2761, file: !2678, line: 59, type: !178, align: 8)
!2770 = !DILocation(line: 59, scope: !2761)
!2771 = !DILocation(line: 60, scope: !2761)
!2772 = !DILocation(line: 61, scope: !2761)
!2773 = !DILocation(line: 62, scope: !2761)
!2774 = distinct !DISubprogram(name: "available", linkageName: "std.io.ByteReader.available", scope: !2678, file: !2678, line: 65, type: !2775, scopeLine: 65, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2775 = !DISubroutineType(types: !2776)
!2776 = !{!111, !226, !2681}
!2777 = !DILocation(line: 66, scope: !2774)
!2778 = !DILocalVariable(name: "self", arg: 1, scope: !2774, file: !2678, line: 65, type: !2681)
!2779 = !DILocation(line: 65, scope: !2774)
!2780 = !DILocation(line: 67, scope: !2774)
!2781 = !DILocation(line: 47, scope: !2782, inlinedAt: !2783)
!2782 = distinct !DISubprogram(name: "greater", linkageName: "greater", scope: !1185, file: !1185, line: 39, scopeLine: 39, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!2783 = !DILocation(line: 116, scope: !2784, inlinedAt: !2780)
!2784 = distinct !DISubprogram(name: "max", linkageName: "max", scope: !1185, file: !1185, line: 113, scopeLine: 113, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!2785 = distinct !DISubprogram(name: "init", linkageName: "std.io.ByteWriter.init", scope: !2786, file: !2786, line: 17, type: !2787, scopeLine: 17, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2786 = !DIFile(filename: "bytewriter.c3", directory: "C:/Compilers/C3/lib/std/io/stream")
!2787 = !DISubroutineType(types: !2788)
!2788 = !{!2789, !2789, !2459}
!2789 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "ByteWriter*", baseType: !2790, size: 64, align: 64, dwarfAddressSpace: 0)
!2790 = !DICompositeType(tag: DW_TAG_structure_type, name: "ByteWriter", scope: !2786, file: !2786, line: 4, size: 320, align: 64, elements: !2791, identifier: "std.io.ByteWriter")
!2791 = !{!2792, !2793, !2794}
!2792 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !2790, file: !2786, line: 6, baseType: !174, size: 128, align: 64)
!2793 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !2790, file: !2786, line: 7, baseType: !178, size: 64, align: 64, offset: 128)
!2794 = !DIDerivedType(tag: DW_TAG_member, name: "allocator", scope: !2790, file: !2786, line: 8, baseType: !2459, size: 128, align: 64, offset: 192)
!2795 = !DILocation(line: 18, scope: !2785)
!2796 = !DILocalVariable(name: "self", arg: 1, scope: !2785, file: !2786, line: 17, type: !2789)
!2797 = !DILocation(line: 17, scope: !2785)
!2798 = !DILocalVariable(name: "allocator", arg: 2, scope: !2785, file: !2786, line: 17, type: !2459)
!2799 = !DILocation(line: 14, scope: !2800)
!2800 = distinct !DILexicalBlock(scope: !2785, file: !2786, line: 18, column: 1)
!2801 = !DILocation(line: 19, scope: !2785)
!2802 = !DILocation(line: 20, scope: !2785)
!2803 = !DILocation(line: 15, scope: !2785)
!2804 = distinct !DISubprogram(name: "tinit", linkageName: "std.io.ByteWriter.tinit", scope: !2786, file: !2786, line: 28, type: !2805, scopeLine: 28, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2805 = !DISubroutineType(types: !2806)
!2806 = !{!2789, !2789}
!2807 = !DILocation(line: 29, scope: !2804)
!2808 = !DILocalVariable(name: "self", arg: 1, scope: !2804, file: !2786, line: 28, type: !2789)
!2809 = !DILocation(line: 28, scope: !2804)
!2810 = !DILocation(line: 25, scope: !2811)
!2811 = distinct !DILexicalBlock(scope: !2804, file: !2786, line: 29, column: 1)
!2812 = !DILocation(line: 30, scope: !2804)
!2813 = !DILocation(line: 14, scope: !2804)
!2814 = !DILocation(line: 26, scope: !2804)
!2815 = distinct !DISubprogram(name: "init_with_buffer", linkageName: "std.io.ByteWriter.init_with_buffer", scope: !2786, file: !2786, line: 33, type: !2816, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2816 = !DISubroutineType(types: !2817)
!2817 = !{!2789, !2789, !174}
!2818 = !DILocation(line: 34, scope: !2815)
!2819 = !DILocalVariable(name: "self", arg: 1, scope: !2815, file: !2786, line: 33, type: !2789)
!2820 = !DILocation(line: 33, scope: !2815)
!2821 = !DILocalVariable(name: "data", arg: 2, scope: !2815, file: !2786, line: 33, type: !174)
!2822 = !DILocation(line: 35, scope: !2815)
!2823 = !DILocation(line: 36, scope: !2815)
!2824 = distinct !DISubprogram(name: "destroy", linkageName: "std.io.ByteWriter.destroy", scope: !2786, file: !2786, line: 39, type: !2825, scopeLine: 39, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2825 = !DISubroutineType(types: !2826)
!2826 = !{!111, !25, !2789}
!2827 = !DILocation(line: 40, scope: !2824)
!2828 = !DILocalVariable(name: "self", arg: 1, scope: !2824, file: !2786, line: 39, type: !2789)
!2829 = !DILocation(line: 39, scope: !2824)
!2830 = !DILocation(line: 41, scope: !2824)
!2831 = !DILocalVariable(name: "ptr", scope: !2824, file: !2786, line: 42, type: !25, align: 8)
!2832 = !DILocation(line: 42, scope: !2824)
!2833 = !DILocation(line: 119, scope: !2834, inlinedAt: !2832)
!2834 = distinct !DISubprogram(name: "free", linkageName: "free", scope: !2515, file: !2515, line: 117, scopeLine: 117, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!2835 = !DILocation(line: 123, scope: !2834, inlinedAt: !2832)
!2836 = !DILocation(line: 43, scope: !2824)
!2837 = distinct !DISubprogram(name: "str_view", linkageName: "std.io.ByteWriter.str_view", scope: !2786, file: !2786, line: 46, type: !2838, scopeLine: 46, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2838 = !DISubroutineType(types: !2839)
!2839 = !{!231, !2789}
!2840 = !DILocation(line: 47, scope: !2837)
!2841 = !DILocalVariable(name: "self", arg: 1, scope: !2837, file: !2786, line: 46, type: !2789)
!2842 = !DILocation(line: 46, scope: !2837)
!2843 = !DILocation(line: 48, scope: !2837)
!2844 = distinct !DISubprogram(name: "ensure_capacity", linkageName: "std.io.ByteWriter.ensure_capacity", scope: !2786, file: !2786, line: 51, type: !2845, scopeLine: 51, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2845 = !DISubroutineType(types: !2846)
!2846 = !{!111, !25, !2789, !179}
!2847 = !DILocation(line: 52, scope: !2844)
!2848 = !DILocalVariable(name: "self", arg: 1, scope: !2844, file: !2786, line: 51, type: !2789)
!2849 = !DILocation(line: 51, scope: !2844)
!2850 = !DILocalVariable(name: "len", arg: 2, scope: !2844, file: !2786, line: 51, type: !178)
!2851 = !DILocation(line: 53, scope: !2844)
!2852 = !DILocation(line: 54, scope: !2844)
!2853 = !DILocation(line: 55, scope: !2844)
!2854 = !DILocalVariable(name: "new_capacity", scope: !2844, file: !2786, line: 56, type: !178, align: 8)
!2855 = !DILocation(line: 56, scope: !2844)
!2856 = !DILocalVariable(name: "y", scope: !2857, file: !2786, line: 980, type: !178, align: 8)
!2857 = distinct !DISubprogram(name: "next_power_of_2", linkageName: "next_power_of_2", scope: !1241, file: !1241, line: 978, scopeLine: 978, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2858 = !DILocation(line: 980, scope: !2857, inlinedAt: !2855)
!2859 = !DILocation(line: 981, scope: !2857, inlinedAt: !2855)
!2860 = !DILocation(line: 981, scope: !2861, inlinedAt: !2855)
!2861 = distinct !DILexicalBlock(scope: !2857, file: !1241, line: 981, column: 2)
!2862 = !DILocation(line: 982, scope: !2857, inlinedAt: !2855)
!2863 = !DILocalVariable(name: "new_ptr", scope: !2844, file: !2786, line: 57, type: !113, align: 8)
!2864 = !DILocation(line: 57, scope: !2844)
!2865 = !DILocation(line: 108, scope: !2866, inlinedAt: !2864)
!2866 = distinct !DISubprogram(name: "realloc_try", linkageName: "realloc_try", scope: !2515, file: !2515, line: 106, scopeLine: 106, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!2867 = !DILocation(line: 119, scope: !2868, inlinedAt: !2869)
!2868 = distinct !DISubprogram(name: "free", linkageName: "free", scope: !2515, file: !2515, line: 117, scopeLine: 117, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!2869 = !DILocation(line: 110, scope: !2870, inlinedAt: !2864)
!2870 = distinct !DILexicalBlock(scope: !2866, file: !2515, line: 109, column: 2)
!2871 = !DILocation(line: 123, scope: !2868, inlinedAt: !2869)
!2872 = !DILocation(line: 111, scope: !2870, inlinedAt: !2864)
!2873 = !DILocation(line: 113, scope: !2866, inlinedAt: !2864)
!2874 = !DILocation(line: 38, scope: !2866, inlinedAt: !2864)
!2875 = !DILocation(line: 975, scope: !2876, inlinedAt: !2874)
!2876 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !1241, file: !1241, line: 973, scopeLine: 973, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!2877 = !DILocation(line: 114, scope: !2866, inlinedAt: !2864)
!2878 = !DILocation(line: 48, scope: !2866, inlinedAt: !2864)
!2879 = !DILocation(line: 975, scope: !2880, inlinedAt: !2878)
!2880 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !1241, file: !1241, line: 973, scopeLine: 973, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!2881 = !DILocation(line: 58, scope: !2844)
!2882 = distinct !DISubprogram(name: "write", linkageName: "std.io.ByteWriter.write", scope: !2786, file: !2786, line: 61, type: !2883, scopeLine: 61, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2883 = !DISubroutineType(types: !2884)
!2884 = !{!111, !226, !2789, !174}
!2885 = !DILocation(line: 62, scope: !2882)
!2886 = !DILocalVariable(name: "self", arg: 1, scope: !2882, file: !2786, line: 61, type: !2789)
!2887 = !DILocation(line: 61, scope: !2882)
!2888 = !DILocalVariable(name: "bytes", arg: 2, scope: !2882, file: !2786, line: 61, type: !174)
!2889 = !DILocation(line: 63, scope: !2882)
!2890 = !DILocation(line: 64, scope: !2882)
!2891 = !DILocation(line: 357, scope: !2892, inlinedAt: !2890)
!2892 = distinct !DILexicalBlock(scope: !2893, file: !2717, line: 358, column: 1)
!2893 = distinct !DISubprogram(name: "copy", linkageName: "copy", scope: !2717, file: !2717, line: 357, scopeLine: 357, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!2894 = !DILocation(line: 354, scope: !2892, inlinedAt: !2890)
!2895 = !DILocation(line: 64, scope: !2892, inlinedAt: !2890)
!2896 = !DILocation(line: 355, scope: !2892, inlinedAt: !2890)
!2897 = !DILocation(line: 359, scope: !2893, inlinedAt: !2890)
!2898 = !DILocation(line: 65, scope: !2882)
!2899 = !DILocation(line: 66, scope: !2882)
!2900 = distinct !DISubprogram(name: "write_byte", linkageName: "std.io.ByteWriter.write_byte", scope: !2786, file: !2786, line: 69, type: !2901, scopeLine: 69, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2901 = !DISubroutineType(types: !2902)
!2902 = !{!111, !25, !2789, !11}
!2903 = !DILocation(line: 70, scope: !2900)
!2904 = !DILocalVariable(name: "self", arg: 1, scope: !2900, file: !2786, line: 69, type: !2789)
!2905 = !DILocation(line: 69, scope: !2900)
!2906 = !DILocalVariable(name: "c", arg: 2, scope: !2900, file: !2786, line: 69, type: !11)
!2907 = !DILocation(line: 71, scope: !2900)
!2908 = !DILocation(line: 72, scope: !2900)
!2909 = distinct !DISubprogram(name: "read_from", linkageName: "std.io.ByteWriter.read_from", scope: !2786, file: !2786, line: 79, type: !2910, scopeLine: 79, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2910 = !DISubroutineType(types: !2911)
!2911 = !{!111, !226, !2789, !87}
!2912 = !DILocation(line: 80, scope: !2909)
!2913 = !DILocalVariable(name: "self", arg: 1, scope: !2909, file: !2786, line: 79, type: !2789)
!2914 = !DILocation(line: 79, scope: !2909)
!2915 = !DILocalVariable(name: "reader", arg: 2, scope: !2909, file: !2786, line: 79, type: !87)
!2916 = !DILocalVariable(name: "start_index", scope: !2909, file: !2786, line: 81, type: !178, align: 8)
!2917 = !DILocation(line: 81, scope: !2909)
!2918 = !DILocation(line: 82, scope: !2909)
!2919 = !DILocation(line: 84, scope: !2920)
!2920 = distinct !DILexicalBlock(scope: !2909, file: !2786, line: 83, column: 2)
!2921 = !DILocalVariable(name: "available", scope: !2922, file: !2786, line: 84, type: !178, align: 8)
!2922 = distinct !DILexicalBlock(scope: !2920, file: !2786, line: 84, column: 3)
!2923 = !DILocation(line: 84, scope: !2922)
!2924 = !DILocation(line: 86, scope: !2925)
!2925 = distinct !DILexicalBlock(scope: !2922, file: !2786, line: 85, column: 3)
!2926 = !DILocalVariable(name: "read", scope: !2925, file: !2786, line: 87, type: !178, align: 8)
!2927 = !DILocation(line: 87, scope: !2925)
!2928 = !DILocation(line: 88, scope: !2925)
!2929 = !DILocation(line: 90, scope: !2920)
!2930 = !DILocation(line: 92, scope: !2909)
!2931 = !DILocation(line: 94, scope: !2932)
!2932 = distinct !DILexicalBlock(scope: !2909, file: !2786, line: 93, column: 2)
!2933 = !DILocation(line: 96, scope: !2909)
!2934 = !DILocalVariable(name: "len_to_read", scope: !2935, file: !2786, line: 99, type: !178, align: 8)
!2935 = distinct !DILexicalBlock(scope: !2936, file: !2786, line: 97, column: 2)
!2936 = distinct !DILexicalBlock(scope: !2909, file: !2786, line: 96, column: 2)
!2937 = !DILocation(line: 99, scope: !2935)
!2938 = !DILocation(line: 101, scope: !2935)
!2939 = !DILocation(line: 103, scope: !2940)
!2940 = distinct !DILexicalBlock(scope: !2935, file: !2786, line: 102, column: 3)
!2941 = !DILocation(line: 104, scope: !2940)
!2942 = !DILocalVariable(name: "read", scope: !2935, file: !2786, line: 107, type: !178, align: 8)
!2943 = !DILocation(line: 107, scope: !2935)
!2944 = !DILocation(line: 108, scope: !2935)
!2945 = !DILocation(line: 110, scope: !2935)
!2946 = distinct !DISubprogram(name: "init", linkageName: "std.io.LimitReader.init", scope: !2947, file: !2947, line: 13, type: !2948, scopeLine: 13, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2947 = !DIFile(filename: "limitreader.c3", directory: "C:/Compilers/C3/lib/std/io/stream")
!2948 = !DISubroutineType(types: !2949)
!2949 = !{!2950, !2950, !87, !179}
!2950 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "LimitReader*", baseType: !2951, size: 64, align: 64, dwarfAddressSpace: 0)
!2951 = !DICompositeType(tag: DW_TAG_structure_type, name: "LimitReader", scope: !2947, file: !2947, line: 3, size: 192, align: 64, elements: !2952, identifier: "std.io.LimitReader")
!2952 = !{!2953, !2954}
!2953 = !DIDerivedType(tag: DW_TAG_member, name: "wrapped_stream", scope: !2951, file: !2947, line: 5, baseType: !87, size: 128, align: 64)
!2954 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !2951, file: !2947, line: 6, baseType: !178, size: 64, align: 64, offset: 128)
!2955 = !DILocation(line: 14, scope: !2946)
!2956 = !DILocalVariable(name: "self", arg: 1, scope: !2946, file: !2947, line: 13, type: !2950)
!2957 = !DILocation(line: 13, scope: !2946)
!2958 = !DILocalVariable(name: "wrapped_stream", arg: 2, scope: !2946, file: !2947, line: 13, type: !87)
!2959 = !DILocalVariable(name: "limit", arg: 3, scope: !2946, file: !2947, line: 13, type: !178)
!2960 = !DILocation(line: 15, scope: !2946)
!2961 = !DILocation(line: 16, scope: !2946)
!2962 = distinct !DISubprogram(name: "close", linkageName: "std.io.LimitReader.close", scope: !2947, file: !2947, line: 19, type: !2963, scopeLine: 19, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2963 = !DISubroutineType(types: !2964)
!2964 = !{!111, !25, !2950}
!2965 = !DILocation(line: 20, scope: !2962)
!2966 = !DILocalVariable(name: "self", arg: 1, scope: !2962, file: !2947, line: 19, type: !2950)
!2967 = !DILocation(line: 19, scope: !2962)
!2968 = !DILocation(line: 21, scope: !2962)
!2969 = distinct !DISubprogram(name: "read", linkageName: "std.io.LimitReader.read", scope: !2947, file: !2947, line: 25, type: !2970, scopeLine: 25, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2970 = !DISubroutineType(types: !2971)
!2971 = !{!111, !226, !2950, !174}
!2972 = !DILocation(line: 26, scope: !2969)
!2973 = !DILocalVariable(name: "self", arg: 1, scope: !2969, file: !2947, line: 25, type: !2950)
!2974 = !DILocation(line: 25, scope: !2969)
!2975 = !DILocalVariable(name: "bytes", arg: 2, scope: !2969, file: !2947, line: 25, type: !174)
!2976 = !DILocation(line: 27, scope: !2969)
!2977 = !DILocalVariable(name: "m", scope: !2969, file: !2947, line: 28, type: !178, align: 8)
!2978 = !DILocation(line: 28, scope: !2969)
!2979 = !DILocation(line: 17, scope: !2980, inlinedAt: !2981)
!2980 = distinct !DISubprogram(name: "less", linkageName: "less", scope: !1185, file: !1185, line: 9, scopeLine: 9, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!2981 = !DILocation(line: 100, scope: !2982, inlinedAt: !2978)
!2982 = distinct !DISubprogram(name: "min", linkageName: "min", scope: !1185, file: !1185, line: 97, scopeLine: 97, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!2983 = !DILocalVariable(name: "n", scope: !2969, file: !2947, line: 29, type: !178, align: 8)
!2984 = !DILocation(line: 29, scope: !2969)
!2985 = !DILocation(line: 30, scope: !2969)
!2986 = !DILocation(line: 31, scope: !2969)
!2987 = distinct !DISubprogram(name: "read_byte", linkageName: "std.io.LimitReader.read_byte", scope: !2947, file: !2947, line: 34, type: !2988, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2988 = !DISubroutineType(types: !2989)
!2989 = !{!111, !113, !2950}
!2990 = !DILocation(line: 35, scope: !2987)
!2991 = !DILocalVariable(name: "self", arg: 1, scope: !2987, file: !2947, line: 34, type: !2950)
!2992 = !DILocation(line: 34, scope: !2987)
!2993 = !DILocation(line: 36, scope: !2987)
!2994 = !DILocation(line: 38, scope: !2987)
!2995 = !DILocation(line: 37, scope: !2996)
!2996 = distinct !DILexicalBlock(scope: !2987, file: !2947, line: 37, column: 12)
!2997 = distinct !DISubprogram(name: "available", linkageName: "std.io.LimitReader.available", scope: !2947, file: !2947, line: 41, type: !2998, scopeLine: 41, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2998 = !DISubroutineType(types: !2999)
!2999 = !{!111, !226, !2950}
!3000 = !DILocation(line: 42, scope: !2997)
!3001 = !DILocalVariable(name: "self", arg: 1, scope: !2997, file: !2947, line: 41, type: !2950)
!3002 = !DILocation(line: 41, scope: !2997)
!3003 = !DILocation(line: 43, scope: !2997)
!3004 = distinct !DISubprogram(name: "init", linkageName: "std.io.MultiReader.init", scope: !3005, file: !3005, line: 21, type: !3006, scopeLine: 21, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!3005 = !DIFile(filename: "multireader.c3", directory: "C:/Compilers/C3/lib/std/io/stream")
!3006 = !DISubroutineType(types: !3007)
!3007 = !{!3008, !3008, !2459, !3012}
!3008 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "MultiReader*", baseType: !3009, size: 64, align: 64, dwarfAddressSpace: 0)
!3009 = !DICompositeType(tag: DW_TAG_structure_type, name: "MultiReader", scope: !3005, file: !3005, line: 7, size: 320, align: 64, elements: !3010, identifier: "std.io.MultiReader")
!3010 = !{!3011, !3017, !3018}
!3011 = !DIDerivedType(tag: DW_TAG_member, name: "readers", scope: !3009, file: !3005, line: 9, baseType: !3012, size: 128, align: 64)
!3012 = !DICompositeType(tag: DW_TAG_structure_type, name: "InStream[]", size: 128, align: 64, elements: !3013, identifier: "InStream[]")
!3013 = !{!3014, !3016}
!3014 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !3012, baseType: !3015, size: 64, align: 64)
!3015 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "InStream*", baseType: !87, size: 64, align: 64, dwarfAddressSpace: 0)
!3016 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !3012, baseType: !178, size: 64, align: 64, offset: 64)
!3017 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !3009, file: !3005, line: 10, baseType: !178, size: 64, align: 64, offset: 128)
!3018 = !DIDerivedType(tag: DW_TAG_member, name: "allocator", scope: !3009, file: !3005, line: 11, baseType: !2459, size: 128, align: 64, offset: 192)
!3019 = !DILocation(line: 22, scope: !3004)
!3020 = !DILocalVariable(name: "self", arg: 1, scope: !3004, file: !3005, line: 21, type: !3008)
!3021 = !DILocation(line: 21, scope: !3004)
!3022 = !DILocalVariable(name: "allocator", arg: 2, scope: !3004, file: !3005, line: 21, type: !2459)
!3023 = !DILocalVariable(name: "readers", arg: 3, scope: !3004, file: !3005, line: 21, type: !3012)
!3024 = !DILocation(line: 18, scope: !3025)
!3025 = distinct !DILexicalBlock(scope: !3004, file: !3005, line: 22, column: 1)
!3026 = !DILocalVariable(name: "copy", scope: !3004, file: !3005, line: 23, type: !3012, align: 8)
!3027 = !DILocation(line: 23, scope: !3004)
!3028 = !DILocation(line: 270, scope: !3029, inlinedAt: !3030)
!3029 = distinct !DISubprogram(name: "new_array_try", linkageName: "new_array_try", scope: !2515, file: !2515, line: 268, scopeLine: 268, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!3030 = !DILocation(line: 262, scope: !3031, inlinedAt: !3027)
!3031 = distinct !DISubprogram(name: "new_array", linkageName: "new_array", scope: !2515, file: !2515, line: 260, scopeLine: 260, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!3032 = !DILocation(line: 97, scope: !3033, inlinedAt: !3028)
!3033 = distinct !DISubprogram(name: "calloc_try", linkageName: "calloc_try", scope: !2515, file: !2515, line: 95, scopeLine: 95, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!3034 = !DILocation(line: 98, scope: !3033, inlinedAt: !3028)
!3035 = !DILocation(line: 38, scope: !3033, inlinedAt: !3028)
!3036 = !DILocation(line: 975, scope: !3037, inlinedAt: !3035)
!3037 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !1241, file: !1241, line: 973, scopeLine: 973, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!3038 = !DILocation(line: 24, scope: !3004)
!3039 = !DILocation(line: 25, scope: !3004)
!3040 = !DILocation(line: 26, scope: !3004)
!3041 = !DILocation(line: 19, scope: !3004)
!3042 = distinct !DISubprogram(name: "tinit", linkageName: "std.io.MultiReader.tinit", scope: !3005, file: !3005, line: 34, type: !3043, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!3043 = !DISubroutineType(types: !3044)
!3044 = !{!3008, !3008, !3012}
!3045 = !DILocation(line: 35, scope: !3042)
!3046 = !DILocalVariable(name: "self", arg: 1, scope: !3042, file: !3005, line: 34, type: !3008)
!3047 = !DILocation(line: 34, scope: !3042)
!3048 = !DILocalVariable(name: "readers", arg: 2, scope: !3042, file: !3005, line: 34, type: !3012)
!3049 = !DILocation(line: 31, scope: !3050)
!3050 = distinct !DILexicalBlock(scope: !3042, file: !3005, line: 35, column: 1)
!3051 = !DILocation(line: 36, scope: !3042)
!3052 = !DILocation(line: 18, scope: !3042)
!3053 = !DILocation(line: 32, scope: !3042)
!3054 = distinct !DISubprogram(name: "free", linkageName: "std.io.MultiReader.free", scope: !3005, file: !3005, line: 39, type: !3055, scopeLine: 39, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!3055 = !DISubroutineType(types: !3056)
!3056 = !{null, !3008}
!3057 = !DILocation(line: 40, scope: !3054)
!3058 = !DILocalVariable(name: "self", arg: 1, scope: !3054, file: !3005, line: 39, type: !3008)
!3059 = !DILocation(line: 39, scope: !3054)
!3060 = !DILocation(line: 41, scope: !3054)
!3061 = !DILocation(line: 42, scope: !3054)
!3062 = !DILocation(line: 119, scope: !3063, inlinedAt: !3061)
!3063 = distinct !DISubprogram(name: "free", linkageName: "free", scope: !2515, file: !2515, line: 117, scopeLine: 117, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!3064 = !DILocation(line: 123, scope: !3063, inlinedAt: !3061)
!3065 = !DILocation(line: 43, scope: !3054)
!3066 = distinct !DISubprogram(name: "read", linkageName: "std.io.MultiReader.read", scope: !3005, file: !3005, line: 46, type: !3067, scopeLine: 46, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!3067 = !DISubroutineType(types: !3068)
!3068 = !{!111, !226, !3008, !174}
!3069 = !DILocation(line: 47, scope: !3066)
!3070 = !DILocalVariable(name: "self", arg: 1, scope: !3066, file: !3005, line: 46, type: !3008)
!3071 = !DILocation(line: 46, scope: !3066)
!3072 = !DILocalVariable(name: "bytes", arg: 2, scope: !3066, file: !3005, line: 46, type: !174)
!3073 = !DILocalVariable(name: "r", scope: !3066, file: !3005, line: 48, type: !87, align: 8)
!3074 = !DILocation(line: 48, scope: !3066)
!3075 = !DILocalVariable(name: "n", scope: !3066, file: !3005, line: 49, type: !179, align: 8)
!3076 = !DILocation(line: 49, scope: !3066)
!3077 = !DILocalVariable(name: "err", scope: !3066, file: !3005, line: 50, type: !111, align: 8)
!3078 = !DILocation(line: 50, scope: !3066)
!3079 = !DILocation(line: 52, scope: !3080)
!3080 = distinct !DILexicalBlock(scope: !3066, file: !3005, line: 51, column: 2)
!3081 = !DILocation(line: 53, scope: !3080)
!3082 = !DILocation(line: 54, scope: !3080)
!3083 = !DILocation(line: 56, scope: !3084)
!3084 = distinct !DILexicalBlock(scope: !3080, file: !3005, line: 55, column: 3)
!3085 = !DILocation(line: 58, scope: !3080)
!3086 = !DILocation(line: 60, scope: !3066)
!3087 = distinct !DISubprogram(name: "read_byte", linkageName: "std.io.MultiReader.read_byte", scope: !3005, file: !3005, line: 63, type: !3088, scopeLine: 63, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!3088 = !DISubroutineType(types: !3089)
!3089 = !{!111, !113, !3008}
!3090 = !DILocation(line: 64, scope: !3087)
!3091 = !DILocalVariable(name: "self", arg: 1, scope: !3087, file: !3005, line: 63, type: !3008)
!3092 = !DILocation(line: 63, scope: !3087)
!3093 = !DILocalVariable(name: "data", scope: !3087, file: !3005, line: 65, type: !3094, align: 1)
!3094 = !DICompositeType(tag: DW_TAG_array_type, baseType: !11, size: 8, align: 8, elements: !3095)
!3095 = !{!3096}
!3096 = !DISubrange(count: 1, lowerBound: 0)
!3097 = !DILocation(line: 65, scope: !3087)
!3098 = !DILocation(line: 66, scope: !3087)
!3099 = !DILocation(line: 67, scope: !3087)
!3100 = distinct !DISubprogram(name: "init", linkageName: "std.io.MultiWriter.init", scope: !3101, file: !3101, line: 18, type: !3102, scopeLine: 18, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!3101 = !DIFile(filename: "multiwriter.c3", directory: "C:/Compilers/C3/lib/std/io/stream")
!3102 = !DISubroutineType(types: !3103)
!3103 = !{!3104, !3104, !2459, !3108}
!3104 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "MultiWriter*", baseType: !3105, size: 64, align: 64, dwarfAddressSpace: 0)
!3105 = !DICompositeType(tag: DW_TAG_structure_type, name: "MultiWriter", scope: !3101, file: !3101, line: 6, size: 256, align: 64, elements: !3106, identifier: "std.io.MultiWriter")
!3106 = !{!3107, !3112}
!3107 = !DIDerivedType(tag: DW_TAG_member, name: "writers", scope: !3105, file: !3101, line: 8, baseType: !3108, size: 128, align: 64)
!3108 = !DICompositeType(tag: DW_TAG_structure_type, name: "OutStream[]", size: 128, align: 64, elements: !3109, identifier: "OutStream[]")
!3109 = !{!3110, !3111}
!3110 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !3108, baseType: !2186, size: 64, align: 64)
!3111 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !3108, baseType: !178, size: 64, align: 64, offset: 64)
!3112 = !DIDerivedType(tag: DW_TAG_member, name: "allocator", scope: !3105, file: !3101, line: 9, baseType: !2459, size: 128, align: 64, offset: 128)
!3113 = !DILocation(line: 19, scope: !3100)
!3114 = !DILocalVariable(name: "self", arg: 1, scope: !3100, file: !3101, line: 18, type: !3104)
!3115 = !DILocation(line: 18, scope: !3100)
!3116 = !DILocalVariable(name: "allocator", arg: 2, scope: !3100, file: !3101, line: 18, type: !2459)
!3117 = !DILocalVariable(name: "writers", arg: 3, scope: !3100, file: !3101, line: 18, type: !3108)
!3118 = !DILocation(line: 15, scope: !3119)
!3119 = distinct !DILexicalBlock(scope: !3100, file: !3101, line: 19, column: 1)
!3120 = !DILocation(line: 16, scope: !3119)
!3121 = !DILocalVariable(name: "copy", scope: !3100, file: !3101, line: 20, type: !3108, align: 8)
!3122 = !DILocation(line: 20, scope: !3100)
!3123 = !DILocation(line: 270, scope: !3124, inlinedAt: !3125)
!3124 = distinct !DISubprogram(name: "new_array_try", linkageName: "new_array_try", scope: !2515, file: !2515, line: 268, scopeLine: 268, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!3125 = !DILocation(line: 262, scope: !3126, inlinedAt: !3122)
!3126 = distinct !DISubprogram(name: "new_array", linkageName: "new_array", scope: !2515, file: !2515, line: 260, scopeLine: 260, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!3127 = !DILocation(line: 97, scope: !3128, inlinedAt: !3123)
!3128 = distinct !DISubprogram(name: "calloc_try", linkageName: "calloc_try", scope: !2515, file: !2515, line: 95, scopeLine: 95, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!3129 = !DILocation(line: 98, scope: !3128, inlinedAt: !3123)
!3130 = !DILocation(line: 38, scope: !3128, inlinedAt: !3123)
!3131 = !DILocation(line: 975, scope: !3132, inlinedAt: !3130)
!3132 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !1241, file: !1241, line: 973, scopeLine: 973, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!3133 = !DILocation(line: 21, scope: !3100)
!3134 = !DILocation(line: 22, scope: !3100)
!3135 = !DILocation(line: 23, scope: !3100)
!3136 = distinct !DISubprogram(name: "tinit", linkageName: "std.io.MultiWriter.tinit", scope: !3101, file: !3101, line: 31, type: !3137, scopeLine: 31, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!3137 = !DISubroutineType(types: !3138)
!3138 = !{!3104, !3104, !3108}
!3139 = !DILocation(line: 32, scope: !3136)
!3140 = !DILocalVariable(name: "self", arg: 1, scope: !3136, file: !3101, line: 31, type: !3104)
!3141 = !DILocation(line: 31, scope: !3136)
!3142 = !DILocalVariable(name: "writers", arg: 2, scope: !3136, file: !3101, line: 31, type: !3108)
!3143 = !DILocation(line: 28, scope: !3144)
!3144 = distinct !DILexicalBlock(scope: !3136, file: !3101, line: 32, column: 1)
!3145 = !DILocation(line: 29, scope: !3144)
!3146 = !DILocation(line: 33, scope: !3136)
!3147 = !DILocation(line: 15, scope: !3136)
!3148 = !DILocation(line: 16, scope: !3136)
!3149 = distinct !DISubprogram(name: "free", linkageName: "std.io.MultiWriter.free", scope: !3101, file: !3101, line: 36, type: !3150, scopeLine: 36, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!3150 = !DISubroutineType(types: !3151)
!3151 = !{null, !3104}
!3152 = !DILocation(line: 37, scope: !3149)
!3153 = !DILocalVariable(name: "self", arg: 1, scope: !3149, file: !3101, line: 36, type: !3104)
!3154 = !DILocation(line: 36, scope: !3149)
!3155 = !DILocation(line: 38, scope: !3149)
!3156 = !DILocation(line: 39, scope: !3149)
!3157 = !DILocation(line: 119, scope: !3158, inlinedAt: !3156)
!3158 = distinct !DISubprogram(name: "free", linkageName: "free", scope: !2515, file: !2515, line: 117, scopeLine: 117, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!3159 = !DILocation(line: 123, scope: !3158, inlinedAt: !3156)
!3160 = !DILocation(line: 40, scope: !3149)
!3161 = distinct !DISubprogram(name: "write", linkageName: "std.io.MultiWriter.write", scope: !3101, file: !3101, line: 43, type: !3162, scopeLine: 43, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!3162 = !DISubroutineType(types: !3163)
!3163 = !{!111, !226, !3104, !174}
!3164 = !DILocation(line: 44, scope: !3161)
!3165 = !DILocalVariable(name: "self", arg: 1, scope: !3161, file: !3101, line: 43, type: !3104)
!3166 = !DILocation(line: 43, scope: !3161)
!3167 = !DILocalVariable(name: "bytes", arg: 2, scope: !3161, file: !3101, line: 43, type: !174)
!3168 = !DILocalVariable(name: "n", scope: !3161, file: !3101, line: 45, type: !178, align: 8)
!3169 = !DILocation(line: 45, scope: !3161)
!3170 = !DILocation(line: 46, scope: !3171)
!3171 = distinct !DILexicalBlock(scope: !3161, file: !3101, line: 46, column: 2)
!3172 = !DILocalVariable(name: ".temp", scope: !3171, file: !3101, line: 46, type: !178, align: 8)
!3173 = !DILocalVariable(name: "w", scope: !3174, file: !3101, line: 46, type: !142, align: 8)
!3174 = distinct !DILexicalBlock(scope: !3171, file: !3101, line: 47, column: 2)
!3175 = !DILocation(line: 46, scope: !3174)
!3176 = !DILocation(line: 48, scope: !3177)
!3177 = distinct !DILexicalBlock(scope: !3174, file: !3101, line: 47, column: 2)
!3178 = !DILocation(line: 49, scope: !3177)
!3179 = !DILocation(line: 51, scope: !3161)
!3180 = distinct !DISubprogram(name: "write_byte", linkageName: "std.io.MultiWriter.write_byte", scope: !3101, file: !3101, line: 54, type: !3181, scopeLine: 54, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!3181 = !DISubroutineType(types: !3182)
!3182 = !{!111, !25, !3104, !11}
!3183 = !DILocation(line: 55, scope: !3180)
!3184 = !DILocalVariable(name: "self", arg: 1, scope: !3180, file: !3101, line: 54, type: !3104)
!3185 = !DILocation(line: 54, scope: !3180)
!3186 = !DILocalVariable(name: "c", arg: 2, scope: !3180, file: !3101, line: 54, type: !11)
!3187 = !DILocalVariable(name: "data", scope: !3180, file: !3101, line: 56, type: !3094, align: 1)
!3188 = !DILocation(line: 56, scope: !3180)
!3189 = !DILocation(line: 57, scope: !3180)
!3190 = !DILocation(line: 58, scope: !3180)
!3191 = distinct !DISubprogram(name: "init", linkageName: "std.io.Scanner.init", scope: !3192, file: !3192, line: 19, type: !3193, scopeLine: 19, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!3192 = !DIFile(filename: "scanner.c3", directory: "C:/Compilers/C3/lib/std/io/stream")
!3193 = !DISubroutineType(types: !3194)
!3194 = !{null, !3195, !87, !174}
!3195 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Scanner*", baseType: !3196, size: 64, align: 64, dwarfAddressSpace: 0)
!3196 = !DICompositeType(tag: DW_TAG_structure_type, name: "Scanner", scope: !3192, file: !3192, line: 3, size: 384, align: 64, elements: !3197, identifier: "std.io.Scanner")
!3197 = !{!3198, !3199, !3200, !3201}
!3198 = !DIDerivedType(tag: DW_TAG_member, name: "wrapped_stream", scope: !3196, file: !3192, line: 5, baseType: !87, size: 128, align: 64)
!3199 = !DIDerivedType(tag: DW_TAG_member, name: "buf", scope: !3196, file: !3192, line: 6, baseType: !174, size: 128, align: 64, offset: 128)
!3200 = !DIDerivedType(tag: DW_TAG_member, name: "pattern_idx", scope: !3196, file: !3192, line: 7, baseType: !178, size: 64, align: 64, offset: 256)
!3201 = !DIDerivedType(tag: DW_TAG_member, name: "read_idx", scope: !3196, file: !3192, line: 8, baseType: !178, size: 64, align: 64, offset: 320)
!3202 = !DILocation(line: 20, scope: !3191)
!3203 = !DILocalVariable(name: "self", arg: 1, scope: !3191, file: !3192, line: 19, type: !3195)
!3204 = !DILocation(line: 19, scope: !3191)
!3205 = !DILocalVariable(name: "stream", arg: 2, scope: !3191, file: !3192, line: 19, type: !87)
!3206 = !DILocalVariable(name: "buffer", arg: 3, scope: !3191, file: !3192, line: 19, type: !174)
!3207 = !DILocation(line: 17, scope: !3208)
!3208 = distinct !DILexicalBlock(scope: !3191, file: !3192, line: 20, column: 1)
!3209 = !DILocation(line: 21, scope: !3191)
!3210 = distinct !DISubprogram(name: "flush", linkageName: "std.io.Scanner.flush", scope: !3192, file: !3192, line: 28, type: !3211, scopeLine: 28, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!3211 = !DISubroutineType(types: !3212)
!3212 = !{!174, !3195}
!3213 = !DILocation(line: 29, scope: !3210)
!3214 = !DILocalVariable(name: "self", arg: 1, scope: !3210, file: !3192, line: 28, type: !3195)
!3215 = !DILocation(line: 28, scope: !3210)
!3216 = !DILocation(line: 30, scope: !3210)
!3217 = !DILocalVariable(name: "n", scope: !3210, file: !3192, line: 31, type: !178, align: 8)
!3218 = !DILocation(line: 31, scope: !3210)
!3219 = !DILocalVariable(name: "buf", scope: !3210, file: !3192, line: 32, type: !174, align: 8)
!3220 = !DILocation(line: 32, scope: !3210)
!3221 = !DILocation(line: 33, scope: !3210)
!3222 = !DILocation(line: 34, scope: !3210)
!3223 = !DILocation(line: 35, scope: !3210)
!3224 = distinct !DISubprogram(name: "close", linkageName: "std.io.Scanner.close", scope: !3192, file: !3192, line: 38, type: !3225, scopeLine: 38, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!3225 = !DISubroutineType(types: !3226)
!3226 = !{!111, !25, !3195}
!3227 = !DILocation(line: 39, scope: !3224)
!3228 = !DILocalVariable(name: "self", arg: 1, scope: !3224, file: !3192, line: 38, type: !3195)
!3229 = !DILocation(line: 38, scope: !3224)
!3230 = !DILocation(line: 40, scope: !3224)
!3231 = distinct !DISubprogram(name: "scan", linkageName: "std.io.Scanner.scan", scope: !3192, file: !3192, line: 48, type: !3232, scopeLine: 48, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!3232 = !DISubroutineType(types: !3233)
!3233 = !{!111, !2246, !3195, !231}
!3234 = !DILocation(line: 49, scope: !3231)
!3235 = !DILocalVariable(name: "self", arg: 1, scope: !3231, file: !3192, line: 48, type: !3195)
!3236 = !DILocation(line: 48, scope: !3231)
!3237 = !DILocalVariable(name: "pattern", arg: 2, scope: !3231, file: !3192, line: 48, type: !231)
!3238 = !DILocation(line: 45, scope: !3239)
!3239 = distinct !DILexicalBlock(scope: !3231, file: !3192, line: 49, column: 1)
!3240 = !DILocation(line: 46, scope: !3239)
!3241 = !DILocation(line: 50, scope: !3231)
!3242 = !DILocation(line: 53, scope: !3243)
!3243 = distinct !DILexicalBlock(scope: !3231, file: !3192, line: 51, column: 2)
!3244 = !DILocation(line: 90, scope: !3245, inlinedAt: !3242)
!3245 = distinct !DILexicalBlock(scope: !3246, file: !3192, line: 91, column: 1)
!3246 = distinct !DISubprogram(name: "refill", linkageName: "refill", scope: !3192, file: !3192, line: 90, scopeLine: 90, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42, retainedNodes: !95)
!3247 = !DILocalVariable(name: "n", scope: !3246, file: !3192, line: 92, type: !179, align: 8)
!3248 = !DILocation(line: 92, scope: !3246, inlinedAt: !3242)
!3249 = !DILocalVariable(name: "err", scope: !3246, file: !3192, line: 93, type: !111, align: 8)
!3250 = !DILocation(line: 93, scope: !3246, inlinedAt: !3242)
!3251 = !DILocation(line: 95, scope: !3252, inlinedAt: !3242)
!3252 = distinct !DILexicalBlock(scope: !3246, file: !3192, line: 94, column: 2)
!3253 = !DILocation(line: 96, scope: !3252, inlinedAt: !3242)
!3254 = !DILocation(line: 98, scope: !3246, inlinedAt: !3242)
!3255 = !DILocation(line: 54, scope: !3243)
!3256 = !DILocation(line: 56, scope: !3231)
!3257 = !DILocalVariable(name: "n", scope: !3231, file: !3192, line: 57, type: !178, align: 8)
!3258 = !DILocation(line: 57, scope: !3231)
!3259 = !DILocalVariable(name: "buf", scope: !3231, file: !3192, line: 58, type: !174, align: 8)
!3260 = !DILocation(line: 58, scope: !3231)
!3261 = !DILocalVariable(name: "i", scope: !3231, file: !3192, line: 59, type: !178, align: 8)
!3262 = !DILocation(line: 59, scope: !3231)
!3263 = !DILocation(line: 85, scope: !3264, inlinedAt: !3262)
!3264 = distinct !DILexicalBlock(scope: !3265, file: !3192, line: 86, column: 1)
!3265 = distinct !DISubprogram(name: "find", linkageName: "find", scope: !3192, file: !3192, line: 85, scopeLine: 85, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!3266 = !DILocation(line: 87, scope: !3265, inlinedAt: !3262)
!3267 = !DILocation(line: 552, scope: !3265, inlinedAt: !3262)
!3268 = !DILocation(line: 61, scope: !3269)
!3269 = distinct !DILexicalBlock(scope: !3231, file: !3192, line: 60, column: 2)
!3270 = !DILocation(line: 62, scope: !3269)
!3271 = !DILocation(line: 64, scope: !3231)
!3272 = !DILocation(line: 68, scope: !3273)
!3273 = distinct !DILexicalBlock(scope: !3231, file: !3192, line: 65, column: 2)
!3274 = !DILocation(line: 71, scope: !3231)
!3275 = !DILocation(line: 72, scope: !3231)
!3276 = !DILocation(line: 74, scope: !3231)
!3277 = !DILocalVariable(name: "p", scope: !3231, file: !3192, line: 75, type: !178, align: 8)
!3278 = !DILocation(line: 75, scope: !3231)
!3279 = !DILocation(line: 90, scope: !3280, inlinedAt: !3278)
!3280 = distinct !DILexicalBlock(scope: !3281, file: !3192, line: 91, column: 1)
!3281 = distinct !DISubprogram(name: "refill", linkageName: "refill", scope: !3192, file: !3192, line: 90, scopeLine: 90, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42, retainedNodes: !95)
!3282 = !DILocalVariable(name: "n", scope: !3281, file: !3192, line: 92, type: !179, align: 8)
!3283 = !DILocation(line: 92, scope: !3281, inlinedAt: !3278)
!3284 = !DILocalVariable(name: "err", scope: !3281, file: !3192, line: 93, type: !111, align: 8)
!3285 = !DILocation(line: 93, scope: !3281, inlinedAt: !3278)
!3286 = !DILocation(line: 95, scope: !3287, inlinedAt: !3278)
!3287 = distinct !DILexicalBlock(scope: !3281, file: !3192, line: 94, column: 2)
!3288 = !DILocation(line: 96, scope: !3287, inlinedAt: !3278)
!3289 = !DILocation(line: 98, scope: !3281, inlinedAt: !3278)
!3290 = !DILocation(line: 76, scope: !3231)
!3291 = !DILocation(line: 78, scope: !3231)
!3292 = !DILocalVariable(name: "i", scope: !3231, file: !3192, line: 79, type: !178, align: 8)
!3293 = !DILocation(line: 79, scope: !3231)
!3294 = !DILocation(line: 85, scope: !3295, inlinedAt: !3293)
!3295 = distinct !DILexicalBlock(scope: !3296, file: !3192, line: 86, column: 1)
!3296 = distinct !DISubprogram(name: "find", linkageName: "find", scope: !3192, file: !3192, line: 85, scopeLine: 85, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!3297 = !DILocation(line: 87, scope: !3296, inlinedAt: !3293)
!3298 = !DILocation(line: 552, scope: !3296, inlinedAt: !3293)
!3299 = !DILocation(line: 80, scope: !3231)
!3300 = !DILocation(line: 82, scope: !3231)
!3301 = distinct !DISubprogram(name: "read", linkageName: "std.io.Scanner.read", scope: !3192, file: !3192, line: 101, type: !3302, scopeLine: 101, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!3302 = !DISubroutineType(types: !3303)
!3303 = !{!111, !226, !3195, !174}
!3304 = !DILocation(line: 102, scope: !3301)
!3305 = !DILocalVariable(name: "self", arg: 1, scope: !3301, file: !3192, line: 101, type: !3195)
!3306 = !DILocation(line: 101, scope: !3301)
!3307 = !DILocalVariable(name: "bytes", arg: 2, scope: !3301, file: !3192, line: 101, type: !174)
!3308 = !DILocalVariable(name: "n", scope: !3301, file: !3192, line: 103, type: !178, align: 8)
!3309 = !DILocation(line: 103, scope: !3301)
!3310 = !DILocation(line: 104, scope: !3301)
!3311 = !DILocation(line: 106, scope: !3312)
!3312 = distinct !DILexicalBlock(scope: !3301, file: !3192, line: 105, column: 2)
!3313 = !DILocation(line: 17, scope: !3314, inlinedAt: !3315)
!3314 = distinct !DISubprogram(name: "less", linkageName: "less", scope: !1185, file: !1185, line: 9, scopeLine: 9, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!3315 = !DILocation(line: 100, scope: !3316, inlinedAt: !3311)
!3316 = distinct !DISubprogram(name: "min", linkageName: "min", scope: !1185, file: !1185, line: 97, scopeLine: 97, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!3317 = !DILocation(line: 107, scope: !3312)
!3318 = !DILocation(line: 108, scope: !3312)
!3319 = !DILocation(line: 109, scope: !3312)
!3320 = !DILocation(line: 111, scope: !3301)
!3321 = !DILocation(line: 112, scope: !3301)
!3322 = distinct !DISubprogram(name: "read_byte", linkageName: "std.io.Scanner.read_byte", scope: !3192, file: !3192, line: 115, type: !3323, scopeLine: 115, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!3323 = !DISubroutineType(types: !3324)
!3324 = !{!111, !113, !3195}
!3325 = !DILocation(line: 116, scope: !3322)
!3326 = !DILocalVariable(name: "self", arg: 1, scope: !3322, file: !3192, line: 115, type: !3195)
!3327 = !DILocation(line: 115, scope: !3322)
!3328 = !DILocation(line: 117, scope: !3322)
!3329 = !DILocation(line: 119, scope: !3330)
!3330 = distinct !DILexicalBlock(scope: !3322, file: !3192, line: 118, column: 2)
!3331 = !DILocation(line: 121, scope: !3322)
!3332 = distinct !DISubprogram(name: "init", linkageName: "std.io.TeeReader.init", scope: !3333, file: !3333, line: 22, type: !3334, scopeLine: 22, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!3333 = !DIFile(filename: "teereader.c3", directory: "C:/Compilers/C3/lib/std/io/stream")
!3334 = !DISubroutineType(types: !3335)
!3335 = !{!3336, !3336, !87, !142}
!3336 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "TeeReader*", baseType: !3337, size: 64, align: 64, dwarfAddressSpace: 0)
!3337 = !DICompositeType(tag: DW_TAG_structure_type, name: "TeeReader", scope: !3333, file: !3333, line: 3, size: 256, align: 64, elements: !3338, identifier: "std.io.TeeReader")
!3338 = !{!3339, !3340}
!3339 = !DIDerivedType(tag: DW_TAG_member, name: "r", scope: !3337, file: !3333, line: 5, baseType: !87, size: 128, align: 64)
!3340 = !DIDerivedType(tag: DW_TAG_member, name: "w", scope: !3337, file: !3333, line: 6, baseType: !142, size: 128, align: 64, offset: 128)
!3341 = !DILocation(line: 23, scope: !3332)
!3342 = !DILocalVariable(name: "self", arg: 1, scope: !3332, file: !3333, line: 22, type: !3336)
!3343 = !DILocation(line: 22, scope: !3332)
!3344 = !DILocalVariable(name: "r", arg: 2, scope: !3332, file: !3333, line: 22, type: !87)
!3345 = !DILocalVariable(name: "w", arg: 3, scope: !3332, file: !3333, line: 22, type: !142)
!3346 = !DILocation(line: 15, scope: !3347, inlinedAt: !3349)
!3347 = distinct !DILexicalBlock(scope: !3348, file: !3333, line: 15, column: 56)
!3348 = distinct !DISubprogram(name: "tee_reader", linkageName: "tee_reader", scope: !3333, file: !3333, line: 15, scopeLine: 15, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!3349 = !DILocation(line: 24, scope: !3332)
!3350 = !DILocation(line: 15, scope: !3348, inlinedAt: !3349)
!3351 = !DILocation(line: 25, scope: !3332)
!3352 = distinct !DISubprogram(name: "read", linkageName: "std.io.TeeReader.read", scope: !3333, file: !3333, line: 28, type: !3353, scopeLine: 28, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!3353 = !DISubroutineType(types: !3354)
!3354 = !{!111, !226, !3336, !174}
!3355 = !DILocation(line: 29, scope: !3352)
!3356 = !DILocalVariable(name: "self", arg: 1, scope: !3352, file: !3333, line: 28, type: !3336)
!3357 = !DILocation(line: 28, scope: !3352)
!3358 = !DILocalVariable(name: "bytes", arg: 2, scope: !3352, file: !3333, line: 28, type: !174)
!3359 = !DILocalVariable(name: "nr", scope: !3352, file: !3333, line: 30, type: !178, align: 8)
!3360 = !DILocation(line: 30, scope: !3352)
!3361 = !DILocalVariable(name: "nw", scope: !3352, file: !3333, line: 30, type: !178, align: 8)
!3362 = !DILocation(line: 31, scope: !3352)
!3363 = !DILocation(line: 32, scope: !3352)
!3364 = !DILocation(line: 33, scope: !3352)
!3365 = !DILocation(line: 34, scope: !3352)
!3366 = distinct !DISubprogram(name: "read_byte", linkageName: "std.io.TeeReader.read_byte", scope: !3333, file: !3333, line: 37, type: !3367, scopeLine: 37, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!3367 = !DISubroutineType(types: !3368)
!3368 = !{!111, !113, !3336}
!3369 = !DILocation(line: 38, scope: !3366)
!3370 = !DILocalVariable(name: "self", arg: 1, scope: !3366, file: !3333, line: 37, type: !3336)
!3371 = !DILocation(line: 37, scope: !3366)
!3372 = !DILocalVariable(name: "data", scope: !3366, file: !3333, line: 39, type: !3094, align: 1)
!3373 = !DILocation(line: 39, scope: !3366)
!3374 = !DILocation(line: 40, scope: !3366)
!3375 = !DILocation(line: 41, scope: !3366)
!3376 = distinct !DISubprogram(name: "available", linkageName: "std.io.available", scope: !32, file: !32, line: 27, type: !3377, scopeLine: 27, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!3377 = !DISubroutineType(types: !3378)
!3378 = !{!111, !226, !87}
!3379 = !DILocalVariable(name: "s", arg: 1, scope: !3376, file: !32, line: 27, type: !87)
!3380 = !DILocation(line: 27, scope: !3376)
!3381 = !DILocation(line: 29, scope: !3376)
!3382 = !DILocation(line: 30, scope: !3376)
!3383 = !DILocalVariable(name: "curr", scope: !3384, file: !32, line: 32, type: !178, align: 8)
!3384 = distinct !DILexicalBlock(scope: !3376, file: !32, line: 31, column: 2)
!3385 = !DILocation(line: 32, scope: !3384)
!3386 = !DILocalVariable(name: "len", scope: !3384, file: !32, line: 33, type: !178, align: 8)
!3387 = !DILocation(line: 33, scope: !3384)
!3388 = !DILocation(line: 34, scope: !3384)
!3389 = !DILocation(line: 35, scope: !3384)
!3390 = !DILocation(line: 37, scope: !3376)
!3391 = distinct !DISubprogram(name: "copy_to", linkageName: "std.io.copy_to", scope: !32, file: !32, line: 152, type: !3392, scopeLine: 152, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!3392 = !DISubroutineType(types: !3393)
!3393 = !{!111, !226, !87, !142, !174}
!3394 = !DILocalVariable(name: "in", arg: 1, scope: !3391, file: !32, line: 152, type: !87)
!3395 = !DILocation(line: 152, scope: !3391)
!3396 = !DILocalVariable(name: "dst", arg: 2, scope: !3391, file: !32, line: 152, type: !142)
!3397 = !DILocalVariable(name: "buffer", arg: 3, scope: !3391, file: !32, line: 152, type: !174)
!3398 = !DILocation(line: 154, scope: !3391)
!3399 = !DILocalVariable(name: "total_copied", scope: !3400, file: !32, line: 170, type: !178, align: 8)
!3400 = distinct !DISubprogram(name: "copy_through_buffer", linkageName: "copy_through_buffer", scope: !32, file: !32, line: 168, scopeLine: 168, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42, retainedNodes: !95)
!3401 = !DILocation(line: 170, scope: !3400, inlinedAt: !3398)
!3402 = !DILocation(line: 171, scope: !3400, inlinedAt: !3398)
!3403 = !DILocalVariable(name: "len", scope: !3404, file: !32, line: 173, type: !179, align: 8)
!3404 = distinct !DILexicalBlock(scope: !3405, file: !32, line: 172, column: 2)
!3405 = distinct !DILexicalBlock(scope: !3400, file: !32, line: 171, column: 2)
!3406 = !DILocation(line: 173, scope: !3404, inlinedAt: !3398)
!3407 = !DILocalVariable(name: "err", scope: !3404, file: !32, line: 174, type: !111, align: 8)
!3408 = !DILocation(line: 174, scope: !3404, inlinedAt: !3398)
!3409 = !DILocation(line: 176, scope: !3410, inlinedAt: !3398)
!3410 = distinct !DILexicalBlock(scope: !3404, file: !32, line: 175, column: 3)
!3411 = !DILocation(line: 177, scope: !3410, inlinedAt: !3398)
!3412 = !DILocation(line: 179, scope: !3404, inlinedAt: !3398)
!3413 = !DILocalVariable(name: "written", scope: !3404, file: !32, line: 180, type: !178, align: 8)
!3414 = !DILocation(line: 180, scope: !3404, inlinedAt: !3398)
!3415 = !DILocation(line: 181, scope: !3404, inlinedAt: !3398)
!3416 = !DILocation(line: 182, scope: !3404, inlinedAt: !3398)
!3417 = !DILocation(line: 155, scope: !3391)
!3418 = !DILocation(line: 156, scope: !3391)
!3419 = !DILocalVariable(name: "total_copied", scope: !3420, file: !32, line: 170, type: !178, align: 8)
!3420 = distinct !DISubprogram(name: "copy_through_buffer", linkageName: "copy_through_buffer", scope: !32, file: !32, line: 168, scopeLine: 168, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42, retainedNodes: !95)
!3421 = !DILocation(line: 170, scope: !3420, inlinedAt: !3422)
!3422 = !DILocation(line: 159, scope: !3391)
!3423 = !DILocation(line: 171, scope: !3420, inlinedAt: !3422)
!3424 = !DILocalVariable(name: "len", scope: !3425, file: !32, line: 173, type: !179, align: 8)
!3425 = distinct !DILexicalBlock(scope: !3426, file: !32, line: 172, column: 2)
!3426 = distinct !DILexicalBlock(scope: !3420, file: !32, line: 171, column: 2)
!3427 = !DILocation(line: 173, scope: !3425, inlinedAt: !3422)
!3428 = !DILocalVariable(name: "err", scope: !3425, file: !32, line: 174, type: !111, align: 8)
!3429 = !DILocation(line: 174, scope: !3425, inlinedAt: !3422)
!3430 = !DILocation(line: 176, scope: !3431, inlinedAt: !3422)
!3431 = distinct !DILexicalBlock(scope: !3425, file: !32, line: 175, column: 3)
!3432 = !DILocation(line: 177, scope: !3431, inlinedAt: !3422)
!3433 = !DILocation(line: 179, scope: !3425, inlinedAt: !3422)
!3434 = !DILocalVariable(name: "written", scope: !3425, file: !32, line: 180, type: !178, align: 8)
!3435 = !DILocation(line: 180, scope: !3425, inlinedAt: !3422)
!3436 = !DILocation(line: 181, scope: !3425, inlinedAt: !3422)
!3437 = !DILocation(line: 182, scope: !3425, inlinedAt: !3422)
!3438 = distinct !DISubprogram(name: "wrap_bytes", linkageName: "std.io.wrap_bytes", scope: !32, file: !32, line: 439, type: !3439, scopeLine: 439, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!3439 = !DISubroutineType(types: !3440)
!3440 = !{!2682, !174}
!3441 = !DILocalVariable(name: "bytes", arg: 1, scope: !3438, file: !32, line: 439, type: !174)
!3442 = !DILocation(line: 439, scope: !3438)
!3443 = !DILocation(line: 441, scope: !3438)
