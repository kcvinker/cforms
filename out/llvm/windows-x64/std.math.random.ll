; ModuleID = 'std::math::random'
source_filename = "std::math::random"
target datalayout = "e-m:w-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-windows-msvc"

%.introspect = type { i8, i64, ptr, i64, i64, i64, [0 x i64] }
%any = type { ptr, i64 }
%"char[]" = type { ptr, i64 }
%"any[]" = type { ptr, i64 }
%"ulong[]" = type { ptr, i64 }

$std.math.random.Lcg128Random.set_seed = comdat any

$std.math.random.Lcg128Random.next_long = comdat any

$std.math.random.Lcg128Random.next_bytes = comdat any

$std.math.random.Lcg128Random.next_int128 = comdat any

$std.math.random.Lcg128Random.next_int = comdat any

$std.math.random.Lcg128Random.next_short = comdat any

$std.math.random.Lcg128Random.next_byte = comdat any

$std.math.random.Lcg64Random.set_seed = comdat any

$std.math.random.Lcg64Random.next_int = comdat any

$std.math.random.Lcg64Random.next_bytes = comdat any

$std.math.random.Lcg64Random.next_int128 = comdat any

$std.math.random.Lcg64Random.next_long = comdat any

$std.math.random.Lcg64Random.next_short = comdat any

$std.math.random.Lcg64Random.next_byte = comdat any

$std.math.random.Lcg32Random.set_seed = comdat any

$std.math.random.Lcg32Random.next_short = comdat any

$std.math.random.Lcg32Random.next_bytes = comdat any

$std.math.random.Lcg32Random.next_int128 = comdat any

$std.math.random.Lcg32Random.next_long = comdat any

$std.math.random.Lcg32Random.next_int = comdat any

$std.math.random.Lcg32Random.next_byte = comdat any

$std.math.random.Lcg16Random.set_seed = comdat any

$std.math.random.Lcg16Random.next_byte = comdat any

$std.math.random.Lcg16Random.next_bytes = comdat any

$std.math.random.Lcg16Random.next_int128 = comdat any

$std.math.random.Lcg16Random.next_long = comdat any

$std.math.random.Lcg16Random.next_int = comdat any

$std.math.random.Lcg16Random.next_short = comdat any

$std.math.random.Mcg128Random.set_seed = comdat any

$std.math.random.Mcg128Random.next_bytes = comdat any

$std.math.random.Mcg128Random.next_long = comdat any

$std.math.random.Mcg128Random.next_int128 = comdat any

$std.math.random.Mcg128Random.next_int = comdat any

$std.math.random.Mcg128Random.next_short = comdat any

$std.math.random.Mcg128Random.next_byte = comdat any

$std.math.random.Mcg64Random.set_seed = comdat any

$std.math.random.Mcg64Random.next_bytes = comdat any

$std.math.random.Mcg64Random.next_int = comdat any

$std.math.random.Mcg64Random.next_int128 = comdat any

$std.math.random.Mcg64Random.next_long = comdat any

$std.math.random.Mcg64Random.next_short = comdat any

$std.math.random.Mcg64Random.next_byte = comdat any

$std.math.random.Mcg32Random.set_seed = comdat any

$std.math.random.Mcg32Random.next_short = comdat any

$std.math.random.Mcg32Random.next_bytes = comdat any

$std.math.random.Mcg32Random.next_int128 = comdat any

$std.math.random.Mcg32Random.next_long = comdat any

$std.math.random.Mcg32Random.next_int = comdat any

$std.math.random.Mcg32Random.next_byte = comdat any

$std.math.random.Mcg16Random.set_seed = comdat any

$std.math.random.Mcg16Random.next_byte = comdat any

$std.math.random.Mcg16Random.next_bytes = comdat any

$std.math.random.Mcg16Random.next_int128 = comdat any

$std.math.random.Mcg16Random.next_long = comdat any

$std.math.random.Mcg16Random.next_int = comdat any

$std.math.random.Mcg16Random.next_short = comdat any

$std.math.random.Msws128Random.set_seed = comdat any

$std.math.random.Msws128Random.next_int128 = comdat any

$std.math.random.Msws128Random.next_bytes = comdat any

$std.math.random.Msws128Random.next_long = comdat any

$std.math.random.Msws128Random.next_int = comdat any

$std.math.random.Msws128Random.next_short = comdat any

$std.math.random.Msws128Random.next_byte = comdat any

$std.math.random.Msws64Random.set_seed = comdat any

$std.math.random.Msws64Random.next_long = comdat any

$std.math.random.Msws64Random.next_bytes = comdat any

$std.math.random.Msws64Random.next_int128 = comdat any

$std.math.random.Msws64Random.next_int = comdat any

$std.math.random.Msws64Random.next_short = comdat any

$std.math.random.Msws64Random.next_byte = comdat any

$std.math.random.Msws32Random.set_seed = comdat any

$std.math.random.Msws32Random.next_int = comdat any

$std.math.random.Msws32Random.next_bytes = comdat any

$std.math.random.Msws32Random.next_int128 = comdat any

$std.math.random.Msws32Random.next_long = comdat any

$std.math.random.Msws32Random.next_short = comdat any

$std.math.random.Msws32Random.next_byte = comdat any

$std.math.random.Msws16Random.set_seed = comdat any

$std.math.random.Msws16Random.next_short = comdat any

$std.math.random.Msws16Random.next_bytes = comdat any

$std.math.random.Msws16Random.next_int128 = comdat any

$std.math.random.Msws16Random.next_long = comdat any

$std.math.random.Msws16Random.next_int = comdat any

$std.math.random.Msws16Random.next_byte = comdat any

$std.math.random.Msws8Random.set_seed = comdat any

$std.math.random.Msws8Random.next_byte = comdat any

$std.math.random.Msws8Random.next_bytes = comdat any

$std.math.random.Msws8Random.next_int128 = comdat any

$std.math.random.Msws8Random.next_long = comdat any

$std.math.random.Msws8Random.next_int = comdat any

$std.math.random.Msws8Random.next_short = comdat any

$std.math.random.Pcg128Random.set_seed = comdat any

$std.math.random.Pcg128Random.next_long = comdat any

$std.math.random.Pcg128Random.next_bytes = comdat any

$std.math.random.Pcg128Random.next_int128 = comdat any

$std.math.random.Pcg128Random.next_int = comdat any

$std.math.random.Pcg128Random.next_short = comdat any

$std.math.random.Pcg128Random.next_byte = comdat any

$std.math.random.Pcg64Random.set_seed = comdat any

$std.math.random.Pcg64Random.next_int = comdat any

$std.math.random.Pcg64Random.next_bytes = comdat any

$std.math.random.Pcg64Random.next_int128 = comdat any

$std.math.random.Pcg64Random.next_long = comdat any

$std.math.random.Pcg64Random.next_short = comdat any

$std.math.random.Pcg64Random.next_byte = comdat any

$std.math.random.Pcg32Random.set_seed = comdat any

$std.math.random.Pcg32Random.next_short = comdat any

$std.math.random.Pcg32Random.next_bytes = comdat any

$std.math.random.Pcg32Random.next_int128 = comdat any

$std.math.random.Pcg32Random.next_long = comdat any

$std.math.random.Pcg32Random.next_int = comdat any

$std.math.random.Pcg32Random.next_byte = comdat any

$std.math.random.Pcg16Random.set_seed = comdat any

$std.math.random.Pcg16Random.next_byte = comdat any

$std.math.random.Pcg16Random.next_bytes = comdat any

$std.math.random.Pcg16Random.next_int128 = comdat any

$std.math.random.Pcg16Random.next_long = comdat any

$std.math.random.Pcg16Random.next_int = comdat any

$std.math.random.Pcg16Random.next_short = comdat any

$std.math.random.seeder = comdat any

$std.math.random.entropy = comdat any

$std.math.random.Sfc128Random.set_seed = comdat any

$std.math.random.Sfc128Random.next_int128 = comdat any

$std.math.random.Sfc128Random.next_bytes = comdat any

$std.math.random.Sfc128Random.next_long = comdat any

$std.math.random.Sfc128Random.next_int = comdat any

$std.math.random.Sfc128Random.next_short = comdat any

$std.math.random.Sfc128Random.next_byte = comdat any

$std.math.random.Sfc64Random.set_seed = comdat any

$std.math.random.Sfc64Random.next_long = comdat any

$std.math.random.Sfc64Random.next_bytes = comdat any

$std.math.random.Sfc64Random.next_int128 = comdat any

$std.math.random.Sfc64Random.next_int = comdat any

$std.math.random.Sfc64Random.next_short = comdat any

$std.math.random.Sfc64Random.next_byte = comdat any

$std.math.random.Sfc32Random.set_seed = comdat any

$std.math.random.Sfc32Random.next_int = comdat any

$std.math.random.Sfc32Random.next_bytes = comdat any

$std.math.random.Sfc32Random.next_int128 = comdat any

$std.math.random.Sfc32Random.next_long = comdat any

$std.math.random.Sfc32Random.next_short = comdat any

$std.math.random.Sfc32Random.next_byte = comdat any

$std.math.random.Sfc16Random.set_seed = comdat any

$std.math.random.Sfc16Random.next_short = comdat any

$std.math.random.Sfc16Random.next_bytes = comdat any

$std.math.random.Sfc16Random.next_int128 = comdat any

$std.math.random.Sfc16Random.next_long = comdat any

$std.math.random.Sfc16Random.next_int = comdat any

$std.math.random.Sfc16Random.next_byte = comdat any

$std.math.random.Sfc8Random.set_seed = comdat any

$std.math.random.Sfc8Random.next_byte = comdat any

$std.math.random.Sfc8Random.next_bytes = comdat any

$std.math.random.Sfc8Random.next_int128 = comdat any

$std.math.random.Sfc8Random.next_long = comdat any

$std.math.random.Sfc8Random.next_int = comdat any

$std.math.random.Sfc8Random.next_short = comdat any

$std.math.random.SimpleRandom.set_seed = comdat any

$std.math.random.SimpleRandom.next_int = comdat any

$std.math.random.SimpleRandom.next_bytes = comdat any

$std.math.random.SimpleRandom.next_int128 = comdat any

$std.math.random.SimpleRandom.next_long = comdat any

$std.math.random.SimpleRandom.next_short = comdat any

$std.math.random.SimpleRandom.next_byte = comdat any

$std.math.random.srand = comdat any

$std.math.random.rand = comdat any

$std.math.random.rand_in_range = comdat any

$std.math.random.rnd = comdat any

$"$ct.std.math.random.Lcg128Random" = comdat any

$"$ct.uint128" = comdat any

$"$ct.std.math.random.Lcg64Random" = comdat any

$"$ct.ulong" = comdat any

$"$ct.std.math.random.Lcg32Random" = comdat any

$"$ct.uint" = comdat any

$"$ct.std.math.random.Lcg16Random" = comdat any

$"$ct.ushort" = comdat any

$"$ct.std.math.random.Mcg128Random" = comdat any

$"$ct.std.math.random.Mcg64Random" = comdat any

$"$ct.std.math.random.Mcg32Random" = comdat any

$"$ct.std.math.random.Mcg16Random" = comdat any

$"$ct.std.math.random.Msws128Random" = comdat any

$"$ct.std.math.random.Msws64Random" = comdat any

$"$ct.std.math.random.Msws32Random" = comdat any

$"$ct.std.math.random.Msws16Random" = comdat any

$"$ct.std.math.random.Msws8Random" = comdat any

$"$ct.std.math.random.Pcg128Random" = comdat any

$"$ct.std.math.random.Pcg64Random" = comdat any

$"$ct.std.math.random.Pcg32Random" = comdat any

$"$ct.std.math.random.Pcg16Random" = comdat any

$"$ct.std.math.random.Sfc128Random" = comdat any

$"$ct.a4$uint128" = comdat any

$"$ct.std.math.random.Sfc64Random" = comdat any

$"$ct.a4$ulong" = comdat any

$"$ct.std.math.random.Sfc32Random" = comdat any

$"$ct.a4$uint" = comdat any

$"$ct.std.math.random.Sfc16Random" = comdat any

$"$ct.a4$ushort" = comdat any

$"$ct.std.math.random.Sfc8Random" = comdat any

$"$ct.a4$char" = comdat any

$"$ct.char" = comdat any

$"$ct.std.math.random.SimpleRandom" = comdat any

$"$ct.long" = comdat any

$std.math.random.default_random = comdat any

$std.math.random.default_random_initialized = comdat any

$"$ct.dyn.std.math.random.Lcg128Random.set_seed" = comdat any

$"$sel.set_seed" = comdat any

$"$ct.dyn.std.math.random.Lcg128Random.next_long" = comdat any

$"$sel.next_long" = comdat any

$"$ct.dyn.std.math.random.Lcg128Random.next_bytes" = comdat any

$"$sel.next_bytes" = comdat any

$"$ct.dyn.std.math.random.Lcg128Random.next_int128" = comdat any

$"$sel.next_int128" = comdat any

$"$ct.dyn.std.math.random.Lcg128Random.next_int" = comdat any

$"$sel.next_int" = comdat any

$"$ct.dyn.std.math.random.Lcg128Random.next_short" = comdat any

$"$sel.next_short" = comdat any

$"$ct.dyn.std.math.random.Lcg128Random.next_byte" = comdat any

$"$sel.next_byte" = comdat any

$"$ct.dyn.std.math.random.Lcg64Random.set_seed" = comdat any

$"$ct.dyn.std.math.random.Lcg64Random.next_int" = comdat any

$"$ct.dyn.std.math.random.Lcg64Random.next_bytes" = comdat any

$"$ct.dyn.std.math.random.Lcg64Random.next_int128" = comdat any

$"$ct.dyn.std.math.random.Lcg64Random.next_long" = comdat any

$"$ct.dyn.std.math.random.Lcg64Random.next_short" = comdat any

$"$ct.dyn.std.math.random.Lcg64Random.next_byte" = comdat any

$"$ct.dyn.std.math.random.Lcg32Random.set_seed" = comdat any

$"$ct.dyn.std.math.random.Lcg32Random.next_short" = comdat any

$"$ct.dyn.std.math.random.Lcg32Random.next_bytes" = comdat any

$"$ct.dyn.std.math.random.Lcg32Random.next_int128" = comdat any

$"$ct.dyn.std.math.random.Lcg32Random.next_long" = comdat any

$"$ct.dyn.std.math.random.Lcg32Random.next_int" = comdat any

$"$ct.dyn.std.math.random.Lcg32Random.next_byte" = comdat any

$"$ct.dyn.std.math.random.Lcg16Random.set_seed" = comdat any

$"$ct.dyn.std.math.random.Lcg16Random.next_byte" = comdat any

$"$ct.dyn.std.math.random.Lcg16Random.next_bytes" = comdat any

$"$ct.dyn.std.math.random.Lcg16Random.next_int128" = comdat any

$"$ct.dyn.std.math.random.Lcg16Random.next_long" = comdat any

$"$ct.dyn.std.math.random.Lcg16Random.next_int" = comdat any

$"$ct.dyn.std.math.random.Lcg16Random.next_short" = comdat any

$"$ct.dyn.std.math.random.Mcg128Random.set_seed" = comdat any

$"$ct.dyn.std.math.random.Mcg128Random.next_bytes" = comdat any

$"$ct.dyn.std.math.random.Mcg128Random.next_long" = comdat any

$"$ct.dyn.std.math.random.Mcg128Random.next_int128" = comdat any

$"$ct.dyn.std.math.random.Mcg128Random.next_int" = comdat any

$"$ct.dyn.std.math.random.Mcg128Random.next_short" = comdat any

$"$ct.dyn.std.math.random.Mcg128Random.next_byte" = comdat any

$"$ct.dyn.std.math.random.Mcg64Random.set_seed" = comdat any

$"$ct.dyn.std.math.random.Mcg64Random.next_bytes" = comdat any

$"$ct.dyn.std.math.random.Mcg64Random.next_int" = comdat any

$"$ct.dyn.std.math.random.Mcg64Random.next_int128" = comdat any

$"$ct.dyn.std.math.random.Mcg64Random.next_long" = comdat any

$"$ct.dyn.std.math.random.Mcg64Random.next_short" = comdat any

$"$ct.dyn.std.math.random.Mcg64Random.next_byte" = comdat any

$"$ct.dyn.std.math.random.Mcg32Random.set_seed" = comdat any

$"$ct.dyn.std.math.random.Mcg32Random.next_short" = comdat any

$"$ct.dyn.std.math.random.Mcg32Random.next_bytes" = comdat any

$"$ct.dyn.std.math.random.Mcg32Random.next_int128" = comdat any

$"$ct.dyn.std.math.random.Mcg32Random.next_long" = comdat any

$"$ct.dyn.std.math.random.Mcg32Random.next_int" = comdat any

$"$ct.dyn.std.math.random.Mcg32Random.next_byte" = comdat any

$"$ct.dyn.std.math.random.Mcg16Random.set_seed" = comdat any

$"$ct.dyn.std.math.random.Mcg16Random.next_byte" = comdat any

$"$ct.dyn.std.math.random.Mcg16Random.next_bytes" = comdat any

$"$ct.dyn.std.math.random.Mcg16Random.next_int128" = comdat any

$"$ct.dyn.std.math.random.Mcg16Random.next_long" = comdat any

$"$ct.dyn.std.math.random.Mcg16Random.next_int" = comdat any

$"$ct.dyn.std.math.random.Mcg16Random.next_short" = comdat any

$"$ct.dyn.std.math.random.Msws128Random.set_seed" = comdat any

$"$ct.dyn.std.math.random.Msws128Random.next_int128" = comdat any

$"$ct.dyn.std.math.random.Msws128Random.next_bytes" = comdat any

$"$ct.dyn.std.math.random.Msws128Random.next_long" = comdat any

$"$ct.dyn.std.math.random.Msws128Random.next_int" = comdat any

$"$ct.dyn.std.math.random.Msws128Random.next_short" = comdat any

$"$ct.dyn.std.math.random.Msws128Random.next_byte" = comdat any

$"$ct.dyn.std.math.random.Msws64Random.set_seed" = comdat any

$"$ct.dyn.std.math.random.Msws64Random.next_long" = comdat any

$"$ct.dyn.std.math.random.Msws64Random.next_bytes" = comdat any

$"$ct.dyn.std.math.random.Msws64Random.next_int128" = comdat any

$"$ct.dyn.std.math.random.Msws64Random.next_int" = comdat any

$"$ct.dyn.std.math.random.Msws64Random.next_short" = comdat any

$"$ct.dyn.std.math.random.Msws64Random.next_byte" = comdat any

$"$ct.dyn.std.math.random.Msws32Random.set_seed" = comdat any

$"$ct.dyn.std.math.random.Msws32Random.next_int" = comdat any

$"$ct.dyn.std.math.random.Msws32Random.next_bytes" = comdat any

$"$ct.dyn.std.math.random.Msws32Random.next_int128" = comdat any

$"$ct.dyn.std.math.random.Msws32Random.next_long" = comdat any

$"$ct.dyn.std.math.random.Msws32Random.next_short" = comdat any

$"$ct.dyn.std.math.random.Msws32Random.next_byte" = comdat any

$"$ct.dyn.std.math.random.Msws16Random.set_seed" = comdat any

$"$ct.dyn.std.math.random.Msws16Random.next_short" = comdat any

$"$ct.dyn.std.math.random.Msws16Random.next_bytes" = comdat any

$"$ct.dyn.std.math.random.Msws16Random.next_int128" = comdat any

$"$ct.dyn.std.math.random.Msws16Random.next_long" = comdat any

$"$ct.dyn.std.math.random.Msws16Random.next_int" = comdat any

$"$ct.dyn.std.math.random.Msws16Random.next_byte" = comdat any

$"$ct.dyn.std.math.random.Msws8Random.set_seed" = comdat any

$"$ct.dyn.std.math.random.Msws8Random.next_byte" = comdat any

$"$ct.dyn.std.math.random.Msws8Random.next_bytes" = comdat any

$"$ct.dyn.std.math.random.Msws8Random.next_int128" = comdat any

$"$ct.dyn.std.math.random.Msws8Random.next_long" = comdat any

$"$ct.dyn.std.math.random.Msws8Random.next_int" = comdat any

$"$ct.dyn.std.math.random.Msws8Random.next_short" = comdat any

$"$ct.dyn.std.math.random.Pcg128Random.set_seed" = comdat any

$"$ct.dyn.std.math.random.Pcg128Random.next_long" = comdat any

$"$ct.dyn.std.math.random.Pcg128Random.next_bytes" = comdat any

$"$ct.dyn.std.math.random.Pcg128Random.next_int128" = comdat any

$"$ct.dyn.std.math.random.Pcg128Random.next_int" = comdat any

$"$ct.dyn.std.math.random.Pcg128Random.next_short" = comdat any

$"$ct.dyn.std.math.random.Pcg128Random.next_byte" = comdat any

$"$ct.dyn.std.math.random.Pcg64Random.set_seed" = comdat any

$"$ct.dyn.std.math.random.Pcg64Random.next_int" = comdat any

$"$ct.dyn.std.math.random.Pcg64Random.next_bytes" = comdat any

$"$ct.dyn.std.math.random.Pcg64Random.next_int128" = comdat any

$"$ct.dyn.std.math.random.Pcg64Random.next_long" = comdat any

$"$ct.dyn.std.math.random.Pcg64Random.next_short" = comdat any

$"$ct.dyn.std.math.random.Pcg64Random.next_byte" = comdat any

$"$ct.dyn.std.math.random.Pcg32Random.set_seed" = comdat any

$"$ct.dyn.std.math.random.Pcg32Random.next_short" = comdat any

$"$ct.dyn.std.math.random.Pcg32Random.next_bytes" = comdat any

$"$ct.dyn.std.math.random.Pcg32Random.next_int128" = comdat any

$"$ct.dyn.std.math.random.Pcg32Random.next_long" = comdat any

$"$ct.dyn.std.math.random.Pcg32Random.next_int" = comdat any

$"$ct.dyn.std.math.random.Pcg32Random.next_byte" = comdat any

$"$ct.dyn.std.math.random.Pcg16Random.set_seed" = comdat any

$"$ct.dyn.std.math.random.Pcg16Random.next_byte" = comdat any

$"$ct.dyn.std.math.random.Pcg16Random.next_bytes" = comdat any

$"$ct.dyn.std.math.random.Pcg16Random.next_int128" = comdat any

$"$ct.dyn.std.math.random.Pcg16Random.next_long" = comdat any

$"$ct.dyn.std.math.random.Pcg16Random.next_int" = comdat any

$"$ct.dyn.std.math.random.Pcg16Random.next_short" = comdat any

$"$ct.dyn.std.math.random.Sfc128Random.set_seed" = comdat any

$"$ct.dyn.std.math.random.Sfc128Random.next_int128" = comdat any

$"$ct.dyn.std.math.random.Sfc128Random.next_bytes" = comdat any

$"$ct.dyn.std.math.random.Sfc128Random.next_long" = comdat any

$"$ct.dyn.std.math.random.Sfc128Random.next_int" = comdat any

$"$ct.dyn.std.math.random.Sfc128Random.next_short" = comdat any

$"$ct.dyn.std.math.random.Sfc128Random.next_byte" = comdat any

$"$ct.dyn.std.math.random.Sfc64Random.set_seed" = comdat any

$"$ct.dyn.std.math.random.Sfc64Random.next_long" = comdat any

$"$ct.dyn.std.math.random.Sfc64Random.next_bytes" = comdat any

$"$ct.dyn.std.math.random.Sfc64Random.next_int128" = comdat any

$"$ct.dyn.std.math.random.Sfc64Random.next_int" = comdat any

$"$ct.dyn.std.math.random.Sfc64Random.next_short" = comdat any

$"$ct.dyn.std.math.random.Sfc64Random.next_byte" = comdat any

$"$ct.dyn.std.math.random.Sfc32Random.set_seed" = comdat any

$"$ct.dyn.std.math.random.Sfc32Random.next_int" = comdat any

$"$ct.dyn.std.math.random.Sfc32Random.next_bytes" = comdat any

$"$ct.dyn.std.math.random.Sfc32Random.next_int128" = comdat any

$"$ct.dyn.std.math.random.Sfc32Random.next_long" = comdat any

$"$ct.dyn.std.math.random.Sfc32Random.next_short" = comdat any

$"$ct.dyn.std.math.random.Sfc32Random.next_byte" = comdat any

$"$ct.dyn.std.math.random.Sfc16Random.set_seed" = comdat any

$"$ct.dyn.std.math.random.Sfc16Random.next_short" = comdat any

$"$ct.dyn.std.math.random.Sfc16Random.next_bytes" = comdat any

$"$ct.dyn.std.math.random.Sfc16Random.next_int128" = comdat any

$"$ct.dyn.std.math.random.Sfc16Random.next_long" = comdat any

$"$ct.dyn.std.math.random.Sfc16Random.next_int" = comdat any

$"$ct.dyn.std.math.random.Sfc16Random.next_byte" = comdat any

$"$ct.dyn.std.math.random.Sfc8Random.set_seed" = comdat any

$"$ct.dyn.std.math.random.Sfc8Random.next_byte" = comdat any

$"$ct.dyn.std.math.random.Sfc8Random.next_bytes" = comdat any

$"$ct.dyn.std.math.random.Sfc8Random.next_int128" = comdat any

$"$ct.dyn.std.math.random.Sfc8Random.next_long" = comdat any

$"$ct.dyn.std.math.random.Sfc8Random.next_int" = comdat any

$"$ct.dyn.std.math.random.Sfc8Random.next_short" = comdat any

$"$ct.dyn.std.math.random.SimpleRandom.set_seed" = comdat any

$"$ct.dyn.std.math.random.SimpleRandom.next_int" = comdat any

$"$ct.dyn.std.math.random.SimpleRandom.next_bytes" = comdat any

$"$ct.dyn.std.math.random.SimpleRandom.next_int128" = comdat any

$"$ct.dyn.std.math.random.SimpleRandom.next_long" = comdat any

$"$ct.dyn.std.math.random.SimpleRandom.next_short" = comdat any

$"$ct.dyn.std.math.random.SimpleRandom.next_byte" = comdat any

@"$ct.std.math.random.Lcg128Random" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 16, i64 ptrtoint (ptr @"$ct.uint128" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.uint128" = linkonce global %.introspect { i8 3, i64 0, ptr null, i64 16, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.Lcg64Random" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 8, i64 ptrtoint (ptr @"$ct.ulong" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.ulong" = linkonce global %.introspect { i8 3, i64 0, ptr null, i64 8, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.Lcg32Random" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 4, i64 ptrtoint (ptr @"$ct.uint" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.uint" = linkonce global %.introspect { i8 3, i64 0, ptr null, i64 4, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.Lcg16Random" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 2, i64 ptrtoint (ptr @"$ct.ushort" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.ushort" = linkonce global %.introspect { i8 3, i64 0, ptr null, i64 2, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.Mcg128Random" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 16, i64 ptrtoint (ptr @"$ct.uint128" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.Mcg64Random" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 8, i64 ptrtoint (ptr @"$ct.ulong" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.Mcg32Random" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 4, i64 ptrtoint (ptr @"$ct.uint" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.Mcg16Random" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 2, i64 ptrtoint (ptr @"$ct.ushort" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.Msws128Random" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 64, i64 0, i64 4, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.Msws64Random" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 32, i64 0, i64 4, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.Msws32Random" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 16, i64 0, i64 4, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.Msws16Random" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 8, i64 0, i64 4, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.Msws8Random" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 4, i64 0, i64 4, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.Pcg128Random" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 16, i64 ptrtoint (ptr @"$ct.uint128" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.Pcg64Random" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 8, i64 ptrtoint (ptr @"$ct.ulong" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.Pcg32Random" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 4, i64 ptrtoint (ptr @"$ct.uint" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.Pcg16Random" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 2, i64 ptrtoint (ptr @"$ct.ushort" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.Sfc128Random" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 64, i64 ptrtoint (ptr @"$ct.a4$uint128" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.a4$uint128" = linkonce global %.introspect { i8 15, i64 0, ptr null, i64 64, i64 ptrtoint (ptr @"$ct.uint128" to i64), i64 4, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.Sfc64Random" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 32, i64 ptrtoint (ptr @"$ct.a4$ulong" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.a4$ulong" = linkonce global %.introspect { i8 15, i64 0, ptr null, i64 32, i64 ptrtoint (ptr @"$ct.ulong" to i64), i64 4, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.Sfc32Random" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 16, i64 ptrtoint (ptr @"$ct.a4$uint" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.a4$uint" = linkonce global %.introspect { i8 15, i64 0, ptr null, i64 16, i64 ptrtoint (ptr @"$ct.uint" to i64), i64 4, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.Sfc16Random" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 8, i64 ptrtoint (ptr @"$ct.a4$ushort" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.a4$ushort" = linkonce global %.introspect { i8 15, i64 0, ptr null, i64 8, i64 ptrtoint (ptr @"$ct.ushort" to i64), i64 4, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.Sfc8Random" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 4, i64 ptrtoint (ptr @"$ct.a4$char" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.a4$char" = linkonce global %.introspect { i8 15, i64 0, ptr null, i64 4, i64 ptrtoint (ptr @"$ct.char" to i64), i64 4, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.char" = linkonce global %.introspect { i8 3, i64 0, ptr null, i64 1, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.SimpleRandom" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 8, i64 ptrtoint (ptr @"$ct.ulong" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@std.math.random.ODD_PHI128.19132 = internal unnamed_addr constant i128 -129976298391535590297638237547755878347, align 16, !dbg !0
@std.math.random.ODD_PHI64.19133 = internal unnamed_addr constant i64 -7046029254386353131, align 8, !dbg !4
@std.math.random.ODD_PHI32.19134 = internal unnamed_addr constant i32 -1640531527, align 4, !dbg !7
@std.math.random.ODD_PHI16.19135 = internal unnamed_addr constant i32 40503, align 4, !dbg !10
@std.math.random.MUL_LCG128.19136 = internal unnamed_addr constant i128 -48899967401452674293065485854872568811, align 16, !dbg !12
@std.math.random.MUL_LCG64.19137 = internal unnamed_addr constant i64 -3372029247567499371, align 8, !dbg !14
@std.math.random.MUL_LCG32.19138 = internal unnamed_addr constant i32 -1856014347, align 4, !dbg !16
@std.math.random.MUL_LCG16.19139 = internal unnamed_addr constant i32 37213, align 4, !dbg !18
@.panic_msg = internal constant [63 x i8] c"Reference parameter 'self' was passed a null pointer argument.\00", align 1
@.file = internal constant [12 x i8] c"math.lcg.c3\00", align 1
@.func = internal constant [9 x i8] c"set_seed\00", align 1
@std.core.builtin.panic = external global ptr, align 8
@.panic_msg.8 = internal constant [46 x i8] c"Dereference of null pointer, 'self' was null.\00", align 1
@.panic_msg.9 = internal constant [95 x i8] c"Unaligned access: ptr %% %s = %s, use @unaligned_load / @unaligned_store for unaligned access.\00", align 1
@.func.10 = internal constant [10 x i8] c"next_long\00", align 1
@.panic_msg.11 = internal constant [43 x i8] c"Dereference of null pointer, 's' was null.\00", align 1
@.func.12 = internal constant [11 x i8] c"next_bytes\00", align 1
@.panic_msg.13 = internal constant [35 x i8] c"@require \22bytes.len > 0\22 violated.\00", align 1
@.panic_msg.14 = internal constant [44 x i8] c"Negative value (%d) given for slice length.\00", align 1
@.file.15 = internal constant [10 x i8] c"random.c3\00", align 1
@.panic_msg.16 = internal constant [62 x i8] c"Index exceeds array length (array had size %d, index was %d).\00", align 1
@.panic_msg.17 = internal constant [39 x i8] c"Slice copy length mismatch (%d != %d).\00", align 1
@"$ct.long" = linkonce global %.introspect { i8 2, i64 0, ptr null, i64 8, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@.panic_msg.18 = internal constant [61 x i8] c"End index out of bounds (end index of %d exceeds size of %d)\00", align 1
@.str = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.19 = private unnamed_addr constant [12 x i8] c"math.lcg.c3\00", align 1
@.str.20 = private unnamed_addr constant [24 x i8] c"Lcg128Random.next_bytes\00", align 1
@.func.21 = internal constant [12 x i8] c"next_int128\00", align 1
@.func.22 = internal constant [9 x i8] c"next_int\00", align 1
@.func.23 = internal constant [11 x i8] c"next_short\00", align 1
@.func.24 = internal constant [10 x i8] c"next_byte\00", align 1
@.str.25 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.26 = private unnamed_addr constant [12 x i8] c"math.lcg.c3\00", align 1
@.str.27 = private unnamed_addr constant [23 x i8] c"Lcg64Random.next_bytes\00", align 1
@.str.28 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.29 = private unnamed_addr constant [12 x i8] c"math.lcg.c3\00", align 1
@.str.30 = private unnamed_addr constant [23 x i8] c"Lcg32Random.next_bytes\00", align 1
@.str.31 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.32 = private unnamed_addr constant [12 x i8] c"math.lcg.c3\00", align 1
@.str.33 = private unnamed_addr constant [23 x i8] c"Lcg16Random.next_bytes\00", align 1
@std.math.random.MUL_MCG128.19216 = internal unnamed_addr constant i128 -129976298391535590297638237547755878347, align 16, !dbg !20
@std.math.random.MUL_MCG64.19217 = internal unnamed_addr constant i64 -1065810590584100411, align 8, !dbg !23
@std.math.random.MUL_MCG32.19218 = internal unnamed_addr constant i32 -1814600227, align 4, !dbg !25
@std.math.random.MUL_MCG16.19219 = internal unnamed_addr constant i32 37845, align 4, !dbg !27
@.file.37 = internal constant [12 x i8] c"math.mcg.c3\00", align 1
@.str.38 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.39 = private unnamed_addr constant [12 x i8] c"math.mcg.c3\00", align 1
@.str.40 = private unnamed_addr constant [24 x i8] c"Mcg128Random.next_bytes\00", align 1
@.str.41 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.42 = private unnamed_addr constant [12 x i8] c"math.mcg.c3\00", align 1
@.str.43 = private unnamed_addr constant [23 x i8] c"Mcg64Random.next_bytes\00", align 1
@.str.44 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.45 = private unnamed_addr constant [12 x i8] c"math.mcg.c3\00", align 1
@.str.46 = private unnamed_addr constant [23 x i8] c"Mcg32Random.next_bytes\00", align 1
@.str.47 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.48 = private unnamed_addr constant [12 x i8] c"math.mcg.c3\00", align 1
@.str.49 = private unnamed_addr constant [23 x i8] c"Mcg16Random.next_bytes\00", align 1
@std.math.random.ODD_PHI128.19296 = internal unnamed_addr constant i128 -129976298391535590297638237547755878347, align 16, !dbg !29
@std.math.random.ODD_PHI64.19297 = internal unnamed_addr constant i64 -7046029254386353131, align 8, !dbg !32
@std.math.random.ODD_PHI32.19298 = internal unnamed_addr constant i32 -1640531527, align 4, !dbg !34
@std.math.random.ODD_PHI16.19299 = internal unnamed_addr constant i32 40503, align 4, !dbg !36
@std.math.random.ODD_PHI8.19300 = internal unnamed_addr constant i32 159, align 4, !dbg !38
@.file.54 = internal constant [13 x i8] c"math.msws.c3\00", align 1
@.panic_msg.55 = internal constant [55 x i8] c"Dereference of null pointer, '($Type*)&expr' was null.\00", align 1
@.file.56 = internal constant [11 x i8] c"builtin.c3\00", align 1
@.str.57 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.58 = private unnamed_addr constant [13 x i8] c"math.msws.c3\00", align 1
@.str.59 = private unnamed_addr constant [25 x i8] c"Msws128Random.next_bytes\00", align 1
@.str.60 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.61 = private unnamed_addr constant [13 x i8] c"math.msws.c3\00", align 1
@.str.62 = private unnamed_addr constant [24 x i8] c"Msws64Random.next_bytes\00", align 1
@.str.63 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.64 = private unnamed_addr constant [13 x i8] c"math.msws.c3\00", align 1
@.str.65 = private unnamed_addr constant [24 x i8] c"Msws32Random.next_bytes\00", align 1
@.str.66 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.67 = private unnamed_addr constant [13 x i8] c"math.msws.c3\00", align 1
@.str.68 = private unnamed_addr constant [24 x i8] c"Msws16Random.next_bytes\00", align 1
@.str.69 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.70 = private unnamed_addr constant [13 x i8] c"math.msws.c3\00", align 1
@.str.71 = private unnamed_addr constant [23 x i8] c"Msws8Random.next_bytes\00", align 1
@std.math.random.ODD_PHI128.19416 = internal unnamed_addr constant i128 -129976298391535590297638237547755878347, align 16, !dbg !40
@std.math.random.ODD_PHI64.19417 = internal unnamed_addr constant i64 -7046029254386353131, align 8, !dbg !43
@std.math.random.ODD_PHI32.19418 = internal unnamed_addr constant i32 -1640531527, align 4, !dbg !45
@std.math.random.ODD_PHI16.19419 = internal unnamed_addr constant i32 40503, align 4, !dbg !47
@std.math.random.MUL_LCG128.19420 = internal unnamed_addr constant i128 -48899967401452674293065485854872568811, align 16, !dbg !49
@std.math.random.MUL_LCG64.19421 = internal unnamed_addr constant i64 -3372029247567499371, align 8, !dbg !51
@std.math.random.MUL_LCG32.19422 = internal unnamed_addr constant i32 -1856014347, align 4, !dbg !53
@std.math.random.MUL_LCG16.19423 = internal unnamed_addr constant i32 37213, align 4, !dbg !55
@.file.79 = internal constant [12 x i8] c"math.pcg.c3\00", align 1
@next_long.ROT_SHIFT = internal unnamed_addr constant i32 58, align 4, !dbg !57
@.str.80 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.81 = private unnamed_addr constant [12 x i8] c"math.pcg.c3\00", align 1
@.str.82 = private unnamed_addr constant [24 x i8] c"Pcg128Random.next_bytes\00", align 1
@next_int.ROT_SHIFT = internal unnamed_addr constant i32 27, align 4, !dbg !60
@.str.83 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.84 = private unnamed_addr constant [12 x i8] c"math.pcg.c3\00", align 1
@.str.85 = private unnamed_addr constant [23 x i8] c"Pcg64Random.next_bytes\00", align 1
@next_short.ROT_SHIFT = internal unnamed_addr constant i32 12, align 4, !dbg !62
@.str.86 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.87 = private unnamed_addr constant [12 x i8] c"math.pcg.c3\00", align 1
@.str.88 = private unnamed_addr constant [23 x i8] c"Pcg32Random.next_bytes\00", align 1
@next_byte.ROT_SHIFT = internal unnamed_addr constant i32 5, align 4, !dbg !64
@.str.89 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.90 = private unnamed_addr constant [12 x i8] c"math.pcg.c3\00", align 1
@.str.91 = private unnamed_addr constant [23 x i8] c"Pcg16Random.next_bytes\00", align 1
@std.math.random.ODD_PHI64.19510 = internal unnamed_addr constant i64 -7046029254386353131, align 8, !dbg !66
@std.math.random.MUL_MCG64.19511 = internal unnamed_addr constant i64 -1065810590584100411, align 8, !dbg !69
@std.math.random.MUL_LCG64.19512 = internal unnamed_addr constant i64 -3372029247567499371, align 8, !dbg !71
@.file.94 = internal constant [7 x i8] c"mem.c3\00", align 1
@.func.95 = internal constant [7 x i8] c"seeder\00", align 1
@.file.96 = internal constant [15 x i8] c"math.seeder.c3\00", align 1
@.panic_msg.97 = internal constant [11 x i8] c"% by zero.\00", align 1
@.panic_msg.98 = internal constant [60 x i8] c"Array index out of bounds (array had size %d, index was %d)\00", align 1
@.panic_msg.99 = internal constant [39 x i8] c"Negative array indexing (index was %d)\00", align 1
@.panic_msg.100 = internal constant [65 x i8] c"Dereference of null pointer, '(char[8]*)&input[i * 8]' was null.\00", align 1
@.panic_msg.101 = internal constant [38 x i8] c"Passed null to a ref ('&') parameter.\00", align 1
@.panic_msg.102 = internal constant [95 x i8] c"@require \22src != null || len == 0\22 violated: 'Copying a null with non-zero length is invalid'.\00", align 1
@.panic_msg.103 = internal constant [96 x i8] c"@require \22len == 0 || dst + len <= src || src + len <= dst\22 violated: 'Ranges may not overlap'.\00", align 1
@entropy.random_int = internal unnamed_addr global i32 0, align 4, !dbg !73
@.str.104 = private unnamed_addr constant [9 x i8] c"15:10:09\00", align 1
@.func.105 = internal constant [8 x i8] c"entropy\00", align 1
@std.core.mem.allocator.thread_allocator = external thread_local global %any, align 8
@std.math.random.ODD_PHI128.19540 = internal unnamed_addr constant i128 -129976298391535590297638237547755878347, align 16, !dbg !75
@std.math.random.ODD_PHI64.19541 = internal unnamed_addr constant i64 -7046029254386353131, align 8, !dbg !78
@std.math.random.ODD_PHI32.19542 = internal unnamed_addr constant i32 -1640531527, align 4, !dbg !80
@std.math.random.ODD_PHI16.19543 = internal unnamed_addr constant i32 40503, align 4, !dbg !82
@std.math.random.ODD_PHI8.19544 = internal unnamed_addr constant i32 159, align 4, !dbg !84
@.file.110 = internal constant [12 x i8] c"math.sfc.c3\00", align 1
@.str.111 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.112 = private unnamed_addr constant [12 x i8] c"math.sfc.c3\00", align 1
@.str.113 = private unnamed_addr constant [24 x i8] c"Sfc128Random.next_bytes\00", align 1
@.str.114 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.115 = private unnamed_addr constant [12 x i8] c"math.sfc.c3\00", align 1
@.str.116 = private unnamed_addr constant [23 x i8] c"Sfc64Random.next_bytes\00", align 1
@.panic_msg.117 = internal constant [62 x i8] c"Reference parameter 'sfc' was passed a null pointer argument.\00", align 1
@.str.118 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.119 = private unnamed_addr constant [12 x i8] c"math.sfc.c3\00", align 1
@.str.120 = private unnamed_addr constant [23 x i8] c"Sfc32Random.next_bytes\00", align 1
@.panic_msg.121 = internal constant [63 x i8] c"Reference parameter 'seed' was passed a null pointer argument.\00", align 1
@.str.122 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.123 = private unnamed_addr constant [12 x i8] c"math.sfc.c3\00", align 1
@.str.124 = private unnamed_addr constant [23 x i8] c"Sfc16Random.next_bytes\00", align 1
@.str.125 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.126 = private unnamed_addr constant [12 x i8] c"math.sfc.c3\00", align 1
@.str.127 = private unnamed_addr constant [22 x i8] c"Sfc8Random.next_bytes\00", align 1
@std.math.random.SIMPLE_RANDOM_MULTIPLIER.19661 = internal unnamed_addr constant i64 25214903917, align 8, !dbg !86
@std.math.random.SIMPLE_RANDOM_ADDEND.19662 = internal unnamed_addr constant i64 11, align 8, !dbg !90
@std.math.random.SIMPLE_RANDOM_MASK.19663 = internal unnamed_addr constant i64 281474976710655, align 8, !dbg !92
@.file.130 = internal constant [22 x i8] c"math.simple_random.c3\00", align 1
@.str.131 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.132 = private unnamed_addr constant [22 x i8] c"math.simple_random.c3\00", align 1
@.str.133 = private unnamed_addr constant [24 x i8] c"SimpleRandom.next_bytes\00", align 1
@std.math.random.default_random = weak_odr thread_local global [4 x i64] zeroinitializer, comdat, align 16, !dbg !94
@std.math.random.default_random_initialized = weak_odr thread_local local_unnamed_addr global i8 0, comdat, align 1, !dbg !101
@.panic_msg.135 = internal constant [39 x i8] c"@require \22is_random(random)\22 violated.\00", align 1
@.func.136 = internal constant [5 x i8] c"rand\00", align 1
@.panic_msg.137 = internal constant [31 x i8] c"@require \22range > 0\22 violated.\00", align 1
@.panic_msg.138 = internal constant [36 x i8] c"Shift amount out of range (was %s).\00", align 1
@.panic_msg.139 = internal constant [32 x i8] c"@require \22max >= min\22 violated.\00", align 1
@.func.140 = internal constant [14 x i8] c"rand_in_range\00", align 1
@.func.141 = internal constant [4 x i8] c"rnd\00", align 1
@"$ct.dyn.std.math.random.Lcg128Random.set_seed" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Lcg128Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$sel.set_seed" = linkonce_odr constant [9 x i8] c"set_seed\00", comdat, align 1
@"$ct.dyn.std.math.random.Lcg128Random.next_long" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Lcg128Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$sel.next_long" = linkonce_odr constant [10 x i8] c"next_long\00", comdat, align 1
@"$ct.dyn.std.math.random.Lcg128Random.next_bytes" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Lcg128Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$sel.next_bytes" = linkonce_odr constant [11 x i8] c"next_bytes\00", comdat, align 1
@"$ct.dyn.std.math.random.Lcg128Random.next_int128" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Lcg128Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$sel.next_int128" = linkonce_odr constant [12 x i8] c"next_int128\00", comdat, align 1
@"$ct.dyn.std.math.random.Lcg128Random.next_int" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Lcg128Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$sel.next_int" = linkonce_odr constant [9 x i8] c"next_int\00", comdat, align 1
@"$ct.dyn.std.math.random.Lcg128Random.next_short" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Lcg128Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$sel.next_short" = linkonce_odr constant [11 x i8] c"next_short\00", comdat, align 1
@"$ct.dyn.std.math.random.Lcg128Random.next_byte" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Lcg128Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$sel.next_byte" = linkonce_odr constant [10 x i8] c"next_byte\00", comdat, align 1
@"$ct.dyn.std.math.random.Lcg64Random.set_seed" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Lcg64Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Lcg64Random.next_int" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Lcg64Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Lcg64Random.next_bytes" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Lcg64Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Lcg64Random.next_int128" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Lcg64Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Lcg64Random.next_long" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Lcg64Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Lcg64Random.next_short" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Lcg64Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Lcg64Random.next_byte" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Lcg64Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Lcg32Random.set_seed" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Lcg32Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Lcg32Random.next_short" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Lcg32Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Lcg32Random.next_bytes" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Lcg32Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Lcg32Random.next_int128" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Lcg32Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Lcg32Random.next_long" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Lcg32Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Lcg32Random.next_int" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Lcg32Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Lcg32Random.next_byte" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Lcg32Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Lcg16Random.set_seed" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Lcg16Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Lcg16Random.next_byte" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Lcg16Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Lcg16Random.next_bytes" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Lcg16Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Lcg16Random.next_int128" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Lcg16Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Lcg16Random.next_long" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Lcg16Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Lcg16Random.next_int" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Lcg16Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Lcg16Random.next_short" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Lcg16Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Mcg128Random.set_seed" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Mcg128Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Mcg128Random.next_bytes" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Mcg128Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Mcg128Random.next_long" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Mcg128Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Mcg128Random.next_int128" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Mcg128Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Mcg128Random.next_int" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Mcg128Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Mcg128Random.next_short" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Mcg128Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Mcg128Random.next_byte" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Mcg128Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Mcg64Random.set_seed" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Mcg64Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Mcg64Random.next_bytes" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Mcg64Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Mcg64Random.next_int" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Mcg64Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Mcg64Random.next_int128" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Mcg64Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Mcg64Random.next_long" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Mcg64Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Mcg64Random.next_short" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Mcg64Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Mcg64Random.next_byte" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Mcg64Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Mcg32Random.set_seed" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Mcg32Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Mcg32Random.next_short" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Mcg32Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Mcg32Random.next_bytes" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Mcg32Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Mcg32Random.next_int128" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Mcg32Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Mcg32Random.next_long" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Mcg32Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Mcg32Random.next_int" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Mcg32Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Mcg32Random.next_byte" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Mcg32Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Mcg16Random.set_seed" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Mcg16Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Mcg16Random.next_byte" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Mcg16Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Mcg16Random.next_bytes" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Mcg16Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Mcg16Random.next_int128" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Mcg16Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Mcg16Random.next_long" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Mcg16Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Mcg16Random.next_int" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Mcg16Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Mcg16Random.next_short" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Mcg16Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws128Random.set_seed" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Msws128Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws128Random.next_int128" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Msws128Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws128Random.next_bytes" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Msws128Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws128Random.next_long" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Msws128Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws128Random.next_int" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Msws128Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws128Random.next_short" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Msws128Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws128Random.next_byte" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Msws128Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws64Random.set_seed" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Msws64Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws64Random.next_long" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Msws64Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws64Random.next_bytes" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Msws64Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws64Random.next_int128" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Msws64Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws64Random.next_int" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Msws64Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws64Random.next_short" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Msws64Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws64Random.next_byte" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Msws64Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws32Random.set_seed" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Msws32Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws32Random.next_int" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Msws32Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws32Random.next_bytes" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Msws32Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws32Random.next_int128" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Msws32Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws32Random.next_long" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Msws32Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws32Random.next_short" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Msws32Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws32Random.next_byte" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Msws32Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws16Random.set_seed" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Msws16Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws16Random.next_short" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Msws16Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws16Random.next_bytes" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Msws16Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws16Random.next_int128" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Msws16Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws16Random.next_long" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Msws16Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws16Random.next_int" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Msws16Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws16Random.next_byte" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Msws16Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws8Random.set_seed" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Msws8Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws8Random.next_byte" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Msws8Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws8Random.next_bytes" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Msws8Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws8Random.next_int128" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Msws8Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws8Random.next_long" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Msws8Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws8Random.next_int" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Msws8Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws8Random.next_short" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Msws8Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Pcg128Random.set_seed" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Pcg128Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Pcg128Random.next_long" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Pcg128Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Pcg128Random.next_bytes" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Pcg128Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Pcg128Random.next_int128" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Pcg128Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Pcg128Random.next_int" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Pcg128Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Pcg128Random.next_short" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Pcg128Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Pcg128Random.next_byte" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Pcg128Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Pcg64Random.set_seed" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Pcg64Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Pcg64Random.next_int" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Pcg64Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Pcg64Random.next_bytes" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Pcg64Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Pcg64Random.next_int128" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Pcg64Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Pcg64Random.next_long" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Pcg64Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Pcg64Random.next_short" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Pcg64Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Pcg64Random.next_byte" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Pcg64Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Pcg32Random.set_seed" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Pcg32Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Pcg32Random.next_short" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Pcg32Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Pcg32Random.next_bytes" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Pcg32Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Pcg32Random.next_int128" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Pcg32Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Pcg32Random.next_long" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Pcg32Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Pcg32Random.next_int" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Pcg32Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Pcg32Random.next_byte" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Pcg32Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Pcg16Random.set_seed" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Pcg16Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Pcg16Random.next_byte" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Pcg16Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Pcg16Random.next_bytes" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Pcg16Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Pcg16Random.next_int128" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Pcg16Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Pcg16Random.next_long" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Pcg16Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Pcg16Random.next_int" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Pcg16Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Pcg16Random.next_short" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Pcg16Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc128Random.set_seed" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Sfc128Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc128Random.next_int128" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Sfc128Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc128Random.next_bytes" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Sfc128Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc128Random.next_long" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Sfc128Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc128Random.next_int" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Sfc128Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc128Random.next_short" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Sfc128Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc128Random.next_byte" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Sfc128Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc64Random.set_seed" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Sfc64Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc64Random.next_long" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Sfc64Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc64Random.next_bytes" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Sfc64Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc64Random.next_int128" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Sfc64Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc64Random.next_int" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Sfc64Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc64Random.next_short" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Sfc64Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc64Random.next_byte" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Sfc64Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc32Random.set_seed" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Sfc32Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc32Random.next_int" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Sfc32Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc32Random.next_bytes" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Sfc32Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc32Random.next_int128" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Sfc32Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc32Random.next_long" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Sfc32Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc32Random.next_short" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Sfc32Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc32Random.next_byte" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Sfc32Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc16Random.set_seed" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Sfc16Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc16Random.next_short" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Sfc16Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc16Random.next_bytes" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Sfc16Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc16Random.next_int128" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Sfc16Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc16Random.next_long" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Sfc16Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc16Random.next_int" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Sfc16Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc16Random.next_byte" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Sfc16Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc8Random.set_seed" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Sfc8Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc8Random.next_byte" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Sfc8Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc8Random.next_bytes" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Sfc8Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc8Random.next_int128" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Sfc8Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc8Random.next_long" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Sfc8Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc8Random.next_int" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Sfc8Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc8Random.next_short" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Sfc8Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.SimpleRandom.set_seed" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.SimpleRandom.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.SimpleRandom.next_int" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.SimpleRandom.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.SimpleRandom.next_bytes" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.SimpleRandom.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.SimpleRandom.next_int128" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.SimpleRandom.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.SimpleRandom.next_long" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.SimpleRandom.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.SimpleRandom.next_short" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.SimpleRandom.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.SimpleRandom.next_byte" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.SimpleRandom.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@llvm.global_ctors = appending global [1 x { i32, ptr, ptr }] [{ i32, ptr, ptr } { i32 1, ptr @.c3_dynamic_register, ptr null }]

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.math.random.Lcg128Random.set_seed(ptr %0, ptr align 8 %1) #0 comdat !dbg !112 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %input = alloca %"char[]", align 8
  %return_value = alloca i128, align 16
  %taddr = alloca ptr, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg7 = alloca %"char[]", align 8
  %indirectarg8 = alloca %"char[]", align 8
  %taddr11 = alloca i64, align 8
  %taddr12 = alloca i64, align 8
  %indirectarg13 = alloca %"char[]", align 8
  %indirectarg14 = alloca %"char[]", align 8
  %indirectarg15 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg16 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !125
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !125
  br i1 %3, label %panic, label %checkok, !dbg !125

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !126, !DIExpression(), !127)
    #dbg_declare(ptr %1, !128, !DIExpression(), !127)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input, ptr align 8 %1, i32 16, i1 false)
    #dbg_declare(ptr %return_value, !129, !DIExpression(), !131)
  store i128 0, ptr %return_value, align 16, !dbg !131
  store ptr %return_value, ptr %taddr, align 8
  %4 = load ptr, ptr %taddr, align 8
  %5 = insertvalue %"char[]" undef, ptr %4, 0
  %6 = insertvalue %"char[]" %5, i64 16, 1
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg3, ptr align 8 %input, i32 16, i1 false)
  store %"char[]" %6, ptr %indirectarg4, align 8
  call void @std.math.random.seeder(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4), !dbg !133
  %7 = load ptr, ptr %self, align 8, !dbg !132
  %checknull = icmp eq ptr %7, null, !dbg !132
  %8 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !132
  br i1 %8, label %panic5, label %checkok9, !dbg !132

checkok9:                                         ; preds = %checkok
  %9 = ptrtoint ptr %7 to i64, !dbg !132
  %10 = urem i64 %9, 16, !dbg !132
  %11 = icmp ne i64 %10, 0, !dbg !132
  %12 = call i1 @llvm.expect.i1(i1 %11, i1 false), !dbg !132
  br i1 %12, label %panic10, label %checkok17, !dbg !132

checkok17:                                        ; preds = %checkok9
  %13 = load i128, ptr %return_value, align 16, !dbg !132
  store i128 %13, ptr %7, align 16, !dbg !132
  ret void, !dbg !132

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func, i64 8 }, ptr %indirectarg2, align 8
  %14 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %14(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 18) #5, !dbg !127
  unreachable, !dbg !127

panic5:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.8, i64 45 }, ptr %indirectarg6, align 8
  store %"char[]" { ptr @.file, i64 11 }, ptr %indirectarg7, align 8
  store %"char[]" { ptr @.func, i64 8 }, ptr %indirectarg8, align 8
  %15 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %15(ptr align 8 %indirectarg6, ptr align 8 %indirectarg7, ptr align 8 %indirectarg8, i32 20) #5, !dbg !132
  unreachable, !dbg !132

panic10:                                          ; preds = %checkok9
  store i64 16, ptr %taddr11, align 8
  %16 = insertvalue %any undef, ptr %taddr11, 0
  %17 = insertvalue %any %16, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %10, ptr %taddr12, align 8
  %18 = insertvalue %any undef, ptr %taddr12, 0
  %19 = insertvalue %any %18, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg13, align 8
  store %"char[]" { ptr @.file, i64 11 }, ptr %indirectarg14, align 8
  store %"char[]" { ptr @.func, i64 8 }, ptr %indirectarg15, align 8
  store %any %17, ptr %varargslots, align 16
  %ptradd = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %19, ptr %ptradd, align 16
  %20 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %20, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg16, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg13, ptr align 8 %indirectarg14, ptr align 8 %indirectarg15, i32 20, ptr align 8 %indirectarg16) #5, !dbg !132
  unreachable, !dbg !132
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.math.random.Lcg128Random.next_long(ptr %0) #0 comdat !dbg !134 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %s = alloca ptr, align 8
  %result = alloca i64, align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr9 = alloca i64, align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg13 = alloca %"any[]", align 8
  %indirectarg17 = alloca %"char[]", align 8
  %indirectarg18 = alloca %"char[]", align 8
  %indirectarg19 = alloca %"char[]", align 8
  %taddr22 = alloca i64, align 8
  %taddr23 = alloca i64, align 8
  %indirectarg24 = alloca %"char[]", align 8
  %indirectarg25 = alloca %"char[]", align 8
  %indirectarg26 = alloca %"char[]", align 8
  %varargslots27 = alloca [2 x %any], align 16
  %indirectarg30 = alloca %"any[]", align 8
  %indirectarg34 = alloca %"char[]", align 8
  %indirectarg35 = alloca %"char[]", align 8
  %indirectarg36 = alloca %"char[]", align 8
  %taddr39 = alloca i64, align 8
  %taddr40 = alloca i64, align 8
  %indirectarg41 = alloca %"char[]", align 8
  %indirectarg42 = alloca %"char[]", align 8
  %indirectarg43 = alloca %"char[]", align 8
  %varargslots44 = alloca [2 x %any], align 16
  %indirectarg47 = alloca %"any[]", align 8
  %1 = icmp eq ptr %0, null, !dbg !137
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !137
  br i1 %2, label %panic, label %checkok, !dbg !137

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !138, !DIExpression(), !139)
    #dbg_declare(ptr %s, !140, !DIExpression(), !142)
  %3 = load ptr, ptr %self, align 8, !dbg !142
  store ptr %3, ptr %s, align 8, !dbg !142
    #dbg_declare(ptr %result, !143, !DIExpression(), !144)
  %4 = load ptr, ptr %s, align 8, !dbg !144
  %checknull = icmp eq ptr %4, null, !dbg !144
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !144
  br i1 %5, label %panic3, label %checkok7, !dbg !144

checkok7:                                         ; preds = %checkok
  %6 = ptrtoint ptr %4 to i64, !dbg !144
  %7 = urem i64 %6, 16, !dbg !144
  %8 = icmp ne i64 %7, 0, !dbg !144
  %9 = call i1 @llvm.expect.i1(i1 %8, i1 false), !dbg !144
  br i1 %9, label %panic8, label %checkok14, !dbg !144

checkok14:                                        ; preds = %checkok7
  %10 = load i128, ptr %4, align 16, !dbg !144
  %lshr = lshr i128 %10, 64, !dbg !144
  %11 = freeze i128 %lshr, !dbg !144
  %trunc = trunc i128 %11 to i64, !dbg !144
  store i64 %trunc, ptr %result, align 8, !dbg !144
  %12 = load ptr, ptr %s, align 8, !dbg !145
  %checknull15 = icmp eq ptr %12, null, !dbg !145
  %13 = call i1 @llvm.expect.i1(i1 %checknull15, i1 false), !dbg !145
  br i1 %13, label %panic16, label %checkok20, !dbg !145

checkok20:                                        ; preds = %checkok14
  %14 = ptrtoint ptr %12 to i64, !dbg !145
  %15 = urem i64 %14, 16, !dbg !145
  %16 = icmp ne i64 %15, 0, !dbg !145
  %17 = call i1 @llvm.expect.i1(i1 %16, i1 false), !dbg !145
  br i1 %17, label %panic21, label %checkok31, !dbg !145

checkok31:                                        ; preds = %checkok20
  %18 = load i128, ptr %12, align 16, !dbg !145
  %mul = mul i128 %18, -48899967401452674293065485854872568811, !dbg !145
  %add = add i128 %mul, -129976298391535590297638237547755878347, !dbg !145
  %19 = load ptr, ptr %s, align 8, !dbg !145
  %checknull32 = icmp eq ptr %19, null, !dbg !145
  %20 = call i1 @llvm.expect.i1(i1 %checknull32, i1 false), !dbg !145
  br i1 %20, label %panic33, label %checkok37, !dbg !145

checkok37:                                        ; preds = %checkok31
  %21 = ptrtoint ptr %19 to i64, !dbg !145
  %22 = urem i64 %21, 16, !dbg !145
  %23 = icmp ne i64 %22, 0, !dbg !145
  %24 = call i1 @llvm.expect.i1(i1 %23, i1 false), !dbg !145
  br i1 %24, label %panic38, label %checkok48, !dbg !145

checkok48:                                        ; preds = %checkok37
  store i128 %add, ptr %19, align 16, !dbg !145
  %25 = load i64, ptr %result, align 8, !dbg !146
  ret i64 %25, !dbg !146

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.10, i64 9 }, ptr %indirectarg2, align 8
  %26 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %26(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 24) #5, !dbg !139
  unreachable, !dbg !139

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.11, i64 42 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file, i64 11 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.10, i64 9 }, ptr %indirectarg6, align 8
  %27 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %27(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 27) #5, !dbg !144
  unreachable, !dbg !144

panic8:                                           ; preds = %checkok7
  store i64 16, ptr %taddr, align 8
  %28 = insertvalue %any undef, ptr %taddr, 0
  %29 = insertvalue %any %28, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %7, ptr %taddr9, align 8
  %30 = insertvalue %any undef, ptr %taddr9, 0
  %31 = insertvalue %any %30, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.file, i64 11 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.func.10, i64 9 }, ptr %indirectarg12, align 8
  store %any %29, ptr %varargslots, align 16
  %ptradd = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %31, ptr %ptradd, align 16
  %32 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %32, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg13, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, i32 27, ptr align 8 %indirectarg13) #5, !dbg !144
  unreachable, !dbg !144

panic16:                                          ; preds = %checkok14
  store %"char[]" { ptr @.panic_msg.11, i64 42 }, ptr %indirectarg17, align 8
  store %"char[]" { ptr @.file, i64 11 }, ptr %indirectarg18, align 8
  store %"char[]" { ptr @.func.10, i64 9 }, ptr %indirectarg19, align 8
  %33 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %33(ptr align 8 %indirectarg17, ptr align 8 %indirectarg18, ptr align 8 %indirectarg19, i32 28) #5, !dbg !145
  unreachable, !dbg !145

panic21:                                          ; preds = %checkok20
  store i64 16, ptr %taddr22, align 8
  %34 = insertvalue %any undef, ptr %taddr22, 0
  %35 = insertvalue %any %34, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %15, ptr %taddr23, align 8
  %36 = insertvalue %any undef, ptr %taddr23, 0
  %37 = insertvalue %any %36, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg24, align 8
  store %"char[]" { ptr @.file, i64 11 }, ptr %indirectarg25, align 8
  store %"char[]" { ptr @.func.10, i64 9 }, ptr %indirectarg26, align 8
  store %any %35, ptr %varargslots27, align 16
  %ptradd28 = getelementptr inbounds i8, ptr %varargslots27, i64 16
  store %any %37, ptr %ptradd28, align 16
  %38 = insertvalue %"any[]" undef, ptr %varargslots27, 0
  %"$$temp29" = insertvalue %"any[]" %38, i64 2, 1
  store %"any[]" %"$$temp29", ptr %indirectarg30, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg24, ptr align 8 %indirectarg25, ptr align 8 %indirectarg26, i32 28, ptr align 8 %indirectarg30) #5, !dbg !145
  unreachable, !dbg !145

panic33:                                          ; preds = %checkok31
  store %"char[]" { ptr @.panic_msg.11, i64 42 }, ptr %indirectarg34, align 8
  store %"char[]" { ptr @.file, i64 11 }, ptr %indirectarg35, align 8
  store %"char[]" { ptr @.func.10, i64 9 }, ptr %indirectarg36, align 8
  %39 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %39(ptr align 8 %indirectarg34, ptr align 8 %indirectarg35, ptr align 8 %indirectarg36, i32 28) #5, !dbg !145
  unreachable, !dbg !145

panic38:                                          ; preds = %checkok37
  store i64 16, ptr %taddr39, align 8
  %40 = insertvalue %any undef, ptr %taddr39, 0
  %41 = insertvalue %any %40, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %22, ptr %taddr40, align 8
  %42 = insertvalue %any undef, ptr %taddr40, 0
  %43 = insertvalue %any %42, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg41, align 8
  store %"char[]" { ptr @.file, i64 11 }, ptr %indirectarg42, align 8
  store %"char[]" { ptr @.func.10, i64 9 }, ptr %indirectarg43, align 8
  store %any %41, ptr %varargslots44, align 16
  %ptradd45 = getelementptr inbounds i8, ptr %varargslots44, i64 16
  store %any %43, ptr %ptradd45, align 16
  %44 = insertvalue %"any[]" undef, ptr %varargslots44, 0
  %"$$temp46" = insertvalue %"any[]" %44, i64 2, 1
  store %"any[]" %"$$temp46", ptr %indirectarg47, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg41, ptr align 8 %indirectarg42, ptr align 8 %indirectarg43, i32 28, ptr align 8 %indirectarg47) #5, !dbg !145
  unreachable, !dbg !145
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.math.random.Lcg128Random.next_bytes(ptr %0, ptr align 8 %1) #0 comdat !dbg !147 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %bytes = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i64, align 8
  %taddr = alloca ptr, align 8
  %taddr9 = alloca i64, align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg13 = alloca %"any[]", align 8
  %taddr17 = alloca i64, align 8
  %taddr18 = alloca i64, align 8
  %indirectarg19 = alloca %"char[]", align 8
  %indirectarg20 = alloca %"char[]", align 8
  %indirectarg21 = alloca %"char[]", align 8
  %varargslots22 = alloca [2 x %any], align 16
  %indirectarg25 = alloca %"any[]", align 8
  %taddr29 = alloca i64, align 8
  %taddr30 = alloca i64, align 8
  %indirectarg31 = alloca %"char[]", align 8
  %indirectarg32 = alloca %"char[]", align 8
  %indirectarg33 = alloca %"char[]", align 8
  %varargslots34 = alloca [2 x %any], align 16
  %indirectarg37 = alloca %"any[]", align 8
  %taddr39 = alloca ptr, align 8
  %taddr42 = alloca i64, align 8
  %taddr43 = alloca i64, align 8
  %indirectarg44 = alloca %"char[]", align 8
  %indirectarg45 = alloca %"char[]", align 8
  %indirectarg46 = alloca %"char[]", align 8
  %varargslots47 = alloca [2 x %any], align 16
  %indirectarg50 = alloca %"any[]", align 8
  %taddr54 = alloca i64, align 8
  %taddr55 = alloca i64, align 8
  %indirectarg56 = alloca %"char[]", align 8
  %indirectarg57 = alloca %"char[]", align 8
  %indirectarg58 = alloca %"char[]", align 8
  %varargslots59 = alloca [2 x %any], align 16
  %indirectarg62 = alloca %"any[]", align 8
  %taddr66 = alloca i64, align 8
  %taddr67 = alloca i64, align 8
  %indirectarg68 = alloca %"char[]", align 8
  %indirectarg69 = alloca %"char[]", align 8
  %indirectarg70 = alloca %"char[]", align 8
  %varargslots71 = alloca [2 x %any], align 16
  %indirectarg74 = alloca %"any[]", align 8
  %taddr79 = alloca i64, align 8
  %taddr80 = alloca i64, align 8
  %indirectarg81 = alloca %"char[]", align 8
  %indirectarg82 = alloca %"char[]", align 8
  %indirectarg83 = alloca %"char[]", align 8
  %varargslots84 = alloca [2 x %any], align 16
  %indirectarg87 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg91 = alloca %"char[]", align 8
  %indirectarg92 = alloca %"char[]", align 8
  %indirectarg93 = alloca %"char[]", align 8
  %indirectarg94 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !148
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !148
  br i1 %3, label %panic, label %checkok, !dbg !148

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !149, !DIExpression(), !148)
    #dbg_declare(ptr %1, !150, !DIExpression(), !148)
  %ptradd = getelementptr inbounds i8, ptr %1, i64 8, !dbg !151
  %4 = load i64, ptr %ptradd, align 8, !dbg !151
  %lt = icmp ult i64 0, %4, !dbg !151
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !151

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.13, i64 34 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.file, i64 11 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg5, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, i32 33) #5, !dbg !151
  unreachable, !dbg !151

assert_ok:                                        ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes, ptr align 8 %1, i32 16, i1 false)
    #dbg_declare(ptr %len, !153, !DIExpression(), !155)
  %ptradd6 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !155
  %6 = load i64, ptr %ptradd6, align 8, !dbg !155
  store i64 %6, ptr %len, align 8, !dbg !155
  br label %loop.cond, !dbg !156

loop.cond:                                        ; preds = %checkok88, %assert_ok
  %7 = load i64, ptr %len, align 8, !dbg !157
  %lt7 = icmp ult i64 0, %7, !dbg !157
  br i1 %lt7, label %loop.body, label %loop.exit, !dbg !157

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %value, !159, !DIExpression(), !161)
  %8 = load ptr, ptr %self, align 8, !dbg !162
  %9 = call i64 @std.math.random.Lcg128Random.next_long(ptr %8), !dbg !161
  store i64 %9, ptr %value, align 8, !dbg !161
  %10 = load i64, ptr %len, align 8, !dbg !163
  %le = icmp ule i64 %10, 8, !dbg !163
  br i1 %le, label %if.then, label %if.exit, !dbg !163

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %11 = load ptr, ptr %taddr, align 8
  %12 = load i64, ptr %len, align 8, !dbg !164
  %add = add i64 0, %12, !dbg !164
  %gt = icmp ugt i64 0, %add, !dbg !164
  %sub = sub i64 %add, 0, !dbg !164
  %13 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !164
  br i1 %13, label %panic8, label %checkok14, !dbg !164

checkok14:                                        ; preds = %if.then
  %size = sub i64 %add, 0, !dbg !164
  %14 = insertvalue %"char[]" undef, ptr %11, 0, !dbg !164
  %15 = insertvalue %"char[]" %14, i64 %size, 1, !dbg !164
  %16 = load %"char[]", ptr %bytes, align 8, !dbg !164
  %17 = extractvalue %"char[]" %16, 0, !dbg !164
  %18 = extractvalue %"char[]" %16, 1, !dbg !164
  %gt15 = icmp ugt i64 0, %18, !dbg !164
  %19 = call i1 @llvm.expect.i1(i1 %gt15, i1 false), !dbg !164
  br i1 %19, label %panic16, label %checkok26, !dbg !164

checkok26:                                        ; preds = %checkok14
  %size27 = sub i64 %18, 0, !dbg !164
  %20 = insertvalue %"char[]" undef, ptr %17, 0, !dbg !164
  %21 = insertvalue %"char[]" %20, i64 %size27, 1, !dbg !164
  %22 = extractvalue %"char[]" %21, 0, !dbg !164
  %23 = extractvalue %"char[]" %15, 0, !dbg !164
  %24 = extractvalue %"char[]" %15, 1, !dbg !164
  %25 = extractvalue %"char[]" %21, 1, !dbg !164
  %neq = icmp ne i64 %25, %24, !dbg !164
  %26 = call i1 @llvm.expect.i1(i1 %neq, i1 false), !dbg !164
  br i1 %26, label %panic28, label %checkok38, !dbg !164

checkok38:                                        ; preds = %checkok26
  %27 = mul i64 %24, 1, !dbg !164
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %22, ptr align 1 %23, i64 %27, i1 false), !dbg !164
  br label %expr_block.exit, !dbg !166

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr39, align 8
  %28 = load ptr, ptr %taddr39, align 8
  %29 = insertvalue %"char[]" undef, ptr %28, 0
  %30 = insertvalue %"char[]" %29, i64 8, 1
  %31 = load %"char[]", ptr %bytes, align 8, !dbg !167
  %32 = extractvalue %"char[]" %31, 0, !dbg !167
  %33 = extractvalue %"char[]" %31, 1, !dbg !167
  %gt40 = icmp sgt i64 0, %33, !dbg !167
  %34 = call i1 @llvm.expect.i1(i1 %gt40, i1 false), !dbg !167
  br i1 %34, label %panic41, label %checkok51, !dbg !167

checkok51:                                        ; preds = %if.exit
  %lt52 = icmp slt i64 %33, 8, !dbg !167
  %35 = call i1 @llvm.expect.i1(i1 %lt52, i1 false), !dbg !167
  br i1 %35, label %panic53, label %checkok63, !dbg !167

checkok63:                                        ; preds = %checkok51
  %36 = insertvalue %"char[]" undef, ptr %32, 0, !dbg !167
  %37 = insertvalue %"char[]" %36, i64 8, 1, !dbg !167
  %38 = extractvalue %"char[]" %37, 0, !dbg !167
  %39 = extractvalue %"char[]" %30, 0, !dbg !167
  %40 = extractvalue %"char[]" %30, 1, !dbg !167
  %41 = extractvalue %"char[]" %37, 1, !dbg !167
  %neq64 = icmp ne i64 %41, %40, !dbg !167
  %42 = call i1 @llvm.expect.i1(i1 %neq64, i1 false), !dbg !167
  br i1 %42, label %panic65, label %checkok75, !dbg !167

checkok75:                                        ; preds = %checkok63
  %43 = mul i64 %40, 1, !dbg !167
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %38, ptr align 1 %39, i64 %43, i1 false), !dbg !167
  %44 = load i64, ptr %len, align 8, !dbg !168
  %sub76 = sub i64 %44, 8, !dbg !168
  store i64 %sub76, ptr %len, align 8, !dbg !168
  %45 = load %"char[]", ptr %bytes, align 8, !dbg !169
  %46 = extractvalue %"char[]" %45, 0, !dbg !169
  %47 = extractvalue %"char[]" %45, 1, !dbg !169
  %gt77 = icmp ugt i64 8, %47, !dbg !169
  %48 = call i1 @llvm.expect.i1(i1 %gt77, i1 false), !dbg !169
  br i1 %48, label %panic78, label %checkok88, !dbg !169

checkok88:                                        ; preds = %checkok75
  %size89 = sub i64 %47, 8, !dbg !169
  %ptradd90 = getelementptr inbounds i8, ptr %46, i64 8, !dbg !169
  %49 = insertvalue %"char[]" undef, ptr %ptradd90, 0, !dbg !169
  %50 = insertvalue %"char[]" %49, i64 %size89, 1, !dbg !169
  store %"char[]" %50, ptr %bytes, align 8, !dbg !169
  br label %loop.cond, !dbg !169

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str, i64 30 }, ptr %string, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg91, ptr align 8 %string, i32 16, i1 false)
  store %"char[]" { ptr @.str.19, i64 11 }, ptr %indirectarg92, align 8
  store %"char[]" { ptr @.str.20, i64 23 }, ptr %indirectarg93, align 8
  store %"any[]" zeroinitializer, ptr %indirectarg94, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg91, ptr align 8 %indirectarg92, ptr align 8 %indirectarg93, i32 35, ptr align 8 %indirectarg94), !dbg !170
  unreachable, !dbg !170

expr_block.exit:                                  ; preds = %checkok38
  ret void, !dbg !170

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg2, align 8
  %51 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %51(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 35) #5, !dbg !148
  unreachable, !dbg !148

panic8:                                           ; preds = %if.then
  store i64 %sub, ptr %taddr9, align 8
  %52 = insertvalue %any undef, ptr %taddr9, 0
  %53 = insertvalue %any %52, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.14, i64 43 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg12, align 8
  store %any %53, ptr %varargslots, align 16
  %54 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %54, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg13, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, i32 153, ptr align 8 %indirectarg13) #5, !dbg !164
  unreachable, !dbg !164

panic16:                                          ; preds = %checkok14
  store i64 %18, ptr %taddr17, align 8
  %55 = insertvalue %any undef, ptr %taddr17, 0
  %56 = insertvalue %any %55, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr18, align 8
  %57 = insertvalue %any undef, ptr %taddr18, 0
  %58 = insertvalue %any %57, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.16, i64 61 }, ptr %indirectarg19, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg20, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg21, align 8
  store %any %56, ptr %varargslots22, align 16
  %ptradd23 = getelementptr inbounds i8, ptr %varargslots22, i64 16
  store %any %58, ptr %ptradd23, align 16
  %59 = insertvalue %"any[]" undef, ptr %varargslots22, 0
  %"$$temp24" = insertvalue %"any[]" %59, i64 2, 1
  store %"any[]" %"$$temp24", ptr %indirectarg25, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg19, ptr align 8 %indirectarg20, ptr align 8 %indirectarg21, i32 153, ptr align 8 %indirectarg25) #5, !dbg !164
  unreachable, !dbg !164

panic28:                                          ; preds = %checkok26
  store i64 %25, ptr %taddr29, align 8
  %60 = insertvalue %any undef, ptr %taddr29, 0
  %61 = insertvalue %any %60, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %24, ptr %taddr30, align 8
  %62 = insertvalue %any undef, ptr %taddr30, 0
  %63 = insertvalue %any %62, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 38 }, ptr %indirectarg31, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg32, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg33, align 8
  store %any %61, ptr %varargslots34, align 16
  %ptradd35 = getelementptr inbounds i8, ptr %varargslots34, i64 16
  store %any %63, ptr %ptradd35, align 16
  %64 = insertvalue %"any[]" undef, ptr %varargslots34, 0
  %"$$temp36" = insertvalue %"any[]" %64, i64 2, 1
  store %"any[]" %"$$temp36", ptr %indirectarg37, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg31, ptr align 8 %indirectarg32, ptr align 8 %indirectarg33, i32 153, ptr align 8 %indirectarg37) #5, !dbg !164
  unreachable, !dbg !164

panic41:                                          ; preds = %if.exit
  store i64 %33, ptr %taddr42, align 8
  %65 = insertvalue %any undef, ptr %taddr42, 0
  %66 = insertvalue %any %65, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr43, align 8
  %67 = insertvalue %any undef, ptr %taddr43, 0
  %68 = insertvalue %any %67, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.16, i64 61 }, ptr %indirectarg44, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg45, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg46, align 8
  store %any %66, ptr %varargslots47, align 16
  %ptradd48 = getelementptr inbounds i8, ptr %varargslots47, i64 16
  store %any %68, ptr %ptradd48, align 16
  %69 = insertvalue %"any[]" undef, ptr %varargslots47, 0
  %"$$temp49" = insertvalue %"any[]" %69, i64 2, 1
  store %"any[]" %"$$temp49", ptr %indirectarg50, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg44, ptr align 8 %indirectarg45, ptr align 8 %indirectarg46, i32 156, ptr align 8 %indirectarg50) #5, !dbg !167
  unreachable, !dbg !167

panic53:                                          ; preds = %checkok51
  store i64 7, ptr %taddr54, align 8
  %70 = insertvalue %any undef, ptr %taddr54, 0
  %71 = insertvalue %any %70, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %33, ptr %taddr55, align 8
  %72 = insertvalue %any undef, ptr %taddr55, 0
  %73 = insertvalue %any %72, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.18, i64 60 }, ptr %indirectarg56, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg57, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg58, align 8
  store %any %71, ptr %varargslots59, align 16
  %ptradd60 = getelementptr inbounds i8, ptr %varargslots59, i64 16
  store %any %73, ptr %ptradd60, align 16
  %74 = insertvalue %"any[]" undef, ptr %varargslots59, 0
  %"$$temp61" = insertvalue %"any[]" %74, i64 2, 1
  store %"any[]" %"$$temp61", ptr %indirectarg62, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg56, ptr align 8 %indirectarg57, ptr align 8 %indirectarg58, i32 156, ptr align 8 %indirectarg62) #5, !dbg !167
  unreachable, !dbg !167

panic65:                                          ; preds = %checkok63
  store i64 %41, ptr %taddr66, align 8
  %75 = insertvalue %any undef, ptr %taddr66, 0
  %76 = insertvalue %any %75, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %40, ptr %taddr67, align 8
  %77 = insertvalue %any undef, ptr %taddr67, 0
  %78 = insertvalue %any %77, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 38 }, ptr %indirectarg68, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg69, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg70, align 8
  store %any %76, ptr %varargslots71, align 16
  %ptradd72 = getelementptr inbounds i8, ptr %varargslots71, i64 16
  store %any %78, ptr %ptradd72, align 16
  %79 = insertvalue %"any[]" undef, ptr %varargslots71, 0
  %"$$temp73" = insertvalue %"any[]" %79, i64 2, 1
  store %"any[]" %"$$temp73", ptr %indirectarg74, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg68, ptr align 8 %indirectarg69, ptr align 8 %indirectarg70, i32 156, ptr align 8 %indirectarg74) #5, !dbg !167
  unreachable, !dbg !167

panic78:                                          ; preds = %checkok75
  store i64 %47, ptr %taddr79, align 8
  %80 = insertvalue %any undef, ptr %taddr79, 0
  %81 = insertvalue %any %80, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 8, ptr %taddr80, align 8
  %82 = insertvalue %any undef, ptr %taddr80, 0
  %83 = insertvalue %any %82, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.16, i64 61 }, ptr %indirectarg81, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg82, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg83, align 8
  store %any %81, ptr %varargslots84, align 16
  %ptradd85 = getelementptr inbounds i8, ptr %varargslots84, i64 16
  store %any %83, ptr %ptradd85, align 16
  %84 = insertvalue %"any[]" undef, ptr %varargslots84, 0
  %"$$temp86" = insertvalue %"any[]" %84, i64 2, 1
  store %"any[]" %"$$temp86", ptr %indirectarg87, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg81, ptr align 8 %indirectarg82, ptr align 8 %indirectarg83, i32 158, ptr align 8 %indirectarg87) #5, !dbg !169
  unreachable, !dbg !169
}

; Function Attrs: nounwind ssp uwtable
define weak_odr <2 x i64> @std.math.random.Lcg128Random.next_int128(ptr %0) #0 comdat !dbg !174 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %taddr = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !177
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !177
  br i1 %2, label %panic, label %checkok, !dbg !177

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !178, !DIExpression(), !177)
  %3 = load ptr, ptr %self, align 8, !dbg !179
  %4 = call i64 @std.math.random.Lcg128Random.next_long(ptr %3), !dbg !181
  %zext = zext i64 %4 to i128, !dbg !181
  %shl = shl i128 %zext, 64, !dbg !181
  %5 = freeze i128 %shl, !dbg !181
  %6 = load ptr, ptr %self, align 8, !dbg !179
  %7 = call i64 @std.math.random.Lcg128Random.next_long(ptr %6), !dbg !181
  %zext3 = zext i64 %7 to i128, !dbg !181
  %add = add i128 %5, %zext3, !dbg !181
  store i128 %add, ptr %taddr, align 16
  %8 = load <2 x i64>, ptr %taddr, align 16
  ret <2 x i64> %8

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.21, i64 11 }, ptr %indirectarg2, align 8
  %9 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %9(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 36) #5, !dbg !177
  unreachable, !dbg !177
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i32 @std.math.random.Lcg128Random.next_int(ptr %0) #0 comdat !dbg !182 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !185
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !185
  br i1 %2, label %panic, label %checkok, !dbg !185

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !186, !DIExpression(), !185)
  %3 = load ptr, ptr %self, align 8, !dbg !185
  %4 = call i64 @std.math.random.Lcg128Random.next_long(ptr %3), !dbg !185
  %trunc = trunc i64 %4 to i32, !dbg !185
  ret i32 %trunc, !dbg !185

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.22, i64 8 }, ptr %indirectarg2, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 37) #5, !dbg !185
  unreachable, !dbg !185
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i16 @std.math.random.Lcg128Random.next_short(ptr %0) #0 comdat !dbg !187 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !191
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !191
  br i1 %2, label %panic, label %checkok, !dbg !191

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !192, !DIExpression(), !191)
  %3 = load ptr, ptr %self, align 8, !dbg !191
  %4 = call i64 @std.math.random.Lcg128Random.next_long(ptr %3), !dbg !191
  %trunc = trunc i64 %4 to i16, !dbg !191
  ret i16 %trunc, !dbg !191

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.23, i64 10 }, ptr %indirectarg2, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 38) #5, !dbg !191
  unreachable, !dbg !191
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i8 @std.math.random.Lcg128Random.next_byte(ptr %0) #0 comdat !dbg !193 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !196
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !196
  br i1 %2, label %panic, label %checkok, !dbg !196

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !197, !DIExpression(), !196)
  %3 = load ptr, ptr %self, align 8, !dbg !196
  %4 = call i64 @std.math.random.Lcg128Random.next_long(ptr %3), !dbg !196
  %trunc = trunc i64 %4 to i8, !dbg !196
  ret i8 %trunc, !dbg !196

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.24, i64 9 }, ptr %indirectarg2, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 39) #5, !dbg !196
  unreachable, !dbg !196
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.math.random.Lcg64Random.set_seed(ptr %0, ptr align 8 %1) #0 comdat !dbg !198 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %input = alloca %"char[]", align 8
  %return_value = alloca i64, align 8
  %taddr = alloca ptr, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg7 = alloca %"char[]", align 8
  %indirectarg8 = alloca %"char[]", align 8
  %taddr11 = alloca i64, align 8
  %taddr12 = alloca i64, align 8
  %indirectarg13 = alloca %"char[]", align 8
  %indirectarg14 = alloca %"char[]", align 8
  %indirectarg15 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg16 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !203
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !203
  br i1 %3, label %panic, label %checkok, !dbg !203

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !204, !DIExpression(), !205)
    #dbg_declare(ptr %1, !206, !DIExpression(), !205)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input, ptr align 8 %1, i32 16, i1 false)
    #dbg_declare(ptr %return_value, !207, !DIExpression(), !209)
  store i64 0, ptr %return_value, align 8, !dbg !209
  store ptr %return_value, ptr %taddr, align 8
  %4 = load ptr, ptr %taddr, align 8
  %5 = insertvalue %"char[]" undef, ptr %4, 0
  %6 = insertvalue %"char[]" %5, i64 8, 1
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg3, ptr align 8 %input, i32 16, i1 false)
  store %"char[]" %6, ptr %indirectarg4, align 8
  call void @std.math.random.seeder(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4), !dbg !211
  %7 = load ptr, ptr %self, align 8, !dbg !210
  %checknull = icmp eq ptr %7, null, !dbg !210
  %8 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !210
  br i1 %8, label %panic5, label %checkok9, !dbg !210

checkok9:                                         ; preds = %checkok
  %9 = ptrtoint ptr %7 to i64, !dbg !210
  %10 = urem i64 %9, 8, !dbg !210
  %11 = icmp ne i64 %10, 0, !dbg !210
  %12 = call i1 @llvm.expect.i1(i1 %11, i1 false), !dbg !210
  br i1 %12, label %panic10, label %checkok17, !dbg !210

checkok17:                                        ; preds = %checkok9
  %13 = load i64, ptr %return_value, align 8, !dbg !210
  store i64 %13, ptr %7, align 8, !dbg !210
  ret void, !dbg !210

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func, i64 8 }, ptr %indirectarg2, align 8
  %14 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %14(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 45) #5, !dbg !205
  unreachable, !dbg !205

panic5:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.8, i64 45 }, ptr %indirectarg6, align 8
  store %"char[]" { ptr @.file, i64 11 }, ptr %indirectarg7, align 8
  store %"char[]" { ptr @.func, i64 8 }, ptr %indirectarg8, align 8
  %15 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %15(ptr align 8 %indirectarg6, ptr align 8 %indirectarg7, ptr align 8 %indirectarg8, i32 47) #5, !dbg !210
  unreachable, !dbg !210

panic10:                                          ; preds = %checkok9
  store i64 8, ptr %taddr11, align 8
  %16 = insertvalue %any undef, ptr %taddr11, 0
  %17 = insertvalue %any %16, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %10, ptr %taddr12, align 8
  %18 = insertvalue %any undef, ptr %taddr12, 0
  %19 = insertvalue %any %18, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg13, align 8
  store %"char[]" { ptr @.file, i64 11 }, ptr %indirectarg14, align 8
  store %"char[]" { ptr @.func, i64 8 }, ptr %indirectarg15, align 8
  store %any %17, ptr %varargslots, align 16
  %ptradd = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %19, ptr %ptradd, align 16
  %20 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %20, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg16, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg13, ptr align 8 %indirectarg14, ptr align 8 %indirectarg15, i32 47, ptr align 8 %indirectarg16) #5, !dbg !210
  unreachable, !dbg !210
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i32 @std.math.random.Lcg64Random.next_int(ptr %0) #0 comdat !dbg !212 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %s = alloca ptr, align 8
  %result = alloca i32, align 4
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr9 = alloca i64, align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg13 = alloca %"any[]", align 8
  %indirectarg17 = alloca %"char[]", align 8
  %indirectarg18 = alloca %"char[]", align 8
  %indirectarg19 = alloca %"char[]", align 8
  %taddr22 = alloca i64, align 8
  %taddr23 = alloca i64, align 8
  %indirectarg24 = alloca %"char[]", align 8
  %indirectarg25 = alloca %"char[]", align 8
  %indirectarg26 = alloca %"char[]", align 8
  %varargslots27 = alloca [2 x %any], align 16
  %indirectarg30 = alloca %"any[]", align 8
  %indirectarg34 = alloca %"char[]", align 8
  %indirectarg35 = alloca %"char[]", align 8
  %indirectarg36 = alloca %"char[]", align 8
  %taddr39 = alloca i64, align 8
  %taddr40 = alloca i64, align 8
  %indirectarg41 = alloca %"char[]", align 8
  %indirectarg42 = alloca %"char[]", align 8
  %indirectarg43 = alloca %"char[]", align 8
  %varargslots44 = alloca [2 x %any], align 16
  %indirectarg47 = alloca %"any[]", align 8
  %1 = icmp eq ptr %0, null, !dbg !215
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !215
  br i1 %2, label %panic, label %checkok, !dbg !215

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !216, !DIExpression(), !217)
    #dbg_declare(ptr %s, !218, !DIExpression(), !220)
  %3 = load ptr, ptr %self, align 8, !dbg !220
  store ptr %3, ptr %s, align 8, !dbg !220
    #dbg_declare(ptr %result, !221, !DIExpression(), !222)
  %4 = load ptr, ptr %s, align 8, !dbg !222
  %checknull = icmp eq ptr %4, null, !dbg !222
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !222
  br i1 %5, label %panic3, label %checkok7, !dbg !222

checkok7:                                         ; preds = %checkok
  %6 = ptrtoint ptr %4 to i64, !dbg !222
  %7 = urem i64 %6, 8, !dbg !222
  %8 = icmp ne i64 %7, 0, !dbg !222
  %9 = call i1 @llvm.expect.i1(i1 %8, i1 false), !dbg !222
  br i1 %9, label %panic8, label %checkok14, !dbg !222

checkok14:                                        ; preds = %checkok7
  %10 = load i64, ptr %4, align 8, !dbg !222
  %lshr = lshr i64 %10, 32, !dbg !222
  %11 = freeze i64 %lshr, !dbg !222
  %trunc = trunc i64 %11 to i32, !dbg !222
  store i32 %trunc, ptr %result, align 4, !dbg !222
  %12 = load ptr, ptr %s, align 8, !dbg !223
  %checknull15 = icmp eq ptr %12, null, !dbg !223
  %13 = call i1 @llvm.expect.i1(i1 %checknull15, i1 false), !dbg !223
  br i1 %13, label %panic16, label %checkok20, !dbg !223

checkok20:                                        ; preds = %checkok14
  %14 = ptrtoint ptr %12 to i64, !dbg !223
  %15 = urem i64 %14, 8, !dbg !223
  %16 = icmp ne i64 %15, 0, !dbg !223
  %17 = call i1 @llvm.expect.i1(i1 %16, i1 false), !dbg !223
  br i1 %17, label %panic21, label %checkok31, !dbg !223

checkok31:                                        ; preds = %checkok20
  %18 = load i64, ptr %12, align 8, !dbg !223
  %mul = mul i64 %18, -3372029247567499371, !dbg !223
  %add = add i64 %mul, -7046029254386353131, !dbg !223
  %19 = load ptr, ptr %s, align 8, !dbg !223
  %checknull32 = icmp eq ptr %19, null, !dbg !223
  %20 = call i1 @llvm.expect.i1(i1 %checknull32, i1 false), !dbg !223
  br i1 %20, label %panic33, label %checkok37, !dbg !223

checkok37:                                        ; preds = %checkok31
  %21 = ptrtoint ptr %19 to i64, !dbg !223
  %22 = urem i64 %21, 8, !dbg !223
  %23 = icmp ne i64 %22, 0, !dbg !223
  %24 = call i1 @llvm.expect.i1(i1 %23, i1 false), !dbg !223
  br i1 %24, label %panic38, label %checkok48, !dbg !223

checkok48:                                        ; preds = %checkok37
  store i64 %add, ptr %19, align 8, !dbg !223
  %25 = load i32, ptr %result, align 4, !dbg !224
  ret i32 %25, !dbg !224

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.22, i64 8 }, ptr %indirectarg2, align 8
  %26 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %26(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 51) #5, !dbg !217
  unreachable, !dbg !217

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.11, i64 42 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file, i64 11 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.22, i64 8 }, ptr %indirectarg6, align 8
  %27 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %27(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 54) #5, !dbg !222
  unreachable, !dbg !222

panic8:                                           ; preds = %checkok7
  store i64 8, ptr %taddr, align 8
  %28 = insertvalue %any undef, ptr %taddr, 0
  %29 = insertvalue %any %28, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %7, ptr %taddr9, align 8
  %30 = insertvalue %any undef, ptr %taddr9, 0
  %31 = insertvalue %any %30, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.file, i64 11 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.func.22, i64 8 }, ptr %indirectarg12, align 8
  store %any %29, ptr %varargslots, align 16
  %ptradd = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %31, ptr %ptradd, align 16
  %32 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %32, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg13, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, i32 54, ptr align 8 %indirectarg13) #5, !dbg !222
  unreachable, !dbg !222

panic16:                                          ; preds = %checkok14
  store %"char[]" { ptr @.panic_msg.11, i64 42 }, ptr %indirectarg17, align 8
  store %"char[]" { ptr @.file, i64 11 }, ptr %indirectarg18, align 8
  store %"char[]" { ptr @.func.22, i64 8 }, ptr %indirectarg19, align 8
  %33 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %33(ptr align 8 %indirectarg17, ptr align 8 %indirectarg18, ptr align 8 %indirectarg19, i32 55) #5, !dbg !223
  unreachable, !dbg !223

panic21:                                          ; preds = %checkok20
  store i64 8, ptr %taddr22, align 8
  %34 = insertvalue %any undef, ptr %taddr22, 0
  %35 = insertvalue %any %34, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %15, ptr %taddr23, align 8
  %36 = insertvalue %any undef, ptr %taddr23, 0
  %37 = insertvalue %any %36, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg24, align 8
  store %"char[]" { ptr @.file, i64 11 }, ptr %indirectarg25, align 8
  store %"char[]" { ptr @.func.22, i64 8 }, ptr %indirectarg26, align 8
  store %any %35, ptr %varargslots27, align 16
  %ptradd28 = getelementptr inbounds i8, ptr %varargslots27, i64 16
  store %any %37, ptr %ptradd28, align 16
  %38 = insertvalue %"any[]" undef, ptr %varargslots27, 0
  %"$$temp29" = insertvalue %"any[]" %38, i64 2, 1
  store %"any[]" %"$$temp29", ptr %indirectarg30, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg24, ptr align 8 %indirectarg25, ptr align 8 %indirectarg26, i32 55, ptr align 8 %indirectarg30) #5, !dbg !223
  unreachable, !dbg !223

panic33:                                          ; preds = %checkok31
  store %"char[]" { ptr @.panic_msg.11, i64 42 }, ptr %indirectarg34, align 8
  store %"char[]" { ptr @.file, i64 11 }, ptr %indirectarg35, align 8
  store %"char[]" { ptr @.func.22, i64 8 }, ptr %indirectarg36, align 8
  %39 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %39(ptr align 8 %indirectarg34, ptr align 8 %indirectarg35, ptr align 8 %indirectarg36, i32 55) #5, !dbg !223
  unreachable, !dbg !223

panic38:                                          ; preds = %checkok37
  store i64 8, ptr %taddr39, align 8
  %40 = insertvalue %any undef, ptr %taddr39, 0
  %41 = insertvalue %any %40, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %22, ptr %taddr40, align 8
  %42 = insertvalue %any undef, ptr %taddr40, 0
  %43 = insertvalue %any %42, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg41, align 8
  store %"char[]" { ptr @.file, i64 11 }, ptr %indirectarg42, align 8
  store %"char[]" { ptr @.func.22, i64 8 }, ptr %indirectarg43, align 8
  store %any %41, ptr %varargslots44, align 16
  %ptradd45 = getelementptr inbounds i8, ptr %varargslots44, i64 16
  store %any %43, ptr %ptradd45, align 16
  %44 = insertvalue %"any[]" undef, ptr %varargslots44, 0
  %"$$temp46" = insertvalue %"any[]" %44, i64 2, 1
  store %"any[]" %"$$temp46", ptr %indirectarg47, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg41, ptr align 8 %indirectarg42, ptr align 8 %indirectarg43, i32 55, ptr align 8 %indirectarg47) #5, !dbg !223
  unreachable, !dbg !223
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.math.random.Lcg64Random.next_bytes(ptr %0, ptr align 8 %1) #0 comdat !dbg !225 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %bytes = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i32, align 4
  %taddr = alloca ptr, align 8
  %taddr9 = alloca i64, align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg13 = alloca %"any[]", align 8
  %taddr17 = alloca i64, align 8
  %taddr18 = alloca i64, align 8
  %indirectarg19 = alloca %"char[]", align 8
  %indirectarg20 = alloca %"char[]", align 8
  %indirectarg21 = alloca %"char[]", align 8
  %varargslots22 = alloca [2 x %any], align 16
  %indirectarg25 = alloca %"any[]", align 8
  %taddr29 = alloca i64, align 8
  %taddr30 = alloca i64, align 8
  %indirectarg31 = alloca %"char[]", align 8
  %indirectarg32 = alloca %"char[]", align 8
  %indirectarg33 = alloca %"char[]", align 8
  %varargslots34 = alloca [2 x %any], align 16
  %indirectarg37 = alloca %"any[]", align 8
  %taddr39 = alloca ptr, align 8
  %taddr42 = alloca i64, align 8
  %taddr43 = alloca i64, align 8
  %indirectarg44 = alloca %"char[]", align 8
  %indirectarg45 = alloca %"char[]", align 8
  %indirectarg46 = alloca %"char[]", align 8
  %varargslots47 = alloca [2 x %any], align 16
  %indirectarg50 = alloca %"any[]", align 8
  %taddr54 = alloca i64, align 8
  %taddr55 = alloca i64, align 8
  %indirectarg56 = alloca %"char[]", align 8
  %indirectarg57 = alloca %"char[]", align 8
  %indirectarg58 = alloca %"char[]", align 8
  %varargslots59 = alloca [2 x %any], align 16
  %indirectarg62 = alloca %"any[]", align 8
  %taddr66 = alloca i64, align 8
  %taddr67 = alloca i64, align 8
  %indirectarg68 = alloca %"char[]", align 8
  %indirectarg69 = alloca %"char[]", align 8
  %indirectarg70 = alloca %"char[]", align 8
  %varargslots71 = alloca [2 x %any], align 16
  %indirectarg74 = alloca %"any[]", align 8
  %taddr79 = alloca i64, align 8
  %taddr80 = alloca i64, align 8
  %indirectarg81 = alloca %"char[]", align 8
  %indirectarg82 = alloca %"char[]", align 8
  %indirectarg83 = alloca %"char[]", align 8
  %varargslots84 = alloca [2 x %any], align 16
  %indirectarg87 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg91 = alloca %"char[]", align 8
  %indirectarg92 = alloca %"char[]", align 8
  %indirectarg93 = alloca %"char[]", align 8
  %indirectarg94 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !226
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !226
  br i1 %3, label %panic, label %checkok, !dbg !226

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !227, !DIExpression(), !226)
    #dbg_declare(ptr %1, !228, !DIExpression(), !226)
  %ptradd = getelementptr inbounds i8, ptr %1, i64 8, !dbg !229
  %4 = load i64, ptr %ptradd, align 8, !dbg !229
  %lt = icmp ult i64 0, %4, !dbg !229
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !229

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.13, i64 34 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.file, i64 11 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg5, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, i32 60) #5, !dbg !229
  unreachable, !dbg !229

assert_ok:                                        ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes, ptr align 8 %1, i32 16, i1 false)
    #dbg_declare(ptr %len, !231, !DIExpression(), !233)
  %ptradd6 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !233
  %6 = load i64, ptr %ptradd6, align 8, !dbg !233
  store i64 %6, ptr %len, align 8, !dbg !233
  br label %loop.cond, !dbg !234

loop.cond:                                        ; preds = %checkok88, %assert_ok
  %7 = load i64, ptr %len, align 8, !dbg !235
  %lt7 = icmp ult i64 0, %7, !dbg !235
  br i1 %lt7, label %loop.body, label %loop.exit, !dbg !235

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %value, !237, !DIExpression(), !239)
  %8 = load ptr, ptr %self, align 8, !dbg !240
  %9 = call i32 @std.math.random.Lcg64Random.next_int(ptr %8), !dbg !239
  store i32 %9, ptr %value, align 4, !dbg !239
  %10 = load i64, ptr %len, align 8, !dbg !241
  %le = icmp ule i64 %10, 4, !dbg !241
  br i1 %le, label %if.then, label %if.exit, !dbg !241

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %11 = load ptr, ptr %taddr, align 8
  %12 = load i64, ptr %len, align 8, !dbg !242
  %add = add i64 0, %12, !dbg !242
  %gt = icmp ugt i64 0, %add, !dbg !242
  %sub = sub i64 %add, 0, !dbg !242
  %13 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !242
  br i1 %13, label %panic8, label %checkok14, !dbg !242

checkok14:                                        ; preds = %if.then
  %size = sub i64 %add, 0, !dbg !242
  %14 = insertvalue %"char[]" undef, ptr %11, 0, !dbg !242
  %15 = insertvalue %"char[]" %14, i64 %size, 1, !dbg !242
  %16 = load %"char[]", ptr %bytes, align 8, !dbg !242
  %17 = extractvalue %"char[]" %16, 0, !dbg !242
  %18 = extractvalue %"char[]" %16, 1, !dbg !242
  %gt15 = icmp ugt i64 0, %18, !dbg !242
  %19 = call i1 @llvm.expect.i1(i1 %gt15, i1 false), !dbg !242
  br i1 %19, label %panic16, label %checkok26, !dbg !242

checkok26:                                        ; preds = %checkok14
  %size27 = sub i64 %18, 0, !dbg !242
  %20 = insertvalue %"char[]" undef, ptr %17, 0, !dbg !242
  %21 = insertvalue %"char[]" %20, i64 %size27, 1, !dbg !242
  %22 = extractvalue %"char[]" %21, 0, !dbg !242
  %23 = extractvalue %"char[]" %15, 0, !dbg !242
  %24 = extractvalue %"char[]" %15, 1, !dbg !242
  %25 = extractvalue %"char[]" %21, 1, !dbg !242
  %neq = icmp ne i64 %25, %24, !dbg !242
  %26 = call i1 @llvm.expect.i1(i1 %neq, i1 false), !dbg !242
  br i1 %26, label %panic28, label %checkok38, !dbg !242

checkok38:                                        ; preds = %checkok26
  %27 = mul i64 %24, 1, !dbg !242
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %22, ptr align 1 %23, i64 %27, i1 false), !dbg !242
  br label %expr_block.exit, !dbg !244

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr39, align 8
  %28 = load ptr, ptr %taddr39, align 8
  %29 = insertvalue %"char[]" undef, ptr %28, 0
  %30 = insertvalue %"char[]" %29, i64 4, 1
  %31 = load %"char[]", ptr %bytes, align 8, !dbg !245
  %32 = extractvalue %"char[]" %31, 0, !dbg !245
  %33 = extractvalue %"char[]" %31, 1, !dbg !245
  %gt40 = icmp sgt i64 0, %33, !dbg !245
  %34 = call i1 @llvm.expect.i1(i1 %gt40, i1 false), !dbg !245
  br i1 %34, label %panic41, label %checkok51, !dbg !245

checkok51:                                        ; preds = %if.exit
  %lt52 = icmp slt i64 %33, 4, !dbg !245
  %35 = call i1 @llvm.expect.i1(i1 %lt52, i1 false), !dbg !245
  br i1 %35, label %panic53, label %checkok63, !dbg !245

checkok63:                                        ; preds = %checkok51
  %36 = insertvalue %"char[]" undef, ptr %32, 0, !dbg !245
  %37 = insertvalue %"char[]" %36, i64 4, 1, !dbg !245
  %38 = extractvalue %"char[]" %37, 0, !dbg !245
  %39 = extractvalue %"char[]" %30, 0, !dbg !245
  %40 = extractvalue %"char[]" %30, 1, !dbg !245
  %41 = extractvalue %"char[]" %37, 1, !dbg !245
  %neq64 = icmp ne i64 %41, %40, !dbg !245
  %42 = call i1 @llvm.expect.i1(i1 %neq64, i1 false), !dbg !245
  br i1 %42, label %panic65, label %checkok75, !dbg !245

checkok75:                                        ; preds = %checkok63
  %43 = mul i64 %40, 1, !dbg !245
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %38, ptr align 1 %39, i64 %43, i1 false), !dbg !245
  %44 = load i64, ptr %len, align 8, !dbg !246
  %sub76 = sub i64 %44, 4, !dbg !246
  store i64 %sub76, ptr %len, align 8, !dbg !246
  %45 = load %"char[]", ptr %bytes, align 8, !dbg !247
  %46 = extractvalue %"char[]" %45, 0, !dbg !247
  %47 = extractvalue %"char[]" %45, 1, !dbg !247
  %gt77 = icmp ugt i64 4, %47, !dbg !247
  %48 = call i1 @llvm.expect.i1(i1 %gt77, i1 false), !dbg !247
  br i1 %48, label %panic78, label %checkok88, !dbg !247

checkok88:                                        ; preds = %checkok75
  %size89 = sub i64 %47, 4, !dbg !247
  %ptradd90 = getelementptr inbounds i8, ptr %46, i64 4, !dbg !247
  %49 = insertvalue %"char[]" undef, ptr %ptradd90, 0, !dbg !247
  %50 = insertvalue %"char[]" %49, i64 %size89, 1, !dbg !247
  store %"char[]" %50, ptr %bytes, align 8, !dbg !247
  br label %loop.cond, !dbg !247

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.25, i64 30 }, ptr %string, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg91, ptr align 8 %string, i32 16, i1 false)
  store %"char[]" { ptr @.str.26, i64 11 }, ptr %indirectarg92, align 8
  store %"char[]" { ptr @.str.27, i64 22 }, ptr %indirectarg93, align 8
  store %"any[]" zeroinitializer, ptr %indirectarg94, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg91, ptr align 8 %indirectarg92, ptr align 8 %indirectarg93, i32 62, ptr align 8 %indirectarg94), !dbg !248
  unreachable, !dbg !248

expr_block.exit:                                  ; preds = %checkok38
  ret void, !dbg !248

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg2, align 8
  %51 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %51(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 62) #5, !dbg !226
  unreachable, !dbg !226

panic8:                                           ; preds = %if.then
  store i64 %sub, ptr %taddr9, align 8
  %52 = insertvalue %any undef, ptr %taddr9, 0
  %53 = insertvalue %any %52, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.14, i64 43 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg12, align 8
  store %any %53, ptr %varargslots, align 16
  %54 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %54, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg13, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, i32 153, ptr align 8 %indirectarg13) #5, !dbg !242
  unreachable, !dbg !242

panic16:                                          ; preds = %checkok14
  store i64 %18, ptr %taddr17, align 8
  %55 = insertvalue %any undef, ptr %taddr17, 0
  %56 = insertvalue %any %55, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr18, align 8
  %57 = insertvalue %any undef, ptr %taddr18, 0
  %58 = insertvalue %any %57, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.16, i64 61 }, ptr %indirectarg19, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg20, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg21, align 8
  store %any %56, ptr %varargslots22, align 16
  %ptradd23 = getelementptr inbounds i8, ptr %varargslots22, i64 16
  store %any %58, ptr %ptradd23, align 16
  %59 = insertvalue %"any[]" undef, ptr %varargslots22, 0
  %"$$temp24" = insertvalue %"any[]" %59, i64 2, 1
  store %"any[]" %"$$temp24", ptr %indirectarg25, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg19, ptr align 8 %indirectarg20, ptr align 8 %indirectarg21, i32 153, ptr align 8 %indirectarg25) #5, !dbg !242
  unreachable, !dbg !242

panic28:                                          ; preds = %checkok26
  store i64 %25, ptr %taddr29, align 8
  %60 = insertvalue %any undef, ptr %taddr29, 0
  %61 = insertvalue %any %60, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %24, ptr %taddr30, align 8
  %62 = insertvalue %any undef, ptr %taddr30, 0
  %63 = insertvalue %any %62, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 38 }, ptr %indirectarg31, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg32, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg33, align 8
  store %any %61, ptr %varargslots34, align 16
  %ptradd35 = getelementptr inbounds i8, ptr %varargslots34, i64 16
  store %any %63, ptr %ptradd35, align 16
  %64 = insertvalue %"any[]" undef, ptr %varargslots34, 0
  %"$$temp36" = insertvalue %"any[]" %64, i64 2, 1
  store %"any[]" %"$$temp36", ptr %indirectarg37, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg31, ptr align 8 %indirectarg32, ptr align 8 %indirectarg33, i32 153, ptr align 8 %indirectarg37) #5, !dbg !242
  unreachable, !dbg !242

panic41:                                          ; preds = %if.exit
  store i64 %33, ptr %taddr42, align 8
  %65 = insertvalue %any undef, ptr %taddr42, 0
  %66 = insertvalue %any %65, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr43, align 8
  %67 = insertvalue %any undef, ptr %taddr43, 0
  %68 = insertvalue %any %67, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.16, i64 61 }, ptr %indirectarg44, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg45, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg46, align 8
  store %any %66, ptr %varargslots47, align 16
  %ptradd48 = getelementptr inbounds i8, ptr %varargslots47, i64 16
  store %any %68, ptr %ptradd48, align 16
  %69 = insertvalue %"any[]" undef, ptr %varargslots47, 0
  %"$$temp49" = insertvalue %"any[]" %69, i64 2, 1
  store %"any[]" %"$$temp49", ptr %indirectarg50, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg44, ptr align 8 %indirectarg45, ptr align 8 %indirectarg46, i32 156, ptr align 8 %indirectarg50) #5, !dbg !245
  unreachable, !dbg !245

panic53:                                          ; preds = %checkok51
  store i64 3, ptr %taddr54, align 8
  %70 = insertvalue %any undef, ptr %taddr54, 0
  %71 = insertvalue %any %70, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %33, ptr %taddr55, align 8
  %72 = insertvalue %any undef, ptr %taddr55, 0
  %73 = insertvalue %any %72, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.18, i64 60 }, ptr %indirectarg56, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg57, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg58, align 8
  store %any %71, ptr %varargslots59, align 16
  %ptradd60 = getelementptr inbounds i8, ptr %varargslots59, i64 16
  store %any %73, ptr %ptradd60, align 16
  %74 = insertvalue %"any[]" undef, ptr %varargslots59, 0
  %"$$temp61" = insertvalue %"any[]" %74, i64 2, 1
  store %"any[]" %"$$temp61", ptr %indirectarg62, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg56, ptr align 8 %indirectarg57, ptr align 8 %indirectarg58, i32 156, ptr align 8 %indirectarg62) #5, !dbg !245
  unreachable, !dbg !245

panic65:                                          ; preds = %checkok63
  store i64 %41, ptr %taddr66, align 8
  %75 = insertvalue %any undef, ptr %taddr66, 0
  %76 = insertvalue %any %75, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %40, ptr %taddr67, align 8
  %77 = insertvalue %any undef, ptr %taddr67, 0
  %78 = insertvalue %any %77, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 38 }, ptr %indirectarg68, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg69, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg70, align 8
  store %any %76, ptr %varargslots71, align 16
  %ptradd72 = getelementptr inbounds i8, ptr %varargslots71, i64 16
  store %any %78, ptr %ptradd72, align 16
  %79 = insertvalue %"any[]" undef, ptr %varargslots71, 0
  %"$$temp73" = insertvalue %"any[]" %79, i64 2, 1
  store %"any[]" %"$$temp73", ptr %indirectarg74, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg68, ptr align 8 %indirectarg69, ptr align 8 %indirectarg70, i32 156, ptr align 8 %indirectarg74) #5, !dbg !245
  unreachable, !dbg !245

panic78:                                          ; preds = %checkok75
  store i64 %47, ptr %taddr79, align 8
  %80 = insertvalue %any undef, ptr %taddr79, 0
  %81 = insertvalue %any %80, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 4, ptr %taddr80, align 8
  %82 = insertvalue %any undef, ptr %taddr80, 0
  %83 = insertvalue %any %82, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.16, i64 61 }, ptr %indirectarg81, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg82, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg83, align 8
  store %any %81, ptr %varargslots84, align 16
  %ptradd85 = getelementptr inbounds i8, ptr %varargslots84, i64 16
  store %any %83, ptr %ptradd85, align 16
  %84 = insertvalue %"any[]" undef, ptr %varargslots84, 0
  %"$$temp86" = insertvalue %"any[]" %84, i64 2, 1
  store %"any[]" %"$$temp86", ptr %indirectarg87, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg81, ptr align 8 %indirectarg82, ptr align 8 %indirectarg83, i32 158, ptr align 8 %indirectarg87) #5, !dbg !247
  unreachable, !dbg !247
}

; Function Attrs: nounwind ssp uwtable
define weak_odr <2 x i64> @std.math.random.Lcg64Random.next_int128(ptr %0) #0 comdat !dbg !251 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %taddr = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !254
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !254
  br i1 %2, label %panic, label %checkok, !dbg !254

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !255, !DIExpression(), !254)
  %3 = load ptr, ptr %self, align 8, !dbg !256
  %4 = call i64 @std.math.random.Lcg64Random.next_long(ptr %3), !dbg !258
  %zext = zext i64 %4 to i128, !dbg !258
  %shl = shl i128 %zext, 64, !dbg !258
  %5 = freeze i128 %shl, !dbg !258
  %6 = load ptr, ptr %self, align 8, !dbg !256
  %7 = call i64 @std.math.random.Lcg64Random.next_long(ptr %6), !dbg !258
  %zext3 = zext i64 %7 to i128, !dbg !258
  %add = add i128 %5, %zext3, !dbg !258
  store i128 %add, ptr %taddr, align 16
  %8 = load <2 x i64>, ptr %taddr, align 16
  ret <2 x i64> %8

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.21, i64 11 }, ptr %indirectarg2, align 8
  %9 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %9(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 63) #5, !dbg !254
  unreachable, !dbg !254
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.math.random.Lcg64Random.next_long(ptr %0) #0 comdat !dbg !259 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !262
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !262
  br i1 %2, label %panic, label %checkok, !dbg !262

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !263, !DIExpression(), !262)
  %3 = load ptr, ptr %self, align 8, !dbg !264
  %4 = call i32 @std.math.random.Lcg64Random.next_int(ptr %3), !dbg !266
  %zext = zext i32 %4 to i64, !dbg !266
  %shl = shl i64 %zext, 32, !dbg !266
  %5 = freeze i64 %shl, !dbg !266
  %6 = load ptr, ptr %self, align 8, !dbg !264
  %7 = call i32 @std.math.random.Lcg64Random.next_int(ptr %6), !dbg !266
  %zext3 = zext i32 %7 to i64, !dbg !266
  %add = add i64 %5, %zext3, !dbg !266
  ret i64 %add, !dbg !266

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.10, i64 9 }, ptr %indirectarg2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 64) #5, !dbg !262
  unreachable, !dbg !262
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i16 @std.math.random.Lcg64Random.next_short(ptr %0) #0 comdat !dbg !267 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !270
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !270
  br i1 %2, label %panic, label %checkok, !dbg !270

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !271, !DIExpression(), !270)
  %3 = load ptr, ptr %self, align 8, !dbg !270
  %4 = call i32 @std.math.random.Lcg64Random.next_int(ptr %3), !dbg !270
  %trunc = trunc i32 %4 to i16, !dbg !270
  ret i16 %trunc, !dbg !270

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.23, i64 10 }, ptr %indirectarg2, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 65) #5, !dbg !270
  unreachable, !dbg !270
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i8 @std.math.random.Lcg64Random.next_byte(ptr %0) #0 comdat !dbg !272 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !275
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !275
  br i1 %2, label %panic, label %checkok, !dbg !275

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !276, !DIExpression(), !275)
  %3 = load ptr, ptr %self, align 8, !dbg !275
  %4 = call i32 @std.math.random.Lcg64Random.next_int(ptr %3), !dbg !275
  %trunc = trunc i32 %4 to i8, !dbg !275
  ret i8 %trunc, !dbg !275

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.24, i64 9 }, ptr %indirectarg2, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 66) #5, !dbg !275
  unreachable, !dbg !275
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.math.random.Lcg32Random.set_seed(ptr %0, ptr align 8 %1) #0 comdat !dbg !277 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %input = alloca %"char[]", align 8
  %return_value = alloca i32, align 4
  %taddr = alloca ptr, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg7 = alloca %"char[]", align 8
  %indirectarg8 = alloca %"char[]", align 8
  %taddr11 = alloca i64, align 8
  %taddr12 = alloca i64, align 8
  %indirectarg13 = alloca %"char[]", align 8
  %indirectarg14 = alloca %"char[]", align 8
  %indirectarg15 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg16 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !282
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !282
  br i1 %3, label %panic, label %checkok, !dbg !282

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !283, !DIExpression(), !284)
    #dbg_declare(ptr %1, !285, !DIExpression(), !284)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input, ptr align 8 %1, i32 16, i1 false)
    #dbg_declare(ptr %return_value, !286, !DIExpression(), !288)
  store i32 0, ptr %return_value, align 4, !dbg !288
  store ptr %return_value, ptr %taddr, align 8
  %4 = load ptr, ptr %taddr, align 8
  %5 = insertvalue %"char[]" undef, ptr %4, 0
  %6 = insertvalue %"char[]" %5, i64 4, 1
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg3, ptr align 8 %input, i32 16, i1 false)
  store %"char[]" %6, ptr %indirectarg4, align 8
  call void @std.math.random.seeder(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4), !dbg !290
  %7 = load ptr, ptr %self, align 8, !dbg !289
  %checknull = icmp eq ptr %7, null, !dbg !289
  %8 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !289
  br i1 %8, label %panic5, label %checkok9, !dbg !289

checkok9:                                         ; preds = %checkok
  %9 = ptrtoint ptr %7 to i64, !dbg !289
  %10 = urem i64 %9, 4, !dbg !289
  %11 = icmp ne i64 %10, 0, !dbg !289
  %12 = call i1 @llvm.expect.i1(i1 %11, i1 false), !dbg !289
  br i1 %12, label %panic10, label %checkok17, !dbg !289

checkok17:                                        ; preds = %checkok9
  %13 = load i32, ptr %return_value, align 4, !dbg !289
  store i32 %13, ptr %7, align 4, !dbg !289
  ret void, !dbg !289

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func, i64 8 }, ptr %indirectarg2, align 8
  %14 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %14(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 72) #5, !dbg !284
  unreachable, !dbg !284

panic5:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.8, i64 45 }, ptr %indirectarg6, align 8
  store %"char[]" { ptr @.file, i64 11 }, ptr %indirectarg7, align 8
  store %"char[]" { ptr @.func, i64 8 }, ptr %indirectarg8, align 8
  %15 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %15(ptr align 8 %indirectarg6, ptr align 8 %indirectarg7, ptr align 8 %indirectarg8, i32 74) #5, !dbg !289
  unreachable, !dbg !289

panic10:                                          ; preds = %checkok9
  store i64 4, ptr %taddr11, align 8
  %16 = insertvalue %any undef, ptr %taddr11, 0
  %17 = insertvalue %any %16, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %10, ptr %taddr12, align 8
  %18 = insertvalue %any undef, ptr %taddr12, 0
  %19 = insertvalue %any %18, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg13, align 8
  store %"char[]" { ptr @.file, i64 11 }, ptr %indirectarg14, align 8
  store %"char[]" { ptr @.func, i64 8 }, ptr %indirectarg15, align 8
  store %any %17, ptr %varargslots, align 16
  %ptradd = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %19, ptr %ptradd, align 16
  %20 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %20, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg16, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg13, ptr align 8 %indirectarg14, ptr align 8 %indirectarg15, i32 74, ptr align 8 %indirectarg16) #5, !dbg !289
  unreachable, !dbg !289
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i16 @std.math.random.Lcg32Random.next_short(ptr %0) #0 comdat !dbg !291 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %s = alloca ptr, align 8
  %result = alloca i16, align 2
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr9 = alloca i64, align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg13 = alloca %"any[]", align 8
  %indirectarg17 = alloca %"char[]", align 8
  %indirectarg18 = alloca %"char[]", align 8
  %indirectarg19 = alloca %"char[]", align 8
  %taddr22 = alloca i64, align 8
  %taddr23 = alloca i64, align 8
  %indirectarg24 = alloca %"char[]", align 8
  %indirectarg25 = alloca %"char[]", align 8
  %indirectarg26 = alloca %"char[]", align 8
  %varargslots27 = alloca [2 x %any], align 16
  %indirectarg30 = alloca %"any[]", align 8
  %indirectarg34 = alloca %"char[]", align 8
  %indirectarg35 = alloca %"char[]", align 8
  %indirectarg36 = alloca %"char[]", align 8
  %taddr39 = alloca i64, align 8
  %taddr40 = alloca i64, align 8
  %indirectarg41 = alloca %"char[]", align 8
  %indirectarg42 = alloca %"char[]", align 8
  %indirectarg43 = alloca %"char[]", align 8
  %varargslots44 = alloca [2 x %any], align 16
  %indirectarg47 = alloca %"any[]", align 8
  %1 = icmp eq ptr %0, null, !dbg !294
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !294
  br i1 %2, label %panic, label %checkok, !dbg !294

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !295, !DIExpression(), !296)
    #dbg_declare(ptr %s, !297, !DIExpression(), !299)
  %3 = load ptr, ptr %self, align 8, !dbg !299
  store ptr %3, ptr %s, align 8, !dbg !299
    #dbg_declare(ptr %result, !300, !DIExpression(), !301)
  %4 = load ptr, ptr %s, align 8, !dbg !301
  %checknull = icmp eq ptr %4, null, !dbg !301
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !301
  br i1 %5, label %panic3, label %checkok7, !dbg !301

checkok7:                                         ; preds = %checkok
  %6 = ptrtoint ptr %4 to i64, !dbg !301
  %7 = urem i64 %6, 4, !dbg !301
  %8 = icmp ne i64 %7, 0, !dbg !301
  %9 = call i1 @llvm.expect.i1(i1 %8, i1 false), !dbg !301
  br i1 %9, label %panic8, label %checkok14, !dbg !301

checkok14:                                        ; preds = %checkok7
  %10 = load i32, ptr %4, align 4, !dbg !301
  %lshr = lshr i32 %10, 16, !dbg !301
  %11 = freeze i32 %lshr, !dbg !301
  %trunc = trunc i32 %11 to i16, !dbg !301
  store i16 %trunc, ptr %result, align 2, !dbg !301
  %12 = load ptr, ptr %s, align 8, !dbg !302
  %checknull15 = icmp eq ptr %12, null, !dbg !302
  %13 = call i1 @llvm.expect.i1(i1 %checknull15, i1 false), !dbg !302
  br i1 %13, label %panic16, label %checkok20, !dbg !302

checkok20:                                        ; preds = %checkok14
  %14 = ptrtoint ptr %12 to i64, !dbg !302
  %15 = urem i64 %14, 4, !dbg !302
  %16 = icmp ne i64 %15, 0, !dbg !302
  %17 = call i1 @llvm.expect.i1(i1 %16, i1 false), !dbg !302
  br i1 %17, label %panic21, label %checkok31, !dbg !302

checkok31:                                        ; preds = %checkok20
  %18 = load i32, ptr %12, align 4, !dbg !302
  %mul = mul i32 %18, -1856014347, !dbg !302
  %add = add i32 %mul, -1640531527, !dbg !302
  %19 = load ptr, ptr %s, align 8, !dbg !302
  %checknull32 = icmp eq ptr %19, null, !dbg !302
  %20 = call i1 @llvm.expect.i1(i1 %checknull32, i1 false), !dbg !302
  br i1 %20, label %panic33, label %checkok37, !dbg !302

checkok37:                                        ; preds = %checkok31
  %21 = ptrtoint ptr %19 to i64, !dbg !302
  %22 = urem i64 %21, 4, !dbg !302
  %23 = icmp ne i64 %22, 0, !dbg !302
  %24 = call i1 @llvm.expect.i1(i1 %23, i1 false), !dbg !302
  br i1 %24, label %panic38, label %checkok48, !dbg !302

checkok48:                                        ; preds = %checkok37
  store i32 %add, ptr %19, align 4, !dbg !302
  %25 = load i16, ptr %result, align 2, !dbg !303
  ret i16 %25, !dbg !303

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.23, i64 10 }, ptr %indirectarg2, align 8
  %26 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %26(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 77) #5, !dbg !296
  unreachable, !dbg !296

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.11, i64 42 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file, i64 11 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.23, i64 10 }, ptr %indirectarg6, align 8
  %27 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %27(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 80) #5, !dbg !301
  unreachable, !dbg !301

panic8:                                           ; preds = %checkok7
  store i64 4, ptr %taddr, align 8
  %28 = insertvalue %any undef, ptr %taddr, 0
  %29 = insertvalue %any %28, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %7, ptr %taddr9, align 8
  %30 = insertvalue %any undef, ptr %taddr9, 0
  %31 = insertvalue %any %30, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.file, i64 11 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.func.23, i64 10 }, ptr %indirectarg12, align 8
  store %any %29, ptr %varargslots, align 16
  %ptradd = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %31, ptr %ptradd, align 16
  %32 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %32, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg13, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, i32 80, ptr align 8 %indirectarg13) #5, !dbg !301
  unreachable, !dbg !301

panic16:                                          ; preds = %checkok14
  store %"char[]" { ptr @.panic_msg.11, i64 42 }, ptr %indirectarg17, align 8
  store %"char[]" { ptr @.file, i64 11 }, ptr %indirectarg18, align 8
  store %"char[]" { ptr @.func.23, i64 10 }, ptr %indirectarg19, align 8
  %33 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %33(ptr align 8 %indirectarg17, ptr align 8 %indirectarg18, ptr align 8 %indirectarg19, i32 81) #5, !dbg !302
  unreachable, !dbg !302

panic21:                                          ; preds = %checkok20
  store i64 4, ptr %taddr22, align 8
  %34 = insertvalue %any undef, ptr %taddr22, 0
  %35 = insertvalue %any %34, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %15, ptr %taddr23, align 8
  %36 = insertvalue %any undef, ptr %taddr23, 0
  %37 = insertvalue %any %36, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg24, align 8
  store %"char[]" { ptr @.file, i64 11 }, ptr %indirectarg25, align 8
  store %"char[]" { ptr @.func.23, i64 10 }, ptr %indirectarg26, align 8
  store %any %35, ptr %varargslots27, align 16
  %ptradd28 = getelementptr inbounds i8, ptr %varargslots27, i64 16
  store %any %37, ptr %ptradd28, align 16
  %38 = insertvalue %"any[]" undef, ptr %varargslots27, 0
  %"$$temp29" = insertvalue %"any[]" %38, i64 2, 1
  store %"any[]" %"$$temp29", ptr %indirectarg30, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg24, ptr align 8 %indirectarg25, ptr align 8 %indirectarg26, i32 81, ptr align 8 %indirectarg30) #5, !dbg !302
  unreachable, !dbg !302

panic33:                                          ; preds = %checkok31
  store %"char[]" { ptr @.panic_msg.11, i64 42 }, ptr %indirectarg34, align 8
  store %"char[]" { ptr @.file, i64 11 }, ptr %indirectarg35, align 8
  store %"char[]" { ptr @.func.23, i64 10 }, ptr %indirectarg36, align 8
  %39 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %39(ptr align 8 %indirectarg34, ptr align 8 %indirectarg35, ptr align 8 %indirectarg36, i32 81) #5, !dbg !302
  unreachable, !dbg !302

panic38:                                          ; preds = %checkok37
  store i64 4, ptr %taddr39, align 8
  %40 = insertvalue %any undef, ptr %taddr39, 0
  %41 = insertvalue %any %40, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %22, ptr %taddr40, align 8
  %42 = insertvalue %any undef, ptr %taddr40, 0
  %43 = insertvalue %any %42, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg41, align 8
  store %"char[]" { ptr @.file, i64 11 }, ptr %indirectarg42, align 8
  store %"char[]" { ptr @.func.23, i64 10 }, ptr %indirectarg43, align 8
  store %any %41, ptr %varargslots44, align 16
  %ptradd45 = getelementptr inbounds i8, ptr %varargslots44, i64 16
  store %any %43, ptr %ptradd45, align 16
  %44 = insertvalue %"any[]" undef, ptr %varargslots44, 0
  %"$$temp46" = insertvalue %"any[]" %44, i64 2, 1
  store %"any[]" %"$$temp46", ptr %indirectarg47, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg41, ptr align 8 %indirectarg42, ptr align 8 %indirectarg43, i32 81, ptr align 8 %indirectarg47) #5, !dbg !302
  unreachable, !dbg !302
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.math.random.Lcg32Random.next_bytes(ptr %0, ptr align 8 %1) #0 comdat !dbg !304 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i16, align 2
  %taddr = alloca ptr, align 8
  %taddr4 = alloca i64, align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg7 = alloca %"char[]", align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg8 = alloca %"any[]", align 8
  %taddr12 = alloca i64, align 8
  %taddr13 = alloca i64, align 8
  %indirectarg14 = alloca %"char[]", align 8
  %indirectarg15 = alloca %"char[]", align 8
  %indirectarg16 = alloca %"char[]", align 8
  %varargslots17 = alloca [2 x %any], align 16
  %indirectarg20 = alloca %"any[]", align 8
  %taddr24 = alloca i64, align 8
  %taddr25 = alloca i64, align 8
  %indirectarg26 = alloca %"char[]", align 8
  %indirectarg27 = alloca %"char[]", align 8
  %indirectarg28 = alloca %"char[]", align 8
  %varargslots29 = alloca [2 x %any], align 16
  %indirectarg32 = alloca %"any[]", align 8
  %taddr34 = alloca ptr, align 8
  %taddr37 = alloca i64, align 8
  %taddr38 = alloca i64, align 8
  %indirectarg39 = alloca %"char[]", align 8
  %indirectarg40 = alloca %"char[]", align 8
  %indirectarg41 = alloca %"char[]", align 8
  %varargslots42 = alloca [2 x %any], align 16
  %indirectarg45 = alloca %"any[]", align 8
  %taddr49 = alloca i64, align 8
  %taddr50 = alloca i64, align 8
  %indirectarg51 = alloca %"char[]", align 8
  %indirectarg52 = alloca %"char[]", align 8
  %indirectarg53 = alloca %"char[]", align 8
  %varargslots54 = alloca [2 x %any], align 16
  %indirectarg57 = alloca %"any[]", align 8
  %taddr61 = alloca i64, align 8
  %taddr62 = alloca i64, align 8
  %indirectarg63 = alloca %"char[]", align 8
  %indirectarg64 = alloca %"char[]", align 8
  %indirectarg65 = alloca %"char[]", align 8
  %varargslots66 = alloca [2 x %any], align 16
  %indirectarg69 = alloca %"any[]", align 8
  %taddr74 = alloca i64, align 8
  %taddr75 = alloca i64, align 8
  %indirectarg76 = alloca %"char[]", align 8
  %indirectarg77 = alloca %"char[]", align 8
  %indirectarg78 = alloca %"char[]", align 8
  %varargslots79 = alloca [2 x %any], align 16
  %indirectarg82 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg86 = alloca %"char[]", align 8
  %indirectarg87 = alloca %"char[]", align 8
  %indirectarg88 = alloca %"char[]", align 8
  %indirectarg89 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !305
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !305
  br i1 %3, label %panic, label %checkok, !dbg !305

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !306, !DIExpression(), !305)
    #dbg_declare(ptr %1, !307, !DIExpression(), !305)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes, ptr align 8 %1, i32 16, i1 false)
    #dbg_declare(ptr %len, !308, !DIExpression(), !310)
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !310
  %4 = load i64, ptr %ptradd, align 8, !dbg !310
  store i64 %4, ptr %len, align 8, !dbg !310
  br label %loop.cond, !dbg !311

loop.cond:                                        ; preds = %checkok83, %checkok
  %5 = load i64, ptr %len, align 8, !dbg !312
  %lt = icmp ult i64 0, %5, !dbg !312
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !312

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %value, !314, !DIExpression(), !316)
  %6 = load ptr, ptr %self, align 8, !dbg !317
  %7 = call i16 @std.math.random.Lcg32Random.next_short(ptr %6), !dbg !316
  store i16 %7, ptr %value, align 2, !dbg !316
  %8 = load i64, ptr %len, align 8, !dbg !318
  %le = icmp ule i64 %8, 2, !dbg !318
  br i1 %le, label %if.then, label %if.exit, !dbg !318

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %9 = load ptr, ptr %taddr, align 8
  %10 = load i64, ptr %len, align 8, !dbg !319
  %add = add i64 0, %10, !dbg !319
  %gt = icmp ugt i64 0, %add, !dbg !319
  %sub = sub i64 %add, 0, !dbg !319
  %11 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !319
  br i1 %11, label %panic3, label %checkok9, !dbg !319

checkok9:                                         ; preds = %if.then
  %size = sub i64 %add, 0, !dbg !319
  %12 = insertvalue %"char[]" undef, ptr %9, 0, !dbg !319
  %13 = insertvalue %"char[]" %12, i64 %size, 1, !dbg !319
  %14 = load %"char[]", ptr %bytes, align 8, !dbg !319
  %15 = extractvalue %"char[]" %14, 0, !dbg !319
  %16 = extractvalue %"char[]" %14, 1, !dbg !319
  %gt10 = icmp ugt i64 0, %16, !dbg !319
  %17 = call i1 @llvm.expect.i1(i1 %gt10, i1 false), !dbg !319
  br i1 %17, label %panic11, label %checkok21, !dbg !319

checkok21:                                        ; preds = %checkok9
  %size22 = sub i64 %16, 0, !dbg !319
  %18 = insertvalue %"char[]" undef, ptr %15, 0, !dbg !319
  %19 = insertvalue %"char[]" %18, i64 %size22, 1, !dbg !319
  %20 = extractvalue %"char[]" %19, 0, !dbg !319
  %21 = extractvalue %"char[]" %13, 0, !dbg !319
  %22 = extractvalue %"char[]" %13, 1, !dbg !319
  %23 = extractvalue %"char[]" %19, 1, !dbg !319
  %neq = icmp ne i64 %23, %22, !dbg !319
  %24 = call i1 @llvm.expect.i1(i1 %neq, i1 false), !dbg !319
  br i1 %24, label %panic23, label %checkok33, !dbg !319

checkok33:                                        ; preds = %checkok21
  %25 = mul i64 %22, 1, !dbg !319
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %20, ptr align 1 %21, i64 %25, i1 false), !dbg !319
  br label %expr_block.exit, !dbg !321

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr34, align 8
  %26 = load ptr, ptr %taddr34, align 8
  %27 = insertvalue %"char[]" undef, ptr %26, 0
  %28 = insertvalue %"char[]" %27, i64 2, 1
  %29 = load %"char[]", ptr %bytes, align 8, !dbg !322
  %30 = extractvalue %"char[]" %29, 0, !dbg !322
  %31 = extractvalue %"char[]" %29, 1, !dbg !322
  %gt35 = icmp sgt i64 0, %31, !dbg !322
  %32 = call i1 @llvm.expect.i1(i1 %gt35, i1 false), !dbg !322
  br i1 %32, label %panic36, label %checkok46, !dbg !322

checkok46:                                        ; preds = %if.exit
  %lt47 = icmp slt i64 %31, 2, !dbg !322
  %33 = call i1 @llvm.expect.i1(i1 %lt47, i1 false), !dbg !322
  br i1 %33, label %panic48, label %checkok58, !dbg !322

checkok58:                                        ; preds = %checkok46
  %34 = insertvalue %"char[]" undef, ptr %30, 0, !dbg !322
  %35 = insertvalue %"char[]" %34, i64 2, 1, !dbg !322
  %36 = extractvalue %"char[]" %35, 0, !dbg !322
  %37 = extractvalue %"char[]" %28, 0, !dbg !322
  %38 = extractvalue %"char[]" %28, 1, !dbg !322
  %39 = extractvalue %"char[]" %35, 1, !dbg !322
  %neq59 = icmp ne i64 %39, %38, !dbg !322
  %40 = call i1 @llvm.expect.i1(i1 %neq59, i1 false), !dbg !322
  br i1 %40, label %panic60, label %checkok70, !dbg !322

checkok70:                                        ; preds = %checkok58
  %41 = mul i64 %38, 1, !dbg !322
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %36, ptr align 1 %37, i64 %41, i1 false), !dbg !322
  %42 = load i64, ptr %len, align 8, !dbg !323
  %sub71 = sub i64 %42, 2, !dbg !323
  store i64 %sub71, ptr %len, align 8, !dbg !323
  %43 = load %"char[]", ptr %bytes, align 8, !dbg !324
  %44 = extractvalue %"char[]" %43, 0, !dbg !324
  %45 = extractvalue %"char[]" %43, 1, !dbg !324
  %gt72 = icmp ugt i64 2, %45, !dbg !324
  %46 = call i1 @llvm.expect.i1(i1 %gt72, i1 false), !dbg !324
  br i1 %46, label %panic73, label %checkok83, !dbg !324

checkok83:                                        ; preds = %checkok70
  %size84 = sub i64 %45, 2, !dbg !324
  %ptradd85 = getelementptr inbounds i8, ptr %44, i64 2, !dbg !324
  %47 = insertvalue %"char[]" undef, ptr %ptradd85, 0, !dbg !324
  %48 = insertvalue %"char[]" %47, i64 %size84, 1, !dbg !324
  store %"char[]" %48, ptr %bytes, align 8, !dbg !324
  br label %loop.cond, !dbg !324

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.28, i64 30 }, ptr %string, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg86, ptr align 8 %string, i32 16, i1 false)
  store %"char[]" { ptr @.str.29, i64 11 }, ptr %indirectarg87, align 8
  store %"char[]" { ptr @.str.30, i64 22 }, ptr %indirectarg88, align 8
  store %"any[]" zeroinitializer, ptr %indirectarg89, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg86, ptr align 8 %indirectarg87, ptr align 8 %indirectarg88, i32 85, ptr align 8 %indirectarg89), !dbg !325
  unreachable, !dbg !325

expr_block.exit:                                  ; preds = %checkok33
  ret void, !dbg !325

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg2, align 8
  %49 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %49(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 85) #5, !dbg !305
  unreachable, !dbg !305

panic3:                                           ; preds = %if.then
  store i64 %sub, ptr %taddr4, align 8
  %50 = insertvalue %any undef, ptr %taddr4, 0
  %51 = insertvalue %any %50, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.14, i64 43 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg6, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg7, align 8
  store %any %51, ptr %varargslots, align 16
  %52 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %52, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg8, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, ptr align 8 %indirectarg7, i32 153, ptr align 8 %indirectarg8) #5, !dbg !319
  unreachable, !dbg !319

panic11:                                          ; preds = %checkok9
  store i64 %16, ptr %taddr12, align 8
  %53 = insertvalue %any undef, ptr %taddr12, 0
  %54 = insertvalue %any %53, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr13, align 8
  %55 = insertvalue %any undef, ptr %taddr13, 0
  %56 = insertvalue %any %55, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.16, i64 61 }, ptr %indirectarg14, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg15, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg16, align 8
  store %any %54, ptr %varargslots17, align 16
  %ptradd18 = getelementptr inbounds i8, ptr %varargslots17, i64 16
  store %any %56, ptr %ptradd18, align 16
  %57 = insertvalue %"any[]" undef, ptr %varargslots17, 0
  %"$$temp19" = insertvalue %"any[]" %57, i64 2, 1
  store %"any[]" %"$$temp19", ptr %indirectarg20, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg14, ptr align 8 %indirectarg15, ptr align 8 %indirectarg16, i32 153, ptr align 8 %indirectarg20) #5, !dbg !319
  unreachable, !dbg !319

panic23:                                          ; preds = %checkok21
  store i64 %23, ptr %taddr24, align 8
  %58 = insertvalue %any undef, ptr %taddr24, 0
  %59 = insertvalue %any %58, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %22, ptr %taddr25, align 8
  %60 = insertvalue %any undef, ptr %taddr25, 0
  %61 = insertvalue %any %60, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 38 }, ptr %indirectarg26, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg27, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg28, align 8
  store %any %59, ptr %varargslots29, align 16
  %ptradd30 = getelementptr inbounds i8, ptr %varargslots29, i64 16
  store %any %61, ptr %ptradd30, align 16
  %62 = insertvalue %"any[]" undef, ptr %varargslots29, 0
  %"$$temp31" = insertvalue %"any[]" %62, i64 2, 1
  store %"any[]" %"$$temp31", ptr %indirectarg32, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg26, ptr align 8 %indirectarg27, ptr align 8 %indirectarg28, i32 153, ptr align 8 %indirectarg32) #5, !dbg !319
  unreachable, !dbg !319

panic36:                                          ; preds = %if.exit
  store i64 %31, ptr %taddr37, align 8
  %63 = insertvalue %any undef, ptr %taddr37, 0
  %64 = insertvalue %any %63, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr38, align 8
  %65 = insertvalue %any undef, ptr %taddr38, 0
  %66 = insertvalue %any %65, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.16, i64 61 }, ptr %indirectarg39, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg40, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg41, align 8
  store %any %64, ptr %varargslots42, align 16
  %ptradd43 = getelementptr inbounds i8, ptr %varargslots42, i64 16
  store %any %66, ptr %ptradd43, align 16
  %67 = insertvalue %"any[]" undef, ptr %varargslots42, 0
  %"$$temp44" = insertvalue %"any[]" %67, i64 2, 1
  store %"any[]" %"$$temp44", ptr %indirectarg45, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg39, ptr align 8 %indirectarg40, ptr align 8 %indirectarg41, i32 156, ptr align 8 %indirectarg45) #5, !dbg !322
  unreachable, !dbg !322

panic48:                                          ; preds = %checkok46
  store i64 1, ptr %taddr49, align 8
  %68 = insertvalue %any undef, ptr %taddr49, 0
  %69 = insertvalue %any %68, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %31, ptr %taddr50, align 8
  %70 = insertvalue %any undef, ptr %taddr50, 0
  %71 = insertvalue %any %70, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.18, i64 60 }, ptr %indirectarg51, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg52, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg53, align 8
  store %any %69, ptr %varargslots54, align 16
  %ptradd55 = getelementptr inbounds i8, ptr %varargslots54, i64 16
  store %any %71, ptr %ptradd55, align 16
  %72 = insertvalue %"any[]" undef, ptr %varargslots54, 0
  %"$$temp56" = insertvalue %"any[]" %72, i64 2, 1
  store %"any[]" %"$$temp56", ptr %indirectarg57, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg51, ptr align 8 %indirectarg52, ptr align 8 %indirectarg53, i32 156, ptr align 8 %indirectarg57) #5, !dbg !322
  unreachable, !dbg !322

panic60:                                          ; preds = %checkok58
  store i64 %39, ptr %taddr61, align 8
  %73 = insertvalue %any undef, ptr %taddr61, 0
  %74 = insertvalue %any %73, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %38, ptr %taddr62, align 8
  %75 = insertvalue %any undef, ptr %taddr62, 0
  %76 = insertvalue %any %75, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 38 }, ptr %indirectarg63, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg64, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg65, align 8
  store %any %74, ptr %varargslots66, align 16
  %ptradd67 = getelementptr inbounds i8, ptr %varargslots66, i64 16
  store %any %76, ptr %ptradd67, align 16
  %77 = insertvalue %"any[]" undef, ptr %varargslots66, 0
  %"$$temp68" = insertvalue %"any[]" %77, i64 2, 1
  store %"any[]" %"$$temp68", ptr %indirectarg69, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg63, ptr align 8 %indirectarg64, ptr align 8 %indirectarg65, i32 156, ptr align 8 %indirectarg69) #5, !dbg !322
  unreachable, !dbg !322

panic73:                                          ; preds = %checkok70
  store i64 %45, ptr %taddr74, align 8
  %78 = insertvalue %any undef, ptr %taddr74, 0
  %79 = insertvalue %any %78, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 2, ptr %taddr75, align 8
  %80 = insertvalue %any undef, ptr %taddr75, 0
  %81 = insertvalue %any %80, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.16, i64 61 }, ptr %indirectarg76, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg77, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg78, align 8
  store %any %79, ptr %varargslots79, align 16
  %ptradd80 = getelementptr inbounds i8, ptr %varargslots79, i64 16
  store %any %81, ptr %ptradd80, align 16
  %82 = insertvalue %"any[]" undef, ptr %varargslots79, 0
  %"$$temp81" = insertvalue %"any[]" %82, i64 2, 1
  store %"any[]" %"$$temp81", ptr %indirectarg82, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg76, ptr align 8 %indirectarg77, ptr align 8 %indirectarg78, i32 158, ptr align 8 %indirectarg82) #5, !dbg !324
  unreachable, !dbg !324
}

; Function Attrs: nounwind ssp uwtable
define weak_odr <2 x i64> @std.math.random.Lcg32Random.next_int128(ptr %0) #0 comdat !dbg !328 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %taddr = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !331
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !331
  br i1 %2, label %panic, label %checkok, !dbg !331

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !332, !DIExpression(), !331)
  %3 = load ptr, ptr %self, align 8, !dbg !333
  %4 = call i64 @std.math.random.Lcg32Random.next_long(ptr %3), !dbg !335
  %zext = zext i64 %4 to i128, !dbg !335
  %shl = shl i128 %zext, 64, !dbg !335
  %5 = freeze i128 %shl, !dbg !335
  %6 = load ptr, ptr %self, align 8, !dbg !333
  %7 = call i64 @std.math.random.Lcg32Random.next_long(ptr %6), !dbg !335
  %zext3 = zext i64 %7 to i128, !dbg !335
  %add = add i128 %5, %zext3, !dbg !335
  store i128 %add, ptr %taddr, align 16
  %8 = load <2 x i64>, ptr %taddr, align 16
  ret <2 x i64> %8

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.21, i64 11 }, ptr %indirectarg2, align 8
  %9 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %9(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 86) #5, !dbg !331
  unreachable, !dbg !331
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.math.random.Lcg32Random.next_long(ptr %0) #0 comdat !dbg !336 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !339
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !339
  br i1 %2, label %panic, label %checkok, !dbg !339

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !340, !DIExpression(), !339)
  %3 = load ptr, ptr %self, align 8, !dbg !341
  %4 = call i32 @std.math.random.Lcg32Random.next_int(ptr %3), !dbg !343
  %zext = zext i32 %4 to i64, !dbg !343
  %shl = shl i64 %zext, 32, !dbg !343
  %5 = freeze i64 %shl, !dbg !343
  %6 = load ptr, ptr %self, align 8, !dbg !341
  %7 = call i32 @std.math.random.Lcg32Random.next_int(ptr %6), !dbg !343
  %zext3 = zext i32 %7 to i64, !dbg !343
  %add = add i64 %5, %zext3, !dbg !343
  ret i64 %add, !dbg !343

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.10, i64 9 }, ptr %indirectarg2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 87) #5, !dbg !339
  unreachable, !dbg !339
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i32 @std.math.random.Lcg32Random.next_int(ptr %0) #0 comdat !dbg !344 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !347
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !347
  br i1 %2, label %panic, label %checkok, !dbg !347

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !348, !DIExpression(), !347)
  %3 = load ptr, ptr %self, align 8, !dbg !349
  %4 = call i16 @std.math.random.Lcg32Random.next_short(ptr %3), !dbg !351
  %zext = zext i16 %4 to i32, !dbg !351
  %shl = shl i32 %zext, 16, !dbg !351
  %5 = freeze i32 %shl, !dbg !351
  %6 = load ptr, ptr %self, align 8, !dbg !349
  %7 = call i16 @std.math.random.Lcg32Random.next_short(ptr %6), !dbg !351
  %zext3 = zext i16 %7 to i32, !dbg !351
  %add = add i32 %5, %zext3, !dbg !351
  ret i32 %add, !dbg !351

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.22, i64 8 }, ptr %indirectarg2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 88) #5, !dbg !347
  unreachable, !dbg !347
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i8 @std.math.random.Lcg32Random.next_byte(ptr %0) #0 comdat !dbg !352 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !355
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !355
  br i1 %2, label %panic, label %checkok, !dbg !355

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !356, !DIExpression(), !355)
  %3 = load ptr, ptr %self, align 8, !dbg !355
  %4 = call i16 @std.math.random.Lcg32Random.next_short(ptr %3), !dbg !355
  %trunc = trunc i16 %4 to i8, !dbg !355
  ret i8 %trunc, !dbg !355

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.24, i64 9 }, ptr %indirectarg2, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 89) #5, !dbg !355
  unreachable, !dbg !355
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.math.random.Lcg16Random.set_seed(ptr %0, ptr align 8 %1) #0 comdat !dbg !357 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %input = alloca %"char[]", align 8
  %return_value = alloca i16, align 2
  %taddr = alloca ptr, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg7 = alloca %"char[]", align 8
  %indirectarg8 = alloca %"char[]", align 8
  %taddr11 = alloca i64, align 8
  %taddr12 = alloca i64, align 8
  %indirectarg13 = alloca %"char[]", align 8
  %indirectarg14 = alloca %"char[]", align 8
  %indirectarg15 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg16 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !362
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !362
  br i1 %3, label %panic, label %checkok, !dbg !362

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !363, !DIExpression(), !364)
    #dbg_declare(ptr %1, !365, !DIExpression(), !364)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input, ptr align 8 %1, i32 16, i1 false)
    #dbg_declare(ptr %return_value, !366, !DIExpression(), !368)
  store i16 0, ptr %return_value, align 2, !dbg !368
  store ptr %return_value, ptr %taddr, align 8
  %4 = load ptr, ptr %taddr, align 8
  %5 = insertvalue %"char[]" undef, ptr %4, 0
  %6 = insertvalue %"char[]" %5, i64 2, 1
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg3, ptr align 8 %input, i32 16, i1 false)
  store %"char[]" %6, ptr %indirectarg4, align 8
  call void @std.math.random.seeder(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4), !dbg !370
  %7 = load ptr, ptr %self, align 8, !dbg !369
  %checknull = icmp eq ptr %7, null, !dbg !369
  %8 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !369
  br i1 %8, label %panic5, label %checkok9, !dbg !369

checkok9:                                         ; preds = %checkok
  %9 = ptrtoint ptr %7 to i64, !dbg !369
  %10 = urem i64 %9, 2, !dbg !369
  %11 = icmp ne i64 %10, 0, !dbg !369
  %12 = call i1 @llvm.expect.i1(i1 %11, i1 false), !dbg !369
  br i1 %12, label %panic10, label %checkok17, !dbg !369

checkok17:                                        ; preds = %checkok9
  %13 = load i16, ptr %return_value, align 2, !dbg !369
  store i16 %13, ptr %7, align 2, !dbg !369
  ret void, !dbg !369

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func, i64 8 }, ptr %indirectarg2, align 8
  %14 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %14(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 95) #5, !dbg !364
  unreachable, !dbg !364

panic5:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.8, i64 45 }, ptr %indirectarg6, align 8
  store %"char[]" { ptr @.file, i64 11 }, ptr %indirectarg7, align 8
  store %"char[]" { ptr @.func, i64 8 }, ptr %indirectarg8, align 8
  %15 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %15(ptr align 8 %indirectarg6, ptr align 8 %indirectarg7, ptr align 8 %indirectarg8, i32 97) #5, !dbg !369
  unreachable, !dbg !369

panic10:                                          ; preds = %checkok9
  store i64 2, ptr %taddr11, align 8
  %16 = insertvalue %any undef, ptr %taddr11, 0
  %17 = insertvalue %any %16, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %10, ptr %taddr12, align 8
  %18 = insertvalue %any undef, ptr %taddr12, 0
  %19 = insertvalue %any %18, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg13, align 8
  store %"char[]" { ptr @.file, i64 11 }, ptr %indirectarg14, align 8
  store %"char[]" { ptr @.func, i64 8 }, ptr %indirectarg15, align 8
  store %any %17, ptr %varargslots, align 16
  %ptradd = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %19, ptr %ptradd, align 16
  %20 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %20, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg16, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg13, ptr align 8 %indirectarg14, ptr align 8 %indirectarg15, i32 97, ptr align 8 %indirectarg16) #5, !dbg !369
  unreachable, !dbg !369
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i8 @std.math.random.Lcg16Random.next_byte(ptr %0) #0 comdat !dbg !371 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %s = alloca ptr, align 8
  %result = alloca i8, align 1
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr9 = alloca i64, align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg13 = alloca %"any[]", align 8
  %indirectarg17 = alloca %"char[]", align 8
  %indirectarg18 = alloca %"char[]", align 8
  %indirectarg19 = alloca %"char[]", align 8
  %taddr22 = alloca i64, align 8
  %taddr23 = alloca i64, align 8
  %indirectarg24 = alloca %"char[]", align 8
  %indirectarg25 = alloca %"char[]", align 8
  %indirectarg26 = alloca %"char[]", align 8
  %varargslots27 = alloca [2 x %any], align 16
  %indirectarg30 = alloca %"any[]", align 8
  %indirectarg36 = alloca %"char[]", align 8
  %indirectarg37 = alloca %"char[]", align 8
  %indirectarg38 = alloca %"char[]", align 8
  %taddr41 = alloca i64, align 8
  %taddr42 = alloca i64, align 8
  %indirectarg43 = alloca %"char[]", align 8
  %indirectarg44 = alloca %"char[]", align 8
  %indirectarg45 = alloca %"char[]", align 8
  %varargslots46 = alloca [2 x %any], align 16
  %indirectarg49 = alloca %"any[]", align 8
  %1 = icmp eq ptr %0, null, !dbg !374
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !374
  br i1 %2, label %panic, label %checkok, !dbg !374

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !375, !DIExpression(), !376)
    #dbg_declare(ptr %s, !377, !DIExpression(), !379)
  %3 = load ptr, ptr %self, align 8, !dbg !379
  store ptr %3, ptr %s, align 8, !dbg !379
    #dbg_declare(ptr %result, !380, !DIExpression(), !381)
  %4 = load ptr, ptr %s, align 8, !dbg !381
  %checknull = icmp eq ptr %4, null, !dbg !381
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !381
  br i1 %5, label %panic3, label %checkok7, !dbg !381

checkok7:                                         ; preds = %checkok
  %6 = ptrtoint ptr %4 to i64, !dbg !381
  %7 = urem i64 %6, 2, !dbg !381
  %8 = icmp ne i64 %7, 0, !dbg !381
  %9 = call i1 @llvm.expect.i1(i1 %8, i1 false), !dbg !381
  br i1 %9, label %panic8, label %checkok14, !dbg !381

checkok14:                                        ; preds = %checkok7
  %10 = load i16, ptr %4, align 2, !dbg !381
  %zext = zext i16 %10 to i32, !dbg !381
  %lshr = lshr i32 %zext, 8, !dbg !381
  %11 = freeze i32 %lshr, !dbg !381
  %trunc = trunc i32 %11 to i8, !dbg !381
  store i8 %trunc, ptr %result, align 1, !dbg !381
  %12 = load ptr, ptr %s, align 8, !dbg !382
  %checknull15 = icmp eq ptr %12, null, !dbg !382
  %13 = call i1 @llvm.expect.i1(i1 %checknull15, i1 false), !dbg !382
  br i1 %13, label %panic16, label %checkok20, !dbg !382

checkok20:                                        ; preds = %checkok14
  %14 = ptrtoint ptr %12 to i64, !dbg !382
  %15 = urem i64 %14, 2, !dbg !382
  %16 = icmp ne i64 %15, 0, !dbg !382
  %17 = call i1 @llvm.expect.i1(i1 %16, i1 false), !dbg !382
  br i1 %17, label %panic21, label %checkok31, !dbg !382

checkok31:                                        ; preds = %checkok20
  %18 = load i16, ptr %12, align 2, !dbg !382
  %zext32 = zext i16 %18 to i32, !dbg !382
  %mul = mul i32 %zext32, 37213, !dbg !382
  %add = add i32 %mul, 40503, !dbg !382
  %trunc33 = trunc i32 %add to i16, !dbg !382
  %19 = load ptr, ptr %s, align 8, !dbg !382
  %checknull34 = icmp eq ptr %19, null, !dbg !382
  %20 = call i1 @llvm.expect.i1(i1 %checknull34, i1 false), !dbg !382
  br i1 %20, label %panic35, label %checkok39, !dbg !382

checkok39:                                        ; preds = %checkok31
  %21 = ptrtoint ptr %19 to i64, !dbg !382
  %22 = urem i64 %21, 2, !dbg !382
  %23 = icmp ne i64 %22, 0, !dbg !382
  %24 = call i1 @llvm.expect.i1(i1 %23, i1 false), !dbg !382
  br i1 %24, label %panic40, label %checkok50, !dbg !382

checkok50:                                        ; preds = %checkok39
  store i16 %trunc33, ptr %19, align 2, !dbg !382
  %25 = load i8, ptr %result, align 1, !dbg !383
  ret i8 %25, !dbg !383

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.24, i64 9 }, ptr %indirectarg2, align 8
  %26 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %26(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 100) #5, !dbg !376
  unreachable, !dbg !376

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.11, i64 42 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file, i64 11 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.24, i64 9 }, ptr %indirectarg6, align 8
  %27 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %27(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 103) #5, !dbg !381
  unreachable, !dbg !381

panic8:                                           ; preds = %checkok7
  store i64 2, ptr %taddr, align 8
  %28 = insertvalue %any undef, ptr %taddr, 0
  %29 = insertvalue %any %28, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %7, ptr %taddr9, align 8
  %30 = insertvalue %any undef, ptr %taddr9, 0
  %31 = insertvalue %any %30, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.file, i64 11 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.func.24, i64 9 }, ptr %indirectarg12, align 8
  store %any %29, ptr %varargslots, align 16
  %ptradd = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %31, ptr %ptradd, align 16
  %32 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %32, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg13, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, i32 103, ptr align 8 %indirectarg13) #5, !dbg !381
  unreachable, !dbg !381

panic16:                                          ; preds = %checkok14
  store %"char[]" { ptr @.panic_msg.11, i64 42 }, ptr %indirectarg17, align 8
  store %"char[]" { ptr @.file, i64 11 }, ptr %indirectarg18, align 8
  store %"char[]" { ptr @.func.24, i64 9 }, ptr %indirectarg19, align 8
  %33 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %33(ptr align 8 %indirectarg17, ptr align 8 %indirectarg18, ptr align 8 %indirectarg19, i32 104) #5, !dbg !382
  unreachable, !dbg !382

panic21:                                          ; preds = %checkok20
  store i64 2, ptr %taddr22, align 8
  %34 = insertvalue %any undef, ptr %taddr22, 0
  %35 = insertvalue %any %34, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %15, ptr %taddr23, align 8
  %36 = insertvalue %any undef, ptr %taddr23, 0
  %37 = insertvalue %any %36, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg24, align 8
  store %"char[]" { ptr @.file, i64 11 }, ptr %indirectarg25, align 8
  store %"char[]" { ptr @.func.24, i64 9 }, ptr %indirectarg26, align 8
  store %any %35, ptr %varargslots27, align 16
  %ptradd28 = getelementptr inbounds i8, ptr %varargslots27, i64 16
  store %any %37, ptr %ptradd28, align 16
  %38 = insertvalue %"any[]" undef, ptr %varargslots27, 0
  %"$$temp29" = insertvalue %"any[]" %38, i64 2, 1
  store %"any[]" %"$$temp29", ptr %indirectarg30, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg24, ptr align 8 %indirectarg25, ptr align 8 %indirectarg26, i32 104, ptr align 8 %indirectarg30) #5, !dbg !382
  unreachable, !dbg !382

panic35:                                          ; preds = %checkok31
  store %"char[]" { ptr @.panic_msg.11, i64 42 }, ptr %indirectarg36, align 8
  store %"char[]" { ptr @.file, i64 11 }, ptr %indirectarg37, align 8
  store %"char[]" { ptr @.func.24, i64 9 }, ptr %indirectarg38, align 8
  %39 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %39(ptr align 8 %indirectarg36, ptr align 8 %indirectarg37, ptr align 8 %indirectarg38, i32 104) #5, !dbg !382
  unreachable, !dbg !382

panic40:                                          ; preds = %checkok39
  store i64 2, ptr %taddr41, align 8
  %40 = insertvalue %any undef, ptr %taddr41, 0
  %41 = insertvalue %any %40, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %22, ptr %taddr42, align 8
  %42 = insertvalue %any undef, ptr %taddr42, 0
  %43 = insertvalue %any %42, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg43, align 8
  store %"char[]" { ptr @.file, i64 11 }, ptr %indirectarg44, align 8
  store %"char[]" { ptr @.func.24, i64 9 }, ptr %indirectarg45, align 8
  store %any %41, ptr %varargslots46, align 16
  %ptradd47 = getelementptr inbounds i8, ptr %varargslots46, i64 16
  store %any %43, ptr %ptradd47, align 16
  %44 = insertvalue %"any[]" undef, ptr %varargslots46, 0
  %"$$temp48" = insertvalue %"any[]" %44, i64 2, 1
  store %"any[]" %"$$temp48", ptr %indirectarg49, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg43, ptr align 8 %indirectarg44, ptr align 8 %indirectarg45, i32 104, ptr align 8 %indirectarg49) #5, !dbg !382
  unreachable, !dbg !382
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.math.random.Lcg16Random.next_bytes(ptr %0, ptr align 8 %1) #0 comdat !dbg !384 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i8, align 1
  %taddr = alloca ptr, align 8
  %taddr4 = alloca i64, align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg7 = alloca %"char[]", align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg8 = alloca %"any[]", align 8
  %taddr12 = alloca i64, align 8
  %taddr13 = alloca i64, align 8
  %indirectarg14 = alloca %"char[]", align 8
  %indirectarg15 = alloca %"char[]", align 8
  %indirectarg16 = alloca %"char[]", align 8
  %varargslots17 = alloca [2 x %any], align 16
  %indirectarg20 = alloca %"any[]", align 8
  %taddr24 = alloca i64, align 8
  %taddr25 = alloca i64, align 8
  %indirectarg26 = alloca %"char[]", align 8
  %indirectarg27 = alloca %"char[]", align 8
  %indirectarg28 = alloca %"char[]", align 8
  %varargslots29 = alloca [2 x %any], align 16
  %indirectarg32 = alloca %"any[]", align 8
  %taddr34 = alloca ptr, align 8
  %taddr37 = alloca i64, align 8
  %taddr38 = alloca i64, align 8
  %indirectarg39 = alloca %"char[]", align 8
  %indirectarg40 = alloca %"char[]", align 8
  %indirectarg41 = alloca %"char[]", align 8
  %varargslots42 = alloca [2 x %any], align 16
  %indirectarg45 = alloca %"any[]", align 8
  %taddr49 = alloca i64, align 8
  %taddr50 = alloca i64, align 8
  %indirectarg51 = alloca %"char[]", align 8
  %indirectarg52 = alloca %"char[]", align 8
  %indirectarg53 = alloca %"char[]", align 8
  %varargslots54 = alloca [2 x %any], align 16
  %indirectarg57 = alloca %"any[]", align 8
  %taddr61 = alloca i64, align 8
  %taddr62 = alloca i64, align 8
  %indirectarg63 = alloca %"char[]", align 8
  %indirectarg64 = alloca %"char[]", align 8
  %indirectarg65 = alloca %"char[]", align 8
  %varargslots66 = alloca [2 x %any], align 16
  %indirectarg69 = alloca %"any[]", align 8
  %taddr74 = alloca i64, align 8
  %taddr75 = alloca i64, align 8
  %indirectarg76 = alloca %"char[]", align 8
  %indirectarg77 = alloca %"char[]", align 8
  %indirectarg78 = alloca %"char[]", align 8
  %varargslots79 = alloca [2 x %any], align 16
  %indirectarg82 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg86 = alloca %"char[]", align 8
  %indirectarg87 = alloca %"char[]", align 8
  %indirectarg88 = alloca %"char[]", align 8
  %indirectarg89 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !385
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !385
  br i1 %3, label %panic, label %checkok, !dbg !385

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !386, !DIExpression(), !385)
    #dbg_declare(ptr %1, !387, !DIExpression(), !385)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes, ptr align 8 %1, i32 16, i1 false)
    #dbg_declare(ptr %len, !388, !DIExpression(), !390)
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !390
  %4 = load i64, ptr %ptradd, align 8, !dbg !390
  store i64 %4, ptr %len, align 8, !dbg !390
  br label %loop.cond, !dbg !391

loop.cond:                                        ; preds = %checkok83, %checkok
  %5 = load i64, ptr %len, align 8, !dbg !392
  %lt = icmp ult i64 0, %5, !dbg !392
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !392

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %value, !394, !DIExpression(), !396)
  %6 = load ptr, ptr %self, align 8, !dbg !397
  %7 = call i8 @std.math.random.Lcg16Random.next_byte(ptr %6), !dbg !396
  store i8 %7, ptr %value, align 1, !dbg !396
  %8 = load i64, ptr %len, align 8, !dbg !398
  %le = icmp ule i64 %8, 1, !dbg !398
  br i1 %le, label %if.then, label %if.exit, !dbg !398

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %9 = load ptr, ptr %taddr, align 8
  %10 = load i64, ptr %len, align 8, !dbg !399
  %add = add i64 0, %10, !dbg !399
  %gt = icmp ugt i64 0, %add, !dbg !399
  %sub = sub i64 %add, 0, !dbg !399
  %11 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !399
  br i1 %11, label %panic3, label %checkok9, !dbg !399

checkok9:                                         ; preds = %if.then
  %size = sub i64 %add, 0, !dbg !399
  %12 = insertvalue %"char[]" undef, ptr %9, 0, !dbg !399
  %13 = insertvalue %"char[]" %12, i64 %size, 1, !dbg !399
  %14 = load %"char[]", ptr %bytes, align 8, !dbg !399
  %15 = extractvalue %"char[]" %14, 0, !dbg !399
  %16 = extractvalue %"char[]" %14, 1, !dbg !399
  %gt10 = icmp ugt i64 0, %16, !dbg !399
  %17 = call i1 @llvm.expect.i1(i1 %gt10, i1 false), !dbg !399
  br i1 %17, label %panic11, label %checkok21, !dbg !399

checkok21:                                        ; preds = %checkok9
  %size22 = sub i64 %16, 0, !dbg !399
  %18 = insertvalue %"char[]" undef, ptr %15, 0, !dbg !399
  %19 = insertvalue %"char[]" %18, i64 %size22, 1, !dbg !399
  %20 = extractvalue %"char[]" %19, 0, !dbg !399
  %21 = extractvalue %"char[]" %13, 0, !dbg !399
  %22 = extractvalue %"char[]" %13, 1, !dbg !399
  %23 = extractvalue %"char[]" %19, 1, !dbg !399
  %neq = icmp ne i64 %23, %22, !dbg !399
  %24 = call i1 @llvm.expect.i1(i1 %neq, i1 false), !dbg !399
  br i1 %24, label %panic23, label %checkok33, !dbg !399

checkok33:                                        ; preds = %checkok21
  %25 = mul i64 %22, 1, !dbg !399
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %20, ptr align 1 %21, i64 %25, i1 false), !dbg !399
  br label %expr_block.exit, !dbg !401

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr34, align 8
  %26 = load ptr, ptr %taddr34, align 8
  %27 = insertvalue %"char[]" undef, ptr %26, 0
  %28 = insertvalue %"char[]" %27, i64 1, 1
  %29 = load %"char[]", ptr %bytes, align 8, !dbg !402
  %30 = extractvalue %"char[]" %29, 0, !dbg !402
  %31 = extractvalue %"char[]" %29, 1, !dbg !402
  %gt35 = icmp sgt i64 0, %31, !dbg !402
  %32 = call i1 @llvm.expect.i1(i1 %gt35, i1 false), !dbg !402
  br i1 %32, label %panic36, label %checkok46, !dbg !402

checkok46:                                        ; preds = %if.exit
  %lt47 = icmp slt i64 %31, 1, !dbg !402
  %33 = call i1 @llvm.expect.i1(i1 %lt47, i1 false), !dbg !402
  br i1 %33, label %panic48, label %checkok58, !dbg !402

checkok58:                                        ; preds = %checkok46
  %34 = insertvalue %"char[]" undef, ptr %30, 0, !dbg !402
  %35 = insertvalue %"char[]" %34, i64 1, 1, !dbg !402
  %36 = extractvalue %"char[]" %35, 0, !dbg !402
  %37 = extractvalue %"char[]" %28, 0, !dbg !402
  %38 = extractvalue %"char[]" %28, 1, !dbg !402
  %39 = extractvalue %"char[]" %35, 1, !dbg !402
  %neq59 = icmp ne i64 %39, %38, !dbg !402
  %40 = call i1 @llvm.expect.i1(i1 %neq59, i1 false), !dbg !402
  br i1 %40, label %panic60, label %checkok70, !dbg !402

checkok70:                                        ; preds = %checkok58
  %41 = mul i64 %38, 1, !dbg !402
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %36, ptr align 1 %37, i64 %41, i1 false), !dbg !402
  %42 = load i64, ptr %len, align 8, !dbg !403
  %sub71 = sub i64 %42, 1, !dbg !403
  store i64 %sub71, ptr %len, align 8, !dbg !403
  %43 = load %"char[]", ptr %bytes, align 8, !dbg !404
  %44 = extractvalue %"char[]" %43, 0, !dbg !404
  %45 = extractvalue %"char[]" %43, 1, !dbg !404
  %gt72 = icmp ugt i64 1, %45, !dbg !404
  %46 = call i1 @llvm.expect.i1(i1 %gt72, i1 false), !dbg !404
  br i1 %46, label %panic73, label %checkok83, !dbg !404

checkok83:                                        ; preds = %checkok70
  %size84 = sub i64 %45, 1, !dbg !404
  %ptradd85 = getelementptr inbounds i8, ptr %44, i64 1, !dbg !404
  %47 = insertvalue %"char[]" undef, ptr %ptradd85, 0, !dbg !404
  %48 = insertvalue %"char[]" %47, i64 %size84, 1, !dbg !404
  store %"char[]" %48, ptr %bytes, align 8, !dbg !404
  br label %loop.cond, !dbg !404

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.31, i64 30 }, ptr %string, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg86, ptr align 8 %string, i32 16, i1 false)
  store %"char[]" { ptr @.str.32, i64 11 }, ptr %indirectarg87, align 8
  store %"char[]" { ptr @.str.33, i64 22 }, ptr %indirectarg88, align 8
  store %"any[]" zeroinitializer, ptr %indirectarg89, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg86, ptr align 8 %indirectarg87, ptr align 8 %indirectarg88, i32 108, ptr align 8 %indirectarg89), !dbg !405
  unreachable, !dbg !405

expr_block.exit:                                  ; preds = %checkok33
  ret void, !dbg !405

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg2, align 8
  %49 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %49(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 108) #5, !dbg !385
  unreachable, !dbg !385

panic3:                                           ; preds = %if.then
  store i64 %sub, ptr %taddr4, align 8
  %50 = insertvalue %any undef, ptr %taddr4, 0
  %51 = insertvalue %any %50, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.14, i64 43 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg6, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg7, align 8
  store %any %51, ptr %varargslots, align 16
  %52 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %52, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg8, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, ptr align 8 %indirectarg7, i32 153, ptr align 8 %indirectarg8) #5, !dbg !399
  unreachable, !dbg !399

panic11:                                          ; preds = %checkok9
  store i64 %16, ptr %taddr12, align 8
  %53 = insertvalue %any undef, ptr %taddr12, 0
  %54 = insertvalue %any %53, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr13, align 8
  %55 = insertvalue %any undef, ptr %taddr13, 0
  %56 = insertvalue %any %55, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.16, i64 61 }, ptr %indirectarg14, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg15, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg16, align 8
  store %any %54, ptr %varargslots17, align 16
  %ptradd18 = getelementptr inbounds i8, ptr %varargslots17, i64 16
  store %any %56, ptr %ptradd18, align 16
  %57 = insertvalue %"any[]" undef, ptr %varargslots17, 0
  %"$$temp19" = insertvalue %"any[]" %57, i64 2, 1
  store %"any[]" %"$$temp19", ptr %indirectarg20, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg14, ptr align 8 %indirectarg15, ptr align 8 %indirectarg16, i32 153, ptr align 8 %indirectarg20) #5, !dbg !399
  unreachable, !dbg !399

panic23:                                          ; preds = %checkok21
  store i64 %23, ptr %taddr24, align 8
  %58 = insertvalue %any undef, ptr %taddr24, 0
  %59 = insertvalue %any %58, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %22, ptr %taddr25, align 8
  %60 = insertvalue %any undef, ptr %taddr25, 0
  %61 = insertvalue %any %60, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 38 }, ptr %indirectarg26, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg27, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg28, align 8
  store %any %59, ptr %varargslots29, align 16
  %ptradd30 = getelementptr inbounds i8, ptr %varargslots29, i64 16
  store %any %61, ptr %ptradd30, align 16
  %62 = insertvalue %"any[]" undef, ptr %varargslots29, 0
  %"$$temp31" = insertvalue %"any[]" %62, i64 2, 1
  store %"any[]" %"$$temp31", ptr %indirectarg32, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg26, ptr align 8 %indirectarg27, ptr align 8 %indirectarg28, i32 153, ptr align 8 %indirectarg32) #5, !dbg !399
  unreachable, !dbg !399

panic36:                                          ; preds = %if.exit
  store i64 %31, ptr %taddr37, align 8
  %63 = insertvalue %any undef, ptr %taddr37, 0
  %64 = insertvalue %any %63, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr38, align 8
  %65 = insertvalue %any undef, ptr %taddr38, 0
  %66 = insertvalue %any %65, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.16, i64 61 }, ptr %indirectarg39, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg40, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg41, align 8
  store %any %64, ptr %varargslots42, align 16
  %ptradd43 = getelementptr inbounds i8, ptr %varargslots42, i64 16
  store %any %66, ptr %ptradd43, align 16
  %67 = insertvalue %"any[]" undef, ptr %varargslots42, 0
  %"$$temp44" = insertvalue %"any[]" %67, i64 2, 1
  store %"any[]" %"$$temp44", ptr %indirectarg45, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg39, ptr align 8 %indirectarg40, ptr align 8 %indirectarg41, i32 156, ptr align 8 %indirectarg45) #5, !dbg !402
  unreachable, !dbg !402

panic48:                                          ; preds = %checkok46
  store i64 0, ptr %taddr49, align 8
  %68 = insertvalue %any undef, ptr %taddr49, 0
  %69 = insertvalue %any %68, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %31, ptr %taddr50, align 8
  %70 = insertvalue %any undef, ptr %taddr50, 0
  %71 = insertvalue %any %70, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.18, i64 60 }, ptr %indirectarg51, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg52, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg53, align 8
  store %any %69, ptr %varargslots54, align 16
  %ptradd55 = getelementptr inbounds i8, ptr %varargslots54, i64 16
  store %any %71, ptr %ptradd55, align 16
  %72 = insertvalue %"any[]" undef, ptr %varargslots54, 0
  %"$$temp56" = insertvalue %"any[]" %72, i64 2, 1
  store %"any[]" %"$$temp56", ptr %indirectarg57, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg51, ptr align 8 %indirectarg52, ptr align 8 %indirectarg53, i32 156, ptr align 8 %indirectarg57) #5, !dbg !402
  unreachable, !dbg !402

panic60:                                          ; preds = %checkok58
  store i64 %39, ptr %taddr61, align 8
  %73 = insertvalue %any undef, ptr %taddr61, 0
  %74 = insertvalue %any %73, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %38, ptr %taddr62, align 8
  %75 = insertvalue %any undef, ptr %taddr62, 0
  %76 = insertvalue %any %75, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 38 }, ptr %indirectarg63, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg64, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg65, align 8
  store %any %74, ptr %varargslots66, align 16
  %ptradd67 = getelementptr inbounds i8, ptr %varargslots66, i64 16
  store %any %76, ptr %ptradd67, align 16
  %77 = insertvalue %"any[]" undef, ptr %varargslots66, 0
  %"$$temp68" = insertvalue %"any[]" %77, i64 2, 1
  store %"any[]" %"$$temp68", ptr %indirectarg69, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg63, ptr align 8 %indirectarg64, ptr align 8 %indirectarg65, i32 156, ptr align 8 %indirectarg69) #5, !dbg !402
  unreachable, !dbg !402

panic73:                                          ; preds = %checkok70
  store i64 %45, ptr %taddr74, align 8
  %78 = insertvalue %any undef, ptr %taddr74, 0
  %79 = insertvalue %any %78, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 1, ptr %taddr75, align 8
  %80 = insertvalue %any undef, ptr %taddr75, 0
  %81 = insertvalue %any %80, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.16, i64 61 }, ptr %indirectarg76, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg77, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg78, align 8
  store %any %79, ptr %varargslots79, align 16
  %ptradd80 = getelementptr inbounds i8, ptr %varargslots79, i64 16
  store %any %81, ptr %ptradd80, align 16
  %82 = insertvalue %"any[]" undef, ptr %varargslots79, 0
  %"$$temp81" = insertvalue %"any[]" %82, i64 2, 1
  store %"any[]" %"$$temp81", ptr %indirectarg82, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg76, ptr align 8 %indirectarg77, ptr align 8 %indirectarg78, i32 158, ptr align 8 %indirectarg82) #5, !dbg !404
  unreachable, !dbg !404
}

; Function Attrs: nounwind ssp uwtable
define weak_odr <2 x i64> @std.math.random.Lcg16Random.next_int128(ptr %0) #0 comdat !dbg !408 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %taddr = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !411
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !411
  br i1 %2, label %panic, label %checkok, !dbg !411

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !412, !DIExpression(), !411)
  %3 = load ptr, ptr %self, align 8, !dbg !413
  %4 = call i64 @std.math.random.Lcg16Random.next_long(ptr %3), !dbg !415
  %zext = zext i64 %4 to i128, !dbg !415
  %shl = shl i128 %zext, 64, !dbg !415
  %5 = freeze i128 %shl, !dbg !415
  %6 = load ptr, ptr %self, align 8, !dbg !413
  %7 = call i64 @std.math.random.Lcg16Random.next_long(ptr %6), !dbg !415
  %zext3 = zext i64 %7 to i128, !dbg !415
  %add = add i128 %5, %zext3, !dbg !415
  store i128 %add, ptr %taddr, align 16
  %8 = load <2 x i64>, ptr %taddr, align 16
  ret <2 x i64> %8

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.21, i64 11 }, ptr %indirectarg2, align 8
  %9 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %9(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 109) #5, !dbg !411
  unreachable, !dbg !411
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.math.random.Lcg16Random.next_long(ptr %0) #0 comdat !dbg !416 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !419
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !419
  br i1 %2, label %panic, label %checkok, !dbg !419

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !420, !DIExpression(), !419)
  %3 = load ptr, ptr %self, align 8, !dbg !421
  %4 = call i32 @std.math.random.Lcg16Random.next_int(ptr %3), !dbg !423
  %zext = zext i32 %4 to i64, !dbg !423
  %shl = shl i64 %zext, 32, !dbg !423
  %5 = freeze i64 %shl, !dbg !423
  %6 = load ptr, ptr %self, align 8, !dbg !421
  %7 = call i32 @std.math.random.Lcg16Random.next_int(ptr %6), !dbg !423
  %zext3 = zext i32 %7 to i64, !dbg !423
  %add = add i64 %5, %zext3, !dbg !423
  ret i64 %add, !dbg !423

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.10, i64 9 }, ptr %indirectarg2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 110) #5, !dbg !419
  unreachable, !dbg !419
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i32 @std.math.random.Lcg16Random.next_int(ptr %0) #0 comdat !dbg !424 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !427
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !427
  br i1 %2, label %panic, label %checkok, !dbg !427

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !428, !DIExpression(), !427)
  %3 = load ptr, ptr %self, align 8, !dbg !429
  %4 = call i16 @std.math.random.Lcg16Random.next_short(ptr %3), !dbg !431
  %zext = zext i16 %4 to i32, !dbg !431
  %shl = shl i32 %zext, 16, !dbg !431
  %5 = freeze i32 %shl, !dbg !431
  %6 = load ptr, ptr %self, align 8, !dbg !429
  %7 = call i16 @std.math.random.Lcg16Random.next_short(ptr %6), !dbg !431
  %zext3 = zext i16 %7 to i32, !dbg !431
  %add = add i32 %5, %zext3, !dbg !431
  ret i32 %add, !dbg !431

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.22, i64 8 }, ptr %indirectarg2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 111) #5, !dbg !427
  unreachable, !dbg !427
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i16 @std.math.random.Lcg16Random.next_short(ptr %0) #0 comdat !dbg !432 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !435
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !435
  br i1 %2, label %panic, label %checkok, !dbg !435

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !436, !DIExpression(), !435)
  %3 = load ptr, ptr %self, align 8, !dbg !437
  %4 = call i8 @std.math.random.Lcg16Random.next_byte(ptr %3), !dbg !439
  %zext = zext i8 %4 to i16, !dbg !439
  %zext3 = zext i16 %zext to i32, !dbg !439
  %shl = shl i32 %zext3, 8, !dbg !439
  %5 = freeze i32 %shl, !dbg !439
  %6 = load ptr, ptr %self, align 8, !dbg !437
  %7 = call i8 @std.math.random.Lcg16Random.next_byte(ptr %6), !dbg !439
  %zext4 = zext i8 %7 to i32, !dbg !439
  %add = add i32 %5, %zext4, !dbg !439
  %trunc = trunc i32 %add to i16, !dbg !439
  ret i16 %trunc, !dbg !439

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.23, i64 10 }, ptr %indirectarg2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 112) #5, !dbg !435
  unreachable, !dbg !435
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.math.random.Mcg128Random.set_seed(ptr %0, ptr align 8 %1) #0 comdat !dbg !440 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %input = alloca %"char[]", align 8
  %return_value = alloca i128, align 16
  %taddr = alloca ptr, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg7 = alloca %"char[]", align 8
  %indirectarg8 = alloca %"char[]", align 8
  %taddr11 = alloca i64, align 8
  %taddr12 = alloca i64, align 8
  %indirectarg13 = alloca %"char[]", align 8
  %indirectarg14 = alloca %"char[]", align 8
  %indirectarg15 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg16 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !445
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !445
  br i1 %3, label %panic, label %checkok, !dbg !445

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !446, !DIExpression(), !447)
    #dbg_declare(ptr %1, !448, !DIExpression(), !447)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input, ptr align 8 %1, i32 16, i1 false)
    #dbg_declare(ptr %return_value, !449, !DIExpression(), !451)
  store i128 0, ptr %return_value, align 16, !dbg !451
  store ptr %return_value, ptr %taddr, align 8
  %4 = load ptr, ptr %taddr, align 8
  %5 = insertvalue %"char[]" undef, ptr %4, 0
  %6 = insertvalue %"char[]" %5, i64 16, 1
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg3, ptr align 8 %input, i32 16, i1 false)
  store %"char[]" %6, ptr %indirectarg4, align 8
  call void @std.math.random.seeder(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4), !dbg !453
  %7 = load i128, ptr %return_value, align 16, !dbg !454
  %or = or i128 %7, 1, !dbg !452
  %8 = load ptr, ptr %self, align 8, !dbg !452
  %checknull = icmp eq ptr %8, null, !dbg !452
  %9 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !452
  br i1 %9, label %panic5, label %checkok9, !dbg !452

checkok9:                                         ; preds = %checkok
  %10 = ptrtoint ptr %8 to i64, !dbg !452
  %11 = urem i64 %10, 16, !dbg !452
  %12 = icmp ne i64 %11, 0, !dbg !452
  %13 = call i1 @llvm.expect.i1(i1 %12, i1 false), !dbg !452
  br i1 %13, label %panic10, label %checkok17, !dbg !452

checkok17:                                        ; preds = %checkok9
  store i128 %or, ptr %8, align 16, !dbg !452
  ret void, !dbg !452

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.37, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func, i64 8 }, ptr %indirectarg2, align 8
  %14 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %14(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 12) #5, !dbg !447
  unreachable, !dbg !447

panic5:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.8, i64 45 }, ptr %indirectarg6, align 8
  store %"char[]" { ptr @.file.37, i64 11 }, ptr %indirectarg7, align 8
  store %"char[]" { ptr @.func, i64 8 }, ptr %indirectarg8, align 8
  %15 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %15(ptr align 8 %indirectarg6, ptr align 8 %indirectarg7, ptr align 8 %indirectarg8, i32 14) #5, !dbg !452
  unreachable, !dbg !452

panic10:                                          ; preds = %checkok9
  store i64 16, ptr %taddr11, align 8
  %16 = insertvalue %any undef, ptr %taddr11, 0
  %17 = insertvalue %any %16, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %11, ptr %taddr12, align 8
  %18 = insertvalue %any undef, ptr %taddr12, 0
  %19 = insertvalue %any %18, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg13, align 8
  store %"char[]" { ptr @.file.37, i64 11 }, ptr %indirectarg14, align 8
  store %"char[]" { ptr @.func, i64 8 }, ptr %indirectarg15, align 8
  store %any %17, ptr %varargslots, align 16
  %ptradd = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %19, ptr %ptradd, align 16
  %20 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %20, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg16, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg13, ptr align 8 %indirectarg14, ptr align 8 %indirectarg15, i32 14, ptr align 8 %indirectarg16) #5, !dbg !452
  unreachable, !dbg !452
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.math.random.Mcg128Random.next_bytes(ptr %0, ptr align 8 %1) #0 comdat !dbg !455 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %bytes = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i64, align 8
  %taddr = alloca ptr, align 8
  %taddr9 = alloca i64, align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg13 = alloca %"any[]", align 8
  %taddr17 = alloca i64, align 8
  %taddr18 = alloca i64, align 8
  %indirectarg19 = alloca %"char[]", align 8
  %indirectarg20 = alloca %"char[]", align 8
  %indirectarg21 = alloca %"char[]", align 8
  %varargslots22 = alloca [2 x %any], align 16
  %indirectarg25 = alloca %"any[]", align 8
  %taddr29 = alloca i64, align 8
  %taddr30 = alloca i64, align 8
  %indirectarg31 = alloca %"char[]", align 8
  %indirectarg32 = alloca %"char[]", align 8
  %indirectarg33 = alloca %"char[]", align 8
  %varargslots34 = alloca [2 x %any], align 16
  %indirectarg37 = alloca %"any[]", align 8
  %taddr39 = alloca ptr, align 8
  %taddr42 = alloca i64, align 8
  %taddr43 = alloca i64, align 8
  %indirectarg44 = alloca %"char[]", align 8
  %indirectarg45 = alloca %"char[]", align 8
  %indirectarg46 = alloca %"char[]", align 8
  %varargslots47 = alloca [2 x %any], align 16
  %indirectarg50 = alloca %"any[]", align 8
  %taddr54 = alloca i64, align 8
  %taddr55 = alloca i64, align 8
  %indirectarg56 = alloca %"char[]", align 8
  %indirectarg57 = alloca %"char[]", align 8
  %indirectarg58 = alloca %"char[]", align 8
  %varargslots59 = alloca [2 x %any], align 16
  %indirectarg62 = alloca %"any[]", align 8
  %taddr66 = alloca i64, align 8
  %taddr67 = alloca i64, align 8
  %indirectarg68 = alloca %"char[]", align 8
  %indirectarg69 = alloca %"char[]", align 8
  %indirectarg70 = alloca %"char[]", align 8
  %varargslots71 = alloca [2 x %any], align 16
  %indirectarg74 = alloca %"any[]", align 8
  %taddr79 = alloca i64, align 8
  %taddr80 = alloca i64, align 8
  %indirectarg81 = alloca %"char[]", align 8
  %indirectarg82 = alloca %"char[]", align 8
  %indirectarg83 = alloca %"char[]", align 8
  %varargslots84 = alloca [2 x %any], align 16
  %indirectarg87 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg91 = alloca %"char[]", align 8
  %indirectarg92 = alloca %"char[]", align 8
  %indirectarg93 = alloca %"char[]", align 8
  %indirectarg94 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !456
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !456
  br i1 %3, label %panic, label %checkok, !dbg !456

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !457, !DIExpression(), !458)
    #dbg_declare(ptr %1, !459, !DIExpression(), !458)
  %ptradd = getelementptr inbounds i8, ptr %1, i64 8, !dbg !460
  %4 = load i64, ptr %ptradd, align 8, !dbg !460
  %lt = icmp ult i64 0, %4, !dbg !460
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !460

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.13, i64 34 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.file.37, i64 11 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg5, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, i32 18) #5, !dbg !460
  unreachable, !dbg !460

assert_ok:                                        ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes, ptr align 8 %1, i32 16, i1 false)
    #dbg_declare(ptr %len, !462, !DIExpression(), !464)
  %ptradd6 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !464
  %6 = load i64, ptr %ptradd6, align 8, !dbg !464
  store i64 %6, ptr %len, align 8, !dbg !464
  br label %loop.cond, !dbg !466

loop.cond:                                        ; preds = %checkok88, %assert_ok
  %7 = load i64, ptr %len, align 8, !dbg !467
  %lt7 = icmp ult i64 0, %7, !dbg !467
  br i1 %lt7, label %loop.body, label %loop.exit, !dbg !467

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %value, !469, !DIExpression(), !471)
  %8 = load ptr, ptr %self, align 8, !dbg !472
  %9 = call i64 @std.math.random.Mcg128Random.next_long(ptr %8), !dbg !471
  store i64 %9, ptr %value, align 8, !dbg !471
  %10 = load i64, ptr %len, align 8, !dbg !473
  %le = icmp ule i64 %10, 8, !dbg !473
  br i1 %le, label %if.then, label %if.exit, !dbg !473

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %11 = load ptr, ptr %taddr, align 8
  %12 = load i64, ptr %len, align 8, !dbg !474
  %add = add i64 0, %12, !dbg !474
  %gt = icmp ugt i64 0, %add, !dbg !474
  %sub = sub i64 %add, 0, !dbg !474
  %13 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !474
  br i1 %13, label %panic8, label %checkok14, !dbg !474

checkok14:                                        ; preds = %if.then
  %size = sub i64 %add, 0, !dbg !474
  %14 = insertvalue %"char[]" undef, ptr %11, 0, !dbg !474
  %15 = insertvalue %"char[]" %14, i64 %size, 1, !dbg !474
  %16 = load %"char[]", ptr %bytes, align 8, !dbg !474
  %17 = extractvalue %"char[]" %16, 0, !dbg !474
  %18 = extractvalue %"char[]" %16, 1, !dbg !474
  %gt15 = icmp ugt i64 0, %18, !dbg !474
  %19 = call i1 @llvm.expect.i1(i1 %gt15, i1 false), !dbg !474
  br i1 %19, label %panic16, label %checkok26, !dbg !474

checkok26:                                        ; preds = %checkok14
  %size27 = sub i64 %18, 0, !dbg !474
  %20 = insertvalue %"char[]" undef, ptr %17, 0, !dbg !474
  %21 = insertvalue %"char[]" %20, i64 %size27, 1, !dbg !474
  %22 = extractvalue %"char[]" %21, 0, !dbg !474
  %23 = extractvalue %"char[]" %15, 0, !dbg !474
  %24 = extractvalue %"char[]" %15, 1, !dbg !474
  %25 = extractvalue %"char[]" %21, 1, !dbg !474
  %neq = icmp ne i64 %25, %24, !dbg !474
  %26 = call i1 @llvm.expect.i1(i1 %neq, i1 false), !dbg !474
  br i1 %26, label %panic28, label %checkok38, !dbg !474

checkok38:                                        ; preds = %checkok26
  %27 = mul i64 %24, 1, !dbg !474
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %22, ptr align 1 %23, i64 %27, i1 false), !dbg !474
  br label %expr_block.exit, !dbg !476

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr39, align 8
  %28 = load ptr, ptr %taddr39, align 8
  %29 = insertvalue %"char[]" undef, ptr %28, 0
  %30 = insertvalue %"char[]" %29, i64 8, 1
  %31 = load %"char[]", ptr %bytes, align 8, !dbg !477
  %32 = extractvalue %"char[]" %31, 0, !dbg !477
  %33 = extractvalue %"char[]" %31, 1, !dbg !477
  %gt40 = icmp sgt i64 0, %33, !dbg !477
  %34 = call i1 @llvm.expect.i1(i1 %gt40, i1 false), !dbg !477
  br i1 %34, label %panic41, label %checkok51, !dbg !477

checkok51:                                        ; preds = %if.exit
  %lt52 = icmp slt i64 %33, 8, !dbg !477
  %35 = call i1 @llvm.expect.i1(i1 %lt52, i1 false), !dbg !477
  br i1 %35, label %panic53, label %checkok63, !dbg !477

checkok63:                                        ; preds = %checkok51
  %36 = insertvalue %"char[]" undef, ptr %32, 0, !dbg !477
  %37 = insertvalue %"char[]" %36, i64 8, 1, !dbg !477
  %38 = extractvalue %"char[]" %37, 0, !dbg !477
  %39 = extractvalue %"char[]" %30, 0, !dbg !477
  %40 = extractvalue %"char[]" %30, 1, !dbg !477
  %41 = extractvalue %"char[]" %37, 1, !dbg !477
  %neq64 = icmp ne i64 %41, %40, !dbg !477
  %42 = call i1 @llvm.expect.i1(i1 %neq64, i1 false), !dbg !477
  br i1 %42, label %panic65, label %checkok75, !dbg !477

checkok75:                                        ; preds = %checkok63
  %43 = mul i64 %40, 1, !dbg !477
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %38, ptr align 1 %39, i64 %43, i1 false), !dbg !477
  %44 = load i64, ptr %len, align 8, !dbg !478
  %sub76 = sub i64 %44, 8, !dbg !478
  store i64 %sub76, ptr %len, align 8, !dbg !478
  %45 = load %"char[]", ptr %bytes, align 8, !dbg !479
  %46 = extractvalue %"char[]" %45, 0, !dbg !479
  %47 = extractvalue %"char[]" %45, 1, !dbg !479
  %gt77 = icmp ugt i64 8, %47, !dbg !479
  %48 = call i1 @llvm.expect.i1(i1 %gt77, i1 false), !dbg !479
  br i1 %48, label %panic78, label %checkok88, !dbg !479

checkok88:                                        ; preds = %checkok75
  %size89 = sub i64 %47, 8, !dbg !479
  %ptradd90 = getelementptr inbounds i8, ptr %46, i64 8, !dbg !479
  %49 = insertvalue %"char[]" undef, ptr %ptradd90, 0, !dbg !479
  %50 = insertvalue %"char[]" %49, i64 %size89, 1, !dbg !479
  store %"char[]" %50, ptr %bytes, align 8, !dbg !479
  br label %loop.cond, !dbg !479

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.38, i64 30 }, ptr %string, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg91, ptr align 8 %string, i32 16, i1 false)
  store %"char[]" { ptr @.str.39, i64 11 }, ptr %indirectarg92, align 8
  store %"char[]" { ptr @.str.40, i64 23 }, ptr %indirectarg93, align 8
  store %"any[]" zeroinitializer, ptr %indirectarg94, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg91, ptr align 8 %indirectarg92, ptr align 8 %indirectarg93, i32 22, ptr align 8 %indirectarg94), !dbg !480
  unreachable, !dbg !480

expr_block.exit:                                  ; preds = %checkok38
  ret void, !dbg !480

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.37, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg2, align 8
  %51 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %51(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 20) #5, !dbg !458
  unreachable, !dbg !458

panic8:                                           ; preds = %if.then
  store i64 %sub, ptr %taddr9, align 8
  %52 = insertvalue %any undef, ptr %taddr9, 0
  %53 = insertvalue %any %52, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.14, i64 43 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg12, align 8
  store %any %53, ptr %varargslots, align 16
  %54 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %54, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg13, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, i32 153, ptr align 8 %indirectarg13) #5, !dbg !474
  unreachable, !dbg !474

panic16:                                          ; preds = %checkok14
  store i64 %18, ptr %taddr17, align 8
  %55 = insertvalue %any undef, ptr %taddr17, 0
  %56 = insertvalue %any %55, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr18, align 8
  %57 = insertvalue %any undef, ptr %taddr18, 0
  %58 = insertvalue %any %57, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.16, i64 61 }, ptr %indirectarg19, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg20, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg21, align 8
  store %any %56, ptr %varargslots22, align 16
  %ptradd23 = getelementptr inbounds i8, ptr %varargslots22, i64 16
  store %any %58, ptr %ptradd23, align 16
  %59 = insertvalue %"any[]" undef, ptr %varargslots22, 0
  %"$$temp24" = insertvalue %"any[]" %59, i64 2, 1
  store %"any[]" %"$$temp24", ptr %indirectarg25, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg19, ptr align 8 %indirectarg20, ptr align 8 %indirectarg21, i32 153, ptr align 8 %indirectarg25) #5, !dbg !474
  unreachable, !dbg !474

panic28:                                          ; preds = %checkok26
  store i64 %25, ptr %taddr29, align 8
  %60 = insertvalue %any undef, ptr %taddr29, 0
  %61 = insertvalue %any %60, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %24, ptr %taddr30, align 8
  %62 = insertvalue %any undef, ptr %taddr30, 0
  %63 = insertvalue %any %62, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 38 }, ptr %indirectarg31, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg32, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg33, align 8
  store %any %61, ptr %varargslots34, align 16
  %ptradd35 = getelementptr inbounds i8, ptr %varargslots34, i64 16
  store %any %63, ptr %ptradd35, align 16
  %64 = insertvalue %"any[]" undef, ptr %varargslots34, 0
  %"$$temp36" = insertvalue %"any[]" %64, i64 2, 1
  store %"any[]" %"$$temp36", ptr %indirectarg37, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg31, ptr align 8 %indirectarg32, ptr align 8 %indirectarg33, i32 153, ptr align 8 %indirectarg37) #5, !dbg !474
  unreachable, !dbg !474

panic41:                                          ; preds = %if.exit
  store i64 %33, ptr %taddr42, align 8
  %65 = insertvalue %any undef, ptr %taddr42, 0
  %66 = insertvalue %any %65, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr43, align 8
  %67 = insertvalue %any undef, ptr %taddr43, 0
  %68 = insertvalue %any %67, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.16, i64 61 }, ptr %indirectarg44, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg45, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg46, align 8
  store %any %66, ptr %varargslots47, align 16
  %ptradd48 = getelementptr inbounds i8, ptr %varargslots47, i64 16
  store %any %68, ptr %ptradd48, align 16
  %69 = insertvalue %"any[]" undef, ptr %varargslots47, 0
  %"$$temp49" = insertvalue %"any[]" %69, i64 2, 1
  store %"any[]" %"$$temp49", ptr %indirectarg50, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg44, ptr align 8 %indirectarg45, ptr align 8 %indirectarg46, i32 156, ptr align 8 %indirectarg50) #5, !dbg !477
  unreachable, !dbg !477

panic53:                                          ; preds = %checkok51
  store i64 7, ptr %taddr54, align 8
  %70 = insertvalue %any undef, ptr %taddr54, 0
  %71 = insertvalue %any %70, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %33, ptr %taddr55, align 8
  %72 = insertvalue %any undef, ptr %taddr55, 0
  %73 = insertvalue %any %72, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.18, i64 60 }, ptr %indirectarg56, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg57, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg58, align 8
  store %any %71, ptr %varargslots59, align 16
  %ptradd60 = getelementptr inbounds i8, ptr %varargslots59, i64 16
  store %any %73, ptr %ptradd60, align 16
  %74 = insertvalue %"any[]" undef, ptr %varargslots59, 0
  %"$$temp61" = insertvalue %"any[]" %74, i64 2, 1
  store %"any[]" %"$$temp61", ptr %indirectarg62, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg56, ptr align 8 %indirectarg57, ptr align 8 %indirectarg58, i32 156, ptr align 8 %indirectarg62) #5, !dbg !477
  unreachable, !dbg !477

panic65:                                          ; preds = %checkok63
  store i64 %41, ptr %taddr66, align 8
  %75 = insertvalue %any undef, ptr %taddr66, 0
  %76 = insertvalue %any %75, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %40, ptr %taddr67, align 8
  %77 = insertvalue %any undef, ptr %taddr67, 0
  %78 = insertvalue %any %77, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 38 }, ptr %indirectarg68, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg69, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg70, align 8
  store %any %76, ptr %varargslots71, align 16
  %ptradd72 = getelementptr inbounds i8, ptr %varargslots71, i64 16
  store %any %78, ptr %ptradd72, align 16
  %79 = insertvalue %"any[]" undef, ptr %varargslots71, 0
  %"$$temp73" = insertvalue %"any[]" %79, i64 2, 1
  store %"any[]" %"$$temp73", ptr %indirectarg74, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg68, ptr align 8 %indirectarg69, ptr align 8 %indirectarg70, i32 156, ptr align 8 %indirectarg74) #5, !dbg !477
  unreachable, !dbg !477

panic78:                                          ; preds = %checkok75
  store i64 %47, ptr %taddr79, align 8
  %80 = insertvalue %any undef, ptr %taddr79, 0
  %81 = insertvalue %any %80, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 8, ptr %taddr80, align 8
  %82 = insertvalue %any undef, ptr %taddr80, 0
  %83 = insertvalue %any %82, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.16, i64 61 }, ptr %indirectarg81, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg82, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg83, align 8
  store %any %81, ptr %varargslots84, align 16
  %ptradd85 = getelementptr inbounds i8, ptr %varargslots84, i64 16
  store %any %83, ptr %ptradd85, align 16
  %84 = insertvalue %"any[]" undef, ptr %varargslots84, 0
  %"$$temp86" = insertvalue %"any[]" %84, i64 2, 1
  store %"any[]" %"$$temp86", ptr %indirectarg87, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg81, ptr align 8 %indirectarg82, ptr align 8 %indirectarg83, i32 158, ptr align 8 %indirectarg87) #5, !dbg !479
  unreachable, !dbg !479
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.math.random.Mcg128Random.next_long(ptr %0) #0 comdat !dbg !483 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %s = alloca ptr, align 8
  %result = alloca i64, align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr9 = alloca i64, align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg13 = alloca %"any[]", align 8
  %indirectarg17 = alloca %"char[]", align 8
  %indirectarg18 = alloca %"char[]", align 8
  %indirectarg19 = alloca %"char[]", align 8
  %taddr22 = alloca i64, align 8
  %taddr23 = alloca i64, align 8
  %indirectarg24 = alloca %"char[]", align 8
  %indirectarg25 = alloca %"char[]", align 8
  %indirectarg26 = alloca %"char[]", align 8
  %varargslots27 = alloca [2 x %any], align 16
  %indirectarg30 = alloca %"any[]", align 8
  %1 = icmp eq ptr %0, null, !dbg !486
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !486
  br i1 %2, label %panic, label %checkok, !dbg !486

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !487, !DIExpression(), !488)
    #dbg_declare(ptr %s, !489, !DIExpression(), !490)
  %3 = load ptr, ptr %self, align 8, !dbg !490
  store ptr %3, ptr %s, align 8, !dbg !490
    #dbg_declare(ptr %result, !491, !DIExpression(), !492)
  %4 = load ptr, ptr %s, align 8, !dbg !492
  %checknull = icmp eq ptr %4, null, !dbg !492
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !492
  br i1 %5, label %panic3, label %checkok7, !dbg !492

checkok7:                                         ; preds = %checkok
  %6 = ptrtoint ptr %4 to i64, !dbg !492
  %7 = urem i64 %6, 16, !dbg !492
  %8 = icmp ne i64 %7, 0, !dbg !492
  %9 = call i1 @llvm.expect.i1(i1 %8, i1 false), !dbg !492
  br i1 %9, label %panic8, label %checkok14, !dbg !492

checkok14:                                        ; preds = %checkok7
  %10 = load i128, ptr %4, align 16, !dbg !492
  %lshr = lshr i128 %10, 64, !dbg !492
  %11 = freeze i128 %lshr, !dbg !492
  %trunc = trunc i128 %11 to i64, !dbg !492
  store i64 %trunc, ptr %result, align 8, !dbg !492
  %12 = load ptr, ptr %s, align 8, !dbg !493
  %checknull15 = icmp eq ptr %12, null, !dbg !493
  %13 = call i1 @llvm.expect.i1(i1 %checknull15, i1 false), !dbg !493
  br i1 %13, label %panic16, label %checkok20, !dbg !493

checkok20:                                        ; preds = %checkok14
  %14 = ptrtoint ptr %12 to i64, !dbg !493
  %15 = urem i64 %14, 16, !dbg !493
  %16 = icmp ne i64 %15, 0, !dbg !493
  %17 = call i1 @llvm.expect.i1(i1 %16, i1 false), !dbg !493
  br i1 %17, label %panic21, label %checkok31, !dbg !493

checkok31:                                        ; preds = %checkok20
  %18 = load i128, ptr %12, align 16, !dbg !493
  %mul = mul i128 %18, -129976298391535590297638237547755878347, !dbg !493
  store i128 %mul, ptr %12, align 16, !dbg !493
  %19 = load i64, ptr %result, align 8, !dbg !494
  ret i64 %19, !dbg !494

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.37, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.10, i64 9 }, ptr %indirectarg2, align 8
  %20 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %20(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 25) #5, !dbg !488
  unreachable, !dbg !488

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.11, i64 42 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.37, i64 11 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.10, i64 9 }, ptr %indirectarg6, align 8
  %21 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %21(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 28) #5, !dbg !492
  unreachable, !dbg !492

panic8:                                           ; preds = %checkok7
  store i64 16, ptr %taddr, align 8
  %22 = insertvalue %any undef, ptr %taddr, 0
  %23 = insertvalue %any %22, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %7, ptr %taddr9, align 8
  %24 = insertvalue %any undef, ptr %taddr9, 0
  %25 = insertvalue %any %24, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.file.37, i64 11 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.func.10, i64 9 }, ptr %indirectarg12, align 8
  store %any %23, ptr %varargslots, align 16
  %ptradd = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %25, ptr %ptradd, align 16
  %26 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %26, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg13, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, i32 28, ptr align 8 %indirectarg13) #5, !dbg !492
  unreachable, !dbg !492

panic16:                                          ; preds = %checkok14
  store %"char[]" { ptr @.panic_msg.11, i64 42 }, ptr %indirectarg17, align 8
  store %"char[]" { ptr @.file.37, i64 11 }, ptr %indirectarg18, align 8
  store %"char[]" { ptr @.func.10, i64 9 }, ptr %indirectarg19, align 8
  %27 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %27(ptr align 8 %indirectarg17, ptr align 8 %indirectarg18, ptr align 8 %indirectarg19, i32 29) #5, !dbg !493
  unreachable, !dbg !493

panic21:                                          ; preds = %checkok20
  store i64 16, ptr %taddr22, align 8
  %28 = insertvalue %any undef, ptr %taddr22, 0
  %29 = insertvalue %any %28, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %15, ptr %taddr23, align 8
  %30 = insertvalue %any undef, ptr %taddr23, 0
  %31 = insertvalue %any %30, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg24, align 8
  store %"char[]" { ptr @.file.37, i64 11 }, ptr %indirectarg25, align 8
  store %"char[]" { ptr @.func.10, i64 9 }, ptr %indirectarg26, align 8
  store %any %29, ptr %varargslots27, align 16
  %ptradd28 = getelementptr inbounds i8, ptr %varargslots27, i64 16
  store %any %31, ptr %ptradd28, align 16
  %32 = insertvalue %"any[]" undef, ptr %varargslots27, 0
  %"$$temp29" = insertvalue %"any[]" %32, i64 2, 1
  store %"any[]" %"$$temp29", ptr %indirectarg30, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg24, ptr align 8 %indirectarg25, ptr align 8 %indirectarg26, i32 29, ptr align 8 %indirectarg30) #5, !dbg !493
  unreachable, !dbg !493
}

; Function Attrs: nounwind ssp uwtable
define weak_odr <2 x i64> @std.math.random.Mcg128Random.next_int128(ptr %0) #0 comdat !dbg !495 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %taddr = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !498
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !498
  br i1 %2, label %panic, label %checkok, !dbg !498

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !499, !DIExpression(), !498)
  %3 = load ptr, ptr %self, align 8, !dbg !500
  %4 = call i64 @std.math.random.Mcg128Random.next_long(ptr %3), !dbg !502
  %zext = zext i64 %4 to i128, !dbg !502
  %shl = shl i128 %zext, 64, !dbg !502
  %5 = freeze i128 %shl, !dbg !502
  %6 = load ptr, ptr %self, align 8, !dbg !500
  %7 = call i64 @std.math.random.Mcg128Random.next_long(ptr %6), !dbg !502
  %zext3 = zext i64 %7 to i128, !dbg !502
  %add = add i128 %5, %zext3, !dbg !502
  store i128 %add, ptr %taddr, align 16
  %8 = load <2 x i64>, ptr %taddr, align 16
  ret <2 x i64> %8

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.37, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.21, i64 11 }, ptr %indirectarg2, align 8
  %9 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %9(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 33) #5, !dbg !498
  unreachable, !dbg !498
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i32 @std.math.random.Mcg128Random.next_int(ptr %0) #0 comdat !dbg !503 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !506
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !506
  br i1 %2, label %panic, label %checkok, !dbg !506

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !507, !DIExpression(), !506)
  %3 = load ptr, ptr %self, align 8, !dbg !506
  %4 = call i64 @std.math.random.Mcg128Random.next_long(ptr %3), !dbg !506
  %trunc = trunc i64 %4 to i32, !dbg !506
  ret i32 %trunc, !dbg !506

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.37, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.22, i64 8 }, ptr %indirectarg2, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 34) #5, !dbg !506
  unreachable, !dbg !506
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i16 @std.math.random.Mcg128Random.next_short(ptr %0) #0 comdat !dbg !508 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !511
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !511
  br i1 %2, label %panic, label %checkok, !dbg !511

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !512, !DIExpression(), !511)
  %3 = load ptr, ptr %self, align 8, !dbg !511
  %4 = call i64 @std.math.random.Mcg128Random.next_long(ptr %3), !dbg !511
  %trunc = trunc i64 %4 to i16, !dbg !511
  ret i16 %trunc, !dbg !511

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.37, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.23, i64 10 }, ptr %indirectarg2, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 35) #5, !dbg !511
  unreachable, !dbg !511
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i8 @std.math.random.Mcg128Random.next_byte(ptr %0) #0 comdat !dbg !513 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !516
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !516
  br i1 %2, label %panic, label %checkok, !dbg !516

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !517, !DIExpression(), !516)
  %3 = load ptr, ptr %self, align 8, !dbg !516
  %4 = call i64 @std.math.random.Mcg128Random.next_long(ptr %3), !dbg !516
  %trunc = trunc i64 %4 to i8, !dbg !516
  ret i8 %trunc, !dbg !516

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.37, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.24, i64 9 }, ptr %indirectarg2, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 36) #5, !dbg !516
  unreachable, !dbg !516
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.math.random.Mcg64Random.set_seed(ptr %0, ptr align 8 %1) #0 comdat !dbg !518 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %input = alloca %"char[]", align 8
  %return_value = alloca i64, align 8
  %taddr = alloca ptr, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg7 = alloca %"char[]", align 8
  %indirectarg8 = alloca %"char[]", align 8
  %taddr11 = alloca i64, align 8
  %taddr12 = alloca i64, align 8
  %indirectarg13 = alloca %"char[]", align 8
  %indirectarg14 = alloca %"char[]", align 8
  %indirectarg15 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg16 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !523
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !523
  br i1 %3, label %panic, label %checkok, !dbg !523

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !524, !DIExpression(), !525)
    #dbg_declare(ptr %1, !526, !DIExpression(), !525)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input, ptr align 8 %1, i32 16, i1 false)
    #dbg_declare(ptr %return_value, !527, !DIExpression(), !529)
  store i64 0, ptr %return_value, align 8, !dbg !529
  store ptr %return_value, ptr %taddr, align 8
  %4 = load ptr, ptr %taddr, align 8
  %5 = insertvalue %"char[]" undef, ptr %4, 0
  %6 = insertvalue %"char[]" %5, i64 8, 1
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg3, ptr align 8 %input, i32 16, i1 false)
  store %"char[]" %6, ptr %indirectarg4, align 8
  call void @std.math.random.seeder(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4), !dbg !531
  %7 = load i64, ptr %return_value, align 8, !dbg !532
  %or = or i64 %7, 1, !dbg !530
  %8 = load ptr, ptr %self, align 8, !dbg !530
  %checknull = icmp eq ptr %8, null, !dbg !530
  %9 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !530
  br i1 %9, label %panic5, label %checkok9, !dbg !530

checkok9:                                         ; preds = %checkok
  %10 = ptrtoint ptr %8 to i64, !dbg !530
  %11 = urem i64 %10, 8, !dbg !530
  %12 = icmp ne i64 %11, 0, !dbg !530
  %13 = call i1 @llvm.expect.i1(i1 %12, i1 false), !dbg !530
  br i1 %13, label %panic10, label %checkok17, !dbg !530

checkok17:                                        ; preds = %checkok9
  store i64 %or, ptr %8, align 8, !dbg !530
  ret void, !dbg !530

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.37, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func, i64 8 }, ptr %indirectarg2, align 8
  %14 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %14(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 45) #5, !dbg !525
  unreachable, !dbg !525

panic5:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.8, i64 45 }, ptr %indirectarg6, align 8
  store %"char[]" { ptr @.file.37, i64 11 }, ptr %indirectarg7, align 8
  store %"char[]" { ptr @.func, i64 8 }, ptr %indirectarg8, align 8
  %15 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %15(ptr align 8 %indirectarg6, ptr align 8 %indirectarg7, ptr align 8 %indirectarg8, i32 47) #5, !dbg !530
  unreachable, !dbg !530

panic10:                                          ; preds = %checkok9
  store i64 8, ptr %taddr11, align 8
  %16 = insertvalue %any undef, ptr %taddr11, 0
  %17 = insertvalue %any %16, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %11, ptr %taddr12, align 8
  %18 = insertvalue %any undef, ptr %taddr12, 0
  %19 = insertvalue %any %18, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg13, align 8
  store %"char[]" { ptr @.file.37, i64 11 }, ptr %indirectarg14, align 8
  store %"char[]" { ptr @.func, i64 8 }, ptr %indirectarg15, align 8
  store %any %17, ptr %varargslots, align 16
  %ptradd = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %19, ptr %ptradd, align 16
  %20 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %20, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg16, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg13, ptr align 8 %indirectarg14, ptr align 8 %indirectarg15, i32 47, ptr align 8 %indirectarg16) #5, !dbg !530
  unreachable, !dbg !530
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.math.random.Mcg64Random.next_bytes(ptr %0, ptr align 8 %1) #0 comdat !dbg !533 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %bytes = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i32, align 4
  %taddr = alloca ptr, align 8
  %taddr9 = alloca i64, align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg13 = alloca %"any[]", align 8
  %taddr17 = alloca i64, align 8
  %taddr18 = alloca i64, align 8
  %indirectarg19 = alloca %"char[]", align 8
  %indirectarg20 = alloca %"char[]", align 8
  %indirectarg21 = alloca %"char[]", align 8
  %varargslots22 = alloca [2 x %any], align 16
  %indirectarg25 = alloca %"any[]", align 8
  %taddr29 = alloca i64, align 8
  %taddr30 = alloca i64, align 8
  %indirectarg31 = alloca %"char[]", align 8
  %indirectarg32 = alloca %"char[]", align 8
  %indirectarg33 = alloca %"char[]", align 8
  %varargslots34 = alloca [2 x %any], align 16
  %indirectarg37 = alloca %"any[]", align 8
  %taddr39 = alloca ptr, align 8
  %taddr42 = alloca i64, align 8
  %taddr43 = alloca i64, align 8
  %indirectarg44 = alloca %"char[]", align 8
  %indirectarg45 = alloca %"char[]", align 8
  %indirectarg46 = alloca %"char[]", align 8
  %varargslots47 = alloca [2 x %any], align 16
  %indirectarg50 = alloca %"any[]", align 8
  %taddr54 = alloca i64, align 8
  %taddr55 = alloca i64, align 8
  %indirectarg56 = alloca %"char[]", align 8
  %indirectarg57 = alloca %"char[]", align 8
  %indirectarg58 = alloca %"char[]", align 8
  %varargslots59 = alloca [2 x %any], align 16
  %indirectarg62 = alloca %"any[]", align 8
  %taddr66 = alloca i64, align 8
  %taddr67 = alloca i64, align 8
  %indirectarg68 = alloca %"char[]", align 8
  %indirectarg69 = alloca %"char[]", align 8
  %indirectarg70 = alloca %"char[]", align 8
  %varargslots71 = alloca [2 x %any], align 16
  %indirectarg74 = alloca %"any[]", align 8
  %taddr79 = alloca i64, align 8
  %taddr80 = alloca i64, align 8
  %indirectarg81 = alloca %"char[]", align 8
  %indirectarg82 = alloca %"char[]", align 8
  %indirectarg83 = alloca %"char[]", align 8
  %varargslots84 = alloca [2 x %any], align 16
  %indirectarg87 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg91 = alloca %"char[]", align 8
  %indirectarg92 = alloca %"char[]", align 8
  %indirectarg93 = alloca %"char[]", align 8
  %indirectarg94 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !534
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !534
  br i1 %3, label %panic, label %checkok, !dbg !534

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !535, !DIExpression(), !536)
    #dbg_declare(ptr %1, !537, !DIExpression(), !536)
  %ptradd = getelementptr inbounds i8, ptr %1, i64 8, !dbg !538
  %4 = load i64, ptr %ptradd, align 8, !dbg !538
  %lt = icmp ult i64 0, %4, !dbg !538
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !538

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.13, i64 34 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.file.37, i64 11 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg5, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, i32 51) #5, !dbg !538
  unreachable, !dbg !538

assert_ok:                                        ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes, ptr align 8 %1, i32 16, i1 false)
    #dbg_declare(ptr %len, !540, !DIExpression(), !542)
  %ptradd6 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !542
  %6 = load i64, ptr %ptradd6, align 8, !dbg !542
  store i64 %6, ptr %len, align 8, !dbg !542
  br label %loop.cond, !dbg !544

loop.cond:                                        ; preds = %checkok88, %assert_ok
  %7 = load i64, ptr %len, align 8, !dbg !545
  %lt7 = icmp ult i64 0, %7, !dbg !545
  br i1 %lt7, label %loop.body, label %loop.exit, !dbg !545

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %value, !547, !DIExpression(), !549)
  %8 = load ptr, ptr %self, align 8, !dbg !550
  %9 = call i32 @std.math.random.Mcg64Random.next_int(ptr %8), !dbg !549
  store i32 %9, ptr %value, align 4, !dbg !549
  %10 = load i64, ptr %len, align 8, !dbg !551
  %le = icmp ule i64 %10, 4, !dbg !551
  br i1 %le, label %if.then, label %if.exit, !dbg !551

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %11 = load ptr, ptr %taddr, align 8
  %12 = load i64, ptr %len, align 8, !dbg !552
  %add = add i64 0, %12, !dbg !552
  %gt = icmp ugt i64 0, %add, !dbg !552
  %sub = sub i64 %add, 0, !dbg !552
  %13 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !552
  br i1 %13, label %panic8, label %checkok14, !dbg !552

checkok14:                                        ; preds = %if.then
  %size = sub i64 %add, 0, !dbg !552
  %14 = insertvalue %"char[]" undef, ptr %11, 0, !dbg !552
  %15 = insertvalue %"char[]" %14, i64 %size, 1, !dbg !552
  %16 = load %"char[]", ptr %bytes, align 8, !dbg !552
  %17 = extractvalue %"char[]" %16, 0, !dbg !552
  %18 = extractvalue %"char[]" %16, 1, !dbg !552
  %gt15 = icmp ugt i64 0, %18, !dbg !552
  %19 = call i1 @llvm.expect.i1(i1 %gt15, i1 false), !dbg !552
  br i1 %19, label %panic16, label %checkok26, !dbg !552

checkok26:                                        ; preds = %checkok14
  %size27 = sub i64 %18, 0, !dbg !552
  %20 = insertvalue %"char[]" undef, ptr %17, 0, !dbg !552
  %21 = insertvalue %"char[]" %20, i64 %size27, 1, !dbg !552
  %22 = extractvalue %"char[]" %21, 0, !dbg !552
  %23 = extractvalue %"char[]" %15, 0, !dbg !552
  %24 = extractvalue %"char[]" %15, 1, !dbg !552
  %25 = extractvalue %"char[]" %21, 1, !dbg !552
  %neq = icmp ne i64 %25, %24, !dbg !552
  %26 = call i1 @llvm.expect.i1(i1 %neq, i1 false), !dbg !552
  br i1 %26, label %panic28, label %checkok38, !dbg !552

checkok38:                                        ; preds = %checkok26
  %27 = mul i64 %24, 1, !dbg !552
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %22, ptr align 1 %23, i64 %27, i1 false), !dbg !552
  br label %expr_block.exit, !dbg !554

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr39, align 8
  %28 = load ptr, ptr %taddr39, align 8
  %29 = insertvalue %"char[]" undef, ptr %28, 0
  %30 = insertvalue %"char[]" %29, i64 4, 1
  %31 = load %"char[]", ptr %bytes, align 8, !dbg !555
  %32 = extractvalue %"char[]" %31, 0, !dbg !555
  %33 = extractvalue %"char[]" %31, 1, !dbg !555
  %gt40 = icmp sgt i64 0, %33, !dbg !555
  %34 = call i1 @llvm.expect.i1(i1 %gt40, i1 false), !dbg !555
  br i1 %34, label %panic41, label %checkok51, !dbg !555

checkok51:                                        ; preds = %if.exit
  %lt52 = icmp slt i64 %33, 4, !dbg !555
  %35 = call i1 @llvm.expect.i1(i1 %lt52, i1 false), !dbg !555
  br i1 %35, label %panic53, label %checkok63, !dbg !555

checkok63:                                        ; preds = %checkok51
  %36 = insertvalue %"char[]" undef, ptr %32, 0, !dbg !555
  %37 = insertvalue %"char[]" %36, i64 4, 1, !dbg !555
  %38 = extractvalue %"char[]" %37, 0, !dbg !555
  %39 = extractvalue %"char[]" %30, 0, !dbg !555
  %40 = extractvalue %"char[]" %30, 1, !dbg !555
  %41 = extractvalue %"char[]" %37, 1, !dbg !555
  %neq64 = icmp ne i64 %41, %40, !dbg !555
  %42 = call i1 @llvm.expect.i1(i1 %neq64, i1 false), !dbg !555
  br i1 %42, label %panic65, label %checkok75, !dbg !555

checkok75:                                        ; preds = %checkok63
  %43 = mul i64 %40, 1, !dbg !555
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %38, ptr align 1 %39, i64 %43, i1 false), !dbg !555
  %44 = load i64, ptr %len, align 8, !dbg !556
  %sub76 = sub i64 %44, 4, !dbg !556
  store i64 %sub76, ptr %len, align 8, !dbg !556
  %45 = load %"char[]", ptr %bytes, align 8, !dbg !557
  %46 = extractvalue %"char[]" %45, 0, !dbg !557
  %47 = extractvalue %"char[]" %45, 1, !dbg !557
  %gt77 = icmp ugt i64 4, %47, !dbg !557
  %48 = call i1 @llvm.expect.i1(i1 %gt77, i1 false), !dbg !557
  br i1 %48, label %panic78, label %checkok88, !dbg !557

checkok88:                                        ; preds = %checkok75
  %size89 = sub i64 %47, 4, !dbg !557
  %ptradd90 = getelementptr inbounds i8, ptr %46, i64 4, !dbg !557
  %49 = insertvalue %"char[]" undef, ptr %ptradd90, 0, !dbg !557
  %50 = insertvalue %"char[]" %49, i64 %size89, 1, !dbg !557
  store %"char[]" %50, ptr %bytes, align 8, !dbg !557
  br label %loop.cond, !dbg !557

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.41, i64 30 }, ptr %string, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg91, ptr align 8 %string, i32 16, i1 false)
  store %"char[]" { ptr @.str.42, i64 11 }, ptr %indirectarg92, align 8
  store %"char[]" { ptr @.str.43, i64 22 }, ptr %indirectarg93, align 8
  store %"any[]" zeroinitializer, ptr %indirectarg94, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg91, ptr align 8 %indirectarg92, ptr align 8 %indirectarg93, i32 55, ptr align 8 %indirectarg94), !dbg !558
  unreachable, !dbg !558

expr_block.exit:                                  ; preds = %checkok38
  ret void, !dbg !558

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.37, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg2, align 8
  %51 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %51(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 53) #5, !dbg !536
  unreachable, !dbg !536

panic8:                                           ; preds = %if.then
  store i64 %sub, ptr %taddr9, align 8
  %52 = insertvalue %any undef, ptr %taddr9, 0
  %53 = insertvalue %any %52, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.14, i64 43 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg12, align 8
  store %any %53, ptr %varargslots, align 16
  %54 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %54, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg13, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, i32 153, ptr align 8 %indirectarg13) #5, !dbg !552
  unreachable, !dbg !552

panic16:                                          ; preds = %checkok14
  store i64 %18, ptr %taddr17, align 8
  %55 = insertvalue %any undef, ptr %taddr17, 0
  %56 = insertvalue %any %55, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr18, align 8
  %57 = insertvalue %any undef, ptr %taddr18, 0
  %58 = insertvalue %any %57, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.16, i64 61 }, ptr %indirectarg19, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg20, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg21, align 8
  store %any %56, ptr %varargslots22, align 16
  %ptradd23 = getelementptr inbounds i8, ptr %varargslots22, i64 16
  store %any %58, ptr %ptradd23, align 16
  %59 = insertvalue %"any[]" undef, ptr %varargslots22, 0
  %"$$temp24" = insertvalue %"any[]" %59, i64 2, 1
  store %"any[]" %"$$temp24", ptr %indirectarg25, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg19, ptr align 8 %indirectarg20, ptr align 8 %indirectarg21, i32 153, ptr align 8 %indirectarg25) #5, !dbg !552
  unreachable, !dbg !552

panic28:                                          ; preds = %checkok26
  store i64 %25, ptr %taddr29, align 8
  %60 = insertvalue %any undef, ptr %taddr29, 0
  %61 = insertvalue %any %60, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %24, ptr %taddr30, align 8
  %62 = insertvalue %any undef, ptr %taddr30, 0
  %63 = insertvalue %any %62, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 38 }, ptr %indirectarg31, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg32, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg33, align 8
  store %any %61, ptr %varargslots34, align 16
  %ptradd35 = getelementptr inbounds i8, ptr %varargslots34, i64 16
  store %any %63, ptr %ptradd35, align 16
  %64 = insertvalue %"any[]" undef, ptr %varargslots34, 0
  %"$$temp36" = insertvalue %"any[]" %64, i64 2, 1
  store %"any[]" %"$$temp36", ptr %indirectarg37, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg31, ptr align 8 %indirectarg32, ptr align 8 %indirectarg33, i32 153, ptr align 8 %indirectarg37) #5, !dbg !552
  unreachable, !dbg !552

panic41:                                          ; preds = %if.exit
  store i64 %33, ptr %taddr42, align 8
  %65 = insertvalue %any undef, ptr %taddr42, 0
  %66 = insertvalue %any %65, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr43, align 8
  %67 = insertvalue %any undef, ptr %taddr43, 0
  %68 = insertvalue %any %67, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.16, i64 61 }, ptr %indirectarg44, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg45, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg46, align 8
  store %any %66, ptr %varargslots47, align 16
  %ptradd48 = getelementptr inbounds i8, ptr %varargslots47, i64 16
  store %any %68, ptr %ptradd48, align 16
  %69 = insertvalue %"any[]" undef, ptr %varargslots47, 0
  %"$$temp49" = insertvalue %"any[]" %69, i64 2, 1
  store %"any[]" %"$$temp49", ptr %indirectarg50, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg44, ptr align 8 %indirectarg45, ptr align 8 %indirectarg46, i32 156, ptr align 8 %indirectarg50) #5, !dbg !555
  unreachable, !dbg !555

panic53:                                          ; preds = %checkok51
  store i64 3, ptr %taddr54, align 8
  %70 = insertvalue %any undef, ptr %taddr54, 0
  %71 = insertvalue %any %70, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %33, ptr %taddr55, align 8
  %72 = insertvalue %any undef, ptr %taddr55, 0
  %73 = insertvalue %any %72, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.18, i64 60 }, ptr %indirectarg56, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg57, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg58, align 8
  store %any %71, ptr %varargslots59, align 16
  %ptradd60 = getelementptr inbounds i8, ptr %varargslots59, i64 16
  store %any %73, ptr %ptradd60, align 16
  %74 = insertvalue %"any[]" undef, ptr %varargslots59, 0
  %"$$temp61" = insertvalue %"any[]" %74, i64 2, 1
  store %"any[]" %"$$temp61", ptr %indirectarg62, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg56, ptr align 8 %indirectarg57, ptr align 8 %indirectarg58, i32 156, ptr align 8 %indirectarg62) #5, !dbg !555
  unreachable, !dbg !555

panic65:                                          ; preds = %checkok63
  store i64 %41, ptr %taddr66, align 8
  %75 = insertvalue %any undef, ptr %taddr66, 0
  %76 = insertvalue %any %75, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %40, ptr %taddr67, align 8
  %77 = insertvalue %any undef, ptr %taddr67, 0
  %78 = insertvalue %any %77, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 38 }, ptr %indirectarg68, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg69, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg70, align 8
  store %any %76, ptr %varargslots71, align 16
  %ptradd72 = getelementptr inbounds i8, ptr %varargslots71, i64 16
  store %any %78, ptr %ptradd72, align 16
  %79 = insertvalue %"any[]" undef, ptr %varargslots71, 0
  %"$$temp73" = insertvalue %"any[]" %79, i64 2, 1
  store %"any[]" %"$$temp73", ptr %indirectarg74, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg68, ptr align 8 %indirectarg69, ptr align 8 %indirectarg70, i32 156, ptr align 8 %indirectarg74) #5, !dbg !555
  unreachable, !dbg !555

panic78:                                          ; preds = %checkok75
  store i64 %47, ptr %taddr79, align 8
  %80 = insertvalue %any undef, ptr %taddr79, 0
  %81 = insertvalue %any %80, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 4, ptr %taddr80, align 8
  %82 = insertvalue %any undef, ptr %taddr80, 0
  %83 = insertvalue %any %82, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.16, i64 61 }, ptr %indirectarg81, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg82, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg83, align 8
  store %any %81, ptr %varargslots84, align 16
  %ptradd85 = getelementptr inbounds i8, ptr %varargslots84, i64 16
  store %any %83, ptr %ptradd85, align 16
  %84 = insertvalue %"any[]" undef, ptr %varargslots84, 0
  %"$$temp86" = insertvalue %"any[]" %84, i64 2, 1
  store %"any[]" %"$$temp86", ptr %indirectarg87, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg81, ptr align 8 %indirectarg82, ptr align 8 %indirectarg83, i32 158, ptr align 8 %indirectarg87) #5, !dbg !557
  unreachable, !dbg !557
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i32 @std.math.random.Mcg64Random.next_int(ptr %0) #0 comdat !dbg !561 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %s = alloca ptr, align 8
  %result = alloca i32, align 4
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr9 = alloca i64, align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg13 = alloca %"any[]", align 8
  %indirectarg17 = alloca %"char[]", align 8
  %indirectarg18 = alloca %"char[]", align 8
  %indirectarg19 = alloca %"char[]", align 8
  %taddr22 = alloca i64, align 8
  %taddr23 = alloca i64, align 8
  %indirectarg24 = alloca %"char[]", align 8
  %indirectarg25 = alloca %"char[]", align 8
  %indirectarg26 = alloca %"char[]", align 8
  %varargslots27 = alloca [2 x %any], align 16
  %indirectarg30 = alloca %"any[]", align 8
  %1 = icmp eq ptr %0, null, !dbg !564
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !564
  br i1 %2, label %panic, label %checkok, !dbg !564

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !565, !DIExpression(), !566)
    #dbg_declare(ptr %s, !567, !DIExpression(), !568)
  %3 = load ptr, ptr %self, align 8, !dbg !568
  store ptr %3, ptr %s, align 8, !dbg !568
    #dbg_declare(ptr %result, !569, !DIExpression(), !570)
  %4 = load ptr, ptr %s, align 8, !dbg !570
  %checknull = icmp eq ptr %4, null, !dbg !570
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !570
  br i1 %5, label %panic3, label %checkok7, !dbg !570

checkok7:                                         ; preds = %checkok
  %6 = ptrtoint ptr %4 to i64, !dbg !570
  %7 = urem i64 %6, 8, !dbg !570
  %8 = icmp ne i64 %7, 0, !dbg !570
  %9 = call i1 @llvm.expect.i1(i1 %8, i1 false), !dbg !570
  br i1 %9, label %panic8, label %checkok14, !dbg !570

checkok14:                                        ; preds = %checkok7
  %10 = load i64, ptr %4, align 8, !dbg !570
  %lshr = lshr i64 %10, 32, !dbg !570
  %11 = freeze i64 %lshr, !dbg !570
  %trunc = trunc i64 %11 to i32, !dbg !570
  store i32 %trunc, ptr %result, align 4, !dbg !570
  %12 = load ptr, ptr %s, align 8, !dbg !571
  %checknull15 = icmp eq ptr %12, null, !dbg !571
  %13 = call i1 @llvm.expect.i1(i1 %checknull15, i1 false), !dbg !571
  br i1 %13, label %panic16, label %checkok20, !dbg !571

checkok20:                                        ; preds = %checkok14
  %14 = ptrtoint ptr %12 to i64, !dbg !571
  %15 = urem i64 %14, 8, !dbg !571
  %16 = icmp ne i64 %15, 0, !dbg !571
  %17 = call i1 @llvm.expect.i1(i1 %16, i1 false), !dbg !571
  br i1 %17, label %panic21, label %checkok31, !dbg !571

checkok31:                                        ; preds = %checkok20
  %18 = load i64, ptr %12, align 8, !dbg !571
  %mul = mul i64 %18, -1065810590584100411, !dbg !571
  store i64 %mul, ptr %12, align 8, !dbg !571
  %19 = load i32, ptr %result, align 4, !dbg !572
  ret i32 %19, !dbg !572

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.37, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.22, i64 8 }, ptr %indirectarg2, align 8
  %20 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %20(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 58) #5, !dbg !566
  unreachable, !dbg !566

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.11, i64 42 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.37, i64 11 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.22, i64 8 }, ptr %indirectarg6, align 8
  %21 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %21(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 61) #5, !dbg !570
  unreachable, !dbg !570

panic8:                                           ; preds = %checkok7
  store i64 8, ptr %taddr, align 8
  %22 = insertvalue %any undef, ptr %taddr, 0
  %23 = insertvalue %any %22, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %7, ptr %taddr9, align 8
  %24 = insertvalue %any undef, ptr %taddr9, 0
  %25 = insertvalue %any %24, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.file.37, i64 11 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.func.22, i64 8 }, ptr %indirectarg12, align 8
  store %any %23, ptr %varargslots, align 16
  %ptradd = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %25, ptr %ptradd, align 16
  %26 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %26, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg13, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, i32 61, ptr align 8 %indirectarg13) #5, !dbg !570
  unreachable, !dbg !570

panic16:                                          ; preds = %checkok14
  store %"char[]" { ptr @.panic_msg.11, i64 42 }, ptr %indirectarg17, align 8
  store %"char[]" { ptr @.file.37, i64 11 }, ptr %indirectarg18, align 8
  store %"char[]" { ptr @.func.22, i64 8 }, ptr %indirectarg19, align 8
  %27 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %27(ptr align 8 %indirectarg17, ptr align 8 %indirectarg18, ptr align 8 %indirectarg19, i32 62) #5, !dbg !571
  unreachable, !dbg !571

panic21:                                          ; preds = %checkok20
  store i64 8, ptr %taddr22, align 8
  %28 = insertvalue %any undef, ptr %taddr22, 0
  %29 = insertvalue %any %28, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %15, ptr %taddr23, align 8
  %30 = insertvalue %any undef, ptr %taddr23, 0
  %31 = insertvalue %any %30, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg24, align 8
  store %"char[]" { ptr @.file.37, i64 11 }, ptr %indirectarg25, align 8
  store %"char[]" { ptr @.func.22, i64 8 }, ptr %indirectarg26, align 8
  store %any %29, ptr %varargslots27, align 16
  %ptradd28 = getelementptr inbounds i8, ptr %varargslots27, i64 16
  store %any %31, ptr %ptradd28, align 16
  %32 = insertvalue %"any[]" undef, ptr %varargslots27, 0
  %"$$temp29" = insertvalue %"any[]" %32, i64 2, 1
  store %"any[]" %"$$temp29", ptr %indirectarg30, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg24, ptr align 8 %indirectarg25, ptr align 8 %indirectarg26, i32 62, ptr align 8 %indirectarg30) #5, !dbg !571
  unreachable, !dbg !571
}

; Function Attrs: nounwind ssp uwtable
define weak_odr <2 x i64> @std.math.random.Mcg64Random.next_int128(ptr %0) #0 comdat !dbg !573 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %taddr = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !576
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !576
  br i1 %2, label %panic, label %checkok, !dbg !576

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !577, !DIExpression(), !576)
  %3 = load ptr, ptr %self, align 8, !dbg !578
  %4 = call i64 @std.math.random.Mcg64Random.next_long(ptr %3), !dbg !580
  %zext = zext i64 %4 to i128, !dbg !580
  %shl = shl i128 %zext, 64, !dbg !580
  %5 = freeze i128 %shl, !dbg !580
  %6 = load ptr, ptr %self, align 8, !dbg !578
  %7 = call i64 @std.math.random.Mcg64Random.next_long(ptr %6), !dbg !580
  %zext3 = zext i64 %7 to i128, !dbg !580
  %add = add i128 %5, %zext3, !dbg !580
  store i128 %add, ptr %taddr, align 16
  %8 = load <2 x i64>, ptr %taddr, align 16
  ret <2 x i64> %8

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.37, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.21, i64 11 }, ptr %indirectarg2, align 8
  %9 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %9(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 66) #5, !dbg !576
  unreachable, !dbg !576
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.math.random.Mcg64Random.next_long(ptr %0) #0 comdat !dbg !581 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !584
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !584
  br i1 %2, label %panic, label %checkok, !dbg !584

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !585, !DIExpression(), !584)
  %3 = load ptr, ptr %self, align 8, !dbg !586
  %4 = call i32 @std.math.random.Mcg64Random.next_int(ptr %3), !dbg !588
  %zext = zext i32 %4 to i64, !dbg !588
  %shl = shl i64 %zext, 32, !dbg !588
  %5 = freeze i64 %shl, !dbg !588
  %6 = load ptr, ptr %self, align 8, !dbg !586
  %7 = call i32 @std.math.random.Mcg64Random.next_int(ptr %6), !dbg !588
  %zext3 = zext i32 %7 to i64, !dbg !588
  %add = add i64 %5, %zext3, !dbg !588
  ret i64 %add, !dbg !588

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.37, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.10, i64 9 }, ptr %indirectarg2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 67) #5, !dbg !584
  unreachable, !dbg !584
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i16 @std.math.random.Mcg64Random.next_short(ptr %0) #0 comdat !dbg !589 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !592
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !592
  br i1 %2, label %panic, label %checkok, !dbg !592

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !593, !DIExpression(), !592)
  %3 = load ptr, ptr %self, align 8, !dbg !592
  %4 = call i32 @std.math.random.Mcg64Random.next_int(ptr %3), !dbg !592
  %trunc = trunc i32 %4 to i16, !dbg !592
  ret i16 %trunc, !dbg !592

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.37, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.23, i64 10 }, ptr %indirectarg2, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 68) #5, !dbg !592
  unreachable, !dbg !592
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i8 @std.math.random.Mcg64Random.next_byte(ptr %0) #0 comdat !dbg !594 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !597
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !597
  br i1 %2, label %panic, label %checkok, !dbg !597

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !598, !DIExpression(), !597)
  %3 = load ptr, ptr %self, align 8, !dbg !597
  %4 = call i32 @std.math.random.Mcg64Random.next_int(ptr %3), !dbg !597
  %trunc = trunc i32 %4 to i8, !dbg !597
  ret i8 %trunc, !dbg !597

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.37, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.24, i64 9 }, ptr %indirectarg2, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 69) #5, !dbg !597
  unreachable, !dbg !597
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.math.random.Mcg32Random.set_seed(ptr %0, ptr align 8 %1) #0 comdat !dbg !599 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %input = alloca %"char[]", align 8
  %return_value = alloca i32, align 4
  %taddr = alloca ptr, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg7 = alloca %"char[]", align 8
  %indirectarg8 = alloca %"char[]", align 8
  %taddr11 = alloca i64, align 8
  %taddr12 = alloca i64, align 8
  %indirectarg13 = alloca %"char[]", align 8
  %indirectarg14 = alloca %"char[]", align 8
  %indirectarg15 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg16 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !604
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !604
  br i1 %3, label %panic, label %checkok, !dbg !604

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !605, !DIExpression(), !606)
    #dbg_declare(ptr %1, !607, !DIExpression(), !606)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input, ptr align 8 %1, i32 16, i1 false)
    #dbg_declare(ptr %return_value, !608, !DIExpression(), !610)
  store i32 0, ptr %return_value, align 4, !dbg !610
  store ptr %return_value, ptr %taddr, align 8
  %4 = load ptr, ptr %taddr, align 8
  %5 = insertvalue %"char[]" undef, ptr %4, 0
  %6 = insertvalue %"char[]" %5, i64 4, 1
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg3, ptr align 8 %input, i32 16, i1 false)
  store %"char[]" %6, ptr %indirectarg4, align 8
  call void @std.math.random.seeder(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4), !dbg !612
  %7 = load i32, ptr %return_value, align 4, !dbg !613
  %or = or i32 %7, 1, !dbg !611
  %8 = load ptr, ptr %self, align 8, !dbg !611
  %checknull = icmp eq ptr %8, null, !dbg !611
  %9 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !611
  br i1 %9, label %panic5, label %checkok9, !dbg !611

checkok9:                                         ; preds = %checkok
  %10 = ptrtoint ptr %8 to i64, !dbg !611
  %11 = urem i64 %10, 4, !dbg !611
  %12 = icmp ne i64 %11, 0, !dbg !611
  %13 = call i1 @llvm.expect.i1(i1 %12, i1 false), !dbg !611
  br i1 %13, label %panic10, label %checkok17, !dbg !611

checkok17:                                        ; preds = %checkok9
  store i32 %or, ptr %8, align 4, !dbg !611
  ret void, !dbg !611

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.37, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func, i64 8 }, ptr %indirectarg2, align 8
  %14 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %14(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 76) #5, !dbg !606
  unreachable, !dbg !606

panic5:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.8, i64 45 }, ptr %indirectarg6, align 8
  store %"char[]" { ptr @.file.37, i64 11 }, ptr %indirectarg7, align 8
  store %"char[]" { ptr @.func, i64 8 }, ptr %indirectarg8, align 8
  %15 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %15(ptr align 8 %indirectarg6, ptr align 8 %indirectarg7, ptr align 8 %indirectarg8, i32 78) #5, !dbg !611
  unreachable, !dbg !611

panic10:                                          ; preds = %checkok9
  store i64 4, ptr %taddr11, align 8
  %16 = insertvalue %any undef, ptr %taddr11, 0
  %17 = insertvalue %any %16, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %11, ptr %taddr12, align 8
  %18 = insertvalue %any undef, ptr %taddr12, 0
  %19 = insertvalue %any %18, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg13, align 8
  store %"char[]" { ptr @.file.37, i64 11 }, ptr %indirectarg14, align 8
  store %"char[]" { ptr @.func, i64 8 }, ptr %indirectarg15, align 8
  store %any %17, ptr %varargslots, align 16
  %ptradd = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %19, ptr %ptradd, align 16
  %20 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %20, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg16, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg13, ptr align 8 %indirectarg14, ptr align 8 %indirectarg15, i32 78, ptr align 8 %indirectarg16) #5, !dbg !611
  unreachable, !dbg !611
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i16 @std.math.random.Mcg32Random.next_short(ptr %0) #0 comdat !dbg !614 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %s = alloca ptr, align 8
  %result = alloca i16, align 2
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr9 = alloca i64, align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg13 = alloca %"any[]", align 8
  %indirectarg17 = alloca %"char[]", align 8
  %indirectarg18 = alloca %"char[]", align 8
  %indirectarg19 = alloca %"char[]", align 8
  %taddr22 = alloca i64, align 8
  %taddr23 = alloca i64, align 8
  %indirectarg24 = alloca %"char[]", align 8
  %indirectarg25 = alloca %"char[]", align 8
  %indirectarg26 = alloca %"char[]", align 8
  %varargslots27 = alloca [2 x %any], align 16
  %indirectarg30 = alloca %"any[]", align 8
  %1 = icmp eq ptr %0, null, !dbg !617
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !617
  br i1 %2, label %panic, label %checkok, !dbg !617

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !618, !DIExpression(), !619)
    #dbg_declare(ptr %s, !620, !DIExpression(), !621)
  %3 = load ptr, ptr %self, align 8, !dbg !621
  store ptr %3, ptr %s, align 8, !dbg !621
    #dbg_declare(ptr %result, !622, !DIExpression(), !623)
  %4 = load ptr, ptr %s, align 8, !dbg !623
  %checknull = icmp eq ptr %4, null, !dbg !623
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !623
  br i1 %5, label %panic3, label %checkok7, !dbg !623

checkok7:                                         ; preds = %checkok
  %6 = ptrtoint ptr %4 to i64, !dbg !623
  %7 = urem i64 %6, 4, !dbg !623
  %8 = icmp ne i64 %7, 0, !dbg !623
  %9 = call i1 @llvm.expect.i1(i1 %8, i1 false), !dbg !623
  br i1 %9, label %panic8, label %checkok14, !dbg !623

checkok14:                                        ; preds = %checkok7
  %10 = load i32, ptr %4, align 4, !dbg !623
  %lshr = lshr i32 %10, 16, !dbg !623
  %11 = freeze i32 %lshr, !dbg !623
  %trunc = trunc i32 %11 to i16, !dbg !623
  store i16 %trunc, ptr %result, align 2, !dbg !623
  %12 = load ptr, ptr %s, align 8, !dbg !624
  %checknull15 = icmp eq ptr %12, null, !dbg !624
  %13 = call i1 @llvm.expect.i1(i1 %checknull15, i1 false), !dbg !624
  br i1 %13, label %panic16, label %checkok20, !dbg !624

checkok20:                                        ; preds = %checkok14
  %14 = ptrtoint ptr %12 to i64, !dbg !624
  %15 = urem i64 %14, 4, !dbg !624
  %16 = icmp ne i64 %15, 0, !dbg !624
  %17 = call i1 @llvm.expect.i1(i1 %16, i1 false), !dbg !624
  br i1 %17, label %panic21, label %checkok31, !dbg !624

checkok31:                                        ; preds = %checkok20
  %18 = load i32, ptr %12, align 4, !dbg !624
  %mul = mul i32 %18, -1814600227, !dbg !624
  store i32 %mul, ptr %12, align 4, !dbg !624
  %19 = load i16, ptr %result, align 2, !dbg !625
  ret i16 %19, !dbg !625

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.37, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.23, i64 10 }, ptr %indirectarg2, align 8
  %20 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %20(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 81) #5, !dbg !619
  unreachable, !dbg !619

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.11, i64 42 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.37, i64 11 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.23, i64 10 }, ptr %indirectarg6, align 8
  %21 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %21(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 84) #5, !dbg !623
  unreachable, !dbg !623

panic8:                                           ; preds = %checkok7
  store i64 4, ptr %taddr, align 8
  %22 = insertvalue %any undef, ptr %taddr, 0
  %23 = insertvalue %any %22, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %7, ptr %taddr9, align 8
  %24 = insertvalue %any undef, ptr %taddr9, 0
  %25 = insertvalue %any %24, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.file.37, i64 11 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.func.23, i64 10 }, ptr %indirectarg12, align 8
  store %any %23, ptr %varargslots, align 16
  %ptradd = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %25, ptr %ptradd, align 16
  %26 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %26, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg13, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, i32 84, ptr align 8 %indirectarg13) #5, !dbg !623
  unreachable, !dbg !623

panic16:                                          ; preds = %checkok14
  store %"char[]" { ptr @.panic_msg.11, i64 42 }, ptr %indirectarg17, align 8
  store %"char[]" { ptr @.file.37, i64 11 }, ptr %indirectarg18, align 8
  store %"char[]" { ptr @.func.23, i64 10 }, ptr %indirectarg19, align 8
  %27 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %27(ptr align 8 %indirectarg17, ptr align 8 %indirectarg18, ptr align 8 %indirectarg19, i32 85) #5, !dbg !624
  unreachable, !dbg !624

panic21:                                          ; preds = %checkok20
  store i64 4, ptr %taddr22, align 8
  %28 = insertvalue %any undef, ptr %taddr22, 0
  %29 = insertvalue %any %28, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %15, ptr %taddr23, align 8
  %30 = insertvalue %any undef, ptr %taddr23, 0
  %31 = insertvalue %any %30, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg24, align 8
  store %"char[]" { ptr @.file.37, i64 11 }, ptr %indirectarg25, align 8
  store %"char[]" { ptr @.func.23, i64 10 }, ptr %indirectarg26, align 8
  store %any %29, ptr %varargslots27, align 16
  %ptradd28 = getelementptr inbounds i8, ptr %varargslots27, i64 16
  store %any %31, ptr %ptradd28, align 16
  %32 = insertvalue %"any[]" undef, ptr %varargslots27, 0
  %"$$temp29" = insertvalue %"any[]" %32, i64 2, 1
  store %"any[]" %"$$temp29", ptr %indirectarg30, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg24, ptr align 8 %indirectarg25, ptr align 8 %indirectarg26, i32 85, ptr align 8 %indirectarg30) #5, !dbg !624
  unreachable, !dbg !624
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.math.random.Mcg32Random.next_bytes(ptr %0, ptr align 8 %1) #0 comdat !dbg !626 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %bytes = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i16, align 2
  %taddr = alloca ptr, align 8
  %taddr9 = alloca i64, align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg13 = alloca %"any[]", align 8
  %taddr17 = alloca i64, align 8
  %taddr18 = alloca i64, align 8
  %indirectarg19 = alloca %"char[]", align 8
  %indirectarg20 = alloca %"char[]", align 8
  %indirectarg21 = alloca %"char[]", align 8
  %varargslots22 = alloca [2 x %any], align 16
  %indirectarg25 = alloca %"any[]", align 8
  %taddr29 = alloca i64, align 8
  %taddr30 = alloca i64, align 8
  %indirectarg31 = alloca %"char[]", align 8
  %indirectarg32 = alloca %"char[]", align 8
  %indirectarg33 = alloca %"char[]", align 8
  %varargslots34 = alloca [2 x %any], align 16
  %indirectarg37 = alloca %"any[]", align 8
  %taddr39 = alloca ptr, align 8
  %taddr42 = alloca i64, align 8
  %taddr43 = alloca i64, align 8
  %indirectarg44 = alloca %"char[]", align 8
  %indirectarg45 = alloca %"char[]", align 8
  %indirectarg46 = alloca %"char[]", align 8
  %varargslots47 = alloca [2 x %any], align 16
  %indirectarg50 = alloca %"any[]", align 8
  %taddr54 = alloca i64, align 8
  %taddr55 = alloca i64, align 8
  %indirectarg56 = alloca %"char[]", align 8
  %indirectarg57 = alloca %"char[]", align 8
  %indirectarg58 = alloca %"char[]", align 8
  %varargslots59 = alloca [2 x %any], align 16
  %indirectarg62 = alloca %"any[]", align 8
  %taddr66 = alloca i64, align 8
  %taddr67 = alloca i64, align 8
  %indirectarg68 = alloca %"char[]", align 8
  %indirectarg69 = alloca %"char[]", align 8
  %indirectarg70 = alloca %"char[]", align 8
  %varargslots71 = alloca [2 x %any], align 16
  %indirectarg74 = alloca %"any[]", align 8
  %taddr79 = alloca i64, align 8
  %taddr80 = alloca i64, align 8
  %indirectarg81 = alloca %"char[]", align 8
  %indirectarg82 = alloca %"char[]", align 8
  %indirectarg83 = alloca %"char[]", align 8
  %varargslots84 = alloca [2 x %any], align 16
  %indirectarg87 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg91 = alloca %"char[]", align 8
  %indirectarg92 = alloca %"char[]", align 8
  %indirectarg93 = alloca %"char[]", align 8
  %indirectarg94 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !627
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !627
  br i1 %3, label %panic, label %checkok, !dbg !627

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !628, !DIExpression(), !627)
    #dbg_declare(ptr %1, !629, !DIExpression(), !627)
  %ptradd = getelementptr inbounds i8, ptr %1, i64 8, !dbg !630
  %4 = load i64, ptr %ptradd, align 8, !dbg !630
  %lt = icmp ult i64 0, %4, !dbg !630
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !630

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.13, i64 34 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.file.37, i64 11 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg5, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, i32 90) #5, !dbg !630
  unreachable, !dbg !630

assert_ok:                                        ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes, ptr align 8 %1, i32 16, i1 false)
    #dbg_declare(ptr %len, !632, !DIExpression(), !634)
  %ptradd6 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !634
  %6 = load i64, ptr %ptradd6, align 8, !dbg !634
  store i64 %6, ptr %len, align 8, !dbg !634
  br label %loop.cond, !dbg !635

loop.cond:                                        ; preds = %checkok88, %assert_ok
  %7 = load i64, ptr %len, align 8, !dbg !636
  %lt7 = icmp ult i64 0, %7, !dbg !636
  br i1 %lt7, label %loop.body, label %loop.exit, !dbg !636

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %value, !638, !DIExpression(), !640)
  %8 = load ptr, ptr %self, align 8, !dbg !641
  %9 = call i16 @std.math.random.Mcg32Random.next_short(ptr %8), !dbg !640
  store i16 %9, ptr %value, align 2, !dbg !640
  %10 = load i64, ptr %len, align 8, !dbg !642
  %le = icmp ule i64 %10, 2, !dbg !642
  br i1 %le, label %if.then, label %if.exit, !dbg !642

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %11 = load ptr, ptr %taddr, align 8
  %12 = load i64, ptr %len, align 8, !dbg !643
  %add = add i64 0, %12, !dbg !643
  %gt = icmp ugt i64 0, %add, !dbg !643
  %sub = sub i64 %add, 0, !dbg !643
  %13 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !643
  br i1 %13, label %panic8, label %checkok14, !dbg !643

checkok14:                                        ; preds = %if.then
  %size = sub i64 %add, 0, !dbg !643
  %14 = insertvalue %"char[]" undef, ptr %11, 0, !dbg !643
  %15 = insertvalue %"char[]" %14, i64 %size, 1, !dbg !643
  %16 = load %"char[]", ptr %bytes, align 8, !dbg !643
  %17 = extractvalue %"char[]" %16, 0, !dbg !643
  %18 = extractvalue %"char[]" %16, 1, !dbg !643
  %gt15 = icmp ugt i64 0, %18, !dbg !643
  %19 = call i1 @llvm.expect.i1(i1 %gt15, i1 false), !dbg !643
  br i1 %19, label %panic16, label %checkok26, !dbg !643

checkok26:                                        ; preds = %checkok14
  %size27 = sub i64 %18, 0, !dbg !643
  %20 = insertvalue %"char[]" undef, ptr %17, 0, !dbg !643
  %21 = insertvalue %"char[]" %20, i64 %size27, 1, !dbg !643
  %22 = extractvalue %"char[]" %21, 0, !dbg !643
  %23 = extractvalue %"char[]" %15, 0, !dbg !643
  %24 = extractvalue %"char[]" %15, 1, !dbg !643
  %25 = extractvalue %"char[]" %21, 1, !dbg !643
  %neq = icmp ne i64 %25, %24, !dbg !643
  %26 = call i1 @llvm.expect.i1(i1 %neq, i1 false), !dbg !643
  br i1 %26, label %panic28, label %checkok38, !dbg !643

checkok38:                                        ; preds = %checkok26
  %27 = mul i64 %24, 1, !dbg !643
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %22, ptr align 1 %23, i64 %27, i1 false), !dbg !643
  br label %expr_block.exit, !dbg !645

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr39, align 8
  %28 = load ptr, ptr %taddr39, align 8
  %29 = insertvalue %"char[]" undef, ptr %28, 0
  %30 = insertvalue %"char[]" %29, i64 2, 1
  %31 = load %"char[]", ptr %bytes, align 8, !dbg !646
  %32 = extractvalue %"char[]" %31, 0, !dbg !646
  %33 = extractvalue %"char[]" %31, 1, !dbg !646
  %gt40 = icmp sgt i64 0, %33, !dbg !646
  %34 = call i1 @llvm.expect.i1(i1 %gt40, i1 false), !dbg !646
  br i1 %34, label %panic41, label %checkok51, !dbg !646

checkok51:                                        ; preds = %if.exit
  %lt52 = icmp slt i64 %33, 2, !dbg !646
  %35 = call i1 @llvm.expect.i1(i1 %lt52, i1 false), !dbg !646
  br i1 %35, label %panic53, label %checkok63, !dbg !646

checkok63:                                        ; preds = %checkok51
  %36 = insertvalue %"char[]" undef, ptr %32, 0, !dbg !646
  %37 = insertvalue %"char[]" %36, i64 2, 1, !dbg !646
  %38 = extractvalue %"char[]" %37, 0, !dbg !646
  %39 = extractvalue %"char[]" %30, 0, !dbg !646
  %40 = extractvalue %"char[]" %30, 1, !dbg !646
  %41 = extractvalue %"char[]" %37, 1, !dbg !646
  %neq64 = icmp ne i64 %41, %40, !dbg !646
  %42 = call i1 @llvm.expect.i1(i1 %neq64, i1 false), !dbg !646
  br i1 %42, label %panic65, label %checkok75, !dbg !646

checkok75:                                        ; preds = %checkok63
  %43 = mul i64 %40, 1, !dbg !646
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %38, ptr align 1 %39, i64 %43, i1 false), !dbg !646
  %44 = load i64, ptr %len, align 8, !dbg !647
  %sub76 = sub i64 %44, 2, !dbg !647
  store i64 %sub76, ptr %len, align 8, !dbg !647
  %45 = load %"char[]", ptr %bytes, align 8, !dbg !648
  %46 = extractvalue %"char[]" %45, 0, !dbg !648
  %47 = extractvalue %"char[]" %45, 1, !dbg !648
  %gt77 = icmp ugt i64 2, %47, !dbg !648
  %48 = call i1 @llvm.expect.i1(i1 %gt77, i1 false), !dbg !648
  br i1 %48, label %panic78, label %checkok88, !dbg !648

checkok88:                                        ; preds = %checkok75
  %size89 = sub i64 %47, 2, !dbg !648
  %ptradd90 = getelementptr inbounds i8, ptr %46, i64 2, !dbg !648
  %49 = insertvalue %"char[]" undef, ptr %ptradd90, 0, !dbg !648
  %50 = insertvalue %"char[]" %49, i64 %size89, 1, !dbg !648
  store %"char[]" %50, ptr %bytes, align 8, !dbg !648
  br label %loop.cond, !dbg !648

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.44, i64 30 }, ptr %string, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg91, ptr align 8 %string, i32 16, i1 false)
  store %"char[]" { ptr @.str.45, i64 11 }, ptr %indirectarg92, align 8
  store %"char[]" { ptr @.str.46, i64 22 }, ptr %indirectarg93, align 8
  store %"any[]" zeroinitializer, ptr %indirectarg94, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg91, ptr align 8 %indirectarg92, ptr align 8 %indirectarg93, i32 92, ptr align 8 %indirectarg94), !dbg !649
  unreachable, !dbg !649

expr_block.exit:                                  ; preds = %checkok38
  ret void, !dbg !649

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.37, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg2, align 8
  %51 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %51(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 92) #5, !dbg !627
  unreachable, !dbg !627

panic8:                                           ; preds = %if.then
  store i64 %sub, ptr %taddr9, align 8
  %52 = insertvalue %any undef, ptr %taddr9, 0
  %53 = insertvalue %any %52, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.14, i64 43 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg12, align 8
  store %any %53, ptr %varargslots, align 16
  %54 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %54, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg13, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, i32 153, ptr align 8 %indirectarg13) #5, !dbg !643
  unreachable, !dbg !643

panic16:                                          ; preds = %checkok14
  store i64 %18, ptr %taddr17, align 8
  %55 = insertvalue %any undef, ptr %taddr17, 0
  %56 = insertvalue %any %55, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr18, align 8
  %57 = insertvalue %any undef, ptr %taddr18, 0
  %58 = insertvalue %any %57, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.16, i64 61 }, ptr %indirectarg19, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg20, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg21, align 8
  store %any %56, ptr %varargslots22, align 16
  %ptradd23 = getelementptr inbounds i8, ptr %varargslots22, i64 16
  store %any %58, ptr %ptradd23, align 16
  %59 = insertvalue %"any[]" undef, ptr %varargslots22, 0
  %"$$temp24" = insertvalue %"any[]" %59, i64 2, 1
  store %"any[]" %"$$temp24", ptr %indirectarg25, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg19, ptr align 8 %indirectarg20, ptr align 8 %indirectarg21, i32 153, ptr align 8 %indirectarg25) #5, !dbg !643
  unreachable, !dbg !643

panic28:                                          ; preds = %checkok26
  store i64 %25, ptr %taddr29, align 8
  %60 = insertvalue %any undef, ptr %taddr29, 0
  %61 = insertvalue %any %60, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %24, ptr %taddr30, align 8
  %62 = insertvalue %any undef, ptr %taddr30, 0
  %63 = insertvalue %any %62, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 38 }, ptr %indirectarg31, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg32, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg33, align 8
  store %any %61, ptr %varargslots34, align 16
  %ptradd35 = getelementptr inbounds i8, ptr %varargslots34, i64 16
  store %any %63, ptr %ptradd35, align 16
  %64 = insertvalue %"any[]" undef, ptr %varargslots34, 0
  %"$$temp36" = insertvalue %"any[]" %64, i64 2, 1
  store %"any[]" %"$$temp36", ptr %indirectarg37, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg31, ptr align 8 %indirectarg32, ptr align 8 %indirectarg33, i32 153, ptr align 8 %indirectarg37) #5, !dbg !643
  unreachable, !dbg !643

panic41:                                          ; preds = %if.exit
  store i64 %33, ptr %taddr42, align 8
  %65 = insertvalue %any undef, ptr %taddr42, 0
  %66 = insertvalue %any %65, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr43, align 8
  %67 = insertvalue %any undef, ptr %taddr43, 0
  %68 = insertvalue %any %67, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.16, i64 61 }, ptr %indirectarg44, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg45, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg46, align 8
  store %any %66, ptr %varargslots47, align 16
  %ptradd48 = getelementptr inbounds i8, ptr %varargslots47, i64 16
  store %any %68, ptr %ptradd48, align 16
  %69 = insertvalue %"any[]" undef, ptr %varargslots47, 0
  %"$$temp49" = insertvalue %"any[]" %69, i64 2, 1
  store %"any[]" %"$$temp49", ptr %indirectarg50, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg44, ptr align 8 %indirectarg45, ptr align 8 %indirectarg46, i32 156, ptr align 8 %indirectarg50) #5, !dbg !646
  unreachable, !dbg !646

panic53:                                          ; preds = %checkok51
  store i64 1, ptr %taddr54, align 8
  %70 = insertvalue %any undef, ptr %taddr54, 0
  %71 = insertvalue %any %70, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %33, ptr %taddr55, align 8
  %72 = insertvalue %any undef, ptr %taddr55, 0
  %73 = insertvalue %any %72, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.18, i64 60 }, ptr %indirectarg56, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg57, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg58, align 8
  store %any %71, ptr %varargslots59, align 16
  %ptradd60 = getelementptr inbounds i8, ptr %varargslots59, i64 16
  store %any %73, ptr %ptradd60, align 16
  %74 = insertvalue %"any[]" undef, ptr %varargslots59, 0
  %"$$temp61" = insertvalue %"any[]" %74, i64 2, 1
  store %"any[]" %"$$temp61", ptr %indirectarg62, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg56, ptr align 8 %indirectarg57, ptr align 8 %indirectarg58, i32 156, ptr align 8 %indirectarg62) #5, !dbg !646
  unreachable, !dbg !646

panic65:                                          ; preds = %checkok63
  store i64 %41, ptr %taddr66, align 8
  %75 = insertvalue %any undef, ptr %taddr66, 0
  %76 = insertvalue %any %75, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %40, ptr %taddr67, align 8
  %77 = insertvalue %any undef, ptr %taddr67, 0
  %78 = insertvalue %any %77, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 38 }, ptr %indirectarg68, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg69, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg70, align 8
  store %any %76, ptr %varargslots71, align 16
  %ptradd72 = getelementptr inbounds i8, ptr %varargslots71, i64 16
  store %any %78, ptr %ptradd72, align 16
  %79 = insertvalue %"any[]" undef, ptr %varargslots71, 0
  %"$$temp73" = insertvalue %"any[]" %79, i64 2, 1
  store %"any[]" %"$$temp73", ptr %indirectarg74, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg68, ptr align 8 %indirectarg69, ptr align 8 %indirectarg70, i32 156, ptr align 8 %indirectarg74) #5, !dbg !646
  unreachable, !dbg !646

panic78:                                          ; preds = %checkok75
  store i64 %47, ptr %taddr79, align 8
  %80 = insertvalue %any undef, ptr %taddr79, 0
  %81 = insertvalue %any %80, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 2, ptr %taddr80, align 8
  %82 = insertvalue %any undef, ptr %taddr80, 0
  %83 = insertvalue %any %82, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.16, i64 61 }, ptr %indirectarg81, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg82, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg83, align 8
  store %any %81, ptr %varargslots84, align 16
  %ptradd85 = getelementptr inbounds i8, ptr %varargslots84, i64 16
  store %any %83, ptr %ptradd85, align 16
  %84 = insertvalue %"any[]" undef, ptr %varargslots84, 0
  %"$$temp86" = insertvalue %"any[]" %84, i64 2, 1
  store %"any[]" %"$$temp86", ptr %indirectarg87, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg81, ptr align 8 %indirectarg82, ptr align 8 %indirectarg83, i32 158, ptr align 8 %indirectarg87) #5, !dbg !648
  unreachable, !dbg !648
}

; Function Attrs: nounwind ssp uwtable
define weak_odr <2 x i64> @std.math.random.Mcg32Random.next_int128(ptr %0) #0 comdat !dbg !652 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %taddr = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !655
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !655
  br i1 %2, label %panic, label %checkok, !dbg !655

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !656, !DIExpression(), !655)
  %3 = load ptr, ptr %self, align 8, !dbg !657
  %4 = call i64 @std.math.random.Mcg32Random.next_long(ptr %3), !dbg !659
  %zext = zext i64 %4 to i128, !dbg !659
  %shl = shl i128 %zext, 64, !dbg !659
  %5 = freeze i128 %shl, !dbg !659
  %6 = load ptr, ptr %self, align 8, !dbg !657
  %7 = call i64 @std.math.random.Mcg32Random.next_long(ptr %6), !dbg !659
  %zext3 = zext i64 %7 to i128, !dbg !659
  %add = add i128 %5, %zext3, !dbg !659
  store i128 %add, ptr %taddr, align 16
  %8 = load <2 x i64>, ptr %taddr, align 16
  ret <2 x i64> %8

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.37, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.21, i64 11 }, ptr %indirectarg2, align 8
  %9 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %9(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 93) #5, !dbg !655
  unreachable, !dbg !655
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.math.random.Mcg32Random.next_long(ptr %0) #0 comdat !dbg !660 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !663
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !663
  br i1 %2, label %panic, label %checkok, !dbg !663

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !664, !DIExpression(), !663)
  %3 = load ptr, ptr %self, align 8, !dbg !665
  %4 = call i32 @std.math.random.Mcg32Random.next_int(ptr %3), !dbg !667
  %zext = zext i32 %4 to i64, !dbg !667
  %shl = shl i64 %zext, 32, !dbg !667
  %5 = freeze i64 %shl, !dbg !667
  %6 = load ptr, ptr %self, align 8, !dbg !665
  %7 = call i32 @std.math.random.Mcg32Random.next_int(ptr %6), !dbg !667
  %zext3 = zext i32 %7 to i64, !dbg !667
  %add = add i64 %5, %zext3, !dbg !667
  ret i64 %add, !dbg !667

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.37, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.10, i64 9 }, ptr %indirectarg2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 94) #5, !dbg !663
  unreachable, !dbg !663
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i32 @std.math.random.Mcg32Random.next_int(ptr %0) #0 comdat !dbg !668 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !671
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !671
  br i1 %2, label %panic, label %checkok, !dbg !671

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !672, !DIExpression(), !671)
  %3 = load ptr, ptr %self, align 8, !dbg !673
  %4 = call i16 @std.math.random.Mcg32Random.next_short(ptr %3), !dbg !675
  %zext = zext i16 %4 to i32, !dbg !675
  %shl = shl i32 %zext, 16, !dbg !675
  %5 = freeze i32 %shl, !dbg !675
  %6 = load ptr, ptr %self, align 8, !dbg !673
  %7 = call i16 @std.math.random.Mcg32Random.next_short(ptr %6), !dbg !675
  %zext3 = zext i16 %7 to i32, !dbg !675
  %add = add i32 %5, %zext3, !dbg !675
  ret i32 %add, !dbg !675

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.37, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.22, i64 8 }, ptr %indirectarg2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 95) #5, !dbg !671
  unreachable, !dbg !671
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i8 @std.math.random.Mcg32Random.next_byte(ptr %0) #0 comdat !dbg !676 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !679
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !679
  br i1 %2, label %panic, label %checkok, !dbg !679

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !680, !DIExpression(), !679)
  %3 = load ptr, ptr %self, align 8, !dbg !679
  %4 = call i16 @std.math.random.Mcg32Random.next_short(ptr %3), !dbg !679
  %trunc = trunc i16 %4 to i8, !dbg !679
  ret i8 %trunc, !dbg !679

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.37, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.24, i64 9 }, ptr %indirectarg2, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 96) #5, !dbg !679
  unreachable, !dbg !679
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.math.random.Mcg16Random.set_seed(ptr %0, ptr align 8 %1) #0 comdat !dbg !681 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %input = alloca %"char[]", align 8
  %return_value = alloca i16, align 2
  %taddr = alloca ptr, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg7 = alloca %"char[]", align 8
  %indirectarg8 = alloca %"char[]", align 8
  %taddr11 = alloca i64, align 8
  %taddr12 = alloca i64, align 8
  %indirectarg13 = alloca %"char[]", align 8
  %indirectarg14 = alloca %"char[]", align 8
  %indirectarg15 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg16 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !686
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !686
  br i1 %3, label %panic, label %checkok, !dbg !686

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !687, !DIExpression(), !688)
    #dbg_declare(ptr %1, !689, !DIExpression(), !688)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input, ptr align 8 %1, i32 16, i1 false)
    #dbg_declare(ptr %return_value, !690, !DIExpression(), !692)
  store i16 0, ptr %return_value, align 2, !dbg !692
  store ptr %return_value, ptr %taddr, align 8
  %4 = load ptr, ptr %taddr, align 8
  %5 = insertvalue %"char[]" undef, ptr %4, 0
  %6 = insertvalue %"char[]" %5, i64 2, 1
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg3, ptr align 8 %input, i32 16, i1 false)
  store %"char[]" %6, ptr %indirectarg4, align 8
  call void @std.math.random.seeder(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4), !dbg !694
  %7 = load i16, ptr %return_value, align 2, !dbg !695
  %or = or i16 %7, 1, !dbg !693
  %8 = load ptr, ptr %self, align 8, !dbg !693
  %checknull = icmp eq ptr %8, null, !dbg !693
  %9 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !693
  br i1 %9, label %panic5, label %checkok9, !dbg !693

checkok9:                                         ; preds = %checkok
  %10 = ptrtoint ptr %8 to i64, !dbg !693
  %11 = urem i64 %10, 2, !dbg !693
  %12 = icmp ne i64 %11, 0, !dbg !693
  %13 = call i1 @llvm.expect.i1(i1 %12, i1 false), !dbg !693
  br i1 %13, label %panic10, label %checkok17, !dbg !693

checkok17:                                        ; preds = %checkok9
  store i16 %or, ptr %8, align 2, !dbg !693
  ret void, !dbg !693

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.37, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func, i64 8 }, ptr %indirectarg2, align 8
  %14 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %14(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 102) #5, !dbg !688
  unreachable, !dbg !688

panic5:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.8, i64 45 }, ptr %indirectarg6, align 8
  store %"char[]" { ptr @.file.37, i64 11 }, ptr %indirectarg7, align 8
  store %"char[]" { ptr @.func, i64 8 }, ptr %indirectarg8, align 8
  %15 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %15(ptr align 8 %indirectarg6, ptr align 8 %indirectarg7, ptr align 8 %indirectarg8, i32 104) #5, !dbg !693
  unreachable, !dbg !693

panic10:                                          ; preds = %checkok9
  store i64 2, ptr %taddr11, align 8
  %16 = insertvalue %any undef, ptr %taddr11, 0
  %17 = insertvalue %any %16, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %11, ptr %taddr12, align 8
  %18 = insertvalue %any undef, ptr %taddr12, 0
  %19 = insertvalue %any %18, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg13, align 8
  store %"char[]" { ptr @.file.37, i64 11 }, ptr %indirectarg14, align 8
  store %"char[]" { ptr @.func, i64 8 }, ptr %indirectarg15, align 8
  store %any %17, ptr %varargslots, align 16
  %ptradd = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %19, ptr %ptradd, align 16
  %20 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %20, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg16, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg13, ptr align 8 %indirectarg14, ptr align 8 %indirectarg15, i32 104, ptr align 8 %indirectarg16) #5, !dbg !693
  unreachable, !dbg !693
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i8 @std.math.random.Mcg16Random.next_byte(ptr %0) #0 comdat !dbg !696 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %s = alloca ptr, align 8
  %result = alloca i8, align 1
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr9 = alloca i64, align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg13 = alloca %"any[]", align 8
  %indirectarg17 = alloca %"char[]", align 8
  %indirectarg18 = alloca %"char[]", align 8
  %indirectarg19 = alloca %"char[]", align 8
  %taddr22 = alloca i64, align 8
  %taddr23 = alloca i64, align 8
  %indirectarg24 = alloca %"char[]", align 8
  %indirectarg25 = alloca %"char[]", align 8
  %indirectarg26 = alloca %"char[]", align 8
  %varargslots27 = alloca [2 x %any], align 16
  %indirectarg30 = alloca %"any[]", align 8
  %1 = icmp eq ptr %0, null, !dbg !699
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !699
  br i1 %2, label %panic, label %checkok, !dbg !699

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !700, !DIExpression(), !701)
    #dbg_declare(ptr %s, !702, !DIExpression(), !703)
  %3 = load ptr, ptr %self, align 8, !dbg !703
  store ptr %3, ptr %s, align 8, !dbg !703
    #dbg_declare(ptr %result, !704, !DIExpression(), !705)
  %4 = load ptr, ptr %s, align 8, !dbg !705
  %checknull = icmp eq ptr %4, null, !dbg !705
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !705
  br i1 %5, label %panic3, label %checkok7, !dbg !705

checkok7:                                         ; preds = %checkok
  %6 = ptrtoint ptr %4 to i64, !dbg !705
  %7 = urem i64 %6, 2, !dbg !705
  %8 = icmp ne i64 %7, 0, !dbg !705
  %9 = call i1 @llvm.expect.i1(i1 %8, i1 false), !dbg !705
  br i1 %9, label %panic8, label %checkok14, !dbg !705

checkok14:                                        ; preds = %checkok7
  %10 = load i16, ptr %4, align 2, !dbg !705
  %zext = zext i16 %10 to i32, !dbg !705
  %lshr = lshr i32 %zext, 8, !dbg !705
  %11 = freeze i32 %lshr, !dbg !705
  %trunc = trunc i32 %11 to i8, !dbg !705
  store i8 %trunc, ptr %result, align 1, !dbg !705
  %12 = load ptr, ptr %s, align 8, !dbg !706
  %checknull15 = icmp eq ptr %12, null, !dbg !706
  %13 = call i1 @llvm.expect.i1(i1 %checknull15, i1 false), !dbg !706
  br i1 %13, label %panic16, label %checkok20, !dbg !706

checkok20:                                        ; preds = %checkok14
  %14 = ptrtoint ptr %12 to i64, !dbg !706
  %15 = urem i64 %14, 2, !dbg !706
  %16 = icmp ne i64 %15, 0, !dbg !706
  %17 = call i1 @llvm.expect.i1(i1 %16, i1 false), !dbg !706
  br i1 %17, label %panic21, label %checkok31, !dbg !706

checkok31:                                        ; preds = %checkok20
  %18 = load i16, ptr %12, align 2, !dbg !706
  %mul = mul i16 %18, -27691, !dbg !706
  store i16 %mul, ptr %12, align 2, !dbg !706
  %19 = load i8, ptr %result, align 1, !dbg !707
  ret i8 %19, !dbg !707

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.37, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.24, i64 9 }, ptr %indirectarg2, align 8
  %20 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %20(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 107) #5, !dbg !701
  unreachable, !dbg !701

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.11, i64 42 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.37, i64 11 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.24, i64 9 }, ptr %indirectarg6, align 8
  %21 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %21(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 110) #5, !dbg !705
  unreachable, !dbg !705

panic8:                                           ; preds = %checkok7
  store i64 2, ptr %taddr, align 8
  %22 = insertvalue %any undef, ptr %taddr, 0
  %23 = insertvalue %any %22, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %7, ptr %taddr9, align 8
  %24 = insertvalue %any undef, ptr %taddr9, 0
  %25 = insertvalue %any %24, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.file.37, i64 11 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.func.24, i64 9 }, ptr %indirectarg12, align 8
  store %any %23, ptr %varargslots, align 16
  %ptradd = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %25, ptr %ptradd, align 16
  %26 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %26, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg13, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, i32 110, ptr align 8 %indirectarg13) #5, !dbg !705
  unreachable, !dbg !705

panic16:                                          ; preds = %checkok14
  store %"char[]" { ptr @.panic_msg.11, i64 42 }, ptr %indirectarg17, align 8
  store %"char[]" { ptr @.file.37, i64 11 }, ptr %indirectarg18, align 8
  store %"char[]" { ptr @.func.24, i64 9 }, ptr %indirectarg19, align 8
  %27 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %27(ptr align 8 %indirectarg17, ptr align 8 %indirectarg18, ptr align 8 %indirectarg19, i32 111) #5, !dbg !706
  unreachable, !dbg !706

panic21:                                          ; preds = %checkok20
  store i64 2, ptr %taddr22, align 8
  %28 = insertvalue %any undef, ptr %taddr22, 0
  %29 = insertvalue %any %28, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %15, ptr %taddr23, align 8
  %30 = insertvalue %any undef, ptr %taddr23, 0
  %31 = insertvalue %any %30, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg24, align 8
  store %"char[]" { ptr @.file.37, i64 11 }, ptr %indirectarg25, align 8
  store %"char[]" { ptr @.func.24, i64 9 }, ptr %indirectarg26, align 8
  store %any %29, ptr %varargslots27, align 16
  %ptradd28 = getelementptr inbounds i8, ptr %varargslots27, i64 16
  store %any %31, ptr %ptradd28, align 16
  %32 = insertvalue %"any[]" undef, ptr %varargslots27, 0
  %"$$temp29" = insertvalue %"any[]" %32, i64 2, 1
  store %"any[]" %"$$temp29", ptr %indirectarg30, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg24, ptr align 8 %indirectarg25, ptr align 8 %indirectarg26, i32 111, ptr align 8 %indirectarg30) #5, !dbg !706
  unreachable, !dbg !706
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.math.random.Mcg16Random.next_bytes(ptr %0, ptr align 8 %1) #0 comdat !dbg !708 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i8, align 1
  %taddr = alloca ptr, align 8
  %taddr4 = alloca i64, align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg7 = alloca %"char[]", align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg8 = alloca %"any[]", align 8
  %taddr12 = alloca i64, align 8
  %taddr13 = alloca i64, align 8
  %indirectarg14 = alloca %"char[]", align 8
  %indirectarg15 = alloca %"char[]", align 8
  %indirectarg16 = alloca %"char[]", align 8
  %varargslots17 = alloca [2 x %any], align 16
  %indirectarg20 = alloca %"any[]", align 8
  %taddr24 = alloca i64, align 8
  %taddr25 = alloca i64, align 8
  %indirectarg26 = alloca %"char[]", align 8
  %indirectarg27 = alloca %"char[]", align 8
  %indirectarg28 = alloca %"char[]", align 8
  %varargslots29 = alloca [2 x %any], align 16
  %indirectarg32 = alloca %"any[]", align 8
  %taddr34 = alloca ptr, align 8
  %taddr37 = alloca i64, align 8
  %taddr38 = alloca i64, align 8
  %indirectarg39 = alloca %"char[]", align 8
  %indirectarg40 = alloca %"char[]", align 8
  %indirectarg41 = alloca %"char[]", align 8
  %varargslots42 = alloca [2 x %any], align 16
  %indirectarg45 = alloca %"any[]", align 8
  %taddr49 = alloca i64, align 8
  %taddr50 = alloca i64, align 8
  %indirectarg51 = alloca %"char[]", align 8
  %indirectarg52 = alloca %"char[]", align 8
  %indirectarg53 = alloca %"char[]", align 8
  %varargslots54 = alloca [2 x %any], align 16
  %indirectarg57 = alloca %"any[]", align 8
  %taddr61 = alloca i64, align 8
  %taddr62 = alloca i64, align 8
  %indirectarg63 = alloca %"char[]", align 8
  %indirectarg64 = alloca %"char[]", align 8
  %indirectarg65 = alloca %"char[]", align 8
  %varargslots66 = alloca [2 x %any], align 16
  %indirectarg69 = alloca %"any[]", align 8
  %taddr74 = alloca i64, align 8
  %taddr75 = alloca i64, align 8
  %indirectarg76 = alloca %"char[]", align 8
  %indirectarg77 = alloca %"char[]", align 8
  %indirectarg78 = alloca %"char[]", align 8
  %varargslots79 = alloca [2 x %any], align 16
  %indirectarg82 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg86 = alloca %"char[]", align 8
  %indirectarg87 = alloca %"char[]", align 8
  %indirectarg88 = alloca %"char[]", align 8
  %indirectarg89 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !709
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !709
  br i1 %3, label %panic, label %checkok, !dbg !709

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !710, !DIExpression(), !709)
    #dbg_declare(ptr %1, !711, !DIExpression(), !709)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes, ptr align 8 %1, i32 16, i1 false)
    #dbg_declare(ptr %len, !712, !DIExpression(), !714)
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !714
  %4 = load i64, ptr %ptradd, align 8, !dbg !714
  store i64 %4, ptr %len, align 8, !dbg !714
  br label %loop.cond, !dbg !715

loop.cond:                                        ; preds = %checkok83, %checkok
  %5 = load i64, ptr %len, align 8, !dbg !716
  %lt = icmp ult i64 0, %5, !dbg !716
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !716

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %value, !718, !DIExpression(), !720)
  %6 = load ptr, ptr %self, align 8, !dbg !721
  %7 = call i8 @std.math.random.Mcg16Random.next_byte(ptr %6), !dbg !720
  store i8 %7, ptr %value, align 1, !dbg !720
  %8 = load i64, ptr %len, align 8, !dbg !722
  %le = icmp ule i64 %8, 1, !dbg !722
  br i1 %le, label %if.then, label %if.exit, !dbg !722

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %9 = load ptr, ptr %taddr, align 8
  %10 = load i64, ptr %len, align 8, !dbg !723
  %add = add i64 0, %10, !dbg !723
  %gt = icmp ugt i64 0, %add, !dbg !723
  %sub = sub i64 %add, 0, !dbg !723
  %11 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !723
  br i1 %11, label %panic3, label %checkok9, !dbg !723

checkok9:                                         ; preds = %if.then
  %size = sub i64 %add, 0, !dbg !723
  %12 = insertvalue %"char[]" undef, ptr %9, 0, !dbg !723
  %13 = insertvalue %"char[]" %12, i64 %size, 1, !dbg !723
  %14 = load %"char[]", ptr %bytes, align 8, !dbg !723
  %15 = extractvalue %"char[]" %14, 0, !dbg !723
  %16 = extractvalue %"char[]" %14, 1, !dbg !723
  %gt10 = icmp ugt i64 0, %16, !dbg !723
  %17 = call i1 @llvm.expect.i1(i1 %gt10, i1 false), !dbg !723
  br i1 %17, label %panic11, label %checkok21, !dbg !723

checkok21:                                        ; preds = %checkok9
  %size22 = sub i64 %16, 0, !dbg !723
  %18 = insertvalue %"char[]" undef, ptr %15, 0, !dbg !723
  %19 = insertvalue %"char[]" %18, i64 %size22, 1, !dbg !723
  %20 = extractvalue %"char[]" %19, 0, !dbg !723
  %21 = extractvalue %"char[]" %13, 0, !dbg !723
  %22 = extractvalue %"char[]" %13, 1, !dbg !723
  %23 = extractvalue %"char[]" %19, 1, !dbg !723
  %neq = icmp ne i64 %23, %22, !dbg !723
  %24 = call i1 @llvm.expect.i1(i1 %neq, i1 false), !dbg !723
  br i1 %24, label %panic23, label %checkok33, !dbg !723

checkok33:                                        ; preds = %checkok21
  %25 = mul i64 %22, 1, !dbg !723
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %20, ptr align 1 %21, i64 %25, i1 false), !dbg !723
  br label %expr_block.exit, !dbg !725

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr34, align 8
  %26 = load ptr, ptr %taddr34, align 8
  %27 = insertvalue %"char[]" undef, ptr %26, 0
  %28 = insertvalue %"char[]" %27, i64 1, 1
  %29 = load %"char[]", ptr %bytes, align 8, !dbg !726
  %30 = extractvalue %"char[]" %29, 0, !dbg !726
  %31 = extractvalue %"char[]" %29, 1, !dbg !726
  %gt35 = icmp sgt i64 0, %31, !dbg !726
  %32 = call i1 @llvm.expect.i1(i1 %gt35, i1 false), !dbg !726
  br i1 %32, label %panic36, label %checkok46, !dbg !726

checkok46:                                        ; preds = %if.exit
  %lt47 = icmp slt i64 %31, 1, !dbg !726
  %33 = call i1 @llvm.expect.i1(i1 %lt47, i1 false), !dbg !726
  br i1 %33, label %panic48, label %checkok58, !dbg !726

checkok58:                                        ; preds = %checkok46
  %34 = insertvalue %"char[]" undef, ptr %30, 0, !dbg !726
  %35 = insertvalue %"char[]" %34, i64 1, 1, !dbg !726
  %36 = extractvalue %"char[]" %35, 0, !dbg !726
  %37 = extractvalue %"char[]" %28, 0, !dbg !726
  %38 = extractvalue %"char[]" %28, 1, !dbg !726
  %39 = extractvalue %"char[]" %35, 1, !dbg !726
  %neq59 = icmp ne i64 %39, %38, !dbg !726
  %40 = call i1 @llvm.expect.i1(i1 %neq59, i1 false), !dbg !726
  br i1 %40, label %panic60, label %checkok70, !dbg !726

checkok70:                                        ; preds = %checkok58
  %41 = mul i64 %38, 1, !dbg !726
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %36, ptr align 1 %37, i64 %41, i1 false), !dbg !726
  %42 = load i64, ptr %len, align 8, !dbg !727
  %sub71 = sub i64 %42, 1, !dbg !727
  store i64 %sub71, ptr %len, align 8, !dbg !727
  %43 = load %"char[]", ptr %bytes, align 8, !dbg !728
  %44 = extractvalue %"char[]" %43, 0, !dbg !728
  %45 = extractvalue %"char[]" %43, 1, !dbg !728
  %gt72 = icmp ugt i64 1, %45, !dbg !728
  %46 = call i1 @llvm.expect.i1(i1 %gt72, i1 false), !dbg !728
  br i1 %46, label %panic73, label %checkok83, !dbg !728

checkok83:                                        ; preds = %checkok70
  %size84 = sub i64 %45, 1, !dbg !728
  %ptradd85 = getelementptr inbounds i8, ptr %44, i64 1, !dbg !728
  %47 = insertvalue %"char[]" undef, ptr %ptradd85, 0, !dbg !728
  %48 = insertvalue %"char[]" %47, i64 %size84, 1, !dbg !728
  store %"char[]" %48, ptr %bytes, align 8, !dbg !728
  br label %loop.cond, !dbg !728

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.47, i64 30 }, ptr %string, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg86, ptr align 8 %string, i32 16, i1 false)
  store %"char[]" { ptr @.str.48, i64 11 }, ptr %indirectarg87, align 8
  store %"char[]" { ptr @.str.49, i64 22 }, ptr %indirectarg88, align 8
  store %"any[]" zeroinitializer, ptr %indirectarg89, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg86, ptr align 8 %indirectarg87, ptr align 8 %indirectarg88, i32 115, ptr align 8 %indirectarg89), !dbg !729
  unreachable, !dbg !729

expr_block.exit:                                  ; preds = %checkok33
  ret void, !dbg !729

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.37, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg2, align 8
  %49 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %49(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 115) #5, !dbg !709
  unreachable, !dbg !709

panic3:                                           ; preds = %if.then
  store i64 %sub, ptr %taddr4, align 8
  %50 = insertvalue %any undef, ptr %taddr4, 0
  %51 = insertvalue %any %50, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.14, i64 43 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg6, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg7, align 8
  store %any %51, ptr %varargslots, align 16
  %52 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %52, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg8, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, ptr align 8 %indirectarg7, i32 153, ptr align 8 %indirectarg8) #5, !dbg !723
  unreachable, !dbg !723

panic11:                                          ; preds = %checkok9
  store i64 %16, ptr %taddr12, align 8
  %53 = insertvalue %any undef, ptr %taddr12, 0
  %54 = insertvalue %any %53, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr13, align 8
  %55 = insertvalue %any undef, ptr %taddr13, 0
  %56 = insertvalue %any %55, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.16, i64 61 }, ptr %indirectarg14, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg15, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg16, align 8
  store %any %54, ptr %varargslots17, align 16
  %ptradd18 = getelementptr inbounds i8, ptr %varargslots17, i64 16
  store %any %56, ptr %ptradd18, align 16
  %57 = insertvalue %"any[]" undef, ptr %varargslots17, 0
  %"$$temp19" = insertvalue %"any[]" %57, i64 2, 1
  store %"any[]" %"$$temp19", ptr %indirectarg20, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg14, ptr align 8 %indirectarg15, ptr align 8 %indirectarg16, i32 153, ptr align 8 %indirectarg20) #5, !dbg !723
  unreachable, !dbg !723

panic23:                                          ; preds = %checkok21
  store i64 %23, ptr %taddr24, align 8
  %58 = insertvalue %any undef, ptr %taddr24, 0
  %59 = insertvalue %any %58, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %22, ptr %taddr25, align 8
  %60 = insertvalue %any undef, ptr %taddr25, 0
  %61 = insertvalue %any %60, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 38 }, ptr %indirectarg26, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg27, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg28, align 8
  store %any %59, ptr %varargslots29, align 16
  %ptradd30 = getelementptr inbounds i8, ptr %varargslots29, i64 16
  store %any %61, ptr %ptradd30, align 16
  %62 = insertvalue %"any[]" undef, ptr %varargslots29, 0
  %"$$temp31" = insertvalue %"any[]" %62, i64 2, 1
  store %"any[]" %"$$temp31", ptr %indirectarg32, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg26, ptr align 8 %indirectarg27, ptr align 8 %indirectarg28, i32 153, ptr align 8 %indirectarg32) #5, !dbg !723
  unreachable, !dbg !723

panic36:                                          ; preds = %if.exit
  store i64 %31, ptr %taddr37, align 8
  %63 = insertvalue %any undef, ptr %taddr37, 0
  %64 = insertvalue %any %63, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr38, align 8
  %65 = insertvalue %any undef, ptr %taddr38, 0
  %66 = insertvalue %any %65, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.16, i64 61 }, ptr %indirectarg39, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg40, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg41, align 8
  store %any %64, ptr %varargslots42, align 16
  %ptradd43 = getelementptr inbounds i8, ptr %varargslots42, i64 16
  store %any %66, ptr %ptradd43, align 16
  %67 = insertvalue %"any[]" undef, ptr %varargslots42, 0
  %"$$temp44" = insertvalue %"any[]" %67, i64 2, 1
  store %"any[]" %"$$temp44", ptr %indirectarg45, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg39, ptr align 8 %indirectarg40, ptr align 8 %indirectarg41, i32 156, ptr align 8 %indirectarg45) #5, !dbg !726
  unreachable, !dbg !726

panic48:                                          ; preds = %checkok46
  store i64 0, ptr %taddr49, align 8
  %68 = insertvalue %any undef, ptr %taddr49, 0
  %69 = insertvalue %any %68, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %31, ptr %taddr50, align 8
  %70 = insertvalue %any undef, ptr %taddr50, 0
  %71 = insertvalue %any %70, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.18, i64 60 }, ptr %indirectarg51, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg52, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg53, align 8
  store %any %69, ptr %varargslots54, align 16
  %ptradd55 = getelementptr inbounds i8, ptr %varargslots54, i64 16
  store %any %71, ptr %ptradd55, align 16
  %72 = insertvalue %"any[]" undef, ptr %varargslots54, 0
  %"$$temp56" = insertvalue %"any[]" %72, i64 2, 1
  store %"any[]" %"$$temp56", ptr %indirectarg57, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg51, ptr align 8 %indirectarg52, ptr align 8 %indirectarg53, i32 156, ptr align 8 %indirectarg57) #5, !dbg !726
  unreachable, !dbg !726

panic60:                                          ; preds = %checkok58
  store i64 %39, ptr %taddr61, align 8
  %73 = insertvalue %any undef, ptr %taddr61, 0
  %74 = insertvalue %any %73, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %38, ptr %taddr62, align 8
  %75 = insertvalue %any undef, ptr %taddr62, 0
  %76 = insertvalue %any %75, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 38 }, ptr %indirectarg63, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg64, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg65, align 8
  store %any %74, ptr %varargslots66, align 16
  %ptradd67 = getelementptr inbounds i8, ptr %varargslots66, i64 16
  store %any %76, ptr %ptradd67, align 16
  %77 = insertvalue %"any[]" undef, ptr %varargslots66, 0
  %"$$temp68" = insertvalue %"any[]" %77, i64 2, 1
  store %"any[]" %"$$temp68", ptr %indirectarg69, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg63, ptr align 8 %indirectarg64, ptr align 8 %indirectarg65, i32 156, ptr align 8 %indirectarg69) #5, !dbg !726
  unreachable, !dbg !726

panic73:                                          ; preds = %checkok70
  store i64 %45, ptr %taddr74, align 8
  %78 = insertvalue %any undef, ptr %taddr74, 0
  %79 = insertvalue %any %78, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 1, ptr %taddr75, align 8
  %80 = insertvalue %any undef, ptr %taddr75, 0
  %81 = insertvalue %any %80, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.16, i64 61 }, ptr %indirectarg76, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg77, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg78, align 8
  store %any %79, ptr %varargslots79, align 16
  %ptradd80 = getelementptr inbounds i8, ptr %varargslots79, i64 16
  store %any %81, ptr %ptradd80, align 16
  %82 = insertvalue %"any[]" undef, ptr %varargslots79, 0
  %"$$temp81" = insertvalue %"any[]" %82, i64 2, 1
  store %"any[]" %"$$temp81", ptr %indirectarg82, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg76, ptr align 8 %indirectarg77, ptr align 8 %indirectarg78, i32 158, ptr align 8 %indirectarg82) #5, !dbg !728
  unreachable, !dbg !728
}

; Function Attrs: nounwind ssp uwtable
define weak_odr <2 x i64> @std.math.random.Mcg16Random.next_int128(ptr %0) #0 comdat !dbg !732 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %taddr = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !735
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !735
  br i1 %2, label %panic, label %checkok, !dbg !735

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !736, !DIExpression(), !735)
  %3 = load ptr, ptr %self, align 8, !dbg !737
  %4 = call i64 @std.math.random.Mcg16Random.next_long(ptr %3), !dbg !739
  %zext = zext i64 %4 to i128, !dbg !739
  %shl = shl i128 %zext, 64, !dbg !739
  %5 = freeze i128 %shl, !dbg !739
  %6 = load ptr, ptr %self, align 8, !dbg !737
  %7 = call i64 @std.math.random.Mcg16Random.next_long(ptr %6), !dbg !739
  %zext3 = zext i64 %7 to i128, !dbg !739
  %add = add i128 %5, %zext3, !dbg !739
  store i128 %add, ptr %taddr, align 16
  %8 = load <2 x i64>, ptr %taddr, align 16
  ret <2 x i64> %8

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.37, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.21, i64 11 }, ptr %indirectarg2, align 8
  %9 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %9(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 116) #5, !dbg !735
  unreachable, !dbg !735
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.math.random.Mcg16Random.next_long(ptr %0) #0 comdat !dbg !740 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !743
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !743
  br i1 %2, label %panic, label %checkok, !dbg !743

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !744, !DIExpression(), !743)
  %3 = load ptr, ptr %self, align 8, !dbg !745
  %4 = call i32 @std.math.random.Mcg16Random.next_int(ptr %3), !dbg !747
  %zext = zext i32 %4 to i64, !dbg !747
  %shl = shl i64 %zext, 32, !dbg !747
  %5 = freeze i64 %shl, !dbg !747
  %6 = load ptr, ptr %self, align 8, !dbg !745
  %7 = call i32 @std.math.random.Mcg16Random.next_int(ptr %6), !dbg !747
  %zext3 = zext i32 %7 to i64, !dbg !747
  %add = add i64 %5, %zext3, !dbg !747
  ret i64 %add, !dbg !747

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.37, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.10, i64 9 }, ptr %indirectarg2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 117) #5, !dbg !743
  unreachable, !dbg !743
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i32 @std.math.random.Mcg16Random.next_int(ptr %0) #0 comdat !dbg !748 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !751
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !751
  br i1 %2, label %panic, label %checkok, !dbg !751

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !752, !DIExpression(), !751)
  %3 = load ptr, ptr %self, align 8, !dbg !753
  %4 = call i16 @std.math.random.Mcg16Random.next_short(ptr %3), !dbg !755
  %zext = zext i16 %4 to i32, !dbg !755
  %shl = shl i32 %zext, 16, !dbg !755
  %5 = freeze i32 %shl, !dbg !755
  %6 = load ptr, ptr %self, align 8, !dbg !753
  %7 = call i16 @std.math.random.Mcg16Random.next_short(ptr %6), !dbg !755
  %zext3 = zext i16 %7 to i32, !dbg !755
  %add = add i32 %5, %zext3, !dbg !755
  ret i32 %add, !dbg !755

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.37, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.22, i64 8 }, ptr %indirectarg2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 118) #5, !dbg !751
  unreachable, !dbg !751
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i16 @std.math.random.Mcg16Random.next_short(ptr %0) #0 comdat !dbg !756 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !759
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !759
  br i1 %2, label %panic, label %checkok, !dbg !759

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !760, !DIExpression(), !759)
  %3 = load ptr, ptr %self, align 8, !dbg !761
  %4 = call i8 @std.math.random.Mcg16Random.next_byte(ptr %3), !dbg !763
  %zext = zext i8 %4 to i16, !dbg !763
  %zext3 = zext i16 %zext to i32, !dbg !763
  %shl = shl i32 %zext3, 8, !dbg !763
  %5 = freeze i32 %shl, !dbg !763
  %6 = load ptr, ptr %self, align 8, !dbg !761
  %7 = call i8 @std.math.random.Mcg16Random.next_byte(ptr %6), !dbg !763
  %zext4 = zext i8 %7 to i32, !dbg !763
  %add = add i32 %5, %zext4, !dbg !763
  %trunc = trunc i32 %add to i16, !dbg !763
  ret i16 %trunc, !dbg !763

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.37, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.23, i64 10 }, ptr %indirectarg2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 119) #5, !dbg !759
  unreachable, !dbg !759
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.math.random.Msws128Random.set_seed(ptr %0, ptr align 8 %1) #0 comdat !dbg !764 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %input = alloca %"char[]", align 8
  %return_value = alloca [4 x i128], align 16
  %taddr = alloca ptr, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %expr = alloca [4 x i128], align 16
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg7 = alloca %"char[]", align 8
  %indirectarg8 = alloca %"char[]", align 8
  %taddr11 = alloca i64, align 8
  %taddr12 = alloca i64, align 8
  %indirectarg13 = alloca %"char[]", align 8
  %indirectarg14 = alloca %"char[]", align 8
  %indirectarg15 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg16 = alloca %"any[]", align 8
  %indirectarg20 = alloca %"char[]", align 8
  %indirectarg21 = alloca %"char[]", align 8
  %indirectarg22 = alloca %"char[]", align 8
  %taddr25 = alloca i64, align 8
  %taddr26 = alloca i64, align 8
  %indirectarg27 = alloca %"char[]", align 8
  %indirectarg28 = alloca %"char[]", align 8
  %indirectarg29 = alloca %"char[]", align 8
  %varargslots30 = alloca [2 x %any], align 16
  %indirectarg33 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !774
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !774
  br i1 %3, label %panic, label %checkok, !dbg !774

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !775, !DIExpression(), !776)
    #dbg_declare(ptr %1, !777, !DIExpression(), !776)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input, ptr align 8 %1, i32 16, i1 false)
    #dbg_declare(ptr %return_value, !778, !DIExpression(), !781)
  call void @llvm.memset.p0.i64(ptr align 16 %return_value, i8 0, i64 64, i1 false), !dbg !781
  store ptr %return_value, ptr %taddr, align 8
  %4 = load ptr, ptr %taddr, align 8
  %5 = insertvalue %"char[]" undef, ptr %4, 0
  %6 = insertvalue %"char[]" %5, i64 64, 1
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg3, ptr align 8 %input, i32 16, i1 false)
  store %"char[]" %6, ptr %indirectarg4, align 8
  call void @std.math.random.seeder(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4), !dbg !783
  call void @llvm.memcpy.p0.p0.i32(ptr align 16 %expr, ptr align 16 %return_value, i32 64, i1 false)
  %checknull = icmp eq ptr %expr, null, !dbg !784
  %7 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !784
  br i1 %7, label %panic5, label %checkok9, !dbg !784

checkok9:                                         ; preds = %checkok
  %8 = ptrtoint ptr %expr to i64, !dbg !784
  %9 = urem i64 %8, 16, !dbg !784
  %10 = icmp ne i64 %9, 0, !dbg !784
  %11 = call i1 @llvm.expect.i1(i1 %10, i1 false), !dbg !784
  br i1 %11, label %panic10, label %checkok17, !dbg !784

checkok17:                                        ; preds = %checkok9
  %12 = load ptr, ptr %self, align 8, !dbg !782
  %checknull18 = icmp eq ptr %12, null, !dbg !782
  %13 = call i1 @llvm.expect.i1(i1 %checknull18, i1 false), !dbg !782
  br i1 %13, label %panic19, label %checkok23, !dbg !782

checkok23:                                        ; preds = %checkok17
  %14 = ptrtoint ptr %12 to i64, !dbg !782
  %15 = urem i64 %14, 16, !dbg !782
  %16 = icmp ne i64 %15, 0, !dbg !782
  %17 = call i1 @llvm.expect.i1(i1 %16, i1 false), !dbg !782
  br i1 %17, label %panic24, label %checkok34, !dbg !782

checkok34:                                        ; preds = %checkok23
  call void @llvm.memcpy.p0.p0.i32(ptr align 16 %12, ptr align 16 %expr, i32 64, i1 false), !dbg !782
  ret void, !dbg !782

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.54, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func, i64 8 }, ptr %indirectarg2, align 8
  %18 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %18(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 17) #5, !dbg !776
  unreachable, !dbg !776

panic5:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.55, i64 54 }, ptr %indirectarg6, align 8
  store %"char[]" { ptr @.file.56, i64 10 }, ptr %indirectarg7, align 8
  store %"char[]" { ptr @.func, i64 8 }, ptr %indirectarg8, align 8
  %19 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %19(ptr align 8 %indirectarg6, ptr align 8 %indirectarg7, ptr align 8 %indirectarg8, i32 281) #5, !dbg !784
  unreachable, !dbg !784

panic10:                                          ; preds = %checkok9
  store i64 16, ptr %taddr11, align 8
  %20 = insertvalue %any undef, ptr %taddr11, 0
  %21 = insertvalue %any %20, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %9, ptr %taddr12, align 8
  %22 = insertvalue %any undef, ptr %taddr12, 0
  %23 = insertvalue %any %22, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg13, align 8
  store %"char[]" { ptr @.file.56, i64 10 }, ptr %indirectarg14, align 8
  store %"char[]" { ptr @.func, i64 8 }, ptr %indirectarg15, align 8
  store %any %21, ptr %varargslots, align 16
  %ptradd = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %23, ptr %ptradd, align 16
  %24 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %24, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg16, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg13, ptr align 8 %indirectarg14, ptr align 8 %indirectarg15, i32 281, ptr align 8 %indirectarg16) #5, !dbg !784
  unreachable, !dbg !784

panic19:                                          ; preds = %checkok17
  store %"char[]" { ptr @.panic_msg.8, i64 45 }, ptr %indirectarg20, align 8
  store %"char[]" { ptr @.file.54, i64 12 }, ptr %indirectarg21, align 8
  store %"char[]" { ptr @.func, i64 8 }, ptr %indirectarg22, align 8
  %25 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %25(ptr align 8 %indirectarg20, ptr align 8 %indirectarg21, ptr align 8 %indirectarg22, i32 19) #5, !dbg !782
  unreachable, !dbg !782

panic24:                                          ; preds = %checkok23
  store i64 16, ptr %taddr25, align 8
  %26 = insertvalue %any undef, ptr %taddr25, 0
  %27 = insertvalue %any %26, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %15, ptr %taddr26, align 8
  %28 = insertvalue %any undef, ptr %taddr26, 0
  %29 = insertvalue %any %28, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg27, align 8
  store %"char[]" { ptr @.file.54, i64 12 }, ptr %indirectarg28, align 8
  store %"char[]" { ptr @.func, i64 8 }, ptr %indirectarg29, align 8
  store %any %27, ptr %varargslots30, align 16
  %ptradd31 = getelementptr inbounds i8, ptr %varargslots30, i64 16
  store %any %29, ptr %ptradd31, align 16
  %30 = insertvalue %"any[]" undef, ptr %varargslots30, 0
  %"$$temp32" = insertvalue %"any[]" %30, i64 2, 1
  store %"any[]" %"$$temp32", ptr %indirectarg33, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg27, ptr align 8 %indirectarg28, ptr align 8 %indirectarg29, i32 19, ptr align 8 %indirectarg33) #5, !dbg !782
  unreachable, !dbg !782
}

; Function Attrs: nounwind ssp uwtable
define weak_odr <2 x i64> @std.math.random.Msws128Random.next_int128(ptr %0) #0 comdat !dbg !786 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %s0 = alloca i128, align 16
  %self3 = alloca i128, align 16
  %shift = alloca i128, align 16
  %s1 = alloca i128, align 16
  %self14 = alloca i128, align 16
  %shift15 = alloca i128, align 16
  %taddr = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !789
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !789
  br i1 %2, label %panic, label %checkok, !dbg !789

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !790, !DIExpression(), !791)
    #dbg_declare(ptr %s0, !792, !DIExpression(), !793)
  %3 = load ptr, ptr %self, align 8, !dbg !793
  %4 = load i128, ptr %3, align 16, !dbg !793
  store i128 %4, ptr %s0, align 16, !dbg !793
  %5 = load ptr, ptr %self, align 8, !dbg !794
  %6 = load i128, ptr %5, align 16, !dbg !794
  %7 = load ptr, ptr %self, align 8, !dbg !794
  %8 = load i128, ptr %7, align 16, !dbg !794
  %mul = mul i128 %6, %8, !dbg !794
  %9 = load ptr, ptr %self, align 8, !dbg !794
  %ptradd = getelementptr inbounds i8, ptr %9, i64 32, !dbg !794
  %10 = load i128, ptr %ptradd, align 16, !dbg !794
  %add = add i128 %mul, %10, !dbg !794
  %11 = load ptr, ptr %self, align 8, !dbg !794
  store i128 %add, ptr %11, align 16, !dbg !794
  %12 = load ptr, ptr %self, align 8, !dbg !795
  %13 = load i128, ptr %12, align 16
  store i128 %13, ptr %self3, align 16
  store i128 64, ptr %shift, align 16
  %14 = load i128, ptr %self3, align 16, !dbg !796
  %15 = load i128, ptr %self3, align 16, !dbg !796
  %16 = load i128, ptr %shift, align 16, !dbg !796
  %17 = call i128 @llvm.fshr.i128(i128 %14, i128 %15, i128 %16), !dbg !796
  %18 = load ptr, ptr %self, align 8, !dbg !795
  store i128 %17, ptr %18, align 16, !dbg !795
  %19 = load ptr, ptr %self, align 8, !dbg !799
  %ptradd4 = getelementptr inbounds i8, ptr %19, i64 32, !dbg !799
  %20 = load i128, ptr %ptradd4, align 16, !dbg !799
  %add5 = add i128 %20, -129976298391535590297638237547755878347, !dbg !799
  store i128 %add5, ptr %ptradd4, align 16, !dbg !799
  %21 = load ptr, ptr %self, align 8, !dbg !800
  %ptradd6 = getelementptr inbounds i8, ptr %21, i64 16, !dbg !800
  %22 = load i128, ptr %ptradd6, align 16, !dbg !800
  %23 = load ptr, ptr %self, align 8, !dbg !800
  %ptradd7 = getelementptr inbounds i8, ptr %23, i64 16, !dbg !800
  %24 = load i128, ptr %ptradd7, align 16, !dbg !800
  %mul8 = mul i128 %22, %24, !dbg !800
  %25 = load ptr, ptr %self, align 8, !dbg !800
  %ptradd9 = getelementptr inbounds i8, ptr %25, i64 48, !dbg !800
  %26 = load i128, ptr %ptradd9, align 16, !dbg !800
  %add10 = add i128 %mul8, %26, !dbg !800
  %27 = load ptr, ptr %self, align 8, !dbg !800
  %ptradd11 = getelementptr inbounds i8, ptr %27, i64 16, !dbg !800
  store i128 %add10, ptr %ptradd11, align 16, !dbg !800
    #dbg_declare(ptr %s1, !801, !DIExpression(), !802)
  %28 = load ptr, ptr %self, align 8, !dbg !802
  %ptradd12 = getelementptr inbounds i8, ptr %28, i64 16, !dbg !802
  %29 = load i128, ptr %ptradd12, align 16, !dbg !802
  store i128 %29, ptr %s1, align 16, !dbg !802
  %30 = load ptr, ptr %self, align 8, !dbg !803
  %ptradd13 = getelementptr inbounds i8, ptr %30, i64 16, !dbg !803
  %31 = load i128, ptr %ptradd13, align 16
  store i128 %31, ptr %self14, align 16
  store i128 64, ptr %shift15, align 16
  %32 = load i128, ptr %self14, align 16, !dbg !804
  %33 = load i128, ptr %self14, align 16, !dbg !804
  %34 = load i128, ptr %shift15, align 16, !dbg !804
  %35 = call i128 @llvm.fshr.i128(i128 %32, i128 %33, i128 %34), !dbg !804
  %36 = load ptr, ptr %self, align 8, !dbg !803
  %ptradd16 = getelementptr inbounds i8, ptr %36, i64 16, !dbg !803
  store i128 %35, ptr %ptradd16, align 16, !dbg !803
  %37 = load ptr, ptr %self, align 8, !dbg !806
  %ptradd17 = getelementptr inbounds i8, ptr %37, i64 48, !dbg !806
  %38 = load i128, ptr %ptradd17, align 16, !dbg !806
  %sub = sub i128 %38, -129976298391535590297638237547755878347, !dbg !806
  store i128 %sub, ptr %ptradd17, align 16, !dbg !806
  %39 = load i128, ptr %s0, align 16, !dbg !807
  %40 = load i128, ptr %s1, align 16, !dbg !807
  %add18 = add i128 %39, %40, !dbg !807
  store i128 %add18, ptr %taddr, align 16
  %41 = load <2 x i64>, ptr %taddr, align 16
  ret <2 x i64> %41

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.54, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.21, i64 11 }, ptr %indirectarg2, align 8
  %42 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %42(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 23) #5, !dbg !791
  unreachable, !dbg !791
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.math.random.Msws128Random.next_bytes(ptr %0, ptr align 8 %1) #0 comdat !dbg !808 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %bytes = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i128, align 16
  %result = alloca i128, align 16
  %taddr = alloca ptr, align 8
  %taddr9 = alloca i64, align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg13 = alloca %"any[]", align 8
  %taddr17 = alloca i64, align 8
  %taddr18 = alloca i64, align 8
  %indirectarg19 = alloca %"char[]", align 8
  %indirectarg20 = alloca %"char[]", align 8
  %indirectarg21 = alloca %"char[]", align 8
  %varargslots22 = alloca [2 x %any], align 16
  %indirectarg25 = alloca %"any[]", align 8
  %taddr29 = alloca i64, align 8
  %taddr30 = alloca i64, align 8
  %indirectarg31 = alloca %"char[]", align 8
  %indirectarg32 = alloca %"char[]", align 8
  %indirectarg33 = alloca %"char[]", align 8
  %varargslots34 = alloca [2 x %any], align 16
  %indirectarg37 = alloca %"any[]", align 8
  %taddr39 = alloca ptr, align 8
  %taddr42 = alloca i64, align 8
  %taddr43 = alloca i64, align 8
  %indirectarg44 = alloca %"char[]", align 8
  %indirectarg45 = alloca %"char[]", align 8
  %indirectarg46 = alloca %"char[]", align 8
  %varargslots47 = alloca [2 x %any], align 16
  %indirectarg50 = alloca %"any[]", align 8
  %taddr54 = alloca i64, align 8
  %taddr55 = alloca i64, align 8
  %indirectarg56 = alloca %"char[]", align 8
  %indirectarg57 = alloca %"char[]", align 8
  %indirectarg58 = alloca %"char[]", align 8
  %varargslots59 = alloca [2 x %any], align 16
  %indirectarg62 = alloca %"any[]", align 8
  %taddr66 = alloca i64, align 8
  %taddr67 = alloca i64, align 8
  %indirectarg68 = alloca %"char[]", align 8
  %indirectarg69 = alloca %"char[]", align 8
  %indirectarg70 = alloca %"char[]", align 8
  %varargslots71 = alloca [2 x %any], align 16
  %indirectarg74 = alloca %"any[]", align 8
  %taddr79 = alloca i64, align 8
  %taddr80 = alloca i64, align 8
  %indirectarg81 = alloca %"char[]", align 8
  %indirectarg82 = alloca %"char[]", align 8
  %indirectarg83 = alloca %"char[]", align 8
  %varargslots84 = alloca [2 x %any], align 16
  %indirectarg87 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg91 = alloca %"char[]", align 8
  %indirectarg92 = alloca %"char[]", align 8
  %indirectarg93 = alloca %"char[]", align 8
  %indirectarg94 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !809
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !809
  br i1 %3, label %panic, label %checkok, !dbg !809

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !810, !DIExpression(), !809)
    #dbg_declare(ptr %1, !811, !DIExpression(), !809)
  %ptradd = getelementptr inbounds i8, ptr %1, i64 8, !dbg !812
  %4 = load i64, ptr %ptradd, align 8, !dbg !812
  %lt = icmp ult i64 0, %4, !dbg !812
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !812

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.13, i64 34 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.file.54, i64 12 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg5, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, i32 39) #5, !dbg !812
  unreachable, !dbg !812

assert_ok:                                        ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes, ptr align 8 %1, i32 16, i1 false)
    #dbg_declare(ptr %len, !814, !DIExpression(), !816)
  %ptradd6 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !816
  %6 = load i64, ptr %ptradd6, align 8, !dbg !816
  store i64 %6, ptr %len, align 8, !dbg !816
  br label %loop.cond, !dbg !817

loop.cond:                                        ; preds = %checkok88, %assert_ok
  %7 = load i64, ptr %len, align 8, !dbg !818
  %lt7 = icmp ult i64 0, %7, !dbg !818
  br i1 %lt7, label %loop.body, label %loop.exit, !dbg !818

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %value, !820, !DIExpression(), !822)
  %8 = load ptr, ptr %self, align 8, !dbg !823
  %9 = call <2 x i64> @std.math.random.Msws128Random.next_int128(ptr %8), !dbg !822
  store <2 x i64> %9, ptr %result, align 16
  %10 = load i128, ptr %result, align 16
  store i128 %10, ptr %value, align 16
  %11 = load i64, ptr %len, align 8, !dbg !824
  %le = icmp ule i64 %11, 16, !dbg !824
  br i1 %le, label %if.then, label %if.exit, !dbg !824

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %12 = load ptr, ptr %taddr, align 8
  %13 = load i64, ptr %len, align 8, !dbg !825
  %add = add i64 0, %13, !dbg !825
  %gt = icmp ugt i64 0, %add, !dbg !825
  %sub = sub i64 %add, 0, !dbg !825
  %14 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !825
  br i1 %14, label %panic8, label %checkok14, !dbg !825

checkok14:                                        ; preds = %if.then
  %size = sub i64 %add, 0, !dbg !825
  %15 = insertvalue %"char[]" undef, ptr %12, 0, !dbg !825
  %16 = insertvalue %"char[]" %15, i64 %size, 1, !dbg !825
  %17 = load %"char[]", ptr %bytes, align 8, !dbg !825
  %18 = extractvalue %"char[]" %17, 0, !dbg !825
  %19 = extractvalue %"char[]" %17, 1, !dbg !825
  %gt15 = icmp ugt i64 0, %19, !dbg !825
  %20 = call i1 @llvm.expect.i1(i1 %gt15, i1 false), !dbg !825
  br i1 %20, label %panic16, label %checkok26, !dbg !825

checkok26:                                        ; preds = %checkok14
  %size27 = sub i64 %19, 0, !dbg !825
  %21 = insertvalue %"char[]" undef, ptr %18, 0, !dbg !825
  %22 = insertvalue %"char[]" %21, i64 %size27, 1, !dbg !825
  %23 = extractvalue %"char[]" %22, 0, !dbg !825
  %24 = extractvalue %"char[]" %16, 0, !dbg !825
  %25 = extractvalue %"char[]" %16, 1, !dbg !825
  %26 = extractvalue %"char[]" %22, 1, !dbg !825
  %neq = icmp ne i64 %26, %25, !dbg !825
  %27 = call i1 @llvm.expect.i1(i1 %neq, i1 false), !dbg !825
  br i1 %27, label %panic28, label %checkok38, !dbg !825

checkok38:                                        ; preds = %checkok26
  %28 = mul i64 %25, 1, !dbg !825
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %23, ptr align 1 %24, i64 %28, i1 false), !dbg !825
  br label %expr_block.exit, !dbg !827

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr39, align 8
  %29 = load ptr, ptr %taddr39, align 8
  %30 = insertvalue %"char[]" undef, ptr %29, 0
  %31 = insertvalue %"char[]" %30, i64 16, 1
  %32 = load %"char[]", ptr %bytes, align 8, !dbg !828
  %33 = extractvalue %"char[]" %32, 0, !dbg !828
  %34 = extractvalue %"char[]" %32, 1, !dbg !828
  %gt40 = icmp sgt i64 0, %34, !dbg !828
  %35 = call i1 @llvm.expect.i1(i1 %gt40, i1 false), !dbg !828
  br i1 %35, label %panic41, label %checkok51, !dbg !828

checkok51:                                        ; preds = %if.exit
  %lt52 = icmp slt i64 %34, 16, !dbg !828
  %36 = call i1 @llvm.expect.i1(i1 %lt52, i1 false), !dbg !828
  br i1 %36, label %panic53, label %checkok63, !dbg !828

checkok63:                                        ; preds = %checkok51
  %37 = insertvalue %"char[]" undef, ptr %33, 0, !dbg !828
  %38 = insertvalue %"char[]" %37, i64 16, 1, !dbg !828
  %39 = extractvalue %"char[]" %38, 0, !dbg !828
  %40 = extractvalue %"char[]" %31, 0, !dbg !828
  %41 = extractvalue %"char[]" %31, 1, !dbg !828
  %42 = extractvalue %"char[]" %38, 1, !dbg !828
  %neq64 = icmp ne i64 %42, %41, !dbg !828
  %43 = call i1 @llvm.expect.i1(i1 %neq64, i1 false), !dbg !828
  br i1 %43, label %panic65, label %checkok75, !dbg !828

checkok75:                                        ; preds = %checkok63
  %44 = mul i64 %41, 1, !dbg !828
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %39, ptr align 1 %40, i64 %44, i1 false), !dbg !828
  %45 = load i64, ptr %len, align 8, !dbg !829
  %sub76 = sub i64 %45, 16, !dbg !829
  store i64 %sub76, ptr %len, align 8, !dbg !829
  %46 = load %"char[]", ptr %bytes, align 8, !dbg !830
  %47 = extractvalue %"char[]" %46, 0, !dbg !830
  %48 = extractvalue %"char[]" %46, 1, !dbg !830
  %gt77 = icmp ugt i64 16, %48, !dbg !830
  %49 = call i1 @llvm.expect.i1(i1 %gt77, i1 false), !dbg !830
  br i1 %49, label %panic78, label %checkok88, !dbg !830

checkok88:                                        ; preds = %checkok75
  %size89 = sub i64 %48, 16, !dbg !830
  %ptradd90 = getelementptr inbounds i8, ptr %47, i64 16, !dbg !830
  %50 = insertvalue %"char[]" undef, ptr %ptradd90, 0, !dbg !830
  %51 = insertvalue %"char[]" %50, i64 %size89, 1, !dbg !830
  store %"char[]" %51, ptr %bytes, align 8, !dbg !830
  br label %loop.cond, !dbg !830

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.57, i64 30 }, ptr %string, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg91, ptr align 8 %string, i32 16, i1 false)
  store %"char[]" { ptr @.str.58, i64 12 }, ptr %indirectarg92, align 8
  store %"char[]" { ptr @.str.59, i64 24 }, ptr %indirectarg93, align 8
  store %"any[]" zeroinitializer, ptr %indirectarg94, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg91, ptr align 8 %indirectarg92, ptr align 8 %indirectarg93, i32 41, ptr align 8 %indirectarg94), !dbg !831
  unreachable, !dbg !831

expr_block.exit:                                  ; preds = %checkok38
  ret void, !dbg !831

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.54, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg2, align 8
  %52 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %52(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 41) #5, !dbg !809
  unreachable, !dbg !809

panic8:                                           ; preds = %if.then
  store i64 %sub, ptr %taddr9, align 8
  %53 = insertvalue %any undef, ptr %taddr9, 0
  %54 = insertvalue %any %53, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.14, i64 43 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg12, align 8
  store %any %54, ptr %varargslots, align 16
  %55 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %55, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg13, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, i32 153, ptr align 8 %indirectarg13) #5, !dbg !825
  unreachable, !dbg !825

panic16:                                          ; preds = %checkok14
  store i64 %19, ptr %taddr17, align 8
  %56 = insertvalue %any undef, ptr %taddr17, 0
  %57 = insertvalue %any %56, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr18, align 8
  %58 = insertvalue %any undef, ptr %taddr18, 0
  %59 = insertvalue %any %58, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.16, i64 61 }, ptr %indirectarg19, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg20, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg21, align 8
  store %any %57, ptr %varargslots22, align 16
  %ptradd23 = getelementptr inbounds i8, ptr %varargslots22, i64 16
  store %any %59, ptr %ptradd23, align 16
  %60 = insertvalue %"any[]" undef, ptr %varargslots22, 0
  %"$$temp24" = insertvalue %"any[]" %60, i64 2, 1
  store %"any[]" %"$$temp24", ptr %indirectarg25, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg19, ptr align 8 %indirectarg20, ptr align 8 %indirectarg21, i32 153, ptr align 8 %indirectarg25) #5, !dbg !825
  unreachable, !dbg !825

panic28:                                          ; preds = %checkok26
  store i64 %26, ptr %taddr29, align 8
  %61 = insertvalue %any undef, ptr %taddr29, 0
  %62 = insertvalue %any %61, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %25, ptr %taddr30, align 8
  %63 = insertvalue %any undef, ptr %taddr30, 0
  %64 = insertvalue %any %63, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 38 }, ptr %indirectarg31, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg32, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg33, align 8
  store %any %62, ptr %varargslots34, align 16
  %ptradd35 = getelementptr inbounds i8, ptr %varargslots34, i64 16
  store %any %64, ptr %ptradd35, align 16
  %65 = insertvalue %"any[]" undef, ptr %varargslots34, 0
  %"$$temp36" = insertvalue %"any[]" %65, i64 2, 1
  store %"any[]" %"$$temp36", ptr %indirectarg37, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg31, ptr align 8 %indirectarg32, ptr align 8 %indirectarg33, i32 153, ptr align 8 %indirectarg37) #5, !dbg !825
  unreachable, !dbg !825

panic41:                                          ; preds = %if.exit
  store i64 %34, ptr %taddr42, align 8
  %66 = insertvalue %any undef, ptr %taddr42, 0
  %67 = insertvalue %any %66, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr43, align 8
  %68 = insertvalue %any undef, ptr %taddr43, 0
  %69 = insertvalue %any %68, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.16, i64 61 }, ptr %indirectarg44, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg45, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg46, align 8
  store %any %67, ptr %varargslots47, align 16
  %ptradd48 = getelementptr inbounds i8, ptr %varargslots47, i64 16
  store %any %69, ptr %ptradd48, align 16
  %70 = insertvalue %"any[]" undef, ptr %varargslots47, 0
  %"$$temp49" = insertvalue %"any[]" %70, i64 2, 1
  store %"any[]" %"$$temp49", ptr %indirectarg50, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg44, ptr align 8 %indirectarg45, ptr align 8 %indirectarg46, i32 156, ptr align 8 %indirectarg50) #5, !dbg !828
  unreachable, !dbg !828

panic53:                                          ; preds = %checkok51
  store i64 15, ptr %taddr54, align 8
  %71 = insertvalue %any undef, ptr %taddr54, 0
  %72 = insertvalue %any %71, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %34, ptr %taddr55, align 8
  %73 = insertvalue %any undef, ptr %taddr55, 0
  %74 = insertvalue %any %73, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.18, i64 60 }, ptr %indirectarg56, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg57, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg58, align 8
  store %any %72, ptr %varargslots59, align 16
  %ptradd60 = getelementptr inbounds i8, ptr %varargslots59, i64 16
  store %any %74, ptr %ptradd60, align 16
  %75 = insertvalue %"any[]" undef, ptr %varargslots59, 0
  %"$$temp61" = insertvalue %"any[]" %75, i64 2, 1
  store %"any[]" %"$$temp61", ptr %indirectarg62, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg56, ptr align 8 %indirectarg57, ptr align 8 %indirectarg58, i32 156, ptr align 8 %indirectarg62) #5, !dbg !828
  unreachable, !dbg !828

panic65:                                          ; preds = %checkok63
  store i64 %42, ptr %taddr66, align 8
  %76 = insertvalue %any undef, ptr %taddr66, 0
  %77 = insertvalue %any %76, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %41, ptr %taddr67, align 8
  %78 = insertvalue %any undef, ptr %taddr67, 0
  %79 = insertvalue %any %78, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 38 }, ptr %indirectarg68, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg69, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg70, align 8
  store %any %77, ptr %varargslots71, align 16
  %ptradd72 = getelementptr inbounds i8, ptr %varargslots71, i64 16
  store %any %79, ptr %ptradd72, align 16
  %80 = insertvalue %"any[]" undef, ptr %varargslots71, 0
  %"$$temp73" = insertvalue %"any[]" %80, i64 2, 1
  store %"any[]" %"$$temp73", ptr %indirectarg74, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg68, ptr align 8 %indirectarg69, ptr align 8 %indirectarg70, i32 156, ptr align 8 %indirectarg74) #5, !dbg !828
  unreachable, !dbg !828

panic78:                                          ; preds = %checkok75
  store i64 %48, ptr %taddr79, align 8
  %81 = insertvalue %any undef, ptr %taddr79, 0
  %82 = insertvalue %any %81, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 16, ptr %taddr80, align 8
  %83 = insertvalue %any undef, ptr %taddr80, 0
  %84 = insertvalue %any %83, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.16, i64 61 }, ptr %indirectarg81, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg82, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg83, align 8
  store %any %82, ptr %varargslots84, align 16
  %ptradd85 = getelementptr inbounds i8, ptr %varargslots84, i64 16
  store %any %84, ptr %ptradd85, align 16
  %85 = insertvalue %"any[]" undef, ptr %varargslots84, 0
  %"$$temp86" = insertvalue %"any[]" %85, i64 2, 1
  store %"any[]" %"$$temp86", ptr %indirectarg87, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg81, ptr align 8 %indirectarg82, ptr align 8 %indirectarg83, i32 158, ptr align 8 %indirectarg87) #5, !dbg !830
  unreachable, !dbg !830
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.math.random.Msws128Random.next_long(ptr %0) #0 comdat !dbg !834 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %result = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !837
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !837
  br i1 %2, label %panic, label %checkok, !dbg !837

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !838, !DIExpression(), !837)
  %3 = load ptr, ptr %self, align 8, !dbg !837
  %4 = call <2 x i64> @std.math.random.Msws128Random.next_int128(ptr %3), !dbg !837
  store <2 x i64> %4, ptr %result, align 16
  %5 = load i128, ptr %result, align 16
  %trunc = trunc i128 %5 to i64
  ret i64 %trunc

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.54, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.10, i64 9 }, ptr %indirectarg2, align 8
  %6 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %6(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 42) #5, !dbg !837
  unreachable, !dbg !837
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i32 @std.math.random.Msws128Random.next_int(ptr %0) #0 comdat !dbg !839 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %result = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !842
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !842
  br i1 %2, label %panic, label %checkok, !dbg !842

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !843, !DIExpression(), !842)
  %3 = load ptr, ptr %self, align 8, !dbg !842
  %4 = call <2 x i64> @std.math.random.Msws128Random.next_int128(ptr %3), !dbg !842
  store <2 x i64> %4, ptr %result, align 16
  %5 = load i128, ptr %result, align 16
  %trunc = trunc i128 %5 to i32
  ret i32 %trunc

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.54, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.22, i64 8 }, ptr %indirectarg2, align 8
  %6 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %6(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 43) #5, !dbg !842
  unreachable, !dbg !842
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i16 @std.math.random.Msws128Random.next_short(ptr %0) #0 comdat !dbg !844 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %result = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !847
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !847
  br i1 %2, label %panic, label %checkok, !dbg !847

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !848, !DIExpression(), !847)
  %3 = load ptr, ptr %self, align 8, !dbg !847
  %4 = call <2 x i64> @std.math.random.Msws128Random.next_int128(ptr %3), !dbg !847
  store <2 x i64> %4, ptr %result, align 16
  %5 = load i128, ptr %result, align 16
  %trunc = trunc i128 %5 to i16
  ret i16 %trunc

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.54, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.23, i64 10 }, ptr %indirectarg2, align 8
  %6 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %6(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 44) #5, !dbg !847
  unreachable, !dbg !847
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i8 @std.math.random.Msws128Random.next_byte(ptr %0) #0 comdat !dbg !849 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %result = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !852
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !852
  br i1 %2, label %panic, label %checkok, !dbg !852

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !853, !DIExpression(), !852)
  %3 = load ptr, ptr %self, align 8, !dbg !852
  %4 = call <2 x i64> @std.math.random.Msws128Random.next_int128(ptr %3), !dbg !852
  store <2 x i64> %4, ptr %result, align 16
  %5 = load i128, ptr %result, align 16
  %trunc = trunc i128 %5 to i8
  ret i8 %trunc

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.54, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.24, i64 9 }, ptr %indirectarg2, align 8
  %6 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %6(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 45) #5, !dbg !852
  unreachable, !dbg !852
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.math.random.Msws64Random.set_seed(ptr %0, ptr align 8 %1) #0 comdat !dbg !854 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %input = alloca %"char[]", align 8
  %return_value = alloca [4 x i64], align 16
  %taddr = alloca ptr, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %expr = alloca [4 x i64], align 16
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg7 = alloca %"char[]", align 8
  %indirectarg8 = alloca %"char[]", align 8
  %taddr11 = alloca i64, align 8
  %taddr12 = alloca i64, align 8
  %indirectarg13 = alloca %"char[]", align 8
  %indirectarg14 = alloca %"char[]", align 8
  %indirectarg15 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg16 = alloca %"any[]", align 8
  %indirectarg20 = alloca %"char[]", align 8
  %indirectarg21 = alloca %"char[]", align 8
  %indirectarg22 = alloca %"char[]", align 8
  %taddr25 = alloca i64, align 8
  %taddr26 = alloca i64, align 8
  %indirectarg27 = alloca %"char[]", align 8
  %indirectarg28 = alloca %"char[]", align 8
  %indirectarg29 = alloca %"char[]", align 8
  %varargslots30 = alloca [2 x %any], align 16
  %indirectarg33 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !864
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !864
  br i1 %3, label %panic, label %checkok, !dbg !864

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !865, !DIExpression(), !866)
    #dbg_declare(ptr %1, !867, !DIExpression(), !866)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input, ptr align 8 %1, i32 16, i1 false)
    #dbg_declare(ptr %return_value, !868, !DIExpression(), !870)
  call void @llvm.memset.p0.i64(ptr align 16 %return_value, i8 0, i64 32, i1 false), !dbg !870
  store ptr %return_value, ptr %taddr, align 8
  %4 = load ptr, ptr %taddr, align 8
  %5 = insertvalue %"char[]" undef, ptr %4, 0
  %6 = insertvalue %"char[]" %5, i64 32, 1
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg3, ptr align 8 %input, i32 16, i1 false)
  store %"char[]" %6, ptr %indirectarg4, align 8
  call void @std.math.random.seeder(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4), !dbg !872
  call void @llvm.memcpy.p0.p0.i32(ptr align 16 %expr, ptr align 16 %return_value, i32 32, i1 false)
  %checknull = icmp eq ptr %expr, null, !dbg !873
  %7 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !873
  br i1 %7, label %panic5, label %checkok9, !dbg !873

checkok9:                                         ; preds = %checkok
  %8 = ptrtoint ptr %expr to i64, !dbg !873
  %9 = urem i64 %8, 8, !dbg !873
  %10 = icmp ne i64 %9, 0, !dbg !873
  %11 = call i1 @llvm.expect.i1(i1 %10, i1 false), !dbg !873
  br i1 %11, label %panic10, label %checkok17, !dbg !873

checkok17:                                        ; preds = %checkok9
  %12 = load ptr, ptr %self, align 8, !dbg !871
  %checknull18 = icmp eq ptr %12, null, !dbg !871
  %13 = call i1 @llvm.expect.i1(i1 %checknull18, i1 false), !dbg !871
  br i1 %13, label %panic19, label %checkok23, !dbg !871

checkok23:                                        ; preds = %checkok17
  %14 = ptrtoint ptr %12 to i64, !dbg !871
  %15 = urem i64 %14, 8, !dbg !871
  %16 = icmp ne i64 %15, 0, !dbg !871
  %17 = call i1 @llvm.expect.i1(i1 %16, i1 false), !dbg !871
  br i1 %17, label %panic24, label %checkok34, !dbg !871

checkok34:                                        ; preds = %checkok23
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %12, ptr align 8 %expr, i32 32, i1 false), !dbg !871
  ret void, !dbg !871

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.54, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func, i64 8 }, ptr %indirectarg2, align 8
  %18 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %18(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 55) #5, !dbg !866
  unreachable, !dbg !866

panic5:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.55, i64 54 }, ptr %indirectarg6, align 8
  store %"char[]" { ptr @.file.56, i64 10 }, ptr %indirectarg7, align 8
  store %"char[]" { ptr @.func, i64 8 }, ptr %indirectarg8, align 8
  %19 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %19(ptr align 8 %indirectarg6, ptr align 8 %indirectarg7, ptr align 8 %indirectarg8, i32 281) #5, !dbg !873
  unreachable, !dbg !873

panic10:                                          ; preds = %checkok9
  store i64 8, ptr %taddr11, align 8
  %20 = insertvalue %any undef, ptr %taddr11, 0
  %21 = insertvalue %any %20, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %9, ptr %taddr12, align 8
  %22 = insertvalue %any undef, ptr %taddr12, 0
  %23 = insertvalue %any %22, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg13, align 8
  store %"char[]" { ptr @.file.56, i64 10 }, ptr %indirectarg14, align 8
  store %"char[]" { ptr @.func, i64 8 }, ptr %indirectarg15, align 8
  store %any %21, ptr %varargslots, align 16
  %ptradd = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %23, ptr %ptradd, align 16
  %24 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %24, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg16, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg13, ptr align 8 %indirectarg14, ptr align 8 %indirectarg15, i32 281, ptr align 8 %indirectarg16) #5, !dbg !873
  unreachable, !dbg !873

panic19:                                          ; preds = %checkok17
  store %"char[]" { ptr @.panic_msg.8, i64 45 }, ptr %indirectarg20, align 8
  store %"char[]" { ptr @.file.54, i64 12 }, ptr %indirectarg21, align 8
  store %"char[]" { ptr @.func, i64 8 }, ptr %indirectarg22, align 8
  %25 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %25(ptr align 8 %indirectarg20, ptr align 8 %indirectarg21, ptr align 8 %indirectarg22, i32 57) #5, !dbg !871
  unreachable, !dbg !871

panic24:                                          ; preds = %checkok23
  store i64 8, ptr %taddr25, align 8
  %26 = insertvalue %any undef, ptr %taddr25, 0
  %27 = insertvalue %any %26, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %15, ptr %taddr26, align 8
  %28 = insertvalue %any undef, ptr %taddr26, 0
  %29 = insertvalue %any %28, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg27, align 8
  store %"char[]" { ptr @.file.54, i64 12 }, ptr %indirectarg28, align 8
  store %"char[]" { ptr @.func, i64 8 }, ptr %indirectarg29, align 8
  store %any %27, ptr %varargslots30, align 16
  %ptradd31 = getelementptr inbounds i8, ptr %varargslots30, i64 16
  store %any %29, ptr %ptradd31, align 16
  %30 = insertvalue %"any[]" undef, ptr %varargslots30, 0
  %"$$temp32" = insertvalue %"any[]" %30, i64 2, 1
  store %"any[]" %"$$temp32", ptr %indirectarg33, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg27, ptr align 8 %indirectarg28, ptr align 8 %indirectarg29, i32 57, ptr align 8 %indirectarg33) #5, !dbg !871
  unreachable, !dbg !871
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.math.random.Msws64Random.next_long(ptr %0) #0 comdat !dbg !875 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %s0 = alloca i64, align 8
  %self3 = alloca i64, align 8
  %shift = alloca i64, align 8
  %s1 = alloca i64, align 8
  %self14 = alloca i64, align 8
  %shift15 = alloca i64, align 8
  %1 = icmp eq ptr %0, null, !dbg !878
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !878
  br i1 %2, label %panic, label %checkok, !dbg !878

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !879, !DIExpression(), !880)
    #dbg_declare(ptr %s0, !881, !DIExpression(), !882)
  %3 = load ptr, ptr %self, align 8, !dbg !882
  %4 = load i64, ptr %3, align 8, !dbg !882
  store i64 %4, ptr %s0, align 8, !dbg !882
  %5 = load ptr, ptr %self, align 8, !dbg !883
  %6 = load i64, ptr %5, align 8, !dbg !883
  %7 = load ptr, ptr %self, align 8, !dbg !883
  %8 = load i64, ptr %7, align 8, !dbg !883
  %mul = mul i64 %6, %8, !dbg !883
  %9 = load ptr, ptr %self, align 8, !dbg !883
  %ptradd = getelementptr inbounds i8, ptr %9, i64 16, !dbg !883
  %10 = load i64, ptr %ptradd, align 8, !dbg !883
  %add = add i64 %mul, %10, !dbg !883
  %11 = load ptr, ptr %self, align 8, !dbg !883
  store i64 %add, ptr %11, align 8, !dbg !883
  %12 = load ptr, ptr %self, align 8, !dbg !884
  %13 = load i64, ptr %12, align 8
  store i64 %13, ptr %self3, align 8
  store i64 32, ptr %shift, align 8
  %14 = load i64, ptr %self3, align 8, !dbg !885
  %15 = load i64, ptr %self3, align 8, !dbg !885
  %16 = load i64, ptr %shift, align 8, !dbg !885
  %17 = call i64 @llvm.fshr.i64(i64 %14, i64 %15, i64 %16), !dbg !885
  %18 = load ptr, ptr %self, align 8, !dbg !884
  store i64 %17, ptr %18, align 8, !dbg !884
  %19 = load ptr, ptr %self, align 8, !dbg !887
  %ptradd4 = getelementptr inbounds i8, ptr %19, i64 16, !dbg !887
  %20 = load i64, ptr %ptradd4, align 8, !dbg !887
  %add5 = add i64 %20, -7046029254386353131, !dbg !887
  store i64 %add5, ptr %ptradd4, align 8, !dbg !887
  %21 = load ptr, ptr %self, align 8, !dbg !888
  %ptradd6 = getelementptr inbounds i8, ptr %21, i64 8, !dbg !888
  %22 = load i64, ptr %ptradd6, align 8, !dbg !888
  %23 = load ptr, ptr %self, align 8, !dbg !888
  %ptradd7 = getelementptr inbounds i8, ptr %23, i64 8, !dbg !888
  %24 = load i64, ptr %ptradd7, align 8, !dbg !888
  %mul8 = mul i64 %22, %24, !dbg !888
  %25 = load ptr, ptr %self, align 8, !dbg !888
  %ptradd9 = getelementptr inbounds i8, ptr %25, i64 24, !dbg !888
  %26 = load i64, ptr %ptradd9, align 8, !dbg !888
  %add10 = add i64 %mul8, %26, !dbg !888
  %27 = load ptr, ptr %self, align 8, !dbg !888
  %ptradd11 = getelementptr inbounds i8, ptr %27, i64 8, !dbg !888
  store i64 %add10, ptr %ptradd11, align 8, !dbg !888
    #dbg_declare(ptr %s1, !889, !DIExpression(), !890)
  %28 = load ptr, ptr %self, align 8, !dbg !890
  %ptradd12 = getelementptr inbounds i8, ptr %28, i64 8, !dbg !890
  %29 = load i64, ptr %ptradd12, align 8, !dbg !890
  store i64 %29, ptr %s1, align 8, !dbg !890
  %30 = load ptr, ptr %self, align 8, !dbg !891
  %ptradd13 = getelementptr inbounds i8, ptr %30, i64 8, !dbg !891
  %31 = load i64, ptr %ptradd13, align 8
  store i64 %31, ptr %self14, align 8
  store i64 32, ptr %shift15, align 8
  %32 = load i64, ptr %self14, align 8, !dbg !892
  %33 = load i64, ptr %self14, align 8, !dbg !892
  %34 = load i64, ptr %shift15, align 8, !dbg !892
  %35 = call i64 @llvm.fshr.i64(i64 %32, i64 %33, i64 %34), !dbg !892
  %36 = load ptr, ptr %self, align 8, !dbg !891
  %ptradd16 = getelementptr inbounds i8, ptr %36, i64 8, !dbg !891
  store i64 %35, ptr %ptradd16, align 8, !dbg !891
  %37 = load ptr, ptr %self, align 8, !dbg !894
  %ptradd17 = getelementptr inbounds i8, ptr %37, i64 24, !dbg !894
  %38 = load i64, ptr %ptradd17, align 8, !dbg !894
  %sub = sub i64 %38, -7046029254386353131, !dbg !894
  store i64 %sub, ptr %ptradd17, align 8, !dbg !894
  %39 = load i64, ptr %s0, align 8, !dbg !895
  %40 = load i64, ptr %s1, align 8, !dbg !895
  %add18 = add i64 %39, %40, !dbg !895
  ret i64 %add18, !dbg !895

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.54, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.10, i64 9 }, ptr %indirectarg2, align 8
  %41 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %41(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 60) #5, !dbg !880
  unreachable, !dbg !880
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.math.random.Msws64Random.next_bytes(ptr %0, ptr align 8 %1) #0 comdat !dbg !896 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %bytes = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i64, align 8
  %taddr = alloca ptr, align 8
  %taddr9 = alloca i64, align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg13 = alloca %"any[]", align 8
  %taddr17 = alloca i64, align 8
  %taddr18 = alloca i64, align 8
  %indirectarg19 = alloca %"char[]", align 8
  %indirectarg20 = alloca %"char[]", align 8
  %indirectarg21 = alloca %"char[]", align 8
  %varargslots22 = alloca [2 x %any], align 16
  %indirectarg25 = alloca %"any[]", align 8
  %taddr29 = alloca i64, align 8
  %taddr30 = alloca i64, align 8
  %indirectarg31 = alloca %"char[]", align 8
  %indirectarg32 = alloca %"char[]", align 8
  %indirectarg33 = alloca %"char[]", align 8
  %varargslots34 = alloca [2 x %any], align 16
  %indirectarg37 = alloca %"any[]", align 8
  %taddr39 = alloca ptr, align 8
  %taddr42 = alloca i64, align 8
  %taddr43 = alloca i64, align 8
  %indirectarg44 = alloca %"char[]", align 8
  %indirectarg45 = alloca %"char[]", align 8
  %indirectarg46 = alloca %"char[]", align 8
  %varargslots47 = alloca [2 x %any], align 16
  %indirectarg50 = alloca %"any[]", align 8
  %taddr54 = alloca i64, align 8
  %taddr55 = alloca i64, align 8
  %indirectarg56 = alloca %"char[]", align 8
  %indirectarg57 = alloca %"char[]", align 8
  %indirectarg58 = alloca %"char[]", align 8
  %varargslots59 = alloca [2 x %any], align 16
  %indirectarg62 = alloca %"any[]", align 8
  %taddr66 = alloca i64, align 8
  %taddr67 = alloca i64, align 8
  %indirectarg68 = alloca %"char[]", align 8
  %indirectarg69 = alloca %"char[]", align 8
  %indirectarg70 = alloca %"char[]", align 8
  %varargslots71 = alloca [2 x %any], align 16
  %indirectarg74 = alloca %"any[]", align 8
  %taddr79 = alloca i64, align 8
  %taddr80 = alloca i64, align 8
  %indirectarg81 = alloca %"char[]", align 8
  %indirectarg82 = alloca %"char[]", align 8
  %indirectarg83 = alloca %"char[]", align 8
  %varargslots84 = alloca [2 x %any], align 16
  %indirectarg87 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg91 = alloca %"char[]", align 8
  %indirectarg92 = alloca %"char[]", align 8
  %indirectarg93 = alloca %"char[]", align 8
  %indirectarg94 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !897
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !897
  br i1 %3, label %panic, label %checkok, !dbg !897

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !898, !DIExpression(), !897)
    #dbg_declare(ptr %1, !899, !DIExpression(), !897)
  %ptradd = getelementptr inbounds i8, ptr %1, i64 8, !dbg !900
  %4 = load i64, ptr %ptradd, align 8, !dbg !900
  %lt = icmp ult i64 0, %4, !dbg !900
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !900

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.13, i64 34 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.file.54, i64 12 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg5, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, i32 76) #5, !dbg !900
  unreachable, !dbg !900

assert_ok:                                        ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes, ptr align 8 %1, i32 16, i1 false)
    #dbg_declare(ptr %len, !902, !DIExpression(), !904)
  %ptradd6 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !904
  %6 = load i64, ptr %ptradd6, align 8, !dbg !904
  store i64 %6, ptr %len, align 8, !dbg !904
  br label %loop.cond, !dbg !905

loop.cond:                                        ; preds = %checkok88, %assert_ok
  %7 = load i64, ptr %len, align 8, !dbg !906
  %lt7 = icmp ult i64 0, %7, !dbg !906
  br i1 %lt7, label %loop.body, label %loop.exit, !dbg !906

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %value, !908, !DIExpression(), !910)
  %8 = load ptr, ptr %self, align 8, !dbg !911
  %9 = call i64 @std.math.random.Msws64Random.next_long(ptr %8), !dbg !910
  store i64 %9, ptr %value, align 8, !dbg !910
  %10 = load i64, ptr %len, align 8, !dbg !912
  %le = icmp ule i64 %10, 8, !dbg !912
  br i1 %le, label %if.then, label %if.exit, !dbg !912

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %11 = load ptr, ptr %taddr, align 8
  %12 = load i64, ptr %len, align 8, !dbg !913
  %add = add i64 0, %12, !dbg !913
  %gt = icmp ugt i64 0, %add, !dbg !913
  %sub = sub i64 %add, 0, !dbg !913
  %13 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !913
  br i1 %13, label %panic8, label %checkok14, !dbg !913

checkok14:                                        ; preds = %if.then
  %size = sub i64 %add, 0, !dbg !913
  %14 = insertvalue %"char[]" undef, ptr %11, 0, !dbg !913
  %15 = insertvalue %"char[]" %14, i64 %size, 1, !dbg !913
  %16 = load %"char[]", ptr %bytes, align 8, !dbg !913
  %17 = extractvalue %"char[]" %16, 0, !dbg !913
  %18 = extractvalue %"char[]" %16, 1, !dbg !913
  %gt15 = icmp ugt i64 0, %18, !dbg !913
  %19 = call i1 @llvm.expect.i1(i1 %gt15, i1 false), !dbg !913
  br i1 %19, label %panic16, label %checkok26, !dbg !913

checkok26:                                        ; preds = %checkok14
  %size27 = sub i64 %18, 0, !dbg !913
  %20 = insertvalue %"char[]" undef, ptr %17, 0, !dbg !913
  %21 = insertvalue %"char[]" %20, i64 %size27, 1, !dbg !913
  %22 = extractvalue %"char[]" %21, 0, !dbg !913
  %23 = extractvalue %"char[]" %15, 0, !dbg !913
  %24 = extractvalue %"char[]" %15, 1, !dbg !913
  %25 = extractvalue %"char[]" %21, 1, !dbg !913
  %neq = icmp ne i64 %25, %24, !dbg !913
  %26 = call i1 @llvm.expect.i1(i1 %neq, i1 false), !dbg !913
  br i1 %26, label %panic28, label %checkok38, !dbg !913

checkok38:                                        ; preds = %checkok26
  %27 = mul i64 %24, 1, !dbg !913
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %22, ptr align 1 %23, i64 %27, i1 false), !dbg !913
  br label %expr_block.exit, !dbg !915

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr39, align 8
  %28 = load ptr, ptr %taddr39, align 8
  %29 = insertvalue %"char[]" undef, ptr %28, 0
  %30 = insertvalue %"char[]" %29, i64 8, 1
  %31 = load %"char[]", ptr %bytes, align 8, !dbg !916
  %32 = extractvalue %"char[]" %31, 0, !dbg !916
  %33 = extractvalue %"char[]" %31, 1, !dbg !916
  %gt40 = icmp sgt i64 0, %33, !dbg !916
  %34 = call i1 @llvm.expect.i1(i1 %gt40, i1 false), !dbg !916
  br i1 %34, label %panic41, label %checkok51, !dbg !916

checkok51:                                        ; preds = %if.exit
  %lt52 = icmp slt i64 %33, 8, !dbg !916
  %35 = call i1 @llvm.expect.i1(i1 %lt52, i1 false), !dbg !916
  br i1 %35, label %panic53, label %checkok63, !dbg !916

checkok63:                                        ; preds = %checkok51
  %36 = insertvalue %"char[]" undef, ptr %32, 0, !dbg !916
  %37 = insertvalue %"char[]" %36, i64 8, 1, !dbg !916
  %38 = extractvalue %"char[]" %37, 0, !dbg !916
  %39 = extractvalue %"char[]" %30, 0, !dbg !916
  %40 = extractvalue %"char[]" %30, 1, !dbg !916
  %41 = extractvalue %"char[]" %37, 1, !dbg !916
  %neq64 = icmp ne i64 %41, %40, !dbg !916
  %42 = call i1 @llvm.expect.i1(i1 %neq64, i1 false), !dbg !916
  br i1 %42, label %panic65, label %checkok75, !dbg !916

checkok75:                                        ; preds = %checkok63
  %43 = mul i64 %40, 1, !dbg !916
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %38, ptr align 1 %39, i64 %43, i1 false), !dbg !916
  %44 = load i64, ptr %len, align 8, !dbg !917
  %sub76 = sub i64 %44, 8, !dbg !917
  store i64 %sub76, ptr %len, align 8, !dbg !917
  %45 = load %"char[]", ptr %bytes, align 8, !dbg !918
  %46 = extractvalue %"char[]" %45, 0, !dbg !918
  %47 = extractvalue %"char[]" %45, 1, !dbg !918
  %gt77 = icmp ugt i64 8, %47, !dbg !918
  %48 = call i1 @llvm.expect.i1(i1 %gt77, i1 false), !dbg !918
  br i1 %48, label %panic78, label %checkok88, !dbg !918

checkok88:                                        ; preds = %checkok75
  %size89 = sub i64 %47, 8, !dbg !918
  %ptradd90 = getelementptr inbounds i8, ptr %46, i64 8, !dbg !918
  %49 = insertvalue %"char[]" undef, ptr %ptradd90, 0, !dbg !918
  %50 = insertvalue %"char[]" %49, i64 %size89, 1, !dbg !918
  store %"char[]" %50, ptr %bytes, align 8, !dbg !918
  br label %loop.cond, !dbg !918

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.60, i64 30 }, ptr %string, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg91, ptr align 8 %string, i32 16, i1 false)
  store %"char[]" { ptr @.str.61, i64 12 }, ptr %indirectarg92, align 8
  store %"char[]" { ptr @.str.62, i64 23 }, ptr %indirectarg93, align 8
  store %"any[]" zeroinitializer, ptr %indirectarg94, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg91, ptr align 8 %indirectarg92, ptr align 8 %indirectarg93, i32 78, ptr align 8 %indirectarg94), !dbg !919
  unreachable, !dbg !919

expr_block.exit:                                  ; preds = %checkok38
  ret void, !dbg !919

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.54, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg2, align 8
  %51 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %51(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 78) #5, !dbg !897
  unreachable, !dbg !897

panic8:                                           ; preds = %if.then
  store i64 %sub, ptr %taddr9, align 8
  %52 = insertvalue %any undef, ptr %taddr9, 0
  %53 = insertvalue %any %52, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.14, i64 43 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg12, align 8
  store %any %53, ptr %varargslots, align 16
  %54 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %54, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg13, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, i32 153, ptr align 8 %indirectarg13) #5, !dbg !913
  unreachable, !dbg !913

panic16:                                          ; preds = %checkok14
  store i64 %18, ptr %taddr17, align 8
  %55 = insertvalue %any undef, ptr %taddr17, 0
  %56 = insertvalue %any %55, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr18, align 8
  %57 = insertvalue %any undef, ptr %taddr18, 0
  %58 = insertvalue %any %57, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.16, i64 61 }, ptr %indirectarg19, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg20, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg21, align 8
  store %any %56, ptr %varargslots22, align 16
  %ptradd23 = getelementptr inbounds i8, ptr %varargslots22, i64 16
  store %any %58, ptr %ptradd23, align 16
  %59 = insertvalue %"any[]" undef, ptr %varargslots22, 0
  %"$$temp24" = insertvalue %"any[]" %59, i64 2, 1
  store %"any[]" %"$$temp24", ptr %indirectarg25, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg19, ptr align 8 %indirectarg20, ptr align 8 %indirectarg21, i32 153, ptr align 8 %indirectarg25) #5, !dbg !913
  unreachable, !dbg !913

panic28:                                          ; preds = %checkok26
  store i64 %25, ptr %taddr29, align 8
  %60 = insertvalue %any undef, ptr %taddr29, 0
  %61 = insertvalue %any %60, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %24, ptr %taddr30, align 8
  %62 = insertvalue %any undef, ptr %taddr30, 0
  %63 = insertvalue %any %62, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 38 }, ptr %indirectarg31, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg32, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg33, align 8
  store %any %61, ptr %varargslots34, align 16
  %ptradd35 = getelementptr inbounds i8, ptr %varargslots34, i64 16
  store %any %63, ptr %ptradd35, align 16
  %64 = insertvalue %"any[]" undef, ptr %varargslots34, 0
  %"$$temp36" = insertvalue %"any[]" %64, i64 2, 1
  store %"any[]" %"$$temp36", ptr %indirectarg37, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg31, ptr align 8 %indirectarg32, ptr align 8 %indirectarg33, i32 153, ptr align 8 %indirectarg37) #5, !dbg !913
  unreachable, !dbg !913

panic41:                                          ; preds = %if.exit
  store i64 %33, ptr %taddr42, align 8
  %65 = insertvalue %any undef, ptr %taddr42, 0
  %66 = insertvalue %any %65, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr43, align 8
  %67 = insertvalue %any undef, ptr %taddr43, 0
  %68 = insertvalue %any %67, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.16, i64 61 }, ptr %indirectarg44, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg45, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg46, align 8
  store %any %66, ptr %varargslots47, align 16
  %ptradd48 = getelementptr inbounds i8, ptr %varargslots47, i64 16
  store %any %68, ptr %ptradd48, align 16
  %69 = insertvalue %"any[]" undef, ptr %varargslots47, 0
  %"$$temp49" = insertvalue %"any[]" %69, i64 2, 1
  store %"any[]" %"$$temp49", ptr %indirectarg50, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg44, ptr align 8 %indirectarg45, ptr align 8 %indirectarg46, i32 156, ptr align 8 %indirectarg50) #5, !dbg !916
  unreachable, !dbg !916

panic53:                                          ; preds = %checkok51
  store i64 7, ptr %taddr54, align 8
  %70 = insertvalue %any undef, ptr %taddr54, 0
  %71 = insertvalue %any %70, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %33, ptr %taddr55, align 8
  %72 = insertvalue %any undef, ptr %taddr55, 0
  %73 = insertvalue %any %72, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.18, i64 60 }, ptr %indirectarg56, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg57, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg58, align 8
  store %any %71, ptr %varargslots59, align 16
  %ptradd60 = getelementptr inbounds i8, ptr %varargslots59, i64 16
  store %any %73, ptr %ptradd60, align 16
  %74 = insertvalue %"any[]" undef, ptr %varargslots59, 0
  %"$$temp61" = insertvalue %"any[]" %74, i64 2, 1
  store %"any[]" %"$$temp61", ptr %indirectarg62, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg56, ptr align 8 %indirectarg57, ptr align 8 %indirectarg58, i32 156, ptr align 8 %indirectarg62) #5, !dbg !916
  unreachable, !dbg !916

panic65:                                          ; preds = %checkok63
  store i64 %41, ptr %taddr66, align 8
  %75 = insertvalue %any undef, ptr %taddr66, 0
  %76 = insertvalue %any %75, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %40, ptr %taddr67, align 8
  %77 = insertvalue %any undef, ptr %taddr67, 0
  %78 = insertvalue %any %77, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 38 }, ptr %indirectarg68, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg69, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg70, align 8
  store %any %76, ptr %varargslots71, align 16
  %ptradd72 = getelementptr inbounds i8, ptr %varargslots71, i64 16
  store %any %78, ptr %ptradd72, align 16
  %79 = insertvalue %"any[]" undef, ptr %varargslots71, 0
  %"$$temp73" = insertvalue %"any[]" %79, i64 2, 1
  store %"any[]" %"$$temp73", ptr %indirectarg74, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg68, ptr align 8 %indirectarg69, ptr align 8 %indirectarg70, i32 156, ptr align 8 %indirectarg74) #5, !dbg !916
  unreachable, !dbg !916

panic78:                                          ; preds = %checkok75
  store i64 %47, ptr %taddr79, align 8
  %80 = insertvalue %any undef, ptr %taddr79, 0
  %81 = insertvalue %any %80, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 8, ptr %taddr80, align 8
  %82 = insertvalue %any undef, ptr %taddr80, 0
  %83 = insertvalue %any %82, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.16, i64 61 }, ptr %indirectarg81, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg82, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg83, align 8
  store %any %81, ptr %varargslots84, align 16
  %ptradd85 = getelementptr inbounds i8, ptr %varargslots84, i64 16
  store %any %83, ptr %ptradd85, align 16
  %84 = insertvalue %"any[]" undef, ptr %varargslots84, 0
  %"$$temp86" = insertvalue %"any[]" %84, i64 2, 1
  store %"any[]" %"$$temp86", ptr %indirectarg87, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg81, ptr align 8 %indirectarg82, ptr align 8 %indirectarg83, i32 158, ptr align 8 %indirectarg87) #5, !dbg !918
  unreachable, !dbg !918
}

; Function Attrs: nounwind ssp uwtable
define weak_odr <2 x i64> @std.math.random.Msws64Random.next_int128(ptr %0) #0 comdat !dbg !922 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %taddr = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !925
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !925
  br i1 %2, label %panic, label %checkok, !dbg !925

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !926, !DIExpression(), !925)
  %3 = load ptr, ptr %self, align 8, !dbg !927
  %4 = call i64 @std.math.random.Msws64Random.next_long(ptr %3), !dbg !929
  %zext = zext i64 %4 to i128, !dbg !929
  %shl = shl i128 %zext, 64, !dbg !929
  %5 = freeze i128 %shl, !dbg !929
  %6 = load ptr, ptr %self, align 8, !dbg !927
  %7 = call i64 @std.math.random.Msws64Random.next_long(ptr %6), !dbg !929
  %zext3 = zext i64 %7 to i128, !dbg !929
  %add = add i128 %5, %zext3, !dbg !929
  store i128 %add, ptr %taddr, align 16
  %8 = load <2 x i64>, ptr %taddr, align 16
  ret <2 x i64> %8

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.54, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.21, i64 11 }, ptr %indirectarg2, align 8
  %9 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %9(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 79) #5, !dbg !925
  unreachable, !dbg !925
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i32 @std.math.random.Msws64Random.next_int(ptr %0) #0 comdat !dbg !930 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !933
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !933
  br i1 %2, label %panic, label %checkok, !dbg !933

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !934, !DIExpression(), !933)
  %3 = load ptr, ptr %self, align 8, !dbg !933
  %4 = call i64 @std.math.random.Msws64Random.next_long(ptr %3), !dbg !933
  %trunc = trunc i64 %4 to i32, !dbg !933
  ret i32 %trunc, !dbg !933

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.54, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.22, i64 8 }, ptr %indirectarg2, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 80) #5, !dbg !933
  unreachable, !dbg !933
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i16 @std.math.random.Msws64Random.next_short(ptr %0) #0 comdat !dbg !935 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !938
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !938
  br i1 %2, label %panic, label %checkok, !dbg !938

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !939, !DIExpression(), !938)
  %3 = load ptr, ptr %self, align 8, !dbg !938
  %4 = call i64 @std.math.random.Msws64Random.next_long(ptr %3), !dbg !938
  %trunc = trunc i64 %4 to i16, !dbg !938
  ret i16 %trunc, !dbg !938

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.54, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.23, i64 10 }, ptr %indirectarg2, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 81) #5, !dbg !938
  unreachable, !dbg !938
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i8 @std.math.random.Msws64Random.next_byte(ptr %0) #0 comdat !dbg !940 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !943
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !943
  br i1 %2, label %panic, label %checkok, !dbg !943

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !944, !DIExpression(), !943)
  %3 = load ptr, ptr %self, align 8, !dbg !943
  %4 = call i64 @std.math.random.Msws64Random.next_long(ptr %3), !dbg !943
  %trunc = trunc i64 %4 to i8, !dbg !943
  ret i8 %trunc, !dbg !943

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.54, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.24, i64 9 }, ptr %indirectarg2, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 82) #5, !dbg !943
  unreachable, !dbg !943
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.math.random.Msws32Random.set_seed(ptr %0, ptr align 8 %1) #0 comdat !dbg !945 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %input = alloca %"char[]", align 8
  %return_value = alloca [4 x i32], align 16
  %taddr = alloca ptr, align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %expr = alloca [4 x i32], align 16
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %taddr13 = alloca i64, align 8
  %taddr14 = alloca i64, align 8
  %indirectarg15 = alloca %"char[]", align 8
  %indirectarg16 = alloca %"char[]", align 8
  %indirectarg17 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg19 = alloca %"any[]", align 8
  %indirectarg23 = alloca %"char[]", align 8
  %indirectarg24 = alloca %"char[]", align 8
  %indirectarg25 = alloca %"char[]", align 8
  %taddr28 = alloca i64, align 8
  %taddr29 = alloca i64, align 8
  %indirectarg30 = alloca %"char[]", align 8
  %indirectarg31 = alloca %"char[]", align 8
  %indirectarg32 = alloca %"char[]", align 8
  %varargslots33 = alloca [2 x %any], align 16
  %indirectarg36 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !955
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !955
  br i1 %3, label %panic, label %checkok, !dbg !955

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !956, !DIExpression(), !957)
    #dbg_declare(ptr %1, !958, !DIExpression(), !957)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input, ptr align 8 %1, i32 16, i1 false)
    #dbg_declare(ptr %return_value, !959, !DIExpression(), !962)
  store i32 0, ptr %return_value, align 4, !dbg !962
  %ptradd = getelementptr inbounds i8, ptr %return_value, i64 4, !dbg !962
  store i32 0, ptr %ptradd, align 4, !dbg !962
  %ptradd3 = getelementptr inbounds i8, ptr %return_value, i64 8, !dbg !962
  store i32 0, ptr %ptradd3, align 4, !dbg !962
  %ptradd4 = getelementptr inbounds i8, ptr %return_value, i64 12, !dbg !962
  store i32 0, ptr %ptradd4, align 4, !dbg !962
  store ptr %return_value, ptr %taddr, align 8
  %4 = load ptr, ptr %taddr, align 8
  %5 = insertvalue %"char[]" undef, ptr %4, 0
  %6 = insertvalue %"char[]" %5, i64 16, 1
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg5, ptr align 8 %input, i32 16, i1 false)
  store %"char[]" %6, ptr %indirectarg6, align 8
  call void @std.math.random.seeder(ptr align 8 %indirectarg5, ptr align 8 %indirectarg6), !dbg !964
  call void @llvm.memcpy.p0.p0.i32(ptr align 16 %expr, ptr align 16 %return_value, i32 16, i1 false)
  %checknull = icmp eq ptr %expr, null, !dbg !965
  %7 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !965
  br i1 %7, label %panic7, label %checkok11, !dbg !965

checkok11:                                        ; preds = %checkok
  %8 = ptrtoint ptr %expr to i64, !dbg !965
  %9 = urem i64 %8, 4, !dbg !965
  %10 = icmp ne i64 %9, 0, !dbg !965
  %11 = call i1 @llvm.expect.i1(i1 %10, i1 false), !dbg !965
  br i1 %11, label %panic12, label %checkok20, !dbg !965

checkok20:                                        ; preds = %checkok11
  %12 = load ptr, ptr %self, align 8, !dbg !963
  %checknull21 = icmp eq ptr %12, null, !dbg !963
  %13 = call i1 @llvm.expect.i1(i1 %checknull21, i1 false), !dbg !963
  br i1 %13, label %panic22, label %checkok26, !dbg !963

checkok26:                                        ; preds = %checkok20
  %14 = ptrtoint ptr %12 to i64, !dbg !963
  %15 = urem i64 %14, 4, !dbg !963
  %16 = icmp ne i64 %15, 0, !dbg !963
  %17 = call i1 @llvm.expect.i1(i1 %16, i1 false), !dbg !963
  br i1 %17, label %panic27, label %checkok37, !dbg !963

checkok37:                                        ; preds = %checkok26
  call void @llvm.memcpy.p0.p0.i32(ptr align 4 %12, ptr align 4 %expr, i32 16, i1 false), !dbg !963
  ret void, !dbg !963

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.54, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func, i64 8 }, ptr %indirectarg2, align 8
  %18 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %18(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 91) #5, !dbg !957
  unreachable, !dbg !957

panic7:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.55, i64 54 }, ptr %indirectarg8, align 8
  store %"char[]" { ptr @.file.56, i64 10 }, ptr %indirectarg9, align 8
  store %"char[]" { ptr @.func, i64 8 }, ptr %indirectarg10, align 8
  %19 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %19(ptr align 8 %indirectarg8, ptr align 8 %indirectarg9, ptr align 8 %indirectarg10, i32 281) #5, !dbg !965
  unreachable, !dbg !965

panic12:                                          ; preds = %checkok11
  store i64 4, ptr %taddr13, align 8
  %20 = insertvalue %any undef, ptr %taddr13, 0
  %21 = insertvalue %any %20, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %9, ptr %taddr14, align 8
  %22 = insertvalue %any undef, ptr %taddr14, 0
  %23 = insertvalue %any %22, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg15, align 8
  store %"char[]" { ptr @.file.56, i64 10 }, ptr %indirectarg16, align 8
  store %"char[]" { ptr @.func, i64 8 }, ptr %indirectarg17, align 8
  store %any %21, ptr %varargslots, align 16
  %ptradd18 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %23, ptr %ptradd18, align 16
  %24 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %24, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg19, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg15, ptr align 8 %indirectarg16, ptr align 8 %indirectarg17, i32 281, ptr align 8 %indirectarg19) #5, !dbg !965
  unreachable, !dbg !965

panic22:                                          ; preds = %checkok20
  store %"char[]" { ptr @.panic_msg.8, i64 45 }, ptr %indirectarg23, align 8
  store %"char[]" { ptr @.file.54, i64 12 }, ptr %indirectarg24, align 8
  store %"char[]" { ptr @.func, i64 8 }, ptr %indirectarg25, align 8
  %25 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %25(ptr align 8 %indirectarg23, ptr align 8 %indirectarg24, ptr align 8 %indirectarg25, i32 93) #5, !dbg !963
  unreachable, !dbg !963

panic27:                                          ; preds = %checkok26
  store i64 4, ptr %taddr28, align 8
  %26 = insertvalue %any undef, ptr %taddr28, 0
  %27 = insertvalue %any %26, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %15, ptr %taddr29, align 8
  %28 = insertvalue %any undef, ptr %taddr29, 0
  %29 = insertvalue %any %28, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg30, align 8
  store %"char[]" { ptr @.file.54, i64 12 }, ptr %indirectarg31, align 8
  store %"char[]" { ptr @.func, i64 8 }, ptr %indirectarg32, align 8
  store %any %27, ptr %varargslots33, align 16
  %ptradd34 = getelementptr inbounds i8, ptr %varargslots33, i64 16
  store %any %29, ptr %ptradd34, align 16
  %30 = insertvalue %"any[]" undef, ptr %varargslots33, 0
  %"$$temp35" = insertvalue %"any[]" %30, i64 2, 1
  store %"any[]" %"$$temp35", ptr %indirectarg36, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg30, ptr align 8 %indirectarg31, ptr align 8 %indirectarg32, i32 93, ptr align 8 %indirectarg36) #5, !dbg !963
  unreachable, !dbg !963
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i32 @std.math.random.Msws32Random.next_int(ptr %0) #0 comdat !dbg !967 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %s0 = alloca i32, align 4
  %self3 = alloca i32, align 4
  %shift = alloca i32, align 4
  %s1 = alloca i32, align 4
  %self14 = alloca i32, align 4
  %shift15 = alloca i32, align 4
  %1 = icmp eq ptr %0, null, !dbg !970
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !970
  br i1 %2, label %panic, label %checkok, !dbg !970

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !971, !DIExpression(), !972)
    #dbg_declare(ptr %s0, !973, !DIExpression(), !974)
  %3 = load ptr, ptr %self, align 8, !dbg !974
  %4 = load i32, ptr %3, align 4, !dbg !974
  store i32 %4, ptr %s0, align 4, !dbg !974
  %5 = load ptr, ptr %self, align 8, !dbg !975
  %6 = load i32, ptr %5, align 4, !dbg !975
  %7 = load ptr, ptr %self, align 8, !dbg !975
  %8 = load i32, ptr %7, align 4, !dbg !975
  %mul = mul i32 %6, %8, !dbg !975
  %9 = load ptr, ptr %self, align 8, !dbg !975
  %ptradd = getelementptr inbounds i8, ptr %9, i64 8, !dbg !975
  %10 = load i32, ptr %ptradd, align 4, !dbg !975
  %add = add i32 %mul, %10, !dbg !975
  %11 = load ptr, ptr %self, align 8, !dbg !975
  store i32 %add, ptr %11, align 4, !dbg !975
  %12 = load ptr, ptr %self, align 8, !dbg !976
  %13 = load i32, ptr %12, align 4
  store i32 %13, ptr %self3, align 4
  store i32 16, ptr %shift, align 4
  %14 = load i32, ptr %self3, align 4, !dbg !977
  %15 = load i32, ptr %self3, align 4, !dbg !977
  %16 = load i32, ptr %shift, align 4, !dbg !977
  %17 = call i32 @llvm.fshr.i32(i32 %14, i32 %15, i32 %16), !dbg !977
  %18 = load ptr, ptr %self, align 8, !dbg !976
  store i32 %17, ptr %18, align 4, !dbg !976
  %19 = load ptr, ptr %self, align 8, !dbg !979
  %ptradd4 = getelementptr inbounds i8, ptr %19, i64 8, !dbg !979
  %20 = load i32, ptr %ptradd4, align 4, !dbg !979
  %add5 = add i32 %20, -1640531527, !dbg !979
  store i32 %add5, ptr %ptradd4, align 4, !dbg !979
  %21 = load ptr, ptr %self, align 8, !dbg !980
  %ptradd6 = getelementptr inbounds i8, ptr %21, i64 4, !dbg !980
  %22 = load i32, ptr %ptradd6, align 4, !dbg !980
  %23 = load ptr, ptr %self, align 8, !dbg !980
  %ptradd7 = getelementptr inbounds i8, ptr %23, i64 4, !dbg !980
  %24 = load i32, ptr %ptradd7, align 4, !dbg !980
  %mul8 = mul i32 %22, %24, !dbg !980
  %25 = load ptr, ptr %self, align 8, !dbg !980
  %ptradd9 = getelementptr inbounds i8, ptr %25, i64 12, !dbg !980
  %26 = load i32, ptr %ptradd9, align 4, !dbg !980
  %add10 = add i32 %mul8, %26, !dbg !980
  %27 = load ptr, ptr %self, align 8, !dbg !980
  %ptradd11 = getelementptr inbounds i8, ptr %27, i64 4, !dbg !980
  store i32 %add10, ptr %ptradd11, align 4, !dbg !980
    #dbg_declare(ptr %s1, !981, !DIExpression(), !982)
  %28 = load ptr, ptr %self, align 8, !dbg !982
  %ptradd12 = getelementptr inbounds i8, ptr %28, i64 4, !dbg !982
  %29 = load i32, ptr %ptradd12, align 4, !dbg !982
  store i32 %29, ptr %s1, align 4, !dbg !982
  %30 = load ptr, ptr %self, align 8, !dbg !983
  %ptradd13 = getelementptr inbounds i8, ptr %30, i64 4, !dbg !983
  %31 = load i32, ptr %ptradd13, align 4
  store i32 %31, ptr %self14, align 4
  store i32 16, ptr %shift15, align 4
  %32 = load i32, ptr %self14, align 4, !dbg !984
  %33 = load i32, ptr %self14, align 4, !dbg !984
  %34 = load i32, ptr %shift15, align 4, !dbg !984
  %35 = call i32 @llvm.fshr.i32(i32 %32, i32 %33, i32 %34), !dbg !984
  %36 = load ptr, ptr %self, align 8, !dbg !983
  %ptradd16 = getelementptr inbounds i8, ptr %36, i64 4, !dbg !983
  store i32 %35, ptr %ptradd16, align 4, !dbg !983
  %37 = load ptr, ptr %self, align 8, !dbg !986
  %ptradd17 = getelementptr inbounds i8, ptr %37, i64 12, !dbg !986
  %38 = load i32, ptr %ptradd17, align 4, !dbg !986
  %sub = sub i32 %38, -1640531527, !dbg !986
  store i32 %sub, ptr %ptradd17, align 4, !dbg !986
  %39 = load i32, ptr %s0, align 4, !dbg !987
  %40 = load i32, ptr %s1, align 4, !dbg !987
  %add18 = add i32 %39, %40, !dbg !987
  ret i32 %add18, !dbg !987

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.54, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.22, i64 8 }, ptr %indirectarg2, align 8
  %41 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %41(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 97) #5, !dbg !972
  unreachable, !dbg !972
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.math.random.Msws32Random.next_bytes(ptr %0, ptr align 8 %1) #0 comdat !dbg !988 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %bytes = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i32, align 4
  %taddr = alloca ptr, align 8
  %taddr9 = alloca i64, align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg13 = alloca %"any[]", align 8
  %taddr17 = alloca i64, align 8
  %taddr18 = alloca i64, align 8
  %indirectarg19 = alloca %"char[]", align 8
  %indirectarg20 = alloca %"char[]", align 8
  %indirectarg21 = alloca %"char[]", align 8
  %varargslots22 = alloca [2 x %any], align 16
  %indirectarg25 = alloca %"any[]", align 8
  %taddr29 = alloca i64, align 8
  %taddr30 = alloca i64, align 8
  %indirectarg31 = alloca %"char[]", align 8
  %indirectarg32 = alloca %"char[]", align 8
  %indirectarg33 = alloca %"char[]", align 8
  %varargslots34 = alloca [2 x %any], align 16
  %indirectarg37 = alloca %"any[]", align 8
  %taddr39 = alloca ptr, align 8
  %taddr42 = alloca i64, align 8
  %taddr43 = alloca i64, align 8
  %indirectarg44 = alloca %"char[]", align 8
  %indirectarg45 = alloca %"char[]", align 8
  %indirectarg46 = alloca %"char[]", align 8
  %varargslots47 = alloca [2 x %any], align 16
  %indirectarg50 = alloca %"any[]", align 8
  %taddr54 = alloca i64, align 8
  %taddr55 = alloca i64, align 8
  %indirectarg56 = alloca %"char[]", align 8
  %indirectarg57 = alloca %"char[]", align 8
  %indirectarg58 = alloca %"char[]", align 8
  %varargslots59 = alloca [2 x %any], align 16
  %indirectarg62 = alloca %"any[]", align 8
  %taddr66 = alloca i64, align 8
  %taddr67 = alloca i64, align 8
  %indirectarg68 = alloca %"char[]", align 8
  %indirectarg69 = alloca %"char[]", align 8
  %indirectarg70 = alloca %"char[]", align 8
  %varargslots71 = alloca [2 x %any], align 16
  %indirectarg74 = alloca %"any[]", align 8
  %taddr79 = alloca i64, align 8
  %taddr80 = alloca i64, align 8
  %indirectarg81 = alloca %"char[]", align 8
  %indirectarg82 = alloca %"char[]", align 8
  %indirectarg83 = alloca %"char[]", align 8
  %varargslots84 = alloca [2 x %any], align 16
  %indirectarg87 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg91 = alloca %"char[]", align 8
  %indirectarg92 = alloca %"char[]", align 8
  %indirectarg93 = alloca %"char[]", align 8
  %indirectarg94 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !989
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !989
  br i1 %3, label %panic, label %checkok, !dbg !989

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !990, !DIExpression(), !989)
    #dbg_declare(ptr %1, !991, !DIExpression(), !989)
  %ptradd = getelementptr inbounds i8, ptr %1, i64 8, !dbg !992
  %4 = load i64, ptr %ptradd, align 8, !dbg !992
  %lt = icmp ult i64 0, %4, !dbg !992
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !992

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.13, i64 34 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.file.54, i64 12 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg5, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, i32 113) #5, !dbg !992
  unreachable, !dbg !992

assert_ok:                                        ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes, ptr align 8 %1, i32 16, i1 false)
    #dbg_declare(ptr %len, !994, !DIExpression(), !996)
  %ptradd6 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !996
  %6 = load i64, ptr %ptradd6, align 8, !dbg !996
  store i64 %6, ptr %len, align 8, !dbg !996
  br label %loop.cond, !dbg !997

loop.cond:                                        ; preds = %checkok88, %assert_ok
  %7 = load i64, ptr %len, align 8, !dbg !998
  %lt7 = icmp ult i64 0, %7, !dbg !998
  br i1 %lt7, label %loop.body, label %loop.exit, !dbg !998

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %value, !1000, !DIExpression(), !1002)
  %8 = load ptr, ptr %self, align 8, !dbg !1003
  %9 = call i32 @std.math.random.Msws32Random.next_int(ptr %8), !dbg !1002
  store i32 %9, ptr %value, align 4, !dbg !1002
  %10 = load i64, ptr %len, align 8, !dbg !1004
  %le = icmp ule i64 %10, 4, !dbg !1004
  br i1 %le, label %if.then, label %if.exit, !dbg !1004

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %11 = load ptr, ptr %taddr, align 8
  %12 = load i64, ptr %len, align 8, !dbg !1005
  %add = add i64 0, %12, !dbg !1005
  %gt = icmp ugt i64 0, %add, !dbg !1005
  %sub = sub i64 %add, 0, !dbg !1005
  %13 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !1005
  br i1 %13, label %panic8, label %checkok14, !dbg !1005

checkok14:                                        ; preds = %if.then
  %size = sub i64 %add, 0, !dbg !1005
  %14 = insertvalue %"char[]" undef, ptr %11, 0, !dbg !1005
  %15 = insertvalue %"char[]" %14, i64 %size, 1, !dbg !1005
  %16 = load %"char[]", ptr %bytes, align 8, !dbg !1005
  %17 = extractvalue %"char[]" %16, 0, !dbg !1005
  %18 = extractvalue %"char[]" %16, 1, !dbg !1005
  %gt15 = icmp ugt i64 0, %18, !dbg !1005
  %19 = call i1 @llvm.expect.i1(i1 %gt15, i1 false), !dbg !1005
  br i1 %19, label %panic16, label %checkok26, !dbg !1005

checkok26:                                        ; preds = %checkok14
  %size27 = sub i64 %18, 0, !dbg !1005
  %20 = insertvalue %"char[]" undef, ptr %17, 0, !dbg !1005
  %21 = insertvalue %"char[]" %20, i64 %size27, 1, !dbg !1005
  %22 = extractvalue %"char[]" %21, 0, !dbg !1005
  %23 = extractvalue %"char[]" %15, 0, !dbg !1005
  %24 = extractvalue %"char[]" %15, 1, !dbg !1005
  %25 = extractvalue %"char[]" %21, 1, !dbg !1005
  %neq = icmp ne i64 %25, %24, !dbg !1005
  %26 = call i1 @llvm.expect.i1(i1 %neq, i1 false), !dbg !1005
  br i1 %26, label %panic28, label %checkok38, !dbg !1005

checkok38:                                        ; preds = %checkok26
  %27 = mul i64 %24, 1, !dbg !1005
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %22, ptr align 1 %23, i64 %27, i1 false), !dbg !1005
  br label %expr_block.exit, !dbg !1007

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr39, align 8
  %28 = load ptr, ptr %taddr39, align 8
  %29 = insertvalue %"char[]" undef, ptr %28, 0
  %30 = insertvalue %"char[]" %29, i64 4, 1
  %31 = load %"char[]", ptr %bytes, align 8, !dbg !1008
  %32 = extractvalue %"char[]" %31, 0, !dbg !1008
  %33 = extractvalue %"char[]" %31, 1, !dbg !1008
  %gt40 = icmp sgt i64 0, %33, !dbg !1008
  %34 = call i1 @llvm.expect.i1(i1 %gt40, i1 false), !dbg !1008
  br i1 %34, label %panic41, label %checkok51, !dbg !1008

checkok51:                                        ; preds = %if.exit
  %lt52 = icmp slt i64 %33, 4, !dbg !1008
  %35 = call i1 @llvm.expect.i1(i1 %lt52, i1 false), !dbg !1008
  br i1 %35, label %panic53, label %checkok63, !dbg !1008

checkok63:                                        ; preds = %checkok51
  %36 = insertvalue %"char[]" undef, ptr %32, 0, !dbg !1008
  %37 = insertvalue %"char[]" %36, i64 4, 1, !dbg !1008
  %38 = extractvalue %"char[]" %37, 0, !dbg !1008
  %39 = extractvalue %"char[]" %30, 0, !dbg !1008
  %40 = extractvalue %"char[]" %30, 1, !dbg !1008
  %41 = extractvalue %"char[]" %37, 1, !dbg !1008
  %neq64 = icmp ne i64 %41, %40, !dbg !1008
  %42 = call i1 @llvm.expect.i1(i1 %neq64, i1 false), !dbg !1008
  br i1 %42, label %panic65, label %checkok75, !dbg !1008

checkok75:                                        ; preds = %checkok63
  %43 = mul i64 %40, 1, !dbg !1008
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %38, ptr align 1 %39, i64 %43, i1 false), !dbg !1008
  %44 = load i64, ptr %len, align 8, !dbg !1009
  %sub76 = sub i64 %44, 4, !dbg !1009
  store i64 %sub76, ptr %len, align 8, !dbg !1009
  %45 = load %"char[]", ptr %bytes, align 8, !dbg !1010
  %46 = extractvalue %"char[]" %45, 0, !dbg !1010
  %47 = extractvalue %"char[]" %45, 1, !dbg !1010
  %gt77 = icmp ugt i64 4, %47, !dbg !1010
  %48 = call i1 @llvm.expect.i1(i1 %gt77, i1 false), !dbg !1010
  br i1 %48, label %panic78, label %checkok88, !dbg !1010

checkok88:                                        ; preds = %checkok75
  %size89 = sub i64 %47, 4, !dbg !1010
  %ptradd90 = getelementptr inbounds i8, ptr %46, i64 4, !dbg !1010
  %49 = insertvalue %"char[]" undef, ptr %ptradd90, 0, !dbg !1010
  %50 = insertvalue %"char[]" %49, i64 %size89, 1, !dbg !1010
  store %"char[]" %50, ptr %bytes, align 8, !dbg !1010
  br label %loop.cond, !dbg !1010

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.63, i64 30 }, ptr %string, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg91, ptr align 8 %string, i32 16, i1 false)
  store %"char[]" { ptr @.str.64, i64 12 }, ptr %indirectarg92, align 8
  store %"char[]" { ptr @.str.65, i64 23 }, ptr %indirectarg93, align 8
  store %"any[]" zeroinitializer, ptr %indirectarg94, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg91, ptr align 8 %indirectarg92, ptr align 8 %indirectarg93, i32 115, ptr align 8 %indirectarg94), !dbg !1011
  unreachable, !dbg !1011

expr_block.exit:                                  ; preds = %checkok38
  ret void, !dbg !1011

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.54, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg2, align 8
  %51 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %51(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 115) #5, !dbg !989
  unreachable, !dbg !989

panic8:                                           ; preds = %if.then
  store i64 %sub, ptr %taddr9, align 8
  %52 = insertvalue %any undef, ptr %taddr9, 0
  %53 = insertvalue %any %52, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.14, i64 43 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg12, align 8
  store %any %53, ptr %varargslots, align 16
  %54 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %54, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg13, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, i32 153, ptr align 8 %indirectarg13) #5, !dbg !1005
  unreachable, !dbg !1005

panic16:                                          ; preds = %checkok14
  store i64 %18, ptr %taddr17, align 8
  %55 = insertvalue %any undef, ptr %taddr17, 0
  %56 = insertvalue %any %55, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr18, align 8
  %57 = insertvalue %any undef, ptr %taddr18, 0
  %58 = insertvalue %any %57, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.16, i64 61 }, ptr %indirectarg19, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg20, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg21, align 8
  store %any %56, ptr %varargslots22, align 16
  %ptradd23 = getelementptr inbounds i8, ptr %varargslots22, i64 16
  store %any %58, ptr %ptradd23, align 16
  %59 = insertvalue %"any[]" undef, ptr %varargslots22, 0
  %"$$temp24" = insertvalue %"any[]" %59, i64 2, 1
  store %"any[]" %"$$temp24", ptr %indirectarg25, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg19, ptr align 8 %indirectarg20, ptr align 8 %indirectarg21, i32 153, ptr align 8 %indirectarg25) #5, !dbg !1005
  unreachable, !dbg !1005

panic28:                                          ; preds = %checkok26
  store i64 %25, ptr %taddr29, align 8
  %60 = insertvalue %any undef, ptr %taddr29, 0
  %61 = insertvalue %any %60, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %24, ptr %taddr30, align 8
  %62 = insertvalue %any undef, ptr %taddr30, 0
  %63 = insertvalue %any %62, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 38 }, ptr %indirectarg31, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg32, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg33, align 8
  store %any %61, ptr %varargslots34, align 16
  %ptradd35 = getelementptr inbounds i8, ptr %varargslots34, i64 16
  store %any %63, ptr %ptradd35, align 16
  %64 = insertvalue %"any[]" undef, ptr %varargslots34, 0
  %"$$temp36" = insertvalue %"any[]" %64, i64 2, 1
  store %"any[]" %"$$temp36", ptr %indirectarg37, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg31, ptr align 8 %indirectarg32, ptr align 8 %indirectarg33, i32 153, ptr align 8 %indirectarg37) #5, !dbg !1005
  unreachable, !dbg !1005

panic41:                                          ; preds = %if.exit
  store i64 %33, ptr %taddr42, align 8
  %65 = insertvalue %any undef, ptr %taddr42, 0
  %66 = insertvalue %any %65, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr43, align 8
  %67 = insertvalue %any undef, ptr %taddr43, 0
  %68 = insertvalue %any %67, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.16, i64 61 }, ptr %indirectarg44, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg45, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg46, align 8
  store %any %66, ptr %varargslots47, align 16
  %ptradd48 = getelementptr inbounds i8, ptr %varargslots47, i64 16
  store %any %68, ptr %ptradd48, align 16
  %69 = insertvalue %"any[]" undef, ptr %varargslots47, 0
  %"$$temp49" = insertvalue %"any[]" %69, i64 2, 1
  store %"any[]" %"$$temp49", ptr %indirectarg50, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg44, ptr align 8 %indirectarg45, ptr align 8 %indirectarg46, i32 156, ptr align 8 %indirectarg50) #5, !dbg !1008
  unreachable, !dbg !1008

panic53:                                          ; preds = %checkok51
  store i64 3, ptr %taddr54, align 8
  %70 = insertvalue %any undef, ptr %taddr54, 0
  %71 = insertvalue %any %70, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %33, ptr %taddr55, align 8
  %72 = insertvalue %any undef, ptr %taddr55, 0
  %73 = insertvalue %any %72, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.18, i64 60 }, ptr %indirectarg56, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg57, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg58, align 8
  store %any %71, ptr %varargslots59, align 16
  %ptradd60 = getelementptr inbounds i8, ptr %varargslots59, i64 16
  store %any %73, ptr %ptradd60, align 16
  %74 = insertvalue %"any[]" undef, ptr %varargslots59, 0
  %"$$temp61" = insertvalue %"any[]" %74, i64 2, 1
  store %"any[]" %"$$temp61", ptr %indirectarg62, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg56, ptr align 8 %indirectarg57, ptr align 8 %indirectarg58, i32 156, ptr align 8 %indirectarg62) #5, !dbg !1008
  unreachable, !dbg !1008

panic65:                                          ; preds = %checkok63
  store i64 %41, ptr %taddr66, align 8
  %75 = insertvalue %any undef, ptr %taddr66, 0
  %76 = insertvalue %any %75, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %40, ptr %taddr67, align 8
  %77 = insertvalue %any undef, ptr %taddr67, 0
  %78 = insertvalue %any %77, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 38 }, ptr %indirectarg68, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg69, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg70, align 8
  store %any %76, ptr %varargslots71, align 16
  %ptradd72 = getelementptr inbounds i8, ptr %varargslots71, i64 16
  store %any %78, ptr %ptradd72, align 16
  %79 = insertvalue %"any[]" undef, ptr %varargslots71, 0
  %"$$temp73" = insertvalue %"any[]" %79, i64 2, 1
  store %"any[]" %"$$temp73", ptr %indirectarg74, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg68, ptr align 8 %indirectarg69, ptr align 8 %indirectarg70, i32 156, ptr align 8 %indirectarg74) #5, !dbg !1008
  unreachable, !dbg !1008

panic78:                                          ; preds = %checkok75
  store i64 %47, ptr %taddr79, align 8
  %80 = insertvalue %any undef, ptr %taddr79, 0
  %81 = insertvalue %any %80, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 4, ptr %taddr80, align 8
  %82 = insertvalue %any undef, ptr %taddr80, 0
  %83 = insertvalue %any %82, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.16, i64 61 }, ptr %indirectarg81, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg82, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg83, align 8
  store %any %81, ptr %varargslots84, align 16
  %ptradd85 = getelementptr inbounds i8, ptr %varargslots84, i64 16
  store %any %83, ptr %ptradd85, align 16
  %84 = insertvalue %"any[]" undef, ptr %varargslots84, 0
  %"$$temp86" = insertvalue %"any[]" %84, i64 2, 1
  store %"any[]" %"$$temp86", ptr %indirectarg87, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg81, ptr align 8 %indirectarg82, ptr align 8 %indirectarg83, i32 158, ptr align 8 %indirectarg87) #5, !dbg !1010
  unreachable, !dbg !1010
}

; Function Attrs: nounwind ssp uwtable
define weak_odr <2 x i64> @std.math.random.Msws32Random.next_int128(ptr %0) #0 comdat !dbg !1014 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %taddr = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !1017
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1017
  br i1 %2, label %panic, label %checkok, !dbg !1017

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1018, !DIExpression(), !1017)
  %3 = load ptr, ptr %self, align 8, !dbg !1019
  %4 = call i64 @std.math.random.Msws32Random.next_long(ptr %3), !dbg !1021
  %zext = zext i64 %4 to i128, !dbg !1021
  %shl = shl i128 %zext, 64, !dbg !1021
  %5 = freeze i128 %shl, !dbg !1021
  %6 = load ptr, ptr %self, align 8, !dbg !1019
  %7 = call i64 @std.math.random.Msws32Random.next_long(ptr %6), !dbg !1021
  %zext3 = zext i64 %7 to i128, !dbg !1021
  %add = add i128 %5, %zext3, !dbg !1021
  store i128 %add, ptr %taddr, align 16
  %8 = load <2 x i64>, ptr %taddr, align 16
  ret <2 x i64> %8

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.54, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.21, i64 11 }, ptr %indirectarg2, align 8
  %9 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %9(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 116) #5, !dbg !1017
  unreachable, !dbg !1017
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.math.random.Msws32Random.next_long(ptr %0) #0 comdat !dbg !1022 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1025
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1025
  br i1 %2, label %panic, label %checkok, !dbg !1025

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1026, !DIExpression(), !1025)
  %3 = load ptr, ptr %self, align 8, !dbg !1027
  %4 = call i32 @std.math.random.Msws32Random.next_int(ptr %3), !dbg !1029
  %zext = zext i32 %4 to i64, !dbg !1029
  %shl = shl i64 %zext, 32, !dbg !1029
  %5 = freeze i64 %shl, !dbg !1029
  %6 = load ptr, ptr %self, align 8, !dbg !1027
  %7 = call i32 @std.math.random.Msws32Random.next_int(ptr %6), !dbg !1029
  %zext3 = zext i32 %7 to i64, !dbg !1029
  %add = add i64 %5, %zext3, !dbg !1029
  ret i64 %add, !dbg !1029

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.54, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.10, i64 9 }, ptr %indirectarg2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 117) #5, !dbg !1025
  unreachable, !dbg !1025
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i16 @std.math.random.Msws32Random.next_short(ptr %0) #0 comdat !dbg !1030 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1033
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1033
  br i1 %2, label %panic, label %checkok, !dbg !1033

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1034, !DIExpression(), !1033)
  %3 = load ptr, ptr %self, align 8, !dbg !1033
  %4 = call i32 @std.math.random.Msws32Random.next_int(ptr %3), !dbg !1033
  %trunc = trunc i32 %4 to i16, !dbg !1033
  ret i16 %trunc, !dbg !1033

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.54, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.23, i64 10 }, ptr %indirectarg2, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 118) #5, !dbg !1033
  unreachable, !dbg !1033
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i8 @std.math.random.Msws32Random.next_byte(ptr %0) #0 comdat !dbg !1035 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1038
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1038
  br i1 %2, label %panic, label %checkok, !dbg !1038

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1039, !DIExpression(), !1038)
  %3 = load ptr, ptr %self, align 8, !dbg !1038
  %4 = call i32 @std.math.random.Msws32Random.next_int(ptr %3), !dbg !1038
  %trunc = trunc i32 %4 to i8, !dbg !1038
  ret i8 %trunc, !dbg !1038

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.54, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.24, i64 9 }, ptr %indirectarg2, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 119) #5, !dbg !1038
  unreachable, !dbg !1038
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.math.random.Msws16Random.set_seed(ptr %0, ptr align 8 %1) #0 comdat !dbg !1040 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %input = alloca %"char[]", align 8
  %return_value = alloca [4 x i16], align 2
  %taddr = alloca ptr, align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %expr = alloca [4 x i16], align 2
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %taddr13 = alloca i64, align 8
  %taddr14 = alloca i64, align 8
  %indirectarg15 = alloca %"char[]", align 8
  %indirectarg16 = alloca %"char[]", align 8
  %indirectarg17 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg19 = alloca %"any[]", align 8
  %indirectarg23 = alloca %"char[]", align 8
  %indirectarg24 = alloca %"char[]", align 8
  %indirectarg25 = alloca %"char[]", align 8
  %taddr28 = alloca i64, align 8
  %taddr29 = alloca i64, align 8
  %indirectarg30 = alloca %"char[]", align 8
  %indirectarg31 = alloca %"char[]", align 8
  %indirectarg32 = alloca %"char[]", align 8
  %varargslots33 = alloca [2 x %any], align 16
  %indirectarg36 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !1050
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !1050
  br i1 %3, label %panic, label %checkok, !dbg !1050

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1051, !DIExpression(), !1052)
    #dbg_declare(ptr %1, !1053, !DIExpression(), !1052)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input, ptr align 8 %1, i32 16, i1 false)
    #dbg_declare(ptr %return_value, !1054, !DIExpression(), !1057)
  store i16 0, ptr %return_value, align 2, !dbg !1057
  %ptradd = getelementptr inbounds i8, ptr %return_value, i64 2, !dbg !1057
  store i16 0, ptr %ptradd, align 2, !dbg !1057
  %ptradd3 = getelementptr inbounds i8, ptr %return_value, i64 4, !dbg !1057
  store i16 0, ptr %ptradd3, align 2, !dbg !1057
  %ptradd4 = getelementptr inbounds i8, ptr %return_value, i64 6, !dbg !1057
  store i16 0, ptr %ptradd4, align 2, !dbg !1057
  store ptr %return_value, ptr %taddr, align 8
  %4 = load ptr, ptr %taddr, align 8
  %5 = insertvalue %"char[]" undef, ptr %4, 0
  %6 = insertvalue %"char[]" %5, i64 8, 1
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg5, ptr align 8 %input, i32 16, i1 false)
  store %"char[]" %6, ptr %indirectarg6, align 8
  call void @std.math.random.seeder(ptr align 8 %indirectarg5, ptr align 8 %indirectarg6), !dbg !1059
  call void @llvm.memcpy.p0.p0.i32(ptr align 2 %expr, ptr align 2 %return_value, i32 8, i1 false)
  %checknull = icmp eq ptr %expr, null, !dbg !1060
  %7 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1060
  br i1 %7, label %panic7, label %checkok11, !dbg !1060

checkok11:                                        ; preds = %checkok
  %8 = ptrtoint ptr %expr to i64, !dbg !1060
  %9 = urem i64 %8, 2, !dbg !1060
  %10 = icmp ne i64 %9, 0, !dbg !1060
  %11 = call i1 @llvm.expect.i1(i1 %10, i1 false), !dbg !1060
  br i1 %11, label %panic12, label %checkok20, !dbg !1060

checkok20:                                        ; preds = %checkok11
  %12 = load ptr, ptr %self, align 8, !dbg !1058
  %checknull21 = icmp eq ptr %12, null, !dbg !1058
  %13 = call i1 @llvm.expect.i1(i1 %checknull21, i1 false), !dbg !1058
  br i1 %13, label %panic22, label %checkok26, !dbg !1058

checkok26:                                        ; preds = %checkok20
  %14 = ptrtoint ptr %12 to i64, !dbg !1058
  %15 = urem i64 %14, 2, !dbg !1058
  %16 = icmp ne i64 %15, 0, !dbg !1058
  %17 = call i1 @llvm.expect.i1(i1 %16, i1 false), !dbg !1058
  br i1 %17, label %panic27, label %checkok37, !dbg !1058

checkok37:                                        ; preds = %checkok26
  call void @llvm.memcpy.p0.p0.i32(ptr align 2 %12, ptr align 2 %expr, i32 8, i1 false), !dbg !1058
  ret void, !dbg !1058

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.54, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func, i64 8 }, ptr %indirectarg2, align 8
  %18 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %18(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 129) #5, !dbg !1052
  unreachable, !dbg !1052

panic7:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.55, i64 54 }, ptr %indirectarg8, align 8
  store %"char[]" { ptr @.file.56, i64 10 }, ptr %indirectarg9, align 8
  store %"char[]" { ptr @.func, i64 8 }, ptr %indirectarg10, align 8
  %19 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %19(ptr align 8 %indirectarg8, ptr align 8 %indirectarg9, ptr align 8 %indirectarg10, i32 281) #5, !dbg !1060
  unreachable, !dbg !1060

panic12:                                          ; preds = %checkok11
  store i64 2, ptr %taddr13, align 8
  %20 = insertvalue %any undef, ptr %taddr13, 0
  %21 = insertvalue %any %20, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %9, ptr %taddr14, align 8
  %22 = insertvalue %any undef, ptr %taddr14, 0
  %23 = insertvalue %any %22, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg15, align 8
  store %"char[]" { ptr @.file.56, i64 10 }, ptr %indirectarg16, align 8
  store %"char[]" { ptr @.func, i64 8 }, ptr %indirectarg17, align 8
  store %any %21, ptr %varargslots, align 16
  %ptradd18 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %23, ptr %ptradd18, align 16
  %24 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %24, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg19, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg15, ptr align 8 %indirectarg16, ptr align 8 %indirectarg17, i32 281, ptr align 8 %indirectarg19) #5, !dbg !1060
  unreachable, !dbg !1060

panic22:                                          ; preds = %checkok20
  store %"char[]" { ptr @.panic_msg.8, i64 45 }, ptr %indirectarg23, align 8
  store %"char[]" { ptr @.file.54, i64 12 }, ptr %indirectarg24, align 8
  store %"char[]" { ptr @.func, i64 8 }, ptr %indirectarg25, align 8
  %25 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %25(ptr align 8 %indirectarg23, ptr align 8 %indirectarg24, ptr align 8 %indirectarg25, i32 131) #5, !dbg !1058
  unreachable, !dbg !1058

panic27:                                          ; preds = %checkok26
  store i64 2, ptr %taddr28, align 8
  %26 = insertvalue %any undef, ptr %taddr28, 0
  %27 = insertvalue %any %26, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %15, ptr %taddr29, align 8
  %28 = insertvalue %any undef, ptr %taddr29, 0
  %29 = insertvalue %any %28, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg30, align 8
  store %"char[]" { ptr @.file.54, i64 12 }, ptr %indirectarg31, align 8
  store %"char[]" { ptr @.func, i64 8 }, ptr %indirectarg32, align 8
  store %any %27, ptr %varargslots33, align 16
  %ptradd34 = getelementptr inbounds i8, ptr %varargslots33, i64 16
  store %any %29, ptr %ptradd34, align 16
  %30 = insertvalue %"any[]" undef, ptr %varargslots33, 0
  %"$$temp35" = insertvalue %"any[]" %30, i64 2, 1
  store %"any[]" %"$$temp35", ptr %indirectarg36, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg30, ptr align 8 %indirectarg31, ptr align 8 %indirectarg32, i32 131, ptr align 8 %indirectarg36) #5, !dbg !1058
  unreachable, !dbg !1058
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i16 @std.math.random.Msws16Random.next_short(ptr %0) #0 comdat !dbg !1062 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %s0 = alloca i16, align 2
  %self5 = alloca i16, align 2
  %shift = alloca i16, align 2
  %s1 = alloca i16, align 2
  %self20 = alloca i16, align 2
  %shift21 = alloca i16, align 2
  %1 = icmp eq ptr %0, null, !dbg !1065
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1065
  br i1 %2, label %panic, label %checkok, !dbg !1065

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1066, !DIExpression(), !1067)
    #dbg_declare(ptr %s0, !1068, !DIExpression(), !1069)
  %3 = load ptr, ptr %self, align 8, !dbg !1069
  %4 = load i16, ptr %3, align 2, !dbg !1069
  store i16 %4, ptr %s0, align 2, !dbg !1069
  %5 = load ptr, ptr %self, align 8, !dbg !1070
  %6 = load i16, ptr %5, align 2, !dbg !1070
  %zext = zext i16 %6 to i32, !dbg !1070
  %7 = load ptr, ptr %self, align 8, !dbg !1070
  %8 = load i16, ptr %7, align 2, !dbg !1070
  %zext3 = zext i16 %8 to i32, !dbg !1070
  %mul = mul i32 %zext, %zext3, !dbg !1070
  %9 = load ptr, ptr %self, align 8, !dbg !1070
  %ptradd = getelementptr inbounds i8, ptr %9, i64 4, !dbg !1070
  %10 = load i16, ptr %ptradd, align 2, !dbg !1070
  %zext4 = zext i16 %10 to i32, !dbg !1070
  %add = add i32 %mul, %zext4, !dbg !1070
  %trunc = trunc i32 %add to i16, !dbg !1070
  %11 = load ptr, ptr %self, align 8, !dbg !1070
  store i16 %trunc, ptr %11, align 2, !dbg !1070
  %12 = load ptr, ptr %self, align 8, !dbg !1071
  %13 = load i16, ptr %12, align 2
  store i16 %13, ptr %self5, align 2
  store i16 8, ptr %shift, align 2
  %14 = load i16, ptr %self5, align 2, !dbg !1072
  %15 = load i16, ptr %self5, align 2, !dbg !1072
  %16 = load i16, ptr %shift, align 2, !dbg !1072
  %17 = call i16 @llvm.fshr.i16(i16 %14, i16 %15, i16 %16), !dbg !1072
  %18 = load ptr, ptr %self, align 8, !dbg !1071
  store i16 %17, ptr %18, align 2, !dbg !1071
  %19 = load ptr, ptr %self, align 8, !dbg !1074
  %ptradd6 = getelementptr inbounds i8, ptr %19, i64 4, !dbg !1074
  %20 = load i16, ptr %ptradd6, align 2, !dbg !1074
  %add7 = add i16 %20, -25033, !dbg !1074
  store i16 %add7, ptr %ptradd6, align 2, !dbg !1074
  %21 = load ptr, ptr %self, align 8, !dbg !1075
  %ptradd8 = getelementptr inbounds i8, ptr %21, i64 2, !dbg !1075
  %22 = load i16, ptr %ptradd8, align 2, !dbg !1075
  %zext9 = zext i16 %22 to i32, !dbg !1075
  %23 = load ptr, ptr %self, align 8, !dbg !1075
  %ptradd10 = getelementptr inbounds i8, ptr %23, i64 2, !dbg !1075
  %24 = load i16, ptr %ptradd10, align 2, !dbg !1075
  %zext11 = zext i16 %24 to i32, !dbg !1075
  %mul12 = mul i32 %zext9, %zext11, !dbg !1075
  %25 = load ptr, ptr %self, align 8, !dbg !1075
  %ptradd13 = getelementptr inbounds i8, ptr %25, i64 6, !dbg !1075
  %26 = load i16, ptr %ptradd13, align 2, !dbg !1075
  %zext14 = zext i16 %26 to i32, !dbg !1075
  %add15 = add i32 %mul12, %zext14, !dbg !1075
  %trunc16 = trunc i32 %add15 to i16, !dbg !1075
  %27 = load ptr, ptr %self, align 8, !dbg !1075
  %ptradd17 = getelementptr inbounds i8, ptr %27, i64 2, !dbg !1075
  store i16 %trunc16, ptr %ptradd17, align 2, !dbg !1075
    #dbg_declare(ptr %s1, !1076, !DIExpression(), !1077)
  %28 = load ptr, ptr %self, align 8, !dbg !1077
  %ptradd18 = getelementptr inbounds i8, ptr %28, i64 2, !dbg !1077
  %29 = load i16, ptr %ptradd18, align 2, !dbg !1077
  store i16 %29, ptr %s1, align 2, !dbg !1077
  %30 = load ptr, ptr %self, align 8, !dbg !1078
  %ptradd19 = getelementptr inbounds i8, ptr %30, i64 2, !dbg !1078
  %31 = load i16, ptr %ptradd19, align 2
  store i16 %31, ptr %self20, align 2
  store i16 8, ptr %shift21, align 2
  %32 = load i16, ptr %self20, align 2, !dbg !1079
  %33 = load i16, ptr %self20, align 2, !dbg !1079
  %34 = load i16, ptr %shift21, align 2, !dbg !1079
  %35 = call i16 @llvm.fshr.i16(i16 %32, i16 %33, i16 %34), !dbg !1079
  %36 = load ptr, ptr %self, align 8, !dbg !1078
  %ptradd22 = getelementptr inbounds i8, ptr %36, i64 2, !dbg !1078
  store i16 %35, ptr %ptradd22, align 2, !dbg !1078
  %37 = load ptr, ptr %self, align 8, !dbg !1081
  %ptradd23 = getelementptr inbounds i8, ptr %37, i64 6, !dbg !1081
  %38 = load i16, ptr %ptradd23, align 2, !dbg !1081
  %sub = sub i16 %38, -25033, !dbg !1081
  store i16 %sub, ptr %ptradd23, align 2, !dbg !1081
  %39 = load i16, ptr %s0, align 2, !dbg !1082
  %zext24 = zext i16 %39 to i32, !dbg !1082
  %40 = load i16, ptr %s1, align 2, !dbg !1082
  %zext25 = zext i16 %40 to i32, !dbg !1082
  %add26 = add i32 %zext24, %zext25, !dbg !1082
  %trunc27 = trunc i32 %add26 to i16, !dbg !1082
  ret i16 %trunc27, !dbg !1082

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.54, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.23, i64 10 }, ptr %indirectarg2, align 8
  %41 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %41(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 135) #5, !dbg !1067
  unreachable, !dbg !1067
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.math.random.Msws16Random.next_bytes(ptr %0, ptr align 8 %1) #0 comdat !dbg !1083 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %bytes = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i16, align 2
  %taddr = alloca ptr, align 8
  %taddr9 = alloca i64, align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg13 = alloca %"any[]", align 8
  %taddr17 = alloca i64, align 8
  %taddr18 = alloca i64, align 8
  %indirectarg19 = alloca %"char[]", align 8
  %indirectarg20 = alloca %"char[]", align 8
  %indirectarg21 = alloca %"char[]", align 8
  %varargslots22 = alloca [2 x %any], align 16
  %indirectarg25 = alloca %"any[]", align 8
  %taddr29 = alloca i64, align 8
  %taddr30 = alloca i64, align 8
  %indirectarg31 = alloca %"char[]", align 8
  %indirectarg32 = alloca %"char[]", align 8
  %indirectarg33 = alloca %"char[]", align 8
  %varargslots34 = alloca [2 x %any], align 16
  %indirectarg37 = alloca %"any[]", align 8
  %taddr39 = alloca ptr, align 8
  %taddr42 = alloca i64, align 8
  %taddr43 = alloca i64, align 8
  %indirectarg44 = alloca %"char[]", align 8
  %indirectarg45 = alloca %"char[]", align 8
  %indirectarg46 = alloca %"char[]", align 8
  %varargslots47 = alloca [2 x %any], align 16
  %indirectarg50 = alloca %"any[]", align 8
  %taddr54 = alloca i64, align 8
  %taddr55 = alloca i64, align 8
  %indirectarg56 = alloca %"char[]", align 8
  %indirectarg57 = alloca %"char[]", align 8
  %indirectarg58 = alloca %"char[]", align 8
  %varargslots59 = alloca [2 x %any], align 16
  %indirectarg62 = alloca %"any[]", align 8
  %taddr66 = alloca i64, align 8
  %taddr67 = alloca i64, align 8
  %indirectarg68 = alloca %"char[]", align 8
  %indirectarg69 = alloca %"char[]", align 8
  %indirectarg70 = alloca %"char[]", align 8
  %varargslots71 = alloca [2 x %any], align 16
  %indirectarg74 = alloca %"any[]", align 8
  %taddr79 = alloca i64, align 8
  %taddr80 = alloca i64, align 8
  %indirectarg81 = alloca %"char[]", align 8
  %indirectarg82 = alloca %"char[]", align 8
  %indirectarg83 = alloca %"char[]", align 8
  %varargslots84 = alloca [2 x %any], align 16
  %indirectarg87 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg91 = alloca %"char[]", align 8
  %indirectarg92 = alloca %"char[]", align 8
  %indirectarg93 = alloca %"char[]", align 8
  %indirectarg94 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !1084
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !1084
  br i1 %3, label %panic, label %checkok, !dbg !1084

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1085, !DIExpression(), !1084)
    #dbg_declare(ptr %1, !1086, !DIExpression(), !1084)
  %ptradd = getelementptr inbounds i8, ptr %1, i64 8, !dbg !1087
  %4 = load i64, ptr %ptradd, align 8, !dbg !1087
  %lt = icmp ult i64 0, %4, !dbg !1087
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !1087

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.13, i64 34 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.file.54, i64 12 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg5, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, i32 151) #5, !dbg !1087
  unreachable, !dbg !1087

assert_ok:                                        ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes, ptr align 8 %1, i32 16, i1 false)
    #dbg_declare(ptr %len, !1089, !DIExpression(), !1091)
  %ptradd6 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !1091
  %6 = load i64, ptr %ptradd6, align 8, !dbg !1091
  store i64 %6, ptr %len, align 8, !dbg !1091
  br label %loop.cond, !dbg !1092

loop.cond:                                        ; preds = %checkok88, %assert_ok
  %7 = load i64, ptr %len, align 8, !dbg !1093
  %lt7 = icmp ult i64 0, %7, !dbg !1093
  br i1 %lt7, label %loop.body, label %loop.exit, !dbg !1093

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %value, !1095, !DIExpression(), !1097)
  %8 = load ptr, ptr %self, align 8, !dbg !1098
  %9 = call i16 @std.math.random.Msws16Random.next_short(ptr %8), !dbg !1097
  store i16 %9, ptr %value, align 2, !dbg !1097
  %10 = load i64, ptr %len, align 8, !dbg !1099
  %le = icmp ule i64 %10, 2, !dbg !1099
  br i1 %le, label %if.then, label %if.exit, !dbg !1099

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %11 = load ptr, ptr %taddr, align 8
  %12 = load i64, ptr %len, align 8, !dbg !1100
  %add = add i64 0, %12, !dbg !1100
  %gt = icmp ugt i64 0, %add, !dbg !1100
  %sub = sub i64 %add, 0, !dbg !1100
  %13 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !1100
  br i1 %13, label %panic8, label %checkok14, !dbg !1100

checkok14:                                        ; preds = %if.then
  %size = sub i64 %add, 0, !dbg !1100
  %14 = insertvalue %"char[]" undef, ptr %11, 0, !dbg !1100
  %15 = insertvalue %"char[]" %14, i64 %size, 1, !dbg !1100
  %16 = load %"char[]", ptr %bytes, align 8, !dbg !1100
  %17 = extractvalue %"char[]" %16, 0, !dbg !1100
  %18 = extractvalue %"char[]" %16, 1, !dbg !1100
  %gt15 = icmp ugt i64 0, %18, !dbg !1100
  %19 = call i1 @llvm.expect.i1(i1 %gt15, i1 false), !dbg !1100
  br i1 %19, label %panic16, label %checkok26, !dbg !1100

checkok26:                                        ; preds = %checkok14
  %size27 = sub i64 %18, 0, !dbg !1100
  %20 = insertvalue %"char[]" undef, ptr %17, 0, !dbg !1100
  %21 = insertvalue %"char[]" %20, i64 %size27, 1, !dbg !1100
  %22 = extractvalue %"char[]" %21, 0, !dbg !1100
  %23 = extractvalue %"char[]" %15, 0, !dbg !1100
  %24 = extractvalue %"char[]" %15, 1, !dbg !1100
  %25 = extractvalue %"char[]" %21, 1, !dbg !1100
  %neq = icmp ne i64 %25, %24, !dbg !1100
  %26 = call i1 @llvm.expect.i1(i1 %neq, i1 false), !dbg !1100
  br i1 %26, label %panic28, label %checkok38, !dbg !1100

checkok38:                                        ; preds = %checkok26
  %27 = mul i64 %24, 1, !dbg !1100
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %22, ptr align 1 %23, i64 %27, i1 false), !dbg !1100
  br label %expr_block.exit, !dbg !1102

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr39, align 8
  %28 = load ptr, ptr %taddr39, align 8
  %29 = insertvalue %"char[]" undef, ptr %28, 0
  %30 = insertvalue %"char[]" %29, i64 2, 1
  %31 = load %"char[]", ptr %bytes, align 8, !dbg !1103
  %32 = extractvalue %"char[]" %31, 0, !dbg !1103
  %33 = extractvalue %"char[]" %31, 1, !dbg !1103
  %gt40 = icmp sgt i64 0, %33, !dbg !1103
  %34 = call i1 @llvm.expect.i1(i1 %gt40, i1 false), !dbg !1103
  br i1 %34, label %panic41, label %checkok51, !dbg !1103

checkok51:                                        ; preds = %if.exit
  %lt52 = icmp slt i64 %33, 2, !dbg !1103
  %35 = call i1 @llvm.expect.i1(i1 %lt52, i1 false), !dbg !1103
  br i1 %35, label %panic53, label %checkok63, !dbg !1103

checkok63:                                        ; preds = %checkok51
  %36 = insertvalue %"char[]" undef, ptr %32, 0, !dbg !1103
  %37 = insertvalue %"char[]" %36, i64 2, 1, !dbg !1103
  %38 = extractvalue %"char[]" %37, 0, !dbg !1103
  %39 = extractvalue %"char[]" %30, 0, !dbg !1103
  %40 = extractvalue %"char[]" %30, 1, !dbg !1103
  %41 = extractvalue %"char[]" %37, 1, !dbg !1103
  %neq64 = icmp ne i64 %41, %40, !dbg !1103
  %42 = call i1 @llvm.expect.i1(i1 %neq64, i1 false), !dbg !1103
  br i1 %42, label %panic65, label %checkok75, !dbg !1103

checkok75:                                        ; preds = %checkok63
  %43 = mul i64 %40, 1, !dbg !1103
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %38, ptr align 1 %39, i64 %43, i1 false), !dbg !1103
  %44 = load i64, ptr %len, align 8, !dbg !1104
  %sub76 = sub i64 %44, 2, !dbg !1104
  store i64 %sub76, ptr %len, align 8, !dbg !1104
  %45 = load %"char[]", ptr %bytes, align 8, !dbg !1105
  %46 = extractvalue %"char[]" %45, 0, !dbg !1105
  %47 = extractvalue %"char[]" %45, 1, !dbg !1105
  %gt77 = icmp ugt i64 2, %47, !dbg !1105
  %48 = call i1 @llvm.expect.i1(i1 %gt77, i1 false), !dbg !1105
  br i1 %48, label %panic78, label %checkok88, !dbg !1105

checkok88:                                        ; preds = %checkok75
  %size89 = sub i64 %47, 2, !dbg !1105
  %ptradd90 = getelementptr inbounds i8, ptr %46, i64 2, !dbg !1105
  %49 = insertvalue %"char[]" undef, ptr %ptradd90, 0, !dbg !1105
  %50 = insertvalue %"char[]" %49, i64 %size89, 1, !dbg !1105
  store %"char[]" %50, ptr %bytes, align 8, !dbg !1105
  br label %loop.cond, !dbg !1105

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.66, i64 30 }, ptr %string, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg91, ptr align 8 %string, i32 16, i1 false)
  store %"char[]" { ptr @.str.67, i64 12 }, ptr %indirectarg92, align 8
  store %"char[]" { ptr @.str.68, i64 23 }, ptr %indirectarg93, align 8
  store %"any[]" zeroinitializer, ptr %indirectarg94, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg91, ptr align 8 %indirectarg92, ptr align 8 %indirectarg93, i32 153, ptr align 8 %indirectarg94), !dbg !1106
  unreachable, !dbg !1106

expr_block.exit:                                  ; preds = %checkok38
  ret void, !dbg !1106

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.54, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg2, align 8
  %51 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %51(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 153) #5, !dbg !1084
  unreachable, !dbg !1084

panic8:                                           ; preds = %if.then
  store i64 %sub, ptr %taddr9, align 8
  %52 = insertvalue %any undef, ptr %taddr9, 0
  %53 = insertvalue %any %52, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.14, i64 43 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg12, align 8
  store %any %53, ptr %varargslots, align 16
  %54 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %54, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg13, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, i32 153, ptr align 8 %indirectarg13) #5, !dbg !1100
  unreachable, !dbg !1100

panic16:                                          ; preds = %checkok14
  store i64 %18, ptr %taddr17, align 8
  %55 = insertvalue %any undef, ptr %taddr17, 0
  %56 = insertvalue %any %55, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr18, align 8
  %57 = insertvalue %any undef, ptr %taddr18, 0
  %58 = insertvalue %any %57, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.16, i64 61 }, ptr %indirectarg19, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg20, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg21, align 8
  store %any %56, ptr %varargslots22, align 16
  %ptradd23 = getelementptr inbounds i8, ptr %varargslots22, i64 16
  store %any %58, ptr %ptradd23, align 16
  %59 = insertvalue %"any[]" undef, ptr %varargslots22, 0
  %"$$temp24" = insertvalue %"any[]" %59, i64 2, 1
  store %"any[]" %"$$temp24", ptr %indirectarg25, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg19, ptr align 8 %indirectarg20, ptr align 8 %indirectarg21, i32 153, ptr align 8 %indirectarg25) #5, !dbg !1100
  unreachable, !dbg !1100

panic28:                                          ; preds = %checkok26
  store i64 %25, ptr %taddr29, align 8
  %60 = insertvalue %any undef, ptr %taddr29, 0
  %61 = insertvalue %any %60, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %24, ptr %taddr30, align 8
  %62 = insertvalue %any undef, ptr %taddr30, 0
  %63 = insertvalue %any %62, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 38 }, ptr %indirectarg31, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg32, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg33, align 8
  store %any %61, ptr %varargslots34, align 16
  %ptradd35 = getelementptr inbounds i8, ptr %varargslots34, i64 16
  store %any %63, ptr %ptradd35, align 16
  %64 = insertvalue %"any[]" undef, ptr %varargslots34, 0
  %"$$temp36" = insertvalue %"any[]" %64, i64 2, 1
  store %"any[]" %"$$temp36", ptr %indirectarg37, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg31, ptr align 8 %indirectarg32, ptr align 8 %indirectarg33, i32 153, ptr align 8 %indirectarg37) #5, !dbg !1100
  unreachable, !dbg !1100

panic41:                                          ; preds = %if.exit
  store i64 %33, ptr %taddr42, align 8
  %65 = insertvalue %any undef, ptr %taddr42, 0
  %66 = insertvalue %any %65, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr43, align 8
  %67 = insertvalue %any undef, ptr %taddr43, 0
  %68 = insertvalue %any %67, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.16, i64 61 }, ptr %indirectarg44, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg45, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg46, align 8
  store %any %66, ptr %varargslots47, align 16
  %ptradd48 = getelementptr inbounds i8, ptr %varargslots47, i64 16
  store %any %68, ptr %ptradd48, align 16
  %69 = insertvalue %"any[]" undef, ptr %varargslots47, 0
  %"$$temp49" = insertvalue %"any[]" %69, i64 2, 1
  store %"any[]" %"$$temp49", ptr %indirectarg50, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg44, ptr align 8 %indirectarg45, ptr align 8 %indirectarg46, i32 156, ptr align 8 %indirectarg50) #5, !dbg !1103
  unreachable, !dbg !1103

panic53:                                          ; preds = %checkok51
  store i64 1, ptr %taddr54, align 8
  %70 = insertvalue %any undef, ptr %taddr54, 0
  %71 = insertvalue %any %70, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %33, ptr %taddr55, align 8
  %72 = insertvalue %any undef, ptr %taddr55, 0
  %73 = insertvalue %any %72, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.18, i64 60 }, ptr %indirectarg56, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg57, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg58, align 8
  store %any %71, ptr %varargslots59, align 16
  %ptradd60 = getelementptr inbounds i8, ptr %varargslots59, i64 16
  store %any %73, ptr %ptradd60, align 16
  %74 = insertvalue %"any[]" undef, ptr %varargslots59, 0
  %"$$temp61" = insertvalue %"any[]" %74, i64 2, 1
  store %"any[]" %"$$temp61", ptr %indirectarg62, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg56, ptr align 8 %indirectarg57, ptr align 8 %indirectarg58, i32 156, ptr align 8 %indirectarg62) #5, !dbg !1103
  unreachable, !dbg !1103

panic65:                                          ; preds = %checkok63
  store i64 %41, ptr %taddr66, align 8
  %75 = insertvalue %any undef, ptr %taddr66, 0
  %76 = insertvalue %any %75, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %40, ptr %taddr67, align 8
  %77 = insertvalue %any undef, ptr %taddr67, 0
  %78 = insertvalue %any %77, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 38 }, ptr %indirectarg68, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg69, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg70, align 8
  store %any %76, ptr %varargslots71, align 16
  %ptradd72 = getelementptr inbounds i8, ptr %varargslots71, i64 16
  store %any %78, ptr %ptradd72, align 16
  %79 = insertvalue %"any[]" undef, ptr %varargslots71, 0
  %"$$temp73" = insertvalue %"any[]" %79, i64 2, 1
  store %"any[]" %"$$temp73", ptr %indirectarg74, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg68, ptr align 8 %indirectarg69, ptr align 8 %indirectarg70, i32 156, ptr align 8 %indirectarg74) #5, !dbg !1103
  unreachable, !dbg !1103

panic78:                                          ; preds = %checkok75
  store i64 %47, ptr %taddr79, align 8
  %80 = insertvalue %any undef, ptr %taddr79, 0
  %81 = insertvalue %any %80, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 2, ptr %taddr80, align 8
  %82 = insertvalue %any undef, ptr %taddr80, 0
  %83 = insertvalue %any %82, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.16, i64 61 }, ptr %indirectarg81, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg82, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg83, align 8
  store %any %81, ptr %varargslots84, align 16
  %ptradd85 = getelementptr inbounds i8, ptr %varargslots84, i64 16
  store %any %83, ptr %ptradd85, align 16
  %84 = insertvalue %"any[]" undef, ptr %varargslots84, 0
  %"$$temp86" = insertvalue %"any[]" %84, i64 2, 1
  store %"any[]" %"$$temp86", ptr %indirectarg87, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg81, ptr align 8 %indirectarg82, ptr align 8 %indirectarg83, i32 158, ptr align 8 %indirectarg87) #5, !dbg !1105
  unreachable, !dbg !1105
}

; Function Attrs: nounwind ssp uwtable
define weak_odr <2 x i64> @std.math.random.Msws16Random.next_int128(ptr %0) #0 comdat !dbg !1109 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %taddr = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !1112
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1112
  br i1 %2, label %panic, label %checkok, !dbg !1112

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1113, !DIExpression(), !1112)
  %3 = load ptr, ptr %self, align 8, !dbg !1114
  %4 = call i64 @std.math.random.Msws16Random.next_long(ptr %3), !dbg !1116
  %zext = zext i64 %4 to i128, !dbg !1116
  %shl = shl i128 %zext, 64, !dbg !1116
  %5 = freeze i128 %shl, !dbg !1116
  %6 = load ptr, ptr %self, align 8, !dbg !1114
  %7 = call i64 @std.math.random.Msws16Random.next_long(ptr %6), !dbg !1116
  %zext3 = zext i64 %7 to i128, !dbg !1116
  %add = add i128 %5, %zext3, !dbg !1116
  store i128 %add, ptr %taddr, align 16
  %8 = load <2 x i64>, ptr %taddr, align 16
  ret <2 x i64> %8

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.54, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.21, i64 11 }, ptr %indirectarg2, align 8
  %9 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %9(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 154) #5, !dbg !1112
  unreachable, !dbg !1112
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.math.random.Msws16Random.next_long(ptr %0) #0 comdat !dbg !1117 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1120
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1120
  br i1 %2, label %panic, label %checkok, !dbg !1120

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1121, !DIExpression(), !1120)
  %3 = load ptr, ptr %self, align 8, !dbg !1122
  %4 = call i32 @std.math.random.Msws16Random.next_int(ptr %3), !dbg !1124
  %zext = zext i32 %4 to i64, !dbg !1124
  %shl = shl i64 %zext, 32, !dbg !1124
  %5 = freeze i64 %shl, !dbg !1124
  %6 = load ptr, ptr %self, align 8, !dbg !1122
  %7 = call i32 @std.math.random.Msws16Random.next_int(ptr %6), !dbg !1124
  %zext3 = zext i32 %7 to i64, !dbg !1124
  %add = add i64 %5, %zext3, !dbg !1124
  ret i64 %add, !dbg !1124

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.54, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.10, i64 9 }, ptr %indirectarg2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 155) #5, !dbg !1120
  unreachable, !dbg !1120
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i32 @std.math.random.Msws16Random.next_int(ptr %0) #0 comdat !dbg !1125 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1128
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1128
  br i1 %2, label %panic, label %checkok, !dbg !1128

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1129, !DIExpression(), !1128)
  %3 = load ptr, ptr %self, align 8, !dbg !1130
  %4 = call i16 @std.math.random.Msws16Random.next_short(ptr %3), !dbg !1132
  %zext = zext i16 %4 to i32, !dbg !1132
  %shl = shl i32 %zext, 16, !dbg !1132
  %5 = freeze i32 %shl, !dbg !1132
  %6 = load ptr, ptr %self, align 8, !dbg !1130
  %7 = call i16 @std.math.random.Msws16Random.next_short(ptr %6), !dbg !1132
  %zext3 = zext i16 %7 to i32, !dbg !1132
  %add = add i32 %5, %zext3, !dbg !1132
  ret i32 %add, !dbg !1132

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.54, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.22, i64 8 }, ptr %indirectarg2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 156) #5, !dbg !1128
  unreachable, !dbg !1128
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i8 @std.math.random.Msws16Random.next_byte(ptr %0) #0 comdat !dbg !1133 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1136
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1136
  br i1 %2, label %panic, label %checkok, !dbg !1136

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1137, !DIExpression(), !1136)
  %3 = load ptr, ptr %self, align 8, !dbg !1136
  %4 = call i16 @std.math.random.Msws16Random.next_short(ptr %3), !dbg !1136
  %trunc = trunc i16 %4 to i8, !dbg !1136
  ret i8 %trunc, !dbg !1136

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.54, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.24, i64 9 }, ptr %indirectarg2, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 157) #5, !dbg !1136
  unreachable, !dbg !1136
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.math.random.Msws8Random.set_seed(ptr %0, ptr align 8 %1) #0 comdat !dbg !1138 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %input = alloca %"char[]", align 8
  %return_value = alloca [4 x i8], align 1
  %taddr = alloca ptr, align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %expr = alloca [4 x i8], align 1
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg14 = alloca %"char[]", align 8
  %indirectarg15 = alloca %"char[]", align 8
  %indirectarg16 = alloca %"char[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !1148
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !1148
  br i1 %3, label %panic, label %checkok, !dbg !1148

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1149, !DIExpression(), !1150)
    #dbg_declare(ptr %1, !1151, !DIExpression(), !1150)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input, ptr align 8 %1, i32 16, i1 false)
    #dbg_declare(ptr %return_value, !1152, !DIExpression(), !1155)
  store i8 0, ptr %return_value, align 1, !dbg !1155
  %ptradd = getelementptr inbounds i8, ptr %return_value, i64 1, !dbg !1155
  store i8 0, ptr %ptradd, align 1, !dbg !1155
  %ptradd3 = getelementptr inbounds i8, ptr %return_value, i64 2, !dbg !1155
  store i8 0, ptr %ptradd3, align 1, !dbg !1155
  %ptradd4 = getelementptr inbounds i8, ptr %return_value, i64 3, !dbg !1155
  store i8 0, ptr %ptradd4, align 1, !dbg !1155
  store ptr %return_value, ptr %taddr, align 8
  %4 = load ptr, ptr %taddr, align 8
  %5 = insertvalue %"char[]" undef, ptr %4, 0
  %6 = insertvalue %"char[]" %5, i64 4, 1
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg5, ptr align 8 %input, i32 16, i1 false)
  store %"char[]" %6, ptr %indirectarg6, align 8
  call void @std.math.random.seeder(ptr align 8 %indirectarg5, ptr align 8 %indirectarg6), !dbg !1157
  call void @llvm.memcpy.p0.p0.i32(ptr align 1 %expr, ptr align 1 %return_value, i32 4, i1 false)
  %checknull = icmp eq ptr %expr, null, !dbg !1158
  %7 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1158
  br i1 %7, label %panic7, label %checkok11, !dbg !1158

checkok11:                                        ; preds = %checkok
  %8 = load ptr, ptr %self, align 8, !dbg !1156
  %checknull12 = icmp eq ptr %8, null, !dbg !1156
  %9 = call i1 @llvm.expect.i1(i1 %checknull12, i1 false), !dbg !1156
  br i1 %9, label %panic13, label %checkok17, !dbg !1156

checkok17:                                        ; preds = %checkok11
  call void @llvm.memcpy.p0.p0.i32(ptr align 1 %8, ptr align 1 %expr, i32 4, i1 false), !dbg !1156
  ret void, !dbg !1156

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.54, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func, i64 8 }, ptr %indirectarg2, align 8
  %10 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %10(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 166) #5, !dbg !1150
  unreachable, !dbg !1150

panic7:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.55, i64 54 }, ptr %indirectarg8, align 8
  store %"char[]" { ptr @.file.56, i64 10 }, ptr %indirectarg9, align 8
  store %"char[]" { ptr @.func, i64 8 }, ptr %indirectarg10, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11(ptr align 8 %indirectarg8, ptr align 8 %indirectarg9, ptr align 8 %indirectarg10, i32 281) #5, !dbg !1158
  unreachable, !dbg !1158

panic13:                                          ; preds = %checkok11
  store %"char[]" { ptr @.panic_msg.8, i64 45 }, ptr %indirectarg14, align 8
  store %"char[]" { ptr @.file.54, i64 12 }, ptr %indirectarg15, align 8
  store %"char[]" { ptr @.func, i64 8 }, ptr %indirectarg16, align 8
  %12 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %12(ptr align 8 %indirectarg14, ptr align 8 %indirectarg15, ptr align 8 %indirectarg16, i32 168) #5, !dbg !1156
  unreachable, !dbg !1156
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i8 @std.math.random.Msws8Random.next_byte(ptr %0) #0 comdat !dbg !1160 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %s0 = alloca i8, align 1
  %self5 = alloca i8, align 1
  %shift = alloca i8, align 1
  %s1 = alloca i8, align 1
  %self20 = alloca i8, align 1
  %shift21 = alloca i8, align 1
  %1 = icmp eq ptr %0, null, !dbg !1163
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1163
  br i1 %2, label %panic, label %checkok, !dbg !1163

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1164, !DIExpression(), !1165)
    #dbg_declare(ptr %s0, !1166, !DIExpression(), !1167)
  %3 = load ptr, ptr %self, align 8, !dbg !1167
  %4 = load i8, ptr %3, align 1, !dbg !1167
  store i8 %4, ptr %s0, align 1, !dbg !1167
  %5 = load ptr, ptr %self, align 8, !dbg !1168
  %6 = load i8, ptr %5, align 1, !dbg !1168
  %zext = zext i8 %6 to i32, !dbg !1168
  %7 = load ptr, ptr %self, align 8, !dbg !1168
  %8 = load i8, ptr %7, align 1, !dbg !1168
  %zext3 = zext i8 %8 to i32, !dbg !1168
  %mul = mul i32 %zext, %zext3, !dbg !1168
  %9 = load ptr, ptr %self, align 8, !dbg !1168
  %ptradd = getelementptr inbounds i8, ptr %9, i64 2, !dbg !1168
  %10 = load i8, ptr %ptradd, align 1, !dbg !1168
  %zext4 = zext i8 %10 to i32, !dbg !1168
  %add = add i32 %mul, %zext4, !dbg !1168
  %trunc = trunc i32 %add to i8, !dbg !1168
  %11 = load ptr, ptr %self, align 8, !dbg !1168
  store i8 %trunc, ptr %11, align 1, !dbg !1168
  %12 = load ptr, ptr %self, align 8, !dbg !1169
  %13 = load i8, ptr %12, align 1
  store i8 %13, ptr %self5, align 1
  store i8 4, ptr %shift, align 1
  %14 = load i8, ptr %self5, align 1, !dbg !1170
  %15 = load i8, ptr %self5, align 1, !dbg !1170
  %16 = load i8, ptr %shift, align 1, !dbg !1170
  %17 = call i8 @llvm.fshr.i8(i8 %14, i8 %15, i8 %16), !dbg !1170
  %18 = load ptr, ptr %self, align 8, !dbg !1169
  store i8 %17, ptr %18, align 1, !dbg !1169
  %19 = load ptr, ptr %self, align 8, !dbg !1172
  %ptradd6 = getelementptr inbounds i8, ptr %19, i64 2, !dbg !1172
  %20 = load i8, ptr %ptradd6, align 1, !dbg !1172
  %add7 = add i8 %20, -97, !dbg !1172
  store i8 %add7, ptr %ptradd6, align 1, !dbg !1172
  %21 = load ptr, ptr %self, align 8, !dbg !1173
  %ptradd8 = getelementptr inbounds i8, ptr %21, i64 1, !dbg !1173
  %22 = load i8, ptr %ptradd8, align 1, !dbg !1173
  %zext9 = zext i8 %22 to i32, !dbg !1173
  %23 = load ptr, ptr %self, align 8, !dbg !1173
  %ptradd10 = getelementptr inbounds i8, ptr %23, i64 1, !dbg !1173
  %24 = load i8, ptr %ptradd10, align 1, !dbg !1173
  %zext11 = zext i8 %24 to i32, !dbg !1173
  %mul12 = mul i32 %zext9, %zext11, !dbg !1173
  %25 = load ptr, ptr %self, align 8, !dbg !1173
  %ptradd13 = getelementptr inbounds i8, ptr %25, i64 3, !dbg !1173
  %26 = load i8, ptr %ptradd13, align 1, !dbg !1173
  %zext14 = zext i8 %26 to i32, !dbg !1173
  %add15 = add i32 %mul12, %zext14, !dbg !1173
  %trunc16 = trunc i32 %add15 to i8, !dbg !1173
  %27 = load ptr, ptr %self, align 8, !dbg !1173
  %ptradd17 = getelementptr inbounds i8, ptr %27, i64 1, !dbg !1173
  store i8 %trunc16, ptr %ptradd17, align 1, !dbg !1173
    #dbg_declare(ptr %s1, !1174, !DIExpression(), !1175)
  %28 = load ptr, ptr %self, align 8, !dbg !1175
  %ptradd18 = getelementptr inbounds i8, ptr %28, i64 1, !dbg !1175
  %29 = load i8, ptr %ptradd18, align 1, !dbg !1175
  store i8 %29, ptr %s1, align 1, !dbg !1175
  %30 = load ptr, ptr %self, align 8, !dbg !1176
  %ptradd19 = getelementptr inbounds i8, ptr %30, i64 1, !dbg !1176
  %31 = load i8, ptr %ptradd19, align 1
  store i8 %31, ptr %self20, align 1
  store i8 4, ptr %shift21, align 1
  %32 = load i8, ptr %self20, align 1, !dbg !1177
  %33 = load i8, ptr %self20, align 1, !dbg !1177
  %34 = load i8, ptr %shift21, align 1, !dbg !1177
  %35 = call i8 @llvm.fshr.i8(i8 %32, i8 %33, i8 %34), !dbg !1177
  %36 = load ptr, ptr %self, align 8, !dbg !1176
  %ptradd22 = getelementptr inbounds i8, ptr %36, i64 1, !dbg !1176
  store i8 %35, ptr %ptradd22, align 1, !dbg !1176
  %37 = load ptr, ptr %self, align 8, !dbg !1179
  %ptradd23 = getelementptr inbounds i8, ptr %37, i64 3, !dbg !1179
  %38 = load i8, ptr %ptradd23, align 1, !dbg !1179
  %sub = sub i8 %38, -97, !dbg !1179
  store i8 %sub, ptr %ptradd23, align 1, !dbg !1179
  %39 = load i8, ptr %s0, align 1, !dbg !1180
  %zext24 = zext i8 %39 to i32, !dbg !1180
  %40 = load i8, ptr %s1, align 1, !dbg !1180
  %zext25 = zext i8 %40 to i32, !dbg !1180
  %add26 = add i32 %zext24, %zext25, !dbg !1180
  %trunc27 = trunc i32 %add26 to i8, !dbg !1180
  ret i8 %trunc27, !dbg !1180

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.54, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.24, i64 9 }, ptr %indirectarg2, align 8
  %41 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %41(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 171) #5, !dbg !1165
  unreachable, !dbg !1165
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.math.random.Msws8Random.next_bytes(ptr %0, ptr align 8 %1) #0 comdat !dbg !1181 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i8, align 1
  %taddr = alloca ptr, align 8
  %taddr4 = alloca i64, align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg7 = alloca %"char[]", align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg8 = alloca %"any[]", align 8
  %taddr12 = alloca i64, align 8
  %taddr13 = alloca i64, align 8
  %indirectarg14 = alloca %"char[]", align 8
  %indirectarg15 = alloca %"char[]", align 8
  %indirectarg16 = alloca %"char[]", align 8
  %varargslots17 = alloca [2 x %any], align 16
  %indirectarg20 = alloca %"any[]", align 8
  %taddr24 = alloca i64, align 8
  %taddr25 = alloca i64, align 8
  %indirectarg26 = alloca %"char[]", align 8
  %indirectarg27 = alloca %"char[]", align 8
  %indirectarg28 = alloca %"char[]", align 8
  %varargslots29 = alloca [2 x %any], align 16
  %indirectarg32 = alloca %"any[]", align 8
  %taddr34 = alloca ptr, align 8
  %taddr37 = alloca i64, align 8
  %taddr38 = alloca i64, align 8
  %indirectarg39 = alloca %"char[]", align 8
  %indirectarg40 = alloca %"char[]", align 8
  %indirectarg41 = alloca %"char[]", align 8
  %varargslots42 = alloca [2 x %any], align 16
  %indirectarg45 = alloca %"any[]", align 8
  %taddr49 = alloca i64, align 8
  %taddr50 = alloca i64, align 8
  %indirectarg51 = alloca %"char[]", align 8
  %indirectarg52 = alloca %"char[]", align 8
  %indirectarg53 = alloca %"char[]", align 8
  %varargslots54 = alloca [2 x %any], align 16
  %indirectarg57 = alloca %"any[]", align 8
  %taddr61 = alloca i64, align 8
  %taddr62 = alloca i64, align 8
  %indirectarg63 = alloca %"char[]", align 8
  %indirectarg64 = alloca %"char[]", align 8
  %indirectarg65 = alloca %"char[]", align 8
  %varargslots66 = alloca [2 x %any], align 16
  %indirectarg69 = alloca %"any[]", align 8
  %taddr74 = alloca i64, align 8
  %taddr75 = alloca i64, align 8
  %indirectarg76 = alloca %"char[]", align 8
  %indirectarg77 = alloca %"char[]", align 8
  %indirectarg78 = alloca %"char[]", align 8
  %varargslots79 = alloca [2 x %any], align 16
  %indirectarg82 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg86 = alloca %"char[]", align 8
  %indirectarg87 = alloca %"char[]", align 8
  %indirectarg88 = alloca %"char[]", align 8
  %indirectarg89 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !1182
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !1182
  br i1 %3, label %panic, label %checkok, !dbg !1182

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1183, !DIExpression(), !1182)
    #dbg_declare(ptr %1, !1184, !DIExpression(), !1182)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes, ptr align 8 %1, i32 16, i1 false)
    #dbg_declare(ptr %len, !1185, !DIExpression(), !1187)
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !1187
  %4 = load i64, ptr %ptradd, align 8, !dbg !1187
  store i64 %4, ptr %len, align 8, !dbg !1187
  br label %loop.cond, !dbg !1188

loop.cond:                                        ; preds = %checkok83, %checkok
  %5 = load i64, ptr %len, align 8, !dbg !1189
  %lt = icmp ult i64 0, %5, !dbg !1189
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !1189

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %value, !1191, !DIExpression(), !1193)
  %6 = load ptr, ptr %self, align 8, !dbg !1194
  %7 = call i8 @std.math.random.Msws8Random.next_byte(ptr %6), !dbg !1193
  store i8 %7, ptr %value, align 1, !dbg !1193
  %8 = load i64, ptr %len, align 8, !dbg !1195
  %le = icmp ule i64 %8, 1, !dbg !1195
  br i1 %le, label %if.then, label %if.exit, !dbg !1195

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %9 = load ptr, ptr %taddr, align 8
  %10 = load i64, ptr %len, align 8, !dbg !1196
  %add = add i64 0, %10, !dbg !1196
  %gt = icmp ugt i64 0, %add, !dbg !1196
  %sub = sub i64 %add, 0, !dbg !1196
  %11 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !1196
  br i1 %11, label %panic3, label %checkok9, !dbg !1196

checkok9:                                         ; preds = %if.then
  %size = sub i64 %add, 0, !dbg !1196
  %12 = insertvalue %"char[]" undef, ptr %9, 0, !dbg !1196
  %13 = insertvalue %"char[]" %12, i64 %size, 1, !dbg !1196
  %14 = load %"char[]", ptr %bytes, align 8, !dbg !1196
  %15 = extractvalue %"char[]" %14, 0, !dbg !1196
  %16 = extractvalue %"char[]" %14, 1, !dbg !1196
  %gt10 = icmp ugt i64 0, %16, !dbg !1196
  %17 = call i1 @llvm.expect.i1(i1 %gt10, i1 false), !dbg !1196
  br i1 %17, label %panic11, label %checkok21, !dbg !1196

checkok21:                                        ; preds = %checkok9
  %size22 = sub i64 %16, 0, !dbg !1196
  %18 = insertvalue %"char[]" undef, ptr %15, 0, !dbg !1196
  %19 = insertvalue %"char[]" %18, i64 %size22, 1, !dbg !1196
  %20 = extractvalue %"char[]" %19, 0, !dbg !1196
  %21 = extractvalue %"char[]" %13, 0, !dbg !1196
  %22 = extractvalue %"char[]" %13, 1, !dbg !1196
  %23 = extractvalue %"char[]" %19, 1, !dbg !1196
  %neq = icmp ne i64 %23, %22, !dbg !1196
  %24 = call i1 @llvm.expect.i1(i1 %neq, i1 false), !dbg !1196
  br i1 %24, label %panic23, label %checkok33, !dbg !1196

checkok33:                                        ; preds = %checkok21
  %25 = mul i64 %22, 1, !dbg !1196
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %20, ptr align 1 %21, i64 %25, i1 false), !dbg !1196
  br label %expr_block.exit, !dbg !1198

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr34, align 8
  %26 = load ptr, ptr %taddr34, align 8
  %27 = insertvalue %"char[]" undef, ptr %26, 0
  %28 = insertvalue %"char[]" %27, i64 1, 1
  %29 = load %"char[]", ptr %bytes, align 8, !dbg !1199
  %30 = extractvalue %"char[]" %29, 0, !dbg !1199
  %31 = extractvalue %"char[]" %29, 1, !dbg !1199
  %gt35 = icmp sgt i64 0, %31, !dbg !1199
  %32 = call i1 @llvm.expect.i1(i1 %gt35, i1 false), !dbg !1199
  br i1 %32, label %panic36, label %checkok46, !dbg !1199

checkok46:                                        ; preds = %if.exit
  %lt47 = icmp slt i64 %31, 1, !dbg !1199
  %33 = call i1 @llvm.expect.i1(i1 %lt47, i1 false), !dbg !1199
  br i1 %33, label %panic48, label %checkok58, !dbg !1199

checkok58:                                        ; preds = %checkok46
  %34 = insertvalue %"char[]" undef, ptr %30, 0, !dbg !1199
  %35 = insertvalue %"char[]" %34, i64 1, 1, !dbg !1199
  %36 = extractvalue %"char[]" %35, 0, !dbg !1199
  %37 = extractvalue %"char[]" %28, 0, !dbg !1199
  %38 = extractvalue %"char[]" %28, 1, !dbg !1199
  %39 = extractvalue %"char[]" %35, 1, !dbg !1199
  %neq59 = icmp ne i64 %39, %38, !dbg !1199
  %40 = call i1 @llvm.expect.i1(i1 %neq59, i1 false), !dbg !1199
  br i1 %40, label %panic60, label %checkok70, !dbg !1199

checkok70:                                        ; preds = %checkok58
  %41 = mul i64 %38, 1, !dbg !1199
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %36, ptr align 1 %37, i64 %41, i1 false), !dbg !1199
  %42 = load i64, ptr %len, align 8, !dbg !1200
  %sub71 = sub i64 %42, 1, !dbg !1200
  store i64 %sub71, ptr %len, align 8, !dbg !1200
  %43 = load %"char[]", ptr %bytes, align 8, !dbg !1201
  %44 = extractvalue %"char[]" %43, 0, !dbg !1201
  %45 = extractvalue %"char[]" %43, 1, !dbg !1201
  %gt72 = icmp ugt i64 1, %45, !dbg !1201
  %46 = call i1 @llvm.expect.i1(i1 %gt72, i1 false), !dbg !1201
  br i1 %46, label %panic73, label %checkok83, !dbg !1201

checkok83:                                        ; preds = %checkok70
  %size84 = sub i64 %45, 1, !dbg !1201
  %ptradd85 = getelementptr inbounds i8, ptr %44, i64 1, !dbg !1201
  %47 = insertvalue %"char[]" undef, ptr %ptradd85, 0, !dbg !1201
  %48 = insertvalue %"char[]" %47, i64 %size84, 1, !dbg !1201
  store %"char[]" %48, ptr %bytes, align 8, !dbg !1201
  br label %loop.cond, !dbg !1201

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.69, i64 30 }, ptr %string, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg86, ptr align 8 %string, i32 16, i1 false)
  store %"char[]" { ptr @.str.70, i64 12 }, ptr %indirectarg87, align 8
  store %"char[]" { ptr @.str.71, i64 22 }, ptr %indirectarg88, align 8
  store %"any[]" zeroinitializer, ptr %indirectarg89, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg86, ptr align 8 %indirectarg87, ptr align 8 %indirectarg88, i32 186, ptr align 8 %indirectarg89), !dbg !1202
  unreachable, !dbg !1202

expr_block.exit:                                  ; preds = %checkok33
  ret void, !dbg !1202

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.54, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg2, align 8
  %49 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %49(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 186) #5, !dbg !1182
  unreachable, !dbg !1182

panic3:                                           ; preds = %if.then
  store i64 %sub, ptr %taddr4, align 8
  %50 = insertvalue %any undef, ptr %taddr4, 0
  %51 = insertvalue %any %50, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.14, i64 43 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg6, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg7, align 8
  store %any %51, ptr %varargslots, align 16
  %52 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %52, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg8, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, ptr align 8 %indirectarg7, i32 153, ptr align 8 %indirectarg8) #5, !dbg !1196
  unreachable, !dbg !1196

panic11:                                          ; preds = %checkok9
  store i64 %16, ptr %taddr12, align 8
  %53 = insertvalue %any undef, ptr %taddr12, 0
  %54 = insertvalue %any %53, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr13, align 8
  %55 = insertvalue %any undef, ptr %taddr13, 0
  %56 = insertvalue %any %55, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.16, i64 61 }, ptr %indirectarg14, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg15, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg16, align 8
  store %any %54, ptr %varargslots17, align 16
  %ptradd18 = getelementptr inbounds i8, ptr %varargslots17, i64 16
  store %any %56, ptr %ptradd18, align 16
  %57 = insertvalue %"any[]" undef, ptr %varargslots17, 0
  %"$$temp19" = insertvalue %"any[]" %57, i64 2, 1
  store %"any[]" %"$$temp19", ptr %indirectarg20, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg14, ptr align 8 %indirectarg15, ptr align 8 %indirectarg16, i32 153, ptr align 8 %indirectarg20) #5, !dbg !1196
  unreachable, !dbg !1196

panic23:                                          ; preds = %checkok21
  store i64 %23, ptr %taddr24, align 8
  %58 = insertvalue %any undef, ptr %taddr24, 0
  %59 = insertvalue %any %58, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %22, ptr %taddr25, align 8
  %60 = insertvalue %any undef, ptr %taddr25, 0
  %61 = insertvalue %any %60, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 38 }, ptr %indirectarg26, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg27, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg28, align 8
  store %any %59, ptr %varargslots29, align 16
  %ptradd30 = getelementptr inbounds i8, ptr %varargslots29, i64 16
  store %any %61, ptr %ptradd30, align 16
  %62 = insertvalue %"any[]" undef, ptr %varargslots29, 0
  %"$$temp31" = insertvalue %"any[]" %62, i64 2, 1
  store %"any[]" %"$$temp31", ptr %indirectarg32, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg26, ptr align 8 %indirectarg27, ptr align 8 %indirectarg28, i32 153, ptr align 8 %indirectarg32) #5, !dbg !1196
  unreachable, !dbg !1196

panic36:                                          ; preds = %if.exit
  store i64 %31, ptr %taddr37, align 8
  %63 = insertvalue %any undef, ptr %taddr37, 0
  %64 = insertvalue %any %63, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr38, align 8
  %65 = insertvalue %any undef, ptr %taddr38, 0
  %66 = insertvalue %any %65, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.16, i64 61 }, ptr %indirectarg39, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg40, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg41, align 8
  store %any %64, ptr %varargslots42, align 16
  %ptradd43 = getelementptr inbounds i8, ptr %varargslots42, i64 16
  store %any %66, ptr %ptradd43, align 16
  %67 = insertvalue %"any[]" undef, ptr %varargslots42, 0
  %"$$temp44" = insertvalue %"any[]" %67, i64 2, 1
  store %"any[]" %"$$temp44", ptr %indirectarg45, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg39, ptr align 8 %indirectarg40, ptr align 8 %indirectarg41, i32 156, ptr align 8 %indirectarg45) #5, !dbg !1199
  unreachable, !dbg !1199

panic48:                                          ; preds = %checkok46
  store i64 0, ptr %taddr49, align 8
  %68 = insertvalue %any undef, ptr %taddr49, 0
  %69 = insertvalue %any %68, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %31, ptr %taddr50, align 8
  %70 = insertvalue %any undef, ptr %taddr50, 0
  %71 = insertvalue %any %70, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.18, i64 60 }, ptr %indirectarg51, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg52, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg53, align 8
  store %any %69, ptr %varargslots54, align 16
  %ptradd55 = getelementptr inbounds i8, ptr %varargslots54, i64 16
  store %any %71, ptr %ptradd55, align 16
  %72 = insertvalue %"any[]" undef, ptr %varargslots54, 0
  %"$$temp56" = insertvalue %"any[]" %72, i64 2, 1
  store %"any[]" %"$$temp56", ptr %indirectarg57, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg51, ptr align 8 %indirectarg52, ptr align 8 %indirectarg53, i32 156, ptr align 8 %indirectarg57) #5, !dbg !1199
  unreachable, !dbg !1199

panic60:                                          ; preds = %checkok58
  store i64 %39, ptr %taddr61, align 8
  %73 = insertvalue %any undef, ptr %taddr61, 0
  %74 = insertvalue %any %73, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %38, ptr %taddr62, align 8
  %75 = insertvalue %any undef, ptr %taddr62, 0
  %76 = insertvalue %any %75, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 38 }, ptr %indirectarg63, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg64, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg65, align 8
  store %any %74, ptr %varargslots66, align 16
  %ptradd67 = getelementptr inbounds i8, ptr %varargslots66, i64 16
  store %any %76, ptr %ptradd67, align 16
  %77 = insertvalue %"any[]" undef, ptr %varargslots66, 0
  %"$$temp68" = insertvalue %"any[]" %77, i64 2, 1
  store %"any[]" %"$$temp68", ptr %indirectarg69, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg63, ptr align 8 %indirectarg64, ptr align 8 %indirectarg65, i32 156, ptr align 8 %indirectarg69) #5, !dbg !1199
  unreachable, !dbg !1199

panic73:                                          ; preds = %checkok70
  store i64 %45, ptr %taddr74, align 8
  %78 = insertvalue %any undef, ptr %taddr74, 0
  %79 = insertvalue %any %78, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 1, ptr %taddr75, align 8
  %80 = insertvalue %any undef, ptr %taddr75, 0
  %81 = insertvalue %any %80, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.16, i64 61 }, ptr %indirectarg76, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg77, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg78, align 8
  store %any %79, ptr %varargslots79, align 16
  %ptradd80 = getelementptr inbounds i8, ptr %varargslots79, i64 16
  store %any %81, ptr %ptradd80, align 16
  %82 = insertvalue %"any[]" undef, ptr %varargslots79, 0
  %"$$temp81" = insertvalue %"any[]" %82, i64 2, 1
  store %"any[]" %"$$temp81", ptr %indirectarg82, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg76, ptr align 8 %indirectarg77, ptr align 8 %indirectarg78, i32 158, ptr align 8 %indirectarg82) #5, !dbg !1201
  unreachable, !dbg !1201
}

; Function Attrs: nounwind ssp uwtable
define weak_odr <2 x i64> @std.math.random.Msws8Random.next_int128(ptr %0) #0 comdat !dbg !1205 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %taddr = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !1208
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1208
  br i1 %2, label %panic, label %checkok, !dbg !1208

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1209, !DIExpression(), !1208)
  %3 = load ptr, ptr %self, align 8, !dbg !1210
  %4 = call i64 @std.math.random.Msws8Random.next_long(ptr %3), !dbg !1212
  %zext = zext i64 %4 to i128, !dbg !1212
  %shl = shl i128 %zext, 64, !dbg !1212
  %5 = freeze i128 %shl, !dbg !1212
  %6 = load ptr, ptr %self, align 8, !dbg !1210
  %7 = call i64 @std.math.random.Msws8Random.next_long(ptr %6), !dbg !1212
  %zext3 = zext i64 %7 to i128, !dbg !1212
  %add = add i128 %5, %zext3, !dbg !1212
  store i128 %add, ptr %taddr, align 16
  %8 = load <2 x i64>, ptr %taddr, align 16
  ret <2 x i64> %8

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.54, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.21, i64 11 }, ptr %indirectarg2, align 8
  %9 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %9(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 187) #5, !dbg !1208
  unreachable, !dbg !1208
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.math.random.Msws8Random.next_long(ptr %0) #0 comdat !dbg !1213 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1216
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1216
  br i1 %2, label %panic, label %checkok, !dbg !1216

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1217, !DIExpression(), !1216)
  %3 = load ptr, ptr %self, align 8, !dbg !1218
  %4 = call i32 @std.math.random.Msws8Random.next_int(ptr %3), !dbg !1220
  %zext = zext i32 %4 to i64, !dbg !1220
  %shl = shl i64 %zext, 32, !dbg !1220
  %5 = freeze i64 %shl, !dbg !1220
  %6 = load ptr, ptr %self, align 8, !dbg !1218
  %7 = call i32 @std.math.random.Msws8Random.next_int(ptr %6), !dbg !1220
  %zext3 = zext i32 %7 to i64, !dbg !1220
  %add = add i64 %5, %zext3, !dbg !1220
  ret i64 %add, !dbg !1220

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.54, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.10, i64 9 }, ptr %indirectarg2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 188) #5, !dbg !1216
  unreachable, !dbg !1216
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i32 @std.math.random.Msws8Random.next_int(ptr %0) #0 comdat !dbg !1221 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1224
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1224
  br i1 %2, label %panic, label %checkok, !dbg !1224

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1225, !DIExpression(), !1224)
  %3 = load ptr, ptr %self, align 8, !dbg !1226
  %4 = call i16 @std.math.random.Msws8Random.next_short(ptr %3), !dbg !1228
  %zext = zext i16 %4 to i32, !dbg !1228
  %shl = shl i32 %zext, 16, !dbg !1228
  %5 = freeze i32 %shl, !dbg !1228
  %6 = load ptr, ptr %self, align 8, !dbg !1226
  %7 = call i16 @std.math.random.Msws8Random.next_short(ptr %6), !dbg !1228
  %zext3 = zext i16 %7 to i32, !dbg !1228
  %add = add i32 %5, %zext3, !dbg !1228
  ret i32 %add, !dbg !1228

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.54, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.22, i64 8 }, ptr %indirectarg2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 189) #5, !dbg !1224
  unreachable, !dbg !1224
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i16 @std.math.random.Msws8Random.next_short(ptr %0) #0 comdat !dbg !1229 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1232
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1232
  br i1 %2, label %panic, label %checkok, !dbg !1232

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1233, !DIExpression(), !1232)
  %3 = load ptr, ptr %self, align 8, !dbg !1234
  %4 = call i8 @std.math.random.Msws8Random.next_byte(ptr %3), !dbg !1236
  %zext = zext i8 %4 to i16, !dbg !1236
  %zext3 = zext i16 %zext to i32, !dbg !1236
  %shl = shl i32 %zext3, 8, !dbg !1236
  %5 = freeze i32 %shl, !dbg !1236
  %6 = load ptr, ptr %self, align 8, !dbg !1234
  %7 = call i8 @std.math.random.Msws8Random.next_byte(ptr %6), !dbg !1236
  %zext4 = zext i8 %7 to i32, !dbg !1236
  %add = add i32 %5, %zext4, !dbg !1236
  %trunc = trunc i32 %add to i16, !dbg !1236
  ret i16 %trunc, !dbg !1236

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.54, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.23, i64 10 }, ptr %indirectarg2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 190) #5, !dbg !1232
  unreachable, !dbg !1232
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.math.random.Pcg128Random.set_seed(ptr %0, ptr align 8 %1) #0 comdat !dbg !1237 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %input = alloca %"char[]", align 8
  %return_value = alloca i128, align 16
  %taddr = alloca ptr, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg7 = alloca %"char[]", align 8
  %indirectarg8 = alloca %"char[]", align 8
  %taddr11 = alloca i64, align 8
  %taddr12 = alloca i64, align 8
  %indirectarg13 = alloca %"char[]", align 8
  %indirectarg14 = alloca %"char[]", align 8
  %indirectarg15 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg16 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !1242
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !1242
  br i1 %3, label %panic, label %checkok, !dbg !1242

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1243, !DIExpression(), !1244)
    #dbg_declare(ptr %1, !1245, !DIExpression(), !1244)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input, ptr align 8 %1, i32 16, i1 false)
    #dbg_declare(ptr %return_value, !1246, !DIExpression(), !1248)
  store i128 0, ptr %return_value, align 16, !dbg !1248
  store ptr %return_value, ptr %taddr, align 8
  %4 = load ptr, ptr %taddr, align 8
  %5 = insertvalue %"char[]" undef, ptr %4, 0
  %6 = insertvalue %"char[]" %5, i64 16, 1
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg3, ptr align 8 %input, i32 16, i1 false)
  store %"char[]" %6, ptr %indirectarg4, align 8
  call void @std.math.random.seeder(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4), !dbg !1250
  %7 = load ptr, ptr %self, align 8, !dbg !1249
  %checknull = icmp eq ptr %7, null, !dbg !1249
  %8 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1249
  br i1 %8, label %panic5, label %checkok9, !dbg !1249

checkok9:                                         ; preds = %checkok
  %9 = ptrtoint ptr %7 to i64, !dbg !1249
  %10 = urem i64 %9, 16, !dbg !1249
  %11 = icmp ne i64 %10, 0, !dbg !1249
  %12 = call i1 @llvm.expect.i1(i1 %11, i1 false), !dbg !1249
  br i1 %12, label %panic10, label %checkok17, !dbg !1249

checkok17:                                        ; preds = %checkok9
  %13 = load i128, ptr %return_value, align 16, !dbg !1249
  store i128 %13, ptr %7, align 16, !dbg !1249
  ret void, !dbg !1249

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.79, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func, i64 8 }, ptr %indirectarg2, align 8
  %14 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %14(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 20) #5, !dbg !1244
  unreachable, !dbg !1244

panic5:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.8, i64 45 }, ptr %indirectarg6, align 8
  store %"char[]" { ptr @.file.79, i64 11 }, ptr %indirectarg7, align 8
  store %"char[]" { ptr @.func, i64 8 }, ptr %indirectarg8, align 8
  %15 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %15(ptr align 8 %indirectarg6, ptr align 8 %indirectarg7, ptr align 8 %indirectarg8, i32 22) #5, !dbg !1249
  unreachable, !dbg !1249

panic10:                                          ; preds = %checkok9
  store i64 16, ptr %taddr11, align 8
  %16 = insertvalue %any undef, ptr %taddr11, 0
  %17 = insertvalue %any %16, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %10, ptr %taddr12, align 8
  %18 = insertvalue %any undef, ptr %taddr12, 0
  %19 = insertvalue %any %18, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg13, align 8
  store %"char[]" { ptr @.file.79, i64 11 }, ptr %indirectarg14, align 8
  store %"char[]" { ptr @.func, i64 8 }, ptr %indirectarg15, align 8
  store %any %17, ptr %varargslots, align 16
  %ptradd = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %19, ptr %ptradd, align 16
  %20 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %20, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg16, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg13, ptr align 8 %indirectarg14, ptr align 8 %indirectarg15, i32 22, ptr align 8 %indirectarg16) #5, !dbg !1249
  unreachable, !dbg !1249
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.math.random.Pcg128Random.next_long(ptr %0) #0 comdat !dbg !1251 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %s = alloca ptr, align 8
  %xor = alloca i128, align 16
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr9 = alloca i64, align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg13 = alloca %"any[]", align 8
  %indirectarg17 = alloca %"char[]", align 8
  %indirectarg18 = alloca %"char[]", align 8
  %indirectarg19 = alloca %"char[]", align 8
  %taddr22 = alloca i64, align 8
  %taddr23 = alloca i64, align 8
  %indirectarg24 = alloca %"char[]", align 8
  %indirectarg25 = alloca %"char[]", align 8
  %indirectarg26 = alloca %"char[]", align 8
  %varargslots27 = alloca [2 x %any], align 16
  %indirectarg30 = alloca %"any[]", align 8
  %rot = alloca i8, align 1
  %indirectarg35 = alloca %"char[]", align 8
  %indirectarg36 = alloca %"char[]", align 8
  %indirectarg37 = alloca %"char[]", align 8
  %taddr40 = alloca i64, align 8
  %taddr41 = alloca i64, align 8
  %indirectarg42 = alloca %"char[]", align 8
  %indirectarg43 = alloca %"char[]", align 8
  %indirectarg44 = alloca %"char[]", align 8
  %varargslots45 = alloca [2 x %any], align 16
  %indirectarg48 = alloca %"any[]", align 8
  %indirectarg53 = alloca %"char[]", align 8
  %indirectarg54 = alloca %"char[]", align 8
  %indirectarg55 = alloca %"char[]", align 8
  %taddr58 = alloca i64, align 8
  %taddr59 = alloca i64, align 8
  %indirectarg60 = alloca %"char[]", align 8
  %indirectarg61 = alloca %"char[]", align 8
  %indirectarg62 = alloca %"char[]", align 8
  %varargslots63 = alloca [2 x %any], align 16
  %indirectarg66 = alloca %"any[]", align 8
  %indirectarg70 = alloca %"char[]", align 8
  %indirectarg71 = alloca %"char[]", align 8
  %indirectarg72 = alloca %"char[]", align 8
  %taddr75 = alloca i64, align 8
  %taddr76 = alloca i64, align 8
  %indirectarg77 = alloca %"char[]", align 8
  %indirectarg78 = alloca %"char[]", align 8
  %indirectarg79 = alloca %"char[]", align 8
  %varargslots80 = alloca [2 x %any], align 16
  %indirectarg83 = alloca %"any[]", align 8
  %self87 = alloca i64, align 8
  %shift = alloca i64, align 8
  %1 = icmp eq ptr %0, null, !dbg !1254
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1254
  br i1 %2, label %panic, label %checkok, !dbg !1254

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1255, !DIExpression(), !1256)
    #dbg_declare(ptr %s, !1257, !DIExpression(), !1258)
  %3 = load ptr, ptr %self, align 8, !dbg !1258
  store ptr %3, ptr %s, align 8, !dbg !1258
    #dbg_declare(ptr %xor, !1259, !DIExpression(), !1260)
  %4 = load ptr, ptr %s, align 8, !dbg !1260
  %checknull = icmp eq ptr %4, null, !dbg !1260
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1260
  br i1 %5, label %panic3, label %checkok7, !dbg !1260

checkok7:                                         ; preds = %checkok
  %6 = ptrtoint ptr %4 to i64, !dbg !1260
  %7 = urem i64 %6, 16, !dbg !1260
  %8 = icmp ne i64 %7, 0, !dbg !1260
  %9 = call i1 @llvm.expect.i1(i1 %8, i1 false), !dbg !1260
  br i1 %9, label %panic8, label %checkok14, !dbg !1260

checkok14:                                        ; preds = %checkok7
  %10 = load i128, ptr %4, align 16, !dbg !1260
  %11 = load ptr, ptr %s, align 8, !dbg !1260
  %checknull15 = icmp eq ptr %11, null, !dbg !1260
  %12 = call i1 @llvm.expect.i1(i1 %checknull15, i1 false), !dbg !1260
  br i1 %12, label %panic16, label %checkok20, !dbg !1260

checkok20:                                        ; preds = %checkok14
  %13 = ptrtoint ptr %11 to i64, !dbg !1260
  %14 = urem i64 %13, 16, !dbg !1260
  %15 = icmp ne i64 %14, 0, !dbg !1260
  %16 = call i1 @llvm.expect.i1(i1 %15, i1 false), !dbg !1260
  br i1 %16, label %panic21, label %checkok31, !dbg !1260

checkok31:                                        ; preds = %checkok20
  %17 = load i128, ptr %11, align 16, !dbg !1260
  %lshr = lshr i128 %17, 35, !dbg !1260
  %18 = freeze i128 %lshr, !dbg !1260
  %xor32 = xor i128 %10, %18, !dbg !1260
  store i128 %xor32, ptr %xor, align 16, !dbg !1260
    #dbg_declare(ptr %rot, !1261, !DIExpression(), !1262)
  %19 = load ptr, ptr %s, align 8, !dbg !1262
  %checknull33 = icmp eq ptr %19, null, !dbg !1262
  %20 = call i1 @llvm.expect.i1(i1 %checknull33, i1 false), !dbg !1262
  br i1 %20, label %panic34, label %checkok38, !dbg !1262

checkok38:                                        ; preds = %checkok31
  %21 = ptrtoint ptr %19 to i64, !dbg !1262
  %22 = urem i64 %21, 16, !dbg !1262
  %23 = icmp ne i64 %22, 0, !dbg !1262
  %24 = call i1 @llvm.expect.i1(i1 %23, i1 false), !dbg !1262
  br i1 %24, label %panic39, label %checkok49, !dbg !1262

checkok49:                                        ; preds = %checkok38
  %25 = load i128, ptr %19, align 16, !dbg !1262
  %lshr50 = lshr i128 %25, 122, !dbg !1262
  %26 = freeze i128 %lshr50, !dbg !1262
  %trunc = trunc i128 %26 to i8, !dbg !1262
  store i8 %trunc, ptr %rot, align 1, !dbg !1262
  %27 = load ptr, ptr %s, align 8, !dbg !1263
  %checknull51 = icmp eq ptr %27, null, !dbg !1263
  %28 = call i1 @llvm.expect.i1(i1 %checknull51, i1 false), !dbg !1263
  br i1 %28, label %panic52, label %checkok56, !dbg !1263

checkok56:                                        ; preds = %checkok49
  %29 = ptrtoint ptr %27 to i64, !dbg !1263
  %30 = urem i64 %29, 16, !dbg !1263
  %31 = icmp ne i64 %30, 0, !dbg !1263
  %32 = call i1 @llvm.expect.i1(i1 %31, i1 false), !dbg !1263
  br i1 %32, label %panic57, label %checkok67, !dbg !1263

checkok67:                                        ; preds = %checkok56
  %33 = load i128, ptr %27, align 16, !dbg !1263
  %mul = mul i128 %33, -48899967401452674293065485854872568811, !dbg !1263
  %add = add i128 %mul, -129976298391535590297638237547755878347, !dbg !1263
  %34 = load ptr, ptr %s, align 8, !dbg !1263
  %checknull68 = icmp eq ptr %34, null, !dbg !1263
  %35 = call i1 @llvm.expect.i1(i1 %checknull68, i1 false), !dbg !1263
  br i1 %35, label %panic69, label %checkok73, !dbg !1263

checkok73:                                        ; preds = %checkok67
  %36 = ptrtoint ptr %34 to i64, !dbg !1263
  %37 = urem i64 %36, 16, !dbg !1263
  %38 = icmp ne i64 %37, 0, !dbg !1263
  %39 = call i1 @llvm.expect.i1(i1 %38, i1 false), !dbg !1263
  br i1 %39, label %panic74, label %checkok84, !dbg !1263

checkok84:                                        ; preds = %checkok73
  store i128 %add, ptr %34, align 16, !dbg !1263
  %40 = load i128, ptr %xor, align 16, !dbg !1264
  %lshr85 = lshr i128 %40, 58, !dbg !1264
  %41 = freeze i128 %lshr85, !dbg !1264
  %trunc86 = trunc i128 %41 to i64, !dbg !1264
  store i64 %trunc86, ptr %self87, align 8
  %42 = load i8, ptr %rot, align 1, !dbg !1264
  %zext = zext i8 %42 to i64, !dbg !1264
  store i64 %zext, ptr %shift, align 8
  %43 = load i64, ptr %self87, align 8, !dbg !1265
  %44 = load i64, ptr %self87, align 8, !dbg !1265
  %45 = load i64, ptr %shift, align 8, !dbg !1265
  %46 = call i64 @llvm.fshr.i64(i64 %43, i64 %44, i64 %45), !dbg !1265
  ret i64 %46, !dbg !1265

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.79, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.10, i64 9 }, ptr %indirectarg2, align 8
  %47 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %47(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 26) #5, !dbg !1256
  unreachable, !dbg !1256

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.11, i64 42 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.79, i64 11 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.10, i64 9 }, ptr %indirectarg6, align 8
  %48 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %48(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 30) #5, !dbg !1260
  unreachable, !dbg !1260

panic8:                                           ; preds = %checkok7
  store i64 16, ptr %taddr, align 8
  %49 = insertvalue %any undef, ptr %taddr, 0
  %50 = insertvalue %any %49, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %7, ptr %taddr9, align 8
  %51 = insertvalue %any undef, ptr %taddr9, 0
  %52 = insertvalue %any %51, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.file.79, i64 11 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.func.10, i64 9 }, ptr %indirectarg12, align 8
  store %any %50, ptr %varargslots, align 16
  %ptradd = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %52, ptr %ptradd, align 16
  %53 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %53, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg13, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, i32 30, ptr align 8 %indirectarg13) #5, !dbg !1260
  unreachable, !dbg !1260

panic16:                                          ; preds = %checkok14
  store %"char[]" { ptr @.panic_msg.11, i64 42 }, ptr %indirectarg17, align 8
  store %"char[]" { ptr @.file.79, i64 11 }, ptr %indirectarg18, align 8
  store %"char[]" { ptr @.func.10, i64 9 }, ptr %indirectarg19, align 8
  %54 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %54(ptr align 8 %indirectarg17, ptr align 8 %indirectarg18, ptr align 8 %indirectarg19, i32 30) #5, !dbg !1260
  unreachable, !dbg !1260

panic21:                                          ; preds = %checkok20
  store i64 16, ptr %taddr22, align 8
  %55 = insertvalue %any undef, ptr %taddr22, 0
  %56 = insertvalue %any %55, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %14, ptr %taddr23, align 8
  %57 = insertvalue %any undef, ptr %taddr23, 0
  %58 = insertvalue %any %57, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg24, align 8
  store %"char[]" { ptr @.file.79, i64 11 }, ptr %indirectarg25, align 8
  store %"char[]" { ptr @.func.10, i64 9 }, ptr %indirectarg26, align 8
  store %any %56, ptr %varargslots27, align 16
  %ptradd28 = getelementptr inbounds i8, ptr %varargslots27, i64 16
  store %any %58, ptr %ptradd28, align 16
  %59 = insertvalue %"any[]" undef, ptr %varargslots27, 0
  %"$$temp29" = insertvalue %"any[]" %59, i64 2, 1
  store %"any[]" %"$$temp29", ptr %indirectarg30, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg24, ptr align 8 %indirectarg25, ptr align 8 %indirectarg26, i32 30, ptr align 8 %indirectarg30) #5, !dbg !1260
  unreachable, !dbg !1260

panic34:                                          ; preds = %checkok31
  store %"char[]" { ptr @.panic_msg.11, i64 42 }, ptr %indirectarg35, align 8
  store %"char[]" { ptr @.file.79, i64 11 }, ptr %indirectarg36, align 8
  store %"char[]" { ptr @.func.10, i64 9 }, ptr %indirectarg37, align 8
  %60 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %60(ptr align 8 %indirectarg35, ptr align 8 %indirectarg36, ptr align 8 %indirectarg37, i32 31) #5, !dbg !1262
  unreachable, !dbg !1262

panic39:                                          ; preds = %checkok38
  store i64 16, ptr %taddr40, align 8
  %61 = insertvalue %any undef, ptr %taddr40, 0
  %62 = insertvalue %any %61, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %22, ptr %taddr41, align 8
  %63 = insertvalue %any undef, ptr %taddr41, 0
  %64 = insertvalue %any %63, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg42, align 8
  store %"char[]" { ptr @.file.79, i64 11 }, ptr %indirectarg43, align 8
  store %"char[]" { ptr @.func.10, i64 9 }, ptr %indirectarg44, align 8
  store %any %62, ptr %varargslots45, align 16
  %ptradd46 = getelementptr inbounds i8, ptr %varargslots45, i64 16
  store %any %64, ptr %ptradd46, align 16
  %65 = insertvalue %"any[]" undef, ptr %varargslots45, 0
  %"$$temp47" = insertvalue %"any[]" %65, i64 2, 1
  store %"any[]" %"$$temp47", ptr %indirectarg48, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg42, ptr align 8 %indirectarg43, ptr align 8 %indirectarg44, i32 31, ptr align 8 %indirectarg48) #5, !dbg !1262
  unreachable, !dbg !1262

panic52:                                          ; preds = %checkok49
  store %"char[]" { ptr @.panic_msg.11, i64 42 }, ptr %indirectarg53, align 8
  store %"char[]" { ptr @.file.79, i64 11 }, ptr %indirectarg54, align 8
  store %"char[]" { ptr @.func.10, i64 9 }, ptr %indirectarg55, align 8
  %66 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %66(ptr align 8 %indirectarg53, ptr align 8 %indirectarg54, ptr align 8 %indirectarg55, i32 32) #5, !dbg !1263
  unreachable, !dbg !1263

panic57:                                          ; preds = %checkok56
  store i64 16, ptr %taddr58, align 8
  %67 = insertvalue %any undef, ptr %taddr58, 0
  %68 = insertvalue %any %67, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %30, ptr %taddr59, align 8
  %69 = insertvalue %any undef, ptr %taddr59, 0
  %70 = insertvalue %any %69, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg60, align 8
  store %"char[]" { ptr @.file.79, i64 11 }, ptr %indirectarg61, align 8
  store %"char[]" { ptr @.func.10, i64 9 }, ptr %indirectarg62, align 8
  store %any %68, ptr %varargslots63, align 16
  %ptradd64 = getelementptr inbounds i8, ptr %varargslots63, i64 16
  store %any %70, ptr %ptradd64, align 16
  %71 = insertvalue %"any[]" undef, ptr %varargslots63, 0
  %"$$temp65" = insertvalue %"any[]" %71, i64 2, 1
  store %"any[]" %"$$temp65", ptr %indirectarg66, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg60, ptr align 8 %indirectarg61, ptr align 8 %indirectarg62, i32 32, ptr align 8 %indirectarg66) #5, !dbg !1263
  unreachable, !dbg !1263

panic69:                                          ; preds = %checkok67
  store %"char[]" { ptr @.panic_msg.11, i64 42 }, ptr %indirectarg70, align 8
  store %"char[]" { ptr @.file.79, i64 11 }, ptr %indirectarg71, align 8
  store %"char[]" { ptr @.func.10, i64 9 }, ptr %indirectarg72, align 8
  %72 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %72(ptr align 8 %indirectarg70, ptr align 8 %indirectarg71, ptr align 8 %indirectarg72, i32 32) #5, !dbg !1263
  unreachable, !dbg !1263

panic74:                                          ; preds = %checkok73
  store i64 16, ptr %taddr75, align 8
  %73 = insertvalue %any undef, ptr %taddr75, 0
  %74 = insertvalue %any %73, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %37, ptr %taddr76, align 8
  %75 = insertvalue %any undef, ptr %taddr76, 0
  %76 = insertvalue %any %75, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg77, align 8
  store %"char[]" { ptr @.file.79, i64 11 }, ptr %indirectarg78, align 8
  store %"char[]" { ptr @.func.10, i64 9 }, ptr %indirectarg79, align 8
  store %any %74, ptr %varargslots80, align 16
  %ptradd81 = getelementptr inbounds i8, ptr %varargslots80, i64 16
  store %any %76, ptr %ptradd81, align 16
  %77 = insertvalue %"any[]" undef, ptr %varargslots80, 0
  %"$$temp82" = insertvalue %"any[]" %77, i64 2, 1
  store %"any[]" %"$$temp82", ptr %indirectarg83, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg77, ptr align 8 %indirectarg78, ptr align 8 %indirectarg79, i32 32, ptr align 8 %indirectarg83) #5, !dbg !1263
  unreachable, !dbg !1263
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.math.random.Pcg128Random.next_bytes(ptr %0, ptr align 8 %1) #0 comdat !dbg !1267 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %bytes = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i64, align 8
  %taddr = alloca ptr, align 8
  %taddr9 = alloca i64, align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg13 = alloca %"any[]", align 8
  %taddr17 = alloca i64, align 8
  %taddr18 = alloca i64, align 8
  %indirectarg19 = alloca %"char[]", align 8
  %indirectarg20 = alloca %"char[]", align 8
  %indirectarg21 = alloca %"char[]", align 8
  %varargslots22 = alloca [2 x %any], align 16
  %indirectarg25 = alloca %"any[]", align 8
  %taddr29 = alloca i64, align 8
  %taddr30 = alloca i64, align 8
  %indirectarg31 = alloca %"char[]", align 8
  %indirectarg32 = alloca %"char[]", align 8
  %indirectarg33 = alloca %"char[]", align 8
  %varargslots34 = alloca [2 x %any], align 16
  %indirectarg37 = alloca %"any[]", align 8
  %taddr39 = alloca ptr, align 8
  %taddr42 = alloca i64, align 8
  %taddr43 = alloca i64, align 8
  %indirectarg44 = alloca %"char[]", align 8
  %indirectarg45 = alloca %"char[]", align 8
  %indirectarg46 = alloca %"char[]", align 8
  %varargslots47 = alloca [2 x %any], align 16
  %indirectarg50 = alloca %"any[]", align 8
  %taddr54 = alloca i64, align 8
  %taddr55 = alloca i64, align 8
  %indirectarg56 = alloca %"char[]", align 8
  %indirectarg57 = alloca %"char[]", align 8
  %indirectarg58 = alloca %"char[]", align 8
  %varargslots59 = alloca [2 x %any], align 16
  %indirectarg62 = alloca %"any[]", align 8
  %taddr66 = alloca i64, align 8
  %taddr67 = alloca i64, align 8
  %indirectarg68 = alloca %"char[]", align 8
  %indirectarg69 = alloca %"char[]", align 8
  %indirectarg70 = alloca %"char[]", align 8
  %varargslots71 = alloca [2 x %any], align 16
  %indirectarg74 = alloca %"any[]", align 8
  %taddr79 = alloca i64, align 8
  %taddr80 = alloca i64, align 8
  %indirectarg81 = alloca %"char[]", align 8
  %indirectarg82 = alloca %"char[]", align 8
  %indirectarg83 = alloca %"char[]", align 8
  %varargslots84 = alloca [2 x %any], align 16
  %indirectarg87 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg91 = alloca %"char[]", align 8
  %indirectarg92 = alloca %"char[]", align 8
  %indirectarg93 = alloca %"char[]", align 8
  %indirectarg94 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !1268
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !1268
  br i1 %3, label %panic, label %checkok, !dbg !1268

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1269, !DIExpression(), !1268)
    #dbg_declare(ptr %1, !1270, !DIExpression(), !1268)
  %ptradd = getelementptr inbounds i8, ptr %1, i64 8, !dbg !1271
  %4 = load i64, ptr %ptradd, align 8, !dbg !1271
  %lt = icmp ult i64 0, %4, !dbg !1271
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !1271

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.13, i64 34 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.file.79, i64 11 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg5, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, i32 37) #5, !dbg !1271
  unreachable, !dbg !1271

assert_ok:                                        ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes, ptr align 8 %1, i32 16, i1 false)
    #dbg_declare(ptr %len, !1273, !DIExpression(), !1275)
  %ptradd6 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !1275
  %6 = load i64, ptr %ptradd6, align 8, !dbg !1275
  store i64 %6, ptr %len, align 8, !dbg !1275
  br label %loop.cond, !dbg !1276

loop.cond:                                        ; preds = %checkok88, %assert_ok
  %7 = load i64, ptr %len, align 8, !dbg !1277
  %lt7 = icmp ult i64 0, %7, !dbg !1277
  br i1 %lt7, label %loop.body, label %loop.exit, !dbg !1277

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %value, !1279, !DIExpression(), !1281)
  %8 = load ptr, ptr %self, align 8, !dbg !1282
  %9 = call i64 @std.math.random.Pcg128Random.next_long(ptr %8), !dbg !1281
  store i64 %9, ptr %value, align 8, !dbg !1281
  %10 = load i64, ptr %len, align 8, !dbg !1283
  %le = icmp ule i64 %10, 8, !dbg !1283
  br i1 %le, label %if.then, label %if.exit, !dbg !1283

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %11 = load ptr, ptr %taddr, align 8
  %12 = load i64, ptr %len, align 8, !dbg !1284
  %add = add i64 0, %12, !dbg !1284
  %gt = icmp ugt i64 0, %add, !dbg !1284
  %sub = sub i64 %add, 0, !dbg !1284
  %13 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !1284
  br i1 %13, label %panic8, label %checkok14, !dbg !1284

checkok14:                                        ; preds = %if.then
  %size = sub i64 %add, 0, !dbg !1284
  %14 = insertvalue %"char[]" undef, ptr %11, 0, !dbg !1284
  %15 = insertvalue %"char[]" %14, i64 %size, 1, !dbg !1284
  %16 = load %"char[]", ptr %bytes, align 8, !dbg !1284
  %17 = extractvalue %"char[]" %16, 0, !dbg !1284
  %18 = extractvalue %"char[]" %16, 1, !dbg !1284
  %gt15 = icmp ugt i64 0, %18, !dbg !1284
  %19 = call i1 @llvm.expect.i1(i1 %gt15, i1 false), !dbg !1284
  br i1 %19, label %panic16, label %checkok26, !dbg !1284

checkok26:                                        ; preds = %checkok14
  %size27 = sub i64 %18, 0, !dbg !1284
  %20 = insertvalue %"char[]" undef, ptr %17, 0, !dbg !1284
  %21 = insertvalue %"char[]" %20, i64 %size27, 1, !dbg !1284
  %22 = extractvalue %"char[]" %21, 0, !dbg !1284
  %23 = extractvalue %"char[]" %15, 0, !dbg !1284
  %24 = extractvalue %"char[]" %15, 1, !dbg !1284
  %25 = extractvalue %"char[]" %21, 1, !dbg !1284
  %neq = icmp ne i64 %25, %24, !dbg !1284
  %26 = call i1 @llvm.expect.i1(i1 %neq, i1 false), !dbg !1284
  br i1 %26, label %panic28, label %checkok38, !dbg !1284

checkok38:                                        ; preds = %checkok26
  %27 = mul i64 %24, 1, !dbg !1284
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %22, ptr align 1 %23, i64 %27, i1 false), !dbg !1284
  br label %expr_block.exit, !dbg !1286

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr39, align 8
  %28 = load ptr, ptr %taddr39, align 8
  %29 = insertvalue %"char[]" undef, ptr %28, 0
  %30 = insertvalue %"char[]" %29, i64 8, 1
  %31 = load %"char[]", ptr %bytes, align 8, !dbg !1287
  %32 = extractvalue %"char[]" %31, 0, !dbg !1287
  %33 = extractvalue %"char[]" %31, 1, !dbg !1287
  %gt40 = icmp sgt i64 0, %33, !dbg !1287
  %34 = call i1 @llvm.expect.i1(i1 %gt40, i1 false), !dbg !1287
  br i1 %34, label %panic41, label %checkok51, !dbg !1287

checkok51:                                        ; preds = %if.exit
  %lt52 = icmp slt i64 %33, 8, !dbg !1287
  %35 = call i1 @llvm.expect.i1(i1 %lt52, i1 false), !dbg !1287
  br i1 %35, label %panic53, label %checkok63, !dbg !1287

checkok63:                                        ; preds = %checkok51
  %36 = insertvalue %"char[]" undef, ptr %32, 0, !dbg !1287
  %37 = insertvalue %"char[]" %36, i64 8, 1, !dbg !1287
  %38 = extractvalue %"char[]" %37, 0, !dbg !1287
  %39 = extractvalue %"char[]" %30, 0, !dbg !1287
  %40 = extractvalue %"char[]" %30, 1, !dbg !1287
  %41 = extractvalue %"char[]" %37, 1, !dbg !1287
  %neq64 = icmp ne i64 %41, %40, !dbg !1287
  %42 = call i1 @llvm.expect.i1(i1 %neq64, i1 false), !dbg !1287
  br i1 %42, label %panic65, label %checkok75, !dbg !1287

checkok75:                                        ; preds = %checkok63
  %43 = mul i64 %40, 1, !dbg !1287
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %38, ptr align 1 %39, i64 %43, i1 false), !dbg !1287
  %44 = load i64, ptr %len, align 8, !dbg !1288
  %sub76 = sub i64 %44, 8, !dbg !1288
  store i64 %sub76, ptr %len, align 8, !dbg !1288
  %45 = load %"char[]", ptr %bytes, align 8, !dbg !1289
  %46 = extractvalue %"char[]" %45, 0, !dbg !1289
  %47 = extractvalue %"char[]" %45, 1, !dbg !1289
  %gt77 = icmp ugt i64 8, %47, !dbg !1289
  %48 = call i1 @llvm.expect.i1(i1 %gt77, i1 false), !dbg !1289
  br i1 %48, label %panic78, label %checkok88, !dbg !1289

checkok88:                                        ; preds = %checkok75
  %size89 = sub i64 %47, 8, !dbg !1289
  %ptradd90 = getelementptr inbounds i8, ptr %46, i64 8, !dbg !1289
  %49 = insertvalue %"char[]" undef, ptr %ptradd90, 0, !dbg !1289
  %50 = insertvalue %"char[]" %49, i64 %size89, 1, !dbg !1289
  store %"char[]" %50, ptr %bytes, align 8, !dbg !1289
  br label %loop.cond, !dbg !1289

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.80, i64 30 }, ptr %string, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg91, ptr align 8 %string, i32 16, i1 false)
  store %"char[]" { ptr @.str.81, i64 11 }, ptr %indirectarg92, align 8
  store %"char[]" { ptr @.str.82, i64 23 }, ptr %indirectarg93, align 8
  store %"any[]" zeroinitializer, ptr %indirectarg94, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg91, ptr align 8 %indirectarg92, ptr align 8 %indirectarg93, i32 39, ptr align 8 %indirectarg94), !dbg !1290
  unreachable, !dbg !1290

expr_block.exit:                                  ; preds = %checkok38
  ret void, !dbg !1290

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.79, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg2, align 8
  %51 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %51(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 39) #5, !dbg !1268
  unreachable, !dbg !1268

panic8:                                           ; preds = %if.then
  store i64 %sub, ptr %taddr9, align 8
  %52 = insertvalue %any undef, ptr %taddr9, 0
  %53 = insertvalue %any %52, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.14, i64 43 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg12, align 8
  store %any %53, ptr %varargslots, align 16
  %54 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %54, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg13, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, i32 153, ptr align 8 %indirectarg13) #5, !dbg !1284
  unreachable, !dbg !1284

panic16:                                          ; preds = %checkok14
  store i64 %18, ptr %taddr17, align 8
  %55 = insertvalue %any undef, ptr %taddr17, 0
  %56 = insertvalue %any %55, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr18, align 8
  %57 = insertvalue %any undef, ptr %taddr18, 0
  %58 = insertvalue %any %57, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.16, i64 61 }, ptr %indirectarg19, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg20, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg21, align 8
  store %any %56, ptr %varargslots22, align 16
  %ptradd23 = getelementptr inbounds i8, ptr %varargslots22, i64 16
  store %any %58, ptr %ptradd23, align 16
  %59 = insertvalue %"any[]" undef, ptr %varargslots22, 0
  %"$$temp24" = insertvalue %"any[]" %59, i64 2, 1
  store %"any[]" %"$$temp24", ptr %indirectarg25, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg19, ptr align 8 %indirectarg20, ptr align 8 %indirectarg21, i32 153, ptr align 8 %indirectarg25) #5, !dbg !1284
  unreachable, !dbg !1284

panic28:                                          ; preds = %checkok26
  store i64 %25, ptr %taddr29, align 8
  %60 = insertvalue %any undef, ptr %taddr29, 0
  %61 = insertvalue %any %60, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %24, ptr %taddr30, align 8
  %62 = insertvalue %any undef, ptr %taddr30, 0
  %63 = insertvalue %any %62, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 38 }, ptr %indirectarg31, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg32, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg33, align 8
  store %any %61, ptr %varargslots34, align 16
  %ptradd35 = getelementptr inbounds i8, ptr %varargslots34, i64 16
  store %any %63, ptr %ptradd35, align 16
  %64 = insertvalue %"any[]" undef, ptr %varargslots34, 0
  %"$$temp36" = insertvalue %"any[]" %64, i64 2, 1
  store %"any[]" %"$$temp36", ptr %indirectarg37, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg31, ptr align 8 %indirectarg32, ptr align 8 %indirectarg33, i32 153, ptr align 8 %indirectarg37) #5, !dbg !1284
  unreachable, !dbg !1284

panic41:                                          ; preds = %if.exit
  store i64 %33, ptr %taddr42, align 8
  %65 = insertvalue %any undef, ptr %taddr42, 0
  %66 = insertvalue %any %65, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr43, align 8
  %67 = insertvalue %any undef, ptr %taddr43, 0
  %68 = insertvalue %any %67, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.16, i64 61 }, ptr %indirectarg44, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg45, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg46, align 8
  store %any %66, ptr %varargslots47, align 16
  %ptradd48 = getelementptr inbounds i8, ptr %varargslots47, i64 16
  store %any %68, ptr %ptradd48, align 16
  %69 = insertvalue %"any[]" undef, ptr %varargslots47, 0
  %"$$temp49" = insertvalue %"any[]" %69, i64 2, 1
  store %"any[]" %"$$temp49", ptr %indirectarg50, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg44, ptr align 8 %indirectarg45, ptr align 8 %indirectarg46, i32 156, ptr align 8 %indirectarg50) #5, !dbg !1287
  unreachable, !dbg !1287

panic53:                                          ; preds = %checkok51
  store i64 7, ptr %taddr54, align 8
  %70 = insertvalue %any undef, ptr %taddr54, 0
  %71 = insertvalue %any %70, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %33, ptr %taddr55, align 8
  %72 = insertvalue %any undef, ptr %taddr55, 0
  %73 = insertvalue %any %72, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.18, i64 60 }, ptr %indirectarg56, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg57, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg58, align 8
  store %any %71, ptr %varargslots59, align 16
  %ptradd60 = getelementptr inbounds i8, ptr %varargslots59, i64 16
  store %any %73, ptr %ptradd60, align 16
  %74 = insertvalue %"any[]" undef, ptr %varargslots59, 0
  %"$$temp61" = insertvalue %"any[]" %74, i64 2, 1
  store %"any[]" %"$$temp61", ptr %indirectarg62, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg56, ptr align 8 %indirectarg57, ptr align 8 %indirectarg58, i32 156, ptr align 8 %indirectarg62) #5, !dbg !1287
  unreachable, !dbg !1287

panic65:                                          ; preds = %checkok63
  store i64 %41, ptr %taddr66, align 8
  %75 = insertvalue %any undef, ptr %taddr66, 0
  %76 = insertvalue %any %75, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %40, ptr %taddr67, align 8
  %77 = insertvalue %any undef, ptr %taddr67, 0
  %78 = insertvalue %any %77, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 38 }, ptr %indirectarg68, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg69, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg70, align 8
  store %any %76, ptr %varargslots71, align 16
  %ptradd72 = getelementptr inbounds i8, ptr %varargslots71, i64 16
  store %any %78, ptr %ptradd72, align 16
  %79 = insertvalue %"any[]" undef, ptr %varargslots71, 0
  %"$$temp73" = insertvalue %"any[]" %79, i64 2, 1
  store %"any[]" %"$$temp73", ptr %indirectarg74, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg68, ptr align 8 %indirectarg69, ptr align 8 %indirectarg70, i32 156, ptr align 8 %indirectarg74) #5, !dbg !1287
  unreachable, !dbg !1287

panic78:                                          ; preds = %checkok75
  store i64 %47, ptr %taddr79, align 8
  %80 = insertvalue %any undef, ptr %taddr79, 0
  %81 = insertvalue %any %80, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 8, ptr %taddr80, align 8
  %82 = insertvalue %any undef, ptr %taddr80, 0
  %83 = insertvalue %any %82, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.16, i64 61 }, ptr %indirectarg81, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg82, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg83, align 8
  store %any %81, ptr %varargslots84, align 16
  %ptradd85 = getelementptr inbounds i8, ptr %varargslots84, i64 16
  store %any %83, ptr %ptradd85, align 16
  %84 = insertvalue %"any[]" undef, ptr %varargslots84, 0
  %"$$temp86" = insertvalue %"any[]" %84, i64 2, 1
  store %"any[]" %"$$temp86", ptr %indirectarg87, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg81, ptr align 8 %indirectarg82, ptr align 8 %indirectarg83, i32 158, ptr align 8 %indirectarg87) #5, !dbg !1289
  unreachable, !dbg !1289
}

; Function Attrs: nounwind ssp uwtable
define weak_odr <2 x i64> @std.math.random.Pcg128Random.next_int128(ptr %0) #0 comdat !dbg !1293 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %taddr = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !1296
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1296
  br i1 %2, label %panic, label %checkok, !dbg !1296

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1297, !DIExpression(), !1296)
  %3 = load ptr, ptr %self, align 8, !dbg !1298
  %4 = call i64 @std.math.random.Pcg128Random.next_long(ptr %3), !dbg !1300
  %zext = zext i64 %4 to i128, !dbg !1300
  %shl = shl i128 %zext, 64, !dbg !1300
  %5 = freeze i128 %shl, !dbg !1300
  %6 = load ptr, ptr %self, align 8, !dbg !1298
  %7 = call i64 @std.math.random.Pcg128Random.next_long(ptr %6), !dbg !1300
  %zext3 = zext i64 %7 to i128, !dbg !1300
  %add = add i128 %5, %zext3, !dbg !1300
  store i128 %add, ptr %taddr, align 16
  %8 = load <2 x i64>, ptr %taddr, align 16
  ret <2 x i64> %8

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.79, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.21, i64 11 }, ptr %indirectarg2, align 8
  %9 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %9(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 40) #5, !dbg !1296
  unreachable, !dbg !1296
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i32 @std.math.random.Pcg128Random.next_int(ptr %0) #0 comdat !dbg !1301 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1304
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1304
  br i1 %2, label %panic, label %checkok, !dbg !1304

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1305, !DIExpression(), !1304)
  %3 = load ptr, ptr %self, align 8, !dbg !1304
  %4 = call i64 @std.math.random.Pcg128Random.next_long(ptr %3), !dbg !1304
  %trunc = trunc i64 %4 to i32, !dbg !1304
  ret i32 %trunc, !dbg !1304

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.79, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.22, i64 8 }, ptr %indirectarg2, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 41) #5, !dbg !1304
  unreachable, !dbg !1304
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i16 @std.math.random.Pcg128Random.next_short(ptr %0) #0 comdat !dbg !1306 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1309
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1309
  br i1 %2, label %panic, label %checkok, !dbg !1309

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1310, !DIExpression(), !1309)
  %3 = load ptr, ptr %self, align 8, !dbg !1309
  %4 = call i64 @std.math.random.Pcg128Random.next_long(ptr %3), !dbg !1309
  %trunc = trunc i64 %4 to i16, !dbg !1309
  ret i16 %trunc, !dbg !1309

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.79, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.23, i64 10 }, ptr %indirectarg2, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 42) #5, !dbg !1309
  unreachable, !dbg !1309
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i8 @std.math.random.Pcg128Random.next_byte(ptr %0) #0 comdat !dbg !1311 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1314
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1314
  br i1 %2, label %panic, label %checkok, !dbg !1314

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1315, !DIExpression(), !1314)
  %3 = load ptr, ptr %self, align 8, !dbg !1314
  %4 = call i64 @std.math.random.Pcg128Random.next_long(ptr %3), !dbg !1314
  %trunc = trunc i64 %4 to i8, !dbg !1314
  ret i8 %trunc, !dbg !1314

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.79, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.24, i64 9 }, ptr %indirectarg2, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 43) #5, !dbg !1314
  unreachable, !dbg !1314
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.math.random.Pcg64Random.set_seed(ptr %0, ptr align 8 %1) #0 comdat !dbg !1316 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %input = alloca %"char[]", align 8
  %return_value = alloca i64, align 8
  %taddr = alloca ptr, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg7 = alloca %"char[]", align 8
  %indirectarg8 = alloca %"char[]", align 8
  %taddr11 = alloca i64, align 8
  %taddr12 = alloca i64, align 8
  %indirectarg13 = alloca %"char[]", align 8
  %indirectarg14 = alloca %"char[]", align 8
  %indirectarg15 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg16 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !1321
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !1321
  br i1 %3, label %panic, label %checkok, !dbg !1321

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1322, !DIExpression(), !1323)
    #dbg_declare(ptr %1, !1324, !DIExpression(), !1323)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input, ptr align 8 %1, i32 16, i1 false)
    #dbg_declare(ptr %return_value, !1325, !DIExpression(), !1327)
  store i64 0, ptr %return_value, align 8, !dbg !1327
  store ptr %return_value, ptr %taddr, align 8
  %4 = load ptr, ptr %taddr, align 8
  %5 = insertvalue %"char[]" undef, ptr %4, 0
  %6 = insertvalue %"char[]" %5, i64 8, 1
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg3, ptr align 8 %input, i32 16, i1 false)
  store %"char[]" %6, ptr %indirectarg4, align 8
  call void @std.math.random.seeder(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4), !dbg !1329
  %7 = load ptr, ptr %self, align 8, !dbg !1328
  %checknull = icmp eq ptr %7, null, !dbg !1328
  %8 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1328
  br i1 %8, label %panic5, label %checkok9, !dbg !1328

checkok9:                                         ; preds = %checkok
  %9 = ptrtoint ptr %7 to i64, !dbg !1328
  %10 = urem i64 %9, 8, !dbg !1328
  %11 = icmp ne i64 %10, 0, !dbg !1328
  %12 = call i1 @llvm.expect.i1(i1 %11, i1 false), !dbg !1328
  br i1 %12, label %panic10, label %checkok17, !dbg !1328

checkok17:                                        ; preds = %checkok9
  %13 = load i64, ptr %return_value, align 8, !dbg !1328
  store i64 %13, ptr %7, align 8, !dbg !1328
  ret void, !dbg !1328

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.79, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func, i64 8 }, ptr %indirectarg2, align 8
  %14 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %14(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 49) #5, !dbg !1323
  unreachable, !dbg !1323

panic5:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.8, i64 45 }, ptr %indirectarg6, align 8
  store %"char[]" { ptr @.file.79, i64 11 }, ptr %indirectarg7, align 8
  store %"char[]" { ptr @.func, i64 8 }, ptr %indirectarg8, align 8
  %15 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %15(ptr align 8 %indirectarg6, ptr align 8 %indirectarg7, ptr align 8 %indirectarg8, i32 51) #5, !dbg !1328
  unreachable, !dbg !1328

panic10:                                          ; preds = %checkok9
  store i64 8, ptr %taddr11, align 8
  %16 = insertvalue %any undef, ptr %taddr11, 0
  %17 = insertvalue %any %16, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %10, ptr %taddr12, align 8
  %18 = insertvalue %any undef, ptr %taddr12, 0
  %19 = insertvalue %any %18, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg13, align 8
  store %"char[]" { ptr @.file.79, i64 11 }, ptr %indirectarg14, align 8
  store %"char[]" { ptr @.func, i64 8 }, ptr %indirectarg15, align 8
  store %any %17, ptr %varargslots, align 16
  %ptradd = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %19, ptr %ptradd, align 16
  %20 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %20, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg16, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg13, ptr align 8 %indirectarg14, ptr align 8 %indirectarg15, i32 51, ptr align 8 %indirectarg16) #5, !dbg !1328
  unreachable, !dbg !1328
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i32 @std.math.random.Pcg64Random.next_int(ptr %0) #0 comdat !dbg !1330 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %s = alloca ptr, align 8
  %xor = alloca i64, align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr9 = alloca i64, align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg13 = alloca %"any[]", align 8
  %indirectarg17 = alloca %"char[]", align 8
  %indirectarg18 = alloca %"char[]", align 8
  %indirectarg19 = alloca %"char[]", align 8
  %taddr22 = alloca i64, align 8
  %taddr23 = alloca i64, align 8
  %indirectarg24 = alloca %"char[]", align 8
  %indirectarg25 = alloca %"char[]", align 8
  %indirectarg26 = alloca %"char[]", align 8
  %varargslots27 = alloca [2 x %any], align 16
  %indirectarg30 = alloca %"any[]", align 8
  %rot = alloca i8, align 1
  %indirectarg35 = alloca %"char[]", align 8
  %indirectarg36 = alloca %"char[]", align 8
  %indirectarg37 = alloca %"char[]", align 8
  %taddr40 = alloca i64, align 8
  %taddr41 = alloca i64, align 8
  %indirectarg42 = alloca %"char[]", align 8
  %indirectarg43 = alloca %"char[]", align 8
  %indirectarg44 = alloca %"char[]", align 8
  %varargslots45 = alloca [2 x %any], align 16
  %indirectarg48 = alloca %"any[]", align 8
  %indirectarg53 = alloca %"char[]", align 8
  %indirectarg54 = alloca %"char[]", align 8
  %indirectarg55 = alloca %"char[]", align 8
  %taddr58 = alloca i64, align 8
  %taddr59 = alloca i64, align 8
  %indirectarg60 = alloca %"char[]", align 8
  %indirectarg61 = alloca %"char[]", align 8
  %indirectarg62 = alloca %"char[]", align 8
  %varargslots63 = alloca [2 x %any], align 16
  %indirectarg66 = alloca %"any[]", align 8
  %indirectarg70 = alloca %"char[]", align 8
  %indirectarg71 = alloca %"char[]", align 8
  %indirectarg72 = alloca %"char[]", align 8
  %taddr75 = alloca i64, align 8
  %taddr76 = alloca i64, align 8
  %indirectarg77 = alloca %"char[]", align 8
  %indirectarg78 = alloca %"char[]", align 8
  %indirectarg79 = alloca %"char[]", align 8
  %varargslots80 = alloca [2 x %any], align 16
  %indirectarg83 = alloca %"any[]", align 8
  %self87 = alloca i32, align 4
  %shift = alloca i32, align 4
  %1 = icmp eq ptr %0, null, !dbg !1333
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1333
  br i1 %2, label %panic, label %checkok, !dbg !1333

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1334, !DIExpression(), !1335)
    #dbg_declare(ptr %s, !1336, !DIExpression(), !1337)
  %3 = load ptr, ptr %self, align 8, !dbg !1337
  store ptr %3, ptr %s, align 8, !dbg !1337
    #dbg_declare(ptr %xor, !1338, !DIExpression(), !1339)
  %4 = load ptr, ptr %s, align 8, !dbg !1339
  %checknull = icmp eq ptr %4, null, !dbg !1339
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1339
  br i1 %5, label %panic3, label %checkok7, !dbg !1339

checkok7:                                         ; preds = %checkok
  %6 = ptrtoint ptr %4 to i64, !dbg !1339
  %7 = urem i64 %6, 8, !dbg !1339
  %8 = icmp ne i64 %7, 0, !dbg !1339
  %9 = call i1 @llvm.expect.i1(i1 %8, i1 false), !dbg !1339
  br i1 %9, label %panic8, label %checkok14, !dbg !1339

checkok14:                                        ; preds = %checkok7
  %10 = load i64, ptr %4, align 8, !dbg !1339
  %11 = load ptr, ptr %s, align 8, !dbg !1339
  %checknull15 = icmp eq ptr %11, null, !dbg !1339
  %12 = call i1 @llvm.expect.i1(i1 %checknull15, i1 false), !dbg !1339
  br i1 %12, label %panic16, label %checkok20, !dbg !1339

checkok20:                                        ; preds = %checkok14
  %13 = ptrtoint ptr %11 to i64, !dbg !1339
  %14 = urem i64 %13, 8, !dbg !1339
  %15 = icmp ne i64 %14, 0, !dbg !1339
  %16 = call i1 @llvm.expect.i1(i1 %15, i1 false), !dbg !1339
  br i1 %16, label %panic21, label %checkok31, !dbg !1339

checkok31:                                        ; preds = %checkok20
  %17 = load i64, ptr %11, align 8, !dbg !1339
  %lshr = lshr i64 %17, 18, !dbg !1339
  %18 = freeze i64 %lshr, !dbg !1339
  %xor32 = xor i64 %10, %18, !dbg !1339
  store i64 %xor32, ptr %xor, align 8, !dbg !1339
    #dbg_declare(ptr %rot, !1340, !DIExpression(), !1341)
  %19 = load ptr, ptr %s, align 8, !dbg !1341
  %checknull33 = icmp eq ptr %19, null, !dbg !1341
  %20 = call i1 @llvm.expect.i1(i1 %checknull33, i1 false), !dbg !1341
  br i1 %20, label %panic34, label %checkok38, !dbg !1341

checkok38:                                        ; preds = %checkok31
  %21 = ptrtoint ptr %19 to i64, !dbg !1341
  %22 = urem i64 %21, 8, !dbg !1341
  %23 = icmp ne i64 %22, 0, !dbg !1341
  %24 = call i1 @llvm.expect.i1(i1 %23, i1 false), !dbg !1341
  br i1 %24, label %panic39, label %checkok49, !dbg !1341

checkok49:                                        ; preds = %checkok38
  %25 = load i64, ptr %19, align 8, !dbg !1341
  %lshr50 = lshr i64 %25, 59, !dbg !1341
  %26 = freeze i64 %lshr50, !dbg !1341
  %trunc = trunc i64 %26 to i8, !dbg !1341
  store i8 %trunc, ptr %rot, align 1, !dbg !1341
  %27 = load ptr, ptr %s, align 8, !dbg !1342
  %checknull51 = icmp eq ptr %27, null, !dbg !1342
  %28 = call i1 @llvm.expect.i1(i1 %checknull51, i1 false), !dbg !1342
  br i1 %28, label %panic52, label %checkok56, !dbg !1342

checkok56:                                        ; preds = %checkok49
  %29 = ptrtoint ptr %27 to i64, !dbg !1342
  %30 = urem i64 %29, 8, !dbg !1342
  %31 = icmp ne i64 %30, 0, !dbg !1342
  %32 = call i1 @llvm.expect.i1(i1 %31, i1 false), !dbg !1342
  br i1 %32, label %panic57, label %checkok67, !dbg !1342

checkok67:                                        ; preds = %checkok56
  %33 = load i64, ptr %27, align 8, !dbg !1342
  %mul = mul i64 %33, -3372029247567499371, !dbg !1342
  %add = add i64 %mul, -7046029254386353131, !dbg !1342
  %34 = load ptr, ptr %s, align 8, !dbg !1342
  %checknull68 = icmp eq ptr %34, null, !dbg !1342
  %35 = call i1 @llvm.expect.i1(i1 %checknull68, i1 false), !dbg !1342
  br i1 %35, label %panic69, label %checkok73, !dbg !1342

checkok73:                                        ; preds = %checkok67
  %36 = ptrtoint ptr %34 to i64, !dbg !1342
  %37 = urem i64 %36, 8, !dbg !1342
  %38 = icmp ne i64 %37, 0, !dbg !1342
  %39 = call i1 @llvm.expect.i1(i1 %38, i1 false), !dbg !1342
  br i1 %39, label %panic74, label %checkok84, !dbg !1342

checkok84:                                        ; preds = %checkok73
  store i64 %add, ptr %34, align 8, !dbg !1342
  %40 = load i64, ptr %xor, align 8, !dbg !1343
  %lshr85 = lshr i64 %40, 27, !dbg !1343
  %41 = freeze i64 %lshr85, !dbg !1343
  %trunc86 = trunc i64 %41 to i32, !dbg !1343
  store i32 %trunc86, ptr %self87, align 4
  %42 = load i8, ptr %rot, align 1, !dbg !1343
  %zext = zext i8 %42 to i32, !dbg !1343
  store i32 %zext, ptr %shift, align 4
  %43 = load i32, ptr %self87, align 4, !dbg !1344
  %44 = load i32, ptr %self87, align 4, !dbg !1344
  %45 = load i32, ptr %shift, align 4, !dbg !1344
  %46 = call i32 @llvm.fshr.i32(i32 %43, i32 %44, i32 %45), !dbg !1344
  ret i32 %46, !dbg !1344

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.79, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.22, i64 8 }, ptr %indirectarg2, align 8
  %47 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %47(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 54) #5, !dbg !1335
  unreachable, !dbg !1335

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.11, i64 42 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.79, i64 11 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.22, i64 8 }, ptr %indirectarg6, align 8
  %48 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %48(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 58) #5, !dbg !1339
  unreachable, !dbg !1339

panic8:                                           ; preds = %checkok7
  store i64 8, ptr %taddr, align 8
  %49 = insertvalue %any undef, ptr %taddr, 0
  %50 = insertvalue %any %49, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %7, ptr %taddr9, align 8
  %51 = insertvalue %any undef, ptr %taddr9, 0
  %52 = insertvalue %any %51, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.file.79, i64 11 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.func.22, i64 8 }, ptr %indirectarg12, align 8
  store %any %50, ptr %varargslots, align 16
  %ptradd = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %52, ptr %ptradd, align 16
  %53 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %53, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg13, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, i32 58, ptr align 8 %indirectarg13) #5, !dbg !1339
  unreachable, !dbg !1339

panic16:                                          ; preds = %checkok14
  store %"char[]" { ptr @.panic_msg.11, i64 42 }, ptr %indirectarg17, align 8
  store %"char[]" { ptr @.file.79, i64 11 }, ptr %indirectarg18, align 8
  store %"char[]" { ptr @.func.22, i64 8 }, ptr %indirectarg19, align 8
  %54 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %54(ptr align 8 %indirectarg17, ptr align 8 %indirectarg18, ptr align 8 %indirectarg19, i32 58) #5, !dbg !1339
  unreachable, !dbg !1339

panic21:                                          ; preds = %checkok20
  store i64 8, ptr %taddr22, align 8
  %55 = insertvalue %any undef, ptr %taddr22, 0
  %56 = insertvalue %any %55, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %14, ptr %taddr23, align 8
  %57 = insertvalue %any undef, ptr %taddr23, 0
  %58 = insertvalue %any %57, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg24, align 8
  store %"char[]" { ptr @.file.79, i64 11 }, ptr %indirectarg25, align 8
  store %"char[]" { ptr @.func.22, i64 8 }, ptr %indirectarg26, align 8
  store %any %56, ptr %varargslots27, align 16
  %ptradd28 = getelementptr inbounds i8, ptr %varargslots27, i64 16
  store %any %58, ptr %ptradd28, align 16
  %59 = insertvalue %"any[]" undef, ptr %varargslots27, 0
  %"$$temp29" = insertvalue %"any[]" %59, i64 2, 1
  store %"any[]" %"$$temp29", ptr %indirectarg30, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg24, ptr align 8 %indirectarg25, ptr align 8 %indirectarg26, i32 58, ptr align 8 %indirectarg30) #5, !dbg !1339
  unreachable, !dbg !1339

panic34:                                          ; preds = %checkok31
  store %"char[]" { ptr @.panic_msg.11, i64 42 }, ptr %indirectarg35, align 8
  store %"char[]" { ptr @.file.79, i64 11 }, ptr %indirectarg36, align 8
  store %"char[]" { ptr @.func.22, i64 8 }, ptr %indirectarg37, align 8
  %60 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %60(ptr align 8 %indirectarg35, ptr align 8 %indirectarg36, ptr align 8 %indirectarg37, i32 59) #5, !dbg !1341
  unreachable, !dbg !1341

panic39:                                          ; preds = %checkok38
  store i64 8, ptr %taddr40, align 8
  %61 = insertvalue %any undef, ptr %taddr40, 0
  %62 = insertvalue %any %61, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %22, ptr %taddr41, align 8
  %63 = insertvalue %any undef, ptr %taddr41, 0
  %64 = insertvalue %any %63, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg42, align 8
  store %"char[]" { ptr @.file.79, i64 11 }, ptr %indirectarg43, align 8
  store %"char[]" { ptr @.func.22, i64 8 }, ptr %indirectarg44, align 8
  store %any %62, ptr %varargslots45, align 16
  %ptradd46 = getelementptr inbounds i8, ptr %varargslots45, i64 16
  store %any %64, ptr %ptradd46, align 16
  %65 = insertvalue %"any[]" undef, ptr %varargslots45, 0
  %"$$temp47" = insertvalue %"any[]" %65, i64 2, 1
  store %"any[]" %"$$temp47", ptr %indirectarg48, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg42, ptr align 8 %indirectarg43, ptr align 8 %indirectarg44, i32 59, ptr align 8 %indirectarg48) #5, !dbg !1341
  unreachable, !dbg !1341

panic52:                                          ; preds = %checkok49
  store %"char[]" { ptr @.panic_msg.11, i64 42 }, ptr %indirectarg53, align 8
  store %"char[]" { ptr @.file.79, i64 11 }, ptr %indirectarg54, align 8
  store %"char[]" { ptr @.func.22, i64 8 }, ptr %indirectarg55, align 8
  %66 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %66(ptr align 8 %indirectarg53, ptr align 8 %indirectarg54, ptr align 8 %indirectarg55, i32 60) #5, !dbg !1342
  unreachable, !dbg !1342

panic57:                                          ; preds = %checkok56
  store i64 8, ptr %taddr58, align 8
  %67 = insertvalue %any undef, ptr %taddr58, 0
  %68 = insertvalue %any %67, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %30, ptr %taddr59, align 8
  %69 = insertvalue %any undef, ptr %taddr59, 0
  %70 = insertvalue %any %69, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg60, align 8
  store %"char[]" { ptr @.file.79, i64 11 }, ptr %indirectarg61, align 8
  store %"char[]" { ptr @.func.22, i64 8 }, ptr %indirectarg62, align 8
  store %any %68, ptr %varargslots63, align 16
  %ptradd64 = getelementptr inbounds i8, ptr %varargslots63, i64 16
  store %any %70, ptr %ptradd64, align 16
  %71 = insertvalue %"any[]" undef, ptr %varargslots63, 0
  %"$$temp65" = insertvalue %"any[]" %71, i64 2, 1
  store %"any[]" %"$$temp65", ptr %indirectarg66, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg60, ptr align 8 %indirectarg61, ptr align 8 %indirectarg62, i32 60, ptr align 8 %indirectarg66) #5, !dbg !1342
  unreachable, !dbg !1342

panic69:                                          ; preds = %checkok67
  store %"char[]" { ptr @.panic_msg.11, i64 42 }, ptr %indirectarg70, align 8
  store %"char[]" { ptr @.file.79, i64 11 }, ptr %indirectarg71, align 8
  store %"char[]" { ptr @.func.22, i64 8 }, ptr %indirectarg72, align 8
  %72 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %72(ptr align 8 %indirectarg70, ptr align 8 %indirectarg71, ptr align 8 %indirectarg72, i32 60) #5, !dbg !1342
  unreachable, !dbg !1342

panic74:                                          ; preds = %checkok73
  store i64 8, ptr %taddr75, align 8
  %73 = insertvalue %any undef, ptr %taddr75, 0
  %74 = insertvalue %any %73, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %37, ptr %taddr76, align 8
  %75 = insertvalue %any undef, ptr %taddr76, 0
  %76 = insertvalue %any %75, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg77, align 8
  store %"char[]" { ptr @.file.79, i64 11 }, ptr %indirectarg78, align 8
  store %"char[]" { ptr @.func.22, i64 8 }, ptr %indirectarg79, align 8
  store %any %74, ptr %varargslots80, align 16
  %ptradd81 = getelementptr inbounds i8, ptr %varargslots80, i64 16
  store %any %76, ptr %ptradd81, align 16
  %77 = insertvalue %"any[]" undef, ptr %varargslots80, 0
  %"$$temp82" = insertvalue %"any[]" %77, i64 2, 1
  store %"any[]" %"$$temp82", ptr %indirectarg83, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg77, ptr align 8 %indirectarg78, ptr align 8 %indirectarg79, i32 60, ptr align 8 %indirectarg83) #5, !dbg !1342
  unreachable, !dbg !1342
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.math.random.Pcg64Random.next_bytes(ptr %0, ptr align 8 %1) #0 comdat !dbg !1346 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %bytes = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i32, align 4
  %taddr = alloca ptr, align 8
  %taddr9 = alloca i64, align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg13 = alloca %"any[]", align 8
  %taddr17 = alloca i64, align 8
  %taddr18 = alloca i64, align 8
  %indirectarg19 = alloca %"char[]", align 8
  %indirectarg20 = alloca %"char[]", align 8
  %indirectarg21 = alloca %"char[]", align 8
  %varargslots22 = alloca [2 x %any], align 16
  %indirectarg25 = alloca %"any[]", align 8
  %taddr29 = alloca i64, align 8
  %taddr30 = alloca i64, align 8
  %indirectarg31 = alloca %"char[]", align 8
  %indirectarg32 = alloca %"char[]", align 8
  %indirectarg33 = alloca %"char[]", align 8
  %varargslots34 = alloca [2 x %any], align 16
  %indirectarg37 = alloca %"any[]", align 8
  %taddr39 = alloca ptr, align 8
  %taddr42 = alloca i64, align 8
  %taddr43 = alloca i64, align 8
  %indirectarg44 = alloca %"char[]", align 8
  %indirectarg45 = alloca %"char[]", align 8
  %indirectarg46 = alloca %"char[]", align 8
  %varargslots47 = alloca [2 x %any], align 16
  %indirectarg50 = alloca %"any[]", align 8
  %taddr54 = alloca i64, align 8
  %taddr55 = alloca i64, align 8
  %indirectarg56 = alloca %"char[]", align 8
  %indirectarg57 = alloca %"char[]", align 8
  %indirectarg58 = alloca %"char[]", align 8
  %varargslots59 = alloca [2 x %any], align 16
  %indirectarg62 = alloca %"any[]", align 8
  %taddr66 = alloca i64, align 8
  %taddr67 = alloca i64, align 8
  %indirectarg68 = alloca %"char[]", align 8
  %indirectarg69 = alloca %"char[]", align 8
  %indirectarg70 = alloca %"char[]", align 8
  %varargslots71 = alloca [2 x %any], align 16
  %indirectarg74 = alloca %"any[]", align 8
  %taddr79 = alloca i64, align 8
  %taddr80 = alloca i64, align 8
  %indirectarg81 = alloca %"char[]", align 8
  %indirectarg82 = alloca %"char[]", align 8
  %indirectarg83 = alloca %"char[]", align 8
  %varargslots84 = alloca [2 x %any], align 16
  %indirectarg87 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg91 = alloca %"char[]", align 8
  %indirectarg92 = alloca %"char[]", align 8
  %indirectarg93 = alloca %"char[]", align 8
  %indirectarg94 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !1347
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !1347
  br i1 %3, label %panic, label %checkok, !dbg !1347

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1348, !DIExpression(), !1347)
    #dbg_declare(ptr %1, !1349, !DIExpression(), !1347)
  %ptradd = getelementptr inbounds i8, ptr %1, i64 8, !dbg !1350
  %4 = load i64, ptr %ptradd, align 8, !dbg !1350
  %lt = icmp ult i64 0, %4, !dbg !1350
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !1350

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.13, i64 34 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.file.79, i64 11 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg5, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, i32 65) #5, !dbg !1350
  unreachable, !dbg !1350

assert_ok:                                        ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes, ptr align 8 %1, i32 16, i1 false)
    #dbg_declare(ptr %len, !1352, !DIExpression(), !1354)
  %ptradd6 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !1354
  %6 = load i64, ptr %ptradd6, align 8, !dbg !1354
  store i64 %6, ptr %len, align 8, !dbg !1354
  br label %loop.cond, !dbg !1355

loop.cond:                                        ; preds = %checkok88, %assert_ok
  %7 = load i64, ptr %len, align 8, !dbg !1356
  %lt7 = icmp ult i64 0, %7, !dbg !1356
  br i1 %lt7, label %loop.body, label %loop.exit, !dbg !1356

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %value, !1358, !DIExpression(), !1360)
  %8 = load ptr, ptr %self, align 8, !dbg !1361
  %9 = call i32 @std.math.random.Pcg64Random.next_int(ptr %8), !dbg !1360
  store i32 %9, ptr %value, align 4, !dbg !1360
  %10 = load i64, ptr %len, align 8, !dbg !1362
  %le = icmp ule i64 %10, 4, !dbg !1362
  br i1 %le, label %if.then, label %if.exit, !dbg !1362

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %11 = load ptr, ptr %taddr, align 8
  %12 = load i64, ptr %len, align 8, !dbg !1363
  %add = add i64 0, %12, !dbg !1363
  %gt = icmp ugt i64 0, %add, !dbg !1363
  %sub = sub i64 %add, 0, !dbg !1363
  %13 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !1363
  br i1 %13, label %panic8, label %checkok14, !dbg !1363

checkok14:                                        ; preds = %if.then
  %size = sub i64 %add, 0, !dbg !1363
  %14 = insertvalue %"char[]" undef, ptr %11, 0, !dbg !1363
  %15 = insertvalue %"char[]" %14, i64 %size, 1, !dbg !1363
  %16 = load %"char[]", ptr %bytes, align 8, !dbg !1363
  %17 = extractvalue %"char[]" %16, 0, !dbg !1363
  %18 = extractvalue %"char[]" %16, 1, !dbg !1363
  %gt15 = icmp ugt i64 0, %18, !dbg !1363
  %19 = call i1 @llvm.expect.i1(i1 %gt15, i1 false), !dbg !1363
  br i1 %19, label %panic16, label %checkok26, !dbg !1363

checkok26:                                        ; preds = %checkok14
  %size27 = sub i64 %18, 0, !dbg !1363
  %20 = insertvalue %"char[]" undef, ptr %17, 0, !dbg !1363
  %21 = insertvalue %"char[]" %20, i64 %size27, 1, !dbg !1363
  %22 = extractvalue %"char[]" %21, 0, !dbg !1363
  %23 = extractvalue %"char[]" %15, 0, !dbg !1363
  %24 = extractvalue %"char[]" %15, 1, !dbg !1363
  %25 = extractvalue %"char[]" %21, 1, !dbg !1363
  %neq = icmp ne i64 %25, %24, !dbg !1363
  %26 = call i1 @llvm.expect.i1(i1 %neq, i1 false), !dbg !1363
  br i1 %26, label %panic28, label %checkok38, !dbg !1363

checkok38:                                        ; preds = %checkok26
  %27 = mul i64 %24, 1, !dbg !1363
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %22, ptr align 1 %23, i64 %27, i1 false), !dbg !1363
  br label %expr_block.exit, !dbg !1365

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr39, align 8
  %28 = load ptr, ptr %taddr39, align 8
  %29 = insertvalue %"char[]" undef, ptr %28, 0
  %30 = insertvalue %"char[]" %29, i64 4, 1
  %31 = load %"char[]", ptr %bytes, align 8, !dbg !1366
  %32 = extractvalue %"char[]" %31, 0, !dbg !1366
  %33 = extractvalue %"char[]" %31, 1, !dbg !1366
  %gt40 = icmp sgt i64 0, %33, !dbg !1366
  %34 = call i1 @llvm.expect.i1(i1 %gt40, i1 false), !dbg !1366
  br i1 %34, label %panic41, label %checkok51, !dbg !1366

checkok51:                                        ; preds = %if.exit
  %lt52 = icmp slt i64 %33, 4, !dbg !1366
  %35 = call i1 @llvm.expect.i1(i1 %lt52, i1 false), !dbg !1366
  br i1 %35, label %panic53, label %checkok63, !dbg !1366

checkok63:                                        ; preds = %checkok51
  %36 = insertvalue %"char[]" undef, ptr %32, 0, !dbg !1366
  %37 = insertvalue %"char[]" %36, i64 4, 1, !dbg !1366
  %38 = extractvalue %"char[]" %37, 0, !dbg !1366
  %39 = extractvalue %"char[]" %30, 0, !dbg !1366
  %40 = extractvalue %"char[]" %30, 1, !dbg !1366
  %41 = extractvalue %"char[]" %37, 1, !dbg !1366
  %neq64 = icmp ne i64 %41, %40, !dbg !1366
  %42 = call i1 @llvm.expect.i1(i1 %neq64, i1 false), !dbg !1366
  br i1 %42, label %panic65, label %checkok75, !dbg !1366

checkok75:                                        ; preds = %checkok63
  %43 = mul i64 %40, 1, !dbg !1366
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %38, ptr align 1 %39, i64 %43, i1 false), !dbg !1366
  %44 = load i64, ptr %len, align 8, !dbg !1367
  %sub76 = sub i64 %44, 4, !dbg !1367
  store i64 %sub76, ptr %len, align 8, !dbg !1367
  %45 = load %"char[]", ptr %bytes, align 8, !dbg !1368
  %46 = extractvalue %"char[]" %45, 0, !dbg !1368
  %47 = extractvalue %"char[]" %45, 1, !dbg !1368
  %gt77 = icmp ugt i64 4, %47, !dbg !1368
  %48 = call i1 @llvm.expect.i1(i1 %gt77, i1 false), !dbg !1368
  br i1 %48, label %panic78, label %checkok88, !dbg !1368

checkok88:                                        ; preds = %checkok75
  %size89 = sub i64 %47, 4, !dbg !1368
  %ptradd90 = getelementptr inbounds i8, ptr %46, i64 4, !dbg !1368
  %49 = insertvalue %"char[]" undef, ptr %ptradd90, 0, !dbg !1368
  %50 = insertvalue %"char[]" %49, i64 %size89, 1, !dbg !1368
  store %"char[]" %50, ptr %bytes, align 8, !dbg !1368
  br label %loop.cond, !dbg !1368

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.83, i64 30 }, ptr %string, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg91, ptr align 8 %string, i32 16, i1 false)
  store %"char[]" { ptr @.str.84, i64 11 }, ptr %indirectarg92, align 8
  store %"char[]" { ptr @.str.85, i64 22 }, ptr %indirectarg93, align 8
  store %"any[]" zeroinitializer, ptr %indirectarg94, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg91, ptr align 8 %indirectarg92, ptr align 8 %indirectarg93, i32 67, ptr align 8 %indirectarg94), !dbg !1369
  unreachable, !dbg !1369

expr_block.exit:                                  ; preds = %checkok38
  ret void, !dbg !1369

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.79, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg2, align 8
  %51 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %51(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 67) #5, !dbg !1347
  unreachable, !dbg !1347

panic8:                                           ; preds = %if.then
  store i64 %sub, ptr %taddr9, align 8
  %52 = insertvalue %any undef, ptr %taddr9, 0
  %53 = insertvalue %any %52, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.14, i64 43 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg12, align 8
  store %any %53, ptr %varargslots, align 16
  %54 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %54, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg13, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, i32 153, ptr align 8 %indirectarg13) #5, !dbg !1363
  unreachable, !dbg !1363

panic16:                                          ; preds = %checkok14
  store i64 %18, ptr %taddr17, align 8
  %55 = insertvalue %any undef, ptr %taddr17, 0
  %56 = insertvalue %any %55, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr18, align 8
  %57 = insertvalue %any undef, ptr %taddr18, 0
  %58 = insertvalue %any %57, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.16, i64 61 }, ptr %indirectarg19, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg20, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg21, align 8
  store %any %56, ptr %varargslots22, align 16
  %ptradd23 = getelementptr inbounds i8, ptr %varargslots22, i64 16
  store %any %58, ptr %ptradd23, align 16
  %59 = insertvalue %"any[]" undef, ptr %varargslots22, 0
  %"$$temp24" = insertvalue %"any[]" %59, i64 2, 1
  store %"any[]" %"$$temp24", ptr %indirectarg25, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg19, ptr align 8 %indirectarg20, ptr align 8 %indirectarg21, i32 153, ptr align 8 %indirectarg25) #5, !dbg !1363
  unreachable, !dbg !1363

panic28:                                          ; preds = %checkok26
  store i64 %25, ptr %taddr29, align 8
  %60 = insertvalue %any undef, ptr %taddr29, 0
  %61 = insertvalue %any %60, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %24, ptr %taddr30, align 8
  %62 = insertvalue %any undef, ptr %taddr30, 0
  %63 = insertvalue %any %62, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 38 }, ptr %indirectarg31, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg32, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg33, align 8
  store %any %61, ptr %varargslots34, align 16
  %ptradd35 = getelementptr inbounds i8, ptr %varargslots34, i64 16
  store %any %63, ptr %ptradd35, align 16
  %64 = insertvalue %"any[]" undef, ptr %varargslots34, 0
  %"$$temp36" = insertvalue %"any[]" %64, i64 2, 1
  store %"any[]" %"$$temp36", ptr %indirectarg37, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg31, ptr align 8 %indirectarg32, ptr align 8 %indirectarg33, i32 153, ptr align 8 %indirectarg37) #5, !dbg !1363
  unreachable, !dbg !1363

panic41:                                          ; preds = %if.exit
  store i64 %33, ptr %taddr42, align 8
  %65 = insertvalue %any undef, ptr %taddr42, 0
  %66 = insertvalue %any %65, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr43, align 8
  %67 = insertvalue %any undef, ptr %taddr43, 0
  %68 = insertvalue %any %67, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.16, i64 61 }, ptr %indirectarg44, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg45, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg46, align 8
  store %any %66, ptr %varargslots47, align 16
  %ptradd48 = getelementptr inbounds i8, ptr %varargslots47, i64 16
  store %any %68, ptr %ptradd48, align 16
  %69 = insertvalue %"any[]" undef, ptr %varargslots47, 0
  %"$$temp49" = insertvalue %"any[]" %69, i64 2, 1
  store %"any[]" %"$$temp49", ptr %indirectarg50, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg44, ptr align 8 %indirectarg45, ptr align 8 %indirectarg46, i32 156, ptr align 8 %indirectarg50) #5, !dbg !1366
  unreachable, !dbg !1366

panic53:                                          ; preds = %checkok51
  store i64 3, ptr %taddr54, align 8
  %70 = insertvalue %any undef, ptr %taddr54, 0
  %71 = insertvalue %any %70, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %33, ptr %taddr55, align 8
  %72 = insertvalue %any undef, ptr %taddr55, 0
  %73 = insertvalue %any %72, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.18, i64 60 }, ptr %indirectarg56, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg57, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg58, align 8
  store %any %71, ptr %varargslots59, align 16
  %ptradd60 = getelementptr inbounds i8, ptr %varargslots59, i64 16
  store %any %73, ptr %ptradd60, align 16
  %74 = insertvalue %"any[]" undef, ptr %varargslots59, 0
  %"$$temp61" = insertvalue %"any[]" %74, i64 2, 1
  store %"any[]" %"$$temp61", ptr %indirectarg62, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg56, ptr align 8 %indirectarg57, ptr align 8 %indirectarg58, i32 156, ptr align 8 %indirectarg62) #5, !dbg !1366
  unreachable, !dbg !1366

panic65:                                          ; preds = %checkok63
  store i64 %41, ptr %taddr66, align 8
  %75 = insertvalue %any undef, ptr %taddr66, 0
  %76 = insertvalue %any %75, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %40, ptr %taddr67, align 8
  %77 = insertvalue %any undef, ptr %taddr67, 0
  %78 = insertvalue %any %77, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 38 }, ptr %indirectarg68, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg69, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg70, align 8
  store %any %76, ptr %varargslots71, align 16
  %ptradd72 = getelementptr inbounds i8, ptr %varargslots71, i64 16
  store %any %78, ptr %ptradd72, align 16
  %79 = insertvalue %"any[]" undef, ptr %varargslots71, 0
  %"$$temp73" = insertvalue %"any[]" %79, i64 2, 1
  store %"any[]" %"$$temp73", ptr %indirectarg74, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg68, ptr align 8 %indirectarg69, ptr align 8 %indirectarg70, i32 156, ptr align 8 %indirectarg74) #5, !dbg !1366
  unreachable, !dbg !1366

panic78:                                          ; preds = %checkok75
  store i64 %47, ptr %taddr79, align 8
  %80 = insertvalue %any undef, ptr %taddr79, 0
  %81 = insertvalue %any %80, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 4, ptr %taddr80, align 8
  %82 = insertvalue %any undef, ptr %taddr80, 0
  %83 = insertvalue %any %82, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.16, i64 61 }, ptr %indirectarg81, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg82, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg83, align 8
  store %any %81, ptr %varargslots84, align 16
  %ptradd85 = getelementptr inbounds i8, ptr %varargslots84, i64 16
  store %any %83, ptr %ptradd85, align 16
  %84 = insertvalue %"any[]" undef, ptr %varargslots84, 0
  %"$$temp86" = insertvalue %"any[]" %84, i64 2, 1
  store %"any[]" %"$$temp86", ptr %indirectarg87, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg81, ptr align 8 %indirectarg82, ptr align 8 %indirectarg83, i32 158, ptr align 8 %indirectarg87) #5, !dbg !1368
  unreachable, !dbg !1368
}

; Function Attrs: nounwind ssp uwtable
define weak_odr <2 x i64> @std.math.random.Pcg64Random.next_int128(ptr %0) #0 comdat !dbg !1372 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %taddr = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !1375
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1375
  br i1 %2, label %panic, label %checkok, !dbg !1375

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1376, !DIExpression(), !1375)
  %3 = load ptr, ptr %self, align 8, !dbg !1377
  %4 = call i64 @std.math.random.Pcg64Random.next_long(ptr %3), !dbg !1379
  %zext = zext i64 %4 to i128, !dbg !1379
  %shl = shl i128 %zext, 64, !dbg !1379
  %5 = freeze i128 %shl, !dbg !1379
  %6 = load ptr, ptr %self, align 8, !dbg !1377
  %7 = call i64 @std.math.random.Pcg64Random.next_long(ptr %6), !dbg !1379
  %zext3 = zext i64 %7 to i128, !dbg !1379
  %add = add i128 %5, %zext3, !dbg !1379
  store i128 %add, ptr %taddr, align 16
  %8 = load <2 x i64>, ptr %taddr, align 16
  ret <2 x i64> %8

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.79, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.21, i64 11 }, ptr %indirectarg2, align 8
  %9 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %9(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 68) #5, !dbg !1375
  unreachable, !dbg !1375
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.math.random.Pcg64Random.next_long(ptr %0) #0 comdat !dbg !1380 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1383
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1383
  br i1 %2, label %panic, label %checkok, !dbg !1383

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1384, !DIExpression(), !1383)
  %3 = load ptr, ptr %self, align 8, !dbg !1385
  %4 = call i32 @std.math.random.Pcg64Random.next_int(ptr %3), !dbg !1387
  %zext = zext i32 %4 to i64, !dbg !1387
  %shl = shl i64 %zext, 32, !dbg !1387
  %5 = freeze i64 %shl, !dbg !1387
  %6 = load ptr, ptr %self, align 8, !dbg !1385
  %7 = call i32 @std.math.random.Pcg64Random.next_int(ptr %6), !dbg !1387
  %zext3 = zext i32 %7 to i64, !dbg !1387
  %add = add i64 %5, %zext3, !dbg !1387
  ret i64 %add, !dbg !1387

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.79, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.10, i64 9 }, ptr %indirectarg2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 69) #5, !dbg !1383
  unreachable, !dbg !1383
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i16 @std.math.random.Pcg64Random.next_short(ptr %0) #0 comdat !dbg !1388 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1391
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1391
  br i1 %2, label %panic, label %checkok, !dbg !1391

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1392, !DIExpression(), !1391)
  %3 = load ptr, ptr %self, align 8, !dbg !1391
  %4 = call i32 @std.math.random.Pcg64Random.next_int(ptr %3), !dbg !1391
  %trunc = trunc i32 %4 to i16, !dbg !1391
  ret i16 %trunc, !dbg !1391

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.79, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.23, i64 10 }, ptr %indirectarg2, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 70) #5, !dbg !1391
  unreachable, !dbg !1391
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i8 @std.math.random.Pcg64Random.next_byte(ptr %0) #0 comdat !dbg !1393 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1396
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1396
  br i1 %2, label %panic, label %checkok, !dbg !1396

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1397, !DIExpression(), !1396)
  %3 = load ptr, ptr %self, align 8, !dbg !1396
  %4 = call i32 @std.math.random.Pcg64Random.next_int(ptr %3), !dbg !1396
  %trunc = trunc i32 %4 to i8, !dbg !1396
  ret i8 %trunc, !dbg !1396

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.79, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.24, i64 9 }, ptr %indirectarg2, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 71) #5, !dbg !1396
  unreachable, !dbg !1396
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.math.random.Pcg32Random.set_seed(ptr %0, ptr align 8 %1) #0 comdat !dbg !1398 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %input = alloca %"char[]", align 8
  %return_value = alloca i32, align 4
  %taddr = alloca ptr, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg7 = alloca %"char[]", align 8
  %indirectarg8 = alloca %"char[]", align 8
  %taddr11 = alloca i64, align 8
  %taddr12 = alloca i64, align 8
  %indirectarg13 = alloca %"char[]", align 8
  %indirectarg14 = alloca %"char[]", align 8
  %indirectarg15 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg16 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !1403
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !1403
  br i1 %3, label %panic, label %checkok, !dbg !1403

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1404, !DIExpression(), !1405)
    #dbg_declare(ptr %1, !1406, !DIExpression(), !1405)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input, ptr align 8 %1, i32 16, i1 false)
    #dbg_declare(ptr %return_value, !1407, !DIExpression(), !1409)
  store i32 0, ptr %return_value, align 4, !dbg !1409
  store ptr %return_value, ptr %taddr, align 8
  %4 = load ptr, ptr %taddr, align 8
  %5 = insertvalue %"char[]" undef, ptr %4, 0
  %6 = insertvalue %"char[]" %5, i64 4, 1
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg3, ptr align 8 %input, i32 16, i1 false)
  store %"char[]" %6, ptr %indirectarg4, align 8
  call void @std.math.random.seeder(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4), !dbg !1411
  %7 = load ptr, ptr %self, align 8, !dbg !1410
  %checknull = icmp eq ptr %7, null, !dbg !1410
  %8 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1410
  br i1 %8, label %panic5, label %checkok9, !dbg !1410

checkok9:                                         ; preds = %checkok
  %9 = ptrtoint ptr %7 to i64, !dbg !1410
  %10 = urem i64 %9, 4, !dbg !1410
  %11 = icmp ne i64 %10, 0, !dbg !1410
  %12 = call i1 @llvm.expect.i1(i1 %11, i1 false), !dbg !1410
  br i1 %12, label %panic10, label %checkok17, !dbg !1410

checkok17:                                        ; preds = %checkok9
  %13 = load i32, ptr %return_value, align 4, !dbg !1410
  store i32 %13, ptr %7, align 4, !dbg !1410
  ret void, !dbg !1410

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.79, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func, i64 8 }, ptr %indirectarg2, align 8
  %14 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %14(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 78) #5, !dbg !1405
  unreachable, !dbg !1405

panic5:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.8, i64 45 }, ptr %indirectarg6, align 8
  store %"char[]" { ptr @.file.79, i64 11 }, ptr %indirectarg7, align 8
  store %"char[]" { ptr @.func, i64 8 }, ptr %indirectarg8, align 8
  %15 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %15(ptr align 8 %indirectarg6, ptr align 8 %indirectarg7, ptr align 8 %indirectarg8, i32 80) #5, !dbg !1410
  unreachable, !dbg !1410

panic10:                                          ; preds = %checkok9
  store i64 4, ptr %taddr11, align 8
  %16 = insertvalue %any undef, ptr %taddr11, 0
  %17 = insertvalue %any %16, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %10, ptr %taddr12, align 8
  %18 = insertvalue %any undef, ptr %taddr12, 0
  %19 = insertvalue %any %18, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg13, align 8
  store %"char[]" { ptr @.file.79, i64 11 }, ptr %indirectarg14, align 8
  store %"char[]" { ptr @.func, i64 8 }, ptr %indirectarg15, align 8
  store %any %17, ptr %varargslots, align 16
  %ptradd = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %19, ptr %ptradd, align 16
  %20 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %20, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg16, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg13, ptr align 8 %indirectarg14, ptr align 8 %indirectarg15, i32 80, ptr align 8 %indirectarg16) #5, !dbg !1410
  unreachable, !dbg !1410
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i16 @std.math.random.Pcg32Random.next_short(ptr %0) #0 comdat !dbg !1412 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %s = alloca ptr, align 8
  %xor = alloca i32, align 4
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr9 = alloca i64, align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg13 = alloca %"any[]", align 8
  %indirectarg17 = alloca %"char[]", align 8
  %indirectarg18 = alloca %"char[]", align 8
  %indirectarg19 = alloca %"char[]", align 8
  %taddr22 = alloca i64, align 8
  %taddr23 = alloca i64, align 8
  %indirectarg24 = alloca %"char[]", align 8
  %indirectarg25 = alloca %"char[]", align 8
  %indirectarg26 = alloca %"char[]", align 8
  %varargslots27 = alloca [2 x %any], align 16
  %indirectarg30 = alloca %"any[]", align 8
  %rot = alloca i8, align 1
  %indirectarg35 = alloca %"char[]", align 8
  %indirectarg36 = alloca %"char[]", align 8
  %indirectarg37 = alloca %"char[]", align 8
  %taddr40 = alloca i64, align 8
  %taddr41 = alloca i64, align 8
  %indirectarg42 = alloca %"char[]", align 8
  %indirectarg43 = alloca %"char[]", align 8
  %indirectarg44 = alloca %"char[]", align 8
  %varargslots45 = alloca [2 x %any], align 16
  %indirectarg48 = alloca %"any[]", align 8
  %indirectarg53 = alloca %"char[]", align 8
  %indirectarg54 = alloca %"char[]", align 8
  %indirectarg55 = alloca %"char[]", align 8
  %taddr58 = alloca i64, align 8
  %taddr59 = alloca i64, align 8
  %indirectarg60 = alloca %"char[]", align 8
  %indirectarg61 = alloca %"char[]", align 8
  %indirectarg62 = alloca %"char[]", align 8
  %varargslots63 = alloca [2 x %any], align 16
  %indirectarg66 = alloca %"any[]", align 8
  %indirectarg70 = alloca %"char[]", align 8
  %indirectarg71 = alloca %"char[]", align 8
  %indirectarg72 = alloca %"char[]", align 8
  %taddr75 = alloca i64, align 8
  %taddr76 = alloca i64, align 8
  %indirectarg77 = alloca %"char[]", align 8
  %indirectarg78 = alloca %"char[]", align 8
  %indirectarg79 = alloca %"char[]", align 8
  %varargslots80 = alloca [2 x %any], align 16
  %indirectarg83 = alloca %"any[]", align 8
  %self87 = alloca i16, align 2
  %shift = alloca i16, align 2
  %1 = icmp eq ptr %0, null, !dbg !1415
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1415
  br i1 %2, label %panic, label %checkok, !dbg !1415

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1416, !DIExpression(), !1417)
    #dbg_declare(ptr %s, !1418, !DIExpression(), !1419)
  %3 = load ptr, ptr %self, align 8, !dbg !1419
  store ptr %3, ptr %s, align 8, !dbg !1419
    #dbg_declare(ptr %xor, !1420, !DIExpression(), !1421)
  %4 = load ptr, ptr %s, align 8, !dbg !1421
  %checknull = icmp eq ptr %4, null, !dbg !1421
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1421
  br i1 %5, label %panic3, label %checkok7, !dbg !1421

checkok7:                                         ; preds = %checkok
  %6 = ptrtoint ptr %4 to i64, !dbg !1421
  %7 = urem i64 %6, 4, !dbg !1421
  %8 = icmp ne i64 %7, 0, !dbg !1421
  %9 = call i1 @llvm.expect.i1(i1 %8, i1 false), !dbg !1421
  br i1 %9, label %panic8, label %checkok14, !dbg !1421

checkok14:                                        ; preds = %checkok7
  %10 = load i32, ptr %4, align 4, !dbg !1421
  %11 = load ptr, ptr %s, align 8, !dbg !1421
  %checknull15 = icmp eq ptr %11, null, !dbg !1421
  %12 = call i1 @llvm.expect.i1(i1 %checknull15, i1 false), !dbg !1421
  br i1 %12, label %panic16, label %checkok20, !dbg !1421

checkok20:                                        ; preds = %checkok14
  %13 = ptrtoint ptr %11 to i64, !dbg !1421
  %14 = urem i64 %13, 4, !dbg !1421
  %15 = icmp ne i64 %14, 0, !dbg !1421
  %16 = call i1 @llvm.expect.i1(i1 %15, i1 false), !dbg !1421
  br i1 %16, label %panic21, label %checkok31, !dbg !1421

checkok31:                                        ; preds = %checkok20
  %17 = load i32, ptr %11, align 4, !dbg !1421
  %lshr = lshr i32 %17, 10, !dbg !1421
  %18 = freeze i32 %lshr, !dbg !1421
  %xor32 = xor i32 %10, %18, !dbg !1421
  store i32 %xor32, ptr %xor, align 4, !dbg !1421
    #dbg_declare(ptr %rot, !1422, !DIExpression(), !1423)
  %19 = load ptr, ptr %s, align 8, !dbg !1423
  %checknull33 = icmp eq ptr %19, null, !dbg !1423
  %20 = call i1 @llvm.expect.i1(i1 %checknull33, i1 false), !dbg !1423
  br i1 %20, label %panic34, label %checkok38, !dbg !1423

checkok38:                                        ; preds = %checkok31
  %21 = ptrtoint ptr %19 to i64, !dbg !1423
  %22 = urem i64 %21, 4, !dbg !1423
  %23 = icmp ne i64 %22, 0, !dbg !1423
  %24 = call i1 @llvm.expect.i1(i1 %23, i1 false), !dbg !1423
  br i1 %24, label %panic39, label %checkok49, !dbg !1423

checkok49:                                        ; preds = %checkok38
  %25 = load i32, ptr %19, align 4, !dbg !1423
  %lshr50 = lshr i32 %25, 28, !dbg !1423
  %26 = freeze i32 %lshr50, !dbg !1423
  %trunc = trunc i32 %26 to i8, !dbg !1423
  store i8 %trunc, ptr %rot, align 1, !dbg !1423
  %27 = load ptr, ptr %s, align 8, !dbg !1424
  %checknull51 = icmp eq ptr %27, null, !dbg !1424
  %28 = call i1 @llvm.expect.i1(i1 %checknull51, i1 false), !dbg !1424
  br i1 %28, label %panic52, label %checkok56, !dbg !1424

checkok56:                                        ; preds = %checkok49
  %29 = ptrtoint ptr %27 to i64, !dbg !1424
  %30 = urem i64 %29, 4, !dbg !1424
  %31 = icmp ne i64 %30, 0, !dbg !1424
  %32 = call i1 @llvm.expect.i1(i1 %31, i1 false), !dbg !1424
  br i1 %32, label %panic57, label %checkok67, !dbg !1424

checkok67:                                        ; preds = %checkok56
  %33 = load i32, ptr %27, align 4, !dbg !1424
  %mul = mul i32 %33, -1856014347, !dbg !1424
  %add = add i32 %mul, -1640531527, !dbg !1424
  %34 = load ptr, ptr %s, align 8, !dbg !1424
  %checknull68 = icmp eq ptr %34, null, !dbg !1424
  %35 = call i1 @llvm.expect.i1(i1 %checknull68, i1 false), !dbg !1424
  br i1 %35, label %panic69, label %checkok73, !dbg !1424

checkok73:                                        ; preds = %checkok67
  %36 = ptrtoint ptr %34 to i64, !dbg !1424
  %37 = urem i64 %36, 4, !dbg !1424
  %38 = icmp ne i64 %37, 0, !dbg !1424
  %39 = call i1 @llvm.expect.i1(i1 %38, i1 false), !dbg !1424
  br i1 %39, label %panic74, label %checkok84, !dbg !1424

checkok84:                                        ; preds = %checkok73
  store i32 %add, ptr %34, align 4, !dbg !1424
  %40 = load i32, ptr %xor, align 4, !dbg !1425
  %lshr85 = lshr i32 %40, 12, !dbg !1425
  %41 = freeze i32 %lshr85, !dbg !1425
  %trunc86 = trunc i32 %41 to i16, !dbg !1425
  store i16 %trunc86, ptr %self87, align 2
  %42 = load i8, ptr %rot, align 1, !dbg !1425
  %zext = zext i8 %42 to i16, !dbg !1425
  store i16 %zext, ptr %shift, align 2
  %43 = load i16, ptr %self87, align 2, !dbg !1426
  %44 = load i16, ptr %self87, align 2, !dbg !1426
  %45 = load i16, ptr %shift, align 2, !dbg !1426
  %46 = call i16 @llvm.fshr.i16(i16 %43, i16 %44, i16 %45), !dbg !1426
  ret i16 %46, !dbg !1426

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.79, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.23, i64 10 }, ptr %indirectarg2, align 8
  %47 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %47(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 83) #5, !dbg !1417
  unreachable, !dbg !1417

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.11, i64 42 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.79, i64 11 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.23, i64 10 }, ptr %indirectarg6, align 8
  %48 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %48(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 87) #5, !dbg !1421
  unreachable, !dbg !1421

panic8:                                           ; preds = %checkok7
  store i64 4, ptr %taddr, align 8
  %49 = insertvalue %any undef, ptr %taddr, 0
  %50 = insertvalue %any %49, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %7, ptr %taddr9, align 8
  %51 = insertvalue %any undef, ptr %taddr9, 0
  %52 = insertvalue %any %51, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.file.79, i64 11 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.func.23, i64 10 }, ptr %indirectarg12, align 8
  store %any %50, ptr %varargslots, align 16
  %ptradd = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %52, ptr %ptradd, align 16
  %53 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %53, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg13, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, i32 87, ptr align 8 %indirectarg13) #5, !dbg !1421
  unreachable, !dbg !1421

panic16:                                          ; preds = %checkok14
  store %"char[]" { ptr @.panic_msg.11, i64 42 }, ptr %indirectarg17, align 8
  store %"char[]" { ptr @.file.79, i64 11 }, ptr %indirectarg18, align 8
  store %"char[]" { ptr @.func.23, i64 10 }, ptr %indirectarg19, align 8
  %54 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %54(ptr align 8 %indirectarg17, ptr align 8 %indirectarg18, ptr align 8 %indirectarg19, i32 87) #5, !dbg !1421
  unreachable, !dbg !1421

panic21:                                          ; preds = %checkok20
  store i64 4, ptr %taddr22, align 8
  %55 = insertvalue %any undef, ptr %taddr22, 0
  %56 = insertvalue %any %55, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %14, ptr %taddr23, align 8
  %57 = insertvalue %any undef, ptr %taddr23, 0
  %58 = insertvalue %any %57, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg24, align 8
  store %"char[]" { ptr @.file.79, i64 11 }, ptr %indirectarg25, align 8
  store %"char[]" { ptr @.func.23, i64 10 }, ptr %indirectarg26, align 8
  store %any %56, ptr %varargslots27, align 16
  %ptradd28 = getelementptr inbounds i8, ptr %varargslots27, i64 16
  store %any %58, ptr %ptradd28, align 16
  %59 = insertvalue %"any[]" undef, ptr %varargslots27, 0
  %"$$temp29" = insertvalue %"any[]" %59, i64 2, 1
  store %"any[]" %"$$temp29", ptr %indirectarg30, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg24, ptr align 8 %indirectarg25, ptr align 8 %indirectarg26, i32 87, ptr align 8 %indirectarg30) #5, !dbg !1421
  unreachable, !dbg !1421

panic34:                                          ; preds = %checkok31
  store %"char[]" { ptr @.panic_msg.11, i64 42 }, ptr %indirectarg35, align 8
  store %"char[]" { ptr @.file.79, i64 11 }, ptr %indirectarg36, align 8
  store %"char[]" { ptr @.func.23, i64 10 }, ptr %indirectarg37, align 8
  %60 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %60(ptr align 8 %indirectarg35, ptr align 8 %indirectarg36, ptr align 8 %indirectarg37, i32 88) #5, !dbg !1423
  unreachable, !dbg !1423

panic39:                                          ; preds = %checkok38
  store i64 4, ptr %taddr40, align 8
  %61 = insertvalue %any undef, ptr %taddr40, 0
  %62 = insertvalue %any %61, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %22, ptr %taddr41, align 8
  %63 = insertvalue %any undef, ptr %taddr41, 0
  %64 = insertvalue %any %63, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg42, align 8
  store %"char[]" { ptr @.file.79, i64 11 }, ptr %indirectarg43, align 8
  store %"char[]" { ptr @.func.23, i64 10 }, ptr %indirectarg44, align 8
  store %any %62, ptr %varargslots45, align 16
  %ptradd46 = getelementptr inbounds i8, ptr %varargslots45, i64 16
  store %any %64, ptr %ptradd46, align 16
  %65 = insertvalue %"any[]" undef, ptr %varargslots45, 0
  %"$$temp47" = insertvalue %"any[]" %65, i64 2, 1
  store %"any[]" %"$$temp47", ptr %indirectarg48, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg42, ptr align 8 %indirectarg43, ptr align 8 %indirectarg44, i32 88, ptr align 8 %indirectarg48) #5, !dbg !1423
  unreachable, !dbg !1423

panic52:                                          ; preds = %checkok49
  store %"char[]" { ptr @.panic_msg.11, i64 42 }, ptr %indirectarg53, align 8
  store %"char[]" { ptr @.file.79, i64 11 }, ptr %indirectarg54, align 8
  store %"char[]" { ptr @.func.23, i64 10 }, ptr %indirectarg55, align 8
  %66 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %66(ptr align 8 %indirectarg53, ptr align 8 %indirectarg54, ptr align 8 %indirectarg55, i32 89) #5, !dbg !1424
  unreachable, !dbg !1424

panic57:                                          ; preds = %checkok56
  store i64 4, ptr %taddr58, align 8
  %67 = insertvalue %any undef, ptr %taddr58, 0
  %68 = insertvalue %any %67, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %30, ptr %taddr59, align 8
  %69 = insertvalue %any undef, ptr %taddr59, 0
  %70 = insertvalue %any %69, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg60, align 8
  store %"char[]" { ptr @.file.79, i64 11 }, ptr %indirectarg61, align 8
  store %"char[]" { ptr @.func.23, i64 10 }, ptr %indirectarg62, align 8
  store %any %68, ptr %varargslots63, align 16
  %ptradd64 = getelementptr inbounds i8, ptr %varargslots63, i64 16
  store %any %70, ptr %ptradd64, align 16
  %71 = insertvalue %"any[]" undef, ptr %varargslots63, 0
  %"$$temp65" = insertvalue %"any[]" %71, i64 2, 1
  store %"any[]" %"$$temp65", ptr %indirectarg66, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg60, ptr align 8 %indirectarg61, ptr align 8 %indirectarg62, i32 89, ptr align 8 %indirectarg66) #5, !dbg !1424
  unreachable, !dbg !1424

panic69:                                          ; preds = %checkok67
  store %"char[]" { ptr @.panic_msg.11, i64 42 }, ptr %indirectarg70, align 8
  store %"char[]" { ptr @.file.79, i64 11 }, ptr %indirectarg71, align 8
  store %"char[]" { ptr @.func.23, i64 10 }, ptr %indirectarg72, align 8
  %72 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %72(ptr align 8 %indirectarg70, ptr align 8 %indirectarg71, ptr align 8 %indirectarg72, i32 89) #5, !dbg !1424
  unreachable, !dbg !1424

panic74:                                          ; preds = %checkok73
  store i64 4, ptr %taddr75, align 8
  %73 = insertvalue %any undef, ptr %taddr75, 0
  %74 = insertvalue %any %73, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %37, ptr %taddr76, align 8
  %75 = insertvalue %any undef, ptr %taddr76, 0
  %76 = insertvalue %any %75, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg77, align 8
  store %"char[]" { ptr @.file.79, i64 11 }, ptr %indirectarg78, align 8
  store %"char[]" { ptr @.func.23, i64 10 }, ptr %indirectarg79, align 8
  store %any %74, ptr %varargslots80, align 16
  %ptradd81 = getelementptr inbounds i8, ptr %varargslots80, i64 16
  store %any %76, ptr %ptradd81, align 16
  %77 = insertvalue %"any[]" undef, ptr %varargslots80, 0
  %"$$temp82" = insertvalue %"any[]" %77, i64 2, 1
  store %"any[]" %"$$temp82", ptr %indirectarg83, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg77, ptr align 8 %indirectarg78, ptr align 8 %indirectarg79, i32 89, ptr align 8 %indirectarg83) #5, !dbg !1424
  unreachable, !dbg !1424
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.math.random.Pcg32Random.next_bytes(ptr %0, ptr align 8 %1) #0 comdat !dbg !1428 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %bytes = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i16, align 2
  %taddr = alloca ptr, align 8
  %taddr9 = alloca i64, align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg13 = alloca %"any[]", align 8
  %taddr17 = alloca i64, align 8
  %taddr18 = alloca i64, align 8
  %indirectarg19 = alloca %"char[]", align 8
  %indirectarg20 = alloca %"char[]", align 8
  %indirectarg21 = alloca %"char[]", align 8
  %varargslots22 = alloca [2 x %any], align 16
  %indirectarg25 = alloca %"any[]", align 8
  %taddr29 = alloca i64, align 8
  %taddr30 = alloca i64, align 8
  %indirectarg31 = alloca %"char[]", align 8
  %indirectarg32 = alloca %"char[]", align 8
  %indirectarg33 = alloca %"char[]", align 8
  %varargslots34 = alloca [2 x %any], align 16
  %indirectarg37 = alloca %"any[]", align 8
  %taddr39 = alloca ptr, align 8
  %taddr42 = alloca i64, align 8
  %taddr43 = alloca i64, align 8
  %indirectarg44 = alloca %"char[]", align 8
  %indirectarg45 = alloca %"char[]", align 8
  %indirectarg46 = alloca %"char[]", align 8
  %varargslots47 = alloca [2 x %any], align 16
  %indirectarg50 = alloca %"any[]", align 8
  %taddr54 = alloca i64, align 8
  %taddr55 = alloca i64, align 8
  %indirectarg56 = alloca %"char[]", align 8
  %indirectarg57 = alloca %"char[]", align 8
  %indirectarg58 = alloca %"char[]", align 8
  %varargslots59 = alloca [2 x %any], align 16
  %indirectarg62 = alloca %"any[]", align 8
  %taddr66 = alloca i64, align 8
  %taddr67 = alloca i64, align 8
  %indirectarg68 = alloca %"char[]", align 8
  %indirectarg69 = alloca %"char[]", align 8
  %indirectarg70 = alloca %"char[]", align 8
  %varargslots71 = alloca [2 x %any], align 16
  %indirectarg74 = alloca %"any[]", align 8
  %taddr79 = alloca i64, align 8
  %taddr80 = alloca i64, align 8
  %indirectarg81 = alloca %"char[]", align 8
  %indirectarg82 = alloca %"char[]", align 8
  %indirectarg83 = alloca %"char[]", align 8
  %varargslots84 = alloca [2 x %any], align 16
  %indirectarg87 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg91 = alloca %"char[]", align 8
  %indirectarg92 = alloca %"char[]", align 8
  %indirectarg93 = alloca %"char[]", align 8
  %indirectarg94 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !1429
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !1429
  br i1 %3, label %panic, label %checkok, !dbg !1429

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1430, !DIExpression(), !1429)
    #dbg_declare(ptr %1, !1431, !DIExpression(), !1429)
  %ptradd = getelementptr inbounds i8, ptr %1, i64 8, !dbg !1432
  %4 = load i64, ptr %ptradd, align 8, !dbg !1432
  %lt = icmp ult i64 0, %4, !dbg !1432
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !1432

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.13, i64 34 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.file.79, i64 11 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg5, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, i32 94) #5, !dbg !1432
  unreachable, !dbg !1432

assert_ok:                                        ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes, ptr align 8 %1, i32 16, i1 false)
    #dbg_declare(ptr %len, !1434, !DIExpression(), !1436)
  %ptradd6 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !1436
  %6 = load i64, ptr %ptradd6, align 8, !dbg !1436
  store i64 %6, ptr %len, align 8, !dbg !1436
  br label %loop.cond, !dbg !1437

loop.cond:                                        ; preds = %checkok88, %assert_ok
  %7 = load i64, ptr %len, align 8, !dbg !1438
  %lt7 = icmp ult i64 0, %7, !dbg !1438
  br i1 %lt7, label %loop.body, label %loop.exit, !dbg !1438

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %value, !1440, !DIExpression(), !1442)
  %8 = load ptr, ptr %self, align 8, !dbg !1443
  %9 = call i16 @std.math.random.Pcg32Random.next_short(ptr %8), !dbg !1442
  store i16 %9, ptr %value, align 2, !dbg !1442
  %10 = load i64, ptr %len, align 8, !dbg !1444
  %le = icmp ule i64 %10, 2, !dbg !1444
  br i1 %le, label %if.then, label %if.exit, !dbg !1444

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %11 = load ptr, ptr %taddr, align 8
  %12 = load i64, ptr %len, align 8, !dbg !1445
  %add = add i64 0, %12, !dbg !1445
  %gt = icmp ugt i64 0, %add, !dbg !1445
  %sub = sub i64 %add, 0, !dbg !1445
  %13 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !1445
  br i1 %13, label %panic8, label %checkok14, !dbg !1445

checkok14:                                        ; preds = %if.then
  %size = sub i64 %add, 0, !dbg !1445
  %14 = insertvalue %"char[]" undef, ptr %11, 0, !dbg !1445
  %15 = insertvalue %"char[]" %14, i64 %size, 1, !dbg !1445
  %16 = load %"char[]", ptr %bytes, align 8, !dbg !1445
  %17 = extractvalue %"char[]" %16, 0, !dbg !1445
  %18 = extractvalue %"char[]" %16, 1, !dbg !1445
  %gt15 = icmp ugt i64 0, %18, !dbg !1445
  %19 = call i1 @llvm.expect.i1(i1 %gt15, i1 false), !dbg !1445
  br i1 %19, label %panic16, label %checkok26, !dbg !1445

checkok26:                                        ; preds = %checkok14
  %size27 = sub i64 %18, 0, !dbg !1445
  %20 = insertvalue %"char[]" undef, ptr %17, 0, !dbg !1445
  %21 = insertvalue %"char[]" %20, i64 %size27, 1, !dbg !1445
  %22 = extractvalue %"char[]" %21, 0, !dbg !1445
  %23 = extractvalue %"char[]" %15, 0, !dbg !1445
  %24 = extractvalue %"char[]" %15, 1, !dbg !1445
  %25 = extractvalue %"char[]" %21, 1, !dbg !1445
  %neq = icmp ne i64 %25, %24, !dbg !1445
  %26 = call i1 @llvm.expect.i1(i1 %neq, i1 false), !dbg !1445
  br i1 %26, label %panic28, label %checkok38, !dbg !1445

checkok38:                                        ; preds = %checkok26
  %27 = mul i64 %24, 1, !dbg !1445
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %22, ptr align 1 %23, i64 %27, i1 false), !dbg !1445
  br label %expr_block.exit, !dbg !1447

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr39, align 8
  %28 = load ptr, ptr %taddr39, align 8
  %29 = insertvalue %"char[]" undef, ptr %28, 0
  %30 = insertvalue %"char[]" %29, i64 2, 1
  %31 = load %"char[]", ptr %bytes, align 8, !dbg !1448
  %32 = extractvalue %"char[]" %31, 0, !dbg !1448
  %33 = extractvalue %"char[]" %31, 1, !dbg !1448
  %gt40 = icmp sgt i64 0, %33, !dbg !1448
  %34 = call i1 @llvm.expect.i1(i1 %gt40, i1 false), !dbg !1448
  br i1 %34, label %panic41, label %checkok51, !dbg !1448

checkok51:                                        ; preds = %if.exit
  %lt52 = icmp slt i64 %33, 2, !dbg !1448
  %35 = call i1 @llvm.expect.i1(i1 %lt52, i1 false), !dbg !1448
  br i1 %35, label %panic53, label %checkok63, !dbg !1448

checkok63:                                        ; preds = %checkok51
  %36 = insertvalue %"char[]" undef, ptr %32, 0, !dbg !1448
  %37 = insertvalue %"char[]" %36, i64 2, 1, !dbg !1448
  %38 = extractvalue %"char[]" %37, 0, !dbg !1448
  %39 = extractvalue %"char[]" %30, 0, !dbg !1448
  %40 = extractvalue %"char[]" %30, 1, !dbg !1448
  %41 = extractvalue %"char[]" %37, 1, !dbg !1448
  %neq64 = icmp ne i64 %41, %40, !dbg !1448
  %42 = call i1 @llvm.expect.i1(i1 %neq64, i1 false), !dbg !1448
  br i1 %42, label %panic65, label %checkok75, !dbg !1448

checkok75:                                        ; preds = %checkok63
  %43 = mul i64 %40, 1, !dbg !1448
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %38, ptr align 1 %39, i64 %43, i1 false), !dbg !1448
  %44 = load i64, ptr %len, align 8, !dbg !1449
  %sub76 = sub i64 %44, 2, !dbg !1449
  store i64 %sub76, ptr %len, align 8, !dbg !1449
  %45 = load %"char[]", ptr %bytes, align 8, !dbg !1450
  %46 = extractvalue %"char[]" %45, 0, !dbg !1450
  %47 = extractvalue %"char[]" %45, 1, !dbg !1450
  %gt77 = icmp ugt i64 2, %47, !dbg !1450
  %48 = call i1 @llvm.expect.i1(i1 %gt77, i1 false), !dbg !1450
  br i1 %48, label %panic78, label %checkok88, !dbg !1450

checkok88:                                        ; preds = %checkok75
  %size89 = sub i64 %47, 2, !dbg !1450
  %ptradd90 = getelementptr inbounds i8, ptr %46, i64 2, !dbg !1450
  %49 = insertvalue %"char[]" undef, ptr %ptradd90, 0, !dbg !1450
  %50 = insertvalue %"char[]" %49, i64 %size89, 1, !dbg !1450
  store %"char[]" %50, ptr %bytes, align 8, !dbg !1450
  br label %loop.cond, !dbg !1450

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.86, i64 30 }, ptr %string, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg91, ptr align 8 %string, i32 16, i1 false)
  store %"char[]" { ptr @.str.87, i64 11 }, ptr %indirectarg92, align 8
  store %"char[]" { ptr @.str.88, i64 22 }, ptr %indirectarg93, align 8
  store %"any[]" zeroinitializer, ptr %indirectarg94, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg91, ptr align 8 %indirectarg92, ptr align 8 %indirectarg93, i32 96, ptr align 8 %indirectarg94), !dbg !1451
  unreachable, !dbg !1451

expr_block.exit:                                  ; preds = %checkok38
  ret void, !dbg !1451

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.79, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg2, align 8
  %51 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %51(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 96) #5, !dbg !1429
  unreachable, !dbg !1429

panic8:                                           ; preds = %if.then
  store i64 %sub, ptr %taddr9, align 8
  %52 = insertvalue %any undef, ptr %taddr9, 0
  %53 = insertvalue %any %52, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.14, i64 43 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg12, align 8
  store %any %53, ptr %varargslots, align 16
  %54 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %54, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg13, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, i32 153, ptr align 8 %indirectarg13) #5, !dbg !1445
  unreachable, !dbg !1445

panic16:                                          ; preds = %checkok14
  store i64 %18, ptr %taddr17, align 8
  %55 = insertvalue %any undef, ptr %taddr17, 0
  %56 = insertvalue %any %55, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr18, align 8
  %57 = insertvalue %any undef, ptr %taddr18, 0
  %58 = insertvalue %any %57, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.16, i64 61 }, ptr %indirectarg19, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg20, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg21, align 8
  store %any %56, ptr %varargslots22, align 16
  %ptradd23 = getelementptr inbounds i8, ptr %varargslots22, i64 16
  store %any %58, ptr %ptradd23, align 16
  %59 = insertvalue %"any[]" undef, ptr %varargslots22, 0
  %"$$temp24" = insertvalue %"any[]" %59, i64 2, 1
  store %"any[]" %"$$temp24", ptr %indirectarg25, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg19, ptr align 8 %indirectarg20, ptr align 8 %indirectarg21, i32 153, ptr align 8 %indirectarg25) #5, !dbg !1445
  unreachable, !dbg !1445

panic28:                                          ; preds = %checkok26
  store i64 %25, ptr %taddr29, align 8
  %60 = insertvalue %any undef, ptr %taddr29, 0
  %61 = insertvalue %any %60, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %24, ptr %taddr30, align 8
  %62 = insertvalue %any undef, ptr %taddr30, 0
  %63 = insertvalue %any %62, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 38 }, ptr %indirectarg31, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg32, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg33, align 8
  store %any %61, ptr %varargslots34, align 16
  %ptradd35 = getelementptr inbounds i8, ptr %varargslots34, i64 16
  store %any %63, ptr %ptradd35, align 16
  %64 = insertvalue %"any[]" undef, ptr %varargslots34, 0
  %"$$temp36" = insertvalue %"any[]" %64, i64 2, 1
  store %"any[]" %"$$temp36", ptr %indirectarg37, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg31, ptr align 8 %indirectarg32, ptr align 8 %indirectarg33, i32 153, ptr align 8 %indirectarg37) #5, !dbg !1445
  unreachable, !dbg !1445

panic41:                                          ; preds = %if.exit
  store i64 %33, ptr %taddr42, align 8
  %65 = insertvalue %any undef, ptr %taddr42, 0
  %66 = insertvalue %any %65, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr43, align 8
  %67 = insertvalue %any undef, ptr %taddr43, 0
  %68 = insertvalue %any %67, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.16, i64 61 }, ptr %indirectarg44, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg45, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg46, align 8
  store %any %66, ptr %varargslots47, align 16
  %ptradd48 = getelementptr inbounds i8, ptr %varargslots47, i64 16
  store %any %68, ptr %ptradd48, align 16
  %69 = insertvalue %"any[]" undef, ptr %varargslots47, 0
  %"$$temp49" = insertvalue %"any[]" %69, i64 2, 1
  store %"any[]" %"$$temp49", ptr %indirectarg50, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg44, ptr align 8 %indirectarg45, ptr align 8 %indirectarg46, i32 156, ptr align 8 %indirectarg50) #5, !dbg !1448
  unreachable, !dbg !1448

panic53:                                          ; preds = %checkok51
  store i64 1, ptr %taddr54, align 8
  %70 = insertvalue %any undef, ptr %taddr54, 0
  %71 = insertvalue %any %70, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %33, ptr %taddr55, align 8
  %72 = insertvalue %any undef, ptr %taddr55, 0
  %73 = insertvalue %any %72, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.18, i64 60 }, ptr %indirectarg56, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg57, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg58, align 8
  store %any %71, ptr %varargslots59, align 16
  %ptradd60 = getelementptr inbounds i8, ptr %varargslots59, i64 16
  store %any %73, ptr %ptradd60, align 16
  %74 = insertvalue %"any[]" undef, ptr %varargslots59, 0
  %"$$temp61" = insertvalue %"any[]" %74, i64 2, 1
  store %"any[]" %"$$temp61", ptr %indirectarg62, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg56, ptr align 8 %indirectarg57, ptr align 8 %indirectarg58, i32 156, ptr align 8 %indirectarg62) #5, !dbg !1448
  unreachable, !dbg !1448

panic65:                                          ; preds = %checkok63
  store i64 %41, ptr %taddr66, align 8
  %75 = insertvalue %any undef, ptr %taddr66, 0
  %76 = insertvalue %any %75, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %40, ptr %taddr67, align 8
  %77 = insertvalue %any undef, ptr %taddr67, 0
  %78 = insertvalue %any %77, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 38 }, ptr %indirectarg68, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg69, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg70, align 8
  store %any %76, ptr %varargslots71, align 16
  %ptradd72 = getelementptr inbounds i8, ptr %varargslots71, i64 16
  store %any %78, ptr %ptradd72, align 16
  %79 = insertvalue %"any[]" undef, ptr %varargslots71, 0
  %"$$temp73" = insertvalue %"any[]" %79, i64 2, 1
  store %"any[]" %"$$temp73", ptr %indirectarg74, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg68, ptr align 8 %indirectarg69, ptr align 8 %indirectarg70, i32 156, ptr align 8 %indirectarg74) #5, !dbg !1448
  unreachable, !dbg !1448

panic78:                                          ; preds = %checkok75
  store i64 %47, ptr %taddr79, align 8
  %80 = insertvalue %any undef, ptr %taddr79, 0
  %81 = insertvalue %any %80, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 2, ptr %taddr80, align 8
  %82 = insertvalue %any undef, ptr %taddr80, 0
  %83 = insertvalue %any %82, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.16, i64 61 }, ptr %indirectarg81, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg82, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg83, align 8
  store %any %81, ptr %varargslots84, align 16
  %ptradd85 = getelementptr inbounds i8, ptr %varargslots84, i64 16
  store %any %83, ptr %ptradd85, align 16
  %84 = insertvalue %"any[]" undef, ptr %varargslots84, 0
  %"$$temp86" = insertvalue %"any[]" %84, i64 2, 1
  store %"any[]" %"$$temp86", ptr %indirectarg87, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg81, ptr align 8 %indirectarg82, ptr align 8 %indirectarg83, i32 158, ptr align 8 %indirectarg87) #5, !dbg !1450
  unreachable, !dbg !1450
}

; Function Attrs: nounwind ssp uwtable
define weak_odr <2 x i64> @std.math.random.Pcg32Random.next_int128(ptr %0) #0 comdat !dbg !1454 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %taddr = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !1457
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1457
  br i1 %2, label %panic, label %checkok, !dbg !1457

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1458, !DIExpression(), !1457)
  %3 = load ptr, ptr %self, align 8, !dbg !1459
  %4 = call i64 @std.math.random.Pcg32Random.next_long(ptr %3), !dbg !1461
  %zext = zext i64 %4 to i128, !dbg !1461
  %shl = shl i128 %zext, 64, !dbg !1461
  %5 = freeze i128 %shl, !dbg !1461
  %6 = load ptr, ptr %self, align 8, !dbg !1459
  %7 = call i64 @std.math.random.Pcg32Random.next_long(ptr %6), !dbg !1461
  %zext3 = zext i64 %7 to i128, !dbg !1461
  %add = add i128 %5, %zext3, !dbg !1461
  store i128 %add, ptr %taddr, align 16
  %8 = load <2 x i64>, ptr %taddr, align 16
  ret <2 x i64> %8

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.79, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.21, i64 11 }, ptr %indirectarg2, align 8
  %9 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %9(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 97) #5, !dbg !1457
  unreachable, !dbg !1457
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.math.random.Pcg32Random.next_long(ptr %0) #0 comdat !dbg !1462 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1465
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1465
  br i1 %2, label %panic, label %checkok, !dbg !1465

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1466, !DIExpression(), !1465)
  %3 = load ptr, ptr %self, align 8, !dbg !1467
  %4 = call i32 @std.math.random.Pcg32Random.next_int(ptr %3), !dbg !1469
  %zext = zext i32 %4 to i64, !dbg !1469
  %shl = shl i64 %zext, 32, !dbg !1469
  %5 = freeze i64 %shl, !dbg !1469
  %6 = load ptr, ptr %self, align 8, !dbg !1467
  %7 = call i32 @std.math.random.Pcg32Random.next_int(ptr %6), !dbg !1469
  %zext3 = zext i32 %7 to i64, !dbg !1469
  %add = add i64 %5, %zext3, !dbg !1469
  ret i64 %add, !dbg !1469

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.79, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.10, i64 9 }, ptr %indirectarg2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 98) #5, !dbg !1465
  unreachable, !dbg !1465
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i32 @std.math.random.Pcg32Random.next_int(ptr %0) #0 comdat !dbg !1470 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1473
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1473
  br i1 %2, label %panic, label %checkok, !dbg !1473

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1474, !DIExpression(), !1473)
  %3 = load ptr, ptr %self, align 8, !dbg !1475
  %4 = call i16 @std.math.random.Pcg32Random.next_short(ptr %3), !dbg !1477
  %zext = zext i16 %4 to i32, !dbg !1477
  %shl = shl i32 %zext, 16, !dbg !1477
  %5 = freeze i32 %shl, !dbg !1477
  %6 = load ptr, ptr %self, align 8, !dbg !1475
  %7 = call i16 @std.math.random.Pcg32Random.next_short(ptr %6), !dbg !1477
  %zext3 = zext i16 %7 to i32, !dbg !1477
  %add = add i32 %5, %zext3, !dbg !1477
  ret i32 %add, !dbg !1477

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.79, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.22, i64 8 }, ptr %indirectarg2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 99) #5, !dbg !1473
  unreachable, !dbg !1473
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i8 @std.math.random.Pcg32Random.next_byte(ptr %0) #0 comdat !dbg !1478 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1481
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1481
  br i1 %2, label %panic, label %checkok, !dbg !1481

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1482, !DIExpression(), !1481)
  %3 = load ptr, ptr %self, align 8, !dbg !1481
  %4 = call i16 @std.math.random.Pcg32Random.next_short(ptr %3), !dbg !1481
  %trunc = trunc i16 %4 to i8, !dbg !1481
  ret i8 %trunc, !dbg !1481

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.79, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.24, i64 9 }, ptr %indirectarg2, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 100) #5, !dbg !1481
  unreachable, !dbg !1481
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.math.random.Pcg16Random.set_seed(ptr %0, ptr align 8 %1) #0 comdat !dbg !1483 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %input = alloca %"char[]", align 8
  %return_value = alloca i16, align 2
  %taddr = alloca ptr, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg7 = alloca %"char[]", align 8
  %indirectarg8 = alloca %"char[]", align 8
  %taddr11 = alloca i64, align 8
  %taddr12 = alloca i64, align 8
  %indirectarg13 = alloca %"char[]", align 8
  %indirectarg14 = alloca %"char[]", align 8
  %indirectarg15 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg16 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !1488
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !1488
  br i1 %3, label %panic, label %checkok, !dbg !1488

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1489, !DIExpression(), !1490)
    #dbg_declare(ptr %1, !1491, !DIExpression(), !1490)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input, ptr align 8 %1, i32 16, i1 false)
    #dbg_declare(ptr %return_value, !1492, !DIExpression(), !1494)
  store i16 0, ptr %return_value, align 2, !dbg !1494
  store ptr %return_value, ptr %taddr, align 8
  %4 = load ptr, ptr %taddr, align 8
  %5 = insertvalue %"char[]" undef, ptr %4, 0
  %6 = insertvalue %"char[]" %5, i64 2, 1
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg3, ptr align 8 %input, i32 16, i1 false)
  store %"char[]" %6, ptr %indirectarg4, align 8
  call void @std.math.random.seeder(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4), !dbg !1496
  %7 = load ptr, ptr %self, align 8, !dbg !1495
  %checknull = icmp eq ptr %7, null, !dbg !1495
  %8 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1495
  br i1 %8, label %panic5, label %checkok9, !dbg !1495

checkok9:                                         ; preds = %checkok
  %9 = ptrtoint ptr %7 to i64, !dbg !1495
  %10 = urem i64 %9, 2, !dbg !1495
  %11 = icmp ne i64 %10, 0, !dbg !1495
  %12 = call i1 @llvm.expect.i1(i1 %11, i1 false), !dbg !1495
  br i1 %12, label %panic10, label %checkok17, !dbg !1495

checkok17:                                        ; preds = %checkok9
  %13 = load i16, ptr %return_value, align 2, !dbg !1495
  store i16 %13, ptr %7, align 2, !dbg !1495
  ret void, !dbg !1495

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.79, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func, i64 8 }, ptr %indirectarg2, align 8
  %14 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %14(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 106) #5, !dbg !1490
  unreachable, !dbg !1490

panic5:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.8, i64 45 }, ptr %indirectarg6, align 8
  store %"char[]" { ptr @.file.79, i64 11 }, ptr %indirectarg7, align 8
  store %"char[]" { ptr @.func, i64 8 }, ptr %indirectarg8, align 8
  %15 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %15(ptr align 8 %indirectarg6, ptr align 8 %indirectarg7, ptr align 8 %indirectarg8, i32 108) #5, !dbg !1495
  unreachable, !dbg !1495

panic10:                                          ; preds = %checkok9
  store i64 2, ptr %taddr11, align 8
  %16 = insertvalue %any undef, ptr %taddr11, 0
  %17 = insertvalue %any %16, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %10, ptr %taddr12, align 8
  %18 = insertvalue %any undef, ptr %taddr12, 0
  %19 = insertvalue %any %18, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg13, align 8
  store %"char[]" { ptr @.file.79, i64 11 }, ptr %indirectarg14, align 8
  store %"char[]" { ptr @.func, i64 8 }, ptr %indirectarg15, align 8
  store %any %17, ptr %varargslots, align 16
  %ptradd = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %19, ptr %ptradd, align 16
  %20 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %20, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg16, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg13, ptr align 8 %indirectarg14, ptr align 8 %indirectarg15, i32 108, ptr align 8 %indirectarg16) #5, !dbg !1495
  unreachable, !dbg !1495
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i8 @std.math.random.Pcg16Random.next_byte(ptr %0) #0 comdat !dbg !1497 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %s = alloca ptr, align 8
  %xor = alloca i16, align 2
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr9 = alloca i64, align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg13 = alloca %"any[]", align 8
  %indirectarg17 = alloca %"char[]", align 8
  %indirectarg18 = alloca %"char[]", align 8
  %indirectarg19 = alloca %"char[]", align 8
  %taddr22 = alloca i64, align 8
  %taddr23 = alloca i64, align 8
  %indirectarg24 = alloca %"char[]", align 8
  %indirectarg25 = alloca %"char[]", align 8
  %indirectarg26 = alloca %"char[]", align 8
  %varargslots27 = alloca [2 x %any], align 16
  %indirectarg30 = alloca %"any[]", align 8
  %rot = alloca i8, align 1
  %indirectarg36 = alloca %"char[]", align 8
  %indirectarg37 = alloca %"char[]", align 8
  %indirectarg38 = alloca %"char[]", align 8
  %taddr41 = alloca i64, align 8
  %taddr42 = alloca i64, align 8
  %indirectarg43 = alloca %"char[]", align 8
  %indirectarg44 = alloca %"char[]", align 8
  %indirectarg45 = alloca %"char[]", align 8
  %varargslots46 = alloca [2 x %any], align 16
  %indirectarg49 = alloca %"any[]", align 8
  %indirectarg56 = alloca %"char[]", align 8
  %indirectarg57 = alloca %"char[]", align 8
  %indirectarg58 = alloca %"char[]", align 8
  %taddr61 = alloca i64, align 8
  %taddr62 = alloca i64, align 8
  %indirectarg63 = alloca %"char[]", align 8
  %indirectarg64 = alloca %"char[]", align 8
  %indirectarg65 = alloca %"char[]", align 8
  %varargslots66 = alloca [2 x %any], align 16
  %indirectarg69 = alloca %"any[]", align 8
  %indirectarg75 = alloca %"char[]", align 8
  %indirectarg76 = alloca %"char[]", align 8
  %indirectarg77 = alloca %"char[]", align 8
  %taddr80 = alloca i64, align 8
  %taddr81 = alloca i64, align 8
  %indirectarg82 = alloca %"char[]", align 8
  %indirectarg83 = alloca %"char[]", align 8
  %indirectarg84 = alloca %"char[]", align 8
  %varargslots85 = alloca [2 x %any], align 16
  %indirectarg88 = alloca %"any[]", align 8
  %self93 = alloca i8, align 1
  %shift = alloca i8, align 1
  %1 = icmp eq ptr %0, null, !dbg !1500
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1500
  br i1 %2, label %panic, label %checkok, !dbg !1500

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1501, !DIExpression(), !1502)
    #dbg_declare(ptr %s, !1503, !DIExpression(), !1504)
  %3 = load ptr, ptr %self, align 8, !dbg !1504
  store ptr %3, ptr %s, align 8, !dbg !1504
    #dbg_declare(ptr %xor, !1505, !DIExpression(), !1506)
  %4 = load ptr, ptr %s, align 8, !dbg !1506
  %checknull = icmp eq ptr %4, null, !dbg !1506
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1506
  br i1 %5, label %panic3, label %checkok7, !dbg !1506

checkok7:                                         ; preds = %checkok
  %6 = ptrtoint ptr %4 to i64, !dbg !1506
  %7 = urem i64 %6, 2, !dbg !1506
  %8 = icmp ne i64 %7, 0, !dbg !1506
  %9 = call i1 @llvm.expect.i1(i1 %8, i1 false), !dbg !1506
  br i1 %9, label %panic8, label %checkok14, !dbg !1506

checkok14:                                        ; preds = %checkok7
  %10 = load i16, ptr %4, align 2, !dbg !1506
  %zext = zext i16 %10 to i32, !dbg !1506
  %11 = load ptr, ptr %s, align 8, !dbg !1506
  %checknull15 = icmp eq ptr %11, null, !dbg !1506
  %12 = call i1 @llvm.expect.i1(i1 %checknull15, i1 false), !dbg !1506
  br i1 %12, label %panic16, label %checkok20, !dbg !1506

checkok20:                                        ; preds = %checkok14
  %13 = ptrtoint ptr %11 to i64, !dbg !1506
  %14 = urem i64 %13, 2, !dbg !1506
  %15 = icmp ne i64 %14, 0, !dbg !1506
  %16 = call i1 @llvm.expect.i1(i1 %15, i1 false), !dbg !1506
  br i1 %16, label %panic21, label %checkok31, !dbg !1506

checkok31:                                        ; preds = %checkok20
  %17 = load i16, ptr %11, align 2, !dbg !1506
  %zext32 = zext i16 %17 to i32, !dbg !1506
  %lshr = lshr i32 %zext32, 5, !dbg !1506
  %18 = freeze i32 %lshr, !dbg !1506
  %xor33 = xor i32 %zext, %18, !dbg !1506
  %trunc = trunc i32 %xor33 to i16, !dbg !1506
  store i16 %trunc, ptr %xor, align 2, !dbg !1506
    #dbg_declare(ptr %rot, !1507, !DIExpression(), !1508)
  %19 = load ptr, ptr %s, align 8, !dbg !1508
  %checknull34 = icmp eq ptr %19, null, !dbg !1508
  %20 = call i1 @llvm.expect.i1(i1 %checknull34, i1 false), !dbg !1508
  br i1 %20, label %panic35, label %checkok39, !dbg !1508

checkok39:                                        ; preds = %checkok31
  %21 = ptrtoint ptr %19 to i64, !dbg !1508
  %22 = urem i64 %21, 2, !dbg !1508
  %23 = icmp ne i64 %22, 0, !dbg !1508
  %24 = call i1 @llvm.expect.i1(i1 %23, i1 false), !dbg !1508
  br i1 %24, label %panic40, label %checkok50, !dbg !1508

checkok50:                                        ; preds = %checkok39
  %25 = load i16, ptr %19, align 2, !dbg !1508
  %zext51 = zext i16 %25 to i32, !dbg !1508
  %lshr52 = lshr i32 %zext51, 13, !dbg !1508
  %26 = freeze i32 %lshr52, !dbg !1508
  %trunc53 = trunc i32 %26 to i8, !dbg !1508
  store i8 %trunc53, ptr %rot, align 1, !dbg !1508
  %27 = load ptr, ptr %s, align 8, !dbg !1509
  %checknull54 = icmp eq ptr %27, null, !dbg !1509
  %28 = call i1 @llvm.expect.i1(i1 %checknull54, i1 false), !dbg !1509
  br i1 %28, label %panic55, label %checkok59, !dbg !1509

checkok59:                                        ; preds = %checkok50
  %29 = ptrtoint ptr %27 to i64, !dbg !1509
  %30 = urem i64 %29, 2, !dbg !1509
  %31 = icmp ne i64 %30, 0, !dbg !1509
  %32 = call i1 @llvm.expect.i1(i1 %31, i1 false), !dbg !1509
  br i1 %32, label %panic60, label %checkok70, !dbg !1509

checkok70:                                        ; preds = %checkok59
  %33 = load i16, ptr %27, align 2, !dbg !1509
  %zext71 = zext i16 %33 to i32, !dbg !1509
  %mul = mul i32 %zext71, 37213, !dbg !1509
  %add = add i32 %mul, 40503, !dbg !1509
  %trunc72 = trunc i32 %add to i16, !dbg !1509
  %34 = load ptr, ptr %s, align 8, !dbg !1509
  %checknull73 = icmp eq ptr %34, null, !dbg !1509
  %35 = call i1 @llvm.expect.i1(i1 %checknull73, i1 false), !dbg !1509
  br i1 %35, label %panic74, label %checkok78, !dbg !1509

checkok78:                                        ; preds = %checkok70
  %36 = ptrtoint ptr %34 to i64, !dbg !1509
  %37 = urem i64 %36, 2, !dbg !1509
  %38 = icmp ne i64 %37, 0, !dbg !1509
  %39 = call i1 @llvm.expect.i1(i1 %38, i1 false), !dbg !1509
  br i1 %39, label %panic79, label %checkok89, !dbg !1509

checkok89:                                        ; preds = %checkok78
  store i16 %trunc72, ptr %34, align 2, !dbg !1509
  %40 = load i16, ptr %xor, align 2, !dbg !1510
  %zext90 = zext i16 %40 to i32, !dbg !1510
  %lshr91 = lshr i32 %zext90, 5, !dbg !1510
  %41 = freeze i32 %lshr91, !dbg !1510
  %trunc92 = trunc i32 %41 to i8, !dbg !1510
  store i8 %trunc92, ptr %self93, align 1
  %42 = load i8, ptr %rot, align 1
  store i8 %42, ptr %shift, align 1
  %43 = load i8, ptr %self93, align 1, !dbg !1511
  %44 = load i8, ptr %self93, align 1, !dbg !1511
  %45 = load i8, ptr %shift, align 1, !dbg !1511
  %46 = call i8 @llvm.fshr.i8(i8 %43, i8 %44, i8 %45), !dbg !1511
  ret i8 %46, !dbg !1511

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.79, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.24, i64 9 }, ptr %indirectarg2, align 8
  %47 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %47(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 111) #5, !dbg !1502
  unreachable, !dbg !1502

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.11, i64 42 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.79, i64 11 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.24, i64 9 }, ptr %indirectarg6, align 8
  %48 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %48(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 115) #5, !dbg !1506
  unreachable, !dbg !1506

panic8:                                           ; preds = %checkok7
  store i64 2, ptr %taddr, align 8
  %49 = insertvalue %any undef, ptr %taddr, 0
  %50 = insertvalue %any %49, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %7, ptr %taddr9, align 8
  %51 = insertvalue %any undef, ptr %taddr9, 0
  %52 = insertvalue %any %51, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.file.79, i64 11 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.func.24, i64 9 }, ptr %indirectarg12, align 8
  store %any %50, ptr %varargslots, align 16
  %ptradd = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %52, ptr %ptradd, align 16
  %53 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %53, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg13, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, i32 115, ptr align 8 %indirectarg13) #5, !dbg !1506
  unreachable, !dbg !1506

panic16:                                          ; preds = %checkok14
  store %"char[]" { ptr @.panic_msg.11, i64 42 }, ptr %indirectarg17, align 8
  store %"char[]" { ptr @.file.79, i64 11 }, ptr %indirectarg18, align 8
  store %"char[]" { ptr @.func.24, i64 9 }, ptr %indirectarg19, align 8
  %54 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %54(ptr align 8 %indirectarg17, ptr align 8 %indirectarg18, ptr align 8 %indirectarg19, i32 115) #5, !dbg !1506
  unreachable, !dbg !1506

panic21:                                          ; preds = %checkok20
  store i64 2, ptr %taddr22, align 8
  %55 = insertvalue %any undef, ptr %taddr22, 0
  %56 = insertvalue %any %55, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %14, ptr %taddr23, align 8
  %57 = insertvalue %any undef, ptr %taddr23, 0
  %58 = insertvalue %any %57, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg24, align 8
  store %"char[]" { ptr @.file.79, i64 11 }, ptr %indirectarg25, align 8
  store %"char[]" { ptr @.func.24, i64 9 }, ptr %indirectarg26, align 8
  store %any %56, ptr %varargslots27, align 16
  %ptradd28 = getelementptr inbounds i8, ptr %varargslots27, i64 16
  store %any %58, ptr %ptradd28, align 16
  %59 = insertvalue %"any[]" undef, ptr %varargslots27, 0
  %"$$temp29" = insertvalue %"any[]" %59, i64 2, 1
  store %"any[]" %"$$temp29", ptr %indirectarg30, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg24, ptr align 8 %indirectarg25, ptr align 8 %indirectarg26, i32 115, ptr align 8 %indirectarg30) #5, !dbg !1506
  unreachable, !dbg !1506

panic35:                                          ; preds = %checkok31
  store %"char[]" { ptr @.panic_msg.11, i64 42 }, ptr %indirectarg36, align 8
  store %"char[]" { ptr @.file.79, i64 11 }, ptr %indirectarg37, align 8
  store %"char[]" { ptr @.func.24, i64 9 }, ptr %indirectarg38, align 8
  %60 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %60(ptr align 8 %indirectarg36, ptr align 8 %indirectarg37, ptr align 8 %indirectarg38, i32 116) #5, !dbg !1508
  unreachable, !dbg !1508

panic40:                                          ; preds = %checkok39
  store i64 2, ptr %taddr41, align 8
  %61 = insertvalue %any undef, ptr %taddr41, 0
  %62 = insertvalue %any %61, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %22, ptr %taddr42, align 8
  %63 = insertvalue %any undef, ptr %taddr42, 0
  %64 = insertvalue %any %63, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg43, align 8
  store %"char[]" { ptr @.file.79, i64 11 }, ptr %indirectarg44, align 8
  store %"char[]" { ptr @.func.24, i64 9 }, ptr %indirectarg45, align 8
  store %any %62, ptr %varargslots46, align 16
  %ptradd47 = getelementptr inbounds i8, ptr %varargslots46, i64 16
  store %any %64, ptr %ptradd47, align 16
  %65 = insertvalue %"any[]" undef, ptr %varargslots46, 0
  %"$$temp48" = insertvalue %"any[]" %65, i64 2, 1
  store %"any[]" %"$$temp48", ptr %indirectarg49, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg43, ptr align 8 %indirectarg44, ptr align 8 %indirectarg45, i32 116, ptr align 8 %indirectarg49) #5, !dbg !1508
  unreachable, !dbg !1508

panic55:                                          ; preds = %checkok50
  store %"char[]" { ptr @.panic_msg.11, i64 42 }, ptr %indirectarg56, align 8
  store %"char[]" { ptr @.file.79, i64 11 }, ptr %indirectarg57, align 8
  store %"char[]" { ptr @.func.24, i64 9 }, ptr %indirectarg58, align 8
  %66 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %66(ptr align 8 %indirectarg56, ptr align 8 %indirectarg57, ptr align 8 %indirectarg58, i32 117) #5, !dbg !1509
  unreachable, !dbg !1509

panic60:                                          ; preds = %checkok59
  store i64 2, ptr %taddr61, align 8
  %67 = insertvalue %any undef, ptr %taddr61, 0
  %68 = insertvalue %any %67, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %30, ptr %taddr62, align 8
  %69 = insertvalue %any undef, ptr %taddr62, 0
  %70 = insertvalue %any %69, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg63, align 8
  store %"char[]" { ptr @.file.79, i64 11 }, ptr %indirectarg64, align 8
  store %"char[]" { ptr @.func.24, i64 9 }, ptr %indirectarg65, align 8
  store %any %68, ptr %varargslots66, align 16
  %ptradd67 = getelementptr inbounds i8, ptr %varargslots66, i64 16
  store %any %70, ptr %ptradd67, align 16
  %71 = insertvalue %"any[]" undef, ptr %varargslots66, 0
  %"$$temp68" = insertvalue %"any[]" %71, i64 2, 1
  store %"any[]" %"$$temp68", ptr %indirectarg69, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg63, ptr align 8 %indirectarg64, ptr align 8 %indirectarg65, i32 117, ptr align 8 %indirectarg69) #5, !dbg !1509
  unreachable, !dbg !1509

panic74:                                          ; preds = %checkok70
  store %"char[]" { ptr @.panic_msg.11, i64 42 }, ptr %indirectarg75, align 8
  store %"char[]" { ptr @.file.79, i64 11 }, ptr %indirectarg76, align 8
  store %"char[]" { ptr @.func.24, i64 9 }, ptr %indirectarg77, align 8
  %72 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %72(ptr align 8 %indirectarg75, ptr align 8 %indirectarg76, ptr align 8 %indirectarg77, i32 117) #5, !dbg !1509
  unreachable, !dbg !1509

panic79:                                          ; preds = %checkok78
  store i64 2, ptr %taddr80, align 8
  %73 = insertvalue %any undef, ptr %taddr80, 0
  %74 = insertvalue %any %73, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %37, ptr %taddr81, align 8
  %75 = insertvalue %any undef, ptr %taddr81, 0
  %76 = insertvalue %any %75, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg82, align 8
  store %"char[]" { ptr @.file.79, i64 11 }, ptr %indirectarg83, align 8
  store %"char[]" { ptr @.func.24, i64 9 }, ptr %indirectarg84, align 8
  store %any %74, ptr %varargslots85, align 16
  %ptradd86 = getelementptr inbounds i8, ptr %varargslots85, i64 16
  store %any %76, ptr %ptradd86, align 16
  %77 = insertvalue %"any[]" undef, ptr %varargslots85, 0
  %"$$temp87" = insertvalue %"any[]" %77, i64 2, 1
  store %"any[]" %"$$temp87", ptr %indirectarg88, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg82, ptr align 8 %indirectarg83, ptr align 8 %indirectarg84, i32 117, ptr align 8 %indirectarg88) #5, !dbg !1509
  unreachable, !dbg !1509
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.math.random.Pcg16Random.next_bytes(ptr %0, ptr align 8 %1) #0 comdat !dbg !1513 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i8, align 1
  %taddr = alloca ptr, align 8
  %taddr4 = alloca i64, align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg7 = alloca %"char[]", align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg8 = alloca %"any[]", align 8
  %taddr12 = alloca i64, align 8
  %taddr13 = alloca i64, align 8
  %indirectarg14 = alloca %"char[]", align 8
  %indirectarg15 = alloca %"char[]", align 8
  %indirectarg16 = alloca %"char[]", align 8
  %varargslots17 = alloca [2 x %any], align 16
  %indirectarg20 = alloca %"any[]", align 8
  %taddr24 = alloca i64, align 8
  %taddr25 = alloca i64, align 8
  %indirectarg26 = alloca %"char[]", align 8
  %indirectarg27 = alloca %"char[]", align 8
  %indirectarg28 = alloca %"char[]", align 8
  %varargslots29 = alloca [2 x %any], align 16
  %indirectarg32 = alloca %"any[]", align 8
  %taddr34 = alloca ptr, align 8
  %taddr37 = alloca i64, align 8
  %taddr38 = alloca i64, align 8
  %indirectarg39 = alloca %"char[]", align 8
  %indirectarg40 = alloca %"char[]", align 8
  %indirectarg41 = alloca %"char[]", align 8
  %varargslots42 = alloca [2 x %any], align 16
  %indirectarg45 = alloca %"any[]", align 8
  %taddr49 = alloca i64, align 8
  %taddr50 = alloca i64, align 8
  %indirectarg51 = alloca %"char[]", align 8
  %indirectarg52 = alloca %"char[]", align 8
  %indirectarg53 = alloca %"char[]", align 8
  %varargslots54 = alloca [2 x %any], align 16
  %indirectarg57 = alloca %"any[]", align 8
  %taddr61 = alloca i64, align 8
  %taddr62 = alloca i64, align 8
  %indirectarg63 = alloca %"char[]", align 8
  %indirectarg64 = alloca %"char[]", align 8
  %indirectarg65 = alloca %"char[]", align 8
  %varargslots66 = alloca [2 x %any], align 16
  %indirectarg69 = alloca %"any[]", align 8
  %taddr74 = alloca i64, align 8
  %taddr75 = alloca i64, align 8
  %indirectarg76 = alloca %"char[]", align 8
  %indirectarg77 = alloca %"char[]", align 8
  %indirectarg78 = alloca %"char[]", align 8
  %varargslots79 = alloca [2 x %any], align 16
  %indirectarg82 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg86 = alloca %"char[]", align 8
  %indirectarg87 = alloca %"char[]", align 8
  %indirectarg88 = alloca %"char[]", align 8
  %indirectarg89 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !1514
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !1514
  br i1 %3, label %panic, label %checkok, !dbg !1514

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1515, !DIExpression(), !1514)
    #dbg_declare(ptr %1, !1516, !DIExpression(), !1514)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes, ptr align 8 %1, i32 16, i1 false)
    #dbg_declare(ptr %len, !1517, !DIExpression(), !1519)
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !1519
  %4 = load i64, ptr %ptradd, align 8, !dbg !1519
  store i64 %4, ptr %len, align 8, !dbg !1519
  br label %loop.cond, !dbg !1520

loop.cond:                                        ; preds = %checkok83, %checkok
  %5 = load i64, ptr %len, align 8, !dbg !1521
  %lt = icmp ult i64 0, %5, !dbg !1521
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !1521

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %value, !1523, !DIExpression(), !1525)
  %6 = load ptr, ptr %self, align 8, !dbg !1526
  %7 = call i8 @std.math.random.Pcg16Random.next_byte(ptr %6), !dbg !1525
  store i8 %7, ptr %value, align 1, !dbg !1525
  %8 = load i64, ptr %len, align 8, !dbg !1527
  %le = icmp ule i64 %8, 1, !dbg !1527
  br i1 %le, label %if.then, label %if.exit, !dbg !1527

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %9 = load ptr, ptr %taddr, align 8
  %10 = load i64, ptr %len, align 8, !dbg !1528
  %add = add i64 0, %10, !dbg !1528
  %gt = icmp ugt i64 0, %add, !dbg !1528
  %sub = sub i64 %add, 0, !dbg !1528
  %11 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !1528
  br i1 %11, label %panic3, label %checkok9, !dbg !1528

checkok9:                                         ; preds = %if.then
  %size = sub i64 %add, 0, !dbg !1528
  %12 = insertvalue %"char[]" undef, ptr %9, 0, !dbg !1528
  %13 = insertvalue %"char[]" %12, i64 %size, 1, !dbg !1528
  %14 = load %"char[]", ptr %bytes, align 8, !dbg !1528
  %15 = extractvalue %"char[]" %14, 0, !dbg !1528
  %16 = extractvalue %"char[]" %14, 1, !dbg !1528
  %gt10 = icmp ugt i64 0, %16, !dbg !1528
  %17 = call i1 @llvm.expect.i1(i1 %gt10, i1 false), !dbg !1528
  br i1 %17, label %panic11, label %checkok21, !dbg !1528

checkok21:                                        ; preds = %checkok9
  %size22 = sub i64 %16, 0, !dbg !1528
  %18 = insertvalue %"char[]" undef, ptr %15, 0, !dbg !1528
  %19 = insertvalue %"char[]" %18, i64 %size22, 1, !dbg !1528
  %20 = extractvalue %"char[]" %19, 0, !dbg !1528
  %21 = extractvalue %"char[]" %13, 0, !dbg !1528
  %22 = extractvalue %"char[]" %13, 1, !dbg !1528
  %23 = extractvalue %"char[]" %19, 1, !dbg !1528
  %neq = icmp ne i64 %23, %22, !dbg !1528
  %24 = call i1 @llvm.expect.i1(i1 %neq, i1 false), !dbg !1528
  br i1 %24, label %panic23, label %checkok33, !dbg !1528

checkok33:                                        ; preds = %checkok21
  %25 = mul i64 %22, 1, !dbg !1528
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %20, ptr align 1 %21, i64 %25, i1 false), !dbg !1528
  br label %expr_block.exit, !dbg !1530

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr34, align 8
  %26 = load ptr, ptr %taddr34, align 8
  %27 = insertvalue %"char[]" undef, ptr %26, 0
  %28 = insertvalue %"char[]" %27, i64 1, 1
  %29 = load %"char[]", ptr %bytes, align 8, !dbg !1531
  %30 = extractvalue %"char[]" %29, 0, !dbg !1531
  %31 = extractvalue %"char[]" %29, 1, !dbg !1531
  %gt35 = icmp sgt i64 0, %31, !dbg !1531
  %32 = call i1 @llvm.expect.i1(i1 %gt35, i1 false), !dbg !1531
  br i1 %32, label %panic36, label %checkok46, !dbg !1531

checkok46:                                        ; preds = %if.exit
  %lt47 = icmp slt i64 %31, 1, !dbg !1531
  %33 = call i1 @llvm.expect.i1(i1 %lt47, i1 false), !dbg !1531
  br i1 %33, label %panic48, label %checkok58, !dbg !1531

checkok58:                                        ; preds = %checkok46
  %34 = insertvalue %"char[]" undef, ptr %30, 0, !dbg !1531
  %35 = insertvalue %"char[]" %34, i64 1, 1, !dbg !1531
  %36 = extractvalue %"char[]" %35, 0, !dbg !1531
  %37 = extractvalue %"char[]" %28, 0, !dbg !1531
  %38 = extractvalue %"char[]" %28, 1, !dbg !1531
  %39 = extractvalue %"char[]" %35, 1, !dbg !1531
  %neq59 = icmp ne i64 %39, %38, !dbg !1531
  %40 = call i1 @llvm.expect.i1(i1 %neq59, i1 false), !dbg !1531
  br i1 %40, label %panic60, label %checkok70, !dbg !1531

checkok70:                                        ; preds = %checkok58
  %41 = mul i64 %38, 1, !dbg !1531
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %36, ptr align 1 %37, i64 %41, i1 false), !dbg !1531
  %42 = load i64, ptr %len, align 8, !dbg !1532
  %sub71 = sub i64 %42, 1, !dbg !1532
  store i64 %sub71, ptr %len, align 8, !dbg !1532
  %43 = load %"char[]", ptr %bytes, align 8, !dbg !1533
  %44 = extractvalue %"char[]" %43, 0, !dbg !1533
  %45 = extractvalue %"char[]" %43, 1, !dbg !1533
  %gt72 = icmp ugt i64 1, %45, !dbg !1533
  %46 = call i1 @llvm.expect.i1(i1 %gt72, i1 false), !dbg !1533
  br i1 %46, label %panic73, label %checkok83, !dbg !1533

checkok83:                                        ; preds = %checkok70
  %size84 = sub i64 %45, 1, !dbg !1533
  %ptradd85 = getelementptr inbounds i8, ptr %44, i64 1, !dbg !1533
  %47 = insertvalue %"char[]" undef, ptr %ptradd85, 0, !dbg !1533
  %48 = insertvalue %"char[]" %47, i64 %size84, 1, !dbg !1533
  store %"char[]" %48, ptr %bytes, align 8, !dbg !1533
  br label %loop.cond, !dbg !1533

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.89, i64 30 }, ptr %string, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg86, ptr align 8 %string, i32 16, i1 false)
  store %"char[]" { ptr @.str.90, i64 11 }, ptr %indirectarg87, align 8
  store %"char[]" { ptr @.str.91, i64 22 }, ptr %indirectarg88, align 8
  store %"any[]" zeroinitializer, ptr %indirectarg89, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg86, ptr align 8 %indirectarg87, ptr align 8 %indirectarg88, i32 121, ptr align 8 %indirectarg89), !dbg !1534
  unreachable, !dbg !1534

expr_block.exit:                                  ; preds = %checkok33
  ret void, !dbg !1534

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.79, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg2, align 8
  %49 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %49(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 121) #5, !dbg !1514
  unreachable, !dbg !1514

panic3:                                           ; preds = %if.then
  store i64 %sub, ptr %taddr4, align 8
  %50 = insertvalue %any undef, ptr %taddr4, 0
  %51 = insertvalue %any %50, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.14, i64 43 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg6, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg7, align 8
  store %any %51, ptr %varargslots, align 16
  %52 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %52, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg8, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, ptr align 8 %indirectarg7, i32 153, ptr align 8 %indirectarg8) #5, !dbg !1528
  unreachable, !dbg !1528

panic11:                                          ; preds = %checkok9
  store i64 %16, ptr %taddr12, align 8
  %53 = insertvalue %any undef, ptr %taddr12, 0
  %54 = insertvalue %any %53, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr13, align 8
  %55 = insertvalue %any undef, ptr %taddr13, 0
  %56 = insertvalue %any %55, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.16, i64 61 }, ptr %indirectarg14, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg15, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg16, align 8
  store %any %54, ptr %varargslots17, align 16
  %ptradd18 = getelementptr inbounds i8, ptr %varargslots17, i64 16
  store %any %56, ptr %ptradd18, align 16
  %57 = insertvalue %"any[]" undef, ptr %varargslots17, 0
  %"$$temp19" = insertvalue %"any[]" %57, i64 2, 1
  store %"any[]" %"$$temp19", ptr %indirectarg20, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg14, ptr align 8 %indirectarg15, ptr align 8 %indirectarg16, i32 153, ptr align 8 %indirectarg20) #5, !dbg !1528
  unreachable, !dbg !1528

panic23:                                          ; preds = %checkok21
  store i64 %23, ptr %taddr24, align 8
  %58 = insertvalue %any undef, ptr %taddr24, 0
  %59 = insertvalue %any %58, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %22, ptr %taddr25, align 8
  %60 = insertvalue %any undef, ptr %taddr25, 0
  %61 = insertvalue %any %60, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 38 }, ptr %indirectarg26, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg27, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg28, align 8
  store %any %59, ptr %varargslots29, align 16
  %ptradd30 = getelementptr inbounds i8, ptr %varargslots29, i64 16
  store %any %61, ptr %ptradd30, align 16
  %62 = insertvalue %"any[]" undef, ptr %varargslots29, 0
  %"$$temp31" = insertvalue %"any[]" %62, i64 2, 1
  store %"any[]" %"$$temp31", ptr %indirectarg32, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg26, ptr align 8 %indirectarg27, ptr align 8 %indirectarg28, i32 153, ptr align 8 %indirectarg32) #5, !dbg !1528
  unreachable, !dbg !1528

panic36:                                          ; preds = %if.exit
  store i64 %31, ptr %taddr37, align 8
  %63 = insertvalue %any undef, ptr %taddr37, 0
  %64 = insertvalue %any %63, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr38, align 8
  %65 = insertvalue %any undef, ptr %taddr38, 0
  %66 = insertvalue %any %65, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.16, i64 61 }, ptr %indirectarg39, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg40, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg41, align 8
  store %any %64, ptr %varargslots42, align 16
  %ptradd43 = getelementptr inbounds i8, ptr %varargslots42, i64 16
  store %any %66, ptr %ptradd43, align 16
  %67 = insertvalue %"any[]" undef, ptr %varargslots42, 0
  %"$$temp44" = insertvalue %"any[]" %67, i64 2, 1
  store %"any[]" %"$$temp44", ptr %indirectarg45, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg39, ptr align 8 %indirectarg40, ptr align 8 %indirectarg41, i32 156, ptr align 8 %indirectarg45) #5, !dbg !1531
  unreachable, !dbg !1531

panic48:                                          ; preds = %checkok46
  store i64 0, ptr %taddr49, align 8
  %68 = insertvalue %any undef, ptr %taddr49, 0
  %69 = insertvalue %any %68, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %31, ptr %taddr50, align 8
  %70 = insertvalue %any undef, ptr %taddr50, 0
  %71 = insertvalue %any %70, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.18, i64 60 }, ptr %indirectarg51, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg52, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg53, align 8
  store %any %69, ptr %varargslots54, align 16
  %ptradd55 = getelementptr inbounds i8, ptr %varargslots54, i64 16
  store %any %71, ptr %ptradd55, align 16
  %72 = insertvalue %"any[]" undef, ptr %varargslots54, 0
  %"$$temp56" = insertvalue %"any[]" %72, i64 2, 1
  store %"any[]" %"$$temp56", ptr %indirectarg57, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg51, ptr align 8 %indirectarg52, ptr align 8 %indirectarg53, i32 156, ptr align 8 %indirectarg57) #5, !dbg !1531
  unreachable, !dbg !1531

panic60:                                          ; preds = %checkok58
  store i64 %39, ptr %taddr61, align 8
  %73 = insertvalue %any undef, ptr %taddr61, 0
  %74 = insertvalue %any %73, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %38, ptr %taddr62, align 8
  %75 = insertvalue %any undef, ptr %taddr62, 0
  %76 = insertvalue %any %75, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 38 }, ptr %indirectarg63, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg64, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg65, align 8
  store %any %74, ptr %varargslots66, align 16
  %ptradd67 = getelementptr inbounds i8, ptr %varargslots66, i64 16
  store %any %76, ptr %ptradd67, align 16
  %77 = insertvalue %"any[]" undef, ptr %varargslots66, 0
  %"$$temp68" = insertvalue %"any[]" %77, i64 2, 1
  store %"any[]" %"$$temp68", ptr %indirectarg69, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg63, ptr align 8 %indirectarg64, ptr align 8 %indirectarg65, i32 156, ptr align 8 %indirectarg69) #5, !dbg !1531
  unreachable, !dbg !1531

panic73:                                          ; preds = %checkok70
  store i64 %45, ptr %taddr74, align 8
  %78 = insertvalue %any undef, ptr %taddr74, 0
  %79 = insertvalue %any %78, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 1, ptr %taddr75, align 8
  %80 = insertvalue %any undef, ptr %taddr75, 0
  %81 = insertvalue %any %80, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.16, i64 61 }, ptr %indirectarg76, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg77, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg78, align 8
  store %any %79, ptr %varargslots79, align 16
  %ptradd80 = getelementptr inbounds i8, ptr %varargslots79, i64 16
  store %any %81, ptr %ptradd80, align 16
  %82 = insertvalue %"any[]" undef, ptr %varargslots79, 0
  %"$$temp81" = insertvalue %"any[]" %82, i64 2, 1
  store %"any[]" %"$$temp81", ptr %indirectarg82, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg76, ptr align 8 %indirectarg77, ptr align 8 %indirectarg78, i32 158, ptr align 8 %indirectarg82) #5, !dbg !1533
  unreachable, !dbg !1533
}

; Function Attrs: nounwind ssp uwtable
define weak_odr <2 x i64> @std.math.random.Pcg16Random.next_int128(ptr %0) #0 comdat !dbg !1537 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %taddr = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !1540
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1540
  br i1 %2, label %panic, label %checkok, !dbg !1540

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1541, !DIExpression(), !1540)
  %3 = load ptr, ptr %self, align 8, !dbg !1542
  %4 = call i64 @std.math.random.Pcg16Random.next_long(ptr %3), !dbg !1544
  %zext = zext i64 %4 to i128, !dbg !1544
  %shl = shl i128 %zext, 64, !dbg !1544
  %5 = freeze i128 %shl, !dbg !1544
  %6 = load ptr, ptr %self, align 8, !dbg !1542
  %7 = call i64 @std.math.random.Pcg16Random.next_long(ptr %6), !dbg !1544
  %zext3 = zext i64 %7 to i128, !dbg !1544
  %add = add i128 %5, %zext3, !dbg !1544
  store i128 %add, ptr %taddr, align 16
  %8 = load <2 x i64>, ptr %taddr, align 16
  ret <2 x i64> %8

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.79, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.21, i64 11 }, ptr %indirectarg2, align 8
  %9 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %9(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 122) #5, !dbg !1540
  unreachable, !dbg !1540
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.math.random.Pcg16Random.next_long(ptr %0) #0 comdat !dbg !1545 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1548
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1548
  br i1 %2, label %panic, label %checkok, !dbg !1548

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1549, !DIExpression(), !1548)
  %3 = load ptr, ptr %self, align 8, !dbg !1550
  %4 = call i32 @std.math.random.Pcg16Random.next_int(ptr %3), !dbg !1552
  %zext = zext i32 %4 to i64, !dbg !1552
  %shl = shl i64 %zext, 32, !dbg !1552
  %5 = freeze i64 %shl, !dbg !1552
  %6 = load ptr, ptr %self, align 8, !dbg !1550
  %7 = call i32 @std.math.random.Pcg16Random.next_int(ptr %6), !dbg !1552
  %zext3 = zext i32 %7 to i64, !dbg !1552
  %add = add i64 %5, %zext3, !dbg !1552
  ret i64 %add, !dbg !1552

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.79, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.10, i64 9 }, ptr %indirectarg2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 123) #5, !dbg !1548
  unreachable, !dbg !1548
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i32 @std.math.random.Pcg16Random.next_int(ptr %0) #0 comdat !dbg !1553 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1556
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1556
  br i1 %2, label %panic, label %checkok, !dbg !1556

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1557, !DIExpression(), !1556)
  %3 = load ptr, ptr %self, align 8, !dbg !1558
  %4 = call i16 @std.math.random.Pcg16Random.next_short(ptr %3), !dbg !1560
  %zext = zext i16 %4 to i32, !dbg !1560
  %shl = shl i32 %zext, 16, !dbg !1560
  %5 = freeze i32 %shl, !dbg !1560
  %6 = load ptr, ptr %self, align 8, !dbg !1558
  %7 = call i16 @std.math.random.Pcg16Random.next_short(ptr %6), !dbg !1560
  %zext3 = zext i16 %7 to i32, !dbg !1560
  %add = add i32 %5, %zext3, !dbg !1560
  ret i32 %add, !dbg !1560

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.79, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.22, i64 8 }, ptr %indirectarg2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 124) #5, !dbg !1556
  unreachable, !dbg !1556
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i16 @std.math.random.Pcg16Random.next_short(ptr %0) #0 comdat !dbg !1561 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1564
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1564
  br i1 %2, label %panic, label %checkok, !dbg !1564

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1565, !DIExpression(), !1564)
  %3 = load ptr, ptr %self, align 8, !dbg !1566
  %4 = call i8 @std.math.random.Pcg16Random.next_byte(ptr %3), !dbg !1568
  %zext = zext i8 %4 to i16, !dbg !1568
  %zext3 = zext i16 %zext to i32, !dbg !1568
  %shl = shl i32 %zext3, 8, !dbg !1568
  %5 = freeze i32 %shl, !dbg !1568
  %6 = load ptr, ptr %self, align 8, !dbg !1566
  %7 = call i8 @std.math.random.Pcg16Random.next_byte(ptr %6), !dbg !1568
  %zext4 = zext i8 %7 to i32, !dbg !1568
  %add = add i32 %5, %zext4, !dbg !1568
  %trunc = trunc i32 %add to i16, !dbg !1568
  ret i16 %trunc, !dbg !1568

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.79, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.23, i64 10 }, ptr %indirectarg2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 125) #5, !dbg !1564
  unreachable, !dbg !1564
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.math.random.seeder(ptr align 8 %0, ptr align 8 %1) #0 comdat !dbg !1569 {
entry:
  %out_chars = alloca i64, align 8
  %reserve = alloca i64, align 8
  %state = alloca ptr, align 8
  %words = alloca %"ulong[]", align 8
  %elements = alloca i64, align 8
  %taddr = alloca ptr, align 8
  %taddr2 = alloca i64, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg5 = alloca %"any[]", align 8
  %taddr8 = alloca i64, align 8
  %taddr9 = alloca i64, align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %varargslots13 = alloca [2 x %any], align 16
  %indirectarg16 = alloca %"any[]", align 8
  %words_len_2 = alloca i64, align 8
  %i = alloca i64, align 8
  %j = alloca i64, align 8
  %indirectarg26 = alloca %"char[]", align 8
  %indirectarg27 = alloca %"char[]", align 8
  %indirectarg28 = alloca %"char[]", align 8
  %taddr32 = alloca i64, align 8
  %taddr33 = alloca i64, align 8
  %indirectarg34 = alloca %"char[]", align 8
  %indirectarg35 = alloca %"char[]", align 8
  %indirectarg36 = alloca %"char[]", align 8
  %varargslots37 = alloca [2 x %any], align 16
  %indirectarg40 = alloca %"any[]", align 8
  %taddr44 = alloca i64, align 8
  %taddr45 = alloca i64, align 8
  %indirectarg46 = alloca %"char[]", align 8
  %indirectarg47 = alloca %"char[]", align 8
  %indirectarg48 = alloca %"char[]", align 8
  %varargslots49 = alloca [2 x %any], align 16
  %indirectarg52 = alloca %"any[]", align 8
  %taddr58 = alloca i64, align 8
  %indirectarg59 = alloca %"char[]", align 8
  %indirectarg60 = alloca %"char[]", align 8
  %indirectarg61 = alloca %"char[]", align 8
  %varargslots62 = alloca [1 x %any], align 16
  %indirectarg64 = alloca %"any[]", align 8
  %taddr68 = alloca i64, align 8
  %taddr69 = alloca i64, align 8
  %indirectarg70 = alloca %"char[]", align 8
  %indirectarg71 = alloca %"char[]", align 8
  %indirectarg72 = alloca %"char[]", align 8
  %varargslots73 = alloca [2 x %any], align 16
  %indirectarg76 = alloca %"any[]", align 8
  %indirectarg80 = alloca %"char[]", align 8
  %indirectarg81 = alloca %"char[]", align 8
  %indirectarg82 = alloca %"char[]", align 8
  %expr = alloca [8 x i8], align 1
  %x = alloca i64, align 8
  %taddr89 = alloca i64, align 8
  %taddr90 = alloca i64, align 8
  %indirectarg91 = alloca %"char[]", align 8
  %indirectarg92 = alloca %"char[]", align 8
  %indirectarg93 = alloca %"char[]", align 8
  %varargslots94 = alloca [2 x %any], align 16
  %indirectarg97 = alloca %"any[]", align 8
  %taddr101 = alloca i64, align 8
  %taddr102 = alloca i64, align 8
  %indirectarg103 = alloca %"char[]", align 8
  %indirectarg104 = alloca %"char[]", align 8
  %indirectarg105 = alloca %"char[]", align 8
  %varargslots106 = alloca [2 x %any], align 16
  %indirectarg109 = alloca %"any[]", align 8
  %taddr114 = alloca i64, align 8
  %taddr115 = alloca i64, align 8
  %indirectarg116 = alloca %"char[]", align 8
  %indirectarg117 = alloca %"char[]", align 8
  %indirectarg118 = alloca %"char[]", align 8
  %varargslots119 = alloca [2 x %any], align 16
  %indirectarg122 = alloca %"any[]", align 8
  %taddr126 = alloca i64, align 8
  %taddr127 = alloca i64, align 8
  %indirectarg128 = alloca %"char[]", align 8
  %indirectarg129 = alloca %"char[]", align 8
  %indirectarg130 = alloca %"char[]", align 8
  %varargslots131 = alloca [2 x %any], align 16
  %indirectarg134 = alloca %"any[]", align 8
  %remaining = alloca i64, align 8
  %rest = alloca i64, align 8
  %dst = alloca ptr, align 8
  %taddr145 = alloca i64, align 8
  %taddr146 = alloca i64, align 8
  %indirectarg147 = alloca %"char[]", align 8
  %indirectarg148 = alloca %"char[]", align 8
  %indirectarg149 = alloca %"char[]", align 8
  %varargslots150 = alloca [2 x %any], align 16
  %indirectarg153 = alloca %"any[]", align 8
  %src = alloca ptr, align 8
  %len = alloca i64, align 8
  %indirectarg156 = alloca %"char[]", align 8
  %indirectarg157 = alloca %"char[]", align 8
  %indirectarg158 = alloca %"char[]", align 8
  %indirectarg161 = alloca %"char[]", align 8
  %indirectarg162 = alloca %"char[]", align 8
  %indirectarg163 = alloca %"char[]", align 8
  %indirectarg175 = alloca %"char[]", align 8
  %indirectarg176 = alloca %"char[]", align 8
  %indirectarg177 = alloca %"char[]", align 8
  %taddr182 = alloca i64, align 8
  %indirectarg183 = alloca %"char[]", align 8
  %indirectarg184 = alloca %"char[]", align 8
  %indirectarg185 = alloca %"char[]", align 8
  %varargslots186 = alloca [1 x %any], align 16
  %indirectarg188 = alloca %"any[]", align 8
  %taddr192 = alloca i64, align 8
  %taddr193 = alloca i64, align 8
  %indirectarg194 = alloca %"char[]", align 8
  %indirectarg195 = alloca %"char[]", align 8
  %indirectarg196 = alloca %"char[]", align 8
  %varargslots197 = alloca [2 x %any], align 16
  %indirectarg200 = alloca %"any[]", align 8
  %taddr204 = alloca i64, align 8
  %taddr205 = alloca i64, align 8
  %indirectarg206 = alloca %"char[]", align 8
  %indirectarg207 = alloca %"char[]", align 8
  %indirectarg208 = alloca %"char[]", align 8
  %varargslots209 = alloca [2 x %any], align 16
  %indirectarg212 = alloca %"any[]", align 8
  %taddr219 = alloca i64, align 8
  %indirectarg220 = alloca %"char[]", align 8
  %indirectarg221 = alloca %"char[]", align 8
  %indirectarg222 = alloca %"char[]", align 8
  %varargslots223 = alloca [1 x %any], align 16
  %indirectarg225 = alloca %"any[]", align 8
  %taddr229 = alloca i64, align 8
  %taddr230 = alloca i64, align 8
  %indirectarg231 = alloca %"char[]", align 8
  %indirectarg232 = alloca %"char[]", align 8
  %indirectarg233 = alloca %"char[]", align 8
  %varargslots234 = alloca [2 x %any], align 16
  %indirectarg237 = alloca %"any[]", align 8
  %taddr241 = alloca i64, align 8
  %taddr242 = alloca i64, align 8
  %indirectarg243 = alloca %"char[]", align 8
  %indirectarg244 = alloca %"char[]", align 8
  %indirectarg245 = alloca %"char[]", align 8
  %varargslots246 = alloca [2 x %any], align 16
  %indirectarg249 = alloca %"any[]", align 8
  %taddr254 = alloca i64, align 8
  %indirectarg255 = alloca %"char[]", align 8
  %indirectarg256 = alloca %"char[]", align 8
  %indirectarg257 = alloca %"char[]", align 8
  %varargslots258 = alloca [1 x %any], align 16
  %indirectarg260 = alloca %"any[]", align 8
  %taddr264 = alloca i64, align 8
  %taddr265 = alloca i64, align 8
  %indirectarg266 = alloca %"char[]", align 8
  %indirectarg267 = alloca %"char[]", align 8
  %indirectarg268 = alloca %"char[]", align 8
  %varargslots269 = alloca [2 x %any], align 16
  %indirectarg272 = alloca %"any[]", align 8
  %taddr276 = alloca i64, align 8
  %taddr277 = alloca i64, align 8
  %indirectarg278 = alloca %"char[]", align 8
  %indirectarg279 = alloca %"char[]", align 8
  %indirectarg280 = alloca %"char[]", align 8
  %varargslots281 = alloca [2 x %any], align 16
  %indirectarg284 = alloca %"any[]", align 8
  %i288 = alloca i64, align 8
  %j293 = alloca i64, align 8
  %indirectarg297 = alloca %"char[]", align 8
  %indirectarg298 = alloca %"char[]", align 8
  %indirectarg299 = alloca %"char[]", align 8
  %taddr304 = alloca i64, align 8
  %indirectarg305 = alloca %"char[]", align 8
  %indirectarg306 = alloca %"char[]", align 8
  %indirectarg307 = alloca %"char[]", align 8
  %varargslots308 = alloca [1 x %any], align 16
  %indirectarg310 = alloca %"any[]", align 8
  %taddr314 = alloca i64, align 8
  %taddr315 = alloca i64, align 8
  %indirectarg316 = alloca %"char[]", align 8
  %indirectarg317 = alloca %"char[]", align 8
  %indirectarg318 = alloca %"char[]", align 8
  %varargslots319 = alloca [2 x %any], align 16
  %indirectarg322 = alloca %"any[]", align 8
  %taddr326 = alloca i64, align 8
  %taddr327 = alloca i64, align 8
  %indirectarg328 = alloca %"char[]", align 8
  %indirectarg329 = alloca %"char[]", align 8
  %indirectarg330 = alloca %"char[]", align 8
  %varargslots331 = alloca [2 x %any], align 16
  %indirectarg334 = alloca %"any[]", align 8
  %indirectarg341 = alloca %"char[]", align 8
  %indirectarg342 = alloca %"char[]", align 8
  %indirectarg343 = alloca %"char[]", align 8
  %taddr348 = alloca i64, align 8
  %indirectarg349 = alloca %"char[]", align 8
  %indirectarg350 = alloca %"char[]", align 8
  %indirectarg351 = alloca %"char[]", align 8
  %varargslots352 = alloca [1 x %any], align 16
  %indirectarg354 = alloca %"any[]", align 8
  %taddr358 = alloca i64, align 8
  %taddr359 = alloca i64, align 8
  %indirectarg360 = alloca %"char[]", align 8
  %indirectarg361 = alloca %"char[]", align 8
  %indirectarg362 = alloca %"char[]", align 8
  %varargslots363 = alloca [2 x %any], align 16
  %indirectarg366 = alloca %"any[]", align 8
  %taddr370 = alloca i64, align 8
  %taddr371 = alloca i64, align 8
  %indirectarg372 = alloca %"char[]", align 8
  %indirectarg373 = alloca %"char[]", align 8
  %indirectarg374 = alloca %"char[]", align 8
  %varargslots375 = alloca [2 x %any], align 16
  %indirectarg378 = alloca %"any[]", align 8
  %taddr385 = alloca i64, align 8
  %indirectarg386 = alloca %"char[]", align 8
  %indirectarg387 = alloca %"char[]", align 8
  %indirectarg388 = alloca %"char[]", align 8
  %varargslots389 = alloca [1 x %any], align 16
  %indirectarg391 = alloca %"any[]", align 8
  %taddr395 = alloca i64, align 8
  %taddr396 = alloca i64, align 8
  %indirectarg397 = alloca %"char[]", align 8
  %indirectarg398 = alloca %"char[]", align 8
  %indirectarg399 = alloca %"char[]", align 8
  %varargslots400 = alloca [2 x %any], align 16
  %indirectarg403 = alloca %"any[]", align 8
  %taddr407 = alloca i64, align 8
  %taddr408 = alloca i64, align 8
  %indirectarg409 = alloca %"char[]", align 8
  %indirectarg410 = alloca %"char[]", align 8
  %indirectarg411 = alloca %"char[]", align 8
  %varargslots412 = alloca [2 x %any], align 16
  %indirectarg415 = alloca %"any[]", align 8
  %taddr420 = alloca i64, align 8
  %indirectarg421 = alloca %"char[]", align 8
  %indirectarg422 = alloca %"char[]", align 8
  %indirectarg423 = alloca %"char[]", align 8
  %varargslots424 = alloca [1 x %any], align 16
  %indirectarg426 = alloca %"any[]", align 8
  %taddr430 = alloca i64, align 8
  %taddr431 = alloca i64, align 8
  %indirectarg432 = alloca %"char[]", align 8
  %indirectarg433 = alloca %"char[]", align 8
  %indirectarg434 = alloca %"char[]", align 8
  %varargslots435 = alloca [2 x %any], align 16
  %indirectarg438 = alloca %"any[]", align 8
  %taddr442 = alloca i64, align 8
  %taddr443 = alloca i64, align 8
  %indirectarg444 = alloca %"char[]", align 8
  %indirectarg445 = alloca %"char[]", align 8
  %indirectarg446 = alloca %"char[]", align 8
  %varargslots447 = alloca [2 x %any], align 16
  %indirectarg450 = alloca %"any[]", align 8
  %i456 = alloca i64, align 8
  %j460 = alloca i64, align 8
  %indirectarg464 = alloca %"char[]", align 8
  %indirectarg465 = alloca %"char[]", align 8
  %indirectarg466 = alloca %"char[]", align 8
  %taddr472 = alloca i64, align 8
  %taddr473 = alloca i64, align 8
  %indirectarg474 = alloca %"char[]", align 8
  %indirectarg475 = alloca %"char[]", align 8
  %indirectarg476 = alloca %"char[]", align 8
  %varargslots477 = alloca [2 x %any], align 16
  %indirectarg480 = alloca %"any[]", align 8
  %taddr484 = alloca i64, align 8
  %taddr485 = alloca i64, align 8
  %indirectarg486 = alloca %"char[]", align 8
  %indirectarg487 = alloca %"char[]", align 8
  %indirectarg488 = alloca %"char[]", align 8
  %varargslots489 = alloca [2 x %any], align 16
  %indirectarg492 = alloca %"any[]", align 8
  %taddr498 = alloca i64, align 8
  %taddr499 = alloca i64, align 8
  %indirectarg500 = alloca %"char[]", align 8
  %indirectarg501 = alloca %"char[]", align 8
  %indirectarg502 = alloca %"char[]", align 8
  %varargslots503 = alloca [2 x %any], align 16
  %indirectarg506 = alloca %"any[]", align 8
  %taddr510 = alloca i64, align 8
  %taddr511 = alloca i64, align 8
  %indirectarg512 = alloca %"char[]", align 8
  %indirectarg513 = alloca %"char[]", align 8
  %indirectarg514 = alloca %"char[]", align 8
  %varargslots515 = alloca [2 x %any], align 16
  %indirectarg518 = alloca %"any[]", align 8
  %taddr523 = alloca i64, align 8
  %taddr524 = alloca i64, align 8
  %indirectarg525 = alloca %"char[]", align 8
  %indirectarg526 = alloca %"char[]", align 8
  %indirectarg527 = alloca %"char[]", align 8
  %varargslots528 = alloca [2 x %any], align 16
  %indirectarg531 = alloca %"any[]", align 8
  %taddr535 = alloca i64, align 8
  %taddr536 = alloca i64, align 8
  %indirectarg537 = alloca %"char[]", align 8
  %indirectarg538 = alloca %"char[]", align 8
  %indirectarg539 = alloca %"char[]", align 8
  %varargslots540 = alloca [2 x %any], align 16
  %indirectarg543 = alloca %"any[]", align 8
  %taddr549 = alloca ptr, align 8
  %taddr554 = alloca i64, align 8
  %indirectarg555 = alloca %"char[]", align 8
  %indirectarg556 = alloca %"char[]", align 8
  %indirectarg557 = alloca %"char[]", align 8
  %varargslots558 = alloca [1 x %any], align 16
  %indirectarg560 = alloca %"any[]", align 8
  %taddr565 = alloca i64, align 8
  %taddr566 = alloca i64, align 8
  %indirectarg567 = alloca %"char[]", align 8
  %indirectarg568 = alloca %"char[]", align 8
  %indirectarg569 = alloca %"char[]", align 8
  %varargslots570 = alloca [2 x %any], align 16
  %indirectarg573 = alloca %"any[]", align 8
  %taddr578 = alloca i64, align 8
  %taddr579 = alloca i64, align 8
  %indirectarg580 = alloca %"char[]", align 8
  %indirectarg581 = alloca %"char[]", align 8
  %indirectarg582 = alloca %"char[]", align 8
  %varargslots583 = alloca [2 x %any], align 16
  %indirectarg586 = alloca %"any[]", align 8
    #dbg_declare(ptr %0, !1572, !DIExpression(), !1573)
    #dbg_declare(ptr %1, !1574, !DIExpression(), !1573)
    #dbg_declare(ptr %out_chars, !1575, !DIExpression(), !1576)
  %ptradd = getelementptr inbounds i8, ptr %1, i64 8, !dbg !1576
  %2 = load i64, ptr %ptradd, align 8, !dbg !1576
  store i64 %2, ptr %out_chars, align 8, !dbg !1576
  store i64 0, ptr %reserve, align 8
    #dbg_declare(ptr %state, !1577, !DIExpression(), !1612)
  %3 = load i64, ptr %reserve, align 8, !dbg !1612
  %4 = call ptr @std.core.mem.allocator.push_pool(i64 %3) #6, !dbg !1612
  store ptr %4, ptr %state, align 8, !dbg !1612
    #dbg_declare(ptr %words, !1614, !DIExpression(), !1620)
  %5 = load i64, ptr %out_chars, align 8, !dbg !1620
  %add = add i64 %5, 7, !dbg !1620
  %sdiv = sdiv i64 %add, 8, !dbg !1620
  store i64 %sdiv, ptr %elements, align 8
  %6 = load i64, ptr %elements, align 8, !dbg !1621
  %mul = mul i64 8, %6, !dbg !1621
  %7 = call ptr @std.core.mem.tmalloc(i64 %mul, i64 8) #6, !dbg !1621
  store ptr %7, ptr %taddr, align 8
  %8 = load ptr, ptr %taddr, align 8
  %9 = load i64, ptr %elements, align 8, !dbg !1621
  %add1 = add i64 0, %9, !dbg !1621
  %gt = icmp ugt i64 0, %add1, !dbg !1621
  %sub = sub i64 %add1, 0, !dbg !1621
  %10 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !1621
  br i1 %10, label %panic, label %checkok, !dbg !1621

checkok:                                          ; preds = %entry
  %size = sub i64 %add1, 0, !dbg !1621
  %11 = insertvalue %"ulong[]" undef, ptr %8, 0, !dbg !1621
  %12 = insertvalue %"ulong[]" %11, i64 %size, 1, !dbg !1621
  store %"ulong[]" %12, ptr %words, align 8, !dbg !1621
  %13 = load %"ulong[]", ptr %words, align 8, !dbg !1623
  %14 = extractvalue %"ulong[]" %13, 0, !dbg !1623
  %15 = extractvalue %"ulong[]" %13, 1, !dbg !1623
  %gt6 = icmp ugt i64 0, %15, !dbg !1623
  %16 = call i1 @llvm.expect.i1(i1 %gt6, i1 false), !dbg !1623
  br i1 %16, label %panic7, label %checkok17, !dbg !1623

checkok17:                                        ; preds = %checkok
  br label %cond, !dbg !1623

cond:                                             ; preds = %assign, %checkok17
  %17 = phi i64 [ 0, %checkok17 ], [ %add18, %assign ], !dbg !1623
  %lt = icmp ult i64 %17, %15, !dbg !1623
  br i1 %lt, label %assign, label %exit, !dbg !1623

assign:                                           ; preds = %cond
  %ptroffset = getelementptr inbounds [8 x i8], ptr %14, i64 %17, !dbg !1623
  store i64 -7046029254386353131, ptr %ptroffset, align 8, !dbg !1623
  %add18 = add i64 %17, 1, !dbg !1623
  br label %cond, !dbg !1623

exit:                                             ; preds = %cond
    #dbg_declare(ptr %words_len_2, !1624, !DIExpression(), !1625)
  %ptradd19 = getelementptr inbounds i8, ptr %words, i64 8, !dbg !1625
  %18 = load i64, ptr %ptradd19, align 8, !dbg !1625
  %mul20 = mul i64 %18, 2, !dbg !1625
  store i64 %mul20, ptr %words_len_2, align 8, !dbg !1625
    #dbg_declare(ptr %i, !1626, !DIExpression(), !1628)
  store i64 0, ptr %i, align 8, !dbg !1628
  br label %loop.cond, !dbg !1628

loop.cond:                                        ; preds = %checkok135, %exit
  %19 = load i64, ptr %i, align 8, !dbg !1628
  %ptradd21 = getelementptr inbounds i8, ptr %0, i64 8, !dbg !1628
  %20 = load i64, ptr %ptradd21, align 8, !dbg !1628
  %sdiv22 = sdiv i64 %20, 8, !dbg !1628
  %gt23 = icmp sgt i64 %sdiv22, %19, !dbg !1628
  %check = icmp sge i64 %19, 0, !dbg !1628
  %siui-gt = and i1 %check, %gt23, !dbg !1628
  br i1 %siui-gt, label %loop.body, label %loop.exit, !dbg !1628

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %j, !1629, !DIExpression(), !1631)
  %21 = load i64, ptr %i, align 8, !dbg !1631
  %ptradd24 = getelementptr inbounds i8, ptr %words, i64 8, !dbg !1631
  %22 = load i64, ptr %ptradd24, align 8, !dbg !1631
  %zero = icmp eq i64 %22, 0, !dbg !1631
  %23 = call i1 @llvm.expect.i1(i1 %zero, i1 false), !dbg !1631
  br i1 %23, label %panic25, label %checkok29, !dbg !1631

checkok29:                                        ; preds = %loop.body
  %umod = urem i64 %21, %22, !dbg !1631
  store i64 %umod, ptr %j, align 8, !dbg !1631
  %ptradd30 = getelementptr inbounds i8, ptr %words, i64 8, !dbg !1632
  %24 = load i64, ptr %ptradd30, align 8, !dbg !1632
  %25 = load ptr, ptr %words, align 8, !dbg !1632
  %26 = load i64, ptr %j, align 8, !dbg !1632
  %ge = icmp uge i64 %26, %24, !dbg !1632
  %27 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !1632
  br i1 %27, label %panic31, label %checkok41, !dbg !1632

checkok41:                                        ; preds = %checkok29
  %ptroffset42 = getelementptr inbounds [8 x i8], ptr %25, i64 %26, !dbg !1632
  %28 = ptrtoint ptr %ptroffset42 to i64, !dbg !1632
  %29 = urem i64 %28, 8, !dbg !1632
  %30 = icmp ne i64 %29, 0, !dbg !1632
  %31 = call i1 @llvm.expect.i1(i1 %30, i1 false), !dbg !1632
  br i1 %31, label %panic43, label %checkok53, !dbg !1632

checkok53:                                        ; preds = %checkok41
  %32 = load i64, ptr %ptroffset42, align 8, !dbg !1632
  %ptradd54 = getelementptr inbounds i8, ptr %0, i64 8, !dbg !1632
  %33 = load i64, ptr %ptradd54, align 8, !dbg !1632
  %34 = load ptr, ptr %0, align 8, !dbg !1632
  %35 = load i64, ptr %i, align 8, !dbg !1632
  %mul55 = mul i64 %35, 8, !dbg !1632
  %lt56 = icmp slt i64 %mul55, 0, !dbg !1632
  %36 = call i1 @llvm.expect.i1(i1 %lt56, i1 false), !dbg !1632
  br i1 %36, label %panic57, label %checkok65, !dbg !1632

checkok65:                                        ; preds = %checkok53
  %ge66 = icmp sge i64 %mul55, %33, !dbg !1632
  %37 = call i1 @llvm.expect.i1(i1 %ge66, i1 false), !dbg !1632
  br i1 %37, label %panic67, label %checkok77, !dbg !1632

checkok77:                                        ; preds = %checkok65
  %ptradd78 = getelementptr inbounds i8, ptr %34, i64 %mul55, !dbg !1632
  %checknull = icmp eq ptr %ptradd78, null, !dbg !1632
  %38 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1632
  br i1 %38, label %panic79, label %checkok83, !dbg !1632

checkok83:                                        ; preds = %checkok77
  call void @llvm.memcpy.p0.p0.i32(ptr align 1 %expr, ptr align 1 %ptradd78, i32 8, i1 false)
    #dbg_declare(ptr %x, !1633, !DIExpression(), !1635)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %x, ptr align 1 %expr, i64 8, i1 false), !dbg !1636
  %39 = load i64, ptr %x, align 8, !dbg !1637
  %mul84 = mul i64 %39, -3372029247567499371, !dbg !1632
  %sub85 = sub i64 %32, %mul84, !dbg !1632
  store i64 %sub85, ptr %ptroffset42, align 8, !dbg !1632
  %ptradd86 = getelementptr inbounds i8, ptr %words, i64 8, !dbg !1638
  %40 = load i64, ptr %ptradd86, align 8, !dbg !1638
  %41 = load ptr, ptr %words, align 8, !dbg !1638
  %42 = load i64, ptr %j, align 8, !dbg !1638
  %ge87 = icmp uge i64 %42, %40, !dbg !1638
  %43 = call i1 @llvm.expect.i1(i1 %ge87, i1 false), !dbg !1638
  br i1 %43, label %panic88, label %checkok98, !dbg !1638

checkok98:                                        ; preds = %checkok83
  %ptroffset99 = getelementptr inbounds [8 x i8], ptr %41, i64 %42, !dbg !1638
  %44 = ptrtoint ptr %ptroffset99 to i64, !dbg !1638
  %45 = urem i64 %44, 8, !dbg !1638
  %46 = icmp ne i64 %45, 0, !dbg !1638
  %47 = call i1 @llvm.expect.i1(i1 %46, i1 false), !dbg !1638
  br i1 %47, label %panic100, label %checkok110, !dbg !1638

checkok110:                                       ; preds = %checkok98
  %48 = load i64, ptr %ptroffset99, align 8, !dbg !1638
  %ptradd111 = getelementptr inbounds i8, ptr %words, i64 8, !dbg !1638
  %49 = load i64, ptr %ptradd111, align 8, !dbg !1638
  %50 = load ptr, ptr %words, align 8, !dbg !1638
  %51 = load i64, ptr %j, align 8, !dbg !1638
  %ge112 = icmp uge i64 %51, %49, !dbg !1638
  %52 = call i1 @llvm.expect.i1(i1 %ge112, i1 false), !dbg !1638
  br i1 %52, label %panic113, label %checkok123, !dbg !1638

checkok123:                                       ; preds = %checkok110
  %ptroffset124 = getelementptr inbounds [8 x i8], ptr %50, i64 %51, !dbg !1638
  %53 = ptrtoint ptr %ptroffset124 to i64, !dbg !1638
  %54 = urem i64 %53, 8, !dbg !1638
  %55 = icmp ne i64 %54, 0, !dbg !1638
  %56 = call i1 @llvm.expect.i1(i1 %55, i1 false), !dbg !1638
  br i1 %56, label %panic125, label %checkok135, !dbg !1638

checkok135:                                       ; preds = %checkok123
  %57 = load i64, ptr %ptroffset124, align 8, !dbg !1638
  %lshr = lshr i64 %57, 25, !dbg !1638
  %58 = freeze i64 %lshr, !dbg !1638
  %xor = xor i64 %48, %58, !dbg !1638
  store i64 %xor, ptr %ptroffset99, align 8, !dbg !1638
  %59 = load i64, ptr %i, align 8, !dbg !1628
  %add136 = add i64 %59, 1, !dbg !1628
  store i64 %add136, ptr %i, align 8, !dbg !1628
  br label %loop.cond, !dbg !1628

loop.exit:                                        ; preds = %loop.cond
    #dbg_declare(ptr %remaining, !1639, !DIExpression(), !1640)
  %ptradd137 = getelementptr inbounds i8, ptr %0, i64 8, !dbg !1640
  %60 = load i64, ptr %ptradd137, align 8, !dbg !1640
  %ptradd138 = getelementptr inbounds i8, ptr %0, i64 8, !dbg !1640
  %61 = load i64, ptr %ptradd138, align 8, !dbg !1640
  %sdiv139 = sdiv i64 %61, 8, !dbg !1640
  %mul140 = mul i64 %sdiv139, 8, !dbg !1640
  %sub141 = sub i64 %60, %mul140, !dbg !1640
  store i64 %sub141, ptr %remaining, align 8, !dbg !1640
  %62 = load i64, ptr %remaining, align 8, !dbg !1641
  %i2b = icmp ne i64 %62, 0, !dbg !1641
  br i1 %i2b, label %if.then, label %if.exit, !dbg !1641

if.then:                                          ; preds = %loop.exit
    #dbg_declare(ptr %rest, !1642, !DIExpression(), !1644)
  store i64 -1065810590584100411, ptr %rest, align 8, !dbg !1644
  store ptr %rest, ptr %dst, align 8
  %ptradd142 = getelementptr inbounds i8, ptr %0, i64 8, !dbg !1645
  %63 = load i64, ptr %ptradd142, align 8, !dbg !1645
  %64 = load ptr, ptr %0, align 8, !dbg !1645
  %65 = load i64, ptr %remaining, align 8, !dbg !1645
  %66 = sub nuw i64 %63, %65, !dbg !1645
  %ge143 = icmp uge i64 %66, %63, !dbg !1645
  %67 = call i1 @llvm.expect.i1(i1 %ge143, i1 false), !dbg !1645
  br i1 %67, label %panic144, label %checkok154, !dbg !1645

checkok154:                                       ; preds = %if.then
  %ptradd155 = getelementptr inbounds i8, ptr %64, i64 %66, !dbg !1645
  store ptr %ptradd155, ptr %src, align 8
  %68 = load i64, ptr %remaining, align 8
  store i64 %68, ptr %len, align 8
  %69 = load ptr, ptr %dst, align 8, !dbg !1646
  %neq = icmp ne ptr %69, null, !dbg !1646
  br i1 %neq, label %assert_ok, label %assert_fail, !dbg !1646

assert_fail:                                      ; preds = %checkok154
  store %"char[]" { ptr @.panic_msg.101, i64 37 }, ptr %indirectarg156, align 8
  store %"char[]" { ptr @.file.94, i64 6 }, ptr %indirectarg157, align 8
  store %"char[]" { ptr @.func.95, i64 6 }, ptr %indirectarg158, align 8
  %70 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %70(ptr align 8 %indirectarg156, ptr align 8 %indirectarg157, ptr align 8 %indirectarg158, i32 357) #5, !dbg !1646
  unreachable, !dbg !1646

assert_ok:                                        ; preds = %checkok154
  %71 = load ptr, ptr %src, align 8, !dbg !1649
  %neq159 = icmp ne ptr %71, null, !dbg !1649
  br i1 %neq159, label %or.phi, label %or.rhs, !dbg !1649

or.rhs:                                           ; preds = %assert_ok
  %72 = load i64, ptr %len, align 8, !dbg !1649
  %eq = icmp eq i64 0, %72, !dbg !1649
  br label %or.phi, !dbg !1649

or.phi:                                           ; preds = %or.rhs, %assert_ok
  %val = phi i1 [ true, %assert_ok ], [ %eq, %or.rhs ], !dbg !1649
  br i1 %val, label %assert_ok164, label %assert_fail160, !dbg !1649

assert_fail160:                                   ; preds = %or.phi
  store %"char[]" { ptr @.panic_msg.102, i64 94 }, ptr %indirectarg161, align 8
  store %"char[]" { ptr @.file.96, i64 14 }, ptr %indirectarg162, align 8
  store %"char[]" { ptr @.func.95, i64 6 }, ptr %indirectarg163, align 8
  %73 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %73(ptr align 8 %indirectarg161, ptr align 8 %indirectarg162, ptr align 8 %indirectarg163, i32 46) #5, !dbg !1650
  unreachable, !dbg !1650

assert_ok164:                                     ; preds = %or.phi
  %74 = load i64, ptr %len, align 8, !dbg !1651
  %eq165 = icmp eq i64 0, %74, !dbg !1651
  br i1 %eq165, label %or.phi167, label %or.rhs166, !dbg !1651

or.rhs166:                                        ; preds = %assert_ok164
  %75 = load ptr, ptr %dst, align 8, !dbg !1651
  %76 = load i64, ptr %len, align 8, !dbg !1651
  %ptradd_any = getelementptr i8, ptr %75, i64 %76, !dbg !1651
  %77 = load ptr, ptr %src, align 8, !dbg !1651
  %le = icmp ule ptr %ptradd_any, %77, !dbg !1651
  br label %or.phi167, !dbg !1651

or.phi167:                                        ; preds = %or.rhs166, %assert_ok164
  %val168 = phi i1 [ true, %assert_ok164 ], [ %le, %or.rhs166 ], !dbg !1651
  br i1 %val168, label %or.phi172, label %or.rhs169, !dbg !1651

or.rhs169:                                        ; preds = %or.phi167
  %78 = load ptr, ptr %src, align 8, !dbg !1651
  %79 = load i64, ptr %len, align 8, !dbg !1651
  %ptradd_any170 = getelementptr i8, ptr %78, i64 %79, !dbg !1651
  %80 = load ptr, ptr %dst, align 8, !dbg !1651
  %le171 = icmp ule ptr %ptradd_any170, %80, !dbg !1651
  br label %or.phi172, !dbg !1651

or.phi172:                                        ; preds = %or.rhs169, %or.phi167
  %val173 = phi i1 [ true, %or.phi167 ], [ %le171, %or.rhs169 ], !dbg !1651
  br i1 %val173, label %assert_ok178, label %assert_fail174, !dbg !1651

assert_fail174:                                   ; preds = %or.phi172
  store %"char[]" { ptr @.panic_msg.103, i64 95 }, ptr %indirectarg175, align 8
  store %"char[]" { ptr @.file.96, i64 14 }, ptr %indirectarg176, align 8
  store %"char[]" { ptr @.func.95, i64 6 }, ptr %indirectarg177, align 8
  %81 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %81(ptr align 8 %indirectarg175, ptr align 8 %indirectarg176, ptr align 8 %indirectarg177, i32 46) #5, !dbg !1650
  unreachable, !dbg !1650

assert_ok178:                                     ; preds = %or.phi172
  %82 = load ptr, ptr %dst, align 8, !dbg !1652
  %83 = load ptr, ptr %src, align 8, !dbg !1652
  %84 = load i64, ptr %len, align 8, !dbg !1652
  call void @llvm.memcpy.p0.p0.i64(ptr %82, ptr %83, i64 %84, i1 false), !dbg !1652
  %ptradd179 = getelementptr inbounds i8, ptr %words, i64 8, !dbg !1653
  %85 = load i64, ptr %ptradd179, align 8, !dbg !1653
  %86 = load ptr, ptr %words, align 8, !dbg !1653
  %87 = sub nuw i64 %85, 1, !dbg !1653
  %lt180 = icmp slt i64 %87, 0, !dbg !1653
  %88 = call i1 @llvm.expect.i1(i1 %lt180, i1 false), !dbg !1653
  br i1 %88, label %panic181, label %checkok189, !dbg !1653

checkok189:                                       ; preds = %assert_ok178
  %ge190 = icmp sge i64 %87, %85, !dbg !1653
  %89 = call i1 @llvm.expect.i1(i1 %ge190, i1 false), !dbg !1653
  br i1 %89, label %panic191, label %checkok201, !dbg !1653

checkok201:                                       ; preds = %checkok189
  %ptroffset202 = getelementptr inbounds [8 x i8], ptr %86, i64 %87, !dbg !1653
  %90 = ptrtoint ptr %ptroffset202 to i64, !dbg !1653
  %91 = urem i64 %90, 8, !dbg !1653
  %92 = icmp ne i64 %91, 0, !dbg !1653
  %93 = call i1 @llvm.expect.i1(i1 %92, i1 false), !dbg !1653
  br i1 %93, label %panic203, label %checkok213, !dbg !1653

checkok213:                                       ; preds = %checkok201
  %94 = load i64, ptr %ptroffset202, align 8, !dbg !1653
  %95 = load i64, ptr %rest, align 8, !dbg !1653
  %mul214 = mul i64 %95, -3372029247567499371, !dbg !1653
  %sub215 = sub i64 %94, %mul214, !dbg !1653
  store i64 %sub215, ptr %ptroffset202, align 8, !dbg !1653
  %ptradd216 = getelementptr inbounds i8, ptr %words, i64 8, !dbg !1654
  %96 = load i64, ptr %ptradd216, align 8, !dbg !1654
  %97 = load ptr, ptr %words, align 8, !dbg !1654
  %98 = sub nuw i64 %96, 1, !dbg !1654
  %lt217 = icmp slt i64 %98, 0, !dbg !1654
  %99 = call i1 @llvm.expect.i1(i1 %lt217, i1 false), !dbg !1654
  br i1 %99, label %panic218, label %checkok226, !dbg !1654

checkok226:                                       ; preds = %checkok213
  %ge227 = icmp sge i64 %98, %96, !dbg !1654
  %100 = call i1 @llvm.expect.i1(i1 %ge227, i1 false), !dbg !1654
  br i1 %100, label %panic228, label %checkok238, !dbg !1654

checkok238:                                       ; preds = %checkok226
  %ptroffset239 = getelementptr inbounds [8 x i8], ptr %97, i64 %98, !dbg !1654
  %101 = ptrtoint ptr %ptroffset239 to i64, !dbg !1654
  %102 = urem i64 %101, 8, !dbg !1654
  %103 = icmp ne i64 %102, 0, !dbg !1654
  %104 = call i1 @llvm.expect.i1(i1 %103, i1 false), !dbg !1654
  br i1 %104, label %panic240, label %checkok250, !dbg !1654

checkok250:                                       ; preds = %checkok238
  %105 = load i64, ptr %ptroffset239, align 8, !dbg !1654
  %ptradd251 = getelementptr inbounds i8, ptr %words, i64 8, !dbg !1654
  %106 = load i64, ptr %ptradd251, align 8, !dbg !1654
  %107 = load ptr, ptr %words, align 8, !dbg !1654
  %108 = sub nuw i64 %106, 1, !dbg !1654
  %lt252 = icmp slt i64 %108, 0, !dbg !1654
  %109 = call i1 @llvm.expect.i1(i1 %lt252, i1 false), !dbg !1654
  br i1 %109, label %panic253, label %checkok261, !dbg !1654

checkok261:                                       ; preds = %checkok250
  %ge262 = icmp sge i64 %108, %106, !dbg !1654
  %110 = call i1 @llvm.expect.i1(i1 %ge262, i1 false), !dbg !1654
  br i1 %110, label %panic263, label %checkok273, !dbg !1654

checkok273:                                       ; preds = %checkok261
  %ptroffset274 = getelementptr inbounds [8 x i8], ptr %107, i64 %108, !dbg !1654
  %111 = ptrtoint ptr %ptroffset274 to i64, !dbg !1654
  %112 = urem i64 %111, 8, !dbg !1654
  %113 = icmp ne i64 %112, 0, !dbg !1654
  %114 = call i1 @llvm.expect.i1(i1 %113, i1 false), !dbg !1654
  br i1 %114, label %panic275, label %checkok285, !dbg !1654

checkok285:                                       ; preds = %checkok273
  %115 = load i64, ptr %ptroffset274, align 8, !dbg !1654
  %lshr286 = lshr i64 %115, 25, !dbg !1654
  %116 = freeze i64 %lshr286, !dbg !1654
  %xor287 = xor i64 %105, %116, !dbg !1654
  store i64 %xor287, ptr %ptroffset239, align 8, !dbg !1654
  br label %if.exit, !dbg !1654

if.exit:                                          ; preds = %checkok285, %loop.exit
    #dbg_declare(ptr %i288, !1655, !DIExpression(), !1658)
  %117 = load i64, ptr %words_len_2, align 8, !dbg !1658
  %sub289 = sub i64 %117, 1, !dbg !1658
  store i64 %sub289, ptr %i288, align 8, !dbg !1658
  br label %loop.cond290, !dbg !1658

loop.cond290:                                     ; preds = %checkok451, %if.exit
  %118 = load i64, ptr %i288, align 8, !dbg !1658
  %ge291 = icmp sge i64 %118, 0, !dbg !1658
  br i1 %ge291, label %loop.body292, label %loop.exit455, !dbg !1658

loop.body292:                                     ; preds = %loop.cond290
    #dbg_declare(ptr %j293, !1659, !DIExpression(), !1661)
  %119 = load i64, ptr %i288, align 8, !dbg !1661
  %ptradd294 = getelementptr inbounds i8, ptr %words, i64 8, !dbg !1661
  %120 = load i64, ptr %ptradd294, align 8, !dbg !1661
  %zero295 = icmp eq i64 %120, 0, !dbg !1661
  %121 = call i1 @llvm.expect.i1(i1 %zero295, i1 false), !dbg !1661
  br i1 %121, label %panic296, label %checkok300, !dbg !1661

checkok300:                                       ; preds = %loop.body292
  %smod = srem i64 %119, %120, !dbg !1661
  store i64 %smod, ptr %j293, align 8, !dbg !1661
  %ptradd301 = getelementptr inbounds i8, ptr %words, i64 8, !dbg !1662
  %122 = load i64, ptr %ptradd301, align 8, !dbg !1662
  %123 = load ptr, ptr %words, align 8, !dbg !1662
  %124 = load i64, ptr %j293, align 8, !dbg !1662
  %lt302 = icmp slt i64 %124, 0, !dbg !1662
  %125 = call i1 @llvm.expect.i1(i1 %lt302, i1 false), !dbg !1662
  br i1 %125, label %panic303, label %checkok311, !dbg !1662

checkok311:                                       ; preds = %checkok300
  %ge312 = icmp sge i64 %124, %122, !dbg !1662
  %126 = call i1 @llvm.expect.i1(i1 %ge312, i1 false), !dbg !1662
  br i1 %126, label %panic313, label %checkok323, !dbg !1662

checkok323:                                       ; preds = %checkok311
  %ptroffset324 = getelementptr inbounds [8 x i8], ptr %123, i64 %124, !dbg !1662
  %127 = ptrtoint ptr %ptroffset324 to i64, !dbg !1662
  %128 = urem i64 %127, 8, !dbg !1662
  %129 = icmp ne i64 %128, 0, !dbg !1662
  %130 = call i1 @llvm.expect.i1(i1 %129, i1 false), !dbg !1662
  br i1 %130, label %panic325, label %checkok335, !dbg !1662

checkok335:                                       ; preds = %checkok323
  %131 = load i64, ptr %ptroffset324, align 8, !dbg !1662
  %ptradd336 = getelementptr inbounds i8, ptr %words, i64 8, !dbg !1662
  %132 = load i64, ptr %ptradd336, align 8, !dbg !1662
  %133 = load ptr, ptr %words, align 8, !dbg !1662
  %134 = load i64, ptr %i288, align 8, !dbg !1662
  %add337 = add i64 %134, 1, !dbg !1662
  %ptradd338 = getelementptr inbounds i8, ptr %words, i64 8, !dbg !1662
  %135 = load i64, ptr %ptradd338, align 8, !dbg !1662
  %zero339 = icmp eq i64 %135, 0, !dbg !1662
  %136 = call i1 @llvm.expect.i1(i1 %zero339, i1 false), !dbg !1662
  br i1 %136, label %panic340, label %checkok344, !dbg !1662

checkok344:                                       ; preds = %checkok335
  %smod345 = srem i64 %add337, %135, !dbg !1662
  %lt346 = icmp slt i64 %smod345, 0, !dbg !1662
  %137 = call i1 @llvm.expect.i1(i1 %lt346, i1 false), !dbg !1662
  br i1 %137, label %panic347, label %checkok355, !dbg !1662

checkok355:                                       ; preds = %checkok344
  %ge356 = icmp sge i64 %smod345, %132, !dbg !1662
  %138 = call i1 @llvm.expect.i1(i1 %ge356, i1 false), !dbg !1662
  br i1 %138, label %panic357, label %checkok367, !dbg !1662

checkok367:                                       ; preds = %checkok355
  %ptroffset368 = getelementptr inbounds [8 x i8], ptr %133, i64 %smod345, !dbg !1662
  %139 = ptrtoint ptr %ptroffset368 to i64, !dbg !1662
  %140 = urem i64 %139, 8, !dbg !1662
  %141 = icmp ne i64 %140, 0, !dbg !1662
  %142 = call i1 @llvm.expect.i1(i1 %141, i1 false), !dbg !1662
  br i1 %142, label %panic369, label %checkok379, !dbg !1662

checkok379:                                       ; preds = %checkok367
  %143 = load i64, ptr %ptroffset368, align 8, !dbg !1662
  %mul380 = mul i64 %143, -3372029247567499371, !dbg !1662
  %sub381 = sub i64 %131, %mul380, !dbg !1662
  store i64 %sub381, ptr %ptroffset324, align 8, !dbg !1662
  %ptradd382 = getelementptr inbounds i8, ptr %words, i64 8, !dbg !1663
  %144 = load i64, ptr %ptradd382, align 8, !dbg !1663
  %145 = load ptr, ptr %words, align 8, !dbg !1663
  %146 = load i64, ptr %j293, align 8, !dbg !1663
  %lt383 = icmp slt i64 %146, 0, !dbg !1663
  %147 = call i1 @llvm.expect.i1(i1 %lt383, i1 false), !dbg !1663
  br i1 %147, label %panic384, label %checkok392, !dbg !1663

checkok392:                                       ; preds = %checkok379
  %ge393 = icmp sge i64 %146, %144, !dbg !1663
  %148 = call i1 @llvm.expect.i1(i1 %ge393, i1 false), !dbg !1663
  br i1 %148, label %panic394, label %checkok404, !dbg !1663

checkok404:                                       ; preds = %checkok392
  %ptroffset405 = getelementptr inbounds [8 x i8], ptr %145, i64 %146, !dbg !1663
  %149 = ptrtoint ptr %ptroffset405 to i64, !dbg !1663
  %150 = urem i64 %149, 8, !dbg !1663
  %151 = icmp ne i64 %150, 0, !dbg !1663
  %152 = call i1 @llvm.expect.i1(i1 %151, i1 false), !dbg !1663
  br i1 %152, label %panic406, label %checkok416, !dbg !1663

checkok416:                                       ; preds = %checkok404
  %153 = load i64, ptr %ptroffset405, align 8, !dbg !1663
  %ptradd417 = getelementptr inbounds i8, ptr %words, i64 8, !dbg !1663
  %154 = load i64, ptr %ptradd417, align 8, !dbg !1663
  %155 = load ptr, ptr %words, align 8, !dbg !1663
  %156 = load i64, ptr %j293, align 8, !dbg !1663
  %lt418 = icmp slt i64 %156, 0, !dbg !1663
  %157 = call i1 @llvm.expect.i1(i1 %lt418, i1 false), !dbg !1663
  br i1 %157, label %panic419, label %checkok427, !dbg !1663

checkok427:                                       ; preds = %checkok416
  %ge428 = icmp sge i64 %156, %154, !dbg !1663
  %158 = call i1 @llvm.expect.i1(i1 %ge428, i1 false), !dbg !1663
  br i1 %158, label %panic429, label %checkok439, !dbg !1663

checkok439:                                       ; preds = %checkok427
  %ptroffset440 = getelementptr inbounds [8 x i8], ptr %155, i64 %156, !dbg !1663
  %159 = ptrtoint ptr %ptroffset440 to i64, !dbg !1663
  %160 = urem i64 %159, 8, !dbg !1663
  %161 = icmp ne i64 %160, 0, !dbg !1663
  %162 = call i1 @llvm.expect.i1(i1 %161, i1 false), !dbg !1663
  br i1 %162, label %panic441, label %checkok451, !dbg !1663

checkok451:                                       ; preds = %checkok439
  %163 = load i64, ptr %ptroffset440, align 8, !dbg !1663
  %lshr452 = lshr i64 %163, 25, !dbg !1663
  %164 = freeze i64 %lshr452, !dbg !1663
  %xor453 = xor i64 %153, %164, !dbg !1663
  store i64 %xor453, ptr %ptroffset405, align 8, !dbg !1663
  %165 = load i64, ptr %i288, align 8, !dbg !1658
  %sub454 = sub i64 %165, 1, !dbg !1658
  store i64 %sub454, ptr %i288, align 8, !dbg !1658
  br label %loop.cond290, !dbg !1658

loop.exit455:                                     ; preds = %loop.cond290
    #dbg_declare(ptr %i456, !1664, !DIExpression(), !1666)
  store i64 0, ptr %i456, align 8, !dbg !1666
  br label %loop.cond457, !dbg !1666

loop.cond457:                                     ; preds = %checkok544, %loop.exit455
  %166 = load i64, ptr %i456, align 8, !dbg !1666
  %167 = load i64, ptr %words_len_2, align 8, !dbg !1666
  %lt458 = icmp ult i64 %166, %167, !dbg !1666
  br i1 %lt458, label %loop.body459, label %loop.exit548, !dbg !1666

loop.body459:                                     ; preds = %loop.cond457
    #dbg_declare(ptr %j460, !1667, !DIExpression(), !1669)
  %168 = load i64, ptr %i456, align 8, !dbg !1669
  %ptradd461 = getelementptr inbounds i8, ptr %words, i64 8, !dbg !1669
  %169 = load i64, ptr %ptradd461, align 8, !dbg !1669
  %zero462 = icmp eq i64 %169, 0, !dbg !1669
  %170 = call i1 @llvm.expect.i1(i1 %zero462, i1 false), !dbg !1669
  br i1 %170, label %panic463, label %checkok467, !dbg !1669

checkok467:                                       ; preds = %loop.body459
  %umod468 = urem i64 %168, %169, !dbg !1669
  store i64 %umod468, ptr %j460, align 8, !dbg !1669
  %ptradd469 = getelementptr inbounds i8, ptr %words, i64 8, !dbg !1670
  %171 = load i64, ptr %ptradd469, align 8, !dbg !1670
  %172 = load ptr, ptr %words, align 8, !dbg !1670
  %173 = load i64, ptr %j460, align 8, !dbg !1670
  %ge470 = icmp uge i64 %173, %171, !dbg !1670
  %174 = call i1 @llvm.expect.i1(i1 %ge470, i1 false), !dbg !1670
  br i1 %174, label %panic471, label %checkok481, !dbg !1670

checkok481:                                       ; preds = %checkok467
  %ptroffset482 = getelementptr inbounds [8 x i8], ptr %172, i64 %173, !dbg !1670
  %175 = ptrtoint ptr %ptroffset482 to i64, !dbg !1670
  %176 = urem i64 %175, 8, !dbg !1670
  %177 = icmp ne i64 %176, 0, !dbg !1670
  %178 = call i1 @llvm.expect.i1(i1 %177, i1 false), !dbg !1670
  br i1 %178, label %panic483, label %checkok493, !dbg !1670

checkok493:                                       ; preds = %checkok481
  %179 = load i64, ptr %ptroffset482, align 8, !dbg !1670
  %mul494 = mul i64 %179, -1065810590584100411, !dbg !1670
  store i64 %mul494, ptr %ptroffset482, align 8, !dbg !1670
  %ptradd495 = getelementptr inbounds i8, ptr %words, i64 8, !dbg !1671
  %180 = load i64, ptr %ptradd495, align 8, !dbg !1671
  %181 = load ptr, ptr %words, align 8, !dbg !1671
  %182 = load i64, ptr %j460, align 8, !dbg !1671
  %ge496 = icmp uge i64 %182, %180, !dbg !1671
  %183 = call i1 @llvm.expect.i1(i1 %ge496, i1 false), !dbg !1671
  br i1 %183, label %panic497, label %checkok507, !dbg !1671

checkok507:                                       ; preds = %checkok493
  %ptroffset508 = getelementptr inbounds [8 x i8], ptr %181, i64 %182, !dbg !1671
  %184 = ptrtoint ptr %ptroffset508 to i64, !dbg !1671
  %185 = urem i64 %184, 8, !dbg !1671
  %186 = icmp ne i64 %185, 0, !dbg !1671
  %187 = call i1 @llvm.expect.i1(i1 %186, i1 false), !dbg !1671
  br i1 %187, label %panic509, label %checkok519, !dbg !1671

checkok519:                                       ; preds = %checkok507
  %188 = load i64, ptr %ptroffset508, align 8, !dbg !1671
  %ptradd520 = getelementptr inbounds i8, ptr %words, i64 8, !dbg !1671
  %189 = load i64, ptr %ptradd520, align 8, !dbg !1671
  %190 = load ptr, ptr %words, align 8, !dbg !1671
  %191 = load i64, ptr %j460, align 8, !dbg !1671
  %ge521 = icmp uge i64 %191, %189, !dbg !1671
  %192 = call i1 @llvm.expect.i1(i1 %ge521, i1 false), !dbg !1671
  br i1 %192, label %panic522, label %checkok532, !dbg !1671

checkok532:                                       ; preds = %checkok519
  %ptroffset533 = getelementptr inbounds [8 x i8], ptr %190, i64 %191, !dbg !1671
  %193 = ptrtoint ptr %ptroffset533 to i64, !dbg !1671
  %194 = urem i64 %193, 8, !dbg !1671
  %195 = icmp ne i64 %194, 0, !dbg !1671
  %196 = call i1 @llvm.expect.i1(i1 %195, i1 false), !dbg !1671
  br i1 %196, label %panic534, label %checkok544, !dbg !1671

checkok544:                                       ; preds = %checkok532
  %197 = load i64, ptr %ptroffset533, align 8, !dbg !1671
  %lshr545 = lshr i64 %197, 25, !dbg !1671
  %198 = freeze i64 %lshr545, !dbg !1671
  %xor546 = xor i64 %188, %198, !dbg !1671
  store i64 %xor546, ptr %ptroffset508, align 8, !dbg !1671
  %199 = load i64, ptr %i456, align 8, !dbg !1666
  %add547 = add i64 %199, 1, !dbg !1666
  store i64 %add547, ptr %i456, align 8, !dbg !1666
  br label %loop.cond457, !dbg !1666

loop.exit548:                                     ; preds = %loop.cond457
  %200 = load ptr, ptr %words, align 8, !dbg !1672
  store ptr %200, ptr %taddr549, align 8
  %201 = load ptr, ptr %taddr549, align 8
  %202 = load i64, ptr %out_chars, align 8, !dbg !1672
  %add550 = add i64 0, %202, !dbg !1672
  %gt551 = icmp ugt i64 0, %add550, !dbg !1672
  %sub552 = sub i64 %add550, 0, !dbg !1672
  %203 = call i1 @llvm.expect.i1(i1 %gt551, i1 false), !dbg !1672
  br i1 %203, label %panic553, label %checkok561, !dbg !1672

checkok561:                                       ; preds = %loop.exit548
  %size562 = sub i64 %add550, 0, !dbg !1672
  %204 = insertvalue %"char[]" undef, ptr %201, 0, !dbg !1672
  %205 = insertvalue %"char[]" %204, i64 %size562, 1, !dbg !1672
  %206 = load %"char[]", ptr %1, align 8, !dbg !1672
  %207 = extractvalue %"char[]" %206, 0, !dbg !1672
  %208 = extractvalue %"char[]" %206, 1, !dbg !1672
  %gt563 = icmp ugt i64 0, %208, !dbg !1672
  %209 = call i1 @llvm.expect.i1(i1 %gt563, i1 false), !dbg !1672
  br i1 %209, label %panic564, label %checkok574, !dbg !1672

checkok574:                                       ; preds = %checkok561
  %size575 = sub i64 %208, 0, !dbg !1672
  %210 = insertvalue %"char[]" undef, ptr %207, 0, !dbg !1672
  %211 = insertvalue %"char[]" %210, i64 %size575, 1, !dbg !1672
  %212 = extractvalue %"char[]" %211, 0, !dbg !1672
  %213 = extractvalue %"char[]" %205, 0, !dbg !1672
  %214 = extractvalue %"char[]" %205, 1, !dbg !1672
  %215 = extractvalue %"char[]" %211, 1, !dbg !1672
  %neq576 = icmp ne i64 %215, %214, !dbg !1672
  %216 = call i1 @llvm.expect.i1(i1 %neq576, i1 false), !dbg !1672
  br i1 %216, label %panic577, label %checkok587, !dbg !1672

checkok587:                                       ; preds = %checkok574
  %217 = mul i64 %214, 1, !dbg !1672
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %212, ptr align 1 %213, i64 %217, i1 false), !dbg !1672
  %218 = load ptr, ptr %state, align 8, !dbg !1673
  call void @std.core.mem.allocator.pop_pool(ptr %218) #6, !dbg !1673
  ret void, !dbg !1673

panic:                                            ; preds = %entry
  store i64 %sub, ptr %taddr2, align 8
  %219 = insertvalue %any undef, ptr %taddr2, 0
  %220 = insertvalue %any %219, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.14, i64 43 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.94, i64 6 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.func.95, i64 6 }, ptr %indirectarg4, align 8
  store %any %220, ptr %varargslots, align 16
  %221 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %221, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg5, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg, ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, i32 879, ptr align 8 %indirectarg5) #5, !dbg !1621
  unreachable, !dbg !1621

panic7:                                           ; preds = %checkok
  store i64 %15, ptr %taddr8, align 8
  %222 = insertvalue %any undef, ptr %taddr8, 0
  %223 = insertvalue %any %222, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr9, align 8
  %224 = insertvalue %any undef, ptr %taddr9, 0
  %225 = insertvalue %any %224, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.16, i64 61 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.file.96, i64 14 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.func.95, i64 6 }, ptr %indirectarg12, align 8
  store %any %223, ptr %varargslots13, align 16
  %ptradd14 = getelementptr inbounds i8, ptr %varargslots13, i64 16
  store %any %225, ptr %ptradd14, align 16
  %226 = insertvalue %"any[]" undef, ptr %varargslots13, 0
  %"$$temp15" = insertvalue %"any[]" %226, i64 2, 1
  store %"any[]" %"$$temp15", ptr %indirectarg16, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, i32 30, ptr align 8 %indirectarg16) #5, !dbg !1623
  unreachable, !dbg !1623

panic25:                                          ; preds = %loop.body
  store %"char[]" { ptr @.panic_msg.97, i64 10 }, ptr %indirectarg26, align 8
  store %"char[]" { ptr @.file.96, i64 14 }, ptr %indirectarg27, align 8
  store %"char[]" { ptr @.func.95, i64 6 }, ptr %indirectarg28, align 8
  %227 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %227(ptr align 8 %indirectarg26, ptr align 8 %indirectarg27, ptr align 8 %indirectarg28, i32 36) #5, !dbg !1631
  unreachable, !dbg !1631

panic31:                                          ; preds = %checkok29
  store i64 %24, ptr %taddr32, align 8
  %228 = insertvalue %any undef, ptr %taddr32, 0
  %229 = insertvalue %any %228, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %26, ptr %taddr33, align 8
  %230 = insertvalue %any undef, ptr %taddr33, 0
  %231 = insertvalue %any %230, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.98, i64 59 }, ptr %indirectarg34, align 8
  store %"char[]" { ptr @.file.96, i64 14 }, ptr %indirectarg35, align 8
  store %"char[]" { ptr @.func.95, i64 6 }, ptr %indirectarg36, align 8
  store %any %229, ptr %varargslots37, align 16
  %ptradd38 = getelementptr inbounds i8, ptr %varargslots37, i64 16
  store %any %231, ptr %ptradd38, align 16
  %232 = insertvalue %"any[]" undef, ptr %varargslots37, 0
  %"$$temp39" = insertvalue %"any[]" %232, i64 2, 1
  store %"any[]" %"$$temp39", ptr %indirectarg40, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg34, ptr align 8 %indirectarg35, ptr align 8 %indirectarg36, i32 37, ptr align 8 %indirectarg40) #5, !dbg !1632
  unreachable, !dbg !1632

panic43:                                          ; preds = %checkok41
  store i64 8, ptr %taddr44, align 8
  %233 = insertvalue %any undef, ptr %taddr44, 0
  %234 = insertvalue %any %233, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %29, ptr %taddr45, align 8
  %235 = insertvalue %any undef, ptr %taddr45, 0
  %236 = insertvalue %any %235, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg46, align 8
  store %"char[]" { ptr @.file.96, i64 14 }, ptr %indirectarg47, align 8
  store %"char[]" { ptr @.func.95, i64 6 }, ptr %indirectarg48, align 8
  store %any %234, ptr %varargslots49, align 16
  %ptradd50 = getelementptr inbounds i8, ptr %varargslots49, i64 16
  store %any %236, ptr %ptradd50, align 16
  %237 = insertvalue %"any[]" undef, ptr %varargslots49, 0
  %"$$temp51" = insertvalue %"any[]" %237, i64 2, 1
  store %"any[]" %"$$temp51", ptr %indirectarg52, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg46, ptr align 8 %indirectarg47, ptr align 8 %indirectarg48, i32 37, ptr align 8 %indirectarg52) #5, !dbg !1632
  unreachable, !dbg !1632

panic57:                                          ; preds = %checkok53
  store i64 %mul55, ptr %taddr58, align 8
  %238 = insertvalue %any undef, ptr %taddr58, 0
  %239 = insertvalue %any %238, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.99, i64 38 }, ptr %indirectarg59, align 8
  store %"char[]" { ptr @.file.96, i64 14 }, ptr %indirectarg60, align 8
  store %"char[]" { ptr @.func.95, i64 6 }, ptr %indirectarg61, align 8
  store %any %239, ptr %varargslots62, align 16
  %240 = insertvalue %"any[]" undef, ptr %varargslots62, 0
  %"$$temp63" = insertvalue %"any[]" %240, i64 1, 1
  store %"any[]" %"$$temp63", ptr %indirectarg64, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg59, ptr align 8 %indirectarg60, ptr align 8 %indirectarg61, i32 37, ptr align 8 %indirectarg64) #5, !dbg !1632
  unreachable, !dbg !1632

panic67:                                          ; preds = %checkok65
  store i64 %33, ptr %taddr68, align 8
  %241 = insertvalue %any undef, ptr %taddr68, 0
  %242 = insertvalue %any %241, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %mul55, ptr %taddr69, align 8
  %243 = insertvalue %any undef, ptr %taddr69, 0
  %244 = insertvalue %any %243, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.98, i64 59 }, ptr %indirectarg70, align 8
  store %"char[]" { ptr @.file.96, i64 14 }, ptr %indirectarg71, align 8
  store %"char[]" { ptr @.func.95, i64 6 }, ptr %indirectarg72, align 8
  store %any %242, ptr %varargslots73, align 16
  %ptradd74 = getelementptr inbounds i8, ptr %varargslots73, i64 16
  store %any %244, ptr %ptradd74, align 16
  %245 = insertvalue %"any[]" undef, ptr %varargslots73, 0
  %"$$temp75" = insertvalue %"any[]" %245, i64 2, 1
  store %"any[]" %"$$temp75", ptr %indirectarg76, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg70, ptr align 8 %indirectarg71, ptr align 8 %indirectarg72, i32 37, ptr align 8 %indirectarg76) #5, !dbg !1632
  unreachable, !dbg !1632

panic79:                                          ; preds = %checkok77
  store %"char[]" { ptr @.panic_msg.100, i64 64 }, ptr %indirectarg80, align 8
  store %"char[]" { ptr @.file.96, i64 14 }, ptr %indirectarg81, align 8
  store %"char[]" { ptr @.func.95, i64 6 }, ptr %indirectarg82, align 8
  %246 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %246(ptr align 8 %indirectarg80, ptr align 8 %indirectarg81, ptr align 8 %indirectarg82, i32 37) #5, !dbg !1632
  unreachable, !dbg !1632

panic88:                                          ; preds = %checkok83
  store i64 %40, ptr %taddr89, align 8
  %247 = insertvalue %any undef, ptr %taddr89, 0
  %248 = insertvalue %any %247, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %42, ptr %taddr90, align 8
  %249 = insertvalue %any undef, ptr %taddr90, 0
  %250 = insertvalue %any %249, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.98, i64 59 }, ptr %indirectarg91, align 8
  store %"char[]" { ptr @.file.96, i64 14 }, ptr %indirectarg92, align 8
  store %"char[]" { ptr @.func.95, i64 6 }, ptr %indirectarg93, align 8
  store %any %248, ptr %varargslots94, align 16
  %ptradd95 = getelementptr inbounds i8, ptr %varargslots94, i64 16
  store %any %250, ptr %ptradd95, align 16
  %251 = insertvalue %"any[]" undef, ptr %varargslots94, 0
  %"$$temp96" = insertvalue %"any[]" %251, i64 2, 1
  store %"any[]" %"$$temp96", ptr %indirectarg97, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg91, ptr align 8 %indirectarg92, ptr align 8 %indirectarg93, i32 38, ptr align 8 %indirectarg97) #5, !dbg !1638
  unreachable, !dbg !1638

panic100:                                         ; preds = %checkok98
  store i64 8, ptr %taddr101, align 8
  %252 = insertvalue %any undef, ptr %taddr101, 0
  %253 = insertvalue %any %252, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %45, ptr %taddr102, align 8
  %254 = insertvalue %any undef, ptr %taddr102, 0
  %255 = insertvalue %any %254, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg103, align 8
  store %"char[]" { ptr @.file.96, i64 14 }, ptr %indirectarg104, align 8
  store %"char[]" { ptr @.func.95, i64 6 }, ptr %indirectarg105, align 8
  store %any %253, ptr %varargslots106, align 16
  %ptradd107 = getelementptr inbounds i8, ptr %varargslots106, i64 16
  store %any %255, ptr %ptradd107, align 16
  %256 = insertvalue %"any[]" undef, ptr %varargslots106, 0
  %"$$temp108" = insertvalue %"any[]" %256, i64 2, 1
  store %"any[]" %"$$temp108", ptr %indirectarg109, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg103, ptr align 8 %indirectarg104, ptr align 8 %indirectarg105, i32 38, ptr align 8 %indirectarg109) #5, !dbg !1638
  unreachable, !dbg !1638

panic113:                                         ; preds = %checkok110
  store i64 %49, ptr %taddr114, align 8
  %257 = insertvalue %any undef, ptr %taddr114, 0
  %258 = insertvalue %any %257, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %51, ptr %taddr115, align 8
  %259 = insertvalue %any undef, ptr %taddr115, 0
  %260 = insertvalue %any %259, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.98, i64 59 }, ptr %indirectarg116, align 8
  store %"char[]" { ptr @.file.96, i64 14 }, ptr %indirectarg117, align 8
  store %"char[]" { ptr @.func.95, i64 6 }, ptr %indirectarg118, align 8
  store %any %258, ptr %varargslots119, align 16
  %ptradd120 = getelementptr inbounds i8, ptr %varargslots119, i64 16
  store %any %260, ptr %ptradd120, align 16
  %261 = insertvalue %"any[]" undef, ptr %varargslots119, 0
  %"$$temp121" = insertvalue %"any[]" %261, i64 2, 1
  store %"any[]" %"$$temp121", ptr %indirectarg122, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg116, ptr align 8 %indirectarg117, ptr align 8 %indirectarg118, i32 38, ptr align 8 %indirectarg122) #5, !dbg !1638
  unreachable, !dbg !1638

panic125:                                         ; preds = %checkok123
  store i64 8, ptr %taddr126, align 8
  %262 = insertvalue %any undef, ptr %taddr126, 0
  %263 = insertvalue %any %262, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %54, ptr %taddr127, align 8
  %264 = insertvalue %any undef, ptr %taddr127, 0
  %265 = insertvalue %any %264, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg128, align 8
  store %"char[]" { ptr @.file.96, i64 14 }, ptr %indirectarg129, align 8
  store %"char[]" { ptr @.func.95, i64 6 }, ptr %indirectarg130, align 8
  store %any %263, ptr %varargslots131, align 16
  %ptradd132 = getelementptr inbounds i8, ptr %varargslots131, i64 16
  store %any %265, ptr %ptradd132, align 16
  %266 = insertvalue %"any[]" undef, ptr %varargslots131, 0
  %"$$temp133" = insertvalue %"any[]" %266, i64 2, 1
  store %"any[]" %"$$temp133", ptr %indirectarg134, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg128, ptr align 8 %indirectarg129, ptr align 8 %indirectarg130, i32 38, ptr align 8 %indirectarg134) #5, !dbg !1638
  unreachable, !dbg !1638

panic144:                                         ; preds = %if.then
  store i64 %63, ptr %taddr145, align 8
  %267 = insertvalue %any undef, ptr %taddr145, 0
  %268 = insertvalue %any %267, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %66, ptr %taddr146, align 8
  %269 = insertvalue %any undef, ptr %taddr146, 0
  %270 = insertvalue %any %269, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.98, i64 59 }, ptr %indirectarg147, align 8
  store %"char[]" { ptr @.file.96, i64 14 }, ptr %indirectarg148, align 8
  store %"char[]" { ptr @.func.95, i64 6 }, ptr %indirectarg149, align 8
  store %any %268, ptr %varargslots150, align 16
  %ptradd151 = getelementptr inbounds i8, ptr %varargslots150, i64 16
  store %any %270, ptr %ptradd151, align 16
  %271 = insertvalue %"any[]" undef, ptr %varargslots150, 0
  %"$$temp152" = insertvalue %"any[]" %271, i64 2, 1
  store %"any[]" %"$$temp152", ptr %indirectarg153, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg147, ptr align 8 %indirectarg148, ptr align 8 %indirectarg149, i32 46, ptr align 8 %indirectarg153) #5, !dbg !1645
  unreachable, !dbg !1645

panic181:                                         ; preds = %assert_ok178
  store i64 %87, ptr %taddr182, align 8
  %272 = insertvalue %any undef, ptr %taddr182, 0
  %273 = insertvalue %any %272, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.99, i64 38 }, ptr %indirectarg183, align 8
  store %"char[]" { ptr @.file.96, i64 14 }, ptr %indirectarg184, align 8
  store %"char[]" { ptr @.func.95, i64 6 }, ptr %indirectarg185, align 8
  store %any %273, ptr %varargslots186, align 16
  %274 = insertvalue %"any[]" undef, ptr %varargslots186, 0
  %"$$temp187" = insertvalue %"any[]" %274, i64 1, 1
  store %"any[]" %"$$temp187", ptr %indirectarg188, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg183, ptr align 8 %indirectarg184, ptr align 8 %indirectarg185, i32 47, ptr align 8 %indirectarg188) #5, !dbg !1653
  unreachable, !dbg !1653

panic191:                                         ; preds = %checkok189
  store i64 %85, ptr %taddr192, align 8
  %275 = insertvalue %any undef, ptr %taddr192, 0
  %276 = insertvalue %any %275, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %87, ptr %taddr193, align 8
  %277 = insertvalue %any undef, ptr %taddr193, 0
  %278 = insertvalue %any %277, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.98, i64 59 }, ptr %indirectarg194, align 8
  store %"char[]" { ptr @.file.96, i64 14 }, ptr %indirectarg195, align 8
  store %"char[]" { ptr @.func.95, i64 6 }, ptr %indirectarg196, align 8
  store %any %276, ptr %varargslots197, align 16
  %ptradd198 = getelementptr inbounds i8, ptr %varargslots197, i64 16
  store %any %278, ptr %ptradd198, align 16
  %279 = insertvalue %"any[]" undef, ptr %varargslots197, 0
  %"$$temp199" = insertvalue %"any[]" %279, i64 2, 1
  store %"any[]" %"$$temp199", ptr %indirectarg200, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg194, ptr align 8 %indirectarg195, ptr align 8 %indirectarg196, i32 47, ptr align 8 %indirectarg200) #5, !dbg !1653
  unreachable, !dbg !1653

panic203:                                         ; preds = %checkok201
  store i64 8, ptr %taddr204, align 8
  %280 = insertvalue %any undef, ptr %taddr204, 0
  %281 = insertvalue %any %280, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %91, ptr %taddr205, align 8
  %282 = insertvalue %any undef, ptr %taddr205, 0
  %283 = insertvalue %any %282, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg206, align 8
  store %"char[]" { ptr @.file.96, i64 14 }, ptr %indirectarg207, align 8
  store %"char[]" { ptr @.func.95, i64 6 }, ptr %indirectarg208, align 8
  store %any %281, ptr %varargslots209, align 16
  %ptradd210 = getelementptr inbounds i8, ptr %varargslots209, i64 16
  store %any %283, ptr %ptradd210, align 16
  %284 = insertvalue %"any[]" undef, ptr %varargslots209, 0
  %"$$temp211" = insertvalue %"any[]" %284, i64 2, 1
  store %"any[]" %"$$temp211", ptr %indirectarg212, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg206, ptr align 8 %indirectarg207, ptr align 8 %indirectarg208, i32 47, ptr align 8 %indirectarg212) #5, !dbg !1653
  unreachable, !dbg !1653

panic218:                                         ; preds = %checkok213
  store i64 %98, ptr %taddr219, align 8
  %285 = insertvalue %any undef, ptr %taddr219, 0
  %286 = insertvalue %any %285, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.99, i64 38 }, ptr %indirectarg220, align 8
  store %"char[]" { ptr @.file.96, i64 14 }, ptr %indirectarg221, align 8
  store %"char[]" { ptr @.func.95, i64 6 }, ptr %indirectarg222, align 8
  store %any %286, ptr %varargslots223, align 16
  %287 = insertvalue %"any[]" undef, ptr %varargslots223, 0
  %"$$temp224" = insertvalue %"any[]" %287, i64 1, 1
  store %"any[]" %"$$temp224", ptr %indirectarg225, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg220, ptr align 8 %indirectarg221, ptr align 8 %indirectarg222, i32 48, ptr align 8 %indirectarg225) #5, !dbg !1654
  unreachable, !dbg !1654

panic228:                                         ; preds = %checkok226
  store i64 %96, ptr %taddr229, align 8
  %288 = insertvalue %any undef, ptr %taddr229, 0
  %289 = insertvalue %any %288, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %98, ptr %taddr230, align 8
  %290 = insertvalue %any undef, ptr %taddr230, 0
  %291 = insertvalue %any %290, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.98, i64 59 }, ptr %indirectarg231, align 8
  store %"char[]" { ptr @.file.96, i64 14 }, ptr %indirectarg232, align 8
  store %"char[]" { ptr @.func.95, i64 6 }, ptr %indirectarg233, align 8
  store %any %289, ptr %varargslots234, align 16
  %ptradd235 = getelementptr inbounds i8, ptr %varargslots234, i64 16
  store %any %291, ptr %ptradd235, align 16
  %292 = insertvalue %"any[]" undef, ptr %varargslots234, 0
  %"$$temp236" = insertvalue %"any[]" %292, i64 2, 1
  store %"any[]" %"$$temp236", ptr %indirectarg237, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg231, ptr align 8 %indirectarg232, ptr align 8 %indirectarg233, i32 48, ptr align 8 %indirectarg237) #5, !dbg !1654
  unreachable, !dbg !1654

panic240:                                         ; preds = %checkok238
  store i64 8, ptr %taddr241, align 8
  %293 = insertvalue %any undef, ptr %taddr241, 0
  %294 = insertvalue %any %293, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %102, ptr %taddr242, align 8
  %295 = insertvalue %any undef, ptr %taddr242, 0
  %296 = insertvalue %any %295, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg243, align 8
  store %"char[]" { ptr @.file.96, i64 14 }, ptr %indirectarg244, align 8
  store %"char[]" { ptr @.func.95, i64 6 }, ptr %indirectarg245, align 8
  store %any %294, ptr %varargslots246, align 16
  %ptradd247 = getelementptr inbounds i8, ptr %varargslots246, i64 16
  store %any %296, ptr %ptradd247, align 16
  %297 = insertvalue %"any[]" undef, ptr %varargslots246, 0
  %"$$temp248" = insertvalue %"any[]" %297, i64 2, 1
  store %"any[]" %"$$temp248", ptr %indirectarg249, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg243, ptr align 8 %indirectarg244, ptr align 8 %indirectarg245, i32 48, ptr align 8 %indirectarg249) #5, !dbg !1654
  unreachable, !dbg !1654

panic253:                                         ; preds = %checkok250
  store i64 %108, ptr %taddr254, align 8
  %298 = insertvalue %any undef, ptr %taddr254, 0
  %299 = insertvalue %any %298, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.99, i64 38 }, ptr %indirectarg255, align 8
  store %"char[]" { ptr @.file.96, i64 14 }, ptr %indirectarg256, align 8
  store %"char[]" { ptr @.func.95, i64 6 }, ptr %indirectarg257, align 8
  store %any %299, ptr %varargslots258, align 16
  %300 = insertvalue %"any[]" undef, ptr %varargslots258, 0
  %"$$temp259" = insertvalue %"any[]" %300, i64 1, 1
  store %"any[]" %"$$temp259", ptr %indirectarg260, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg255, ptr align 8 %indirectarg256, ptr align 8 %indirectarg257, i32 48, ptr align 8 %indirectarg260) #5, !dbg !1654
  unreachable, !dbg !1654

panic263:                                         ; preds = %checkok261
  store i64 %106, ptr %taddr264, align 8
  %301 = insertvalue %any undef, ptr %taddr264, 0
  %302 = insertvalue %any %301, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %108, ptr %taddr265, align 8
  %303 = insertvalue %any undef, ptr %taddr265, 0
  %304 = insertvalue %any %303, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.98, i64 59 }, ptr %indirectarg266, align 8
  store %"char[]" { ptr @.file.96, i64 14 }, ptr %indirectarg267, align 8
  store %"char[]" { ptr @.func.95, i64 6 }, ptr %indirectarg268, align 8
  store %any %302, ptr %varargslots269, align 16
  %ptradd270 = getelementptr inbounds i8, ptr %varargslots269, i64 16
  store %any %304, ptr %ptradd270, align 16
  %305 = insertvalue %"any[]" undef, ptr %varargslots269, 0
  %"$$temp271" = insertvalue %"any[]" %305, i64 2, 1
  store %"any[]" %"$$temp271", ptr %indirectarg272, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg266, ptr align 8 %indirectarg267, ptr align 8 %indirectarg268, i32 48, ptr align 8 %indirectarg272) #5, !dbg !1654
  unreachable, !dbg !1654

panic275:                                         ; preds = %checkok273
  store i64 8, ptr %taddr276, align 8
  %306 = insertvalue %any undef, ptr %taddr276, 0
  %307 = insertvalue %any %306, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %112, ptr %taddr277, align 8
  %308 = insertvalue %any undef, ptr %taddr277, 0
  %309 = insertvalue %any %308, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg278, align 8
  store %"char[]" { ptr @.file.96, i64 14 }, ptr %indirectarg279, align 8
  store %"char[]" { ptr @.func.95, i64 6 }, ptr %indirectarg280, align 8
  store %any %307, ptr %varargslots281, align 16
  %ptradd282 = getelementptr inbounds i8, ptr %varargslots281, i64 16
  store %any %309, ptr %ptradd282, align 16
  %310 = insertvalue %"any[]" undef, ptr %varargslots281, 0
  %"$$temp283" = insertvalue %"any[]" %310, i64 2, 1
  store %"any[]" %"$$temp283", ptr %indirectarg284, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg278, ptr align 8 %indirectarg279, ptr align 8 %indirectarg280, i32 48, ptr align 8 %indirectarg284) #5, !dbg !1654
  unreachable, !dbg !1654

panic296:                                         ; preds = %loop.body292
  store %"char[]" { ptr @.panic_msg.97, i64 10 }, ptr %indirectarg297, align 8
  store %"char[]" { ptr @.file.96, i64 14 }, ptr %indirectarg298, align 8
  store %"char[]" { ptr @.func.95, i64 6 }, ptr %indirectarg299, align 8
  %311 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %311(ptr align 8 %indirectarg297, ptr align 8 %indirectarg298, ptr align 8 %indirectarg299, i32 54) #5, !dbg !1661
  unreachable, !dbg !1661

panic303:                                         ; preds = %checkok300
  store i64 %124, ptr %taddr304, align 8
  %312 = insertvalue %any undef, ptr %taddr304, 0
  %313 = insertvalue %any %312, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.99, i64 38 }, ptr %indirectarg305, align 8
  store %"char[]" { ptr @.file.96, i64 14 }, ptr %indirectarg306, align 8
  store %"char[]" { ptr @.func.95, i64 6 }, ptr %indirectarg307, align 8
  store %any %313, ptr %varargslots308, align 16
  %314 = insertvalue %"any[]" undef, ptr %varargslots308, 0
  %"$$temp309" = insertvalue %"any[]" %314, i64 1, 1
  store %"any[]" %"$$temp309", ptr %indirectarg310, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg305, ptr align 8 %indirectarg306, ptr align 8 %indirectarg307, i32 55, ptr align 8 %indirectarg310) #5, !dbg !1662
  unreachable, !dbg !1662

panic313:                                         ; preds = %checkok311
  store i64 %122, ptr %taddr314, align 8
  %315 = insertvalue %any undef, ptr %taddr314, 0
  %316 = insertvalue %any %315, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %124, ptr %taddr315, align 8
  %317 = insertvalue %any undef, ptr %taddr315, 0
  %318 = insertvalue %any %317, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.98, i64 59 }, ptr %indirectarg316, align 8
  store %"char[]" { ptr @.file.96, i64 14 }, ptr %indirectarg317, align 8
  store %"char[]" { ptr @.func.95, i64 6 }, ptr %indirectarg318, align 8
  store %any %316, ptr %varargslots319, align 16
  %ptradd320 = getelementptr inbounds i8, ptr %varargslots319, i64 16
  store %any %318, ptr %ptradd320, align 16
  %319 = insertvalue %"any[]" undef, ptr %varargslots319, 0
  %"$$temp321" = insertvalue %"any[]" %319, i64 2, 1
  store %"any[]" %"$$temp321", ptr %indirectarg322, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg316, ptr align 8 %indirectarg317, ptr align 8 %indirectarg318, i32 55, ptr align 8 %indirectarg322) #5, !dbg !1662
  unreachable, !dbg !1662

panic325:                                         ; preds = %checkok323
  store i64 8, ptr %taddr326, align 8
  %320 = insertvalue %any undef, ptr %taddr326, 0
  %321 = insertvalue %any %320, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %128, ptr %taddr327, align 8
  %322 = insertvalue %any undef, ptr %taddr327, 0
  %323 = insertvalue %any %322, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg328, align 8
  store %"char[]" { ptr @.file.96, i64 14 }, ptr %indirectarg329, align 8
  store %"char[]" { ptr @.func.95, i64 6 }, ptr %indirectarg330, align 8
  store %any %321, ptr %varargslots331, align 16
  %ptradd332 = getelementptr inbounds i8, ptr %varargslots331, i64 16
  store %any %323, ptr %ptradd332, align 16
  %324 = insertvalue %"any[]" undef, ptr %varargslots331, 0
  %"$$temp333" = insertvalue %"any[]" %324, i64 2, 1
  store %"any[]" %"$$temp333", ptr %indirectarg334, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg328, ptr align 8 %indirectarg329, ptr align 8 %indirectarg330, i32 55, ptr align 8 %indirectarg334) #5, !dbg !1662
  unreachable, !dbg !1662

panic340:                                         ; preds = %checkok335
  store %"char[]" { ptr @.panic_msg.97, i64 10 }, ptr %indirectarg341, align 8
  store %"char[]" { ptr @.file.96, i64 14 }, ptr %indirectarg342, align 8
  store %"char[]" { ptr @.func.95, i64 6 }, ptr %indirectarg343, align 8
  %325 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %325(ptr align 8 %indirectarg341, ptr align 8 %indirectarg342, ptr align 8 %indirectarg343, i32 55) #5, !dbg !1662
  unreachable, !dbg !1662

panic347:                                         ; preds = %checkok344
  store i64 %smod345, ptr %taddr348, align 8
  %326 = insertvalue %any undef, ptr %taddr348, 0
  %327 = insertvalue %any %326, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.99, i64 38 }, ptr %indirectarg349, align 8
  store %"char[]" { ptr @.file.96, i64 14 }, ptr %indirectarg350, align 8
  store %"char[]" { ptr @.func.95, i64 6 }, ptr %indirectarg351, align 8
  store %any %327, ptr %varargslots352, align 16
  %328 = insertvalue %"any[]" undef, ptr %varargslots352, 0
  %"$$temp353" = insertvalue %"any[]" %328, i64 1, 1
  store %"any[]" %"$$temp353", ptr %indirectarg354, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg349, ptr align 8 %indirectarg350, ptr align 8 %indirectarg351, i32 55, ptr align 8 %indirectarg354) #5, !dbg !1662
  unreachable, !dbg !1662

panic357:                                         ; preds = %checkok355
  store i64 %132, ptr %taddr358, align 8
  %329 = insertvalue %any undef, ptr %taddr358, 0
  %330 = insertvalue %any %329, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %smod345, ptr %taddr359, align 8
  %331 = insertvalue %any undef, ptr %taddr359, 0
  %332 = insertvalue %any %331, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.98, i64 59 }, ptr %indirectarg360, align 8
  store %"char[]" { ptr @.file.96, i64 14 }, ptr %indirectarg361, align 8
  store %"char[]" { ptr @.func.95, i64 6 }, ptr %indirectarg362, align 8
  store %any %330, ptr %varargslots363, align 16
  %ptradd364 = getelementptr inbounds i8, ptr %varargslots363, i64 16
  store %any %332, ptr %ptradd364, align 16
  %333 = insertvalue %"any[]" undef, ptr %varargslots363, 0
  %"$$temp365" = insertvalue %"any[]" %333, i64 2, 1
  store %"any[]" %"$$temp365", ptr %indirectarg366, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg360, ptr align 8 %indirectarg361, ptr align 8 %indirectarg362, i32 55, ptr align 8 %indirectarg366) #5, !dbg !1662
  unreachable, !dbg !1662

panic369:                                         ; preds = %checkok367
  store i64 8, ptr %taddr370, align 8
  %334 = insertvalue %any undef, ptr %taddr370, 0
  %335 = insertvalue %any %334, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %140, ptr %taddr371, align 8
  %336 = insertvalue %any undef, ptr %taddr371, 0
  %337 = insertvalue %any %336, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg372, align 8
  store %"char[]" { ptr @.file.96, i64 14 }, ptr %indirectarg373, align 8
  store %"char[]" { ptr @.func.95, i64 6 }, ptr %indirectarg374, align 8
  store %any %335, ptr %varargslots375, align 16
  %ptradd376 = getelementptr inbounds i8, ptr %varargslots375, i64 16
  store %any %337, ptr %ptradd376, align 16
  %338 = insertvalue %"any[]" undef, ptr %varargslots375, 0
  %"$$temp377" = insertvalue %"any[]" %338, i64 2, 1
  store %"any[]" %"$$temp377", ptr %indirectarg378, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg372, ptr align 8 %indirectarg373, ptr align 8 %indirectarg374, i32 55, ptr align 8 %indirectarg378) #5, !dbg !1662
  unreachable, !dbg !1662

panic384:                                         ; preds = %checkok379
  store i64 %146, ptr %taddr385, align 8
  %339 = insertvalue %any undef, ptr %taddr385, 0
  %340 = insertvalue %any %339, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.99, i64 38 }, ptr %indirectarg386, align 8
  store %"char[]" { ptr @.file.96, i64 14 }, ptr %indirectarg387, align 8
  store %"char[]" { ptr @.func.95, i64 6 }, ptr %indirectarg388, align 8
  store %any %340, ptr %varargslots389, align 16
  %341 = insertvalue %"any[]" undef, ptr %varargslots389, 0
  %"$$temp390" = insertvalue %"any[]" %341, i64 1, 1
  store %"any[]" %"$$temp390", ptr %indirectarg391, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg386, ptr align 8 %indirectarg387, ptr align 8 %indirectarg388, i32 56, ptr align 8 %indirectarg391) #5, !dbg !1663
  unreachable, !dbg !1663

panic394:                                         ; preds = %checkok392
  store i64 %144, ptr %taddr395, align 8
  %342 = insertvalue %any undef, ptr %taddr395, 0
  %343 = insertvalue %any %342, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %146, ptr %taddr396, align 8
  %344 = insertvalue %any undef, ptr %taddr396, 0
  %345 = insertvalue %any %344, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.98, i64 59 }, ptr %indirectarg397, align 8
  store %"char[]" { ptr @.file.96, i64 14 }, ptr %indirectarg398, align 8
  store %"char[]" { ptr @.func.95, i64 6 }, ptr %indirectarg399, align 8
  store %any %343, ptr %varargslots400, align 16
  %ptradd401 = getelementptr inbounds i8, ptr %varargslots400, i64 16
  store %any %345, ptr %ptradd401, align 16
  %346 = insertvalue %"any[]" undef, ptr %varargslots400, 0
  %"$$temp402" = insertvalue %"any[]" %346, i64 2, 1
  store %"any[]" %"$$temp402", ptr %indirectarg403, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg397, ptr align 8 %indirectarg398, ptr align 8 %indirectarg399, i32 56, ptr align 8 %indirectarg403) #5, !dbg !1663
  unreachable, !dbg !1663

panic406:                                         ; preds = %checkok404
  store i64 8, ptr %taddr407, align 8
  %347 = insertvalue %any undef, ptr %taddr407, 0
  %348 = insertvalue %any %347, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %150, ptr %taddr408, align 8
  %349 = insertvalue %any undef, ptr %taddr408, 0
  %350 = insertvalue %any %349, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg409, align 8
  store %"char[]" { ptr @.file.96, i64 14 }, ptr %indirectarg410, align 8
  store %"char[]" { ptr @.func.95, i64 6 }, ptr %indirectarg411, align 8
  store %any %348, ptr %varargslots412, align 16
  %ptradd413 = getelementptr inbounds i8, ptr %varargslots412, i64 16
  store %any %350, ptr %ptradd413, align 16
  %351 = insertvalue %"any[]" undef, ptr %varargslots412, 0
  %"$$temp414" = insertvalue %"any[]" %351, i64 2, 1
  store %"any[]" %"$$temp414", ptr %indirectarg415, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg409, ptr align 8 %indirectarg410, ptr align 8 %indirectarg411, i32 56, ptr align 8 %indirectarg415) #5, !dbg !1663
  unreachable, !dbg !1663

panic419:                                         ; preds = %checkok416
  store i64 %156, ptr %taddr420, align 8
  %352 = insertvalue %any undef, ptr %taddr420, 0
  %353 = insertvalue %any %352, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.99, i64 38 }, ptr %indirectarg421, align 8
  store %"char[]" { ptr @.file.96, i64 14 }, ptr %indirectarg422, align 8
  store %"char[]" { ptr @.func.95, i64 6 }, ptr %indirectarg423, align 8
  store %any %353, ptr %varargslots424, align 16
  %354 = insertvalue %"any[]" undef, ptr %varargslots424, 0
  %"$$temp425" = insertvalue %"any[]" %354, i64 1, 1
  store %"any[]" %"$$temp425", ptr %indirectarg426, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg421, ptr align 8 %indirectarg422, ptr align 8 %indirectarg423, i32 56, ptr align 8 %indirectarg426) #5, !dbg !1663
  unreachable, !dbg !1663

panic429:                                         ; preds = %checkok427
  store i64 %154, ptr %taddr430, align 8
  %355 = insertvalue %any undef, ptr %taddr430, 0
  %356 = insertvalue %any %355, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %156, ptr %taddr431, align 8
  %357 = insertvalue %any undef, ptr %taddr431, 0
  %358 = insertvalue %any %357, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.98, i64 59 }, ptr %indirectarg432, align 8
  store %"char[]" { ptr @.file.96, i64 14 }, ptr %indirectarg433, align 8
  store %"char[]" { ptr @.func.95, i64 6 }, ptr %indirectarg434, align 8
  store %any %356, ptr %varargslots435, align 16
  %ptradd436 = getelementptr inbounds i8, ptr %varargslots435, i64 16
  store %any %358, ptr %ptradd436, align 16
  %359 = insertvalue %"any[]" undef, ptr %varargslots435, 0
  %"$$temp437" = insertvalue %"any[]" %359, i64 2, 1
  store %"any[]" %"$$temp437", ptr %indirectarg438, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg432, ptr align 8 %indirectarg433, ptr align 8 %indirectarg434, i32 56, ptr align 8 %indirectarg438) #5, !dbg !1663
  unreachable, !dbg !1663

panic441:                                         ; preds = %checkok439
  store i64 8, ptr %taddr442, align 8
  %360 = insertvalue %any undef, ptr %taddr442, 0
  %361 = insertvalue %any %360, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %160, ptr %taddr443, align 8
  %362 = insertvalue %any undef, ptr %taddr443, 0
  %363 = insertvalue %any %362, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg444, align 8
  store %"char[]" { ptr @.file.96, i64 14 }, ptr %indirectarg445, align 8
  store %"char[]" { ptr @.func.95, i64 6 }, ptr %indirectarg446, align 8
  store %any %361, ptr %varargslots447, align 16
  %ptradd448 = getelementptr inbounds i8, ptr %varargslots447, i64 16
  store %any %363, ptr %ptradd448, align 16
  %364 = insertvalue %"any[]" undef, ptr %varargslots447, 0
  %"$$temp449" = insertvalue %"any[]" %364, i64 2, 1
  store %"any[]" %"$$temp449", ptr %indirectarg450, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg444, ptr align 8 %indirectarg445, ptr align 8 %indirectarg446, i32 56, ptr align 8 %indirectarg450) #5, !dbg !1663
  unreachable, !dbg !1663

panic463:                                         ; preds = %loop.body459
  store %"char[]" { ptr @.panic_msg.97, i64 10 }, ptr %indirectarg464, align 8
  store %"char[]" { ptr @.file.96, i64 14 }, ptr %indirectarg465, align 8
  store %"char[]" { ptr @.func.95, i64 6 }, ptr %indirectarg466, align 8
  %365 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %365(ptr align 8 %indirectarg464, ptr align 8 %indirectarg465, ptr align 8 %indirectarg466, i32 62) #5, !dbg !1669
  unreachable, !dbg !1669

panic471:                                         ; preds = %checkok467
  store i64 %171, ptr %taddr472, align 8
  %366 = insertvalue %any undef, ptr %taddr472, 0
  %367 = insertvalue %any %366, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %173, ptr %taddr473, align 8
  %368 = insertvalue %any undef, ptr %taddr473, 0
  %369 = insertvalue %any %368, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.98, i64 59 }, ptr %indirectarg474, align 8
  store %"char[]" { ptr @.file.96, i64 14 }, ptr %indirectarg475, align 8
  store %"char[]" { ptr @.func.95, i64 6 }, ptr %indirectarg476, align 8
  store %any %367, ptr %varargslots477, align 16
  %ptradd478 = getelementptr inbounds i8, ptr %varargslots477, i64 16
  store %any %369, ptr %ptradd478, align 16
  %370 = insertvalue %"any[]" undef, ptr %varargslots477, 0
  %"$$temp479" = insertvalue %"any[]" %370, i64 2, 1
  store %"any[]" %"$$temp479", ptr %indirectarg480, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg474, ptr align 8 %indirectarg475, ptr align 8 %indirectarg476, i32 63, ptr align 8 %indirectarg480) #5, !dbg !1670
  unreachable, !dbg !1670

panic483:                                         ; preds = %checkok481
  store i64 8, ptr %taddr484, align 8
  %371 = insertvalue %any undef, ptr %taddr484, 0
  %372 = insertvalue %any %371, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %176, ptr %taddr485, align 8
  %373 = insertvalue %any undef, ptr %taddr485, 0
  %374 = insertvalue %any %373, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg486, align 8
  store %"char[]" { ptr @.file.96, i64 14 }, ptr %indirectarg487, align 8
  store %"char[]" { ptr @.func.95, i64 6 }, ptr %indirectarg488, align 8
  store %any %372, ptr %varargslots489, align 16
  %ptradd490 = getelementptr inbounds i8, ptr %varargslots489, i64 16
  store %any %374, ptr %ptradd490, align 16
  %375 = insertvalue %"any[]" undef, ptr %varargslots489, 0
  %"$$temp491" = insertvalue %"any[]" %375, i64 2, 1
  store %"any[]" %"$$temp491", ptr %indirectarg492, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg486, ptr align 8 %indirectarg487, ptr align 8 %indirectarg488, i32 63, ptr align 8 %indirectarg492) #5, !dbg !1670
  unreachable, !dbg !1670

panic497:                                         ; preds = %checkok493
  store i64 %180, ptr %taddr498, align 8
  %376 = insertvalue %any undef, ptr %taddr498, 0
  %377 = insertvalue %any %376, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %182, ptr %taddr499, align 8
  %378 = insertvalue %any undef, ptr %taddr499, 0
  %379 = insertvalue %any %378, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.98, i64 59 }, ptr %indirectarg500, align 8
  store %"char[]" { ptr @.file.96, i64 14 }, ptr %indirectarg501, align 8
  store %"char[]" { ptr @.func.95, i64 6 }, ptr %indirectarg502, align 8
  store %any %377, ptr %varargslots503, align 16
  %ptradd504 = getelementptr inbounds i8, ptr %varargslots503, i64 16
  store %any %379, ptr %ptradd504, align 16
  %380 = insertvalue %"any[]" undef, ptr %varargslots503, 0
  %"$$temp505" = insertvalue %"any[]" %380, i64 2, 1
  store %"any[]" %"$$temp505", ptr %indirectarg506, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg500, ptr align 8 %indirectarg501, ptr align 8 %indirectarg502, i32 64, ptr align 8 %indirectarg506) #5, !dbg !1671
  unreachable, !dbg !1671

panic509:                                         ; preds = %checkok507
  store i64 8, ptr %taddr510, align 8
  %381 = insertvalue %any undef, ptr %taddr510, 0
  %382 = insertvalue %any %381, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %185, ptr %taddr511, align 8
  %383 = insertvalue %any undef, ptr %taddr511, 0
  %384 = insertvalue %any %383, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg512, align 8
  store %"char[]" { ptr @.file.96, i64 14 }, ptr %indirectarg513, align 8
  store %"char[]" { ptr @.func.95, i64 6 }, ptr %indirectarg514, align 8
  store %any %382, ptr %varargslots515, align 16
  %ptradd516 = getelementptr inbounds i8, ptr %varargslots515, i64 16
  store %any %384, ptr %ptradd516, align 16
  %385 = insertvalue %"any[]" undef, ptr %varargslots515, 0
  %"$$temp517" = insertvalue %"any[]" %385, i64 2, 1
  store %"any[]" %"$$temp517", ptr %indirectarg518, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg512, ptr align 8 %indirectarg513, ptr align 8 %indirectarg514, i32 64, ptr align 8 %indirectarg518) #5, !dbg !1671
  unreachable, !dbg !1671

panic522:                                         ; preds = %checkok519
  store i64 %189, ptr %taddr523, align 8
  %386 = insertvalue %any undef, ptr %taddr523, 0
  %387 = insertvalue %any %386, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %191, ptr %taddr524, align 8
  %388 = insertvalue %any undef, ptr %taddr524, 0
  %389 = insertvalue %any %388, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.98, i64 59 }, ptr %indirectarg525, align 8
  store %"char[]" { ptr @.file.96, i64 14 }, ptr %indirectarg526, align 8
  store %"char[]" { ptr @.func.95, i64 6 }, ptr %indirectarg527, align 8
  store %any %387, ptr %varargslots528, align 16
  %ptradd529 = getelementptr inbounds i8, ptr %varargslots528, i64 16
  store %any %389, ptr %ptradd529, align 16
  %390 = insertvalue %"any[]" undef, ptr %varargslots528, 0
  %"$$temp530" = insertvalue %"any[]" %390, i64 2, 1
  store %"any[]" %"$$temp530", ptr %indirectarg531, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg525, ptr align 8 %indirectarg526, ptr align 8 %indirectarg527, i32 64, ptr align 8 %indirectarg531) #5, !dbg !1671
  unreachable, !dbg !1671

panic534:                                         ; preds = %checkok532
  store i64 8, ptr %taddr535, align 8
  %391 = insertvalue %any undef, ptr %taddr535, 0
  %392 = insertvalue %any %391, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %194, ptr %taddr536, align 8
  %393 = insertvalue %any undef, ptr %taddr536, 0
  %394 = insertvalue %any %393, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg537, align 8
  store %"char[]" { ptr @.file.96, i64 14 }, ptr %indirectarg538, align 8
  store %"char[]" { ptr @.func.95, i64 6 }, ptr %indirectarg539, align 8
  store %any %392, ptr %varargslots540, align 16
  %ptradd541 = getelementptr inbounds i8, ptr %varargslots540, i64 16
  store %any %394, ptr %ptradd541, align 16
  %395 = insertvalue %"any[]" undef, ptr %varargslots540, 0
  %"$$temp542" = insertvalue %"any[]" %395, i64 2, 1
  store %"any[]" %"$$temp542", ptr %indirectarg543, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg537, ptr align 8 %indirectarg538, ptr align 8 %indirectarg539, i32 64, ptr align 8 %indirectarg543) #5, !dbg !1671
  unreachable, !dbg !1671

panic553:                                         ; preds = %loop.exit548
  store i64 %sub552, ptr %taddr554, align 8
  %396 = insertvalue %any undef, ptr %taddr554, 0
  %397 = insertvalue %any %396, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.14, i64 43 }, ptr %indirectarg555, align 8
  store %"char[]" { ptr @.file.96, i64 14 }, ptr %indirectarg556, align 8
  store %"char[]" { ptr @.func.95, i64 6 }, ptr %indirectarg557, align 8
  store %any %397, ptr %varargslots558, align 16
  %398 = insertvalue %"any[]" undef, ptr %varargslots558, 0
  %"$$temp559" = insertvalue %"any[]" %398, i64 1, 1
  store %"any[]" %"$$temp559", ptr %indirectarg560, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg555, ptr align 8 %indirectarg556, ptr align 8 %indirectarg557, i32 66, ptr align 8 %indirectarg560) #5, !dbg !1672
  unreachable, !dbg !1672

panic564:                                         ; preds = %checkok561
  store i64 %208, ptr %taddr565, align 8
  %399 = insertvalue %any undef, ptr %taddr565, 0
  %400 = insertvalue %any %399, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr566, align 8
  %401 = insertvalue %any undef, ptr %taddr566, 0
  %402 = insertvalue %any %401, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.16, i64 61 }, ptr %indirectarg567, align 8
  store %"char[]" { ptr @.file.96, i64 14 }, ptr %indirectarg568, align 8
  store %"char[]" { ptr @.func.95, i64 6 }, ptr %indirectarg569, align 8
  store %any %400, ptr %varargslots570, align 16
  %ptradd571 = getelementptr inbounds i8, ptr %varargslots570, i64 16
  store %any %402, ptr %ptradd571, align 16
  %403 = insertvalue %"any[]" undef, ptr %varargslots570, 0
  %"$$temp572" = insertvalue %"any[]" %403, i64 2, 1
  store %"any[]" %"$$temp572", ptr %indirectarg573, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg567, ptr align 8 %indirectarg568, ptr align 8 %indirectarg569, i32 66, ptr align 8 %indirectarg573) #5, !dbg !1672
  unreachable, !dbg !1672

panic577:                                         ; preds = %checkok574
  store i64 %215, ptr %taddr578, align 8
  %404 = insertvalue %any undef, ptr %taddr578, 0
  %405 = insertvalue %any %404, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %214, ptr %taddr579, align 8
  %406 = insertvalue %any undef, ptr %taddr579, 0
  %407 = insertvalue %any %406, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 38 }, ptr %indirectarg580, align 8
  store %"char[]" { ptr @.file.96, i64 14 }, ptr %indirectarg581, align 8
  store %"char[]" { ptr @.func.95, i64 6 }, ptr %indirectarg582, align 8
  store %any %405, ptr %varargslots583, align 16
  %ptradd584 = getelementptr inbounds i8, ptr %varargslots583, i64 16
  store %any %407, ptr %ptradd584, align 16
  %408 = insertvalue %"any[]" undef, ptr %varargslots583, 0
  %"$$temp585" = insertvalue %"any[]" %408, i64 2, 1
  store %"any[]" %"$$temp585", ptr %indirectarg586, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg580, ptr align 8 %indirectarg581, ptr align 8 %indirectarg582, i32 66, ptr align 8 %indirectarg586) #5, !dbg !1672
  unreachable, !dbg !1672
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.math.random.entropy(ptr noalias sret([32 x i8]) align 1 %0) #0 comdat !dbg !1675 {
entry:
  %addr = alloca ptr, align 8
  %entropy_data = alloca [8 x i32], align 16
  %value = alloca %"char[]", align 8
  %expr = alloca %"char[]", align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %indirectarg3 = alloca %"char[]", align 8
  %value4 = alloca ptr, align 8
  %expr5 = alloca ptr, align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %value14 = alloca ptr, align 8
  %expr15 = alloca ptr, align 8
  %indirectarg18 = alloca %"char[]", align 8
  %indirectarg19 = alloca %"char[]", align 8
  %indirectarg20 = alloca %"char[]", align 8
  %indirectarg22 = alloca %"char[]", align 8
  %value24 = alloca ptr, align 8
  %expr25 = alloca ptr, align 8
  %indirectarg28 = alloca %"char[]", align 8
  %indirectarg29 = alloca %"char[]", align 8
  %indirectarg30 = alloca %"char[]", align 8
  %indirectarg32 = alloca %"char[]", align 8
  %value35 = alloca i64, align 8
  %expr36 = alloca i64, align 8
  %indirectarg39 = alloca %"char[]", align 8
  %indirectarg40 = alloca %"char[]", align 8
  %indirectarg41 = alloca %"char[]", align 8
  %indirectarg43 = alloca %"char[]", align 8
  %value45 = alloca ptr, align 8
  %expr46 = alloca ptr, align 8
  %indirectarg49 = alloca %"char[]", align 8
  %indirectarg50 = alloca %"char[]", align 8
  %indirectarg51 = alloca %"char[]", align 8
  %indirectarg53 = alloca %"char[]", align 8
  %value55 = alloca %any, align 8
  %expr56 = alloca %any, align 8
  %indirectarg59 = alloca %"char[]", align 8
  %indirectarg60 = alloca %"char[]", align 8
  %indirectarg61 = alloca %"char[]", align 8
  %indirectarg63 = alloca %"char[]", align 8
  %expr64 = alloca [8 x i32], align 16
  %indirectarg67 = alloca %"char[]", align 8
  %indirectarg68 = alloca %"char[]", align 8
  %indirectarg69 = alloca %"char[]", align 8
    #dbg_declare(ptr %addr, !1681, !DIExpression(), !1682)
  %1 = call ptr @std.core.mem.malloc(i64 1) #6, !dbg !1682
  store ptr %1, ptr %addr, align 8, !dbg !1682
  %2 = load ptr, ptr %addr, align 8, !dbg !1683
  call void @std.core.mem.free(ptr %2) #6, !dbg !1683
  %3 = load i32, ptr @entropy.random_int, align 4, !dbg !1684
  %add = add i32 %3, -302935722, !dbg !1684
  store i32 %add, ptr @entropy.random_int, align 4, !dbg !1684
    #dbg_declare(ptr %entropy_data, !1685, !DIExpression(), !1689)
  store %"char[]" { ptr @.str.104, i64 8 }, ptr %value, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %expr, ptr align 8 %value, i32 16, i1 false)
  %checknull = icmp eq ptr %expr, null, !dbg !1690
  %4 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1690
  br i1 %4, label %panic, label %checkok, !dbg !1690

checkok:                                          ; preds = %entry
  %5 = insertvalue %"char[]" undef, ptr %expr, 0, !dbg !1690
  %6 = insertvalue %"char[]" %5, i64 16, 1, !dbg !1690
  store %"char[]" %6, ptr %indirectarg3, align 8
  %7 = call i32 @std.hash.fnv32a.hash(ptr align 8 %indirectarg3), !dbg !1692
  store i32 %7, ptr %entropy_data, align 4, !dbg !1692
  %ptradd = getelementptr inbounds i8, ptr %entropy_data, i64 4, !dbg !1692
  %8 = load ptr, ptr %addr, align 8
  store ptr %8, ptr %value4, align 8
  %9 = load ptr, ptr %value4, align 8
  store ptr %9, ptr %expr5, align 8
  %checknull6 = icmp eq ptr %expr5, null, !dbg !1695
  %10 = call i1 @llvm.expect.i1(i1 %checknull6, i1 false), !dbg !1695
  br i1 %10, label %panic7, label %checkok11, !dbg !1695

checkok11:                                        ; preds = %checkok
  %11 = insertvalue %"char[]" undef, ptr %expr5, 0, !dbg !1695
  %12 = insertvalue %"char[]" %11, i64 8, 1, !dbg !1695
  store %"char[]" %12, ptr %indirectarg12, align 8
  %13 = call i32 @std.hash.fnv32a.hash(ptr align 8 %indirectarg12), !dbg !1697
  store i32 %13, ptr %ptradd, align 4, !dbg !1697
  %ptradd13 = getelementptr inbounds i8, ptr %entropy_data, i64 8, !dbg !1697
  store ptr %addr, ptr %value14, align 8
  %14 = load ptr, ptr %value14, align 8
  store ptr %14, ptr %expr15, align 8
  %checknull16 = icmp eq ptr %expr15, null, !dbg !1700
  %15 = call i1 @llvm.expect.i1(i1 %checknull16, i1 false), !dbg !1700
  br i1 %15, label %panic17, label %checkok21, !dbg !1700

checkok21:                                        ; preds = %checkok11
  %16 = insertvalue %"char[]" undef, ptr %expr15, 0, !dbg !1700
  %17 = insertvalue %"char[]" %16, i64 8, 1, !dbg !1700
  store %"char[]" %17, ptr %indirectarg22, align 8
  %18 = call i32 @std.hash.fnv32a.hash(ptr align 8 %indirectarg22), !dbg !1702
  store i32 %18, ptr %ptradd13, align 4, !dbg !1702
  %ptradd23 = getelementptr inbounds i8, ptr %entropy_data, i64 12, !dbg !1702
  store ptr @std.math.random.entropy, ptr %value24, align 8
  %19 = load ptr, ptr %value24, align 8
  store ptr %19, ptr %expr25, align 8
  %checknull26 = icmp eq ptr %expr25, null, !dbg !1705
  %20 = call i1 @llvm.expect.i1(i1 %checknull26, i1 false), !dbg !1705
  br i1 %20, label %panic27, label %checkok31, !dbg !1705

checkok31:                                        ; preds = %checkok21
  %21 = insertvalue %"char[]" undef, ptr %expr25, 0, !dbg !1705
  %22 = insertvalue %"char[]" %21, i64 8, 1, !dbg !1705
  store %"char[]" %22, ptr %indirectarg32, align 8
  %23 = call i32 @std.hash.fnv32a.hash(ptr align 8 %indirectarg32), !dbg !1707
  store i32 %23, ptr %ptradd23, align 4, !dbg !1707
  %ptradd33 = getelementptr inbounds i8, ptr %entropy_data, i64 16, !dbg !1707
  %24 = load i32, ptr @entropy.random_int, align 4, !dbg !1710
  store i32 %24, ptr %ptradd33, align 4, !dbg !1710
  %ptradd34 = getelementptr inbounds i8, ptr %entropy_data, i64 20, !dbg !1710
  %25 = call i64 @std.time.clock.now(), !dbg !1711
  store i64 %25, ptr %value35, align 8
  %26 = load i64, ptr %value35, align 8
  store i64 %26, ptr %expr36, align 8
  %checknull37 = icmp eq ptr %expr36, null, !dbg !1712
  %27 = call i1 @llvm.expect.i1(i1 %checknull37, i1 false), !dbg !1712
  br i1 %27, label %panic38, label %checkok42, !dbg !1712

checkok42:                                        ; preds = %checkok31
  %28 = insertvalue %"char[]" undef, ptr %expr36, 0, !dbg !1712
  %29 = insertvalue %"char[]" %28, i64 8, 1, !dbg !1712
  store %"char[]" %29, ptr %indirectarg43, align 8
  %30 = call i32 @std.hash.fnv32a.hash(ptr align 8 %indirectarg43), !dbg !1714
  store i32 %30, ptr %ptradd34, align 4, !dbg !1714
  %ptradd44 = getelementptr inbounds i8, ptr %entropy_data, i64 24, !dbg !1714
  store ptr @std.core.dstring.DString.init, ptr %value45, align 8
  %31 = load ptr, ptr %value45, align 8
  store ptr %31, ptr %expr46, align 8
  %checknull47 = icmp eq ptr %expr46, null, !dbg !1716
  %32 = call i1 @llvm.expect.i1(i1 %checknull47, i1 false), !dbg !1716
  br i1 %32, label %panic48, label %checkok52, !dbg !1716

checkok52:                                        ; preds = %checkok42
  %33 = insertvalue %"char[]" undef, ptr %expr46, 0, !dbg !1716
  %34 = insertvalue %"char[]" %33, i64 8, 1, !dbg !1716
  store %"char[]" %34, ptr %indirectarg53, align 8
  %35 = call i32 @std.hash.fnv32a.hash(ptr align 8 %indirectarg53), !dbg !1718
  store i32 %35, ptr %ptradd44, align 4, !dbg !1718
  %ptradd54 = getelementptr inbounds i8, ptr %entropy_data, i64 28, !dbg !1718
  %36 = call ptr @llvm.threadlocal.address.p0(ptr @std.core.mem.allocator.thread_allocator), !dbg !1721
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %value55, ptr align 8 %36, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %expr56, ptr align 8 %value55, i32 16, i1 false)
  %checknull57 = icmp eq ptr %expr56, null, !dbg !1722
  %37 = call i1 @llvm.expect.i1(i1 %checknull57, i1 false), !dbg !1722
  br i1 %37, label %panic58, label %checkok62, !dbg !1722

checkok62:                                        ; preds = %checkok52
  %38 = insertvalue %"char[]" undef, ptr %expr56, 0, !dbg !1722
  %39 = insertvalue %"char[]" %38, i64 16, 1, !dbg !1722
  store %"char[]" %39, ptr %indirectarg63, align 8
  %40 = call i32 @std.hash.fnv32a.hash(ptr align 8 %indirectarg63), !dbg !1724
  store i32 %40, ptr %ptradd54, align 4, !dbg !1724
  call void @llvm.memcpy.p0.p0.i32(ptr align 16 %expr64, ptr align 16 %entropy_data, i32 32, i1 false)
  %checknull65 = icmp eq ptr %expr64, null, !dbg !1726
  %41 = call i1 @llvm.expect.i1(i1 %checknull65, i1 false), !dbg !1726
  br i1 %41, label %panic66, label %checkok70, !dbg !1726

checkok70:                                        ; preds = %checkok62
  call void @llvm.memcpy.p0.p0.i32(ptr align 1 %0, ptr align 1 %expr64, i32 32, i1 false), !dbg !1726
  ret void, !dbg !1726

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.55, i64 54 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.56, i64 10 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.105, i64 7 }, ptr %indirectarg2, align 8
  %42 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %42(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 281) #5, !dbg !1690
  unreachable, !dbg !1690

panic7:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.55, i64 54 }, ptr %indirectarg8, align 8
  store %"char[]" { ptr @.file.56, i64 10 }, ptr %indirectarg9, align 8
  store %"char[]" { ptr @.func.105, i64 7 }, ptr %indirectarg10, align 8
  %43 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %43(ptr align 8 %indirectarg8, ptr align 8 %indirectarg9, ptr align 8 %indirectarg10, i32 281) #5, !dbg !1695
  unreachable, !dbg !1695

panic17:                                          ; preds = %checkok11
  store %"char[]" { ptr @.panic_msg.55, i64 54 }, ptr %indirectarg18, align 8
  store %"char[]" { ptr @.file.56, i64 10 }, ptr %indirectarg19, align 8
  store %"char[]" { ptr @.func.105, i64 7 }, ptr %indirectarg20, align 8
  %44 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %44(ptr align 8 %indirectarg18, ptr align 8 %indirectarg19, ptr align 8 %indirectarg20, i32 281) #5, !dbg !1700
  unreachable, !dbg !1700

panic27:                                          ; preds = %checkok21
  store %"char[]" { ptr @.panic_msg.55, i64 54 }, ptr %indirectarg28, align 8
  store %"char[]" { ptr @.file.56, i64 10 }, ptr %indirectarg29, align 8
  store %"char[]" { ptr @.func.105, i64 7 }, ptr %indirectarg30, align 8
  %45 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %45(ptr align 8 %indirectarg28, ptr align 8 %indirectarg29, ptr align 8 %indirectarg30, i32 281) #5, !dbg !1705
  unreachable, !dbg !1705

panic38:                                          ; preds = %checkok31
  store %"char[]" { ptr @.panic_msg.55, i64 54 }, ptr %indirectarg39, align 8
  store %"char[]" { ptr @.file.56, i64 10 }, ptr %indirectarg40, align 8
  store %"char[]" { ptr @.func.105, i64 7 }, ptr %indirectarg41, align 8
  %46 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %46(ptr align 8 %indirectarg39, ptr align 8 %indirectarg40, ptr align 8 %indirectarg41, i32 281) #5, !dbg !1712
  unreachable, !dbg !1712

panic48:                                          ; preds = %checkok42
  store %"char[]" { ptr @.panic_msg.55, i64 54 }, ptr %indirectarg49, align 8
  store %"char[]" { ptr @.file.56, i64 10 }, ptr %indirectarg50, align 8
  store %"char[]" { ptr @.func.105, i64 7 }, ptr %indirectarg51, align 8
  %47 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %47(ptr align 8 %indirectarg49, ptr align 8 %indirectarg50, ptr align 8 %indirectarg51, i32 281) #5, !dbg !1716
  unreachable, !dbg !1716

panic58:                                          ; preds = %checkok52
  store %"char[]" { ptr @.panic_msg.55, i64 54 }, ptr %indirectarg59, align 8
  store %"char[]" { ptr @.file.56, i64 10 }, ptr %indirectarg60, align 8
  store %"char[]" { ptr @.func.105, i64 7 }, ptr %indirectarg61, align 8
  %48 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %48(ptr align 8 %indirectarg59, ptr align 8 %indirectarg60, ptr align 8 %indirectarg61, i32 281) #5, !dbg !1722
  unreachable, !dbg !1722

panic66:                                          ; preds = %checkok62
  store %"char[]" { ptr @.panic_msg.55, i64 54 }, ptr %indirectarg67, align 8
  store %"char[]" { ptr @.file.56, i64 10 }, ptr %indirectarg68, align 8
  store %"char[]" { ptr @.func.105, i64 7 }, ptr %indirectarg69, align 8
  %49 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %49(ptr align 8 %indirectarg67, ptr align 8 %indirectarg68, ptr align 8 %indirectarg69, i32 281) #5, !dbg !1726
  unreachable, !dbg !1726
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.math.random.Sfc128Random.set_seed(ptr %0, ptr align 8 %1) #0 comdat !dbg !1729 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %input = alloca %"char[]", align 8
  %return_value = alloca [4 x i128], align 16
  %taddr = alloca ptr, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg7 = alloca %"char[]", align 8
  %indirectarg8 = alloca %"char[]", align 8
  %taddr11 = alloca i64, align 8
  %taddr12 = alloca i64, align 8
  %indirectarg13 = alloca %"char[]", align 8
  %indirectarg14 = alloca %"char[]", align 8
  %indirectarg15 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg16 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !1734
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !1734
  br i1 %3, label %panic, label %checkok, !dbg !1734

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1735, !DIExpression(), !1736)
    #dbg_declare(ptr %1, !1737, !DIExpression(), !1736)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input, ptr align 8 %1, i32 16, i1 false)
    #dbg_declare(ptr %return_value, !1738, !DIExpression(), !1740)
  call void @llvm.memset.p0.i64(ptr align 16 %return_value, i8 0, i64 64, i1 false), !dbg !1740
  store ptr %return_value, ptr %taddr, align 8
  %4 = load ptr, ptr %taddr, align 8
  %5 = insertvalue %"char[]" undef, ptr %4, 0
  %6 = insertvalue %"char[]" %5, i64 64, 1
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg3, ptr align 8 %input, i32 16, i1 false)
  store %"char[]" %6, ptr %indirectarg4, align 8
  call void @std.math.random.seeder(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4), !dbg !1742
  %7 = load ptr, ptr %self, align 8, !dbg !1741
  %checknull = icmp eq ptr %7, null, !dbg !1741
  %8 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1741
  br i1 %8, label %panic5, label %checkok9, !dbg !1741

checkok9:                                         ; preds = %checkok
  %9 = ptrtoint ptr %7 to i64, !dbg !1741
  %10 = urem i64 %9, 16, !dbg !1741
  %11 = icmp ne i64 %10, 0, !dbg !1741
  %12 = call i1 @llvm.expect.i1(i1 %11, i1 false), !dbg !1741
  br i1 %12, label %panic10, label %checkok17, !dbg !1741

checkok17:                                        ; preds = %checkok9
  call void @llvm.memcpy.p0.p0.i32(ptr align 16 %7, ptr align 16 %return_value, i32 64, i1 false), !dbg !1741
  ret void, !dbg !1741

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.110, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func, i64 8 }, ptr %indirectarg2, align 8
  %13 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %13(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 15) #5, !dbg !1736
  unreachable, !dbg !1736

panic5:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.8, i64 45 }, ptr %indirectarg6, align 8
  store %"char[]" { ptr @.file.110, i64 11 }, ptr %indirectarg7, align 8
  store %"char[]" { ptr @.func, i64 8 }, ptr %indirectarg8, align 8
  %14 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %14(ptr align 8 %indirectarg6, ptr align 8 %indirectarg7, ptr align 8 %indirectarg8, i32 17) #5, !dbg !1741
  unreachable, !dbg !1741

panic10:                                          ; preds = %checkok9
  store i64 16, ptr %taddr11, align 8
  %15 = insertvalue %any undef, ptr %taddr11, 0
  %16 = insertvalue %any %15, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %10, ptr %taddr12, align 8
  %17 = insertvalue %any undef, ptr %taddr12, 0
  %18 = insertvalue %any %17, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg13, align 8
  store %"char[]" { ptr @.file.110, i64 11 }, ptr %indirectarg14, align 8
  store %"char[]" { ptr @.func, i64 8 }, ptr %indirectarg15, align 8
  store %any %16, ptr %varargslots, align 16
  %ptradd = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %18, ptr %ptradd, align 16
  %19 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %19, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg16, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg13, ptr align 8 %indirectarg14, ptr align 8 %indirectarg15, i32 17, ptr align 8 %indirectarg16) #5, !dbg !1741
  unreachable, !dbg !1741
}

; Function Attrs: nounwind ssp uwtable
define weak_odr <2 x i64> @std.math.random.Sfc128Random.next_int128(ptr %0) #0 comdat !dbg !1743 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %s = alloca ptr, align 8
  %result = alloca i128, align 16
  %taddr = alloca i64, align 8
  %taddr4 = alloca i64, align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg7 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg8 = alloca %"any[]", align 8
  %taddr12 = alloca i64, align 8
  %taddr13 = alloca i64, align 8
  %indirectarg14 = alloca %"char[]", align 8
  %indirectarg15 = alloca %"char[]", align 8
  %indirectarg16 = alloca %"char[]", align 8
  %varargslots17 = alloca [2 x %any], align 16
  %indirectarg20 = alloca %"any[]", align 8
  %taddr24 = alloca i64, align 8
  %taddr25 = alloca i64, align 8
  %indirectarg26 = alloca %"char[]", align 8
  %indirectarg27 = alloca %"char[]", align 8
  %indirectarg28 = alloca %"char[]", align 8
  %varargslots29 = alloca [2 x %any], align 16
  %indirectarg32 = alloca %"any[]", align 8
  %taddr37 = alloca i64, align 8
  %taddr38 = alloca i64, align 8
  %indirectarg39 = alloca %"char[]", align 8
  %indirectarg40 = alloca %"char[]", align 8
  %indirectarg41 = alloca %"char[]", align 8
  %varargslots42 = alloca [2 x %any], align 16
  %indirectarg45 = alloca %"any[]", align 8
  %taddr49 = alloca i64, align 8
  %taddr50 = alloca i64, align 8
  %indirectarg51 = alloca %"char[]", align 8
  %indirectarg52 = alloca %"char[]", align 8
  %indirectarg53 = alloca %"char[]", align 8
  %varargslots54 = alloca [2 x %any], align 16
  %indirectarg57 = alloca %"any[]", align 8
  %taddr60 = alloca i64, align 8
  %taddr61 = alloca i64, align 8
  %indirectarg62 = alloca %"char[]", align 8
  %indirectarg63 = alloca %"char[]", align 8
  %indirectarg64 = alloca %"char[]", align 8
  %varargslots65 = alloca [2 x %any], align 16
  %indirectarg68 = alloca %"any[]", align 8
  %taddr72 = alloca i64, align 8
  %taddr73 = alloca i64, align 8
  %indirectarg74 = alloca %"char[]", align 8
  %indirectarg75 = alloca %"char[]", align 8
  %indirectarg76 = alloca %"char[]", align 8
  %varargslots77 = alloca [2 x %any], align 16
  %indirectarg80 = alloca %"any[]", align 8
  %taddr84 = alloca i64, align 8
  %taddr85 = alloca i64, align 8
  %indirectarg86 = alloca %"char[]", align 8
  %indirectarg87 = alloca %"char[]", align 8
  %indirectarg88 = alloca %"char[]", align 8
  %varargslots89 = alloca [2 x %any], align 16
  %indirectarg92 = alloca %"any[]", align 8
  %taddr97 = alloca i64, align 8
  %taddr98 = alloca i64, align 8
  %indirectarg99 = alloca %"char[]", align 8
  %indirectarg100 = alloca %"char[]", align 8
  %indirectarg101 = alloca %"char[]", align 8
  %varargslots102 = alloca [2 x %any], align 16
  %indirectarg105 = alloca %"any[]", align 8
  %taddr109 = alloca i64, align 8
  %taddr110 = alloca i64, align 8
  %indirectarg111 = alloca %"char[]", align 8
  %indirectarg112 = alloca %"char[]", align 8
  %indirectarg113 = alloca %"char[]", align 8
  %varargslots114 = alloca [2 x %any], align 16
  %indirectarg117 = alloca %"any[]", align 8
  %self119 = alloca i128, align 16
  %shift = alloca i128, align 16
  %taddr123 = alloca i64, align 8
  %taddr124 = alloca i64, align 8
  %indirectarg125 = alloca %"char[]", align 8
  %indirectarg126 = alloca %"char[]", align 8
  %indirectarg127 = alloca %"char[]", align 8
  %varargslots128 = alloca [2 x %any], align 16
  %indirectarg131 = alloca %"any[]", align 8
  %taddr135 = alloca i64, align 8
  %taddr136 = alloca i64, align 8
  %indirectarg137 = alloca %"char[]", align 8
  %indirectarg138 = alloca %"char[]", align 8
  %indirectarg139 = alloca %"char[]", align 8
  %varargslots140 = alloca [2 x %any], align 16
  %indirectarg143 = alloca %"any[]", align 8
  %1 = icmp eq ptr %0, null, !dbg !1746
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1746
  br i1 %2, label %panic, label %checkok, !dbg !1746

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1747, !DIExpression(), !1748)
    #dbg_declare(ptr %s, !1749, !DIExpression(), !1750)
  %3 = load ptr, ptr %self, align 8, !dbg !1750
  store ptr %3, ptr %s, align 8, !dbg !1750
    #dbg_declare(ptr %result, !1751, !DIExpression(), !1752)
  %4 = load ptr, ptr %s, align 8, !dbg !1752
  %5 = ptrtoint ptr %4 to i64, !dbg !1752
  %6 = urem i64 %5, 16, !dbg !1752
  %7 = icmp ne i64 %6, 0, !dbg !1752
  %8 = call i1 @llvm.expect.i1(i1 %7, i1 false), !dbg !1752
  br i1 %8, label %panic3, label %checkok9, !dbg !1752

checkok9:                                         ; preds = %checkok
  %9 = load i128, ptr %4, align 16, !dbg !1752
  %10 = load ptr, ptr %s, align 8, !dbg !1752
  %ptradd10 = getelementptr inbounds i8, ptr %10, i64 16, !dbg !1752
  %11 = ptrtoint ptr %ptradd10 to i64, !dbg !1752
  %12 = urem i64 %11, 16, !dbg !1752
  %13 = icmp ne i64 %12, 0, !dbg !1752
  %14 = call i1 @llvm.expect.i1(i1 %13, i1 false), !dbg !1752
  br i1 %14, label %panic11, label %checkok21, !dbg !1752

checkok21:                                        ; preds = %checkok9
  %15 = load i128, ptr %ptradd10, align 16, !dbg !1752
  %add = add i128 %9, %15, !dbg !1752
  %16 = load ptr, ptr %s, align 8, !dbg !1752
  %ptradd22 = getelementptr inbounds i8, ptr %16, i64 48, !dbg !1752
  %17 = ptrtoint ptr %ptradd22 to i64, !dbg !1752
  %18 = urem i64 %17, 16, !dbg !1752
  %19 = icmp ne i64 %18, 0, !dbg !1752
  %20 = call i1 @llvm.expect.i1(i1 %19, i1 false), !dbg !1752
  br i1 %20, label %panic23, label %checkok33, !dbg !1752

checkok33:                                        ; preds = %checkok21
  %21 = load i128, ptr %ptradd22, align 16, !dbg !1752
  %add34 = add i128 %add, %21, !dbg !1752
  store i128 %add34, ptr %result, align 16, !dbg !1752
  %22 = load ptr, ptr %s, align 8, !dbg !1753
  %ptradd35 = getelementptr inbounds i8, ptr %22, i64 16, !dbg !1753
  %23 = ptrtoint ptr %ptradd35 to i64, !dbg !1753
  %24 = urem i64 %23, 16, !dbg !1753
  %25 = icmp ne i64 %24, 0, !dbg !1753
  %26 = call i1 @llvm.expect.i1(i1 %25, i1 false), !dbg !1753
  br i1 %26, label %panic36, label %checkok46, !dbg !1753

checkok46:                                        ; preds = %checkok33
  %27 = load i128, ptr %ptradd35, align 16, !dbg !1753
  %28 = load ptr, ptr %s, align 8, !dbg !1753
  %ptradd47 = getelementptr inbounds i8, ptr %28, i64 16, !dbg !1753
  %29 = ptrtoint ptr %ptradd47 to i64, !dbg !1753
  %30 = urem i64 %29, 16, !dbg !1753
  %31 = icmp ne i64 %30, 0, !dbg !1753
  %32 = call i1 @llvm.expect.i1(i1 %31, i1 false), !dbg !1753
  br i1 %32, label %panic48, label %checkok58, !dbg !1753

checkok58:                                        ; preds = %checkok46
  %33 = load i128, ptr %ptradd47, align 16, !dbg !1753
  %lshr = lshr i128 %33, 11, !dbg !1753
  %34 = freeze i128 %lshr, !dbg !1753
  %xor = xor i128 %27, %34, !dbg !1753
  %35 = load ptr, ptr %s, align 8, !dbg !1753
  %36 = ptrtoint ptr %35 to i64, !dbg !1753
  %37 = urem i64 %36, 16, !dbg !1753
  %38 = icmp ne i64 %37, 0, !dbg !1753
  %39 = call i1 @llvm.expect.i1(i1 %38, i1 false), !dbg !1753
  br i1 %39, label %panic59, label %checkok69, !dbg !1753

checkok69:                                        ; preds = %checkok58
  store i128 %xor, ptr %35, align 16, !dbg !1753
  %40 = load ptr, ptr %s, align 8, !dbg !1754
  %ptradd70 = getelementptr inbounds i8, ptr %40, i64 32, !dbg !1754
  %41 = ptrtoint ptr %ptradd70 to i64, !dbg !1754
  %42 = urem i64 %41, 16, !dbg !1754
  %43 = icmp ne i64 %42, 0, !dbg !1754
  %44 = call i1 @llvm.expect.i1(i1 %43, i1 false), !dbg !1754
  br i1 %44, label %panic71, label %checkok81, !dbg !1754

checkok81:                                        ; preds = %checkok69
  %45 = load i128, ptr %ptradd70, align 16, !dbg !1754
  %46 = load ptr, ptr %s, align 8, !dbg !1754
  %ptradd82 = getelementptr inbounds i8, ptr %46, i64 32, !dbg !1754
  %47 = ptrtoint ptr %ptradd82 to i64, !dbg !1754
  %48 = urem i64 %47, 16, !dbg !1754
  %49 = icmp ne i64 %48, 0, !dbg !1754
  %50 = call i1 @llvm.expect.i1(i1 %49, i1 false), !dbg !1754
  br i1 %50, label %panic83, label %checkok93, !dbg !1754

checkok93:                                        ; preds = %checkok81
  %51 = load i128, ptr %ptradd82, align 16, !dbg !1754
  %shl = shl i128 %51, 3, !dbg !1754
  %52 = freeze i128 %shl, !dbg !1754
  %add94 = add i128 %45, %52, !dbg !1754
  %53 = load ptr, ptr %s, align 8, !dbg !1754
  %ptradd95 = getelementptr inbounds i8, ptr %53, i64 16, !dbg !1754
  %54 = ptrtoint ptr %ptradd95 to i64, !dbg !1754
  %55 = urem i64 %54, 16, !dbg !1754
  %56 = icmp ne i64 %55, 0, !dbg !1754
  %57 = call i1 @llvm.expect.i1(i1 %56, i1 false), !dbg !1754
  br i1 %57, label %panic96, label %checkok106, !dbg !1754

checkok106:                                       ; preds = %checkok93
  store i128 %add94, ptr %ptradd95, align 16, !dbg !1754
  %58 = load ptr, ptr %s, align 8, !dbg !1755
  %ptradd107 = getelementptr inbounds i8, ptr %58, i64 32, !dbg !1755
  %59 = ptrtoint ptr %ptradd107 to i64, !dbg !1755
  %60 = urem i64 %59, 16, !dbg !1755
  %61 = icmp ne i64 %60, 0, !dbg !1755
  %62 = call i1 @llvm.expect.i1(i1 %61, i1 false), !dbg !1755
  br i1 %62, label %panic108, label %checkok118, !dbg !1755

checkok118:                                       ; preds = %checkok106
  %63 = load i128, ptr %ptradd107, align 16
  store i128 %63, ptr %self119, align 16
  store i128 40, ptr %shift, align 16
  %64 = load i128, ptr %self119, align 16, !dbg !1756
  %65 = load i128, ptr %self119, align 16, !dbg !1756
  %66 = load i128, ptr %shift, align 16, !dbg !1756
  %67 = call i128 @llvm.fshr.i128(i128 %64, i128 %65, i128 %66), !dbg !1756
  %68 = load i128, ptr %result, align 16, !dbg !1755
  %add120 = add i128 %67, %68, !dbg !1755
  %69 = load ptr, ptr %s, align 8, !dbg !1755
  %ptradd121 = getelementptr inbounds i8, ptr %69, i64 32, !dbg !1755
  %70 = ptrtoint ptr %ptradd121 to i64, !dbg !1755
  %71 = urem i64 %70, 16, !dbg !1755
  %72 = icmp ne i64 %71, 0, !dbg !1755
  %73 = call i1 @llvm.expect.i1(i1 %72, i1 false), !dbg !1755
  br i1 %73, label %panic122, label %checkok132, !dbg !1755

checkok132:                                       ; preds = %checkok118
  store i128 %add120, ptr %ptradd121, align 16, !dbg !1755
  %74 = load ptr, ptr %s, align 8, !dbg !1758
  %ptradd133 = getelementptr inbounds i8, ptr %74, i64 48, !dbg !1758
  %75 = ptrtoint ptr %ptradd133 to i64, !dbg !1758
  %76 = urem i64 %75, 16, !dbg !1758
  %77 = icmp ne i64 %76, 0, !dbg !1758
  %78 = call i1 @llvm.expect.i1(i1 %77, i1 false), !dbg !1758
  br i1 %78, label %panic134, label %checkok144, !dbg !1758

checkok144:                                       ; preds = %checkok132
  %79 = load i128, ptr %ptradd133, align 16, !dbg !1758
  %add145 = add i128 %79, -129976298391535590297638237547755878347, !dbg !1758
  store i128 %add145, ptr %ptradd133, align 16, !dbg !1758
  %80 = load <2 x i64>, ptr %result, align 16, !dbg !1759
  ret <2 x i64> %80, !dbg !1759

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.110, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.21, i64 11 }, ptr %indirectarg2, align 8
  %81 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %81(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 20) #5, !dbg !1748
  unreachable, !dbg !1748

panic3:                                           ; preds = %checkok
  store i64 16, ptr %taddr, align 8
  %82 = insertvalue %any undef, ptr %taddr, 0
  %83 = insertvalue %any %82, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %6, ptr %taddr4, align 8
  %84 = insertvalue %any undef, ptr %taddr4, 0
  %85 = insertvalue %any %84, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.file.110, i64 11 }, ptr %indirectarg6, align 8
  store %"char[]" { ptr @.func.21, i64 11 }, ptr %indirectarg7, align 8
  store %any %83, ptr %varargslots, align 16
  %ptradd = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %85, ptr %ptradd, align 16
  %86 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %86, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg8, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, ptr align 8 %indirectarg7, i32 23, ptr align 8 %indirectarg8) #5, !dbg !1752
  unreachable, !dbg !1752

panic11:                                          ; preds = %checkok9
  store i64 16, ptr %taddr12, align 8
  %87 = insertvalue %any undef, ptr %taddr12, 0
  %88 = insertvalue %any %87, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %12, ptr %taddr13, align 8
  %89 = insertvalue %any undef, ptr %taddr13, 0
  %90 = insertvalue %any %89, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg14, align 8
  store %"char[]" { ptr @.file.110, i64 11 }, ptr %indirectarg15, align 8
  store %"char[]" { ptr @.func.21, i64 11 }, ptr %indirectarg16, align 8
  store %any %88, ptr %varargslots17, align 16
  %ptradd18 = getelementptr inbounds i8, ptr %varargslots17, i64 16
  store %any %90, ptr %ptradd18, align 16
  %91 = insertvalue %"any[]" undef, ptr %varargslots17, 0
  %"$$temp19" = insertvalue %"any[]" %91, i64 2, 1
  store %"any[]" %"$$temp19", ptr %indirectarg20, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg14, ptr align 8 %indirectarg15, ptr align 8 %indirectarg16, i32 23, ptr align 8 %indirectarg20) #5, !dbg !1752
  unreachable, !dbg !1752

panic23:                                          ; preds = %checkok21
  store i64 16, ptr %taddr24, align 8
  %92 = insertvalue %any undef, ptr %taddr24, 0
  %93 = insertvalue %any %92, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %18, ptr %taddr25, align 8
  %94 = insertvalue %any undef, ptr %taddr25, 0
  %95 = insertvalue %any %94, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg26, align 8
  store %"char[]" { ptr @.file.110, i64 11 }, ptr %indirectarg27, align 8
  store %"char[]" { ptr @.func.21, i64 11 }, ptr %indirectarg28, align 8
  store %any %93, ptr %varargslots29, align 16
  %ptradd30 = getelementptr inbounds i8, ptr %varargslots29, i64 16
  store %any %95, ptr %ptradd30, align 16
  %96 = insertvalue %"any[]" undef, ptr %varargslots29, 0
  %"$$temp31" = insertvalue %"any[]" %96, i64 2, 1
  store %"any[]" %"$$temp31", ptr %indirectarg32, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg26, ptr align 8 %indirectarg27, ptr align 8 %indirectarg28, i32 23, ptr align 8 %indirectarg32) #5, !dbg !1752
  unreachable, !dbg !1752

panic36:                                          ; preds = %checkok33
  store i64 16, ptr %taddr37, align 8
  %97 = insertvalue %any undef, ptr %taddr37, 0
  %98 = insertvalue %any %97, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %24, ptr %taddr38, align 8
  %99 = insertvalue %any undef, ptr %taddr38, 0
  %100 = insertvalue %any %99, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg39, align 8
  store %"char[]" { ptr @.file.110, i64 11 }, ptr %indirectarg40, align 8
  store %"char[]" { ptr @.func.21, i64 11 }, ptr %indirectarg41, align 8
  store %any %98, ptr %varargslots42, align 16
  %ptradd43 = getelementptr inbounds i8, ptr %varargslots42, i64 16
  store %any %100, ptr %ptradd43, align 16
  %101 = insertvalue %"any[]" undef, ptr %varargslots42, 0
  %"$$temp44" = insertvalue %"any[]" %101, i64 2, 1
  store %"any[]" %"$$temp44", ptr %indirectarg45, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg39, ptr align 8 %indirectarg40, ptr align 8 %indirectarg41, i32 24, ptr align 8 %indirectarg45) #5, !dbg !1753
  unreachable, !dbg !1753

panic48:                                          ; preds = %checkok46
  store i64 16, ptr %taddr49, align 8
  %102 = insertvalue %any undef, ptr %taddr49, 0
  %103 = insertvalue %any %102, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %30, ptr %taddr50, align 8
  %104 = insertvalue %any undef, ptr %taddr50, 0
  %105 = insertvalue %any %104, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg51, align 8
  store %"char[]" { ptr @.file.110, i64 11 }, ptr %indirectarg52, align 8
  store %"char[]" { ptr @.func.21, i64 11 }, ptr %indirectarg53, align 8
  store %any %103, ptr %varargslots54, align 16
  %ptradd55 = getelementptr inbounds i8, ptr %varargslots54, i64 16
  store %any %105, ptr %ptradd55, align 16
  %106 = insertvalue %"any[]" undef, ptr %varargslots54, 0
  %"$$temp56" = insertvalue %"any[]" %106, i64 2, 1
  store %"any[]" %"$$temp56", ptr %indirectarg57, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg51, ptr align 8 %indirectarg52, ptr align 8 %indirectarg53, i32 24, ptr align 8 %indirectarg57) #5, !dbg !1753
  unreachable, !dbg !1753

panic59:                                          ; preds = %checkok58
  store i64 16, ptr %taddr60, align 8
  %107 = insertvalue %any undef, ptr %taddr60, 0
  %108 = insertvalue %any %107, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %37, ptr %taddr61, align 8
  %109 = insertvalue %any undef, ptr %taddr61, 0
  %110 = insertvalue %any %109, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg62, align 8
  store %"char[]" { ptr @.file.110, i64 11 }, ptr %indirectarg63, align 8
  store %"char[]" { ptr @.func.21, i64 11 }, ptr %indirectarg64, align 8
  store %any %108, ptr %varargslots65, align 16
  %ptradd66 = getelementptr inbounds i8, ptr %varargslots65, i64 16
  store %any %110, ptr %ptradd66, align 16
  %111 = insertvalue %"any[]" undef, ptr %varargslots65, 0
  %"$$temp67" = insertvalue %"any[]" %111, i64 2, 1
  store %"any[]" %"$$temp67", ptr %indirectarg68, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg62, ptr align 8 %indirectarg63, ptr align 8 %indirectarg64, i32 24, ptr align 8 %indirectarg68) #5, !dbg !1753
  unreachable, !dbg !1753

panic71:                                          ; preds = %checkok69
  store i64 16, ptr %taddr72, align 8
  %112 = insertvalue %any undef, ptr %taddr72, 0
  %113 = insertvalue %any %112, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %42, ptr %taddr73, align 8
  %114 = insertvalue %any undef, ptr %taddr73, 0
  %115 = insertvalue %any %114, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg74, align 8
  store %"char[]" { ptr @.file.110, i64 11 }, ptr %indirectarg75, align 8
  store %"char[]" { ptr @.func.21, i64 11 }, ptr %indirectarg76, align 8
  store %any %113, ptr %varargslots77, align 16
  %ptradd78 = getelementptr inbounds i8, ptr %varargslots77, i64 16
  store %any %115, ptr %ptradd78, align 16
  %116 = insertvalue %"any[]" undef, ptr %varargslots77, 0
  %"$$temp79" = insertvalue %"any[]" %116, i64 2, 1
  store %"any[]" %"$$temp79", ptr %indirectarg80, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg74, ptr align 8 %indirectarg75, ptr align 8 %indirectarg76, i32 25, ptr align 8 %indirectarg80) #5, !dbg !1754
  unreachable, !dbg !1754

panic83:                                          ; preds = %checkok81
  store i64 16, ptr %taddr84, align 8
  %117 = insertvalue %any undef, ptr %taddr84, 0
  %118 = insertvalue %any %117, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %48, ptr %taddr85, align 8
  %119 = insertvalue %any undef, ptr %taddr85, 0
  %120 = insertvalue %any %119, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg86, align 8
  store %"char[]" { ptr @.file.110, i64 11 }, ptr %indirectarg87, align 8
  store %"char[]" { ptr @.func.21, i64 11 }, ptr %indirectarg88, align 8
  store %any %118, ptr %varargslots89, align 16
  %ptradd90 = getelementptr inbounds i8, ptr %varargslots89, i64 16
  store %any %120, ptr %ptradd90, align 16
  %121 = insertvalue %"any[]" undef, ptr %varargslots89, 0
  %"$$temp91" = insertvalue %"any[]" %121, i64 2, 1
  store %"any[]" %"$$temp91", ptr %indirectarg92, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg86, ptr align 8 %indirectarg87, ptr align 8 %indirectarg88, i32 25, ptr align 8 %indirectarg92) #5, !dbg !1754
  unreachable, !dbg !1754

panic96:                                          ; preds = %checkok93
  store i64 16, ptr %taddr97, align 8
  %122 = insertvalue %any undef, ptr %taddr97, 0
  %123 = insertvalue %any %122, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %55, ptr %taddr98, align 8
  %124 = insertvalue %any undef, ptr %taddr98, 0
  %125 = insertvalue %any %124, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg99, align 8
  store %"char[]" { ptr @.file.110, i64 11 }, ptr %indirectarg100, align 8
  store %"char[]" { ptr @.func.21, i64 11 }, ptr %indirectarg101, align 8
  store %any %123, ptr %varargslots102, align 16
  %ptradd103 = getelementptr inbounds i8, ptr %varargslots102, i64 16
  store %any %125, ptr %ptradd103, align 16
  %126 = insertvalue %"any[]" undef, ptr %varargslots102, 0
  %"$$temp104" = insertvalue %"any[]" %126, i64 2, 1
  store %"any[]" %"$$temp104", ptr %indirectarg105, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg99, ptr align 8 %indirectarg100, ptr align 8 %indirectarg101, i32 25, ptr align 8 %indirectarg105) #5, !dbg !1754
  unreachable, !dbg !1754

panic108:                                         ; preds = %checkok106
  store i64 16, ptr %taddr109, align 8
  %127 = insertvalue %any undef, ptr %taddr109, 0
  %128 = insertvalue %any %127, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %60, ptr %taddr110, align 8
  %129 = insertvalue %any undef, ptr %taddr110, 0
  %130 = insertvalue %any %129, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg111, align 8
  store %"char[]" { ptr @.file.110, i64 11 }, ptr %indirectarg112, align 8
  store %"char[]" { ptr @.func.21, i64 11 }, ptr %indirectarg113, align 8
  store %any %128, ptr %varargslots114, align 16
  %ptradd115 = getelementptr inbounds i8, ptr %varargslots114, i64 16
  store %any %130, ptr %ptradd115, align 16
  %131 = insertvalue %"any[]" undef, ptr %varargslots114, 0
  %"$$temp116" = insertvalue %"any[]" %131, i64 2, 1
  store %"any[]" %"$$temp116", ptr %indirectarg117, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg111, ptr align 8 %indirectarg112, ptr align 8 %indirectarg113, i32 26, ptr align 8 %indirectarg117) #5, !dbg !1755
  unreachable, !dbg !1755

panic122:                                         ; preds = %checkok118
  store i64 16, ptr %taddr123, align 8
  %132 = insertvalue %any undef, ptr %taddr123, 0
  %133 = insertvalue %any %132, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %71, ptr %taddr124, align 8
  %134 = insertvalue %any undef, ptr %taddr124, 0
  %135 = insertvalue %any %134, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg125, align 8
  store %"char[]" { ptr @.file.110, i64 11 }, ptr %indirectarg126, align 8
  store %"char[]" { ptr @.func.21, i64 11 }, ptr %indirectarg127, align 8
  store %any %133, ptr %varargslots128, align 16
  %ptradd129 = getelementptr inbounds i8, ptr %varargslots128, i64 16
  store %any %135, ptr %ptradd129, align 16
  %136 = insertvalue %"any[]" undef, ptr %varargslots128, 0
  %"$$temp130" = insertvalue %"any[]" %136, i64 2, 1
  store %"any[]" %"$$temp130", ptr %indirectarg131, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg125, ptr align 8 %indirectarg126, ptr align 8 %indirectarg127, i32 26, ptr align 8 %indirectarg131) #5, !dbg !1755
  unreachable, !dbg !1755

panic134:                                         ; preds = %checkok132
  store i64 16, ptr %taddr135, align 8
  %137 = insertvalue %any undef, ptr %taddr135, 0
  %138 = insertvalue %any %137, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %76, ptr %taddr136, align 8
  %139 = insertvalue %any undef, ptr %taddr136, 0
  %140 = insertvalue %any %139, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg137, align 8
  store %"char[]" { ptr @.file.110, i64 11 }, ptr %indirectarg138, align 8
  store %"char[]" { ptr @.func.21, i64 11 }, ptr %indirectarg139, align 8
  store %any %138, ptr %varargslots140, align 16
  %ptradd141 = getelementptr inbounds i8, ptr %varargslots140, i64 16
  store %any %140, ptr %ptradd141, align 16
  %141 = insertvalue %"any[]" undef, ptr %varargslots140, 0
  %"$$temp142" = insertvalue %"any[]" %141, i64 2, 1
  store %"any[]" %"$$temp142", ptr %indirectarg143, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg137, ptr align 8 %indirectarg138, ptr align 8 %indirectarg139, i32 27, ptr align 8 %indirectarg143) #5, !dbg !1758
  unreachable, !dbg !1758
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.math.random.Sfc128Random.next_bytes(ptr %0, ptr align 8 %1) #0 comdat !dbg !1760 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %bytes = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i128, align 16
  %result = alloca i128, align 16
  %taddr = alloca ptr, align 8
  %taddr9 = alloca i64, align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg13 = alloca %"any[]", align 8
  %taddr17 = alloca i64, align 8
  %taddr18 = alloca i64, align 8
  %indirectarg19 = alloca %"char[]", align 8
  %indirectarg20 = alloca %"char[]", align 8
  %indirectarg21 = alloca %"char[]", align 8
  %varargslots22 = alloca [2 x %any], align 16
  %indirectarg25 = alloca %"any[]", align 8
  %taddr29 = alloca i64, align 8
  %taddr30 = alloca i64, align 8
  %indirectarg31 = alloca %"char[]", align 8
  %indirectarg32 = alloca %"char[]", align 8
  %indirectarg33 = alloca %"char[]", align 8
  %varargslots34 = alloca [2 x %any], align 16
  %indirectarg37 = alloca %"any[]", align 8
  %taddr39 = alloca ptr, align 8
  %taddr42 = alloca i64, align 8
  %taddr43 = alloca i64, align 8
  %indirectarg44 = alloca %"char[]", align 8
  %indirectarg45 = alloca %"char[]", align 8
  %indirectarg46 = alloca %"char[]", align 8
  %varargslots47 = alloca [2 x %any], align 16
  %indirectarg50 = alloca %"any[]", align 8
  %taddr54 = alloca i64, align 8
  %taddr55 = alloca i64, align 8
  %indirectarg56 = alloca %"char[]", align 8
  %indirectarg57 = alloca %"char[]", align 8
  %indirectarg58 = alloca %"char[]", align 8
  %varargslots59 = alloca [2 x %any], align 16
  %indirectarg62 = alloca %"any[]", align 8
  %taddr66 = alloca i64, align 8
  %taddr67 = alloca i64, align 8
  %indirectarg68 = alloca %"char[]", align 8
  %indirectarg69 = alloca %"char[]", align 8
  %indirectarg70 = alloca %"char[]", align 8
  %varargslots71 = alloca [2 x %any], align 16
  %indirectarg74 = alloca %"any[]", align 8
  %taddr79 = alloca i64, align 8
  %taddr80 = alloca i64, align 8
  %indirectarg81 = alloca %"char[]", align 8
  %indirectarg82 = alloca %"char[]", align 8
  %indirectarg83 = alloca %"char[]", align 8
  %varargslots84 = alloca [2 x %any], align 16
  %indirectarg87 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg91 = alloca %"char[]", align 8
  %indirectarg92 = alloca %"char[]", align 8
  %indirectarg93 = alloca %"char[]", align 8
  %indirectarg94 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !1761
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !1761
  br i1 %3, label %panic, label %checkok, !dbg !1761

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1762, !DIExpression(), !1761)
    #dbg_declare(ptr %1, !1763, !DIExpression(), !1761)
  %ptradd = getelementptr inbounds i8, ptr %1, i64 8, !dbg !1764
  %4 = load i64, ptr %ptradd, align 8, !dbg !1764
  %lt = icmp ult i64 0, %4, !dbg !1764
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !1764

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.13, i64 34 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.file.110, i64 11 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg5, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, i32 32) #5, !dbg !1764
  unreachable, !dbg !1764

assert_ok:                                        ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes, ptr align 8 %1, i32 16, i1 false)
    #dbg_declare(ptr %len, !1766, !DIExpression(), !1768)
  %ptradd6 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !1768
  %6 = load i64, ptr %ptradd6, align 8, !dbg !1768
  store i64 %6, ptr %len, align 8, !dbg !1768
  br label %loop.cond, !dbg !1769

loop.cond:                                        ; preds = %checkok88, %assert_ok
  %7 = load i64, ptr %len, align 8, !dbg !1770
  %lt7 = icmp ult i64 0, %7, !dbg !1770
  br i1 %lt7, label %loop.body, label %loop.exit, !dbg !1770

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %value, !1772, !DIExpression(), !1774)
  %8 = load ptr, ptr %self, align 8, !dbg !1775
  %9 = call <2 x i64> @std.math.random.Sfc128Random.next_int128(ptr %8), !dbg !1774
  store <2 x i64> %9, ptr %result, align 16
  %10 = load i128, ptr %result, align 16
  store i128 %10, ptr %value, align 16
  %11 = load i64, ptr %len, align 8, !dbg !1776
  %le = icmp ule i64 %11, 16, !dbg !1776
  br i1 %le, label %if.then, label %if.exit, !dbg !1776

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %12 = load ptr, ptr %taddr, align 8
  %13 = load i64, ptr %len, align 8, !dbg !1777
  %add = add i64 0, %13, !dbg !1777
  %gt = icmp ugt i64 0, %add, !dbg !1777
  %sub = sub i64 %add, 0, !dbg !1777
  %14 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !1777
  br i1 %14, label %panic8, label %checkok14, !dbg !1777

checkok14:                                        ; preds = %if.then
  %size = sub i64 %add, 0, !dbg !1777
  %15 = insertvalue %"char[]" undef, ptr %12, 0, !dbg !1777
  %16 = insertvalue %"char[]" %15, i64 %size, 1, !dbg !1777
  %17 = load %"char[]", ptr %bytes, align 8, !dbg !1777
  %18 = extractvalue %"char[]" %17, 0, !dbg !1777
  %19 = extractvalue %"char[]" %17, 1, !dbg !1777
  %gt15 = icmp ugt i64 0, %19, !dbg !1777
  %20 = call i1 @llvm.expect.i1(i1 %gt15, i1 false), !dbg !1777
  br i1 %20, label %panic16, label %checkok26, !dbg !1777

checkok26:                                        ; preds = %checkok14
  %size27 = sub i64 %19, 0, !dbg !1777
  %21 = insertvalue %"char[]" undef, ptr %18, 0, !dbg !1777
  %22 = insertvalue %"char[]" %21, i64 %size27, 1, !dbg !1777
  %23 = extractvalue %"char[]" %22, 0, !dbg !1777
  %24 = extractvalue %"char[]" %16, 0, !dbg !1777
  %25 = extractvalue %"char[]" %16, 1, !dbg !1777
  %26 = extractvalue %"char[]" %22, 1, !dbg !1777
  %neq = icmp ne i64 %26, %25, !dbg !1777
  %27 = call i1 @llvm.expect.i1(i1 %neq, i1 false), !dbg !1777
  br i1 %27, label %panic28, label %checkok38, !dbg !1777

checkok38:                                        ; preds = %checkok26
  %28 = mul i64 %25, 1, !dbg !1777
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %23, ptr align 1 %24, i64 %28, i1 false), !dbg !1777
  br label %expr_block.exit, !dbg !1779

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr39, align 8
  %29 = load ptr, ptr %taddr39, align 8
  %30 = insertvalue %"char[]" undef, ptr %29, 0
  %31 = insertvalue %"char[]" %30, i64 16, 1
  %32 = load %"char[]", ptr %bytes, align 8, !dbg !1780
  %33 = extractvalue %"char[]" %32, 0, !dbg !1780
  %34 = extractvalue %"char[]" %32, 1, !dbg !1780
  %gt40 = icmp sgt i64 0, %34, !dbg !1780
  %35 = call i1 @llvm.expect.i1(i1 %gt40, i1 false), !dbg !1780
  br i1 %35, label %panic41, label %checkok51, !dbg !1780

checkok51:                                        ; preds = %if.exit
  %lt52 = icmp slt i64 %34, 16, !dbg !1780
  %36 = call i1 @llvm.expect.i1(i1 %lt52, i1 false), !dbg !1780
  br i1 %36, label %panic53, label %checkok63, !dbg !1780

checkok63:                                        ; preds = %checkok51
  %37 = insertvalue %"char[]" undef, ptr %33, 0, !dbg !1780
  %38 = insertvalue %"char[]" %37, i64 16, 1, !dbg !1780
  %39 = extractvalue %"char[]" %38, 0, !dbg !1780
  %40 = extractvalue %"char[]" %31, 0, !dbg !1780
  %41 = extractvalue %"char[]" %31, 1, !dbg !1780
  %42 = extractvalue %"char[]" %38, 1, !dbg !1780
  %neq64 = icmp ne i64 %42, %41, !dbg !1780
  %43 = call i1 @llvm.expect.i1(i1 %neq64, i1 false), !dbg !1780
  br i1 %43, label %panic65, label %checkok75, !dbg !1780

checkok75:                                        ; preds = %checkok63
  %44 = mul i64 %41, 1, !dbg !1780
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %39, ptr align 1 %40, i64 %44, i1 false), !dbg !1780
  %45 = load i64, ptr %len, align 8, !dbg !1781
  %sub76 = sub i64 %45, 16, !dbg !1781
  store i64 %sub76, ptr %len, align 8, !dbg !1781
  %46 = load %"char[]", ptr %bytes, align 8, !dbg !1782
  %47 = extractvalue %"char[]" %46, 0, !dbg !1782
  %48 = extractvalue %"char[]" %46, 1, !dbg !1782
  %gt77 = icmp ugt i64 16, %48, !dbg !1782
  %49 = call i1 @llvm.expect.i1(i1 %gt77, i1 false), !dbg !1782
  br i1 %49, label %panic78, label %checkok88, !dbg !1782

checkok88:                                        ; preds = %checkok75
  %size89 = sub i64 %48, 16, !dbg !1782
  %ptradd90 = getelementptr inbounds i8, ptr %47, i64 16, !dbg !1782
  %50 = insertvalue %"char[]" undef, ptr %ptradd90, 0, !dbg !1782
  %51 = insertvalue %"char[]" %50, i64 %size89, 1, !dbg !1782
  store %"char[]" %51, ptr %bytes, align 8, !dbg !1782
  br label %loop.cond, !dbg !1782

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.111, i64 30 }, ptr %string, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg91, ptr align 8 %string, i32 16, i1 false)
  store %"char[]" { ptr @.str.112, i64 11 }, ptr %indirectarg92, align 8
  store %"char[]" { ptr @.str.113, i64 23 }, ptr %indirectarg93, align 8
  store %"any[]" zeroinitializer, ptr %indirectarg94, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg91, ptr align 8 %indirectarg92, ptr align 8 %indirectarg93, i32 34, ptr align 8 %indirectarg94), !dbg !1783
  unreachable, !dbg !1783

expr_block.exit:                                  ; preds = %checkok38
  ret void, !dbg !1783

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.110, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg2, align 8
  %52 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %52(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 34) #5, !dbg !1761
  unreachable, !dbg !1761

panic8:                                           ; preds = %if.then
  store i64 %sub, ptr %taddr9, align 8
  %53 = insertvalue %any undef, ptr %taddr9, 0
  %54 = insertvalue %any %53, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.14, i64 43 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg12, align 8
  store %any %54, ptr %varargslots, align 16
  %55 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %55, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg13, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, i32 153, ptr align 8 %indirectarg13) #5, !dbg !1777
  unreachable, !dbg !1777

panic16:                                          ; preds = %checkok14
  store i64 %19, ptr %taddr17, align 8
  %56 = insertvalue %any undef, ptr %taddr17, 0
  %57 = insertvalue %any %56, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr18, align 8
  %58 = insertvalue %any undef, ptr %taddr18, 0
  %59 = insertvalue %any %58, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.16, i64 61 }, ptr %indirectarg19, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg20, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg21, align 8
  store %any %57, ptr %varargslots22, align 16
  %ptradd23 = getelementptr inbounds i8, ptr %varargslots22, i64 16
  store %any %59, ptr %ptradd23, align 16
  %60 = insertvalue %"any[]" undef, ptr %varargslots22, 0
  %"$$temp24" = insertvalue %"any[]" %60, i64 2, 1
  store %"any[]" %"$$temp24", ptr %indirectarg25, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg19, ptr align 8 %indirectarg20, ptr align 8 %indirectarg21, i32 153, ptr align 8 %indirectarg25) #5, !dbg !1777
  unreachable, !dbg !1777

panic28:                                          ; preds = %checkok26
  store i64 %26, ptr %taddr29, align 8
  %61 = insertvalue %any undef, ptr %taddr29, 0
  %62 = insertvalue %any %61, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %25, ptr %taddr30, align 8
  %63 = insertvalue %any undef, ptr %taddr30, 0
  %64 = insertvalue %any %63, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 38 }, ptr %indirectarg31, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg32, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg33, align 8
  store %any %62, ptr %varargslots34, align 16
  %ptradd35 = getelementptr inbounds i8, ptr %varargslots34, i64 16
  store %any %64, ptr %ptradd35, align 16
  %65 = insertvalue %"any[]" undef, ptr %varargslots34, 0
  %"$$temp36" = insertvalue %"any[]" %65, i64 2, 1
  store %"any[]" %"$$temp36", ptr %indirectarg37, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg31, ptr align 8 %indirectarg32, ptr align 8 %indirectarg33, i32 153, ptr align 8 %indirectarg37) #5, !dbg !1777
  unreachable, !dbg !1777

panic41:                                          ; preds = %if.exit
  store i64 %34, ptr %taddr42, align 8
  %66 = insertvalue %any undef, ptr %taddr42, 0
  %67 = insertvalue %any %66, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr43, align 8
  %68 = insertvalue %any undef, ptr %taddr43, 0
  %69 = insertvalue %any %68, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.16, i64 61 }, ptr %indirectarg44, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg45, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg46, align 8
  store %any %67, ptr %varargslots47, align 16
  %ptradd48 = getelementptr inbounds i8, ptr %varargslots47, i64 16
  store %any %69, ptr %ptradd48, align 16
  %70 = insertvalue %"any[]" undef, ptr %varargslots47, 0
  %"$$temp49" = insertvalue %"any[]" %70, i64 2, 1
  store %"any[]" %"$$temp49", ptr %indirectarg50, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg44, ptr align 8 %indirectarg45, ptr align 8 %indirectarg46, i32 156, ptr align 8 %indirectarg50) #5, !dbg !1780
  unreachable, !dbg !1780

panic53:                                          ; preds = %checkok51
  store i64 15, ptr %taddr54, align 8
  %71 = insertvalue %any undef, ptr %taddr54, 0
  %72 = insertvalue %any %71, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %34, ptr %taddr55, align 8
  %73 = insertvalue %any undef, ptr %taddr55, 0
  %74 = insertvalue %any %73, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.18, i64 60 }, ptr %indirectarg56, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg57, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg58, align 8
  store %any %72, ptr %varargslots59, align 16
  %ptradd60 = getelementptr inbounds i8, ptr %varargslots59, i64 16
  store %any %74, ptr %ptradd60, align 16
  %75 = insertvalue %"any[]" undef, ptr %varargslots59, 0
  %"$$temp61" = insertvalue %"any[]" %75, i64 2, 1
  store %"any[]" %"$$temp61", ptr %indirectarg62, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg56, ptr align 8 %indirectarg57, ptr align 8 %indirectarg58, i32 156, ptr align 8 %indirectarg62) #5, !dbg !1780
  unreachable, !dbg !1780

panic65:                                          ; preds = %checkok63
  store i64 %42, ptr %taddr66, align 8
  %76 = insertvalue %any undef, ptr %taddr66, 0
  %77 = insertvalue %any %76, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %41, ptr %taddr67, align 8
  %78 = insertvalue %any undef, ptr %taddr67, 0
  %79 = insertvalue %any %78, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 38 }, ptr %indirectarg68, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg69, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg70, align 8
  store %any %77, ptr %varargslots71, align 16
  %ptradd72 = getelementptr inbounds i8, ptr %varargslots71, i64 16
  store %any %79, ptr %ptradd72, align 16
  %80 = insertvalue %"any[]" undef, ptr %varargslots71, 0
  %"$$temp73" = insertvalue %"any[]" %80, i64 2, 1
  store %"any[]" %"$$temp73", ptr %indirectarg74, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg68, ptr align 8 %indirectarg69, ptr align 8 %indirectarg70, i32 156, ptr align 8 %indirectarg74) #5, !dbg !1780
  unreachable, !dbg !1780

panic78:                                          ; preds = %checkok75
  store i64 %48, ptr %taddr79, align 8
  %81 = insertvalue %any undef, ptr %taddr79, 0
  %82 = insertvalue %any %81, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 16, ptr %taddr80, align 8
  %83 = insertvalue %any undef, ptr %taddr80, 0
  %84 = insertvalue %any %83, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.16, i64 61 }, ptr %indirectarg81, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg82, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg83, align 8
  store %any %82, ptr %varargslots84, align 16
  %ptradd85 = getelementptr inbounds i8, ptr %varargslots84, i64 16
  store %any %84, ptr %ptradd85, align 16
  %85 = insertvalue %"any[]" undef, ptr %varargslots84, 0
  %"$$temp86" = insertvalue %"any[]" %85, i64 2, 1
  store %"any[]" %"$$temp86", ptr %indirectarg87, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg81, ptr align 8 %indirectarg82, ptr align 8 %indirectarg83, i32 158, ptr align 8 %indirectarg87) #5, !dbg !1782
  unreachable, !dbg !1782
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.math.random.Sfc128Random.next_long(ptr %0) #0 comdat !dbg !1786 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %result = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !1789
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1789
  br i1 %2, label %panic, label %checkok, !dbg !1789

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1790, !DIExpression(), !1789)
  %3 = load ptr, ptr %self, align 8, !dbg !1789
  %4 = call <2 x i64> @std.math.random.Sfc128Random.next_int128(ptr %3), !dbg !1789
  store <2 x i64> %4, ptr %result, align 16
  %5 = load i128, ptr %result, align 16
  %trunc = trunc i128 %5 to i32
  %zext = zext i32 %trunc to i64
  ret i64 %zext

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.110, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.10, i64 9 }, ptr %indirectarg2, align 8
  %6 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %6(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 35) #5, !dbg !1789
  unreachable, !dbg !1789
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i32 @std.math.random.Sfc128Random.next_int(ptr %0) #0 comdat !dbg !1791 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %result = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !1794
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1794
  br i1 %2, label %panic, label %checkok, !dbg !1794

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1795, !DIExpression(), !1794)
  %3 = load ptr, ptr %self, align 8, !dbg !1794
  %4 = call <2 x i64> @std.math.random.Sfc128Random.next_int128(ptr %3), !dbg !1794
  store <2 x i64> %4, ptr %result, align 16
  %5 = load i128, ptr %result, align 16
  %trunc = trunc i128 %5 to i32
  ret i32 %trunc

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.110, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.22, i64 8 }, ptr %indirectarg2, align 8
  %6 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %6(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 36) #5, !dbg !1794
  unreachable, !dbg !1794
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i16 @std.math.random.Sfc128Random.next_short(ptr %0) #0 comdat !dbg !1796 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %result = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !1799
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1799
  br i1 %2, label %panic, label %checkok, !dbg !1799

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1800, !DIExpression(), !1799)
  %3 = load ptr, ptr %self, align 8, !dbg !1799
  %4 = call <2 x i64> @std.math.random.Sfc128Random.next_int128(ptr %3), !dbg !1799
  store <2 x i64> %4, ptr %result, align 16
  %5 = load i128, ptr %result, align 16
  %trunc = trunc i128 %5 to i16
  ret i16 %trunc

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.110, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.23, i64 10 }, ptr %indirectarg2, align 8
  %6 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %6(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 37) #5, !dbg !1799
  unreachable, !dbg !1799
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i8 @std.math.random.Sfc128Random.next_byte(ptr %0) #0 comdat !dbg !1801 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %result = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !1804
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1804
  br i1 %2, label %panic, label %checkok, !dbg !1804

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1805, !DIExpression(), !1804)
  %3 = load ptr, ptr %self, align 8, !dbg !1804
  %4 = call <2 x i64> @std.math.random.Sfc128Random.next_int128(ptr %3), !dbg !1804
  store <2 x i64> %4, ptr %result, align 16
  %5 = load i128, ptr %result, align 16
  %trunc = trunc i128 %5 to i8
  ret i8 %trunc

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.110, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.24, i64 9 }, ptr %indirectarg2, align 8
  %6 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %6(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 38) #5, !dbg !1804
  unreachable, !dbg !1804
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.math.random.Sfc64Random.set_seed(ptr %0, ptr align 8 %1) #0 comdat !dbg !1806 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %input = alloca %"char[]", align 8
  %return_value = alloca [4 x i64], align 16
  %taddr = alloca ptr, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg7 = alloca %"char[]", align 8
  %indirectarg8 = alloca %"char[]", align 8
  %taddr11 = alloca i64, align 8
  %taddr12 = alloca i64, align 8
  %indirectarg13 = alloca %"char[]", align 8
  %indirectarg14 = alloca %"char[]", align 8
  %indirectarg15 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg16 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !1810
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !1810
  br i1 %3, label %panic, label %checkok, !dbg !1810

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1811, !DIExpression(), !1812)
    #dbg_declare(ptr %1, !1813, !DIExpression(), !1812)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input, ptr align 8 %1, i32 16, i1 false)
    #dbg_declare(ptr %return_value, !1814, !DIExpression(), !1816)
  call void @llvm.memset.p0.i64(ptr align 16 %return_value, i8 0, i64 32, i1 false), !dbg !1816
  store ptr %return_value, ptr %taddr, align 8
  %4 = load ptr, ptr %taddr, align 8
  %5 = insertvalue %"char[]" undef, ptr %4, 0
  %6 = insertvalue %"char[]" %5, i64 32, 1
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg3, ptr align 8 %input, i32 16, i1 false)
  store %"char[]" %6, ptr %indirectarg4, align 8
  call void @std.math.random.seeder(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4), !dbg !1818
  %7 = load ptr, ptr %self, align 8, !dbg !1817
  %checknull = icmp eq ptr %7, null, !dbg !1817
  %8 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1817
  br i1 %8, label %panic5, label %checkok9, !dbg !1817

checkok9:                                         ; preds = %checkok
  %9 = ptrtoint ptr %7 to i64, !dbg !1817
  %10 = urem i64 %9, 8, !dbg !1817
  %11 = icmp ne i64 %10, 0, !dbg !1817
  %12 = call i1 @llvm.expect.i1(i1 %11, i1 false), !dbg !1817
  br i1 %12, label %panic10, label %checkok17, !dbg !1817

checkok17:                                        ; preds = %checkok9
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %7, ptr align 16 %return_value, i32 32, i1 false), !dbg !1817
  ret void, !dbg !1817

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.110, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func, i64 8 }, ptr %indirectarg2, align 8
  %13 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %13(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 45) #5, !dbg !1812
  unreachable, !dbg !1812

panic5:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.8, i64 45 }, ptr %indirectarg6, align 8
  store %"char[]" { ptr @.file.110, i64 11 }, ptr %indirectarg7, align 8
  store %"char[]" { ptr @.func, i64 8 }, ptr %indirectarg8, align 8
  %14 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %14(ptr align 8 %indirectarg6, ptr align 8 %indirectarg7, ptr align 8 %indirectarg8, i32 47) #5, !dbg !1817
  unreachable, !dbg !1817

panic10:                                          ; preds = %checkok9
  store i64 8, ptr %taddr11, align 8
  %15 = insertvalue %any undef, ptr %taddr11, 0
  %16 = insertvalue %any %15, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %10, ptr %taddr12, align 8
  %17 = insertvalue %any undef, ptr %taddr12, 0
  %18 = insertvalue %any %17, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg13, align 8
  store %"char[]" { ptr @.file.110, i64 11 }, ptr %indirectarg14, align 8
  store %"char[]" { ptr @.func, i64 8 }, ptr %indirectarg15, align 8
  store %any %16, ptr %varargslots, align 16
  %ptradd = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %18, ptr %ptradd, align 16
  %19 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %19, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg16, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg13, ptr align 8 %indirectarg14, ptr align 8 %indirectarg15, i32 47, ptr align 8 %indirectarg16) #5, !dbg !1817
  unreachable, !dbg !1817
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.math.random.Sfc64Random.next_long(ptr %0) #0 comdat !dbg !1819 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %s = alloca ptr, align 8
  %result = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr4 = alloca i64, align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg7 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg8 = alloca %"any[]", align 8
  %taddr12 = alloca i64, align 8
  %taddr13 = alloca i64, align 8
  %indirectarg14 = alloca %"char[]", align 8
  %indirectarg15 = alloca %"char[]", align 8
  %indirectarg16 = alloca %"char[]", align 8
  %varargslots17 = alloca [2 x %any], align 16
  %indirectarg20 = alloca %"any[]", align 8
  %taddr24 = alloca i64, align 8
  %taddr25 = alloca i64, align 8
  %indirectarg26 = alloca %"char[]", align 8
  %indirectarg27 = alloca %"char[]", align 8
  %indirectarg28 = alloca %"char[]", align 8
  %varargslots29 = alloca [2 x %any], align 16
  %indirectarg32 = alloca %"any[]", align 8
  %taddr37 = alloca i64, align 8
  %taddr38 = alloca i64, align 8
  %indirectarg39 = alloca %"char[]", align 8
  %indirectarg40 = alloca %"char[]", align 8
  %indirectarg41 = alloca %"char[]", align 8
  %varargslots42 = alloca [2 x %any], align 16
  %indirectarg45 = alloca %"any[]", align 8
  %taddr49 = alloca i64, align 8
  %taddr50 = alloca i64, align 8
  %indirectarg51 = alloca %"char[]", align 8
  %indirectarg52 = alloca %"char[]", align 8
  %indirectarg53 = alloca %"char[]", align 8
  %varargslots54 = alloca [2 x %any], align 16
  %indirectarg57 = alloca %"any[]", align 8
  %taddr60 = alloca i64, align 8
  %taddr61 = alloca i64, align 8
  %indirectarg62 = alloca %"char[]", align 8
  %indirectarg63 = alloca %"char[]", align 8
  %indirectarg64 = alloca %"char[]", align 8
  %varargslots65 = alloca [2 x %any], align 16
  %indirectarg68 = alloca %"any[]", align 8
  %taddr72 = alloca i64, align 8
  %taddr73 = alloca i64, align 8
  %indirectarg74 = alloca %"char[]", align 8
  %indirectarg75 = alloca %"char[]", align 8
  %indirectarg76 = alloca %"char[]", align 8
  %varargslots77 = alloca [2 x %any], align 16
  %indirectarg80 = alloca %"any[]", align 8
  %taddr84 = alloca i64, align 8
  %taddr85 = alloca i64, align 8
  %indirectarg86 = alloca %"char[]", align 8
  %indirectarg87 = alloca %"char[]", align 8
  %indirectarg88 = alloca %"char[]", align 8
  %varargslots89 = alloca [2 x %any], align 16
  %indirectarg92 = alloca %"any[]", align 8
  %taddr97 = alloca i64, align 8
  %taddr98 = alloca i64, align 8
  %indirectarg99 = alloca %"char[]", align 8
  %indirectarg100 = alloca %"char[]", align 8
  %indirectarg101 = alloca %"char[]", align 8
  %varargslots102 = alloca [2 x %any], align 16
  %indirectarg105 = alloca %"any[]", align 8
  %taddr109 = alloca i64, align 8
  %taddr110 = alloca i64, align 8
  %indirectarg111 = alloca %"char[]", align 8
  %indirectarg112 = alloca %"char[]", align 8
  %indirectarg113 = alloca %"char[]", align 8
  %varargslots114 = alloca [2 x %any], align 16
  %indirectarg117 = alloca %"any[]", align 8
  %self119 = alloca i64, align 8
  %shift = alloca i64, align 8
  %taddr123 = alloca i64, align 8
  %taddr124 = alloca i64, align 8
  %indirectarg125 = alloca %"char[]", align 8
  %indirectarg126 = alloca %"char[]", align 8
  %indirectarg127 = alloca %"char[]", align 8
  %varargslots128 = alloca [2 x %any], align 16
  %indirectarg131 = alloca %"any[]", align 8
  %taddr135 = alloca i64, align 8
  %taddr136 = alloca i64, align 8
  %indirectarg137 = alloca %"char[]", align 8
  %indirectarg138 = alloca %"char[]", align 8
  %indirectarg139 = alloca %"char[]", align 8
  %varargslots140 = alloca [2 x %any], align 16
  %indirectarg143 = alloca %"any[]", align 8
  %1 = icmp eq ptr %0, null, !dbg !1822
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1822
  br i1 %2, label %panic, label %checkok, !dbg !1822

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1823, !DIExpression(), !1824)
    #dbg_declare(ptr %s, !1825, !DIExpression(), !1826)
  %3 = load ptr, ptr %self, align 8, !dbg !1826
  store ptr %3, ptr %s, align 8, !dbg !1826
    #dbg_declare(ptr %result, !1827, !DIExpression(), !1828)
  %4 = load ptr, ptr %s, align 8, !dbg !1828
  %5 = ptrtoint ptr %4 to i64, !dbg !1828
  %6 = urem i64 %5, 8, !dbg !1828
  %7 = icmp ne i64 %6, 0, !dbg !1828
  %8 = call i1 @llvm.expect.i1(i1 %7, i1 false), !dbg !1828
  br i1 %8, label %panic3, label %checkok9, !dbg !1828

checkok9:                                         ; preds = %checkok
  %9 = load i64, ptr %4, align 8, !dbg !1828
  %10 = load ptr, ptr %s, align 8, !dbg !1828
  %ptradd10 = getelementptr inbounds i8, ptr %10, i64 8, !dbg !1828
  %11 = ptrtoint ptr %ptradd10 to i64, !dbg !1828
  %12 = urem i64 %11, 8, !dbg !1828
  %13 = icmp ne i64 %12, 0, !dbg !1828
  %14 = call i1 @llvm.expect.i1(i1 %13, i1 false), !dbg !1828
  br i1 %14, label %panic11, label %checkok21, !dbg !1828

checkok21:                                        ; preds = %checkok9
  %15 = load i64, ptr %ptradd10, align 8, !dbg !1828
  %add = add i64 %9, %15, !dbg !1828
  %16 = load ptr, ptr %s, align 8, !dbg !1828
  %ptradd22 = getelementptr inbounds i8, ptr %16, i64 24, !dbg !1828
  %17 = ptrtoint ptr %ptradd22 to i64, !dbg !1828
  %18 = urem i64 %17, 8, !dbg !1828
  %19 = icmp ne i64 %18, 0, !dbg !1828
  %20 = call i1 @llvm.expect.i1(i1 %19, i1 false), !dbg !1828
  br i1 %20, label %panic23, label %checkok33, !dbg !1828

checkok33:                                        ; preds = %checkok21
  %21 = load i64, ptr %ptradd22, align 8, !dbg !1828
  %add34 = add i64 %add, %21, !dbg !1828
  store i64 %add34, ptr %result, align 8, !dbg !1828
  %22 = load ptr, ptr %s, align 8, !dbg !1829
  %ptradd35 = getelementptr inbounds i8, ptr %22, i64 8, !dbg !1829
  %23 = ptrtoint ptr %ptradd35 to i64, !dbg !1829
  %24 = urem i64 %23, 8, !dbg !1829
  %25 = icmp ne i64 %24, 0, !dbg !1829
  %26 = call i1 @llvm.expect.i1(i1 %25, i1 false), !dbg !1829
  br i1 %26, label %panic36, label %checkok46, !dbg !1829

checkok46:                                        ; preds = %checkok33
  %27 = load i64, ptr %ptradd35, align 8, !dbg !1829
  %28 = load ptr, ptr %s, align 8, !dbg !1829
  %ptradd47 = getelementptr inbounds i8, ptr %28, i64 8, !dbg !1829
  %29 = ptrtoint ptr %ptradd47 to i64, !dbg !1829
  %30 = urem i64 %29, 8, !dbg !1829
  %31 = icmp ne i64 %30, 0, !dbg !1829
  %32 = call i1 @llvm.expect.i1(i1 %31, i1 false), !dbg !1829
  br i1 %32, label %panic48, label %checkok58, !dbg !1829

checkok58:                                        ; preds = %checkok46
  %33 = load i64, ptr %ptradd47, align 8, !dbg !1829
  %lshr = lshr i64 %33, 11, !dbg !1829
  %34 = freeze i64 %lshr, !dbg !1829
  %xor = xor i64 %27, %34, !dbg !1829
  %35 = load ptr, ptr %s, align 8, !dbg !1829
  %36 = ptrtoint ptr %35 to i64, !dbg !1829
  %37 = urem i64 %36, 8, !dbg !1829
  %38 = icmp ne i64 %37, 0, !dbg !1829
  %39 = call i1 @llvm.expect.i1(i1 %38, i1 false), !dbg !1829
  br i1 %39, label %panic59, label %checkok69, !dbg !1829

checkok69:                                        ; preds = %checkok58
  store i64 %xor, ptr %35, align 8, !dbg !1829
  %40 = load ptr, ptr %s, align 8, !dbg !1830
  %ptradd70 = getelementptr inbounds i8, ptr %40, i64 16, !dbg !1830
  %41 = ptrtoint ptr %ptradd70 to i64, !dbg !1830
  %42 = urem i64 %41, 8, !dbg !1830
  %43 = icmp ne i64 %42, 0, !dbg !1830
  %44 = call i1 @llvm.expect.i1(i1 %43, i1 false), !dbg !1830
  br i1 %44, label %panic71, label %checkok81, !dbg !1830

checkok81:                                        ; preds = %checkok69
  %45 = load i64, ptr %ptradd70, align 8, !dbg !1830
  %46 = load ptr, ptr %s, align 8, !dbg !1830
  %ptradd82 = getelementptr inbounds i8, ptr %46, i64 16, !dbg !1830
  %47 = ptrtoint ptr %ptradd82 to i64, !dbg !1830
  %48 = urem i64 %47, 8, !dbg !1830
  %49 = icmp ne i64 %48, 0, !dbg !1830
  %50 = call i1 @llvm.expect.i1(i1 %49, i1 false), !dbg !1830
  br i1 %50, label %panic83, label %checkok93, !dbg !1830

checkok93:                                        ; preds = %checkok81
  %51 = load i64, ptr %ptradd82, align 8, !dbg !1830
  %shl = shl i64 %51, 3, !dbg !1830
  %52 = freeze i64 %shl, !dbg !1830
  %add94 = add i64 %45, %52, !dbg !1830
  %53 = load ptr, ptr %s, align 8, !dbg !1830
  %ptradd95 = getelementptr inbounds i8, ptr %53, i64 8, !dbg !1830
  %54 = ptrtoint ptr %ptradd95 to i64, !dbg !1830
  %55 = urem i64 %54, 8, !dbg !1830
  %56 = icmp ne i64 %55, 0, !dbg !1830
  %57 = call i1 @llvm.expect.i1(i1 %56, i1 false), !dbg !1830
  br i1 %57, label %panic96, label %checkok106, !dbg !1830

checkok106:                                       ; preds = %checkok93
  store i64 %add94, ptr %ptradd95, align 8, !dbg !1830
  %58 = load ptr, ptr %s, align 8, !dbg !1831
  %ptradd107 = getelementptr inbounds i8, ptr %58, i64 16, !dbg !1831
  %59 = ptrtoint ptr %ptradd107 to i64, !dbg !1831
  %60 = urem i64 %59, 8, !dbg !1831
  %61 = icmp ne i64 %60, 0, !dbg !1831
  %62 = call i1 @llvm.expect.i1(i1 %61, i1 false), !dbg !1831
  br i1 %62, label %panic108, label %checkok118, !dbg !1831

checkok118:                                       ; preds = %checkok106
  %63 = load i64, ptr %ptradd107, align 8
  store i64 %63, ptr %self119, align 8
  store i64 40, ptr %shift, align 8
  %64 = load i64, ptr %self119, align 8, !dbg !1832
  %65 = load i64, ptr %self119, align 8, !dbg !1832
  %66 = load i64, ptr %shift, align 8, !dbg !1832
  %67 = call i64 @llvm.fshr.i64(i64 %64, i64 %65, i64 %66), !dbg !1832
  %68 = load i64, ptr %result, align 8, !dbg !1831
  %add120 = add i64 %67, %68, !dbg !1831
  %69 = load ptr, ptr %s, align 8, !dbg !1831
  %ptradd121 = getelementptr inbounds i8, ptr %69, i64 16, !dbg !1831
  %70 = ptrtoint ptr %ptradd121 to i64, !dbg !1831
  %71 = urem i64 %70, 8, !dbg !1831
  %72 = icmp ne i64 %71, 0, !dbg !1831
  %73 = call i1 @llvm.expect.i1(i1 %72, i1 false), !dbg !1831
  br i1 %73, label %panic122, label %checkok132, !dbg !1831

checkok132:                                       ; preds = %checkok118
  store i64 %add120, ptr %ptradd121, align 8, !dbg !1831
  %74 = load ptr, ptr %s, align 8, !dbg !1834
  %ptradd133 = getelementptr inbounds i8, ptr %74, i64 24, !dbg !1834
  %75 = ptrtoint ptr %ptradd133 to i64, !dbg !1834
  %76 = urem i64 %75, 8, !dbg !1834
  %77 = icmp ne i64 %76, 0, !dbg !1834
  %78 = call i1 @llvm.expect.i1(i1 %77, i1 false), !dbg !1834
  br i1 %78, label %panic134, label %checkok144, !dbg !1834

checkok144:                                       ; preds = %checkok132
  %79 = load i64, ptr %ptradd133, align 8, !dbg !1834
  %add145 = add i64 %79, -7046029254386353131, !dbg !1834
  store i64 %add145, ptr %ptradd133, align 8, !dbg !1834
  %80 = load i64, ptr %result, align 8, !dbg !1835
  ret i64 %80, !dbg !1835

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.110, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.10, i64 9 }, ptr %indirectarg2, align 8
  %81 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %81(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 50) #5, !dbg !1824
  unreachable, !dbg !1824

panic3:                                           ; preds = %checkok
  store i64 8, ptr %taddr, align 8
  %82 = insertvalue %any undef, ptr %taddr, 0
  %83 = insertvalue %any %82, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %6, ptr %taddr4, align 8
  %84 = insertvalue %any undef, ptr %taddr4, 0
  %85 = insertvalue %any %84, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.file.110, i64 11 }, ptr %indirectarg6, align 8
  store %"char[]" { ptr @.func.10, i64 9 }, ptr %indirectarg7, align 8
  store %any %83, ptr %varargslots, align 16
  %ptradd = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %85, ptr %ptradd, align 16
  %86 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %86, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg8, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, ptr align 8 %indirectarg7, i32 53, ptr align 8 %indirectarg8) #5, !dbg !1828
  unreachable, !dbg !1828

panic11:                                          ; preds = %checkok9
  store i64 8, ptr %taddr12, align 8
  %87 = insertvalue %any undef, ptr %taddr12, 0
  %88 = insertvalue %any %87, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %12, ptr %taddr13, align 8
  %89 = insertvalue %any undef, ptr %taddr13, 0
  %90 = insertvalue %any %89, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg14, align 8
  store %"char[]" { ptr @.file.110, i64 11 }, ptr %indirectarg15, align 8
  store %"char[]" { ptr @.func.10, i64 9 }, ptr %indirectarg16, align 8
  store %any %88, ptr %varargslots17, align 16
  %ptradd18 = getelementptr inbounds i8, ptr %varargslots17, i64 16
  store %any %90, ptr %ptradd18, align 16
  %91 = insertvalue %"any[]" undef, ptr %varargslots17, 0
  %"$$temp19" = insertvalue %"any[]" %91, i64 2, 1
  store %"any[]" %"$$temp19", ptr %indirectarg20, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg14, ptr align 8 %indirectarg15, ptr align 8 %indirectarg16, i32 53, ptr align 8 %indirectarg20) #5, !dbg !1828
  unreachable, !dbg !1828

panic23:                                          ; preds = %checkok21
  store i64 8, ptr %taddr24, align 8
  %92 = insertvalue %any undef, ptr %taddr24, 0
  %93 = insertvalue %any %92, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %18, ptr %taddr25, align 8
  %94 = insertvalue %any undef, ptr %taddr25, 0
  %95 = insertvalue %any %94, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg26, align 8
  store %"char[]" { ptr @.file.110, i64 11 }, ptr %indirectarg27, align 8
  store %"char[]" { ptr @.func.10, i64 9 }, ptr %indirectarg28, align 8
  store %any %93, ptr %varargslots29, align 16
  %ptradd30 = getelementptr inbounds i8, ptr %varargslots29, i64 16
  store %any %95, ptr %ptradd30, align 16
  %96 = insertvalue %"any[]" undef, ptr %varargslots29, 0
  %"$$temp31" = insertvalue %"any[]" %96, i64 2, 1
  store %"any[]" %"$$temp31", ptr %indirectarg32, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg26, ptr align 8 %indirectarg27, ptr align 8 %indirectarg28, i32 53, ptr align 8 %indirectarg32) #5, !dbg !1828
  unreachable, !dbg !1828

panic36:                                          ; preds = %checkok33
  store i64 8, ptr %taddr37, align 8
  %97 = insertvalue %any undef, ptr %taddr37, 0
  %98 = insertvalue %any %97, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %24, ptr %taddr38, align 8
  %99 = insertvalue %any undef, ptr %taddr38, 0
  %100 = insertvalue %any %99, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg39, align 8
  store %"char[]" { ptr @.file.110, i64 11 }, ptr %indirectarg40, align 8
  store %"char[]" { ptr @.func.10, i64 9 }, ptr %indirectarg41, align 8
  store %any %98, ptr %varargslots42, align 16
  %ptradd43 = getelementptr inbounds i8, ptr %varargslots42, i64 16
  store %any %100, ptr %ptradd43, align 16
  %101 = insertvalue %"any[]" undef, ptr %varargslots42, 0
  %"$$temp44" = insertvalue %"any[]" %101, i64 2, 1
  store %"any[]" %"$$temp44", ptr %indirectarg45, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg39, ptr align 8 %indirectarg40, ptr align 8 %indirectarg41, i32 54, ptr align 8 %indirectarg45) #5, !dbg !1829
  unreachable, !dbg !1829

panic48:                                          ; preds = %checkok46
  store i64 8, ptr %taddr49, align 8
  %102 = insertvalue %any undef, ptr %taddr49, 0
  %103 = insertvalue %any %102, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %30, ptr %taddr50, align 8
  %104 = insertvalue %any undef, ptr %taddr50, 0
  %105 = insertvalue %any %104, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg51, align 8
  store %"char[]" { ptr @.file.110, i64 11 }, ptr %indirectarg52, align 8
  store %"char[]" { ptr @.func.10, i64 9 }, ptr %indirectarg53, align 8
  store %any %103, ptr %varargslots54, align 16
  %ptradd55 = getelementptr inbounds i8, ptr %varargslots54, i64 16
  store %any %105, ptr %ptradd55, align 16
  %106 = insertvalue %"any[]" undef, ptr %varargslots54, 0
  %"$$temp56" = insertvalue %"any[]" %106, i64 2, 1
  store %"any[]" %"$$temp56", ptr %indirectarg57, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg51, ptr align 8 %indirectarg52, ptr align 8 %indirectarg53, i32 54, ptr align 8 %indirectarg57) #5, !dbg !1829
  unreachable, !dbg !1829

panic59:                                          ; preds = %checkok58
  store i64 8, ptr %taddr60, align 8
  %107 = insertvalue %any undef, ptr %taddr60, 0
  %108 = insertvalue %any %107, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %37, ptr %taddr61, align 8
  %109 = insertvalue %any undef, ptr %taddr61, 0
  %110 = insertvalue %any %109, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg62, align 8
  store %"char[]" { ptr @.file.110, i64 11 }, ptr %indirectarg63, align 8
  store %"char[]" { ptr @.func.10, i64 9 }, ptr %indirectarg64, align 8
  store %any %108, ptr %varargslots65, align 16
  %ptradd66 = getelementptr inbounds i8, ptr %varargslots65, i64 16
  store %any %110, ptr %ptradd66, align 16
  %111 = insertvalue %"any[]" undef, ptr %varargslots65, 0
  %"$$temp67" = insertvalue %"any[]" %111, i64 2, 1
  store %"any[]" %"$$temp67", ptr %indirectarg68, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg62, ptr align 8 %indirectarg63, ptr align 8 %indirectarg64, i32 54, ptr align 8 %indirectarg68) #5, !dbg !1829
  unreachable, !dbg !1829

panic71:                                          ; preds = %checkok69
  store i64 8, ptr %taddr72, align 8
  %112 = insertvalue %any undef, ptr %taddr72, 0
  %113 = insertvalue %any %112, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %42, ptr %taddr73, align 8
  %114 = insertvalue %any undef, ptr %taddr73, 0
  %115 = insertvalue %any %114, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg74, align 8
  store %"char[]" { ptr @.file.110, i64 11 }, ptr %indirectarg75, align 8
  store %"char[]" { ptr @.func.10, i64 9 }, ptr %indirectarg76, align 8
  store %any %113, ptr %varargslots77, align 16
  %ptradd78 = getelementptr inbounds i8, ptr %varargslots77, i64 16
  store %any %115, ptr %ptradd78, align 16
  %116 = insertvalue %"any[]" undef, ptr %varargslots77, 0
  %"$$temp79" = insertvalue %"any[]" %116, i64 2, 1
  store %"any[]" %"$$temp79", ptr %indirectarg80, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg74, ptr align 8 %indirectarg75, ptr align 8 %indirectarg76, i32 55, ptr align 8 %indirectarg80) #5, !dbg !1830
  unreachable, !dbg !1830

panic83:                                          ; preds = %checkok81
  store i64 8, ptr %taddr84, align 8
  %117 = insertvalue %any undef, ptr %taddr84, 0
  %118 = insertvalue %any %117, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %48, ptr %taddr85, align 8
  %119 = insertvalue %any undef, ptr %taddr85, 0
  %120 = insertvalue %any %119, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg86, align 8
  store %"char[]" { ptr @.file.110, i64 11 }, ptr %indirectarg87, align 8
  store %"char[]" { ptr @.func.10, i64 9 }, ptr %indirectarg88, align 8
  store %any %118, ptr %varargslots89, align 16
  %ptradd90 = getelementptr inbounds i8, ptr %varargslots89, i64 16
  store %any %120, ptr %ptradd90, align 16
  %121 = insertvalue %"any[]" undef, ptr %varargslots89, 0
  %"$$temp91" = insertvalue %"any[]" %121, i64 2, 1
  store %"any[]" %"$$temp91", ptr %indirectarg92, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg86, ptr align 8 %indirectarg87, ptr align 8 %indirectarg88, i32 55, ptr align 8 %indirectarg92) #5, !dbg !1830
  unreachable, !dbg !1830

panic96:                                          ; preds = %checkok93
  store i64 8, ptr %taddr97, align 8
  %122 = insertvalue %any undef, ptr %taddr97, 0
  %123 = insertvalue %any %122, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %55, ptr %taddr98, align 8
  %124 = insertvalue %any undef, ptr %taddr98, 0
  %125 = insertvalue %any %124, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg99, align 8
  store %"char[]" { ptr @.file.110, i64 11 }, ptr %indirectarg100, align 8
  store %"char[]" { ptr @.func.10, i64 9 }, ptr %indirectarg101, align 8
  store %any %123, ptr %varargslots102, align 16
  %ptradd103 = getelementptr inbounds i8, ptr %varargslots102, i64 16
  store %any %125, ptr %ptradd103, align 16
  %126 = insertvalue %"any[]" undef, ptr %varargslots102, 0
  %"$$temp104" = insertvalue %"any[]" %126, i64 2, 1
  store %"any[]" %"$$temp104", ptr %indirectarg105, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg99, ptr align 8 %indirectarg100, ptr align 8 %indirectarg101, i32 55, ptr align 8 %indirectarg105) #5, !dbg !1830
  unreachable, !dbg !1830

panic108:                                         ; preds = %checkok106
  store i64 8, ptr %taddr109, align 8
  %127 = insertvalue %any undef, ptr %taddr109, 0
  %128 = insertvalue %any %127, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %60, ptr %taddr110, align 8
  %129 = insertvalue %any undef, ptr %taddr110, 0
  %130 = insertvalue %any %129, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg111, align 8
  store %"char[]" { ptr @.file.110, i64 11 }, ptr %indirectarg112, align 8
  store %"char[]" { ptr @.func.10, i64 9 }, ptr %indirectarg113, align 8
  store %any %128, ptr %varargslots114, align 16
  %ptradd115 = getelementptr inbounds i8, ptr %varargslots114, i64 16
  store %any %130, ptr %ptradd115, align 16
  %131 = insertvalue %"any[]" undef, ptr %varargslots114, 0
  %"$$temp116" = insertvalue %"any[]" %131, i64 2, 1
  store %"any[]" %"$$temp116", ptr %indirectarg117, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg111, ptr align 8 %indirectarg112, ptr align 8 %indirectarg113, i32 56, ptr align 8 %indirectarg117) #5, !dbg !1831
  unreachable, !dbg !1831

panic122:                                         ; preds = %checkok118
  store i64 8, ptr %taddr123, align 8
  %132 = insertvalue %any undef, ptr %taddr123, 0
  %133 = insertvalue %any %132, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %71, ptr %taddr124, align 8
  %134 = insertvalue %any undef, ptr %taddr124, 0
  %135 = insertvalue %any %134, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg125, align 8
  store %"char[]" { ptr @.file.110, i64 11 }, ptr %indirectarg126, align 8
  store %"char[]" { ptr @.func.10, i64 9 }, ptr %indirectarg127, align 8
  store %any %133, ptr %varargslots128, align 16
  %ptradd129 = getelementptr inbounds i8, ptr %varargslots128, i64 16
  store %any %135, ptr %ptradd129, align 16
  %136 = insertvalue %"any[]" undef, ptr %varargslots128, 0
  %"$$temp130" = insertvalue %"any[]" %136, i64 2, 1
  store %"any[]" %"$$temp130", ptr %indirectarg131, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg125, ptr align 8 %indirectarg126, ptr align 8 %indirectarg127, i32 56, ptr align 8 %indirectarg131) #5, !dbg !1831
  unreachable, !dbg !1831

panic134:                                         ; preds = %checkok132
  store i64 8, ptr %taddr135, align 8
  %137 = insertvalue %any undef, ptr %taddr135, 0
  %138 = insertvalue %any %137, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %76, ptr %taddr136, align 8
  %139 = insertvalue %any undef, ptr %taddr136, 0
  %140 = insertvalue %any %139, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg137, align 8
  store %"char[]" { ptr @.file.110, i64 11 }, ptr %indirectarg138, align 8
  store %"char[]" { ptr @.func.10, i64 9 }, ptr %indirectarg139, align 8
  store %any %138, ptr %varargslots140, align 16
  %ptradd141 = getelementptr inbounds i8, ptr %varargslots140, i64 16
  store %any %140, ptr %ptradd141, align 16
  %141 = insertvalue %"any[]" undef, ptr %varargslots140, 0
  %"$$temp142" = insertvalue %"any[]" %141, i64 2, 1
  store %"any[]" %"$$temp142", ptr %indirectarg143, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg137, ptr align 8 %indirectarg138, ptr align 8 %indirectarg139, i32 57, ptr align 8 %indirectarg143) #5, !dbg !1834
  unreachable, !dbg !1834
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.math.random.Sfc64Random.next_bytes(ptr %0, ptr align 8 %1) #0 comdat !dbg !1836 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %bytes = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i64, align 8
  %taddr = alloca ptr, align 8
  %taddr9 = alloca i64, align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg13 = alloca %"any[]", align 8
  %taddr17 = alloca i64, align 8
  %taddr18 = alloca i64, align 8
  %indirectarg19 = alloca %"char[]", align 8
  %indirectarg20 = alloca %"char[]", align 8
  %indirectarg21 = alloca %"char[]", align 8
  %varargslots22 = alloca [2 x %any], align 16
  %indirectarg25 = alloca %"any[]", align 8
  %taddr29 = alloca i64, align 8
  %taddr30 = alloca i64, align 8
  %indirectarg31 = alloca %"char[]", align 8
  %indirectarg32 = alloca %"char[]", align 8
  %indirectarg33 = alloca %"char[]", align 8
  %varargslots34 = alloca [2 x %any], align 16
  %indirectarg37 = alloca %"any[]", align 8
  %taddr39 = alloca ptr, align 8
  %taddr42 = alloca i64, align 8
  %taddr43 = alloca i64, align 8
  %indirectarg44 = alloca %"char[]", align 8
  %indirectarg45 = alloca %"char[]", align 8
  %indirectarg46 = alloca %"char[]", align 8
  %varargslots47 = alloca [2 x %any], align 16
  %indirectarg50 = alloca %"any[]", align 8
  %taddr54 = alloca i64, align 8
  %taddr55 = alloca i64, align 8
  %indirectarg56 = alloca %"char[]", align 8
  %indirectarg57 = alloca %"char[]", align 8
  %indirectarg58 = alloca %"char[]", align 8
  %varargslots59 = alloca [2 x %any], align 16
  %indirectarg62 = alloca %"any[]", align 8
  %taddr66 = alloca i64, align 8
  %taddr67 = alloca i64, align 8
  %indirectarg68 = alloca %"char[]", align 8
  %indirectarg69 = alloca %"char[]", align 8
  %indirectarg70 = alloca %"char[]", align 8
  %varargslots71 = alloca [2 x %any], align 16
  %indirectarg74 = alloca %"any[]", align 8
  %taddr79 = alloca i64, align 8
  %taddr80 = alloca i64, align 8
  %indirectarg81 = alloca %"char[]", align 8
  %indirectarg82 = alloca %"char[]", align 8
  %indirectarg83 = alloca %"char[]", align 8
  %varargslots84 = alloca [2 x %any], align 16
  %indirectarg87 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg91 = alloca %"char[]", align 8
  %indirectarg92 = alloca %"char[]", align 8
  %indirectarg93 = alloca %"char[]", align 8
  %indirectarg94 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !1837
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !1837
  br i1 %3, label %panic, label %checkok, !dbg !1837

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1838, !DIExpression(), !1837)
    #dbg_declare(ptr %1, !1839, !DIExpression(), !1837)
  %ptradd = getelementptr inbounds i8, ptr %1, i64 8, !dbg !1840
  %4 = load i64, ptr %ptradd, align 8, !dbg !1840
  %lt = icmp ult i64 0, %4, !dbg !1840
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !1840

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.13, i64 34 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.file.110, i64 11 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg5, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, i32 62) #5, !dbg !1840
  unreachable, !dbg !1840

assert_ok:                                        ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes, ptr align 8 %1, i32 16, i1 false)
    #dbg_declare(ptr %len, !1842, !DIExpression(), !1844)
  %ptradd6 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !1844
  %6 = load i64, ptr %ptradd6, align 8, !dbg !1844
  store i64 %6, ptr %len, align 8, !dbg !1844
  br label %loop.cond, !dbg !1845

loop.cond:                                        ; preds = %checkok88, %assert_ok
  %7 = load i64, ptr %len, align 8, !dbg !1846
  %lt7 = icmp ult i64 0, %7, !dbg !1846
  br i1 %lt7, label %loop.body, label %loop.exit, !dbg !1846

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %value, !1848, !DIExpression(), !1850)
  %8 = load ptr, ptr %self, align 8, !dbg !1851
  %9 = call i64 @std.math.random.Sfc64Random.next_long(ptr %8), !dbg !1850
  store i64 %9, ptr %value, align 8, !dbg !1850
  %10 = load i64, ptr %len, align 8, !dbg !1852
  %le = icmp ule i64 %10, 8, !dbg !1852
  br i1 %le, label %if.then, label %if.exit, !dbg !1852

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %11 = load ptr, ptr %taddr, align 8
  %12 = load i64, ptr %len, align 8, !dbg !1853
  %add = add i64 0, %12, !dbg !1853
  %gt = icmp ugt i64 0, %add, !dbg !1853
  %sub = sub i64 %add, 0, !dbg !1853
  %13 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !1853
  br i1 %13, label %panic8, label %checkok14, !dbg !1853

checkok14:                                        ; preds = %if.then
  %size = sub i64 %add, 0, !dbg !1853
  %14 = insertvalue %"char[]" undef, ptr %11, 0, !dbg !1853
  %15 = insertvalue %"char[]" %14, i64 %size, 1, !dbg !1853
  %16 = load %"char[]", ptr %bytes, align 8, !dbg !1853
  %17 = extractvalue %"char[]" %16, 0, !dbg !1853
  %18 = extractvalue %"char[]" %16, 1, !dbg !1853
  %gt15 = icmp ugt i64 0, %18, !dbg !1853
  %19 = call i1 @llvm.expect.i1(i1 %gt15, i1 false), !dbg !1853
  br i1 %19, label %panic16, label %checkok26, !dbg !1853

checkok26:                                        ; preds = %checkok14
  %size27 = sub i64 %18, 0, !dbg !1853
  %20 = insertvalue %"char[]" undef, ptr %17, 0, !dbg !1853
  %21 = insertvalue %"char[]" %20, i64 %size27, 1, !dbg !1853
  %22 = extractvalue %"char[]" %21, 0, !dbg !1853
  %23 = extractvalue %"char[]" %15, 0, !dbg !1853
  %24 = extractvalue %"char[]" %15, 1, !dbg !1853
  %25 = extractvalue %"char[]" %21, 1, !dbg !1853
  %neq = icmp ne i64 %25, %24, !dbg !1853
  %26 = call i1 @llvm.expect.i1(i1 %neq, i1 false), !dbg !1853
  br i1 %26, label %panic28, label %checkok38, !dbg !1853

checkok38:                                        ; preds = %checkok26
  %27 = mul i64 %24, 1, !dbg !1853
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %22, ptr align 1 %23, i64 %27, i1 false), !dbg !1853
  br label %expr_block.exit, !dbg !1855

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr39, align 8
  %28 = load ptr, ptr %taddr39, align 8
  %29 = insertvalue %"char[]" undef, ptr %28, 0
  %30 = insertvalue %"char[]" %29, i64 8, 1
  %31 = load %"char[]", ptr %bytes, align 8, !dbg !1856
  %32 = extractvalue %"char[]" %31, 0, !dbg !1856
  %33 = extractvalue %"char[]" %31, 1, !dbg !1856
  %gt40 = icmp sgt i64 0, %33, !dbg !1856
  %34 = call i1 @llvm.expect.i1(i1 %gt40, i1 false), !dbg !1856
  br i1 %34, label %panic41, label %checkok51, !dbg !1856

checkok51:                                        ; preds = %if.exit
  %lt52 = icmp slt i64 %33, 8, !dbg !1856
  %35 = call i1 @llvm.expect.i1(i1 %lt52, i1 false), !dbg !1856
  br i1 %35, label %panic53, label %checkok63, !dbg !1856

checkok63:                                        ; preds = %checkok51
  %36 = insertvalue %"char[]" undef, ptr %32, 0, !dbg !1856
  %37 = insertvalue %"char[]" %36, i64 8, 1, !dbg !1856
  %38 = extractvalue %"char[]" %37, 0, !dbg !1856
  %39 = extractvalue %"char[]" %30, 0, !dbg !1856
  %40 = extractvalue %"char[]" %30, 1, !dbg !1856
  %41 = extractvalue %"char[]" %37, 1, !dbg !1856
  %neq64 = icmp ne i64 %41, %40, !dbg !1856
  %42 = call i1 @llvm.expect.i1(i1 %neq64, i1 false), !dbg !1856
  br i1 %42, label %panic65, label %checkok75, !dbg !1856

checkok75:                                        ; preds = %checkok63
  %43 = mul i64 %40, 1, !dbg !1856
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %38, ptr align 1 %39, i64 %43, i1 false), !dbg !1856
  %44 = load i64, ptr %len, align 8, !dbg !1857
  %sub76 = sub i64 %44, 8, !dbg !1857
  store i64 %sub76, ptr %len, align 8, !dbg !1857
  %45 = load %"char[]", ptr %bytes, align 8, !dbg !1858
  %46 = extractvalue %"char[]" %45, 0, !dbg !1858
  %47 = extractvalue %"char[]" %45, 1, !dbg !1858
  %gt77 = icmp ugt i64 8, %47, !dbg !1858
  %48 = call i1 @llvm.expect.i1(i1 %gt77, i1 false), !dbg !1858
  br i1 %48, label %panic78, label %checkok88, !dbg !1858

checkok88:                                        ; preds = %checkok75
  %size89 = sub i64 %47, 8, !dbg !1858
  %ptradd90 = getelementptr inbounds i8, ptr %46, i64 8, !dbg !1858
  %49 = insertvalue %"char[]" undef, ptr %ptradd90, 0, !dbg !1858
  %50 = insertvalue %"char[]" %49, i64 %size89, 1, !dbg !1858
  store %"char[]" %50, ptr %bytes, align 8, !dbg !1858
  br label %loop.cond, !dbg !1858

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.114, i64 30 }, ptr %string, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg91, ptr align 8 %string, i32 16, i1 false)
  store %"char[]" { ptr @.str.115, i64 11 }, ptr %indirectarg92, align 8
  store %"char[]" { ptr @.str.116, i64 22 }, ptr %indirectarg93, align 8
  store %"any[]" zeroinitializer, ptr %indirectarg94, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg91, ptr align 8 %indirectarg92, ptr align 8 %indirectarg93, i32 64, ptr align 8 %indirectarg94), !dbg !1859
  unreachable, !dbg !1859

expr_block.exit:                                  ; preds = %checkok38
  ret void, !dbg !1859

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.110, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg2, align 8
  %51 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %51(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 64) #5, !dbg !1837
  unreachable, !dbg !1837

panic8:                                           ; preds = %if.then
  store i64 %sub, ptr %taddr9, align 8
  %52 = insertvalue %any undef, ptr %taddr9, 0
  %53 = insertvalue %any %52, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.14, i64 43 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg12, align 8
  store %any %53, ptr %varargslots, align 16
  %54 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %54, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg13, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, i32 153, ptr align 8 %indirectarg13) #5, !dbg !1853
  unreachable, !dbg !1853

panic16:                                          ; preds = %checkok14
  store i64 %18, ptr %taddr17, align 8
  %55 = insertvalue %any undef, ptr %taddr17, 0
  %56 = insertvalue %any %55, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr18, align 8
  %57 = insertvalue %any undef, ptr %taddr18, 0
  %58 = insertvalue %any %57, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.16, i64 61 }, ptr %indirectarg19, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg20, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg21, align 8
  store %any %56, ptr %varargslots22, align 16
  %ptradd23 = getelementptr inbounds i8, ptr %varargslots22, i64 16
  store %any %58, ptr %ptradd23, align 16
  %59 = insertvalue %"any[]" undef, ptr %varargslots22, 0
  %"$$temp24" = insertvalue %"any[]" %59, i64 2, 1
  store %"any[]" %"$$temp24", ptr %indirectarg25, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg19, ptr align 8 %indirectarg20, ptr align 8 %indirectarg21, i32 153, ptr align 8 %indirectarg25) #5, !dbg !1853
  unreachable, !dbg !1853

panic28:                                          ; preds = %checkok26
  store i64 %25, ptr %taddr29, align 8
  %60 = insertvalue %any undef, ptr %taddr29, 0
  %61 = insertvalue %any %60, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %24, ptr %taddr30, align 8
  %62 = insertvalue %any undef, ptr %taddr30, 0
  %63 = insertvalue %any %62, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 38 }, ptr %indirectarg31, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg32, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg33, align 8
  store %any %61, ptr %varargslots34, align 16
  %ptradd35 = getelementptr inbounds i8, ptr %varargslots34, i64 16
  store %any %63, ptr %ptradd35, align 16
  %64 = insertvalue %"any[]" undef, ptr %varargslots34, 0
  %"$$temp36" = insertvalue %"any[]" %64, i64 2, 1
  store %"any[]" %"$$temp36", ptr %indirectarg37, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg31, ptr align 8 %indirectarg32, ptr align 8 %indirectarg33, i32 153, ptr align 8 %indirectarg37) #5, !dbg !1853
  unreachable, !dbg !1853

panic41:                                          ; preds = %if.exit
  store i64 %33, ptr %taddr42, align 8
  %65 = insertvalue %any undef, ptr %taddr42, 0
  %66 = insertvalue %any %65, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr43, align 8
  %67 = insertvalue %any undef, ptr %taddr43, 0
  %68 = insertvalue %any %67, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.16, i64 61 }, ptr %indirectarg44, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg45, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg46, align 8
  store %any %66, ptr %varargslots47, align 16
  %ptradd48 = getelementptr inbounds i8, ptr %varargslots47, i64 16
  store %any %68, ptr %ptradd48, align 16
  %69 = insertvalue %"any[]" undef, ptr %varargslots47, 0
  %"$$temp49" = insertvalue %"any[]" %69, i64 2, 1
  store %"any[]" %"$$temp49", ptr %indirectarg50, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg44, ptr align 8 %indirectarg45, ptr align 8 %indirectarg46, i32 156, ptr align 8 %indirectarg50) #5, !dbg !1856
  unreachable, !dbg !1856

panic53:                                          ; preds = %checkok51
  store i64 7, ptr %taddr54, align 8
  %70 = insertvalue %any undef, ptr %taddr54, 0
  %71 = insertvalue %any %70, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %33, ptr %taddr55, align 8
  %72 = insertvalue %any undef, ptr %taddr55, 0
  %73 = insertvalue %any %72, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.18, i64 60 }, ptr %indirectarg56, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg57, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg58, align 8
  store %any %71, ptr %varargslots59, align 16
  %ptradd60 = getelementptr inbounds i8, ptr %varargslots59, i64 16
  store %any %73, ptr %ptradd60, align 16
  %74 = insertvalue %"any[]" undef, ptr %varargslots59, 0
  %"$$temp61" = insertvalue %"any[]" %74, i64 2, 1
  store %"any[]" %"$$temp61", ptr %indirectarg62, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg56, ptr align 8 %indirectarg57, ptr align 8 %indirectarg58, i32 156, ptr align 8 %indirectarg62) #5, !dbg !1856
  unreachable, !dbg !1856

panic65:                                          ; preds = %checkok63
  store i64 %41, ptr %taddr66, align 8
  %75 = insertvalue %any undef, ptr %taddr66, 0
  %76 = insertvalue %any %75, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %40, ptr %taddr67, align 8
  %77 = insertvalue %any undef, ptr %taddr67, 0
  %78 = insertvalue %any %77, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 38 }, ptr %indirectarg68, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg69, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg70, align 8
  store %any %76, ptr %varargslots71, align 16
  %ptradd72 = getelementptr inbounds i8, ptr %varargslots71, i64 16
  store %any %78, ptr %ptradd72, align 16
  %79 = insertvalue %"any[]" undef, ptr %varargslots71, 0
  %"$$temp73" = insertvalue %"any[]" %79, i64 2, 1
  store %"any[]" %"$$temp73", ptr %indirectarg74, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg68, ptr align 8 %indirectarg69, ptr align 8 %indirectarg70, i32 156, ptr align 8 %indirectarg74) #5, !dbg !1856
  unreachable, !dbg !1856

panic78:                                          ; preds = %checkok75
  store i64 %47, ptr %taddr79, align 8
  %80 = insertvalue %any undef, ptr %taddr79, 0
  %81 = insertvalue %any %80, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 8, ptr %taddr80, align 8
  %82 = insertvalue %any undef, ptr %taddr80, 0
  %83 = insertvalue %any %82, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.16, i64 61 }, ptr %indirectarg81, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg82, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg83, align 8
  store %any %81, ptr %varargslots84, align 16
  %ptradd85 = getelementptr inbounds i8, ptr %varargslots84, i64 16
  store %any %83, ptr %ptradd85, align 16
  %84 = insertvalue %"any[]" undef, ptr %varargslots84, 0
  %"$$temp86" = insertvalue %"any[]" %84, i64 2, 1
  store %"any[]" %"$$temp86", ptr %indirectarg87, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg81, ptr align 8 %indirectarg82, ptr align 8 %indirectarg83, i32 158, ptr align 8 %indirectarg87) #5, !dbg !1858
  unreachable, !dbg !1858
}

; Function Attrs: nounwind ssp uwtable
define weak_odr <2 x i64> @std.math.random.Sfc64Random.next_int128(ptr %0) #0 comdat !dbg !1862 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %taddr = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !1865
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1865
  br i1 %2, label %panic, label %checkok, !dbg !1865

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1866, !DIExpression(), !1865)
  %3 = load ptr, ptr %self, align 8, !dbg !1867
  %4 = call i64 @std.math.random.Sfc64Random.next_long(ptr %3), !dbg !1869
  %zext = zext i64 %4 to i128, !dbg !1869
  %shl = shl i128 %zext, 64, !dbg !1869
  %5 = freeze i128 %shl, !dbg !1869
  %6 = load ptr, ptr %self, align 8, !dbg !1867
  %7 = call i64 @std.math.random.Sfc64Random.next_long(ptr %6), !dbg !1869
  %zext3 = zext i64 %7 to i128, !dbg !1869
  %add = add i128 %5, %zext3, !dbg !1869
  store i128 %add, ptr %taddr, align 16
  %8 = load <2 x i64>, ptr %taddr, align 16
  ret <2 x i64> %8

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.110, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.21, i64 11 }, ptr %indirectarg2, align 8
  %9 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %9(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 65) #5, !dbg !1865
  unreachable, !dbg !1865
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i32 @std.math.random.Sfc64Random.next_int(ptr %0) #0 comdat !dbg !1870 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1873
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1873
  br i1 %2, label %panic, label %checkok, !dbg !1873

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1874, !DIExpression(), !1873)
  %3 = load ptr, ptr %self, align 8, !dbg !1873
  %4 = call i64 @std.math.random.Sfc64Random.next_long(ptr %3), !dbg !1873
  %trunc = trunc i64 %4 to i32, !dbg !1873
  ret i32 %trunc, !dbg !1873

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.110, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.22, i64 8 }, ptr %indirectarg2, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 66) #5, !dbg !1873
  unreachable, !dbg !1873
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i16 @std.math.random.Sfc64Random.next_short(ptr %0) #0 comdat !dbg !1875 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1878
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1878
  br i1 %2, label %panic, label %checkok, !dbg !1878

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1879, !DIExpression(), !1878)
  %3 = load ptr, ptr %self, align 8, !dbg !1878
  %4 = call i64 @std.math.random.Sfc64Random.next_long(ptr %3), !dbg !1878
  %trunc = trunc i64 %4 to i16, !dbg !1878
  ret i16 %trunc, !dbg !1878

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.110, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.23, i64 10 }, ptr %indirectarg2, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 67) #5, !dbg !1878
  unreachable, !dbg !1878
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i8 @std.math.random.Sfc64Random.next_byte(ptr %0) #0 comdat !dbg !1880 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1883
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1883
  br i1 %2, label %panic, label %checkok, !dbg !1883

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1884, !DIExpression(), !1883)
  %3 = load ptr, ptr %self, align 8, !dbg !1883
  %4 = call i64 @std.math.random.Sfc64Random.next_long(ptr %3), !dbg !1883
  %trunc = trunc i64 %4 to i8, !dbg !1883
  ret i8 %trunc, !dbg !1883

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.110, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.24, i64 9 }, ptr %indirectarg2, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 68) #5, !dbg !1883
  unreachable, !dbg !1883
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.math.random.Sfc32Random.set_seed(ptr %0, ptr align 8 %1) #0 comdat !dbg !1885 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %input = alloca %"char[]", align 8
  %return_value = alloca [4 x i32], align 16
  %taddr = alloca ptr, align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %taddr13 = alloca i64, align 8
  %taddr14 = alloca i64, align 8
  %indirectarg15 = alloca %"char[]", align 8
  %indirectarg16 = alloca %"char[]", align 8
  %indirectarg17 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg19 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !1890
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !1890
  br i1 %3, label %panic, label %checkok, !dbg !1890

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1891, !DIExpression(), !1892)
    #dbg_declare(ptr %1, !1893, !DIExpression(), !1892)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input, ptr align 8 %1, i32 16, i1 false)
    #dbg_declare(ptr %return_value, !1894, !DIExpression(), !1896)
  store i32 0, ptr %return_value, align 4, !dbg !1896
  %ptradd = getelementptr inbounds i8, ptr %return_value, i64 4, !dbg !1896
  store i32 0, ptr %ptradd, align 4, !dbg !1896
  %ptradd3 = getelementptr inbounds i8, ptr %return_value, i64 8, !dbg !1896
  store i32 0, ptr %ptradd3, align 4, !dbg !1896
  %ptradd4 = getelementptr inbounds i8, ptr %return_value, i64 12, !dbg !1896
  store i32 0, ptr %ptradd4, align 4, !dbg !1896
  store ptr %return_value, ptr %taddr, align 8
  %4 = load ptr, ptr %taddr, align 8
  %5 = insertvalue %"char[]" undef, ptr %4, 0
  %6 = insertvalue %"char[]" %5, i64 16, 1
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg5, ptr align 8 %input, i32 16, i1 false)
  store %"char[]" %6, ptr %indirectarg6, align 8
  call void @std.math.random.seeder(ptr align 8 %indirectarg5, ptr align 8 %indirectarg6), !dbg !1898
  %7 = load ptr, ptr %self, align 8, !dbg !1897
  %checknull = icmp eq ptr %7, null, !dbg !1897
  %8 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1897
  br i1 %8, label %panic7, label %checkok11, !dbg !1897

checkok11:                                        ; preds = %checkok
  %9 = ptrtoint ptr %7 to i64, !dbg !1897
  %10 = urem i64 %9, 4, !dbg !1897
  %11 = icmp ne i64 %10, 0, !dbg !1897
  %12 = call i1 @llvm.expect.i1(i1 %11, i1 false), !dbg !1897
  br i1 %12, label %panic12, label %checkok20, !dbg !1897

checkok20:                                        ; preds = %checkok11
  call void @llvm.memcpy.p0.p0.i32(ptr align 4 %7, ptr align 16 %return_value, i32 16, i1 false), !dbg !1897
  ret void, !dbg !1897

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.110, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func, i64 8 }, ptr %indirectarg2, align 8
  %13 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %13(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 74) #5, !dbg !1892
  unreachable, !dbg !1892

panic7:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.8, i64 45 }, ptr %indirectarg8, align 8
  store %"char[]" { ptr @.file.110, i64 11 }, ptr %indirectarg9, align 8
  store %"char[]" { ptr @.func, i64 8 }, ptr %indirectarg10, align 8
  %14 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %14(ptr align 8 %indirectarg8, ptr align 8 %indirectarg9, ptr align 8 %indirectarg10, i32 76) #5, !dbg !1897
  unreachable, !dbg !1897

panic12:                                          ; preds = %checkok11
  store i64 4, ptr %taddr13, align 8
  %15 = insertvalue %any undef, ptr %taddr13, 0
  %16 = insertvalue %any %15, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %10, ptr %taddr14, align 8
  %17 = insertvalue %any undef, ptr %taddr14, 0
  %18 = insertvalue %any %17, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg15, align 8
  store %"char[]" { ptr @.file.110, i64 11 }, ptr %indirectarg16, align 8
  store %"char[]" { ptr @.func, i64 8 }, ptr %indirectarg17, align 8
  store %any %16, ptr %varargslots, align 16
  %ptradd18 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %18, ptr %ptradd18, align 16
  %19 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %19, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg19, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg15, ptr align 8 %indirectarg16, ptr align 8 %indirectarg17, i32 76, ptr align 8 %indirectarg19) #5, !dbg !1897
  unreachable, !dbg !1897
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i32 @std.math.random.Sfc32Random.next_int(ptr %0) #0 comdat !dbg !1899 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %sfc = alloca ptr, align 8
  %s = alloca ptr, align 8
  %result = alloca i32, align 4
  %taddr = alloca i64, align 8
  %taddr4 = alloca i64, align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg7 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg8 = alloca %"any[]", align 8
  %taddr12 = alloca i64, align 8
  %taddr13 = alloca i64, align 8
  %indirectarg14 = alloca %"char[]", align 8
  %indirectarg15 = alloca %"char[]", align 8
  %indirectarg16 = alloca %"char[]", align 8
  %varargslots17 = alloca [2 x %any], align 16
  %indirectarg20 = alloca %"any[]", align 8
  %taddr24 = alloca i64, align 8
  %taddr25 = alloca i64, align 8
  %indirectarg26 = alloca %"char[]", align 8
  %indirectarg27 = alloca %"char[]", align 8
  %indirectarg28 = alloca %"char[]", align 8
  %varargslots29 = alloca [2 x %any], align 16
  %indirectarg32 = alloca %"any[]", align 8
  %taddr37 = alloca i64, align 8
  %taddr38 = alloca i64, align 8
  %indirectarg39 = alloca %"char[]", align 8
  %indirectarg40 = alloca %"char[]", align 8
  %indirectarg41 = alloca %"char[]", align 8
  %varargslots42 = alloca [2 x %any], align 16
  %indirectarg45 = alloca %"any[]", align 8
  %taddr49 = alloca i64, align 8
  %taddr50 = alloca i64, align 8
  %indirectarg51 = alloca %"char[]", align 8
  %indirectarg52 = alloca %"char[]", align 8
  %indirectarg53 = alloca %"char[]", align 8
  %varargslots54 = alloca [2 x %any], align 16
  %indirectarg57 = alloca %"any[]", align 8
  %taddr60 = alloca i64, align 8
  %taddr61 = alloca i64, align 8
  %indirectarg62 = alloca %"char[]", align 8
  %indirectarg63 = alloca %"char[]", align 8
  %indirectarg64 = alloca %"char[]", align 8
  %varargslots65 = alloca [2 x %any], align 16
  %indirectarg68 = alloca %"any[]", align 8
  %taddr72 = alloca i64, align 8
  %taddr73 = alloca i64, align 8
  %indirectarg74 = alloca %"char[]", align 8
  %indirectarg75 = alloca %"char[]", align 8
  %indirectarg76 = alloca %"char[]", align 8
  %varargslots77 = alloca [2 x %any], align 16
  %indirectarg80 = alloca %"any[]", align 8
  %taddr84 = alloca i64, align 8
  %taddr85 = alloca i64, align 8
  %indirectarg86 = alloca %"char[]", align 8
  %indirectarg87 = alloca %"char[]", align 8
  %indirectarg88 = alloca %"char[]", align 8
  %varargslots89 = alloca [2 x %any], align 16
  %indirectarg92 = alloca %"any[]", align 8
  %taddr97 = alloca i64, align 8
  %taddr98 = alloca i64, align 8
  %indirectarg99 = alloca %"char[]", align 8
  %indirectarg100 = alloca %"char[]", align 8
  %indirectarg101 = alloca %"char[]", align 8
  %varargslots102 = alloca [2 x %any], align 16
  %indirectarg105 = alloca %"any[]", align 8
  %taddr109 = alloca i64, align 8
  %taddr110 = alloca i64, align 8
  %indirectarg111 = alloca %"char[]", align 8
  %indirectarg112 = alloca %"char[]", align 8
  %indirectarg113 = alloca %"char[]", align 8
  %varargslots114 = alloca [2 x %any], align 16
  %indirectarg117 = alloca %"any[]", align 8
  %self = alloca i32, align 4
  %shift = alloca i32, align 4
  %taddr122 = alloca i64, align 8
  %taddr123 = alloca i64, align 8
  %indirectarg124 = alloca %"char[]", align 8
  %indirectarg125 = alloca %"char[]", align 8
  %indirectarg126 = alloca %"char[]", align 8
  %varargslots127 = alloca [2 x %any], align 16
  %indirectarg130 = alloca %"any[]", align 8
  %taddr134 = alloca i64, align 8
  %taddr135 = alloca i64, align 8
  %indirectarg136 = alloca %"char[]", align 8
  %indirectarg137 = alloca %"char[]", align 8
  %indirectarg138 = alloca %"char[]", align 8
  %varargslots139 = alloca [2 x %any], align 16
  %indirectarg142 = alloca %"any[]", align 8
  %1 = icmp eq ptr %0, null, !dbg !1902
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1902
  br i1 %2, label %panic, label %checkok, !dbg !1902

checkok:                                          ; preds = %entry
  store ptr %0, ptr %sfc, align 8
    #dbg_declare(ptr %sfc, !1903, !DIExpression(), !1904)
    #dbg_declare(ptr %s, !1905, !DIExpression(), !1906)
  %3 = load ptr, ptr %sfc, align 8, !dbg !1906
  store ptr %3, ptr %s, align 8, !dbg !1906
    #dbg_declare(ptr %result, !1907, !DIExpression(), !1908)
  %4 = load ptr, ptr %s, align 8, !dbg !1908
  %5 = ptrtoint ptr %4 to i64, !dbg !1908
  %6 = urem i64 %5, 4, !dbg !1908
  %7 = icmp ne i64 %6, 0, !dbg !1908
  %8 = call i1 @llvm.expect.i1(i1 %7, i1 false), !dbg !1908
  br i1 %8, label %panic3, label %checkok9, !dbg !1908

checkok9:                                         ; preds = %checkok
  %9 = load i32, ptr %4, align 4, !dbg !1908
  %10 = load ptr, ptr %s, align 8, !dbg !1908
  %ptradd10 = getelementptr inbounds i8, ptr %10, i64 4, !dbg !1908
  %11 = ptrtoint ptr %ptradd10 to i64, !dbg !1908
  %12 = urem i64 %11, 4, !dbg !1908
  %13 = icmp ne i64 %12, 0, !dbg !1908
  %14 = call i1 @llvm.expect.i1(i1 %13, i1 false), !dbg !1908
  br i1 %14, label %panic11, label %checkok21, !dbg !1908

checkok21:                                        ; preds = %checkok9
  %15 = load i32, ptr %ptradd10, align 4, !dbg !1908
  %add = add i32 %9, %15, !dbg !1908
  %16 = load ptr, ptr %s, align 8, !dbg !1908
  %ptradd22 = getelementptr inbounds i8, ptr %16, i64 12, !dbg !1908
  %17 = ptrtoint ptr %ptradd22 to i64, !dbg !1908
  %18 = urem i64 %17, 4, !dbg !1908
  %19 = icmp ne i64 %18, 0, !dbg !1908
  %20 = call i1 @llvm.expect.i1(i1 %19, i1 false), !dbg !1908
  br i1 %20, label %panic23, label %checkok33, !dbg !1908

checkok33:                                        ; preds = %checkok21
  %21 = load i32, ptr %ptradd22, align 4, !dbg !1908
  %add34 = add i32 %add, %21, !dbg !1908
  store i32 %add34, ptr %result, align 4, !dbg !1908
  %22 = load ptr, ptr %s, align 8, !dbg !1909
  %ptradd35 = getelementptr inbounds i8, ptr %22, i64 4, !dbg !1909
  %23 = ptrtoint ptr %ptradd35 to i64, !dbg !1909
  %24 = urem i64 %23, 4, !dbg !1909
  %25 = icmp ne i64 %24, 0, !dbg !1909
  %26 = call i1 @llvm.expect.i1(i1 %25, i1 false), !dbg !1909
  br i1 %26, label %panic36, label %checkok46, !dbg !1909

checkok46:                                        ; preds = %checkok33
  %27 = load i32, ptr %ptradd35, align 4, !dbg !1909
  %28 = load ptr, ptr %s, align 8, !dbg !1909
  %ptradd47 = getelementptr inbounds i8, ptr %28, i64 4, !dbg !1909
  %29 = ptrtoint ptr %ptradd47 to i64, !dbg !1909
  %30 = urem i64 %29, 4, !dbg !1909
  %31 = icmp ne i64 %30, 0, !dbg !1909
  %32 = call i1 @llvm.expect.i1(i1 %31, i1 false), !dbg !1909
  br i1 %32, label %panic48, label %checkok58, !dbg !1909

checkok58:                                        ; preds = %checkok46
  %33 = load i32, ptr %ptradd47, align 4, !dbg !1909
  %lshr = lshr i32 %33, 9, !dbg !1909
  %34 = freeze i32 %lshr, !dbg !1909
  %xor = xor i32 %27, %34, !dbg !1909
  %35 = load ptr, ptr %s, align 8, !dbg !1909
  %36 = ptrtoint ptr %35 to i64, !dbg !1909
  %37 = urem i64 %36, 4, !dbg !1909
  %38 = icmp ne i64 %37, 0, !dbg !1909
  %39 = call i1 @llvm.expect.i1(i1 %38, i1 false), !dbg !1909
  br i1 %39, label %panic59, label %checkok69, !dbg !1909

checkok69:                                        ; preds = %checkok58
  store i32 %xor, ptr %35, align 4, !dbg !1909
  %40 = load ptr, ptr %s, align 8, !dbg !1910
  %ptradd70 = getelementptr inbounds i8, ptr %40, i64 8, !dbg !1910
  %41 = ptrtoint ptr %ptradd70 to i64, !dbg !1910
  %42 = urem i64 %41, 4, !dbg !1910
  %43 = icmp ne i64 %42, 0, !dbg !1910
  %44 = call i1 @llvm.expect.i1(i1 %43, i1 false), !dbg !1910
  br i1 %44, label %panic71, label %checkok81, !dbg !1910

checkok81:                                        ; preds = %checkok69
  %45 = load i32, ptr %ptradd70, align 4, !dbg !1910
  %46 = load ptr, ptr %s, align 8, !dbg !1910
  %ptradd82 = getelementptr inbounds i8, ptr %46, i64 8, !dbg !1910
  %47 = ptrtoint ptr %ptradd82 to i64, !dbg !1910
  %48 = urem i64 %47, 4, !dbg !1910
  %49 = icmp ne i64 %48, 0, !dbg !1910
  %50 = call i1 @llvm.expect.i1(i1 %49, i1 false), !dbg !1910
  br i1 %50, label %panic83, label %checkok93, !dbg !1910

checkok93:                                        ; preds = %checkok81
  %51 = load i32, ptr %ptradd82, align 4, !dbg !1910
  %shl = shl i32 %51, 3, !dbg !1910
  %52 = freeze i32 %shl, !dbg !1910
  %add94 = add i32 %45, %52, !dbg !1910
  %53 = load ptr, ptr %s, align 8, !dbg !1910
  %ptradd95 = getelementptr inbounds i8, ptr %53, i64 4, !dbg !1910
  %54 = ptrtoint ptr %ptradd95 to i64, !dbg !1910
  %55 = urem i64 %54, 4, !dbg !1910
  %56 = icmp ne i64 %55, 0, !dbg !1910
  %57 = call i1 @llvm.expect.i1(i1 %56, i1 false), !dbg !1910
  br i1 %57, label %panic96, label %checkok106, !dbg !1910

checkok106:                                       ; preds = %checkok93
  store i32 %add94, ptr %ptradd95, align 4, !dbg !1910
  %58 = load ptr, ptr %s, align 8, !dbg !1911
  %ptradd107 = getelementptr inbounds i8, ptr %58, i64 8, !dbg !1911
  %59 = ptrtoint ptr %ptradd107 to i64, !dbg !1911
  %60 = urem i64 %59, 4, !dbg !1911
  %61 = icmp ne i64 %60, 0, !dbg !1911
  %62 = call i1 @llvm.expect.i1(i1 %61, i1 false), !dbg !1911
  br i1 %62, label %panic108, label %checkok118, !dbg !1911

checkok118:                                       ; preds = %checkok106
  %63 = load i32, ptr %ptradd107, align 4
  store i32 %63, ptr %self, align 4
  store i32 11, ptr %shift, align 4
  %64 = load i32, ptr %self, align 4, !dbg !1912
  %65 = load i32, ptr %self, align 4, !dbg !1912
  %66 = load i32, ptr %shift, align 4, !dbg !1912
  %67 = call i32 @llvm.fshr.i32(i32 %64, i32 %65, i32 %66), !dbg !1912
  %68 = load i32, ptr %result, align 4, !dbg !1911
  %add119 = add i32 %67, %68, !dbg !1911
  %69 = load ptr, ptr %s, align 8, !dbg !1911
  %ptradd120 = getelementptr inbounds i8, ptr %69, i64 8, !dbg !1911
  %70 = ptrtoint ptr %ptradd120 to i64, !dbg !1911
  %71 = urem i64 %70, 4, !dbg !1911
  %72 = icmp ne i64 %71, 0, !dbg !1911
  %73 = call i1 @llvm.expect.i1(i1 %72, i1 false), !dbg !1911
  br i1 %73, label %panic121, label %checkok131, !dbg !1911

checkok131:                                       ; preds = %checkok118
  store i32 %add119, ptr %ptradd120, align 4, !dbg !1911
  %74 = load ptr, ptr %s, align 8, !dbg !1914
  %ptradd132 = getelementptr inbounds i8, ptr %74, i64 12, !dbg !1914
  %75 = ptrtoint ptr %ptradd132 to i64, !dbg !1914
  %76 = urem i64 %75, 4, !dbg !1914
  %77 = icmp ne i64 %76, 0, !dbg !1914
  %78 = call i1 @llvm.expect.i1(i1 %77, i1 false), !dbg !1914
  br i1 %78, label %panic133, label %checkok143, !dbg !1914

checkok143:                                       ; preds = %checkok131
  %79 = load i32, ptr %ptradd132, align 4, !dbg !1914
  %add144 = add i32 %79, -1640531527, !dbg !1914
  store i32 %add144, ptr %ptradd132, align 4, !dbg !1914
  %80 = load i32, ptr %result, align 4, !dbg !1915
  ret i32 %80, !dbg !1915

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.117, i64 61 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.110, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.22, i64 8 }, ptr %indirectarg2, align 8
  %81 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %81(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 79) #5, !dbg !1904
  unreachable, !dbg !1904

panic3:                                           ; preds = %checkok
  store i64 4, ptr %taddr, align 8
  %82 = insertvalue %any undef, ptr %taddr, 0
  %83 = insertvalue %any %82, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %6, ptr %taddr4, align 8
  %84 = insertvalue %any undef, ptr %taddr4, 0
  %85 = insertvalue %any %84, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.file.110, i64 11 }, ptr %indirectarg6, align 8
  store %"char[]" { ptr @.func.22, i64 8 }, ptr %indirectarg7, align 8
  store %any %83, ptr %varargslots, align 16
  %ptradd = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %85, ptr %ptradd, align 16
  %86 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %86, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg8, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, ptr align 8 %indirectarg7, i32 82, ptr align 8 %indirectarg8) #5, !dbg !1908
  unreachable, !dbg !1908

panic11:                                          ; preds = %checkok9
  store i64 4, ptr %taddr12, align 8
  %87 = insertvalue %any undef, ptr %taddr12, 0
  %88 = insertvalue %any %87, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %12, ptr %taddr13, align 8
  %89 = insertvalue %any undef, ptr %taddr13, 0
  %90 = insertvalue %any %89, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg14, align 8
  store %"char[]" { ptr @.file.110, i64 11 }, ptr %indirectarg15, align 8
  store %"char[]" { ptr @.func.22, i64 8 }, ptr %indirectarg16, align 8
  store %any %88, ptr %varargslots17, align 16
  %ptradd18 = getelementptr inbounds i8, ptr %varargslots17, i64 16
  store %any %90, ptr %ptradd18, align 16
  %91 = insertvalue %"any[]" undef, ptr %varargslots17, 0
  %"$$temp19" = insertvalue %"any[]" %91, i64 2, 1
  store %"any[]" %"$$temp19", ptr %indirectarg20, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg14, ptr align 8 %indirectarg15, ptr align 8 %indirectarg16, i32 82, ptr align 8 %indirectarg20) #5, !dbg !1908
  unreachable, !dbg !1908

panic23:                                          ; preds = %checkok21
  store i64 4, ptr %taddr24, align 8
  %92 = insertvalue %any undef, ptr %taddr24, 0
  %93 = insertvalue %any %92, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %18, ptr %taddr25, align 8
  %94 = insertvalue %any undef, ptr %taddr25, 0
  %95 = insertvalue %any %94, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg26, align 8
  store %"char[]" { ptr @.file.110, i64 11 }, ptr %indirectarg27, align 8
  store %"char[]" { ptr @.func.22, i64 8 }, ptr %indirectarg28, align 8
  store %any %93, ptr %varargslots29, align 16
  %ptradd30 = getelementptr inbounds i8, ptr %varargslots29, i64 16
  store %any %95, ptr %ptradd30, align 16
  %96 = insertvalue %"any[]" undef, ptr %varargslots29, 0
  %"$$temp31" = insertvalue %"any[]" %96, i64 2, 1
  store %"any[]" %"$$temp31", ptr %indirectarg32, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg26, ptr align 8 %indirectarg27, ptr align 8 %indirectarg28, i32 82, ptr align 8 %indirectarg32) #5, !dbg !1908
  unreachable, !dbg !1908

panic36:                                          ; preds = %checkok33
  store i64 4, ptr %taddr37, align 8
  %97 = insertvalue %any undef, ptr %taddr37, 0
  %98 = insertvalue %any %97, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %24, ptr %taddr38, align 8
  %99 = insertvalue %any undef, ptr %taddr38, 0
  %100 = insertvalue %any %99, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg39, align 8
  store %"char[]" { ptr @.file.110, i64 11 }, ptr %indirectarg40, align 8
  store %"char[]" { ptr @.func.22, i64 8 }, ptr %indirectarg41, align 8
  store %any %98, ptr %varargslots42, align 16
  %ptradd43 = getelementptr inbounds i8, ptr %varargslots42, i64 16
  store %any %100, ptr %ptradd43, align 16
  %101 = insertvalue %"any[]" undef, ptr %varargslots42, 0
  %"$$temp44" = insertvalue %"any[]" %101, i64 2, 1
  store %"any[]" %"$$temp44", ptr %indirectarg45, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg39, ptr align 8 %indirectarg40, ptr align 8 %indirectarg41, i32 83, ptr align 8 %indirectarg45) #5, !dbg !1909
  unreachable, !dbg !1909

panic48:                                          ; preds = %checkok46
  store i64 4, ptr %taddr49, align 8
  %102 = insertvalue %any undef, ptr %taddr49, 0
  %103 = insertvalue %any %102, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %30, ptr %taddr50, align 8
  %104 = insertvalue %any undef, ptr %taddr50, 0
  %105 = insertvalue %any %104, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg51, align 8
  store %"char[]" { ptr @.file.110, i64 11 }, ptr %indirectarg52, align 8
  store %"char[]" { ptr @.func.22, i64 8 }, ptr %indirectarg53, align 8
  store %any %103, ptr %varargslots54, align 16
  %ptradd55 = getelementptr inbounds i8, ptr %varargslots54, i64 16
  store %any %105, ptr %ptradd55, align 16
  %106 = insertvalue %"any[]" undef, ptr %varargslots54, 0
  %"$$temp56" = insertvalue %"any[]" %106, i64 2, 1
  store %"any[]" %"$$temp56", ptr %indirectarg57, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg51, ptr align 8 %indirectarg52, ptr align 8 %indirectarg53, i32 83, ptr align 8 %indirectarg57) #5, !dbg !1909
  unreachable, !dbg !1909

panic59:                                          ; preds = %checkok58
  store i64 4, ptr %taddr60, align 8
  %107 = insertvalue %any undef, ptr %taddr60, 0
  %108 = insertvalue %any %107, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %37, ptr %taddr61, align 8
  %109 = insertvalue %any undef, ptr %taddr61, 0
  %110 = insertvalue %any %109, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg62, align 8
  store %"char[]" { ptr @.file.110, i64 11 }, ptr %indirectarg63, align 8
  store %"char[]" { ptr @.func.22, i64 8 }, ptr %indirectarg64, align 8
  store %any %108, ptr %varargslots65, align 16
  %ptradd66 = getelementptr inbounds i8, ptr %varargslots65, i64 16
  store %any %110, ptr %ptradd66, align 16
  %111 = insertvalue %"any[]" undef, ptr %varargslots65, 0
  %"$$temp67" = insertvalue %"any[]" %111, i64 2, 1
  store %"any[]" %"$$temp67", ptr %indirectarg68, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg62, ptr align 8 %indirectarg63, ptr align 8 %indirectarg64, i32 83, ptr align 8 %indirectarg68) #5, !dbg !1909
  unreachable, !dbg !1909

panic71:                                          ; preds = %checkok69
  store i64 4, ptr %taddr72, align 8
  %112 = insertvalue %any undef, ptr %taddr72, 0
  %113 = insertvalue %any %112, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %42, ptr %taddr73, align 8
  %114 = insertvalue %any undef, ptr %taddr73, 0
  %115 = insertvalue %any %114, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg74, align 8
  store %"char[]" { ptr @.file.110, i64 11 }, ptr %indirectarg75, align 8
  store %"char[]" { ptr @.func.22, i64 8 }, ptr %indirectarg76, align 8
  store %any %113, ptr %varargslots77, align 16
  %ptradd78 = getelementptr inbounds i8, ptr %varargslots77, i64 16
  store %any %115, ptr %ptradd78, align 16
  %116 = insertvalue %"any[]" undef, ptr %varargslots77, 0
  %"$$temp79" = insertvalue %"any[]" %116, i64 2, 1
  store %"any[]" %"$$temp79", ptr %indirectarg80, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg74, ptr align 8 %indirectarg75, ptr align 8 %indirectarg76, i32 84, ptr align 8 %indirectarg80) #5, !dbg !1910
  unreachable, !dbg !1910

panic83:                                          ; preds = %checkok81
  store i64 4, ptr %taddr84, align 8
  %117 = insertvalue %any undef, ptr %taddr84, 0
  %118 = insertvalue %any %117, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %48, ptr %taddr85, align 8
  %119 = insertvalue %any undef, ptr %taddr85, 0
  %120 = insertvalue %any %119, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg86, align 8
  store %"char[]" { ptr @.file.110, i64 11 }, ptr %indirectarg87, align 8
  store %"char[]" { ptr @.func.22, i64 8 }, ptr %indirectarg88, align 8
  store %any %118, ptr %varargslots89, align 16
  %ptradd90 = getelementptr inbounds i8, ptr %varargslots89, i64 16
  store %any %120, ptr %ptradd90, align 16
  %121 = insertvalue %"any[]" undef, ptr %varargslots89, 0
  %"$$temp91" = insertvalue %"any[]" %121, i64 2, 1
  store %"any[]" %"$$temp91", ptr %indirectarg92, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg86, ptr align 8 %indirectarg87, ptr align 8 %indirectarg88, i32 84, ptr align 8 %indirectarg92) #5, !dbg !1910
  unreachable, !dbg !1910

panic96:                                          ; preds = %checkok93
  store i64 4, ptr %taddr97, align 8
  %122 = insertvalue %any undef, ptr %taddr97, 0
  %123 = insertvalue %any %122, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %55, ptr %taddr98, align 8
  %124 = insertvalue %any undef, ptr %taddr98, 0
  %125 = insertvalue %any %124, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg99, align 8
  store %"char[]" { ptr @.file.110, i64 11 }, ptr %indirectarg100, align 8
  store %"char[]" { ptr @.func.22, i64 8 }, ptr %indirectarg101, align 8
  store %any %123, ptr %varargslots102, align 16
  %ptradd103 = getelementptr inbounds i8, ptr %varargslots102, i64 16
  store %any %125, ptr %ptradd103, align 16
  %126 = insertvalue %"any[]" undef, ptr %varargslots102, 0
  %"$$temp104" = insertvalue %"any[]" %126, i64 2, 1
  store %"any[]" %"$$temp104", ptr %indirectarg105, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg99, ptr align 8 %indirectarg100, ptr align 8 %indirectarg101, i32 84, ptr align 8 %indirectarg105) #5, !dbg !1910
  unreachable, !dbg !1910

panic108:                                         ; preds = %checkok106
  store i64 4, ptr %taddr109, align 8
  %127 = insertvalue %any undef, ptr %taddr109, 0
  %128 = insertvalue %any %127, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %60, ptr %taddr110, align 8
  %129 = insertvalue %any undef, ptr %taddr110, 0
  %130 = insertvalue %any %129, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg111, align 8
  store %"char[]" { ptr @.file.110, i64 11 }, ptr %indirectarg112, align 8
  store %"char[]" { ptr @.func.22, i64 8 }, ptr %indirectarg113, align 8
  store %any %128, ptr %varargslots114, align 16
  %ptradd115 = getelementptr inbounds i8, ptr %varargslots114, i64 16
  store %any %130, ptr %ptradd115, align 16
  %131 = insertvalue %"any[]" undef, ptr %varargslots114, 0
  %"$$temp116" = insertvalue %"any[]" %131, i64 2, 1
  store %"any[]" %"$$temp116", ptr %indirectarg117, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg111, ptr align 8 %indirectarg112, ptr align 8 %indirectarg113, i32 85, ptr align 8 %indirectarg117) #5, !dbg !1911
  unreachable, !dbg !1911

panic121:                                         ; preds = %checkok118
  store i64 4, ptr %taddr122, align 8
  %132 = insertvalue %any undef, ptr %taddr122, 0
  %133 = insertvalue %any %132, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %71, ptr %taddr123, align 8
  %134 = insertvalue %any undef, ptr %taddr123, 0
  %135 = insertvalue %any %134, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg124, align 8
  store %"char[]" { ptr @.file.110, i64 11 }, ptr %indirectarg125, align 8
  store %"char[]" { ptr @.func.22, i64 8 }, ptr %indirectarg126, align 8
  store %any %133, ptr %varargslots127, align 16
  %ptradd128 = getelementptr inbounds i8, ptr %varargslots127, i64 16
  store %any %135, ptr %ptradd128, align 16
  %136 = insertvalue %"any[]" undef, ptr %varargslots127, 0
  %"$$temp129" = insertvalue %"any[]" %136, i64 2, 1
  store %"any[]" %"$$temp129", ptr %indirectarg130, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg124, ptr align 8 %indirectarg125, ptr align 8 %indirectarg126, i32 85, ptr align 8 %indirectarg130) #5, !dbg !1911
  unreachable, !dbg !1911

panic133:                                         ; preds = %checkok131
  store i64 4, ptr %taddr134, align 8
  %137 = insertvalue %any undef, ptr %taddr134, 0
  %138 = insertvalue %any %137, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %76, ptr %taddr135, align 8
  %139 = insertvalue %any undef, ptr %taddr135, 0
  %140 = insertvalue %any %139, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg136, align 8
  store %"char[]" { ptr @.file.110, i64 11 }, ptr %indirectarg137, align 8
  store %"char[]" { ptr @.func.22, i64 8 }, ptr %indirectarg138, align 8
  store %any %138, ptr %varargslots139, align 16
  %ptradd140 = getelementptr inbounds i8, ptr %varargslots139, i64 16
  store %any %140, ptr %ptradd140, align 16
  %141 = insertvalue %"any[]" undef, ptr %varargslots139, 0
  %"$$temp141" = insertvalue %"any[]" %141, i64 2, 1
  store %"any[]" %"$$temp141", ptr %indirectarg142, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg136, ptr align 8 %indirectarg137, ptr align 8 %indirectarg138, i32 86, ptr align 8 %indirectarg142) #5, !dbg !1914
  unreachable, !dbg !1914
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.math.random.Sfc32Random.next_bytes(ptr %0, ptr align 8 %1) #0 comdat !dbg !1916 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %bytes = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i32, align 4
  %taddr = alloca ptr, align 8
  %taddr9 = alloca i64, align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg13 = alloca %"any[]", align 8
  %taddr17 = alloca i64, align 8
  %taddr18 = alloca i64, align 8
  %indirectarg19 = alloca %"char[]", align 8
  %indirectarg20 = alloca %"char[]", align 8
  %indirectarg21 = alloca %"char[]", align 8
  %varargslots22 = alloca [2 x %any], align 16
  %indirectarg25 = alloca %"any[]", align 8
  %taddr29 = alloca i64, align 8
  %taddr30 = alloca i64, align 8
  %indirectarg31 = alloca %"char[]", align 8
  %indirectarg32 = alloca %"char[]", align 8
  %indirectarg33 = alloca %"char[]", align 8
  %varargslots34 = alloca [2 x %any], align 16
  %indirectarg37 = alloca %"any[]", align 8
  %taddr39 = alloca ptr, align 8
  %taddr42 = alloca i64, align 8
  %taddr43 = alloca i64, align 8
  %indirectarg44 = alloca %"char[]", align 8
  %indirectarg45 = alloca %"char[]", align 8
  %indirectarg46 = alloca %"char[]", align 8
  %varargslots47 = alloca [2 x %any], align 16
  %indirectarg50 = alloca %"any[]", align 8
  %taddr54 = alloca i64, align 8
  %taddr55 = alloca i64, align 8
  %indirectarg56 = alloca %"char[]", align 8
  %indirectarg57 = alloca %"char[]", align 8
  %indirectarg58 = alloca %"char[]", align 8
  %varargslots59 = alloca [2 x %any], align 16
  %indirectarg62 = alloca %"any[]", align 8
  %taddr66 = alloca i64, align 8
  %taddr67 = alloca i64, align 8
  %indirectarg68 = alloca %"char[]", align 8
  %indirectarg69 = alloca %"char[]", align 8
  %indirectarg70 = alloca %"char[]", align 8
  %varargslots71 = alloca [2 x %any], align 16
  %indirectarg74 = alloca %"any[]", align 8
  %taddr79 = alloca i64, align 8
  %taddr80 = alloca i64, align 8
  %indirectarg81 = alloca %"char[]", align 8
  %indirectarg82 = alloca %"char[]", align 8
  %indirectarg83 = alloca %"char[]", align 8
  %varargslots84 = alloca [2 x %any], align 16
  %indirectarg87 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg91 = alloca %"char[]", align 8
  %indirectarg92 = alloca %"char[]", align 8
  %indirectarg93 = alloca %"char[]", align 8
  %indirectarg94 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !1917
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !1917
  br i1 %3, label %panic, label %checkok, !dbg !1917

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1918, !DIExpression(), !1917)
    #dbg_declare(ptr %1, !1919, !DIExpression(), !1917)
  %ptradd = getelementptr inbounds i8, ptr %1, i64 8, !dbg !1920
  %4 = load i64, ptr %ptradd, align 8, !dbg !1920
  %lt = icmp ult i64 0, %4, !dbg !1920
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !1920

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.13, i64 34 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.file.110, i64 11 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg5, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, i32 91) #5, !dbg !1920
  unreachable, !dbg !1920

assert_ok:                                        ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes, ptr align 8 %1, i32 16, i1 false)
    #dbg_declare(ptr %len, !1922, !DIExpression(), !1924)
  %ptradd6 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !1924
  %6 = load i64, ptr %ptradd6, align 8, !dbg !1924
  store i64 %6, ptr %len, align 8, !dbg !1924
  br label %loop.cond, !dbg !1925

loop.cond:                                        ; preds = %checkok88, %assert_ok
  %7 = load i64, ptr %len, align 8, !dbg !1926
  %lt7 = icmp ult i64 0, %7, !dbg !1926
  br i1 %lt7, label %loop.body, label %loop.exit, !dbg !1926

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %value, !1928, !DIExpression(), !1930)
  %8 = load ptr, ptr %self, align 8, !dbg !1931
  %9 = call i32 @std.math.random.Sfc32Random.next_int(ptr %8), !dbg !1930
  store i32 %9, ptr %value, align 4, !dbg !1930
  %10 = load i64, ptr %len, align 8, !dbg !1932
  %le = icmp ule i64 %10, 4, !dbg !1932
  br i1 %le, label %if.then, label %if.exit, !dbg !1932

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %11 = load ptr, ptr %taddr, align 8
  %12 = load i64, ptr %len, align 8, !dbg !1933
  %add = add i64 0, %12, !dbg !1933
  %gt = icmp ugt i64 0, %add, !dbg !1933
  %sub = sub i64 %add, 0, !dbg !1933
  %13 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !1933
  br i1 %13, label %panic8, label %checkok14, !dbg !1933

checkok14:                                        ; preds = %if.then
  %size = sub i64 %add, 0, !dbg !1933
  %14 = insertvalue %"char[]" undef, ptr %11, 0, !dbg !1933
  %15 = insertvalue %"char[]" %14, i64 %size, 1, !dbg !1933
  %16 = load %"char[]", ptr %bytes, align 8, !dbg !1933
  %17 = extractvalue %"char[]" %16, 0, !dbg !1933
  %18 = extractvalue %"char[]" %16, 1, !dbg !1933
  %gt15 = icmp ugt i64 0, %18, !dbg !1933
  %19 = call i1 @llvm.expect.i1(i1 %gt15, i1 false), !dbg !1933
  br i1 %19, label %panic16, label %checkok26, !dbg !1933

checkok26:                                        ; preds = %checkok14
  %size27 = sub i64 %18, 0, !dbg !1933
  %20 = insertvalue %"char[]" undef, ptr %17, 0, !dbg !1933
  %21 = insertvalue %"char[]" %20, i64 %size27, 1, !dbg !1933
  %22 = extractvalue %"char[]" %21, 0, !dbg !1933
  %23 = extractvalue %"char[]" %15, 0, !dbg !1933
  %24 = extractvalue %"char[]" %15, 1, !dbg !1933
  %25 = extractvalue %"char[]" %21, 1, !dbg !1933
  %neq = icmp ne i64 %25, %24, !dbg !1933
  %26 = call i1 @llvm.expect.i1(i1 %neq, i1 false), !dbg !1933
  br i1 %26, label %panic28, label %checkok38, !dbg !1933

checkok38:                                        ; preds = %checkok26
  %27 = mul i64 %24, 1, !dbg !1933
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %22, ptr align 1 %23, i64 %27, i1 false), !dbg !1933
  br label %expr_block.exit, !dbg !1935

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr39, align 8
  %28 = load ptr, ptr %taddr39, align 8
  %29 = insertvalue %"char[]" undef, ptr %28, 0
  %30 = insertvalue %"char[]" %29, i64 4, 1
  %31 = load %"char[]", ptr %bytes, align 8, !dbg !1936
  %32 = extractvalue %"char[]" %31, 0, !dbg !1936
  %33 = extractvalue %"char[]" %31, 1, !dbg !1936
  %gt40 = icmp sgt i64 0, %33, !dbg !1936
  %34 = call i1 @llvm.expect.i1(i1 %gt40, i1 false), !dbg !1936
  br i1 %34, label %panic41, label %checkok51, !dbg !1936

checkok51:                                        ; preds = %if.exit
  %lt52 = icmp slt i64 %33, 4, !dbg !1936
  %35 = call i1 @llvm.expect.i1(i1 %lt52, i1 false), !dbg !1936
  br i1 %35, label %panic53, label %checkok63, !dbg !1936

checkok63:                                        ; preds = %checkok51
  %36 = insertvalue %"char[]" undef, ptr %32, 0, !dbg !1936
  %37 = insertvalue %"char[]" %36, i64 4, 1, !dbg !1936
  %38 = extractvalue %"char[]" %37, 0, !dbg !1936
  %39 = extractvalue %"char[]" %30, 0, !dbg !1936
  %40 = extractvalue %"char[]" %30, 1, !dbg !1936
  %41 = extractvalue %"char[]" %37, 1, !dbg !1936
  %neq64 = icmp ne i64 %41, %40, !dbg !1936
  %42 = call i1 @llvm.expect.i1(i1 %neq64, i1 false), !dbg !1936
  br i1 %42, label %panic65, label %checkok75, !dbg !1936

checkok75:                                        ; preds = %checkok63
  %43 = mul i64 %40, 1, !dbg !1936
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %38, ptr align 1 %39, i64 %43, i1 false), !dbg !1936
  %44 = load i64, ptr %len, align 8, !dbg !1937
  %sub76 = sub i64 %44, 4, !dbg !1937
  store i64 %sub76, ptr %len, align 8, !dbg !1937
  %45 = load %"char[]", ptr %bytes, align 8, !dbg !1938
  %46 = extractvalue %"char[]" %45, 0, !dbg !1938
  %47 = extractvalue %"char[]" %45, 1, !dbg !1938
  %gt77 = icmp ugt i64 4, %47, !dbg !1938
  %48 = call i1 @llvm.expect.i1(i1 %gt77, i1 false), !dbg !1938
  br i1 %48, label %panic78, label %checkok88, !dbg !1938

checkok88:                                        ; preds = %checkok75
  %size89 = sub i64 %47, 4, !dbg !1938
  %ptradd90 = getelementptr inbounds i8, ptr %46, i64 4, !dbg !1938
  %49 = insertvalue %"char[]" undef, ptr %ptradd90, 0, !dbg !1938
  %50 = insertvalue %"char[]" %49, i64 %size89, 1, !dbg !1938
  store %"char[]" %50, ptr %bytes, align 8, !dbg !1938
  br label %loop.cond, !dbg !1938

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.118, i64 30 }, ptr %string, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg91, ptr align 8 %string, i32 16, i1 false)
  store %"char[]" { ptr @.str.119, i64 11 }, ptr %indirectarg92, align 8
  store %"char[]" { ptr @.str.120, i64 22 }, ptr %indirectarg93, align 8
  store %"any[]" zeroinitializer, ptr %indirectarg94, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg91, ptr align 8 %indirectarg92, ptr align 8 %indirectarg93, i32 93, ptr align 8 %indirectarg94), !dbg !1939
  unreachable, !dbg !1939

expr_block.exit:                                  ; preds = %checkok38
  ret void, !dbg !1939

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.110, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg2, align 8
  %51 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %51(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 93) #5, !dbg !1917
  unreachable, !dbg !1917

panic8:                                           ; preds = %if.then
  store i64 %sub, ptr %taddr9, align 8
  %52 = insertvalue %any undef, ptr %taddr9, 0
  %53 = insertvalue %any %52, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.14, i64 43 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg12, align 8
  store %any %53, ptr %varargslots, align 16
  %54 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %54, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg13, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, i32 153, ptr align 8 %indirectarg13) #5, !dbg !1933
  unreachable, !dbg !1933

panic16:                                          ; preds = %checkok14
  store i64 %18, ptr %taddr17, align 8
  %55 = insertvalue %any undef, ptr %taddr17, 0
  %56 = insertvalue %any %55, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr18, align 8
  %57 = insertvalue %any undef, ptr %taddr18, 0
  %58 = insertvalue %any %57, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.16, i64 61 }, ptr %indirectarg19, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg20, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg21, align 8
  store %any %56, ptr %varargslots22, align 16
  %ptradd23 = getelementptr inbounds i8, ptr %varargslots22, i64 16
  store %any %58, ptr %ptradd23, align 16
  %59 = insertvalue %"any[]" undef, ptr %varargslots22, 0
  %"$$temp24" = insertvalue %"any[]" %59, i64 2, 1
  store %"any[]" %"$$temp24", ptr %indirectarg25, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg19, ptr align 8 %indirectarg20, ptr align 8 %indirectarg21, i32 153, ptr align 8 %indirectarg25) #5, !dbg !1933
  unreachable, !dbg !1933

panic28:                                          ; preds = %checkok26
  store i64 %25, ptr %taddr29, align 8
  %60 = insertvalue %any undef, ptr %taddr29, 0
  %61 = insertvalue %any %60, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %24, ptr %taddr30, align 8
  %62 = insertvalue %any undef, ptr %taddr30, 0
  %63 = insertvalue %any %62, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 38 }, ptr %indirectarg31, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg32, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg33, align 8
  store %any %61, ptr %varargslots34, align 16
  %ptradd35 = getelementptr inbounds i8, ptr %varargslots34, i64 16
  store %any %63, ptr %ptradd35, align 16
  %64 = insertvalue %"any[]" undef, ptr %varargslots34, 0
  %"$$temp36" = insertvalue %"any[]" %64, i64 2, 1
  store %"any[]" %"$$temp36", ptr %indirectarg37, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg31, ptr align 8 %indirectarg32, ptr align 8 %indirectarg33, i32 153, ptr align 8 %indirectarg37) #5, !dbg !1933
  unreachable, !dbg !1933

panic41:                                          ; preds = %if.exit
  store i64 %33, ptr %taddr42, align 8
  %65 = insertvalue %any undef, ptr %taddr42, 0
  %66 = insertvalue %any %65, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr43, align 8
  %67 = insertvalue %any undef, ptr %taddr43, 0
  %68 = insertvalue %any %67, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.16, i64 61 }, ptr %indirectarg44, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg45, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg46, align 8
  store %any %66, ptr %varargslots47, align 16
  %ptradd48 = getelementptr inbounds i8, ptr %varargslots47, i64 16
  store %any %68, ptr %ptradd48, align 16
  %69 = insertvalue %"any[]" undef, ptr %varargslots47, 0
  %"$$temp49" = insertvalue %"any[]" %69, i64 2, 1
  store %"any[]" %"$$temp49", ptr %indirectarg50, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg44, ptr align 8 %indirectarg45, ptr align 8 %indirectarg46, i32 156, ptr align 8 %indirectarg50) #5, !dbg !1936
  unreachable, !dbg !1936

panic53:                                          ; preds = %checkok51
  store i64 3, ptr %taddr54, align 8
  %70 = insertvalue %any undef, ptr %taddr54, 0
  %71 = insertvalue %any %70, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %33, ptr %taddr55, align 8
  %72 = insertvalue %any undef, ptr %taddr55, 0
  %73 = insertvalue %any %72, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.18, i64 60 }, ptr %indirectarg56, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg57, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg58, align 8
  store %any %71, ptr %varargslots59, align 16
  %ptradd60 = getelementptr inbounds i8, ptr %varargslots59, i64 16
  store %any %73, ptr %ptradd60, align 16
  %74 = insertvalue %"any[]" undef, ptr %varargslots59, 0
  %"$$temp61" = insertvalue %"any[]" %74, i64 2, 1
  store %"any[]" %"$$temp61", ptr %indirectarg62, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg56, ptr align 8 %indirectarg57, ptr align 8 %indirectarg58, i32 156, ptr align 8 %indirectarg62) #5, !dbg !1936
  unreachable, !dbg !1936

panic65:                                          ; preds = %checkok63
  store i64 %41, ptr %taddr66, align 8
  %75 = insertvalue %any undef, ptr %taddr66, 0
  %76 = insertvalue %any %75, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %40, ptr %taddr67, align 8
  %77 = insertvalue %any undef, ptr %taddr67, 0
  %78 = insertvalue %any %77, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 38 }, ptr %indirectarg68, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg69, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg70, align 8
  store %any %76, ptr %varargslots71, align 16
  %ptradd72 = getelementptr inbounds i8, ptr %varargslots71, i64 16
  store %any %78, ptr %ptradd72, align 16
  %79 = insertvalue %"any[]" undef, ptr %varargslots71, 0
  %"$$temp73" = insertvalue %"any[]" %79, i64 2, 1
  store %"any[]" %"$$temp73", ptr %indirectarg74, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg68, ptr align 8 %indirectarg69, ptr align 8 %indirectarg70, i32 156, ptr align 8 %indirectarg74) #5, !dbg !1936
  unreachable, !dbg !1936

panic78:                                          ; preds = %checkok75
  store i64 %47, ptr %taddr79, align 8
  %80 = insertvalue %any undef, ptr %taddr79, 0
  %81 = insertvalue %any %80, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 4, ptr %taddr80, align 8
  %82 = insertvalue %any undef, ptr %taddr80, 0
  %83 = insertvalue %any %82, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.16, i64 61 }, ptr %indirectarg81, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg82, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg83, align 8
  store %any %81, ptr %varargslots84, align 16
  %ptradd85 = getelementptr inbounds i8, ptr %varargslots84, i64 16
  store %any %83, ptr %ptradd85, align 16
  %84 = insertvalue %"any[]" undef, ptr %varargslots84, 0
  %"$$temp86" = insertvalue %"any[]" %84, i64 2, 1
  store %"any[]" %"$$temp86", ptr %indirectarg87, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg81, ptr align 8 %indirectarg82, ptr align 8 %indirectarg83, i32 158, ptr align 8 %indirectarg87) #5, !dbg !1938
  unreachable, !dbg !1938
}

; Function Attrs: nounwind ssp uwtable
define weak_odr <2 x i64> @std.math.random.Sfc32Random.next_int128(ptr %0) #0 comdat !dbg !1942 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %taddr = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !1945
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1945
  br i1 %2, label %panic, label %checkok, !dbg !1945

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1946, !DIExpression(), !1945)
  %3 = load ptr, ptr %self, align 8, !dbg !1947
  %4 = call i64 @std.math.random.Sfc32Random.next_long(ptr %3), !dbg !1949
  %zext = zext i64 %4 to i128, !dbg !1949
  %shl = shl i128 %zext, 64, !dbg !1949
  %5 = freeze i128 %shl, !dbg !1949
  %6 = load ptr, ptr %self, align 8, !dbg !1947
  %7 = call i64 @std.math.random.Sfc32Random.next_long(ptr %6), !dbg !1949
  %zext3 = zext i64 %7 to i128, !dbg !1949
  %add = add i128 %5, %zext3, !dbg !1949
  store i128 %add, ptr %taddr, align 16
  %8 = load <2 x i64>, ptr %taddr, align 16
  ret <2 x i64> %8

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.110, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.21, i64 11 }, ptr %indirectarg2, align 8
  %9 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %9(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 94) #5, !dbg !1945
  unreachable, !dbg !1945
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.math.random.Sfc32Random.next_long(ptr %0) #0 comdat !dbg !1950 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1953
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1953
  br i1 %2, label %panic, label %checkok, !dbg !1953

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1954, !DIExpression(), !1953)
  %3 = load ptr, ptr %self, align 8, !dbg !1955
  %4 = call i32 @std.math.random.Sfc32Random.next_int(ptr %3), !dbg !1957
  %zext = zext i32 %4 to i64, !dbg !1957
  %shl = shl i64 %zext, 32, !dbg !1957
  %5 = freeze i64 %shl, !dbg !1957
  %6 = load ptr, ptr %self, align 8, !dbg !1955
  %7 = call i32 @std.math.random.Sfc32Random.next_int(ptr %6), !dbg !1957
  %zext3 = zext i32 %7 to i64, !dbg !1957
  %add = add i64 %5, %zext3, !dbg !1957
  ret i64 %add, !dbg !1957

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.110, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.10, i64 9 }, ptr %indirectarg2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 95) #5, !dbg !1953
  unreachable, !dbg !1953
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i16 @std.math.random.Sfc32Random.next_short(ptr %0) #0 comdat !dbg !1958 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1961
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1961
  br i1 %2, label %panic, label %checkok, !dbg !1961

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1962, !DIExpression(), !1961)
  %3 = load ptr, ptr %self, align 8, !dbg !1961
  %4 = call i32 @std.math.random.Sfc32Random.next_int(ptr %3), !dbg !1961
  %trunc = trunc i32 %4 to i16, !dbg !1961
  ret i16 %trunc, !dbg !1961

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.110, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.23, i64 10 }, ptr %indirectarg2, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 96) #5, !dbg !1961
  unreachable, !dbg !1961
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i8 @std.math.random.Sfc32Random.next_byte(ptr %0) #0 comdat !dbg !1963 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1966
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1966
  br i1 %2, label %panic, label %checkok, !dbg !1966

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1967, !DIExpression(), !1966)
  %3 = load ptr, ptr %self, align 8, !dbg !1966
  %4 = call i32 @std.math.random.Sfc32Random.next_int(ptr %3), !dbg !1966
  %trunc = trunc i32 %4 to i8, !dbg !1966
  ret i8 %trunc, !dbg !1966

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.110, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.24, i64 9 }, ptr %indirectarg2, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 97) #5, !dbg !1966
  unreachable, !dbg !1966
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.math.random.Sfc16Random.set_seed(ptr %0, ptr align 8 %1) #0 comdat !dbg !1968 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %input = alloca %"char[]", align 8
  %return_value = alloca [4 x i16], align 2
  %taddr = alloca ptr, align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %taddr13 = alloca i64, align 8
  %taddr14 = alloca i64, align 8
  %indirectarg15 = alloca %"char[]", align 8
  %indirectarg16 = alloca %"char[]", align 8
  %indirectarg17 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg19 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !1973
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !1973
  br i1 %3, label %panic, label %checkok, !dbg !1973

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1974, !DIExpression(), !1975)
    #dbg_declare(ptr %1, !1976, !DIExpression(), !1975)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input, ptr align 8 %1, i32 16, i1 false)
    #dbg_declare(ptr %return_value, !1977, !DIExpression(), !1979)
  store i16 0, ptr %return_value, align 2, !dbg !1979
  %ptradd = getelementptr inbounds i8, ptr %return_value, i64 2, !dbg !1979
  store i16 0, ptr %ptradd, align 2, !dbg !1979
  %ptradd3 = getelementptr inbounds i8, ptr %return_value, i64 4, !dbg !1979
  store i16 0, ptr %ptradd3, align 2, !dbg !1979
  %ptradd4 = getelementptr inbounds i8, ptr %return_value, i64 6, !dbg !1979
  store i16 0, ptr %ptradd4, align 2, !dbg !1979
  store ptr %return_value, ptr %taddr, align 8
  %4 = load ptr, ptr %taddr, align 8
  %5 = insertvalue %"char[]" undef, ptr %4, 0
  %6 = insertvalue %"char[]" %5, i64 8, 1
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg5, ptr align 8 %input, i32 16, i1 false)
  store %"char[]" %6, ptr %indirectarg6, align 8
  call void @std.math.random.seeder(ptr align 8 %indirectarg5, ptr align 8 %indirectarg6), !dbg !1981
  %7 = load ptr, ptr %self, align 8, !dbg !1980
  %checknull = icmp eq ptr %7, null, !dbg !1980
  %8 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1980
  br i1 %8, label %panic7, label %checkok11, !dbg !1980

checkok11:                                        ; preds = %checkok
  %9 = ptrtoint ptr %7 to i64, !dbg !1980
  %10 = urem i64 %9, 2, !dbg !1980
  %11 = icmp ne i64 %10, 0, !dbg !1980
  %12 = call i1 @llvm.expect.i1(i1 %11, i1 false), !dbg !1980
  br i1 %12, label %panic12, label %checkok20, !dbg !1980

checkok20:                                        ; preds = %checkok11
  call void @llvm.memcpy.p0.p0.i32(ptr align 2 %7, ptr align 2 %return_value, i32 8, i1 false), !dbg !1980
  ret void, !dbg !1980

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.110, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func, i64 8 }, ptr %indirectarg2, align 8
  %13 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %13(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 103) #5, !dbg !1975
  unreachable, !dbg !1975

panic7:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.8, i64 45 }, ptr %indirectarg8, align 8
  store %"char[]" { ptr @.file.110, i64 11 }, ptr %indirectarg9, align 8
  store %"char[]" { ptr @.func, i64 8 }, ptr %indirectarg10, align 8
  %14 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %14(ptr align 8 %indirectarg8, ptr align 8 %indirectarg9, ptr align 8 %indirectarg10, i32 105) #5, !dbg !1980
  unreachable, !dbg !1980

panic12:                                          ; preds = %checkok11
  store i64 2, ptr %taddr13, align 8
  %15 = insertvalue %any undef, ptr %taddr13, 0
  %16 = insertvalue %any %15, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %10, ptr %taddr14, align 8
  %17 = insertvalue %any undef, ptr %taddr14, 0
  %18 = insertvalue %any %17, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg15, align 8
  store %"char[]" { ptr @.file.110, i64 11 }, ptr %indirectarg16, align 8
  store %"char[]" { ptr @.func, i64 8 }, ptr %indirectarg17, align 8
  store %any %16, ptr %varargslots, align 16
  %ptradd18 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %18, ptr %ptradd18, align 16
  %19 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %19, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg19, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg15, ptr align 8 %indirectarg16, ptr align 8 %indirectarg17, i32 105, ptr align 8 %indirectarg19) #5, !dbg !1980
  unreachable, !dbg !1980
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i16 @std.math.random.Sfc16Random.next_short(ptr %0) #0 comdat !dbg !1982 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %seed = alloca ptr, align 8
  %s = alloca ptr, align 8
  %result = alloca i16, align 2
  %taddr = alloca i64, align 8
  %taddr4 = alloca i64, align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg7 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg8 = alloca %"any[]", align 8
  %taddr12 = alloca i64, align 8
  %taddr13 = alloca i64, align 8
  %indirectarg14 = alloca %"char[]", align 8
  %indirectarg15 = alloca %"char[]", align 8
  %indirectarg16 = alloca %"char[]", align 8
  %varargslots17 = alloca [2 x %any], align 16
  %indirectarg20 = alloca %"any[]", align 8
  %taddr25 = alloca i64, align 8
  %taddr26 = alloca i64, align 8
  %indirectarg27 = alloca %"char[]", align 8
  %indirectarg28 = alloca %"char[]", align 8
  %indirectarg29 = alloca %"char[]", align 8
  %varargslots30 = alloca [2 x %any], align 16
  %indirectarg33 = alloca %"any[]", align 8
  %taddr39 = alloca i64, align 8
  %taddr40 = alloca i64, align 8
  %indirectarg41 = alloca %"char[]", align 8
  %indirectarg42 = alloca %"char[]", align 8
  %indirectarg43 = alloca %"char[]", align 8
  %varargslots44 = alloca [2 x %any], align 16
  %indirectarg47 = alloca %"any[]", align 8
  %taddr52 = alloca i64, align 8
  %taddr53 = alloca i64, align 8
  %indirectarg54 = alloca %"char[]", align 8
  %indirectarg55 = alloca %"char[]", align 8
  %indirectarg56 = alloca %"char[]", align 8
  %varargslots57 = alloca [2 x %any], align 16
  %indirectarg60 = alloca %"any[]", align 8
  %taddr65 = alloca i64, align 8
  %taddr66 = alloca i64, align 8
  %indirectarg67 = alloca %"char[]", align 8
  %indirectarg68 = alloca %"char[]", align 8
  %indirectarg69 = alloca %"char[]", align 8
  %varargslots70 = alloca [2 x %any], align 16
  %indirectarg73 = alloca %"any[]", align 8
  %taddr77 = alloca i64, align 8
  %taddr78 = alloca i64, align 8
  %indirectarg79 = alloca %"char[]", align 8
  %indirectarg80 = alloca %"char[]", align 8
  %indirectarg81 = alloca %"char[]", align 8
  %varargslots82 = alloca [2 x %any], align 16
  %indirectarg85 = alloca %"any[]", align 8
  %taddr90 = alloca i64, align 8
  %taddr91 = alloca i64, align 8
  %indirectarg92 = alloca %"char[]", align 8
  %indirectarg93 = alloca %"char[]", align 8
  %indirectarg94 = alloca %"char[]", align 8
  %varargslots95 = alloca [2 x %any], align 16
  %indirectarg98 = alloca %"any[]", align 8
  %taddr105 = alloca i64, align 8
  %taddr106 = alloca i64, align 8
  %indirectarg107 = alloca %"char[]", align 8
  %indirectarg108 = alloca %"char[]", align 8
  %indirectarg109 = alloca %"char[]", align 8
  %varargslots110 = alloca [2 x %any], align 16
  %indirectarg113 = alloca %"any[]", align 8
  %taddr117 = alloca i64, align 8
  %taddr118 = alloca i64, align 8
  %indirectarg119 = alloca %"char[]", align 8
  %indirectarg120 = alloca %"char[]", align 8
  %indirectarg121 = alloca %"char[]", align 8
  %varargslots122 = alloca [2 x %any], align 16
  %indirectarg125 = alloca %"any[]", align 8
  %self = alloca i16, align 2
  %shift = alloca i16, align 2
  %taddr133 = alloca i64, align 8
  %taddr134 = alloca i64, align 8
  %indirectarg135 = alloca %"char[]", align 8
  %indirectarg136 = alloca %"char[]", align 8
  %indirectarg137 = alloca %"char[]", align 8
  %varargslots138 = alloca [2 x %any], align 16
  %indirectarg141 = alloca %"any[]", align 8
  %taddr145 = alloca i64, align 8
  %taddr146 = alloca i64, align 8
  %indirectarg147 = alloca %"char[]", align 8
  %indirectarg148 = alloca %"char[]", align 8
  %indirectarg149 = alloca %"char[]", align 8
  %varargslots150 = alloca [2 x %any], align 16
  %indirectarg153 = alloca %"any[]", align 8
  %1 = icmp eq ptr %0, null, !dbg !1985
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1985
  br i1 %2, label %panic, label %checkok, !dbg !1985

checkok:                                          ; preds = %entry
  store ptr %0, ptr %seed, align 8
    #dbg_declare(ptr %seed, !1986, !DIExpression(), !1987)
    #dbg_declare(ptr %s, !1988, !DIExpression(), !1989)
  %3 = load ptr, ptr %seed, align 8, !dbg !1989
  store ptr %3, ptr %s, align 8, !dbg !1989
    #dbg_declare(ptr %result, !1990, !DIExpression(), !1991)
  %4 = load ptr, ptr %s, align 8, !dbg !1991
  %5 = ptrtoint ptr %4 to i64, !dbg !1991
  %6 = urem i64 %5, 2, !dbg !1991
  %7 = icmp ne i64 %6, 0, !dbg !1991
  %8 = call i1 @llvm.expect.i1(i1 %7, i1 false), !dbg !1991
  br i1 %8, label %panic3, label %checkok9, !dbg !1991

checkok9:                                         ; preds = %checkok
  %9 = load i16, ptr %4, align 2, !dbg !1991
  %zext = zext i16 %9 to i32, !dbg !1991
  %10 = load ptr, ptr %s, align 8, !dbg !1991
  %ptradd10 = getelementptr inbounds i8, ptr %10, i64 2, !dbg !1991
  %11 = ptrtoint ptr %ptradd10 to i64, !dbg !1991
  %12 = urem i64 %11, 2, !dbg !1991
  %13 = icmp ne i64 %12, 0, !dbg !1991
  %14 = call i1 @llvm.expect.i1(i1 %13, i1 false), !dbg !1991
  br i1 %14, label %panic11, label %checkok21, !dbg !1991

checkok21:                                        ; preds = %checkok9
  %15 = load i16, ptr %ptradd10, align 2, !dbg !1991
  %zext22 = zext i16 %15 to i32, !dbg !1991
  %add = add i32 %zext, %zext22, !dbg !1991
  %16 = load ptr, ptr %s, align 8, !dbg !1991
  %ptradd23 = getelementptr inbounds i8, ptr %16, i64 6, !dbg !1991
  %17 = ptrtoint ptr %ptradd23 to i64, !dbg !1991
  %18 = urem i64 %17, 2, !dbg !1991
  %19 = icmp ne i64 %18, 0, !dbg !1991
  %20 = call i1 @llvm.expect.i1(i1 %19, i1 false), !dbg !1991
  br i1 %20, label %panic24, label %checkok34, !dbg !1991

checkok34:                                        ; preds = %checkok21
  %21 = load i16, ptr %ptradd23, align 2, !dbg !1991
  %zext35 = zext i16 %21 to i32, !dbg !1991
  %add36 = add i32 %add, %zext35, !dbg !1991
  %trunc = trunc i32 %add36 to i16, !dbg !1991
  store i16 %trunc, ptr %result, align 2, !dbg !1991
  %22 = load ptr, ptr %s, align 8, !dbg !1992
  %ptradd37 = getelementptr inbounds i8, ptr %22, i64 2, !dbg !1992
  %23 = ptrtoint ptr %ptradd37 to i64, !dbg !1992
  %24 = urem i64 %23, 2, !dbg !1992
  %25 = icmp ne i64 %24, 0, !dbg !1992
  %26 = call i1 @llvm.expect.i1(i1 %25, i1 false), !dbg !1992
  br i1 %26, label %panic38, label %checkok48, !dbg !1992

checkok48:                                        ; preds = %checkok34
  %27 = load i16, ptr %ptradd37, align 2, !dbg !1992
  %zext49 = zext i16 %27 to i32, !dbg !1992
  %28 = load ptr, ptr %s, align 8, !dbg !1992
  %ptradd50 = getelementptr inbounds i8, ptr %28, i64 2, !dbg !1992
  %29 = ptrtoint ptr %ptradd50 to i64, !dbg !1992
  %30 = urem i64 %29, 2, !dbg !1992
  %31 = icmp ne i64 %30, 0, !dbg !1992
  %32 = call i1 @llvm.expect.i1(i1 %31, i1 false), !dbg !1992
  br i1 %32, label %panic51, label %checkok61, !dbg !1992

checkok61:                                        ; preds = %checkok48
  %33 = load i16, ptr %ptradd50, align 2, !dbg !1992
  %zext62 = zext i16 %33 to i32, !dbg !1992
  %lshr = lshr i32 %zext62, 2, !dbg !1992
  %34 = freeze i32 %lshr, !dbg !1992
  %xor = xor i32 %zext49, %34, !dbg !1992
  %trunc63 = trunc i32 %xor to i16, !dbg !1992
  %35 = load ptr, ptr %s, align 8, !dbg !1992
  %36 = ptrtoint ptr %35 to i64, !dbg !1992
  %37 = urem i64 %36, 2, !dbg !1992
  %38 = icmp ne i64 %37, 0, !dbg !1992
  %39 = call i1 @llvm.expect.i1(i1 %38, i1 false), !dbg !1992
  br i1 %39, label %panic64, label %checkok74, !dbg !1992

checkok74:                                        ; preds = %checkok61
  store i16 %trunc63, ptr %35, align 2, !dbg !1992
  %40 = load ptr, ptr %s, align 8, !dbg !1993
  %ptradd75 = getelementptr inbounds i8, ptr %40, i64 4, !dbg !1993
  %41 = ptrtoint ptr %ptradd75 to i64, !dbg !1993
  %42 = urem i64 %41, 2, !dbg !1993
  %43 = icmp ne i64 %42, 0, !dbg !1993
  %44 = call i1 @llvm.expect.i1(i1 %43, i1 false), !dbg !1993
  br i1 %44, label %panic76, label %checkok86, !dbg !1993

checkok86:                                        ; preds = %checkok74
  %45 = load i16, ptr %ptradd75, align 2, !dbg !1993
  %zext87 = zext i16 %45 to i32, !dbg !1993
  %46 = load ptr, ptr %s, align 8, !dbg !1993
  %ptradd88 = getelementptr inbounds i8, ptr %46, i64 4, !dbg !1993
  %47 = ptrtoint ptr %ptradd88 to i64, !dbg !1993
  %48 = urem i64 %47, 2, !dbg !1993
  %49 = icmp ne i64 %48, 0, !dbg !1993
  %50 = call i1 @llvm.expect.i1(i1 %49, i1 false), !dbg !1993
  br i1 %50, label %panic89, label %checkok99, !dbg !1993

checkok99:                                        ; preds = %checkok86
  %51 = load i16, ptr %ptradd88, align 2, !dbg !1993
  %zext100 = zext i16 %51 to i32, !dbg !1993
  %shl = shl i32 %zext100, 3, !dbg !1993
  %52 = freeze i32 %shl, !dbg !1993
  %add101 = add i32 %zext87, %52, !dbg !1993
  %trunc102 = trunc i32 %add101 to i16, !dbg !1993
  %53 = load ptr, ptr %s, align 8, !dbg !1993
  %ptradd103 = getelementptr inbounds i8, ptr %53, i64 2, !dbg !1993
  %54 = ptrtoint ptr %ptradd103 to i64, !dbg !1993
  %55 = urem i64 %54, 2, !dbg !1993
  %56 = icmp ne i64 %55, 0, !dbg !1993
  %57 = call i1 @llvm.expect.i1(i1 %56, i1 false), !dbg !1993
  br i1 %57, label %panic104, label %checkok114, !dbg !1993

checkok114:                                       ; preds = %checkok99
  store i16 %trunc102, ptr %ptradd103, align 2, !dbg !1993
  %58 = load ptr, ptr %s, align 8, !dbg !1994
  %ptradd115 = getelementptr inbounds i8, ptr %58, i64 4, !dbg !1994
  %59 = ptrtoint ptr %ptradd115 to i64, !dbg !1994
  %60 = urem i64 %59, 2, !dbg !1994
  %61 = icmp ne i64 %60, 0, !dbg !1994
  %62 = call i1 @llvm.expect.i1(i1 %61, i1 false), !dbg !1994
  br i1 %62, label %panic116, label %checkok126, !dbg !1994

checkok126:                                       ; preds = %checkok114
  %63 = load i16, ptr %ptradd115, align 2
  store i16 %63, ptr %self, align 2
  store i16 12, ptr %shift, align 2
  %64 = load i16, ptr %self, align 2, !dbg !1995
  %65 = load i16, ptr %self, align 2, !dbg !1995
  %66 = load i16, ptr %shift, align 2, !dbg !1995
  %67 = call i16 @llvm.fshr.i16(i16 %64, i16 %65, i16 %66), !dbg !1995
  %zext127 = zext i16 %67 to i32, !dbg !1995
  %68 = load i16, ptr %result, align 2, !dbg !1994
  %zext128 = zext i16 %68 to i32, !dbg !1994
  %add129 = add i32 %zext127, %zext128, !dbg !1994
  %trunc130 = trunc i32 %add129 to i16, !dbg !1994
  %69 = load ptr, ptr %s, align 8, !dbg !1994
  %ptradd131 = getelementptr inbounds i8, ptr %69, i64 4, !dbg !1994
  %70 = ptrtoint ptr %ptradd131 to i64, !dbg !1994
  %71 = urem i64 %70, 2, !dbg !1994
  %72 = icmp ne i64 %71, 0, !dbg !1994
  %73 = call i1 @llvm.expect.i1(i1 %72, i1 false), !dbg !1994
  br i1 %73, label %panic132, label %checkok142, !dbg !1994

checkok142:                                       ; preds = %checkok126
  store i16 %trunc130, ptr %ptradd131, align 2, !dbg !1994
  %74 = load ptr, ptr %s, align 8, !dbg !1997
  %ptradd143 = getelementptr inbounds i8, ptr %74, i64 6, !dbg !1997
  %75 = ptrtoint ptr %ptradd143 to i64, !dbg !1997
  %76 = urem i64 %75, 2, !dbg !1997
  %77 = icmp ne i64 %76, 0, !dbg !1997
  %78 = call i1 @llvm.expect.i1(i1 %77, i1 false), !dbg !1997
  br i1 %78, label %panic144, label %checkok154, !dbg !1997

checkok154:                                       ; preds = %checkok142
  %79 = load i16, ptr %ptradd143, align 2, !dbg !1997
  %add155 = add i16 %79, -25033, !dbg !1997
  store i16 %add155, ptr %ptradd143, align 2, !dbg !1997
  %80 = load i16, ptr %result, align 2, !dbg !1998
  ret i16 %80, !dbg !1998

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.121, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.110, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.23, i64 10 }, ptr %indirectarg2, align 8
  %81 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %81(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 109) #5, !dbg !1987
  unreachable, !dbg !1987

panic3:                                           ; preds = %checkok
  store i64 2, ptr %taddr, align 8
  %82 = insertvalue %any undef, ptr %taddr, 0
  %83 = insertvalue %any %82, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %6, ptr %taddr4, align 8
  %84 = insertvalue %any undef, ptr %taddr4, 0
  %85 = insertvalue %any %84, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.file.110, i64 11 }, ptr %indirectarg6, align 8
  store %"char[]" { ptr @.func.23, i64 10 }, ptr %indirectarg7, align 8
  store %any %83, ptr %varargslots, align 16
  %ptradd = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %85, ptr %ptradd, align 16
  %86 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %86, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg8, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, ptr align 8 %indirectarg7, i32 112, ptr align 8 %indirectarg8) #5, !dbg !1991
  unreachable, !dbg !1991

panic11:                                          ; preds = %checkok9
  store i64 2, ptr %taddr12, align 8
  %87 = insertvalue %any undef, ptr %taddr12, 0
  %88 = insertvalue %any %87, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %12, ptr %taddr13, align 8
  %89 = insertvalue %any undef, ptr %taddr13, 0
  %90 = insertvalue %any %89, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg14, align 8
  store %"char[]" { ptr @.file.110, i64 11 }, ptr %indirectarg15, align 8
  store %"char[]" { ptr @.func.23, i64 10 }, ptr %indirectarg16, align 8
  store %any %88, ptr %varargslots17, align 16
  %ptradd18 = getelementptr inbounds i8, ptr %varargslots17, i64 16
  store %any %90, ptr %ptradd18, align 16
  %91 = insertvalue %"any[]" undef, ptr %varargslots17, 0
  %"$$temp19" = insertvalue %"any[]" %91, i64 2, 1
  store %"any[]" %"$$temp19", ptr %indirectarg20, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg14, ptr align 8 %indirectarg15, ptr align 8 %indirectarg16, i32 112, ptr align 8 %indirectarg20) #5, !dbg !1991
  unreachable, !dbg !1991

panic24:                                          ; preds = %checkok21
  store i64 2, ptr %taddr25, align 8
  %92 = insertvalue %any undef, ptr %taddr25, 0
  %93 = insertvalue %any %92, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %18, ptr %taddr26, align 8
  %94 = insertvalue %any undef, ptr %taddr26, 0
  %95 = insertvalue %any %94, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg27, align 8
  store %"char[]" { ptr @.file.110, i64 11 }, ptr %indirectarg28, align 8
  store %"char[]" { ptr @.func.23, i64 10 }, ptr %indirectarg29, align 8
  store %any %93, ptr %varargslots30, align 16
  %ptradd31 = getelementptr inbounds i8, ptr %varargslots30, i64 16
  store %any %95, ptr %ptradd31, align 16
  %96 = insertvalue %"any[]" undef, ptr %varargslots30, 0
  %"$$temp32" = insertvalue %"any[]" %96, i64 2, 1
  store %"any[]" %"$$temp32", ptr %indirectarg33, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg27, ptr align 8 %indirectarg28, ptr align 8 %indirectarg29, i32 112, ptr align 8 %indirectarg33) #5, !dbg !1991
  unreachable, !dbg !1991

panic38:                                          ; preds = %checkok34
  store i64 2, ptr %taddr39, align 8
  %97 = insertvalue %any undef, ptr %taddr39, 0
  %98 = insertvalue %any %97, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %24, ptr %taddr40, align 8
  %99 = insertvalue %any undef, ptr %taddr40, 0
  %100 = insertvalue %any %99, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg41, align 8
  store %"char[]" { ptr @.file.110, i64 11 }, ptr %indirectarg42, align 8
  store %"char[]" { ptr @.func.23, i64 10 }, ptr %indirectarg43, align 8
  store %any %98, ptr %varargslots44, align 16
  %ptradd45 = getelementptr inbounds i8, ptr %varargslots44, i64 16
  store %any %100, ptr %ptradd45, align 16
  %101 = insertvalue %"any[]" undef, ptr %varargslots44, 0
  %"$$temp46" = insertvalue %"any[]" %101, i64 2, 1
  store %"any[]" %"$$temp46", ptr %indirectarg47, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg41, ptr align 8 %indirectarg42, ptr align 8 %indirectarg43, i32 113, ptr align 8 %indirectarg47) #5, !dbg !1992
  unreachable, !dbg !1992

panic51:                                          ; preds = %checkok48
  store i64 2, ptr %taddr52, align 8
  %102 = insertvalue %any undef, ptr %taddr52, 0
  %103 = insertvalue %any %102, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %30, ptr %taddr53, align 8
  %104 = insertvalue %any undef, ptr %taddr53, 0
  %105 = insertvalue %any %104, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg54, align 8
  store %"char[]" { ptr @.file.110, i64 11 }, ptr %indirectarg55, align 8
  store %"char[]" { ptr @.func.23, i64 10 }, ptr %indirectarg56, align 8
  store %any %103, ptr %varargslots57, align 16
  %ptradd58 = getelementptr inbounds i8, ptr %varargslots57, i64 16
  store %any %105, ptr %ptradd58, align 16
  %106 = insertvalue %"any[]" undef, ptr %varargslots57, 0
  %"$$temp59" = insertvalue %"any[]" %106, i64 2, 1
  store %"any[]" %"$$temp59", ptr %indirectarg60, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg54, ptr align 8 %indirectarg55, ptr align 8 %indirectarg56, i32 113, ptr align 8 %indirectarg60) #5, !dbg !1992
  unreachable, !dbg !1992

panic64:                                          ; preds = %checkok61
  store i64 2, ptr %taddr65, align 8
  %107 = insertvalue %any undef, ptr %taddr65, 0
  %108 = insertvalue %any %107, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %37, ptr %taddr66, align 8
  %109 = insertvalue %any undef, ptr %taddr66, 0
  %110 = insertvalue %any %109, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg67, align 8
  store %"char[]" { ptr @.file.110, i64 11 }, ptr %indirectarg68, align 8
  store %"char[]" { ptr @.func.23, i64 10 }, ptr %indirectarg69, align 8
  store %any %108, ptr %varargslots70, align 16
  %ptradd71 = getelementptr inbounds i8, ptr %varargslots70, i64 16
  store %any %110, ptr %ptradd71, align 16
  %111 = insertvalue %"any[]" undef, ptr %varargslots70, 0
  %"$$temp72" = insertvalue %"any[]" %111, i64 2, 1
  store %"any[]" %"$$temp72", ptr %indirectarg73, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg67, ptr align 8 %indirectarg68, ptr align 8 %indirectarg69, i32 113, ptr align 8 %indirectarg73) #5, !dbg !1992
  unreachable, !dbg !1992

panic76:                                          ; preds = %checkok74
  store i64 2, ptr %taddr77, align 8
  %112 = insertvalue %any undef, ptr %taddr77, 0
  %113 = insertvalue %any %112, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %42, ptr %taddr78, align 8
  %114 = insertvalue %any undef, ptr %taddr78, 0
  %115 = insertvalue %any %114, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg79, align 8
  store %"char[]" { ptr @.file.110, i64 11 }, ptr %indirectarg80, align 8
  store %"char[]" { ptr @.func.23, i64 10 }, ptr %indirectarg81, align 8
  store %any %113, ptr %varargslots82, align 16
  %ptradd83 = getelementptr inbounds i8, ptr %varargslots82, i64 16
  store %any %115, ptr %ptradd83, align 16
  %116 = insertvalue %"any[]" undef, ptr %varargslots82, 0
  %"$$temp84" = insertvalue %"any[]" %116, i64 2, 1
  store %"any[]" %"$$temp84", ptr %indirectarg85, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg79, ptr align 8 %indirectarg80, ptr align 8 %indirectarg81, i32 114, ptr align 8 %indirectarg85) #5, !dbg !1993
  unreachable, !dbg !1993

panic89:                                          ; preds = %checkok86
  store i64 2, ptr %taddr90, align 8
  %117 = insertvalue %any undef, ptr %taddr90, 0
  %118 = insertvalue %any %117, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %48, ptr %taddr91, align 8
  %119 = insertvalue %any undef, ptr %taddr91, 0
  %120 = insertvalue %any %119, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg92, align 8
  store %"char[]" { ptr @.file.110, i64 11 }, ptr %indirectarg93, align 8
  store %"char[]" { ptr @.func.23, i64 10 }, ptr %indirectarg94, align 8
  store %any %118, ptr %varargslots95, align 16
  %ptradd96 = getelementptr inbounds i8, ptr %varargslots95, i64 16
  store %any %120, ptr %ptradd96, align 16
  %121 = insertvalue %"any[]" undef, ptr %varargslots95, 0
  %"$$temp97" = insertvalue %"any[]" %121, i64 2, 1
  store %"any[]" %"$$temp97", ptr %indirectarg98, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg92, ptr align 8 %indirectarg93, ptr align 8 %indirectarg94, i32 114, ptr align 8 %indirectarg98) #5, !dbg !1993
  unreachable, !dbg !1993

panic104:                                         ; preds = %checkok99
  store i64 2, ptr %taddr105, align 8
  %122 = insertvalue %any undef, ptr %taddr105, 0
  %123 = insertvalue %any %122, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %55, ptr %taddr106, align 8
  %124 = insertvalue %any undef, ptr %taddr106, 0
  %125 = insertvalue %any %124, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg107, align 8
  store %"char[]" { ptr @.file.110, i64 11 }, ptr %indirectarg108, align 8
  store %"char[]" { ptr @.func.23, i64 10 }, ptr %indirectarg109, align 8
  store %any %123, ptr %varargslots110, align 16
  %ptradd111 = getelementptr inbounds i8, ptr %varargslots110, i64 16
  store %any %125, ptr %ptradd111, align 16
  %126 = insertvalue %"any[]" undef, ptr %varargslots110, 0
  %"$$temp112" = insertvalue %"any[]" %126, i64 2, 1
  store %"any[]" %"$$temp112", ptr %indirectarg113, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg107, ptr align 8 %indirectarg108, ptr align 8 %indirectarg109, i32 114, ptr align 8 %indirectarg113) #5, !dbg !1993
  unreachable, !dbg !1993

panic116:                                         ; preds = %checkok114
  store i64 2, ptr %taddr117, align 8
  %127 = insertvalue %any undef, ptr %taddr117, 0
  %128 = insertvalue %any %127, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %60, ptr %taddr118, align 8
  %129 = insertvalue %any undef, ptr %taddr118, 0
  %130 = insertvalue %any %129, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg119, align 8
  store %"char[]" { ptr @.file.110, i64 11 }, ptr %indirectarg120, align 8
  store %"char[]" { ptr @.func.23, i64 10 }, ptr %indirectarg121, align 8
  store %any %128, ptr %varargslots122, align 16
  %ptradd123 = getelementptr inbounds i8, ptr %varargslots122, i64 16
  store %any %130, ptr %ptradd123, align 16
  %131 = insertvalue %"any[]" undef, ptr %varargslots122, 0
  %"$$temp124" = insertvalue %"any[]" %131, i64 2, 1
  store %"any[]" %"$$temp124", ptr %indirectarg125, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg119, ptr align 8 %indirectarg120, ptr align 8 %indirectarg121, i32 115, ptr align 8 %indirectarg125) #5, !dbg !1994
  unreachable, !dbg !1994

panic132:                                         ; preds = %checkok126
  store i64 2, ptr %taddr133, align 8
  %132 = insertvalue %any undef, ptr %taddr133, 0
  %133 = insertvalue %any %132, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %71, ptr %taddr134, align 8
  %134 = insertvalue %any undef, ptr %taddr134, 0
  %135 = insertvalue %any %134, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg135, align 8
  store %"char[]" { ptr @.file.110, i64 11 }, ptr %indirectarg136, align 8
  store %"char[]" { ptr @.func.23, i64 10 }, ptr %indirectarg137, align 8
  store %any %133, ptr %varargslots138, align 16
  %ptradd139 = getelementptr inbounds i8, ptr %varargslots138, i64 16
  store %any %135, ptr %ptradd139, align 16
  %136 = insertvalue %"any[]" undef, ptr %varargslots138, 0
  %"$$temp140" = insertvalue %"any[]" %136, i64 2, 1
  store %"any[]" %"$$temp140", ptr %indirectarg141, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg135, ptr align 8 %indirectarg136, ptr align 8 %indirectarg137, i32 115, ptr align 8 %indirectarg141) #5, !dbg !1994
  unreachable, !dbg !1994

panic144:                                         ; preds = %checkok142
  store i64 2, ptr %taddr145, align 8
  %137 = insertvalue %any undef, ptr %taddr145, 0
  %138 = insertvalue %any %137, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %76, ptr %taddr146, align 8
  %139 = insertvalue %any undef, ptr %taddr146, 0
  %140 = insertvalue %any %139, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg147, align 8
  store %"char[]" { ptr @.file.110, i64 11 }, ptr %indirectarg148, align 8
  store %"char[]" { ptr @.func.23, i64 10 }, ptr %indirectarg149, align 8
  store %any %138, ptr %varargslots150, align 16
  %ptradd151 = getelementptr inbounds i8, ptr %varargslots150, i64 16
  store %any %140, ptr %ptradd151, align 16
  %141 = insertvalue %"any[]" undef, ptr %varargslots150, 0
  %"$$temp152" = insertvalue %"any[]" %141, i64 2, 1
  store %"any[]" %"$$temp152", ptr %indirectarg153, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg147, ptr align 8 %indirectarg148, ptr align 8 %indirectarg149, i32 116, ptr align 8 %indirectarg153) #5, !dbg !1997
  unreachable, !dbg !1997
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.math.random.Sfc16Random.next_bytes(ptr %0, ptr align 8 %1) #0 comdat !dbg !1999 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %bytes = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i16, align 2
  %taddr = alloca ptr, align 8
  %taddr9 = alloca i64, align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg13 = alloca %"any[]", align 8
  %taddr17 = alloca i64, align 8
  %taddr18 = alloca i64, align 8
  %indirectarg19 = alloca %"char[]", align 8
  %indirectarg20 = alloca %"char[]", align 8
  %indirectarg21 = alloca %"char[]", align 8
  %varargslots22 = alloca [2 x %any], align 16
  %indirectarg25 = alloca %"any[]", align 8
  %taddr29 = alloca i64, align 8
  %taddr30 = alloca i64, align 8
  %indirectarg31 = alloca %"char[]", align 8
  %indirectarg32 = alloca %"char[]", align 8
  %indirectarg33 = alloca %"char[]", align 8
  %varargslots34 = alloca [2 x %any], align 16
  %indirectarg37 = alloca %"any[]", align 8
  %taddr39 = alloca ptr, align 8
  %taddr42 = alloca i64, align 8
  %taddr43 = alloca i64, align 8
  %indirectarg44 = alloca %"char[]", align 8
  %indirectarg45 = alloca %"char[]", align 8
  %indirectarg46 = alloca %"char[]", align 8
  %varargslots47 = alloca [2 x %any], align 16
  %indirectarg50 = alloca %"any[]", align 8
  %taddr54 = alloca i64, align 8
  %taddr55 = alloca i64, align 8
  %indirectarg56 = alloca %"char[]", align 8
  %indirectarg57 = alloca %"char[]", align 8
  %indirectarg58 = alloca %"char[]", align 8
  %varargslots59 = alloca [2 x %any], align 16
  %indirectarg62 = alloca %"any[]", align 8
  %taddr66 = alloca i64, align 8
  %taddr67 = alloca i64, align 8
  %indirectarg68 = alloca %"char[]", align 8
  %indirectarg69 = alloca %"char[]", align 8
  %indirectarg70 = alloca %"char[]", align 8
  %varargslots71 = alloca [2 x %any], align 16
  %indirectarg74 = alloca %"any[]", align 8
  %taddr79 = alloca i64, align 8
  %taddr80 = alloca i64, align 8
  %indirectarg81 = alloca %"char[]", align 8
  %indirectarg82 = alloca %"char[]", align 8
  %indirectarg83 = alloca %"char[]", align 8
  %varargslots84 = alloca [2 x %any], align 16
  %indirectarg87 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg91 = alloca %"char[]", align 8
  %indirectarg92 = alloca %"char[]", align 8
  %indirectarg93 = alloca %"char[]", align 8
  %indirectarg94 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !2000
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !2000
  br i1 %3, label %panic, label %checkok, !dbg !2000

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2001, !DIExpression(), !2000)
    #dbg_declare(ptr %1, !2002, !DIExpression(), !2000)
  %ptradd = getelementptr inbounds i8, ptr %1, i64 8, !dbg !2003
  %4 = load i64, ptr %ptradd, align 8, !dbg !2003
  %lt = icmp ult i64 0, %4, !dbg !2003
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !2003

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.13, i64 34 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.file.110, i64 11 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg5, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, i32 121) #5, !dbg !2003
  unreachable, !dbg !2003

assert_ok:                                        ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes, ptr align 8 %1, i32 16, i1 false)
    #dbg_declare(ptr %len, !2005, !DIExpression(), !2007)
  %ptradd6 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !2007
  %6 = load i64, ptr %ptradd6, align 8, !dbg !2007
  store i64 %6, ptr %len, align 8, !dbg !2007
  br label %loop.cond, !dbg !2008

loop.cond:                                        ; preds = %checkok88, %assert_ok
  %7 = load i64, ptr %len, align 8, !dbg !2009
  %lt7 = icmp ult i64 0, %7, !dbg !2009
  br i1 %lt7, label %loop.body, label %loop.exit, !dbg !2009

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %value, !2011, !DIExpression(), !2013)
  %8 = load ptr, ptr %self, align 8, !dbg !2014
  %9 = call i16 @std.math.random.Sfc16Random.next_short(ptr %8), !dbg !2013
  store i16 %9, ptr %value, align 2, !dbg !2013
  %10 = load i64, ptr %len, align 8, !dbg !2015
  %le = icmp ule i64 %10, 2, !dbg !2015
  br i1 %le, label %if.then, label %if.exit, !dbg !2015

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %11 = load ptr, ptr %taddr, align 8
  %12 = load i64, ptr %len, align 8, !dbg !2016
  %add = add i64 0, %12, !dbg !2016
  %gt = icmp ugt i64 0, %add, !dbg !2016
  %sub = sub i64 %add, 0, !dbg !2016
  %13 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !2016
  br i1 %13, label %panic8, label %checkok14, !dbg !2016

checkok14:                                        ; preds = %if.then
  %size = sub i64 %add, 0, !dbg !2016
  %14 = insertvalue %"char[]" undef, ptr %11, 0, !dbg !2016
  %15 = insertvalue %"char[]" %14, i64 %size, 1, !dbg !2016
  %16 = load %"char[]", ptr %bytes, align 8, !dbg !2016
  %17 = extractvalue %"char[]" %16, 0, !dbg !2016
  %18 = extractvalue %"char[]" %16, 1, !dbg !2016
  %gt15 = icmp ugt i64 0, %18, !dbg !2016
  %19 = call i1 @llvm.expect.i1(i1 %gt15, i1 false), !dbg !2016
  br i1 %19, label %panic16, label %checkok26, !dbg !2016

checkok26:                                        ; preds = %checkok14
  %size27 = sub i64 %18, 0, !dbg !2016
  %20 = insertvalue %"char[]" undef, ptr %17, 0, !dbg !2016
  %21 = insertvalue %"char[]" %20, i64 %size27, 1, !dbg !2016
  %22 = extractvalue %"char[]" %21, 0, !dbg !2016
  %23 = extractvalue %"char[]" %15, 0, !dbg !2016
  %24 = extractvalue %"char[]" %15, 1, !dbg !2016
  %25 = extractvalue %"char[]" %21, 1, !dbg !2016
  %neq = icmp ne i64 %25, %24, !dbg !2016
  %26 = call i1 @llvm.expect.i1(i1 %neq, i1 false), !dbg !2016
  br i1 %26, label %panic28, label %checkok38, !dbg !2016

checkok38:                                        ; preds = %checkok26
  %27 = mul i64 %24, 1, !dbg !2016
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %22, ptr align 1 %23, i64 %27, i1 false), !dbg !2016
  br label %expr_block.exit, !dbg !2018

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr39, align 8
  %28 = load ptr, ptr %taddr39, align 8
  %29 = insertvalue %"char[]" undef, ptr %28, 0
  %30 = insertvalue %"char[]" %29, i64 2, 1
  %31 = load %"char[]", ptr %bytes, align 8, !dbg !2019
  %32 = extractvalue %"char[]" %31, 0, !dbg !2019
  %33 = extractvalue %"char[]" %31, 1, !dbg !2019
  %gt40 = icmp sgt i64 0, %33, !dbg !2019
  %34 = call i1 @llvm.expect.i1(i1 %gt40, i1 false), !dbg !2019
  br i1 %34, label %panic41, label %checkok51, !dbg !2019

checkok51:                                        ; preds = %if.exit
  %lt52 = icmp slt i64 %33, 2, !dbg !2019
  %35 = call i1 @llvm.expect.i1(i1 %lt52, i1 false), !dbg !2019
  br i1 %35, label %panic53, label %checkok63, !dbg !2019

checkok63:                                        ; preds = %checkok51
  %36 = insertvalue %"char[]" undef, ptr %32, 0, !dbg !2019
  %37 = insertvalue %"char[]" %36, i64 2, 1, !dbg !2019
  %38 = extractvalue %"char[]" %37, 0, !dbg !2019
  %39 = extractvalue %"char[]" %30, 0, !dbg !2019
  %40 = extractvalue %"char[]" %30, 1, !dbg !2019
  %41 = extractvalue %"char[]" %37, 1, !dbg !2019
  %neq64 = icmp ne i64 %41, %40, !dbg !2019
  %42 = call i1 @llvm.expect.i1(i1 %neq64, i1 false), !dbg !2019
  br i1 %42, label %panic65, label %checkok75, !dbg !2019

checkok75:                                        ; preds = %checkok63
  %43 = mul i64 %40, 1, !dbg !2019
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %38, ptr align 1 %39, i64 %43, i1 false), !dbg !2019
  %44 = load i64, ptr %len, align 8, !dbg !2020
  %sub76 = sub i64 %44, 2, !dbg !2020
  store i64 %sub76, ptr %len, align 8, !dbg !2020
  %45 = load %"char[]", ptr %bytes, align 8, !dbg !2021
  %46 = extractvalue %"char[]" %45, 0, !dbg !2021
  %47 = extractvalue %"char[]" %45, 1, !dbg !2021
  %gt77 = icmp ugt i64 2, %47, !dbg !2021
  %48 = call i1 @llvm.expect.i1(i1 %gt77, i1 false), !dbg !2021
  br i1 %48, label %panic78, label %checkok88, !dbg !2021

checkok88:                                        ; preds = %checkok75
  %size89 = sub i64 %47, 2, !dbg !2021
  %ptradd90 = getelementptr inbounds i8, ptr %46, i64 2, !dbg !2021
  %49 = insertvalue %"char[]" undef, ptr %ptradd90, 0, !dbg !2021
  %50 = insertvalue %"char[]" %49, i64 %size89, 1, !dbg !2021
  store %"char[]" %50, ptr %bytes, align 8, !dbg !2021
  br label %loop.cond, !dbg !2021

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.122, i64 30 }, ptr %string, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg91, ptr align 8 %string, i32 16, i1 false)
  store %"char[]" { ptr @.str.123, i64 11 }, ptr %indirectarg92, align 8
  store %"char[]" { ptr @.str.124, i64 22 }, ptr %indirectarg93, align 8
  store %"any[]" zeroinitializer, ptr %indirectarg94, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg91, ptr align 8 %indirectarg92, ptr align 8 %indirectarg93, i32 123, ptr align 8 %indirectarg94), !dbg !2022
  unreachable, !dbg !2022

expr_block.exit:                                  ; preds = %checkok38
  ret void, !dbg !2022

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.110, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg2, align 8
  %51 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %51(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 123) #5, !dbg !2000
  unreachable, !dbg !2000

panic8:                                           ; preds = %if.then
  store i64 %sub, ptr %taddr9, align 8
  %52 = insertvalue %any undef, ptr %taddr9, 0
  %53 = insertvalue %any %52, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.14, i64 43 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg12, align 8
  store %any %53, ptr %varargslots, align 16
  %54 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %54, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg13, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, i32 153, ptr align 8 %indirectarg13) #5, !dbg !2016
  unreachable, !dbg !2016

panic16:                                          ; preds = %checkok14
  store i64 %18, ptr %taddr17, align 8
  %55 = insertvalue %any undef, ptr %taddr17, 0
  %56 = insertvalue %any %55, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr18, align 8
  %57 = insertvalue %any undef, ptr %taddr18, 0
  %58 = insertvalue %any %57, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.16, i64 61 }, ptr %indirectarg19, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg20, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg21, align 8
  store %any %56, ptr %varargslots22, align 16
  %ptradd23 = getelementptr inbounds i8, ptr %varargslots22, i64 16
  store %any %58, ptr %ptradd23, align 16
  %59 = insertvalue %"any[]" undef, ptr %varargslots22, 0
  %"$$temp24" = insertvalue %"any[]" %59, i64 2, 1
  store %"any[]" %"$$temp24", ptr %indirectarg25, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg19, ptr align 8 %indirectarg20, ptr align 8 %indirectarg21, i32 153, ptr align 8 %indirectarg25) #5, !dbg !2016
  unreachable, !dbg !2016

panic28:                                          ; preds = %checkok26
  store i64 %25, ptr %taddr29, align 8
  %60 = insertvalue %any undef, ptr %taddr29, 0
  %61 = insertvalue %any %60, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %24, ptr %taddr30, align 8
  %62 = insertvalue %any undef, ptr %taddr30, 0
  %63 = insertvalue %any %62, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 38 }, ptr %indirectarg31, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg32, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg33, align 8
  store %any %61, ptr %varargslots34, align 16
  %ptradd35 = getelementptr inbounds i8, ptr %varargslots34, i64 16
  store %any %63, ptr %ptradd35, align 16
  %64 = insertvalue %"any[]" undef, ptr %varargslots34, 0
  %"$$temp36" = insertvalue %"any[]" %64, i64 2, 1
  store %"any[]" %"$$temp36", ptr %indirectarg37, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg31, ptr align 8 %indirectarg32, ptr align 8 %indirectarg33, i32 153, ptr align 8 %indirectarg37) #5, !dbg !2016
  unreachable, !dbg !2016

panic41:                                          ; preds = %if.exit
  store i64 %33, ptr %taddr42, align 8
  %65 = insertvalue %any undef, ptr %taddr42, 0
  %66 = insertvalue %any %65, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr43, align 8
  %67 = insertvalue %any undef, ptr %taddr43, 0
  %68 = insertvalue %any %67, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.16, i64 61 }, ptr %indirectarg44, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg45, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg46, align 8
  store %any %66, ptr %varargslots47, align 16
  %ptradd48 = getelementptr inbounds i8, ptr %varargslots47, i64 16
  store %any %68, ptr %ptradd48, align 16
  %69 = insertvalue %"any[]" undef, ptr %varargslots47, 0
  %"$$temp49" = insertvalue %"any[]" %69, i64 2, 1
  store %"any[]" %"$$temp49", ptr %indirectarg50, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg44, ptr align 8 %indirectarg45, ptr align 8 %indirectarg46, i32 156, ptr align 8 %indirectarg50) #5, !dbg !2019
  unreachable, !dbg !2019

panic53:                                          ; preds = %checkok51
  store i64 1, ptr %taddr54, align 8
  %70 = insertvalue %any undef, ptr %taddr54, 0
  %71 = insertvalue %any %70, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %33, ptr %taddr55, align 8
  %72 = insertvalue %any undef, ptr %taddr55, 0
  %73 = insertvalue %any %72, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.18, i64 60 }, ptr %indirectarg56, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg57, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg58, align 8
  store %any %71, ptr %varargslots59, align 16
  %ptradd60 = getelementptr inbounds i8, ptr %varargslots59, i64 16
  store %any %73, ptr %ptradd60, align 16
  %74 = insertvalue %"any[]" undef, ptr %varargslots59, 0
  %"$$temp61" = insertvalue %"any[]" %74, i64 2, 1
  store %"any[]" %"$$temp61", ptr %indirectarg62, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg56, ptr align 8 %indirectarg57, ptr align 8 %indirectarg58, i32 156, ptr align 8 %indirectarg62) #5, !dbg !2019
  unreachable, !dbg !2019

panic65:                                          ; preds = %checkok63
  store i64 %41, ptr %taddr66, align 8
  %75 = insertvalue %any undef, ptr %taddr66, 0
  %76 = insertvalue %any %75, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %40, ptr %taddr67, align 8
  %77 = insertvalue %any undef, ptr %taddr67, 0
  %78 = insertvalue %any %77, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 38 }, ptr %indirectarg68, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg69, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg70, align 8
  store %any %76, ptr %varargslots71, align 16
  %ptradd72 = getelementptr inbounds i8, ptr %varargslots71, i64 16
  store %any %78, ptr %ptradd72, align 16
  %79 = insertvalue %"any[]" undef, ptr %varargslots71, 0
  %"$$temp73" = insertvalue %"any[]" %79, i64 2, 1
  store %"any[]" %"$$temp73", ptr %indirectarg74, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg68, ptr align 8 %indirectarg69, ptr align 8 %indirectarg70, i32 156, ptr align 8 %indirectarg74) #5, !dbg !2019
  unreachable, !dbg !2019

panic78:                                          ; preds = %checkok75
  store i64 %47, ptr %taddr79, align 8
  %80 = insertvalue %any undef, ptr %taddr79, 0
  %81 = insertvalue %any %80, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 2, ptr %taddr80, align 8
  %82 = insertvalue %any undef, ptr %taddr80, 0
  %83 = insertvalue %any %82, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.16, i64 61 }, ptr %indirectarg81, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg82, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg83, align 8
  store %any %81, ptr %varargslots84, align 16
  %ptradd85 = getelementptr inbounds i8, ptr %varargslots84, i64 16
  store %any %83, ptr %ptradd85, align 16
  %84 = insertvalue %"any[]" undef, ptr %varargslots84, 0
  %"$$temp86" = insertvalue %"any[]" %84, i64 2, 1
  store %"any[]" %"$$temp86", ptr %indirectarg87, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg81, ptr align 8 %indirectarg82, ptr align 8 %indirectarg83, i32 158, ptr align 8 %indirectarg87) #5, !dbg !2021
  unreachable, !dbg !2021
}

; Function Attrs: nounwind ssp uwtable
define weak_odr <2 x i64> @std.math.random.Sfc16Random.next_int128(ptr %0) #0 comdat !dbg !2025 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %taddr = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !2028
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2028
  br i1 %2, label %panic, label %checkok, !dbg !2028

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2029, !DIExpression(), !2028)
  %3 = load ptr, ptr %self, align 8, !dbg !2030
  %4 = call i64 @std.math.random.Sfc16Random.next_long(ptr %3), !dbg !2032
  %zext = zext i64 %4 to i128, !dbg !2032
  %shl = shl i128 %zext, 64, !dbg !2032
  %5 = freeze i128 %shl, !dbg !2032
  %6 = load ptr, ptr %self, align 8, !dbg !2030
  %7 = call i64 @std.math.random.Sfc16Random.next_long(ptr %6), !dbg !2032
  %zext3 = zext i64 %7 to i128, !dbg !2032
  %add = add i128 %5, %zext3, !dbg !2032
  store i128 %add, ptr %taddr, align 16
  %8 = load <2 x i64>, ptr %taddr, align 16
  ret <2 x i64> %8

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.110, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.21, i64 11 }, ptr %indirectarg2, align 8
  %9 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %9(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 124) #5, !dbg !2028
  unreachable, !dbg !2028
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.math.random.Sfc16Random.next_long(ptr %0) #0 comdat !dbg !2033 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2036
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2036
  br i1 %2, label %panic, label %checkok, !dbg !2036

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2037, !DIExpression(), !2036)
  %3 = load ptr, ptr %self, align 8, !dbg !2038
  %4 = call i32 @std.math.random.Sfc16Random.next_int(ptr %3), !dbg !2040
  %zext = zext i32 %4 to i64, !dbg !2040
  %shl = shl i64 %zext, 32, !dbg !2040
  %5 = freeze i64 %shl, !dbg !2040
  %6 = load ptr, ptr %self, align 8, !dbg !2038
  %7 = call i32 @std.math.random.Sfc16Random.next_int(ptr %6), !dbg !2040
  %zext3 = zext i32 %7 to i64, !dbg !2040
  %add = add i64 %5, %zext3, !dbg !2040
  ret i64 %add, !dbg !2040

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.110, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.10, i64 9 }, ptr %indirectarg2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 125) #5, !dbg !2036
  unreachable, !dbg !2036
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i32 @std.math.random.Sfc16Random.next_int(ptr %0) #0 comdat !dbg !2041 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2044
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2044
  br i1 %2, label %panic, label %checkok, !dbg !2044

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2045, !DIExpression(), !2044)
  %3 = load ptr, ptr %self, align 8, !dbg !2046
  %4 = call i16 @std.math.random.Sfc16Random.next_short(ptr %3), !dbg !2048
  %zext = zext i16 %4 to i32, !dbg !2048
  %shl = shl i32 %zext, 16, !dbg !2048
  %5 = freeze i32 %shl, !dbg !2048
  %6 = load ptr, ptr %self, align 8, !dbg !2046
  %7 = call i16 @std.math.random.Sfc16Random.next_short(ptr %6), !dbg !2048
  %zext3 = zext i16 %7 to i32, !dbg !2048
  %add = add i32 %5, %zext3, !dbg !2048
  ret i32 %add, !dbg !2048

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.110, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.22, i64 8 }, ptr %indirectarg2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 126) #5, !dbg !2044
  unreachable, !dbg !2044
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i8 @std.math.random.Sfc16Random.next_byte(ptr %0) #0 comdat !dbg !2049 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2052
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2052
  br i1 %2, label %panic, label %checkok, !dbg !2052

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2053, !DIExpression(), !2052)
  %3 = load ptr, ptr %self, align 8, !dbg !2052
  %4 = call i16 @std.math.random.Sfc16Random.next_short(ptr %3), !dbg !2052
  %trunc = trunc i16 %4 to i8, !dbg !2052
  ret i8 %trunc, !dbg !2052

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.110, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.24, i64 9 }, ptr %indirectarg2, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 127) #5, !dbg !2052
  unreachable, !dbg !2052
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.math.random.Sfc8Random.set_seed(ptr %0, ptr align 8 %1) #0 comdat !dbg !2054 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %input = alloca %"char[]", align 8
  %return_value = alloca [4 x i8], align 1
  %taddr = alloca ptr, align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !2059
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !2059
  br i1 %3, label %panic, label %checkok, !dbg !2059

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2060, !DIExpression(), !2061)
    #dbg_declare(ptr %1, !2062, !DIExpression(), !2061)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input, ptr align 8 %1, i32 16, i1 false)
    #dbg_declare(ptr %return_value, !2063, !DIExpression(), !2065)
  store i8 0, ptr %return_value, align 1, !dbg !2065
  %ptradd = getelementptr inbounds i8, ptr %return_value, i64 1, !dbg !2065
  store i8 0, ptr %ptradd, align 1, !dbg !2065
  %ptradd3 = getelementptr inbounds i8, ptr %return_value, i64 2, !dbg !2065
  store i8 0, ptr %ptradd3, align 1, !dbg !2065
  %ptradd4 = getelementptr inbounds i8, ptr %return_value, i64 3, !dbg !2065
  store i8 0, ptr %ptradd4, align 1, !dbg !2065
  store ptr %return_value, ptr %taddr, align 8
  %4 = load ptr, ptr %taddr, align 8
  %5 = insertvalue %"char[]" undef, ptr %4, 0
  %6 = insertvalue %"char[]" %5, i64 4, 1
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg5, ptr align 8 %input, i32 16, i1 false)
  store %"char[]" %6, ptr %indirectarg6, align 8
  call void @std.math.random.seeder(ptr align 8 %indirectarg5, ptr align 8 %indirectarg6), !dbg !2067
  %7 = load ptr, ptr %self, align 8, !dbg !2066
  %checknull = icmp eq ptr %7, null, !dbg !2066
  %8 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !2066
  br i1 %8, label %panic7, label %checkok11, !dbg !2066

checkok11:                                        ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 1 %7, ptr align 1 %return_value, i32 4, i1 false), !dbg !2066
  ret void, !dbg !2066

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.110, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func, i64 8 }, ptr %indirectarg2, align 8
  %9 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %9(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 134) #5, !dbg !2061
  unreachable, !dbg !2061

panic7:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.8, i64 45 }, ptr %indirectarg8, align 8
  store %"char[]" { ptr @.file.110, i64 11 }, ptr %indirectarg9, align 8
  store %"char[]" { ptr @.func, i64 8 }, ptr %indirectarg10, align 8
  %10 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %10(ptr align 8 %indirectarg8, ptr align 8 %indirectarg9, ptr align 8 %indirectarg10, i32 136) #5, !dbg !2066
  unreachable, !dbg !2066
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i8 @std.math.random.Sfc8Random.next_byte(ptr %0) #0 comdat !dbg !2068 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %s = alloca ptr, align 8
  %result = alloca i8, align 1
  %self20 = alloca i8, align 1
  %shift = alloca i8, align 1
  %1 = icmp eq ptr %0, null, !dbg !2071
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2071
  br i1 %2, label %panic, label %checkok, !dbg !2071

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2072, !DIExpression(), !2073)
    #dbg_declare(ptr %s, !2074, !DIExpression(), !2075)
  %3 = load ptr, ptr %self, align 8, !dbg !2075
  store ptr %3, ptr %s, align 8, !dbg !2075
    #dbg_declare(ptr %result, !2076, !DIExpression(), !2077)
  %4 = load ptr, ptr %s, align 8, !dbg !2077
  %5 = load i8, ptr %4, align 1, !dbg !2077
  %zext = zext i8 %5 to i32, !dbg !2077
  %6 = load ptr, ptr %s, align 8, !dbg !2077
  %ptradd = getelementptr inbounds i8, ptr %6, i64 1, !dbg !2077
  %7 = load i8, ptr %ptradd, align 1, !dbg !2077
  %zext3 = zext i8 %7 to i32, !dbg !2077
  %add = add i32 %zext, %zext3, !dbg !2077
  %8 = load ptr, ptr %s, align 8, !dbg !2077
  %ptradd4 = getelementptr inbounds i8, ptr %8, i64 3, !dbg !2077
  %9 = load i8, ptr %ptradd4, align 1, !dbg !2077
  %zext5 = zext i8 %9 to i32, !dbg !2077
  %add6 = add i32 %add, %zext5, !dbg !2077
  %trunc = trunc i32 %add6 to i8, !dbg !2077
  store i8 %trunc, ptr %result, align 1, !dbg !2077
  %10 = load ptr, ptr %s, align 8, !dbg !2078
  %ptradd7 = getelementptr inbounds i8, ptr %10, i64 1, !dbg !2078
  %11 = load i8, ptr %ptradd7, align 1, !dbg !2078
  %zext8 = zext i8 %11 to i32, !dbg !2078
  %12 = load ptr, ptr %s, align 8, !dbg !2078
  %ptradd9 = getelementptr inbounds i8, ptr %12, i64 1, !dbg !2078
  %13 = load i8, ptr %ptradd9, align 1, !dbg !2078
  %zext10 = zext i8 %13 to i32, !dbg !2078
  %lshr = lshr i32 %zext10, 1, !dbg !2078
  %14 = freeze i32 %lshr, !dbg !2078
  %xor = xor i32 %zext8, %14, !dbg !2078
  %trunc11 = trunc i32 %xor to i8, !dbg !2078
  %15 = load ptr, ptr %s, align 8, !dbg !2078
  store i8 %trunc11, ptr %15, align 1, !dbg !2078
  %16 = load ptr, ptr %s, align 8, !dbg !2079
  %ptradd12 = getelementptr inbounds i8, ptr %16, i64 2, !dbg !2079
  %17 = load i8, ptr %ptradd12, align 1, !dbg !2079
  %zext13 = zext i8 %17 to i32, !dbg !2079
  %18 = load ptr, ptr %s, align 8, !dbg !2079
  %ptradd14 = getelementptr inbounds i8, ptr %18, i64 2, !dbg !2079
  %19 = load i8, ptr %ptradd14, align 1, !dbg !2079
  %zext15 = zext i8 %19 to i32, !dbg !2079
  %shl = shl i32 %zext15, 2, !dbg !2079
  %20 = freeze i32 %shl, !dbg !2079
  %add16 = add i32 %zext13, %20, !dbg !2079
  %trunc17 = trunc i32 %add16 to i8, !dbg !2079
  %21 = load ptr, ptr %s, align 8, !dbg !2079
  %ptradd18 = getelementptr inbounds i8, ptr %21, i64 1, !dbg !2079
  store i8 %trunc17, ptr %ptradd18, align 1, !dbg !2079
  %22 = load ptr, ptr %s, align 8, !dbg !2080
  %ptradd19 = getelementptr inbounds i8, ptr %22, i64 2, !dbg !2080
  %23 = load i8, ptr %ptradd19, align 1
  store i8 %23, ptr %self20, align 1
  store i8 3, ptr %shift, align 1
  %24 = load i8, ptr %self20, align 1, !dbg !2081
  %25 = load i8, ptr %self20, align 1, !dbg !2081
  %26 = load i8, ptr %shift, align 1, !dbg !2081
  %27 = call i8 @llvm.fshr.i8(i8 %24, i8 %25, i8 %26), !dbg !2081
  %zext21 = zext i8 %27 to i32, !dbg !2081
  %28 = load i8, ptr %result, align 1, !dbg !2080
  %zext22 = zext i8 %28 to i32, !dbg !2080
  %add23 = add i32 %zext21, %zext22, !dbg !2080
  %trunc24 = trunc i32 %add23 to i8, !dbg !2080
  %29 = load ptr, ptr %s, align 8, !dbg !2080
  %ptradd25 = getelementptr inbounds i8, ptr %29, i64 2, !dbg !2080
  store i8 %trunc24, ptr %ptradd25, align 1, !dbg !2080
  %30 = load ptr, ptr %s, align 8, !dbg !2083
  %ptradd26 = getelementptr inbounds i8, ptr %30, i64 3, !dbg !2083
  %31 = load i8, ptr %ptradd26, align 1, !dbg !2083
  %add27 = add i8 %31, -97, !dbg !2083
  store i8 %add27, ptr %ptradd26, align 1, !dbg !2083
  %32 = load i8, ptr %result, align 1, !dbg !2084
  ret i8 %32, !dbg !2084

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.110, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.24, i64 9 }, ptr %indirectarg2, align 8
  %33 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %33(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 139) #5, !dbg !2073
  unreachable, !dbg !2073
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.math.random.Sfc8Random.next_bytes(ptr %0, ptr align 8 %1) #0 comdat !dbg !2085 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i8, align 1
  %taddr = alloca ptr, align 8
  %taddr4 = alloca i64, align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg7 = alloca %"char[]", align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg8 = alloca %"any[]", align 8
  %taddr12 = alloca i64, align 8
  %taddr13 = alloca i64, align 8
  %indirectarg14 = alloca %"char[]", align 8
  %indirectarg15 = alloca %"char[]", align 8
  %indirectarg16 = alloca %"char[]", align 8
  %varargslots17 = alloca [2 x %any], align 16
  %indirectarg20 = alloca %"any[]", align 8
  %taddr24 = alloca i64, align 8
  %taddr25 = alloca i64, align 8
  %indirectarg26 = alloca %"char[]", align 8
  %indirectarg27 = alloca %"char[]", align 8
  %indirectarg28 = alloca %"char[]", align 8
  %varargslots29 = alloca [2 x %any], align 16
  %indirectarg32 = alloca %"any[]", align 8
  %taddr34 = alloca ptr, align 8
  %taddr37 = alloca i64, align 8
  %taddr38 = alloca i64, align 8
  %indirectarg39 = alloca %"char[]", align 8
  %indirectarg40 = alloca %"char[]", align 8
  %indirectarg41 = alloca %"char[]", align 8
  %varargslots42 = alloca [2 x %any], align 16
  %indirectarg45 = alloca %"any[]", align 8
  %taddr49 = alloca i64, align 8
  %taddr50 = alloca i64, align 8
  %indirectarg51 = alloca %"char[]", align 8
  %indirectarg52 = alloca %"char[]", align 8
  %indirectarg53 = alloca %"char[]", align 8
  %varargslots54 = alloca [2 x %any], align 16
  %indirectarg57 = alloca %"any[]", align 8
  %taddr61 = alloca i64, align 8
  %taddr62 = alloca i64, align 8
  %indirectarg63 = alloca %"char[]", align 8
  %indirectarg64 = alloca %"char[]", align 8
  %indirectarg65 = alloca %"char[]", align 8
  %varargslots66 = alloca [2 x %any], align 16
  %indirectarg69 = alloca %"any[]", align 8
  %taddr74 = alloca i64, align 8
  %taddr75 = alloca i64, align 8
  %indirectarg76 = alloca %"char[]", align 8
  %indirectarg77 = alloca %"char[]", align 8
  %indirectarg78 = alloca %"char[]", align 8
  %varargslots79 = alloca [2 x %any], align 16
  %indirectarg82 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg86 = alloca %"char[]", align 8
  %indirectarg87 = alloca %"char[]", align 8
  %indirectarg88 = alloca %"char[]", align 8
  %indirectarg89 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !2086
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !2086
  br i1 %3, label %panic, label %checkok, !dbg !2086

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2087, !DIExpression(), !2086)
    #dbg_declare(ptr %1, !2088, !DIExpression(), !2086)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes, ptr align 8 %1, i32 16, i1 false)
    #dbg_declare(ptr %len, !2089, !DIExpression(), !2091)
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !2091
  %4 = load i64, ptr %ptradd, align 8, !dbg !2091
  store i64 %4, ptr %len, align 8, !dbg !2091
  br label %loop.cond, !dbg !2092

loop.cond:                                        ; preds = %checkok83, %checkok
  %5 = load i64, ptr %len, align 8, !dbg !2093
  %lt = icmp ult i64 0, %5, !dbg !2093
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !2093

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %value, !2095, !DIExpression(), !2097)
  %6 = load ptr, ptr %self, align 8, !dbg !2097
  %7 = call i8 @std.math.random.Sfc8Random.next_byte(ptr %6), !dbg !2097
  store i8 %7, ptr %value, align 1, !dbg !2097
  %8 = load i64, ptr %len, align 8, !dbg !2098
  %le = icmp ule i64 %8, 1, !dbg !2098
  br i1 %le, label %if.then, label %if.exit, !dbg !2098

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %9 = load ptr, ptr %taddr, align 8
  %10 = load i64, ptr %len, align 8, !dbg !2099
  %add = add i64 0, %10, !dbg !2099
  %gt = icmp ugt i64 0, %add, !dbg !2099
  %sub = sub i64 %add, 0, !dbg !2099
  %11 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !2099
  br i1 %11, label %panic3, label %checkok9, !dbg !2099

checkok9:                                         ; preds = %if.then
  %size = sub i64 %add, 0, !dbg !2099
  %12 = insertvalue %"char[]" undef, ptr %9, 0, !dbg !2099
  %13 = insertvalue %"char[]" %12, i64 %size, 1, !dbg !2099
  %14 = load %"char[]", ptr %bytes, align 8, !dbg !2099
  %15 = extractvalue %"char[]" %14, 0, !dbg !2099
  %16 = extractvalue %"char[]" %14, 1, !dbg !2099
  %gt10 = icmp ugt i64 0, %16, !dbg !2099
  %17 = call i1 @llvm.expect.i1(i1 %gt10, i1 false), !dbg !2099
  br i1 %17, label %panic11, label %checkok21, !dbg !2099

checkok21:                                        ; preds = %checkok9
  %size22 = sub i64 %16, 0, !dbg !2099
  %18 = insertvalue %"char[]" undef, ptr %15, 0, !dbg !2099
  %19 = insertvalue %"char[]" %18, i64 %size22, 1, !dbg !2099
  %20 = extractvalue %"char[]" %19, 0, !dbg !2099
  %21 = extractvalue %"char[]" %13, 0, !dbg !2099
  %22 = extractvalue %"char[]" %13, 1, !dbg !2099
  %23 = extractvalue %"char[]" %19, 1, !dbg !2099
  %neq = icmp ne i64 %23, %22, !dbg !2099
  %24 = call i1 @llvm.expect.i1(i1 %neq, i1 false), !dbg !2099
  br i1 %24, label %panic23, label %checkok33, !dbg !2099

checkok33:                                        ; preds = %checkok21
  %25 = mul i64 %22, 1, !dbg !2099
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %20, ptr align 1 %21, i64 %25, i1 false), !dbg !2099
  br label %expr_block.exit, !dbg !2101

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr34, align 8
  %26 = load ptr, ptr %taddr34, align 8
  %27 = insertvalue %"char[]" undef, ptr %26, 0
  %28 = insertvalue %"char[]" %27, i64 1, 1
  %29 = load %"char[]", ptr %bytes, align 8, !dbg !2102
  %30 = extractvalue %"char[]" %29, 0, !dbg !2102
  %31 = extractvalue %"char[]" %29, 1, !dbg !2102
  %gt35 = icmp sgt i64 0, %31, !dbg !2102
  %32 = call i1 @llvm.expect.i1(i1 %gt35, i1 false), !dbg !2102
  br i1 %32, label %panic36, label %checkok46, !dbg !2102

checkok46:                                        ; preds = %if.exit
  %lt47 = icmp slt i64 %31, 1, !dbg !2102
  %33 = call i1 @llvm.expect.i1(i1 %lt47, i1 false), !dbg !2102
  br i1 %33, label %panic48, label %checkok58, !dbg !2102

checkok58:                                        ; preds = %checkok46
  %34 = insertvalue %"char[]" undef, ptr %30, 0, !dbg !2102
  %35 = insertvalue %"char[]" %34, i64 1, 1, !dbg !2102
  %36 = extractvalue %"char[]" %35, 0, !dbg !2102
  %37 = extractvalue %"char[]" %28, 0, !dbg !2102
  %38 = extractvalue %"char[]" %28, 1, !dbg !2102
  %39 = extractvalue %"char[]" %35, 1, !dbg !2102
  %neq59 = icmp ne i64 %39, %38, !dbg !2102
  %40 = call i1 @llvm.expect.i1(i1 %neq59, i1 false), !dbg !2102
  br i1 %40, label %panic60, label %checkok70, !dbg !2102

checkok70:                                        ; preds = %checkok58
  %41 = mul i64 %38, 1, !dbg !2102
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %36, ptr align 1 %37, i64 %41, i1 false), !dbg !2102
  %42 = load i64, ptr %len, align 8, !dbg !2103
  %sub71 = sub i64 %42, 1, !dbg !2103
  store i64 %sub71, ptr %len, align 8, !dbg !2103
  %43 = load %"char[]", ptr %bytes, align 8, !dbg !2104
  %44 = extractvalue %"char[]" %43, 0, !dbg !2104
  %45 = extractvalue %"char[]" %43, 1, !dbg !2104
  %gt72 = icmp ugt i64 1, %45, !dbg !2104
  %46 = call i1 @llvm.expect.i1(i1 %gt72, i1 false), !dbg !2104
  br i1 %46, label %panic73, label %checkok83, !dbg !2104

checkok83:                                        ; preds = %checkok70
  %size84 = sub i64 %45, 1, !dbg !2104
  %ptradd85 = getelementptr inbounds i8, ptr %44, i64 1, !dbg !2104
  %47 = insertvalue %"char[]" undef, ptr %ptradd85, 0, !dbg !2104
  %48 = insertvalue %"char[]" %47, i64 %size84, 1, !dbg !2104
  store %"char[]" %48, ptr %bytes, align 8, !dbg !2104
  br label %loop.cond, !dbg !2104

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.125, i64 30 }, ptr %string, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg86, ptr align 8 %string, i32 16, i1 false)
  store %"char[]" { ptr @.str.126, i64 11 }, ptr %indirectarg87, align 8
  store %"char[]" { ptr @.str.127, i64 21 }, ptr %indirectarg88, align 8
  store %"any[]" zeroinitializer, ptr %indirectarg89, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg86, ptr align 8 %indirectarg87, ptr align 8 %indirectarg88, i32 150, ptr align 8 %indirectarg89), !dbg !2105
  unreachable, !dbg !2105

expr_block.exit:                                  ; preds = %checkok33
  ret void, !dbg !2105

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.110, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg2, align 8
  %49 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %49(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 150) #5, !dbg !2086
  unreachable, !dbg !2086

panic3:                                           ; preds = %if.then
  store i64 %sub, ptr %taddr4, align 8
  %50 = insertvalue %any undef, ptr %taddr4, 0
  %51 = insertvalue %any %50, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.14, i64 43 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg6, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg7, align 8
  store %any %51, ptr %varargslots, align 16
  %52 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %52, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg8, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, ptr align 8 %indirectarg7, i32 153, ptr align 8 %indirectarg8) #5, !dbg !2099
  unreachable, !dbg !2099

panic11:                                          ; preds = %checkok9
  store i64 %16, ptr %taddr12, align 8
  %53 = insertvalue %any undef, ptr %taddr12, 0
  %54 = insertvalue %any %53, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr13, align 8
  %55 = insertvalue %any undef, ptr %taddr13, 0
  %56 = insertvalue %any %55, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.16, i64 61 }, ptr %indirectarg14, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg15, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg16, align 8
  store %any %54, ptr %varargslots17, align 16
  %ptradd18 = getelementptr inbounds i8, ptr %varargslots17, i64 16
  store %any %56, ptr %ptradd18, align 16
  %57 = insertvalue %"any[]" undef, ptr %varargslots17, 0
  %"$$temp19" = insertvalue %"any[]" %57, i64 2, 1
  store %"any[]" %"$$temp19", ptr %indirectarg20, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg14, ptr align 8 %indirectarg15, ptr align 8 %indirectarg16, i32 153, ptr align 8 %indirectarg20) #5, !dbg !2099
  unreachable, !dbg !2099

panic23:                                          ; preds = %checkok21
  store i64 %23, ptr %taddr24, align 8
  %58 = insertvalue %any undef, ptr %taddr24, 0
  %59 = insertvalue %any %58, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %22, ptr %taddr25, align 8
  %60 = insertvalue %any undef, ptr %taddr25, 0
  %61 = insertvalue %any %60, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 38 }, ptr %indirectarg26, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg27, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg28, align 8
  store %any %59, ptr %varargslots29, align 16
  %ptradd30 = getelementptr inbounds i8, ptr %varargslots29, i64 16
  store %any %61, ptr %ptradd30, align 16
  %62 = insertvalue %"any[]" undef, ptr %varargslots29, 0
  %"$$temp31" = insertvalue %"any[]" %62, i64 2, 1
  store %"any[]" %"$$temp31", ptr %indirectarg32, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg26, ptr align 8 %indirectarg27, ptr align 8 %indirectarg28, i32 153, ptr align 8 %indirectarg32) #5, !dbg !2099
  unreachable, !dbg !2099

panic36:                                          ; preds = %if.exit
  store i64 %31, ptr %taddr37, align 8
  %63 = insertvalue %any undef, ptr %taddr37, 0
  %64 = insertvalue %any %63, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr38, align 8
  %65 = insertvalue %any undef, ptr %taddr38, 0
  %66 = insertvalue %any %65, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.16, i64 61 }, ptr %indirectarg39, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg40, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg41, align 8
  store %any %64, ptr %varargslots42, align 16
  %ptradd43 = getelementptr inbounds i8, ptr %varargslots42, i64 16
  store %any %66, ptr %ptradd43, align 16
  %67 = insertvalue %"any[]" undef, ptr %varargslots42, 0
  %"$$temp44" = insertvalue %"any[]" %67, i64 2, 1
  store %"any[]" %"$$temp44", ptr %indirectarg45, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg39, ptr align 8 %indirectarg40, ptr align 8 %indirectarg41, i32 156, ptr align 8 %indirectarg45) #5, !dbg !2102
  unreachable, !dbg !2102

panic48:                                          ; preds = %checkok46
  store i64 0, ptr %taddr49, align 8
  %68 = insertvalue %any undef, ptr %taddr49, 0
  %69 = insertvalue %any %68, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %31, ptr %taddr50, align 8
  %70 = insertvalue %any undef, ptr %taddr50, 0
  %71 = insertvalue %any %70, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.18, i64 60 }, ptr %indirectarg51, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg52, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg53, align 8
  store %any %69, ptr %varargslots54, align 16
  %ptradd55 = getelementptr inbounds i8, ptr %varargslots54, i64 16
  store %any %71, ptr %ptradd55, align 16
  %72 = insertvalue %"any[]" undef, ptr %varargslots54, 0
  %"$$temp56" = insertvalue %"any[]" %72, i64 2, 1
  store %"any[]" %"$$temp56", ptr %indirectarg57, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg51, ptr align 8 %indirectarg52, ptr align 8 %indirectarg53, i32 156, ptr align 8 %indirectarg57) #5, !dbg !2102
  unreachable, !dbg !2102

panic60:                                          ; preds = %checkok58
  store i64 %39, ptr %taddr61, align 8
  %73 = insertvalue %any undef, ptr %taddr61, 0
  %74 = insertvalue %any %73, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %38, ptr %taddr62, align 8
  %75 = insertvalue %any undef, ptr %taddr62, 0
  %76 = insertvalue %any %75, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 38 }, ptr %indirectarg63, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg64, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg65, align 8
  store %any %74, ptr %varargslots66, align 16
  %ptradd67 = getelementptr inbounds i8, ptr %varargslots66, i64 16
  store %any %76, ptr %ptradd67, align 16
  %77 = insertvalue %"any[]" undef, ptr %varargslots66, 0
  %"$$temp68" = insertvalue %"any[]" %77, i64 2, 1
  store %"any[]" %"$$temp68", ptr %indirectarg69, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg63, ptr align 8 %indirectarg64, ptr align 8 %indirectarg65, i32 156, ptr align 8 %indirectarg69) #5, !dbg !2102
  unreachable, !dbg !2102

panic73:                                          ; preds = %checkok70
  store i64 %45, ptr %taddr74, align 8
  %78 = insertvalue %any undef, ptr %taddr74, 0
  %79 = insertvalue %any %78, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 1, ptr %taddr75, align 8
  %80 = insertvalue %any undef, ptr %taddr75, 0
  %81 = insertvalue %any %80, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.16, i64 61 }, ptr %indirectarg76, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg77, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg78, align 8
  store %any %79, ptr %varargslots79, align 16
  %ptradd80 = getelementptr inbounds i8, ptr %varargslots79, i64 16
  store %any %81, ptr %ptradd80, align 16
  %82 = insertvalue %"any[]" undef, ptr %varargslots79, 0
  %"$$temp81" = insertvalue %"any[]" %82, i64 2, 1
  store %"any[]" %"$$temp81", ptr %indirectarg82, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg76, ptr align 8 %indirectarg77, ptr align 8 %indirectarg78, i32 158, ptr align 8 %indirectarg82) #5, !dbg !2104
  unreachable, !dbg !2104
}

; Function Attrs: nounwind ssp uwtable
define weak_odr <2 x i64> @std.math.random.Sfc8Random.next_int128(ptr %0) #0 comdat !dbg !2108 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %taddr = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !2111
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2111
  br i1 %2, label %panic, label %checkok, !dbg !2111

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2112, !DIExpression(), !2111)
  %3 = load ptr, ptr %self, align 8, !dbg !2113
  %4 = call i64 @std.math.random.Sfc8Random.next_long(ptr %3), !dbg !2115
  %zext = zext i64 %4 to i128, !dbg !2115
  %shl = shl i128 %zext, 64, !dbg !2115
  %5 = freeze i128 %shl, !dbg !2115
  %6 = load ptr, ptr %self, align 8, !dbg !2113
  %7 = call i64 @std.math.random.Sfc8Random.next_long(ptr %6), !dbg !2115
  %zext3 = zext i64 %7 to i128, !dbg !2115
  %add = add i128 %5, %zext3, !dbg !2115
  store i128 %add, ptr %taddr, align 16
  %8 = load <2 x i64>, ptr %taddr, align 16
  ret <2 x i64> %8

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.110, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.21, i64 11 }, ptr %indirectarg2, align 8
  %9 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %9(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 151) #5, !dbg !2111
  unreachable, !dbg !2111
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.math.random.Sfc8Random.next_long(ptr %0) #0 comdat !dbg !2116 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2119
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2119
  br i1 %2, label %panic, label %checkok, !dbg !2119

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2120, !DIExpression(), !2119)
  %3 = load ptr, ptr %self, align 8, !dbg !2121
  %4 = call i32 @std.math.random.Sfc8Random.next_int(ptr %3), !dbg !2123
  %zext = zext i32 %4 to i64, !dbg !2123
  %shl = shl i64 %zext, 32, !dbg !2123
  %5 = freeze i64 %shl, !dbg !2123
  %6 = load ptr, ptr %self, align 8, !dbg !2121
  %7 = call i32 @std.math.random.Sfc8Random.next_int(ptr %6), !dbg !2123
  %zext3 = zext i32 %7 to i64, !dbg !2123
  %add = add i64 %5, %zext3, !dbg !2123
  ret i64 %add, !dbg !2123

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.110, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.10, i64 9 }, ptr %indirectarg2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 152) #5, !dbg !2119
  unreachable, !dbg !2119
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i32 @std.math.random.Sfc8Random.next_int(ptr %0) #0 comdat !dbg !2124 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2127
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2127
  br i1 %2, label %panic, label %checkok, !dbg !2127

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2128, !DIExpression(), !2127)
  %3 = load ptr, ptr %self, align 8, !dbg !2129
  %4 = call i16 @std.math.random.Sfc8Random.next_short(ptr %3), !dbg !2131
  %zext = zext i16 %4 to i32, !dbg !2131
  %shl = shl i32 %zext, 16, !dbg !2131
  %5 = freeze i32 %shl, !dbg !2131
  %6 = load ptr, ptr %self, align 8, !dbg !2129
  %7 = call i16 @std.math.random.Sfc8Random.next_short(ptr %6), !dbg !2131
  %zext3 = zext i16 %7 to i32, !dbg !2131
  %add = add i32 %5, %zext3, !dbg !2131
  ret i32 %add, !dbg !2131

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.110, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.22, i64 8 }, ptr %indirectarg2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 153) #5, !dbg !2127
  unreachable, !dbg !2127
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i16 @std.math.random.Sfc8Random.next_short(ptr %0) #0 comdat !dbg !2132 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2135
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2135
  br i1 %2, label %panic, label %checkok, !dbg !2135

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2136, !DIExpression(), !2135)
  %3 = load ptr, ptr %self, align 8, !dbg !2137
  %4 = call i8 @std.math.random.Sfc8Random.next_byte(ptr %3), !dbg !2139
  %zext = zext i8 %4 to i16, !dbg !2139
  %zext3 = zext i16 %zext to i32, !dbg !2139
  %shl = shl i32 %zext3, 8, !dbg !2139
  %5 = freeze i32 %shl, !dbg !2139
  %6 = load ptr, ptr %self, align 8, !dbg !2137
  %7 = call i8 @std.math.random.Sfc8Random.next_byte(ptr %6), !dbg !2139
  %zext4 = zext i8 %7 to i32, !dbg !2139
  %add = add i32 %5, %zext4, !dbg !2139
  %trunc = trunc i32 %add to i16, !dbg !2139
  ret i16 %trunc, !dbg !2139

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.110, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.23, i64 10 }, ptr %indirectarg2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 154) #5, !dbg !2135
  unreachable, !dbg !2135
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.math.random.SimpleRandom.set_seed(ptr %0, ptr align 8 %1) #0 comdat !dbg !2140 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %full = alloca [8 x i8], align 1
  %.anon = alloca i64, align 8
  %i = alloca i64, align 8
  %c = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr12 = alloca i64, align 8
  %indirectarg13 = alloca %"char[]", align 8
  %indirectarg14 = alloca %"char[]", align 8
  %indirectarg15 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg17 = alloca %"any[]", align 8
  %taddr22 = alloca i64, align 8
  %indirectarg23 = alloca %"char[]", align 8
  %indirectarg24 = alloca %"char[]", align 8
  %indirectarg25 = alloca %"char[]", align 8
  %varargslots26 = alloca [1 x %any], align 16
  %indirectarg28 = alloca %"any[]", align 8
  %taddr32 = alloca i64, align 8
  %taddr33 = alloca i64, align 8
  %indirectarg34 = alloca %"char[]", align 8
  %indirectarg35 = alloca %"char[]", align 8
  %indirectarg36 = alloca %"char[]", align 8
  %varargslots37 = alloca [2 x %any], align 16
  %indirectarg40 = alloca %"any[]", align 8
  %expr = alloca [8 x i8], align 1
  %x = alloca i64, align 8
  %indirectarg45 = alloca %"char[]", align 8
  %indirectarg46 = alloca %"char[]", align 8
  %indirectarg47 = alloca %"char[]", align 8
  %taddr50 = alloca i64, align 8
  %taddr51 = alloca i64, align 8
  %indirectarg52 = alloca %"char[]", align 8
  %indirectarg53 = alloca %"char[]", align 8
  %indirectarg54 = alloca %"char[]", align 8
  %varargslots55 = alloca [2 x %any], align 16
  %indirectarg58 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !2145
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !2145
  br i1 %3, label %panic, label %checkok, !dbg !2145

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2146, !DIExpression(), !2147)
    #dbg_declare(ptr %1, !2148, !DIExpression(), !2147)
    #dbg_declare(ptr %full, !2149, !DIExpression(), !2151)
  store i8 0, ptr %full, align 1, !dbg !2151
  %ptradd = getelementptr inbounds i8, ptr %full, i64 1, !dbg !2151
  store i8 0, ptr %ptradd, align 1, !dbg !2151
  %ptradd3 = getelementptr inbounds i8, ptr %full, i64 2, !dbg !2151
  store i8 0, ptr %ptradd3, align 1, !dbg !2151
  %ptradd4 = getelementptr inbounds i8, ptr %full, i64 3, !dbg !2151
  store i8 0, ptr %ptradd4, align 1, !dbg !2151
  %ptradd5 = getelementptr inbounds i8, ptr %full, i64 4, !dbg !2151
  store i8 0, ptr %ptradd5, align 1, !dbg !2151
  %ptradd6 = getelementptr inbounds i8, ptr %full, i64 5, !dbg !2151
  store i8 0, ptr %ptradd6, align 1, !dbg !2151
  %ptradd7 = getelementptr inbounds i8, ptr %full, i64 6, !dbg !2151
  store i8 0, ptr %ptradd7, align 1, !dbg !2151
  %ptradd8 = getelementptr inbounds i8, ptr %full, i64 7, !dbg !2151
  store i8 0, ptr %ptradd8, align 1, !dbg !2151
  %ptradd9 = getelementptr inbounds i8, ptr %1, i64 8, !dbg !2152
  %4 = load i64, ptr %ptradd9, align 8, !dbg !2152
    #dbg_declare(ptr %.anon, !2154, !DIExpression(), !2152)
  store i64 0, ptr %.anon, align 8, !dbg !2152
  br label %loop.cond, !dbg !2152

loop.cond:                                        ; preds = %checkok41, %checkok
  %5 = load i64, ptr %.anon, align 8, !dbg !2152
  %lt = icmp ult i64 %5, %4, !dbg !2152
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !2152

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %i, !2155, !DIExpression(), !2157)
  %6 = load i64, ptr %.anon, align 8, !dbg !2157
  store i64 %6, ptr %i, align 8, !dbg !2157
    #dbg_declare(ptr %c, !2158, !DIExpression(), !2157)
  %ptradd10 = getelementptr inbounds i8, ptr %1, i64 8, !dbg !2157
  %7 = load i64, ptr %ptradd10, align 8, !dbg !2157
  %8 = load ptr, ptr %1, align 8, !dbg !2157
  %9 = load i64, ptr %.anon, align 8, !dbg !2157
  %ge = icmp uge i64 %9, %7, !dbg !2157
  %10 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !2157
  br i1 %10, label %panic11, label %checkok18, !dbg !2157

checkok18:                                        ; preds = %loop.body
  %ptradd19 = getelementptr inbounds i8, ptr %8, i64 %9, !dbg !2157
  %11 = load i8, ptr %ptradd19, align 1, !dbg !2157
  store i8 %11, ptr %c, align 1, !dbg !2157
  %12 = load i64, ptr %i, align 8, !dbg !2159
  %smod = srem i64 %12, 8, !dbg !2159
  %lt20 = icmp slt i64 %smod, 0, !dbg !2159
  %13 = call i1 @llvm.expect.i1(i1 %lt20, i1 false), !dbg !2159
  br i1 %13, label %panic21, label %checkok29, !dbg !2159

checkok29:                                        ; preds = %checkok18
  %ge30 = icmp sge i64 %smod, 8, !dbg !2159
  %14 = call i1 @llvm.expect.i1(i1 %ge30, i1 false), !dbg !2159
  br i1 %14, label %panic31, label %checkok41, !dbg !2159

checkok41:                                        ; preds = %checkok29
  %ptradd42 = getelementptr inbounds i8, ptr %full, i64 %smod, !dbg !2159
  %15 = load i8, ptr %ptradd42, align 1, !dbg !2159
  %16 = load i8, ptr %c, align 1, !dbg !2159
  %xor = xor i8 %15, %16, !dbg !2159
  store i8 %xor, ptr %ptradd42, align 1, !dbg !2159
  %17 = load i64, ptr %.anon, align 8, !dbg !2152
  %addnuw = add nuw i64 %17, 1, !dbg !2152
  store i64 %addnuw, ptr %.anon, align 8, !dbg !2152
  br label %loop.cond, !dbg !2152

loop.exit:                                        ; preds = %loop.cond
  call void @llvm.memcpy.p0.p0.i32(ptr align 1 %expr, ptr align 1 %full, i32 8, i1 false)
    #dbg_declare(ptr %x, !2161, !DIExpression(), !2163)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %x, ptr align 1 %expr, i64 8, i1 false), !dbg !2165
  %18 = load i64, ptr %x, align 8, !dbg !2166
  %xor43 = xor i64 %18, 25214903917, !dbg !2164
  %and = and i64 %xor43, 281474976710655, !dbg !2164
  %19 = load ptr, ptr %self, align 8, !dbg !2164
  %checknull = icmp eq ptr %19, null, !dbg !2164
  %20 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !2164
  br i1 %20, label %panic44, label %checkok48, !dbg !2164

checkok48:                                        ; preds = %loop.exit
  %21 = ptrtoint ptr %19 to i64, !dbg !2164
  %22 = urem i64 %21, 8, !dbg !2164
  %23 = icmp ne i64 %22, 0, !dbg !2164
  %24 = call i1 @llvm.expect.i1(i1 %23, i1 false), !dbg !2164
  br i1 %24, label %panic49, label %checkok59, !dbg !2164

checkok59:                                        ; preds = %checkok48
  store i64 %and, ptr %19, align 8, !dbg !2164
  ret void, !dbg !2164

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.130, i64 21 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func, i64 8 }, ptr %indirectarg2, align 8
  %25 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %25(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 6) #5, !dbg !2147
  unreachable, !dbg !2147

panic11:                                          ; preds = %loop.body
  store i64 %7, ptr %taddr, align 8
  %26 = insertvalue %any undef, ptr %taddr, 0
  %27 = insertvalue %any %26, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %9, ptr %taddr12, align 8
  %28 = insertvalue %any undef, ptr %taddr12, 0
  %29 = insertvalue %any %28, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.98, i64 59 }, ptr %indirectarg13, align 8
  store %"char[]" { ptr @.file.130, i64 21 }, ptr %indirectarg14, align 8
  store %"char[]" { ptr @.func, i64 8 }, ptr %indirectarg15, align 8
  store %any %27, ptr %varargslots, align 16
  %ptradd16 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %29, ptr %ptradd16, align 16
  %30 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %30, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg17, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg13, ptr align 8 %indirectarg14, ptr align 8 %indirectarg15, i32 9, ptr align 8 %indirectarg17) #5, !dbg !2157
  unreachable, !dbg !2157

panic21:                                          ; preds = %checkok18
  store i64 %smod, ptr %taddr22, align 8
  %31 = insertvalue %any undef, ptr %taddr22, 0
  %32 = insertvalue %any %31, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.99, i64 38 }, ptr %indirectarg23, align 8
  store %"char[]" { ptr @.file.130, i64 21 }, ptr %indirectarg24, align 8
  store %"char[]" { ptr @.func, i64 8 }, ptr %indirectarg25, align 8
  store %any %32, ptr %varargslots26, align 16
  %33 = insertvalue %"any[]" undef, ptr %varargslots26, 0
  %"$$temp27" = insertvalue %"any[]" %33, i64 1, 1
  store %"any[]" %"$$temp27", ptr %indirectarg28, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg23, ptr align 8 %indirectarg24, ptr align 8 %indirectarg25, i32 11, ptr align 8 %indirectarg28) #5, !dbg !2159
  unreachable, !dbg !2159

panic31:                                          ; preds = %checkok29
  store i64 8, ptr %taddr32, align 8
  %34 = insertvalue %any undef, ptr %taddr32, 0
  %35 = insertvalue %any %34, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %smod, ptr %taddr33, align 8
  %36 = insertvalue %any undef, ptr %taddr33, 0
  %37 = insertvalue %any %36, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.98, i64 59 }, ptr %indirectarg34, align 8
  store %"char[]" { ptr @.file.130, i64 21 }, ptr %indirectarg35, align 8
  store %"char[]" { ptr @.func, i64 8 }, ptr %indirectarg36, align 8
  store %any %35, ptr %varargslots37, align 16
  %ptradd38 = getelementptr inbounds i8, ptr %varargslots37, i64 16
  store %any %37, ptr %ptradd38, align 16
  %38 = insertvalue %"any[]" undef, ptr %varargslots37, 0
  %"$$temp39" = insertvalue %"any[]" %38, i64 2, 1
  store %"any[]" %"$$temp39", ptr %indirectarg40, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg34, ptr align 8 %indirectarg35, ptr align 8 %indirectarg36, i32 11, ptr align 8 %indirectarg40) #5, !dbg !2159
  unreachable, !dbg !2159

panic44:                                          ; preds = %loop.exit
  store %"char[]" { ptr @.panic_msg.8, i64 45 }, ptr %indirectarg45, align 8
  store %"char[]" { ptr @.file.130, i64 21 }, ptr %indirectarg46, align 8
  store %"char[]" { ptr @.func, i64 8 }, ptr %indirectarg47, align 8
  %39 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %39(ptr align 8 %indirectarg45, ptr align 8 %indirectarg46, ptr align 8 %indirectarg47, i32 13) #5, !dbg !2164
  unreachable, !dbg !2164

panic49:                                          ; preds = %checkok48
  store i64 8, ptr %taddr50, align 8
  %40 = insertvalue %any undef, ptr %taddr50, 0
  %41 = insertvalue %any %40, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %22, ptr %taddr51, align 8
  %42 = insertvalue %any undef, ptr %taddr51, 0
  %43 = insertvalue %any %42, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg52, align 8
  store %"char[]" { ptr @.file.130, i64 21 }, ptr %indirectarg53, align 8
  store %"char[]" { ptr @.func, i64 8 }, ptr %indirectarg54, align 8
  store %any %41, ptr %varargslots55, align 16
  %ptradd56 = getelementptr inbounds i8, ptr %varargslots55, i64 16
  store %any %43, ptr %ptradd56, align 16
  %44 = insertvalue %"any[]" undef, ptr %varargslots55, 0
  %"$$temp57" = insertvalue %"any[]" %44, i64 2, 1
  store %"any[]" %"$$temp57", ptr %indirectarg58, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg52, ptr align 8 %indirectarg53, ptr align 8 %indirectarg54, i32 13, ptr align 8 %indirectarg58) #5, !dbg !2164
  unreachable, !dbg !2164
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i32 @std.math.random.SimpleRandom.next_int(ptr %0) #0 comdat !dbg !2167 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %nextseed = alloca i64, align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr9 = alloca i64, align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg13 = alloca %"any[]", align 8
  %indirectarg17 = alloca %"char[]", align 8
  %indirectarg18 = alloca %"char[]", align 8
  %indirectarg19 = alloca %"char[]", align 8
  %taddr22 = alloca i64, align 8
  %taddr23 = alloca i64, align 8
  %indirectarg24 = alloca %"char[]", align 8
  %indirectarg25 = alloca %"char[]", align 8
  %indirectarg26 = alloca %"char[]", align 8
  %varargslots27 = alloca [2 x %any], align 16
  %indirectarg30 = alloca %"any[]", align 8
  %1 = icmp eq ptr %0, null, !dbg !2170
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2170
  br i1 %2, label %panic, label %checkok, !dbg !2170

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2171, !DIExpression(), !2172)
    #dbg_declare(ptr %nextseed, !2173, !DIExpression(), !2174)
  %3 = load ptr, ptr %self, align 8, !dbg !2174
  %checknull = icmp eq ptr %3, null, !dbg !2174
  %4 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !2174
  br i1 %4, label %panic3, label %checkok7, !dbg !2174

checkok7:                                         ; preds = %checkok
  %5 = ptrtoint ptr %3 to i64, !dbg !2174
  %6 = urem i64 %5, 8, !dbg !2174
  %7 = icmp ne i64 %6, 0, !dbg !2174
  %8 = call i1 @llvm.expect.i1(i1 %7, i1 false), !dbg !2174
  br i1 %8, label %panic8, label %checkok14, !dbg !2174

checkok14:                                        ; preds = %checkok7
  %9 = load i64, ptr %3, align 8, !dbg !2174
  %mul = mul i64 %9, 25214903917, !dbg !2174
  %add = add i64 %mul, 11, !dbg !2174
  %and = and i64 %add, 281474976710655, !dbg !2174
  store i64 %and, ptr %nextseed, align 8, !dbg !2174
  %10 = load ptr, ptr %self, align 8, !dbg !2175
  %checknull15 = icmp eq ptr %10, null, !dbg !2175
  %11 = call i1 @llvm.expect.i1(i1 %checknull15, i1 false), !dbg !2175
  br i1 %11, label %panic16, label %checkok20, !dbg !2175

checkok20:                                        ; preds = %checkok14
  %12 = ptrtoint ptr %10 to i64, !dbg !2175
  %13 = urem i64 %12, 8, !dbg !2175
  %14 = icmp ne i64 %13, 0, !dbg !2175
  %15 = call i1 @llvm.expect.i1(i1 %14, i1 false), !dbg !2175
  br i1 %15, label %panic21, label %checkok31, !dbg !2175

checkok31:                                        ; preds = %checkok20
  %16 = load i64, ptr %nextseed, align 8, !dbg !2175
  store i64 %16, ptr %10, align 8, !dbg !2175
  %17 = load i64, ptr %nextseed, align 8, !dbg !2176
  %lshr = lshr i64 %17, 16, !dbg !2176
  %18 = freeze i64 %lshr, !dbg !2176
  %trunc = trunc i64 %18 to i32, !dbg !2176
  ret i32 %trunc, !dbg !2176

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.130, i64 21 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.22, i64 8 }, ptr %indirectarg2, align 8
  %19 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %19(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 16) #5, !dbg !2172
  unreachable, !dbg !2172

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.8, i64 45 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.130, i64 21 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.22, i64 8 }, ptr %indirectarg6, align 8
  %20 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %20(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 18) #5, !dbg !2174
  unreachable, !dbg !2174

panic8:                                           ; preds = %checkok7
  store i64 8, ptr %taddr, align 8
  %21 = insertvalue %any undef, ptr %taddr, 0
  %22 = insertvalue %any %21, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %6, ptr %taddr9, align 8
  %23 = insertvalue %any undef, ptr %taddr9, 0
  %24 = insertvalue %any %23, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.file.130, i64 21 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.func.22, i64 8 }, ptr %indirectarg12, align 8
  store %any %22, ptr %varargslots, align 16
  %ptradd = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %24, ptr %ptradd, align 16
  %25 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %25, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg13, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, i32 18, ptr align 8 %indirectarg13) #5, !dbg !2174
  unreachable, !dbg !2174

panic16:                                          ; preds = %checkok14
  store %"char[]" { ptr @.panic_msg.8, i64 45 }, ptr %indirectarg17, align 8
  store %"char[]" { ptr @.file.130, i64 21 }, ptr %indirectarg18, align 8
  store %"char[]" { ptr @.func.22, i64 8 }, ptr %indirectarg19, align 8
  %26 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %26(ptr align 8 %indirectarg17, ptr align 8 %indirectarg18, ptr align 8 %indirectarg19, i32 19) #5, !dbg !2175
  unreachable, !dbg !2175

panic21:                                          ; preds = %checkok20
  store i64 8, ptr %taddr22, align 8
  %27 = insertvalue %any undef, ptr %taddr22, 0
  %28 = insertvalue %any %27, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %13, ptr %taddr23, align 8
  %29 = insertvalue %any undef, ptr %taddr23, 0
  %30 = insertvalue %any %29, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 94 }, ptr %indirectarg24, align 8
  store %"char[]" { ptr @.file.130, i64 21 }, ptr %indirectarg25, align 8
  store %"char[]" { ptr @.func.22, i64 8 }, ptr %indirectarg26, align 8
  store %any %28, ptr %varargslots27, align 16
  %ptradd28 = getelementptr inbounds i8, ptr %varargslots27, i64 16
  store %any %30, ptr %ptradd28, align 16
  %31 = insertvalue %"any[]" undef, ptr %varargslots27, 0
  %"$$temp29" = insertvalue %"any[]" %31, i64 2, 1
  store %"any[]" %"$$temp29", ptr %indirectarg30, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg24, ptr align 8 %indirectarg25, ptr align 8 %indirectarg26, i32 19, ptr align 8 %indirectarg30) #5, !dbg !2175
  unreachable, !dbg !2175
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.math.random.SimpleRandom.next_bytes(ptr %0, ptr align 8 %1) #0 comdat !dbg !2177 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %bytes = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i32, align 4
  %taddr = alloca ptr, align 8
  %taddr9 = alloca i64, align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg13 = alloca %"any[]", align 8
  %taddr17 = alloca i64, align 8
  %taddr18 = alloca i64, align 8
  %indirectarg19 = alloca %"char[]", align 8
  %indirectarg20 = alloca %"char[]", align 8
  %indirectarg21 = alloca %"char[]", align 8
  %varargslots22 = alloca [2 x %any], align 16
  %indirectarg25 = alloca %"any[]", align 8
  %taddr29 = alloca i64, align 8
  %taddr30 = alloca i64, align 8
  %indirectarg31 = alloca %"char[]", align 8
  %indirectarg32 = alloca %"char[]", align 8
  %indirectarg33 = alloca %"char[]", align 8
  %varargslots34 = alloca [2 x %any], align 16
  %indirectarg37 = alloca %"any[]", align 8
  %taddr39 = alloca ptr, align 8
  %taddr42 = alloca i64, align 8
  %taddr43 = alloca i64, align 8
  %indirectarg44 = alloca %"char[]", align 8
  %indirectarg45 = alloca %"char[]", align 8
  %indirectarg46 = alloca %"char[]", align 8
  %varargslots47 = alloca [2 x %any], align 16
  %indirectarg50 = alloca %"any[]", align 8
  %taddr54 = alloca i64, align 8
  %taddr55 = alloca i64, align 8
  %indirectarg56 = alloca %"char[]", align 8
  %indirectarg57 = alloca %"char[]", align 8
  %indirectarg58 = alloca %"char[]", align 8
  %varargslots59 = alloca [2 x %any], align 16
  %indirectarg62 = alloca %"any[]", align 8
  %taddr66 = alloca i64, align 8
  %taddr67 = alloca i64, align 8
  %indirectarg68 = alloca %"char[]", align 8
  %indirectarg69 = alloca %"char[]", align 8
  %indirectarg70 = alloca %"char[]", align 8
  %varargslots71 = alloca [2 x %any], align 16
  %indirectarg74 = alloca %"any[]", align 8
  %taddr79 = alloca i64, align 8
  %taddr80 = alloca i64, align 8
  %indirectarg81 = alloca %"char[]", align 8
  %indirectarg82 = alloca %"char[]", align 8
  %indirectarg83 = alloca %"char[]", align 8
  %varargslots84 = alloca [2 x %any], align 16
  %indirectarg87 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg91 = alloca %"char[]", align 8
  %indirectarg92 = alloca %"char[]", align 8
  %indirectarg93 = alloca %"char[]", align 8
  %indirectarg94 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !2178
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !2178
  br i1 %3, label %panic, label %checkok, !dbg !2178

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2179, !DIExpression(), !2178)
    #dbg_declare(ptr %1, !2180, !DIExpression(), !2178)
  %ptradd = getelementptr inbounds i8, ptr %1, i64 8, !dbg !2181
  %4 = load i64, ptr %ptradd, align 8, !dbg !2181
  %lt = icmp ult i64 0, %4, !dbg !2181
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !2181

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.13, i64 34 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.file.130, i64 21 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg5, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, i32 24) #5, !dbg !2181
  unreachable, !dbg !2181

assert_ok:                                        ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes, ptr align 8 %1, i32 16, i1 false)
    #dbg_declare(ptr %len, !2183, !DIExpression(), !2185)
  %ptradd6 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !2185
  %6 = load i64, ptr %ptradd6, align 8, !dbg !2185
  store i64 %6, ptr %len, align 8, !dbg !2185
  br label %loop.cond, !dbg !2186

loop.cond:                                        ; preds = %checkok88, %assert_ok
  %7 = load i64, ptr %len, align 8, !dbg !2187
  %lt7 = icmp ult i64 0, %7, !dbg !2187
  br i1 %lt7, label %loop.body, label %loop.exit, !dbg !2187

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %value, !2189, !DIExpression(), !2191)
  %8 = load ptr, ptr %self, align 8, !dbg !2192
  %9 = call i32 @std.math.random.SimpleRandom.next_int(ptr %8), !dbg !2191
  store i32 %9, ptr %value, align 4, !dbg !2191
  %10 = load i64, ptr %len, align 8, !dbg !2193
  %le = icmp ule i64 %10, 4, !dbg !2193
  br i1 %le, label %if.then, label %if.exit, !dbg !2193

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %11 = load ptr, ptr %taddr, align 8
  %12 = load i64, ptr %len, align 8, !dbg !2194
  %add = add i64 0, %12, !dbg !2194
  %gt = icmp ugt i64 0, %add, !dbg !2194
  %sub = sub i64 %add, 0, !dbg !2194
  %13 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !2194
  br i1 %13, label %panic8, label %checkok14, !dbg !2194

checkok14:                                        ; preds = %if.then
  %size = sub i64 %add, 0, !dbg !2194
  %14 = insertvalue %"char[]" undef, ptr %11, 0, !dbg !2194
  %15 = insertvalue %"char[]" %14, i64 %size, 1, !dbg !2194
  %16 = load %"char[]", ptr %bytes, align 8, !dbg !2194
  %17 = extractvalue %"char[]" %16, 0, !dbg !2194
  %18 = extractvalue %"char[]" %16, 1, !dbg !2194
  %gt15 = icmp ugt i64 0, %18, !dbg !2194
  %19 = call i1 @llvm.expect.i1(i1 %gt15, i1 false), !dbg !2194
  br i1 %19, label %panic16, label %checkok26, !dbg !2194

checkok26:                                        ; preds = %checkok14
  %size27 = sub i64 %18, 0, !dbg !2194
  %20 = insertvalue %"char[]" undef, ptr %17, 0, !dbg !2194
  %21 = insertvalue %"char[]" %20, i64 %size27, 1, !dbg !2194
  %22 = extractvalue %"char[]" %21, 0, !dbg !2194
  %23 = extractvalue %"char[]" %15, 0, !dbg !2194
  %24 = extractvalue %"char[]" %15, 1, !dbg !2194
  %25 = extractvalue %"char[]" %21, 1, !dbg !2194
  %neq = icmp ne i64 %25, %24, !dbg !2194
  %26 = call i1 @llvm.expect.i1(i1 %neq, i1 false), !dbg !2194
  br i1 %26, label %panic28, label %checkok38, !dbg !2194

checkok38:                                        ; preds = %checkok26
  %27 = mul i64 %24, 1, !dbg !2194
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %22, ptr align 1 %23, i64 %27, i1 false), !dbg !2194
  br label %expr_block.exit, !dbg !2196

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr39, align 8
  %28 = load ptr, ptr %taddr39, align 8
  %29 = insertvalue %"char[]" undef, ptr %28, 0
  %30 = insertvalue %"char[]" %29, i64 4, 1
  %31 = load %"char[]", ptr %bytes, align 8, !dbg !2197
  %32 = extractvalue %"char[]" %31, 0, !dbg !2197
  %33 = extractvalue %"char[]" %31, 1, !dbg !2197
  %gt40 = icmp sgt i64 0, %33, !dbg !2197
  %34 = call i1 @llvm.expect.i1(i1 %gt40, i1 false), !dbg !2197
  br i1 %34, label %panic41, label %checkok51, !dbg !2197

checkok51:                                        ; preds = %if.exit
  %lt52 = icmp slt i64 %33, 4, !dbg !2197
  %35 = call i1 @llvm.expect.i1(i1 %lt52, i1 false), !dbg !2197
  br i1 %35, label %panic53, label %checkok63, !dbg !2197

checkok63:                                        ; preds = %checkok51
  %36 = insertvalue %"char[]" undef, ptr %32, 0, !dbg !2197
  %37 = insertvalue %"char[]" %36, i64 4, 1, !dbg !2197
  %38 = extractvalue %"char[]" %37, 0, !dbg !2197
  %39 = extractvalue %"char[]" %30, 0, !dbg !2197
  %40 = extractvalue %"char[]" %30, 1, !dbg !2197
  %41 = extractvalue %"char[]" %37, 1, !dbg !2197
  %neq64 = icmp ne i64 %41, %40, !dbg !2197
  %42 = call i1 @llvm.expect.i1(i1 %neq64, i1 false), !dbg !2197
  br i1 %42, label %panic65, label %checkok75, !dbg !2197

checkok75:                                        ; preds = %checkok63
  %43 = mul i64 %40, 1, !dbg !2197
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %38, ptr align 1 %39, i64 %43, i1 false), !dbg !2197
  %44 = load i64, ptr %len, align 8, !dbg !2198
  %sub76 = sub i64 %44, 4, !dbg !2198
  store i64 %sub76, ptr %len, align 8, !dbg !2198
  %45 = load %"char[]", ptr %bytes, align 8, !dbg !2199
  %46 = extractvalue %"char[]" %45, 0, !dbg !2199
  %47 = extractvalue %"char[]" %45, 1, !dbg !2199
  %gt77 = icmp ugt i64 4, %47, !dbg !2199
  %48 = call i1 @llvm.expect.i1(i1 %gt77, i1 false), !dbg !2199
  br i1 %48, label %panic78, label %checkok88, !dbg !2199

checkok88:                                        ; preds = %checkok75
  %size89 = sub i64 %47, 4, !dbg !2199
  %ptradd90 = getelementptr inbounds i8, ptr %46, i64 4, !dbg !2199
  %49 = insertvalue %"char[]" undef, ptr %ptradd90, 0, !dbg !2199
  %50 = insertvalue %"char[]" %49, i64 %size89, 1, !dbg !2199
  store %"char[]" %50, ptr %bytes, align 8, !dbg !2199
  br label %loop.cond, !dbg !2199

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.131, i64 30 }, ptr %string, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg91, ptr align 8 %string, i32 16, i1 false)
  store %"char[]" { ptr @.str.132, i64 21 }, ptr %indirectarg92, align 8
  store %"char[]" { ptr @.str.133, i64 23 }, ptr %indirectarg93, align 8
  store %"any[]" zeroinitializer, ptr %indirectarg94, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg91, ptr align 8 %indirectarg92, ptr align 8 %indirectarg93, i32 26, ptr align 8 %indirectarg94), !dbg !2200
  unreachable, !dbg !2200

expr_block.exit:                                  ; preds = %checkok38
  ret void, !dbg !2200

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.130, i64 21 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg2, align 8
  %51 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %51(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 26) #5, !dbg !2178
  unreachable, !dbg !2178

panic8:                                           ; preds = %if.then
  store i64 %sub, ptr %taddr9, align 8
  %52 = insertvalue %any undef, ptr %taddr9, 0
  %53 = insertvalue %any %52, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.14, i64 43 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg12, align 8
  store %any %53, ptr %varargslots, align 16
  %54 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %54, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg13, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, i32 153, ptr align 8 %indirectarg13) #5, !dbg !2194
  unreachable, !dbg !2194

panic16:                                          ; preds = %checkok14
  store i64 %18, ptr %taddr17, align 8
  %55 = insertvalue %any undef, ptr %taddr17, 0
  %56 = insertvalue %any %55, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr18, align 8
  %57 = insertvalue %any undef, ptr %taddr18, 0
  %58 = insertvalue %any %57, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.16, i64 61 }, ptr %indirectarg19, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg20, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg21, align 8
  store %any %56, ptr %varargslots22, align 16
  %ptradd23 = getelementptr inbounds i8, ptr %varargslots22, i64 16
  store %any %58, ptr %ptradd23, align 16
  %59 = insertvalue %"any[]" undef, ptr %varargslots22, 0
  %"$$temp24" = insertvalue %"any[]" %59, i64 2, 1
  store %"any[]" %"$$temp24", ptr %indirectarg25, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg19, ptr align 8 %indirectarg20, ptr align 8 %indirectarg21, i32 153, ptr align 8 %indirectarg25) #5, !dbg !2194
  unreachable, !dbg !2194

panic28:                                          ; preds = %checkok26
  store i64 %25, ptr %taddr29, align 8
  %60 = insertvalue %any undef, ptr %taddr29, 0
  %61 = insertvalue %any %60, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %24, ptr %taddr30, align 8
  %62 = insertvalue %any undef, ptr %taddr30, 0
  %63 = insertvalue %any %62, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 38 }, ptr %indirectarg31, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg32, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg33, align 8
  store %any %61, ptr %varargslots34, align 16
  %ptradd35 = getelementptr inbounds i8, ptr %varargslots34, i64 16
  store %any %63, ptr %ptradd35, align 16
  %64 = insertvalue %"any[]" undef, ptr %varargslots34, 0
  %"$$temp36" = insertvalue %"any[]" %64, i64 2, 1
  store %"any[]" %"$$temp36", ptr %indirectarg37, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg31, ptr align 8 %indirectarg32, ptr align 8 %indirectarg33, i32 153, ptr align 8 %indirectarg37) #5, !dbg !2194
  unreachable, !dbg !2194

panic41:                                          ; preds = %if.exit
  store i64 %33, ptr %taddr42, align 8
  %65 = insertvalue %any undef, ptr %taddr42, 0
  %66 = insertvalue %any %65, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr43, align 8
  %67 = insertvalue %any undef, ptr %taddr43, 0
  %68 = insertvalue %any %67, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.16, i64 61 }, ptr %indirectarg44, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg45, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg46, align 8
  store %any %66, ptr %varargslots47, align 16
  %ptradd48 = getelementptr inbounds i8, ptr %varargslots47, i64 16
  store %any %68, ptr %ptradd48, align 16
  %69 = insertvalue %"any[]" undef, ptr %varargslots47, 0
  %"$$temp49" = insertvalue %"any[]" %69, i64 2, 1
  store %"any[]" %"$$temp49", ptr %indirectarg50, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg44, ptr align 8 %indirectarg45, ptr align 8 %indirectarg46, i32 156, ptr align 8 %indirectarg50) #5, !dbg !2197
  unreachable, !dbg !2197

panic53:                                          ; preds = %checkok51
  store i64 3, ptr %taddr54, align 8
  %70 = insertvalue %any undef, ptr %taddr54, 0
  %71 = insertvalue %any %70, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %33, ptr %taddr55, align 8
  %72 = insertvalue %any undef, ptr %taddr55, 0
  %73 = insertvalue %any %72, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.18, i64 60 }, ptr %indirectarg56, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg57, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg58, align 8
  store %any %71, ptr %varargslots59, align 16
  %ptradd60 = getelementptr inbounds i8, ptr %varargslots59, i64 16
  store %any %73, ptr %ptradd60, align 16
  %74 = insertvalue %"any[]" undef, ptr %varargslots59, 0
  %"$$temp61" = insertvalue %"any[]" %74, i64 2, 1
  store %"any[]" %"$$temp61", ptr %indirectarg62, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg56, ptr align 8 %indirectarg57, ptr align 8 %indirectarg58, i32 156, ptr align 8 %indirectarg62) #5, !dbg !2197
  unreachable, !dbg !2197

panic65:                                          ; preds = %checkok63
  store i64 %41, ptr %taddr66, align 8
  %75 = insertvalue %any undef, ptr %taddr66, 0
  %76 = insertvalue %any %75, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %40, ptr %taddr67, align 8
  %77 = insertvalue %any undef, ptr %taddr67, 0
  %78 = insertvalue %any %77, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 38 }, ptr %indirectarg68, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg69, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg70, align 8
  store %any %76, ptr %varargslots71, align 16
  %ptradd72 = getelementptr inbounds i8, ptr %varargslots71, i64 16
  store %any %78, ptr %ptradd72, align 16
  %79 = insertvalue %"any[]" undef, ptr %varargslots71, 0
  %"$$temp73" = insertvalue %"any[]" %79, i64 2, 1
  store %"any[]" %"$$temp73", ptr %indirectarg74, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg68, ptr align 8 %indirectarg69, ptr align 8 %indirectarg70, i32 156, ptr align 8 %indirectarg74) #5, !dbg !2197
  unreachable, !dbg !2197

panic78:                                          ; preds = %checkok75
  store i64 %47, ptr %taddr79, align 8
  %80 = insertvalue %any undef, ptr %taddr79, 0
  %81 = insertvalue %any %80, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 4, ptr %taddr80, align 8
  %82 = insertvalue %any undef, ptr %taddr80, 0
  %83 = insertvalue %any %82, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.16, i64 61 }, ptr %indirectarg81, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg82, align 8
  store %"char[]" { ptr @.func.12, i64 10 }, ptr %indirectarg83, align 8
  store %any %81, ptr %varargslots84, align 16
  %ptradd85 = getelementptr inbounds i8, ptr %varargslots84, i64 16
  store %any %83, ptr %ptradd85, align 16
  %84 = insertvalue %"any[]" undef, ptr %varargslots84, 0
  %"$$temp86" = insertvalue %"any[]" %84, i64 2, 1
  store %"any[]" %"$$temp86", ptr %indirectarg87, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg81, ptr align 8 %indirectarg82, ptr align 8 %indirectarg83, i32 158, ptr align 8 %indirectarg87) #5, !dbg !2199
  unreachable, !dbg !2199
}

; Function Attrs: nounwind ssp uwtable
define weak_odr <2 x i64> @std.math.random.SimpleRandom.next_int128(ptr %0) #0 comdat !dbg !2203 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %taddr = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !2206
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2206
  br i1 %2, label %panic, label %checkok, !dbg !2206

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2207, !DIExpression(), !2206)
  %3 = load ptr, ptr %self, align 8, !dbg !2208
  %4 = call i64 @std.math.random.SimpleRandom.next_long(ptr %3), !dbg !2210
  %zext = zext i64 %4 to i128, !dbg !2210
  %shl = shl i128 %zext, 64, !dbg !2210
  %5 = freeze i128 %shl, !dbg !2210
  %6 = load ptr, ptr %self, align 8, !dbg !2208
  %7 = call i64 @std.math.random.SimpleRandom.next_long(ptr %6), !dbg !2210
  %zext3 = zext i64 %7 to i128, !dbg !2210
  %add = add i128 %5, %zext3, !dbg !2210
  store i128 %add, ptr %taddr, align 16
  %8 = load <2 x i64>, ptr %taddr, align 16
  ret <2 x i64> %8

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.130, i64 21 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.21, i64 11 }, ptr %indirectarg2, align 8
  %9 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %9(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 27) #5, !dbg !2206
  unreachable, !dbg !2206
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.math.random.SimpleRandom.next_long(ptr %0) #0 comdat !dbg !2211 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2214
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2214
  br i1 %2, label %panic, label %checkok, !dbg !2214

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2215, !DIExpression(), !2214)
  %3 = load ptr, ptr %self, align 8, !dbg !2216
  %4 = call i32 @std.math.random.SimpleRandom.next_int(ptr %3), !dbg !2218
  %zext = zext i32 %4 to i64, !dbg !2218
  %shl = shl i64 %zext, 32, !dbg !2218
  %5 = freeze i64 %shl, !dbg !2218
  %6 = load ptr, ptr %self, align 8, !dbg !2216
  %7 = call i32 @std.math.random.SimpleRandom.next_int(ptr %6), !dbg !2218
  %zext3 = zext i32 %7 to i64, !dbg !2218
  %add = add i64 %5, %zext3, !dbg !2218
  ret i64 %add, !dbg !2218

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.130, i64 21 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.10, i64 9 }, ptr %indirectarg2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 28) #5, !dbg !2214
  unreachable, !dbg !2214
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i16 @std.math.random.SimpleRandom.next_short(ptr %0) #0 comdat !dbg !2219 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2222
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2222
  br i1 %2, label %panic, label %checkok, !dbg !2222

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2223, !DIExpression(), !2222)
  %3 = load ptr, ptr %self, align 8, !dbg !2222
  %4 = call i32 @std.math.random.SimpleRandom.next_int(ptr %3), !dbg !2222
  %trunc = trunc i32 %4 to i16, !dbg !2222
  ret i16 %trunc, !dbg !2222

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.130, i64 21 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.23, i64 10 }, ptr %indirectarg2, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 29) #5, !dbg !2222
  unreachable, !dbg !2222
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i8 @std.math.random.SimpleRandom.next_byte(ptr %0) #0 comdat !dbg !2224 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2227
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2227
  br i1 %2, label %panic, label %checkok, !dbg !2227

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2228, !DIExpression(), !2227)
  %3 = load ptr, ptr %self, align 8, !dbg !2227
  %4 = call i32 @std.math.random.SimpleRandom.next_int(ptr %3), !dbg !2227
  %trunc = trunc i32 %4 to i8, !dbg !2227
  ret i8 %trunc, !dbg !2227

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.130, i64 21 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.24, i64 9 }, ptr %indirectarg2, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 30) #5, !dbg !2227
  unreachable, !dbg !2227
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.math.random.srand(i64 %0) #0 comdat !dbg !2229 {
entry:
  %seed = alloca i64, align 8
  %taddr = alloca ptr, align 8
  %indirectarg = alloca %"char[]", align 8
  store i64 %0, ptr %seed, align 8
    #dbg_declare(ptr %seed, !2232, !DIExpression(), !2233)
  %1 = call ptr @llvm.threadlocal.address.p0(ptr @std.math.random.default_random), !dbg !2234
  store ptr %seed, ptr %taddr, align 8
  %2 = load ptr, ptr %taddr, align 8
  %3 = insertvalue %"char[]" undef, ptr %2, 0
  %4 = insertvalue %"char[]" %3, i64 8, 1
  store %"char[]" %4, ptr %indirectarg, align 8
  call void @std.math.random.Sfc64Random.set_seed(ptr %1, ptr align 8 %indirectarg), !dbg !2234
  %5 = call ptr @llvm.threadlocal.address.p0(ptr @std.math.random.default_random_initialized), !dbg !2235
  store i8 1, ptr %5, align 1, !dbg !2235
  ret void, !dbg !2235
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i32 @std.math.random.rand(i32 %0) #0 comdat !dbg !2236 {
entry:
  %range = alloca i32, align 4
  %random = alloca ptr, align 8
  %random1 = alloca ptr, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %indirectarg3 = alloca %"char[]", align 8
  %sretparam = alloca [32 x i8], align 1
  %indirectarg4 = alloca %"char[]", align 8
  %random5 = alloca ptr, align 8
  %range6 = alloca i32, align 4
  %blockret = alloca i32, align 4
  %random7 = alloca ptr, align 8
  %indirectarg9 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg14 = alloca %"char[]", align 8
  %indirectarg15 = alloca %"char[]", align 8
  %indirectarg16 = alloca %"char[]", align 8
  %mask = alloca i32, align 4
  %self = alloca i32, align 4
  %taddr = alloca i32, align 4
  %indirectarg19 = alloca %"char[]", align 8
  %indirectarg20 = alloca %"char[]", align 8
  %indirectarg21 = alloca %"char[]", align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg22 = alloca %"any[]", align 8
  %x = alloca i32, align 4
  store i32 %0, ptr %range, align 4
    #dbg_declare(ptr %range, !2239, !DIExpression(), !2240)
  %1 = call ptr @llvm.threadlocal.address.p0(ptr @std.math.random.default_random_initialized), !dbg !2241
  %2 = load i8, ptr %1, align 1, !dbg !2241
  %3 = trunc i8 %2 to i1, !dbg !2241
  br i1 %3, label %if.exit, label %if.else, !dbg !2241

if.else:                                          ; preds = %entry
  store ptr @std.math.random.default_random, ptr %random, align 8
  %4 = load ptr, ptr %random, align 8
  store ptr %4, ptr %random1, align 8
  br i1 true, label %assert_ok, label %assert_fail, !dbg !2244

assert_fail:                                      ; preds = %if.else
  store %"char[]" { ptr @.panic_msg.135, i64 38 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg2, align 8
  store %"char[]" { ptr @.func.136, i64 4 }, ptr %indirectarg3, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg, ptr align 8 %indirectarg2, ptr align 8 %indirectarg3, i32 181) #5, !dbg !2246
  unreachable, !dbg !2246

assert_ok:                                        ; preds = %if.else
  call void @std.math.random.entropy(ptr sret([32 x i8]) align 1 %sretparam), !dbg !2251
  %6 = insertvalue %"char[]" undef, ptr %sretparam, 0, !dbg !2251
  %7 = insertvalue %"char[]" %6, i64 32, 1, !dbg !2251
  %8 = load ptr, ptr %random, align 8, !dbg !2251
  store %"char[]" %7, ptr %indirectarg4, align 8
  call void @std.math.random.Sfc64Random.set_seed(ptr %8, ptr align 8 %indirectarg4), !dbg !2251
  %9 = call ptr @llvm.threadlocal.address.p0(ptr @std.math.random.default_random_initialized), !dbg !2252
  store i8 1, ptr %9, align 1, !dbg !2252
  br label %if.exit, !dbg !2252

if.exit:                                          ; preds = %assert_ok, %entry
  store ptr @std.math.random.default_random, ptr %random5, align 8
  %10 = load i32, ptr %range, align 4, !dbg !2253
  store i32 %10, ptr %range6, align 4
  %11 = load ptr, ptr %random5, align 8
  store ptr %11, ptr %random7, align 8
  br i1 true, label %assert_ok12, label %assert_fail8, !dbg !2254

assert_fail8:                                     ; preds = %if.exit
  store %"char[]" { ptr @.panic_msg.135, i64 38 }, ptr %indirectarg9, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.func.136, i64 4 }, ptr %indirectarg11, align 8
  %12 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %12(ptr align 8 %indirectarg9, ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, i32 83) #5, !dbg !2256
  unreachable, !dbg !2256

assert_ok12:                                      ; preds = %if.exit
  %13 = load i32, ptr %range6, align 4, !dbg !2259
  %lt = icmp ult i32 0, %13, !dbg !2256
  br i1 %lt, label %assert_ok17, label %assert_fail13, !dbg !2256

assert_fail13:                                    ; preds = %assert_ok12
  store %"char[]" { ptr @.panic_msg.137, i64 30 }, ptr %indirectarg14, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg15, align 8
  store %"char[]" { ptr @.func.136, i64 4 }, ptr %indirectarg16, align 8
  %14 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %14(ptr align 8 %indirectarg14, ptr align 8 %indirectarg15, ptr align 8 %indirectarg16, i32 83) #5, !dbg !2256
  unreachable, !dbg !2256

assert_ok17:                                      ; preds = %assert_ok12
  %15 = load i32, ptr %range6, align 4, !dbg !2260
  %eq = icmp eq i32 1, %15, !dbg !2260
  br i1 %eq, label %if.then, label %if.exit18, !dbg !2260

if.then:                                          ; preds = %assert_ok17
  store i32 0, ptr %blockret, align 4, !dbg !2260
  br label %expr_block.exit, !dbg !2260

if.exit18:                                        ; preds = %assert_ok17
    #dbg_declare(ptr %mask, !2261, !DIExpression(), !2262)
  store i32 -1, ptr %mask, align 4, !dbg !2262
  %16 = load i32, ptr %range6, align 4, !dbg !2263
  %sub = sub i32 %16, 1, !dbg !2263
  store i32 %sub, ptr %range6, align 4, !dbg !2263
  %17 = load i32, ptr %mask, align 4, !dbg !2264
  %18 = load i32, ptr %range6, align 4
  store i32 %18, ptr %self, align 4
  %19 = load i32, ptr %self, align 4, !dbg !2265
  %20 = call i32 @llvm.ctlz.i32(i32 %19, i1 false), !dbg !2265
  %shift_exceeds = icmp uge i32 %20, 32, !dbg !2264
  %21 = call i1 @llvm.expect.i1(i1 %shift_exceeds, i1 false), !dbg !2264
  br i1 %21, label %panic, label %checkok, !dbg !2264

checkok:                                          ; preds = %if.exit18
  %lshr = lshr i32 %17, %20, !dbg !2264
  %22 = freeze i32 %lshr, !dbg !2264
  store i32 %22, ptr %mask, align 4, !dbg !2264
    #dbg_declare(ptr %x, !2267, !DIExpression(), !2268)
  br label %loop.body, !dbg !2269

loop.cond:                                        ; preds = %loop.body
  %23 = load i32, ptr %x, align 4, !dbg !2270
  %24 = load i32, ptr %range6, align 4, !dbg !2270
  %gt = icmp ugt i32 %23, %24, !dbg !2270
  br i1 %gt, label %loop.body, label %loop.exit, !dbg !2270

loop.body:                                        ; preds = %loop.cond, %checkok
  %25 = load ptr, ptr %random5, align 8, !dbg !2272
  %26 = call i32 @std.math.random.Sfc64Random.next_int(ptr %25), !dbg !2272
  %27 = load i32, ptr %mask, align 4, !dbg !2272
  %and = and i32 %26, %27, !dbg !2272
  store i32 %and, ptr %x, align 4, !dbg !2272
  br label %loop.cond, !dbg !2272

loop.exit:                                        ; preds = %loop.cond
  %28 = load i32, ptr %x, align 4, !dbg !2274
  store i32 %28, ptr %blockret, align 4, !dbg !2274
  br label %expr_block.exit, !dbg !2274

expr_block.exit:                                  ; preds = %loop.exit, %if.then
  %29 = load i32, ptr %blockret, align 4, !dbg !2274
  ret i32 %29, !dbg !2274

panic:                                            ; preds = %if.exit18
  store i32 %20, ptr %taddr, align 4
  %30 = insertvalue %any undef, ptr %taddr, 0
  %31 = insertvalue %any %30, i64 ptrtoint (ptr @"$ct.uint" to i64), 1
  store %"char[]" { ptr @.panic_msg.138, i64 35 }, ptr %indirectarg19, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg20, align 8
  store %"char[]" { ptr @.func.136, i64 4 }, ptr %indirectarg21, align 8
  store %any %31, ptr %varargslots, align 16
  %32 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %32, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg22, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg19, ptr align 8 %indirectarg20, ptr align 8 %indirectarg21, i32 42, ptr align 8 %indirectarg22) #5, !dbg !2264
  unreachable, !dbg !2264
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i32 @std.math.random.rand_in_range(i32 %0, i32 %1) #0 comdat !dbg !2275 {
entry:
  %min = alloca i32, align 4
  %max = alloca i32, align 4
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %random = alloca ptr, align 8
  %random3 = alloca ptr, align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg7 = alloca %"char[]", align 8
  %sretparam = alloca [32 x i8], align 1
  %indirectarg9 = alloca %"char[]", align 8
  %random10 = alloca ptr, align 8
  %min11 = alloca i32, align 4
  %max12 = alloca i32, align 4
  %random13 = alloca ptr, align 8
  %indirectarg15 = alloca %"char[]", align 8
  %indirectarg16 = alloca %"char[]", align 8
  %indirectarg17 = alloca %"char[]", align 8
  %indirectarg21 = alloca %"char[]", align 8
  %indirectarg22 = alloca %"char[]", align 8
  %indirectarg23 = alloca %"char[]", align 8
  %random25 = alloca ptr, align 8
  %range = alloca i32, align 4
  %blockret = alloca i32, align 4
  %random26 = alloca ptr, align 8
  %indirectarg28 = alloca %"char[]", align 8
  %indirectarg29 = alloca %"char[]", align 8
  %indirectarg30 = alloca %"char[]", align 8
  %indirectarg33 = alloca %"char[]", align 8
  %indirectarg34 = alloca %"char[]", align 8
  %indirectarg35 = alloca %"char[]", align 8
  %mask = alloca i32, align 4
  %self = alloca i32, align 4
  %taddr = alloca i32, align 4
  %indirectarg39 = alloca %"char[]", align 8
  %indirectarg40 = alloca %"char[]", align 8
  %indirectarg41 = alloca %"char[]", align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg42 = alloca %"any[]", align 8
  %x = alloca i32, align 4
  store i32 %0, ptr %min, align 4
    #dbg_declare(ptr %min, !2279, !DIExpression(), !2280)
  store i32 %1, ptr %max, align 4
    #dbg_declare(ptr %max, !2281, !DIExpression(), !2280)
  %2 = load i32, ptr %max, align 4, !dbg !2282
  %3 = load i32, ptr %min, align 4, !dbg !2282
  %ge = icmp sge i32 %2, %3, !dbg !2282
  br i1 %ge, label %assert_ok, label %assert_fail, !dbg !2282

assert_fail:                                      ; preds = %entry
  store %"char[]" { ptr @.panic_msg.139, i64 31 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.140, i64 13 }, ptr %indirectarg2, align 8
  %4 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %4(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 88) #5, !dbg !2282
  unreachable, !dbg !2282

assert_ok:                                        ; preds = %entry
  %5 = call ptr @llvm.threadlocal.address.p0(ptr @std.math.random.default_random_initialized), !dbg !2284
  %6 = load i8, ptr %5, align 1, !dbg !2284
  %7 = trunc i8 %6 to i1, !dbg !2284
  br i1 %7, label %if.exit, label %if.else, !dbg !2284

if.else:                                          ; preds = %assert_ok
  store ptr @std.math.random.default_random, ptr %random, align 8
  %8 = load ptr, ptr %random, align 8
  store ptr %8, ptr %random3, align 8
  br i1 true, label %assert_ok8, label %assert_fail4, !dbg !2287

assert_fail4:                                     ; preds = %if.else
  store %"char[]" { ptr @.panic_msg.135, i64 38 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg6, align 8
  store %"char[]" { ptr @.func.140, i64 13 }, ptr %indirectarg7, align 8
  %9 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %9(ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, ptr align 8 %indirectarg7, i32 181) #5, !dbg !2289
  unreachable, !dbg !2289

assert_ok8:                                       ; preds = %if.else
  call void @std.math.random.entropy(ptr sret([32 x i8]) align 1 %sretparam), !dbg !2294
  %10 = insertvalue %"char[]" undef, ptr %sretparam, 0, !dbg !2294
  %11 = insertvalue %"char[]" %10, i64 32, 1, !dbg !2294
  %12 = load ptr, ptr %random, align 8, !dbg !2294
  store %"char[]" %11, ptr %indirectarg9, align 8
  call void @std.math.random.Sfc64Random.set_seed(ptr %12, ptr align 8 %indirectarg9), !dbg !2294
  %13 = call ptr @llvm.threadlocal.address.p0(ptr @std.math.random.default_random_initialized), !dbg !2295
  store i8 1, ptr %13, align 1, !dbg !2295
  br label %if.exit, !dbg !2295

if.exit:                                          ; preds = %assert_ok8, %assert_ok
  store ptr @std.math.random.default_random, ptr %random10, align 8
  %14 = load i32, ptr %min, align 4
  store i32 %14, ptr %min11, align 4
  %15 = load i32, ptr %max, align 4
  store i32 %15, ptr %max12, align 4
  %16 = load ptr, ptr %random10, align 8
  store ptr %16, ptr %random13, align 8
  br i1 true, label %assert_ok18, label %assert_fail14, !dbg !2296

assert_fail14:                                    ; preds = %if.exit
  store %"char[]" { ptr @.panic_msg.135, i64 38 }, ptr %indirectarg15, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg16, align 8
  store %"char[]" { ptr @.func.140, i64 13 }, ptr %indirectarg17, align 8
  %17 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %17(ptr align 8 %indirectarg15, ptr align 8 %indirectarg16, ptr align 8 %indirectarg17, i32 93) #5, !dbg !2298
  unreachable, !dbg !2298

assert_ok18:                                      ; preds = %if.exit
  %18 = load i32, ptr %max12, align 4, !dbg !2302
  %19 = load i32, ptr %min11, align 4, !dbg !2302
  %ge19 = icmp sge i32 %18, %19, !dbg !2298
  br i1 %ge19, label %assert_ok24, label %assert_fail20, !dbg !2298

assert_fail20:                                    ; preds = %assert_ok18
  store %"char[]" { ptr @.panic_msg.139, i64 31 }, ptr %indirectarg21, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg22, align 8
  store %"char[]" { ptr @.func.140, i64 13 }, ptr %indirectarg23, align 8
  %20 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %20(ptr align 8 %indirectarg21, ptr align 8 %indirectarg22, ptr align 8 %indirectarg23, i32 93) #5, !dbg !2298
  unreachable, !dbg !2298

assert_ok24:                                      ; preds = %assert_ok18
  %21 = load ptr, ptr %random10, align 8
  store ptr %21, ptr %random25, align 8
  %22 = load i32, ptr %max12, align 4, !dbg !2303
  %23 = load i32, ptr %min11, align 4, !dbg !2303
  %sub = sub i32 %22, %23, !dbg !2303
  %add = add i32 %sub, 1, !dbg !2303
  store i32 %add, ptr %range, align 4
  %24 = load ptr, ptr %random25, align 8
  store ptr %24, ptr %random26, align 8
  br i1 true, label %assert_ok31, label %assert_fail27, !dbg !2304

assert_fail27:                                    ; preds = %assert_ok24
  store %"char[]" { ptr @.panic_msg.135, i64 38 }, ptr %indirectarg28, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg29, align 8
  store %"char[]" { ptr @.func.140, i64 13 }, ptr %indirectarg30, align 8
  %25 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %25(ptr align 8 %indirectarg28, ptr align 8 %indirectarg29, ptr align 8 %indirectarg30, i32 60) #5, !dbg !2306
  unreachable, !dbg !2306

assert_ok31:                                      ; preds = %assert_ok24
  %26 = load i32, ptr %range, align 4, !dbg !2309
  %lt = icmp ult i32 0, %26, !dbg !2306
  br i1 %lt, label %assert_ok36, label %assert_fail32, !dbg !2306

assert_fail32:                                    ; preds = %assert_ok31
  store %"char[]" { ptr @.panic_msg.137, i64 30 }, ptr %indirectarg33, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg34, align 8
  store %"char[]" { ptr @.func.140, i64 13 }, ptr %indirectarg35, align 8
  %27 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %27(ptr align 8 %indirectarg33, ptr align 8 %indirectarg34, ptr align 8 %indirectarg35, i32 60) #5, !dbg !2306
  unreachable, !dbg !2306

assert_ok36:                                      ; preds = %assert_ok31
  %28 = load i32, ptr %range, align 4, !dbg !2310
  %eq = icmp eq i32 1, %28, !dbg !2310
  br i1 %eq, label %if.then, label %if.exit37, !dbg !2310

if.then:                                          ; preds = %assert_ok36
  store i32 0, ptr %blockret, align 4, !dbg !2310
  br label %expr_block.exit, !dbg !2310

if.exit37:                                        ; preds = %assert_ok36
    #dbg_declare(ptr %mask, !2311, !DIExpression(), !2312)
  store i32 -1, ptr %mask, align 4, !dbg !2312
  %29 = load i32, ptr %range, align 4, !dbg !2313
  %sub38 = sub i32 %29, 1, !dbg !2313
  store i32 %sub38, ptr %range, align 4, !dbg !2313
  %30 = load i32, ptr %mask, align 4, !dbg !2314
  %31 = load i32, ptr %range, align 4
  store i32 %31, ptr %self, align 4
  %32 = load i32, ptr %self, align 4, !dbg !2315
  %33 = call i32 @llvm.ctlz.i32(i32 %32, i1 false), !dbg !2315
  %shift_exceeds = icmp uge i32 %33, 32, !dbg !2314
  %34 = call i1 @llvm.expect.i1(i1 %shift_exceeds, i1 false), !dbg !2314
  br i1 %34, label %panic, label %checkok, !dbg !2314

checkok:                                          ; preds = %if.exit37
  %lshr = lshr i32 %30, %33, !dbg !2314
  %35 = freeze i32 %lshr, !dbg !2314
  store i32 %35, ptr %mask, align 4, !dbg !2314
    #dbg_declare(ptr %x, !2317, !DIExpression(), !2318)
  br label %loop.body, !dbg !2319

loop.cond:                                        ; preds = %loop.body
  %36 = load i32, ptr %x, align 4, !dbg !2320
  %37 = load i32, ptr %range, align 4, !dbg !2320
  %gt = icmp ugt i32 %36, %37, !dbg !2320
  br i1 %gt, label %loop.body, label %loop.exit, !dbg !2320

loop.body:                                        ; preds = %loop.cond, %checkok
  %38 = load ptr, ptr %random25, align 8, !dbg !2322
  %39 = call i32 @std.math.random.Sfc64Random.next_int(ptr %38), !dbg !2322
  %40 = load i32, ptr %mask, align 4, !dbg !2322
  %and = and i32 %39, %40, !dbg !2322
  store i32 %and, ptr %x, align 4, !dbg !2322
  br label %loop.cond, !dbg !2322

loop.exit:                                        ; preds = %loop.cond
  %41 = load i32, ptr %x, align 4, !dbg !2324
  store i32 %41, ptr %blockret, align 4, !dbg !2324
  br label %expr_block.exit, !dbg !2324

expr_block.exit:                                  ; preds = %loop.exit, %if.then
  %42 = load i32, ptr %blockret, align 4, !dbg !2324
  %43 = load i32, ptr %min11, align 4, !dbg !2303
  %add43 = add i32 %42, %43, !dbg !2303
  ret i32 %add43, !dbg !2303

panic:                                            ; preds = %if.exit37
  store i32 %33, ptr %taddr, align 4
  %44 = insertvalue %any undef, ptr %taddr, 0
  %45 = insertvalue %any %44, i64 ptrtoint (ptr @"$ct.uint" to i64), 1
  store %"char[]" { ptr @.panic_msg.138, i64 35 }, ptr %indirectarg39, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg40, align 8
  store %"char[]" { ptr @.func.140, i64 13 }, ptr %indirectarg41, align 8
  store %any %45, ptr %varargslots, align 16
  %46 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %46, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg42, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg39, ptr align 8 %indirectarg40, ptr align 8 %indirectarg41, i32 42, ptr align 8 %indirectarg42) #5, !dbg !2314
  unreachable, !dbg !2314
}

; Function Attrs: nounwind ssp uwtable
define weak_odr double @std.math.random.rnd() #0 comdat !dbg !2325 {
entry:
  %random = alloca ptr, align 8
  %random1 = alloca ptr, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %indirectarg3 = alloca %"char[]", align 8
  %sretparam = alloca [32 x i8], align 1
  %indirectarg4 = alloca %"char[]", align 8
  %val = alloca i64, align 8
  %0 = call ptr @llvm.threadlocal.address.p0(ptr @std.math.random.default_random_initialized), !dbg !2329
  %1 = load i8, ptr %0, align 1, !dbg !2329
  %2 = trunc i8 %1 to i1, !dbg !2329
  br i1 %2, label %if.exit, label %if.else, !dbg !2329

if.else:                                          ; preds = %entry
  store ptr @std.math.random.default_random, ptr %random, align 8
  %3 = load ptr, ptr %random, align 8
  store ptr %3, ptr %random1, align 8
  br i1 true, label %assert_ok, label %assert_fail, !dbg !2332

assert_fail:                                      ; preds = %if.else
  store %"char[]" { ptr @.panic_msg.135, i64 38 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.15, i64 9 }, ptr %indirectarg2, align 8
  store %"char[]" { ptr @.func.141, i64 3 }, ptr %indirectarg3, align 8
  %4 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %4(ptr align 8 %indirectarg, ptr align 8 %indirectarg2, ptr align 8 %indirectarg3, i32 181) #5, !dbg !2334
  unreachable, !dbg !2334

assert_ok:                                        ; preds = %if.else
  call void @std.math.random.entropy(ptr sret([32 x i8]) align 1 %sretparam), !dbg !2339
  %5 = insertvalue %"char[]" undef, ptr %sretparam, 0, !dbg !2339
  %6 = insertvalue %"char[]" %5, i64 32, 1, !dbg !2339
  %7 = load ptr, ptr %random, align 8, !dbg !2339
  store %"char[]" %6, ptr %indirectarg4, align 8
  call void @std.math.random.Sfc64Random.set_seed(ptr %7, ptr align 8 %indirectarg4), !dbg !2339
  %8 = call ptr @llvm.threadlocal.address.p0(ptr @std.math.random.default_random_initialized), !dbg !2340
  store i8 1, ptr %8, align 1, !dbg !2340
  br label %if.exit, !dbg !2340

if.exit:                                          ; preds = %assert_ok, %entry
    #dbg_declare(ptr %val, !2341, !DIExpression(), !2342)
  %9 = call ptr @llvm.threadlocal.address.p0(ptr @std.math.random.default_random), !dbg !2342
  %10 = call i64 @std.math.random.Sfc64Random.next_long(ptr %9), !dbg !2342
  %and = and i64 %10, 9007199254740991, !dbg !2342
  store i64 %and, ptr %val, align 8, !dbg !2342
  %11 = load i64, ptr %val, align 8, !dbg !2343
  %uifp = uitofp i64 %11 to double, !dbg !2343
  %fmul = fmul double %uifp, 0x3CA0000000000000, !dbg !2343
  ret double %fmul, !dbg !2343
}

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(none)
declare i1 @llvm.expect.i1(i1, i1) #1

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i32(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i32, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
declare void @std.core.builtin.panicf(ptr align 8, ptr align 8, ptr align 8, i32, ptr align 8) #0

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memmove.p0.p0.i64(ptr nocapture writeonly, ptr nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg) #3

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i128 @llvm.fshr.i128(i128, i128, i128) #4

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.fshr.i64(i64, i64, i64) #4

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.fshr.i32(i32, i32, i32) #4

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i16 @llvm.fshr.i16(i16, i16, i16) #4

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i8 @llvm.fshr.i8(i8, i8, i8) #4

; Function Attrs: nounwind ssp uwtable
declare ptr @std.core.mem.allocator.push_pool(i64) #0

; Function Attrs: nounwind ssp uwtable
declare ptr @std.core.mem.tmalloc(i64, i64) #0

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
declare void @std.core.mem.allocator.pop_pool(ptr) #0

; Function Attrs: nounwind ssp uwtable
declare ptr @std.core.mem.malloc(i64) #0

; Function Attrs: nounwind ssp uwtable
declare void @std.core.mem.free(ptr) #0

; Function Attrs: nounwind ssp uwtable
declare i32 @std.hash.fnv32a.hash(ptr align 8) #0

; Function Attrs: nounwind ssp uwtable
declare i64 @std.time.clock.now() #0

; Function Attrs: nounwind ssp uwtable
declare ptr @std.core.dstring.DString.init(ptr, ptr align 8, i64) #0

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare nonnull ptr @llvm.threadlocal.address.p0(ptr nonnull) #4

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #4

define internal void @.c3_dynamic_register() align 8 {
entry:
  %next_val = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg128Random.set_seed", i32 0, i32 2), align 8
  %0 = icmp eq ptr %next_val, inttoptr (i64 -1 to ptr)
  br i1 %0, label %dtable_check, label %dtable_skip

dtable_check:                                     ; preds = %dtable_check, %entry
  %dtable_ref = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg128Random", i32 0, i32 2), %entry ], [ %next_dtable_ref, %dtable_check ]
  %dtable_ptr = load ptr, ptr %dtable_ref, align 8
  %1 = icmp eq ptr %dtable_ptr, null
  %next_dtable_ref = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr, i32 0, i32 2
  br i1 %1, label %dtable_found, label %dtable_check

dtable_found:                                     ; preds = %dtable_check
  store ptr @"$ct.dyn.std.math.random.Lcg128Random.set_seed", ptr %dtable_ref, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg128Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip

dtable_skip:                                      ; preds = %dtable_found, %entry
  %next_val1 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg128Random.next_long", i32 0, i32 2), align 8
  %2 = icmp eq ptr %next_val1, inttoptr (i64 -1 to ptr)
  br i1 %2, label %dtable_check2, label %dtable_skip7

dtable_check2:                                    ; preds = %dtable_check2, %dtable_skip
  %dtable_ref3 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg128Random", i32 0, i32 2), %dtable_skip ], [ %next_dtable_ref5, %dtable_check2 ]
  %dtable_ptr4 = load ptr, ptr %dtable_ref3, align 8
  %3 = icmp eq ptr %dtable_ptr4, null
  %next_dtable_ref5 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr4, i32 0, i32 2
  br i1 %3, label %dtable_found6, label %dtable_check2

dtable_found6:                                    ; preds = %dtable_check2
  store ptr @"$ct.dyn.std.math.random.Lcg128Random.next_long", ptr %dtable_ref3, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg128Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip7

dtable_skip7:                                     ; preds = %dtable_found6, %dtable_skip
  %next_val8 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg128Random.next_bytes", i32 0, i32 2), align 8
  %4 = icmp eq ptr %next_val8, inttoptr (i64 -1 to ptr)
  br i1 %4, label %dtable_check9, label %dtable_skip14

dtable_check9:                                    ; preds = %dtable_check9, %dtable_skip7
  %dtable_ref10 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg128Random", i32 0, i32 2), %dtable_skip7 ], [ %next_dtable_ref12, %dtable_check9 ]
  %dtable_ptr11 = load ptr, ptr %dtable_ref10, align 8
  %5 = icmp eq ptr %dtable_ptr11, null
  %next_dtable_ref12 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr11, i32 0, i32 2
  br i1 %5, label %dtable_found13, label %dtable_check9

dtable_found13:                                   ; preds = %dtable_check9
  store ptr @"$ct.dyn.std.math.random.Lcg128Random.next_bytes", ptr %dtable_ref10, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg128Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip14

dtable_skip14:                                    ; preds = %dtable_found13, %dtable_skip7
  %next_val15 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg128Random.next_int128", i32 0, i32 2), align 8
  %6 = icmp eq ptr %next_val15, inttoptr (i64 -1 to ptr)
  br i1 %6, label %dtable_check16, label %dtable_skip21

dtable_check16:                                   ; preds = %dtable_check16, %dtable_skip14
  %dtable_ref17 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg128Random", i32 0, i32 2), %dtable_skip14 ], [ %next_dtable_ref19, %dtable_check16 ]
  %dtable_ptr18 = load ptr, ptr %dtable_ref17, align 8
  %7 = icmp eq ptr %dtable_ptr18, null
  %next_dtable_ref19 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr18, i32 0, i32 2
  br i1 %7, label %dtable_found20, label %dtable_check16

dtable_found20:                                   ; preds = %dtable_check16
  store ptr @"$ct.dyn.std.math.random.Lcg128Random.next_int128", ptr %dtable_ref17, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg128Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip21

dtable_skip21:                                    ; preds = %dtable_found20, %dtable_skip14
  %next_val22 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg128Random.next_int", i32 0, i32 2), align 8
  %8 = icmp eq ptr %next_val22, inttoptr (i64 -1 to ptr)
  br i1 %8, label %dtable_check23, label %dtable_skip28

dtable_check23:                                   ; preds = %dtable_check23, %dtable_skip21
  %dtable_ref24 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg128Random", i32 0, i32 2), %dtable_skip21 ], [ %next_dtable_ref26, %dtable_check23 ]
  %dtable_ptr25 = load ptr, ptr %dtable_ref24, align 8
  %9 = icmp eq ptr %dtable_ptr25, null
  %next_dtable_ref26 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr25, i32 0, i32 2
  br i1 %9, label %dtable_found27, label %dtable_check23

dtable_found27:                                   ; preds = %dtable_check23
  store ptr @"$ct.dyn.std.math.random.Lcg128Random.next_int", ptr %dtable_ref24, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg128Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip28

dtable_skip28:                                    ; preds = %dtable_found27, %dtable_skip21
  %next_val29 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg128Random.next_short", i32 0, i32 2), align 8
  %10 = icmp eq ptr %next_val29, inttoptr (i64 -1 to ptr)
  br i1 %10, label %dtable_check30, label %dtable_skip35

dtable_check30:                                   ; preds = %dtable_check30, %dtable_skip28
  %dtable_ref31 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg128Random", i32 0, i32 2), %dtable_skip28 ], [ %next_dtable_ref33, %dtable_check30 ]
  %dtable_ptr32 = load ptr, ptr %dtable_ref31, align 8
  %11 = icmp eq ptr %dtable_ptr32, null
  %next_dtable_ref33 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr32, i32 0, i32 2
  br i1 %11, label %dtable_found34, label %dtable_check30

dtable_found34:                                   ; preds = %dtable_check30
  store ptr @"$ct.dyn.std.math.random.Lcg128Random.next_short", ptr %dtable_ref31, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg128Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip35

dtable_skip35:                                    ; preds = %dtable_found34, %dtable_skip28
  %next_val36 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg128Random.next_byte", i32 0, i32 2), align 8
  %12 = icmp eq ptr %next_val36, inttoptr (i64 -1 to ptr)
  br i1 %12, label %dtable_check37, label %dtable_skip42

dtable_check37:                                   ; preds = %dtable_check37, %dtable_skip35
  %dtable_ref38 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg128Random", i32 0, i32 2), %dtable_skip35 ], [ %next_dtable_ref40, %dtable_check37 ]
  %dtable_ptr39 = load ptr, ptr %dtable_ref38, align 8
  %13 = icmp eq ptr %dtable_ptr39, null
  %next_dtable_ref40 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr39, i32 0, i32 2
  br i1 %13, label %dtable_found41, label %dtable_check37

dtable_found41:                                   ; preds = %dtable_check37
  store ptr @"$ct.dyn.std.math.random.Lcg128Random.next_byte", ptr %dtable_ref38, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg128Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip42

dtable_skip42:                                    ; preds = %dtable_found41, %dtable_skip35
  %next_val43 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg64Random.set_seed", i32 0, i32 2), align 8
  %14 = icmp eq ptr %next_val43, inttoptr (i64 -1 to ptr)
  br i1 %14, label %dtable_check44, label %dtable_skip49

dtable_check44:                                   ; preds = %dtable_check44, %dtable_skip42
  %dtable_ref45 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg64Random", i32 0, i32 2), %dtable_skip42 ], [ %next_dtable_ref47, %dtable_check44 ]
  %dtable_ptr46 = load ptr, ptr %dtable_ref45, align 8
  %15 = icmp eq ptr %dtable_ptr46, null
  %next_dtable_ref47 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr46, i32 0, i32 2
  br i1 %15, label %dtable_found48, label %dtable_check44

dtable_found48:                                   ; preds = %dtable_check44
  store ptr @"$ct.dyn.std.math.random.Lcg64Random.set_seed", ptr %dtable_ref45, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg64Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip49

dtable_skip49:                                    ; preds = %dtable_found48, %dtable_skip42
  %next_val50 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg64Random.next_int", i32 0, i32 2), align 8
  %16 = icmp eq ptr %next_val50, inttoptr (i64 -1 to ptr)
  br i1 %16, label %dtable_check51, label %dtable_skip56

dtable_check51:                                   ; preds = %dtable_check51, %dtable_skip49
  %dtable_ref52 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg64Random", i32 0, i32 2), %dtable_skip49 ], [ %next_dtable_ref54, %dtable_check51 ]
  %dtable_ptr53 = load ptr, ptr %dtable_ref52, align 8
  %17 = icmp eq ptr %dtable_ptr53, null
  %next_dtable_ref54 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr53, i32 0, i32 2
  br i1 %17, label %dtable_found55, label %dtable_check51

dtable_found55:                                   ; preds = %dtable_check51
  store ptr @"$ct.dyn.std.math.random.Lcg64Random.next_int", ptr %dtable_ref52, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg64Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip56

dtable_skip56:                                    ; preds = %dtable_found55, %dtable_skip49
  %next_val57 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg64Random.next_bytes", i32 0, i32 2), align 8
  %18 = icmp eq ptr %next_val57, inttoptr (i64 -1 to ptr)
  br i1 %18, label %dtable_check58, label %dtable_skip63

dtable_check58:                                   ; preds = %dtable_check58, %dtable_skip56
  %dtable_ref59 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg64Random", i32 0, i32 2), %dtable_skip56 ], [ %next_dtable_ref61, %dtable_check58 ]
  %dtable_ptr60 = load ptr, ptr %dtable_ref59, align 8
  %19 = icmp eq ptr %dtable_ptr60, null
  %next_dtable_ref61 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr60, i32 0, i32 2
  br i1 %19, label %dtable_found62, label %dtable_check58

dtable_found62:                                   ; preds = %dtable_check58
  store ptr @"$ct.dyn.std.math.random.Lcg64Random.next_bytes", ptr %dtable_ref59, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg64Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip63

dtable_skip63:                                    ; preds = %dtable_found62, %dtable_skip56
  %next_val64 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg64Random.next_int128", i32 0, i32 2), align 8
  %20 = icmp eq ptr %next_val64, inttoptr (i64 -1 to ptr)
  br i1 %20, label %dtable_check65, label %dtable_skip70

dtable_check65:                                   ; preds = %dtable_check65, %dtable_skip63
  %dtable_ref66 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg64Random", i32 0, i32 2), %dtable_skip63 ], [ %next_dtable_ref68, %dtable_check65 ]
  %dtable_ptr67 = load ptr, ptr %dtable_ref66, align 8
  %21 = icmp eq ptr %dtable_ptr67, null
  %next_dtable_ref68 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr67, i32 0, i32 2
  br i1 %21, label %dtable_found69, label %dtable_check65

dtable_found69:                                   ; preds = %dtable_check65
  store ptr @"$ct.dyn.std.math.random.Lcg64Random.next_int128", ptr %dtable_ref66, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg64Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip70

dtable_skip70:                                    ; preds = %dtable_found69, %dtable_skip63
  %next_val71 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg64Random.next_long", i32 0, i32 2), align 8
  %22 = icmp eq ptr %next_val71, inttoptr (i64 -1 to ptr)
  br i1 %22, label %dtable_check72, label %dtable_skip77

dtable_check72:                                   ; preds = %dtable_check72, %dtable_skip70
  %dtable_ref73 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg64Random", i32 0, i32 2), %dtable_skip70 ], [ %next_dtable_ref75, %dtable_check72 ]
  %dtable_ptr74 = load ptr, ptr %dtable_ref73, align 8
  %23 = icmp eq ptr %dtable_ptr74, null
  %next_dtable_ref75 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr74, i32 0, i32 2
  br i1 %23, label %dtable_found76, label %dtable_check72

dtable_found76:                                   ; preds = %dtable_check72
  store ptr @"$ct.dyn.std.math.random.Lcg64Random.next_long", ptr %dtable_ref73, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg64Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip77

dtable_skip77:                                    ; preds = %dtable_found76, %dtable_skip70
  %next_val78 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg64Random.next_short", i32 0, i32 2), align 8
  %24 = icmp eq ptr %next_val78, inttoptr (i64 -1 to ptr)
  br i1 %24, label %dtable_check79, label %dtable_skip84

dtable_check79:                                   ; preds = %dtable_check79, %dtable_skip77
  %dtable_ref80 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg64Random", i32 0, i32 2), %dtable_skip77 ], [ %next_dtable_ref82, %dtable_check79 ]
  %dtable_ptr81 = load ptr, ptr %dtable_ref80, align 8
  %25 = icmp eq ptr %dtable_ptr81, null
  %next_dtable_ref82 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr81, i32 0, i32 2
  br i1 %25, label %dtable_found83, label %dtable_check79

dtable_found83:                                   ; preds = %dtable_check79
  store ptr @"$ct.dyn.std.math.random.Lcg64Random.next_short", ptr %dtable_ref80, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg64Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip84

dtable_skip84:                                    ; preds = %dtable_found83, %dtable_skip77
  %next_val85 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg64Random.next_byte", i32 0, i32 2), align 8
  %26 = icmp eq ptr %next_val85, inttoptr (i64 -1 to ptr)
  br i1 %26, label %dtable_check86, label %dtable_skip91

dtable_check86:                                   ; preds = %dtable_check86, %dtable_skip84
  %dtable_ref87 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg64Random", i32 0, i32 2), %dtable_skip84 ], [ %next_dtable_ref89, %dtable_check86 ]
  %dtable_ptr88 = load ptr, ptr %dtable_ref87, align 8
  %27 = icmp eq ptr %dtable_ptr88, null
  %next_dtable_ref89 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr88, i32 0, i32 2
  br i1 %27, label %dtable_found90, label %dtable_check86

dtable_found90:                                   ; preds = %dtable_check86
  store ptr @"$ct.dyn.std.math.random.Lcg64Random.next_byte", ptr %dtable_ref87, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg64Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip91

dtable_skip91:                                    ; preds = %dtable_found90, %dtable_skip84
  %next_val92 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg32Random.set_seed", i32 0, i32 2), align 8
  %28 = icmp eq ptr %next_val92, inttoptr (i64 -1 to ptr)
  br i1 %28, label %dtable_check93, label %dtable_skip98

dtable_check93:                                   ; preds = %dtable_check93, %dtable_skip91
  %dtable_ref94 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg32Random", i32 0, i32 2), %dtable_skip91 ], [ %next_dtable_ref96, %dtable_check93 ]
  %dtable_ptr95 = load ptr, ptr %dtable_ref94, align 8
  %29 = icmp eq ptr %dtable_ptr95, null
  %next_dtable_ref96 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr95, i32 0, i32 2
  br i1 %29, label %dtable_found97, label %dtable_check93

dtable_found97:                                   ; preds = %dtable_check93
  store ptr @"$ct.dyn.std.math.random.Lcg32Random.set_seed", ptr %dtable_ref94, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg32Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip98

dtable_skip98:                                    ; preds = %dtable_found97, %dtable_skip91
  %next_val99 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg32Random.next_short", i32 0, i32 2), align 8
  %30 = icmp eq ptr %next_val99, inttoptr (i64 -1 to ptr)
  br i1 %30, label %dtable_check100, label %dtable_skip105

dtable_check100:                                  ; preds = %dtable_check100, %dtable_skip98
  %dtable_ref101 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg32Random", i32 0, i32 2), %dtable_skip98 ], [ %next_dtable_ref103, %dtable_check100 ]
  %dtable_ptr102 = load ptr, ptr %dtable_ref101, align 8
  %31 = icmp eq ptr %dtable_ptr102, null
  %next_dtable_ref103 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr102, i32 0, i32 2
  br i1 %31, label %dtable_found104, label %dtable_check100

dtable_found104:                                  ; preds = %dtable_check100
  store ptr @"$ct.dyn.std.math.random.Lcg32Random.next_short", ptr %dtable_ref101, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg32Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip105

dtable_skip105:                                   ; preds = %dtable_found104, %dtable_skip98
  %next_val106 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg32Random.next_bytes", i32 0, i32 2), align 8
  %32 = icmp eq ptr %next_val106, inttoptr (i64 -1 to ptr)
  br i1 %32, label %dtable_check107, label %dtable_skip112

dtable_check107:                                  ; preds = %dtable_check107, %dtable_skip105
  %dtable_ref108 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg32Random", i32 0, i32 2), %dtable_skip105 ], [ %next_dtable_ref110, %dtable_check107 ]
  %dtable_ptr109 = load ptr, ptr %dtable_ref108, align 8
  %33 = icmp eq ptr %dtable_ptr109, null
  %next_dtable_ref110 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr109, i32 0, i32 2
  br i1 %33, label %dtable_found111, label %dtable_check107

dtable_found111:                                  ; preds = %dtable_check107
  store ptr @"$ct.dyn.std.math.random.Lcg32Random.next_bytes", ptr %dtable_ref108, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg32Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip112

dtable_skip112:                                   ; preds = %dtable_found111, %dtable_skip105
  %next_val113 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg32Random.next_int128", i32 0, i32 2), align 8
  %34 = icmp eq ptr %next_val113, inttoptr (i64 -1 to ptr)
  br i1 %34, label %dtable_check114, label %dtable_skip119

dtable_check114:                                  ; preds = %dtable_check114, %dtable_skip112
  %dtable_ref115 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg32Random", i32 0, i32 2), %dtable_skip112 ], [ %next_dtable_ref117, %dtable_check114 ]
  %dtable_ptr116 = load ptr, ptr %dtable_ref115, align 8
  %35 = icmp eq ptr %dtable_ptr116, null
  %next_dtable_ref117 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr116, i32 0, i32 2
  br i1 %35, label %dtable_found118, label %dtable_check114

dtable_found118:                                  ; preds = %dtable_check114
  store ptr @"$ct.dyn.std.math.random.Lcg32Random.next_int128", ptr %dtable_ref115, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg32Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip119

dtable_skip119:                                   ; preds = %dtable_found118, %dtable_skip112
  %next_val120 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg32Random.next_long", i32 0, i32 2), align 8
  %36 = icmp eq ptr %next_val120, inttoptr (i64 -1 to ptr)
  br i1 %36, label %dtable_check121, label %dtable_skip126

dtable_check121:                                  ; preds = %dtable_check121, %dtable_skip119
  %dtable_ref122 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg32Random", i32 0, i32 2), %dtable_skip119 ], [ %next_dtable_ref124, %dtable_check121 ]
  %dtable_ptr123 = load ptr, ptr %dtable_ref122, align 8
  %37 = icmp eq ptr %dtable_ptr123, null
  %next_dtable_ref124 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr123, i32 0, i32 2
  br i1 %37, label %dtable_found125, label %dtable_check121

dtable_found125:                                  ; preds = %dtable_check121
  store ptr @"$ct.dyn.std.math.random.Lcg32Random.next_long", ptr %dtable_ref122, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg32Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip126

dtable_skip126:                                   ; preds = %dtable_found125, %dtable_skip119
  %next_val127 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg32Random.next_int", i32 0, i32 2), align 8
  %38 = icmp eq ptr %next_val127, inttoptr (i64 -1 to ptr)
  br i1 %38, label %dtable_check128, label %dtable_skip133

dtable_check128:                                  ; preds = %dtable_check128, %dtable_skip126
  %dtable_ref129 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg32Random", i32 0, i32 2), %dtable_skip126 ], [ %next_dtable_ref131, %dtable_check128 ]
  %dtable_ptr130 = load ptr, ptr %dtable_ref129, align 8
  %39 = icmp eq ptr %dtable_ptr130, null
  %next_dtable_ref131 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr130, i32 0, i32 2
  br i1 %39, label %dtable_found132, label %dtable_check128

dtable_found132:                                  ; preds = %dtable_check128
  store ptr @"$ct.dyn.std.math.random.Lcg32Random.next_int", ptr %dtable_ref129, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg32Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip133

dtable_skip133:                                   ; preds = %dtable_found132, %dtable_skip126
  %next_val134 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg32Random.next_byte", i32 0, i32 2), align 8
  %40 = icmp eq ptr %next_val134, inttoptr (i64 -1 to ptr)
  br i1 %40, label %dtable_check135, label %dtable_skip140

dtable_check135:                                  ; preds = %dtable_check135, %dtable_skip133
  %dtable_ref136 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg32Random", i32 0, i32 2), %dtable_skip133 ], [ %next_dtable_ref138, %dtable_check135 ]
  %dtable_ptr137 = load ptr, ptr %dtable_ref136, align 8
  %41 = icmp eq ptr %dtable_ptr137, null
  %next_dtable_ref138 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr137, i32 0, i32 2
  br i1 %41, label %dtable_found139, label %dtable_check135

dtable_found139:                                  ; preds = %dtable_check135
  store ptr @"$ct.dyn.std.math.random.Lcg32Random.next_byte", ptr %dtable_ref136, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg32Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip140

dtable_skip140:                                   ; preds = %dtable_found139, %dtable_skip133
  %next_val141 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg16Random.set_seed", i32 0, i32 2), align 8
  %42 = icmp eq ptr %next_val141, inttoptr (i64 -1 to ptr)
  br i1 %42, label %dtable_check142, label %dtable_skip147

dtable_check142:                                  ; preds = %dtable_check142, %dtable_skip140
  %dtable_ref143 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg16Random", i32 0, i32 2), %dtable_skip140 ], [ %next_dtable_ref145, %dtable_check142 ]
  %dtable_ptr144 = load ptr, ptr %dtable_ref143, align 8
  %43 = icmp eq ptr %dtable_ptr144, null
  %next_dtable_ref145 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr144, i32 0, i32 2
  br i1 %43, label %dtable_found146, label %dtable_check142

dtable_found146:                                  ; preds = %dtable_check142
  store ptr @"$ct.dyn.std.math.random.Lcg16Random.set_seed", ptr %dtable_ref143, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg16Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip147

dtable_skip147:                                   ; preds = %dtable_found146, %dtable_skip140
  %next_val148 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg16Random.next_byte", i32 0, i32 2), align 8
  %44 = icmp eq ptr %next_val148, inttoptr (i64 -1 to ptr)
  br i1 %44, label %dtable_check149, label %dtable_skip154

dtable_check149:                                  ; preds = %dtable_check149, %dtable_skip147
  %dtable_ref150 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg16Random", i32 0, i32 2), %dtable_skip147 ], [ %next_dtable_ref152, %dtable_check149 ]
  %dtable_ptr151 = load ptr, ptr %dtable_ref150, align 8
  %45 = icmp eq ptr %dtable_ptr151, null
  %next_dtable_ref152 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr151, i32 0, i32 2
  br i1 %45, label %dtable_found153, label %dtable_check149

dtable_found153:                                  ; preds = %dtable_check149
  store ptr @"$ct.dyn.std.math.random.Lcg16Random.next_byte", ptr %dtable_ref150, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg16Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip154

dtable_skip154:                                   ; preds = %dtable_found153, %dtable_skip147
  %next_val155 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg16Random.next_bytes", i32 0, i32 2), align 8
  %46 = icmp eq ptr %next_val155, inttoptr (i64 -1 to ptr)
  br i1 %46, label %dtable_check156, label %dtable_skip161

dtable_check156:                                  ; preds = %dtable_check156, %dtable_skip154
  %dtable_ref157 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg16Random", i32 0, i32 2), %dtable_skip154 ], [ %next_dtable_ref159, %dtable_check156 ]
  %dtable_ptr158 = load ptr, ptr %dtable_ref157, align 8
  %47 = icmp eq ptr %dtable_ptr158, null
  %next_dtable_ref159 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr158, i32 0, i32 2
  br i1 %47, label %dtable_found160, label %dtable_check156

dtable_found160:                                  ; preds = %dtable_check156
  store ptr @"$ct.dyn.std.math.random.Lcg16Random.next_bytes", ptr %dtable_ref157, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg16Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip161

dtable_skip161:                                   ; preds = %dtable_found160, %dtable_skip154
  %next_val162 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg16Random.next_int128", i32 0, i32 2), align 8
  %48 = icmp eq ptr %next_val162, inttoptr (i64 -1 to ptr)
  br i1 %48, label %dtable_check163, label %dtable_skip168

dtable_check163:                                  ; preds = %dtable_check163, %dtable_skip161
  %dtable_ref164 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg16Random", i32 0, i32 2), %dtable_skip161 ], [ %next_dtable_ref166, %dtable_check163 ]
  %dtable_ptr165 = load ptr, ptr %dtable_ref164, align 8
  %49 = icmp eq ptr %dtable_ptr165, null
  %next_dtable_ref166 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr165, i32 0, i32 2
  br i1 %49, label %dtable_found167, label %dtable_check163

dtable_found167:                                  ; preds = %dtable_check163
  store ptr @"$ct.dyn.std.math.random.Lcg16Random.next_int128", ptr %dtable_ref164, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg16Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip168

dtable_skip168:                                   ; preds = %dtable_found167, %dtable_skip161
  %next_val169 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg16Random.next_long", i32 0, i32 2), align 8
  %50 = icmp eq ptr %next_val169, inttoptr (i64 -1 to ptr)
  br i1 %50, label %dtable_check170, label %dtable_skip175

dtable_check170:                                  ; preds = %dtable_check170, %dtable_skip168
  %dtable_ref171 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg16Random", i32 0, i32 2), %dtable_skip168 ], [ %next_dtable_ref173, %dtable_check170 ]
  %dtable_ptr172 = load ptr, ptr %dtable_ref171, align 8
  %51 = icmp eq ptr %dtable_ptr172, null
  %next_dtable_ref173 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr172, i32 0, i32 2
  br i1 %51, label %dtable_found174, label %dtable_check170

dtable_found174:                                  ; preds = %dtable_check170
  store ptr @"$ct.dyn.std.math.random.Lcg16Random.next_long", ptr %dtable_ref171, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg16Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip175

dtable_skip175:                                   ; preds = %dtable_found174, %dtable_skip168
  %next_val176 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg16Random.next_int", i32 0, i32 2), align 8
  %52 = icmp eq ptr %next_val176, inttoptr (i64 -1 to ptr)
  br i1 %52, label %dtable_check177, label %dtable_skip182

dtable_check177:                                  ; preds = %dtable_check177, %dtable_skip175
  %dtable_ref178 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg16Random", i32 0, i32 2), %dtable_skip175 ], [ %next_dtable_ref180, %dtable_check177 ]
  %dtable_ptr179 = load ptr, ptr %dtable_ref178, align 8
  %53 = icmp eq ptr %dtable_ptr179, null
  %next_dtable_ref180 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr179, i32 0, i32 2
  br i1 %53, label %dtable_found181, label %dtable_check177

dtable_found181:                                  ; preds = %dtable_check177
  store ptr @"$ct.dyn.std.math.random.Lcg16Random.next_int", ptr %dtable_ref178, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg16Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip182

dtable_skip182:                                   ; preds = %dtable_found181, %dtable_skip175
  %next_val183 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg16Random.next_short", i32 0, i32 2), align 8
  %54 = icmp eq ptr %next_val183, inttoptr (i64 -1 to ptr)
  br i1 %54, label %dtable_check184, label %dtable_skip189

dtable_check184:                                  ; preds = %dtable_check184, %dtable_skip182
  %dtable_ref185 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg16Random", i32 0, i32 2), %dtable_skip182 ], [ %next_dtable_ref187, %dtable_check184 ]
  %dtable_ptr186 = load ptr, ptr %dtable_ref185, align 8
  %55 = icmp eq ptr %dtable_ptr186, null
  %next_dtable_ref187 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr186, i32 0, i32 2
  br i1 %55, label %dtable_found188, label %dtable_check184

dtable_found188:                                  ; preds = %dtable_check184
  store ptr @"$ct.dyn.std.math.random.Lcg16Random.next_short", ptr %dtable_ref185, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg16Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip189

dtable_skip189:                                   ; preds = %dtable_found188, %dtable_skip182
  %next_val190 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg128Random.set_seed", i32 0, i32 2), align 8
  %56 = icmp eq ptr %next_val190, inttoptr (i64 -1 to ptr)
  br i1 %56, label %dtable_check191, label %dtable_skip196

dtable_check191:                                  ; preds = %dtable_check191, %dtable_skip189
  %dtable_ref192 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg128Random", i32 0, i32 2), %dtable_skip189 ], [ %next_dtable_ref194, %dtable_check191 ]
  %dtable_ptr193 = load ptr, ptr %dtable_ref192, align 8
  %57 = icmp eq ptr %dtable_ptr193, null
  %next_dtable_ref194 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr193, i32 0, i32 2
  br i1 %57, label %dtable_found195, label %dtable_check191

dtable_found195:                                  ; preds = %dtable_check191
  store ptr @"$ct.dyn.std.math.random.Mcg128Random.set_seed", ptr %dtable_ref192, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg128Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip196

dtable_skip196:                                   ; preds = %dtable_found195, %dtable_skip189
  %next_val197 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg128Random.next_bytes", i32 0, i32 2), align 8
  %58 = icmp eq ptr %next_val197, inttoptr (i64 -1 to ptr)
  br i1 %58, label %dtable_check198, label %dtable_skip203

dtable_check198:                                  ; preds = %dtable_check198, %dtable_skip196
  %dtable_ref199 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg128Random", i32 0, i32 2), %dtable_skip196 ], [ %next_dtable_ref201, %dtable_check198 ]
  %dtable_ptr200 = load ptr, ptr %dtable_ref199, align 8
  %59 = icmp eq ptr %dtable_ptr200, null
  %next_dtable_ref201 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr200, i32 0, i32 2
  br i1 %59, label %dtable_found202, label %dtable_check198

dtable_found202:                                  ; preds = %dtable_check198
  store ptr @"$ct.dyn.std.math.random.Mcg128Random.next_bytes", ptr %dtable_ref199, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg128Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip203

dtable_skip203:                                   ; preds = %dtable_found202, %dtable_skip196
  %next_val204 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg128Random.next_long", i32 0, i32 2), align 8
  %60 = icmp eq ptr %next_val204, inttoptr (i64 -1 to ptr)
  br i1 %60, label %dtable_check205, label %dtable_skip210

dtable_check205:                                  ; preds = %dtable_check205, %dtable_skip203
  %dtable_ref206 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg128Random", i32 0, i32 2), %dtable_skip203 ], [ %next_dtable_ref208, %dtable_check205 ]
  %dtable_ptr207 = load ptr, ptr %dtable_ref206, align 8
  %61 = icmp eq ptr %dtable_ptr207, null
  %next_dtable_ref208 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr207, i32 0, i32 2
  br i1 %61, label %dtable_found209, label %dtable_check205

dtable_found209:                                  ; preds = %dtable_check205
  store ptr @"$ct.dyn.std.math.random.Mcg128Random.next_long", ptr %dtable_ref206, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg128Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip210

dtable_skip210:                                   ; preds = %dtable_found209, %dtable_skip203
  %next_val211 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg128Random.next_int128", i32 0, i32 2), align 8
  %62 = icmp eq ptr %next_val211, inttoptr (i64 -1 to ptr)
  br i1 %62, label %dtable_check212, label %dtable_skip217

dtable_check212:                                  ; preds = %dtable_check212, %dtable_skip210
  %dtable_ref213 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg128Random", i32 0, i32 2), %dtable_skip210 ], [ %next_dtable_ref215, %dtable_check212 ]
  %dtable_ptr214 = load ptr, ptr %dtable_ref213, align 8
  %63 = icmp eq ptr %dtable_ptr214, null
  %next_dtable_ref215 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr214, i32 0, i32 2
  br i1 %63, label %dtable_found216, label %dtable_check212

dtable_found216:                                  ; preds = %dtable_check212
  store ptr @"$ct.dyn.std.math.random.Mcg128Random.next_int128", ptr %dtable_ref213, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg128Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip217

dtable_skip217:                                   ; preds = %dtable_found216, %dtable_skip210
  %next_val218 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg128Random.next_int", i32 0, i32 2), align 8
  %64 = icmp eq ptr %next_val218, inttoptr (i64 -1 to ptr)
  br i1 %64, label %dtable_check219, label %dtable_skip224

dtable_check219:                                  ; preds = %dtable_check219, %dtable_skip217
  %dtable_ref220 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg128Random", i32 0, i32 2), %dtable_skip217 ], [ %next_dtable_ref222, %dtable_check219 ]
  %dtable_ptr221 = load ptr, ptr %dtable_ref220, align 8
  %65 = icmp eq ptr %dtable_ptr221, null
  %next_dtable_ref222 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr221, i32 0, i32 2
  br i1 %65, label %dtable_found223, label %dtable_check219

dtable_found223:                                  ; preds = %dtable_check219
  store ptr @"$ct.dyn.std.math.random.Mcg128Random.next_int", ptr %dtable_ref220, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg128Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip224

dtable_skip224:                                   ; preds = %dtable_found223, %dtable_skip217
  %next_val225 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg128Random.next_short", i32 0, i32 2), align 8
  %66 = icmp eq ptr %next_val225, inttoptr (i64 -1 to ptr)
  br i1 %66, label %dtable_check226, label %dtable_skip231

dtable_check226:                                  ; preds = %dtable_check226, %dtable_skip224
  %dtable_ref227 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg128Random", i32 0, i32 2), %dtable_skip224 ], [ %next_dtable_ref229, %dtable_check226 ]
  %dtable_ptr228 = load ptr, ptr %dtable_ref227, align 8
  %67 = icmp eq ptr %dtable_ptr228, null
  %next_dtable_ref229 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr228, i32 0, i32 2
  br i1 %67, label %dtable_found230, label %dtable_check226

dtable_found230:                                  ; preds = %dtable_check226
  store ptr @"$ct.dyn.std.math.random.Mcg128Random.next_short", ptr %dtable_ref227, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg128Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip231

dtable_skip231:                                   ; preds = %dtable_found230, %dtable_skip224
  %next_val232 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg128Random.next_byte", i32 0, i32 2), align 8
  %68 = icmp eq ptr %next_val232, inttoptr (i64 -1 to ptr)
  br i1 %68, label %dtable_check233, label %dtable_skip238

dtable_check233:                                  ; preds = %dtable_check233, %dtable_skip231
  %dtable_ref234 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg128Random", i32 0, i32 2), %dtable_skip231 ], [ %next_dtable_ref236, %dtable_check233 ]
  %dtable_ptr235 = load ptr, ptr %dtable_ref234, align 8
  %69 = icmp eq ptr %dtable_ptr235, null
  %next_dtable_ref236 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr235, i32 0, i32 2
  br i1 %69, label %dtable_found237, label %dtable_check233

dtable_found237:                                  ; preds = %dtable_check233
  store ptr @"$ct.dyn.std.math.random.Mcg128Random.next_byte", ptr %dtable_ref234, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg128Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip238

dtable_skip238:                                   ; preds = %dtable_found237, %dtable_skip231
  %next_val239 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg64Random.set_seed", i32 0, i32 2), align 8
  %70 = icmp eq ptr %next_val239, inttoptr (i64 -1 to ptr)
  br i1 %70, label %dtable_check240, label %dtable_skip245

dtable_check240:                                  ; preds = %dtable_check240, %dtable_skip238
  %dtable_ref241 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg64Random", i32 0, i32 2), %dtable_skip238 ], [ %next_dtable_ref243, %dtable_check240 ]
  %dtable_ptr242 = load ptr, ptr %dtable_ref241, align 8
  %71 = icmp eq ptr %dtable_ptr242, null
  %next_dtable_ref243 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr242, i32 0, i32 2
  br i1 %71, label %dtable_found244, label %dtable_check240

dtable_found244:                                  ; preds = %dtable_check240
  store ptr @"$ct.dyn.std.math.random.Mcg64Random.set_seed", ptr %dtable_ref241, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg64Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip245

dtable_skip245:                                   ; preds = %dtable_found244, %dtable_skip238
  %next_val246 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg64Random.next_bytes", i32 0, i32 2), align 8
  %72 = icmp eq ptr %next_val246, inttoptr (i64 -1 to ptr)
  br i1 %72, label %dtable_check247, label %dtable_skip252

dtable_check247:                                  ; preds = %dtable_check247, %dtable_skip245
  %dtable_ref248 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg64Random", i32 0, i32 2), %dtable_skip245 ], [ %next_dtable_ref250, %dtable_check247 ]
  %dtable_ptr249 = load ptr, ptr %dtable_ref248, align 8
  %73 = icmp eq ptr %dtable_ptr249, null
  %next_dtable_ref250 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr249, i32 0, i32 2
  br i1 %73, label %dtable_found251, label %dtable_check247

dtable_found251:                                  ; preds = %dtable_check247
  store ptr @"$ct.dyn.std.math.random.Mcg64Random.next_bytes", ptr %dtable_ref248, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg64Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip252

dtable_skip252:                                   ; preds = %dtable_found251, %dtable_skip245
  %next_val253 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg64Random.next_int", i32 0, i32 2), align 8
  %74 = icmp eq ptr %next_val253, inttoptr (i64 -1 to ptr)
  br i1 %74, label %dtable_check254, label %dtable_skip259

dtable_check254:                                  ; preds = %dtable_check254, %dtable_skip252
  %dtable_ref255 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg64Random", i32 0, i32 2), %dtable_skip252 ], [ %next_dtable_ref257, %dtable_check254 ]
  %dtable_ptr256 = load ptr, ptr %dtable_ref255, align 8
  %75 = icmp eq ptr %dtable_ptr256, null
  %next_dtable_ref257 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr256, i32 0, i32 2
  br i1 %75, label %dtable_found258, label %dtable_check254

dtable_found258:                                  ; preds = %dtable_check254
  store ptr @"$ct.dyn.std.math.random.Mcg64Random.next_int", ptr %dtable_ref255, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg64Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip259

dtable_skip259:                                   ; preds = %dtable_found258, %dtable_skip252
  %next_val260 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg64Random.next_int128", i32 0, i32 2), align 8
  %76 = icmp eq ptr %next_val260, inttoptr (i64 -1 to ptr)
  br i1 %76, label %dtable_check261, label %dtable_skip266

dtable_check261:                                  ; preds = %dtable_check261, %dtable_skip259
  %dtable_ref262 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg64Random", i32 0, i32 2), %dtable_skip259 ], [ %next_dtable_ref264, %dtable_check261 ]
  %dtable_ptr263 = load ptr, ptr %dtable_ref262, align 8
  %77 = icmp eq ptr %dtable_ptr263, null
  %next_dtable_ref264 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr263, i32 0, i32 2
  br i1 %77, label %dtable_found265, label %dtable_check261

dtable_found265:                                  ; preds = %dtable_check261
  store ptr @"$ct.dyn.std.math.random.Mcg64Random.next_int128", ptr %dtable_ref262, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg64Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip266

dtable_skip266:                                   ; preds = %dtable_found265, %dtable_skip259
  %next_val267 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg64Random.next_long", i32 0, i32 2), align 8
  %78 = icmp eq ptr %next_val267, inttoptr (i64 -1 to ptr)
  br i1 %78, label %dtable_check268, label %dtable_skip273

dtable_check268:                                  ; preds = %dtable_check268, %dtable_skip266
  %dtable_ref269 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg64Random", i32 0, i32 2), %dtable_skip266 ], [ %next_dtable_ref271, %dtable_check268 ]
  %dtable_ptr270 = load ptr, ptr %dtable_ref269, align 8
  %79 = icmp eq ptr %dtable_ptr270, null
  %next_dtable_ref271 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr270, i32 0, i32 2
  br i1 %79, label %dtable_found272, label %dtable_check268

dtable_found272:                                  ; preds = %dtable_check268
  store ptr @"$ct.dyn.std.math.random.Mcg64Random.next_long", ptr %dtable_ref269, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg64Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip273

dtable_skip273:                                   ; preds = %dtable_found272, %dtable_skip266
  %next_val274 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg64Random.next_short", i32 0, i32 2), align 8
  %80 = icmp eq ptr %next_val274, inttoptr (i64 -1 to ptr)
  br i1 %80, label %dtable_check275, label %dtable_skip280

dtable_check275:                                  ; preds = %dtable_check275, %dtable_skip273
  %dtable_ref276 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg64Random", i32 0, i32 2), %dtable_skip273 ], [ %next_dtable_ref278, %dtable_check275 ]
  %dtable_ptr277 = load ptr, ptr %dtable_ref276, align 8
  %81 = icmp eq ptr %dtable_ptr277, null
  %next_dtable_ref278 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr277, i32 0, i32 2
  br i1 %81, label %dtable_found279, label %dtable_check275

dtable_found279:                                  ; preds = %dtable_check275
  store ptr @"$ct.dyn.std.math.random.Mcg64Random.next_short", ptr %dtable_ref276, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg64Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip280

dtable_skip280:                                   ; preds = %dtable_found279, %dtable_skip273
  %next_val281 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg64Random.next_byte", i32 0, i32 2), align 8
  %82 = icmp eq ptr %next_val281, inttoptr (i64 -1 to ptr)
  br i1 %82, label %dtable_check282, label %dtable_skip287

dtable_check282:                                  ; preds = %dtable_check282, %dtable_skip280
  %dtable_ref283 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg64Random", i32 0, i32 2), %dtable_skip280 ], [ %next_dtable_ref285, %dtable_check282 ]
  %dtable_ptr284 = load ptr, ptr %dtable_ref283, align 8
  %83 = icmp eq ptr %dtable_ptr284, null
  %next_dtable_ref285 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr284, i32 0, i32 2
  br i1 %83, label %dtable_found286, label %dtable_check282

dtable_found286:                                  ; preds = %dtable_check282
  store ptr @"$ct.dyn.std.math.random.Mcg64Random.next_byte", ptr %dtable_ref283, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg64Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip287

dtable_skip287:                                   ; preds = %dtable_found286, %dtable_skip280
  %next_val288 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg32Random.set_seed", i32 0, i32 2), align 8
  %84 = icmp eq ptr %next_val288, inttoptr (i64 -1 to ptr)
  br i1 %84, label %dtable_check289, label %dtable_skip294

dtable_check289:                                  ; preds = %dtable_check289, %dtable_skip287
  %dtable_ref290 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg32Random", i32 0, i32 2), %dtable_skip287 ], [ %next_dtable_ref292, %dtable_check289 ]
  %dtable_ptr291 = load ptr, ptr %dtable_ref290, align 8
  %85 = icmp eq ptr %dtable_ptr291, null
  %next_dtable_ref292 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr291, i32 0, i32 2
  br i1 %85, label %dtable_found293, label %dtable_check289

dtable_found293:                                  ; preds = %dtable_check289
  store ptr @"$ct.dyn.std.math.random.Mcg32Random.set_seed", ptr %dtable_ref290, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg32Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip294

dtable_skip294:                                   ; preds = %dtable_found293, %dtable_skip287
  %next_val295 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg32Random.next_short", i32 0, i32 2), align 8
  %86 = icmp eq ptr %next_val295, inttoptr (i64 -1 to ptr)
  br i1 %86, label %dtable_check296, label %dtable_skip301

dtable_check296:                                  ; preds = %dtable_check296, %dtable_skip294
  %dtable_ref297 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg32Random", i32 0, i32 2), %dtable_skip294 ], [ %next_dtable_ref299, %dtable_check296 ]
  %dtable_ptr298 = load ptr, ptr %dtable_ref297, align 8
  %87 = icmp eq ptr %dtable_ptr298, null
  %next_dtable_ref299 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr298, i32 0, i32 2
  br i1 %87, label %dtable_found300, label %dtable_check296

dtable_found300:                                  ; preds = %dtable_check296
  store ptr @"$ct.dyn.std.math.random.Mcg32Random.next_short", ptr %dtable_ref297, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg32Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip301

dtable_skip301:                                   ; preds = %dtable_found300, %dtable_skip294
  %next_val302 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg32Random.next_bytes", i32 0, i32 2), align 8
  %88 = icmp eq ptr %next_val302, inttoptr (i64 -1 to ptr)
  br i1 %88, label %dtable_check303, label %dtable_skip308

dtable_check303:                                  ; preds = %dtable_check303, %dtable_skip301
  %dtable_ref304 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg32Random", i32 0, i32 2), %dtable_skip301 ], [ %next_dtable_ref306, %dtable_check303 ]
  %dtable_ptr305 = load ptr, ptr %dtable_ref304, align 8
  %89 = icmp eq ptr %dtable_ptr305, null
  %next_dtable_ref306 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr305, i32 0, i32 2
  br i1 %89, label %dtable_found307, label %dtable_check303

dtable_found307:                                  ; preds = %dtable_check303
  store ptr @"$ct.dyn.std.math.random.Mcg32Random.next_bytes", ptr %dtable_ref304, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg32Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip308

dtable_skip308:                                   ; preds = %dtable_found307, %dtable_skip301
  %next_val309 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg32Random.next_int128", i32 0, i32 2), align 8
  %90 = icmp eq ptr %next_val309, inttoptr (i64 -1 to ptr)
  br i1 %90, label %dtable_check310, label %dtable_skip315

dtable_check310:                                  ; preds = %dtable_check310, %dtable_skip308
  %dtable_ref311 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg32Random", i32 0, i32 2), %dtable_skip308 ], [ %next_dtable_ref313, %dtable_check310 ]
  %dtable_ptr312 = load ptr, ptr %dtable_ref311, align 8
  %91 = icmp eq ptr %dtable_ptr312, null
  %next_dtable_ref313 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr312, i32 0, i32 2
  br i1 %91, label %dtable_found314, label %dtable_check310

dtable_found314:                                  ; preds = %dtable_check310
  store ptr @"$ct.dyn.std.math.random.Mcg32Random.next_int128", ptr %dtable_ref311, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg32Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip315

dtable_skip315:                                   ; preds = %dtable_found314, %dtable_skip308
  %next_val316 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg32Random.next_long", i32 0, i32 2), align 8
  %92 = icmp eq ptr %next_val316, inttoptr (i64 -1 to ptr)
  br i1 %92, label %dtable_check317, label %dtable_skip322

dtable_check317:                                  ; preds = %dtable_check317, %dtable_skip315
  %dtable_ref318 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg32Random", i32 0, i32 2), %dtable_skip315 ], [ %next_dtable_ref320, %dtable_check317 ]
  %dtable_ptr319 = load ptr, ptr %dtable_ref318, align 8
  %93 = icmp eq ptr %dtable_ptr319, null
  %next_dtable_ref320 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr319, i32 0, i32 2
  br i1 %93, label %dtable_found321, label %dtable_check317

dtable_found321:                                  ; preds = %dtable_check317
  store ptr @"$ct.dyn.std.math.random.Mcg32Random.next_long", ptr %dtable_ref318, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg32Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip322

dtable_skip322:                                   ; preds = %dtable_found321, %dtable_skip315
  %next_val323 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg32Random.next_int", i32 0, i32 2), align 8
  %94 = icmp eq ptr %next_val323, inttoptr (i64 -1 to ptr)
  br i1 %94, label %dtable_check324, label %dtable_skip329

dtable_check324:                                  ; preds = %dtable_check324, %dtable_skip322
  %dtable_ref325 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg32Random", i32 0, i32 2), %dtable_skip322 ], [ %next_dtable_ref327, %dtable_check324 ]
  %dtable_ptr326 = load ptr, ptr %dtable_ref325, align 8
  %95 = icmp eq ptr %dtable_ptr326, null
  %next_dtable_ref327 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr326, i32 0, i32 2
  br i1 %95, label %dtable_found328, label %dtable_check324

dtable_found328:                                  ; preds = %dtable_check324
  store ptr @"$ct.dyn.std.math.random.Mcg32Random.next_int", ptr %dtable_ref325, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg32Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip329

dtable_skip329:                                   ; preds = %dtable_found328, %dtable_skip322
  %next_val330 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg32Random.next_byte", i32 0, i32 2), align 8
  %96 = icmp eq ptr %next_val330, inttoptr (i64 -1 to ptr)
  br i1 %96, label %dtable_check331, label %dtable_skip336

dtable_check331:                                  ; preds = %dtable_check331, %dtable_skip329
  %dtable_ref332 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg32Random", i32 0, i32 2), %dtable_skip329 ], [ %next_dtable_ref334, %dtable_check331 ]
  %dtable_ptr333 = load ptr, ptr %dtable_ref332, align 8
  %97 = icmp eq ptr %dtable_ptr333, null
  %next_dtable_ref334 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr333, i32 0, i32 2
  br i1 %97, label %dtable_found335, label %dtable_check331

dtable_found335:                                  ; preds = %dtable_check331
  store ptr @"$ct.dyn.std.math.random.Mcg32Random.next_byte", ptr %dtable_ref332, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg32Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip336

dtable_skip336:                                   ; preds = %dtable_found335, %dtable_skip329
  %next_val337 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg16Random.set_seed", i32 0, i32 2), align 8
  %98 = icmp eq ptr %next_val337, inttoptr (i64 -1 to ptr)
  br i1 %98, label %dtable_check338, label %dtable_skip343

dtable_check338:                                  ; preds = %dtable_check338, %dtable_skip336
  %dtable_ref339 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg16Random", i32 0, i32 2), %dtable_skip336 ], [ %next_dtable_ref341, %dtable_check338 ]
  %dtable_ptr340 = load ptr, ptr %dtable_ref339, align 8
  %99 = icmp eq ptr %dtable_ptr340, null
  %next_dtable_ref341 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr340, i32 0, i32 2
  br i1 %99, label %dtable_found342, label %dtable_check338

dtable_found342:                                  ; preds = %dtable_check338
  store ptr @"$ct.dyn.std.math.random.Mcg16Random.set_seed", ptr %dtable_ref339, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg16Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip343

dtable_skip343:                                   ; preds = %dtable_found342, %dtable_skip336
  %next_val344 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg16Random.next_byte", i32 0, i32 2), align 8
  %100 = icmp eq ptr %next_val344, inttoptr (i64 -1 to ptr)
  br i1 %100, label %dtable_check345, label %dtable_skip350

dtable_check345:                                  ; preds = %dtable_check345, %dtable_skip343
  %dtable_ref346 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg16Random", i32 0, i32 2), %dtable_skip343 ], [ %next_dtable_ref348, %dtable_check345 ]
  %dtable_ptr347 = load ptr, ptr %dtable_ref346, align 8
  %101 = icmp eq ptr %dtable_ptr347, null
  %next_dtable_ref348 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr347, i32 0, i32 2
  br i1 %101, label %dtable_found349, label %dtable_check345

dtable_found349:                                  ; preds = %dtable_check345
  store ptr @"$ct.dyn.std.math.random.Mcg16Random.next_byte", ptr %dtable_ref346, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg16Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip350

dtable_skip350:                                   ; preds = %dtable_found349, %dtable_skip343
  %next_val351 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg16Random.next_bytes", i32 0, i32 2), align 8
  %102 = icmp eq ptr %next_val351, inttoptr (i64 -1 to ptr)
  br i1 %102, label %dtable_check352, label %dtable_skip357

dtable_check352:                                  ; preds = %dtable_check352, %dtable_skip350
  %dtable_ref353 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg16Random", i32 0, i32 2), %dtable_skip350 ], [ %next_dtable_ref355, %dtable_check352 ]
  %dtable_ptr354 = load ptr, ptr %dtable_ref353, align 8
  %103 = icmp eq ptr %dtable_ptr354, null
  %next_dtable_ref355 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr354, i32 0, i32 2
  br i1 %103, label %dtable_found356, label %dtable_check352

dtable_found356:                                  ; preds = %dtable_check352
  store ptr @"$ct.dyn.std.math.random.Mcg16Random.next_bytes", ptr %dtable_ref353, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg16Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip357

dtable_skip357:                                   ; preds = %dtable_found356, %dtable_skip350
  %next_val358 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg16Random.next_int128", i32 0, i32 2), align 8
  %104 = icmp eq ptr %next_val358, inttoptr (i64 -1 to ptr)
  br i1 %104, label %dtable_check359, label %dtable_skip364

dtable_check359:                                  ; preds = %dtable_check359, %dtable_skip357
  %dtable_ref360 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg16Random", i32 0, i32 2), %dtable_skip357 ], [ %next_dtable_ref362, %dtable_check359 ]
  %dtable_ptr361 = load ptr, ptr %dtable_ref360, align 8
  %105 = icmp eq ptr %dtable_ptr361, null
  %next_dtable_ref362 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr361, i32 0, i32 2
  br i1 %105, label %dtable_found363, label %dtable_check359

dtable_found363:                                  ; preds = %dtable_check359
  store ptr @"$ct.dyn.std.math.random.Mcg16Random.next_int128", ptr %dtable_ref360, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg16Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip364

dtable_skip364:                                   ; preds = %dtable_found363, %dtable_skip357
  %next_val365 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg16Random.next_long", i32 0, i32 2), align 8
  %106 = icmp eq ptr %next_val365, inttoptr (i64 -1 to ptr)
  br i1 %106, label %dtable_check366, label %dtable_skip371

dtable_check366:                                  ; preds = %dtable_check366, %dtable_skip364
  %dtable_ref367 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg16Random", i32 0, i32 2), %dtable_skip364 ], [ %next_dtable_ref369, %dtable_check366 ]
  %dtable_ptr368 = load ptr, ptr %dtable_ref367, align 8
  %107 = icmp eq ptr %dtable_ptr368, null
  %next_dtable_ref369 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr368, i32 0, i32 2
  br i1 %107, label %dtable_found370, label %dtable_check366

dtable_found370:                                  ; preds = %dtable_check366
  store ptr @"$ct.dyn.std.math.random.Mcg16Random.next_long", ptr %dtable_ref367, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg16Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip371

dtable_skip371:                                   ; preds = %dtable_found370, %dtable_skip364
  %next_val372 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg16Random.next_int", i32 0, i32 2), align 8
  %108 = icmp eq ptr %next_val372, inttoptr (i64 -1 to ptr)
  br i1 %108, label %dtable_check373, label %dtable_skip378

dtable_check373:                                  ; preds = %dtable_check373, %dtable_skip371
  %dtable_ref374 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg16Random", i32 0, i32 2), %dtable_skip371 ], [ %next_dtable_ref376, %dtable_check373 ]
  %dtable_ptr375 = load ptr, ptr %dtable_ref374, align 8
  %109 = icmp eq ptr %dtable_ptr375, null
  %next_dtable_ref376 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr375, i32 0, i32 2
  br i1 %109, label %dtable_found377, label %dtable_check373

dtable_found377:                                  ; preds = %dtable_check373
  store ptr @"$ct.dyn.std.math.random.Mcg16Random.next_int", ptr %dtable_ref374, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg16Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip378

dtable_skip378:                                   ; preds = %dtable_found377, %dtable_skip371
  %next_val379 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg16Random.next_short", i32 0, i32 2), align 8
  %110 = icmp eq ptr %next_val379, inttoptr (i64 -1 to ptr)
  br i1 %110, label %dtable_check380, label %dtable_skip385

dtable_check380:                                  ; preds = %dtable_check380, %dtable_skip378
  %dtable_ref381 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg16Random", i32 0, i32 2), %dtable_skip378 ], [ %next_dtable_ref383, %dtable_check380 ]
  %dtable_ptr382 = load ptr, ptr %dtable_ref381, align 8
  %111 = icmp eq ptr %dtable_ptr382, null
  %next_dtable_ref383 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr382, i32 0, i32 2
  br i1 %111, label %dtable_found384, label %dtable_check380

dtable_found384:                                  ; preds = %dtable_check380
  store ptr @"$ct.dyn.std.math.random.Mcg16Random.next_short", ptr %dtable_ref381, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg16Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip385

dtable_skip385:                                   ; preds = %dtable_found384, %dtable_skip378
  %next_val386 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws128Random.set_seed", i32 0, i32 2), align 8
  %112 = icmp eq ptr %next_val386, inttoptr (i64 -1 to ptr)
  br i1 %112, label %dtable_check387, label %dtable_skip392

dtable_check387:                                  ; preds = %dtable_check387, %dtable_skip385
  %dtable_ref388 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws128Random", i32 0, i32 2), %dtable_skip385 ], [ %next_dtable_ref390, %dtable_check387 ]
  %dtable_ptr389 = load ptr, ptr %dtable_ref388, align 8
  %113 = icmp eq ptr %dtable_ptr389, null
  %next_dtable_ref390 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr389, i32 0, i32 2
  br i1 %113, label %dtable_found391, label %dtable_check387

dtable_found391:                                  ; preds = %dtable_check387
  store ptr @"$ct.dyn.std.math.random.Msws128Random.set_seed", ptr %dtable_ref388, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws128Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip392

dtable_skip392:                                   ; preds = %dtable_found391, %dtable_skip385
  %next_val393 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws128Random.next_int128", i32 0, i32 2), align 8
  %114 = icmp eq ptr %next_val393, inttoptr (i64 -1 to ptr)
  br i1 %114, label %dtable_check394, label %dtable_skip399

dtable_check394:                                  ; preds = %dtable_check394, %dtable_skip392
  %dtable_ref395 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws128Random", i32 0, i32 2), %dtable_skip392 ], [ %next_dtable_ref397, %dtable_check394 ]
  %dtable_ptr396 = load ptr, ptr %dtable_ref395, align 8
  %115 = icmp eq ptr %dtable_ptr396, null
  %next_dtable_ref397 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr396, i32 0, i32 2
  br i1 %115, label %dtable_found398, label %dtable_check394

dtable_found398:                                  ; preds = %dtable_check394
  store ptr @"$ct.dyn.std.math.random.Msws128Random.next_int128", ptr %dtable_ref395, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws128Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip399

dtable_skip399:                                   ; preds = %dtable_found398, %dtable_skip392
  %next_val400 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws128Random.next_bytes", i32 0, i32 2), align 8
  %116 = icmp eq ptr %next_val400, inttoptr (i64 -1 to ptr)
  br i1 %116, label %dtable_check401, label %dtable_skip406

dtable_check401:                                  ; preds = %dtable_check401, %dtable_skip399
  %dtable_ref402 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws128Random", i32 0, i32 2), %dtable_skip399 ], [ %next_dtable_ref404, %dtable_check401 ]
  %dtable_ptr403 = load ptr, ptr %dtable_ref402, align 8
  %117 = icmp eq ptr %dtable_ptr403, null
  %next_dtable_ref404 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr403, i32 0, i32 2
  br i1 %117, label %dtable_found405, label %dtable_check401

dtable_found405:                                  ; preds = %dtable_check401
  store ptr @"$ct.dyn.std.math.random.Msws128Random.next_bytes", ptr %dtable_ref402, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws128Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip406

dtable_skip406:                                   ; preds = %dtable_found405, %dtable_skip399
  %next_val407 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws128Random.next_long", i32 0, i32 2), align 8
  %118 = icmp eq ptr %next_val407, inttoptr (i64 -1 to ptr)
  br i1 %118, label %dtable_check408, label %dtable_skip413

dtable_check408:                                  ; preds = %dtable_check408, %dtable_skip406
  %dtable_ref409 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws128Random", i32 0, i32 2), %dtable_skip406 ], [ %next_dtable_ref411, %dtable_check408 ]
  %dtable_ptr410 = load ptr, ptr %dtable_ref409, align 8
  %119 = icmp eq ptr %dtable_ptr410, null
  %next_dtable_ref411 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr410, i32 0, i32 2
  br i1 %119, label %dtable_found412, label %dtable_check408

dtable_found412:                                  ; preds = %dtable_check408
  store ptr @"$ct.dyn.std.math.random.Msws128Random.next_long", ptr %dtable_ref409, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws128Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip413

dtable_skip413:                                   ; preds = %dtable_found412, %dtable_skip406
  %next_val414 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws128Random.next_int", i32 0, i32 2), align 8
  %120 = icmp eq ptr %next_val414, inttoptr (i64 -1 to ptr)
  br i1 %120, label %dtable_check415, label %dtable_skip420

dtable_check415:                                  ; preds = %dtable_check415, %dtable_skip413
  %dtable_ref416 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws128Random", i32 0, i32 2), %dtable_skip413 ], [ %next_dtable_ref418, %dtable_check415 ]
  %dtable_ptr417 = load ptr, ptr %dtable_ref416, align 8
  %121 = icmp eq ptr %dtable_ptr417, null
  %next_dtable_ref418 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr417, i32 0, i32 2
  br i1 %121, label %dtable_found419, label %dtable_check415

dtable_found419:                                  ; preds = %dtable_check415
  store ptr @"$ct.dyn.std.math.random.Msws128Random.next_int", ptr %dtable_ref416, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws128Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip420

dtable_skip420:                                   ; preds = %dtable_found419, %dtable_skip413
  %next_val421 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws128Random.next_short", i32 0, i32 2), align 8
  %122 = icmp eq ptr %next_val421, inttoptr (i64 -1 to ptr)
  br i1 %122, label %dtable_check422, label %dtable_skip427

dtable_check422:                                  ; preds = %dtable_check422, %dtable_skip420
  %dtable_ref423 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws128Random", i32 0, i32 2), %dtable_skip420 ], [ %next_dtable_ref425, %dtable_check422 ]
  %dtable_ptr424 = load ptr, ptr %dtable_ref423, align 8
  %123 = icmp eq ptr %dtable_ptr424, null
  %next_dtable_ref425 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr424, i32 0, i32 2
  br i1 %123, label %dtable_found426, label %dtable_check422

dtable_found426:                                  ; preds = %dtable_check422
  store ptr @"$ct.dyn.std.math.random.Msws128Random.next_short", ptr %dtable_ref423, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws128Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip427

dtable_skip427:                                   ; preds = %dtable_found426, %dtable_skip420
  %next_val428 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws128Random.next_byte", i32 0, i32 2), align 8
  %124 = icmp eq ptr %next_val428, inttoptr (i64 -1 to ptr)
  br i1 %124, label %dtable_check429, label %dtable_skip434

dtable_check429:                                  ; preds = %dtable_check429, %dtable_skip427
  %dtable_ref430 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws128Random", i32 0, i32 2), %dtable_skip427 ], [ %next_dtable_ref432, %dtable_check429 ]
  %dtable_ptr431 = load ptr, ptr %dtable_ref430, align 8
  %125 = icmp eq ptr %dtable_ptr431, null
  %next_dtable_ref432 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr431, i32 0, i32 2
  br i1 %125, label %dtable_found433, label %dtable_check429

dtable_found433:                                  ; preds = %dtable_check429
  store ptr @"$ct.dyn.std.math.random.Msws128Random.next_byte", ptr %dtable_ref430, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws128Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip434

dtable_skip434:                                   ; preds = %dtable_found433, %dtable_skip427
  %next_val435 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws64Random.set_seed", i32 0, i32 2), align 8
  %126 = icmp eq ptr %next_val435, inttoptr (i64 -1 to ptr)
  br i1 %126, label %dtable_check436, label %dtable_skip441

dtable_check436:                                  ; preds = %dtable_check436, %dtable_skip434
  %dtable_ref437 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws64Random", i32 0, i32 2), %dtable_skip434 ], [ %next_dtable_ref439, %dtable_check436 ]
  %dtable_ptr438 = load ptr, ptr %dtable_ref437, align 8
  %127 = icmp eq ptr %dtable_ptr438, null
  %next_dtable_ref439 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr438, i32 0, i32 2
  br i1 %127, label %dtable_found440, label %dtable_check436

dtable_found440:                                  ; preds = %dtable_check436
  store ptr @"$ct.dyn.std.math.random.Msws64Random.set_seed", ptr %dtable_ref437, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws64Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip441

dtable_skip441:                                   ; preds = %dtable_found440, %dtable_skip434
  %next_val442 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws64Random.next_long", i32 0, i32 2), align 8
  %128 = icmp eq ptr %next_val442, inttoptr (i64 -1 to ptr)
  br i1 %128, label %dtable_check443, label %dtable_skip448

dtable_check443:                                  ; preds = %dtable_check443, %dtable_skip441
  %dtable_ref444 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws64Random", i32 0, i32 2), %dtable_skip441 ], [ %next_dtable_ref446, %dtable_check443 ]
  %dtable_ptr445 = load ptr, ptr %dtable_ref444, align 8
  %129 = icmp eq ptr %dtable_ptr445, null
  %next_dtable_ref446 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr445, i32 0, i32 2
  br i1 %129, label %dtable_found447, label %dtable_check443

dtable_found447:                                  ; preds = %dtable_check443
  store ptr @"$ct.dyn.std.math.random.Msws64Random.next_long", ptr %dtable_ref444, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws64Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip448

dtable_skip448:                                   ; preds = %dtable_found447, %dtable_skip441
  %next_val449 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws64Random.next_bytes", i32 0, i32 2), align 8
  %130 = icmp eq ptr %next_val449, inttoptr (i64 -1 to ptr)
  br i1 %130, label %dtable_check450, label %dtable_skip455

dtable_check450:                                  ; preds = %dtable_check450, %dtable_skip448
  %dtable_ref451 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws64Random", i32 0, i32 2), %dtable_skip448 ], [ %next_dtable_ref453, %dtable_check450 ]
  %dtable_ptr452 = load ptr, ptr %dtable_ref451, align 8
  %131 = icmp eq ptr %dtable_ptr452, null
  %next_dtable_ref453 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr452, i32 0, i32 2
  br i1 %131, label %dtable_found454, label %dtable_check450

dtable_found454:                                  ; preds = %dtable_check450
  store ptr @"$ct.dyn.std.math.random.Msws64Random.next_bytes", ptr %dtable_ref451, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws64Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip455

dtable_skip455:                                   ; preds = %dtable_found454, %dtable_skip448
  %next_val456 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws64Random.next_int128", i32 0, i32 2), align 8
  %132 = icmp eq ptr %next_val456, inttoptr (i64 -1 to ptr)
  br i1 %132, label %dtable_check457, label %dtable_skip462

dtable_check457:                                  ; preds = %dtable_check457, %dtable_skip455
  %dtable_ref458 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws64Random", i32 0, i32 2), %dtable_skip455 ], [ %next_dtable_ref460, %dtable_check457 ]
  %dtable_ptr459 = load ptr, ptr %dtable_ref458, align 8
  %133 = icmp eq ptr %dtable_ptr459, null
  %next_dtable_ref460 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr459, i32 0, i32 2
  br i1 %133, label %dtable_found461, label %dtable_check457

dtable_found461:                                  ; preds = %dtable_check457
  store ptr @"$ct.dyn.std.math.random.Msws64Random.next_int128", ptr %dtable_ref458, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws64Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip462

dtable_skip462:                                   ; preds = %dtable_found461, %dtable_skip455
  %next_val463 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws64Random.next_int", i32 0, i32 2), align 8
  %134 = icmp eq ptr %next_val463, inttoptr (i64 -1 to ptr)
  br i1 %134, label %dtable_check464, label %dtable_skip469

dtable_check464:                                  ; preds = %dtable_check464, %dtable_skip462
  %dtable_ref465 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws64Random", i32 0, i32 2), %dtable_skip462 ], [ %next_dtable_ref467, %dtable_check464 ]
  %dtable_ptr466 = load ptr, ptr %dtable_ref465, align 8
  %135 = icmp eq ptr %dtable_ptr466, null
  %next_dtable_ref467 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr466, i32 0, i32 2
  br i1 %135, label %dtable_found468, label %dtable_check464

dtable_found468:                                  ; preds = %dtable_check464
  store ptr @"$ct.dyn.std.math.random.Msws64Random.next_int", ptr %dtable_ref465, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws64Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip469

dtable_skip469:                                   ; preds = %dtable_found468, %dtable_skip462
  %next_val470 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws64Random.next_short", i32 0, i32 2), align 8
  %136 = icmp eq ptr %next_val470, inttoptr (i64 -1 to ptr)
  br i1 %136, label %dtable_check471, label %dtable_skip476

dtable_check471:                                  ; preds = %dtable_check471, %dtable_skip469
  %dtable_ref472 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws64Random", i32 0, i32 2), %dtable_skip469 ], [ %next_dtable_ref474, %dtable_check471 ]
  %dtable_ptr473 = load ptr, ptr %dtable_ref472, align 8
  %137 = icmp eq ptr %dtable_ptr473, null
  %next_dtable_ref474 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr473, i32 0, i32 2
  br i1 %137, label %dtable_found475, label %dtable_check471

dtable_found475:                                  ; preds = %dtable_check471
  store ptr @"$ct.dyn.std.math.random.Msws64Random.next_short", ptr %dtable_ref472, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws64Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip476

dtable_skip476:                                   ; preds = %dtable_found475, %dtable_skip469
  %next_val477 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws64Random.next_byte", i32 0, i32 2), align 8
  %138 = icmp eq ptr %next_val477, inttoptr (i64 -1 to ptr)
  br i1 %138, label %dtable_check478, label %dtable_skip483

dtable_check478:                                  ; preds = %dtable_check478, %dtable_skip476
  %dtable_ref479 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws64Random", i32 0, i32 2), %dtable_skip476 ], [ %next_dtable_ref481, %dtable_check478 ]
  %dtable_ptr480 = load ptr, ptr %dtable_ref479, align 8
  %139 = icmp eq ptr %dtable_ptr480, null
  %next_dtable_ref481 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr480, i32 0, i32 2
  br i1 %139, label %dtable_found482, label %dtable_check478

dtable_found482:                                  ; preds = %dtable_check478
  store ptr @"$ct.dyn.std.math.random.Msws64Random.next_byte", ptr %dtable_ref479, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws64Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip483

dtable_skip483:                                   ; preds = %dtable_found482, %dtable_skip476
  %next_val484 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws32Random.set_seed", i32 0, i32 2), align 8
  %140 = icmp eq ptr %next_val484, inttoptr (i64 -1 to ptr)
  br i1 %140, label %dtable_check485, label %dtable_skip490

dtable_check485:                                  ; preds = %dtable_check485, %dtable_skip483
  %dtable_ref486 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws32Random", i32 0, i32 2), %dtable_skip483 ], [ %next_dtable_ref488, %dtable_check485 ]
  %dtable_ptr487 = load ptr, ptr %dtable_ref486, align 8
  %141 = icmp eq ptr %dtable_ptr487, null
  %next_dtable_ref488 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr487, i32 0, i32 2
  br i1 %141, label %dtable_found489, label %dtable_check485

dtable_found489:                                  ; preds = %dtable_check485
  store ptr @"$ct.dyn.std.math.random.Msws32Random.set_seed", ptr %dtable_ref486, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws32Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip490

dtable_skip490:                                   ; preds = %dtable_found489, %dtable_skip483
  %next_val491 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws32Random.next_int", i32 0, i32 2), align 8
  %142 = icmp eq ptr %next_val491, inttoptr (i64 -1 to ptr)
  br i1 %142, label %dtable_check492, label %dtable_skip497

dtable_check492:                                  ; preds = %dtable_check492, %dtable_skip490
  %dtable_ref493 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws32Random", i32 0, i32 2), %dtable_skip490 ], [ %next_dtable_ref495, %dtable_check492 ]
  %dtable_ptr494 = load ptr, ptr %dtable_ref493, align 8
  %143 = icmp eq ptr %dtable_ptr494, null
  %next_dtable_ref495 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr494, i32 0, i32 2
  br i1 %143, label %dtable_found496, label %dtable_check492

dtable_found496:                                  ; preds = %dtable_check492
  store ptr @"$ct.dyn.std.math.random.Msws32Random.next_int", ptr %dtable_ref493, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws32Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip497

dtable_skip497:                                   ; preds = %dtable_found496, %dtable_skip490
  %next_val498 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws32Random.next_bytes", i32 0, i32 2), align 8
  %144 = icmp eq ptr %next_val498, inttoptr (i64 -1 to ptr)
  br i1 %144, label %dtable_check499, label %dtable_skip504

dtable_check499:                                  ; preds = %dtable_check499, %dtable_skip497
  %dtable_ref500 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws32Random", i32 0, i32 2), %dtable_skip497 ], [ %next_dtable_ref502, %dtable_check499 ]
  %dtable_ptr501 = load ptr, ptr %dtable_ref500, align 8
  %145 = icmp eq ptr %dtable_ptr501, null
  %next_dtable_ref502 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr501, i32 0, i32 2
  br i1 %145, label %dtable_found503, label %dtable_check499

dtable_found503:                                  ; preds = %dtable_check499
  store ptr @"$ct.dyn.std.math.random.Msws32Random.next_bytes", ptr %dtable_ref500, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws32Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip504

dtable_skip504:                                   ; preds = %dtable_found503, %dtable_skip497
  %next_val505 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws32Random.next_int128", i32 0, i32 2), align 8
  %146 = icmp eq ptr %next_val505, inttoptr (i64 -1 to ptr)
  br i1 %146, label %dtable_check506, label %dtable_skip511

dtable_check506:                                  ; preds = %dtable_check506, %dtable_skip504
  %dtable_ref507 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws32Random", i32 0, i32 2), %dtable_skip504 ], [ %next_dtable_ref509, %dtable_check506 ]
  %dtable_ptr508 = load ptr, ptr %dtable_ref507, align 8
  %147 = icmp eq ptr %dtable_ptr508, null
  %next_dtable_ref509 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr508, i32 0, i32 2
  br i1 %147, label %dtable_found510, label %dtable_check506

dtable_found510:                                  ; preds = %dtable_check506
  store ptr @"$ct.dyn.std.math.random.Msws32Random.next_int128", ptr %dtable_ref507, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws32Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip511

dtable_skip511:                                   ; preds = %dtable_found510, %dtable_skip504
  %next_val512 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws32Random.next_long", i32 0, i32 2), align 8
  %148 = icmp eq ptr %next_val512, inttoptr (i64 -1 to ptr)
  br i1 %148, label %dtable_check513, label %dtable_skip518

dtable_check513:                                  ; preds = %dtable_check513, %dtable_skip511
  %dtable_ref514 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws32Random", i32 0, i32 2), %dtable_skip511 ], [ %next_dtable_ref516, %dtable_check513 ]
  %dtable_ptr515 = load ptr, ptr %dtable_ref514, align 8
  %149 = icmp eq ptr %dtable_ptr515, null
  %next_dtable_ref516 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr515, i32 0, i32 2
  br i1 %149, label %dtable_found517, label %dtable_check513

dtable_found517:                                  ; preds = %dtable_check513
  store ptr @"$ct.dyn.std.math.random.Msws32Random.next_long", ptr %dtable_ref514, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws32Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip518

dtable_skip518:                                   ; preds = %dtable_found517, %dtable_skip511
  %next_val519 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws32Random.next_short", i32 0, i32 2), align 8
  %150 = icmp eq ptr %next_val519, inttoptr (i64 -1 to ptr)
  br i1 %150, label %dtable_check520, label %dtable_skip525

dtable_check520:                                  ; preds = %dtable_check520, %dtable_skip518
  %dtable_ref521 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws32Random", i32 0, i32 2), %dtable_skip518 ], [ %next_dtable_ref523, %dtable_check520 ]
  %dtable_ptr522 = load ptr, ptr %dtable_ref521, align 8
  %151 = icmp eq ptr %dtable_ptr522, null
  %next_dtable_ref523 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr522, i32 0, i32 2
  br i1 %151, label %dtable_found524, label %dtable_check520

dtable_found524:                                  ; preds = %dtable_check520
  store ptr @"$ct.dyn.std.math.random.Msws32Random.next_short", ptr %dtable_ref521, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws32Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip525

dtable_skip525:                                   ; preds = %dtable_found524, %dtable_skip518
  %next_val526 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws32Random.next_byte", i32 0, i32 2), align 8
  %152 = icmp eq ptr %next_val526, inttoptr (i64 -1 to ptr)
  br i1 %152, label %dtable_check527, label %dtable_skip532

dtable_check527:                                  ; preds = %dtable_check527, %dtable_skip525
  %dtable_ref528 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws32Random", i32 0, i32 2), %dtable_skip525 ], [ %next_dtable_ref530, %dtable_check527 ]
  %dtable_ptr529 = load ptr, ptr %dtable_ref528, align 8
  %153 = icmp eq ptr %dtable_ptr529, null
  %next_dtable_ref530 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr529, i32 0, i32 2
  br i1 %153, label %dtable_found531, label %dtable_check527

dtable_found531:                                  ; preds = %dtable_check527
  store ptr @"$ct.dyn.std.math.random.Msws32Random.next_byte", ptr %dtable_ref528, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws32Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip532

dtable_skip532:                                   ; preds = %dtable_found531, %dtable_skip525
  %next_val533 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws16Random.set_seed", i32 0, i32 2), align 8
  %154 = icmp eq ptr %next_val533, inttoptr (i64 -1 to ptr)
  br i1 %154, label %dtable_check534, label %dtable_skip539

dtable_check534:                                  ; preds = %dtable_check534, %dtable_skip532
  %dtable_ref535 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws16Random", i32 0, i32 2), %dtable_skip532 ], [ %next_dtable_ref537, %dtable_check534 ]
  %dtable_ptr536 = load ptr, ptr %dtable_ref535, align 8
  %155 = icmp eq ptr %dtable_ptr536, null
  %next_dtable_ref537 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr536, i32 0, i32 2
  br i1 %155, label %dtable_found538, label %dtable_check534

dtable_found538:                                  ; preds = %dtable_check534
  store ptr @"$ct.dyn.std.math.random.Msws16Random.set_seed", ptr %dtable_ref535, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws16Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip539

dtable_skip539:                                   ; preds = %dtable_found538, %dtable_skip532
  %next_val540 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws16Random.next_short", i32 0, i32 2), align 8
  %156 = icmp eq ptr %next_val540, inttoptr (i64 -1 to ptr)
  br i1 %156, label %dtable_check541, label %dtable_skip546

dtable_check541:                                  ; preds = %dtable_check541, %dtable_skip539
  %dtable_ref542 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws16Random", i32 0, i32 2), %dtable_skip539 ], [ %next_dtable_ref544, %dtable_check541 ]
  %dtable_ptr543 = load ptr, ptr %dtable_ref542, align 8
  %157 = icmp eq ptr %dtable_ptr543, null
  %next_dtable_ref544 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr543, i32 0, i32 2
  br i1 %157, label %dtable_found545, label %dtable_check541

dtable_found545:                                  ; preds = %dtable_check541
  store ptr @"$ct.dyn.std.math.random.Msws16Random.next_short", ptr %dtable_ref542, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws16Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip546

dtable_skip546:                                   ; preds = %dtable_found545, %dtable_skip539
  %next_val547 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws16Random.next_bytes", i32 0, i32 2), align 8
  %158 = icmp eq ptr %next_val547, inttoptr (i64 -1 to ptr)
  br i1 %158, label %dtable_check548, label %dtable_skip553

dtable_check548:                                  ; preds = %dtable_check548, %dtable_skip546
  %dtable_ref549 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws16Random", i32 0, i32 2), %dtable_skip546 ], [ %next_dtable_ref551, %dtable_check548 ]
  %dtable_ptr550 = load ptr, ptr %dtable_ref549, align 8
  %159 = icmp eq ptr %dtable_ptr550, null
  %next_dtable_ref551 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr550, i32 0, i32 2
  br i1 %159, label %dtable_found552, label %dtable_check548

dtable_found552:                                  ; preds = %dtable_check548
  store ptr @"$ct.dyn.std.math.random.Msws16Random.next_bytes", ptr %dtable_ref549, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws16Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip553

dtable_skip553:                                   ; preds = %dtable_found552, %dtable_skip546
  %next_val554 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws16Random.next_int128", i32 0, i32 2), align 8
  %160 = icmp eq ptr %next_val554, inttoptr (i64 -1 to ptr)
  br i1 %160, label %dtable_check555, label %dtable_skip560

dtable_check555:                                  ; preds = %dtable_check555, %dtable_skip553
  %dtable_ref556 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws16Random", i32 0, i32 2), %dtable_skip553 ], [ %next_dtable_ref558, %dtable_check555 ]
  %dtable_ptr557 = load ptr, ptr %dtable_ref556, align 8
  %161 = icmp eq ptr %dtable_ptr557, null
  %next_dtable_ref558 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr557, i32 0, i32 2
  br i1 %161, label %dtable_found559, label %dtable_check555

dtable_found559:                                  ; preds = %dtable_check555
  store ptr @"$ct.dyn.std.math.random.Msws16Random.next_int128", ptr %dtable_ref556, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws16Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip560

dtable_skip560:                                   ; preds = %dtable_found559, %dtable_skip553
  %next_val561 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws16Random.next_long", i32 0, i32 2), align 8
  %162 = icmp eq ptr %next_val561, inttoptr (i64 -1 to ptr)
  br i1 %162, label %dtable_check562, label %dtable_skip567

dtable_check562:                                  ; preds = %dtable_check562, %dtable_skip560
  %dtable_ref563 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws16Random", i32 0, i32 2), %dtable_skip560 ], [ %next_dtable_ref565, %dtable_check562 ]
  %dtable_ptr564 = load ptr, ptr %dtable_ref563, align 8
  %163 = icmp eq ptr %dtable_ptr564, null
  %next_dtable_ref565 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr564, i32 0, i32 2
  br i1 %163, label %dtable_found566, label %dtable_check562

dtable_found566:                                  ; preds = %dtable_check562
  store ptr @"$ct.dyn.std.math.random.Msws16Random.next_long", ptr %dtable_ref563, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws16Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip567

dtable_skip567:                                   ; preds = %dtable_found566, %dtable_skip560
  %next_val568 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws16Random.next_int", i32 0, i32 2), align 8
  %164 = icmp eq ptr %next_val568, inttoptr (i64 -1 to ptr)
  br i1 %164, label %dtable_check569, label %dtable_skip574

dtable_check569:                                  ; preds = %dtable_check569, %dtable_skip567
  %dtable_ref570 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws16Random", i32 0, i32 2), %dtable_skip567 ], [ %next_dtable_ref572, %dtable_check569 ]
  %dtable_ptr571 = load ptr, ptr %dtable_ref570, align 8
  %165 = icmp eq ptr %dtable_ptr571, null
  %next_dtable_ref572 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr571, i32 0, i32 2
  br i1 %165, label %dtable_found573, label %dtable_check569

dtable_found573:                                  ; preds = %dtable_check569
  store ptr @"$ct.dyn.std.math.random.Msws16Random.next_int", ptr %dtable_ref570, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws16Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip574

dtable_skip574:                                   ; preds = %dtable_found573, %dtable_skip567
  %next_val575 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws16Random.next_byte", i32 0, i32 2), align 8
  %166 = icmp eq ptr %next_val575, inttoptr (i64 -1 to ptr)
  br i1 %166, label %dtable_check576, label %dtable_skip581

dtable_check576:                                  ; preds = %dtable_check576, %dtable_skip574
  %dtable_ref577 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws16Random", i32 0, i32 2), %dtable_skip574 ], [ %next_dtable_ref579, %dtable_check576 ]
  %dtable_ptr578 = load ptr, ptr %dtable_ref577, align 8
  %167 = icmp eq ptr %dtable_ptr578, null
  %next_dtable_ref579 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr578, i32 0, i32 2
  br i1 %167, label %dtable_found580, label %dtable_check576

dtable_found580:                                  ; preds = %dtable_check576
  store ptr @"$ct.dyn.std.math.random.Msws16Random.next_byte", ptr %dtable_ref577, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws16Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip581

dtable_skip581:                                   ; preds = %dtable_found580, %dtable_skip574
  %next_val582 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws8Random.set_seed", i32 0, i32 2), align 8
  %168 = icmp eq ptr %next_val582, inttoptr (i64 -1 to ptr)
  br i1 %168, label %dtable_check583, label %dtable_skip588

dtable_check583:                                  ; preds = %dtable_check583, %dtable_skip581
  %dtable_ref584 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws8Random", i32 0, i32 2), %dtable_skip581 ], [ %next_dtable_ref586, %dtable_check583 ]
  %dtable_ptr585 = load ptr, ptr %dtable_ref584, align 8
  %169 = icmp eq ptr %dtable_ptr585, null
  %next_dtable_ref586 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr585, i32 0, i32 2
  br i1 %169, label %dtable_found587, label %dtable_check583

dtable_found587:                                  ; preds = %dtable_check583
  store ptr @"$ct.dyn.std.math.random.Msws8Random.set_seed", ptr %dtable_ref584, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws8Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip588

dtable_skip588:                                   ; preds = %dtable_found587, %dtable_skip581
  %next_val589 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws8Random.next_byte", i32 0, i32 2), align 8
  %170 = icmp eq ptr %next_val589, inttoptr (i64 -1 to ptr)
  br i1 %170, label %dtable_check590, label %dtable_skip595

dtable_check590:                                  ; preds = %dtable_check590, %dtable_skip588
  %dtable_ref591 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws8Random", i32 0, i32 2), %dtable_skip588 ], [ %next_dtable_ref593, %dtable_check590 ]
  %dtable_ptr592 = load ptr, ptr %dtable_ref591, align 8
  %171 = icmp eq ptr %dtable_ptr592, null
  %next_dtable_ref593 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr592, i32 0, i32 2
  br i1 %171, label %dtable_found594, label %dtable_check590

dtable_found594:                                  ; preds = %dtable_check590
  store ptr @"$ct.dyn.std.math.random.Msws8Random.next_byte", ptr %dtable_ref591, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws8Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip595

dtable_skip595:                                   ; preds = %dtable_found594, %dtable_skip588
  %next_val596 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws8Random.next_bytes", i32 0, i32 2), align 8
  %172 = icmp eq ptr %next_val596, inttoptr (i64 -1 to ptr)
  br i1 %172, label %dtable_check597, label %dtable_skip602

dtable_check597:                                  ; preds = %dtable_check597, %dtable_skip595
  %dtable_ref598 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws8Random", i32 0, i32 2), %dtable_skip595 ], [ %next_dtable_ref600, %dtable_check597 ]
  %dtable_ptr599 = load ptr, ptr %dtable_ref598, align 8
  %173 = icmp eq ptr %dtable_ptr599, null
  %next_dtable_ref600 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr599, i32 0, i32 2
  br i1 %173, label %dtable_found601, label %dtable_check597

dtable_found601:                                  ; preds = %dtable_check597
  store ptr @"$ct.dyn.std.math.random.Msws8Random.next_bytes", ptr %dtable_ref598, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws8Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip602

dtable_skip602:                                   ; preds = %dtable_found601, %dtable_skip595
  %next_val603 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws8Random.next_int128", i32 0, i32 2), align 8
  %174 = icmp eq ptr %next_val603, inttoptr (i64 -1 to ptr)
  br i1 %174, label %dtable_check604, label %dtable_skip609

dtable_check604:                                  ; preds = %dtable_check604, %dtable_skip602
  %dtable_ref605 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws8Random", i32 0, i32 2), %dtable_skip602 ], [ %next_dtable_ref607, %dtable_check604 ]
  %dtable_ptr606 = load ptr, ptr %dtable_ref605, align 8
  %175 = icmp eq ptr %dtable_ptr606, null
  %next_dtable_ref607 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr606, i32 0, i32 2
  br i1 %175, label %dtable_found608, label %dtable_check604

dtable_found608:                                  ; preds = %dtable_check604
  store ptr @"$ct.dyn.std.math.random.Msws8Random.next_int128", ptr %dtable_ref605, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws8Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip609

dtable_skip609:                                   ; preds = %dtable_found608, %dtable_skip602
  %next_val610 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws8Random.next_long", i32 0, i32 2), align 8
  %176 = icmp eq ptr %next_val610, inttoptr (i64 -1 to ptr)
  br i1 %176, label %dtable_check611, label %dtable_skip616

dtable_check611:                                  ; preds = %dtable_check611, %dtable_skip609
  %dtable_ref612 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws8Random", i32 0, i32 2), %dtable_skip609 ], [ %next_dtable_ref614, %dtable_check611 ]
  %dtable_ptr613 = load ptr, ptr %dtable_ref612, align 8
  %177 = icmp eq ptr %dtable_ptr613, null
  %next_dtable_ref614 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr613, i32 0, i32 2
  br i1 %177, label %dtable_found615, label %dtable_check611

dtable_found615:                                  ; preds = %dtable_check611
  store ptr @"$ct.dyn.std.math.random.Msws8Random.next_long", ptr %dtable_ref612, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws8Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip616

dtable_skip616:                                   ; preds = %dtable_found615, %dtable_skip609
  %next_val617 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws8Random.next_int", i32 0, i32 2), align 8
  %178 = icmp eq ptr %next_val617, inttoptr (i64 -1 to ptr)
  br i1 %178, label %dtable_check618, label %dtable_skip623

dtable_check618:                                  ; preds = %dtable_check618, %dtable_skip616
  %dtable_ref619 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws8Random", i32 0, i32 2), %dtable_skip616 ], [ %next_dtable_ref621, %dtable_check618 ]
  %dtable_ptr620 = load ptr, ptr %dtable_ref619, align 8
  %179 = icmp eq ptr %dtable_ptr620, null
  %next_dtable_ref621 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr620, i32 0, i32 2
  br i1 %179, label %dtable_found622, label %dtable_check618

dtable_found622:                                  ; preds = %dtable_check618
  store ptr @"$ct.dyn.std.math.random.Msws8Random.next_int", ptr %dtable_ref619, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws8Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip623

dtable_skip623:                                   ; preds = %dtable_found622, %dtable_skip616
  %next_val624 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws8Random.next_short", i32 0, i32 2), align 8
  %180 = icmp eq ptr %next_val624, inttoptr (i64 -1 to ptr)
  br i1 %180, label %dtable_check625, label %dtable_skip630

dtable_check625:                                  ; preds = %dtable_check625, %dtable_skip623
  %dtable_ref626 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws8Random", i32 0, i32 2), %dtable_skip623 ], [ %next_dtable_ref628, %dtable_check625 ]
  %dtable_ptr627 = load ptr, ptr %dtable_ref626, align 8
  %181 = icmp eq ptr %dtable_ptr627, null
  %next_dtable_ref628 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr627, i32 0, i32 2
  br i1 %181, label %dtable_found629, label %dtable_check625

dtable_found629:                                  ; preds = %dtable_check625
  store ptr @"$ct.dyn.std.math.random.Msws8Random.next_short", ptr %dtable_ref626, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws8Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip630

dtable_skip630:                                   ; preds = %dtable_found629, %dtable_skip623
  %next_val631 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg128Random.set_seed", i32 0, i32 2), align 8
  %182 = icmp eq ptr %next_val631, inttoptr (i64 -1 to ptr)
  br i1 %182, label %dtable_check632, label %dtable_skip637

dtable_check632:                                  ; preds = %dtable_check632, %dtable_skip630
  %dtable_ref633 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg128Random", i32 0, i32 2), %dtable_skip630 ], [ %next_dtable_ref635, %dtable_check632 ]
  %dtable_ptr634 = load ptr, ptr %dtable_ref633, align 8
  %183 = icmp eq ptr %dtable_ptr634, null
  %next_dtable_ref635 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr634, i32 0, i32 2
  br i1 %183, label %dtable_found636, label %dtable_check632

dtable_found636:                                  ; preds = %dtable_check632
  store ptr @"$ct.dyn.std.math.random.Pcg128Random.set_seed", ptr %dtable_ref633, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg128Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip637

dtable_skip637:                                   ; preds = %dtable_found636, %dtable_skip630
  %next_val638 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg128Random.next_long", i32 0, i32 2), align 8
  %184 = icmp eq ptr %next_val638, inttoptr (i64 -1 to ptr)
  br i1 %184, label %dtable_check639, label %dtable_skip644

dtable_check639:                                  ; preds = %dtable_check639, %dtable_skip637
  %dtable_ref640 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg128Random", i32 0, i32 2), %dtable_skip637 ], [ %next_dtable_ref642, %dtable_check639 ]
  %dtable_ptr641 = load ptr, ptr %dtable_ref640, align 8
  %185 = icmp eq ptr %dtable_ptr641, null
  %next_dtable_ref642 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr641, i32 0, i32 2
  br i1 %185, label %dtable_found643, label %dtable_check639

dtable_found643:                                  ; preds = %dtable_check639
  store ptr @"$ct.dyn.std.math.random.Pcg128Random.next_long", ptr %dtable_ref640, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg128Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip644

dtable_skip644:                                   ; preds = %dtable_found643, %dtable_skip637
  %next_val645 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg128Random.next_bytes", i32 0, i32 2), align 8
  %186 = icmp eq ptr %next_val645, inttoptr (i64 -1 to ptr)
  br i1 %186, label %dtable_check646, label %dtable_skip651

dtable_check646:                                  ; preds = %dtable_check646, %dtable_skip644
  %dtable_ref647 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg128Random", i32 0, i32 2), %dtable_skip644 ], [ %next_dtable_ref649, %dtable_check646 ]
  %dtable_ptr648 = load ptr, ptr %dtable_ref647, align 8
  %187 = icmp eq ptr %dtable_ptr648, null
  %next_dtable_ref649 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr648, i32 0, i32 2
  br i1 %187, label %dtable_found650, label %dtable_check646

dtable_found650:                                  ; preds = %dtable_check646
  store ptr @"$ct.dyn.std.math.random.Pcg128Random.next_bytes", ptr %dtable_ref647, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg128Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip651

dtable_skip651:                                   ; preds = %dtable_found650, %dtable_skip644
  %next_val652 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg128Random.next_int128", i32 0, i32 2), align 8
  %188 = icmp eq ptr %next_val652, inttoptr (i64 -1 to ptr)
  br i1 %188, label %dtable_check653, label %dtable_skip658

dtable_check653:                                  ; preds = %dtable_check653, %dtable_skip651
  %dtable_ref654 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg128Random", i32 0, i32 2), %dtable_skip651 ], [ %next_dtable_ref656, %dtable_check653 ]
  %dtable_ptr655 = load ptr, ptr %dtable_ref654, align 8
  %189 = icmp eq ptr %dtable_ptr655, null
  %next_dtable_ref656 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr655, i32 0, i32 2
  br i1 %189, label %dtable_found657, label %dtable_check653

dtable_found657:                                  ; preds = %dtable_check653
  store ptr @"$ct.dyn.std.math.random.Pcg128Random.next_int128", ptr %dtable_ref654, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg128Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip658

dtable_skip658:                                   ; preds = %dtable_found657, %dtable_skip651
  %next_val659 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg128Random.next_int", i32 0, i32 2), align 8
  %190 = icmp eq ptr %next_val659, inttoptr (i64 -1 to ptr)
  br i1 %190, label %dtable_check660, label %dtable_skip665

dtable_check660:                                  ; preds = %dtable_check660, %dtable_skip658
  %dtable_ref661 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg128Random", i32 0, i32 2), %dtable_skip658 ], [ %next_dtable_ref663, %dtable_check660 ]
  %dtable_ptr662 = load ptr, ptr %dtable_ref661, align 8
  %191 = icmp eq ptr %dtable_ptr662, null
  %next_dtable_ref663 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr662, i32 0, i32 2
  br i1 %191, label %dtable_found664, label %dtable_check660

dtable_found664:                                  ; preds = %dtable_check660
  store ptr @"$ct.dyn.std.math.random.Pcg128Random.next_int", ptr %dtable_ref661, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg128Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip665

dtable_skip665:                                   ; preds = %dtable_found664, %dtable_skip658
  %next_val666 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg128Random.next_short", i32 0, i32 2), align 8
  %192 = icmp eq ptr %next_val666, inttoptr (i64 -1 to ptr)
  br i1 %192, label %dtable_check667, label %dtable_skip672

dtable_check667:                                  ; preds = %dtable_check667, %dtable_skip665
  %dtable_ref668 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg128Random", i32 0, i32 2), %dtable_skip665 ], [ %next_dtable_ref670, %dtable_check667 ]
  %dtable_ptr669 = load ptr, ptr %dtable_ref668, align 8
  %193 = icmp eq ptr %dtable_ptr669, null
  %next_dtable_ref670 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr669, i32 0, i32 2
  br i1 %193, label %dtable_found671, label %dtable_check667

dtable_found671:                                  ; preds = %dtable_check667
  store ptr @"$ct.dyn.std.math.random.Pcg128Random.next_short", ptr %dtable_ref668, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg128Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip672

dtable_skip672:                                   ; preds = %dtable_found671, %dtable_skip665
  %next_val673 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg128Random.next_byte", i32 0, i32 2), align 8
  %194 = icmp eq ptr %next_val673, inttoptr (i64 -1 to ptr)
  br i1 %194, label %dtable_check674, label %dtable_skip679

dtable_check674:                                  ; preds = %dtable_check674, %dtable_skip672
  %dtable_ref675 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg128Random", i32 0, i32 2), %dtable_skip672 ], [ %next_dtable_ref677, %dtable_check674 ]
  %dtable_ptr676 = load ptr, ptr %dtable_ref675, align 8
  %195 = icmp eq ptr %dtable_ptr676, null
  %next_dtable_ref677 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr676, i32 0, i32 2
  br i1 %195, label %dtable_found678, label %dtable_check674

dtable_found678:                                  ; preds = %dtable_check674
  store ptr @"$ct.dyn.std.math.random.Pcg128Random.next_byte", ptr %dtable_ref675, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg128Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip679

dtable_skip679:                                   ; preds = %dtable_found678, %dtable_skip672
  %next_val680 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg64Random.set_seed", i32 0, i32 2), align 8
  %196 = icmp eq ptr %next_val680, inttoptr (i64 -1 to ptr)
  br i1 %196, label %dtable_check681, label %dtable_skip686

dtable_check681:                                  ; preds = %dtable_check681, %dtable_skip679
  %dtable_ref682 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg64Random", i32 0, i32 2), %dtable_skip679 ], [ %next_dtable_ref684, %dtable_check681 ]
  %dtable_ptr683 = load ptr, ptr %dtable_ref682, align 8
  %197 = icmp eq ptr %dtable_ptr683, null
  %next_dtable_ref684 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr683, i32 0, i32 2
  br i1 %197, label %dtable_found685, label %dtable_check681

dtable_found685:                                  ; preds = %dtable_check681
  store ptr @"$ct.dyn.std.math.random.Pcg64Random.set_seed", ptr %dtable_ref682, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg64Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip686

dtable_skip686:                                   ; preds = %dtable_found685, %dtable_skip679
  %next_val687 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg64Random.next_int", i32 0, i32 2), align 8
  %198 = icmp eq ptr %next_val687, inttoptr (i64 -1 to ptr)
  br i1 %198, label %dtable_check688, label %dtable_skip693

dtable_check688:                                  ; preds = %dtable_check688, %dtable_skip686
  %dtable_ref689 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg64Random", i32 0, i32 2), %dtable_skip686 ], [ %next_dtable_ref691, %dtable_check688 ]
  %dtable_ptr690 = load ptr, ptr %dtable_ref689, align 8
  %199 = icmp eq ptr %dtable_ptr690, null
  %next_dtable_ref691 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr690, i32 0, i32 2
  br i1 %199, label %dtable_found692, label %dtable_check688

dtable_found692:                                  ; preds = %dtable_check688
  store ptr @"$ct.dyn.std.math.random.Pcg64Random.next_int", ptr %dtable_ref689, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg64Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip693

dtable_skip693:                                   ; preds = %dtable_found692, %dtable_skip686
  %next_val694 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg64Random.next_bytes", i32 0, i32 2), align 8
  %200 = icmp eq ptr %next_val694, inttoptr (i64 -1 to ptr)
  br i1 %200, label %dtable_check695, label %dtable_skip700

dtable_check695:                                  ; preds = %dtable_check695, %dtable_skip693
  %dtable_ref696 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg64Random", i32 0, i32 2), %dtable_skip693 ], [ %next_dtable_ref698, %dtable_check695 ]
  %dtable_ptr697 = load ptr, ptr %dtable_ref696, align 8
  %201 = icmp eq ptr %dtable_ptr697, null
  %next_dtable_ref698 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr697, i32 0, i32 2
  br i1 %201, label %dtable_found699, label %dtable_check695

dtable_found699:                                  ; preds = %dtable_check695
  store ptr @"$ct.dyn.std.math.random.Pcg64Random.next_bytes", ptr %dtable_ref696, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg64Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip700

dtable_skip700:                                   ; preds = %dtable_found699, %dtable_skip693
  %next_val701 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg64Random.next_int128", i32 0, i32 2), align 8
  %202 = icmp eq ptr %next_val701, inttoptr (i64 -1 to ptr)
  br i1 %202, label %dtable_check702, label %dtable_skip707

dtable_check702:                                  ; preds = %dtable_check702, %dtable_skip700
  %dtable_ref703 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg64Random", i32 0, i32 2), %dtable_skip700 ], [ %next_dtable_ref705, %dtable_check702 ]
  %dtable_ptr704 = load ptr, ptr %dtable_ref703, align 8
  %203 = icmp eq ptr %dtable_ptr704, null
  %next_dtable_ref705 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr704, i32 0, i32 2
  br i1 %203, label %dtable_found706, label %dtable_check702

dtable_found706:                                  ; preds = %dtable_check702
  store ptr @"$ct.dyn.std.math.random.Pcg64Random.next_int128", ptr %dtable_ref703, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg64Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip707

dtable_skip707:                                   ; preds = %dtable_found706, %dtable_skip700
  %next_val708 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg64Random.next_long", i32 0, i32 2), align 8
  %204 = icmp eq ptr %next_val708, inttoptr (i64 -1 to ptr)
  br i1 %204, label %dtable_check709, label %dtable_skip714

dtable_check709:                                  ; preds = %dtable_check709, %dtable_skip707
  %dtable_ref710 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg64Random", i32 0, i32 2), %dtable_skip707 ], [ %next_dtable_ref712, %dtable_check709 ]
  %dtable_ptr711 = load ptr, ptr %dtable_ref710, align 8
  %205 = icmp eq ptr %dtable_ptr711, null
  %next_dtable_ref712 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr711, i32 0, i32 2
  br i1 %205, label %dtable_found713, label %dtable_check709

dtable_found713:                                  ; preds = %dtable_check709
  store ptr @"$ct.dyn.std.math.random.Pcg64Random.next_long", ptr %dtable_ref710, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg64Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip714

dtable_skip714:                                   ; preds = %dtable_found713, %dtable_skip707
  %next_val715 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg64Random.next_short", i32 0, i32 2), align 8
  %206 = icmp eq ptr %next_val715, inttoptr (i64 -1 to ptr)
  br i1 %206, label %dtable_check716, label %dtable_skip721

dtable_check716:                                  ; preds = %dtable_check716, %dtable_skip714
  %dtable_ref717 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg64Random", i32 0, i32 2), %dtable_skip714 ], [ %next_dtable_ref719, %dtable_check716 ]
  %dtable_ptr718 = load ptr, ptr %dtable_ref717, align 8
  %207 = icmp eq ptr %dtable_ptr718, null
  %next_dtable_ref719 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr718, i32 0, i32 2
  br i1 %207, label %dtable_found720, label %dtable_check716

dtable_found720:                                  ; preds = %dtable_check716
  store ptr @"$ct.dyn.std.math.random.Pcg64Random.next_short", ptr %dtable_ref717, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg64Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip721

dtable_skip721:                                   ; preds = %dtable_found720, %dtable_skip714
  %next_val722 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg64Random.next_byte", i32 0, i32 2), align 8
  %208 = icmp eq ptr %next_val722, inttoptr (i64 -1 to ptr)
  br i1 %208, label %dtable_check723, label %dtable_skip728

dtable_check723:                                  ; preds = %dtable_check723, %dtable_skip721
  %dtable_ref724 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg64Random", i32 0, i32 2), %dtable_skip721 ], [ %next_dtable_ref726, %dtable_check723 ]
  %dtable_ptr725 = load ptr, ptr %dtable_ref724, align 8
  %209 = icmp eq ptr %dtable_ptr725, null
  %next_dtable_ref726 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr725, i32 0, i32 2
  br i1 %209, label %dtable_found727, label %dtable_check723

dtable_found727:                                  ; preds = %dtable_check723
  store ptr @"$ct.dyn.std.math.random.Pcg64Random.next_byte", ptr %dtable_ref724, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg64Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip728

dtable_skip728:                                   ; preds = %dtable_found727, %dtable_skip721
  %next_val729 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg32Random.set_seed", i32 0, i32 2), align 8
  %210 = icmp eq ptr %next_val729, inttoptr (i64 -1 to ptr)
  br i1 %210, label %dtable_check730, label %dtable_skip735

dtable_check730:                                  ; preds = %dtable_check730, %dtable_skip728
  %dtable_ref731 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg32Random", i32 0, i32 2), %dtable_skip728 ], [ %next_dtable_ref733, %dtable_check730 ]
  %dtable_ptr732 = load ptr, ptr %dtable_ref731, align 8
  %211 = icmp eq ptr %dtable_ptr732, null
  %next_dtable_ref733 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr732, i32 0, i32 2
  br i1 %211, label %dtable_found734, label %dtable_check730

dtable_found734:                                  ; preds = %dtable_check730
  store ptr @"$ct.dyn.std.math.random.Pcg32Random.set_seed", ptr %dtable_ref731, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg32Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip735

dtable_skip735:                                   ; preds = %dtable_found734, %dtable_skip728
  %next_val736 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg32Random.next_short", i32 0, i32 2), align 8
  %212 = icmp eq ptr %next_val736, inttoptr (i64 -1 to ptr)
  br i1 %212, label %dtable_check737, label %dtable_skip742

dtable_check737:                                  ; preds = %dtable_check737, %dtable_skip735
  %dtable_ref738 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg32Random", i32 0, i32 2), %dtable_skip735 ], [ %next_dtable_ref740, %dtable_check737 ]
  %dtable_ptr739 = load ptr, ptr %dtable_ref738, align 8
  %213 = icmp eq ptr %dtable_ptr739, null
  %next_dtable_ref740 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr739, i32 0, i32 2
  br i1 %213, label %dtable_found741, label %dtable_check737

dtable_found741:                                  ; preds = %dtable_check737
  store ptr @"$ct.dyn.std.math.random.Pcg32Random.next_short", ptr %dtable_ref738, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg32Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip742

dtable_skip742:                                   ; preds = %dtable_found741, %dtable_skip735
  %next_val743 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg32Random.next_bytes", i32 0, i32 2), align 8
  %214 = icmp eq ptr %next_val743, inttoptr (i64 -1 to ptr)
  br i1 %214, label %dtable_check744, label %dtable_skip749

dtable_check744:                                  ; preds = %dtable_check744, %dtable_skip742
  %dtable_ref745 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg32Random", i32 0, i32 2), %dtable_skip742 ], [ %next_dtable_ref747, %dtable_check744 ]
  %dtable_ptr746 = load ptr, ptr %dtable_ref745, align 8
  %215 = icmp eq ptr %dtable_ptr746, null
  %next_dtable_ref747 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr746, i32 0, i32 2
  br i1 %215, label %dtable_found748, label %dtable_check744

dtable_found748:                                  ; preds = %dtable_check744
  store ptr @"$ct.dyn.std.math.random.Pcg32Random.next_bytes", ptr %dtable_ref745, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg32Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip749

dtable_skip749:                                   ; preds = %dtable_found748, %dtable_skip742
  %next_val750 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg32Random.next_int128", i32 0, i32 2), align 8
  %216 = icmp eq ptr %next_val750, inttoptr (i64 -1 to ptr)
  br i1 %216, label %dtable_check751, label %dtable_skip756

dtable_check751:                                  ; preds = %dtable_check751, %dtable_skip749
  %dtable_ref752 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg32Random", i32 0, i32 2), %dtable_skip749 ], [ %next_dtable_ref754, %dtable_check751 ]
  %dtable_ptr753 = load ptr, ptr %dtable_ref752, align 8
  %217 = icmp eq ptr %dtable_ptr753, null
  %next_dtable_ref754 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr753, i32 0, i32 2
  br i1 %217, label %dtable_found755, label %dtable_check751

dtable_found755:                                  ; preds = %dtable_check751
  store ptr @"$ct.dyn.std.math.random.Pcg32Random.next_int128", ptr %dtable_ref752, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg32Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip756

dtable_skip756:                                   ; preds = %dtable_found755, %dtable_skip749
  %next_val757 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg32Random.next_long", i32 0, i32 2), align 8
  %218 = icmp eq ptr %next_val757, inttoptr (i64 -1 to ptr)
  br i1 %218, label %dtable_check758, label %dtable_skip763

dtable_check758:                                  ; preds = %dtable_check758, %dtable_skip756
  %dtable_ref759 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg32Random", i32 0, i32 2), %dtable_skip756 ], [ %next_dtable_ref761, %dtable_check758 ]
  %dtable_ptr760 = load ptr, ptr %dtable_ref759, align 8
  %219 = icmp eq ptr %dtable_ptr760, null
  %next_dtable_ref761 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr760, i32 0, i32 2
  br i1 %219, label %dtable_found762, label %dtable_check758

dtable_found762:                                  ; preds = %dtable_check758
  store ptr @"$ct.dyn.std.math.random.Pcg32Random.next_long", ptr %dtable_ref759, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg32Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip763

dtable_skip763:                                   ; preds = %dtable_found762, %dtable_skip756
  %next_val764 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg32Random.next_int", i32 0, i32 2), align 8
  %220 = icmp eq ptr %next_val764, inttoptr (i64 -1 to ptr)
  br i1 %220, label %dtable_check765, label %dtable_skip770

dtable_check765:                                  ; preds = %dtable_check765, %dtable_skip763
  %dtable_ref766 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg32Random", i32 0, i32 2), %dtable_skip763 ], [ %next_dtable_ref768, %dtable_check765 ]
  %dtable_ptr767 = load ptr, ptr %dtable_ref766, align 8
  %221 = icmp eq ptr %dtable_ptr767, null
  %next_dtable_ref768 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr767, i32 0, i32 2
  br i1 %221, label %dtable_found769, label %dtable_check765

dtable_found769:                                  ; preds = %dtable_check765
  store ptr @"$ct.dyn.std.math.random.Pcg32Random.next_int", ptr %dtable_ref766, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg32Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip770

dtable_skip770:                                   ; preds = %dtable_found769, %dtable_skip763
  %next_val771 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg32Random.next_byte", i32 0, i32 2), align 8
  %222 = icmp eq ptr %next_val771, inttoptr (i64 -1 to ptr)
  br i1 %222, label %dtable_check772, label %dtable_skip777

dtable_check772:                                  ; preds = %dtable_check772, %dtable_skip770
  %dtable_ref773 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg32Random", i32 0, i32 2), %dtable_skip770 ], [ %next_dtable_ref775, %dtable_check772 ]
  %dtable_ptr774 = load ptr, ptr %dtable_ref773, align 8
  %223 = icmp eq ptr %dtable_ptr774, null
  %next_dtable_ref775 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr774, i32 0, i32 2
  br i1 %223, label %dtable_found776, label %dtable_check772

dtable_found776:                                  ; preds = %dtable_check772
  store ptr @"$ct.dyn.std.math.random.Pcg32Random.next_byte", ptr %dtable_ref773, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg32Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip777

dtable_skip777:                                   ; preds = %dtable_found776, %dtable_skip770
  %next_val778 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg16Random.set_seed", i32 0, i32 2), align 8
  %224 = icmp eq ptr %next_val778, inttoptr (i64 -1 to ptr)
  br i1 %224, label %dtable_check779, label %dtable_skip784

dtable_check779:                                  ; preds = %dtable_check779, %dtable_skip777
  %dtable_ref780 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg16Random", i32 0, i32 2), %dtable_skip777 ], [ %next_dtable_ref782, %dtable_check779 ]
  %dtable_ptr781 = load ptr, ptr %dtable_ref780, align 8
  %225 = icmp eq ptr %dtable_ptr781, null
  %next_dtable_ref782 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr781, i32 0, i32 2
  br i1 %225, label %dtable_found783, label %dtable_check779

dtable_found783:                                  ; preds = %dtable_check779
  store ptr @"$ct.dyn.std.math.random.Pcg16Random.set_seed", ptr %dtable_ref780, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg16Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip784

dtable_skip784:                                   ; preds = %dtable_found783, %dtable_skip777
  %next_val785 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg16Random.next_byte", i32 0, i32 2), align 8
  %226 = icmp eq ptr %next_val785, inttoptr (i64 -1 to ptr)
  br i1 %226, label %dtable_check786, label %dtable_skip791

dtable_check786:                                  ; preds = %dtable_check786, %dtable_skip784
  %dtable_ref787 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg16Random", i32 0, i32 2), %dtable_skip784 ], [ %next_dtable_ref789, %dtable_check786 ]
  %dtable_ptr788 = load ptr, ptr %dtable_ref787, align 8
  %227 = icmp eq ptr %dtable_ptr788, null
  %next_dtable_ref789 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr788, i32 0, i32 2
  br i1 %227, label %dtable_found790, label %dtable_check786

dtable_found790:                                  ; preds = %dtable_check786
  store ptr @"$ct.dyn.std.math.random.Pcg16Random.next_byte", ptr %dtable_ref787, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg16Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip791

dtable_skip791:                                   ; preds = %dtable_found790, %dtable_skip784
  %next_val792 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg16Random.next_bytes", i32 0, i32 2), align 8
  %228 = icmp eq ptr %next_val792, inttoptr (i64 -1 to ptr)
  br i1 %228, label %dtable_check793, label %dtable_skip798

dtable_check793:                                  ; preds = %dtable_check793, %dtable_skip791
  %dtable_ref794 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg16Random", i32 0, i32 2), %dtable_skip791 ], [ %next_dtable_ref796, %dtable_check793 ]
  %dtable_ptr795 = load ptr, ptr %dtable_ref794, align 8
  %229 = icmp eq ptr %dtable_ptr795, null
  %next_dtable_ref796 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr795, i32 0, i32 2
  br i1 %229, label %dtable_found797, label %dtable_check793

dtable_found797:                                  ; preds = %dtable_check793
  store ptr @"$ct.dyn.std.math.random.Pcg16Random.next_bytes", ptr %dtable_ref794, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg16Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip798

dtable_skip798:                                   ; preds = %dtable_found797, %dtable_skip791
  %next_val799 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg16Random.next_int128", i32 0, i32 2), align 8
  %230 = icmp eq ptr %next_val799, inttoptr (i64 -1 to ptr)
  br i1 %230, label %dtable_check800, label %dtable_skip805

dtable_check800:                                  ; preds = %dtable_check800, %dtable_skip798
  %dtable_ref801 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg16Random", i32 0, i32 2), %dtable_skip798 ], [ %next_dtable_ref803, %dtable_check800 ]
  %dtable_ptr802 = load ptr, ptr %dtable_ref801, align 8
  %231 = icmp eq ptr %dtable_ptr802, null
  %next_dtable_ref803 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr802, i32 0, i32 2
  br i1 %231, label %dtable_found804, label %dtable_check800

dtable_found804:                                  ; preds = %dtable_check800
  store ptr @"$ct.dyn.std.math.random.Pcg16Random.next_int128", ptr %dtable_ref801, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg16Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip805

dtable_skip805:                                   ; preds = %dtable_found804, %dtable_skip798
  %next_val806 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg16Random.next_long", i32 0, i32 2), align 8
  %232 = icmp eq ptr %next_val806, inttoptr (i64 -1 to ptr)
  br i1 %232, label %dtable_check807, label %dtable_skip812

dtable_check807:                                  ; preds = %dtable_check807, %dtable_skip805
  %dtable_ref808 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg16Random", i32 0, i32 2), %dtable_skip805 ], [ %next_dtable_ref810, %dtable_check807 ]
  %dtable_ptr809 = load ptr, ptr %dtable_ref808, align 8
  %233 = icmp eq ptr %dtable_ptr809, null
  %next_dtable_ref810 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr809, i32 0, i32 2
  br i1 %233, label %dtable_found811, label %dtable_check807

dtable_found811:                                  ; preds = %dtable_check807
  store ptr @"$ct.dyn.std.math.random.Pcg16Random.next_long", ptr %dtable_ref808, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg16Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip812

dtable_skip812:                                   ; preds = %dtable_found811, %dtable_skip805
  %next_val813 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg16Random.next_int", i32 0, i32 2), align 8
  %234 = icmp eq ptr %next_val813, inttoptr (i64 -1 to ptr)
  br i1 %234, label %dtable_check814, label %dtable_skip819

dtable_check814:                                  ; preds = %dtable_check814, %dtable_skip812
  %dtable_ref815 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg16Random", i32 0, i32 2), %dtable_skip812 ], [ %next_dtable_ref817, %dtable_check814 ]
  %dtable_ptr816 = load ptr, ptr %dtable_ref815, align 8
  %235 = icmp eq ptr %dtable_ptr816, null
  %next_dtable_ref817 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr816, i32 0, i32 2
  br i1 %235, label %dtable_found818, label %dtable_check814

dtable_found818:                                  ; preds = %dtable_check814
  store ptr @"$ct.dyn.std.math.random.Pcg16Random.next_int", ptr %dtable_ref815, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg16Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip819

dtable_skip819:                                   ; preds = %dtable_found818, %dtable_skip812
  %next_val820 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg16Random.next_short", i32 0, i32 2), align 8
  %236 = icmp eq ptr %next_val820, inttoptr (i64 -1 to ptr)
  br i1 %236, label %dtable_check821, label %dtable_skip826

dtable_check821:                                  ; preds = %dtable_check821, %dtable_skip819
  %dtable_ref822 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg16Random", i32 0, i32 2), %dtable_skip819 ], [ %next_dtable_ref824, %dtable_check821 ]
  %dtable_ptr823 = load ptr, ptr %dtable_ref822, align 8
  %237 = icmp eq ptr %dtable_ptr823, null
  %next_dtable_ref824 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr823, i32 0, i32 2
  br i1 %237, label %dtable_found825, label %dtable_check821

dtable_found825:                                  ; preds = %dtable_check821
  store ptr @"$ct.dyn.std.math.random.Pcg16Random.next_short", ptr %dtable_ref822, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg16Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip826

dtable_skip826:                                   ; preds = %dtable_found825, %dtable_skip819
  %next_val827 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc128Random.set_seed", i32 0, i32 2), align 8
  %238 = icmp eq ptr %next_val827, inttoptr (i64 -1 to ptr)
  br i1 %238, label %dtable_check828, label %dtable_skip833

dtable_check828:                                  ; preds = %dtable_check828, %dtable_skip826
  %dtable_ref829 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc128Random", i32 0, i32 2), %dtable_skip826 ], [ %next_dtable_ref831, %dtable_check828 ]
  %dtable_ptr830 = load ptr, ptr %dtable_ref829, align 8
  %239 = icmp eq ptr %dtable_ptr830, null
  %next_dtable_ref831 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr830, i32 0, i32 2
  br i1 %239, label %dtable_found832, label %dtable_check828

dtable_found832:                                  ; preds = %dtable_check828
  store ptr @"$ct.dyn.std.math.random.Sfc128Random.set_seed", ptr %dtable_ref829, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc128Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip833

dtable_skip833:                                   ; preds = %dtable_found832, %dtable_skip826
  %next_val834 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc128Random.next_int128", i32 0, i32 2), align 8
  %240 = icmp eq ptr %next_val834, inttoptr (i64 -1 to ptr)
  br i1 %240, label %dtable_check835, label %dtable_skip840

dtable_check835:                                  ; preds = %dtable_check835, %dtable_skip833
  %dtable_ref836 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc128Random", i32 0, i32 2), %dtable_skip833 ], [ %next_dtable_ref838, %dtable_check835 ]
  %dtable_ptr837 = load ptr, ptr %dtable_ref836, align 8
  %241 = icmp eq ptr %dtable_ptr837, null
  %next_dtable_ref838 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr837, i32 0, i32 2
  br i1 %241, label %dtable_found839, label %dtable_check835

dtable_found839:                                  ; preds = %dtable_check835
  store ptr @"$ct.dyn.std.math.random.Sfc128Random.next_int128", ptr %dtable_ref836, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc128Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip840

dtable_skip840:                                   ; preds = %dtable_found839, %dtable_skip833
  %next_val841 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc128Random.next_bytes", i32 0, i32 2), align 8
  %242 = icmp eq ptr %next_val841, inttoptr (i64 -1 to ptr)
  br i1 %242, label %dtable_check842, label %dtable_skip847

dtable_check842:                                  ; preds = %dtable_check842, %dtable_skip840
  %dtable_ref843 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc128Random", i32 0, i32 2), %dtable_skip840 ], [ %next_dtable_ref845, %dtable_check842 ]
  %dtable_ptr844 = load ptr, ptr %dtable_ref843, align 8
  %243 = icmp eq ptr %dtable_ptr844, null
  %next_dtable_ref845 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr844, i32 0, i32 2
  br i1 %243, label %dtable_found846, label %dtable_check842

dtable_found846:                                  ; preds = %dtable_check842
  store ptr @"$ct.dyn.std.math.random.Sfc128Random.next_bytes", ptr %dtable_ref843, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc128Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip847

dtable_skip847:                                   ; preds = %dtable_found846, %dtable_skip840
  %next_val848 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc128Random.next_long", i32 0, i32 2), align 8
  %244 = icmp eq ptr %next_val848, inttoptr (i64 -1 to ptr)
  br i1 %244, label %dtable_check849, label %dtable_skip854

dtable_check849:                                  ; preds = %dtable_check849, %dtable_skip847
  %dtable_ref850 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc128Random", i32 0, i32 2), %dtable_skip847 ], [ %next_dtable_ref852, %dtable_check849 ]
  %dtable_ptr851 = load ptr, ptr %dtable_ref850, align 8
  %245 = icmp eq ptr %dtable_ptr851, null
  %next_dtable_ref852 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr851, i32 0, i32 2
  br i1 %245, label %dtable_found853, label %dtable_check849

dtable_found853:                                  ; preds = %dtable_check849
  store ptr @"$ct.dyn.std.math.random.Sfc128Random.next_long", ptr %dtable_ref850, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc128Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip854

dtable_skip854:                                   ; preds = %dtable_found853, %dtable_skip847
  %next_val855 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc128Random.next_int", i32 0, i32 2), align 8
  %246 = icmp eq ptr %next_val855, inttoptr (i64 -1 to ptr)
  br i1 %246, label %dtable_check856, label %dtable_skip861

dtable_check856:                                  ; preds = %dtable_check856, %dtable_skip854
  %dtable_ref857 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc128Random", i32 0, i32 2), %dtable_skip854 ], [ %next_dtable_ref859, %dtable_check856 ]
  %dtable_ptr858 = load ptr, ptr %dtable_ref857, align 8
  %247 = icmp eq ptr %dtable_ptr858, null
  %next_dtable_ref859 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr858, i32 0, i32 2
  br i1 %247, label %dtable_found860, label %dtable_check856

dtable_found860:                                  ; preds = %dtable_check856
  store ptr @"$ct.dyn.std.math.random.Sfc128Random.next_int", ptr %dtable_ref857, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc128Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip861

dtable_skip861:                                   ; preds = %dtable_found860, %dtable_skip854
  %next_val862 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc128Random.next_short", i32 0, i32 2), align 8
  %248 = icmp eq ptr %next_val862, inttoptr (i64 -1 to ptr)
  br i1 %248, label %dtable_check863, label %dtable_skip868

dtable_check863:                                  ; preds = %dtable_check863, %dtable_skip861
  %dtable_ref864 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc128Random", i32 0, i32 2), %dtable_skip861 ], [ %next_dtable_ref866, %dtable_check863 ]
  %dtable_ptr865 = load ptr, ptr %dtable_ref864, align 8
  %249 = icmp eq ptr %dtable_ptr865, null
  %next_dtable_ref866 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr865, i32 0, i32 2
  br i1 %249, label %dtable_found867, label %dtable_check863

dtable_found867:                                  ; preds = %dtable_check863
  store ptr @"$ct.dyn.std.math.random.Sfc128Random.next_short", ptr %dtable_ref864, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc128Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip868

dtable_skip868:                                   ; preds = %dtable_found867, %dtable_skip861
  %next_val869 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc128Random.next_byte", i32 0, i32 2), align 8
  %250 = icmp eq ptr %next_val869, inttoptr (i64 -1 to ptr)
  br i1 %250, label %dtable_check870, label %dtable_skip875

dtable_check870:                                  ; preds = %dtable_check870, %dtable_skip868
  %dtable_ref871 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc128Random", i32 0, i32 2), %dtable_skip868 ], [ %next_dtable_ref873, %dtable_check870 ]
  %dtable_ptr872 = load ptr, ptr %dtable_ref871, align 8
  %251 = icmp eq ptr %dtable_ptr872, null
  %next_dtable_ref873 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr872, i32 0, i32 2
  br i1 %251, label %dtable_found874, label %dtable_check870

dtable_found874:                                  ; preds = %dtable_check870
  store ptr @"$ct.dyn.std.math.random.Sfc128Random.next_byte", ptr %dtable_ref871, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc128Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip875

dtable_skip875:                                   ; preds = %dtable_found874, %dtable_skip868
  %next_val876 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc64Random.set_seed", i32 0, i32 2), align 8
  %252 = icmp eq ptr %next_val876, inttoptr (i64 -1 to ptr)
  br i1 %252, label %dtable_check877, label %dtable_skip882

dtable_check877:                                  ; preds = %dtable_check877, %dtable_skip875
  %dtable_ref878 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc64Random", i32 0, i32 2), %dtable_skip875 ], [ %next_dtable_ref880, %dtable_check877 ]
  %dtable_ptr879 = load ptr, ptr %dtable_ref878, align 8
  %253 = icmp eq ptr %dtable_ptr879, null
  %next_dtable_ref880 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr879, i32 0, i32 2
  br i1 %253, label %dtable_found881, label %dtable_check877

dtable_found881:                                  ; preds = %dtable_check877
  store ptr @"$ct.dyn.std.math.random.Sfc64Random.set_seed", ptr %dtable_ref878, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc64Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip882

dtable_skip882:                                   ; preds = %dtable_found881, %dtable_skip875
  %next_val883 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc64Random.next_long", i32 0, i32 2), align 8
  %254 = icmp eq ptr %next_val883, inttoptr (i64 -1 to ptr)
  br i1 %254, label %dtable_check884, label %dtable_skip889

dtable_check884:                                  ; preds = %dtable_check884, %dtable_skip882
  %dtable_ref885 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc64Random", i32 0, i32 2), %dtable_skip882 ], [ %next_dtable_ref887, %dtable_check884 ]
  %dtable_ptr886 = load ptr, ptr %dtable_ref885, align 8
  %255 = icmp eq ptr %dtable_ptr886, null
  %next_dtable_ref887 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr886, i32 0, i32 2
  br i1 %255, label %dtable_found888, label %dtable_check884

dtable_found888:                                  ; preds = %dtable_check884
  store ptr @"$ct.dyn.std.math.random.Sfc64Random.next_long", ptr %dtable_ref885, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc64Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip889

dtable_skip889:                                   ; preds = %dtable_found888, %dtable_skip882
  %next_val890 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc64Random.next_bytes", i32 0, i32 2), align 8
  %256 = icmp eq ptr %next_val890, inttoptr (i64 -1 to ptr)
  br i1 %256, label %dtable_check891, label %dtable_skip896

dtable_check891:                                  ; preds = %dtable_check891, %dtable_skip889
  %dtable_ref892 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc64Random", i32 0, i32 2), %dtable_skip889 ], [ %next_dtable_ref894, %dtable_check891 ]
  %dtable_ptr893 = load ptr, ptr %dtable_ref892, align 8
  %257 = icmp eq ptr %dtable_ptr893, null
  %next_dtable_ref894 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr893, i32 0, i32 2
  br i1 %257, label %dtable_found895, label %dtable_check891

dtable_found895:                                  ; preds = %dtable_check891
  store ptr @"$ct.dyn.std.math.random.Sfc64Random.next_bytes", ptr %dtable_ref892, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc64Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip896

dtable_skip896:                                   ; preds = %dtable_found895, %dtable_skip889
  %next_val897 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc64Random.next_int128", i32 0, i32 2), align 8
  %258 = icmp eq ptr %next_val897, inttoptr (i64 -1 to ptr)
  br i1 %258, label %dtable_check898, label %dtable_skip903

dtable_check898:                                  ; preds = %dtable_check898, %dtable_skip896
  %dtable_ref899 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc64Random", i32 0, i32 2), %dtable_skip896 ], [ %next_dtable_ref901, %dtable_check898 ]
  %dtable_ptr900 = load ptr, ptr %dtable_ref899, align 8
  %259 = icmp eq ptr %dtable_ptr900, null
  %next_dtable_ref901 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr900, i32 0, i32 2
  br i1 %259, label %dtable_found902, label %dtable_check898

dtable_found902:                                  ; preds = %dtable_check898
  store ptr @"$ct.dyn.std.math.random.Sfc64Random.next_int128", ptr %dtable_ref899, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc64Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip903

dtable_skip903:                                   ; preds = %dtable_found902, %dtable_skip896
  %next_val904 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc64Random.next_int", i32 0, i32 2), align 8
  %260 = icmp eq ptr %next_val904, inttoptr (i64 -1 to ptr)
  br i1 %260, label %dtable_check905, label %dtable_skip910

dtable_check905:                                  ; preds = %dtable_check905, %dtable_skip903
  %dtable_ref906 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc64Random", i32 0, i32 2), %dtable_skip903 ], [ %next_dtable_ref908, %dtable_check905 ]
  %dtable_ptr907 = load ptr, ptr %dtable_ref906, align 8
  %261 = icmp eq ptr %dtable_ptr907, null
  %next_dtable_ref908 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr907, i32 0, i32 2
  br i1 %261, label %dtable_found909, label %dtable_check905

dtable_found909:                                  ; preds = %dtable_check905
  store ptr @"$ct.dyn.std.math.random.Sfc64Random.next_int", ptr %dtable_ref906, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc64Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip910

dtable_skip910:                                   ; preds = %dtable_found909, %dtable_skip903
  %next_val911 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc64Random.next_short", i32 0, i32 2), align 8
  %262 = icmp eq ptr %next_val911, inttoptr (i64 -1 to ptr)
  br i1 %262, label %dtable_check912, label %dtable_skip917

dtable_check912:                                  ; preds = %dtable_check912, %dtable_skip910
  %dtable_ref913 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc64Random", i32 0, i32 2), %dtable_skip910 ], [ %next_dtable_ref915, %dtable_check912 ]
  %dtable_ptr914 = load ptr, ptr %dtable_ref913, align 8
  %263 = icmp eq ptr %dtable_ptr914, null
  %next_dtable_ref915 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr914, i32 0, i32 2
  br i1 %263, label %dtable_found916, label %dtable_check912

dtable_found916:                                  ; preds = %dtable_check912
  store ptr @"$ct.dyn.std.math.random.Sfc64Random.next_short", ptr %dtable_ref913, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc64Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip917

dtable_skip917:                                   ; preds = %dtable_found916, %dtable_skip910
  %next_val918 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc64Random.next_byte", i32 0, i32 2), align 8
  %264 = icmp eq ptr %next_val918, inttoptr (i64 -1 to ptr)
  br i1 %264, label %dtable_check919, label %dtable_skip924

dtable_check919:                                  ; preds = %dtable_check919, %dtable_skip917
  %dtable_ref920 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc64Random", i32 0, i32 2), %dtable_skip917 ], [ %next_dtable_ref922, %dtable_check919 ]
  %dtable_ptr921 = load ptr, ptr %dtable_ref920, align 8
  %265 = icmp eq ptr %dtable_ptr921, null
  %next_dtable_ref922 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr921, i32 0, i32 2
  br i1 %265, label %dtable_found923, label %dtable_check919

dtable_found923:                                  ; preds = %dtable_check919
  store ptr @"$ct.dyn.std.math.random.Sfc64Random.next_byte", ptr %dtable_ref920, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc64Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip924

dtable_skip924:                                   ; preds = %dtable_found923, %dtable_skip917
  %next_val925 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc32Random.set_seed", i32 0, i32 2), align 8
  %266 = icmp eq ptr %next_val925, inttoptr (i64 -1 to ptr)
  br i1 %266, label %dtable_check926, label %dtable_skip931

dtable_check926:                                  ; preds = %dtable_check926, %dtable_skip924
  %dtable_ref927 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc32Random", i32 0, i32 2), %dtable_skip924 ], [ %next_dtable_ref929, %dtable_check926 ]
  %dtable_ptr928 = load ptr, ptr %dtable_ref927, align 8
  %267 = icmp eq ptr %dtable_ptr928, null
  %next_dtable_ref929 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr928, i32 0, i32 2
  br i1 %267, label %dtable_found930, label %dtable_check926

dtable_found930:                                  ; preds = %dtable_check926
  store ptr @"$ct.dyn.std.math.random.Sfc32Random.set_seed", ptr %dtable_ref927, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc32Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip931

dtable_skip931:                                   ; preds = %dtable_found930, %dtable_skip924
  %next_val932 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc32Random.next_int", i32 0, i32 2), align 8
  %268 = icmp eq ptr %next_val932, inttoptr (i64 -1 to ptr)
  br i1 %268, label %dtable_check933, label %dtable_skip938

dtable_check933:                                  ; preds = %dtable_check933, %dtable_skip931
  %dtable_ref934 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc32Random", i32 0, i32 2), %dtable_skip931 ], [ %next_dtable_ref936, %dtable_check933 ]
  %dtable_ptr935 = load ptr, ptr %dtable_ref934, align 8
  %269 = icmp eq ptr %dtable_ptr935, null
  %next_dtable_ref936 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr935, i32 0, i32 2
  br i1 %269, label %dtable_found937, label %dtable_check933

dtable_found937:                                  ; preds = %dtable_check933
  store ptr @"$ct.dyn.std.math.random.Sfc32Random.next_int", ptr %dtable_ref934, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc32Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip938

dtable_skip938:                                   ; preds = %dtable_found937, %dtable_skip931
  %next_val939 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc32Random.next_bytes", i32 0, i32 2), align 8
  %270 = icmp eq ptr %next_val939, inttoptr (i64 -1 to ptr)
  br i1 %270, label %dtable_check940, label %dtable_skip945

dtable_check940:                                  ; preds = %dtable_check940, %dtable_skip938
  %dtable_ref941 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc32Random", i32 0, i32 2), %dtable_skip938 ], [ %next_dtable_ref943, %dtable_check940 ]
  %dtable_ptr942 = load ptr, ptr %dtable_ref941, align 8
  %271 = icmp eq ptr %dtable_ptr942, null
  %next_dtable_ref943 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr942, i32 0, i32 2
  br i1 %271, label %dtable_found944, label %dtable_check940

dtable_found944:                                  ; preds = %dtable_check940
  store ptr @"$ct.dyn.std.math.random.Sfc32Random.next_bytes", ptr %dtable_ref941, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc32Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip945

dtable_skip945:                                   ; preds = %dtable_found944, %dtable_skip938
  %next_val946 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc32Random.next_int128", i32 0, i32 2), align 8
  %272 = icmp eq ptr %next_val946, inttoptr (i64 -1 to ptr)
  br i1 %272, label %dtable_check947, label %dtable_skip952

dtable_check947:                                  ; preds = %dtable_check947, %dtable_skip945
  %dtable_ref948 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc32Random", i32 0, i32 2), %dtable_skip945 ], [ %next_dtable_ref950, %dtable_check947 ]
  %dtable_ptr949 = load ptr, ptr %dtable_ref948, align 8
  %273 = icmp eq ptr %dtable_ptr949, null
  %next_dtable_ref950 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr949, i32 0, i32 2
  br i1 %273, label %dtable_found951, label %dtable_check947

dtable_found951:                                  ; preds = %dtable_check947
  store ptr @"$ct.dyn.std.math.random.Sfc32Random.next_int128", ptr %dtable_ref948, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc32Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip952

dtable_skip952:                                   ; preds = %dtable_found951, %dtable_skip945
  %next_val953 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc32Random.next_long", i32 0, i32 2), align 8
  %274 = icmp eq ptr %next_val953, inttoptr (i64 -1 to ptr)
  br i1 %274, label %dtable_check954, label %dtable_skip959

dtable_check954:                                  ; preds = %dtable_check954, %dtable_skip952
  %dtable_ref955 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc32Random", i32 0, i32 2), %dtable_skip952 ], [ %next_dtable_ref957, %dtable_check954 ]
  %dtable_ptr956 = load ptr, ptr %dtable_ref955, align 8
  %275 = icmp eq ptr %dtable_ptr956, null
  %next_dtable_ref957 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr956, i32 0, i32 2
  br i1 %275, label %dtable_found958, label %dtable_check954

dtable_found958:                                  ; preds = %dtable_check954
  store ptr @"$ct.dyn.std.math.random.Sfc32Random.next_long", ptr %dtable_ref955, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc32Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip959

dtable_skip959:                                   ; preds = %dtable_found958, %dtable_skip952
  %next_val960 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc32Random.next_short", i32 0, i32 2), align 8
  %276 = icmp eq ptr %next_val960, inttoptr (i64 -1 to ptr)
  br i1 %276, label %dtable_check961, label %dtable_skip966

dtable_check961:                                  ; preds = %dtable_check961, %dtable_skip959
  %dtable_ref962 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc32Random", i32 0, i32 2), %dtable_skip959 ], [ %next_dtable_ref964, %dtable_check961 ]
  %dtable_ptr963 = load ptr, ptr %dtable_ref962, align 8
  %277 = icmp eq ptr %dtable_ptr963, null
  %next_dtable_ref964 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr963, i32 0, i32 2
  br i1 %277, label %dtable_found965, label %dtable_check961

dtable_found965:                                  ; preds = %dtable_check961
  store ptr @"$ct.dyn.std.math.random.Sfc32Random.next_short", ptr %dtable_ref962, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc32Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip966

dtable_skip966:                                   ; preds = %dtable_found965, %dtable_skip959
  %next_val967 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc32Random.next_byte", i32 0, i32 2), align 8
  %278 = icmp eq ptr %next_val967, inttoptr (i64 -1 to ptr)
  br i1 %278, label %dtable_check968, label %dtable_skip973

dtable_check968:                                  ; preds = %dtable_check968, %dtable_skip966
  %dtable_ref969 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc32Random", i32 0, i32 2), %dtable_skip966 ], [ %next_dtable_ref971, %dtable_check968 ]
  %dtable_ptr970 = load ptr, ptr %dtable_ref969, align 8
  %279 = icmp eq ptr %dtable_ptr970, null
  %next_dtable_ref971 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr970, i32 0, i32 2
  br i1 %279, label %dtable_found972, label %dtable_check968

dtable_found972:                                  ; preds = %dtable_check968
  store ptr @"$ct.dyn.std.math.random.Sfc32Random.next_byte", ptr %dtable_ref969, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc32Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip973

dtable_skip973:                                   ; preds = %dtable_found972, %dtable_skip966
  %next_val974 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc16Random.set_seed", i32 0, i32 2), align 8
  %280 = icmp eq ptr %next_val974, inttoptr (i64 -1 to ptr)
  br i1 %280, label %dtable_check975, label %dtable_skip980

dtable_check975:                                  ; preds = %dtable_check975, %dtable_skip973
  %dtable_ref976 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc16Random", i32 0, i32 2), %dtable_skip973 ], [ %next_dtable_ref978, %dtable_check975 ]
  %dtable_ptr977 = load ptr, ptr %dtable_ref976, align 8
  %281 = icmp eq ptr %dtable_ptr977, null
  %next_dtable_ref978 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr977, i32 0, i32 2
  br i1 %281, label %dtable_found979, label %dtable_check975

dtable_found979:                                  ; preds = %dtable_check975
  store ptr @"$ct.dyn.std.math.random.Sfc16Random.set_seed", ptr %dtable_ref976, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc16Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip980

dtable_skip980:                                   ; preds = %dtable_found979, %dtable_skip973
  %next_val981 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc16Random.next_short", i32 0, i32 2), align 8
  %282 = icmp eq ptr %next_val981, inttoptr (i64 -1 to ptr)
  br i1 %282, label %dtable_check982, label %dtable_skip987

dtable_check982:                                  ; preds = %dtable_check982, %dtable_skip980
  %dtable_ref983 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc16Random", i32 0, i32 2), %dtable_skip980 ], [ %next_dtable_ref985, %dtable_check982 ]
  %dtable_ptr984 = load ptr, ptr %dtable_ref983, align 8
  %283 = icmp eq ptr %dtable_ptr984, null
  %next_dtable_ref985 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr984, i32 0, i32 2
  br i1 %283, label %dtable_found986, label %dtable_check982

dtable_found986:                                  ; preds = %dtable_check982
  store ptr @"$ct.dyn.std.math.random.Sfc16Random.next_short", ptr %dtable_ref983, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc16Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip987

dtable_skip987:                                   ; preds = %dtable_found986, %dtable_skip980
  %next_val988 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc16Random.next_bytes", i32 0, i32 2), align 8
  %284 = icmp eq ptr %next_val988, inttoptr (i64 -1 to ptr)
  br i1 %284, label %dtable_check989, label %dtable_skip994

dtable_check989:                                  ; preds = %dtable_check989, %dtable_skip987
  %dtable_ref990 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc16Random", i32 0, i32 2), %dtable_skip987 ], [ %next_dtable_ref992, %dtable_check989 ]
  %dtable_ptr991 = load ptr, ptr %dtable_ref990, align 8
  %285 = icmp eq ptr %dtable_ptr991, null
  %next_dtable_ref992 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr991, i32 0, i32 2
  br i1 %285, label %dtable_found993, label %dtable_check989

dtable_found993:                                  ; preds = %dtable_check989
  store ptr @"$ct.dyn.std.math.random.Sfc16Random.next_bytes", ptr %dtable_ref990, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc16Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip994

dtable_skip994:                                   ; preds = %dtable_found993, %dtable_skip987
  %next_val995 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc16Random.next_int128", i32 0, i32 2), align 8
  %286 = icmp eq ptr %next_val995, inttoptr (i64 -1 to ptr)
  br i1 %286, label %dtable_check996, label %dtable_skip1001

dtable_check996:                                  ; preds = %dtable_check996, %dtable_skip994
  %dtable_ref997 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc16Random", i32 0, i32 2), %dtable_skip994 ], [ %next_dtable_ref999, %dtable_check996 ]
  %dtable_ptr998 = load ptr, ptr %dtable_ref997, align 8
  %287 = icmp eq ptr %dtable_ptr998, null
  %next_dtable_ref999 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr998, i32 0, i32 2
  br i1 %287, label %dtable_found1000, label %dtable_check996

dtable_found1000:                                 ; preds = %dtable_check996
  store ptr @"$ct.dyn.std.math.random.Sfc16Random.next_int128", ptr %dtable_ref997, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc16Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip1001

dtable_skip1001:                                  ; preds = %dtable_found1000, %dtable_skip994
  %next_val1002 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc16Random.next_long", i32 0, i32 2), align 8
  %288 = icmp eq ptr %next_val1002, inttoptr (i64 -1 to ptr)
  br i1 %288, label %dtable_check1003, label %dtable_skip1008

dtable_check1003:                                 ; preds = %dtable_check1003, %dtable_skip1001
  %dtable_ref1004 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc16Random", i32 0, i32 2), %dtable_skip1001 ], [ %next_dtable_ref1006, %dtable_check1003 ]
  %dtable_ptr1005 = load ptr, ptr %dtable_ref1004, align 8
  %289 = icmp eq ptr %dtable_ptr1005, null
  %next_dtable_ref1006 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr1005, i32 0, i32 2
  br i1 %289, label %dtable_found1007, label %dtable_check1003

dtable_found1007:                                 ; preds = %dtable_check1003
  store ptr @"$ct.dyn.std.math.random.Sfc16Random.next_long", ptr %dtable_ref1004, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc16Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip1008

dtable_skip1008:                                  ; preds = %dtable_found1007, %dtable_skip1001
  %next_val1009 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc16Random.next_int", i32 0, i32 2), align 8
  %290 = icmp eq ptr %next_val1009, inttoptr (i64 -1 to ptr)
  br i1 %290, label %dtable_check1010, label %dtable_skip1015

dtable_check1010:                                 ; preds = %dtable_check1010, %dtable_skip1008
  %dtable_ref1011 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc16Random", i32 0, i32 2), %dtable_skip1008 ], [ %next_dtable_ref1013, %dtable_check1010 ]
  %dtable_ptr1012 = load ptr, ptr %dtable_ref1011, align 8
  %291 = icmp eq ptr %dtable_ptr1012, null
  %next_dtable_ref1013 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr1012, i32 0, i32 2
  br i1 %291, label %dtable_found1014, label %dtable_check1010

dtable_found1014:                                 ; preds = %dtable_check1010
  store ptr @"$ct.dyn.std.math.random.Sfc16Random.next_int", ptr %dtable_ref1011, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc16Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip1015

dtable_skip1015:                                  ; preds = %dtable_found1014, %dtable_skip1008
  %next_val1016 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc16Random.next_byte", i32 0, i32 2), align 8
  %292 = icmp eq ptr %next_val1016, inttoptr (i64 -1 to ptr)
  br i1 %292, label %dtable_check1017, label %dtable_skip1022

dtable_check1017:                                 ; preds = %dtable_check1017, %dtable_skip1015
  %dtable_ref1018 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc16Random", i32 0, i32 2), %dtable_skip1015 ], [ %next_dtable_ref1020, %dtable_check1017 ]
  %dtable_ptr1019 = load ptr, ptr %dtable_ref1018, align 8
  %293 = icmp eq ptr %dtable_ptr1019, null
  %next_dtable_ref1020 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr1019, i32 0, i32 2
  br i1 %293, label %dtable_found1021, label %dtable_check1017

dtable_found1021:                                 ; preds = %dtable_check1017
  store ptr @"$ct.dyn.std.math.random.Sfc16Random.next_byte", ptr %dtable_ref1018, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc16Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip1022

dtable_skip1022:                                  ; preds = %dtable_found1021, %dtable_skip1015
  %next_val1023 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc8Random.set_seed", i32 0, i32 2), align 8
  %294 = icmp eq ptr %next_val1023, inttoptr (i64 -1 to ptr)
  br i1 %294, label %dtable_check1024, label %dtable_skip1029

dtable_check1024:                                 ; preds = %dtable_check1024, %dtable_skip1022
  %dtable_ref1025 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc8Random", i32 0, i32 2), %dtable_skip1022 ], [ %next_dtable_ref1027, %dtable_check1024 ]
  %dtable_ptr1026 = load ptr, ptr %dtable_ref1025, align 8
  %295 = icmp eq ptr %dtable_ptr1026, null
  %next_dtable_ref1027 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr1026, i32 0, i32 2
  br i1 %295, label %dtable_found1028, label %dtable_check1024

dtable_found1028:                                 ; preds = %dtable_check1024
  store ptr @"$ct.dyn.std.math.random.Sfc8Random.set_seed", ptr %dtable_ref1025, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc8Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip1029

dtable_skip1029:                                  ; preds = %dtable_found1028, %dtable_skip1022
  %next_val1030 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc8Random.next_byte", i32 0, i32 2), align 8
  %296 = icmp eq ptr %next_val1030, inttoptr (i64 -1 to ptr)
  br i1 %296, label %dtable_check1031, label %dtable_skip1036

dtable_check1031:                                 ; preds = %dtable_check1031, %dtable_skip1029
  %dtable_ref1032 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc8Random", i32 0, i32 2), %dtable_skip1029 ], [ %next_dtable_ref1034, %dtable_check1031 ]
  %dtable_ptr1033 = load ptr, ptr %dtable_ref1032, align 8
  %297 = icmp eq ptr %dtable_ptr1033, null
  %next_dtable_ref1034 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr1033, i32 0, i32 2
  br i1 %297, label %dtable_found1035, label %dtable_check1031

dtable_found1035:                                 ; preds = %dtable_check1031
  store ptr @"$ct.dyn.std.math.random.Sfc8Random.next_byte", ptr %dtable_ref1032, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc8Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip1036

dtable_skip1036:                                  ; preds = %dtable_found1035, %dtable_skip1029
  %next_val1037 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc8Random.next_bytes", i32 0, i32 2), align 8
  %298 = icmp eq ptr %next_val1037, inttoptr (i64 -1 to ptr)
  br i1 %298, label %dtable_check1038, label %dtable_skip1043

dtable_check1038:                                 ; preds = %dtable_check1038, %dtable_skip1036
  %dtable_ref1039 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc8Random", i32 0, i32 2), %dtable_skip1036 ], [ %next_dtable_ref1041, %dtable_check1038 ]
  %dtable_ptr1040 = load ptr, ptr %dtable_ref1039, align 8
  %299 = icmp eq ptr %dtable_ptr1040, null
  %next_dtable_ref1041 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr1040, i32 0, i32 2
  br i1 %299, label %dtable_found1042, label %dtable_check1038

dtable_found1042:                                 ; preds = %dtable_check1038
  store ptr @"$ct.dyn.std.math.random.Sfc8Random.next_bytes", ptr %dtable_ref1039, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc8Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip1043

dtable_skip1043:                                  ; preds = %dtable_found1042, %dtable_skip1036
  %next_val1044 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc8Random.next_int128", i32 0, i32 2), align 8
  %300 = icmp eq ptr %next_val1044, inttoptr (i64 -1 to ptr)
  br i1 %300, label %dtable_check1045, label %dtable_skip1050

dtable_check1045:                                 ; preds = %dtable_check1045, %dtable_skip1043
  %dtable_ref1046 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc8Random", i32 0, i32 2), %dtable_skip1043 ], [ %next_dtable_ref1048, %dtable_check1045 ]
  %dtable_ptr1047 = load ptr, ptr %dtable_ref1046, align 8
  %301 = icmp eq ptr %dtable_ptr1047, null
  %next_dtable_ref1048 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr1047, i32 0, i32 2
  br i1 %301, label %dtable_found1049, label %dtable_check1045

dtable_found1049:                                 ; preds = %dtable_check1045
  store ptr @"$ct.dyn.std.math.random.Sfc8Random.next_int128", ptr %dtable_ref1046, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc8Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip1050

dtable_skip1050:                                  ; preds = %dtable_found1049, %dtable_skip1043
  %next_val1051 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc8Random.next_long", i32 0, i32 2), align 8
  %302 = icmp eq ptr %next_val1051, inttoptr (i64 -1 to ptr)
  br i1 %302, label %dtable_check1052, label %dtable_skip1057

dtable_check1052:                                 ; preds = %dtable_check1052, %dtable_skip1050
  %dtable_ref1053 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc8Random", i32 0, i32 2), %dtable_skip1050 ], [ %next_dtable_ref1055, %dtable_check1052 ]
  %dtable_ptr1054 = load ptr, ptr %dtable_ref1053, align 8
  %303 = icmp eq ptr %dtable_ptr1054, null
  %next_dtable_ref1055 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr1054, i32 0, i32 2
  br i1 %303, label %dtable_found1056, label %dtable_check1052

dtable_found1056:                                 ; preds = %dtable_check1052
  store ptr @"$ct.dyn.std.math.random.Sfc8Random.next_long", ptr %dtable_ref1053, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc8Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip1057

dtable_skip1057:                                  ; preds = %dtable_found1056, %dtable_skip1050
  %next_val1058 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc8Random.next_int", i32 0, i32 2), align 8
  %304 = icmp eq ptr %next_val1058, inttoptr (i64 -1 to ptr)
  br i1 %304, label %dtable_check1059, label %dtable_skip1064

dtable_check1059:                                 ; preds = %dtable_check1059, %dtable_skip1057
  %dtable_ref1060 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc8Random", i32 0, i32 2), %dtable_skip1057 ], [ %next_dtable_ref1062, %dtable_check1059 ]
  %dtable_ptr1061 = load ptr, ptr %dtable_ref1060, align 8
  %305 = icmp eq ptr %dtable_ptr1061, null
  %next_dtable_ref1062 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr1061, i32 0, i32 2
  br i1 %305, label %dtable_found1063, label %dtable_check1059

dtable_found1063:                                 ; preds = %dtable_check1059
  store ptr @"$ct.dyn.std.math.random.Sfc8Random.next_int", ptr %dtable_ref1060, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc8Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip1064

dtable_skip1064:                                  ; preds = %dtable_found1063, %dtable_skip1057
  %next_val1065 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc8Random.next_short", i32 0, i32 2), align 8
  %306 = icmp eq ptr %next_val1065, inttoptr (i64 -1 to ptr)
  br i1 %306, label %dtable_check1066, label %dtable_skip1071

dtable_check1066:                                 ; preds = %dtable_check1066, %dtable_skip1064
  %dtable_ref1067 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc8Random", i32 0, i32 2), %dtable_skip1064 ], [ %next_dtable_ref1069, %dtable_check1066 ]
  %dtable_ptr1068 = load ptr, ptr %dtable_ref1067, align 8
  %307 = icmp eq ptr %dtable_ptr1068, null
  %next_dtable_ref1069 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr1068, i32 0, i32 2
  br i1 %307, label %dtable_found1070, label %dtable_check1066

dtable_found1070:                                 ; preds = %dtable_check1066
  store ptr @"$ct.dyn.std.math.random.Sfc8Random.next_short", ptr %dtable_ref1067, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc8Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip1071

dtable_skip1071:                                  ; preds = %dtable_found1070, %dtable_skip1064
  %next_val1072 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.SimpleRandom.set_seed", i32 0, i32 2), align 8
  %308 = icmp eq ptr %next_val1072, inttoptr (i64 -1 to ptr)
  br i1 %308, label %dtable_check1073, label %dtable_skip1078

dtable_check1073:                                 ; preds = %dtable_check1073, %dtable_skip1071
  %dtable_ref1074 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.SimpleRandom", i32 0, i32 2), %dtable_skip1071 ], [ %next_dtable_ref1076, %dtable_check1073 ]
  %dtable_ptr1075 = load ptr, ptr %dtable_ref1074, align 8
  %309 = icmp eq ptr %dtable_ptr1075, null
  %next_dtable_ref1076 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr1075, i32 0, i32 2
  br i1 %309, label %dtable_found1077, label %dtable_check1073

dtable_found1077:                                 ; preds = %dtable_check1073
  store ptr @"$ct.dyn.std.math.random.SimpleRandom.set_seed", ptr %dtable_ref1074, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.SimpleRandom.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip1078

dtable_skip1078:                                  ; preds = %dtable_found1077, %dtable_skip1071
  %next_val1079 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.SimpleRandom.next_int", i32 0, i32 2), align 8
  %310 = icmp eq ptr %next_val1079, inttoptr (i64 -1 to ptr)
  br i1 %310, label %dtable_check1080, label %dtable_skip1085

dtable_check1080:                                 ; preds = %dtable_check1080, %dtable_skip1078
  %dtable_ref1081 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.SimpleRandom", i32 0, i32 2), %dtable_skip1078 ], [ %next_dtable_ref1083, %dtable_check1080 ]
  %dtable_ptr1082 = load ptr, ptr %dtable_ref1081, align 8
  %311 = icmp eq ptr %dtable_ptr1082, null
  %next_dtable_ref1083 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr1082, i32 0, i32 2
  br i1 %311, label %dtable_found1084, label %dtable_check1080

dtable_found1084:                                 ; preds = %dtable_check1080
  store ptr @"$ct.dyn.std.math.random.SimpleRandom.next_int", ptr %dtable_ref1081, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.SimpleRandom.next_int", i32 0, i32 2), align 8
  br label %dtable_skip1085

dtable_skip1085:                                  ; preds = %dtable_found1084, %dtable_skip1078
  %next_val1086 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.SimpleRandom.next_bytes", i32 0, i32 2), align 8
  %312 = icmp eq ptr %next_val1086, inttoptr (i64 -1 to ptr)
  br i1 %312, label %dtable_check1087, label %dtable_skip1092

dtable_check1087:                                 ; preds = %dtable_check1087, %dtable_skip1085
  %dtable_ref1088 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.SimpleRandom", i32 0, i32 2), %dtable_skip1085 ], [ %next_dtable_ref1090, %dtable_check1087 ]
  %dtable_ptr1089 = load ptr, ptr %dtable_ref1088, align 8
  %313 = icmp eq ptr %dtable_ptr1089, null
  %next_dtable_ref1090 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr1089, i32 0, i32 2
  br i1 %313, label %dtable_found1091, label %dtable_check1087

dtable_found1091:                                 ; preds = %dtable_check1087
  store ptr @"$ct.dyn.std.math.random.SimpleRandom.next_bytes", ptr %dtable_ref1088, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.SimpleRandom.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip1092

dtable_skip1092:                                  ; preds = %dtable_found1091, %dtable_skip1085
  %next_val1093 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.SimpleRandom.next_int128", i32 0, i32 2), align 8
  %314 = icmp eq ptr %next_val1093, inttoptr (i64 -1 to ptr)
  br i1 %314, label %dtable_check1094, label %dtable_skip1099

dtable_check1094:                                 ; preds = %dtable_check1094, %dtable_skip1092
  %dtable_ref1095 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.SimpleRandom", i32 0, i32 2), %dtable_skip1092 ], [ %next_dtable_ref1097, %dtable_check1094 ]
  %dtable_ptr1096 = load ptr, ptr %dtable_ref1095, align 8
  %315 = icmp eq ptr %dtable_ptr1096, null
  %next_dtable_ref1097 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr1096, i32 0, i32 2
  br i1 %315, label %dtable_found1098, label %dtable_check1094

dtable_found1098:                                 ; preds = %dtable_check1094
  store ptr @"$ct.dyn.std.math.random.SimpleRandom.next_int128", ptr %dtable_ref1095, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.SimpleRandom.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip1099

dtable_skip1099:                                  ; preds = %dtable_found1098, %dtable_skip1092
  %next_val1100 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.SimpleRandom.next_long", i32 0, i32 2), align 8
  %316 = icmp eq ptr %next_val1100, inttoptr (i64 -1 to ptr)
  br i1 %316, label %dtable_check1101, label %dtable_skip1106

dtable_check1101:                                 ; preds = %dtable_check1101, %dtable_skip1099
  %dtable_ref1102 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.SimpleRandom", i32 0, i32 2), %dtable_skip1099 ], [ %next_dtable_ref1104, %dtable_check1101 ]
  %dtable_ptr1103 = load ptr, ptr %dtable_ref1102, align 8
  %317 = icmp eq ptr %dtable_ptr1103, null
  %next_dtable_ref1104 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr1103, i32 0, i32 2
  br i1 %317, label %dtable_found1105, label %dtable_check1101

dtable_found1105:                                 ; preds = %dtable_check1101
  store ptr @"$ct.dyn.std.math.random.SimpleRandom.next_long", ptr %dtable_ref1102, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.SimpleRandom.next_long", i32 0, i32 2), align 8
  br label %dtable_skip1106

dtable_skip1106:                                  ; preds = %dtable_found1105, %dtable_skip1099
  %next_val1107 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.SimpleRandom.next_short", i32 0, i32 2), align 8
  %318 = icmp eq ptr %next_val1107, inttoptr (i64 -1 to ptr)
  br i1 %318, label %dtable_check1108, label %dtable_skip1113

dtable_check1108:                                 ; preds = %dtable_check1108, %dtable_skip1106
  %dtable_ref1109 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.SimpleRandom", i32 0, i32 2), %dtable_skip1106 ], [ %next_dtable_ref1111, %dtable_check1108 ]
  %dtable_ptr1110 = load ptr, ptr %dtable_ref1109, align 8
  %319 = icmp eq ptr %dtable_ptr1110, null
  %next_dtable_ref1111 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr1110, i32 0, i32 2
  br i1 %319, label %dtable_found1112, label %dtable_check1108

dtable_found1112:                                 ; preds = %dtable_check1108
  store ptr @"$ct.dyn.std.math.random.SimpleRandom.next_short", ptr %dtable_ref1109, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.SimpleRandom.next_short", i32 0, i32 2), align 8
  br label %dtable_skip1113

dtable_skip1113:                                  ; preds = %dtable_found1112, %dtable_skip1106
  %next_val1114 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.SimpleRandom.next_byte", i32 0, i32 2), align 8
  %320 = icmp eq ptr %next_val1114, inttoptr (i64 -1 to ptr)
  br i1 %320, label %dtable_check1115, label %dtable_skip1120

dtable_check1115:                                 ; preds = %dtable_check1115, %dtable_skip1113
  %dtable_ref1116 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.SimpleRandom", i32 0, i32 2), %dtable_skip1113 ], [ %next_dtable_ref1118, %dtable_check1115 ]
  %dtable_ptr1117 = load ptr, ptr %dtable_ref1116, align 8
  %321 = icmp eq ptr %dtable_ptr1117, null
  %next_dtable_ref1118 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr1117, i32 0, i32 2
  br i1 %321, label %dtable_found1119, label %dtable_check1115

dtable_found1119:                                 ; preds = %dtable_check1115
  store ptr @"$ct.dyn.std.math.random.SimpleRandom.next_byte", ptr %dtable_ref1116, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.SimpleRandom.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip1120

dtable_skip1120:                                  ; preds = %dtable_found1119, %dtable_skip1113
  ret void
}

attributes #0 = { nounwind ssp uwtable "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" }
attributes #1 = { nocallback nofree nosync nounwind willreturn memory(none) }
attributes #2 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }
attributes #3 = { nocallback nofree nounwind willreturn memory(argmem: write) }
attributes #4 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #5 = { noreturn }
attributes #6 = { alwaysinline }

!llvm.module.flags = !{!104, !105, !106, !107, !108, !109}
!llvm.dbg.cu = !{!110}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "ODD_PHI128", linkageName: "std.math.random.ODD_PHI128.19132", scope: !2, file: !2, line: 4, type: !3, isLocal: true, isDefinition: true, align: 16)
!2 = !DIFile(filename: "math.lcg.c3", directory: "C:/Compilers/C3/lib/std/math/random")
!3 = !DIBasicType(name: "uint128", size: 128, encoding: DW_ATE_unsigned)
!4 = !DIGlobalVariableExpression(var: !5, expr: !DIExpression())
!5 = distinct !DIGlobalVariable(name: "ODD_PHI64", linkageName: "std.math.random.ODD_PHI64.19133", scope: !2, file: !2, line: 5, type: !6, isLocal: true, isDefinition: true, align: 8)
!6 = !DIBasicType(name: "ulong", size: 64, encoding: DW_ATE_unsigned)
!7 = !DIGlobalVariableExpression(var: !8, expr: !DIExpression())
!8 = distinct !DIGlobalVariable(name: "ODD_PHI32", linkageName: "std.math.random.ODD_PHI32.19134", scope: !2, file: !2, line: 6, type: !9, isLocal: true, isDefinition: true, align: 4)
!9 = !DIBasicType(name: "uint", size: 32, encoding: DW_ATE_unsigned)
!10 = !DIGlobalVariableExpression(var: !11, expr: !DIExpression())
!11 = distinct !DIGlobalVariable(name: "ODD_PHI16", linkageName: "std.math.random.ODD_PHI16.19135", scope: !2, file: !2, line: 7, type: !9, isLocal: true, isDefinition: true, align: 4)
!12 = !DIGlobalVariableExpression(var: !13, expr: !DIExpression())
!13 = distinct !DIGlobalVariable(name: "MUL_LCG128", linkageName: "std.math.random.MUL_LCG128.19136", scope: !2, file: !2, line: 9, type: !3, isLocal: true, isDefinition: true, align: 16)
!14 = !DIGlobalVariableExpression(var: !15, expr: !DIExpression())
!15 = distinct !DIGlobalVariable(name: "MUL_LCG64", linkageName: "std.math.random.MUL_LCG64.19137", scope: !2, file: !2, line: 10, type: !6, isLocal: true, isDefinition: true, align: 8)
!16 = !DIGlobalVariableExpression(var: !17, expr: !DIExpression())
!17 = distinct !DIGlobalVariable(name: "MUL_LCG32", linkageName: "std.math.random.MUL_LCG32.19138", scope: !2, file: !2, line: 11, type: !9, isLocal: true, isDefinition: true, align: 4)
!18 = !DIGlobalVariableExpression(var: !19, expr: !DIExpression())
!19 = distinct !DIGlobalVariable(name: "MUL_LCG16", linkageName: "std.math.random.MUL_LCG16.19139", scope: !2, file: !2, line: 12, type: !9, isLocal: true, isDefinition: true, align: 4)
!20 = !DIGlobalVariableExpression(var: !21, expr: !DIExpression())
!21 = distinct !DIGlobalVariable(name: "MUL_MCG128", linkageName: "std.math.random.MUL_MCG128.19216", scope: !22, file: !22, line: 3, type: !3, isLocal: true, isDefinition: true, align: 16)
!22 = !DIFile(filename: "math.mcg.c3", directory: "C:/Compilers/C3/lib/std/math/random")
!23 = !DIGlobalVariableExpression(var: !24, expr: !DIExpression())
!24 = distinct !DIGlobalVariable(name: "MUL_MCG64", linkageName: "std.math.random.MUL_MCG64.19217", scope: !22, file: !22, line: 4, type: !6, isLocal: true, isDefinition: true, align: 8)
!25 = !DIGlobalVariableExpression(var: !26, expr: !DIExpression())
!26 = distinct !DIGlobalVariable(name: "MUL_MCG32", linkageName: "std.math.random.MUL_MCG32.19218", scope: !22, file: !22, line: 5, type: !9, isLocal: true, isDefinition: true, align: 4)
!27 = !DIGlobalVariableExpression(var: !28, expr: !DIExpression())
!28 = distinct !DIGlobalVariable(name: "MUL_MCG16", linkageName: "std.math.random.MUL_MCG16.19219", scope: !22, file: !22, line: 6, type: !9, isLocal: true, isDefinition: true, align: 4)
!29 = !DIGlobalVariableExpression(var: !30, expr: !DIExpression())
!30 = distinct !DIGlobalVariable(name: "ODD_PHI128", linkageName: "std.math.random.ODD_PHI128.19296", scope: !31, file: !31, line: 4, type: !3, isLocal: true, isDefinition: true, align: 16)
!31 = !DIFile(filename: "math.msws.c3", directory: "C:/Compilers/C3/lib/std/math/random")
!32 = !DIGlobalVariableExpression(var: !33, expr: !DIExpression())
!33 = distinct !DIGlobalVariable(name: "ODD_PHI64", linkageName: "std.math.random.ODD_PHI64.19297", scope: !31, file: !31, line: 5, type: !6, isLocal: true, isDefinition: true, align: 8)
!34 = !DIGlobalVariableExpression(var: !35, expr: !DIExpression())
!35 = distinct !DIGlobalVariable(name: "ODD_PHI32", linkageName: "std.math.random.ODD_PHI32.19298", scope: !31, file: !31, line: 6, type: !9, isLocal: true, isDefinition: true, align: 4)
!36 = !DIGlobalVariableExpression(var: !37, expr: !DIExpression())
!37 = distinct !DIGlobalVariable(name: "ODD_PHI16", linkageName: "std.math.random.ODD_PHI16.19299", scope: !31, file: !31, line: 7, type: !9, isLocal: true, isDefinition: true, align: 4)
!38 = !DIGlobalVariableExpression(var: !39, expr: !DIExpression())
!39 = distinct !DIGlobalVariable(name: "ODD_PHI8", linkageName: "std.math.random.ODD_PHI8.19300", scope: !31, file: !31, line: 8, type: !9, isLocal: true, isDefinition: true, align: 4)
!40 = !DIGlobalVariableExpression(var: !41, expr: !DIExpression())
!41 = distinct !DIGlobalVariable(name: "ODD_PHI128", linkageName: "std.math.random.ODD_PHI128.19416", scope: !42, file: !42, line: 4, type: !3, isLocal: true, isDefinition: true, align: 16)
!42 = !DIFile(filename: "math.pcg.c3", directory: "C:/Compilers/C3/lib/std/math/random")
!43 = !DIGlobalVariableExpression(var: !44, expr: !DIExpression())
!44 = distinct !DIGlobalVariable(name: "ODD_PHI64", linkageName: "std.math.random.ODD_PHI64.19417", scope: !42, file: !42, line: 5, type: !6, isLocal: true, isDefinition: true, align: 8)
!45 = !DIGlobalVariableExpression(var: !46, expr: !DIExpression())
!46 = distinct !DIGlobalVariable(name: "ODD_PHI32", linkageName: "std.math.random.ODD_PHI32.19418", scope: !42, file: !42, line: 6, type: !9, isLocal: true, isDefinition: true, align: 4)
!47 = !DIGlobalVariableExpression(var: !48, expr: !DIExpression())
!48 = distinct !DIGlobalVariable(name: "ODD_PHI16", linkageName: "std.math.random.ODD_PHI16.19419", scope: !42, file: !42, line: 7, type: !9, isLocal: true, isDefinition: true, align: 4)
!49 = !DIGlobalVariableExpression(var: !50, expr: !DIExpression())
!50 = distinct !DIGlobalVariable(name: "MUL_LCG128", linkageName: "std.math.random.MUL_LCG128.19420", scope: !42, file: !42, line: 9, type: !3, isLocal: true, isDefinition: true, align: 16)
!51 = !DIGlobalVariableExpression(var: !52, expr: !DIExpression())
!52 = distinct !DIGlobalVariable(name: "MUL_LCG64", linkageName: "std.math.random.MUL_LCG64.19421", scope: !42, file: !42, line: 10, type: !6, isLocal: true, isDefinition: true, align: 8)
!53 = !DIGlobalVariableExpression(var: !54, expr: !DIExpression())
!54 = distinct !DIGlobalVariable(name: "MUL_LCG32", linkageName: "std.math.random.MUL_LCG32.19422", scope: !42, file: !42, line: 11, type: !9, isLocal: true, isDefinition: true, align: 4)
!55 = !DIGlobalVariableExpression(var: !56, expr: !DIExpression())
!56 = distinct !DIGlobalVariable(name: "MUL_LCG16", linkageName: "std.math.random.MUL_LCG16.19423", scope: !42, file: !42, line: 12, type: !9, isLocal: true, isDefinition: true, align: 4)
!57 = !DIGlobalVariableExpression(var: !58, expr: !DIExpression())
!58 = distinct !DIGlobalVariable(name: "ROT_SHIFT", linkageName: "next_long.ROT_SHIFT", scope: !42, file: !42, line: 28, type: !59, isLocal: true, isDefinition: true, align: 4)
!59 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!60 = !DIGlobalVariableExpression(var: !61, expr: !DIExpression())
!61 = distinct !DIGlobalVariable(name: "ROT_SHIFT", linkageName: "next_int.ROT_SHIFT", scope: !42, file: !42, line: 56, type: !59, isLocal: true, isDefinition: true, align: 4)
!62 = !DIGlobalVariableExpression(var: !63, expr: !DIExpression())
!63 = distinct !DIGlobalVariable(name: "ROT_SHIFT", linkageName: "next_short.ROT_SHIFT", scope: !42, file: !42, line: 85, type: !59, isLocal: true, isDefinition: true, align: 4)
!64 = !DIGlobalVariableExpression(var: !65, expr: !DIExpression())
!65 = distinct !DIGlobalVariable(name: "ROT_SHIFT", linkageName: "next_byte.ROT_SHIFT", scope: !42, file: !42, line: 113, type: !59, isLocal: true, isDefinition: true, align: 4)
!66 = !DIGlobalVariableExpression(var: !67, expr: !DIExpression())
!67 = distinct !DIGlobalVariable(name: "ODD_PHI64", linkageName: "std.math.random.ODD_PHI64.19510", scope: !68, file: !68, line: 4, type: !6, isLocal: true, isDefinition: true, align: 8)
!68 = !DIFile(filename: "math.seeder.c3", directory: "C:/Compilers/C3/lib/std/math/random")
!69 = !DIGlobalVariableExpression(var: !70, expr: !DIExpression())
!70 = distinct !DIGlobalVariable(name: "MUL_MCG64", linkageName: "std.math.random.MUL_MCG64.19511", scope: !68, file: !68, line: 5, type: !6, isLocal: true, isDefinition: true, align: 8)
!71 = !DIGlobalVariableExpression(var: !72, expr: !DIExpression())
!72 = distinct !DIGlobalVariable(name: "MUL_LCG64", linkageName: "std.math.random.MUL_LCG64.19512", scope: !68, file: !68, line: 6, type: !6, isLocal: true, isDefinition: true, align: 8)
!73 = !DIGlobalVariableExpression(var: !74, expr: !DIExpression())
!74 = distinct !DIGlobalVariable(name: "random_int", linkageName: "entropy.random_int", scope: !68, file: !68, line: 80, type: !9, isLocal: true, isDefinition: true, align: 4)
!75 = !DIGlobalVariableExpression(var: !76, expr: !DIExpression())
!76 = distinct !DIGlobalVariable(name: "ODD_PHI128", linkageName: "std.math.random.ODD_PHI128.19540", scope: !77, file: !77, line: 4, type: !3, isLocal: true, isDefinition: true, align: 16)
!77 = !DIFile(filename: "math.sfc.c3", directory: "C:/Compilers/C3/lib/std/math/random")
!78 = !DIGlobalVariableExpression(var: !79, expr: !DIExpression())
!79 = distinct !DIGlobalVariable(name: "ODD_PHI64", linkageName: "std.math.random.ODD_PHI64.19541", scope: !77, file: !77, line: 5, type: !6, isLocal: true, isDefinition: true, align: 8)
!80 = !DIGlobalVariableExpression(var: !81, expr: !DIExpression())
!81 = distinct !DIGlobalVariable(name: "ODD_PHI32", linkageName: "std.math.random.ODD_PHI32.19542", scope: !77, file: !77, line: 6, type: !9, isLocal: true, isDefinition: true, align: 4)
!82 = !DIGlobalVariableExpression(var: !83, expr: !DIExpression())
!83 = distinct !DIGlobalVariable(name: "ODD_PHI16", linkageName: "std.math.random.ODD_PHI16.19543", scope: !77, file: !77, line: 7, type: !9, isLocal: true, isDefinition: true, align: 4)
!84 = !DIGlobalVariableExpression(var: !85, expr: !DIExpression())
!85 = distinct !DIGlobalVariable(name: "ODD_PHI8", linkageName: "std.math.random.ODD_PHI8.19544", scope: !77, file: !77, line: 8, type: !9, isLocal: true, isDefinition: true, align: 4)
!86 = !DIGlobalVariableExpression(var: !87, expr: !DIExpression())
!87 = distinct !DIGlobalVariable(name: "SIMPLE_RANDOM_MULTIPLIER", linkageName: "std.math.random.SIMPLE_RANDOM_MULTIPLIER.19661", scope: !88, file: !88, line: 32, type: !89, isLocal: true, isDefinition: true, align: 8)
!88 = !DIFile(filename: "math.simple_random.c3", directory: "C:/Compilers/C3/lib/std/math/random")
!89 = !DIBasicType(name: "long", size: 64, encoding: DW_ATE_signed)
!90 = !DIGlobalVariableExpression(var: !91, expr: !DIExpression())
!91 = distinct !DIGlobalVariable(name: "SIMPLE_RANDOM_ADDEND", linkageName: "std.math.random.SIMPLE_RANDOM_ADDEND.19662", scope: !88, file: !88, line: 33, type: !89, isLocal: true, isDefinition: true, align: 8)
!92 = !DIGlobalVariableExpression(var: !93, expr: !DIExpression())
!93 = distinct !DIGlobalVariable(name: "SIMPLE_RANDOM_MASK", linkageName: "std.math.random.SIMPLE_RANDOM_MASK.19663", scope: !88, file: !88, line: 34, type: !89, isLocal: true, isDefinition: true, align: 8)
!94 = !DIGlobalVariableExpression(var: !95, expr: !DIExpression())
!95 = distinct !DIGlobalVariable(name: "default_random", linkageName: "std.math.random.default_random", scope: !96, file: !96, line: 65, type: !97, isLocal: false, isDefinition: true, align: 16)
!96 = !DIFile(filename: "random.c3", directory: "C:/Compilers/C3/lib/std/math")
!97 = !DIDerivedType(tag: DW_TAG_typedef, name: "Sfc64Random", scope: !77, file: !77, line: 43, baseType: !98, align: 8)
!98 = !DICompositeType(tag: DW_TAG_array_type, baseType: !6, size: 256, align: 64, elements: !99)
!99 = !{!100}
!100 = !DISubrange(count: 4, lowerBound: 0)
!101 = !DIGlobalVariableExpression(var: !102, expr: !DIExpression())
!102 = distinct !DIGlobalVariable(name: "default_random_initialized", linkageName: "std.math.random.default_random_initialized", scope: !96, file: !96, line: 66, type: !103, isLocal: false, isDefinition: true, align: 1)
!103 = !DIBasicType(name: "bool", size: 8, encoding: DW_ATE_boolean)
!104 = !{i32 1, !"CodeView", i32 1}
!105 = !{i32 2, !"Debug Info Version", i32 3}
!106 = !{i32 2, !"wchar_size", i32 2}
!107 = !{i32 4, !"PIC Level", i32 2}
!108 = !{i32 1, !"uwtable", i32 2}
!109 = !{i32 1, !"MaxTLSAlign", i32 65536}
!110 = distinct !DICompileUnit(language: DW_LANG_C11, file: !2, producer: "c3c", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, globals: !111, splitDebugInlining: false)
!111 = !{!0, !4, !7, !10, !12, !14, !16, !18, !20, !23, !25, !27, !29, !32, !34, !36, !38, !40, !43, !45, !47, !49, !51, !53, !55, !57, !60, !62, !64, !66, !69, !71, !73, !75, !78, !80, !82, !84, !86, !90, !92, !94, !101}
!112 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Lcg128Random.set_seed", scope: !2, file: !2, line: 18, type: !113, scopeLine: 18, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!113 = !DISubroutineType(types: !114)
!114 = !{null, !115, !117}
!115 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Lcg128Random*", baseType: !116, size: 64, align: 64, dwarfAddressSpace: 0)
!116 = !DIDerivedType(tag: DW_TAG_typedef, name: "Lcg128Random", scope: !2, file: !2, line: 16, baseType: !3, align: 16)
!117 = !DICompositeType(tag: DW_TAG_structure_type, name: "char[]", size: 128, align: 64, elements: !118, identifier: "char[]")
!118 = !{!119, !122}
!119 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !117, baseType: !120, size: 64, align: 64)
!120 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "char*", baseType: !121, size: 64, align: 64, dwarfAddressSpace: 0)
!121 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_unsigned_char)
!122 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !117, baseType: !123, size: 64, align: 64, offset: 64)
!123 = !DIDerivedType(tag: DW_TAG_typedef, name: "usz", baseType: !6)
!124 = !{}
!125 = !DILocation(line: 19, scope: !112)
!126 = !DILocalVariable(name: "self", arg: 1, scope: !112, file: !2, line: 18, type: !115)
!127 = !DILocation(line: 18, scope: !112)
!128 = !DILocalVariable(name: "input", arg: 2, scope: !112, file: !2, line: 18, type: !117)
!129 = !DILocalVariable(name: "return_value", scope: !130, file: !2, line: 10, type: !3, align: 16)
!130 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !68, file: !68, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110, retainedNodes: !124)
!131 = !DILocation(line: 10, scope: !130, inlinedAt: !132)
!132 = !DILocation(line: 20, scope: !112)
!133 = !DILocation(line: 11, scope: !130, inlinedAt: !132)
!134 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Lcg128Random.next_long", scope: !2, file: !2, line: 24, type: !135, scopeLine: 24, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!135 = !DISubroutineType(types: !136)
!136 = !{!6, !115}
!137 = !DILocation(line: 25, scope: !134)
!138 = !DILocalVariable(name: "self", arg: 1, scope: !134, file: !2, line: 24, type: !115)
!139 = !DILocation(line: 24, scope: !134)
!140 = !DILocalVariable(name: "s", scope: !134, file: !2, line: 26, type: !141, align: 8)
!141 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "uint128*", baseType: !3, size: 64, align: 64, dwarfAddressSpace: 0)
!142 = !DILocation(line: 26, scope: !134)
!143 = !DILocalVariable(name: "result", scope: !134, file: !2, line: 27, type: !6, align: 8)
!144 = !DILocation(line: 27, scope: !134)
!145 = !DILocation(line: 28, scope: !134)
!146 = !DILocation(line: 29, scope: !134)
!147 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Lcg128Random.next_bytes", scope: !2, file: !2, line: 35, type: !113, scopeLine: 35, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!148 = !DILocation(line: 35, scope: !147)
!149 = !DILocalVariable(name: "self", arg: 1, scope: !147, file: !2, line: 35, type: !115)
!150 = !DILocalVariable(name: "bytes", arg: 2, scope: !147, file: !2, line: 35, type: !117)
!151 = !DILocation(line: 33, scope: !152)
!152 = distinct !DILexicalBlock(scope: !147, file: !2, line: 35, column: 66)
!153 = !DILocalVariable(name: "len", scope: !154, file: !2, line: 146, type: !123, align: 8)
!154 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !96, file: !96, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110, retainedNodes: !124)
!155 = !DILocation(line: 146, scope: !154, inlinedAt: !148)
!156 = !DILocation(line: 148, scope: !154, inlinedAt: !148)
!157 = !DILocation(line: 148, scope: !158, inlinedAt: !148)
!158 = distinct !DILexicalBlock(scope: !154, file: !96, line: 148, column: 2)
!159 = !DILocalVariable(name: "value", scope: !160, file: !2, line: 150, type: !6, align: 8)
!160 = distinct !DILexicalBlock(scope: !158, file: !96, line: 149, column: 2)
!161 = !DILocation(line: 150, scope: !160, inlinedAt: !148)
!162 = !DILocation(line: 35, scope: !160, inlinedAt: !148)
!163 = !DILocation(line: 151, scope: !160, inlinedAt: !148)
!164 = !DILocation(line: 153, scope: !165, inlinedAt: !148)
!165 = distinct !DILexicalBlock(scope: !160, file: !96, line: 152, column: 3)
!166 = !DILocation(line: 154, scope: !165, inlinedAt: !148)
!167 = !DILocation(line: 156, scope: !160, inlinedAt: !148)
!168 = !DILocation(line: 157, scope: !160, inlinedAt: !148)
!169 = !DILocation(line: 158, scope: !160, inlinedAt: !148)
!170 = !DILocation(line: 232, scope: !171, inlinedAt: !173)
!171 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !172, file: !172, line: 229, scopeLine: 229, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!172 = !DIFile(filename: "builtin.c3", directory: "C:/Compilers/C3/lib/std/core")
!173 = !DILocation(line: 160, scope: !154, inlinedAt: !148)
!174 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Lcg128Random.next_int128", scope: !2, file: !2, line: 36, type: !175, scopeLine: 36, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!175 = !DISubroutineType(types: !176)
!176 = !{!3, !115}
!177 = !DILocation(line: 36, scope: !174)
!178 = !DILocalVariable(name: "self", arg: 1, scope: !174, file: !2, line: 36, type: !115)
!179 = !DILocation(line: 36, scope: !180, inlinedAt: !177)
!180 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !96, file: !96, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!181 = !DILocation(line: 138, scope: !180, inlinedAt: !177)
!182 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Lcg128Random.next_int", scope: !2, file: !2, line: 37, type: !183, scopeLine: 37, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!183 = !DISubroutineType(types: !184)
!184 = !{!9, !115}
!185 = !DILocation(line: 37, scope: !182)
!186 = !DILocalVariable(name: "self", arg: 1, scope: !182, file: !2, line: 37, type: !115)
!187 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Lcg128Random.next_short", scope: !2, file: !2, line: 38, type: !188, scopeLine: 38, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!188 = !DISubroutineType(types: !189)
!189 = !{!190, !115}
!190 = !DIBasicType(name: "ushort", size: 16, encoding: DW_ATE_unsigned)
!191 = !DILocation(line: 38, scope: !187)
!192 = !DILocalVariable(name: "self", arg: 1, scope: !187, file: !2, line: 38, type: !115)
!193 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Lcg128Random.next_byte", scope: !2, file: !2, line: 39, type: !194, scopeLine: 39, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!194 = !DISubroutineType(types: !195)
!195 = !{!121, !115}
!196 = !DILocation(line: 39, scope: !193)
!197 = !DILocalVariable(name: "self", arg: 1, scope: !193, file: !2, line: 39, type: !115)
!198 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Lcg64Random.set_seed", scope: !2, file: !2, line: 45, type: !199, scopeLine: 45, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!199 = !DISubroutineType(types: !200)
!200 = !{null, !201, !117}
!201 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Lcg64Random*", baseType: !202, size: 64, align: 64, dwarfAddressSpace: 0)
!202 = !DIDerivedType(tag: DW_TAG_typedef, name: "Lcg64Random", scope: !2, file: !2, line: 43, baseType: !6, align: 8)
!203 = !DILocation(line: 46, scope: !198)
!204 = !DILocalVariable(name: "self", arg: 1, scope: !198, file: !2, line: 45, type: !201)
!205 = !DILocation(line: 45, scope: !198)
!206 = !DILocalVariable(name: "seed", arg: 2, scope: !198, file: !2, line: 45, type: !117)
!207 = !DILocalVariable(name: "return_value", scope: !208, file: !2, line: 10, type: !6, align: 8)
!208 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !68, file: !68, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110, retainedNodes: !124)
!209 = !DILocation(line: 10, scope: !208, inlinedAt: !210)
!210 = !DILocation(line: 47, scope: !198)
!211 = !DILocation(line: 11, scope: !208, inlinedAt: !210)
!212 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Lcg64Random.next_int", scope: !2, file: !2, line: 51, type: !213, scopeLine: 51, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!213 = !DISubroutineType(types: !214)
!214 = !{!9, !201}
!215 = !DILocation(line: 52, scope: !212)
!216 = !DILocalVariable(name: "self", arg: 1, scope: !212, file: !2, line: 51, type: !201)
!217 = !DILocation(line: 51, scope: !212)
!218 = !DILocalVariable(name: "s", scope: !212, file: !2, line: 53, type: !219, align: 8)
!219 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "ulong*", baseType: !6, size: 64, align: 64, dwarfAddressSpace: 0)
!220 = !DILocation(line: 53, scope: !212)
!221 = !DILocalVariable(name: "result", scope: !212, file: !2, line: 54, type: !9, align: 4)
!222 = !DILocation(line: 54, scope: !212)
!223 = !DILocation(line: 55, scope: !212)
!224 = !DILocation(line: 56, scope: !212)
!225 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Lcg64Random.next_bytes", scope: !2, file: !2, line: 62, type: !199, scopeLine: 62, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!226 = !DILocation(line: 62, scope: !225)
!227 = !DILocalVariable(name: "self", arg: 1, scope: !225, file: !2, line: 62, type: !201)
!228 = !DILocalVariable(name: "bytes", arg: 2, scope: !225, file: !2, line: 62, type: !117)
!229 = !DILocation(line: 60, scope: !230)
!230 = distinct !DILexicalBlock(scope: !225, file: !2, line: 62, column: 65)
!231 = !DILocalVariable(name: "len", scope: !232, file: !2, line: 146, type: !123, align: 8)
!232 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !96, file: !96, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110, retainedNodes: !124)
!233 = !DILocation(line: 146, scope: !232, inlinedAt: !226)
!234 = !DILocation(line: 148, scope: !232, inlinedAt: !226)
!235 = !DILocation(line: 148, scope: !236, inlinedAt: !226)
!236 = distinct !DILexicalBlock(scope: !232, file: !96, line: 148, column: 2)
!237 = !DILocalVariable(name: "value", scope: !238, file: !2, line: 150, type: !9, align: 4)
!238 = distinct !DILexicalBlock(scope: !236, file: !96, line: 149, column: 2)
!239 = !DILocation(line: 150, scope: !238, inlinedAt: !226)
!240 = !DILocation(line: 62, scope: !238, inlinedAt: !226)
!241 = !DILocation(line: 151, scope: !238, inlinedAt: !226)
!242 = !DILocation(line: 153, scope: !243, inlinedAt: !226)
!243 = distinct !DILexicalBlock(scope: !238, file: !96, line: 152, column: 3)
!244 = !DILocation(line: 154, scope: !243, inlinedAt: !226)
!245 = !DILocation(line: 156, scope: !238, inlinedAt: !226)
!246 = !DILocation(line: 157, scope: !238, inlinedAt: !226)
!247 = !DILocation(line: 158, scope: !238, inlinedAt: !226)
!248 = !DILocation(line: 232, scope: !249, inlinedAt: !250)
!249 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !172, file: !172, line: 229, scopeLine: 229, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!250 = !DILocation(line: 160, scope: !232, inlinedAt: !226)
!251 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Lcg64Random.next_int128", scope: !2, file: !2, line: 63, type: !252, scopeLine: 63, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!252 = !DISubroutineType(types: !253)
!253 = !{!3, !201}
!254 = !DILocation(line: 63, scope: !251)
!255 = !DILocalVariable(name: "self", arg: 1, scope: !251, file: !2, line: 63, type: !201)
!256 = !DILocation(line: 63, scope: !257, inlinedAt: !254)
!257 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !96, file: !96, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!258 = !DILocation(line: 138, scope: !257, inlinedAt: !254)
!259 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Lcg64Random.next_long", scope: !2, file: !2, line: 64, type: !260, scopeLine: 64, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!260 = !DISubroutineType(types: !261)
!261 = !{!6, !201}
!262 = !DILocation(line: 64, scope: !259)
!263 = !DILocalVariable(name: "self", arg: 1, scope: !259, file: !2, line: 64, type: !201)
!264 = !DILocation(line: 64, scope: !265, inlinedAt: !262)
!265 = distinct !DISubprogram(name: "@int_to_long", linkageName: "@int_to_long", scope: !96, file: !96, line: 139, scopeLine: 139, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!266 = !DILocation(line: 139, scope: !265, inlinedAt: !262)
!267 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Lcg64Random.next_short", scope: !2, file: !2, line: 65, type: !268, scopeLine: 65, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!268 = !DISubroutineType(types: !269)
!269 = !{!190, !201}
!270 = !DILocation(line: 65, scope: !267)
!271 = !DILocalVariable(name: "self", arg: 1, scope: !267, file: !2, line: 65, type: !201)
!272 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Lcg64Random.next_byte", scope: !2, file: !2, line: 66, type: !273, scopeLine: 66, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!273 = !DISubroutineType(types: !274)
!274 = !{!121, !201}
!275 = !DILocation(line: 66, scope: !272)
!276 = !DILocalVariable(name: "self", arg: 1, scope: !272, file: !2, line: 66, type: !201)
!277 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Lcg32Random.set_seed", scope: !2, file: !2, line: 72, type: !278, scopeLine: 72, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!278 = !DISubroutineType(types: !279)
!279 = !{null, !280, !117}
!280 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Lcg32Random*", baseType: !281, size: 64, align: 64, dwarfAddressSpace: 0)
!281 = !DIDerivedType(tag: DW_TAG_typedef, name: "Lcg32Random", scope: !2, file: !2, line: 70, baseType: !9, align: 4)
!282 = !DILocation(line: 73, scope: !277)
!283 = !DILocalVariable(name: "self", arg: 1, scope: !277, file: !2, line: 72, type: !280)
!284 = !DILocation(line: 72, scope: !277)
!285 = !DILocalVariable(name: "seed", arg: 2, scope: !277, file: !2, line: 72, type: !117)
!286 = !DILocalVariable(name: "return_value", scope: !287, file: !2, line: 10, type: !9, align: 4)
!287 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !68, file: !68, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110, retainedNodes: !124)
!288 = !DILocation(line: 10, scope: !287, inlinedAt: !289)
!289 = !DILocation(line: 74, scope: !277)
!290 = !DILocation(line: 11, scope: !287, inlinedAt: !289)
!291 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Lcg32Random.next_short", scope: !2, file: !2, line: 77, type: !292, scopeLine: 77, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!292 = !DISubroutineType(types: !293)
!293 = !{!190, !280}
!294 = !DILocation(line: 78, scope: !291)
!295 = !DILocalVariable(name: "self", arg: 1, scope: !291, file: !2, line: 77, type: !280)
!296 = !DILocation(line: 77, scope: !291)
!297 = !DILocalVariable(name: "s", scope: !291, file: !2, line: 79, type: !298, align: 8)
!298 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "uint*", baseType: !9, size: 64, align: 64, dwarfAddressSpace: 0)
!299 = !DILocation(line: 79, scope: !291)
!300 = !DILocalVariable(name: "result", scope: !291, file: !2, line: 80, type: !190, align: 2)
!301 = !DILocation(line: 80, scope: !291)
!302 = !DILocation(line: 81, scope: !291)
!303 = !DILocation(line: 82, scope: !291)
!304 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Lcg32Random.next_bytes", scope: !2, file: !2, line: 85, type: !278, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!305 = !DILocation(line: 85, scope: !304)
!306 = !DILocalVariable(name: "self", arg: 1, scope: !304, file: !2, line: 85, type: !280)
!307 = !DILocalVariable(name: "bytes", arg: 2, scope: !304, file: !2, line: 85, type: !117)
!308 = !DILocalVariable(name: "len", scope: !309, file: !2, line: 146, type: !123, align: 8)
!309 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !96, file: !96, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110, retainedNodes: !124)
!310 = !DILocation(line: 146, scope: !309, inlinedAt: !305)
!311 = !DILocation(line: 148, scope: !309, inlinedAt: !305)
!312 = !DILocation(line: 148, scope: !313, inlinedAt: !305)
!313 = distinct !DILexicalBlock(scope: !309, file: !96, line: 148, column: 2)
!314 = !DILocalVariable(name: "value", scope: !315, file: !2, line: 150, type: !190, align: 2)
!315 = distinct !DILexicalBlock(scope: !313, file: !96, line: 149, column: 2)
!316 = !DILocation(line: 150, scope: !315, inlinedAt: !305)
!317 = !DILocation(line: 85, scope: !315, inlinedAt: !305)
!318 = !DILocation(line: 151, scope: !315, inlinedAt: !305)
!319 = !DILocation(line: 153, scope: !320, inlinedAt: !305)
!320 = distinct !DILexicalBlock(scope: !315, file: !96, line: 152, column: 3)
!321 = !DILocation(line: 154, scope: !320, inlinedAt: !305)
!322 = !DILocation(line: 156, scope: !315, inlinedAt: !305)
!323 = !DILocation(line: 157, scope: !315, inlinedAt: !305)
!324 = !DILocation(line: 158, scope: !315, inlinedAt: !305)
!325 = !DILocation(line: 232, scope: !326, inlinedAt: !327)
!326 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !172, file: !172, line: 229, scopeLine: 229, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!327 = !DILocation(line: 160, scope: !309, inlinedAt: !305)
!328 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Lcg32Random.next_int128", scope: !2, file: !2, line: 86, type: !329, scopeLine: 86, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!329 = !DISubroutineType(types: !330)
!330 = !{!3, !280}
!331 = !DILocation(line: 86, scope: !328)
!332 = !DILocalVariable(name: "self", arg: 1, scope: !328, file: !2, line: 86, type: !280)
!333 = !DILocation(line: 86, scope: !334, inlinedAt: !331)
!334 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !96, file: !96, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!335 = !DILocation(line: 138, scope: !334, inlinedAt: !331)
!336 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Lcg32Random.next_long", scope: !2, file: !2, line: 87, type: !337, scopeLine: 87, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!337 = !DISubroutineType(types: !338)
!338 = !{!6, !280}
!339 = !DILocation(line: 87, scope: !336)
!340 = !DILocalVariable(name: "self", arg: 1, scope: !336, file: !2, line: 87, type: !280)
!341 = !DILocation(line: 87, scope: !342, inlinedAt: !339)
!342 = distinct !DISubprogram(name: "@int_to_long", linkageName: "@int_to_long", scope: !96, file: !96, line: 139, scopeLine: 139, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!343 = !DILocation(line: 139, scope: !342, inlinedAt: !339)
!344 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Lcg32Random.next_int", scope: !2, file: !2, line: 88, type: !345, scopeLine: 88, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!345 = !DISubroutineType(types: !346)
!346 = !{!9, !280}
!347 = !DILocation(line: 88, scope: !344)
!348 = !DILocalVariable(name: "self", arg: 1, scope: !344, file: !2, line: 88, type: !280)
!349 = !DILocation(line: 88, scope: !350, inlinedAt: !347)
!350 = distinct !DISubprogram(name: "@short_to_int", linkageName: "@short_to_int", scope: !96, file: !96, line: 140, scopeLine: 140, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!351 = !DILocation(line: 140, scope: !350, inlinedAt: !347)
!352 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Lcg32Random.next_byte", scope: !2, file: !2, line: 89, type: !353, scopeLine: 89, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!353 = !DISubroutineType(types: !354)
!354 = !{!121, !280}
!355 = !DILocation(line: 89, scope: !352)
!356 = !DILocalVariable(name: "self", arg: 1, scope: !352, file: !2, line: 89, type: !280)
!357 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Lcg16Random.set_seed", scope: !2, file: !2, line: 95, type: !358, scopeLine: 95, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!358 = !DISubroutineType(types: !359)
!359 = !{null, !360, !117}
!360 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Lcg16Random*", baseType: !361, size: 64, align: 64, dwarfAddressSpace: 0)
!361 = !DIDerivedType(tag: DW_TAG_typedef, name: "Lcg16Random", scope: !2, file: !2, line: 93, baseType: !190, align: 2)
!362 = !DILocation(line: 96, scope: !357)
!363 = !DILocalVariable(name: "self", arg: 1, scope: !357, file: !2, line: 95, type: !360)
!364 = !DILocation(line: 95, scope: !357)
!365 = !DILocalVariable(name: "seed", arg: 2, scope: !357, file: !2, line: 95, type: !117)
!366 = !DILocalVariable(name: "return_value", scope: !367, file: !2, line: 10, type: !190, align: 2)
!367 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !68, file: !68, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110, retainedNodes: !124)
!368 = !DILocation(line: 10, scope: !367, inlinedAt: !369)
!369 = !DILocation(line: 97, scope: !357)
!370 = !DILocation(line: 11, scope: !367, inlinedAt: !369)
!371 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Lcg16Random.next_byte", scope: !2, file: !2, line: 100, type: !372, scopeLine: 100, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!372 = !DISubroutineType(types: !373)
!373 = !{!121, !360}
!374 = !DILocation(line: 101, scope: !371)
!375 = !DILocalVariable(name: "self", arg: 1, scope: !371, file: !2, line: 100, type: !360)
!376 = !DILocation(line: 100, scope: !371)
!377 = !DILocalVariable(name: "s", scope: !371, file: !2, line: 102, type: !378, align: 8)
!378 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "ushort*", baseType: !190, size: 64, align: 64, dwarfAddressSpace: 0)
!379 = !DILocation(line: 102, scope: !371)
!380 = !DILocalVariable(name: "result", scope: !371, file: !2, line: 103, type: !121, align: 1)
!381 = !DILocation(line: 103, scope: !371)
!382 = !DILocation(line: 104, scope: !371)
!383 = !DILocation(line: 105, scope: !371)
!384 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Lcg16Random.next_bytes", scope: !2, file: !2, line: 108, type: !358, scopeLine: 108, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!385 = !DILocation(line: 108, scope: !384)
!386 = !DILocalVariable(name: "self", arg: 1, scope: !384, file: !2, line: 108, type: !360)
!387 = !DILocalVariable(name: "bytes", arg: 2, scope: !384, file: !2, line: 108, type: !117)
!388 = !DILocalVariable(name: "len", scope: !389, file: !2, line: 146, type: !123, align: 8)
!389 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !96, file: !96, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110, retainedNodes: !124)
!390 = !DILocation(line: 146, scope: !389, inlinedAt: !385)
!391 = !DILocation(line: 148, scope: !389, inlinedAt: !385)
!392 = !DILocation(line: 148, scope: !393, inlinedAt: !385)
!393 = distinct !DILexicalBlock(scope: !389, file: !96, line: 148, column: 2)
!394 = !DILocalVariable(name: "value", scope: !395, file: !2, line: 150, type: !121, align: 1)
!395 = distinct !DILexicalBlock(scope: !393, file: !96, line: 149, column: 2)
!396 = !DILocation(line: 150, scope: !395, inlinedAt: !385)
!397 = !DILocation(line: 108, scope: !395, inlinedAt: !385)
!398 = !DILocation(line: 151, scope: !395, inlinedAt: !385)
!399 = !DILocation(line: 153, scope: !400, inlinedAt: !385)
!400 = distinct !DILexicalBlock(scope: !395, file: !96, line: 152, column: 3)
!401 = !DILocation(line: 154, scope: !400, inlinedAt: !385)
!402 = !DILocation(line: 156, scope: !395, inlinedAt: !385)
!403 = !DILocation(line: 157, scope: !395, inlinedAt: !385)
!404 = !DILocation(line: 158, scope: !395, inlinedAt: !385)
!405 = !DILocation(line: 232, scope: !406, inlinedAt: !407)
!406 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !172, file: !172, line: 229, scopeLine: 229, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!407 = !DILocation(line: 160, scope: !389, inlinedAt: !385)
!408 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Lcg16Random.next_int128", scope: !2, file: !2, line: 109, type: !409, scopeLine: 109, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!409 = !DISubroutineType(types: !410)
!410 = !{!3, !360}
!411 = !DILocation(line: 109, scope: !408)
!412 = !DILocalVariable(name: "self", arg: 1, scope: !408, file: !2, line: 109, type: !360)
!413 = !DILocation(line: 109, scope: !414, inlinedAt: !411)
!414 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !96, file: !96, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!415 = !DILocation(line: 138, scope: !414, inlinedAt: !411)
!416 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Lcg16Random.next_long", scope: !2, file: !2, line: 110, type: !417, scopeLine: 110, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!417 = !DISubroutineType(types: !418)
!418 = !{!6, !360}
!419 = !DILocation(line: 110, scope: !416)
!420 = !DILocalVariable(name: "self", arg: 1, scope: !416, file: !2, line: 110, type: !360)
!421 = !DILocation(line: 110, scope: !422, inlinedAt: !419)
!422 = distinct !DISubprogram(name: "@int_to_long", linkageName: "@int_to_long", scope: !96, file: !96, line: 139, scopeLine: 139, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!423 = !DILocation(line: 139, scope: !422, inlinedAt: !419)
!424 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Lcg16Random.next_int", scope: !2, file: !2, line: 111, type: !425, scopeLine: 111, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!425 = !DISubroutineType(types: !426)
!426 = !{!9, !360}
!427 = !DILocation(line: 111, scope: !424)
!428 = !DILocalVariable(name: "self", arg: 1, scope: !424, file: !2, line: 111, type: !360)
!429 = !DILocation(line: 111, scope: !430, inlinedAt: !427)
!430 = distinct !DISubprogram(name: "@short_to_int", linkageName: "@short_to_int", scope: !96, file: !96, line: 140, scopeLine: 140, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!431 = !DILocation(line: 140, scope: !430, inlinedAt: !427)
!432 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Lcg16Random.next_short", scope: !2, file: !2, line: 112, type: !433, scopeLine: 112, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!433 = !DISubroutineType(types: !434)
!434 = !{!190, !360}
!435 = !DILocation(line: 112, scope: !432)
!436 = !DILocalVariable(name: "self", arg: 1, scope: !432, file: !2, line: 112, type: !360)
!437 = !DILocation(line: 112, scope: !438, inlinedAt: !435)
!438 = distinct !DISubprogram(name: "@char_to_short", linkageName: "@char_to_short", scope: !96, file: !96, line: 141, scopeLine: 141, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!439 = !DILocation(line: 141, scope: !438, inlinedAt: !435)
!440 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Mcg128Random.set_seed", scope: !22, file: !22, line: 12, type: !441, scopeLine: 12, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!441 = !DISubroutineType(types: !442)
!442 = !{null, !443, !117}
!443 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Mcg128Random*", baseType: !444, size: 64, align: 64, dwarfAddressSpace: 0)
!444 = !DIDerivedType(tag: DW_TAG_typedef, name: "Mcg128Random", scope: !22, file: !22, line: 10, baseType: !3, align: 16)
!445 = !DILocation(line: 13, scope: !440)
!446 = !DILocalVariable(name: "self", arg: 1, scope: !440, file: !22, line: 12, type: !443)
!447 = !DILocation(line: 12, scope: !440)
!448 = !DILocalVariable(name: "seed", arg: 2, scope: !440, file: !22, line: 12, type: !117)
!449 = !DILocalVariable(name: "return_value", scope: !450, file: !22, line: 10, type: !3, align: 16)
!450 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !68, file: !68, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110, retainedNodes: !124)
!451 = !DILocation(line: 10, scope: !450, inlinedAt: !452)
!452 = !DILocation(line: 14, scope: !440)
!453 = !DILocation(line: 11, scope: !450, inlinedAt: !452)
!454 = !DILocation(line: 12, scope: !450, inlinedAt: !452)
!455 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Mcg128Random.next_bytes", scope: !22, file: !22, line: 20, type: !441, scopeLine: 20, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!456 = !DILocation(line: 21, scope: !455)
!457 = !DILocalVariable(name: "self", arg: 1, scope: !455, file: !22, line: 20, type: !443)
!458 = !DILocation(line: 20, scope: !455)
!459 = !DILocalVariable(name: "bytes", arg: 2, scope: !455, file: !22, line: 20, type: !117)
!460 = !DILocation(line: 18, scope: !461)
!461 = distinct !DILexicalBlock(scope: !455, file: !22, line: 21, column: 1)
!462 = !DILocalVariable(name: "len", scope: !463, file: !22, line: 146, type: !123, align: 8)
!463 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !96, file: !96, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110, retainedNodes: !124)
!464 = !DILocation(line: 146, scope: !463, inlinedAt: !465)
!465 = !DILocation(line: 22, scope: !455)
!466 = !DILocation(line: 148, scope: !463, inlinedAt: !465)
!467 = !DILocation(line: 148, scope: !468, inlinedAt: !465)
!468 = distinct !DILexicalBlock(scope: !463, file: !96, line: 148, column: 2)
!469 = !DILocalVariable(name: "value", scope: !470, file: !22, line: 150, type: !6, align: 8)
!470 = distinct !DILexicalBlock(scope: !468, file: !96, line: 149, column: 2)
!471 = !DILocation(line: 150, scope: !470, inlinedAt: !465)
!472 = !DILocation(line: 22, scope: !470, inlinedAt: !465)
!473 = !DILocation(line: 151, scope: !470, inlinedAt: !465)
!474 = !DILocation(line: 153, scope: !475, inlinedAt: !465)
!475 = distinct !DILexicalBlock(scope: !470, file: !96, line: 152, column: 3)
!476 = !DILocation(line: 154, scope: !475, inlinedAt: !465)
!477 = !DILocation(line: 156, scope: !470, inlinedAt: !465)
!478 = !DILocation(line: 157, scope: !470, inlinedAt: !465)
!479 = !DILocation(line: 158, scope: !470, inlinedAt: !465)
!480 = !DILocation(line: 232, scope: !481, inlinedAt: !482)
!481 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !172, file: !172, line: 229, scopeLine: 229, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!482 = !DILocation(line: 160, scope: !463, inlinedAt: !465)
!483 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Mcg128Random.next_long", scope: !22, file: !22, line: 25, type: !484, scopeLine: 25, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!484 = !DISubroutineType(types: !485)
!485 = !{!6, !443}
!486 = !DILocation(line: 26, scope: !483)
!487 = !DILocalVariable(name: "self", arg: 1, scope: !483, file: !22, line: 25, type: !443)
!488 = !DILocation(line: 25, scope: !483)
!489 = !DILocalVariable(name: "s", scope: !483, file: !22, line: 27, type: !141, align: 8)
!490 = !DILocation(line: 27, scope: !483)
!491 = !DILocalVariable(name: "result", scope: !483, file: !22, line: 28, type: !6, align: 8)
!492 = !DILocation(line: 28, scope: !483)
!493 = !DILocation(line: 29, scope: !483)
!494 = !DILocation(line: 30, scope: !483)
!495 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Mcg128Random.next_int128", scope: !22, file: !22, line: 33, type: !496, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!496 = !DISubroutineType(types: !497)
!497 = !{!3, !443}
!498 = !DILocation(line: 33, scope: !495)
!499 = !DILocalVariable(name: "self", arg: 1, scope: !495, file: !22, line: 33, type: !443)
!500 = !DILocation(line: 33, scope: !501, inlinedAt: !498)
!501 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !96, file: !96, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!502 = !DILocation(line: 138, scope: !501, inlinedAt: !498)
!503 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Mcg128Random.next_int", scope: !22, file: !22, line: 34, type: !504, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!504 = !DISubroutineType(types: !505)
!505 = !{!9, !443}
!506 = !DILocation(line: 34, scope: !503)
!507 = !DILocalVariable(name: "self", arg: 1, scope: !503, file: !22, line: 34, type: !443)
!508 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Mcg128Random.next_short", scope: !22, file: !22, line: 35, type: !509, scopeLine: 35, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!509 = !DISubroutineType(types: !510)
!510 = !{!190, !443}
!511 = !DILocation(line: 35, scope: !508)
!512 = !DILocalVariable(name: "self", arg: 1, scope: !508, file: !22, line: 35, type: !443)
!513 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Mcg128Random.next_byte", scope: !22, file: !22, line: 36, type: !514, scopeLine: 36, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!514 = !DISubroutineType(types: !515)
!515 = !{!121, !443}
!516 = !DILocation(line: 36, scope: !513)
!517 = !DILocalVariable(name: "self", arg: 1, scope: !513, file: !22, line: 36, type: !443)
!518 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Mcg64Random.set_seed", scope: !22, file: !22, line: 45, type: !519, scopeLine: 45, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!519 = !DISubroutineType(types: !520)
!520 = !{null, !521, !117}
!521 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Mcg64Random*", baseType: !522, size: 64, align: 64, dwarfAddressSpace: 0)
!522 = !DIDerivedType(tag: DW_TAG_typedef, name: "Mcg64Random", scope: !22, file: !22, line: 43, baseType: !6, align: 8)
!523 = !DILocation(line: 46, scope: !518)
!524 = !DILocalVariable(name: "self", arg: 1, scope: !518, file: !22, line: 45, type: !521)
!525 = !DILocation(line: 45, scope: !518)
!526 = !DILocalVariable(name: "seed", arg: 2, scope: !518, file: !22, line: 45, type: !117)
!527 = !DILocalVariable(name: "return_value", scope: !528, file: !22, line: 10, type: !6, align: 8)
!528 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !68, file: !68, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110, retainedNodes: !124)
!529 = !DILocation(line: 10, scope: !528, inlinedAt: !530)
!530 = !DILocation(line: 47, scope: !518)
!531 = !DILocation(line: 11, scope: !528, inlinedAt: !530)
!532 = !DILocation(line: 12, scope: !528, inlinedAt: !530)
!533 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Mcg64Random.next_bytes", scope: !22, file: !22, line: 53, type: !519, scopeLine: 53, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!534 = !DILocation(line: 54, scope: !533)
!535 = !DILocalVariable(name: "self", arg: 1, scope: !533, file: !22, line: 53, type: !521)
!536 = !DILocation(line: 53, scope: !533)
!537 = !DILocalVariable(name: "bytes", arg: 2, scope: !533, file: !22, line: 53, type: !117)
!538 = !DILocation(line: 51, scope: !539)
!539 = distinct !DILexicalBlock(scope: !533, file: !22, line: 54, column: 1)
!540 = !DILocalVariable(name: "len", scope: !541, file: !22, line: 146, type: !123, align: 8)
!541 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !96, file: !96, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110, retainedNodes: !124)
!542 = !DILocation(line: 146, scope: !541, inlinedAt: !543)
!543 = !DILocation(line: 55, scope: !533)
!544 = !DILocation(line: 148, scope: !541, inlinedAt: !543)
!545 = !DILocation(line: 148, scope: !546, inlinedAt: !543)
!546 = distinct !DILexicalBlock(scope: !541, file: !96, line: 148, column: 2)
!547 = !DILocalVariable(name: "value", scope: !548, file: !22, line: 150, type: !9, align: 4)
!548 = distinct !DILexicalBlock(scope: !546, file: !96, line: 149, column: 2)
!549 = !DILocation(line: 150, scope: !548, inlinedAt: !543)
!550 = !DILocation(line: 55, scope: !548, inlinedAt: !543)
!551 = !DILocation(line: 151, scope: !548, inlinedAt: !543)
!552 = !DILocation(line: 153, scope: !553, inlinedAt: !543)
!553 = distinct !DILexicalBlock(scope: !548, file: !96, line: 152, column: 3)
!554 = !DILocation(line: 154, scope: !553, inlinedAt: !543)
!555 = !DILocation(line: 156, scope: !548, inlinedAt: !543)
!556 = !DILocation(line: 157, scope: !548, inlinedAt: !543)
!557 = !DILocation(line: 158, scope: !548, inlinedAt: !543)
!558 = !DILocation(line: 232, scope: !559, inlinedAt: !560)
!559 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !172, file: !172, line: 229, scopeLine: 229, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!560 = !DILocation(line: 160, scope: !541, inlinedAt: !543)
!561 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Mcg64Random.next_int", scope: !22, file: !22, line: 58, type: !562, scopeLine: 58, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!562 = !DISubroutineType(types: !563)
!563 = !{!9, !521}
!564 = !DILocation(line: 59, scope: !561)
!565 = !DILocalVariable(name: "self", arg: 1, scope: !561, file: !22, line: 58, type: !521)
!566 = !DILocation(line: 58, scope: !561)
!567 = !DILocalVariable(name: "s", scope: !561, file: !22, line: 60, type: !219, align: 8)
!568 = !DILocation(line: 60, scope: !561)
!569 = !DILocalVariable(name: "result", scope: !561, file: !22, line: 61, type: !9, align: 4)
!570 = !DILocation(line: 61, scope: !561)
!571 = !DILocation(line: 62, scope: !561)
!572 = !DILocation(line: 63, scope: !561)
!573 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Mcg64Random.next_int128", scope: !22, file: !22, line: 66, type: !574, scopeLine: 66, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!574 = !DISubroutineType(types: !575)
!575 = !{!3, !521}
!576 = !DILocation(line: 66, scope: !573)
!577 = !DILocalVariable(name: "self", arg: 1, scope: !573, file: !22, line: 66, type: !521)
!578 = !DILocation(line: 66, scope: !579, inlinedAt: !576)
!579 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !96, file: !96, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!580 = !DILocation(line: 138, scope: !579, inlinedAt: !576)
!581 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Mcg64Random.next_long", scope: !22, file: !22, line: 67, type: !582, scopeLine: 67, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!582 = !DISubroutineType(types: !583)
!583 = !{!6, !521}
!584 = !DILocation(line: 67, scope: !581)
!585 = !DILocalVariable(name: "self", arg: 1, scope: !581, file: !22, line: 67, type: !521)
!586 = !DILocation(line: 67, scope: !587, inlinedAt: !584)
!587 = distinct !DISubprogram(name: "@int_to_long", linkageName: "@int_to_long", scope: !96, file: !96, line: 139, scopeLine: 139, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!588 = !DILocation(line: 139, scope: !587, inlinedAt: !584)
!589 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Mcg64Random.next_short", scope: !22, file: !22, line: 68, type: !590, scopeLine: 68, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!590 = !DISubroutineType(types: !591)
!591 = !{!190, !521}
!592 = !DILocation(line: 68, scope: !589)
!593 = !DILocalVariable(name: "self", arg: 1, scope: !589, file: !22, line: 68, type: !521)
!594 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Mcg64Random.next_byte", scope: !22, file: !22, line: 69, type: !595, scopeLine: 69, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!595 = !DISubroutineType(types: !596)
!596 = !{!121, !521}
!597 = !DILocation(line: 69, scope: !594)
!598 = !DILocalVariable(name: "self", arg: 1, scope: !594, file: !22, line: 69, type: !521)
!599 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Mcg32Random.set_seed", scope: !22, file: !22, line: 76, type: !600, scopeLine: 76, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!600 = !DISubroutineType(types: !601)
!601 = !{null, !602, !117}
!602 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Mcg32Random*", baseType: !603, size: 64, align: 64, dwarfAddressSpace: 0)
!603 = !DIDerivedType(tag: DW_TAG_typedef, name: "Mcg32Random", scope: !22, file: !22, line: 74, baseType: !9, align: 4)
!604 = !DILocation(line: 77, scope: !599)
!605 = !DILocalVariable(name: "self", arg: 1, scope: !599, file: !22, line: 76, type: !602)
!606 = !DILocation(line: 76, scope: !599)
!607 = !DILocalVariable(name: "seed", arg: 2, scope: !599, file: !22, line: 76, type: !117)
!608 = !DILocalVariable(name: "return_value", scope: !609, file: !22, line: 10, type: !9, align: 4)
!609 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !68, file: !68, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110, retainedNodes: !124)
!610 = !DILocation(line: 10, scope: !609, inlinedAt: !611)
!611 = !DILocation(line: 78, scope: !599)
!612 = !DILocation(line: 11, scope: !609, inlinedAt: !611)
!613 = !DILocation(line: 12, scope: !609, inlinedAt: !611)
!614 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Mcg32Random.next_short", scope: !22, file: !22, line: 81, type: !615, scopeLine: 81, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!615 = !DISubroutineType(types: !616)
!616 = !{!190, !602}
!617 = !DILocation(line: 82, scope: !614)
!618 = !DILocalVariable(name: "self", arg: 1, scope: !614, file: !22, line: 81, type: !602)
!619 = !DILocation(line: 81, scope: !614)
!620 = !DILocalVariable(name: "s", scope: !614, file: !22, line: 83, type: !298, align: 8)
!621 = !DILocation(line: 83, scope: !614)
!622 = !DILocalVariable(name: "result", scope: !614, file: !22, line: 84, type: !190, align: 2)
!623 = !DILocation(line: 84, scope: !614)
!624 = !DILocation(line: 85, scope: !614)
!625 = !DILocation(line: 86, scope: !614)
!626 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Mcg32Random.next_bytes", scope: !22, file: !22, line: 92, type: !600, scopeLine: 92, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!627 = !DILocation(line: 92, scope: !626)
!628 = !DILocalVariable(name: "self", arg: 1, scope: !626, file: !22, line: 92, type: !602)
!629 = !DILocalVariable(name: "bytes", arg: 2, scope: !626, file: !22, line: 92, type: !117)
!630 = !DILocation(line: 90, scope: !631)
!631 = distinct !DILexicalBlock(scope: !626, file: !22, line: 92, column: 65)
!632 = !DILocalVariable(name: "len", scope: !633, file: !22, line: 146, type: !123, align: 8)
!633 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !96, file: !96, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110, retainedNodes: !124)
!634 = !DILocation(line: 146, scope: !633, inlinedAt: !627)
!635 = !DILocation(line: 148, scope: !633, inlinedAt: !627)
!636 = !DILocation(line: 148, scope: !637, inlinedAt: !627)
!637 = distinct !DILexicalBlock(scope: !633, file: !96, line: 148, column: 2)
!638 = !DILocalVariable(name: "value", scope: !639, file: !22, line: 150, type: !190, align: 2)
!639 = distinct !DILexicalBlock(scope: !637, file: !96, line: 149, column: 2)
!640 = !DILocation(line: 150, scope: !639, inlinedAt: !627)
!641 = !DILocation(line: 92, scope: !639, inlinedAt: !627)
!642 = !DILocation(line: 151, scope: !639, inlinedAt: !627)
!643 = !DILocation(line: 153, scope: !644, inlinedAt: !627)
!644 = distinct !DILexicalBlock(scope: !639, file: !96, line: 152, column: 3)
!645 = !DILocation(line: 154, scope: !644, inlinedAt: !627)
!646 = !DILocation(line: 156, scope: !639, inlinedAt: !627)
!647 = !DILocation(line: 157, scope: !639, inlinedAt: !627)
!648 = !DILocation(line: 158, scope: !639, inlinedAt: !627)
!649 = !DILocation(line: 232, scope: !650, inlinedAt: !651)
!650 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !172, file: !172, line: 229, scopeLine: 229, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!651 = !DILocation(line: 160, scope: !633, inlinedAt: !627)
!652 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Mcg32Random.next_int128", scope: !22, file: !22, line: 93, type: !653, scopeLine: 93, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!653 = !DISubroutineType(types: !654)
!654 = !{!3, !602}
!655 = !DILocation(line: 93, scope: !652)
!656 = !DILocalVariable(name: "self", arg: 1, scope: !652, file: !22, line: 93, type: !602)
!657 = !DILocation(line: 93, scope: !658, inlinedAt: !655)
!658 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !96, file: !96, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!659 = !DILocation(line: 138, scope: !658, inlinedAt: !655)
!660 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Mcg32Random.next_long", scope: !22, file: !22, line: 94, type: !661, scopeLine: 94, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!661 = !DISubroutineType(types: !662)
!662 = !{!6, !602}
!663 = !DILocation(line: 94, scope: !660)
!664 = !DILocalVariable(name: "self", arg: 1, scope: !660, file: !22, line: 94, type: !602)
!665 = !DILocation(line: 94, scope: !666, inlinedAt: !663)
!666 = distinct !DISubprogram(name: "@int_to_long", linkageName: "@int_to_long", scope: !96, file: !96, line: 139, scopeLine: 139, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!667 = !DILocation(line: 139, scope: !666, inlinedAt: !663)
!668 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Mcg32Random.next_int", scope: !22, file: !22, line: 95, type: !669, scopeLine: 95, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!669 = !DISubroutineType(types: !670)
!670 = !{!9, !602}
!671 = !DILocation(line: 95, scope: !668)
!672 = !DILocalVariable(name: "self", arg: 1, scope: !668, file: !22, line: 95, type: !602)
!673 = !DILocation(line: 95, scope: !674, inlinedAt: !671)
!674 = distinct !DISubprogram(name: "@short_to_int", linkageName: "@short_to_int", scope: !96, file: !96, line: 140, scopeLine: 140, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!675 = !DILocation(line: 140, scope: !674, inlinedAt: !671)
!676 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Mcg32Random.next_byte", scope: !22, file: !22, line: 96, type: !677, scopeLine: 96, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!677 = !DISubroutineType(types: !678)
!678 = !{!121, !602}
!679 = !DILocation(line: 96, scope: !676)
!680 = !DILocalVariable(name: "self", arg: 1, scope: !676, file: !22, line: 96, type: !602)
!681 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Mcg16Random.set_seed", scope: !22, file: !22, line: 102, type: !682, scopeLine: 102, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!682 = !DISubroutineType(types: !683)
!683 = !{null, !684, !117}
!684 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Mcg16Random*", baseType: !685, size: 64, align: 64, dwarfAddressSpace: 0)
!685 = !DIDerivedType(tag: DW_TAG_typedef, name: "Mcg16Random", scope: !22, file: !22, line: 100, baseType: !190, align: 2)
!686 = !DILocation(line: 103, scope: !681)
!687 = !DILocalVariable(name: "self", arg: 1, scope: !681, file: !22, line: 102, type: !684)
!688 = !DILocation(line: 102, scope: !681)
!689 = !DILocalVariable(name: "seed", arg: 2, scope: !681, file: !22, line: 102, type: !117)
!690 = !DILocalVariable(name: "return_value", scope: !691, file: !22, line: 10, type: !190, align: 2)
!691 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !68, file: !68, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110, retainedNodes: !124)
!692 = !DILocation(line: 10, scope: !691, inlinedAt: !693)
!693 = !DILocation(line: 104, scope: !681)
!694 = !DILocation(line: 11, scope: !691, inlinedAt: !693)
!695 = !DILocation(line: 12, scope: !691, inlinedAt: !693)
!696 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Mcg16Random.next_byte", scope: !22, file: !22, line: 107, type: !697, scopeLine: 107, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!697 = !DISubroutineType(types: !698)
!698 = !{!121, !684}
!699 = !DILocation(line: 108, scope: !696)
!700 = !DILocalVariable(name: "self", arg: 1, scope: !696, file: !22, line: 107, type: !684)
!701 = !DILocation(line: 107, scope: !696)
!702 = !DILocalVariable(name: "s", scope: !696, file: !22, line: 109, type: !378, align: 8)
!703 = !DILocation(line: 109, scope: !696)
!704 = !DILocalVariable(name: "result", scope: !696, file: !22, line: 110, type: !121, align: 1)
!705 = !DILocation(line: 110, scope: !696)
!706 = !DILocation(line: 111, scope: !696)
!707 = !DILocation(line: 112, scope: !696)
!708 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Mcg16Random.next_bytes", scope: !22, file: !22, line: 115, type: !682, scopeLine: 115, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!709 = !DILocation(line: 115, scope: !708)
!710 = !DILocalVariable(name: "self", arg: 1, scope: !708, file: !22, line: 115, type: !684)
!711 = !DILocalVariable(name: "bytes", arg: 2, scope: !708, file: !22, line: 115, type: !117)
!712 = !DILocalVariable(name: "len", scope: !713, file: !22, line: 146, type: !123, align: 8)
!713 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !96, file: !96, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110, retainedNodes: !124)
!714 = !DILocation(line: 146, scope: !713, inlinedAt: !709)
!715 = !DILocation(line: 148, scope: !713, inlinedAt: !709)
!716 = !DILocation(line: 148, scope: !717, inlinedAt: !709)
!717 = distinct !DILexicalBlock(scope: !713, file: !96, line: 148, column: 2)
!718 = !DILocalVariable(name: "value", scope: !719, file: !22, line: 150, type: !121, align: 1)
!719 = distinct !DILexicalBlock(scope: !717, file: !96, line: 149, column: 2)
!720 = !DILocation(line: 150, scope: !719, inlinedAt: !709)
!721 = !DILocation(line: 115, scope: !719, inlinedAt: !709)
!722 = !DILocation(line: 151, scope: !719, inlinedAt: !709)
!723 = !DILocation(line: 153, scope: !724, inlinedAt: !709)
!724 = distinct !DILexicalBlock(scope: !719, file: !96, line: 152, column: 3)
!725 = !DILocation(line: 154, scope: !724, inlinedAt: !709)
!726 = !DILocation(line: 156, scope: !719, inlinedAt: !709)
!727 = !DILocation(line: 157, scope: !719, inlinedAt: !709)
!728 = !DILocation(line: 158, scope: !719, inlinedAt: !709)
!729 = !DILocation(line: 232, scope: !730, inlinedAt: !731)
!730 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !172, file: !172, line: 229, scopeLine: 229, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!731 = !DILocation(line: 160, scope: !713, inlinedAt: !709)
!732 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Mcg16Random.next_int128", scope: !22, file: !22, line: 116, type: !733, scopeLine: 116, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!733 = !DISubroutineType(types: !734)
!734 = !{!3, !684}
!735 = !DILocation(line: 116, scope: !732)
!736 = !DILocalVariable(name: "self", arg: 1, scope: !732, file: !22, line: 116, type: !684)
!737 = !DILocation(line: 116, scope: !738, inlinedAt: !735)
!738 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !96, file: !96, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!739 = !DILocation(line: 138, scope: !738, inlinedAt: !735)
!740 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Mcg16Random.next_long", scope: !22, file: !22, line: 117, type: !741, scopeLine: 117, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!741 = !DISubroutineType(types: !742)
!742 = !{!6, !684}
!743 = !DILocation(line: 117, scope: !740)
!744 = !DILocalVariable(name: "self", arg: 1, scope: !740, file: !22, line: 117, type: !684)
!745 = !DILocation(line: 117, scope: !746, inlinedAt: !743)
!746 = distinct !DISubprogram(name: "@int_to_long", linkageName: "@int_to_long", scope: !96, file: !96, line: 139, scopeLine: 139, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!747 = !DILocation(line: 139, scope: !746, inlinedAt: !743)
!748 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Mcg16Random.next_int", scope: !22, file: !22, line: 118, type: !749, scopeLine: 118, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!749 = !DISubroutineType(types: !750)
!750 = !{!9, !684}
!751 = !DILocation(line: 118, scope: !748)
!752 = !DILocalVariable(name: "self", arg: 1, scope: !748, file: !22, line: 118, type: !684)
!753 = !DILocation(line: 118, scope: !754, inlinedAt: !751)
!754 = distinct !DISubprogram(name: "@short_to_int", linkageName: "@short_to_int", scope: !96, file: !96, line: 140, scopeLine: 140, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!755 = !DILocation(line: 140, scope: !754, inlinedAt: !751)
!756 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Mcg16Random.next_short", scope: !22, file: !22, line: 119, type: !757, scopeLine: 119, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!757 = !DISubroutineType(types: !758)
!758 = !{!190, !684}
!759 = !DILocation(line: 119, scope: !756)
!760 = !DILocalVariable(name: "self", arg: 1, scope: !756, file: !22, line: 119, type: !684)
!761 = !DILocation(line: 119, scope: !762, inlinedAt: !759)
!762 = distinct !DISubprogram(name: "@char_to_short", linkageName: "@char_to_short", scope: !96, file: !96, line: 141, scopeLine: 141, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!763 = !DILocation(line: 141, scope: !762, inlinedAt: !759)
!764 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Msws128Random.set_seed", scope: !31, file: !31, line: 17, type: !765, scopeLine: 17, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!765 = !DISubroutineType(types: !766)
!766 = !{null, !767, !117}
!767 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Msws128Random*", baseType: !768, size: 64, align: 64, dwarfAddressSpace: 0)
!768 = !DICompositeType(tag: DW_TAG_structure_type, name: "Msws128Random", scope: !31, file: !31, line: 11, size: 512, align: 128, elements: !769, identifier: "std.math.random.Msws128Random")
!769 = !{!770, !771, !772, !773}
!770 = !DIDerivedType(tag: DW_TAG_member, name: "state0", scope: !768, file: !31, line: 13, baseType: !3, size: 128, align: 128)
!771 = !DIDerivedType(tag: DW_TAG_member, name: "state1", scope: !768, file: !31, line: 13, baseType: !3, size: 128, align: 128, offset: 128)
!772 = !DIDerivedType(tag: DW_TAG_member, name: "weyl0", scope: !768, file: !31, line: 14, baseType: !3, size: 128, align: 128, offset: 256)
!773 = !DIDerivedType(tag: DW_TAG_member, name: "weyl1", scope: !768, file: !31, line: 14, baseType: !3, size: 128, align: 128, offset: 384)
!774 = !DILocation(line: 18, scope: !764)
!775 = !DILocalVariable(name: "self", arg: 1, scope: !764, file: !31, line: 17, type: !767)
!776 = !DILocation(line: 17, scope: !764)
!777 = !DILocalVariable(name: "input", arg: 2, scope: !764, file: !31, line: 17, type: !117)
!778 = !DILocalVariable(name: "return_value", scope: !779, file: !31, line: 10, type: !780, align: 16)
!779 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !68, file: !68, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110, retainedNodes: !124)
!780 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3, size: 512, align: 128, elements: !99)
!781 = !DILocation(line: 10, scope: !779, inlinedAt: !782)
!782 = !DILocation(line: 19, scope: !764)
!783 = !DILocation(line: 11, scope: !779, inlinedAt: !782)
!784 = !DILocation(line: 281, scope: !785, inlinedAt: !782)
!785 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !172, file: !172, line: 278, scopeLine: 278, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!786 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Msws128Random.next_int128", scope: !31, file: !31, line: 23, type: !787, scopeLine: 23, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!787 = !DISubroutineType(types: !788)
!788 = !{!3, !767}
!789 = !DILocation(line: 24, scope: !786)
!790 = !DILocalVariable(name: "self", arg: 1, scope: !786, file: !31, line: 23, type: !767)
!791 = !DILocation(line: 23, scope: !786)
!792 = !DILocalVariable(name: "s0", scope: !786, file: !31, line: 25, type: !3, align: 16)
!793 = !DILocation(line: 25, scope: !786)
!794 = !DILocation(line: 26, scope: !786)
!795 = !DILocation(line: 27, scope: !786)
!796 = !DILocation(line: 163, scope: !797, inlinedAt: !795)
!797 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !798, file: !798, line: 163, scopeLine: 163, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!798 = !DIFile(filename: "bits.c3", directory: "C:/Compilers/C3/lib/std")
!799 = !DILocation(line: 28, scope: !786)
!800 = !DILocation(line: 30, scope: !786)
!801 = !DILocalVariable(name: "s1", scope: !786, file: !31, line: 31, type: !3, align: 16)
!802 = !DILocation(line: 31, scope: !786)
!803 = !DILocation(line: 32, scope: !786)
!804 = !DILocation(line: 163, scope: !805, inlinedAt: !803)
!805 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !798, file: !798, line: 163, scopeLine: 163, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!806 = !DILocation(line: 33, scope: !786)
!807 = !DILocation(line: 35, scope: !786)
!808 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Msws128Random.next_bytes", scope: !31, file: !31, line: 41, type: !765, scopeLine: 41, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!809 = !DILocation(line: 41, scope: !808)
!810 = !DILocalVariable(name: "self", arg: 1, scope: !808, file: !31, line: 41, type: !767)
!811 = !DILocalVariable(name: "bytes", arg: 2, scope: !808, file: !31, line: 41, type: !117)
!812 = !DILocation(line: 39, scope: !813)
!813 = distinct !DILexicalBlock(scope: !808, file: !31, line: 41, column: 67)
!814 = !DILocalVariable(name: "len", scope: !815, file: !31, line: 146, type: !123, align: 8)
!815 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !96, file: !96, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110, retainedNodes: !124)
!816 = !DILocation(line: 146, scope: !815, inlinedAt: !809)
!817 = !DILocation(line: 148, scope: !815, inlinedAt: !809)
!818 = !DILocation(line: 148, scope: !819, inlinedAt: !809)
!819 = distinct !DILexicalBlock(scope: !815, file: !96, line: 148, column: 2)
!820 = !DILocalVariable(name: "value", scope: !821, file: !31, line: 150, type: !3, align: 16)
!821 = distinct !DILexicalBlock(scope: !819, file: !96, line: 149, column: 2)
!822 = !DILocation(line: 150, scope: !821, inlinedAt: !809)
!823 = !DILocation(line: 41, scope: !821, inlinedAt: !809)
!824 = !DILocation(line: 151, scope: !821, inlinedAt: !809)
!825 = !DILocation(line: 153, scope: !826, inlinedAt: !809)
!826 = distinct !DILexicalBlock(scope: !821, file: !96, line: 152, column: 3)
!827 = !DILocation(line: 154, scope: !826, inlinedAt: !809)
!828 = !DILocation(line: 156, scope: !821, inlinedAt: !809)
!829 = !DILocation(line: 157, scope: !821, inlinedAt: !809)
!830 = !DILocation(line: 158, scope: !821, inlinedAt: !809)
!831 = !DILocation(line: 232, scope: !832, inlinedAt: !833)
!832 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !172, file: !172, line: 229, scopeLine: 229, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!833 = !DILocation(line: 160, scope: !815, inlinedAt: !809)
!834 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Msws128Random.next_long", scope: !31, file: !31, line: 42, type: !835, scopeLine: 42, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!835 = !DISubroutineType(types: !836)
!836 = !{!6, !767}
!837 = !DILocation(line: 42, scope: !834)
!838 = !DILocalVariable(name: "self", arg: 1, scope: !834, file: !31, line: 42, type: !767)
!839 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Msws128Random.next_int", scope: !31, file: !31, line: 43, type: !840, scopeLine: 43, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!840 = !DISubroutineType(types: !841)
!841 = !{!9, !767}
!842 = !DILocation(line: 43, scope: !839)
!843 = !DILocalVariable(name: "self", arg: 1, scope: !839, file: !31, line: 43, type: !767)
!844 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Msws128Random.next_short", scope: !31, file: !31, line: 44, type: !845, scopeLine: 44, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!845 = !DISubroutineType(types: !846)
!846 = !{!190, !767}
!847 = !DILocation(line: 44, scope: !844)
!848 = !DILocalVariable(name: "self", arg: 1, scope: !844, file: !31, line: 44, type: !767)
!849 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Msws128Random.next_byte", scope: !31, file: !31, line: 45, type: !850, scopeLine: 45, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!850 = !DISubroutineType(types: !851)
!851 = !{!121, !767}
!852 = !DILocation(line: 45, scope: !849)
!853 = !DILocalVariable(name: "self", arg: 1, scope: !849, file: !31, line: 45, type: !767)
!854 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Msws64Random.set_seed", scope: !31, file: !31, line: 55, type: !855, scopeLine: 55, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!855 = !DISubroutineType(types: !856)
!856 = !{null, !857, !117}
!857 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Msws64Random*", baseType: !858, size: 64, align: 64, dwarfAddressSpace: 0)
!858 = !DICompositeType(tag: DW_TAG_structure_type, name: "Msws64Random", scope: !31, file: !31, line: 49, size: 256, align: 64, elements: !859, identifier: "std.math.random.Msws64Random")
!859 = !{!860, !861, !862, !863}
!860 = !DIDerivedType(tag: DW_TAG_member, name: "state0", scope: !858, file: !31, line: 51, baseType: !6, size: 64, align: 64)
!861 = !DIDerivedType(tag: DW_TAG_member, name: "state1", scope: !858, file: !31, line: 51, baseType: !6, size: 64, align: 64, offset: 64)
!862 = !DIDerivedType(tag: DW_TAG_member, name: "weyl0", scope: !858, file: !31, line: 52, baseType: !6, size: 64, align: 64, offset: 128)
!863 = !DIDerivedType(tag: DW_TAG_member, name: "weyl1", scope: !858, file: !31, line: 52, baseType: !6, size: 64, align: 64, offset: 192)
!864 = !DILocation(line: 56, scope: !854)
!865 = !DILocalVariable(name: "self", arg: 1, scope: !854, file: !31, line: 55, type: !857)
!866 = !DILocation(line: 55, scope: !854)
!867 = !DILocalVariable(name: "input", arg: 2, scope: !854, file: !31, line: 55, type: !117)
!868 = !DILocalVariable(name: "return_value", scope: !869, file: !31, line: 10, type: !98, align: 16)
!869 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !68, file: !68, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110, retainedNodes: !124)
!870 = !DILocation(line: 10, scope: !869, inlinedAt: !871)
!871 = !DILocation(line: 57, scope: !854)
!872 = !DILocation(line: 11, scope: !869, inlinedAt: !871)
!873 = !DILocation(line: 281, scope: !874, inlinedAt: !871)
!874 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !172, file: !172, line: 278, scopeLine: 278, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!875 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Msws64Random.next_long", scope: !31, file: !31, line: 60, type: !876, scopeLine: 60, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!876 = !DISubroutineType(types: !877)
!877 = !{!6, !857}
!878 = !DILocation(line: 61, scope: !875)
!879 = !DILocalVariable(name: "self", arg: 1, scope: !875, file: !31, line: 60, type: !857)
!880 = !DILocation(line: 60, scope: !875)
!881 = !DILocalVariable(name: "s0", scope: !875, file: !31, line: 62, type: !6, align: 8)
!882 = !DILocation(line: 62, scope: !875)
!883 = !DILocation(line: 63, scope: !875)
!884 = !DILocation(line: 64, scope: !875)
!885 = !DILocation(line: 147, scope: !886, inlinedAt: !884)
!886 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !798, file: !798, line: 147, scopeLine: 147, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!887 = !DILocation(line: 65, scope: !875)
!888 = !DILocation(line: 67, scope: !875)
!889 = !DILocalVariable(name: "s1", scope: !875, file: !31, line: 68, type: !6, align: 8)
!890 = !DILocation(line: 68, scope: !875)
!891 = !DILocation(line: 69, scope: !875)
!892 = !DILocation(line: 147, scope: !893, inlinedAt: !891)
!893 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !798, file: !798, line: 147, scopeLine: 147, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!894 = !DILocation(line: 70, scope: !875)
!895 = !DILocation(line: 72, scope: !875)
!896 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Msws64Random.next_bytes", scope: !31, file: !31, line: 78, type: !855, scopeLine: 78, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!897 = !DILocation(line: 78, scope: !896)
!898 = !DILocalVariable(name: "self", arg: 1, scope: !896, file: !31, line: 78, type: !857)
!899 = !DILocalVariable(name: "bytes", arg: 2, scope: !896, file: !31, line: 78, type: !117)
!900 = !DILocation(line: 76, scope: !901)
!901 = distinct !DILexicalBlock(scope: !896, file: !31, line: 78, column: 66)
!902 = !DILocalVariable(name: "len", scope: !903, file: !31, line: 146, type: !123, align: 8)
!903 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !96, file: !96, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110, retainedNodes: !124)
!904 = !DILocation(line: 146, scope: !903, inlinedAt: !897)
!905 = !DILocation(line: 148, scope: !903, inlinedAt: !897)
!906 = !DILocation(line: 148, scope: !907, inlinedAt: !897)
!907 = distinct !DILexicalBlock(scope: !903, file: !96, line: 148, column: 2)
!908 = !DILocalVariable(name: "value", scope: !909, file: !31, line: 150, type: !6, align: 8)
!909 = distinct !DILexicalBlock(scope: !907, file: !96, line: 149, column: 2)
!910 = !DILocation(line: 150, scope: !909, inlinedAt: !897)
!911 = !DILocation(line: 78, scope: !909, inlinedAt: !897)
!912 = !DILocation(line: 151, scope: !909, inlinedAt: !897)
!913 = !DILocation(line: 153, scope: !914, inlinedAt: !897)
!914 = distinct !DILexicalBlock(scope: !909, file: !96, line: 152, column: 3)
!915 = !DILocation(line: 154, scope: !914, inlinedAt: !897)
!916 = !DILocation(line: 156, scope: !909, inlinedAt: !897)
!917 = !DILocation(line: 157, scope: !909, inlinedAt: !897)
!918 = !DILocation(line: 158, scope: !909, inlinedAt: !897)
!919 = !DILocation(line: 232, scope: !920, inlinedAt: !921)
!920 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !172, file: !172, line: 229, scopeLine: 229, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!921 = !DILocation(line: 160, scope: !903, inlinedAt: !897)
!922 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Msws64Random.next_int128", scope: !31, file: !31, line: 79, type: !923, scopeLine: 79, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!923 = !DISubroutineType(types: !924)
!924 = !{!3, !857}
!925 = !DILocation(line: 79, scope: !922)
!926 = !DILocalVariable(name: "self", arg: 1, scope: !922, file: !31, line: 79, type: !857)
!927 = !DILocation(line: 79, scope: !928, inlinedAt: !925)
!928 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !96, file: !96, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!929 = !DILocation(line: 138, scope: !928, inlinedAt: !925)
!930 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Msws64Random.next_int", scope: !31, file: !31, line: 80, type: !931, scopeLine: 80, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!931 = !DISubroutineType(types: !932)
!932 = !{!9, !857}
!933 = !DILocation(line: 80, scope: !930)
!934 = !DILocalVariable(name: "self", arg: 1, scope: !930, file: !31, line: 80, type: !857)
!935 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Msws64Random.next_short", scope: !31, file: !31, line: 81, type: !936, scopeLine: 81, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!936 = !DISubroutineType(types: !937)
!937 = !{!190, !857}
!938 = !DILocation(line: 81, scope: !935)
!939 = !DILocalVariable(name: "self", arg: 1, scope: !935, file: !31, line: 81, type: !857)
!940 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Msws64Random.next_byte", scope: !31, file: !31, line: 82, type: !941, scopeLine: 82, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!941 = !DISubroutineType(types: !942)
!942 = !{!121, !857}
!943 = !DILocation(line: 82, scope: !940)
!944 = !DILocalVariable(name: "self", arg: 1, scope: !940, file: !31, line: 82, type: !857)
!945 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Msws32Random.set_seed", scope: !31, file: !31, line: 91, type: !946, scopeLine: 91, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!946 = !DISubroutineType(types: !947)
!947 = !{null, !948, !117}
!948 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Msws32Random*", baseType: !949, size: 64, align: 64, dwarfAddressSpace: 0)
!949 = !DICompositeType(tag: DW_TAG_structure_type, name: "Msws32Random", scope: !31, file: !31, line: 85, size: 128, align: 32, elements: !950, identifier: "std.math.random.Msws32Random")
!950 = !{!951, !952, !953, !954}
!951 = !DIDerivedType(tag: DW_TAG_member, name: "state0", scope: !949, file: !31, line: 87, baseType: !9, size: 32, align: 32)
!952 = !DIDerivedType(tag: DW_TAG_member, name: "state1", scope: !949, file: !31, line: 87, baseType: !9, size: 32, align: 32, offset: 32)
!953 = !DIDerivedType(tag: DW_TAG_member, name: "weyl0", scope: !949, file: !31, line: 88, baseType: !9, size: 32, align: 32, offset: 64)
!954 = !DIDerivedType(tag: DW_TAG_member, name: "weyl1", scope: !949, file: !31, line: 88, baseType: !9, size: 32, align: 32, offset: 96)
!955 = !DILocation(line: 92, scope: !945)
!956 = !DILocalVariable(name: "self", arg: 1, scope: !945, file: !31, line: 91, type: !948)
!957 = !DILocation(line: 91, scope: !945)
!958 = !DILocalVariable(name: "input", arg: 2, scope: !945, file: !31, line: 91, type: !117)
!959 = !DILocalVariable(name: "return_value", scope: !960, file: !31, line: 10, type: !961, align: 16)
!960 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !68, file: !68, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110, retainedNodes: !124)
!961 = !DICompositeType(tag: DW_TAG_array_type, baseType: !9, size: 128, align: 32, elements: !99)
!962 = !DILocation(line: 10, scope: !960, inlinedAt: !963)
!963 = !DILocation(line: 93, scope: !945)
!964 = !DILocation(line: 11, scope: !960, inlinedAt: !963)
!965 = !DILocation(line: 281, scope: !966, inlinedAt: !963)
!966 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !172, file: !172, line: 278, scopeLine: 278, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!967 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Msws32Random.next_int", scope: !31, file: !31, line: 97, type: !968, scopeLine: 97, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!968 = !DISubroutineType(types: !969)
!969 = !{!9, !948}
!970 = !DILocation(line: 98, scope: !967)
!971 = !DILocalVariable(name: "self", arg: 1, scope: !967, file: !31, line: 97, type: !948)
!972 = !DILocation(line: 97, scope: !967)
!973 = !DILocalVariable(name: "s0", scope: !967, file: !31, line: 99, type: !9, align: 4)
!974 = !DILocation(line: 99, scope: !967)
!975 = !DILocation(line: 100, scope: !967)
!976 = !DILocation(line: 101, scope: !967)
!977 = !DILocation(line: 99, scope: !978, inlinedAt: !976)
!978 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !798, file: !798, line: 99, scopeLine: 99, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!979 = !DILocation(line: 102, scope: !967)
!980 = !DILocation(line: 104, scope: !967)
!981 = !DILocalVariable(name: "s1", scope: !967, file: !31, line: 105, type: !9, align: 4)
!982 = !DILocation(line: 105, scope: !967)
!983 = !DILocation(line: 106, scope: !967)
!984 = !DILocation(line: 99, scope: !985, inlinedAt: !983)
!985 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !798, file: !798, line: 99, scopeLine: 99, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!986 = !DILocation(line: 107, scope: !967)
!987 = !DILocation(line: 109, scope: !967)
!988 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Msws32Random.next_bytes", scope: !31, file: !31, line: 115, type: !946, scopeLine: 115, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!989 = !DILocation(line: 115, scope: !988)
!990 = !DILocalVariable(name: "self", arg: 1, scope: !988, file: !31, line: 115, type: !948)
!991 = !DILocalVariable(name: "bytes", arg: 2, scope: !988, file: !31, line: 115, type: !117)
!992 = !DILocation(line: 113, scope: !993)
!993 = distinct !DILexicalBlock(scope: !988, file: !31, line: 115, column: 66)
!994 = !DILocalVariable(name: "len", scope: !995, file: !31, line: 146, type: !123, align: 8)
!995 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !96, file: !96, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110, retainedNodes: !124)
!996 = !DILocation(line: 146, scope: !995, inlinedAt: !989)
!997 = !DILocation(line: 148, scope: !995, inlinedAt: !989)
!998 = !DILocation(line: 148, scope: !999, inlinedAt: !989)
!999 = distinct !DILexicalBlock(scope: !995, file: !96, line: 148, column: 2)
!1000 = !DILocalVariable(name: "value", scope: !1001, file: !31, line: 150, type: !9, align: 4)
!1001 = distinct !DILexicalBlock(scope: !999, file: !96, line: 149, column: 2)
!1002 = !DILocation(line: 150, scope: !1001, inlinedAt: !989)
!1003 = !DILocation(line: 115, scope: !1001, inlinedAt: !989)
!1004 = !DILocation(line: 151, scope: !1001, inlinedAt: !989)
!1005 = !DILocation(line: 153, scope: !1006, inlinedAt: !989)
!1006 = distinct !DILexicalBlock(scope: !1001, file: !96, line: 152, column: 3)
!1007 = !DILocation(line: 154, scope: !1006, inlinedAt: !989)
!1008 = !DILocation(line: 156, scope: !1001, inlinedAt: !989)
!1009 = !DILocation(line: 157, scope: !1001, inlinedAt: !989)
!1010 = !DILocation(line: 158, scope: !1001, inlinedAt: !989)
!1011 = !DILocation(line: 232, scope: !1012, inlinedAt: !1013)
!1012 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !172, file: !172, line: 229, scopeLine: 229, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!1013 = !DILocation(line: 160, scope: !995, inlinedAt: !989)
!1014 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Msws32Random.next_int128", scope: !31, file: !31, line: 116, type: !1015, scopeLine: 116, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!1015 = !DISubroutineType(types: !1016)
!1016 = !{!3, !948}
!1017 = !DILocation(line: 116, scope: !1014)
!1018 = !DILocalVariable(name: "self", arg: 1, scope: !1014, file: !31, line: 116, type: !948)
!1019 = !DILocation(line: 116, scope: !1020, inlinedAt: !1017)
!1020 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !96, file: !96, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!1021 = !DILocation(line: 138, scope: !1020, inlinedAt: !1017)
!1022 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Msws32Random.next_long", scope: !31, file: !31, line: 117, type: !1023, scopeLine: 117, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!1023 = !DISubroutineType(types: !1024)
!1024 = !{!6, !948}
!1025 = !DILocation(line: 117, scope: !1022)
!1026 = !DILocalVariable(name: "self", arg: 1, scope: !1022, file: !31, line: 117, type: !948)
!1027 = !DILocation(line: 117, scope: !1028, inlinedAt: !1025)
!1028 = distinct !DISubprogram(name: "@int_to_long", linkageName: "@int_to_long", scope: !96, file: !96, line: 139, scopeLine: 139, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!1029 = !DILocation(line: 139, scope: !1028, inlinedAt: !1025)
!1030 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Msws32Random.next_short", scope: !31, file: !31, line: 118, type: !1031, scopeLine: 118, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!1031 = !DISubroutineType(types: !1032)
!1032 = !{!190, !948}
!1033 = !DILocation(line: 118, scope: !1030)
!1034 = !DILocalVariable(name: "self", arg: 1, scope: !1030, file: !31, line: 118, type: !948)
!1035 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Msws32Random.next_byte", scope: !31, file: !31, line: 119, type: !1036, scopeLine: 119, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!1036 = !DISubroutineType(types: !1037)
!1037 = !{!121, !948}
!1038 = !DILocation(line: 119, scope: !1035)
!1039 = !DILocalVariable(name: "self", arg: 1, scope: !1035, file: !31, line: 119, type: !948)
!1040 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Msws16Random.set_seed", scope: !31, file: !31, line: 129, type: !1041, scopeLine: 129, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!1041 = !DISubroutineType(types: !1042)
!1042 = !{null, !1043, !117}
!1043 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Msws16Random*", baseType: !1044, size: 64, align: 64, dwarfAddressSpace: 0)
!1044 = !DICompositeType(tag: DW_TAG_structure_type, name: "Msws16Random", scope: !31, file: !31, line: 123, size: 64, align: 16, elements: !1045, identifier: "std.math.random.Msws16Random")
!1045 = !{!1046, !1047, !1048, !1049}
!1046 = !DIDerivedType(tag: DW_TAG_member, name: "state0", scope: !1044, file: !31, line: 125, baseType: !190, size: 16, align: 16)
!1047 = !DIDerivedType(tag: DW_TAG_member, name: "state1", scope: !1044, file: !31, line: 125, baseType: !190, size: 16, align: 16, offset: 16)
!1048 = !DIDerivedType(tag: DW_TAG_member, name: "weyl0", scope: !1044, file: !31, line: 126, baseType: !190, size: 16, align: 16, offset: 32)
!1049 = !DIDerivedType(tag: DW_TAG_member, name: "weyl1", scope: !1044, file: !31, line: 126, baseType: !190, size: 16, align: 16, offset: 48)
!1050 = !DILocation(line: 130, scope: !1040)
!1051 = !DILocalVariable(name: "self", arg: 1, scope: !1040, file: !31, line: 129, type: !1043)
!1052 = !DILocation(line: 129, scope: !1040)
!1053 = !DILocalVariable(name: "input", arg: 2, scope: !1040, file: !31, line: 129, type: !117)
!1054 = !DILocalVariable(name: "return_value", scope: !1055, file: !31, line: 10, type: !1056, align: 2)
!1055 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !68, file: !68, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110, retainedNodes: !124)
!1056 = !DICompositeType(tag: DW_TAG_array_type, baseType: !190, size: 64, align: 16, elements: !99)
!1057 = !DILocation(line: 10, scope: !1055, inlinedAt: !1058)
!1058 = !DILocation(line: 131, scope: !1040)
!1059 = !DILocation(line: 11, scope: !1055, inlinedAt: !1058)
!1060 = !DILocation(line: 281, scope: !1061, inlinedAt: !1058)
!1061 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !172, file: !172, line: 278, scopeLine: 278, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!1062 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Msws16Random.next_short", scope: !31, file: !31, line: 135, type: !1063, scopeLine: 135, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!1063 = !DISubroutineType(types: !1064)
!1064 = !{!190, !1043}
!1065 = !DILocation(line: 136, scope: !1062)
!1066 = !DILocalVariable(name: "self", arg: 1, scope: !1062, file: !31, line: 135, type: !1043)
!1067 = !DILocation(line: 135, scope: !1062)
!1068 = !DILocalVariable(name: "s0", scope: !1062, file: !31, line: 137, type: !190, align: 2)
!1069 = !DILocation(line: 137, scope: !1062)
!1070 = !DILocation(line: 138, scope: !1062)
!1071 = !DILocation(line: 139, scope: !1062)
!1072 = !DILocation(line: 115, scope: !1073, inlinedAt: !1071)
!1073 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !798, file: !798, line: 115, scopeLine: 115, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!1074 = !DILocation(line: 140, scope: !1062)
!1075 = !DILocation(line: 142, scope: !1062)
!1076 = !DILocalVariable(name: "s1", scope: !1062, file: !31, line: 143, type: !190, align: 2)
!1077 = !DILocation(line: 143, scope: !1062)
!1078 = !DILocation(line: 144, scope: !1062)
!1079 = !DILocation(line: 115, scope: !1080, inlinedAt: !1078)
!1080 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !798, file: !798, line: 115, scopeLine: 115, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!1081 = !DILocation(line: 145, scope: !1062)
!1082 = !DILocation(line: 147, scope: !1062)
!1083 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Msws16Random.next_bytes", scope: !31, file: !31, line: 153, type: !1041, scopeLine: 153, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!1084 = !DILocation(line: 153, scope: !1083)
!1085 = !DILocalVariable(name: "self", arg: 1, scope: !1083, file: !31, line: 153, type: !1043)
!1086 = !DILocalVariable(name: "bytes", arg: 2, scope: !1083, file: !31, line: 153, type: !117)
!1087 = !DILocation(line: 151, scope: !1088)
!1088 = distinct !DILexicalBlock(scope: !1083, file: !31, line: 153, column: 66)
!1089 = !DILocalVariable(name: "len", scope: !1090, file: !31, line: 146, type: !123, align: 8)
!1090 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !96, file: !96, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110, retainedNodes: !124)
!1091 = !DILocation(line: 146, scope: !1090, inlinedAt: !1084)
!1092 = !DILocation(line: 148, scope: !1090, inlinedAt: !1084)
!1093 = !DILocation(line: 148, scope: !1094, inlinedAt: !1084)
!1094 = distinct !DILexicalBlock(scope: !1090, file: !96, line: 148, column: 2)
!1095 = !DILocalVariable(name: "value", scope: !1096, file: !31, line: 150, type: !190, align: 2)
!1096 = distinct !DILexicalBlock(scope: !1094, file: !96, line: 149, column: 2)
!1097 = !DILocation(line: 150, scope: !1096, inlinedAt: !1084)
!1098 = !DILocation(line: 153, scope: !1096, inlinedAt: !1084)
!1099 = !DILocation(line: 151, scope: !1096, inlinedAt: !1084)
!1100 = !DILocation(line: 153, scope: !1101, inlinedAt: !1084)
!1101 = distinct !DILexicalBlock(scope: !1096, file: !96, line: 152, column: 3)
!1102 = !DILocation(line: 154, scope: !1101, inlinedAt: !1084)
!1103 = !DILocation(line: 156, scope: !1096, inlinedAt: !1084)
!1104 = !DILocation(line: 157, scope: !1096, inlinedAt: !1084)
!1105 = !DILocation(line: 158, scope: !1096, inlinedAt: !1084)
!1106 = !DILocation(line: 232, scope: !1107, inlinedAt: !1108)
!1107 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !172, file: !172, line: 229, scopeLine: 229, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!1108 = !DILocation(line: 160, scope: !1090, inlinedAt: !1084)
!1109 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Msws16Random.next_int128", scope: !31, file: !31, line: 154, type: !1110, scopeLine: 154, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!1110 = !DISubroutineType(types: !1111)
!1111 = !{!3, !1043}
!1112 = !DILocation(line: 154, scope: !1109)
!1113 = !DILocalVariable(name: "self", arg: 1, scope: !1109, file: !31, line: 154, type: !1043)
!1114 = !DILocation(line: 154, scope: !1115, inlinedAt: !1112)
!1115 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !96, file: !96, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!1116 = !DILocation(line: 138, scope: !1115, inlinedAt: !1112)
!1117 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Msws16Random.next_long", scope: !31, file: !31, line: 155, type: !1118, scopeLine: 155, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!1118 = !DISubroutineType(types: !1119)
!1119 = !{!6, !1043}
!1120 = !DILocation(line: 155, scope: !1117)
!1121 = !DILocalVariable(name: "self", arg: 1, scope: !1117, file: !31, line: 155, type: !1043)
!1122 = !DILocation(line: 155, scope: !1123, inlinedAt: !1120)
!1123 = distinct !DISubprogram(name: "@int_to_long", linkageName: "@int_to_long", scope: !96, file: !96, line: 139, scopeLine: 139, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!1124 = !DILocation(line: 139, scope: !1123, inlinedAt: !1120)
!1125 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Msws16Random.next_int", scope: !31, file: !31, line: 156, type: !1126, scopeLine: 156, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!1126 = !DISubroutineType(types: !1127)
!1127 = !{!9, !1043}
!1128 = !DILocation(line: 156, scope: !1125)
!1129 = !DILocalVariable(name: "self", arg: 1, scope: !1125, file: !31, line: 156, type: !1043)
!1130 = !DILocation(line: 156, scope: !1131, inlinedAt: !1128)
!1131 = distinct !DISubprogram(name: "@short_to_int", linkageName: "@short_to_int", scope: !96, file: !96, line: 140, scopeLine: 140, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!1132 = !DILocation(line: 140, scope: !1131, inlinedAt: !1128)
!1133 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Msws16Random.next_byte", scope: !31, file: !31, line: 157, type: !1134, scopeLine: 157, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!1134 = !DISubroutineType(types: !1135)
!1135 = !{!121, !1043}
!1136 = !DILocation(line: 157, scope: !1133)
!1137 = !DILocalVariable(name: "self", arg: 1, scope: !1133, file: !31, line: 157, type: !1043)
!1138 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Msws8Random.set_seed", scope: !31, file: !31, line: 166, type: !1139, scopeLine: 166, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!1139 = !DISubroutineType(types: !1140)
!1140 = !{null, !1141, !117}
!1141 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Msws8Random*", baseType: !1142, size: 64, align: 64, dwarfAddressSpace: 0)
!1142 = !DICompositeType(tag: DW_TAG_structure_type, name: "Msws8Random", scope: !31, file: !31, line: 160, size: 32, align: 8, elements: !1143, identifier: "std.math.random.Msws8Random")
!1143 = !{!1144, !1145, !1146, !1147}
!1144 = !DIDerivedType(tag: DW_TAG_member, name: "state0", scope: !1142, file: !31, line: 162, baseType: !121, size: 8, align: 8)
!1145 = !DIDerivedType(tag: DW_TAG_member, name: "state1", scope: !1142, file: !31, line: 162, baseType: !121, size: 8, align: 8, offset: 8)
!1146 = !DIDerivedType(tag: DW_TAG_member, name: "weyl0", scope: !1142, file: !31, line: 163, baseType: !121, size: 8, align: 8, offset: 16)
!1147 = !DIDerivedType(tag: DW_TAG_member, name: "weyl1", scope: !1142, file: !31, line: 163, baseType: !121, size: 8, align: 8, offset: 24)
!1148 = !DILocation(line: 167, scope: !1138)
!1149 = !DILocalVariable(name: "self", arg: 1, scope: !1138, file: !31, line: 166, type: !1141)
!1150 = !DILocation(line: 166, scope: !1138)
!1151 = !DILocalVariable(name: "input", arg: 2, scope: !1138, file: !31, line: 166, type: !117)
!1152 = !DILocalVariable(name: "return_value", scope: !1153, file: !31, line: 10, type: !1154, align: 1)
!1153 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !68, file: !68, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110, retainedNodes: !124)
!1154 = !DICompositeType(tag: DW_TAG_array_type, baseType: !121, size: 32, align: 8, elements: !99)
!1155 = !DILocation(line: 10, scope: !1153, inlinedAt: !1156)
!1156 = !DILocation(line: 168, scope: !1138)
!1157 = !DILocation(line: 11, scope: !1153, inlinedAt: !1156)
!1158 = !DILocation(line: 281, scope: !1159, inlinedAt: !1156)
!1159 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !172, file: !172, line: 278, scopeLine: 278, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!1160 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Msws8Random.next_byte", scope: !31, file: !31, line: 171, type: !1161, scopeLine: 171, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!1161 = !DISubroutineType(types: !1162)
!1162 = !{!121, !1141}
!1163 = !DILocation(line: 172, scope: !1160)
!1164 = !DILocalVariable(name: "self", arg: 1, scope: !1160, file: !31, line: 171, type: !1141)
!1165 = !DILocation(line: 171, scope: !1160)
!1166 = !DILocalVariable(name: "s0", scope: !1160, file: !31, line: 173, type: !121, align: 1)
!1167 = !DILocation(line: 173, scope: !1160)
!1168 = !DILocation(line: 174, scope: !1160)
!1169 = !DILocation(line: 175, scope: !1160)
!1170 = !DILocation(line: 131, scope: !1171, inlinedAt: !1169)
!1171 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !798, file: !798, line: 131, scopeLine: 131, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!1172 = !DILocation(line: 176, scope: !1160)
!1173 = !DILocation(line: 178, scope: !1160)
!1174 = !DILocalVariable(name: "s1", scope: !1160, file: !31, line: 179, type: !121, align: 1)
!1175 = !DILocation(line: 179, scope: !1160)
!1176 = !DILocation(line: 180, scope: !1160)
!1177 = !DILocation(line: 131, scope: !1178, inlinedAt: !1176)
!1178 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !798, file: !798, line: 131, scopeLine: 131, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!1179 = !DILocation(line: 181, scope: !1160)
!1180 = !DILocation(line: 183, scope: !1160)
!1181 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Msws8Random.next_bytes", scope: !31, file: !31, line: 186, type: !1139, scopeLine: 186, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!1182 = !DILocation(line: 186, scope: !1181)
!1183 = !DILocalVariable(name: "self", arg: 1, scope: !1181, file: !31, line: 186, type: !1141)
!1184 = !DILocalVariable(name: "bytes", arg: 2, scope: !1181, file: !31, line: 186, type: !117)
!1185 = !DILocalVariable(name: "len", scope: !1186, file: !31, line: 146, type: !123, align: 8)
!1186 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !96, file: !96, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110, retainedNodes: !124)
!1187 = !DILocation(line: 146, scope: !1186, inlinedAt: !1182)
!1188 = !DILocation(line: 148, scope: !1186, inlinedAt: !1182)
!1189 = !DILocation(line: 148, scope: !1190, inlinedAt: !1182)
!1190 = distinct !DILexicalBlock(scope: !1186, file: !96, line: 148, column: 2)
!1191 = !DILocalVariable(name: "value", scope: !1192, file: !31, line: 150, type: !121, align: 1)
!1192 = distinct !DILexicalBlock(scope: !1190, file: !96, line: 149, column: 2)
!1193 = !DILocation(line: 150, scope: !1192, inlinedAt: !1182)
!1194 = !DILocation(line: 186, scope: !1192, inlinedAt: !1182)
!1195 = !DILocation(line: 151, scope: !1192, inlinedAt: !1182)
!1196 = !DILocation(line: 153, scope: !1197, inlinedAt: !1182)
!1197 = distinct !DILexicalBlock(scope: !1192, file: !96, line: 152, column: 3)
!1198 = !DILocation(line: 154, scope: !1197, inlinedAt: !1182)
!1199 = !DILocation(line: 156, scope: !1192, inlinedAt: !1182)
!1200 = !DILocation(line: 157, scope: !1192, inlinedAt: !1182)
!1201 = !DILocation(line: 158, scope: !1192, inlinedAt: !1182)
!1202 = !DILocation(line: 232, scope: !1203, inlinedAt: !1204)
!1203 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !172, file: !172, line: 229, scopeLine: 229, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!1204 = !DILocation(line: 160, scope: !1186, inlinedAt: !1182)
!1205 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Msws8Random.next_int128", scope: !31, file: !31, line: 187, type: !1206, scopeLine: 187, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!1206 = !DISubroutineType(types: !1207)
!1207 = !{!3, !1141}
!1208 = !DILocation(line: 187, scope: !1205)
!1209 = !DILocalVariable(name: "self", arg: 1, scope: !1205, file: !31, line: 187, type: !1141)
!1210 = !DILocation(line: 187, scope: !1211, inlinedAt: !1208)
!1211 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !96, file: !96, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!1212 = !DILocation(line: 138, scope: !1211, inlinedAt: !1208)
!1213 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Msws8Random.next_long", scope: !31, file: !31, line: 188, type: !1214, scopeLine: 188, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!1214 = !DISubroutineType(types: !1215)
!1215 = !{!6, !1141}
!1216 = !DILocation(line: 188, scope: !1213)
!1217 = !DILocalVariable(name: "self", arg: 1, scope: !1213, file: !31, line: 188, type: !1141)
!1218 = !DILocation(line: 188, scope: !1219, inlinedAt: !1216)
!1219 = distinct !DISubprogram(name: "@int_to_long", linkageName: "@int_to_long", scope: !96, file: !96, line: 139, scopeLine: 139, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!1220 = !DILocation(line: 139, scope: !1219, inlinedAt: !1216)
!1221 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Msws8Random.next_int", scope: !31, file: !31, line: 189, type: !1222, scopeLine: 189, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!1222 = !DISubroutineType(types: !1223)
!1223 = !{!9, !1141}
!1224 = !DILocation(line: 189, scope: !1221)
!1225 = !DILocalVariable(name: "self", arg: 1, scope: !1221, file: !31, line: 189, type: !1141)
!1226 = !DILocation(line: 189, scope: !1227, inlinedAt: !1224)
!1227 = distinct !DISubprogram(name: "@short_to_int", linkageName: "@short_to_int", scope: !96, file: !96, line: 140, scopeLine: 140, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!1228 = !DILocation(line: 140, scope: !1227, inlinedAt: !1224)
!1229 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Msws8Random.next_short", scope: !31, file: !31, line: 190, type: !1230, scopeLine: 190, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!1230 = !DISubroutineType(types: !1231)
!1231 = !{!190, !1141}
!1232 = !DILocation(line: 190, scope: !1229)
!1233 = !DILocalVariable(name: "self", arg: 1, scope: !1229, file: !31, line: 190, type: !1141)
!1234 = !DILocation(line: 190, scope: !1235, inlinedAt: !1232)
!1235 = distinct !DISubprogram(name: "@char_to_short", linkageName: "@char_to_short", scope: !96, file: !96, line: 141, scopeLine: 141, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!1236 = !DILocation(line: 141, scope: !1235, inlinedAt: !1232)
!1237 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Pcg128Random.set_seed", scope: !42, file: !42, line: 20, type: !1238, scopeLine: 20, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!1238 = !DISubroutineType(types: !1239)
!1239 = !{null, !1240, !117}
!1240 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Pcg128Random*", baseType: !1241, size: 64, align: 64, dwarfAddressSpace: 0)
!1241 = !DIDerivedType(tag: DW_TAG_typedef, name: "Pcg128Random", scope: !42, file: !42, line: 18, baseType: !3, align: 16)
!1242 = !DILocation(line: 21, scope: !1237)
!1243 = !DILocalVariable(name: "self", arg: 1, scope: !1237, file: !42, line: 20, type: !1240)
!1244 = !DILocation(line: 20, scope: !1237)
!1245 = !DILocalVariable(name: "input", arg: 2, scope: !1237, file: !42, line: 20, type: !117)
!1246 = !DILocalVariable(name: "return_value", scope: !1247, file: !42, line: 10, type: !3, align: 16)
!1247 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !68, file: !68, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110, retainedNodes: !124)
!1248 = !DILocation(line: 10, scope: !1247, inlinedAt: !1249)
!1249 = !DILocation(line: 22, scope: !1237)
!1250 = !DILocation(line: 11, scope: !1247, inlinedAt: !1249)
!1251 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Pcg128Random.next_long", scope: !42, file: !42, line: 26, type: !1252, scopeLine: 26, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!1252 = !DISubroutineType(types: !1253)
!1253 = !{!6, !1240}
!1254 = !DILocation(line: 27, scope: !1251)
!1255 = !DILocalVariable(name: "self", arg: 1, scope: !1251, file: !42, line: 26, type: !1240)
!1256 = !DILocation(line: 26, scope: !1251)
!1257 = !DILocalVariable(name: "s", scope: !1251, file: !42, line: 29, type: !141, align: 8)
!1258 = !DILocation(line: 29, scope: !1251)
!1259 = !DILocalVariable(name: "xor", scope: !1251, file: !42, line: 30, type: !3, align: 16)
!1260 = !DILocation(line: 30, scope: !1251)
!1261 = !DILocalVariable(name: "rot", scope: !1251, file: !42, line: 31, type: !121, align: 1)
!1262 = !DILocation(line: 31, scope: !1251)
!1263 = !DILocation(line: 32, scope: !1251)
!1264 = !DILocation(line: 33, scope: !1251)
!1265 = !DILocation(line: 147, scope: !1266, inlinedAt: !1264)
!1266 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !798, file: !798, line: 147, scopeLine: 147, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!1267 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Pcg128Random.next_bytes", scope: !42, file: !42, line: 39, type: !1238, scopeLine: 39, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!1268 = !DILocation(line: 39, scope: !1267)
!1269 = !DILocalVariable(name: "self", arg: 1, scope: !1267, file: !42, line: 39, type: !1240)
!1270 = !DILocalVariable(name: "bytes", arg: 2, scope: !1267, file: !42, line: 39, type: !117)
!1271 = !DILocation(line: 37, scope: !1272)
!1272 = distinct !DILexicalBlock(scope: !1267, file: !42, line: 39, column: 66)
!1273 = !DILocalVariable(name: "len", scope: !1274, file: !42, line: 146, type: !123, align: 8)
!1274 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !96, file: !96, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110, retainedNodes: !124)
!1275 = !DILocation(line: 146, scope: !1274, inlinedAt: !1268)
!1276 = !DILocation(line: 148, scope: !1274, inlinedAt: !1268)
!1277 = !DILocation(line: 148, scope: !1278, inlinedAt: !1268)
!1278 = distinct !DILexicalBlock(scope: !1274, file: !96, line: 148, column: 2)
!1279 = !DILocalVariable(name: "value", scope: !1280, file: !42, line: 150, type: !6, align: 8)
!1280 = distinct !DILexicalBlock(scope: !1278, file: !96, line: 149, column: 2)
!1281 = !DILocation(line: 150, scope: !1280, inlinedAt: !1268)
!1282 = !DILocation(line: 39, scope: !1280, inlinedAt: !1268)
!1283 = !DILocation(line: 151, scope: !1280, inlinedAt: !1268)
!1284 = !DILocation(line: 153, scope: !1285, inlinedAt: !1268)
!1285 = distinct !DILexicalBlock(scope: !1280, file: !96, line: 152, column: 3)
!1286 = !DILocation(line: 154, scope: !1285, inlinedAt: !1268)
!1287 = !DILocation(line: 156, scope: !1280, inlinedAt: !1268)
!1288 = !DILocation(line: 157, scope: !1280, inlinedAt: !1268)
!1289 = !DILocation(line: 158, scope: !1280, inlinedAt: !1268)
!1290 = !DILocation(line: 232, scope: !1291, inlinedAt: !1292)
!1291 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !172, file: !172, line: 229, scopeLine: 229, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!1292 = !DILocation(line: 160, scope: !1274, inlinedAt: !1268)
!1293 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Pcg128Random.next_int128", scope: !42, file: !42, line: 40, type: !1294, scopeLine: 40, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!1294 = !DISubroutineType(types: !1295)
!1295 = !{!3, !1240}
!1296 = !DILocation(line: 40, scope: !1293)
!1297 = !DILocalVariable(name: "self", arg: 1, scope: !1293, file: !42, line: 40, type: !1240)
!1298 = !DILocation(line: 40, scope: !1299, inlinedAt: !1296)
!1299 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !96, file: !96, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!1300 = !DILocation(line: 138, scope: !1299, inlinedAt: !1296)
!1301 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Pcg128Random.next_int", scope: !42, file: !42, line: 41, type: !1302, scopeLine: 41, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!1302 = !DISubroutineType(types: !1303)
!1303 = !{!9, !1240}
!1304 = !DILocation(line: 41, scope: !1301)
!1305 = !DILocalVariable(name: "self", arg: 1, scope: !1301, file: !42, line: 41, type: !1240)
!1306 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Pcg128Random.next_short", scope: !42, file: !42, line: 42, type: !1307, scopeLine: 42, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!1307 = !DISubroutineType(types: !1308)
!1308 = !{!190, !1240}
!1309 = !DILocation(line: 42, scope: !1306)
!1310 = !DILocalVariable(name: "self", arg: 1, scope: !1306, file: !42, line: 42, type: !1240)
!1311 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Pcg128Random.next_byte", scope: !42, file: !42, line: 43, type: !1312, scopeLine: 43, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!1312 = !DISubroutineType(types: !1313)
!1313 = !{!121, !1240}
!1314 = !DILocation(line: 43, scope: !1311)
!1315 = !DILocalVariable(name: "self", arg: 1, scope: !1311, file: !42, line: 43, type: !1240)
!1316 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Pcg64Random.set_seed", scope: !42, file: !42, line: 49, type: !1317, scopeLine: 49, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!1317 = !DISubroutineType(types: !1318)
!1318 = !{null, !1319, !117}
!1319 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Pcg64Random*", baseType: !1320, size: 64, align: 64, dwarfAddressSpace: 0)
!1320 = !DIDerivedType(tag: DW_TAG_typedef, name: "Pcg64Random", scope: !42, file: !42, line: 47, baseType: !6, align: 8)
!1321 = !DILocation(line: 50, scope: !1316)
!1322 = !DILocalVariable(name: "self", arg: 1, scope: !1316, file: !42, line: 49, type: !1319)
!1323 = !DILocation(line: 49, scope: !1316)
!1324 = !DILocalVariable(name: "input", arg: 2, scope: !1316, file: !42, line: 49, type: !117)
!1325 = !DILocalVariable(name: "return_value", scope: !1326, file: !42, line: 10, type: !6, align: 8)
!1326 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !68, file: !68, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110, retainedNodes: !124)
!1327 = !DILocation(line: 10, scope: !1326, inlinedAt: !1328)
!1328 = !DILocation(line: 51, scope: !1316)
!1329 = !DILocation(line: 11, scope: !1326, inlinedAt: !1328)
!1330 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Pcg64Random.next_int", scope: !42, file: !42, line: 54, type: !1331, scopeLine: 54, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!1331 = !DISubroutineType(types: !1332)
!1332 = !{!9, !1319}
!1333 = !DILocation(line: 55, scope: !1330)
!1334 = !DILocalVariable(name: "self", arg: 1, scope: !1330, file: !42, line: 54, type: !1319)
!1335 = !DILocation(line: 54, scope: !1330)
!1336 = !DILocalVariable(name: "s", scope: !1330, file: !42, line: 57, type: !219, align: 8)
!1337 = !DILocation(line: 57, scope: !1330)
!1338 = !DILocalVariable(name: "xor", scope: !1330, file: !42, line: 58, type: !6, align: 8)
!1339 = !DILocation(line: 58, scope: !1330)
!1340 = !DILocalVariable(name: "rot", scope: !1330, file: !42, line: 59, type: !121, align: 1)
!1341 = !DILocation(line: 59, scope: !1330)
!1342 = !DILocation(line: 60, scope: !1330)
!1343 = !DILocation(line: 61, scope: !1330)
!1344 = !DILocation(line: 99, scope: !1345, inlinedAt: !1343)
!1345 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !798, file: !798, line: 99, scopeLine: 99, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!1346 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Pcg64Random.next_bytes", scope: !42, file: !42, line: 67, type: !1317, scopeLine: 67, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!1347 = !DILocation(line: 67, scope: !1346)
!1348 = !DILocalVariable(name: "self", arg: 1, scope: !1346, file: !42, line: 67, type: !1319)
!1349 = !DILocalVariable(name: "bytes", arg: 2, scope: !1346, file: !42, line: 67, type: !117)
!1350 = !DILocation(line: 65, scope: !1351)
!1351 = distinct !DILexicalBlock(scope: !1346, file: !42, line: 67, column: 65)
!1352 = !DILocalVariable(name: "len", scope: !1353, file: !42, line: 146, type: !123, align: 8)
!1353 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !96, file: !96, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110, retainedNodes: !124)
!1354 = !DILocation(line: 146, scope: !1353, inlinedAt: !1347)
!1355 = !DILocation(line: 148, scope: !1353, inlinedAt: !1347)
!1356 = !DILocation(line: 148, scope: !1357, inlinedAt: !1347)
!1357 = distinct !DILexicalBlock(scope: !1353, file: !96, line: 148, column: 2)
!1358 = !DILocalVariable(name: "value", scope: !1359, file: !42, line: 150, type: !9, align: 4)
!1359 = distinct !DILexicalBlock(scope: !1357, file: !96, line: 149, column: 2)
!1360 = !DILocation(line: 150, scope: !1359, inlinedAt: !1347)
!1361 = !DILocation(line: 67, scope: !1359, inlinedAt: !1347)
!1362 = !DILocation(line: 151, scope: !1359, inlinedAt: !1347)
!1363 = !DILocation(line: 153, scope: !1364, inlinedAt: !1347)
!1364 = distinct !DILexicalBlock(scope: !1359, file: !96, line: 152, column: 3)
!1365 = !DILocation(line: 154, scope: !1364, inlinedAt: !1347)
!1366 = !DILocation(line: 156, scope: !1359, inlinedAt: !1347)
!1367 = !DILocation(line: 157, scope: !1359, inlinedAt: !1347)
!1368 = !DILocation(line: 158, scope: !1359, inlinedAt: !1347)
!1369 = !DILocation(line: 232, scope: !1370, inlinedAt: !1371)
!1370 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !172, file: !172, line: 229, scopeLine: 229, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!1371 = !DILocation(line: 160, scope: !1353, inlinedAt: !1347)
!1372 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Pcg64Random.next_int128", scope: !42, file: !42, line: 68, type: !1373, scopeLine: 68, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!1373 = !DISubroutineType(types: !1374)
!1374 = !{!3, !1319}
!1375 = !DILocation(line: 68, scope: !1372)
!1376 = !DILocalVariable(name: "self", arg: 1, scope: !1372, file: !42, line: 68, type: !1319)
!1377 = !DILocation(line: 68, scope: !1378, inlinedAt: !1375)
!1378 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !96, file: !96, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!1379 = !DILocation(line: 138, scope: !1378, inlinedAt: !1375)
!1380 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Pcg64Random.next_long", scope: !42, file: !42, line: 69, type: !1381, scopeLine: 69, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!1381 = !DISubroutineType(types: !1382)
!1382 = !{!6, !1319}
!1383 = !DILocation(line: 69, scope: !1380)
!1384 = !DILocalVariable(name: "self", arg: 1, scope: !1380, file: !42, line: 69, type: !1319)
!1385 = !DILocation(line: 69, scope: !1386, inlinedAt: !1383)
!1386 = distinct !DISubprogram(name: "@int_to_long", linkageName: "@int_to_long", scope: !96, file: !96, line: 139, scopeLine: 139, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!1387 = !DILocation(line: 139, scope: !1386, inlinedAt: !1383)
!1388 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Pcg64Random.next_short", scope: !42, file: !42, line: 70, type: !1389, scopeLine: 70, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!1389 = !DISubroutineType(types: !1390)
!1390 = !{!190, !1319}
!1391 = !DILocation(line: 70, scope: !1388)
!1392 = !DILocalVariable(name: "self", arg: 1, scope: !1388, file: !42, line: 70, type: !1319)
!1393 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Pcg64Random.next_byte", scope: !42, file: !42, line: 71, type: !1394, scopeLine: 71, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!1394 = !DISubroutineType(types: !1395)
!1395 = !{!121, !1319}
!1396 = !DILocation(line: 71, scope: !1393)
!1397 = !DILocalVariable(name: "self", arg: 1, scope: !1393, file: !42, line: 71, type: !1319)
!1398 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Pcg32Random.set_seed", scope: !42, file: !42, line: 78, type: !1399, scopeLine: 78, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!1399 = !DISubroutineType(types: !1400)
!1400 = !{null, !1401, !117}
!1401 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Pcg32Random*", baseType: !1402, size: 64, align: 64, dwarfAddressSpace: 0)
!1402 = !DIDerivedType(tag: DW_TAG_typedef, name: "Pcg32Random", scope: !42, file: !42, line: 76, baseType: !9, align: 4)
!1403 = !DILocation(line: 79, scope: !1398)
!1404 = !DILocalVariable(name: "self", arg: 1, scope: !1398, file: !42, line: 78, type: !1401)
!1405 = !DILocation(line: 78, scope: !1398)
!1406 = !DILocalVariable(name: "input", arg: 2, scope: !1398, file: !42, line: 78, type: !117)
!1407 = !DILocalVariable(name: "return_value", scope: !1408, file: !42, line: 10, type: !9, align: 4)
!1408 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !68, file: !68, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110, retainedNodes: !124)
!1409 = !DILocation(line: 10, scope: !1408, inlinedAt: !1410)
!1410 = !DILocation(line: 80, scope: !1398)
!1411 = !DILocation(line: 11, scope: !1408, inlinedAt: !1410)
!1412 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Pcg32Random.next_short", scope: !42, file: !42, line: 83, type: !1413, scopeLine: 83, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!1413 = !DISubroutineType(types: !1414)
!1414 = !{!190, !1401}
!1415 = !DILocation(line: 84, scope: !1412)
!1416 = !DILocalVariable(name: "self", arg: 1, scope: !1412, file: !42, line: 83, type: !1401)
!1417 = !DILocation(line: 83, scope: !1412)
!1418 = !DILocalVariable(name: "s", scope: !1412, file: !42, line: 86, type: !298, align: 8)
!1419 = !DILocation(line: 86, scope: !1412)
!1420 = !DILocalVariable(name: "xor", scope: !1412, file: !42, line: 87, type: !9, align: 4)
!1421 = !DILocation(line: 87, scope: !1412)
!1422 = !DILocalVariable(name: "rot", scope: !1412, file: !42, line: 88, type: !121, align: 1)
!1423 = !DILocation(line: 88, scope: !1412)
!1424 = !DILocation(line: 89, scope: !1412)
!1425 = !DILocation(line: 90, scope: !1412)
!1426 = !DILocation(line: 115, scope: !1427, inlinedAt: !1425)
!1427 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !798, file: !798, line: 115, scopeLine: 115, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!1428 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Pcg32Random.next_bytes", scope: !42, file: !42, line: 96, type: !1399, scopeLine: 96, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!1429 = !DILocation(line: 96, scope: !1428)
!1430 = !DILocalVariable(name: "self", arg: 1, scope: !1428, file: !42, line: 96, type: !1401)
!1431 = !DILocalVariable(name: "bytes", arg: 2, scope: !1428, file: !42, line: 96, type: !117)
!1432 = !DILocation(line: 94, scope: !1433)
!1433 = distinct !DILexicalBlock(scope: !1428, file: !42, line: 96, column: 65)
!1434 = !DILocalVariable(name: "len", scope: !1435, file: !42, line: 146, type: !123, align: 8)
!1435 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !96, file: !96, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110, retainedNodes: !124)
!1436 = !DILocation(line: 146, scope: !1435, inlinedAt: !1429)
!1437 = !DILocation(line: 148, scope: !1435, inlinedAt: !1429)
!1438 = !DILocation(line: 148, scope: !1439, inlinedAt: !1429)
!1439 = distinct !DILexicalBlock(scope: !1435, file: !96, line: 148, column: 2)
!1440 = !DILocalVariable(name: "value", scope: !1441, file: !42, line: 150, type: !190, align: 2)
!1441 = distinct !DILexicalBlock(scope: !1439, file: !96, line: 149, column: 2)
!1442 = !DILocation(line: 150, scope: !1441, inlinedAt: !1429)
!1443 = !DILocation(line: 96, scope: !1441, inlinedAt: !1429)
!1444 = !DILocation(line: 151, scope: !1441, inlinedAt: !1429)
!1445 = !DILocation(line: 153, scope: !1446, inlinedAt: !1429)
!1446 = distinct !DILexicalBlock(scope: !1441, file: !96, line: 152, column: 3)
!1447 = !DILocation(line: 154, scope: !1446, inlinedAt: !1429)
!1448 = !DILocation(line: 156, scope: !1441, inlinedAt: !1429)
!1449 = !DILocation(line: 157, scope: !1441, inlinedAt: !1429)
!1450 = !DILocation(line: 158, scope: !1441, inlinedAt: !1429)
!1451 = !DILocation(line: 232, scope: !1452, inlinedAt: !1453)
!1452 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !172, file: !172, line: 229, scopeLine: 229, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!1453 = !DILocation(line: 160, scope: !1435, inlinedAt: !1429)
!1454 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Pcg32Random.next_int128", scope: !42, file: !42, line: 97, type: !1455, scopeLine: 97, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!1455 = !DISubroutineType(types: !1456)
!1456 = !{!3, !1401}
!1457 = !DILocation(line: 97, scope: !1454)
!1458 = !DILocalVariable(name: "self", arg: 1, scope: !1454, file: !42, line: 97, type: !1401)
!1459 = !DILocation(line: 97, scope: !1460, inlinedAt: !1457)
!1460 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !96, file: !96, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!1461 = !DILocation(line: 138, scope: !1460, inlinedAt: !1457)
!1462 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Pcg32Random.next_long", scope: !42, file: !42, line: 98, type: !1463, scopeLine: 98, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!1463 = !DISubroutineType(types: !1464)
!1464 = !{!6, !1401}
!1465 = !DILocation(line: 98, scope: !1462)
!1466 = !DILocalVariable(name: "self", arg: 1, scope: !1462, file: !42, line: 98, type: !1401)
!1467 = !DILocation(line: 98, scope: !1468, inlinedAt: !1465)
!1468 = distinct !DISubprogram(name: "@int_to_long", linkageName: "@int_to_long", scope: !96, file: !96, line: 139, scopeLine: 139, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!1469 = !DILocation(line: 139, scope: !1468, inlinedAt: !1465)
!1470 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Pcg32Random.next_int", scope: !42, file: !42, line: 99, type: !1471, scopeLine: 99, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!1471 = !DISubroutineType(types: !1472)
!1472 = !{!9, !1401}
!1473 = !DILocation(line: 99, scope: !1470)
!1474 = !DILocalVariable(name: "self", arg: 1, scope: !1470, file: !42, line: 99, type: !1401)
!1475 = !DILocation(line: 99, scope: !1476, inlinedAt: !1473)
!1476 = distinct !DISubprogram(name: "@short_to_int", linkageName: "@short_to_int", scope: !96, file: !96, line: 140, scopeLine: 140, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!1477 = !DILocation(line: 140, scope: !1476, inlinedAt: !1473)
!1478 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Pcg32Random.next_byte", scope: !42, file: !42, line: 100, type: !1479, scopeLine: 100, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!1479 = !DISubroutineType(types: !1480)
!1480 = !{!121, !1401}
!1481 = !DILocation(line: 100, scope: !1478)
!1482 = !DILocalVariable(name: "self", arg: 1, scope: !1478, file: !42, line: 100, type: !1401)
!1483 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Pcg16Random.set_seed", scope: !42, file: !42, line: 106, type: !1484, scopeLine: 106, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!1484 = !DISubroutineType(types: !1485)
!1485 = !{null, !1486, !117}
!1486 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Pcg16Random*", baseType: !1487, size: 64, align: 64, dwarfAddressSpace: 0)
!1487 = !DIDerivedType(tag: DW_TAG_typedef, name: "Pcg16Random", scope: !42, file: !42, line: 104, baseType: !190, align: 2)
!1488 = !DILocation(line: 107, scope: !1483)
!1489 = !DILocalVariable(name: "self", arg: 1, scope: !1483, file: !42, line: 106, type: !1486)
!1490 = !DILocation(line: 106, scope: !1483)
!1491 = !DILocalVariable(name: "input", arg: 2, scope: !1483, file: !42, line: 106, type: !117)
!1492 = !DILocalVariable(name: "return_value", scope: !1493, file: !42, line: 10, type: !190, align: 2)
!1493 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !68, file: !68, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110, retainedNodes: !124)
!1494 = !DILocation(line: 10, scope: !1493, inlinedAt: !1495)
!1495 = !DILocation(line: 108, scope: !1483)
!1496 = !DILocation(line: 11, scope: !1493, inlinedAt: !1495)
!1497 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Pcg16Random.next_byte", scope: !42, file: !42, line: 111, type: !1498, scopeLine: 111, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!1498 = !DISubroutineType(types: !1499)
!1499 = !{!121, !1486}
!1500 = !DILocation(line: 112, scope: !1497)
!1501 = !DILocalVariable(name: "self", arg: 1, scope: !1497, file: !42, line: 111, type: !1486)
!1502 = !DILocation(line: 111, scope: !1497)
!1503 = !DILocalVariable(name: "s", scope: !1497, file: !42, line: 114, type: !378, align: 8)
!1504 = !DILocation(line: 114, scope: !1497)
!1505 = !DILocalVariable(name: "xor", scope: !1497, file: !42, line: 115, type: !190, align: 2)
!1506 = !DILocation(line: 115, scope: !1497)
!1507 = !DILocalVariable(name: "rot", scope: !1497, file: !42, line: 116, type: !121, align: 1)
!1508 = !DILocation(line: 116, scope: !1497)
!1509 = !DILocation(line: 117, scope: !1497)
!1510 = !DILocation(line: 118, scope: !1497)
!1511 = !DILocation(line: 131, scope: !1512, inlinedAt: !1510)
!1512 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !798, file: !798, line: 131, scopeLine: 131, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!1513 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Pcg16Random.next_bytes", scope: !42, file: !42, line: 121, type: !1484, scopeLine: 121, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!1514 = !DILocation(line: 121, scope: !1513)
!1515 = !DILocalVariable(name: "self", arg: 1, scope: !1513, file: !42, line: 121, type: !1486)
!1516 = !DILocalVariable(name: "bytes", arg: 2, scope: !1513, file: !42, line: 121, type: !117)
!1517 = !DILocalVariable(name: "len", scope: !1518, file: !42, line: 146, type: !123, align: 8)
!1518 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !96, file: !96, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110, retainedNodes: !124)
!1519 = !DILocation(line: 146, scope: !1518, inlinedAt: !1514)
!1520 = !DILocation(line: 148, scope: !1518, inlinedAt: !1514)
!1521 = !DILocation(line: 148, scope: !1522, inlinedAt: !1514)
!1522 = distinct !DILexicalBlock(scope: !1518, file: !96, line: 148, column: 2)
!1523 = !DILocalVariable(name: "value", scope: !1524, file: !42, line: 150, type: !121, align: 1)
!1524 = distinct !DILexicalBlock(scope: !1522, file: !96, line: 149, column: 2)
!1525 = !DILocation(line: 150, scope: !1524, inlinedAt: !1514)
!1526 = !DILocation(line: 121, scope: !1524, inlinedAt: !1514)
!1527 = !DILocation(line: 151, scope: !1524, inlinedAt: !1514)
!1528 = !DILocation(line: 153, scope: !1529, inlinedAt: !1514)
!1529 = distinct !DILexicalBlock(scope: !1524, file: !96, line: 152, column: 3)
!1530 = !DILocation(line: 154, scope: !1529, inlinedAt: !1514)
!1531 = !DILocation(line: 156, scope: !1524, inlinedAt: !1514)
!1532 = !DILocation(line: 157, scope: !1524, inlinedAt: !1514)
!1533 = !DILocation(line: 158, scope: !1524, inlinedAt: !1514)
!1534 = !DILocation(line: 232, scope: !1535, inlinedAt: !1536)
!1535 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !172, file: !172, line: 229, scopeLine: 229, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!1536 = !DILocation(line: 160, scope: !1518, inlinedAt: !1514)
!1537 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Pcg16Random.next_int128", scope: !42, file: !42, line: 122, type: !1538, scopeLine: 122, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!1538 = !DISubroutineType(types: !1539)
!1539 = !{!3, !1486}
!1540 = !DILocation(line: 122, scope: !1537)
!1541 = !DILocalVariable(name: "self", arg: 1, scope: !1537, file: !42, line: 122, type: !1486)
!1542 = !DILocation(line: 122, scope: !1543, inlinedAt: !1540)
!1543 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !96, file: !96, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!1544 = !DILocation(line: 138, scope: !1543, inlinedAt: !1540)
!1545 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Pcg16Random.next_long", scope: !42, file: !42, line: 123, type: !1546, scopeLine: 123, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!1546 = !DISubroutineType(types: !1547)
!1547 = !{!6, !1486}
!1548 = !DILocation(line: 123, scope: !1545)
!1549 = !DILocalVariable(name: "self", arg: 1, scope: !1545, file: !42, line: 123, type: !1486)
!1550 = !DILocation(line: 123, scope: !1551, inlinedAt: !1548)
!1551 = distinct !DISubprogram(name: "@int_to_long", linkageName: "@int_to_long", scope: !96, file: !96, line: 139, scopeLine: 139, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!1552 = !DILocation(line: 139, scope: !1551, inlinedAt: !1548)
!1553 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Pcg16Random.next_int", scope: !42, file: !42, line: 124, type: !1554, scopeLine: 124, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!1554 = !DISubroutineType(types: !1555)
!1555 = !{!9, !1486}
!1556 = !DILocation(line: 124, scope: !1553)
!1557 = !DILocalVariable(name: "self", arg: 1, scope: !1553, file: !42, line: 124, type: !1486)
!1558 = !DILocation(line: 124, scope: !1559, inlinedAt: !1556)
!1559 = distinct !DISubprogram(name: "@short_to_int", linkageName: "@short_to_int", scope: !96, file: !96, line: 140, scopeLine: 140, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!1560 = !DILocation(line: 140, scope: !1559, inlinedAt: !1556)
!1561 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Pcg16Random.next_short", scope: !42, file: !42, line: 125, type: !1562, scopeLine: 125, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!1562 = !DISubroutineType(types: !1563)
!1563 = !{!190, !1486}
!1564 = !DILocation(line: 125, scope: !1561)
!1565 = !DILocalVariable(name: "self", arg: 1, scope: !1561, file: !42, line: 125, type: !1486)
!1566 = !DILocation(line: 125, scope: !1567, inlinedAt: !1564)
!1567 = distinct !DISubprogram(name: "@char_to_short", linkageName: "@char_to_short", scope: !96, file: !96, line: 141, scopeLine: 141, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!1568 = !DILocation(line: 141, scope: !1567, inlinedAt: !1564)
!1569 = distinct !DISubprogram(name: "seeder", linkageName: "std.math.random.seeder", scope: !68, file: !68, line: 20, type: !1570, scopeLine: 20, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!1570 = !DISubroutineType(types: !1571)
!1571 = !{null, !117, !117}
!1572 = !DILocalVariable(name: "input", arg: 1, scope: !1569, file: !68, line: 20, type: !117)
!1573 = !DILocation(line: 20, scope: !1569)
!1574 = !DILocalVariable(name: "out_buffer", arg: 2, scope: !1569, file: !68, line: 20, type: !117)
!1575 = !DILocalVariable(name: "out_chars", scope: !1569, file: !68, line: 26, type: !123, align: 8)
!1576 = !DILocation(line: 26, scope: !1569)
!1577 = !DILocalVariable(name: "state", scope: !1578, file: !68, line: 641, type: !1580, align: 8)
!1578 = distinct !DISubprogram(name: "@pool", linkageName: "@pool", scope: !1579, file: !1579, line: 639, scopeLine: 639, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110, retainedNodes: !124)
!1579 = !DIFile(filename: "mem.c3", directory: "C:/Compilers/C3/lib/std/core")
!1580 = !DIDerivedType(tag: DW_TAG_typedef, name: "PoolState", scope: !68, file: !68, line: 403, baseType: !1581, align: 8)
!1581 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "TempAllocator*", baseType: !1582, size: 64, align: 64, dwarfAddressSpace: 0)
!1582 = !DICompositeType(tag: DW_TAG_structure_type, name: "TempAllocator", scope: !68, file: !68, line: 31, size: 704, align: 64, elements: !1583, identifier: "std.core.mem.allocator.TempAllocator")
!1583 = !{!1584, !1591, !1603, !1604, !1605, !1606, !1607, !1608, !1609, !1610, !1611}
!1584 = !DIDerivedType(tag: DW_TAG_member, name: "backing_allocator", scope: !1582, file: !68, line: 33, baseType: !1585, size: 128, align: 64)
!1585 = !DICompositeType(tag: DW_TAG_structure_type, name: "Allocator", size: 128, align: 64, elements: !1586, identifier: "Allocator")
!1586 = !{!1587, !1589}
!1587 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !1585, baseType: !1588, size: 64, align: 64)
!1588 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "void*", baseType: null, size: 64, align: 64, dwarfAddressSpace: 0)
!1589 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1585, baseType: !1590, size: 64, align: 64, offset: 64)
!1590 = !DIBasicType(name: "typeid", size: 64, encoding: DW_ATE_address)
!1591 = !DIDerivedType(tag: DW_TAG_member, name: "last_page", scope: !1582, file: !68, line: 34, baseType: !1592, size: 64, align: 64, offset: 128)
!1592 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "TempAllocatorPage*", baseType: !1593, size: 64, align: 64, dwarfAddressSpace: 0)
!1593 = !DICompositeType(tag: DW_TAG_structure_type, name: "TempAllocatorPage", scope: !68, file: !68, line: 54, size: 256, align: 64, elements: !1594, identifier: "std.core.mem.allocator.TempAllocatorPage")
!1594 = !{!1595, !1596, !1597, !1598, !1599}
!1595 = !DIDerivedType(tag: DW_TAG_member, name: "prev_page", scope: !1593, file: !68, line: 56, baseType: !1592, size: 64, align: 64)
!1596 = !DIDerivedType(tag: DW_TAG_member, name: "start", scope: !1593, file: !68, line: 57, baseType: !1588, size: 64, align: 64, offset: 64)
!1597 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1593, file: !68, line: 58, baseType: !123, size: 64, align: 64, offset: 128)
!1598 = !DIDerivedType(tag: DW_TAG_member, name: "ident", scope: !1593, file: !68, line: 59, baseType: !123, size: 64, align: 64, offset: 192)
!1599 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1593, file: !68, line: 60, baseType: !1600, align: 8, offset: 256)
!1600 = !DICompositeType(tag: DW_TAG_array_type, baseType: !121, align: 8, elements: !1601)
!1601 = !{!1602}
!1602 = !DISubrange(count: 0, lowerBound: 0)
!1603 = !DIDerivedType(tag: DW_TAG_member, name: "derived", scope: !1582, file: !68, line: 35, baseType: !1581, size: 64, align: 64, offset: 192)
!1604 = !DIDerivedType(tag: DW_TAG_member, name: "allocated", scope: !1582, file: !68, line: 36, baseType: !103, size: 8, align: 8, offset: 256)
!1605 = !DIDerivedType(tag: DW_TAG_member, name: "reserve_size", scope: !1582, file: !68, line: 37, baseType: !123, size: 64, align: 64, offset: 320)
!1606 = !DIDerivedType(tag: DW_TAG_member, name: "realloc_size", scope: !1582, file: !68, line: 38, baseType: !123, size: 64, align: 64, offset: 384)
!1607 = !DIDerivedType(tag: DW_TAG_member, name: "min_size", scope: !1582, file: !68, line: 39, baseType: !123, size: 64, align: 64, offset: 448)
!1608 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !1582, file: !68, line: 40, baseType: !123, size: 64, align: 64, offset: 512)
!1609 = !DIDerivedType(tag: DW_TAG_member, name: "capacity", scope: !1582, file: !68, line: 41, baseType: !123, size: 64, align: 64, offset: 576)
!1610 = !DIDerivedType(tag: DW_TAG_member, name: "original_capacity", scope: !1582, file: !68, line: 42, baseType: !123, size: 64, align: 64, offset: 640)
!1611 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1582, file: !68, line: 43, baseType: !1600, align: 8, offset: 704)
!1612 = !DILocation(line: 641, scope: !1578, inlinedAt: !1613)
!1613 = !DILocation(line: 27, scope: !1569)
!1614 = !DILocalVariable(name: "words", scope: !1615, file: !68, line: 29, type: !1616, align: 8)
!1615 = distinct !DILexicalBlock(scope: !1569, file: !68, line: 28, column: 2)
!1616 = !DICompositeType(tag: DW_TAG_structure_type, name: "ulong[]", size: 128, align: 64, elements: !1617, identifier: "ulong[]")
!1617 = !{!1618, !1619}
!1618 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !1616, baseType: !219, size: 64, align: 64)
!1619 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !1616, baseType: !123, size: 64, align: 64, offset: 64)
!1620 = !DILocation(line: 29, scope: !1615)
!1621 = !DILocation(line: 879, scope: !1622, inlinedAt: !1620)
!1622 = distinct !DISubprogram(name: "talloc_array", linkageName: "talloc_array", scope: !1579, file: !1579, line: 877, scopeLine: 877, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!1623 = !DILocation(line: 30, scope: !1615)
!1624 = !DILocalVariable(name: "words_len_2", scope: !1615, file: !68, line: 31, type: !123, align: 8)
!1625 = !DILocation(line: 31, scope: !1615)
!1626 = !DILocalVariable(name: "i", scope: !1627, file: !68, line: 34, type: !123, align: 8)
!1627 = distinct !DILexicalBlock(scope: !1615, file: !68, line: 34, column: 3)
!1628 = !DILocation(line: 34, scope: !1627)
!1629 = !DILocalVariable(name: "j", scope: !1630, file: !68, line: 36, type: !123, align: 8)
!1630 = distinct !DILexicalBlock(scope: !1627, file: !68, line: 35, column: 3)
!1631 = !DILocation(line: 36, scope: !1630)
!1632 = !DILocation(line: 37, scope: !1630)
!1633 = !DILocalVariable(name: "x", scope: !1634, file: !68, line: 283, type: !6, align: 8)
!1634 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !172, file: !172, line: 278, scopeLine: 278, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110, retainedNodes: !124)
!1635 = !DILocation(line: 283, scope: !1634, inlinedAt: !1632)
!1636 = !DILocation(line: 284, scope: !1634, inlinedAt: !1632)
!1637 = !DILocation(line: 285, scope: !1634, inlinedAt: !1632)
!1638 = !DILocation(line: 38, scope: !1630)
!1639 = !DILocalVariable(name: "remaining", scope: !1615, file: !68, line: 42, type: !123, align: 8)
!1640 = !DILocation(line: 42, scope: !1615)
!1641 = !DILocation(line: 43, scope: !1615)
!1642 = !DILocalVariable(name: "rest", scope: !1643, file: !68, line: 45, type: !6, align: 8)
!1643 = distinct !DILexicalBlock(scope: !1615, file: !68, line: 44, column: 3)
!1644 = !DILocation(line: 45, scope: !1643)
!1645 = !DILocation(line: 46, scope: !1643)
!1646 = !DILocation(line: 357, scope: !1647, inlinedAt: !1645)
!1647 = distinct !DILexicalBlock(scope: !1648, file: !1579, line: 358, column: 1)
!1648 = distinct !DISubprogram(name: "copy", linkageName: "copy", scope: !1579, file: !1579, line: 357, scopeLine: 357, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!1649 = !DILocation(line: 354, scope: !1647, inlinedAt: !1645)
!1650 = !DILocation(line: 46, scope: !1647, inlinedAt: !1645)
!1651 = !DILocation(line: 355, scope: !1647, inlinedAt: !1645)
!1652 = !DILocation(line: 359, scope: !1648, inlinedAt: !1645)
!1653 = !DILocation(line: 47, scope: !1643)
!1654 = !DILocation(line: 48, scope: !1643)
!1655 = !DILocalVariable(name: "i", scope: !1656, file: !68, line: 52, type: !1657, align: 8)
!1656 = distinct !DILexicalBlock(scope: !1615, file: !68, line: 52, column: 3)
!1657 = !DIDerivedType(tag: DW_TAG_typedef, name: "isz", baseType: !89)
!1658 = !DILocation(line: 52, scope: !1656)
!1659 = !DILocalVariable(name: "j", scope: !1660, file: !68, line: 54, type: !1657, align: 8)
!1660 = distinct !DILexicalBlock(scope: !1656, file: !68, line: 53, column: 3)
!1661 = !DILocation(line: 54, scope: !1660)
!1662 = !DILocation(line: 55, scope: !1660)
!1663 = !DILocation(line: 56, scope: !1660)
!1664 = !DILocalVariable(name: "i", scope: !1665, file: !68, line: 60, type: !123, align: 8)
!1665 = distinct !DILexicalBlock(scope: !1615, file: !68, line: 60, column: 3)
!1666 = !DILocation(line: 60, scope: !1665)
!1667 = !DILocalVariable(name: "j", scope: !1668, file: !68, line: 62, type: !123, align: 8)
!1668 = distinct !DILexicalBlock(scope: !1665, file: !68, line: 61, column: 3)
!1669 = !DILocation(line: 62, scope: !1668)
!1670 = !DILocation(line: 63, scope: !1668)
!1671 = !DILocation(line: 64, scope: !1668)
!1672 = !DILocation(line: 66, scope: !1615)
!1673 = !DILocation(line: 644, scope: !1674, inlinedAt: !1613)
!1674 = distinct !DILexicalBlock(scope: !1578, file: !1579, line: 643, column: 2)
!1675 = distinct !DISubprogram(name: "entropy", linkageName: "std.math.random.entropy", scope: !68, file: !68, line: 75, type: !1676, scopeLine: 75, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!1676 = !DISubroutineType(types: !1677)
!1677 = !{!1678}
!1678 = !DICompositeType(tag: DW_TAG_array_type, baseType: !121, size: 256, align: 8, elements: !1679)
!1679 = !{!1680}
!1680 = !DISubrange(count: 32, lowerBound: 0)
!1681 = !DILocalVariable(name: "addr", scope: !1675, file: !68, line: 78, type: !1588, align: 8)
!1682 = !DILocation(line: 78, scope: !1675)
!1683 = !DILocation(line: 79, scope: !1675)
!1684 = !DILocation(line: 81, scope: !1675)
!1685 = !DILocalVariable(name: "entropy_data", scope: !1675, file: !68, line: 82, type: !1686, align: 16)
!1686 = !DICompositeType(tag: DW_TAG_array_type, baseType: !9, size: 256, align: 32, elements: !1687)
!1687 = !{!1688}
!1688 = !DISubrange(count: 8, lowerBound: 0)
!1689 = !DILocation(line: 82, scope: !1675)
!1690 = !DILocation(line: 281, scope: !1691, inlinedAt: !1692)
!1691 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !172, file: !172, line: 278, scopeLine: 278, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!1692 = !DILocation(line: 72, scope: !1693, inlinedAt: !1694)
!1693 = distinct !DISubprogram(name: "hash", linkageName: "hash", scope: !68, file: !68, line: 70, scopeLine: 70, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!1694 = !DILocation(line: 83, scope: !1675)
!1695 = !DILocation(line: 281, scope: !1696, inlinedAt: !1697)
!1696 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !172, file: !172, line: 278, scopeLine: 278, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!1697 = !DILocation(line: 72, scope: !1698, inlinedAt: !1699)
!1698 = distinct !DISubprogram(name: "hash", linkageName: "hash", scope: !68, file: !68, line: 70, scopeLine: 70, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!1699 = !DILocation(line: 84, scope: !1675)
!1700 = !DILocation(line: 281, scope: !1701, inlinedAt: !1702)
!1701 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !172, file: !172, line: 278, scopeLine: 278, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!1702 = !DILocation(line: 72, scope: !1703, inlinedAt: !1704)
!1703 = distinct !DISubprogram(name: "hash", linkageName: "hash", scope: !68, file: !68, line: 70, scopeLine: 70, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!1704 = !DILocation(line: 85, scope: !1675)
!1705 = !DILocation(line: 281, scope: !1706, inlinedAt: !1707)
!1706 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !172, file: !172, line: 278, scopeLine: 278, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!1707 = !DILocation(line: 72, scope: !1708, inlinedAt: !1709)
!1708 = distinct !DISubprogram(name: "hash", linkageName: "hash", scope: !68, file: !68, line: 70, scopeLine: 70, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!1709 = !DILocation(line: 86, scope: !1675)
!1710 = !DILocation(line: 87, scope: !1675)
!1711 = !DILocation(line: 88, scope: !1675)
!1712 = !DILocation(line: 281, scope: !1713, inlinedAt: !1714)
!1713 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !172, file: !172, line: 278, scopeLine: 278, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!1714 = !DILocation(line: 72, scope: !1715, inlinedAt: !1711)
!1715 = distinct !DISubprogram(name: "hash", linkageName: "hash", scope: !68, file: !68, line: 70, scopeLine: 70, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!1716 = !DILocation(line: 281, scope: !1717, inlinedAt: !1718)
!1717 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !172, file: !172, line: 278, scopeLine: 278, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!1718 = !DILocation(line: 72, scope: !1719, inlinedAt: !1720)
!1719 = distinct !DISubprogram(name: "hash", linkageName: "hash", scope: !68, file: !68, line: 70, scopeLine: 70, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!1720 = !DILocation(line: 89, scope: !1675)
!1721 = !DILocation(line: 90, scope: !1675)
!1722 = !DILocation(line: 281, scope: !1723, inlinedAt: !1724)
!1723 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !172, file: !172, line: 278, scopeLine: 278, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!1724 = !DILocation(line: 72, scope: !1725, inlinedAt: !1721)
!1725 = distinct !DISubprogram(name: "hash", linkageName: "hash", scope: !68, file: !68, line: 70, scopeLine: 70, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!1726 = !DILocation(line: 281, scope: !1727, inlinedAt: !1728)
!1727 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !172, file: !172, line: 278, scopeLine: 278, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!1728 = !DILocation(line: 92, scope: !1675)
!1729 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Sfc128Random.set_seed", scope: !77, file: !77, line: 15, type: !1730, scopeLine: 15, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!1730 = !DISubroutineType(types: !1731)
!1731 = !{null, !1732, !117}
!1732 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Sfc128Random*", baseType: !1733, size: 64, align: 64, dwarfAddressSpace: 0)
!1733 = !DIDerivedType(tag: DW_TAG_typedef, name: "Sfc128Random", scope: !77, file: !77, line: 13, baseType: !780, align: 16)
!1734 = !DILocation(line: 16, scope: !1729)
!1735 = !DILocalVariable(name: "self", arg: 1, scope: !1729, file: !77, line: 15, type: !1732)
!1736 = !DILocation(line: 15, scope: !1729)
!1737 = !DILocalVariable(name: "input", arg: 2, scope: !1729, file: !77, line: 15, type: !117)
!1738 = !DILocalVariable(name: "return_value", scope: !1739, file: !77, line: 10, type: !780, align: 16)
!1739 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !68, file: !68, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110, retainedNodes: !124)
!1740 = !DILocation(line: 10, scope: !1739, inlinedAt: !1741)
!1741 = !DILocation(line: 17, scope: !1729)
!1742 = !DILocation(line: 11, scope: !1739, inlinedAt: !1741)
!1743 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Sfc128Random.next_int128", scope: !77, file: !77, line: 20, type: !1744, scopeLine: 20, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!1744 = !DISubroutineType(types: !1745)
!1745 = !{!3, !1732}
!1746 = !DILocation(line: 21, scope: !1743)
!1747 = !DILocalVariable(name: "self", arg: 1, scope: !1743, file: !77, line: 20, type: !1732)
!1748 = !DILocation(line: 20, scope: !1743)
!1749 = !DILocalVariable(name: "s", scope: !1743, file: !77, line: 22, type: !141, align: 8)
!1750 = !DILocation(line: 22, scope: !1743)
!1751 = !DILocalVariable(name: "result", scope: !1743, file: !77, line: 23, type: !3, align: 16)
!1752 = !DILocation(line: 23, scope: !1743)
!1753 = !DILocation(line: 24, scope: !1743)
!1754 = !DILocation(line: 25, scope: !1743)
!1755 = !DILocation(line: 26, scope: !1743)
!1756 = !DILocation(line: 163, scope: !1757, inlinedAt: !1755)
!1757 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !798, file: !798, line: 163, scopeLine: 163, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!1758 = !DILocation(line: 27, scope: !1743)
!1759 = !DILocation(line: 28, scope: !1743)
!1760 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Sfc128Random.next_bytes", scope: !77, file: !77, line: 34, type: !1730, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!1761 = !DILocation(line: 34, scope: !1760)
!1762 = !DILocalVariable(name: "self", arg: 1, scope: !1760, file: !77, line: 34, type: !1732)
!1763 = !DILocalVariable(name: "bytes", arg: 2, scope: !1760, file: !77, line: 34, type: !117)
!1764 = !DILocation(line: 32, scope: !1765)
!1765 = distinct !DILexicalBlock(scope: !1760, file: !77, line: 34, column: 66)
!1766 = !DILocalVariable(name: "len", scope: !1767, file: !77, line: 146, type: !123, align: 8)
!1767 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !96, file: !96, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110, retainedNodes: !124)
!1768 = !DILocation(line: 146, scope: !1767, inlinedAt: !1761)
!1769 = !DILocation(line: 148, scope: !1767, inlinedAt: !1761)
!1770 = !DILocation(line: 148, scope: !1771, inlinedAt: !1761)
!1771 = distinct !DILexicalBlock(scope: !1767, file: !96, line: 148, column: 2)
!1772 = !DILocalVariable(name: "value", scope: !1773, file: !77, line: 150, type: !3, align: 16)
!1773 = distinct !DILexicalBlock(scope: !1771, file: !96, line: 149, column: 2)
!1774 = !DILocation(line: 150, scope: !1773, inlinedAt: !1761)
!1775 = !DILocation(line: 34, scope: !1773, inlinedAt: !1761)
!1776 = !DILocation(line: 151, scope: !1773, inlinedAt: !1761)
!1777 = !DILocation(line: 153, scope: !1778, inlinedAt: !1761)
!1778 = distinct !DILexicalBlock(scope: !1773, file: !96, line: 152, column: 3)
!1779 = !DILocation(line: 154, scope: !1778, inlinedAt: !1761)
!1780 = !DILocation(line: 156, scope: !1773, inlinedAt: !1761)
!1781 = !DILocation(line: 157, scope: !1773, inlinedAt: !1761)
!1782 = !DILocation(line: 158, scope: !1773, inlinedAt: !1761)
!1783 = !DILocation(line: 232, scope: !1784, inlinedAt: !1785)
!1784 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !172, file: !172, line: 229, scopeLine: 229, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!1785 = !DILocation(line: 160, scope: !1767, inlinedAt: !1761)
!1786 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Sfc128Random.next_long", scope: !77, file: !77, line: 35, type: !1787, scopeLine: 35, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!1787 = !DISubroutineType(types: !1788)
!1788 = !{!6, !1732}
!1789 = !DILocation(line: 35, scope: !1786)
!1790 = !DILocalVariable(name: "self", arg: 1, scope: !1786, file: !77, line: 35, type: !1732)
!1791 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Sfc128Random.next_int", scope: !77, file: !77, line: 36, type: !1792, scopeLine: 36, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!1792 = !DISubroutineType(types: !1793)
!1793 = !{!9, !1732}
!1794 = !DILocation(line: 36, scope: !1791)
!1795 = !DILocalVariable(name: "self", arg: 1, scope: !1791, file: !77, line: 36, type: !1732)
!1796 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Sfc128Random.next_short", scope: !77, file: !77, line: 37, type: !1797, scopeLine: 37, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!1797 = !DISubroutineType(types: !1798)
!1798 = !{!190, !1732}
!1799 = !DILocation(line: 37, scope: !1796)
!1800 = !DILocalVariable(name: "self", arg: 1, scope: !1796, file: !77, line: 37, type: !1732)
!1801 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Sfc128Random.next_byte", scope: !77, file: !77, line: 38, type: !1802, scopeLine: 38, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!1802 = !DISubroutineType(types: !1803)
!1803 = !{!121, !1732}
!1804 = !DILocation(line: 38, scope: !1801)
!1805 = !DILocalVariable(name: "self", arg: 1, scope: !1801, file: !77, line: 38, type: !1732)
!1806 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Sfc64Random.set_seed", scope: !77, file: !77, line: 45, type: !1807, scopeLine: 45, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!1807 = !DISubroutineType(types: !1808)
!1808 = !{null, !1809, !117}
!1809 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Sfc64Random*", baseType: !97, size: 64, align: 64, dwarfAddressSpace: 0)
!1810 = !DILocation(line: 46, scope: !1806)
!1811 = !DILocalVariable(name: "self", arg: 1, scope: !1806, file: !77, line: 45, type: !1809)
!1812 = !DILocation(line: 45, scope: !1806)
!1813 = !DILocalVariable(name: "input", arg: 2, scope: !1806, file: !77, line: 45, type: !117)
!1814 = !DILocalVariable(name: "return_value", scope: !1815, file: !77, line: 10, type: !98, align: 16)
!1815 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !68, file: !68, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110, retainedNodes: !124)
!1816 = !DILocation(line: 10, scope: !1815, inlinedAt: !1817)
!1817 = !DILocation(line: 47, scope: !1806)
!1818 = !DILocation(line: 11, scope: !1815, inlinedAt: !1817)
!1819 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Sfc64Random.next_long", scope: !77, file: !77, line: 50, type: !1820, scopeLine: 50, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!1820 = !DISubroutineType(types: !1821)
!1821 = !{!6, !1809}
!1822 = !DILocation(line: 51, scope: !1819)
!1823 = !DILocalVariable(name: "self", arg: 1, scope: !1819, file: !77, line: 50, type: !1809)
!1824 = !DILocation(line: 50, scope: !1819)
!1825 = !DILocalVariable(name: "s", scope: !1819, file: !77, line: 52, type: !219, align: 8)
!1826 = !DILocation(line: 52, scope: !1819)
!1827 = !DILocalVariable(name: "result", scope: !1819, file: !77, line: 53, type: !6, align: 8)
!1828 = !DILocation(line: 53, scope: !1819)
!1829 = !DILocation(line: 54, scope: !1819)
!1830 = !DILocation(line: 55, scope: !1819)
!1831 = !DILocation(line: 56, scope: !1819)
!1832 = !DILocation(line: 147, scope: !1833, inlinedAt: !1831)
!1833 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !798, file: !798, line: 147, scopeLine: 147, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!1834 = !DILocation(line: 57, scope: !1819)
!1835 = !DILocation(line: 58, scope: !1819)
!1836 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Sfc64Random.next_bytes", scope: !77, file: !77, line: 64, type: !1807, scopeLine: 64, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!1837 = !DILocation(line: 64, scope: !1836)
!1838 = !DILocalVariable(name: "self", arg: 1, scope: !1836, file: !77, line: 64, type: !1809)
!1839 = !DILocalVariable(name: "bytes", arg: 2, scope: !1836, file: !77, line: 64, type: !117)
!1840 = !DILocation(line: 62, scope: !1841)
!1841 = distinct !DILexicalBlock(scope: !1836, file: !77, line: 64, column: 65)
!1842 = !DILocalVariable(name: "len", scope: !1843, file: !77, line: 146, type: !123, align: 8)
!1843 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !96, file: !96, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110, retainedNodes: !124)
!1844 = !DILocation(line: 146, scope: !1843, inlinedAt: !1837)
!1845 = !DILocation(line: 148, scope: !1843, inlinedAt: !1837)
!1846 = !DILocation(line: 148, scope: !1847, inlinedAt: !1837)
!1847 = distinct !DILexicalBlock(scope: !1843, file: !96, line: 148, column: 2)
!1848 = !DILocalVariable(name: "value", scope: !1849, file: !77, line: 150, type: !6, align: 8)
!1849 = distinct !DILexicalBlock(scope: !1847, file: !96, line: 149, column: 2)
!1850 = !DILocation(line: 150, scope: !1849, inlinedAt: !1837)
!1851 = !DILocation(line: 64, scope: !1849, inlinedAt: !1837)
!1852 = !DILocation(line: 151, scope: !1849, inlinedAt: !1837)
!1853 = !DILocation(line: 153, scope: !1854, inlinedAt: !1837)
!1854 = distinct !DILexicalBlock(scope: !1849, file: !96, line: 152, column: 3)
!1855 = !DILocation(line: 154, scope: !1854, inlinedAt: !1837)
!1856 = !DILocation(line: 156, scope: !1849, inlinedAt: !1837)
!1857 = !DILocation(line: 157, scope: !1849, inlinedAt: !1837)
!1858 = !DILocation(line: 158, scope: !1849, inlinedAt: !1837)
!1859 = !DILocation(line: 232, scope: !1860, inlinedAt: !1861)
!1860 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !172, file: !172, line: 229, scopeLine: 229, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!1861 = !DILocation(line: 160, scope: !1843, inlinedAt: !1837)
!1862 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Sfc64Random.next_int128", scope: !77, file: !77, line: 65, type: !1863, scopeLine: 65, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!1863 = !DISubroutineType(types: !1864)
!1864 = !{!3, !1809}
!1865 = !DILocation(line: 65, scope: !1862)
!1866 = !DILocalVariable(name: "self", arg: 1, scope: !1862, file: !77, line: 65, type: !1809)
!1867 = !DILocation(line: 65, scope: !1868, inlinedAt: !1865)
!1868 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !96, file: !96, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!1869 = !DILocation(line: 138, scope: !1868, inlinedAt: !1865)
!1870 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Sfc64Random.next_int", scope: !77, file: !77, line: 66, type: !1871, scopeLine: 66, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!1871 = !DISubroutineType(types: !1872)
!1872 = !{!9, !1809}
!1873 = !DILocation(line: 66, scope: !1870)
!1874 = !DILocalVariable(name: "self", arg: 1, scope: !1870, file: !77, line: 66, type: !1809)
!1875 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Sfc64Random.next_short", scope: !77, file: !77, line: 67, type: !1876, scopeLine: 67, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!1876 = !DISubroutineType(types: !1877)
!1877 = !{!190, !1809}
!1878 = !DILocation(line: 67, scope: !1875)
!1879 = !DILocalVariable(name: "self", arg: 1, scope: !1875, file: !77, line: 67, type: !1809)
!1880 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Sfc64Random.next_byte", scope: !77, file: !77, line: 68, type: !1881, scopeLine: 68, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!1881 = !DISubroutineType(types: !1882)
!1882 = !{!121, !1809}
!1883 = !DILocation(line: 68, scope: !1880)
!1884 = !DILocalVariable(name: "self", arg: 1, scope: !1880, file: !77, line: 68, type: !1809)
!1885 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Sfc32Random.set_seed", scope: !77, file: !77, line: 74, type: !1886, scopeLine: 74, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!1886 = !DISubroutineType(types: !1887)
!1887 = !{null, !1888, !117}
!1888 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Sfc32Random*", baseType: !1889, size: 64, align: 64, dwarfAddressSpace: 0)
!1889 = !DIDerivedType(tag: DW_TAG_typedef, name: "Sfc32Random", scope: !77, file: !77, line: 72, baseType: !961, align: 4)
!1890 = !DILocation(line: 75, scope: !1885)
!1891 = !DILocalVariable(name: "self", arg: 1, scope: !1885, file: !77, line: 74, type: !1888)
!1892 = !DILocation(line: 74, scope: !1885)
!1893 = !DILocalVariable(name: "input", arg: 2, scope: !1885, file: !77, line: 74, type: !117)
!1894 = !DILocalVariable(name: "return_value", scope: !1895, file: !77, line: 10, type: !961, align: 16)
!1895 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !68, file: !68, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110, retainedNodes: !124)
!1896 = !DILocation(line: 10, scope: !1895, inlinedAt: !1897)
!1897 = !DILocation(line: 76, scope: !1885)
!1898 = !DILocation(line: 11, scope: !1895, inlinedAt: !1897)
!1899 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Sfc32Random.next_int", scope: !77, file: !77, line: 79, type: !1900, scopeLine: 79, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!1900 = !DISubroutineType(types: !1901)
!1901 = !{!9, !1888}
!1902 = !DILocation(line: 80, scope: !1899)
!1903 = !DILocalVariable(name: "sfc", arg: 1, scope: !1899, file: !77, line: 79, type: !1888)
!1904 = !DILocation(line: 79, scope: !1899)
!1905 = !DILocalVariable(name: "s", scope: !1899, file: !77, line: 81, type: !298, align: 8)
!1906 = !DILocation(line: 81, scope: !1899)
!1907 = !DILocalVariable(name: "result", scope: !1899, file: !77, line: 82, type: !9, align: 4)
!1908 = !DILocation(line: 82, scope: !1899)
!1909 = !DILocation(line: 83, scope: !1899)
!1910 = !DILocation(line: 84, scope: !1899)
!1911 = !DILocation(line: 85, scope: !1899)
!1912 = !DILocation(line: 99, scope: !1913, inlinedAt: !1911)
!1913 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !798, file: !798, line: 99, scopeLine: 99, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!1914 = !DILocation(line: 86, scope: !1899)
!1915 = !DILocation(line: 87, scope: !1899)
!1916 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Sfc32Random.next_bytes", scope: !77, file: !77, line: 93, type: !1886, scopeLine: 93, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!1917 = !DILocation(line: 93, scope: !1916)
!1918 = !DILocalVariable(name: "self", arg: 1, scope: !1916, file: !77, line: 93, type: !1888)
!1919 = !DILocalVariable(name: "bytes", arg: 2, scope: !1916, file: !77, line: 93, type: !117)
!1920 = !DILocation(line: 91, scope: !1921)
!1921 = distinct !DILexicalBlock(scope: !1916, file: !77, line: 93, column: 65)
!1922 = !DILocalVariable(name: "len", scope: !1923, file: !77, line: 146, type: !123, align: 8)
!1923 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !96, file: !96, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110, retainedNodes: !124)
!1924 = !DILocation(line: 146, scope: !1923, inlinedAt: !1917)
!1925 = !DILocation(line: 148, scope: !1923, inlinedAt: !1917)
!1926 = !DILocation(line: 148, scope: !1927, inlinedAt: !1917)
!1927 = distinct !DILexicalBlock(scope: !1923, file: !96, line: 148, column: 2)
!1928 = !DILocalVariable(name: "value", scope: !1929, file: !77, line: 150, type: !9, align: 4)
!1929 = distinct !DILexicalBlock(scope: !1927, file: !96, line: 149, column: 2)
!1930 = !DILocation(line: 150, scope: !1929, inlinedAt: !1917)
!1931 = !DILocation(line: 93, scope: !1929, inlinedAt: !1917)
!1932 = !DILocation(line: 151, scope: !1929, inlinedAt: !1917)
!1933 = !DILocation(line: 153, scope: !1934, inlinedAt: !1917)
!1934 = distinct !DILexicalBlock(scope: !1929, file: !96, line: 152, column: 3)
!1935 = !DILocation(line: 154, scope: !1934, inlinedAt: !1917)
!1936 = !DILocation(line: 156, scope: !1929, inlinedAt: !1917)
!1937 = !DILocation(line: 157, scope: !1929, inlinedAt: !1917)
!1938 = !DILocation(line: 158, scope: !1929, inlinedAt: !1917)
!1939 = !DILocation(line: 232, scope: !1940, inlinedAt: !1941)
!1940 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !172, file: !172, line: 229, scopeLine: 229, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!1941 = !DILocation(line: 160, scope: !1923, inlinedAt: !1917)
!1942 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Sfc32Random.next_int128", scope: !77, file: !77, line: 94, type: !1943, scopeLine: 94, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!1943 = !DISubroutineType(types: !1944)
!1944 = !{!3, !1888}
!1945 = !DILocation(line: 94, scope: !1942)
!1946 = !DILocalVariable(name: "self", arg: 1, scope: !1942, file: !77, line: 94, type: !1888)
!1947 = !DILocation(line: 94, scope: !1948, inlinedAt: !1945)
!1948 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !96, file: !96, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!1949 = !DILocation(line: 138, scope: !1948, inlinedAt: !1945)
!1950 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Sfc32Random.next_long", scope: !77, file: !77, line: 95, type: !1951, scopeLine: 95, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!1951 = !DISubroutineType(types: !1952)
!1952 = !{!6, !1888}
!1953 = !DILocation(line: 95, scope: !1950)
!1954 = !DILocalVariable(name: "self", arg: 1, scope: !1950, file: !77, line: 95, type: !1888)
!1955 = !DILocation(line: 95, scope: !1956, inlinedAt: !1953)
!1956 = distinct !DISubprogram(name: "@int_to_long", linkageName: "@int_to_long", scope: !96, file: !96, line: 139, scopeLine: 139, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!1957 = !DILocation(line: 139, scope: !1956, inlinedAt: !1953)
!1958 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Sfc32Random.next_short", scope: !77, file: !77, line: 96, type: !1959, scopeLine: 96, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!1959 = !DISubroutineType(types: !1960)
!1960 = !{!190, !1888}
!1961 = !DILocation(line: 96, scope: !1958)
!1962 = !DILocalVariable(name: "self", arg: 1, scope: !1958, file: !77, line: 96, type: !1888)
!1963 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Sfc32Random.next_byte", scope: !77, file: !77, line: 97, type: !1964, scopeLine: 97, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!1964 = !DISubroutineType(types: !1965)
!1965 = !{!121, !1888}
!1966 = !DILocation(line: 97, scope: !1963)
!1967 = !DILocalVariable(name: "self", arg: 1, scope: !1963, file: !77, line: 97, type: !1888)
!1968 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Sfc16Random.set_seed", scope: !77, file: !77, line: 103, type: !1969, scopeLine: 103, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!1969 = !DISubroutineType(types: !1970)
!1970 = !{null, !1971, !117}
!1971 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Sfc16Random*", baseType: !1972, size: 64, align: 64, dwarfAddressSpace: 0)
!1972 = !DIDerivedType(tag: DW_TAG_typedef, name: "Sfc16Random", scope: !77, file: !77, line: 101, baseType: !1056, align: 2)
!1973 = !DILocation(line: 104, scope: !1968)
!1974 = !DILocalVariable(name: "self", arg: 1, scope: !1968, file: !77, line: 103, type: !1971)
!1975 = !DILocation(line: 103, scope: !1968)
!1976 = !DILocalVariable(name: "input", arg: 2, scope: !1968, file: !77, line: 103, type: !117)
!1977 = !DILocalVariable(name: "return_value", scope: !1978, file: !77, line: 10, type: !1056, align: 2)
!1978 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !68, file: !68, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110, retainedNodes: !124)
!1979 = !DILocation(line: 10, scope: !1978, inlinedAt: !1980)
!1980 = !DILocation(line: 105, scope: !1968)
!1981 = !DILocation(line: 11, scope: !1978, inlinedAt: !1980)
!1982 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Sfc16Random.next_short", scope: !77, file: !77, line: 109, type: !1983, scopeLine: 109, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!1983 = !DISubroutineType(types: !1984)
!1984 = !{!190, !1971}
!1985 = !DILocation(line: 110, scope: !1982)
!1986 = !DILocalVariable(name: "seed", arg: 1, scope: !1982, file: !77, line: 109, type: !1971)
!1987 = !DILocation(line: 109, scope: !1982)
!1988 = !DILocalVariable(name: "s", scope: !1982, file: !77, line: 111, type: !378, align: 8)
!1989 = !DILocation(line: 111, scope: !1982)
!1990 = !DILocalVariable(name: "result", scope: !1982, file: !77, line: 112, type: !190, align: 2)
!1991 = !DILocation(line: 112, scope: !1982)
!1992 = !DILocation(line: 113, scope: !1982)
!1993 = !DILocation(line: 114, scope: !1982)
!1994 = !DILocation(line: 115, scope: !1982)
!1995 = !DILocation(line: 115, scope: !1996, inlinedAt: !1994)
!1996 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !798, file: !798, line: 115, scopeLine: 115, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!1997 = !DILocation(line: 116, scope: !1982)
!1998 = !DILocation(line: 117, scope: !1982)
!1999 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Sfc16Random.next_bytes", scope: !77, file: !77, line: 123, type: !1969, scopeLine: 123, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!2000 = !DILocation(line: 123, scope: !1999)
!2001 = !DILocalVariable(name: "self", arg: 1, scope: !1999, file: !77, line: 123, type: !1971)
!2002 = !DILocalVariable(name: "bytes", arg: 2, scope: !1999, file: !77, line: 123, type: !117)
!2003 = !DILocation(line: 121, scope: !2004)
!2004 = distinct !DILexicalBlock(scope: !1999, file: !77, line: 123, column: 65)
!2005 = !DILocalVariable(name: "len", scope: !2006, file: !77, line: 146, type: !123, align: 8)
!2006 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !96, file: !96, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110, retainedNodes: !124)
!2007 = !DILocation(line: 146, scope: !2006, inlinedAt: !2000)
!2008 = !DILocation(line: 148, scope: !2006, inlinedAt: !2000)
!2009 = !DILocation(line: 148, scope: !2010, inlinedAt: !2000)
!2010 = distinct !DILexicalBlock(scope: !2006, file: !96, line: 148, column: 2)
!2011 = !DILocalVariable(name: "value", scope: !2012, file: !77, line: 150, type: !190, align: 2)
!2012 = distinct !DILexicalBlock(scope: !2010, file: !96, line: 149, column: 2)
!2013 = !DILocation(line: 150, scope: !2012, inlinedAt: !2000)
!2014 = !DILocation(line: 123, scope: !2012, inlinedAt: !2000)
!2015 = !DILocation(line: 151, scope: !2012, inlinedAt: !2000)
!2016 = !DILocation(line: 153, scope: !2017, inlinedAt: !2000)
!2017 = distinct !DILexicalBlock(scope: !2012, file: !96, line: 152, column: 3)
!2018 = !DILocation(line: 154, scope: !2017, inlinedAt: !2000)
!2019 = !DILocation(line: 156, scope: !2012, inlinedAt: !2000)
!2020 = !DILocation(line: 157, scope: !2012, inlinedAt: !2000)
!2021 = !DILocation(line: 158, scope: !2012, inlinedAt: !2000)
!2022 = !DILocation(line: 232, scope: !2023, inlinedAt: !2024)
!2023 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !172, file: !172, line: 229, scopeLine: 229, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!2024 = !DILocation(line: 160, scope: !2006, inlinedAt: !2000)
!2025 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Sfc16Random.next_int128", scope: !77, file: !77, line: 124, type: !2026, scopeLine: 124, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!2026 = !DISubroutineType(types: !2027)
!2027 = !{!3, !1971}
!2028 = !DILocation(line: 124, scope: !2025)
!2029 = !DILocalVariable(name: "self", arg: 1, scope: !2025, file: !77, line: 124, type: !1971)
!2030 = !DILocation(line: 124, scope: !2031, inlinedAt: !2028)
!2031 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !96, file: !96, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!2032 = !DILocation(line: 138, scope: !2031, inlinedAt: !2028)
!2033 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Sfc16Random.next_long", scope: !77, file: !77, line: 125, type: !2034, scopeLine: 125, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!2034 = !DISubroutineType(types: !2035)
!2035 = !{!6, !1971}
!2036 = !DILocation(line: 125, scope: !2033)
!2037 = !DILocalVariable(name: "self", arg: 1, scope: !2033, file: !77, line: 125, type: !1971)
!2038 = !DILocation(line: 125, scope: !2039, inlinedAt: !2036)
!2039 = distinct !DISubprogram(name: "@int_to_long", linkageName: "@int_to_long", scope: !96, file: !96, line: 139, scopeLine: 139, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!2040 = !DILocation(line: 139, scope: !2039, inlinedAt: !2036)
!2041 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Sfc16Random.next_int", scope: !77, file: !77, line: 126, type: !2042, scopeLine: 126, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!2042 = !DISubroutineType(types: !2043)
!2043 = !{!9, !1971}
!2044 = !DILocation(line: 126, scope: !2041)
!2045 = !DILocalVariable(name: "self", arg: 1, scope: !2041, file: !77, line: 126, type: !1971)
!2046 = !DILocation(line: 126, scope: !2047, inlinedAt: !2044)
!2047 = distinct !DISubprogram(name: "@short_to_int", linkageName: "@short_to_int", scope: !96, file: !96, line: 140, scopeLine: 140, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!2048 = !DILocation(line: 140, scope: !2047, inlinedAt: !2044)
!2049 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Sfc16Random.next_byte", scope: !77, file: !77, line: 127, type: !2050, scopeLine: 127, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!2050 = !DISubroutineType(types: !2051)
!2051 = !{!121, !1971}
!2052 = !DILocation(line: 127, scope: !2049)
!2053 = !DILocalVariable(name: "self", arg: 1, scope: !2049, file: !77, line: 127, type: !1971)
!2054 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Sfc8Random.set_seed", scope: !77, file: !77, line: 134, type: !2055, scopeLine: 134, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!2055 = !DISubroutineType(types: !2056)
!2056 = !{null, !2057, !117}
!2057 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Sfc8Random*", baseType: !2058, size: 64, align: 64, dwarfAddressSpace: 0)
!2058 = !DIDerivedType(tag: DW_TAG_typedef, name: "Sfc8Random", scope: !77, file: !77, line: 132, baseType: !1154, align: 1)
!2059 = !DILocation(line: 135, scope: !2054)
!2060 = !DILocalVariable(name: "self", arg: 1, scope: !2054, file: !77, line: 134, type: !2057)
!2061 = !DILocation(line: 134, scope: !2054)
!2062 = !DILocalVariable(name: "input", arg: 2, scope: !2054, file: !77, line: 134, type: !117)
!2063 = !DILocalVariable(name: "return_value", scope: !2064, file: !77, line: 10, type: !1154, align: 1)
!2064 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !68, file: !68, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110, retainedNodes: !124)
!2065 = !DILocation(line: 10, scope: !2064, inlinedAt: !2066)
!2066 = !DILocation(line: 136, scope: !2054)
!2067 = !DILocation(line: 11, scope: !2064, inlinedAt: !2066)
!2068 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Sfc8Random.next_byte", scope: !77, file: !77, line: 139, type: !2069, scopeLine: 139, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!2069 = !DISubroutineType(types: !2070)
!2070 = !{!121, !2057}
!2071 = !DILocation(line: 140, scope: !2068)
!2072 = !DILocalVariable(name: "self", arg: 1, scope: !2068, file: !77, line: 139, type: !2057)
!2073 = !DILocation(line: 139, scope: !2068)
!2074 = !DILocalVariable(name: "s", scope: !2068, file: !77, line: 141, type: !120, align: 8)
!2075 = !DILocation(line: 141, scope: !2068)
!2076 = !DILocalVariable(name: "result", scope: !2068, file: !77, line: 142, type: !121, align: 1)
!2077 = !DILocation(line: 142, scope: !2068)
!2078 = !DILocation(line: 143, scope: !2068)
!2079 = !DILocation(line: 144, scope: !2068)
!2080 = !DILocation(line: 145, scope: !2068)
!2081 = !DILocation(line: 131, scope: !2082, inlinedAt: !2080)
!2082 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !798, file: !798, line: 131, scopeLine: 131, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!2083 = !DILocation(line: 146, scope: !2068)
!2084 = !DILocation(line: 147, scope: !2068)
!2085 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Sfc8Random.next_bytes", scope: !77, file: !77, line: 150, type: !2055, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!2086 = !DILocation(line: 150, scope: !2085)
!2087 = !DILocalVariable(name: "self", arg: 1, scope: !2085, file: !77, line: 150, type: !2057)
!2088 = !DILocalVariable(name: "bytes", arg: 2, scope: !2085, file: !77, line: 150, type: !117)
!2089 = !DILocalVariable(name: "len", scope: !2090, file: !77, line: 146, type: !123, align: 8)
!2090 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !96, file: !96, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110, retainedNodes: !124)
!2091 = !DILocation(line: 146, scope: !2090, inlinedAt: !2086)
!2092 = !DILocation(line: 148, scope: !2090, inlinedAt: !2086)
!2093 = !DILocation(line: 148, scope: !2094, inlinedAt: !2086)
!2094 = distinct !DILexicalBlock(scope: !2090, file: !96, line: 148, column: 2)
!2095 = !DILocalVariable(name: "value", scope: !2096, file: !77, line: 150, type: !121, align: 1)
!2096 = distinct !DILexicalBlock(scope: !2094, file: !96, line: 149, column: 2)
!2097 = !DILocation(line: 150, scope: !2096, inlinedAt: !2086)
!2098 = !DILocation(line: 151, scope: !2096, inlinedAt: !2086)
!2099 = !DILocation(line: 153, scope: !2100, inlinedAt: !2086)
!2100 = distinct !DILexicalBlock(scope: !2096, file: !96, line: 152, column: 3)
!2101 = !DILocation(line: 154, scope: !2100, inlinedAt: !2086)
!2102 = !DILocation(line: 156, scope: !2096, inlinedAt: !2086)
!2103 = !DILocation(line: 157, scope: !2096, inlinedAt: !2086)
!2104 = !DILocation(line: 158, scope: !2096, inlinedAt: !2086)
!2105 = !DILocation(line: 232, scope: !2106, inlinedAt: !2107)
!2106 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !172, file: !172, line: 229, scopeLine: 229, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!2107 = !DILocation(line: 160, scope: !2090, inlinedAt: !2086)
!2108 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Sfc8Random.next_int128", scope: !77, file: !77, line: 151, type: !2109, scopeLine: 151, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!2109 = !DISubroutineType(types: !2110)
!2110 = !{!3, !2057}
!2111 = !DILocation(line: 151, scope: !2108)
!2112 = !DILocalVariable(name: "self", arg: 1, scope: !2108, file: !77, line: 151, type: !2057)
!2113 = !DILocation(line: 151, scope: !2114, inlinedAt: !2111)
!2114 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !96, file: !96, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!2115 = !DILocation(line: 138, scope: !2114, inlinedAt: !2111)
!2116 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Sfc8Random.next_long", scope: !77, file: !77, line: 152, type: !2117, scopeLine: 152, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!2117 = !DISubroutineType(types: !2118)
!2118 = !{!6, !2057}
!2119 = !DILocation(line: 152, scope: !2116)
!2120 = !DILocalVariable(name: "self", arg: 1, scope: !2116, file: !77, line: 152, type: !2057)
!2121 = !DILocation(line: 152, scope: !2122, inlinedAt: !2119)
!2122 = distinct !DISubprogram(name: "@int_to_long", linkageName: "@int_to_long", scope: !96, file: !96, line: 139, scopeLine: 139, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!2123 = !DILocation(line: 139, scope: !2122, inlinedAt: !2119)
!2124 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Sfc8Random.next_int", scope: !77, file: !77, line: 153, type: !2125, scopeLine: 153, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!2125 = !DISubroutineType(types: !2126)
!2126 = !{!9, !2057}
!2127 = !DILocation(line: 153, scope: !2124)
!2128 = !DILocalVariable(name: "self", arg: 1, scope: !2124, file: !77, line: 153, type: !2057)
!2129 = !DILocation(line: 153, scope: !2130, inlinedAt: !2127)
!2130 = distinct !DISubprogram(name: "@short_to_int", linkageName: "@short_to_int", scope: !96, file: !96, line: 140, scopeLine: 140, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!2131 = !DILocation(line: 140, scope: !2130, inlinedAt: !2127)
!2132 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Sfc8Random.next_short", scope: !77, file: !77, line: 154, type: !2133, scopeLine: 154, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!2133 = !DISubroutineType(types: !2134)
!2134 = !{!190, !2057}
!2135 = !DILocation(line: 154, scope: !2132)
!2136 = !DILocalVariable(name: "self", arg: 1, scope: !2132, file: !77, line: 154, type: !2057)
!2137 = !DILocation(line: 154, scope: !2138, inlinedAt: !2135)
!2138 = distinct !DISubprogram(name: "@char_to_short", linkageName: "@char_to_short", scope: !96, file: !96, line: 141, scopeLine: 141, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!2139 = !DILocation(line: 141, scope: !2138, inlinedAt: !2135)
!2140 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.SimpleRandom.set_seed", scope: !88, file: !88, line: 6, type: !2141, scopeLine: 6, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!2141 = !DISubroutineType(types: !2142)
!2142 = !{null, !2143, !117}
!2143 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "SimpleRandom*", baseType: !2144, size: 64, align: 64, dwarfAddressSpace: 0)
!2144 = !DIDerivedType(tag: DW_TAG_typedef, name: "SimpleRandom", scope: !88, file: !88, line: 3, baseType: !6, align: 8)
!2145 = !DILocation(line: 7, scope: !2140)
!2146 = !DILocalVariable(name: "self", arg: 1, scope: !2140, file: !88, line: 6, type: !2143)
!2147 = !DILocation(line: 6, scope: !2140)
!2148 = !DILocalVariable(name: "seed", arg: 2, scope: !2140, file: !88, line: 6, type: !117)
!2149 = !DILocalVariable(name: "full", scope: !2140, file: !88, line: 8, type: !2150, align: 1)
!2150 = !DICompositeType(tag: DW_TAG_array_type, baseType: !121, size: 64, align: 8, elements: !1687)
!2151 = !DILocation(line: 8, scope: !2140)
!2152 = !DILocation(line: 9, scope: !2153)
!2153 = distinct !DILexicalBlock(scope: !2140, file: !88, line: 9, column: 2)
!2154 = !DILocalVariable(name: ".temp", scope: !2153, file: !88, line: 9, type: !123, align: 8)
!2155 = !DILocalVariable(name: "i", scope: !2156, file: !88, line: 9, type: !123, align: 8)
!2156 = distinct !DILexicalBlock(scope: !2153, file: !88, line: 10, column: 2)
!2157 = !DILocation(line: 9, scope: !2156)
!2158 = !DILocalVariable(name: "c", scope: !2156, file: !88, line: 9, type: !121, align: 1)
!2159 = !DILocation(line: 11, scope: !2160)
!2160 = distinct !DILexicalBlock(scope: !2156, file: !88, line: 10, column: 2)
!2161 = !DILocalVariable(name: "x", scope: !2162, file: !88, line: 283, type: !6, align: 8)
!2162 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !172, file: !172, line: 278, scopeLine: 278, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110, retainedNodes: !124)
!2163 = !DILocation(line: 283, scope: !2162, inlinedAt: !2164)
!2164 = !DILocation(line: 13, scope: !2140)
!2165 = !DILocation(line: 284, scope: !2162, inlinedAt: !2164)
!2166 = !DILocation(line: 285, scope: !2162, inlinedAt: !2164)
!2167 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.SimpleRandom.next_int", scope: !88, file: !88, line: 16, type: !2168, scopeLine: 16, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!2168 = !DISubroutineType(types: !2169)
!2169 = !{!9, !2143}
!2170 = !DILocation(line: 17, scope: !2167)
!2171 = !DILocalVariable(name: "self", arg: 1, scope: !2167, file: !88, line: 16, type: !2143)
!2172 = !DILocation(line: 16, scope: !2167)
!2173 = !DILocalVariable(name: "nextseed", scope: !2167, file: !88, line: 18, type: !6, align: 8)
!2174 = !DILocation(line: 18, scope: !2167)
!2175 = !DILocation(line: 19, scope: !2167)
!2176 = !DILocation(line: 20, scope: !2167)
!2177 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.SimpleRandom.next_bytes", scope: !88, file: !88, line: 26, type: !2141, scopeLine: 26, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!2178 = !DILocation(line: 26, scope: !2177)
!2179 = !DILocalVariable(name: "self", arg: 1, scope: !2177, file: !88, line: 26, type: !2143)
!2180 = !DILocalVariable(name: "bytes", arg: 2, scope: !2177, file: !88, line: 26, type: !117)
!2181 = !DILocation(line: 24, scope: !2182)
!2182 = distinct !DILexicalBlock(scope: !2177, file: !88, line: 26, column: 66)
!2183 = !DILocalVariable(name: "len", scope: !2184, file: !88, line: 146, type: !123, align: 8)
!2184 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !96, file: !96, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110, retainedNodes: !124)
!2185 = !DILocation(line: 146, scope: !2184, inlinedAt: !2178)
!2186 = !DILocation(line: 148, scope: !2184, inlinedAt: !2178)
!2187 = !DILocation(line: 148, scope: !2188, inlinedAt: !2178)
!2188 = distinct !DILexicalBlock(scope: !2184, file: !96, line: 148, column: 2)
!2189 = !DILocalVariable(name: "value", scope: !2190, file: !88, line: 150, type: !9, align: 4)
!2190 = distinct !DILexicalBlock(scope: !2188, file: !96, line: 149, column: 2)
!2191 = !DILocation(line: 150, scope: !2190, inlinedAt: !2178)
!2192 = !DILocation(line: 26, scope: !2190, inlinedAt: !2178)
!2193 = !DILocation(line: 151, scope: !2190, inlinedAt: !2178)
!2194 = !DILocation(line: 153, scope: !2195, inlinedAt: !2178)
!2195 = distinct !DILexicalBlock(scope: !2190, file: !96, line: 152, column: 3)
!2196 = !DILocation(line: 154, scope: !2195, inlinedAt: !2178)
!2197 = !DILocation(line: 156, scope: !2190, inlinedAt: !2178)
!2198 = !DILocation(line: 157, scope: !2190, inlinedAt: !2178)
!2199 = !DILocation(line: 158, scope: !2190, inlinedAt: !2178)
!2200 = !DILocation(line: 232, scope: !2201, inlinedAt: !2202)
!2201 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !172, file: !172, line: 229, scopeLine: 229, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!2202 = !DILocation(line: 160, scope: !2184, inlinedAt: !2178)
!2203 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.SimpleRandom.next_int128", scope: !88, file: !88, line: 27, type: !2204, scopeLine: 27, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!2204 = !DISubroutineType(types: !2205)
!2205 = !{!3, !2143}
!2206 = !DILocation(line: 27, scope: !2203)
!2207 = !DILocalVariable(name: "self", arg: 1, scope: !2203, file: !88, line: 27, type: !2143)
!2208 = !DILocation(line: 27, scope: !2209, inlinedAt: !2206)
!2209 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !96, file: !96, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!2210 = !DILocation(line: 138, scope: !2209, inlinedAt: !2206)
!2211 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.SimpleRandom.next_long", scope: !88, file: !88, line: 28, type: !2212, scopeLine: 28, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!2212 = !DISubroutineType(types: !2213)
!2213 = !{!6, !2143}
!2214 = !DILocation(line: 28, scope: !2211)
!2215 = !DILocalVariable(name: "self", arg: 1, scope: !2211, file: !88, line: 28, type: !2143)
!2216 = !DILocation(line: 28, scope: !2217, inlinedAt: !2214)
!2217 = distinct !DISubprogram(name: "@int_to_long", linkageName: "@int_to_long", scope: !96, file: !96, line: 139, scopeLine: 139, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!2218 = !DILocation(line: 139, scope: !2217, inlinedAt: !2214)
!2219 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.SimpleRandom.next_short", scope: !88, file: !88, line: 29, type: !2220, scopeLine: 29, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!2220 = !DISubroutineType(types: !2221)
!2221 = !{!190, !2143}
!2222 = !DILocation(line: 29, scope: !2219)
!2223 = !DILocalVariable(name: "self", arg: 1, scope: !2219, file: !88, line: 29, type: !2143)
!2224 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.SimpleRandom.next_byte", scope: !88, file: !88, line: 30, type: !2225, scopeLine: 30, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!2225 = !DISubroutineType(types: !2226)
!2226 = !{!121, !2143}
!2227 = !DILocation(line: 30, scope: !2224)
!2228 = !DILocalVariable(name: "self", arg: 1, scope: !2224, file: !88, line: 30, type: !2143)
!2229 = distinct !DISubprogram(name: "srand", linkageName: "std.math.random.srand", scope: !96, file: !96, line: 71, type: !2230, scopeLine: 71, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!2230 = !DISubroutineType(types: !2231)
!2231 = !{null, !6}
!2232 = !DILocalVariable(name: "seed", arg: 1, scope: !2229, file: !96, line: 71, type: !6)
!2233 = !DILocation(line: 71, scope: !2229)
!2234 = !DILocation(line: 73, scope: !2229)
!2235 = !DILocation(line: 74, scope: !2229)
!2236 = distinct !DISubprogram(name: "rand", linkageName: "std.math.random.rand", scope: !96, file: !96, line: 80, type: !2237, scopeLine: 80, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!2237 = !DISubroutineType(types: !2238)
!2238 = !{!59, !59}
!2239 = !DILocalVariable(name: "range", arg: 1, scope: !2236, file: !96, line: 80, type: !59)
!2240 = !DILocation(line: 80, scope: !2236)
!2241 = !DILocation(line: 179, scope: !2242, inlinedAt: !2243)
!2242 = distinct !DISubprogram(name: "init_default_random", linkageName: "init_default_random", scope: !96, file: !96, line: 177, scopeLine: 177, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!2243 = !DILocation(line: 82, scope: !2236)
!2244 = !DILocation(line: 136, scope: !2245, inlinedAt: !2246)
!2245 = distinct !DISubprogram(name: "is_random", linkageName: "is_random", scope: !96, file: !96, line: 136, scopeLine: 136, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!2246 = !DILocation(line: 181, scope: !2247, inlinedAt: !2249)
!2247 = distinct !DILexicalBlock(scope: !2248, file: !96, line: 27, column: 1)
!2248 = distinct !DISubprogram(name: "seed_entropy", linkageName: "seed_entropy", scope: !96, file: !96, line: 26, scopeLine: 26, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!2249 = !DILocation(line: 181, scope: !2250, inlinedAt: !2243)
!2250 = distinct !DILexicalBlock(scope: !2242, file: !96, line: 180, column: 2)
!2251 = !DILocation(line: 28, scope: !2248, inlinedAt: !2249)
!2252 = !DILocation(line: 182, scope: !2250, inlinedAt: !2243)
!2253 = !DILocation(line: 83, scope: !2236)
!2254 = !DILocation(line: 136, scope: !2255, inlinedAt: !2256)
!2255 = distinct !DISubprogram(name: "is_random", linkageName: "is_random", scope: !96, file: !96, line: 136, scopeLine: 136, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!2256 = !DILocation(line: 83, scope: !2257, inlinedAt: !2253)
!2257 = distinct !DILexicalBlock(scope: !2258, file: !96, line: 38, column: 1)
!2258 = distinct !DISubprogram(name: "next", linkageName: "next", scope: !96, file: !96, line: 37, scopeLine: 37, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110, retainedNodes: !124)
!2259 = !DILocation(line: 35, scope: !2257, inlinedAt: !2253)
!2260 = !DILocation(line: 39, scope: !2258, inlinedAt: !2253)
!2261 = !DILocalVariable(name: "mask", scope: !2258, file: !96, line: 40, type: !9, align: 4)
!2262 = !DILocation(line: 40, scope: !2258, inlinedAt: !2253)
!2263 = !DILocation(line: 41, scope: !2258, inlinedAt: !2253)
!2264 = !DILocation(line: 42, scope: !2258, inlinedAt: !2253)
!2265 = !DILocation(line: 95, scope: !2266, inlinedAt: !2264)
!2266 = distinct !DISubprogram(name: "clz", linkageName: "clz", scope: !798, file: !798, line: 95, scopeLine: 95, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!2267 = !DILocalVariable(name: "x", scope: !2258, file: !96, line: 43, type: !9, align: 4)
!2268 = !DILocation(line: 43, scope: !2258, inlinedAt: !2253)
!2269 = !DILocation(line: 44, scope: !2258, inlinedAt: !2253)
!2270 = !DILocation(line: 48, scope: !2271, inlinedAt: !2253)
!2271 = distinct !DILexicalBlock(scope: !2258, file: !96, line: 44, column: 2)
!2272 = !DILocation(line: 46, scope: !2273, inlinedAt: !2253)
!2273 = distinct !DILexicalBlock(scope: !2271, file: !96, line: 45, column: 2)
!2274 = !DILocation(line: 49, scope: !2258, inlinedAt: !2253)
!2275 = distinct !DISubprogram(name: "rand_in_range", linkageName: "std.math.random.rand_in_range", scope: !96, file: !96, line: 90, type: !2276, scopeLine: 90, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!2276 = !DISubroutineType(types: !2277)
!2277 = !{!2278, !59, !59}
!2278 = !DIDerivedType(tag: DW_TAG_typedef, name: "CInt", scope: !96, file: !96, line: 21, baseType: !59, align: 4)
!2279 = !DILocalVariable(name: "min", arg: 1, scope: !2275, file: !96, line: 90, type: !59)
!2280 = !DILocation(line: 90, scope: !2275)
!2281 = !DILocalVariable(name: "max", arg: 2, scope: !2275, file: !96, line: 90, type: !59)
!2282 = !DILocation(line: 88, scope: !2283)
!2283 = distinct !DILexicalBlock(scope: !2275, file: !96, line: 91, column: 1)
!2284 = !DILocation(line: 179, scope: !2285, inlinedAt: !2286)
!2285 = distinct !DISubprogram(name: "init_default_random", linkageName: "init_default_random", scope: !96, file: !96, line: 177, scopeLine: 177, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!2286 = !DILocation(line: 92, scope: !2275)
!2287 = !DILocation(line: 136, scope: !2288, inlinedAt: !2289)
!2288 = distinct !DISubprogram(name: "is_random", linkageName: "is_random", scope: !96, file: !96, line: 136, scopeLine: 136, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!2289 = !DILocation(line: 181, scope: !2290, inlinedAt: !2292)
!2290 = distinct !DILexicalBlock(scope: !2291, file: !96, line: 27, column: 1)
!2291 = distinct !DISubprogram(name: "seed_entropy", linkageName: "seed_entropy", scope: !96, file: !96, line: 26, scopeLine: 26, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!2292 = !DILocation(line: 181, scope: !2293, inlinedAt: !2286)
!2293 = distinct !DILexicalBlock(scope: !2285, file: !96, line: 180, column: 2)
!2294 = !DILocation(line: 28, scope: !2291, inlinedAt: !2292)
!2295 = !DILocation(line: 182, scope: !2293, inlinedAt: !2286)
!2296 = !DILocation(line: 136, scope: !2297, inlinedAt: !2298)
!2297 = distinct !DISubprogram(name: "is_random", linkageName: "is_random", scope: !96, file: !96, line: 136, scopeLine: 136, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!2298 = !DILocation(line: 93, scope: !2299, inlinedAt: !2301)
!2299 = distinct !DILexicalBlock(scope: !2300, file: !96, line: 59, column: 1)
!2300 = distinct !DISubprogram(name: "next_in_range", linkageName: "next_in_range", scope: !96, file: !96, line: 58, scopeLine: 58, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!2301 = !DILocation(line: 93, scope: !2275)
!2302 = !DILocation(line: 56, scope: !2299, inlinedAt: !2301)
!2303 = !DILocation(line: 60, scope: !2300, inlinedAt: !2301)
!2304 = !DILocation(line: 136, scope: !2305, inlinedAt: !2306)
!2305 = distinct !DISubprogram(name: "is_random", linkageName: "is_random", scope: !96, file: !96, line: 136, scopeLine: 136, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!2306 = !DILocation(line: 60, scope: !2307, inlinedAt: !2303)
!2307 = distinct !DILexicalBlock(scope: !2308, file: !96, line: 38, column: 1)
!2308 = distinct !DISubprogram(name: "next", linkageName: "next", scope: !96, file: !96, line: 37, scopeLine: 37, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110, retainedNodes: !124)
!2309 = !DILocation(line: 35, scope: !2307, inlinedAt: !2303)
!2310 = !DILocation(line: 39, scope: !2308, inlinedAt: !2303)
!2311 = !DILocalVariable(name: "mask", scope: !2308, file: !96, line: 40, type: !9, align: 4)
!2312 = !DILocation(line: 40, scope: !2308, inlinedAt: !2303)
!2313 = !DILocation(line: 41, scope: !2308, inlinedAt: !2303)
!2314 = !DILocation(line: 42, scope: !2308, inlinedAt: !2303)
!2315 = !DILocation(line: 95, scope: !2316, inlinedAt: !2314)
!2316 = distinct !DISubprogram(name: "clz", linkageName: "clz", scope: !798, file: !798, line: 95, scopeLine: 95, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!2317 = !DILocalVariable(name: "x", scope: !2308, file: !96, line: 43, type: !9, align: 4)
!2318 = !DILocation(line: 43, scope: !2308, inlinedAt: !2303)
!2319 = !DILocation(line: 44, scope: !2308, inlinedAt: !2303)
!2320 = !DILocation(line: 48, scope: !2321, inlinedAt: !2303)
!2321 = distinct !DILexicalBlock(scope: !2308, file: !96, line: 44, column: 2)
!2322 = !DILocation(line: 46, scope: !2323, inlinedAt: !2303)
!2323 = distinct !DILexicalBlock(scope: !2321, file: !96, line: 45, column: 2)
!2324 = !DILocation(line: 49, scope: !2308, inlinedAt: !2303)
!2325 = distinct !DISubprogram(name: "rnd", linkageName: "std.math.random.rnd", scope: !96, file: !96, line: 96, type: !2326, scopeLine: 96, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !110, retainedNodes: !124)
!2326 = !DISubroutineType(types: !2327)
!2327 = !{!2328}
!2328 = !DIBasicType(name: "double", size: 64, encoding: DW_ATE_float)
!2329 = !DILocation(line: 179, scope: !2330, inlinedAt: !2331)
!2330 = distinct !DISubprogram(name: "init_default_random", linkageName: "init_default_random", scope: !96, file: !96, line: 177, scopeLine: 177, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!2331 = !DILocation(line: 98, scope: !2325)
!2332 = !DILocation(line: 136, scope: !2333, inlinedAt: !2334)
!2333 = distinct !DISubprogram(name: "is_random", linkageName: "is_random", scope: !96, file: !96, line: 136, scopeLine: 136, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!2334 = !DILocation(line: 181, scope: !2335, inlinedAt: !2337)
!2335 = distinct !DILexicalBlock(scope: !2336, file: !96, line: 27, column: 1)
!2336 = distinct !DISubprogram(name: "seed_entropy", linkageName: "seed_entropy", scope: !96, file: !96, line: 26, scopeLine: 26, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !110)
!2337 = !DILocation(line: 181, scope: !2338, inlinedAt: !2331)
!2338 = distinct !DILexicalBlock(scope: !2330, file: !96, line: 180, column: 2)
!2339 = !DILocation(line: 28, scope: !2336, inlinedAt: !2337)
!2340 = !DILocation(line: 182, scope: !2338, inlinedAt: !2331)
!2341 = !DILocalVariable(name: "val", scope: !2325, file: !96, line: 99, type: !6, align: 8)
!2342 = !DILocation(line: 99, scope: !2325)
!2343 = !DILocation(line: 100, scope: !2325)
