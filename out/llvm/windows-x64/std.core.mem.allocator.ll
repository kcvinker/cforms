; ModuleID = 'std::core::mem::allocator'
source_filename = "std::core::mem::allocator"
target datalayout = "e-m:w-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-windows-msvc"

%.introspect = type { i8, i64, ptr, i64, i64, i64, [0 x i64] }
%"char[]" = type { ptr, i64 }
%Backtrace = type { i64, %"char[]", %"char[]", %"char[]", i32, %any, i8 }
%any = type { ptr, i64 }
%WasmMemory = type { i64, i64 }
%"any[]" = type { ptr, i64 }
%AlignedBlock = type { i64, ptr }
%OnStackAllocatorExtraChunk = type { i8, ptr, ptr }
%TrackingAllocator = type { %any, %HashMap, i64, i64 }
%HashMap = type { %"Entry*[]", %any, i32, i32, float }
%"Entry*[]" = type { ptr, i64 }
%"Allocation[]" = type { ptr, i64 }
%"void*[]" = type { ptr, i64 }
%Allocation = type { ptr, i64, [16 x ptr] }
%List = type { i64, i64, %any, ptr }
%VirtualMemory = type { ptr, i64, i32 }
%Vmem = type { %VirtualMemory, i64, i64, i64, i64, i64, i32 }

$std.core.mem.allocator.ArenaAllocator.init = comdat any

$std.core.mem.allocator.ArenaAllocator.clear = comdat any

$std.core.mem.allocator.ArenaAllocator.mark = comdat any

$std.core.mem.allocator.ArenaAllocator.reset = comdat any

$std.core.mem.allocator.ArenaAllocator.release = comdat any

$std.core.mem.allocator.ArenaAllocator.acquire = comdat any

$std.core.mem.allocator.ArenaAllocator.resize = comdat any

$std.core.mem.allocator.BackedArenaAllocator.destroy = comdat any

$std.core.mem.allocator.BackedArenaAllocator.mark = comdat any

$std.core.mem.allocator.BackedArenaAllocator.release = comdat any

$std.core.mem.allocator.BackedArenaAllocator.reset = comdat any

$std.core.mem.allocator.BackedArenaAllocator.resize = comdat any

$std.core.mem.allocator.BackedArenaAllocator.acquire = comdat any

$std.core.mem.allocator.new_backed_allocator = comdat any

$std.core.mem.allocator.DynamicArenaAllocator.init = comdat any

$std.core.mem.allocator.DynamicArenaAllocator.free = comdat any

$std.core.mem.allocator.DynamicArenaAllocator.release = comdat any

$std.core.mem.allocator.DynamicArenaAllocator.resize = comdat any

$std.core.mem.allocator.DynamicArenaAllocator.reset = comdat any

$std.core.mem.allocator.DynamicArenaAllocator.acquire = comdat any

$std.core.mem.allocator.SimpleHeapAllocator.init = comdat any

$std.core.mem.allocator.SimpleHeapAllocator.acquire = comdat any

$std.core.mem.allocator.SimpleHeapAllocator.resize = comdat any

$std.core.mem.allocator.SimpleHeapAllocator.release = comdat any

$std.core.mem.allocator.LibcAllocator.acquire = comdat any

$std.core.mem.allocator.LibcAllocator.resize = comdat any

$std.core.mem.allocator.LibcAllocator.release = comdat any

$std.core.mem.allocator.OnStackAllocator.init = comdat any

$std.core.mem.allocator.OnStackAllocator.free = comdat any

$std.core.mem.allocator.OnStackAllocator.release = comdat any

$std.core.mem.allocator.OnStackAllocator.resize = comdat any

$std.core.mem.allocator.OnStackAllocator.acquire = comdat any

$std.core.mem.allocator.TempAllocator.derive_allocator = comdat any

$std.core.mem.allocator.TempAllocator.reset = comdat any

$std.core.mem.allocator.TempAllocator.free = comdat any

$std.core.mem.allocator.TempAllocator.release = comdat any

$std.core.mem.allocator.TempAllocator.resize = comdat any

$std.core.mem.allocator.TempAllocator.acquire = comdat any

$std.core.mem.allocator.new_temp_allocator = comdat any

$std.core.mem.allocator.TrackingAllocator.init = comdat any

$std.core.mem.allocator.TrackingAllocator.free = comdat any

$std.core.mem.allocator.TrackingAllocator.allocated = comdat any

$std.core.mem.allocator.TrackingAllocator.total_allocated = comdat any

$std.core.mem.allocator.TrackingAllocator.total_allocation_count = comdat any

$std.core.mem.allocator.TrackingAllocator.allocations_tlist = comdat any

$std.core.mem.allocator.TrackingAllocator.allocation_count = comdat any

$std.core.mem.allocator.TrackingAllocator.acquire = comdat any

$std.core.mem.allocator.TrackingAllocator.resize = comdat any

$std.core.mem.allocator.TrackingAllocator.release = comdat any

$std.core.mem.allocator.TrackingAllocator.clear = comdat any

$std.core.mem.allocator.TrackingAllocator.has_leaks = comdat any

$std.core.mem.allocator.TrackingAllocator.print_report = comdat any

$std.core.mem.allocator.TrackingAllocator.fprint_report = comdat any

$std.core.mem.allocator.Vmem.init = comdat any

$std.core.mem.allocator.Vmem.acquire = comdat any

$std.core.mem.allocator.Vmem.owns_pointer = comdat any

$std.core.mem.allocator.Vmem.resize = comdat any

$std.core.mem.allocator.Vmem.release = comdat any

$std.core.mem.allocator.Vmem.mark = comdat any

$std.core.mem.allocator.Vmem.reset = comdat any

$std.core.mem.allocator.Vmem.free = comdat any

$std.core.mem.allocator.LazyTempAllocator.acquire = comdat any

$std.core.mem.allocator.LazyTempAllocator.resize = comdat any

$std.core.mem.allocator.LazyTempAllocator.release = comdat any

$std.core.mem.allocator.NullAllocator.acquire = comdat any

$std.core.mem.allocator.NullAllocator.resize = comdat any

$std.core.mem.allocator.NullAllocator.release = comdat any

$std.core.mem.allocator.clone_any = comdat any

$std.core.mem.allocator.push_pool = comdat any

$std.core.mem.allocator.pop_pool = comdat any

$std.core.mem.allocator.destroy_temp_allocators = comdat any

$std.core.mem.allocator.WasmMemory.allocate_block = comdat any

$.dyn_search = comdat any

$.__c3_atexit_std.core.mem.allocator.destroy_temp_allocators_after_exit.10325 = comdat any

$"$ct.std.core.mem.allocator.ArenaAllocator" = comdat any

$"$ct.std.core.mem.allocator.ArenaAllocatorHeader.8040" = comdat any

$"$ct.std.core.mem.allocator.BackedArenaAllocator" = comdat any

$"$ct.std.core.mem.allocator.AllocChunk.8051" = comdat any

$"$ct.std.core.mem.allocator.ExtraPage.8055" = comdat any

$"$ct.std.core.mem.allocator.DynamicArenaAllocator" = comdat any

$"$ct.std.core.mem.allocator.DynamicArenaPage.8138" = comdat any

$"$ct.std.core.mem.allocator.DynamicArenaChunk.8144" = comdat any

$"$ct.std.core.mem.allocator.SimpleHeapAllocator" = comdat any

$"$ct.std.core.mem.allocator.$anon" = comdat any

$"$ct.std.core.mem.allocator.Header.8239" = comdat any

$"$ct.std.core.mem.allocator.LibcAllocator" = comdat any

$"$ct.ulong" = comdat any

$"$ct.std.core.mem.allocator.OnStackAllocator" = comdat any

$"$ct.std.core.mem.allocator.OnStackAllocatorExtraChunk.8319" = comdat any

$"$ct.std.core.mem.allocator.OnStackAllocatorHeader" = comdat any

$"$ct.std.core.mem.allocator.TempAllocator" = comdat any

$"$ct.std.core.mem.allocator.TempAllocatorChunk.8387" = comdat any

$"$ct.std.core.mem.allocator.TempAllocatorPage" = comdat any

$"$ct.std.core.mem.allocator.Allocation" = comdat any

$"$ct.std.core.mem.allocator.TrackingAllocator" = comdat any

$"$ct.std.core.mem.allocator.Vmem" = comdat any

$"$ct.std.core.mem.allocator.VmemOptions" = comdat any

$"$ct.int" = comdat any

$"$ct.std.core.mem.allocator.VmemHeader.8651" = comdat any

$"$ct.std.core.mem.allocator.TrackingEnv" = comdat any

$"$ct.std.core.mem.allocator.AlignedBlock" = comdat any

$"$ct.std.core.mem.allocator.PoolState" = comdat any

$"$ct.p$std.core.mem.allocator.TempAllocator" = comdat any

$"$ct.std.core.mem.allocator.LazyTempAllocator" = comdat any

$"$ct.std.core.mem.allocator.NullAllocator" = comdat any

$"$ct.std.core.mem.allocator.AllocInitType" = comdat any

$"$ct.std.core.mem.allocator.WasmMemory" = comdat any

$std.core.mem.INVALID_ALLOC_SIZE = comdat any

$std.core.mem.OUT_OF_MEMORY = comdat any

$"$sel.acquire" = comdat any

$"$sel.release" = comdat any

$"$ct.fault" = comdat any

$std.core.mem.allocator.LIBC_ALLOCATOR = comdat any

$"$ct.long" = comdat any

$"$sel.resize" = comdat any

$std.core.mem.allocator.MAX_BACKTRACE = comdat any

$"$ct.p$void" = comdat any

$"$ct.void" = comdat any

$"$ct.std.io.File" = comdat any

$"$sel.write" = comdat any

$"$sel.write_byte" = comdat any

$"$sel.flush" = comdat any

$"$ct.String" = comdat any

$"$ct.sa$char" = comdat any

$"$ct.char" = comdat any

$"$ct.uint" = comdat any

$std.core.mem.vm.RANGE_OVERFLOW = comdat any

$std.core.mem.allocator.VMEM_RESERVE_FAILED = comdat any

$std.core.mem.allocator.DEFAULT_SIZE_PREFIX = comdat any

$std.core.mem.allocator.DEFAULT_SIZE_PREFIX_ALIGNMENT = comdat any

$std.core.mem.allocator.thread_allocator = comdat any

$std.core.mem.allocator.current_temp = comdat any

$std.core.mem.allocator.top_temp = comdat any

$std.core.mem.allocator.auto_create_temp = comdat any

$std.core.mem.allocator.temp_allocator_min_size = comdat any

$std.core.mem.allocator.temp_allocator_reserve_size = comdat any

$std.core.mem.allocator.temp_allocator_realloc_size = comdat any

$std.core.mem.allocator.NULL_ALLOCATOR = comdat any

$std.core.mem.allocator.WASM_BLOCK_SIZE = comdat any

$std.core.mem.allocator.wasm_memory = comdat any

$"$ct.dyn.std.core.mem.allocator.ArenaAllocator.release" = comdat any

$"$ct.dyn.std.core.mem.allocator.ArenaAllocator.acquire" = comdat any

$"$ct.dyn.std.core.mem.allocator.ArenaAllocator.resize" = comdat any

$"$ct.dyn.std.core.mem.allocator.BackedArenaAllocator.release" = comdat any

$"$ct.dyn.std.core.mem.allocator.BackedArenaAllocator.resize" = comdat any

$"$ct.dyn.std.core.mem.allocator.BackedArenaAllocator.acquire" = comdat any

$"$ct.dyn.std.core.mem.allocator.DynamicArenaAllocator.release" = comdat any

$"$ct.dyn.std.core.mem.allocator.DynamicArenaAllocator.resize" = comdat any

$"$ct.dyn.std.core.mem.allocator.DynamicArenaAllocator.acquire" = comdat any

$"$ct.dyn.std.core.mem.allocator.SimpleHeapAllocator.acquire" = comdat any

$"$ct.dyn.std.core.mem.allocator.SimpleHeapAllocator.resize" = comdat any

$"$ct.dyn.std.core.mem.allocator.SimpleHeapAllocator.release" = comdat any

$"$ct.dyn.std.core.mem.allocator.LibcAllocator.acquire" = comdat any

$"$ct.dyn.std.core.mem.allocator.LibcAllocator.resize" = comdat any

$"$ct.dyn.std.core.mem.allocator.LibcAllocator.release" = comdat any

$"$ct.dyn.std.core.mem.allocator.OnStackAllocator.release" = comdat any

$"$ct.dyn.std.core.mem.allocator.OnStackAllocator.resize" = comdat any

$"$ct.dyn.std.core.mem.allocator.OnStackAllocator.acquire" = comdat any

$"$ct.dyn.std.core.mem.allocator.TempAllocator.release" = comdat any

$"$ct.dyn.std.core.mem.allocator.TempAllocator.resize" = comdat any

$"$ct.dyn.std.core.mem.allocator.TempAllocator.acquire" = comdat any

$"$ct.dyn.std.core.mem.allocator.TrackingAllocator.acquire" = comdat any

$"$ct.dyn.std.core.mem.allocator.TrackingAllocator.resize" = comdat any

$"$ct.dyn.std.core.mem.allocator.TrackingAllocator.release" = comdat any

$"$ct.dyn.std.core.mem.allocator.Vmem.acquire" = comdat any

$"$ct.dyn.std.core.mem.allocator.Vmem.resize" = comdat any

$"$ct.dyn.std.core.mem.allocator.Vmem.release" = comdat any

$"$ct.dyn.std.core.mem.allocator.LazyTempAllocator.acquire" = comdat any

$"$ct.dyn.std.core.mem.allocator.LazyTempAllocator.resize" = comdat any

$"$ct.dyn.std.core.mem.allocator.LazyTempAllocator.release" = comdat any

$"$ct.dyn.std.core.mem.allocator.NullAllocator.acquire" = comdat any

$"$ct.dyn.std.core.mem.allocator.NullAllocator.resize" = comdat any

$"$ct.dyn.std.core.mem.allocator.NullAllocator.release" = comdat any

@"$ct.std.core.mem.allocator.ArenaAllocator" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 24, i64 0, i64 2, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.core.mem.allocator.ArenaAllocatorHeader.8040" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 8, i64 0, i64 2, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.core.mem.allocator.BackedArenaAllocator" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 40, i64 0, i64 5, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.core.mem.allocator.AllocChunk.8051" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 8, i64 0, i64 2, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.core.mem.allocator.ExtraPage.8055" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 40, i64 0, i64 6, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.core.mem.allocator.DynamicArenaAllocator" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 40, i64 0, i64 4, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.core.mem.allocator.DynamicArenaPage.8138" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 40, i64 0, i64 5, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.core.mem.allocator.DynamicArenaChunk.8144" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 8, i64 0, i64 1, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.core.mem.allocator.SimpleHeapAllocator" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 16, i64 0, i64 2, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.core.mem.allocator.$anon" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 16, i64 0, i64 2, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.core.mem.allocator.Header.8239" = linkonce global %.introspect { i8 11, i64 0, ptr null, i64 16, i64 0, i64 2, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.core.mem.allocator.LibcAllocator" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 8, i64 ptrtoint (ptr @"$ct.ulong" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.ulong" = linkonce global %.introspect { i8 3, i64 0, ptr null, i64 8, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.core.mem.allocator.OnStackAllocator" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 48, i64 0, i64 4, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.core.mem.allocator.OnStackAllocatorExtraChunk.8319" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 24, i64 0, i64 3, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.core.mem.allocator.OnStackAllocatorHeader" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 8, i64 0, i64 2, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.core.mem.allocator.TempAllocator" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 88, i64 0, i64 11, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.core.mem.allocator.TempAllocatorChunk.8387" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 8, i64 0, i64 2, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.core.mem.allocator.TempAllocatorPage" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 32, i64 0, i64 5, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.core.mem.allocator.Allocation" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 144, i64 0, i64 3, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.core.mem.allocator.TrackingAllocator" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 80, i64 0, i64 4, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.core.mem.allocator.Vmem" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 72, i64 0, i64 7, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.core.mem.allocator.VmemOptions" = linkonce global %.introspect { i8 12, i64 0, ptr null, i64 4, i64 ptrtoint (ptr @"$ct.int" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.int" = linkonce global %.introspect { i8 2, i64 0, ptr null, i64 4, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.core.mem.allocator.VmemHeader.8651" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 8, i64 0, i64 2, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.core.mem.allocator.TrackingEnv" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 40, i64 0, i64 3, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.core.mem.allocator.AlignedBlock" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 16, i64 0, i64 2, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.core.mem.allocator.PoolState" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 8, i64 ptrtoint (ptr @"$ct.p$std.core.mem.allocator.TempAllocator" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.p$std.core.mem.allocator.TempAllocator" = linkonce global %.introspect { i8 19, i64 0, ptr null, i64 8, i64 ptrtoint (ptr @"$ct.std.core.mem.allocator.TempAllocator" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.core.mem.allocator.LazyTempAllocator" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 8, i64 ptrtoint (ptr @"$ct.ulong" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.core.mem.allocator.NullAllocator" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 8, i64 ptrtoint (ptr @"$ct.ulong" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@.enum.NO_ZERO = internal constant [8 x i8] c"NO_ZERO\00", align 1
@.enum.ZERO = internal constant [5 x i8] c"ZERO\00", align 1
@"$ct.std.core.mem.allocator.AllocInitType" = linkonce global { i8, i64, ptr, i64, i64, i64, [2 x %"char[]"] } { i8 8, i64 0, ptr null, i64 4, i64 ptrtoint (ptr @"$ct.int" to i64), i64 2, [2 x %"char[]"] [%"char[]" { ptr @.enum.NO_ZERO, i64 7 }, %"char[]" { ptr @.enum.ZERO, i64 4 }] }, comdat, align 8
@"$ct.std.core.mem.allocator.WasmMemory" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 16, i64 0, i64 2, [0 x i64] zeroinitializer }, comdat, align 8
@.panic_msg = internal constant [63 x i8] c"Reference parameter 'self' was passed a null pointer argument.\00", align 1
@.file = internal constant [19 x i8] c"arena_allocator.c3\00", align 1
@.func = internal constant [5 x i8] c"init\00", align 1
@std.core.builtin.panic = external global ptr, align 8
@.func.2 = internal constant [6 x i8] c"clear\00", align 1
@.func.3 = internal constant [5 x i8] c"mark\00", align 1
@.func.4 = internal constant [6 x i8] c"reset\00", align 1
@.panic_msg.5 = internal constant [70 x i8] c"@require \22mark <= self.used\22 violated: 'Invalid mark - out of range'.\00", align 1
@.func.6 = internal constant [8 x i8] c"release\00", align 1
@.panic_msg.7 = internal constant [33 x i8] c"@require \22ptr != null\22 violated.\00", align 1
@.panic_msg.8 = internal constant [47 x i8] c"Pointer originates from a different allocator.\00", align 1
@.panic_msg.9 = internal constant [60 x i8] c"Array index out of bounds (array had size %d, index was %d)\00", align 1
@.func.10 = internal constant [8 x i8] c"acquire\00", align 1
@.panic_msg.11 = internal constant [66 x i8] c"@require \22!alignment || math::is_power_of_2(alignment)\22 violated.\00", align 1
@.panic_msg.12 = internal constant [81 x i8] c"@require \22alignment <= mem::MAX_MEMORY_ALIGNMENT\22 violated: 'alignment too big'.\00", align 1
@.panic_msg.13 = internal constant [30 x i8] c"@require \22size > 0\22 violated.\00", align 1
@std.core.mem.INVALID_ALLOC_SIZE = linkonce constant %"char[]" { ptr @std.core.mem.INVALID_ALLOC_SIZE.nameof, i64 23 }, comdat, align 8
@std.core.mem.INVALID_ALLOC_SIZE.nameof = internal constant [24 x i8] c"mem::INVALID_ALLOC_SIZE\00", align 1
@.panic_msg.14 = internal constant [52 x i8] c"@require \22math::is_power_of_2(alignment)\22 violated.\00", align 1
@.file.15 = internal constant [7 x i8] c"mem.c3\00", align 1
@std.core.mem.OUT_OF_MEMORY = linkonce constant %"char[]" { ptr @std.core.mem.OUT_OF_MEMORY.nameof, i64 18 }, comdat, align 8
@std.core.mem.OUT_OF_MEMORY.nameof = internal constant [19 x i8] c"mem::OUT_OF_MEMORY\00", align 1
@.func.16 = internal constant [7 x i8] c"resize\00", align 1
@.panic_msg.17 = internal constant [41 x i8] c"@require \22old_pointer != null\22 violated.\00", align 1
@.panic_msg.18 = internal constant [38 x i8] c"Passed null to a ref ('&') parameter.\00", align 1
@.panic_msg.19 = internal constant [95 x i8] c"@require \22src != null || len == 0\22 violated: 'Copying a null with non-zero length is invalid'.\00", align 1
@.panic_msg.20 = internal constant [96 x i8] c"@require \22len == 0 || dst + len <= src || src + len <= dst\22 violated: 'Ranges may not overlap'.\00", align 1
@std.core.mem.allocator.PAGE_IS_ALIGNED.8054 = internal unnamed_addr constant i64 -9223372036854775808, align 8, !dbg !0
@.panic_msg.21 = internal constant [32 x i8] c"@require \22size >= 16\22 violated.\00", align 1
@.file.22 = internal constant [26 x i8] c"backed_arena_allocator.c3\00", align 1
@.func.23 = internal constant [21 x i8] c"new_backed_allocator\00", align 1
@"$sel.acquire" = linkonce_odr constant [8 x i8] c"acquire\00", comdat, align 1
@.file.24 = internal constant [17 x i8] c"mem_allocator.c3\00", align 1
@.panic_msg.25 = internal constant [60 x i8] c"@require \22size > 0\22 violated: 'The size must be 1 or more'.\00", align 1
@.panic_msg.26 = internal constant [45 x i8] c"No method 'acquire' could be found on target\00", align 1
@.func.27 = internal constant [8 x i8] c"destroy\00", align 1
@"$sel.release" = linkonce_odr constant [8 x i8] c"release\00", comdat, align 1
@.panic_msg.28 = internal constant [76 x i8] c"@require \22ptr != null\22 violated: 'Empty pointers should never be released'.\00", align 1
@.panic_msg.29 = internal constant [45 x i8] c"No method 'release' could be found on target\00", align 1
@.panic_msg.30 = internal constant [83 x i8] c"Dereference of null pointer, '(usz*)(old_pointer - DEFAULT_SIZE_PREFIX)' was null.\00", align 1
@.panic_msg.31 = internal constant [95 x i8] c"Unaligned access: ptr %% %s = %s, use @unaligned_load / @unaligned_store for unaligned access.\00", align 1
@"$ct.fault" = linkonce global %.introspect { i8 6, i64 0, ptr null, i64 8, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@.panic_msg.32 = internal constant [37 x i8] c"Unexpected fault '%s' was unwrapped!\00", align 1
@.panic_msg.33 = internal constant [44 x i8] c"Negative value (%d) given for slice length.\00", align 1
@.func.34 = internal constant [11 x i8] c"_free_page\00", align 1
@.panic_msg.35 = internal constant [33 x i8] c"Called a method on a null value.\00", align 1
@.func.36 = internal constant [14 x i8] c"_realloc_page\00", align 1
@.panic_msg.37 = internal constant [57 x i8] c"Dereference of null pointer, 'pointer_to_prev' was null.\00", align 1
@.panic_msg.38 = internal constant [29 x i8] c"Realloc of unrelated pointer\00", align 1
@.panic_msg.39 = internal constant [73 x i8] c"Assert \22mem::ptr_is_aligned(page, BackedArenaAllocator.alignof)\22 failed.\00", align 1
@.panic_msg.40 = internal constant [80 x i8] c"Assert \22mem::ptr_is_aligned(&page.data[0], mem::DEFAULT_MEM_ALIGNMENT)\22 failed.\00", align 1
@.file.41 = internal constant [17 x i8] c"dynamic_arena.c3\00", align 1
@.panic_msg.42 = internal constant [38 x i8] c"@require \22page_size >= 128\22 violated.\00", align 1
@.func.43 = internal constant [5 x i8] c"free\00", align 1
@.panic_msg.44 = internal constant [85 x i8] c"@require \22self.page != null\22 violated: 'tried to free pointer on invalid allocator'.\00", align 1
@.panic_msg.45 = internal constant [64 x i8] c"@require \22size > 0\22 violated: 'Resize doesn't support zeroing'.\00", align 1
@.panic_msg.46 = internal constant [80 x i8] c"@require \22old_pointer != null\22 violated: 'Resize doesn't handle null pointers'.\00", align 1
@.panic_msg.47 = internal constant [88 x i8] c"@require \22self.page != null\22 violated: 'tried to realloc pointer on invalid allocator'.\00", align 1
@.panic_msg.48 = internal constant [54 x i8] c"Dereference of null pointer, 'old_size_ptr' was null.\00", align 1
@.panic_msg.49 = internal constant [33 x i8] c"Assert \22size > old_size\22 failed.\00", align 1
@.panic_msg.50 = internal constant [58 x i8] c"@require \22size > 0\22 violated: 'acquire expects size > 0'.\00", align 1
@.panic_msg.51 = internal constant [57 x i8] c"Dereference of null pointer, 'unused_page_ptr' was null.\00", align 1
@.func.52 = internal constant [11 x i8] c"_alloc_new\00", align 1
@.panic_msg.53 = internal constant [61 x i8] c"Assert \22page_size > size + DynamicArenaChunk.sizeof\22 failed.\00", align 1
@.panic_msg.54 = internal constant [52 x i8] c"Assert \22mem_start + size < mem + page_size\22 failed.\00", align 1
@.panic_msg.55 = internal constant [57 x i8] c"Assert \22start + size == page.memory + page.used\22 failed.\00", align 1
@.file.56 = internal constant [18 x i8] c"heap_allocator.c3\00", align 1
@.panic_msg.57 = internal constant [86 x i8] c"@require \22allocator != null\22 violated: 'An underlying memory provider must be given'.\00", align 1
@.panic_msg.58 = internal constant [85 x i8] c"@require \22!self.free_list\22 violated: 'The allocator may not be already initialized'.\00", align 1
@.panic_msg.59 = internal constant [31 x i8] c"@require \22bytes > 0\22 violated.\00", align 1
@.panic_msg.60 = internal constant [35 x i8] c"@require \22alignment > 0\22 violated.\00", align 1
@.panic_msg.61 = internal constant [38 x i8] c"@require \22bytes <= isz.max\22 violated.\00", align 1
@.panic_msg.62 = internal constant [28 x i8] c"Assert \22mem > data\22 failed.\00", align 1
@.panic_msg.63 = internal constant [46 x i8] c"Dereference of null pointer, 'desc' was null.\00", align 1
@.panic_msg.64 = internal constant [46 x i8] c"@require \22old_pointer && bytes > 0\22 violated.\00", align 1
@.func.65 = internal constant [9 x i8] c"_realloc\00", align 1
@.func.66 = internal constant [8 x i8] c"_calloc\00", align 1
@.func.67 = internal constant [7 x i8] c"_alloc\00", align 1
@.func.68 = internal constant [10 x i8] c"add_block\00", align 1
@.panic_msg.69 = internal constant [97 x i8] c"Assert \22mem::aligned_offset(aligned_bytes, mem::DEFAULT_MEM_ALIGNMENT) == aligned_bytes\22 failed.\00", align 1
@.panic_msg.70 = internal constant [57 x i8] c"Calling null function pointer, 'self.alloc_fn' was null.\00", align 1
@.func.71 = internal constant [6 x i8] c"_free\00", align 1
@std.core.mem.allocator.LIBC_ALLOCATOR = weak_odr constant i64 0, comdat, align 8, !dbg !5
@.file.72 = internal constant [18 x i8] c"libc_allocator.c3\00", align 1
@"$ct.long" = linkonce global %.introspect { i8 2, i64 0, ptr null, i64 8, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@.panic_msg.73 = internal constant [39 x i8] c"Negative array indexing (index was %d)\00", align 1
@.file.74 = internal constant [22 x i8] c"on_stack_allocator.c3\00", align 1
@.func.75 = internal constant [24 x i8] c"allocation_in_stack_mem\00", align 1
@.panic_msg.76 = internal constant [46 x i8] c"Dereference of null pointer, 'addr' was null.\00", align 1
@.func.77 = internal constant [32 x i8] c"on_stack_allocator_remove_chunk\00", align 1
@.str = private unnamed_addr constant [14 x i8] c"Missing chunk\00", align 1
@.str.78 = private unnamed_addr constant [22 x i8] c"on_stack_allocator.c3\00", align 1
@.str.79 = private unnamed_addr constant [32 x i8] c"on_stack_allocator_remove_chunk\00", align 1
@.panic_msg.80 = internal constant [56 x i8] c"Tried to realloc pointer not belonging to the allocator\00", align 1
@"$sel.resize" = linkonce_odr constant [7 x i8] c"resize\00", comdat, align 1
@.panic_msg.81 = internal constant [34 x i8] c"@require \22new_size > 0\22 violated.\00", align 1
@.panic_msg.82 = internal constant [44 x i8] c"No method 'resize' could be found on target\00", align 1
@.panic_msg.83 = internal constant [47 x i8] c"Dereference of null pointer, 'chunk' was null.\00", align 1
@std.core.mem.allocator.PAGE_IS_ALIGNED.8390 = internal unnamed_addr constant i64 -9223372036854775808, align 8, !dbg !9
@.panic_msg.84 = internal constant [32 x i8] c"@require \22size >= 64\22 violated.\00", align 1
@.file.85 = internal constant [18 x i8] c"temp_allocator.c3\00", align 1
@.func.86 = internal constant [19 x i8] c"new_temp_allocator\00", align 1
@.panic_msg.87 = internal constant [40 x i8] c"@require \22realloc_size >= 64\22 violated.\00", align 1
@.panic_msg.88 = internal constant [146 x i8] c"@require \22allocator.type != TempAllocator.typeid\22 violated: 'You may not create a temp allocator with a TempAllocator as the backing allocator.'.\00", align 1
@.panic_msg.89 = internal constant [115 x i8] c"@require \22min_size > TempAllocator.sizeof + 64\22 violated: 'Min size must meaningfully hold the data + some bytes'.\00", align 1
@.func.90 = internal constant [17 x i8] c"derive_allocator\00", align 1
@.panic_msg.91 = internal constant [35 x i8] c"@require \22!self.derived\22 violated.\00", align 1
@.panic_msg.92 = internal constant [83 x i8] c"@require \22self.allocated\22 violated: 'Only a top level allocator should be freed.'.\00", align 1
@.panic_msg.93 = internal constant [28 x i8] c"Realloc of non temp pointer\00", align 1
@.panic_msg.94 = internal constant [66 x i8] c"Assert \22mem::ptr_is_aligned(page, TempAllocator.alignof)\22 failed.\00", align 1
@std.core.mem.allocator.MAX_BACKTRACE = weak_odr local_unnamed_addr constant i32 16, comdat, align 4, !dbg !12
@.file.95 = internal constant [22 x i8] c"tracking_allocator.c3\00", align 1
@.panic_msg.96 = internal constant [46 x i8] c"Dereference of null pointer, 'self' was null.\00", align 1
@.panic_msg.97 = internal constant [70 x i8] c"@require \22capacity > 0\22 violated: 'The capacity must be 1 or higher'.\00", align 1
@.panic_msg.98 = internal constant [80 x i8] c"@require \22load_factor > 0.0\22 violated: 'The load factor must be higher than 0'.\00", align 1
@.panic_msg.99 = internal constant [75 x i8] c"@require \22!self.is_initialized()\22 violated: 'Map was already initialized'.\00", align 1
@.panic_msg.100 = internal constant [83 x i8] c"@require \22capacity < MAXIMUM_CAPACITY\22 violated: 'Capacity cannot exceed maximum'.\00", align 1
@.func.101 = internal constant [10 x i8] c"allocated\00", align 1
@.func.102 = internal constant [16 x i8] c"total_allocated\00", align 1
@.func.103 = internal constant [23 x i8] c"total_allocation_count\00", align 1
@.func.104 = internal constant [18 x i8] c"allocations_tlist\00", align 1
@.func.105 = internal constant [17 x i8] c"allocation_count\00", align 1
@.str.106 = private unnamed_addr constant [63 x i8] c"Attempt to release untracked pointer %p, this is likely a bug.\00", align 1
@.str.107 = private unnamed_addr constant [22 x i8] c"tracking_allocator.c3\00", align 1
@.str.108 = private unnamed_addr constant [26 x i8] c"TrackingAllocator.release\00", align 1
@"$ct.p$void" = linkonce global %.introspect { i8 19, i64 0, ptr null, i64 8, i64 ptrtoint (ptr @"$ct.void" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.void" = linkonce global %.introspect { i8 0, i64 0, ptr null, i64 1, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@.func.109 = internal constant [10 x i8] c"has_leaks\00", align 1
@.func.110 = internal constant [13 x i8] c"print_report\00", align 1
@"$ct.std.io.File" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 8, i64 0, i64 1, [0 x i64] zeroinitializer }, comdat, align 8
@.func.111 = internal constant [14 x i8] c"fprint_report\00", align 1
@.str.112 = private unnamed_addr constant [32 x i8] c"======== Memory Report ========\00", align 1
@"$sel.write" = linkonce_odr constant [6 x i8] c"write\00", comdat, align 1
@.panic_msg.113 = internal constant [43 x i8] c"No method 'write' could be found on target\00", align 1
@.file.114 = internal constant [6 x i8] c"io.c3\00", align 1
@"$sel.write_byte" = linkonce_odr constant [11 x i8] c"write_byte\00", comdat, align 1
@.panic_msg.115 = internal constant [48 x i8] c"No method 'write_byte' could be found on target\00", align 1
@"$sel.flush" = linkonce_odr constant [6 x i8] c"flush\00", comdat, align 1
@.panic_msg.116 = internal constant [43 x i8] c"No method 'flush' could be found on target\00", align 1
@.str.117 = private unnamed_addr constant [24 x i8] c"Size in bytes   Address\00", align 1
@.str.118 = private unnamed_addr constant [10 x i8] c"%13s   %p\00", align 1
@.str.119 = private unnamed_addr constant [32 x i8] c"===============================\00", align 1
@.str.120 = private unnamed_addr constant [84 x i8] c"================================== Memory Report ==================================\00", align 1
@.str.121 = private unnamed_addr constant [65 x i8] c"Size in bytes   Address          Function                       \00", align 1
@std.os.backtrace.BACKTRACE_UNKNOWN = external constant %Backtrace, align 8
@.panic_msg.122 = internal constant [63 x i8] c"@require \22index < self.size\22 violated: 'Access out of bounds'.\00", align 1
@.str.123 = private unnamed_addr constant [18 x i8] c"%13s   %p   %s:%d\00", align 1
@.str.124 = private unnamed_addr constant [4 x i8] c"???\00", align 1
@"$ct.String" = linkonce global %.introspect { i8 18, i64 ptrtoint (ptr @"$ct.sa$char" to i64), ptr null, i64 16, i64 ptrtoint (ptr @"$ct.sa$char" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.sa$char" = linkonce global %.introspect { i8 16, i64 0, ptr null, i64 16, i64 ptrtoint (ptr @"$ct.char" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.char" = linkonce global %.introspect { i8 3, i64 0, ptr null, i64 1, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@.str.125 = private unnamed_addr constant [84 x i8] c"===================================================================================\00", align 1
@.str.126 = private unnamed_addr constant [25 x i8] c"* NO ALLOCATIONS FOUND *\00", align 1
@.str.127 = private unnamed_addr constant [50 x i8] c"- Total currently allocated memory:            %d\00", align 1
@.str.128 = private unnamed_addr constant [50 x i8] c"- Total current allocations:                   %d\00", align 1
@.str.129 = private unnamed_addr constant [50 x i8] c"- Total allocations (freed and retained):      %d\00", align 1
@.str.130 = private unnamed_addr constant [50 x i8] c"- Total allocated memory (freed and retained): %d\00", align 1
@.emptystr = internal constant [1 x i8] zeroinitializer, align 1
@.str.131 = private unnamed_addr constant [18 x i8] c"Full leak report:\00", align 1
@.str.132 = private unnamed_addr constant [51 x i8] c"Allocation %d (%d bytes) - no backtrace available.\00", align 1
@.panic_msg.133 = internal constant [62 x i8] c"Dereference of null pointer, 'allocation.backtrace' was null.\00", align 1
@.panic_msg.134 = internal constant [45 x i8] c"Negative size (start %d is less than end %d)\00", align 1
@.panic_msg.135 = internal constant [61 x i8] c"End index out of bounds (end index of %d exceeds size of %d)\00", align 1
@.str.136 = private unnamed_addr constant [27 x i8] c"Allocation %d (%d bytes): \00", align 1
@.file.137 = internal constant [8 x i8] c"list.c3\00", align 1
@.str.138 = private unnamed_addr constant [17 x i8] c"   %s (in %s:%d)\00", align 1
@"$ct.uint" = linkonce global %.introspect { i8 3, i64 0, ptr null, i64 4, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@.str.139 = private unnamed_addr constant [20 x i8] c"   ??? (in unknown)\00", align 1
@.str.140 = private unnamed_addr constant [27 x i8] c"   %s (source unavailable)\00", align 1
@.file.141 = internal constant [8 x i8] c"vmem.c3\00", align 1
@.panic_msg.142 = internal constant [82 x i8] c"@require \22!reserve_page_size || math::is_power_of_2(reserve_page_size)\22 violated.\00", align 1
@.panic_msg.143 = internal constant [135 x i8] c"@require \22reserve_page_size <= preferred_size\22 violated: 'The min reserve_page_size size must be less or equal to the preferred size'.\00", align 1
@.panic_msg.144 = internal constant [90 x i8] c"@require \22preferred_size >= 1 * mem::KB\22 violated: 'The preferred size must exceed 1 KB'.\00", align 1
@init.page_size = internal unnamed_addr global i64 0, align 8, !dbg !16
@.panic_msg.145 = internal constant [59 x i8] c"@require \22size > 0\22 violated: 'The size must be non-zero'.\00", align 1
@std.core.mem.vm.RANGE_OVERFLOW = linkonce constant %"char[]" { ptr @std.core.mem.vm.RANGE_OVERFLOW.nameof, i64 18 }, comdat, align 8
@std.core.mem.vm.RANGE_OVERFLOW.nameof = internal constant [19 x i8] c"vm::RANGE_OVERFLOW\00", align 1
@std.core.mem.allocator.VMEM_RESERVE_FAILED = linkonce constant %"char[]" { ptr @std.core.mem.allocator.VMEM_RESERVE_FAILED.nameof, i64 30 }, comdat, align 8
@std.core.mem.allocator.VMEM_RESERVE_FAILED.nameof = internal constant [31 x i8] c"allocator::VMEM_RESERVE_FAILED\00", align 1
@.panic_msg.146 = internal constant [36 x i8] c"Shift amount out of range (was %s).\00", align 1
@.panic_msg.147 = internal constant [102 x i8] c"@require \22mem::ptr_is_page_aligned(self.ptr + offset)\22 violated: 'The offset should be page aligned'.\00", align 1
@.panic_msg.148 = internal constant [106 x i8] c"@require \22mem::ptr_is_page_aligned(self.ptr + offset + len)\22 violated: 'The length must be page aligned'.\00", align 1
@.panic_msg.149 = internal constant [63 x i8] c"@require \22offset < self.size\22 violated: 'Offset out of range'.\00", align 1
@.panic_msg.150 = internal constant [70 x i8] c"@require \22offset + len <= self.size\22 violated: 'Length out of range'.\00", align 1
@.panic_msg.151 = internal constant [89 x i8] c"@require \22mem::ptr_is_page_aligned(ptr)\22 violated: 'The pointer should be page aligned'.\00", align 1
@.file.152 = internal constant [10 x i8] c"mem_vm.c3\00", align 1
@.panic_msg.153 = internal constant [92 x i8] c"@require \22mem::ptr_is_page_aligned(ptr + len)\22 violated: 'The length must be page aligned'.\00", align 1
@.panic_msg.154 = internal constant [69 x i8] c"@require \22offset + len < self.size\22 violated: 'Length out of range'.\00", align 1
@.func.155 = internal constant [13 x i8] c"owns_pointer\00", align 1
@.panic_msg.156 = internal constant [66 x i8] c"Pointer originates from a different allocator: %p, not in %p - %p\00", align 1
@.panic_msg.157 = internal constant [50 x i8] c"Pointer originates from a different allocator %p.\00", align 1
@.panic_msg.158 = internal constant [60 x i8] c"@require \22mark <= self.allocated\22 violated: 'Invalid mark'.\00", align 1
@.panic_msg.159 = internal constant [92 x i8] c"@require \22self.ptr != null\22 violated: 'Virtual memory must be initialized to call destroy'.\00", align 1
@std.core.mem.allocator.DEFAULT_SIZE_PREFIX = weak_odr local_unnamed_addr constant i64 8, comdat, align 8, !dbg !19
@std.core.mem.allocator.DEFAULT_SIZE_PREFIX_ALIGNMENT = weak_odr local_unnamed_addr constant i64 8, comdat, align 8, !dbg !22
@std.core.mem.allocator.thread_allocator = weak_odr thread_local local_unnamed_addr global %any { ptr @std.core.mem.allocator.LIBC_ALLOCATOR, i64 ptrtoint (ptr @"$ct.std.core.mem.allocator.LibcAllocator" to i64) }, comdat, align 8, !dbg !24
@std.core.mem.allocator.temp_base_allocator = internal unnamed_addr global %any { ptr @std.core.mem.allocator.LIBC_ALLOCATOR, i64 ptrtoint (ptr @"$ct.std.core.mem.allocator.LibcAllocator" to i64) }, align 8, !dbg !32
@std.core.mem.allocator.LAZY_TEMP = internal constant i64 0, align 8, !dbg !34
@std.core.mem.allocator.current_temp = weak_odr thread_local local_unnamed_addr global %any { ptr @std.core.mem.allocator.LAZY_TEMP, i64 ptrtoint (ptr @"$ct.std.core.mem.allocator.LazyTempAllocator" to i64) }, comdat, align 8, !dbg !37
@std.core.mem.allocator.top_temp = weak_odr thread_local local_unnamed_addr global ptr null, comdat, align 8, !dbg !39
@std.core.mem.allocator.auto_create_temp = weak_odr thread_local local_unnamed_addr global i8 0, comdat, align 1, !dbg !68
@std.core.mem.allocator.temp_allocator_min_size = weak_odr local_unnamed_addr global i64 16384, comdat, align 8, !dbg !70
@std.core.mem.allocator.temp_allocator_reserve_size = weak_odr local_unnamed_addr global i64 1024, comdat, align 8, !dbg !72
@std.core.mem.allocator.temp_allocator_realloc_size = weak_odr local_unnamed_addr global i64 65536, comdat, align 8, !dbg !74
@std.core.mem.allocator.NULL_ALLOCATOR = weak_odr local_unnamed_addr constant i64 0, comdat, align 8, !dbg !76
@.func.171 = internal constant [10 x i8] c"clone_any\00", align 1
@.panic_msg.172 = internal constant [87 x i8] c"@require \22!top_temp\22 violated: 'This should never be called when temp already exists'.\00", align 1
@.func.173 = internal constant [10 x i8] c"push_pool\00", align 1
@.func.174 = internal constant [32 x i8] c"create_temp_allocator_on_demand\00", align 1
@.str.175 = private unnamed_addr constant [129 x i8] c"Use '@pool_init()' to enable the temp allocator on a new thread. A temp allocator is only implicitly created on the main thread.\00", align 1
@.str.176 = private unnamed_addr constant [17 x i8] c"mem_allocator.c3\00", align 1
@.str.177 = private unnamed_addr constant [32 x i8] c"create_temp_allocator_on_demand\00", align 1
@.func.178 = internal constant [22 x i8] c"create_temp_allocator\00", align 1
@.func.179 = internal constant [24 x i8] c"destroy_temp_allocators\00", align 1
@std.core.mem.allocator.WASM_BLOCK_SIZE = weak_odr local_unnamed_addr constant i64 65536, comdat, align 8, !dbg !79
@std.core.mem.allocator.wasm_memory = weak_odr local_unnamed_addr global %WasmMemory zeroinitializer, comdat, align 8, !dbg !82
@.file.181 = internal constant [15 x i8] c"wasm_memory.c3\00", align 1
@.func.182 = internal constant [15 x i8] c"allocate_block\00", align 1
@"$ct.dyn.std.core.mem.allocator.ArenaAllocator.release" = weak_odr global { ptr, ptr, ptr } { ptr @std.core.mem.allocator.ArenaAllocator.release, ptr @"$sel.release", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.core.mem.allocator.ArenaAllocator.acquire" = weak_odr global { ptr, ptr, ptr } { ptr @std.core.mem.allocator.ArenaAllocator.acquire, ptr @"$sel.acquire", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.core.mem.allocator.ArenaAllocator.resize" = weak_odr global { ptr, ptr, ptr } { ptr @std.core.mem.allocator.ArenaAllocator.resize, ptr @"$sel.resize", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.core.mem.allocator.BackedArenaAllocator.release" = weak_odr global { ptr, ptr, ptr } { ptr @std.core.mem.allocator.BackedArenaAllocator.release, ptr @"$sel.release", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.core.mem.allocator.BackedArenaAllocator.resize" = weak_odr global { ptr, ptr, ptr } { ptr @std.core.mem.allocator.BackedArenaAllocator.resize, ptr @"$sel.resize", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.core.mem.allocator.BackedArenaAllocator.acquire" = weak_odr global { ptr, ptr, ptr } { ptr @std.core.mem.allocator.BackedArenaAllocator.acquire, ptr @"$sel.acquire", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.core.mem.allocator.DynamicArenaAllocator.release" = weak_odr global { ptr, ptr, ptr } { ptr @std.core.mem.allocator.DynamicArenaAllocator.release, ptr @"$sel.release", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.core.mem.allocator.DynamicArenaAllocator.resize" = weak_odr global { ptr, ptr, ptr } { ptr @std.core.mem.allocator.DynamicArenaAllocator.resize, ptr @"$sel.resize", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.core.mem.allocator.DynamicArenaAllocator.acquire" = weak_odr global { ptr, ptr, ptr } { ptr @std.core.mem.allocator.DynamicArenaAllocator.acquire, ptr @"$sel.acquire", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.core.mem.allocator.SimpleHeapAllocator.acquire" = weak_odr global { ptr, ptr, ptr } { ptr @std.core.mem.allocator.SimpleHeapAllocator.acquire, ptr @"$sel.acquire", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.core.mem.allocator.SimpleHeapAllocator.resize" = weak_odr global { ptr, ptr, ptr } { ptr @std.core.mem.allocator.SimpleHeapAllocator.resize, ptr @"$sel.resize", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.core.mem.allocator.SimpleHeapAllocator.release" = weak_odr global { ptr, ptr, ptr } { ptr @std.core.mem.allocator.SimpleHeapAllocator.release, ptr @"$sel.release", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.core.mem.allocator.LibcAllocator.acquire" = weak_odr global { ptr, ptr, ptr } { ptr @std.core.mem.allocator.LibcAllocator.acquire, ptr @"$sel.acquire", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.core.mem.allocator.LibcAllocator.resize" = weak_odr global { ptr, ptr, ptr } { ptr @std.core.mem.allocator.LibcAllocator.resize, ptr @"$sel.resize", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.core.mem.allocator.LibcAllocator.release" = weak_odr global { ptr, ptr, ptr } { ptr @std.core.mem.allocator.LibcAllocator.release, ptr @"$sel.release", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.core.mem.allocator.OnStackAllocator.release" = weak_odr global { ptr, ptr, ptr } { ptr @std.core.mem.allocator.OnStackAllocator.release, ptr @"$sel.release", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.core.mem.allocator.OnStackAllocator.resize" = weak_odr global { ptr, ptr, ptr } { ptr @std.core.mem.allocator.OnStackAllocator.resize, ptr @"$sel.resize", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.core.mem.allocator.OnStackAllocator.acquire" = weak_odr global { ptr, ptr, ptr } { ptr @std.core.mem.allocator.OnStackAllocator.acquire, ptr @"$sel.acquire", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.core.mem.allocator.TempAllocator.release" = weak_odr global { ptr, ptr, ptr } { ptr @std.core.mem.allocator.TempAllocator.release, ptr @"$sel.release", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.core.mem.allocator.TempAllocator.resize" = weak_odr global { ptr, ptr, ptr } { ptr @std.core.mem.allocator.TempAllocator.resize, ptr @"$sel.resize", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.core.mem.allocator.TempAllocator.acquire" = weak_odr global { ptr, ptr, ptr } { ptr @std.core.mem.allocator.TempAllocator.acquire, ptr @"$sel.acquire", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.core.mem.allocator.TrackingAllocator.acquire" = weak_odr global { ptr, ptr, ptr } { ptr @std.core.mem.allocator.TrackingAllocator.acquire, ptr @"$sel.acquire", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.core.mem.allocator.TrackingAllocator.resize" = weak_odr global { ptr, ptr, ptr } { ptr @std.core.mem.allocator.TrackingAllocator.resize, ptr @"$sel.resize", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.core.mem.allocator.TrackingAllocator.release" = weak_odr global { ptr, ptr, ptr } { ptr @std.core.mem.allocator.TrackingAllocator.release, ptr @"$sel.release", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.core.mem.allocator.Vmem.acquire" = weak_odr global { ptr, ptr, ptr } { ptr @std.core.mem.allocator.Vmem.acquire, ptr @"$sel.acquire", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.core.mem.allocator.Vmem.resize" = weak_odr global { ptr, ptr, ptr } { ptr @std.core.mem.allocator.Vmem.resize, ptr @"$sel.resize", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.core.mem.allocator.Vmem.release" = weak_odr global { ptr, ptr, ptr } { ptr @std.core.mem.allocator.Vmem.release, ptr @"$sel.release", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.core.mem.allocator.LazyTempAllocator.acquire" = weak_odr global { ptr, ptr, ptr } { ptr @std.core.mem.allocator.LazyTempAllocator.acquire, ptr @"$sel.acquire", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.core.mem.allocator.LazyTempAllocator.resize" = weak_odr global { ptr, ptr, ptr } { ptr @std.core.mem.allocator.LazyTempAllocator.resize, ptr @"$sel.resize", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.core.mem.allocator.LazyTempAllocator.release" = weak_odr global { ptr, ptr, ptr } { ptr @std.core.mem.allocator.LazyTempAllocator.release, ptr @"$sel.release", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.core.mem.allocator.NullAllocator.acquire" = weak_odr global { ptr, ptr, ptr } { ptr @std.core.mem.allocator.NullAllocator.acquire, ptr @"$sel.acquire", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.core.mem.allocator.NullAllocator.resize" = weak_odr global { ptr, ptr, ptr } { ptr @std.core.mem.allocator.NullAllocator.resize, ptr @"$sel.resize", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.core.mem.allocator.NullAllocator.release" = weak_odr global { ptr, ptr, ptr } { ptr @std.core.mem.allocator.NullAllocator.release, ptr @"$sel.release", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@llvm.global_ctors = appending global [3 x { i32, ptr, ptr }] [{ i32, ptr, ptr } { i32 1, ptr @std.core.mem.allocator.allow_implicit_temp_allocator_on_load_thread.10324, ptr null }, { i32, ptr, ptr } { i32 65535, ptr @.__c3_atexit_std.core.mem.allocator.destroy_temp_allocators_after_exit.10325, ptr null }, { i32, ptr, ptr } { i32 1, ptr @.c3_dynamic_register, ptr null }]

; Function Attrs: nounwind ssp uwtable
define weak_odr ptr @std.core.mem.allocator.ArenaAllocator.init(ptr %0, ptr align 8 %1) #0 comdat !dbg !127 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %2 = icmp eq ptr %0, null, !dbg !141
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !141
  br i1 %3, label %panic, label %checkok, !dbg !141

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !142, !DIExpression(), !143)
    #dbg_declare(ptr %1, !144, !DIExpression(), !143)
  %4 = load ptr, ptr %self, align 8, !dbg !145
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %4, ptr align 8 %1, i32 16, i1 false), !dbg !145
  %5 = load ptr, ptr %self, align 8, !dbg !146
  %ptradd = getelementptr inbounds i8, ptr %5, i64 16, !dbg !146
  store i64 0, ptr %ptradd, align 8, !dbg !146
  %6 = load ptr, ptr %self, align 8, !dbg !147
  ret ptr %6, !dbg !147

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file, i64 18 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg2, align 8
  %7 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %7(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 22) #6, !dbg !143
  unreachable, !dbg !143
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.core.mem.allocator.ArenaAllocator.clear(ptr %0) #0 comdat !dbg !148 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !151
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !151
  br i1 %2, label %panic, label %checkok, !dbg !151

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !152, !DIExpression(), !153)
  %3 = load ptr, ptr %self, align 8, !dbg !154
  %ptradd = getelementptr inbounds i8, ptr %3, i64 16, !dbg !154
  store i64 0, ptr %ptradd, align 8, !dbg !154
  ret void, !dbg !154

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file, i64 18 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.2, i64 5 }, ptr %indirectarg2, align 8
  %4 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %4(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 32) #6, !dbg !153
  unreachable, !dbg !153
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.core.mem.allocator.ArenaAllocator.mark(ptr %0) #0 comdat !dbg !155 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !158
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !158
  br i1 %2, label %panic, label %checkok, !dbg !158

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !159, !DIExpression(), !158)
  %3 = load ptr, ptr %self, align 8, !dbg !158
  %ptradd = getelementptr inbounds i8, ptr %3, i64 16, !dbg !158
  %4 = load i64, ptr %ptradd, align 8, !dbg !158
  ret i64 %4, !dbg !158

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file, i64 18 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.3, i64 4 }, ptr %indirectarg2, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 54) #6, !dbg !158
  unreachable, !dbg !158
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.core.mem.allocator.ArenaAllocator.reset(ptr %0, i64 %1) #0 comdat !dbg !160 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %mark = alloca i64, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !163
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !163
  br i1 %3, label %panic, label %checkok, !dbg !163

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !164, !DIExpression(), !163)
  store i64 %1, ptr %mark, align 8
    #dbg_declare(ptr %mark, !165, !DIExpression(), !163)
  %4 = load i64, ptr %mark, align 8, !dbg !166
  %5 = load ptr, ptr %self, align 8, !dbg !166
  %ptradd = getelementptr inbounds i8, ptr %5, i64 16, !dbg !166
  %6 = load i64, ptr %ptradd, align 8, !dbg !166
  %le = icmp ule i64 %4, %6, !dbg !166
  br i1 %le, label %assert_ok, label %assert_fail, !dbg !166

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.5, i64 69 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.file, i64 18 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.func.4, i64 5 }, ptr %indirectarg5, align 8
  %7 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %7(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, i32 60) #6, !dbg !166
  unreachable, !dbg !166

assert_ok:                                        ; preds = %checkok
  %8 = load ptr, ptr %self, align 8, !dbg !163
  %ptradd6 = getelementptr inbounds i8, ptr %8, i64 16, !dbg !163
  %9 = load i64, ptr %mark, align 8, !dbg !163
  store i64 %9, ptr %ptradd6, align 8, !dbg !163
  ret void, !dbg !163

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file, i64 18 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.4, i64 5 }, ptr %indirectarg2, align 8
  %10 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %10(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 62) #6, !dbg !163
  unreachable, !dbg !163
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.core.mem.allocator.ArenaAllocator.release(ptr %0, ptr %1, i8 zeroext %2) #0 comdat !dbg !168 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %ptr = alloca ptr, align 8
  %.anon = alloca i8, align 1
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %header = alloca ptr, align 8
  %taddr = alloca i64, align 8
  %taddr16 = alloca i64, align 8
  %indirectarg17 = alloca %"char[]", align 8
  %indirectarg18 = alloca %"char[]", align 8
  %indirectarg19 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg21 = alloca %"any[]", align 8
  %3 = icmp eq ptr %0, null, !dbg !171
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !171
  br i1 %4, label %panic, label %checkok, !dbg !171

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !172, !DIExpression(), !173)
  store ptr %1, ptr %ptr, align 8
    #dbg_declare(ptr %ptr, !174, !DIExpression(), !173)
  store i8 %2, ptr %.anon, align 1
    #dbg_declare(ptr %.anon, !175, !DIExpression(), !173)
  %5 = load ptr, ptr %ptr, align 8, !dbg !176
  %neq = icmp ne ptr %5, null, !dbg !176
  br i1 %neq, label %assert_ok, label %assert_fail, !dbg !176

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.7, i64 32 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.file, i64 18 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.func.6, i64 7 }, ptr %indirectarg5, align 8
  %6 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %6(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, i32 67) #6, !dbg !176
  unreachable, !dbg !176

assert_ok:                                        ; preds = %checkok
  %7 = load ptr, ptr %ptr, align 8, !dbg !178
  %ptrxi = ptrtoint ptr %7 to i64, !dbg !178
  %8 = load ptr, ptr %self, align 8, !dbg !178
  %9 = load ptr, ptr %8, align 8, !dbg !178
  %ptrxi6 = ptrtoint ptr %9 to i64, !dbg !178
  %ge = icmp uge i64 %ptrxi, %ptrxi6, !dbg !178
  br i1 %ge, label %assert_ok11, label %assert_fail7, !dbg !178

assert_fail7:                                     ; preds = %assert_ok
  store %"char[]" { ptr @.panic_msg.8, i64 46 }, ptr %indirectarg8, align 8
  store %"char[]" { ptr @.file, i64 18 }, ptr %indirectarg9, align 8
  store %"char[]" { ptr @.func.6, i64 7 }, ptr %indirectarg10, align 8
  %10 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %10(ptr align 8 %indirectarg8, ptr align 8 %indirectarg9, ptr align 8 %indirectarg10, i32 71) #6, !dbg !178
  unreachable, !dbg !178

assert_ok11:                                      ; preds = %assert_ok
    #dbg_declare(ptr %header, !179, !DIExpression(), !185)
  %11 = load ptr, ptr %ptr, align 8, !dbg !185
  %ptradd_any = getelementptr i8, ptr %11, i64 -8, !dbg !185
  store ptr %ptradd_any, ptr %header, align 8, !dbg !185
  %12 = load ptr, ptr %ptr, align 8, !dbg !186
  %13 = load ptr, ptr %header, align 8, !dbg !186
  %14 = load i64, ptr %13, align 8, !dbg !186
  %ptradd_any12 = getelementptr i8, ptr %12, i64 %14, !dbg !186
  %15 = load ptr, ptr %self, align 8, !dbg !186
  %ptradd = getelementptr inbounds i8, ptr %15, i64 8, !dbg !186
  %16 = load i64, ptr %ptradd, align 8, !dbg !186
  %17 = load ptr, ptr %15, align 8, !dbg !186
  %18 = load ptr, ptr %self, align 8, !dbg !186
  %ptradd13 = getelementptr inbounds i8, ptr %18, i64 16, !dbg !186
  %19 = load i64, ptr %ptradd13, align 8, !dbg !186
  %ge14 = icmp uge i64 %19, %16, !dbg !186
  %20 = call i1 @llvm.expect.i1(i1 %ge14, i1 false), !dbg !186
  br i1 %20, label %panic15, label %checkok22, !dbg !186

checkok22:                                        ; preds = %assert_ok11
  %ptradd23 = getelementptr inbounds i8, ptr %17, i64 %19, !dbg !186
  %eq = icmp eq ptr %ptradd_any12, %ptradd23, !dbg !186
  br i1 %eq, label %if.then, label %if.exit, !dbg !186

if.then:                                          ; preds = %checkok22
  %21 = load ptr, ptr %self, align 8, !dbg !187
  %ptradd24 = getelementptr inbounds i8, ptr %21, i64 16, !dbg !187
  %22 = load i64, ptr %ptradd24, align 8, !dbg !187
  %23 = load ptr, ptr %header, align 8, !dbg !187
  %24 = load i64, ptr %23, align 8, !dbg !187
  %add = add i64 %24, 8, !dbg !187
  %sub = sub i64 %22, %add, !dbg !187
  store i64 %sub, ptr %ptradd24, align 8, !dbg !187
  br label %if.exit, !dbg !187

if.exit:                                          ; preds = %if.then, %checkok22
  ret void, !dbg !187

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file, i64 18 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.6, i64 7 }, ptr %indirectarg2, align 8
  %25 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %25(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 69) #6, !dbg !173
  unreachable, !dbg !173

panic15:                                          ; preds = %assert_ok11
  store i64 %16, ptr %taddr, align 8
  %26 = insertvalue %any undef, ptr %taddr, 0
  %27 = insertvalue %any %26, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %19, ptr %taddr16, align 8
  %28 = insertvalue %any undef, ptr %taddr16, 0
  %29 = insertvalue %any %28, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 59 }, ptr %indirectarg17, align 8
  store %"char[]" { ptr @.file, i64 18 }, ptr %indirectarg18, align 8
  store %"char[]" { ptr @.func.6, i64 7 }, ptr %indirectarg19, align 8
  store %any %27, ptr %varargslots, align 16
  %ptradd20 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %29, ptr %ptradd20, align 16
  %30 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %30, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg21, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg17, ptr align 8 %indirectarg18, ptr align 8 %indirectarg19, i32 74, ptr align 8 %indirectarg21) #6, !dbg !186
  unreachable, !dbg !186
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.core.mem.allocator.ArenaAllocator.acquire(ptr %0, ptr %1, i64 %2, i32 %3, i64 %4) #0 comdat !dbg !189 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %size = alloca i64, align 8
  %init_type = alloca i32, align 4
  %alignment = alloca i64, align 8
  %x = alloca i64, align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg13 = alloca %"char[]", align 8
  %indirectarg14 = alloca %"char[]", align 8
  %indirectarg15 = alloca %"char[]", align 8
  %total_len = alloca i64, align 8
  %start_mem = alloca ptr, align 8
  %unaligned_pointer_to_offset = alloca ptr, align 8
  %mem = alloca ptr, align 8
  %ptr = alloca ptr, align 8
  %alignment18 = alloca i64, align 8
  %x19 = alloca i64, align 8
  %indirectarg28 = alloca %"char[]", align 8
  %indirectarg29 = alloca %"char[]", align 8
  %indirectarg30 = alloca %"char[]", align 8
  %end = alloca i64, align 8
  %header = alloca ptr, align 8
  %dst = alloca ptr, align 8
  %len = alloca i64, align 8
  %reterr = alloca i64, align 8
  %5 = icmp eq ptr %1, null, !dbg !195
  %6 = call i1 @llvm.expect.i1(i1 %5, i1 false), !dbg !195
  br i1 %6, label %panic, label %checkok, !dbg !195

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !196, !DIExpression(), !197)
  store i64 %2, ptr %size, align 8
    #dbg_declare(ptr %size, !198, !DIExpression(), !197)
  store i32 %3, ptr %init_type, align 4
    #dbg_declare(ptr %init_type, !199, !DIExpression(), !197)
  store i64 %4, ptr %alignment, align 8
    #dbg_declare(ptr %alignment, !200, !DIExpression(), !197)
  %7 = load i64, ptr %alignment, align 8, !dbg !201
  %i2nb = icmp eq i64 %7, 0, !dbg !201
  br i1 %i2nb, label %or.phi, label %or.rhs, !dbg !201

or.rhs:                                           ; preds = %checkok
  %8 = load i64, ptr %alignment, align 8
  store i64 %8, ptr %x, align 8
  %9 = load i64, ptr %x, align 8, !dbg !203
  %neq = icmp ne i64 0, %9, !dbg !203
  br i1 %neq, label %and.rhs, label %and.phi, !dbg !203

and.rhs:                                          ; preds = %or.rhs
  %10 = load i64, ptr %x, align 8, !dbg !203
  %11 = load i64, ptr %x, align 8, !dbg !203
  %sub = sub i64 %11, 1, !dbg !203
  %and = and i64 %10, %sub, !dbg !203
  %eq = icmp eq i64 %and, 0, !dbg !203
  br label %and.phi, !dbg !203

and.phi:                                          ; preds = %and.rhs, %or.rhs
  %val = phi i1 [ false, %or.rhs ], [ %eq, %and.rhs ], !dbg !203
  br label %or.phi, !dbg !203

or.phi:                                           ; preds = %and.phi, %checkok
  %val3 = phi i1 [ true, %checkok ], [ %val, %and.phi ], !dbg !203
  br i1 %val3, label %assert_ok, label %assert_fail, !dbg !203

assert_fail:                                      ; preds = %or.phi
  store %"char[]" { ptr @.panic_msg.11, i64 65 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file, i64 18 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg6, align 8
  %12 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %12(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 84) #6, !dbg !201
  unreachable, !dbg !201

assert_ok:                                        ; preds = %or.phi
  %13 = load i64, ptr %alignment, align 8, !dbg !206
  %le = icmp ule i64 %13, 268435456, !dbg !206
  br i1 %le, label %assert_ok11, label %assert_fail7, !dbg !206

assert_fail7:                                     ; preds = %assert_ok
  store %"char[]" { ptr @.panic_msg.12, i64 80 }, ptr %indirectarg8, align 8
  store %"char[]" { ptr @.file, i64 18 }, ptr %indirectarg9, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg10, align 8
  %14 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %14(ptr align 8 %indirectarg8, ptr align 8 %indirectarg9, ptr align 8 %indirectarg10, i32 85) #6, !dbg !206
  unreachable, !dbg !206

assert_ok11:                                      ; preds = %assert_ok
  %15 = load i64, ptr %size, align 8, !dbg !207
  %lt = icmp ult i64 0, %15, !dbg !207
  br i1 %lt, label %assert_ok16, label %assert_fail12, !dbg !207

assert_fail12:                                    ; preds = %assert_ok11
  store %"char[]" { ptr @.panic_msg.13, i64 29 }, ptr %indirectarg13, align 8
  store %"char[]" { ptr @.file, i64 18 }, ptr %indirectarg14, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg15, align 8
  %16 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %16(ptr align 8 %indirectarg13, ptr align 8 %indirectarg14, ptr align 8 %indirectarg15, i32 86) #6, !dbg !207
  unreachable, !dbg !207

assert_ok16:                                      ; preds = %assert_ok11
  %17 = load i64, ptr %alignment, align 8, !dbg !208
  %18 = call i64 @std.core.mem.allocator.alignment_for_allocation(i64 %17) #7, !dbg !208
  store i64 %18, ptr %alignment, align 8, !dbg !208
    #dbg_declare(ptr %total_len, !209, !DIExpression(), !210)
  %19 = load ptr, ptr %self, align 8, !dbg !210
  %ptradd = getelementptr inbounds i8, ptr %19, i64 8, !dbg !210
  %20 = load i64, ptr %ptradd, align 8, !dbg !210
  store i64 %20, ptr %total_len, align 8, !dbg !210
  %21 = load i64, ptr %size, align 8, !dbg !211
  %22 = load i64, ptr %total_len, align 8, !dbg !211
  %gt = icmp ugt i64 %21, %22, !dbg !211
  br i1 %gt, label %if.then, label %if.exit, !dbg !211

if.then:                                          ; preds = %assert_ok16
  ret i64 ptrtoint (ptr @std.core.mem.INVALID_ALLOC_SIZE to i64), !dbg !211

if.exit:                                          ; preds = %assert_ok16
    #dbg_declare(ptr %start_mem, !212, !DIExpression(), !213)
  %23 = load ptr, ptr %self, align 8, !dbg !213
  %24 = load ptr, ptr %23, align 8, !dbg !213
  store ptr %24, ptr %start_mem, align 8, !dbg !213
    #dbg_declare(ptr %unaligned_pointer_to_offset, !214, !DIExpression(), !215)
  %25 = load ptr, ptr %start_mem, align 8, !dbg !215
  %26 = load ptr, ptr %self, align 8, !dbg !215
  %ptradd17 = getelementptr inbounds i8, ptr %26, i64 16, !dbg !215
  %27 = load i64, ptr %ptradd17, align 8, !dbg !215
  %add = add i64 %27, 8, !dbg !215
  %ptradd_any = getelementptr i8, ptr %25, i64 %add, !dbg !215
  store ptr %ptradd_any, ptr %unaligned_pointer_to_offset, align 8, !dbg !215
    #dbg_declare(ptr %mem, !216, !DIExpression(), !217)
  %28 = load ptr, ptr %unaligned_pointer_to_offset, align 8
  store ptr %28, ptr %ptr, align 8
  %29 = load i64, ptr %alignment, align 8
  store i64 %29, ptr %alignment18, align 8
  %30 = load ptr, ptr %ptr, align 8, !dbg !218
  %ptrxi = ptrtoint ptr %30 to i64, !dbg !218
  %31 = load i64, ptr %alignment18, align 8, !dbg !218
  store i64 %31, ptr %x19, align 8
  %32 = load i64, ptr %x19, align 8, !dbg !221
  %neq20 = icmp ne i64 0, %32, !dbg !221
  br i1 %neq20, label %and.rhs21, label %and.phi25, !dbg !221

and.rhs21:                                        ; preds = %if.exit
  %33 = load i64, ptr %x19, align 8, !dbg !221
  %34 = load i64, ptr %x19, align 8, !dbg !221
  %sub22 = sub i64 %34, 1, !dbg !221
  %and23 = and i64 %33, %sub22, !dbg !221
  %eq24 = icmp eq i64 %and23, 0, !dbg !221
  br label %and.phi25, !dbg !221

and.phi25:                                        ; preds = %and.rhs21, %if.exit
  %val26 = phi i1 [ false, %if.exit ], [ %eq24, %and.rhs21 ], !dbg !221
  br i1 %val26, label %assert_ok31, label %assert_fail27, !dbg !221

assert_fail27:                                    ; preds = %and.phi25
  store %"char[]" { ptr @.panic_msg.14, i64 51 }, ptr %indirectarg28, align 8
  store %"char[]" { ptr @.file.15, i64 6 }, ptr %indirectarg29, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg30, align 8
  %35 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %35(ptr align 8 %indirectarg28, ptr align 8 %indirectarg29, ptr align 8 %indirectarg30, i32 313) #6, !dbg !218
  unreachable, !dbg !218

assert_ok31:                                      ; preds = %and.phi25
  %36 = call i64 @std.core.mem.aligned_offset(i64 %ptrxi, i64 %31), !dbg !218
  %intptr = inttoptr i64 %36 to ptr, !dbg !218
  store ptr %intptr, ptr %mem, align 8, !dbg !218
    #dbg_declare(ptr %end, !223, !DIExpression(), !224)
  %37 = load ptr, ptr %mem, align 8, !dbg !224
  %38 = load ptr, ptr %self, align 8, !dbg !224
  %39 = load ptr, ptr %38, align 8, !dbg !224
  %40 = ptrtoint ptr %39 to i64, !dbg !224
  %41 = ptrtoint ptr %37 to i64, !dbg !224
  %42 = sub i64 %41, %40, !dbg !224
  %43 = sdiv exact i64 %42, 1, !dbg !224
  %44 = load i64, ptr %size, align 8, !dbg !224
  %add32 = add i64 %43, %44, !dbg !224
  store i64 %add32, ptr %end, align 8, !dbg !224
  %45 = load i64, ptr %end, align 8, !dbg !225
  %46 = load i64, ptr %total_len, align 8, !dbg !225
  %gt33 = icmp ugt i64 %45, %46, !dbg !225
  br i1 %gt33, label %if.then34, label %if.exit35, !dbg !225

if.then34:                                        ; preds = %assert_ok31
  ret i64 ptrtoint (ptr @std.core.mem.OUT_OF_MEMORY to i64), !dbg !225

if.exit35:                                        ; preds = %assert_ok31
  %47 = load ptr, ptr %self, align 8, !dbg !226
  %ptradd36 = getelementptr inbounds i8, ptr %47, i64 16, !dbg !226
  %48 = load i64, ptr %end, align 8, !dbg !226
  store i64 %48, ptr %ptradd36, align 8, !dbg !226
    #dbg_declare(ptr %header, !227, !DIExpression(), !228)
  %49 = load ptr, ptr %mem, align 8, !dbg !228
  %ptradd_any37 = getelementptr i8, ptr %49, i64 -8, !dbg !228
  store ptr %ptradd_any37, ptr %header, align 8, !dbg !228
  %50 = load ptr, ptr %header, align 8, !dbg !229
  %51 = load i64, ptr %size, align 8, !dbg !229
  store i64 %51, ptr %50, align 8, !dbg !229
  %52 = load i32, ptr %init_type, align 4, !dbg !230
  %eq38 = icmp eq i32 %52, 1, !dbg !230
  br i1 %eq38, label %if.then39, label %if.exit40, !dbg !230

if.then39:                                        ; preds = %if.exit35
  %53 = load ptr, ptr %mem, align 8
  store ptr %53, ptr %dst, align 8
  %54 = load i64, ptr %size, align 8
  store i64 %54, ptr %len, align 8
  %55 = load ptr, ptr %dst, align 8, !dbg !231
  %56 = load i64, ptr %len, align 8, !dbg !231
  call void @llvm.memset.p0.i64(ptr align 16 %55, i8 0, i64 %56, i1 false), !dbg !231
  br label %if.exit40, !dbg !231

if.exit40:                                        ; preds = %if.then39, %if.exit35
  %57 = load ptr, ptr %mem, align 8, !dbg !233
  store ptr %57, ptr %0, align 8, !dbg !233
  ret i64 0, !dbg !233

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file, i64 18 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg2, align 8
  %58 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %58(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 89) #6, !dbg !197
  unreachable, !dbg !197
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.core.mem.allocator.ArenaAllocator.resize(ptr %0, ptr %1, ptr %2, i64 %3, i64 %4) #0 comdat !dbg !234 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %old_pointer = alloca ptr, align 8
  %size = alloca i64, align 8
  %alignment = alloca i64, align 8
  %x = alloca i64, align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg14 = alloca %"char[]", align 8
  %indirectarg15 = alloca %"char[]", align 8
  %indirectarg16 = alloca %"char[]", align 8
  %indirectarg19 = alloca %"char[]", align 8
  %indirectarg20 = alloca %"char[]", align 8
  %indirectarg21 = alloca %"char[]", align 8
  %indirectarg24 = alloca %"char[]", align 8
  %indirectarg25 = alloca %"char[]", align 8
  %indirectarg26 = alloca %"char[]", align 8
  %total_len = alloca i64, align 8
  %header = alloca ptr, align 8
  %old_size = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr32 = alloca i64, align 8
  %indirectarg33 = alloca %"char[]", align 8
  %indirectarg34 = alloca %"char[]", align 8
  %indirectarg35 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg37 = alloca %"any[]", align 8
  %x43 = alloca i64, align 8
  %indirectarg52 = alloca %"char[]", align 8
  %indirectarg53 = alloca %"char[]", align 8
  %indirectarg54 = alloca %"char[]", align 8
  %new_used = alloca i64, align 8
  %reterr = alloca i64, align 8
  %mem = alloca ptr, align 8
  %error_var = alloca i64, align 8
  %x74 = alloca i64, align 8
  %indirectarg85 = alloca %"char[]", align 8
  %indirectarg86 = alloca %"char[]", align 8
  %indirectarg87 = alloca %"char[]", align 8
  %indirectarg91 = alloca %"char[]", align 8
  %indirectarg92 = alloca %"char[]", align 8
  %indirectarg93 = alloca %"char[]", align 8
  %indirectarg97 = alloca %"char[]", align 8
  %indirectarg98 = alloca %"char[]", align 8
  %indirectarg99 = alloca %"char[]", align 8
  %retparam = alloca ptr, align 8
  %dst = alloca ptr, align 8
  %src = alloca ptr, align 8
  %x101 = alloca i64, align 8
  %y = alloca i64, align 8
  %len = alloca i64, align 8
  %indirectarg104 = alloca %"char[]", align 8
  %indirectarg105 = alloca %"char[]", align 8
  %indirectarg106 = alloca %"char[]", align 8
  %indirectarg114 = alloca %"char[]", align 8
  %indirectarg115 = alloca %"char[]", align 8
  %indirectarg116 = alloca %"char[]", align 8
  %indirectarg130 = alloca %"char[]", align 8
  %indirectarg131 = alloca %"char[]", align 8
  %indirectarg132 = alloca %"char[]", align 8
  %reterr134 = alloca i64, align 8
  %5 = icmp eq ptr %1, null, !dbg !237
  %6 = call i1 @llvm.expect.i1(i1 %5, i1 false), !dbg !237
  br i1 %6, label %panic, label %checkok, !dbg !237

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !238, !DIExpression(), !239)
  store ptr %2, ptr %old_pointer, align 8
    #dbg_declare(ptr %old_pointer, !240, !DIExpression(), !239)
  store i64 %3, ptr %size, align 8
    #dbg_declare(ptr %size, !241, !DIExpression(), !239)
  store i64 %4, ptr %alignment, align 8
    #dbg_declare(ptr %alignment, !242, !DIExpression(), !239)
  %7 = load i64, ptr %alignment, align 8, !dbg !243
  %i2nb = icmp eq i64 %7, 0, !dbg !243
  br i1 %i2nb, label %or.phi, label %or.rhs, !dbg !243

or.rhs:                                           ; preds = %checkok
  %8 = load i64, ptr %alignment, align 8
  store i64 %8, ptr %x, align 8
  %9 = load i64, ptr %x, align 8, !dbg !245
  %neq = icmp ne i64 0, %9, !dbg !245
  br i1 %neq, label %and.rhs, label %and.phi, !dbg !245

and.rhs:                                          ; preds = %or.rhs
  %10 = load i64, ptr %x, align 8, !dbg !245
  %11 = load i64, ptr %x, align 8, !dbg !245
  %sub = sub i64 %11, 1, !dbg !245
  %and = and i64 %10, %sub, !dbg !245
  %eq = icmp eq i64 %and, 0, !dbg !245
  br label %and.phi, !dbg !245

and.phi:                                          ; preds = %and.rhs, %or.rhs
  %val = phi i1 [ false, %or.rhs ], [ %eq, %and.rhs ], !dbg !245
  br label %or.phi, !dbg !245

or.phi:                                           ; preds = %and.phi, %checkok
  %val3 = phi i1 [ true, %checkok ], [ %val, %and.phi ], !dbg !245
  br i1 %val3, label %assert_ok, label %assert_fail, !dbg !245

assert_fail:                                      ; preds = %or.phi
  store %"char[]" { ptr @.panic_msg.11, i64 65 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file, i64 18 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg6, align 8
  %12 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %12(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 109) #6, !dbg !243
  unreachable, !dbg !243

assert_ok:                                        ; preds = %or.phi
  %13 = load i64, ptr %alignment, align 8, !dbg !247
  %le = icmp ule i64 %13, 268435456, !dbg !247
  br i1 %le, label %assert_ok11, label %assert_fail7, !dbg !247

assert_fail7:                                     ; preds = %assert_ok
  store %"char[]" { ptr @.panic_msg.12, i64 80 }, ptr %indirectarg8, align 8
  store %"char[]" { ptr @.file, i64 18 }, ptr %indirectarg9, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg10, align 8
  %14 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %14(ptr align 8 %indirectarg8, ptr align 8 %indirectarg9, ptr align 8 %indirectarg10, i32 110) #6, !dbg !247
  unreachable, !dbg !247

assert_ok11:                                      ; preds = %assert_ok
  %15 = load ptr, ptr %old_pointer, align 8, !dbg !248
  %neq12 = icmp ne ptr %15, null, !dbg !248
  br i1 %neq12, label %assert_ok17, label %assert_fail13, !dbg !248

assert_fail13:                                    ; preds = %assert_ok11
  store %"char[]" { ptr @.panic_msg.17, i64 40 }, ptr %indirectarg14, align 8
  store %"char[]" { ptr @.file, i64 18 }, ptr %indirectarg15, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg16, align 8
  %16 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %16(ptr align 8 %indirectarg14, ptr align 8 %indirectarg15, ptr align 8 %indirectarg16, i32 111) #6, !dbg !248
  unreachable, !dbg !248

assert_ok17:                                      ; preds = %assert_ok11
  %17 = load i64, ptr %size, align 8, !dbg !249
  %lt = icmp ult i64 0, %17, !dbg !249
  br i1 %lt, label %assert_ok22, label %assert_fail18, !dbg !249

assert_fail18:                                    ; preds = %assert_ok17
  store %"char[]" { ptr @.panic_msg.13, i64 29 }, ptr %indirectarg19, align 8
  store %"char[]" { ptr @.file, i64 18 }, ptr %indirectarg20, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg21, align 8
  %18 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %18(ptr align 8 %indirectarg19, ptr align 8 %indirectarg20, ptr align 8 %indirectarg21, i32 112) #6, !dbg !249
  unreachable, !dbg !249

assert_ok22:                                      ; preds = %assert_ok17
  %19 = load i64, ptr %alignment, align 8, !dbg !250
  %20 = call i64 @std.core.mem.allocator.alignment_for_allocation(i64 %19) #7, !dbg !250
  store i64 %20, ptr %alignment, align 8, !dbg !250
  %21 = load ptr, ptr %old_pointer, align 8, !dbg !251
  %22 = load ptr, ptr %self, align 8, !dbg !251
  %23 = load ptr, ptr %22, align 8, !dbg !251
  %ge = icmp uge ptr %21, %23, !dbg !251
  br i1 %ge, label %assert_ok27, label %assert_fail23, !dbg !251

assert_fail23:                                    ; preds = %assert_ok22
  store %"char[]" { ptr @.panic_msg.8, i64 46 }, ptr %indirectarg24, align 8
  store %"char[]" { ptr @.file, i64 18 }, ptr %indirectarg25, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg26, align 8
  %24 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %24(ptr align 8 %indirectarg24, ptr align 8 %indirectarg25, ptr align 8 %indirectarg26, i32 118) #6, !dbg !251
  unreachable, !dbg !251

assert_ok27:                                      ; preds = %assert_ok22
    #dbg_declare(ptr %total_len, !252, !DIExpression(), !253)
  %25 = load ptr, ptr %self, align 8, !dbg !253
  %ptradd = getelementptr inbounds i8, ptr %25, i64 8, !dbg !253
  %26 = load i64, ptr %ptradd, align 8, !dbg !253
  store i64 %26, ptr %total_len, align 8, !dbg !253
  %27 = load i64, ptr %size, align 8, !dbg !254
  %28 = load i64, ptr %total_len, align 8, !dbg !254
  %gt = icmp ugt i64 %27, %28, !dbg !254
  br i1 %gt, label %if.then, label %if.exit, !dbg !254

if.then:                                          ; preds = %assert_ok27
  ret i64 ptrtoint (ptr @std.core.mem.INVALID_ALLOC_SIZE to i64), !dbg !254

if.exit:                                          ; preds = %assert_ok27
    #dbg_declare(ptr %header, !255, !DIExpression(), !256)
  %29 = load ptr, ptr %old_pointer, align 8, !dbg !256
  %ptradd_any = getelementptr i8, ptr %29, i64 -8, !dbg !256
  store ptr %ptradd_any, ptr %header, align 8, !dbg !256
    #dbg_declare(ptr %old_size, !257, !DIExpression(), !258)
  %30 = load ptr, ptr %header, align 8, !dbg !258
  %31 = load i64, ptr %30, align 8, !dbg !258
  store i64 %31, ptr %old_size, align 8, !dbg !258
  %32 = load ptr, ptr %self, align 8, !dbg !259
  %ptradd28 = getelementptr inbounds i8, ptr %32, i64 8, !dbg !259
  %33 = load i64, ptr %ptradd28, align 8, !dbg !259
  %34 = load ptr, ptr %32, align 8, !dbg !259
  %35 = load ptr, ptr %self, align 8, !dbg !259
  %ptradd29 = getelementptr inbounds i8, ptr %35, i64 16, !dbg !259
  %36 = load i64, ptr %ptradd29, align 8, !dbg !259
  %ge30 = icmp uge i64 %36, %33, !dbg !259
  %37 = call i1 @llvm.expect.i1(i1 %ge30, i1 false), !dbg !259
  br i1 %37, label %panic31, label %checkok38, !dbg !259

checkok38:                                        ; preds = %if.exit
  %ptradd39 = getelementptr inbounds i8, ptr %34, i64 %36, !dbg !259
  %38 = load ptr, ptr %old_pointer, align 8, !dbg !259
  %39 = load i64, ptr %old_size, align 8, !dbg !259
  %ptradd_any40 = getelementptr i8, ptr %38, i64 %39, !dbg !259
  %eq41 = icmp eq ptr %ptradd39, %ptradd_any40, !dbg !259
  br i1 %eq41, label %and.rhs42, label %and.phi56, !dbg !259

and.rhs42:                                        ; preds = %checkok38
  %40 = load ptr, ptr %old_pointer, align 8, !dbg !259
  %41 = load i64, ptr %alignment, align 8, !dbg !259
  store i64 %41, ptr %x43, align 8
  %42 = load i64, ptr %x43, align 8, !dbg !260
  %neq44 = icmp ne i64 0, %42, !dbg !260
  br i1 %neq44, label %and.rhs45, label %and.phi49, !dbg !260

and.rhs45:                                        ; preds = %and.rhs42
  %43 = load i64, ptr %x43, align 8, !dbg !260
  %44 = load i64, ptr %x43, align 8, !dbg !260
  %sub46 = sub i64 %44, 1, !dbg !260
  %and47 = and i64 %43, %sub46, !dbg !260
  %eq48 = icmp eq i64 %and47, 0, !dbg !260
  br label %and.phi49, !dbg !260

and.phi49:                                        ; preds = %and.rhs45, %and.rhs42
  %val50 = phi i1 [ false, %and.rhs42 ], [ %eq48, %and.rhs45 ], !dbg !260
  br i1 %val50, label %assert_ok55, label %assert_fail51, !dbg !260

assert_fail51:                                    ; preds = %and.phi49
  store %"char[]" { ptr @.panic_msg.14, i64 51 }, ptr %indirectarg52, align 8
  store %"char[]" { ptr @.file, i64 18 }, ptr %indirectarg53, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg54, align 8
  %45 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %45(ptr align 8 %indirectarg52, ptr align 8 %indirectarg53, ptr align 8 %indirectarg54, i32 124) #6, !dbg !259
  unreachable, !dbg !259

assert_ok55:                                      ; preds = %and.phi49
  %46 = call i8 @std.core.mem.ptr_is_aligned(ptr %40, i64 %41) #7, !dbg !259
  %47 = trunc i8 %46 to i1, !dbg !259
  br label %and.phi56, !dbg !259

and.phi56:                                        ; preds = %assert_ok55, %checkok38
  %val57 = phi i1 [ false, %checkok38 ], [ %47, %assert_ok55 ], !dbg !259
  br i1 %val57, label %if.then58, label %if.exit71, !dbg !259

if.then58:                                        ; preds = %and.phi56
  %48 = load i64, ptr %old_size, align 8, !dbg !262
  %49 = load i64, ptr %size, align 8, !dbg !262
  %ge59 = icmp uge i64 %48, %49, !dbg !262
  br i1 %ge59, label %if.then60, label %if.else, !dbg !262

if.then60:                                        ; preds = %if.then58
  %50 = load ptr, ptr %self, align 8, !dbg !264
  %ptradd61 = getelementptr inbounds i8, ptr %50, i64 16, !dbg !264
  %51 = load i64, ptr %ptradd61, align 8, !dbg !264
  %52 = load i64, ptr %old_size, align 8, !dbg !264
  %53 = load i64, ptr %size, align 8, !dbg !264
  %sub62 = sub i64 %52, %53, !dbg !264
  %sub63 = sub i64 %51, %sub62, !dbg !264
  store i64 %sub63, ptr %ptradd61, align 8, !dbg !264
  br label %if.exit70, !dbg !264

if.else:                                          ; preds = %if.then58
    #dbg_declare(ptr %new_used, !266, !DIExpression(), !268)
  %54 = load ptr, ptr %self, align 8, !dbg !268
  %ptradd64 = getelementptr inbounds i8, ptr %54, i64 16, !dbg !268
  %55 = load i64, ptr %ptradd64, align 8, !dbg !268
  %56 = load i64, ptr %size, align 8, !dbg !268
  %add = add i64 %55, %56, !dbg !268
  %57 = load i64, ptr %old_size, align 8, !dbg !268
  %sub65 = sub i64 %add, %57, !dbg !268
  store i64 %sub65, ptr %new_used, align 8, !dbg !268
  %58 = load i64, ptr %new_used, align 8, !dbg !269
  %59 = load i64, ptr %total_len, align 8, !dbg !269
  %gt66 = icmp ugt i64 %58, %59, !dbg !269
  br i1 %gt66, label %if.then67, label %if.exit68, !dbg !269

if.then67:                                        ; preds = %if.else
  ret i64 ptrtoint (ptr @std.core.mem.OUT_OF_MEMORY to i64), !dbg !269

if.exit68:                                        ; preds = %if.else
  %60 = load ptr, ptr %self, align 8, !dbg !270
  %ptradd69 = getelementptr inbounds i8, ptr %60, i64 16, !dbg !270
  %61 = load i64, ptr %new_used, align 8, !dbg !270
  store i64 %61, ptr %ptradd69, align 8, !dbg !270
  br label %if.exit70, !dbg !270

if.exit70:                                        ; preds = %if.exit68, %if.then60
  %62 = load ptr, ptr %header, align 8, !dbg !271
  %63 = load i64, ptr %size, align 8, !dbg !271
  store i64 %63, ptr %62, align 8, !dbg !271
  %64 = load ptr, ptr %old_pointer, align 8, !dbg !272
  store ptr %64, ptr %0, align 8, !dbg !272
  ret i64 0, !dbg !272

if.exit71:                                        ; preds = %and.phi56
    #dbg_declare(ptr %mem, !273, !DIExpression(), !274)
  %65 = load ptr, ptr %self, align 8, !dbg !274
  %66 = load i64, ptr %size, align 8, !dbg !274
  %67 = load i64, ptr %alignment, align 8, !dbg !274
  %i2nb72 = icmp eq i64 %67, 0, !dbg !275
  br i1 %i2nb72, label %or.phi82, label %or.rhs73, !dbg !275

or.rhs73:                                         ; preds = %if.exit71
  store i64 %67, ptr %x74, align 8
  %68 = load i64, ptr %x74, align 8, !dbg !276
  %neq75 = icmp ne i64 0, %68, !dbg !276
  br i1 %neq75, label %and.rhs76, label %and.phi80, !dbg !276

and.rhs76:                                        ; preds = %or.rhs73
  %69 = load i64, ptr %x74, align 8, !dbg !276
  %70 = load i64, ptr %x74, align 8, !dbg !276
  %sub77 = sub i64 %70, 1, !dbg !276
  %and78 = and i64 %69, %sub77, !dbg !276
  %eq79 = icmp eq i64 %and78, 0, !dbg !276
  br label %and.phi80, !dbg !276

and.phi80:                                        ; preds = %and.rhs76, %or.rhs73
  %val81 = phi i1 [ false, %or.rhs73 ], [ %eq79, %and.rhs76 ], !dbg !276
  br label %or.phi82, !dbg !276

or.phi82:                                         ; preds = %and.phi80, %if.exit71
  %val83 = phi i1 [ true, %if.exit71 ], [ %val81, %and.phi80 ], !dbg !276
  br i1 %val83, label %assert_ok88, label %assert_fail84, !dbg !276

assert_fail84:                                    ; preds = %or.phi82
  store %"char[]" { ptr @.panic_msg.11, i64 65 }, ptr %indirectarg85, align 8
  store %"char[]" { ptr @.file, i64 18 }, ptr %indirectarg86, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg87, align 8
  %71 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %71(ptr align 8 %indirectarg85, ptr align 8 %indirectarg86, ptr align 8 %indirectarg87, i32 140) #6, !dbg !274
  unreachable, !dbg !274

assert_ok88:                                      ; preds = %or.phi82
  %le89 = icmp ule i64 %67, 268435456, !dbg !274
  br i1 %le89, label %assert_ok94, label %assert_fail90, !dbg !274

assert_fail90:                                    ; preds = %assert_ok88
  store %"char[]" { ptr @.panic_msg.12, i64 80 }, ptr %indirectarg91, align 8
  store %"char[]" { ptr @.file, i64 18 }, ptr %indirectarg92, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg93, align 8
  %72 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %72(ptr align 8 %indirectarg91, ptr align 8 %indirectarg92, ptr align 8 %indirectarg93, i32 140) #6, !dbg !274
  unreachable, !dbg !274

assert_ok94:                                      ; preds = %assert_ok88
  %lt95 = icmp ult i64 0, %66, !dbg !274
  br i1 %lt95, label %assert_ok100, label %assert_fail96, !dbg !274

assert_fail96:                                    ; preds = %assert_ok94
  store %"char[]" { ptr @.panic_msg.13, i64 29 }, ptr %indirectarg97, align 8
  store %"char[]" { ptr @.file, i64 18 }, ptr %indirectarg98, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg99, align 8
  %73 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %73(ptr align 8 %indirectarg97, ptr align 8 %indirectarg98, ptr align 8 %indirectarg99, i32 140) #6, !dbg !274
  unreachable, !dbg !274

assert_ok100:                                     ; preds = %assert_ok94
  %74 = call i64 @std.core.mem.allocator.ArenaAllocator.acquire(ptr %retparam, ptr %65, i64 %66, i32 0, i64 %67), !dbg !274
  %not_err = icmp eq i64 %74, 0, !dbg !274
  %75 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !274
  br i1 %75, label %after_check, label %assign_optional, !dbg !274

assign_optional:                                  ; preds = %assert_ok100
  store i64 %74, ptr %error_var, align 8, !dbg !274
  br label %guard_block, !dbg !274

after_check:                                      ; preds = %assert_ok100
  br label %noerr_block, !dbg !274

guard_block:                                      ; preds = %assign_optional
  %76 = load i64, ptr %error_var, align 8, !dbg !274
  ret i64 %76, !dbg !274

noerr_block:                                      ; preds = %after_check
  %77 = load ptr, ptr %retparam, align 8, !dbg !274
  store ptr %77, ptr %mem, align 8, !dbg !274
  %78 = load ptr, ptr %mem, align 8
  store ptr %78, ptr %dst, align 8
  %79 = load ptr, ptr %old_pointer, align 8
  store ptr %79, ptr %src, align 8
  %80 = load i64, ptr %size, align 8
  store i64 %80, ptr %x101, align 8
  %81 = load i64, ptr %old_size, align 8
  store i64 %81, ptr %y, align 8
  %82 = load i64, ptr %x101, align 8, !dbg !278
  %83 = load i64, ptr %y, align 8, !dbg !278
  %84 = call i64 @llvm.umin.i64(i64 %82, i64 %83), !dbg !278
  store i64 %84, ptr %len, align 8
  %85 = load ptr, ptr %dst, align 8, !dbg !281
  %neq102 = icmp ne ptr %85, null, !dbg !281
  br i1 %neq102, label %assert_ok107, label %assert_fail103, !dbg !281

assert_fail103:                                   ; preds = %noerr_block
  store %"char[]" { ptr @.panic_msg.18, i64 37 }, ptr %indirectarg104, align 8
  store %"char[]" { ptr @.file.15, i64 6 }, ptr %indirectarg105, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg106, align 8
  %86 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %86(ptr align 8 %indirectarg104, ptr align 8 %indirectarg105, ptr align 8 %indirectarg106, i32 357) #6, !dbg !281
  unreachable, !dbg !281

assert_ok107:                                     ; preds = %noerr_block
  %87 = load ptr, ptr %src, align 8, !dbg !284
  %neq108 = icmp ne ptr %87, null, !dbg !284
  br i1 %neq108, label %or.phi111, label %or.rhs109, !dbg !284

or.rhs109:                                        ; preds = %assert_ok107
  %88 = load i64, ptr %len, align 8, !dbg !284
  %eq110 = icmp eq i64 0, %88, !dbg !284
  br label %or.phi111, !dbg !284

or.phi111:                                        ; preds = %or.rhs109, %assert_ok107
  %val112 = phi i1 [ true, %assert_ok107 ], [ %eq110, %or.rhs109 ], !dbg !284
  br i1 %val112, label %assert_ok117, label %assert_fail113, !dbg !284

assert_fail113:                                   ; preds = %or.phi111
  store %"char[]" { ptr @.panic_msg.19, i64 94 }, ptr %indirectarg114, align 8
  store %"char[]" { ptr @.file, i64 18 }, ptr %indirectarg115, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg116, align 8
  %89 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %89(ptr align 8 %indirectarg114, ptr align 8 %indirectarg115, ptr align 8 %indirectarg116, i32 141) #6, !dbg !285
  unreachable, !dbg !285

assert_ok117:                                     ; preds = %or.phi111
  %90 = load i64, ptr %len, align 8, !dbg !286
  %eq118 = icmp eq i64 0, %90, !dbg !286
  br i1 %eq118, label %or.phi122, label %or.rhs119, !dbg !286

or.rhs119:                                        ; preds = %assert_ok117
  %91 = load ptr, ptr %dst, align 8, !dbg !286
  %92 = load i64, ptr %len, align 8, !dbg !286
  %ptradd_any120 = getelementptr i8, ptr %91, i64 %92, !dbg !286
  %93 = load ptr, ptr %src, align 8, !dbg !286
  %le121 = icmp ule ptr %ptradd_any120, %93, !dbg !286
  br label %or.phi122, !dbg !286

or.phi122:                                        ; preds = %or.rhs119, %assert_ok117
  %val123 = phi i1 [ true, %assert_ok117 ], [ %le121, %or.rhs119 ], !dbg !286
  br i1 %val123, label %or.phi127, label %or.rhs124, !dbg !286

or.rhs124:                                        ; preds = %or.phi122
  %94 = load ptr, ptr %src, align 8, !dbg !286
  %95 = load i64, ptr %len, align 8, !dbg !286
  %ptradd_any125 = getelementptr i8, ptr %94, i64 %95, !dbg !286
  %96 = load ptr, ptr %dst, align 8, !dbg !286
  %le126 = icmp ule ptr %ptradd_any125, %96, !dbg !286
  br label %or.phi127, !dbg !286

or.phi127:                                        ; preds = %or.rhs124, %or.phi122
  %val128 = phi i1 [ true, %or.phi122 ], [ %le126, %or.rhs124 ], !dbg !286
  br i1 %val128, label %assert_ok133, label %assert_fail129, !dbg !286

assert_fail129:                                   ; preds = %or.phi127
  store %"char[]" { ptr @.panic_msg.20, i64 95 }, ptr %indirectarg130, align 8
  store %"char[]" { ptr @.file, i64 18 }, ptr %indirectarg131, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg132, align 8
  %97 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %97(ptr align 8 %indirectarg130, ptr align 8 %indirectarg131, ptr align 8 %indirectarg132, i32 141) #6, !dbg !285
  unreachable, !dbg !285

assert_ok133:                                     ; preds = %or.phi127
  %98 = load ptr, ptr %dst, align 8, !dbg !287
  %99 = load ptr, ptr %src, align 8, !dbg !287
  %100 = load i64, ptr %len, align 8, !dbg !287
  call void @llvm.memcpy.p0.p0.i64(ptr align 16 %98, ptr align 16 %99, i64 %100, i1 false), !dbg !287
  %101 = load ptr, ptr %mem, align 8, !dbg !288
  store ptr %101, ptr %0, align 8, !dbg !288
  ret i64 0, !dbg !288

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file, i64 18 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg2, align 8
  %102 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %102(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 115) #6, !dbg !239
  unreachable, !dbg !239

panic31:                                          ; preds = %if.exit
  store i64 %33, ptr %taddr, align 8
  %103 = insertvalue %any undef, ptr %taddr, 0
  %104 = insertvalue %any %103, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %36, ptr %taddr32, align 8
  %105 = insertvalue %any undef, ptr %taddr32, 0
  %106 = insertvalue %any %105, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 59 }, ptr %indirectarg33, align 8
  store %"char[]" { ptr @.file, i64 18 }, ptr %indirectarg34, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg35, align 8
  store %any %104, ptr %varargslots, align 16
  %ptradd36 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %106, ptr %ptradd36, align 16
  %107 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %107, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg37, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg33, ptr align 8 %indirectarg34, ptr align 8 %indirectarg35, i32 124, ptr align 8 %indirectarg37) #6, !dbg !259
  unreachable, !dbg !259
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.core.mem.allocator.BackedArenaAllocator.destroy(ptr %0) #0 comdat !dbg !289 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %allocator = alloca %any, align 8
  %ptr = alloca ptr, align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg7 = alloca %"char[]", align 8
  %indirectarg8 = alloca %"char[]", align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %indirectarg13 = alloca %"char[]", align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !309
  %1 = icmp eq ptr %0, null, !dbg !309
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !309
  br i1 %2, label %panic, label %checkok, !dbg !309

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !310, !DIExpression(), !311)
  %3 = load ptr, ptr %self, align 8, !dbg !312
  call void @std.core.mem.allocator.BackedArenaAllocator.reset(ptr %3, i64 0), !dbg !312
  %4 = load ptr, ptr %self, align 8, !dbg !313
  %ptradd = getelementptr inbounds i8, ptr %4, i64 16, !dbg !313
  %5 = load ptr, ptr %ptradd, align 8, !dbg !313
  %i2b = icmp ne ptr %5, null, !dbg !313
  br i1 %i2b, label %if.then, label %if.exit, !dbg !313

if.then:                                          ; preds = %checkok
  %6 = load ptr, ptr %self, align 8, !dbg !313
  %ptradd3 = getelementptr inbounds i8, ptr %6, i64 16, !dbg !313
  %7 = load ptr, ptr %self, align 8, !dbg !313
  %8 = load ptr, ptr %ptradd3, align 8, !dbg !313
  %9 = call i64 @std.core.mem.allocator.BackedArenaAllocator._free_page(ptr %7, ptr %8) #7, !dbg !313
  br label %if.exit, !dbg !313

if.exit:                                          ; preds = %if.then, %checkok
  %10 = load ptr, ptr %self, align 8, !dbg !314
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator, ptr align 8 %10, i32 16, i1 false)
  %11 = load ptr, ptr %self, align 8, !dbg !314
  store ptr %11, ptr %ptr, align 8
  %12 = load ptr, ptr %ptr, align 8, !dbg !315
  %i2nb = icmp eq ptr %12, null, !dbg !315
  br i1 %i2nb, label %if.then4, label %if.exit5, !dbg !315

if.then4:                                         ; preds = %if.exit
  br label %expr_block.exit, !dbg !315

if.exit5:                                         ; preds = %if.exit
  %13 = load ptr, ptr %ptr, align 8, !dbg !317
  %neq = icmp ne ptr %13, null, !dbg !317
  br i1 %neq, label %assert_ok, label %assert_fail, !dbg !317

assert_fail:                                      ; preds = %if.exit5
  store %"char[]" { ptr @.panic_msg.28, i64 75 }, ptr %indirectarg6, align 8
  store %"char[]" { ptr @.file.24, i64 16 }, ptr %indirectarg7, align 8
  store %"char[]" { ptr @.func.27, i64 7 }, ptr %indirectarg8, align 8
  %14 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %14(ptr align 8 %indirectarg6, ptr align 8 %indirectarg7, ptr align 8 %indirectarg8, i32 123) #6, !dbg !317
  unreachable, !dbg !317

assert_ok:                                        ; preds = %if.exit5
  %ptradd9 = getelementptr inbounds i8, ptr %allocator, i64 8, !dbg !317
  %15 = load i64, ptr %ptradd9, align 8, !dbg !317
  %16 = inttoptr i64 %15 to ptr, !dbg !317
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !309
  %17 = icmp eq ptr %16, %type, !dbg !309
  br i1 %17, label %cache_hit, label %cache_miss, !dbg !309

cache_miss:                                       ; preds = %assert_ok
  %ptradd10 = getelementptr inbounds i8, ptr %16, i64 16, !dbg !309
  %18 = load ptr, ptr %ptradd10, align 8, !dbg !309
  %19 = call ptr @.dyn_search(ptr %18, ptr @"$sel.release"), !dbg !309
  store ptr %19, ptr %.inlinecache, align 8, !dbg !309
  store ptr %16, ptr %.cachedtype, align 8, !dbg !309
  br label %20, !dbg !309

cache_hit:                                        ; preds = %assert_ok
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !309
  br label %20, !dbg !309

20:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %19, %cache_miss ], !dbg !309
  %21 = icmp eq ptr %fn_phi, null, !dbg !309
  br i1 %21, label %missing_function, label %match, !dbg !309

missing_function:                                 ; preds = %20
  store %"char[]" { ptr @.panic_msg.29, i64 44 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.file.24, i64 16 }, ptr %indirectarg12, align 8
  store %"char[]" { ptr @.func.27, i64 7 }, ptr %indirectarg13, align 8
  %22 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %22(ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, ptr align 8 %indirectarg13, i32 123) #6, !dbg !317
  unreachable, !dbg !317

match:                                            ; preds = %20
  %23 = load ptr, ptr %allocator, align 8, !dbg !317
  call void %fn_phi(ptr %23, ptr %13, i8 zeroext 0), !dbg !317
  br label %expr_block.exit, !dbg !317

expr_block.exit:                                  ; preds = %match, %if.then4
  ret void, !dbg !317

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.22, i64 25 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.27, i64 7 }, ptr %indirectarg2, align 8
  %24 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %24(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 56) #6, !dbg !311
  unreachable, !dbg !311
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.core.mem.allocator.BackedArenaAllocator.mark(ptr %0) #0 comdat !dbg !318 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !321
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !321
  br i1 %2, label %panic, label %checkok, !dbg !321

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !322, !DIExpression(), !321)
  %3 = load ptr, ptr %self, align 8, !dbg !321
  %ptradd = getelementptr inbounds i8, ptr %3, i64 24, !dbg !321
  %4 = load i64, ptr %ptradd, align 8, !dbg !321
  ret i64 %4, !dbg !321

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.22, i64 25 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.3, i64 4 }, ptr %indirectarg2, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 63) #6, !dbg !321
  unreachable, !dbg !321
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.core.mem.allocator.BackedArenaAllocator.release(ptr %0, ptr %1, i8 zeroext %2) #0 comdat !dbg !323 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %old_pointer = alloca ptr, align 8
  %.anon = alloca i8, align 1
  %old_size = alloca i64, align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr9 = alloca i64, align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg13 = alloca %"any[]", align 8
  %addr = alloca ptr, align 8
  %size = alloca i64, align 8
  %3 = icmp eq ptr %0, null, !dbg !326
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !326
  br i1 %4, label %panic, label %checkok, !dbg !326

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !327, !DIExpression(), !328)
  store ptr %1, ptr %old_pointer, align 8
    #dbg_declare(ptr %old_pointer, !329, !DIExpression(), !328)
  store i8 %2, ptr %.anon, align 1
    #dbg_declare(ptr %.anon, !330, !DIExpression(), !328)
    #dbg_declare(ptr %old_size, !331, !DIExpression(), !332)
  %5 = load ptr, ptr %old_pointer, align 8, !dbg !332
  %ptradd_any = getelementptr i8, ptr %5, i64 -8, !dbg !332
  %checknull = icmp eq ptr %ptradd_any, null, !dbg !332
  %6 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !332
  br i1 %6, label %panic3, label %checkok7, !dbg !332

checkok7:                                         ; preds = %checkok
  %7 = ptrtoint ptr %ptradd_any to i64, !dbg !332
  %8 = urem i64 %7, 8, !dbg !332
  %9 = icmp ne i64 %8, 0, !dbg !332
  %10 = call i1 @llvm.expect.i1(i1 %9, i1 false), !dbg !332
  br i1 %10, label %panic8, label %checkok14, !dbg !332

checkok14:                                        ; preds = %checkok7
  %11 = load i64, ptr %ptradd_any, align 8, !dbg !332
  store i64 %11, ptr %old_size, align 8, !dbg !332
  %12 = load ptr, ptr %old_pointer, align 8, !dbg !333
  %13 = load i64, ptr %old_size, align 8, !dbg !333
  %ptradd_any15 = getelementptr i8, ptr %12, i64 %13, !dbg !333
  %14 = load ptr, ptr %self, align 8, !dbg !333
  %ptradd16 = getelementptr inbounds i8, ptr %14, i64 40, !dbg !333
  %15 = load ptr, ptr %self, align 8, !dbg !333
  %ptradd17 = getelementptr inbounds i8, ptr %15, i64 24, !dbg !333
  %16 = load i64, ptr %ptradd17, align 8, !dbg !333
  %ptradd18 = getelementptr inbounds i8, ptr %ptradd16, i64 %16, !dbg !333
  %eq = icmp eq ptr %ptradd_any15, %ptradd18, !dbg !333
  br i1 %eq, label %if.then, label %if.exit, !dbg !333

if.then:                                          ; preds = %checkok14
  %17 = load ptr, ptr %self, align 8, !dbg !334
  %ptradd19 = getelementptr inbounds i8, ptr %17, i64 24, !dbg !334
  %18 = load i64, ptr %ptradd19, align 8, !dbg !334
  %19 = load i64, ptr %old_size, align 8, !dbg !334
  %sub = sub i64 %18, %19, !dbg !334
  store i64 %sub, ptr %ptradd19, align 8, !dbg !334
  %20 = load ptr, ptr %self, align 8, !dbg !336
  %ptradd20 = getelementptr inbounds i8, ptr %20, i64 40, !dbg !336
  %21 = load ptr, ptr %self, align 8, !dbg !336
  %ptradd21 = getelementptr inbounds i8, ptr %21, i64 24, !dbg !336
  %22 = load i64, ptr %ptradd21, align 8, !dbg !336
  %ptradd22 = getelementptr inbounds i8, ptr %ptradd20, i64 %22, !dbg !336
  store ptr %ptradd22, ptr %addr, align 8
  %23 = load i64, ptr %old_size, align 8
  store i64 %23, ptr %size, align 8
  br label %if.exit, !dbg !337

if.exit:                                          ; preds = %if.then, %checkok14
  ret void, !dbg !337

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.22, i64 25 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.6, i64 7 }, ptr %indirectarg2, align 8
  %24 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %24(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 65) #6, !dbg !328
  unreachable, !dbg !328

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.30, i64 82 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.22, i64 25 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.6, i64 7 }, ptr %indirectarg6, align 8
  %25 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %25(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 67) #6, !dbg !332
  unreachable, !dbg !332

panic8:                                           ; preds = %checkok7
  store i64 8, ptr %taddr, align 8
  %26 = insertvalue %any undef, ptr %taddr, 0
  %27 = insertvalue %any %26, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %8, ptr %taddr9, align 8
  %28 = insertvalue %any undef, ptr %taddr9, 0
  %29 = insertvalue %any %28, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.31, i64 94 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.file.22, i64 25 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.func.6, i64 7 }, ptr %indirectarg12, align 8
  store %any %27, ptr %varargslots, align 16
  %ptradd = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %29, ptr %ptradd, align 16
  %30 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %30, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg13, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, i32 67, ptr align 8 %indirectarg13) #6, !dbg !332
  unreachable, !dbg !332
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.core.mem.allocator.BackedArenaAllocator.reset(ptr %0, i64 %1) #0 comdat !dbg !340 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %mark = alloca i64, align 8
  %last_page = alloca ptr, align 8
  %to_free = alloca ptr, align 8
  %error_var = alloca i64, align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg7 = alloca %"char[]", align 8
  %indirectarg8 = alloca %"char[]", align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg9 = alloca %"any[]", align 8
  %cleaned = alloca i64, align 8
  %taddr = alloca i64, align 8
  %indirectarg17 = alloca %"char[]", align 8
  %indirectarg18 = alloca %"char[]", align 8
  %indirectarg19 = alloca %"char[]", align 8
  %varargslots20 = alloca [1 x %any], align 16
  %indirectarg22 = alloca %"any[]", align 8
  %addr = alloca ptr, align 8
  %size = alloca i64, align 8
  %2 = icmp eq ptr %0, null, !dbg !343
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !343
  br i1 %3, label %panic, label %checkok, !dbg !343

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !344, !DIExpression(), !345)
  store i64 %1, ptr %mark, align 8
    #dbg_declare(ptr %mark, !346, !DIExpression(), !345)
    #dbg_declare(ptr %last_page, !347, !DIExpression(), !348)
  %4 = load ptr, ptr %self, align 8, !dbg !348
  %ptradd = getelementptr inbounds i8, ptr %4, i64 16, !dbg !348
  %5 = load ptr, ptr %ptradd, align 8, !dbg !348
  store ptr %5, ptr %last_page, align 8, !dbg !348
  br label %loop.cond, !dbg !349

loop.cond:                                        ; preds = %noerr_block, %checkok
  %6 = load ptr, ptr %last_page, align 8, !dbg !350
  %i2b = icmp ne ptr %6, null, !dbg !350
  br i1 %i2b, label %and.rhs, label %and.phi, !dbg !350

and.rhs:                                          ; preds = %loop.cond
  %7 = load ptr, ptr %last_page, align 8, !dbg !350
  %ptradd3 = getelementptr inbounds i8, ptr %7, i64 16, !dbg !350
  %8 = load i64, ptr %ptradd3, align 8, !dbg !350
  %9 = load i64, ptr %mark, align 8, !dbg !350
  %gt = icmp ugt i64 %8, %9, !dbg !350
  br label %and.phi, !dbg !350

and.phi:                                          ; preds = %and.rhs, %loop.cond
  %val = phi i1 [ false, %loop.cond ], [ %gt, %and.rhs ], !dbg !350
  br i1 %val, label %loop.body, label %loop.exit, !dbg !350

loop.body:                                        ; preds = %and.phi
  %10 = load ptr, ptr %last_page, align 8, !dbg !352
  %ptradd4 = getelementptr inbounds i8, ptr %10, i64 16, !dbg !352
  %11 = load ptr, ptr %self, align 8, !dbg !352
  %ptradd5 = getelementptr inbounds i8, ptr %11, i64 24, !dbg !352
  %12 = load i64, ptr %ptradd4, align 8, !dbg !352
  store i64 %12, ptr %ptradd5, align 8, !dbg !352
    #dbg_declare(ptr %to_free, !354, !DIExpression(), !355)
  %13 = load ptr, ptr %last_page, align 8, !dbg !355
  store ptr %13, ptr %to_free, align 8, !dbg !355
  %14 = load ptr, ptr %last_page, align 8, !dbg !356
  %15 = load ptr, ptr %14, align 8, !dbg !356
  store ptr %15, ptr %last_page, align 8, !dbg !356
  %16 = load ptr, ptr %self, align 8, !dbg !357
  %17 = load ptr, ptr %to_free, align 8, !dbg !357
  %18 = call i64 @std.core.mem.allocator.BackedArenaAllocator._free_page(ptr %16, ptr %17) #7, !dbg !357
  %not_err = icmp eq i64 %18, 0, !dbg !357
  %19 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !357
  br i1 %19, label %after_check, label %assign_optional, !dbg !357

assign_optional:                                  ; preds = %loop.body
  store i64 %18, ptr %error_var, align 8, !dbg !357
  br label %panic_block, !dbg !357

after_check:                                      ; preds = %loop.body
  br label %noerr_block, !dbg !357

panic_block:                                      ; preds = %assign_optional
  %20 = insertvalue %any undef, ptr %error_var, 0, !dbg !357
  %21 = insertvalue %any %20, i64 ptrtoint (ptr @"$ct.fault" to i64), 1, !dbg !357
  store %"char[]" { ptr @.panic_msg.32, i64 36 }, ptr %indirectarg6, align 8
  store %"char[]" { ptr @.file.22, i64 25 }, ptr %indirectarg7, align 8
  store %"char[]" { ptr @.func.4, i64 5 }, ptr %indirectarg8, align 8
  store %any %21, ptr %varargslots, align 16
  %22 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %22, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg9, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg6, ptr align 8 %indirectarg7, ptr align 8 %indirectarg8, i32 82, ptr align 8 %indirectarg9) #6, !dbg !357
  unreachable, !dbg !357

noerr_block:                                      ; preds = %after_check
  br label %loop.cond, !dbg !357

loop.exit:                                        ; preds = %and.phi
  %23 = load ptr, ptr %self, align 8, !dbg !358
  %ptradd10 = getelementptr inbounds i8, ptr %23, i64 16, !dbg !358
  %24 = load ptr, ptr %last_page, align 8, !dbg !358
  store ptr %24, ptr %ptradd10, align 8, !dbg !358
  %25 = load ptr, ptr %last_page, align 8, !dbg !359
  %i2nb = icmp eq ptr %25, null, !dbg !359
  br i1 %i2nb, label %if.then, label %if.exit29, !dbg !359

if.then:                                          ; preds = %loop.exit
    #dbg_declare(ptr %cleaned, !360, !DIExpression(), !362)
  %26 = load ptr, ptr %self, align 8, !dbg !362
  %ptradd11 = getelementptr inbounds i8, ptr %26, i64 24, !dbg !362
  %27 = load i64, ptr %ptradd11, align 8, !dbg !362
  %28 = load i64, ptr %mark, align 8, !dbg !362
  %sub = sub i64 %27, %28, !dbg !362
  store i64 %sub, ptr %cleaned, align 8, !dbg !362
  %29 = load i64, ptr %cleaned, align 8, !dbg !363
  %lt = icmp ult i64 0, %29, !dbg !363
  br i1 %lt, label %if.then12, label %if.exit, !dbg !363

if.then12:                                        ; preds = %if.then
  %30 = load ptr, ptr %self, align 8, !dbg !364
  %ptradd13 = getelementptr inbounds i8, ptr %30, i64 40, !dbg !364
  %31 = load i64, ptr %mark, align 8, !dbg !364
  %32 = load i64, ptr %cleaned, align 8, !dbg !364
  %add = add i64 %31, %32, !dbg !364
  %gt14 = icmp ugt i64 %31, %add, !dbg !364
  %sub15 = sub i64 %add, %31, !dbg !364
  %33 = call i1 @llvm.expect.i1(i1 %gt14, i1 false), !dbg !364
  br i1 %33, label %panic16, label %checkok23, !dbg !364

checkok23:                                        ; preds = %if.then12
  br label %cond, !dbg !364

cond:                                             ; preds = %assign, %checkok23
  %34 = phi i64 [ %31, %checkok23 ], [ %add26, %assign ], !dbg !364
  %lt24 = icmp ult i64 %34, %add, !dbg !364
  br i1 %lt24, label %assign, label %exit, !dbg !364

assign:                                           ; preds = %cond
  %ptradd25 = getelementptr inbounds i8, ptr %ptradd13, i64 %34, !dbg !364
  store i8 -86, ptr %ptradd25, align 1, !dbg !364
  %add26 = add i64 %34, 1, !dbg !364
  br label %cond, !dbg !364

exit:                                             ; preds = %cond
  %35 = load ptr, ptr %self, align 8, !dbg !366
  %ptradd27 = getelementptr inbounds i8, ptr %35, i64 40, !dbg !366
  %36 = load i64, ptr %mark, align 8, !dbg !366
  %ptradd28 = getelementptr inbounds i8, ptr %ptradd27, i64 %36, !dbg !366
  store ptr %ptradd28, ptr %addr, align 8
  %37 = load i64, ptr %cleaned, align 8
  store i64 %37, ptr %size, align 8
  br label %if.exit, !dbg !367

if.exit:                                          ; preds = %exit, %if.then
  br label %if.exit29, !dbg !367

if.exit29:                                        ; preds = %if.exit, %loop.exit
  %38 = load ptr, ptr %self, align 8, !dbg !369
  %ptradd30 = getelementptr inbounds i8, ptr %38, i64 24, !dbg !369
  %39 = load i64, ptr %mark, align 8, !dbg !369
  store i64 %39, ptr %ptradd30, align 8, !dbg !369
  ret void, !dbg !369

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.22, i64 25 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.4, i64 5 }, ptr %indirectarg2, align 8
  %40 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %40(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 74) #6, !dbg !345
  unreachable, !dbg !345

panic16:                                          ; preds = %if.then12
  store i64 %sub15, ptr %taddr, align 8
  %41 = insertvalue %any undef, ptr %taddr, 0
  %42 = insertvalue %any %41, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.33, i64 43 }, ptr %indirectarg17, align 8
  store %"char[]" { ptr @.file.22, i64 25 }, ptr %indirectarg18, align 8
  store %"char[]" { ptr @.func.4, i64 5 }, ptr %indirectarg19, align 8
  store %any %42, ptr %varargslots20, align 16
  %43 = insertvalue %"any[]" undef, ptr %varargslots20, 0
  %"$$temp21" = insertvalue %"any[]" %43, i64 1, 1
  store %"any[]" %"$$temp21", ptr %indirectarg22, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg17, ptr align 8 %indirectarg18, ptr align 8 %indirectarg19, i32 92, ptr align 8 %indirectarg22) #6, !dbg !364
  unreachable, !dbg !364
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @std.core.mem.allocator.BackedArenaAllocator._free_page(ptr %0, ptr %1) #0 !dbg !370 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %page = alloca ptr, align 8
  %mem = alloca ptr, align 8
  %reterr = alloca i64, align 8
  %self3 = alloca ptr, align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %indirectarg16 = alloca %"char[]", align 8
  %indirectarg17 = alloca %"char[]", align 8
  %indirectarg18 = alloca %"char[]", align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !373
  %2 = icmp eq ptr %0, null, !dbg !373
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !373
  br i1 %3, label %panic, label %checkok, !dbg !373

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !374, !DIExpression(), !375)
  store ptr %1, ptr %page, align 8
    #dbg_declare(ptr %page, !376, !DIExpression(), !375)
    #dbg_declare(ptr %mem, !377, !DIExpression(), !378)
  %4 = load ptr, ptr %page, align 8, !dbg !378
  %ptradd = getelementptr inbounds i8, ptr %4, i64 8, !dbg !378
  %5 = load ptr, ptr %ptradd, align 8, !dbg !378
  store ptr %5, ptr %mem, align 8, !dbg !378
  %6 = load ptr, ptr %self, align 8, !dbg !379
  %7 = load ptr, ptr %mem, align 8, !dbg !379
  %8 = load ptr, ptr %page, align 8
  store ptr %8, ptr %self3, align 8
  %9 = load ptr, ptr %self3, align 8, !dbg !380
  %neq = icmp ne ptr %9, null, !dbg !380
  br i1 %neq, label %assert_ok, label %assert_fail, !dbg !380

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.35, i64 32 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.22, i64 25 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.34, i64 10 }, ptr %indirectarg6, align 8
  %10 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %10(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 41) #6, !dbg !380
  unreachable, !dbg !380

assert_ok:                                        ; preds = %checkok
  %11 = load ptr, ptr %self3, align 8, !dbg !383
  %ptradd7 = getelementptr inbounds i8, ptr %11, i64 24, !dbg !383
  %12 = load i64, ptr %ptradd7, align 8, !dbg !383
  %and = and i64 %12, -9223372036854775808, !dbg !383
  %eq = icmp eq i64 %and, -9223372036854775808, !dbg !383
  %neq8 = icmp ne ptr %7, null, !dbg !379
  br i1 %neq8, label %assert_ok13, label %assert_fail9, !dbg !379

assert_fail9:                                     ; preds = %assert_ok
  store %"char[]" { ptr @.panic_msg.28, i64 75 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.file.22, i64 25 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.func.34, i64 10 }, ptr %indirectarg12, align 8
  %13 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %13(ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, i32 104) #6, !dbg !379
  unreachable, !dbg !379

assert_ok13:                                      ; preds = %assert_ok
  %ptradd14 = getelementptr inbounds i8, ptr %6, i64 8, !dbg !379
  %14 = load i64, ptr %ptradd14, align 8, !dbg !379
  %15 = inttoptr i64 %14 to ptr, !dbg !379
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !373
  %16 = icmp eq ptr %15, %type, !dbg !373
  br i1 %16, label %cache_hit, label %cache_miss, !dbg !373

cache_miss:                                       ; preds = %assert_ok13
  %ptradd15 = getelementptr inbounds i8, ptr %15, i64 16, !dbg !373
  %17 = load ptr, ptr %ptradd15, align 8, !dbg !373
  %18 = call ptr @.dyn_search(ptr %17, ptr @"$sel.release"), !dbg !373
  store ptr %18, ptr %.inlinecache, align 8, !dbg !373
  store ptr %15, ptr %.cachedtype, align 8, !dbg !373
  br label %19, !dbg !373

cache_hit:                                        ; preds = %assert_ok13
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !373
  br label %19, !dbg !373

19:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %18, %cache_miss ], !dbg !373
  %20 = icmp eq ptr %fn_phi, null, !dbg !373
  br i1 %20, label %missing_function, label %match, !dbg !373

missing_function:                                 ; preds = %19
  store %"char[]" { ptr @.panic_msg.29, i64 44 }, ptr %indirectarg16, align 8
  store %"char[]" { ptr @.file.22, i64 25 }, ptr %indirectarg17, align 8
  store %"char[]" { ptr @.func.34, i64 10 }, ptr %indirectarg18, align 8
  %21 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %21(ptr align 8 %indirectarg16, ptr align 8 %indirectarg17, ptr align 8 %indirectarg18, i32 104) #6, !dbg !379
  unreachable, !dbg !379

match:                                            ; preds = %19
  %22 = load ptr, ptr %6, align 8, !dbg !379
  %23 = zext i1 %eq to i8, !dbg !379
  call void %fn_phi(ptr %22, ptr %7, i8 zeroext %23), !dbg !379
  ret i64 0, !dbg !379

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.22, i64 25 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.34, i64 10 }, ptr %indirectarg2, align 8
  %24 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %24(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 101) #6, !dbg !375
  unreachable, !dbg !375
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @std.core.mem.allocator.BackedArenaAllocator._realloc_page(ptr %0, ptr %1, ptr %2, i64 %3, i64 %4) #0 !dbg !384 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %page = alloca ptr, align 8
  %size = alloca i64, align 8
  %alignment = alloca i64, align 8
  %real_pointer = alloca ptr, align 8
  %pointer_to_prev = alloca ptr, align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg7 = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr10 = alloca i64, align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %indirectarg13 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg15 = alloca %"any[]", align 8
  %indirectarg19 = alloca %"char[]", align 8
  %indirectarg20 = alloca %"char[]", align 8
  %indirectarg21 = alloca %"char[]", align 8
  %taddr24 = alloca i64, align 8
  %taddr25 = alloca i64, align 8
  %indirectarg26 = alloca %"char[]", align 8
  %indirectarg27 = alloca %"char[]", align 8
  %indirectarg28 = alloca %"char[]", align 8
  %varargslots29 = alloca [2 x %any], align 16
  %indirectarg32 = alloca %"any[]", align 8
  %indirectarg36 = alloca %"char[]", align 8
  %indirectarg37 = alloca %"char[]", align 8
  %indirectarg38 = alloca %"char[]", align 8
  %taddr41 = alloca i64, align 8
  %taddr42 = alloca i64, align 8
  %indirectarg43 = alloca %"char[]", align 8
  %indirectarg44 = alloca %"char[]", align 8
  %indirectarg45 = alloca %"char[]", align 8
  %varargslots46 = alloca [2 x %any], align 16
  %indirectarg49 = alloca %"any[]", align 8
  %page_size = alloca i64, align 8
  %self51 = alloca ptr, align 8
  %indirectarg53 = alloca %"char[]", align 8
  %indirectarg54 = alloca %"char[]", align 8
  %indirectarg55 = alloca %"char[]", align 8
  %data = alloca ptr, align 8
  %error_var = alloca i64, align 8
  %indirectarg58 = alloca %"char[]", align 8
  %indirectarg59 = alloca %"char[]", align 8
  %indirectarg60 = alloca %"char[]", align 8
  %x = alloca i64, align 8
  %indirectarg66 = alloca %"char[]", align 8
  %indirectarg67 = alloca %"char[]", align 8
  %indirectarg68 = alloca %"char[]", align 8
  %indirectarg71 = alloca %"char[]", align 8
  %indirectarg72 = alloca %"char[]", align 8
  %indirectarg73 = alloca %"char[]", align 8
  %retparam = alloca ptr, align 8
  %dst = alloca ptr, align 8
  %src = alloca ptr, align 8
  %len = alloca i64, align 8
  %indirectarg78 = alloca %"char[]", align 8
  %indirectarg79 = alloca %"char[]", align 8
  %indirectarg80 = alloca %"char[]", align 8
  %indirectarg88 = alloca %"char[]", align 8
  %indirectarg89 = alloca %"char[]", align 8
  %indirectarg90 = alloca %"char[]", align 8
  %indirectarg103 = alloca %"char[]", align 8
  %indirectarg104 = alloca %"char[]", align 8
  %indirectarg105 = alloca %"char[]", align 8
  %self107 = alloca ptr, align 8
  %indirectarg110 = alloca %"char[]", align 8
  %indirectarg111 = alloca %"char[]", align 8
  %indirectarg112 = alloca %"char[]", align 8
  %indirectarg119 = alloca %"char[]", align 8
  %indirectarg120 = alloca %"char[]", align 8
  %indirectarg121 = alloca %"char[]", align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %indirectarg125 = alloca %"char[]", align 8
  %indirectarg126 = alloca %"char[]", align 8
  %indirectarg127 = alloca %"char[]", align 8
  %reterr = alloca i64, align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !387
  %5 = icmp eq ptr %1, null, !dbg !387
  %6 = call i1 @llvm.expect.i1(i1 %5, i1 false), !dbg !387
  br i1 %6, label %panic, label %checkok, !dbg !387

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !388, !DIExpression(), !389)
  store ptr %2, ptr %page, align 8
    #dbg_declare(ptr %page, !390, !DIExpression(), !389)
  store i64 %3, ptr %size, align 8
    #dbg_declare(ptr %size, !391, !DIExpression(), !389)
  store i64 %4, ptr %alignment, align 8
    #dbg_declare(ptr %alignment, !392, !DIExpression(), !389)
    #dbg_declare(ptr %real_pointer, !393, !DIExpression(), !394)
  %7 = load ptr, ptr %page, align 8, !dbg !394
  %ptradd = getelementptr inbounds i8, ptr %7, i64 8, !dbg !394
  %8 = load ptr, ptr %ptradd, align 8, !dbg !394
  store ptr %8, ptr %real_pointer, align 8, !dbg !394
    #dbg_declare(ptr %pointer_to_prev, !395, !DIExpression(), !397)
  %9 = load ptr, ptr %self, align 8, !dbg !397
  %ptradd3 = getelementptr inbounds i8, ptr %9, i64 16, !dbg !397
  store ptr %ptradd3, ptr %pointer_to_prev, align 8, !dbg !397
  br label %loop.cond, !dbg !398

loop.cond:                                        ; preds = %checkok33, %checkok
  %10 = load ptr, ptr %pointer_to_prev, align 8, !dbg !399
  %checknull = icmp eq ptr %10, null, !dbg !399
  %11 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !399
  br i1 %11, label %panic4, label %checkok8, !dbg !399

checkok8:                                         ; preds = %loop.cond
  %12 = ptrtoint ptr %10 to i64, !dbg !399
  %13 = urem i64 %12, 8, !dbg !399
  %14 = icmp ne i64 %13, 0, !dbg !399
  %15 = call i1 @llvm.expect.i1(i1 %14, i1 false), !dbg !399
  br i1 %15, label %panic9, label %checkok16, !dbg !399

checkok16:                                        ; preds = %checkok8
  %16 = load ptr, ptr %10, align 8, !dbg !399
  %17 = load ptr, ptr %page, align 8, !dbg !399
  %neq = icmp ne ptr %16, %17, !dbg !399
  br i1 %neq, label %loop.body, label %loop.exit, !dbg !399

loop.body:                                        ; preds = %checkok16
  %18 = load ptr, ptr %pointer_to_prev, align 8, !dbg !401
  %checknull17 = icmp eq ptr %18, null, !dbg !401
  %19 = call i1 @llvm.expect.i1(i1 %checknull17, i1 false), !dbg !401
  br i1 %19, label %panic18, label %checkok22, !dbg !401

checkok22:                                        ; preds = %loop.body
  %20 = ptrtoint ptr %18 to i64, !dbg !401
  %21 = urem i64 %20, 8, !dbg !401
  %22 = icmp ne i64 %21, 0, !dbg !401
  %23 = call i1 @llvm.expect.i1(i1 %22, i1 false), !dbg !401
  br i1 %23, label %panic23, label %checkok33, !dbg !401

checkok33:                                        ; preds = %checkok22
  %24 = load ptr, ptr %18, align 8, !dbg !401
  store ptr %24, ptr %pointer_to_prev, align 8, !dbg !401
  br label %loop.cond, !dbg !401

loop.exit:                                        ; preds = %checkok16
  %25 = load ptr, ptr %page, align 8, !dbg !403
  %26 = load ptr, ptr %pointer_to_prev, align 8, !dbg !403
  %checknull34 = icmp eq ptr %26, null, !dbg !403
  %27 = call i1 @llvm.expect.i1(i1 %checknull34, i1 false), !dbg !403
  br i1 %27, label %panic35, label %checkok39, !dbg !403

checkok39:                                        ; preds = %loop.exit
  %28 = ptrtoint ptr %26 to i64, !dbg !403
  %29 = urem i64 %28, 8, !dbg !403
  %30 = icmp ne i64 %29, 0, !dbg !403
  %31 = call i1 @llvm.expect.i1(i1 %30, i1 false), !dbg !403
  br i1 %31, label %panic40, label %checkok50, !dbg !403

checkok50:                                        ; preds = %checkok39
  %32 = load ptr, ptr %25, align 8, !dbg !403
  store ptr %32, ptr %26, align 8, !dbg !403
    #dbg_declare(ptr %page_size, !404, !DIExpression(), !405)
  %33 = load ptr, ptr %page, align 8
  store ptr %33, ptr %self51, align 8
  %34 = load ptr, ptr %self51, align 8, !dbg !406
  %neq52 = icmp ne ptr %34, null, !dbg !406
  br i1 %neq52, label %assert_ok, label %assert_fail, !dbg !406

assert_fail:                                      ; preds = %checkok50
  store %"char[]" { ptr @.panic_msg.35, i64 32 }, ptr %indirectarg53, align 8
  store %"char[]" { ptr @.file.22, i64 25 }, ptr %indirectarg54, align 8
  store %"char[]" { ptr @.func.36, i64 13 }, ptr %indirectarg55, align 8
  %35 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %35(ptr align 8 %indirectarg53, ptr align 8 %indirectarg54, ptr align 8 %indirectarg55, i32 40) #6, !dbg !406
  unreachable, !dbg !406

assert_ok:                                        ; preds = %checkok50
  %36 = load ptr, ptr %self51, align 8, !dbg !409
  %ptradd56 = getelementptr inbounds i8, ptr %36, i64 24, !dbg !409
  %37 = load i64, ptr %ptradd56, align 8, !dbg !409
  %and = and i64 %37, 9223372036854775807, !dbg !409
  store i64 %and, ptr %page_size, align 8, !dbg !409
    #dbg_declare(ptr %data, !410, !DIExpression(), !411)
  %38 = load ptr, ptr %self, align 8, !dbg !411
  %39 = load i64, ptr %size, align 8, !dbg !411
  %40 = load i64, ptr %alignment, align 8, !dbg !411
  %lt = icmp ult i64 0, %39, !dbg !411
  br i1 %lt, label %assert_ok61, label %assert_fail57, !dbg !411

assert_fail57:                                    ; preds = %assert_ok
  store %"char[]" { ptr @.panic_msg.13, i64 29 }, ptr %indirectarg58, align 8
  store %"char[]" { ptr @.file.22, i64 25 }, ptr %indirectarg59, align 8
  store %"char[]" { ptr @.func.36, i64 13 }, ptr %indirectarg60, align 8
  %41 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %41(ptr align 8 %indirectarg58, ptr align 8 %indirectarg59, ptr align 8 %indirectarg60, i32 122) #6, !dbg !411
  unreachable, !dbg !411

assert_ok61:                                      ; preds = %assert_ok
  %i2nb = icmp eq i64 %40, 0, !dbg !412
  br i1 %i2nb, label %or.phi, label %or.rhs, !dbg !412

or.rhs:                                           ; preds = %assert_ok61
  store i64 %40, ptr %x, align 8
  %42 = load i64, ptr %x, align 8, !dbg !413
  %neq62 = icmp ne i64 0, %42, !dbg !413
  br i1 %neq62, label %and.rhs, label %and.phi, !dbg !413

and.rhs:                                          ; preds = %or.rhs
  %43 = load i64, ptr %x, align 8, !dbg !413
  %44 = load i64, ptr %x, align 8, !dbg !413
  %sub = sub i64 %44, 1, !dbg !413
  %and63 = and i64 %43, %sub, !dbg !413
  %eq = icmp eq i64 %and63, 0, !dbg !413
  br label %and.phi, !dbg !413

and.phi:                                          ; preds = %and.rhs, %or.rhs
  %val = phi i1 [ false, %or.rhs ], [ %eq, %and.rhs ], !dbg !413
  br label %or.phi, !dbg !413

or.phi:                                           ; preds = %and.phi, %assert_ok61
  %val64 = phi i1 [ true, %assert_ok61 ], [ %val, %and.phi ], !dbg !413
  br i1 %val64, label %assert_ok69, label %assert_fail65, !dbg !413

assert_fail65:                                    ; preds = %or.phi
  store %"char[]" { ptr @.panic_msg.11, i64 65 }, ptr %indirectarg66, align 8
  store %"char[]" { ptr @.file.22, i64 25 }, ptr %indirectarg67, align 8
  store %"char[]" { ptr @.func.36, i64 13 }, ptr %indirectarg68, align 8
  %45 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %45(ptr align 8 %indirectarg66, ptr align 8 %indirectarg67, ptr align 8 %indirectarg68, i32 122) #6, !dbg !411
  unreachable, !dbg !411

assert_ok69:                                      ; preds = %or.phi
  %le = icmp ule i64 %40, 268435456, !dbg !411
  br i1 %le, label %assert_ok74, label %assert_fail70, !dbg !411

assert_fail70:                                    ; preds = %assert_ok69
  store %"char[]" { ptr @.panic_msg.12, i64 80 }, ptr %indirectarg71, align 8
  store %"char[]" { ptr @.file.22, i64 25 }, ptr %indirectarg72, align 8
  store %"char[]" { ptr @.func.36, i64 13 }, ptr %indirectarg73, align 8
  %46 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %46(ptr align 8 %indirectarg71, ptr align 8 %indirectarg72, ptr align 8 %indirectarg73, i32 122) #6, !dbg !411
  unreachable, !dbg !411

assert_ok74:                                      ; preds = %assert_ok69
  %47 = call i64 @std.core.mem.allocator.BackedArenaAllocator.acquire(ptr %retparam, ptr %38, i64 %39, i32 0, i64 %40), !dbg !411
  %not_err = icmp eq i64 %47, 0, !dbg !411
  %48 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !411
  br i1 %48, label %after_check, label %assign_optional, !dbg !411

assign_optional:                                  ; preds = %assert_ok74
  store i64 %47, ptr %error_var, align 8, !dbg !411
  br label %guard_block, !dbg !411

after_check:                                      ; preds = %assert_ok74
  br label %noerr_block, !dbg !411

guard_block:                                      ; preds = %assign_optional
  %49 = load i64, ptr %error_var, align 8, !dbg !411
  ret i64 %49, !dbg !411

noerr_block:                                      ; preds = %after_check
  %50 = load ptr, ptr %retparam, align 8, !dbg !411
  store ptr %50, ptr %data, align 8, !dbg !411
  %51 = load ptr, ptr %data, align 8
  store ptr %51, ptr %dst, align 8
  %52 = load ptr, ptr %page, align 8, !dbg !415
  %ptradd75 = getelementptr inbounds i8, ptr %52, i64 40, !dbg !415
  store ptr %ptradd75, ptr %src, align 8
  %53 = load i64, ptr %page_size, align 8
  store i64 %53, ptr %len, align 8
  %54 = load ptr, ptr %dst, align 8, !dbg !416
  %neq76 = icmp ne ptr %54, null, !dbg !416
  br i1 %neq76, label %assert_ok81, label %assert_fail77, !dbg !416

assert_fail77:                                    ; preds = %noerr_block
  store %"char[]" { ptr @.panic_msg.18, i64 37 }, ptr %indirectarg78, align 8
  store %"char[]" { ptr @.file.15, i64 6 }, ptr %indirectarg79, align 8
  store %"char[]" { ptr @.func.36, i64 13 }, ptr %indirectarg80, align 8
  %55 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %55(ptr align 8 %indirectarg78, ptr align 8 %indirectarg79, ptr align 8 %indirectarg80, i32 357) #6, !dbg !416
  unreachable, !dbg !416

assert_ok81:                                      ; preds = %noerr_block
  %56 = load ptr, ptr %src, align 8, !dbg !419
  %neq82 = icmp ne ptr %56, null, !dbg !419
  br i1 %neq82, label %or.phi85, label %or.rhs83, !dbg !419

or.rhs83:                                         ; preds = %assert_ok81
  %57 = load i64, ptr %len, align 8, !dbg !419
  %eq84 = icmp eq i64 0, %57, !dbg !419
  br label %or.phi85, !dbg !419

or.phi85:                                         ; preds = %or.rhs83, %assert_ok81
  %val86 = phi i1 [ true, %assert_ok81 ], [ %eq84, %or.rhs83 ], !dbg !419
  br i1 %val86, label %assert_ok91, label %assert_fail87, !dbg !419

assert_fail87:                                    ; preds = %or.phi85
  store %"char[]" { ptr @.panic_msg.19, i64 94 }, ptr %indirectarg88, align 8
  store %"char[]" { ptr @.file.22, i64 25 }, ptr %indirectarg89, align 8
  store %"char[]" { ptr @.func.36, i64 13 }, ptr %indirectarg90, align 8
  %58 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %58(ptr align 8 %indirectarg88, ptr align 8 %indirectarg89, ptr align 8 %indirectarg90, i32 123) #6, !dbg !420
  unreachable, !dbg !420

assert_ok91:                                      ; preds = %or.phi85
  %59 = load i64, ptr %len, align 8, !dbg !421
  %eq92 = icmp eq i64 0, %59, !dbg !421
  br i1 %eq92, label %or.phi95, label %or.rhs93, !dbg !421

or.rhs93:                                         ; preds = %assert_ok91
  %60 = load ptr, ptr %dst, align 8, !dbg !421
  %61 = load i64, ptr %len, align 8, !dbg !421
  %ptradd_any = getelementptr i8, ptr %60, i64 %61, !dbg !421
  %62 = load ptr, ptr %src, align 8, !dbg !421
  %le94 = icmp ule ptr %ptradd_any, %62, !dbg !421
  br label %or.phi95, !dbg !421

or.phi95:                                         ; preds = %or.rhs93, %assert_ok91
  %val96 = phi i1 [ true, %assert_ok91 ], [ %le94, %or.rhs93 ], !dbg !421
  br i1 %val96, label %or.phi100, label %or.rhs97, !dbg !421

or.rhs97:                                         ; preds = %or.phi95
  %63 = load ptr, ptr %src, align 8, !dbg !421
  %64 = load i64, ptr %len, align 8, !dbg !421
  %ptradd_any98 = getelementptr i8, ptr %63, i64 %64, !dbg !421
  %65 = load ptr, ptr %dst, align 8, !dbg !421
  %le99 = icmp ule ptr %ptradd_any98, %65, !dbg !421
  br label %or.phi100, !dbg !421

or.phi100:                                        ; preds = %or.rhs97, %or.phi95
  %val101 = phi i1 [ true, %or.phi95 ], [ %le99, %or.rhs97 ], !dbg !421
  br i1 %val101, label %assert_ok106, label %assert_fail102, !dbg !421

assert_fail102:                                   ; preds = %or.phi100
  store %"char[]" { ptr @.panic_msg.20, i64 95 }, ptr %indirectarg103, align 8
  store %"char[]" { ptr @.file.22, i64 25 }, ptr %indirectarg104, align 8
  store %"char[]" { ptr @.func.36, i64 13 }, ptr %indirectarg105, align 8
  %66 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %66(ptr align 8 %indirectarg103, ptr align 8 %indirectarg104, ptr align 8 %indirectarg105, i32 123) #6, !dbg !420
  unreachable, !dbg !420

assert_ok106:                                     ; preds = %or.phi100
  %67 = load ptr, ptr %dst, align 8, !dbg !422
  %68 = load ptr, ptr %src, align 8, !dbg !422
  %69 = load i64, ptr %len, align 8, !dbg !422
  call void @llvm.memcpy.p0.p0.i64(ptr align 16 %67, ptr align 16 %68, i64 %69, i1 false), !dbg !422
  %70 = load ptr, ptr %self, align 8, !dbg !423
  %71 = load ptr, ptr %real_pointer, align 8, !dbg !423
  %72 = load ptr, ptr %page, align 8
  store ptr %72, ptr %self107, align 8
  %73 = load ptr, ptr %self107, align 8, !dbg !424
  %neq108 = icmp ne ptr %73, null, !dbg !424
  br i1 %neq108, label %assert_ok113, label %assert_fail109, !dbg !424

assert_fail109:                                   ; preds = %assert_ok106
  store %"char[]" { ptr @.panic_msg.35, i64 32 }, ptr %indirectarg110, align 8
  store %"char[]" { ptr @.file.22, i64 25 }, ptr %indirectarg111, align 8
  store %"char[]" { ptr @.func.36, i64 13 }, ptr %indirectarg112, align 8
  %74 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %74(ptr align 8 %indirectarg110, ptr align 8 %indirectarg111, ptr align 8 %indirectarg112, i32 41) #6, !dbg !424
  unreachable, !dbg !424

assert_ok113:                                     ; preds = %assert_ok106
  %75 = load ptr, ptr %self107, align 8, !dbg !427
  %ptradd114 = getelementptr inbounds i8, ptr %75, i64 24, !dbg !427
  %76 = load i64, ptr %ptradd114, align 8, !dbg !427
  %and115 = and i64 %76, -9223372036854775808, !dbg !427
  %eq116 = icmp eq i64 %and115, -9223372036854775808, !dbg !427
  %neq117 = icmp ne ptr %71, null, !dbg !423
  br i1 %neq117, label %assert_ok122, label %assert_fail118, !dbg !423

assert_fail118:                                   ; preds = %assert_ok113
  store %"char[]" { ptr @.panic_msg.28, i64 75 }, ptr %indirectarg119, align 8
  store %"char[]" { ptr @.file.22, i64 25 }, ptr %indirectarg120, align 8
  store %"char[]" { ptr @.func.36, i64 13 }, ptr %indirectarg121, align 8
  %77 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %77(ptr align 8 %indirectarg119, ptr align 8 %indirectarg120, ptr align 8 %indirectarg121, i32 124) #6, !dbg !423
  unreachable, !dbg !423

assert_ok122:                                     ; preds = %assert_ok113
  %ptradd123 = getelementptr inbounds i8, ptr %70, i64 8, !dbg !423
  %78 = load i64, ptr %ptradd123, align 8, !dbg !423
  %79 = inttoptr i64 %78 to ptr, !dbg !423
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !387
  %80 = icmp eq ptr %79, %type, !dbg !387
  br i1 %80, label %cache_hit, label %cache_miss, !dbg !387

cache_miss:                                       ; preds = %assert_ok122
  %ptradd124 = getelementptr inbounds i8, ptr %79, i64 16, !dbg !387
  %81 = load ptr, ptr %ptradd124, align 8, !dbg !387
  %82 = call ptr @.dyn_search(ptr %81, ptr @"$sel.release"), !dbg !387
  store ptr %82, ptr %.inlinecache, align 8, !dbg !387
  store ptr %79, ptr %.cachedtype, align 8, !dbg !387
  br label %83, !dbg !387

cache_hit:                                        ; preds = %assert_ok122
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !387
  br label %83, !dbg !387

83:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %82, %cache_miss ], !dbg !387
  %84 = icmp eq ptr %fn_phi, null, !dbg !387
  br i1 %84, label %missing_function, label %match, !dbg !387

missing_function:                                 ; preds = %83
  store %"char[]" { ptr @.panic_msg.29, i64 44 }, ptr %indirectarg125, align 8
  store %"char[]" { ptr @.file.22, i64 25 }, ptr %indirectarg126, align 8
  store %"char[]" { ptr @.func.36, i64 13 }, ptr %indirectarg127, align 8
  %85 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %85(ptr align 8 %indirectarg125, ptr align 8 %indirectarg126, ptr align 8 %indirectarg127, i32 124) #6, !dbg !423
  unreachable, !dbg !423

match:                                            ; preds = %83
  %86 = load ptr, ptr %70, align 8, !dbg !423
  %87 = zext i1 %eq116 to i8, !dbg !423
  call void %fn_phi(ptr %86, ptr %71, i8 zeroext %87), !dbg !423
  %88 = load ptr, ptr %data, align 8, !dbg !428
  store ptr %88, ptr %0, align 8, !dbg !428
  ret i64 0, !dbg !428

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.22, i64 25 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.36, i64 13 }, ptr %indirectarg2, align 8
  %89 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %89(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 107) #6, !dbg !389
  unreachable, !dbg !389

panic4:                                           ; preds = %loop.cond
  store %"char[]" { ptr @.panic_msg.37, i64 56 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.file.22, i64 25 }, ptr %indirectarg6, align 8
  store %"char[]" { ptr @.func.36, i64 13 }, ptr %indirectarg7, align 8
  %90 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %90(ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, ptr align 8 %indirectarg7, i32 115) #6, !dbg !399
  unreachable, !dbg !399

panic9:                                           ; preds = %checkok8
  store i64 8, ptr %taddr, align 8
  %91 = insertvalue %any undef, ptr %taddr, 0
  %92 = insertvalue %any %91, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %13, ptr %taddr10, align 8
  %93 = insertvalue %any undef, ptr %taddr10, 0
  %94 = insertvalue %any %93, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.31, i64 94 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.file.22, i64 25 }, ptr %indirectarg12, align 8
  store %"char[]" { ptr @.func.36, i64 13 }, ptr %indirectarg13, align 8
  store %any %92, ptr %varargslots, align 16
  %ptradd14 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %94, ptr %ptradd14, align 16
  %95 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %95, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg15, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, ptr align 8 %indirectarg13, i32 115, ptr align 8 %indirectarg15) #6, !dbg !399
  unreachable, !dbg !399

panic18:                                          ; preds = %loop.body
  store %"char[]" { ptr @.panic_msg.37, i64 56 }, ptr %indirectarg19, align 8
  store %"char[]" { ptr @.file.22, i64 25 }, ptr %indirectarg20, align 8
  store %"char[]" { ptr @.func.36, i64 13 }, ptr %indirectarg21, align 8
  %96 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %96(ptr align 8 %indirectarg19, ptr align 8 %indirectarg20, ptr align 8 %indirectarg21, i32 117) #6, !dbg !401
  unreachable, !dbg !401

panic23:                                          ; preds = %checkok22
  store i64 8, ptr %taddr24, align 8
  %97 = insertvalue %any undef, ptr %taddr24, 0
  %98 = insertvalue %any %97, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %21, ptr %taddr25, align 8
  %99 = insertvalue %any undef, ptr %taddr25, 0
  %100 = insertvalue %any %99, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.31, i64 94 }, ptr %indirectarg26, align 8
  store %"char[]" { ptr @.file.22, i64 25 }, ptr %indirectarg27, align 8
  store %"char[]" { ptr @.func.36, i64 13 }, ptr %indirectarg28, align 8
  store %any %98, ptr %varargslots29, align 16
  %ptradd30 = getelementptr inbounds i8, ptr %varargslots29, i64 16
  store %any %100, ptr %ptradd30, align 16
  %101 = insertvalue %"any[]" undef, ptr %varargslots29, 0
  %"$$temp31" = insertvalue %"any[]" %101, i64 2, 1
  store %"any[]" %"$$temp31", ptr %indirectarg32, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg26, ptr align 8 %indirectarg27, ptr align 8 %indirectarg28, i32 117, ptr align 8 %indirectarg32) #6, !dbg !401
  unreachable, !dbg !401

panic35:                                          ; preds = %loop.exit
  store %"char[]" { ptr @.panic_msg.37, i64 56 }, ptr %indirectarg36, align 8
  store %"char[]" { ptr @.file.22, i64 25 }, ptr %indirectarg37, align 8
  store %"char[]" { ptr @.func.36, i64 13 }, ptr %indirectarg38, align 8
  %102 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %102(ptr align 8 %indirectarg36, ptr align 8 %indirectarg37, ptr align 8 %indirectarg38, i32 119) #6, !dbg !403
  unreachable, !dbg !403

panic40:                                          ; preds = %checkok39
  store i64 8, ptr %taddr41, align 8
  %103 = insertvalue %any undef, ptr %taddr41, 0
  %104 = insertvalue %any %103, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %29, ptr %taddr42, align 8
  %105 = insertvalue %any undef, ptr %taddr42, 0
  %106 = insertvalue %any %105, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.31, i64 94 }, ptr %indirectarg43, align 8
  store %"char[]" { ptr @.file.22, i64 25 }, ptr %indirectarg44, align 8
  store %"char[]" { ptr @.func.36, i64 13 }, ptr %indirectarg45, align 8
  store %any %104, ptr %varargslots46, align 16
  %ptradd47 = getelementptr inbounds i8, ptr %varargslots46, i64 16
  store %any %106, ptr %ptradd47, align 16
  %107 = insertvalue %"any[]" undef, ptr %varargslots46, 0
  %"$$temp48" = insertvalue %"any[]" %107, i64 2, 1
  store %"any[]" %"$$temp48", ptr %indirectarg49, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg43, ptr align 8 %indirectarg44, ptr align 8 %indirectarg45, i32 119, ptr align 8 %indirectarg49) #6, !dbg !403
  unreachable, !dbg !403
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.core.mem.allocator.BackedArenaAllocator.resize(ptr %0, ptr %1, ptr %2, i64 %3, i64 %4) #0 comdat !dbg !429 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %pointer = alloca ptr, align 8
  %size = alloca i64, align 8
  %alignment = alloca i64, align 8
  %chunk = alloca ptr, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %page = alloca ptr, align 8
  %reterr = alloca i64, align 8
  %retparam = alloca ptr, align 8
  %data = alloca ptr, align 8
  %error_var = alloca i64, align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %x = alloca i64, align 8
  %indirectarg15 = alloca %"char[]", align 8
  %indirectarg16 = alloca %"char[]", align 8
  %indirectarg17 = alloca %"char[]", align 8
  %indirectarg20 = alloca %"char[]", align 8
  %indirectarg21 = alloca %"char[]", align 8
  %indirectarg22 = alloca %"char[]", align 8
  %retparam24 = alloca ptr, align 8
  %dst = alloca ptr, align 8
  %src = alloca ptr, align 8
  %x28 = alloca i64, align 8
  %y = alloca i64, align 8
  %len = alloca i64, align 8
  %indirectarg31 = alloca %"char[]", align 8
  %indirectarg32 = alloca %"char[]", align 8
  %indirectarg33 = alloca %"char[]", align 8
  %indirectarg41 = alloca %"char[]", align 8
  %indirectarg42 = alloca %"char[]", align 8
  %indirectarg43 = alloca %"char[]", align 8
  %indirectarg57 = alloca %"char[]", align 8
  %indirectarg58 = alloca %"char[]", align 8
  %indirectarg59 = alloca %"char[]", align 8
  %reterr61 = alloca i64, align 8
  %5 = icmp eq ptr %1, null, !dbg !432
  %6 = call i1 @llvm.expect.i1(i1 %5, i1 false), !dbg !432
  br i1 %6, label %panic, label %checkok, !dbg !432

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !433, !DIExpression(), !434)
  store ptr %2, ptr %pointer, align 8
    #dbg_declare(ptr %pointer, !435, !DIExpression(), !434)
  store i64 %3, ptr %size, align 8
    #dbg_declare(ptr %size, !436, !DIExpression(), !434)
  store i64 %4, ptr %alignment, align 8
    #dbg_declare(ptr %alignment, !437, !DIExpression(), !434)
    #dbg_declare(ptr %chunk, !438, !DIExpression(), !444)
  %7 = load ptr, ptr %pointer, align 8, !dbg !444
  %ptradd_any = getelementptr i8, ptr %7, i64 -8, !dbg !444
  store ptr %ptradd_any, ptr %chunk, align 8, !dbg !444
  %8 = load ptr, ptr %chunk, align 8, !dbg !445
  %9 = load i64, ptr %8, align 8, !dbg !445
  %eq = icmp eq i64 %9, -1, !dbg !445
  br i1 %eq, label %if.then, label %if.exit, !dbg !445

if.then:                                          ; preds = %checkok
  %10 = load ptr, ptr %self, align 8, !dbg !446
  %ptradd = getelementptr inbounds i8, ptr %10, i64 16, !dbg !446
  %11 = load ptr, ptr %ptradd, align 8, !dbg !446
  %i2b = icmp ne ptr %11, null, !dbg !446
  br i1 %i2b, label %assert_ok, label %assert_fail, !dbg !446

assert_fail:                                      ; preds = %if.then
  store %"char[]" { ptr @.panic_msg.38, i64 28 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.file.22, i64 25 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg5, align 8
  %12 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %12(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, i32 133) #6, !dbg !446
  unreachable, !dbg !446

assert_ok:                                        ; preds = %if.then
    #dbg_declare(ptr %page, !448, !DIExpression(), !449)
  %13 = load ptr, ptr %pointer, align 8, !dbg !449
  %ptradd_any6 = getelementptr i8, ptr %13, i64 -40, !dbg !449
  store ptr %ptradd_any6, ptr %page, align 8, !dbg !449
  %14 = load ptr, ptr %self, align 8
  %15 = load ptr, ptr %page, align 8
  %16 = load i64, ptr %size, align 8
  %17 = load i64, ptr %alignment, align 8
  %18 = call i64 @std.core.mem.allocator.BackedArenaAllocator._realloc_page(ptr %retparam, ptr %14, ptr %15, i64 %16, i64 %17) #7, !dbg !450
  %not_err = icmp eq i64 %18, 0, !dbg !450
  %19 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !450
  br i1 %19, label %after_check, label %assign_optional, !dbg !450

assign_optional:                                  ; preds = %assert_ok
  store i64 %18, ptr %reterr, align 8, !dbg !450
  br label %err_retblock, !dbg !450

after_check:                                      ; preds = %assert_ok
  %20 = load ptr, ptr %retparam, align 8, !dbg !450
  store ptr %20, ptr %0, align 8, !dbg !450
  ret i64 0, !dbg !450

err_retblock:                                     ; preds = %assign_optional
  %21 = load i64, ptr %reterr, align 8, !dbg !450
  ret i64 %21, !dbg !450

if.exit:                                          ; preds = %checkok
    #dbg_declare(ptr %data, !451, !DIExpression(), !452)
  %22 = load ptr, ptr %self, align 8, !dbg !452
  %23 = load i64, ptr %size, align 8, !dbg !452
  %24 = load i64, ptr %alignment, align 8, !dbg !452
  %lt = icmp ult i64 0, %23, !dbg !452
  br i1 %lt, label %assert_ok11, label %assert_fail7, !dbg !452

assert_fail7:                                     ; preds = %if.exit
  store %"char[]" { ptr @.panic_msg.13, i64 29 }, ptr %indirectarg8, align 8
  store %"char[]" { ptr @.file.22, i64 25 }, ptr %indirectarg9, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg10, align 8
  %25 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %25(ptr align 8 %indirectarg8, ptr align 8 %indirectarg9, ptr align 8 %indirectarg10, i32 139) #6, !dbg !452
  unreachable, !dbg !452

assert_ok11:                                      ; preds = %if.exit
  %i2nb = icmp eq i64 %24, 0, !dbg !453
  br i1 %i2nb, label %or.phi, label %or.rhs, !dbg !453

or.rhs:                                           ; preds = %assert_ok11
  store i64 %24, ptr %x, align 8
  %26 = load i64, ptr %x, align 8, !dbg !454
  %neq = icmp ne i64 0, %26, !dbg !454
  br i1 %neq, label %and.rhs, label %and.phi, !dbg !454

and.rhs:                                          ; preds = %or.rhs
  %27 = load i64, ptr %x, align 8, !dbg !454
  %28 = load i64, ptr %x, align 8, !dbg !454
  %sub = sub i64 %28, 1, !dbg !454
  %and = and i64 %27, %sub, !dbg !454
  %eq12 = icmp eq i64 %and, 0, !dbg !454
  br label %and.phi, !dbg !454

and.phi:                                          ; preds = %and.rhs, %or.rhs
  %val = phi i1 [ false, %or.rhs ], [ %eq12, %and.rhs ], !dbg !454
  br label %or.phi, !dbg !454

or.phi:                                           ; preds = %and.phi, %assert_ok11
  %val13 = phi i1 [ true, %assert_ok11 ], [ %val, %and.phi ], !dbg !454
  br i1 %val13, label %assert_ok18, label %assert_fail14, !dbg !454

assert_fail14:                                    ; preds = %or.phi
  store %"char[]" { ptr @.panic_msg.11, i64 65 }, ptr %indirectarg15, align 8
  store %"char[]" { ptr @.file.22, i64 25 }, ptr %indirectarg16, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg17, align 8
  %29 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %29(ptr align 8 %indirectarg15, ptr align 8 %indirectarg16, ptr align 8 %indirectarg17, i32 139) #6, !dbg !452
  unreachable, !dbg !452

assert_ok18:                                      ; preds = %or.phi
  %le = icmp ule i64 %24, 268435456, !dbg !452
  br i1 %le, label %assert_ok23, label %assert_fail19, !dbg !452

assert_fail19:                                    ; preds = %assert_ok18
  store %"char[]" { ptr @.panic_msg.12, i64 80 }, ptr %indirectarg20, align 8
  store %"char[]" { ptr @.file.22, i64 25 }, ptr %indirectarg21, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg22, align 8
  %30 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %30(ptr align 8 %indirectarg20, ptr align 8 %indirectarg21, ptr align 8 %indirectarg22, i32 139) #6, !dbg !452
  unreachable, !dbg !452

assert_ok23:                                      ; preds = %assert_ok18
  %31 = call i64 @std.core.mem.allocator.BackedArenaAllocator.acquire(ptr %retparam24, ptr %22, i64 %23, i32 0, i64 %24), !dbg !452
  %not_err25 = icmp eq i64 %31, 0, !dbg !452
  %32 = call i1 @llvm.expect.i1(i1 %not_err25, i1 true), !dbg !452
  br i1 %32, label %after_check27, label %assign_optional26, !dbg !452

assign_optional26:                                ; preds = %assert_ok23
  store i64 %31, ptr %error_var, align 8, !dbg !452
  br label %guard_block, !dbg !452

after_check27:                                    ; preds = %assert_ok23
  br label %noerr_block, !dbg !452

guard_block:                                      ; preds = %assign_optional26
  %33 = load i64, ptr %error_var, align 8, !dbg !452
  ret i64 %33, !dbg !452

noerr_block:                                      ; preds = %after_check27
  %34 = load ptr, ptr %retparam24, align 8, !dbg !452
  store ptr %34, ptr %data, align 8, !dbg !452
  %35 = load ptr, ptr %data, align 8, !dbg !456
  store ptr %35, ptr %dst, align 8
  %36 = load ptr, ptr %pointer, align 8
  store ptr %36, ptr %src, align 8
  %37 = load i64, ptr %size, align 8
  store i64 %37, ptr %x28, align 8
  %38 = load ptr, ptr %chunk, align 8, !dbg !456
  %39 = load i64, ptr %38, align 8
  store i64 %39, ptr %y, align 8
  %40 = load i64, ptr %x28, align 8, !dbg !457
  %41 = load i64, ptr %y, align 8, !dbg !457
  %42 = call i64 @llvm.umin.i64(i64 %40, i64 %41), !dbg !457
  store i64 %42, ptr %len, align 8
  %43 = load ptr, ptr %dst, align 8, !dbg !459
  %neq29 = icmp ne ptr %43, null, !dbg !459
  br i1 %neq29, label %assert_ok34, label %assert_fail30, !dbg !459

assert_fail30:                                    ; preds = %noerr_block
  store %"char[]" { ptr @.panic_msg.18, i64 37 }, ptr %indirectarg31, align 8
  store %"char[]" { ptr @.file.15, i64 6 }, ptr %indirectarg32, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg33, align 8
  %44 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %44(ptr align 8 %indirectarg31, ptr align 8 %indirectarg32, ptr align 8 %indirectarg33, i32 357) #6, !dbg !459
  unreachable, !dbg !459

assert_ok34:                                      ; preds = %noerr_block
  %45 = load ptr, ptr %src, align 8, !dbg !462
  %neq35 = icmp ne ptr %45, null, !dbg !462
  br i1 %neq35, label %or.phi38, label %or.rhs36, !dbg !462

or.rhs36:                                         ; preds = %assert_ok34
  %46 = load i64, ptr %len, align 8, !dbg !462
  %eq37 = icmp eq i64 0, %46, !dbg !462
  br label %or.phi38, !dbg !462

or.phi38:                                         ; preds = %or.rhs36, %assert_ok34
  %val39 = phi i1 [ true, %assert_ok34 ], [ %eq37, %or.rhs36 ], !dbg !462
  br i1 %val39, label %assert_ok44, label %assert_fail40, !dbg !462

assert_fail40:                                    ; preds = %or.phi38
  store %"char[]" { ptr @.panic_msg.19, i64 94 }, ptr %indirectarg41, align 8
  store %"char[]" { ptr @.file.22, i64 25 }, ptr %indirectarg42, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg43, align 8
  %47 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %47(ptr align 8 %indirectarg41, ptr align 8 %indirectarg42, ptr align 8 %indirectarg43, i32 140) #6, !dbg !463
  unreachable, !dbg !463

assert_ok44:                                      ; preds = %or.phi38
  %48 = load i64, ptr %len, align 8, !dbg !464
  %eq45 = icmp eq i64 0, %48, !dbg !464
  br i1 %eq45, label %or.phi49, label %or.rhs46, !dbg !464

or.rhs46:                                         ; preds = %assert_ok44
  %49 = load ptr, ptr %dst, align 8, !dbg !464
  %50 = load i64, ptr %len, align 8, !dbg !464
  %ptradd_any47 = getelementptr i8, ptr %49, i64 %50, !dbg !464
  %51 = load ptr, ptr %src, align 8, !dbg !464
  %le48 = icmp ule ptr %ptradd_any47, %51, !dbg !464
  br label %or.phi49, !dbg !464

or.phi49:                                         ; preds = %or.rhs46, %assert_ok44
  %val50 = phi i1 [ true, %assert_ok44 ], [ %le48, %or.rhs46 ], !dbg !464
  br i1 %val50, label %or.phi54, label %or.rhs51, !dbg !464

or.rhs51:                                         ; preds = %or.phi49
  %52 = load ptr, ptr %src, align 8, !dbg !464
  %53 = load i64, ptr %len, align 8, !dbg !464
  %ptradd_any52 = getelementptr i8, ptr %52, i64 %53, !dbg !464
  %54 = load ptr, ptr %dst, align 8, !dbg !464
  %le53 = icmp ule ptr %ptradd_any52, %54, !dbg !464
  br label %or.phi54, !dbg !464

or.phi54:                                         ; preds = %or.rhs51, %or.phi49
  %val55 = phi i1 [ true, %or.phi49 ], [ %le53, %or.rhs51 ], !dbg !464
  br i1 %val55, label %assert_ok60, label %assert_fail56, !dbg !464

assert_fail56:                                    ; preds = %or.phi54
  store %"char[]" { ptr @.panic_msg.20, i64 95 }, ptr %indirectarg57, align 8
  store %"char[]" { ptr @.file.22, i64 25 }, ptr %indirectarg58, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg59, align 8
  %55 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %55(ptr align 8 %indirectarg57, ptr align 8 %indirectarg58, ptr align 8 %indirectarg59, i32 140) #6, !dbg !463
  unreachable, !dbg !463

assert_ok60:                                      ; preds = %or.phi54
  %56 = load ptr, ptr %dst, align 8, !dbg !465
  %57 = load ptr, ptr %src, align 8, !dbg !465
  %58 = load i64, ptr %len, align 8, !dbg !465
  call void @llvm.memcpy.p0.p0.i64(ptr align 16 %56, ptr align 16 %57, i64 %58, i1 false), !dbg !465
  %59 = load ptr, ptr %data, align 8, !dbg !466
  store ptr %59, ptr %0, align 8, !dbg !466
  ret i64 0, !dbg !466

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.22, i64 25 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg2, align 8
  %60 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %60(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 128) #6, !dbg !434
  unreachable, !dbg !434
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.core.mem.allocator.BackedArenaAllocator.acquire(ptr %0, ptr %1, i64 %2, i32 %3, i64 %4) #0 comdat !dbg !467 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %size = alloca i64, align 8
  %init_type = alloca i32, align 4
  %alignment = alloca i64, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %x = alloca i64, align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg13 = alloca %"char[]", align 8
  %indirectarg14 = alloca %"char[]", align 8
  %indirectarg15 = alloca %"char[]", align 8
  %start_mem = alloca ptr, align 8
  %starting_ptr = alloca ptr, align 8
  %aligned_header_start = alloca ptr, align 8
  %ptr = alloca ptr, align 8
  %alignment18 = alloca i64, align 8
  %x19 = alloca i64, align 8
  %indirectarg28 = alloca %"char[]", align 8
  %indirectarg29 = alloca %"char[]", align 8
  %indirectarg30 = alloca %"char[]", align 8
  %mem = alloca ptr, align 8
  %ptr33 = alloca ptr, align 8
  %alignment34 = alloca i64, align 8
  %x36 = alloca i64, align 8
  %indirectarg45 = alloca %"char[]", align 8
  %indirectarg46 = alloca %"char[]", align 8
  %indirectarg47 = alloca %"char[]", align 8
  %new_usage = alloca i64, align 8
  %addr = alloca ptr, align 8
  %size55 = alloca i64, align 8
  %chunk_start = alloca ptr, align 8
  %dst = alloca ptr, align 8
  %len = alloca i64, align 8
  %reterr = alloca i64, align 8
  %page = alloca ptr, align 8
  %total_alloc_size = alloca i64, align 8
  %x65 = alloca i64, align 8
  %indirectarg74 = alloca %"char[]", align 8
  %indirectarg75 = alloca %"char[]", align 8
  %indirectarg76 = alloca %"char[]", align 8
  %error_var = alloca i64, align 8
  %allocator = alloca %any, align 8
  %size80 = alloca i64, align 8
  %alignment81 = alloca i64, align 8
  %blockret = alloca ptr, align 8
  %x87 = alloca i64, align 8
  %indirectarg98 = alloca %"char[]", align 8
  %indirectarg99 = alloca %"char[]", align 8
  %indirectarg100 = alloca %"char[]", align 8
  %indirectarg104 = alloca %"char[]", align 8
  %indirectarg105 = alloca %"char[]", align 8
  %indirectarg106 = alloca %"char[]", align 8
  %indirectarg110 = alloca %"char[]", align 8
  %indirectarg111 = alloca %"char[]", align 8
  %indirectarg112 = alloca %"char[]", align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %indirectarg116 = alloca %"char[]", align 8
  %indirectarg117 = alloca %"char[]", align 8
  %indirectarg118 = alloca %"char[]", align 8
  %retparam = alloca ptr, align 8
  %error_var119 = alloca i64, align 8
  %allocator120 = alloca %any, align 8
  %size121 = alloca i64, align 8
  %alignment122 = alloca i64, align 8
  %blockret123 = alloca ptr, align 8
  %x129 = alloca i64, align 8
  %indirectarg140 = alloca %"char[]", align 8
  %indirectarg141 = alloca %"char[]", align 8
  %indirectarg142 = alloca %"char[]", align 8
  %indirectarg146 = alloca %"char[]", align 8
  %indirectarg147 = alloca %"char[]", align 8
  %indirectarg148 = alloca %"char[]", align 8
  %indirectarg152 = alloca %"char[]", align 8
  %indirectarg153 = alloca %"char[]", align 8
  %indirectarg154 = alloca %"char[]", align 8
  %.inlinecache157 = alloca ptr, align 8
  %.cachedtype158 = alloca ptr, align 8
  %indirectarg166 = alloca %"char[]", align 8
  %indirectarg167 = alloca %"char[]", align 8
  %indirectarg168 = alloca %"char[]", align 8
  %retparam170 = alloca ptr, align 8
  %start = alloca ptr, align 8
  %x178 = alloca i64, align 8
  %indirectarg187 = alloca %"char[]", align 8
  %indirectarg188 = alloca %"char[]", align 8
  %indirectarg189 = alloca %"char[]", align 8
  %padded_header_size = alloca i64, align 8
  %x196 = alloca i64, align 8
  %indirectarg205 = alloca %"char[]", align 8
  %indirectarg206 = alloca %"char[]", align 8
  %indirectarg207 = alloca %"char[]", align 8
  %total_alloc_size209 = alloca i64, align 8
  %alloc = alloca ptr, align 8
  %error_var211 = alloca i64, align 8
  %x213 = alloca i64, align 8
  %indirectarg224 = alloca %"char[]", align 8
  %indirectarg225 = alloca %"char[]", align 8
  %indirectarg226 = alloca %"char[]", align 8
  %indirectarg230 = alloca %"char[]", align 8
  %indirectarg231 = alloca %"char[]", align 8
  %indirectarg232 = alloca %"char[]", align 8
  %.inlinecache235 = alloca ptr, align 8
  %.cachedtype236 = alloca ptr, align 8
  %indirectarg244 = alloca %"char[]", align 8
  %indirectarg245 = alloca %"char[]", align 8
  %indirectarg246 = alloca %"char[]", align 8
  %retparam248 = alloca ptr, align 8
  %x256 = alloca i64, align 8
  %indirectarg265 = alloca %"char[]", align 8
  %indirectarg266 = alloca %"char[]", align 8
  %indirectarg267 = alloca %"char[]", align 8
  %indirectarg270 = alloca %"char[]", align 8
  %indirectarg271 = alloca %"char[]", align 8
  %indirectarg272 = alloca %"char[]", align 8
  %x275 = alloca i64, align 8
  %indirectarg284 = alloca %"char[]", align 8
  %indirectarg285 = alloca %"char[]", align 8
  %indirectarg286 = alloca %"char[]", align 8
  %indirectarg289 = alloca %"char[]", align 8
  %indirectarg290 = alloca %"char[]", align 8
  %indirectarg291 = alloca %"char[]", align 8
  %reterr302 = alloca i64, align 8
  store ptr null, ptr %.cachedtype236, align 8, !dbg !470
  store ptr null, ptr %.cachedtype158, align 8, !dbg !470
  store ptr null, ptr %.cachedtype, align 8, !dbg !470
  %5 = icmp eq ptr %1, null, !dbg !470
  %6 = call i1 @llvm.expect.i1(i1 %5, i1 false), !dbg !470
  br i1 %6, label %panic, label %checkok, !dbg !470

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !471, !DIExpression(), !472)
  store i64 %2, ptr %size, align 8
    #dbg_declare(ptr %size, !473, !DIExpression(), !472)
  store i32 %3, ptr %init_type, align 4
    #dbg_declare(ptr %init_type, !474, !DIExpression(), !472)
  store i64 %4, ptr %alignment, align 8
    #dbg_declare(ptr %alignment, !475, !DIExpression(), !472)
  %7 = load i64, ptr %size, align 8, !dbg !476
  %lt = icmp ult i64 0, %7, !dbg !476
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !476

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.13, i64 29 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.file.22, i64 25 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg5, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, i32 146) #6, !dbg !476
  unreachable, !dbg !476

assert_ok:                                        ; preds = %checkok
  %9 = load i64, ptr %alignment, align 8, !dbg !478
  %i2nb = icmp eq i64 %9, 0, !dbg !478
  br i1 %i2nb, label %or.phi, label %or.rhs, !dbg !478

or.rhs:                                           ; preds = %assert_ok
  %10 = load i64, ptr %alignment, align 8
  store i64 %10, ptr %x, align 8
  %11 = load i64, ptr %x, align 8, !dbg !479
  %neq = icmp ne i64 0, %11, !dbg !479
  br i1 %neq, label %and.rhs, label %and.phi, !dbg !479

and.rhs:                                          ; preds = %or.rhs
  %12 = load i64, ptr %x, align 8, !dbg !479
  %13 = load i64, ptr %x, align 8, !dbg !479
  %sub = sub i64 %13, 1, !dbg !479
  %and = and i64 %12, %sub, !dbg !479
  %eq = icmp eq i64 %and, 0, !dbg !479
  br label %and.phi, !dbg !479

and.phi:                                          ; preds = %and.rhs, %or.rhs
  %val = phi i1 [ false, %or.rhs ], [ %eq, %and.rhs ], !dbg !479
  br label %or.phi, !dbg !479

or.phi:                                           ; preds = %and.phi, %assert_ok
  %val6 = phi i1 [ true, %assert_ok ], [ %val, %and.phi ], !dbg !479
  br i1 %val6, label %assert_ok11, label %assert_fail7, !dbg !479

assert_fail7:                                     ; preds = %or.phi
  store %"char[]" { ptr @.panic_msg.11, i64 65 }, ptr %indirectarg8, align 8
  store %"char[]" { ptr @.file.22, i64 25 }, ptr %indirectarg9, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg10, align 8
  %14 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %14(ptr align 8 %indirectarg8, ptr align 8 %indirectarg9, ptr align 8 %indirectarg10, i32 147) #6, !dbg !478
  unreachable, !dbg !478

assert_ok11:                                      ; preds = %or.phi
  %15 = load i64, ptr %alignment, align 8, !dbg !481
  %le = icmp ule i64 %15, 268435456, !dbg !481
  br i1 %le, label %assert_ok16, label %assert_fail12, !dbg !481

assert_fail12:                                    ; preds = %assert_ok11
  store %"char[]" { ptr @.panic_msg.12, i64 80 }, ptr %indirectarg13, align 8
  store %"char[]" { ptr @.file.22, i64 25 }, ptr %indirectarg14, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg15, align 8
  %16 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %16(ptr align 8 %indirectarg13, ptr align 8 %indirectarg14, ptr align 8 %indirectarg15, i32 148) #6, !dbg !481
  unreachable, !dbg !481

assert_ok16:                                      ; preds = %assert_ok11
  %17 = load i64, ptr %alignment, align 8, !dbg !482
  %18 = call i64 @std.core.mem.allocator.alignment_for_allocation(i64 %17) #7, !dbg !482
  store i64 %18, ptr %alignment, align 8, !dbg !482
    #dbg_declare(ptr %start_mem, !483, !DIExpression(), !484)
  %19 = load ptr, ptr %self, align 8, !dbg !484
  %ptradd = getelementptr inbounds i8, ptr %19, i64 40, !dbg !484
  store ptr %ptradd, ptr %start_mem, align 8, !dbg !484
    #dbg_declare(ptr %starting_ptr, !485, !DIExpression(), !486)
  %20 = load ptr, ptr %start_mem, align 8, !dbg !486
  %21 = load ptr, ptr %self, align 8, !dbg !486
  %ptradd17 = getelementptr inbounds i8, ptr %21, i64 24, !dbg !486
  %22 = load i64, ptr %ptradd17, align 8, !dbg !486
  %ptradd_any = getelementptr i8, ptr %20, i64 %22, !dbg !486
  store ptr %ptradd_any, ptr %starting_ptr, align 8, !dbg !486
    #dbg_declare(ptr %aligned_header_start, !487, !DIExpression(), !488)
  %23 = load ptr, ptr %starting_ptr, align 8
  store ptr %23, ptr %ptr, align 8
  store i64 8, ptr %alignment18, align 8
  %24 = load ptr, ptr %ptr, align 8, !dbg !489
  %ptrxi = ptrtoint ptr %24 to i64, !dbg !489
  %25 = load i64, ptr %alignment18, align 8, !dbg !489
  store i64 %25, ptr %x19, align 8
  %26 = load i64, ptr %x19, align 8, !dbg !491
  %neq20 = icmp ne i64 0, %26, !dbg !491
  br i1 %neq20, label %and.rhs21, label %and.phi25, !dbg !491

and.rhs21:                                        ; preds = %assert_ok16
  %27 = load i64, ptr %x19, align 8, !dbg !491
  %28 = load i64, ptr %x19, align 8, !dbg !491
  %sub22 = sub i64 %28, 1, !dbg !491
  %and23 = and i64 %27, %sub22, !dbg !491
  %eq24 = icmp eq i64 %and23, 0, !dbg !491
  br label %and.phi25, !dbg !491

and.phi25:                                        ; preds = %and.rhs21, %assert_ok16
  %val26 = phi i1 [ false, %assert_ok16 ], [ %eq24, %and.rhs21 ], !dbg !491
  br i1 %val26, label %assert_ok31, label %assert_fail27, !dbg !491

assert_fail27:                                    ; preds = %and.phi25
  store %"char[]" { ptr @.panic_msg.14, i64 51 }, ptr %indirectarg28, align 8
  store %"char[]" { ptr @.file.15, i64 6 }, ptr %indirectarg29, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg30, align 8
  %29 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %29(ptr align 8 %indirectarg28, ptr align 8 %indirectarg29, ptr align 8 %indirectarg30, i32 313) #6, !dbg !489
  unreachable, !dbg !489

assert_ok31:                                      ; preds = %and.phi25
  %30 = call i64 @std.core.mem.aligned_offset(i64 %ptrxi, i64 %25), !dbg !489
  %intptr = inttoptr i64 %30 to ptr, !dbg !489
  store ptr %intptr, ptr %aligned_header_start, align 8, !dbg !489
    #dbg_declare(ptr %mem, !493, !DIExpression(), !494)
  %31 = load ptr, ptr %aligned_header_start, align 8, !dbg !494
  %ptradd_any32 = getelementptr i8, ptr %31, i64 8, !dbg !494
  store ptr %ptradd_any32, ptr %mem, align 8, !dbg !494
  %32 = load i64, ptr %alignment, align 8, !dbg !495
  %gt = icmp ugt i64 %32, 8, !dbg !495
  br i1 %gt, label %if.then, label %if.exit, !dbg !495

if.then:                                          ; preds = %assert_ok31
  %33 = load ptr, ptr %mem, align 8
  store ptr %33, ptr %ptr33, align 8
  %34 = load i64, ptr %alignment, align 8
  store i64 %34, ptr %alignment34, align 8
  %35 = load ptr, ptr %ptr33, align 8, !dbg !496
  %ptrxi35 = ptrtoint ptr %35 to i64, !dbg !496
  %36 = load i64, ptr %alignment34, align 8, !dbg !496
  store i64 %36, ptr %x36, align 8
  %37 = load i64, ptr %x36, align 8, !dbg !500
  %neq37 = icmp ne i64 0, %37, !dbg !500
  br i1 %neq37, label %and.rhs38, label %and.phi42, !dbg !500

and.rhs38:                                        ; preds = %if.then
  %38 = load i64, ptr %x36, align 8, !dbg !500
  %39 = load i64, ptr %x36, align 8, !dbg !500
  %sub39 = sub i64 %39, 1, !dbg !500
  %and40 = and i64 %38, %sub39, !dbg !500
  %eq41 = icmp eq i64 %and40, 0, !dbg !500
  br label %and.phi42, !dbg !500

and.phi42:                                        ; preds = %and.rhs38, %if.then
  %val43 = phi i1 [ false, %if.then ], [ %eq41, %and.rhs38 ], !dbg !500
  br i1 %val43, label %assert_ok48, label %assert_fail44, !dbg !500

assert_fail44:                                    ; preds = %and.phi42
  store %"char[]" { ptr @.panic_msg.14, i64 51 }, ptr %indirectarg45, align 8
  store %"char[]" { ptr @.file.15, i64 6 }, ptr %indirectarg46, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg47, align 8
  %40 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %40(ptr align 8 %indirectarg45, ptr align 8 %indirectarg46, ptr align 8 %indirectarg47, i32 313) #6, !dbg !496
  unreachable, !dbg !496

assert_ok48:                                      ; preds = %and.phi42
  %41 = call i64 @std.core.mem.aligned_offset(i64 %ptrxi35, i64 %36), !dbg !496
  %intptr49 = inttoptr i64 %41 to ptr, !dbg !496
  store ptr %intptr49, ptr %mem, align 8, !dbg !496
  br label %if.exit, !dbg !496

if.exit:                                          ; preds = %assert_ok48, %assert_ok31
    #dbg_declare(ptr %new_usage, !502, !DIExpression(), !503)
  %42 = load ptr, ptr %mem, align 8, !dbg !503
  %43 = load ptr, ptr %start_mem, align 8, !dbg !503
  %44 = ptrtoint ptr %43 to i64, !dbg !503
  %45 = ptrtoint ptr %42 to i64, !dbg !503
  %46 = sub i64 %45, %44, !dbg !503
  %47 = sdiv exact i64 %46, 1, !dbg !503
  %48 = load i64, ptr %size, align 8, !dbg !503
  %add = add i64 %47, %48, !dbg !503
  store i64 %add, ptr %new_usage, align 8, !dbg !503
  %49 = load i64, ptr %new_usage, align 8, !dbg !504
  %50 = load ptr, ptr %self, align 8, !dbg !504
  %ptradd50 = getelementptr inbounds i8, ptr %50, i64 32, !dbg !504
  %51 = load i64, ptr %ptradd50, align 8, !dbg !504
  %le51 = icmp ule i64 %49, %51, !dbg !504
  br i1 %le51, label %if.then52, label %if.exit61, !dbg !504

if.then52:                                        ; preds = %if.exit
  %52 = load ptr, ptr %starting_ptr, align 8
  store ptr %52, ptr %addr, align 8
  %53 = load i64, ptr %new_usage, align 8, !dbg !505
  %54 = load ptr, ptr %self, align 8, !dbg !505
  %ptradd53 = getelementptr inbounds i8, ptr %54, i64 24, !dbg !505
  %55 = load i64, ptr %ptradd53, align 8, !dbg !505
  %sub54 = sub i64 %53, %55, !dbg !505
  store i64 %sub54, ptr %size55, align 8
    #dbg_declare(ptr %chunk_start, !507, !DIExpression(), !508)
  %56 = load ptr, ptr %mem, align 8, !dbg !508
  %ptradd_any56 = getelementptr i8, ptr %56, i64 -8, !dbg !508
  store ptr %ptradd_any56, ptr %chunk_start, align 8, !dbg !508
  %57 = load ptr, ptr %chunk_start, align 8, !dbg !509
  %58 = load i64, ptr %size, align 8, !dbg !509
  store i64 %58, ptr %57, align 8, !dbg !509
  %59 = load ptr, ptr %self, align 8, !dbg !510
  %ptradd57 = getelementptr inbounds i8, ptr %59, i64 24, !dbg !510
  %60 = load i64, ptr %new_usage, align 8, !dbg !510
  store i64 %60, ptr %ptradd57, align 8, !dbg !510
  %61 = load i32, ptr %init_type, align 4, !dbg !511
  %eq58 = icmp eq i32 %61, 1, !dbg !511
  br i1 %eq58, label %if.then59, label %if.exit60, !dbg !511

if.then59:                                        ; preds = %if.then52
  %62 = load ptr, ptr %mem, align 8
  store ptr %62, ptr %dst, align 8
  %63 = load i64, ptr %size, align 8
  store i64 %63, ptr %len, align 8
  %64 = load ptr, ptr %dst, align 8, !dbg !512
  %65 = load i64, ptr %len, align 8, !dbg !512
  call void @llvm.memset.p0.i64(ptr align 16 %64, i8 0, i64 %65, i1 false), !dbg !512
  br label %if.exit60, !dbg !512

if.exit60:                                        ; preds = %if.then59, %if.then52
  %66 = load ptr, ptr %mem, align 8, !dbg !514
  store ptr %66, ptr %0, align 8, !dbg !514
  ret i64 0, !dbg !514

if.exit61:                                        ; preds = %if.exit
    #dbg_declare(ptr %page, !515, !DIExpression(), !516)
  store ptr null, ptr %page, align 8, !dbg !516
  %67 = load i64, ptr %alignment, align 8, !dbg !517
  %lt62 = icmp ult i64 16, %67, !dbg !517
  br i1 %lt62, label %if.then63, label %if.else195, !dbg !517

if.then63:                                        ; preds = %if.exit61
    #dbg_declare(ptr %total_alloc_size, !518, !DIExpression(), !520)
  %68 = load i64, ptr %size, align 8, !dbg !520
  %add64 = add i64 40, %68, !dbg !520
  %69 = load i64, ptr %alignment, align 8, !dbg !520
  store i64 %69, ptr %x65, align 8
  %70 = load i64, ptr %x65, align 8, !dbg !521
  %neq66 = icmp ne i64 0, %70, !dbg !521
  br i1 %neq66, label %and.rhs67, label %and.phi71, !dbg !521

and.rhs67:                                        ; preds = %if.then63
  %71 = load i64, ptr %x65, align 8, !dbg !521
  %72 = load i64, ptr %x65, align 8, !dbg !521
  %sub68 = sub i64 %72, 1, !dbg !521
  %and69 = and i64 %71, %sub68, !dbg !521
  %eq70 = icmp eq i64 %and69, 0, !dbg !521
  br label %and.phi71, !dbg !521

and.phi71:                                        ; preds = %and.rhs67, %if.then63
  %val72 = phi i1 [ false, %if.then63 ], [ %eq70, %and.rhs67 ], !dbg !521
  br i1 %val72, label %assert_ok77, label %assert_fail73, !dbg !521

assert_fail73:                                    ; preds = %and.phi71
  store %"char[]" { ptr @.panic_msg.14, i64 51 }, ptr %indirectarg74, align 8
  store %"char[]" { ptr @.file.22, i64 25 }, ptr %indirectarg75, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg76, align 8
  %73 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %73(ptr align 8 %indirectarg74, ptr align 8 %indirectarg75, ptr align 8 %indirectarg76, i32 181) #6, !dbg !520
  unreachable, !dbg !520

assert_ok77:                                      ; preds = %and.phi71
  %74 = call i64 @std.core.mem.aligned_offset(i64 %add64, i64 %69), !dbg !520
  store i64 %74, ptr %total_alloc_size, align 8, !dbg !520
  %75 = load i32, ptr %init_type, align 4, !dbg !523
  %eq78 = icmp eq i32 %75, 1, !dbg !523
  br i1 %eq78, label %if.then79, label %if.else, !dbg !523

if.then79:                                        ; preds = %assert_ok77
  %76 = load ptr, ptr %self, align 8, !dbg !524
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator, ptr align 8 %76, i32 16, i1 false)
  %77 = load i64, ptr %total_alloc_size, align 8
  store i64 %77, ptr %size80, align 8
  %78 = load i64, ptr %alignment, align 8
  store i64 %78, ptr %alignment81, align 8
  %79 = load i64, ptr %size80, align 8, !dbg !526
  %i2nb82 = icmp eq i64 %79, 0, !dbg !526
  br i1 %i2nb82, label %if.then83, label %if.exit84, !dbg !526

if.then83:                                        ; preds = %if.then79
  store ptr null, ptr %blockret, align 8, !dbg !526
  br label %expr_block.exit, !dbg !526

if.exit84:                                        ; preds = %if.then79
  %80 = load i64, ptr %size80, align 8, !dbg !528
  %81 = load i64, ptr %alignment81, align 8, !dbg !528
  %i2nb85 = icmp eq i64 %81, 0, !dbg !529
  br i1 %i2nb85, label %or.phi95, label %or.rhs86, !dbg !529

or.rhs86:                                         ; preds = %if.exit84
  store i64 %81, ptr %x87, align 8
  %82 = load i64, ptr %x87, align 8, !dbg !530
  %neq88 = icmp ne i64 0, %82, !dbg !530
  br i1 %neq88, label %and.rhs89, label %and.phi93, !dbg !530

and.rhs89:                                        ; preds = %or.rhs86
  %83 = load i64, ptr %x87, align 8, !dbg !530
  %84 = load i64, ptr %x87, align 8, !dbg !530
  %sub90 = sub i64 %84, 1, !dbg !530
  %and91 = and i64 %83, %sub90, !dbg !530
  %eq92 = icmp eq i64 %and91, 0, !dbg !530
  br label %and.phi93, !dbg !530

and.phi93:                                        ; preds = %and.rhs89, %or.rhs86
  %val94 = phi i1 [ false, %or.rhs86 ], [ %eq92, %and.rhs89 ], !dbg !530
  br label %or.phi95, !dbg !530

or.phi95:                                         ; preds = %and.phi93, %if.exit84
  %val96 = phi i1 [ true, %if.exit84 ], [ %val94, %and.phi93 ], !dbg !530
  br i1 %val96, label %assert_ok101, label %assert_fail97, !dbg !530

assert_fail97:                                    ; preds = %or.phi95
  store %"char[]" { ptr @.panic_msg.11, i64 65 }, ptr %indirectarg98, align 8
  store %"char[]" { ptr @.file.24, i64 16 }, ptr %indirectarg99, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg100, align 8
  %85 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %85(ptr align 8 %indirectarg98, ptr align 8 %indirectarg99, ptr align 8 %indirectarg100, i32 141) #6, !dbg !528
  unreachable, !dbg !528

assert_ok101:                                     ; preds = %or.phi95
  %le102 = icmp ule i64 %81, 268435456, !dbg !528
  br i1 %le102, label %assert_ok107, label %assert_fail103, !dbg !528

assert_fail103:                                   ; preds = %assert_ok101
  store %"char[]" { ptr @.panic_msg.12, i64 80 }, ptr %indirectarg104, align 8
  store %"char[]" { ptr @.file.24, i64 16 }, ptr %indirectarg105, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg106, align 8
  %86 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %86(ptr align 8 %indirectarg104, ptr align 8 %indirectarg105, ptr align 8 %indirectarg106, i32 141) #6, !dbg !528
  unreachable, !dbg !528

assert_ok107:                                     ; preds = %assert_ok101
  %lt108 = icmp ult i64 0, %80, !dbg !528
  br i1 %lt108, label %assert_ok113, label %assert_fail109, !dbg !528

assert_fail109:                                   ; preds = %assert_ok107
  store %"char[]" { ptr @.panic_msg.25, i64 59 }, ptr %indirectarg110, align 8
  store %"char[]" { ptr @.file.24, i64 16 }, ptr %indirectarg111, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg112, align 8
  %87 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %87(ptr align 8 %indirectarg110, ptr align 8 %indirectarg111, ptr align 8 %indirectarg112, i32 141) #6, !dbg !528
  unreachable, !dbg !528

assert_ok113:                                     ; preds = %assert_ok107
  %ptradd114 = getelementptr inbounds i8, ptr %allocator, i64 8, !dbg !528
  %88 = load i64, ptr %ptradd114, align 8, !dbg !528
  %89 = inttoptr i64 %88 to ptr, !dbg !528
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !470
  %90 = icmp eq ptr %89, %type, !dbg !470
  br i1 %90, label %cache_hit, label %cache_miss, !dbg !470

cache_miss:                                       ; preds = %assert_ok113
  %ptradd115 = getelementptr inbounds i8, ptr %89, i64 16, !dbg !470
  %91 = load ptr, ptr %ptradd115, align 8, !dbg !470
  %92 = call ptr @.dyn_search(ptr %91, ptr @"$sel.acquire"), !dbg !470
  store ptr %92, ptr %.inlinecache, align 8, !dbg !470
  store ptr %89, ptr %.cachedtype, align 8, !dbg !470
  br label %93, !dbg !470

cache_hit:                                        ; preds = %assert_ok113
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !470
  br label %93, !dbg !470

93:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %92, %cache_miss ], !dbg !470
  %94 = icmp eq ptr %fn_phi, null, !dbg !470
  br i1 %94, label %missing_function, label %match, !dbg !470

missing_function:                                 ; preds = %93
  store %"char[]" { ptr @.panic_msg.26, i64 44 }, ptr %indirectarg116, align 8
  store %"char[]" { ptr @.file.24, i64 16 }, ptr %indirectarg117, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg118, align 8
  %95 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %95(ptr align 8 %indirectarg116, ptr align 8 %indirectarg117, ptr align 8 %indirectarg118, i32 141) #6, !dbg !528
  unreachable, !dbg !528

match:                                            ; preds = %93
  %96 = load ptr, ptr %allocator, align 8
  %97 = call i64 %fn_phi(ptr %retparam, ptr %96, i64 %80, i32 1, i64 %81), !dbg !528
  %not_err = icmp eq i64 %97, 0, !dbg !528
  %98 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !528
  br i1 %98, label %after_check, label %assign_optional, !dbg !528

assign_optional:                                  ; preds = %match
  store i64 %97, ptr %error_var, align 8, !dbg !528
  br label %guard_block, !dbg !528

after_check:                                      ; preds = %match
  %99 = load ptr, ptr %retparam, align 8, !dbg !528
  store ptr %99, ptr %blockret, align 8, !dbg !528
  br label %expr_block.exit, !dbg !528

expr_block.exit:                                  ; preds = %after_check, %if.then83
  br label %noerr_block, !dbg !528

guard_block:                                      ; preds = %assign_optional
  %100 = load i64, ptr %error_var, align 8, !dbg !528
  ret i64 %100, !dbg !528

noerr_block:                                      ; preds = %expr_block.exit
  %101 = load ptr, ptr %blockret, align 8, !dbg !528
  store ptr %101, ptr %mem, align 8, !dbg !528
  br label %if.exit177, !dbg !528

if.else:                                          ; preds = %assert_ok77
  %102 = load ptr, ptr %self, align 8, !dbg !532
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator120, ptr align 8 %102, i32 16, i1 false)
  %103 = load i64, ptr %total_alloc_size, align 8
  store i64 %103, ptr %size121, align 8
  %104 = load i64, ptr %alignment, align 8
  store i64 %104, ptr %alignment122, align 8
  %105 = load i64, ptr %size121, align 8, !dbg !534
  %i2nb124 = icmp eq i64 %105, 0, !dbg !534
  br i1 %i2nb124, label %if.then125, label %if.exit126, !dbg !534

if.then125:                                       ; preds = %if.else
  store ptr null, ptr %blockret123, align 8, !dbg !534
  br label %expr_block.exit174, !dbg !534

if.exit126:                                       ; preds = %if.else
  %106 = load i64, ptr %size121, align 8, !dbg !536
  %107 = load i64, ptr %alignment122, align 8, !dbg !536
  %i2nb127 = icmp eq i64 %107, 0, !dbg !537
  br i1 %i2nb127, label %or.phi137, label %or.rhs128, !dbg !537

or.rhs128:                                        ; preds = %if.exit126
  store i64 %107, ptr %x129, align 8
  %108 = load i64, ptr %x129, align 8, !dbg !538
  %neq130 = icmp ne i64 0, %108, !dbg !538
  br i1 %neq130, label %and.rhs131, label %and.phi135, !dbg !538

and.rhs131:                                       ; preds = %or.rhs128
  %109 = load i64, ptr %x129, align 8, !dbg !538
  %110 = load i64, ptr %x129, align 8, !dbg !538
  %sub132 = sub i64 %110, 1, !dbg !538
  %and133 = and i64 %109, %sub132, !dbg !538
  %eq134 = icmp eq i64 %and133, 0, !dbg !538
  br label %and.phi135, !dbg !538

and.phi135:                                       ; preds = %and.rhs131, %or.rhs128
  %val136 = phi i1 [ false, %or.rhs128 ], [ %eq134, %and.rhs131 ], !dbg !538
  br label %or.phi137, !dbg !538

or.phi137:                                        ; preds = %and.phi135, %if.exit126
  %val138 = phi i1 [ true, %if.exit126 ], [ %val136, %and.phi135 ], !dbg !538
  br i1 %val138, label %assert_ok143, label %assert_fail139, !dbg !538

assert_fail139:                                   ; preds = %or.phi137
  store %"char[]" { ptr @.panic_msg.11, i64 65 }, ptr %indirectarg140, align 8
  store %"char[]" { ptr @.file.24, i64 16 }, ptr %indirectarg141, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg142, align 8
  %111 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %111(ptr align 8 %indirectarg140, ptr align 8 %indirectarg141, ptr align 8 %indirectarg142, i32 134) #6, !dbg !536
  unreachable, !dbg !536

assert_ok143:                                     ; preds = %or.phi137
  %le144 = icmp ule i64 %107, 268435456, !dbg !536
  br i1 %le144, label %assert_ok149, label %assert_fail145, !dbg !536

assert_fail145:                                   ; preds = %assert_ok143
  store %"char[]" { ptr @.panic_msg.12, i64 80 }, ptr %indirectarg146, align 8
  store %"char[]" { ptr @.file.24, i64 16 }, ptr %indirectarg147, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg148, align 8
  %112 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %112(ptr align 8 %indirectarg146, ptr align 8 %indirectarg147, ptr align 8 %indirectarg148, i32 134) #6, !dbg !536
  unreachable, !dbg !536

assert_ok149:                                     ; preds = %assert_ok143
  %lt150 = icmp ult i64 0, %106, !dbg !536
  br i1 %lt150, label %assert_ok155, label %assert_fail151, !dbg !536

assert_fail151:                                   ; preds = %assert_ok149
  store %"char[]" { ptr @.panic_msg.25, i64 59 }, ptr %indirectarg152, align 8
  store %"char[]" { ptr @.file.24, i64 16 }, ptr %indirectarg153, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg154, align 8
  %113 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %113(ptr align 8 %indirectarg152, ptr align 8 %indirectarg153, ptr align 8 %indirectarg154, i32 134) #6, !dbg !536
  unreachable, !dbg !536

assert_ok155:                                     ; preds = %assert_ok149
  %ptradd156 = getelementptr inbounds i8, ptr %allocator120, i64 8, !dbg !536
  %114 = load i64, ptr %ptradd156, align 8, !dbg !536
  %115 = inttoptr i64 %114 to ptr, !dbg !536
  %type159 = load ptr, ptr %.cachedtype158, align 8, !dbg !470
  %116 = icmp eq ptr %115, %type159, !dbg !470
  br i1 %116, label %cache_hit162, label %cache_miss160, !dbg !470

cache_miss160:                                    ; preds = %assert_ok155
  %ptradd161 = getelementptr inbounds i8, ptr %115, i64 16, !dbg !470
  %117 = load ptr, ptr %ptradd161, align 8, !dbg !470
  %118 = call ptr @.dyn_search(ptr %117, ptr @"$sel.acquire"), !dbg !470
  store ptr %118, ptr %.inlinecache157, align 8, !dbg !470
  store ptr %115, ptr %.cachedtype158, align 8, !dbg !470
  br label %119, !dbg !470

cache_hit162:                                     ; preds = %assert_ok155
  %cache_hit_fn163 = load ptr, ptr %.inlinecache157, align 8, !dbg !470
  br label %119, !dbg !470

119:                                              ; preds = %cache_hit162, %cache_miss160
  %fn_phi164 = phi ptr [ %cache_hit_fn163, %cache_hit162 ], [ %118, %cache_miss160 ], !dbg !470
  %120 = icmp eq ptr %fn_phi164, null, !dbg !470
  br i1 %120, label %missing_function165, label %match169, !dbg !470

missing_function165:                              ; preds = %119
  store %"char[]" { ptr @.panic_msg.26, i64 44 }, ptr %indirectarg166, align 8
  store %"char[]" { ptr @.file.24, i64 16 }, ptr %indirectarg167, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg168, align 8
  %121 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %121(ptr align 8 %indirectarg166, ptr align 8 %indirectarg167, ptr align 8 %indirectarg168, i32 134) #6, !dbg !536
  unreachable, !dbg !536

match169:                                         ; preds = %119
  %122 = load ptr, ptr %allocator120, align 8
  %123 = call i64 %fn_phi164(ptr %retparam170, ptr %122, i64 %106, i32 0, i64 %107), !dbg !536
  %not_err171 = icmp eq i64 %123, 0, !dbg !536
  %124 = call i1 @llvm.expect.i1(i1 %not_err171, i1 true), !dbg !536
  br i1 %124, label %after_check173, label %assign_optional172, !dbg !536

assign_optional172:                               ; preds = %match169
  store i64 %123, ptr %error_var119, align 8, !dbg !536
  br label %guard_block175, !dbg !536

after_check173:                                   ; preds = %match169
  %125 = load ptr, ptr %retparam170, align 8, !dbg !536
  store ptr %125, ptr %blockret123, align 8, !dbg !536
  br label %expr_block.exit174, !dbg !536

expr_block.exit174:                               ; preds = %after_check173, %if.then125
  br label %noerr_block176, !dbg !536

guard_block175:                                   ; preds = %assign_optional172
  %126 = load i64, ptr %error_var119, align 8, !dbg !536
  ret i64 %126, !dbg !536

noerr_block176:                                   ; preds = %expr_block.exit174
  %127 = load ptr, ptr %blockret123, align 8, !dbg !536
  store ptr %127, ptr %mem, align 8, !dbg !536
  br label %if.exit177, !dbg !536

if.exit177:                                       ; preds = %noerr_block176, %noerr_block
    #dbg_declare(ptr %start, !540, !DIExpression(), !541)
  %128 = load ptr, ptr %mem, align 8, !dbg !541
  store ptr %128, ptr %start, align 8, !dbg !541
  %129 = load ptr, ptr %mem, align 8, !dbg !542
  %130 = load i64, ptr %alignment, align 8, !dbg !542
  store i64 %130, ptr %x178, align 8
  %131 = load i64, ptr %x178, align 8, !dbg !543
  %neq179 = icmp ne i64 0, %131, !dbg !543
  br i1 %neq179, label %and.rhs180, label %and.phi184, !dbg !543

and.rhs180:                                       ; preds = %if.exit177
  %132 = load i64, ptr %x178, align 8, !dbg !543
  %133 = load i64, ptr %x178, align 8, !dbg !543
  %sub181 = sub i64 %133, 1, !dbg !543
  %and182 = and i64 %132, %sub181, !dbg !543
  %eq183 = icmp eq i64 %and182, 0, !dbg !543
  br label %and.phi184, !dbg !543

and.phi184:                                       ; preds = %and.rhs180, %if.exit177
  %val185 = phi i1 [ false, %if.exit177 ], [ %eq183, %and.rhs180 ], !dbg !543
  br i1 %val185, label %assert_ok190, label %assert_fail186, !dbg !543

assert_fail186:                                   ; preds = %and.phi184
  store %"char[]" { ptr @.panic_msg.14, i64 51 }, ptr %indirectarg187, align 8
  store %"char[]" { ptr @.file.22, i64 25 }, ptr %indirectarg188, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg189, align 8
  %134 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %134(ptr align 8 %indirectarg187, ptr align 8 %indirectarg188, ptr align 8 %indirectarg189, i32 191) #6, !dbg !542
  unreachable, !dbg !542

assert_ok190:                                     ; preds = %and.phi184
  %135 = call i64 @std.core.mem.aligned_offset(i64 40, i64 %130), !dbg !542
  %ptradd_any191 = getelementptr i8, ptr %129, i64 %135, !dbg !542
  store ptr %ptradd_any191, ptr %mem, align 8, !dbg !542
  %136 = load ptr, ptr %mem, align 8, !dbg !545
  %ptradd_any192 = getelementptr i8, ptr %136, i64 -40, !dbg !545
  store ptr %ptradd_any192, ptr %page, align 8, !dbg !545
  %137 = load ptr, ptr %page, align 8, !dbg !546
  %ptradd193 = getelementptr inbounds i8, ptr %137, i64 8, !dbg !546
  %138 = load ptr, ptr %start, align 8, !dbg !546
  store ptr %138, ptr %ptradd193, align 8, !dbg !546
  %139 = load i64, ptr %size, align 8, !dbg !547
  %or = or i64 %139, -9223372036854775808, !dbg !547
  %140 = load ptr, ptr %page, align 8, !dbg !547
  %ptradd194 = getelementptr inbounds i8, ptr %140, i64 24, !dbg !547
  store i64 %or, ptr %ptradd194, align 8, !dbg !547
  br label %if.exit295, !dbg !547

if.else195:                                       ; preds = %if.exit61
    #dbg_declare(ptr %padded_header_size, !548, !DIExpression(), !550)
  store i64 16, ptr %x196, align 8
  %141 = load i64, ptr %x196, align 8, !dbg !551
  %neq197 = icmp ne i64 0, %141, !dbg !551
  br i1 %neq197, label %and.rhs198, label %and.phi202, !dbg !551

and.rhs198:                                       ; preds = %if.else195
  %142 = load i64, ptr %x196, align 8, !dbg !551
  %143 = load i64, ptr %x196, align 8, !dbg !551
  %sub199 = sub i64 %143, 1, !dbg !551
  %and200 = and i64 %142, %sub199, !dbg !551
  %eq201 = icmp eq i64 %and200, 0, !dbg !551
  br label %and.phi202, !dbg !551

and.phi202:                                       ; preds = %and.rhs198, %if.else195
  %val203 = phi i1 [ false, %if.else195 ], [ %eq201, %and.rhs198 ], !dbg !551
  br i1 %val203, label %assert_ok208, label %assert_fail204, !dbg !551

assert_fail204:                                   ; preds = %and.phi202
  store %"char[]" { ptr @.panic_msg.14, i64 51 }, ptr %indirectarg205, align 8
  store %"char[]" { ptr @.file.22, i64 25 }, ptr %indirectarg206, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg207, align 8
  %144 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %144(ptr align 8 %indirectarg205, ptr align 8 %indirectarg206, ptr align 8 %indirectarg207, i32 199) #6, !dbg !550
  unreachable, !dbg !550

assert_ok208:                                     ; preds = %and.phi202
  %145 = call i64 @std.core.mem.aligned_offset(i64 40, i64 16), !dbg !550
  store i64 %145, ptr %padded_header_size, align 8, !dbg !550
    #dbg_declare(ptr %total_alloc_size209, !553, !DIExpression(), !554)
  %146 = load i64, ptr %padded_header_size, align 8, !dbg !554
  %147 = load i64, ptr %size, align 8, !dbg !554
  %add210 = add i64 %146, %147, !dbg !554
  store i64 %add210, ptr %total_alloc_size209, align 8, !dbg !554
    #dbg_declare(ptr %alloc, !555, !DIExpression(), !556)
  %148 = load ptr, ptr %self, align 8, !dbg !556
  %149 = load i64, ptr %total_alloc_size209, align 8, !dbg !556
  %150 = load i32, ptr %init_type, align 4, !dbg !556
  br i1 true, label %or.phi221, label %or.rhs212, !dbg !557

or.rhs212:                                        ; preds = %assert_ok208
  store i64 0, ptr %x213, align 8
  %151 = load i64, ptr %x213, align 8, !dbg !558
  %neq214 = icmp ne i64 0, %151, !dbg !558
  br i1 %neq214, label %and.rhs215, label %and.phi219, !dbg !558

and.rhs215:                                       ; preds = %or.rhs212
  %152 = load i64, ptr %x213, align 8, !dbg !558
  %153 = load i64, ptr %x213, align 8, !dbg !558
  %sub216 = sub i64 %153, 1, !dbg !558
  %and217 = and i64 %152, %sub216, !dbg !558
  %eq218 = icmp eq i64 %and217, 0, !dbg !558
  br label %and.phi219, !dbg !558

and.phi219:                                       ; preds = %and.rhs215, %or.rhs212
  %val220 = phi i1 [ false, %or.rhs212 ], [ %eq218, %and.rhs215 ], !dbg !558
  br label %or.phi221, !dbg !558

or.phi221:                                        ; preds = %and.phi219, %assert_ok208
  %val222 = phi i1 [ true, %assert_ok208 ], [ %val220, %and.phi219 ], !dbg !558
  br i1 %val222, label %assert_ok227, label %assert_fail223, !dbg !558

assert_fail223:                                   ; preds = %or.phi221
  store %"char[]" { ptr @.panic_msg.11, i64 65 }, ptr %indirectarg224, align 8
  store %"char[]" { ptr @.file.22, i64 25 }, ptr %indirectarg225, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg226, align 8
  %154 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %154(ptr align 8 %indirectarg224, ptr align 8 %indirectarg225, ptr align 8 %indirectarg226, i32 201) #6, !dbg !556
  unreachable, !dbg !556

assert_ok227:                                     ; preds = %or.phi221
  %lt228 = icmp ult i64 0, %149, !dbg !556
  br i1 %lt228, label %assert_ok233, label %assert_fail229, !dbg !556

assert_fail229:                                   ; preds = %assert_ok227
  store %"char[]" { ptr @.panic_msg.25, i64 59 }, ptr %indirectarg230, align 8
  store %"char[]" { ptr @.file.22, i64 25 }, ptr %indirectarg231, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg232, align 8
  %155 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %155(ptr align 8 %indirectarg230, ptr align 8 %indirectarg231, ptr align 8 %indirectarg232, i32 201) #6, !dbg !556
  unreachable, !dbg !556

assert_ok233:                                     ; preds = %assert_ok227
  %ptradd234 = getelementptr inbounds i8, ptr %148, i64 8, !dbg !556
  %156 = load i64, ptr %ptradd234, align 8, !dbg !556
  %157 = inttoptr i64 %156 to ptr, !dbg !556
  %type237 = load ptr, ptr %.cachedtype236, align 8, !dbg !470
  %158 = icmp eq ptr %157, %type237, !dbg !470
  br i1 %158, label %cache_hit240, label %cache_miss238, !dbg !470

cache_miss238:                                    ; preds = %assert_ok233
  %ptradd239 = getelementptr inbounds i8, ptr %157, i64 16, !dbg !470
  %159 = load ptr, ptr %ptradd239, align 8, !dbg !470
  %160 = call ptr @.dyn_search(ptr %159, ptr @"$sel.acquire"), !dbg !470
  store ptr %160, ptr %.inlinecache235, align 8, !dbg !470
  store ptr %157, ptr %.cachedtype236, align 8, !dbg !470
  br label %161, !dbg !470

cache_hit240:                                     ; preds = %assert_ok233
  %cache_hit_fn241 = load ptr, ptr %.inlinecache235, align 8, !dbg !470
  br label %161, !dbg !470

161:                                              ; preds = %cache_hit240, %cache_miss238
  %fn_phi242 = phi ptr [ %cache_hit_fn241, %cache_hit240 ], [ %160, %cache_miss238 ], !dbg !470
  %162 = icmp eq ptr %fn_phi242, null, !dbg !470
  br i1 %162, label %missing_function243, label %match247, !dbg !470

missing_function243:                              ; preds = %161
  store %"char[]" { ptr @.panic_msg.26, i64 44 }, ptr %indirectarg244, align 8
  store %"char[]" { ptr @.file.22, i64 25 }, ptr %indirectarg245, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg246, align 8
  %163 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %163(ptr align 8 %indirectarg244, ptr align 8 %indirectarg245, ptr align 8 %indirectarg246, i32 201) #6, !dbg !556
  unreachable, !dbg !556

match247:                                         ; preds = %161
  %164 = load ptr, ptr %148, align 8
  %165 = call i64 %fn_phi242(ptr %retparam248, ptr %164, i64 %149, i32 %150, i64 0), !dbg !556
  %not_err249 = icmp eq i64 %165, 0, !dbg !556
  %166 = call i1 @llvm.expect.i1(i1 %not_err249, i1 true), !dbg !556
  br i1 %166, label %after_check251, label %assign_optional250, !dbg !556

assign_optional250:                               ; preds = %match247
  store i64 %165, ptr %error_var211, align 8, !dbg !556
  br label %guard_block252, !dbg !556

after_check251:                                   ; preds = %match247
  br label %noerr_block253, !dbg !556

guard_block252:                                   ; preds = %assign_optional250
  %167 = load i64, ptr %error_var211, align 8, !dbg !556
  ret i64 %167, !dbg !556

noerr_block253:                                   ; preds = %after_check251
  %168 = load ptr, ptr %retparam248, align 8, !dbg !556
  store ptr %168, ptr %alloc, align 8, !dbg !556
  %169 = load ptr, ptr %alloc, align 8, !dbg !560
  %170 = load i64, ptr %padded_header_size, align 8, !dbg !560
  %sub254 = sub i64 %170, 40, !dbg !560
  %ptradd_any255 = getelementptr i8, ptr %169, i64 %sub254, !dbg !560
  store ptr %ptradd_any255, ptr %page, align 8, !dbg !560
  %171 = load ptr, ptr %page, align 8, !dbg !561
  store i64 8, ptr %x256, align 8
  %172 = load i64, ptr %x256, align 8, !dbg !562
  %neq257 = icmp ne i64 0, %172, !dbg !562
  br i1 %neq257, label %and.rhs258, label %and.phi262, !dbg !562

and.rhs258:                                       ; preds = %noerr_block253
  %173 = load i64, ptr %x256, align 8, !dbg !562
  %174 = load i64, ptr %x256, align 8, !dbg !562
  %sub259 = sub i64 %174, 1, !dbg !562
  %and260 = and i64 %173, %sub259, !dbg !562
  %eq261 = icmp eq i64 %and260, 0, !dbg !562
  br label %and.phi262, !dbg !562

and.phi262:                                       ; preds = %and.rhs258, %noerr_block253
  %val263 = phi i1 [ false, %noerr_block253 ], [ %eq261, %and.rhs258 ], !dbg !562
  br i1 %val263, label %assert_ok268, label %assert_fail264, !dbg !562

assert_fail264:                                   ; preds = %and.phi262
  store %"char[]" { ptr @.panic_msg.14, i64 51 }, ptr %indirectarg265, align 8
  store %"char[]" { ptr @.file.22, i64 25 }, ptr %indirectarg266, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg267, align 8
  %175 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %175(ptr align 8 %indirectarg265, ptr align 8 %indirectarg266, ptr align 8 %indirectarg267, i32 205) #6, !dbg !561
  unreachable, !dbg !561

assert_ok268:                                     ; preds = %and.phi262
  %176 = call i8 @std.core.mem.ptr_is_aligned(ptr %171, i64 8) #7, !dbg !561
  %177 = trunc i8 %176 to i1, !dbg !561
  br i1 %177, label %assert_ok273, label %assert_fail269, !dbg !561

assert_fail269:                                   ; preds = %assert_ok268
  store %"char[]" { ptr @.panic_msg.39, i64 72 }, ptr %indirectarg270, align 8
  store %"char[]" { ptr @.file.22, i64 25 }, ptr %indirectarg271, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg272, align 8
  %178 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %178(ptr align 8 %indirectarg270, ptr align 8 %indirectarg271, ptr align 8 %indirectarg272, i32 205) #6, !dbg !561
  unreachable, !dbg !561

assert_ok273:                                     ; preds = %assert_ok268
  %179 = load ptr, ptr %page, align 8, !dbg !564
  %ptradd274 = getelementptr inbounds i8, ptr %179, i64 40, !dbg !564
  store i64 16, ptr %x275, align 8
  %180 = load i64, ptr %x275, align 8, !dbg !565
  %neq276 = icmp ne i64 0, %180, !dbg !565
  br i1 %neq276, label %and.rhs277, label %and.phi281, !dbg !565

and.rhs277:                                       ; preds = %assert_ok273
  %181 = load i64, ptr %x275, align 8, !dbg !565
  %182 = load i64, ptr %x275, align 8, !dbg !565
  %sub278 = sub i64 %182, 1, !dbg !565
  %and279 = and i64 %181, %sub278, !dbg !565
  %eq280 = icmp eq i64 %and279, 0, !dbg !565
  br label %and.phi281, !dbg !565

and.phi281:                                       ; preds = %and.rhs277, %assert_ok273
  %val282 = phi i1 [ false, %assert_ok273 ], [ %eq280, %and.rhs277 ], !dbg !565
  br i1 %val282, label %assert_ok287, label %assert_fail283, !dbg !565

assert_fail283:                                   ; preds = %and.phi281
  store %"char[]" { ptr @.panic_msg.14, i64 51 }, ptr %indirectarg284, align 8
  store %"char[]" { ptr @.file.22, i64 25 }, ptr %indirectarg285, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg286, align 8
  %183 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %183(ptr align 8 %indirectarg284, ptr align 8 %indirectarg285, ptr align 8 %indirectarg286, i32 206) #6, !dbg !564
  unreachable, !dbg !564

assert_ok287:                                     ; preds = %and.phi281
  %184 = call i8 @std.core.mem.ptr_is_aligned(ptr %ptradd274, i64 16) #7, !dbg !564
  %185 = trunc i8 %184 to i1, !dbg !564
  br i1 %185, label %assert_ok292, label %assert_fail288, !dbg !564

assert_fail288:                                   ; preds = %assert_ok287
  store %"char[]" { ptr @.panic_msg.40, i64 79 }, ptr %indirectarg289, align 8
  store %"char[]" { ptr @.file.22, i64 25 }, ptr %indirectarg290, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg291, align 8
  %186 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %186(ptr align 8 %indirectarg289, ptr align 8 %indirectarg290, ptr align 8 %indirectarg291, i32 206) #6, !dbg !564
  unreachable, !dbg !564

assert_ok292:                                     ; preds = %assert_ok287
  %187 = load ptr, ptr %page, align 8, !dbg !567
  %ptradd293 = getelementptr inbounds i8, ptr %187, i64 8, !dbg !567
  %188 = load ptr, ptr %alloc, align 8, !dbg !567
  store ptr %188, ptr %ptradd293, align 8, !dbg !567
  %189 = load ptr, ptr %page, align 8, !dbg !568
  %ptradd294 = getelementptr inbounds i8, ptr %189, i64 24, !dbg !568
  %190 = load i64, ptr %size, align 8, !dbg !568
  store i64 %190, ptr %ptradd294, align 8, !dbg !568
  br label %if.exit295, !dbg !568

if.exit295:                                       ; preds = %assert_ok292, %assert_ok190
  %191 = load ptr, ptr %page, align 8, !dbg !569
  %ptradd296 = getelementptr inbounds i8, ptr %191, i64 32, !dbg !569
  store i64 -1, ptr %ptradd296, align 8, !dbg !569
  %192 = load ptr, ptr %self, align 8, !dbg !570
  %ptradd297 = getelementptr inbounds i8, ptr %192, i64 24, !dbg !570
  %193 = load i64, ptr %ptradd297, align 8, !dbg !570
  %add298 = add i64 %193, 1, !dbg !570
  store i64 %add298, ptr %ptradd297, align 8, !dbg !570
  %194 = load ptr, ptr %page, align 8, !dbg !570
  %ptradd299 = getelementptr inbounds i8, ptr %194, i64 16, !dbg !570
  store i64 %add298, ptr %ptradd299, align 8, !dbg !570
  %195 = load ptr, ptr %self, align 8, !dbg !571
  %ptradd300 = getelementptr inbounds i8, ptr %195, i64 16, !dbg !571
  %196 = load ptr, ptr %page, align 8, !dbg !571
  %197 = load ptr, ptr %ptradd300, align 8, !dbg !571
  store ptr %197, ptr %196, align 8, !dbg !571
  %198 = load ptr, ptr %self, align 8, !dbg !572
  %ptradd301 = getelementptr inbounds i8, ptr %198, i64 16, !dbg !572
  %199 = load ptr, ptr %page, align 8, !dbg !572
  store ptr %199, ptr %ptradd301, align 8, !dbg !572
  %200 = load ptr, ptr %page, align 8, !dbg !573
  %ptradd303 = getelementptr inbounds i8, ptr %200, i64 40, !dbg !573
  store ptr %ptradd303, ptr %0, align 8, !dbg !573
  ret i64 0, !dbg !573

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.22, i64 25 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg2, align 8
  %201 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %201(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 150) #6, !dbg !472
  unreachable, !dbg !472
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.core.mem.allocator.new_backed_allocator(ptr %0, i64 %1, ptr align 8 %2) #0 comdat !dbg !574 {
entry:
  %size = alloca i64, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %temp = alloca ptr, align 8
  %error_var = alloca i64, align 8
  %allocator = alloca %any, align 8
  %padding = alloca i64, align 8
  %allocator3 = alloca %any, align 8
  %size4 = alloca i64, align 8
  %blockret = alloca ptr, align 8
  %x = alloca i64, align 8
  %indirectarg7 = alloca %"char[]", align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %indirectarg13 = alloca %"char[]", align 8
  %indirectarg14 = alloca %"char[]", align 8
  %indirectarg17 = alloca %"char[]", align 8
  %indirectarg18 = alloca %"char[]", align 8
  %indirectarg19 = alloca %"char[]", align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %indirectarg22 = alloca %"char[]", align 8
  %indirectarg23 = alloca %"char[]", align 8
  %indirectarg24 = alloca %"char[]", align 8
  %retparam = alloca ptr, align 8
  %reterr = alloca i64, align 8
  store ptr null, ptr %.cachedtype, align 8
  store i64 %1, ptr %size, align 8
    #dbg_declare(ptr %size, !578, !DIExpression(), !579)
    #dbg_declare(ptr %2, !580, !DIExpression(), !579)
  %3 = load i64, ptr %size, align 8, !dbg !581
  %le = icmp ule i64 16, %3, !dbg !581
  br i1 %le, label %assert_ok, label %assert_fail, !dbg !581

assert_fail:                                      ; preds = %entry
  store %"char[]" { ptr @.panic_msg.21, i64 31 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.22, i64 25 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.23, i64 20 }, ptr %indirectarg2, align 8
  %4 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %4(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 44) #6, !dbg !581
  unreachable, !dbg !581

assert_ok:                                        ; preds = %entry
    #dbg_declare(ptr %temp, !583, !DIExpression(), !584)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator, ptr align 8 %2, i32 16, i1 false)
  %5 = load i64, ptr %size, align 8
  store i64 %5, ptr %padding, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator3, ptr align 8 %allocator, i32 16, i1 false)
  %6 = load i64, ptr %padding, align 8, !dbg !585
  %add = add i64 40, %6, !dbg !585
  store i64 %add, ptr %size4, align 8
  %7 = load i64, ptr %size4, align 8, !dbg !587
  %i2nb = icmp eq i64 %7, 0, !dbg !587
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !587

if.then:                                          ; preds = %assert_ok
  store ptr null, ptr %blockret, align 8, !dbg !587
  br label %expr_block.exit, !dbg !587

if.exit:                                          ; preds = %assert_ok
  %8 = load i64, ptr %size4, align 8, !dbg !589
  br i1 true, label %or.phi, label %or.rhs, !dbg !590

or.rhs:                                           ; preds = %if.exit
  store i64 0, ptr %x, align 8
  %9 = load i64, ptr %x, align 8, !dbg !591
  %neq = icmp ne i64 0, %9, !dbg !591
  br i1 %neq, label %and.rhs, label %and.phi, !dbg !591

and.rhs:                                          ; preds = %or.rhs
  %10 = load i64, ptr %x, align 8, !dbg !591
  %11 = load i64, ptr %x, align 8, !dbg !591
  %sub = sub i64 %11, 1, !dbg !591
  %and = and i64 %10, %sub, !dbg !591
  %eq = icmp eq i64 %and, 0, !dbg !591
  br label %and.phi, !dbg !591

and.phi:                                          ; preds = %and.rhs, %or.rhs
  %val = phi i1 [ false, %or.rhs ], [ %eq, %and.rhs ], !dbg !591
  br label %or.phi, !dbg !591

or.phi:                                           ; preds = %and.phi, %if.exit
  %val5 = phi i1 [ true, %if.exit ], [ %val, %and.phi ], !dbg !591
  br i1 %val5, label %assert_ok10, label %assert_fail6, !dbg !591

assert_fail6:                                     ; preds = %or.phi
  store %"char[]" { ptr @.panic_msg.11, i64 65 }, ptr %indirectarg7, align 8
  store %"char[]" { ptr @.file.24, i64 16 }, ptr %indirectarg8, align 8
  store %"char[]" { ptr @.func.23, i64 20 }, ptr %indirectarg9, align 8
  %12 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %12(ptr align 8 %indirectarg7, ptr align 8 %indirectarg8, ptr align 8 %indirectarg9, i32 86) #6, !dbg !589
  unreachable, !dbg !589

assert_ok10:                                      ; preds = %or.phi
  br i1 true, label %assert_ok15, label %assert_fail11, !dbg !589

assert_fail11:                                    ; preds = %assert_ok10
  store %"char[]" { ptr @.panic_msg.12, i64 80 }, ptr %indirectarg12, align 8
  store %"char[]" { ptr @.file.24, i64 16 }, ptr %indirectarg13, align 8
  store %"char[]" { ptr @.func.23, i64 20 }, ptr %indirectarg14, align 8
  %13 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %13(ptr align 8 %indirectarg12, ptr align 8 %indirectarg13, ptr align 8 %indirectarg14, i32 86) #6, !dbg !589
  unreachable, !dbg !589

assert_ok15:                                      ; preds = %assert_ok10
  %lt = icmp ult i64 0, %8, !dbg !589
  br i1 %lt, label %assert_ok20, label %assert_fail16, !dbg !589

assert_fail16:                                    ; preds = %assert_ok15
  store %"char[]" { ptr @.panic_msg.25, i64 59 }, ptr %indirectarg17, align 8
  store %"char[]" { ptr @.file.24, i64 16 }, ptr %indirectarg18, align 8
  store %"char[]" { ptr @.func.23, i64 20 }, ptr %indirectarg19, align 8
  %14 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %14(ptr align 8 %indirectarg17, ptr align 8 %indirectarg18, ptr align 8 %indirectarg19, i32 86) #6, !dbg !589
  unreachable, !dbg !589

assert_ok20:                                      ; preds = %assert_ok15
  %ptradd = getelementptr inbounds i8, ptr %allocator3, i64 8, !dbg !589
  %15 = load i64, ptr %ptradd, align 8, !dbg !589
  %16 = inttoptr i64 %15 to ptr, !dbg !589
  %type = load ptr, ptr %.cachedtype, align 8
  %17 = icmp eq ptr %16, %type
  br i1 %17, label %cache_hit, label %cache_miss

cache_miss:                                       ; preds = %assert_ok20
  %ptradd21 = getelementptr inbounds i8, ptr %16, i64 16
  %18 = load ptr, ptr %ptradd21, align 8
  %19 = call ptr @.dyn_search(ptr %18, ptr @"$sel.acquire")
  store ptr %19, ptr %.inlinecache, align 8
  store ptr %16, ptr %.cachedtype, align 8
  br label %20

cache_hit:                                        ; preds = %assert_ok20
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8
  br label %20

20:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %19, %cache_miss ]
  %21 = icmp eq ptr %fn_phi, null
  br i1 %21, label %missing_function, label %match

missing_function:                                 ; preds = %20
  store %"char[]" { ptr @.panic_msg.26, i64 44 }, ptr %indirectarg22, align 8
  store %"char[]" { ptr @.file.24, i64 16 }, ptr %indirectarg23, align 8
  store %"char[]" { ptr @.func.23, i64 20 }, ptr %indirectarg24, align 8
  %22 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %22(ptr align 8 %indirectarg22, ptr align 8 %indirectarg23, ptr align 8 %indirectarg24, i32 86) #6, !dbg !589
  unreachable, !dbg !589

match:                                            ; preds = %20
  %23 = load ptr, ptr %allocator3, align 8
  %24 = call i64 %fn_phi(ptr %retparam, ptr %23, i64 %8, i32 0, i64 0), !dbg !589
  %not_err = icmp eq i64 %24, 0, !dbg !589
  %25 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !589
  br i1 %25, label %after_check, label %assign_optional, !dbg !589

assign_optional:                                  ; preds = %match
  store i64 %24, ptr %error_var, align 8, !dbg !589
  br label %guard_block, !dbg !589

after_check:                                      ; preds = %match
  %26 = load ptr, ptr %retparam, align 8, !dbg !589
  store ptr %26, ptr %blockret, align 8, !dbg !589
  br label %expr_block.exit, !dbg !589

expr_block.exit:                                  ; preds = %after_check, %if.then
  %27 = load ptr, ptr %blockret, align 8, !dbg !589
  br label %noerr_block, !dbg !589

guard_block:                                      ; preds = %assign_optional
  %28 = load i64, ptr %error_var, align 8, !dbg !589
  ret i64 %28, !dbg !589

noerr_block:                                      ; preds = %expr_block.exit
  store ptr %27, ptr %temp, align 8, !dbg !589
  %29 = load ptr, ptr %temp, align 8, !dbg !593
  %ptradd25 = getelementptr inbounds i8, ptr %29, i64 16, !dbg !593
  store ptr null, ptr %ptradd25, align 8, !dbg !593
  %30 = load ptr, ptr %temp, align 8, !dbg !594
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %30, ptr align 8 %2, i32 16, i1 false), !dbg !594
  %31 = load ptr, ptr %temp, align 8, !dbg !595
  %ptradd26 = getelementptr inbounds i8, ptr %31, i64 24, !dbg !595
  store i64 0, ptr %ptradd26, align 8, !dbg !595
  %32 = load ptr, ptr %temp, align 8, !dbg !596
  %ptradd27 = getelementptr inbounds i8, ptr %32, i64 32, !dbg !596
  %33 = load i64, ptr %size, align 8, !dbg !596
  store i64 %33, ptr %ptradd27, align 8, !dbg !596
  %34 = load ptr, ptr %temp, align 8, !dbg !597
  store ptr %34, ptr %0, align 8, !dbg !597
  ret i64 0, !dbg !597
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.core.mem.allocator.DynamicArenaAllocator.init(ptr %0, ptr align 8 %1, i64 %2) #0 comdat !dbg !598 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %page_size = alloca i64, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %3 = icmp eq ptr %0, null, !dbg !617
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !617
  br i1 %4, label %panic, label %checkok, !dbg !617

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !618, !DIExpression(), !619)
    #dbg_declare(ptr %1, !620, !DIExpression(), !619)
  store i64 %2, ptr %page_size, align 8
    #dbg_declare(ptr %page_size, !621, !DIExpression(), !619)
  %5 = load i64, ptr %page_size, align 8, !dbg !622
  %le = icmp ule i64 128, %5, !dbg !622
  br i1 %le, label %assert_ok, label %assert_fail, !dbg !622

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.42, i64 37 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.file.41, i64 16 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg5, align 8
  %6 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %6(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, i32 28) #6, !dbg !622
  unreachable, !dbg !622

assert_ok:                                        ; preds = %checkok
  %7 = load ptr, ptr %self, align 8, !dbg !624
  %ptradd = getelementptr inbounds i8, ptr %7, i64 16, !dbg !624
  store ptr null, ptr %ptradd, align 8, !dbg !624
  %8 = load ptr, ptr %self, align 8, !dbg !625
  %ptradd6 = getelementptr inbounds i8, ptr %8, i64 24, !dbg !625
  store ptr null, ptr %ptradd6, align 8, !dbg !625
  %9 = load ptr, ptr %self, align 8, !dbg !626
  %ptradd7 = getelementptr inbounds i8, ptr %9, i64 32, !dbg !626
  %10 = load i64, ptr %page_size, align 8, !dbg !626
  store i64 %10, ptr %ptradd7, align 8, !dbg !626
  %11 = load ptr, ptr %self, align 8, !dbg !627
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %11, ptr align 8 %1, i32 16, i1 false), !dbg !627
  ret void, !dbg !627

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.41, i64 16 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg2, align 8
  %12 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %12(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 30) #6, !dbg !619
  unreachable, !dbg !619
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.core.mem.allocator.DynamicArenaAllocator.free(ptr %0) #0 comdat !dbg !628 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %page = alloca ptr, align 8
  %next_page = alloca ptr, align 8
  %allocator = alloca %any, align 8
  %ptr = alloca ptr, align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %indirectarg9 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %allocator12 = alloca %any, align 8
  %ptr13 = alloca ptr, align 8
  %indirectarg19 = alloca %"char[]", align 8
  %indirectarg20 = alloca %"char[]", align 8
  %indirectarg21 = alloca %"char[]", align 8
  %.inlinecache24 = alloca ptr, align 8
  %.cachedtype25 = alloca ptr, align 8
  %indirectarg33 = alloca %"char[]", align 8
  %indirectarg34 = alloca %"char[]", align 8
  %indirectarg35 = alloca %"char[]", align 8
  %next_page42 = alloca ptr, align 8
  %allocator44 = alloca %any, align 8
  %ptr45 = alloca ptr, align 8
  %indirectarg51 = alloca %"char[]", align 8
  %indirectarg52 = alloca %"char[]", align 8
  %indirectarg53 = alloca %"char[]", align 8
  %.inlinecache56 = alloca ptr, align 8
  %.cachedtype57 = alloca ptr, align 8
  %indirectarg65 = alloca %"char[]", align 8
  %indirectarg66 = alloca %"char[]", align 8
  %indirectarg67 = alloca %"char[]", align 8
  %allocator70 = alloca %any, align 8
  %ptr71 = alloca ptr, align 8
  %indirectarg77 = alloca %"char[]", align 8
  %indirectarg78 = alloca %"char[]", align 8
  %indirectarg79 = alloca %"char[]", align 8
  %.inlinecache82 = alloca ptr, align 8
  %.cachedtype83 = alloca ptr, align 8
  %indirectarg91 = alloca %"char[]", align 8
  %indirectarg92 = alloca %"char[]", align 8
  %indirectarg93 = alloca %"char[]", align 8
  store ptr null, ptr %.cachedtype83, align 8, !dbg !631
  store ptr null, ptr %.cachedtype57, align 8, !dbg !631
  store ptr null, ptr %.cachedtype25, align 8, !dbg !631
  store ptr null, ptr %.cachedtype, align 8, !dbg !631
  %1 = icmp eq ptr %0, null, !dbg !631
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !631
  br i1 %2, label %panic, label %checkok, !dbg !631

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !632, !DIExpression(), !633)
    #dbg_declare(ptr %page, !634, !DIExpression(), !635)
  %3 = load ptr, ptr %self, align 8, !dbg !635
  %ptradd = getelementptr inbounds i8, ptr %3, i64 16, !dbg !635
  %4 = load ptr, ptr %ptradd, align 8, !dbg !635
  store ptr %4, ptr %page, align 8, !dbg !635
  br label %loop.cond, !dbg !636

loop.cond:                                        ; preds = %expr_block.exit37, %checkok
  %5 = load ptr, ptr %page, align 8, !dbg !637
  %i2b = icmp ne ptr %5, null, !dbg !637
  br i1 %i2b, label %loop.body, label %loop.exit, !dbg !637

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %next_page, !639, !DIExpression(), !641)
  %6 = load ptr, ptr %page, align 8, !dbg !641
  %ptradd3 = getelementptr inbounds i8, ptr %6, i64 8, !dbg !641
  %7 = load ptr, ptr %ptradd3, align 8, !dbg !641
  store ptr %7, ptr %next_page, align 8, !dbg !641
  %8 = load ptr, ptr %self, align 8, !dbg !642
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator, ptr align 8 %8, i32 16, i1 false)
  %9 = load ptr, ptr %page, align 8, !dbg !642
  %10 = load ptr, ptr %9, align 8
  store ptr %10, ptr %ptr, align 8
  %11 = load ptr, ptr %ptr, align 8, !dbg !643
  %i2nb = icmp eq ptr %11, null, !dbg !643
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !643

if.then:                                          ; preds = %loop.body
  br label %expr_block.exit, !dbg !643

if.exit:                                          ; preds = %loop.body
  %12 = load ptr, ptr %ptr, align 8, !dbg !645
  %neq = icmp ne ptr %12, null, !dbg !645
  br i1 %neq, label %assert_ok, label %assert_fail, !dbg !645

assert_fail:                                      ; preds = %if.exit
  store %"char[]" { ptr @.panic_msg.28, i64 75 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.24, i64 16 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.43, i64 4 }, ptr %indirectarg6, align 8
  %13 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %13(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 123) #6, !dbg !645
  unreachable, !dbg !645

assert_ok:                                        ; preds = %if.exit
  %ptradd7 = getelementptr inbounds i8, ptr %allocator, i64 8, !dbg !645
  %14 = load i64, ptr %ptradd7, align 8, !dbg !645
  %15 = inttoptr i64 %14 to ptr, !dbg !645
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !631
  %16 = icmp eq ptr %15, %type, !dbg !631
  br i1 %16, label %cache_hit, label %cache_miss, !dbg !631

cache_miss:                                       ; preds = %assert_ok
  %ptradd8 = getelementptr inbounds i8, ptr %15, i64 16, !dbg !631
  %17 = load ptr, ptr %ptradd8, align 8, !dbg !631
  %18 = call ptr @.dyn_search(ptr %17, ptr @"$sel.release"), !dbg !631
  store ptr %18, ptr %.inlinecache, align 8, !dbg !631
  store ptr %15, ptr %.cachedtype, align 8, !dbg !631
  br label %19, !dbg !631

cache_hit:                                        ; preds = %assert_ok
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !631
  br label %19, !dbg !631

19:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %18, %cache_miss ], !dbg !631
  %20 = icmp eq ptr %fn_phi, null, !dbg !631
  br i1 %20, label %missing_function, label %match, !dbg !631

missing_function:                                 ; preds = %19
  store %"char[]" { ptr @.panic_msg.29, i64 44 }, ptr %indirectarg9, align 8
  store %"char[]" { ptr @.file.24, i64 16 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.func.43, i64 4 }, ptr %indirectarg11, align 8
  %21 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %21(ptr align 8 %indirectarg9, ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, i32 123) #6, !dbg !645
  unreachable, !dbg !645

match:                                            ; preds = %19
  %22 = load ptr, ptr %allocator, align 8, !dbg !645
  call void %fn_phi(ptr %22, ptr %12, i8 zeroext 0), !dbg !645
  br label %expr_block.exit, !dbg !645

expr_block.exit:                                  ; preds = %match, %if.then
  %23 = load ptr, ptr %self, align 8, !dbg !646
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator12, ptr align 8 %23, i32 16, i1 false)
  %24 = load ptr, ptr %page, align 8, !dbg !646
  store ptr %24, ptr %ptr13, align 8
  %25 = load ptr, ptr %ptr13, align 8, !dbg !647
  %i2nb14 = icmp eq ptr %25, null, !dbg !647
  br i1 %i2nb14, label %if.then15, label %if.exit16, !dbg !647

if.then15:                                        ; preds = %expr_block.exit
  br label %expr_block.exit37, !dbg !647

if.exit16:                                        ; preds = %expr_block.exit
  %26 = load ptr, ptr %ptr13, align 8, !dbg !649
  %neq17 = icmp ne ptr %26, null, !dbg !649
  br i1 %neq17, label %assert_ok22, label %assert_fail18, !dbg !649

assert_fail18:                                    ; preds = %if.exit16
  store %"char[]" { ptr @.panic_msg.28, i64 75 }, ptr %indirectarg19, align 8
  store %"char[]" { ptr @.file.24, i64 16 }, ptr %indirectarg20, align 8
  store %"char[]" { ptr @.func.43, i64 4 }, ptr %indirectarg21, align 8
  %27 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %27(ptr align 8 %indirectarg19, ptr align 8 %indirectarg20, ptr align 8 %indirectarg21, i32 123) #6, !dbg !649
  unreachable, !dbg !649

assert_ok22:                                      ; preds = %if.exit16
  %ptradd23 = getelementptr inbounds i8, ptr %allocator12, i64 8, !dbg !649
  %28 = load i64, ptr %ptradd23, align 8, !dbg !649
  %29 = inttoptr i64 %28 to ptr, !dbg !649
  %type26 = load ptr, ptr %.cachedtype25, align 8, !dbg !631
  %30 = icmp eq ptr %29, %type26, !dbg !631
  br i1 %30, label %cache_hit29, label %cache_miss27, !dbg !631

cache_miss27:                                     ; preds = %assert_ok22
  %ptradd28 = getelementptr inbounds i8, ptr %29, i64 16, !dbg !631
  %31 = load ptr, ptr %ptradd28, align 8, !dbg !631
  %32 = call ptr @.dyn_search(ptr %31, ptr @"$sel.release"), !dbg !631
  store ptr %32, ptr %.inlinecache24, align 8, !dbg !631
  store ptr %29, ptr %.cachedtype25, align 8, !dbg !631
  br label %33, !dbg !631

cache_hit29:                                      ; preds = %assert_ok22
  %cache_hit_fn30 = load ptr, ptr %.inlinecache24, align 8, !dbg !631
  br label %33, !dbg !631

33:                                               ; preds = %cache_hit29, %cache_miss27
  %fn_phi31 = phi ptr [ %cache_hit_fn30, %cache_hit29 ], [ %32, %cache_miss27 ], !dbg !631
  %34 = icmp eq ptr %fn_phi31, null, !dbg !631
  br i1 %34, label %missing_function32, label %match36, !dbg !631

missing_function32:                               ; preds = %33
  store %"char[]" { ptr @.panic_msg.29, i64 44 }, ptr %indirectarg33, align 8
  store %"char[]" { ptr @.file.24, i64 16 }, ptr %indirectarg34, align 8
  store %"char[]" { ptr @.func.43, i64 4 }, ptr %indirectarg35, align 8
  %35 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %35(ptr align 8 %indirectarg33, ptr align 8 %indirectarg34, ptr align 8 %indirectarg35, i32 123) #6, !dbg !649
  unreachable, !dbg !649

match36:                                          ; preds = %33
  %36 = load ptr, ptr %allocator12, align 8, !dbg !649
  call void %fn_phi31(ptr %36, ptr %26, i8 zeroext 0), !dbg !649
  br label %expr_block.exit37, !dbg !649

expr_block.exit37:                                ; preds = %match36, %if.then15
  %37 = load ptr, ptr %next_page, align 8, !dbg !650
  store ptr %37, ptr %page, align 8, !dbg !650
  br label %loop.cond, !dbg !650

loop.exit:                                        ; preds = %loop.cond
  %38 = load ptr, ptr %self, align 8, !dbg !651
  %ptradd38 = getelementptr inbounds i8, ptr %38, i64 24, !dbg !651
  %39 = load ptr, ptr %ptradd38, align 8, !dbg !651
  store ptr %39, ptr %page, align 8, !dbg !651
  br label %loop.cond39, !dbg !652

loop.cond39:                                      ; preds = %expr_block.exit95, %loop.exit
  %40 = load ptr, ptr %page, align 8, !dbg !653
  %i2b40 = icmp ne ptr %40, null, !dbg !653
  br i1 %i2b40, label %loop.body41, label %loop.exit96, !dbg !653

loop.body41:                                      ; preds = %loop.cond39
    #dbg_declare(ptr %next_page42, !655, !DIExpression(), !657)
  %41 = load ptr, ptr %page, align 8, !dbg !657
  %ptradd43 = getelementptr inbounds i8, ptr %41, i64 8, !dbg !657
  %42 = load ptr, ptr %ptradd43, align 8, !dbg !657
  store ptr %42, ptr %next_page42, align 8, !dbg !657
  %43 = load ptr, ptr %self, align 8, !dbg !658
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator44, ptr align 8 %43, i32 16, i1 false)
  %44 = load ptr, ptr %page, align 8, !dbg !658
  %45 = load ptr, ptr %44, align 8
  store ptr %45, ptr %ptr45, align 8
  %46 = load ptr, ptr %ptr45, align 8, !dbg !659
  %i2nb46 = icmp eq ptr %46, null, !dbg !659
  br i1 %i2nb46, label %if.then47, label %if.exit48, !dbg !659

if.then47:                                        ; preds = %loop.body41
  br label %expr_block.exit69, !dbg !659

if.exit48:                                        ; preds = %loop.body41
  %47 = load ptr, ptr %ptr45, align 8, !dbg !661
  %neq49 = icmp ne ptr %47, null, !dbg !661
  br i1 %neq49, label %assert_ok54, label %assert_fail50, !dbg !661

assert_fail50:                                    ; preds = %if.exit48
  store %"char[]" { ptr @.panic_msg.28, i64 75 }, ptr %indirectarg51, align 8
  store %"char[]" { ptr @.file.24, i64 16 }, ptr %indirectarg52, align 8
  store %"char[]" { ptr @.func.43, i64 4 }, ptr %indirectarg53, align 8
  %48 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %48(ptr align 8 %indirectarg51, ptr align 8 %indirectarg52, ptr align 8 %indirectarg53, i32 123) #6, !dbg !661
  unreachable, !dbg !661

assert_ok54:                                      ; preds = %if.exit48
  %ptradd55 = getelementptr inbounds i8, ptr %allocator44, i64 8, !dbg !661
  %49 = load i64, ptr %ptradd55, align 8, !dbg !661
  %50 = inttoptr i64 %49 to ptr, !dbg !661
  %type58 = load ptr, ptr %.cachedtype57, align 8, !dbg !631
  %51 = icmp eq ptr %50, %type58, !dbg !631
  br i1 %51, label %cache_hit61, label %cache_miss59, !dbg !631

cache_miss59:                                     ; preds = %assert_ok54
  %ptradd60 = getelementptr inbounds i8, ptr %50, i64 16, !dbg !631
  %52 = load ptr, ptr %ptradd60, align 8, !dbg !631
  %53 = call ptr @.dyn_search(ptr %52, ptr @"$sel.release"), !dbg !631
  store ptr %53, ptr %.inlinecache56, align 8, !dbg !631
  store ptr %50, ptr %.cachedtype57, align 8, !dbg !631
  br label %54, !dbg !631

cache_hit61:                                      ; preds = %assert_ok54
  %cache_hit_fn62 = load ptr, ptr %.inlinecache56, align 8, !dbg !631
  br label %54, !dbg !631

54:                                               ; preds = %cache_hit61, %cache_miss59
  %fn_phi63 = phi ptr [ %cache_hit_fn62, %cache_hit61 ], [ %53, %cache_miss59 ], !dbg !631
  %55 = icmp eq ptr %fn_phi63, null, !dbg !631
  br i1 %55, label %missing_function64, label %match68, !dbg !631

missing_function64:                               ; preds = %54
  store %"char[]" { ptr @.panic_msg.29, i64 44 }, ptr %indirectarg65, align 8
  store %"char[]" { ptr @.file.24, i64 16 }, ptr %indirectarg66, align 8
  store %"char[]" { ptr @.func.43, i64 4 }, ptr %indirectarg67, align 8
  %56 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %56(ptr align 8 %indirectarg65, ptr align 8 %indirectarg66, ptr align 8 %indirectarg67, i32 123) #6, !dbg !661
  unreachable, !dbg !661

match68:                                          ; preds = %54
  %57 = load ptr, ptr %allocator44, align 8, !dbg !661
  call void %fn_phi63(ptr %57, ptr %47, i8 zeroext 0), !dbg !661
  br label %expr_block.exit69, !dbg !661

expr_block.exit69:                                ; preds = %match68, %if.then47
  %58 = load ptr, ptr %self, align 8, !dbg !662
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator70, ptr align 8 %58, i32 16, i1 false)
  %59 = load ptr, ptr %page, align 8, !dbg !662
  store ptr %59, ptr %ptr71, align 8
  %60 = load ptr, ptr %ptr71, align 8, !dbg !663
  %i2nb72 = icmp eq ptr %60, null, !dbg !663
  br i1 %i2nb72, label %if.then73, label %if.exit74, !dbg !663

if.then73:                                        ; preds = %expr_block.exit69
  br label %expr_block.exit95, !dbg !663

if.exit74:                                        ; preds = %expr_block.exit69
  %61 = load ptr, ptr %ptr71, align 8, !dbg !665
  %neq75 = icmp ne ptr %61, null, !dbg !665
  br i1 %neq75, label %assert_ok80, label %assert_fail76, !dbg !665

assert_fail76:                                    ; preds = %if.exit74
  store %"char[]" { ptr @.panic_msg.28, i64 75 }, ptr %indirectarg77, align 8
  store %"char[]" { ptr @.file.24, i64 16 }, ptr %indirectarg78, align 8
  store %"char[]" { ptr @.func.43, i64 4 }, ptr %indirectarg79, align 8
  %62 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %62(ptr align 8 %indirectarg77, ptr align 8 %indirectarg78, ptr align 8 %indirectarg79, i32 123) #6, !dbg !665
  unreachable, !dbg !665

assert_ok80:                                      ; preds = %if.exit74
  %ptradd81 = getelementptr inbounds i8, ptr %allocator70, i64 8, !dbg !665
  %63 = load i64, ptr %ptradd81, align 8, !dbg !665
  %64 = inttoptr i64 %63 to ptr, !dbg !665
  %type84 = load ptr, ptr %.cachedtype83, align 8, !dbg !631
  %65 = icmp eq ptr %64, %type84, !dbg !631
  br i1 %65, label %cache_hit87, label %cache_miss85, !dbg !631

cache_miss85:                                     ; preds = %assert_ok80
  %ptradd86 = getelementptr inbounds i8, ptr %64, i64 16, !dbg !631
  %66 = load ptr, ptr %ptradd86, align 8, !dbg !631
  %67 = call ptr @.dyn_search(ptr %66, ptr @"$sel.release"), !dbg !631
  store ptr %67, ptr %.inlinecache82, align 8, !dbg !631
  store ptr %64, ptr %.cachedtype83, align 8, !dbg !631
  br label %68, !dbg !631

cache_hit87:                                      ; preds = %assert_ok80
  %cache_hit_fn88 = load ptr, ptr %.inlinecache82, align 8, !dbg !631
  br label %68, !dbg !631

68:                                               ; preds = %cache_hit87, %cache_miss85
  %fn_phi89 = phi ptr [ %cache_hit_fn88, %cache_hit87 ], [ %67, %cache_miss85 ], !dbg !631
  %69 = icmp eq ptr %fn_phi89, null, !dbg !631
  br i1 %69, label %missing_function90, label %match94, !dbg !631

missing_function90:                               ; preds = %68
  store %"char[]" { ptr @.panic_msg.29, i64 44 }, ptr %indirectarg91, align 8
  store %"char[]" { ptr @.file.24, i64 16 }, ptr %indirectarg92, align 8
  store %"char[]" { ptr @.func.43, i64 4 }, ptr %indirectarg93, align 8
  %70 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %70(ptr align 8 %indirectarg91, ptr align 8 %indirectarg92, ptr align 8 %indirectarg93, i32 123) #6, !dbg !665
  unreachable, !dbg !665

match94:                                          ; preds = %68
  %71 = load ptr, ptr %allocator70, align 8, !dbg !665
  call void %fn_phi89(ptr %71, ptr %61, i8 zeroext 0), !dbg !665
  br label %expr_block.exit95, !dbg !665

expr_block.exit95:                                ; preds = %match94, %if.then73
  %72 = load ptr, ptr %next_page42, align 8, !dbg !666
  store ptr %72, ptr %page, align 8, !dbg !666
  br label %loop.cond39, !dbg !666

loop.exit96:                                      ; preds = %loop.cond39
  %73 = load ptr, ptr %self, align 8, !dbg !667
  %ptradd97 = getelementptr inbounds i8, ptr %73, i64 16, !dbg !667
  store ptr null, ptr %ptradd97, align 8, !dbg !667
  %74 = load ptr, ptr %self, align 8, !dbg !668
  %ptradd98 = getelementptr inbounds i8, ptr %74, i64 24, !dbg !668
  store ptr null, ptr %ptradd98, align 8, !dbg !668
  ret void, !dbg !668

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.41, i64 16 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.43, i64 4 }, ptr %indirectarg2, align 8
  %75 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %75(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 38) #6, !dbg !633
  unreachable, !dbg !633
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.core.mem.allocator.DynamicArenaAllocator.release(ptr %0, ptr %1, i8 zeroext %2) #0 comdat !dbg !669 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %ptr = alloca ptr, align 8
  %.anon = alloca i8, align 1
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %current_page = alloca ptr, align 8
  %3 = icmp eq ptr %0, null, !dbg !672
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !672
  br i1 %4, label %panic, label %checkok, !dbg !672

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !673, !DIExpression(), !674)
  store ptr %1, ptr %ptr, align 8
    #dbg_declare(ptr %ptr, !675, !DIExpression(), !674)
  store i8 %2, ptr %.anon, align 1
    #dbg_declare(ptr %.anon, !676, !DIExpression(), !674)
  %5 = load ptr, ptr %ptr, align 8, !dbg !677
  %neq = icmp ne ptr %5, null, !dbg !677
  br i1 %neq, label %assert_ok, label %assert_fail, !dbg !677

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.7, i64 32 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.file.41, i64 16 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.func.6, i64 7 }, ptr %indirectarg5, align 8
  %6 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %6(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, i32 75) #6, !dbg !677
  unreachable, !dbg !677

assert_ok:                                        ; preds = %checkok
  %7 = load ptr, ptr %self, align 8, !dbg !679
  %ptradd = getelementptr inbounds i8, ptr %7, i64 16, !dbg !679
  %8 = load ptr, ptr %ptradd, align 8, !dbg !679
  %neq6 = icmp ne ptr %8, null, !dbg !679
  br i1 %neq6, label %assert_ok11, label %assert_fail7, !dbg !679

assert_fail7:                                     ; preds = %assert_ok
  store %"char[]" { ptr @.panic_msg.44, i64 84 }, ptr %indirectarg8, align 8
  store %"char[]" { ptr @.file.41, i64 16 }, ptr %indirectarg9, align 8
  store %"char[]" { ptr @.func.6, i64 7 }, ptr %indirectarg10, align 8
  %9 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %9(ptr align 8 %indirectarg8, ptr align 8 %indirectarg9, ptr align 8 %indirectarg10, i32 76) #6, !dbg !679
  unreachable, !dbg !679

assert_ok11:                                      ; preds = %assert_ok
    #dbg_declare(ptr %current_page, !680, !DIExpression(), !681)
  %10 = load ptr, ptr %self, align 8, !dbg !681
  %ptradd12 = getelementptr inbounds i8, ptr %10, i64 16, !dbg !681
  %11 = load ptr, ptr %ptradd12, align 8, !dbg !681
  store ptr %11, ptr %current_page, align 8, !dbg !681
  %12 = load ptr, ptr %ptr, align 8, !dbg !682
  %13 = load ptr, ptr %current_page, align 8, !dbg !682
  %ptradd13 = getelementptr inbounds i8, ptr %13, i64 32, !dbg !682
  %14 = load ptr, ptr %ptradd13, align 8, !dbg !682
  %eq = icmp eq ptr %12, %14, !dbg !682
  br i1 %eq, label %if.then, label %if.exit, !dbg !682

if.then:                                          ; preds = %assert_ok11
  %15 = load ptr, ptr %ptr, align 8, !dbg !683
  %ptradd_any = getelementptr i8, ptr %15, i64 -8, !dbg !683
  %16 = load ptr, ptr %current_page, align 8, !dbg !683
  %17 = load ptr, ptr %16, align 8, !dbg !683
  %18 = ptrtoint ptr %17 to i64, !dbg !683
  %19 = ptrtoint ptr %ptradd_any to i64, !dbg !683
  %20 = sub i64 %19, %18, !dbg !683
  %21 = sdiv exact i64 %20, 1, !dbg !683
  %22 = load ptr, ptr %current_page, align 8, !dbg !683
  %ptradd14 = getelementptr inbounds i8, ptr %22, i64 24, !dbg !683
  store i64 %21, ptr %ptradd14, align 8, !dbg !683
  br label %if.exit, !dbg !683

if.exit:                                          ; preds = %if.then, %assert_ok11
  %23 = load ptr, ptr %current_page, align 8, !dbg !685
  %ptradd15 = getelementptr inbounds i8, ptr %23, i64 32, !dbg !685
  store ptr null, ptr %ptradd15, align 8, !dbg !685
  ret void, !dbg !685

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.41, i64 16 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.6, i64 7 }, ptr %indirectarg2, align 8
  %24 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %24(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 78) #6, !dbg !674
  unreachable, !dbg !674
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.core.mem.allocator.DynamicArenaAllocator.resize(ptr %0, ptr %1, ptr %2, i64 %3, i64 %4) #0 comdat !dbg !686 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %old_pointer = alloca ptr, align 8
  %size = alloca i64, align 8
  %alignment = alloca i64, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg7 = alloca %"char[]", align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %indirectarg13 = alloca %"char[]", align 8
  %indirectarg14 = alloca %"char[]", align 8
  %indirectarg15 = alloca %"char[]", align 8
  %current_page = alloca ptr, align 8
  %old_size_ptr = alloca ptr, align 8
  %old_size = alloca i64, align 8
  %indirectarg19 = alloca %"char[]", align 8
  %indirectarg20 = alloca %"char[]", align 8
  %indirectarg21 = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr24 = alloca i64, align 8
  %indirectarg25 = alloca %"char[]", align 8
  %indirectarg26 = alloca %"char[]", align 8
  %indirectarg27 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg29 = alloca %"any[]", align 8
  %x = alloca i64, align 8
  %indirectarg34 = alloca %"char[]", align 8
  %indirectarg35 = alloca %"char[]", align 8
  %indirectarg36 = alloca %"char[]", align 8
  %indirectarg42 = alloca %"char[]", align 8
  %indirectarg43 = alloca %"char[]", align 8
  %indirectarg44 = alloca %"char[]", align 8
  %taddr47 = alloca i64, align 8
  %taddr48 = alloca i64, align 8
  %indirectarg49 = alloca %"char[]", align 8
  %indirectarg50 = alloca %"char[]", align 8
  %indirectarg51 = alloca %"char[]", align 8
  %varargslots52 = alloca [2 x %any], align 16
  %indirectarg55 = alloca %"any[]", align 8
  %reterr = alloca i64, align 8
  %x66 = alloca i64, align 8
  %indirectarg75 = alloca %"char[]", align 8
  %indirectarg76 = alloca %"char[]", align 8
  %indirectarg77 = alloca %"char[]", align 8
  %indirectarg83 = alloca %"char[]", align 8
  %indirectarg84 = alloca %"char[]", align 8
  %indirectarg85 = alloca %"char[]", align 8
  %add_size = alloca i64, align 8
  %indirectarg95 = alloca %"char[]", align 8
  %indirectarg96 = alloca %"char[]", align 8
  %indirectarg97 = alloca %"char[]", align 8
  %taddr100 = alloca i64, align 8
  %taddr101 = alloca i64, align 8
  %indirectarg102 = alloca %"char[]", align 8
  %indirectarg103 = alloca %"char[]", align 8
  %indirectarg104 = alloca %"char[]", align 8
  %varargslots105 = alloca [2 x %any], align 16
  %indirectarg108 = alloca %"any[]", align 8
  %reterr112 = alloca i64, align 8
  %new_mem = alloca ptr, align 8
  %error_var = alloca i64, align 8
  %indirectarg116 = alloca %"char[]", align 8
  %indirectarg117 = alloca %"char[]", align 8
  %indirectarg118 = alloca %"char[]", align 8
  %x120 = alloca i64, align 8
  %indirectarg130 = alloca %"char[]", align 8
  %indirectarg131 = alloca %"char[]", align 8
  %indirectarg132 = alloca %"char[]", align 8
  %retparam = alloca ptr, align 8
  %dst = alloca ptr, align 8
  %src = alloca ptr, align 8
  %x134 = alloca i64, align 8
  %y = alloca i64, align 8
  %len = alloca i64, align 8
  %indirectarg137 = alloca %"char[]", align 8
  %indirectarg138 = alloca %"char[]", align 8
  %indirectarg139 = alloca %"char[]", align 8
  %indirectarg147 = alloca %"char[]", align 8
  %indirectarg148 = alloca %"char[]", align 8
  %indirectarg149 = alloca %"char[]", align 8
  %indirectarg162 = alloca %"char[]", align 8
  %indirectarg163 = alloca %"char[]", align 8
  %indirectarg164 = alloca %"char[]", align 8
  %reterr166 = alloca i64, align 8
  %5 = icmp eq ptr %1, null, !dbg !689
  %6 = call i1 @llvm.expect.i1(i1 %5, i1 false), !dbg !689
  br i1 %6, label %panic, label %checkok, !dbg !689

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !690, !DIExpression(), !691)
  store ptr %2, ptr %old_pointer, align 8
    #dbg_declare(ptr %old_pointer, !692, !DIExpression(), !691)
  store i64 %3, ptr %size, align 8
    #dbg_declare(ptr %size, !693, !DIExpression(), !691)
  store i64 %4, ptr %alignment, align 8
    #dbg_declare(ptr %alignment, !694, !DIExpression(), !691)
  %7 = load i64, ptr %size, align 8, !dbg !695
  %lt = icmp ult i64 0, %7, !dbg !695
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !695

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.45, i64 63 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.file.41, i64 16 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg5, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, i32 89) #6, !dbg !695
  unreachable, !dbg !695

assert_ok:                                        ; preds = %checkok
  %9 = load ptr, ptr %old_pointer, align 8, !dbg !697
  %neq = icmp ne ptr %9, null, !dbg !697
  br i1 %neq, label %assert_ok10, label %assert_fail6, !dbg !697

assert_fail6:                                     ; preds = %assert_ok
  store %"char[]" { ptr @.panic_msg.46, i64 79 }, ptr %indirectarg7, align 8
  store %"char[]" { ptr @.file.41, i64 16 }, ptr %indirectarg8, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg9, align 8
  %10 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %10(ptr align 8 %indirectarg7, ptr align 8 %indirectarg8, ptr align 8 %indirectarg9, i32 90) #6, !dbg !697
  unreachable, !dbg !697

assert_ok10:                                      ; preds = %assert_ok
  %11 = load ptr, ptr %self, align 8, !dbg !698
  %ptradd = getelementptr inbounds i8, ptr %11, i64 16, !dbg !698
  %12 = load ptr, ptr %ptradd, align 8, !dbg !698
  %neq11 = icmp ne ptr %12, null, !dbg !698
  br i1 %neq11, label %assert_ok16, label %assert_fail12, !dbg !698

assert_fail12:                                    ; preds = %assert_ok10
  store %"char[]" { ptr @.panic_msg.47, i64 87 }, ptr %indirectarg13, align 8
  store %"char[]" { ptr @.file.41, i64 16 }, ptr %indirectarg14, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg15, align 8
  %13 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %13(ptr align 8 %indirectarg13, ptr align 8 %indirectarg14, ptr align 8 %indirectarg15, i32 91) #6, !dbg !698
  unreachable, !dbg !698

assert_ok16:                                      ; preds = %assert_ok10
    #dbg_declare(ptr %current_page, !699, !DIExpression(), !700)
  %14 = load ptr, ptr %self, align 8, !dbg !700
  %ptradd17 = getelementptr inbounds i8, ptr %14, i64 16, !dbg !700
  %15 = load ptr, ptr %ptradd17, align 8, !dbg !700
  store ptr %15, ptr %current_page, align 8, !dbg !700
  %16 = load i64, ptr %alignment, align 8, !dbg !701
  %17 = call i64 @std.core.mem.allocator.alignment_for_allocation(i64 %16) #7, !dbg !701
  store i64 %17, ptr %alignment, align 8, !dbg !701
    #dbg_declare(ptr %old_size_ptr, !702, !DIExpression(), !704)
  %18 = load ptr, ptr %old_pointer, align 8, !dbg !704
  %ptradd_any = getelementptr i8, ptr %18, i64 -8, !dbg !704
  store ptr %ptradd_any, ptr %old_size_ptr, align 8, !dbg !704
    #dbg_declare(ptr %old_size, !705, !DIExpression(), !706)
  %19 = load ptr, ptr %old_size_ptr, align 8, !dbg !706
  %checknull = icmp eq ptr %19, null, !dbg !706
  %20 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !706
  br i1 %20, label %panic18, label %checkok22, !dbg !706

checkok22:                                        ; preds = %assert_ok16
  %21 = ptrtoint ptr %19 to i64, !dbg !706
  %22 = urem i64 %21, 8, !dbg !706
  %23 = icmp ne i64 %22, 0, !dbg !706
  %24 = call i1 @llvm.expect.i1(i1 %23, i1 false), !dbg !706
  br i1 %24, label %panic23, label %checkok30, !dbg !706

checkok30:                                        ; preds = %checkok22
  %25 = load i64, ptr %19, align 8, !dbg !706
  store i64 %25, ptr %old_size, align 8, !dbg !706
  %26 = load i64, ptr %old_size, align 8, !dbg !707
  %27 = load i64, ptr %size, align 8, !dbg !707
  %ge = icmp uge i64 %26, %27, !dbg !707
  br i1 %ge, label %and.rhs, label %and.phi38, !dbg !707

and.rhs:                                          ; preds = %checkok30
  %28 = load ptr, ptr %old_pointer, align 8, !dbg !707
  %29 = load i64, ptr %alignment, align 8, !dbg !707
  store i64 %29, ptr %x, align 8
  %30 = load i64, ptr %x, align 8, !dbg !708
  %neq31 = icmp ne i64 0, %30, !dbg !708
  br i1 %neq31, label %and.rhs32, label %and.phi, !dbg !708

and.rhs32:                                        ; preds = %and.rhs
  %31 = load i64, ptr %x, align 8, !dbg !708
  %32 = load i64, ptr %x, align 8, !dbg !708
  %sub = sub i64 %32, 1, !dbg !708
  %and = and i64 %31, %sub, !dbg !708
  %eq = icmp eq i64 %and, 0, !dbg !708
  br label %and.phi, !dbg !708

and.phi:                                          ; preds = %and.rhs32, %and.rhs
  %val = phi i1 [ false, %and.rhs ], [ %eq, %and.rhs32 ], !dbg !708
  br i1 %val, label %assert_ok37, label %assert_fail33, !dbg !708

assert_fail33:                                    ; preds = %and.phi
  store %"char[]" { ptr @.panic_msg.14, i64 51 }, ptr %indirectarg34, align 8
  store %"char[]" { ptr @.file.41, i64 16 }, ptr %indirectarg35, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg36, align 8
  %33 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %33(ptr align 8 %indirectarg34, ptr align 8 %indirectarg35, ptr align 8 %indirectarg36, i32 101) #6, !dbg !707
  unreachable, !dbg !707

assert_ok37:                                      ; preds = %and.phi
  %34 = call i8 @std.core.mem.ptr_is_aligned(ptr %28, i64 %29) #7, !dbg !707
  %35 = trunc i8 %34 to i1, !dbg !707
  br label %and.phi38, !dbg !707

and.phi38:                                        ; preds = %assert_ok37, %checkok30
  %val39 = phi i1 [ false, %checkok30 ], [ %35, %assert_ok37 ], !dbg !707
  br i1 %val39, label %if.then, label %if.exit62, !dbg !707

if.then:                                          ; preds = %and.phi38
  %36 = load ptr, ptr %old_size_ptr, align 8, !dbg !710
  %checknull40 = icmp eq ptr %36, null, !dbg !710
  %37 = call i1 @llvm.expect.i1(i1 %checknull40, i1 false), !dbg !710
  br i1 %37, label %panic41, label %checkok45, !dbg !710

checkok45:                                        ; preds = %if.then
  %38 = ptrtoint ptr %36 to i64, !dbg !710
  %39 = urem i64 %38, 8, !dbg !710
  %40 = icmp ne i64 %39, 0, !dbg !710
  %41 = call i1 @llvm.expect.i1(i1 %40, i1 false), !dbg !710
  br i1 %41, label %panic46, label %checkok56, !dbg !710

checkok56:                                        ; preds = %checkok45
  %42 = load i64, ptr %size, align 8, !dbg !710
  store i64 %42, ptr %36, align 8, !dbg !710
  %43 = load ptr, ptr %current_page, align 8, !dbg !712
  %ptradd57 = getelementptr inbounds i8, ptr %43, i64 32, !dbg !712
  %44 = load ptr, ptr %ptradd57, align 8, !dbg !712
  %45 = load ptr, ptr %old_pointer, align 8, !dbg !712
  %eq58 = icmp eq ptr %44, %45, !dbg !712
  br i1 %eq58, label %if.then59, label %if.exit, !dbg !712

if.then59:                                        ; preds = %checkok56
  %46 = load ptr, ptr %old_pointer, align 8, !dbg !713
  %ptradd_any60 = getelementptr i8, ptr %46, i64 -8, !dbg !713
  %47 = load ptr, ptr %current_page, align 8, !dbg !713
  %48 = load ptr, ptr %47, align 8, !dbg !713
  %49 = ptrtoint ptr %48 to i64, !dbg !713
  %50 = ptrtoint ptr %ptradd_any60 to i64, !dbg !713
  %51 = sub i64 %50, %49, !dbg !713
  %52 = sdiv exact i64 %51, 1, !dbg !713
  %53 = load ptr, ptr %current_page, align 8, !dbg !713
  %ptradd61 = getelementptr inbounds i8, ptr %53, i64 24, !dbg !713
  store i64 %52, ptr %ptradd61, align 8, !dbg !713
  br label %if.exit, !dbg !713

if.exit:                                          ; preds = %if.then59, %checkok56
  %54 = load ptr, ptr %old_pointer, align 8, !dbg !715
  store ptr %54, ptr %0, align 8, !dbg !715
  ret i64 0, !dbg !715

if.exit62:                                        ; preds = %and.phi38
  %55 = load ptr, ptr %current_page, align 8, !dbg !716
  %ptradd63 = getelementptr inbounds i8, ptr %55, i64 32, !dbg !716
  %56 = load ptr, ptr %ptradd63, align 8, !dbg !716
  %57 = load ptr, ptr %old_pointer, align 8, !dbg !716
  %eq64 = icmp eq ptr %56, %57, !dbg !716
  br i1 %eq64, label %and.rhs65, label %and.phi79, !dbg !716

and.rhs65:                                        ; preds = %if.exit62
  %58 = load ptr, ptr %old_pointer, align 8, !dbg !716
  %59 = load i64, ptr %alignment, align 8, !dbg !716
  store i64 %59, ptr %x66, align 8
  %60 = load i64, ptr %x66, align 8, !dbg !717
  %neq67 = icmp ne i64 0, %60, !dbg !717
  br i1 %neq67, label %and.rhs68, label %and.phi72, !dbg !717

and.rhs68:                                        ; preds = %and.rhs65
  %61 = load i64, ptr %x66, align 8, !dbg !717
  %62 = load i64, ptr %x66, align 8, !dbg !717
  %sub69 = sub i64 %62, 1, !dbg !717
  %and70 = and i64 %61, %sub69, !dbg !717
  %eq71 = icmp eq i64 %and70, 0, !dbg !717
  br label %and.phi72, !dbg !717

and.phi72:                                        ; preds = %and.rhs68, %and.rhs65
  %val73 = phi i1 [ false, %and.rhs65 ], [ %eq71, %and.rhs68 ], !dbg !717
  br i1 %val73, label %assert_ok78, label %assert_fail74, !dbg !717

assert_fail74:                                    ; preds = %and.phi72
  store %"char[]" { ptr @.panic_msg.14, i64 51 }, ptr %indirectarg75, align 8
  store %"char[]" { ptr @.file.41, i64 16 }, ptr %indirectarg76, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg77, align 8
  %63 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %63(ptr align 8 %indirectarg75, ptr align 8 %indirectarg76, ptr align 8 %indirectarg77, i32 110) #6, !dbg !716
  unreachable, !dbg !716

assert_ok78:                                      ; preds = %and.phi72
  %64 = call i8 @std.core.mem.ptr_is_aligned(ptr %58, i64 %59) #7, !dbg !716
  %65 = trunc i8 %64 to i1, !dbg !716
  br label %and.phi79, !dbg !716

and.phi79:                                        ; preds = %assert_ok78, %if.exit62
  %val80 = phi i1 [ false, %if.exit62 ], [ %65, %assert_ok78 ], !dbg !716
  br i1 %val80, label %if.then81, label %if.exit113, !dbg !716

if.then81:                                        ; preds = %and.phi79
  %66 = load i64, ptr %size, align 8, !dbg !719
  %67 = load i64, ptr %old_size, align 8, !dbg !719
  %gt = icmp ugt i64 %66, %67, !dbg !719
  br i1 %gt, label %assert_ok86, label %assert_fail82, !dbg !719

assert_fail82:                                    ; preds = %if.then81
  store %"char[]" { ptr @.panic_msg.49, i64 32 }, ptr %indirectarg83, align 8
  store %"char[]" { ptr @.file.41, i64 16 }, ptr %indirectarg84, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg85, align 8
  %68 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %68(ptr align 8 %indirectarg83, ptr align 8 %indirectarg84, ptr align 8 %indirectarg85, i32 112) #6, !dbg !719
  unreachable, !dbg !719

assert_ok86:                                      ; preds = %if.then81
    #dbg_declare(ptr %add_size, !721, !DIExpression(), !722)
  %69 = load i64, ptr %size, align 8, !dbg !722
  %70 = load i64, ptr %old_size, align 8, !dbg !722
  %sub87 = sub i64 %69, %70, !dbg !722
  store i64 %sub87, ptr %add_size, align 8, !dbg !722
  %71 = load i64, ptr %add_size, align 8, !dbg !723
  %72 = load ptr, ptr %current_page, align 8, !dbg !723
  %ptradd88 = getelementptr inbounds i8, ptr %72, i64 24, !dbg !723
  %73 = load i64, ptr %ptradd88, align 8, !dbg !723
  %add = add i64 %71, %73, !dbg !723
  %74 = load ptr, ptr %current_page, align 8, !dbg !723
  %ptradd89 = getelementptr inbounds i8, ptr %74, i64 16, !dbg !723
  %75 = load i64, ptr %ptradd89, align 8, !dbg !723
  %gt90 = icmp ugt i64 %add, %75, !dbg !723
  br i1 %gt90, label %if.then91, label %if.exit92, !dbg !723

if.then91:                                        ; preds = %assert_ok86
  br label %if.exit113, !dbg !723

if.exit92:                                        ; preds = %assert_ok86
  %76 = load ptr, ptr %old_size_ptr, align 8, !dbg !724
  %checknull93 = icmp eq ptr %76, null, !dbg !724
  %77 = call i1 @llvm.expect.i1(i1 %checknull93, i1 false), !dbg !724
  br i1 %77, label %panic94, label %checkok98, !dbg !724

checkok98:                                        ; preds = %if.exit92
  %78 = ptrtoint ptr %76 to i64, !dbg !724
  %79 = urem i64 %78, 8, !dbg !724
  %80 = icmp ne i64 %79, 0, !dbg !724
  %81 = call i1 @llvm.expect.i1(i1 %80, i1 false), !dbg !724
  br i1 %81, label %panic99, label %checkok109, !dbg !724

checkok109:                                       ; preds = %checkok98
  %82 = load i64, ptr %size, align 8, !dbg !724
  store i64 %82, ptr %76, align 8, !dbg !724
  %83 = load ptr, ptr %current_page, align 8, !dbg !725
  %ptradd110 = getelementptr inbounds i8, ptr %83, i64 24, !dbg !725
  %84 = load i64, ptr %ptradd110, align 8, !dbg !725
  %85 = load i64, ptr %add_size, align 8, !dbg !725
  %add111 = add i64 %84, %85, !dbg !725
  store i64 %add111, ptr %ptradd110, align 8, !dbg !725
  %86 = load ptr, ptr %old_pointer, align 8, !dbg !726
  store ptr %86, ptr %0, align 8, !dbg !726
  ret i64 0, !dbg !726

if.exit113:                                       ; preds = %if.then91, %and.phi79
    #dbg_declare(ptr %new_mem, !727, !DIExpression(), !728)
  %87 = load ptr, ptr %self, align 8, !dbg !728
  %88 = load i64, ptr %size, align 8, !dbg !728
  %89 = load i64, ptr %alignment, align 8, !dbg !728
  %lt114 = icmp ult i64 0, %88, !dbg !728
  br i1 %lt114, label %assert_ok119, label %assert_fail115, !dbg !728

assert_fail115:                                   ; preds = %if.exit113
  store %"char[]" { ptr @.panic_msg.50, i64 57 }, ptr %indirectarg116, align 8
  store %"char[]" { ptr @.file.41, i64 16 }, ptr %indirectarg117, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg118, align 8
  %90 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %90(ptr align 8 %indirectarg116, ptr align 8 %indirectarg117, ptr align 8 %indirectarg118, i32 119) #6, !dbg !728
  unreachable, !dbg !728

assert_ok119:                                     ; preds = %if.exit113
  %i2nb = icmp eq i64 %89, 0, !dbg !729
  br i1 %i2nb, label %or.phi, label %or.rhs, !dbg !729

or.rhs:                                           ; preds = %assert_ok119
  store i64 %89, ptr %x120, align 8
  %91 = load i64, ptr %x120, align 8, !dbg !730
  %neq121 = icmp ne i64 0, %91, !dbg !730
  br i1 %neq121, label %and.rhs122, label %and.phi126, !dbg !730

and.rhs122:                                       ; preds = %or.rhs
  %92 = load i64, ptr %x120, align 8, !dbg !730
  %93 = load i64, ptr %x120, align 8, !dbg !730
  %sub123 = sub i64 %93, 1, !dbg !730
  %and124 = and i64 %92, %sub123, !dbg !730
  %eq125 = icmp eq i64 %and124, 0, !dbg !730
  br label %and.phi126, !dbg !730

and.phi126:                                       ; preds = %and.rhs122, %or.rhs
  %val127 = phi i1 [ false, %or.rhs ], [ %eq125, %and.rhs122 ], !dbg !730
  br label %or.phi, !dbg !730

or.phi:                                           ; preds = %and.phi126, %assert_ok119
  %val128 = phi i1 [ true, %assert_ok119 ], [ %val127, %and.phi126 ], !dbg !730
  br i1 %val128, label %assert_ok133, label %assert_fail129, !dbg !730

assert_fail129:                                   ; preds = %or.phi
  store %"char[]" { ptr @.panic_msg.11, i64 65 }, ptr %indirectarg130, align 8
  store %"char[]" { ptr @.file.41, i64 16 }, ptr %indirectarg131, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg132, align 8
  %94 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %94(ptr align 8 %indirectarg130, ptr align 8 %indirectarg131, ptr align 8 %indirectarg132, i32 119) #6, !dbg !728
  unreachable, !dbg !728

assert_ok133:                                     ; preds = %or.phi
  %95 = call i64 @std.core.mem.allocator.DynamicArenaAllocator.acquire(ptr %retparam, ptr %87, i64 %88, i32 0, i64 %89), !dbg !728
  %not_err = icmp eq i64 %95, 0, !dbg !728
  %96 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !728
  br i1 %96, label %after_check, label %assign_optional, !dbg !728

assign_optional:                                  ; preds = %assert_ok133
  store i64 %95, ptr %error_var, align 8, !dbg !728
  br label %guard_block, !dbg !728

after_check:                                      ; preds = %assert_ok133
  br label %noerr_block, !dbg !728

guard_block:                                      ; preds = %assign_optional
  %97 = load i64, ptr %error_var, align 8, !dbg !728
  ret i64 %97, !dbg !728

noerr_block:                                      ; preds = %after_check
  %98 = load ptr, ptr %retparam, align 8, !dbg !728
  store ptr %98, ptr %new_mem, align 8, !dbg !728
  %99 = load ptr, ptr %new_mem, align 8
  store ptr %99, ptr %dst, align 8
  %100 = load ptr, ptr %old_pointer, align 8
  store ptr %100, ptr %src, align 8
  %101 = load i64, ptr %old_size, align 8
  store i64 %101, ptr %x134, align 8
  %102 = load i64, ptr %size, align 8
  store i64 %102, ptr %y, align 8
  %103 = load i64, ptr %x134, align 8, !dbg !732
  %104 = load i64, ptr %y, align 8, !dbg !732
  %105 = call i64 @llvm.umin.i64(i64 %103, i64 %104), !dbg !732
  store i64 %105, ptr %len, align 8
  %106 = load ptr, ptr %dst, align 8, !dbg !735
  %neq135 = icmp ne ptr %106, null, !dbg !735
  br i1 %neq135, label %assert_ok140, label %assert_fail136, !dbg !735

assert_fail136:                                   ; preds = %noerr_block
  store %"char[]" { ptr @.panic_msg.18, i64 37 }, ptr %indirectarg137, align 8
  store %"char[]" { ptr @.file.15, i64 6 }, ptr %indirectarg138, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg139, align 8
  %107 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %107(ptr align 8 %indirectarg137, ptr align 8 %indirectarg138, ptr align 8 %indirectarg139, i32 357) #6, !dbg !735
  unreachable, !dbg !735

assert_ok140:                                     ; preds = %noerr_block
  %108 = load ptr, ptr %src, align 8, !dbg !738
  %neq141 = icmp ne ptr %108, null, !dbg !738
  br i1 %neq141, label %or.phi144, label %or.rhs142, !dbg !738

or.rhs142:                                        ; preds = %assert_ok140
  %109 = load i64, ptr %len, align 8, !dbg !738
  %eq143 = icmp eq i64 0, %109, !dbg !738
  br label %or.phi144, !dbg !738

or.phi144:                                        ; preds = %or.rhs142, %assert_ok140
  %val145 = phi i1 [ true, %assert_ok140 ], [ %eq143, %or.rhs142 ], !dbg !738
  br i1 %val145, label %assert_ok150, label %assert_fail146, !dbg !738

assert_fail146:                                   ; preds = %or.phi144
  store %"char[]" { ptr @.panic_msg.19, i64 94 }, ptr %indirectarg147, align 8
  store %"char[]" { ptr @.file.41, i64 16 }, ptr %indirectarg148, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg149, align 8
  %110 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %110(ptr align 8 %indirectarg147, ptr align 8 %indirectarg148, ptr align 8 %indirectarg149, i32 120) #6, !dbg !739
  unreachable, !dbg !739

assert_ok150:                                     ; preds = %or.phi144
  %111 = load i64, ptr %len, align 8, !dbg !740
  %eq151 = icmp eq i64 0, %111, !dbg !740
  br i1 %eq151, label %or.phi154, label %or.rhs152, !dbg !740

or.rhs152:                                        ; preds = %assert_ok150
  %112 = load ptr, ptr %dst, align 8, !dbg !740
  %113 = load i64, ptr %len, align 8, !dbg !740
  %ptradd_any153 = getelementptr i8, ptr %112, i64 %113, !dbg !740
  %114 = load ptr, ptr %src, align 8, !dbg !740
  %le = icmp ule ptr %ptradd_any153, %114, !dbg !740
  br label %or.phi154, !dbg !740

or.phi154:                                        ; preds = %or.rhs152, %assert_ok150
  %val155 = phi i1 [ true, %assert_ok150 ], [ %le, %or.rhs152 ], !dbg !740
  br i1 %val155, label %or.phi159, label %or.rhs156, !dbg !740

or.rhs156:                                        ; preds = %or.phi154
  %115 = load ptr, ptr %src, align 8, !dbg !740
  %116 = load i64, ptr %len, align 8, !dbg !740
  %ptradd_any157 = getelementptr i8, ptr %115, i64 %116, !dbg !740
  %117 = load ptr, ptr %dst, align 8, !dbg !740
  %le158 = icmp ule ptr %ptradd_any157, %117, !dbg !740
  br label %or.phi159, !dbg !740

or.phi159:                                        ; preds = %or.rhs156, %or.phi154
  %val160 = phi i1 [ true, %or.phi154 ], [ %le158, %or.rhs156 ], !dbg !740
  br i1 %val160, label %assert_ok165, label %assert_fail161, !dbg !740

assert_fail161:                                   ; preds = %or.phi159
  store %"char[]" { ptr @.panic_msg.20, i64 95 }, ptr %indirectarg162, align 8
  store %"char[]" { ptr @.file.41, i64 16 }, ptr %indirectarg163, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg164, align 8
  %118 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %118(ptr align 8 %indirectarg162, ptr align 8 %indirectarg163, ptr align 8 %indirectarg164, i32 120) #6, !dbg !739
  unreachable, !dbg !739

assert_ok165:                                     ; preds = %or.phi159
  %119 = load ptr, ptr %dst, align 8, !dbg !741
  %120 = load ptr, ptr %src, align 8, !dbg !741
  %121 = load i64, ptr %len, align 8, !dbg !741
  call void @llvm.memcpy.p0.p0.i64(ptr align 16 %119, ptr %120, i64 %121, i1 false), !dbg !741
  %122 = load ptr, ptr %new_mem, align 8, !dbg !742
  store ptr %122, ptr %0, align 8, !dbg !742
  ret i64 0, !dbg !742

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.41, i64 16 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg2, align 8
  %123 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %123(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 94) #6, !dbg !691
  unreachable, !dbg !691

panic18:                                          ; preds = %assert_ok16
  store %"char[]" { ptr @.panic_msg.48, i64 53 }, ptr %indirectarg19, align 8
  store %"char[]" { ptr @.file.41, i64 16 }, ptr %indirectarg20, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg21, align 8
  %124 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %124(ptr align 8 %indirectarg19, ptr align 8 %indirectarg20, ptr align 8 %indirectarg21, i32 99) #6, !dbg !706
  unreachable, !dbg !706

panic23:                                          ; preds = %checkok22
  store i64 8, ptr %taddr, align 8
  %125 = insertvalue %any undef, ptr %taddr, 0
  %126 = insertvalue %any %125, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %22, ptr %taddr24, align 8
  %127 = insertvalue %any undef, ptr %taddr24, 0
  %128 = insertvalue %any %127, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.31, i64 94 }, ptr %indirectarg25, align 8
  store %"char[]" { ptr @.file.41, i64 16 }, ptr %indirectarg26, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg27, align 8
  store %any %126, ptr %varargslots, align 16
  %ptradd28 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %128, ptr %ptradd28, align 16
  %129 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %129, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg29, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg25, ptr align 8 %indirectarg26, ptr align 8 %indirectarg27, i32 99, ptr align 8 %indirectarg29) #6, !dbg !706
  unreachable, !dbg !706

panic41:                                          ; preds = %if.then
  store %"char[]" { ptr @.panic_msg.48, i64 53 }, ptr %indirectarg42, align 8
  store %"char[]" { ptr @.file.41, i64 16 }, ptr %indirectarg43, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg44, align 8
  %130 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %130(ptr align 8 %indirectarg42, ptr align 8 %indirectarg43, ptr align 8 %indirectarg44, i32 103) #6, !dbg !710
  unreachable, !dbg !710

panic46:                                          ; preds = %checkok45
  store i64 8, ptr %taddr47, align 8
  %131 = insertvalue %any undef, ptr %taddr47, 0
  %132 = insertvalue %any %131, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %39, ptr %taddr48, align 8
  %133 = insertvalue %any undef, ptr %taddr48, 0
  %134 = insertvalue %any %133, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.31, i64 94 }, ptr %indirectarg49, align 8
  store %"char[]" { ptr @.file.41, i64 16 }, ptr %indirectarg50, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg51, align 8
  store %any %132, ptr %varargslots52, align 16
  %ptradd53 = getelementptr inbounds i8, ptr %varargslots52, i64 16
  store %any %134, ptr %ptradd53, align 16
  %135 = insertvalue %"any[]" undef, ptr %varargslots52, 0
  %"$$temp54" = insertvalue %"any[]" %135, i64 2, 1
  store %"any[]" %"$$temp54", ptr %indirectarg55, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg49, ptr align 8 %indirectarg50, ptr align 8 %indirectarg51, i32 103, ptr align 8 %indirectarg55) #6, !dbg !710
  unreachable, !dbg !710

panic94:                                          ; preds = %if.exit92
  store %"char[]" { ptr @.panic_msg.48, i64 53 }, ptr %indirectarg95, align 8
  store %"char[]" { ptr @.file.41, i64 16 }, ptr %indirectarg96, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg97, align 8
  %136 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %136(ptr align 8 %indirectarg95, ptr align 8 %indirectarg96, ptr align 8 %indirectarg97, i32 115) #6, !dbg !724
  unreachable, !dbg !724

panic99:                                          ; preds = %checkok98
  store i64 8, ptr %taddr100, align 8
  %137 = insertvalue %any undef, ptr %taddr100, 0
  %138 = insertvalue %any %137, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %79, ptr %taddr101, align 8
  %139 = insertvalue %any undef, ptr %taddr101, 0
  %140 = insertvalue %any %139, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.31, i64 94 }, ptr %indirectarg102, align 8
  store %"char[]" { ptr @.file.41, i64 16 }, ptr %indirectarg103, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg104, align 8
  store %any %138, ptr %varargslots105, align 16
  %ptradd106 = getelementptr inbounds i8, ptr %varargslots105, i64 16
  store %any %140, ptr %ptradd106, align 16
  %141 = insertvalue %"any[]" undef, ptr %varargslots105, 0
  %"$$temp107" = insertvalue %"any[]" %141, i64 2, 1
  store %"any[]" %"$$temp107", ptr %indirectarg108, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg102, ptr align 8 %indirectarg103, ptr align 8 %indirectarg104, i32 115, ptr align 8 %indirectarg108) #6, !dbg !724
  unreachable, !dbg !724
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.core.mem.allocator.DynamicArenaAllocator.reset(ptr %0) #0 comdat !dbg !743 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %page = alloca ptr, align 8
  %unused_page_ptr = alloca ptr, align 8
  %next_page = alloca ptr, align 8
  %prev_unused = alloca ptr, align 8
  %indirectarg7 = alloca %"char[]", align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr12 = alloca i64, align 8
  %indirectarg13 = alloca %"char[]", align 8
  %indirectarg14 = alloca %"char[]", align 8
  %indirectarg15 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg17 = alloca %"any[]", align 8
  %indirectarg21 = alloca %"char[]", align 8
  %indirectarg22 = alloca %"char[]", align 8
  %indirectarg23 = alloca %"char[]", align 8
  %taddr26 = alloca i64, align 8
  %taddr27 = alloca i64, align 8
  %indirectarg28 = alloca %"char[]", align 8
  %indirectarg29 = alloca %"char[]", align 8
  %indirectarg30 = alloca %"char[]", align 8
  %varargslots31 = alloca [2 x %any], align 16
  %indirectarg34 = alloca %"any[]", align 8
  %1 = icmp eq ptr %0, null, !dbg !744
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !744
  br i1 %2, label %panic, label %checkok, !dbg !744

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !745, !DIExpression(), !746)
    #dbg_declare(ptr %page, !747, !DIExpression(), !748)
  %3 = load ptr, ptr %self, align 8, !dbg !748
  %ptradd = getelementptr inbounds i8, ptr %3, i64 16, !dbg !748
  %4 = load ptr, ptr %ptradd, align 8, !dbg !748
  store ptr %4, ptr %page, align 8, !dbg !748
    #dbg_declare(ptr %unused_page_ptr, !749, !DIExpression(), !751)
  %5 = load ptr, ptr %self, align 8, !dbg !751
  %ptradd3 = getelementptr inbounds i8, ptr %5, i64 24, !dbg !751
  store ptr %ptradd3, ptr %unused_page_ptr, align 8, !dbg !751
  br label %loop.cond, !dbg !752

loop.cond:                                        ; preds = %checkok35, %checkok
  %6 = load ptr, ptr %page, align 8, !dbg !753
  %i2b = icmp ne ptr %6, null, !dbg !753
  br i1 %i2b, label %loop.body, label %loop.exit, !dbg !753

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %next_page, !755, !DIExpression(), !757)
  %7 = load ptr, ptr %page, align 8, !dbg !757
  %ptradd4 = getelementptr inbounds i8, ptr %7, i64 8, !dbg !757
  %8 = load ptr, ptr %ptradd4, align 8, !dbg !757
  store ptr %8, ptr %next_page, align 8, !dbg !757
  %9 = load ptr, ptr %page, align 8, !dbg !758
  %ptradd5 = getelementptr inbounds i8, ptr %9, i64 24, !dbg !758
  store i64 0, ptr %ptradd5, align 8, !dbg !758
    #dbg_declare(ptr %prev_unused, !759, !DIExpression(), !760)
  %10 = load ptr, ptr %unused_page_ptr, align 8, !dbg !760
  %checknull = icmp eq ptr %10, null, !dbg !760
  %11 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !760
  br i1 %11, label %panic6, label %checkok10, !dbg !760

checkok10:                                        ; preds = %loop.body
  %12 = ptrtoint ptr %10 to i64, !dbg !760
  %13 = urem i64 %12, 8, !dbg !760
  %14 = icmp ne i64 %13, 0, !dbg !760
  %15 = call i1 @llvm.expect.i1(i1 %14, i1 false), !dbg !760
  br i1 %15, label %panic11, label %checkok18, !dbg !760

checkok18:                                        ; preds = %checkok10
  %16 = load ptr, ptr %10, align 8, !dbg !760
  store ptr %16, ptr %prev_unused, align 8, !dbg !760
  %17 = load ptr, ptr %unused_page_ptr, align 8, !dbg !761
  %checknull19 = icmp eq ptr %17, null, !dbg !761
  %18 = call i1 @llvm.expect.i1(i1 %checknull19, i1 false), !dbg !761
  br i1 %18, label %panic20, label %checkok24, !dbg !761

checkok24:                                        ; preds = %checkok18
  %19 = ptrtoint ptr %17 to i64, !dbg !761
  %20 = urem i64 %19, 8, !dbg !761
  %21 = icmp ne i64 %20, 0, !dbg !761
  %22 = call i1 @llvm.expect.i1(i1 %21, i1 false), !dbg !761
  br i1 %22, label %panic25, label %checkok35, !dbg !761

checkok35:                                        ; preds = %checkok24
  %23 = load ptr, ptr %page, align 8, !dbg !761
  store ptr %23, ptr %17, align 8, !dbg !761
  %24 = load ptr, ptr %prev_unused, align 8, !dbg !762
  %25 = load ptr, ptr %page, align 8, !dbg !762
  %ptradd36 = getelementptr inbounds i8, ptr %25, i64 8, !dbg !762
  store ptr %24, ptr %ptradd36, align 8, !dbg !762
  %26 = load ptr, ptr %next_page, align 8, !dbg !763
  store ptr %26, ptr %page, align 8, !dbg !763
  br label %loop.cond, !dbg !763

loop.exit:                                        ; preds = %loop.cond
  %27 = load ptr, ptr %self, align 8, !dbg !764
  %ptradd37 = getelementptr inbounds i8, ptr %27, i64 16, !dbg !764
  %28 = load ptr, ptr %page, align 8, !dbg !764
  store ptr %28, ptr %ptradd37, align 8, !dbg !764
  ret void, !dbg !764

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.41, i64 16 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.4, i64 5 }, ptr %indirectarg2, align 8
  %29 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %29(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 124) #6, !dbg !746
  unreachable, !dbg !746

panic6:                                           ; preds = %loop.body
  store %"char[]" { ptr @.panic_msg.51, i64 56 }, ptr %indirectarg7, align 8
  store %"char[]" { ptr @.file.41, i64 16 }, ptr %indirectarg8, align 8
  store %"char[]" { ptr @.func.4, i64 5 }, ptr %indirectarg9, align 8
  %30 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %30(ptr align 8 %indirectarg7, ptr align 8 %indirectarg8, ptr align 8 %indirectarg9, i32 132) #6, !dbg !760
  unreachable, !dbg !760

panic11:                                          ; preds = %checkok10
  store i64 8, ptr %taddr, align 8
  %31 = insertvalue %any undef, ptr %taddr, 0
  %32 = insertvalue %any %31, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %13, ptr %taddr12, align 8
  %33 = insertvalue %any undef, ptr %taddr12, 0
  %34 = insertvalue %any %33, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.31, i64 94 }, ptr %indirectarg13, align 8
  store %"char[]" { ptr @.file.41, i64 16 }, ptr %indirectarg14, align 8
  store %"char[]" { ptr @.func.4, i64 5 }, ptr %indirectarg15, align 8
  store %any %32, ptr %varargslots, align 16
  %ptradd16 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %34, ptr %ptradd16, align 16
  %35 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %35, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg17, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg13, ptr align 8 %indirectarg14, ptr align 8 %indirectarg15, i32 132, ptr align 8 %indirectarg17) #6, !dbg !760
  unreachable, !dbg !760

panic20:                                          ; preds = %checkok18
  store %"char[]" { ptr @.panic_msg.51, i64 56 }, ptr %indirectarg21, align 8
  store %"char[]" { ptr @.file.41, i64 16 }, ptr %indirectarg22, align 8
  store %"char[]" { ptr @.func.4, i64 5 }, ptr %indirectarg23, align 8
  %36 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %36(ptr align 8 %indirectarg21, ptr align 8 %indirectarg22, ptr align 8 %indirectarg23, i32 133) #6, !dbg !761
  unreachable, !dbg !761

panic25:                                          ; preds = %checkok24
  store i64 8, ptr %taddr26, align 8
  %37 = insertvalue %any undef, ptr %taddr26, 0
  %38 = insertvalue %any %37, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %20, ptr %taddr27, align 8
  %39 = insertvalue %any undef, ptr %taddr27, 0
  %40 = insertvalue %any %39, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.31, i64 94 }, ptr %indirectarg28, align 8
  store %"char[]" { ptr @.file.41, i64 16 }, ptr %indirectarg29, align 8
  store %"char[]" { ptr @.func.4, i64 5 }, ptr %indirectarg30, align 8
  store %any %38, ptr %varargslots31, align 16
  %ptradd32 = getelementptr inbounds i8, ptr %varargslots31, i64 16
  store %any %40, ptr %ptradd32, align 16
  %41 = insertvalue %"any[]" undef, ptr %varargslots31, 0
  %"$$temp33" = insertvalue %"any[]" %41, i64 2, 1
  store %"any[]" %"$$temp33", ptr %indirectarg34, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg28, ptr align 8 %indirectarg29, ptr align 8 %indirectarg30, i32 133, ptr align 8 %indirectarg34) #6, !dbg !761
  unreachable, !dbg !761
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @std.core.mem.allocator.DynamicArenaAllocator._alloc_new(ptr %0, ptr %1, i64 %2, i64 %3) #0 !dbg !765 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %size = alloca i64, align 8
  %alignment = alloca i64, align 8
  %x = alloca i64, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg7 = alloca %"char[]", align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %page_size = alloca i64, align 8
  %x11 = alloca i64, align 8
  %x13 = alloca i64, align 8
  %indirectarg22 = alloca %"char[]", align 8
  %indirectarg23 = alloca %"char[]", align 8
  %indirectarg24 = alloca %"char[]", align 8
  %.anon = alloca i64, align 8
  %a = alloca i64, align 8
  %b = alloca i64, align 8
  %indirectarg30 = alloca %"char[]", align 8
  %indirectarg31 = alloca %"char[]", align 8
  %indirectarg32 = alloca %"char[]", align 8
  %mem = alloca ptr, align 8
  %error_var = alloca i64, align 8
  %allocator = alloca %any, align 8
  %size34 = alloca i64, align 8
  %blockret = alloca ptr, align 8
  %x35 = alloca i64, align 8
  %indirectarg45 = alloca %"char[]", align 8
  %indirectarg46 = alloca %"char[]", align 8
  %indirectarg47 = alloca %"char[]", align 8
  %indirectarg50 = alloca %"char[]", align 8
  %indirectarg51 = alloca %"char[]", align 8
  %indirectarg52 = alloca %"char[]", align 8
  %indirectarg56 = alloca %"char[]", align 8
  %indirectarg57 = alloca %"char[]", align 8
  %indirectarg58 = alloca %"char[]", align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %indirectarg62 = alloca %"char[]", align 8
  %indirectarg63 = alloca %"char[]", align 8
  %indirectarg64 = alloca %"char[]", align 8
  %retparam = alloca ptr, align 8
  %page = alloca ptr, align 8
  %page.f = alloca i64, align 8
  %allocator65 = alloca %any, align 8
  %allocator67 = alloca %any, align 8
  %size68 = alloca i64, align 8
  %blockret69 = alloca ptr, align 8
  %x74 = alloca i64, align 8
  %indirectarg85 = alloca %"char[]", align 8
  %indirectarg86 = alloca %"char[]", align 8
  %indirectarg87 = alloca %"char[]", align 8
  %indirectarg90 = alloca %"char[]", align 8
  %indirectarg91 = alloca %"char[]", align 8
  %indirectarg92 = alloca %"char[]", align 8
  %indirectarg96 = alloca %"char[]", align 8
  %indirectarg97 = alloca %"char[]", align 8
  %indirectarg98 = alloca %"char[]", align 8
  %.inlinecache101 = alloca ptr, align 8
  %.cachedtype102 = alloca ptr, align 8
  %indirectarg110 = alloca %"char[]", align 8
  %indirectarg111 = alloca %"char[]", align 8
  %indirectarg112 = alloca %"char[]", align 8
  %retparam114 = alloca ptr, align 8
  %err = alloca i64, align 8
  %allocator123 = alloca %any, align 8
  %ptr = alloca ptr, align 8
  %indirectarg129 = alloca %"char[]", align 8
  %indirectarg130 = alloca %"char[]", align 8
  %indirectarg131 = alloca %"char[]", align 8
  %.inlinecache134 = alloca ptr, align 8
  %.cachedtype135 = alloca ptr, align 8
  %indirectarg143 = alloca %"char[]", align 8
  %indirectarg144 = alloca %"char[]", align 8
  %indirectarg145 = alloca %"char[]", align 8
  %mem_start = alloca ptr, align 8
  %ptr149 = alloca ptr, align 8
  %alignment150 = alloca i64, align 8
  %x151 = alloca i64, align 8
  %indirectarg160 = alloca %"char[]", align 8
  %indirectarg161 = alloca %"char[]", align 8
  %indirectarg162 = alloca %"char[]", align 8
  %indirectarg168 = alloca %"char[]", align 8
  %indirectarg169 = alloca %"char[]", align 8
  %indirectarg170 = alloca %"char[]", align 8
  %chunk = alloca ptr, align 8
  %reterr = alloca i64, align 8
  store ptr null, ptr %.cachedtype135, align 8, !dbg !768
  store ptr null, ptr %.cachedtype102, align 8, !dbg !768
  store ptr null, ptr %.cachedtype, align 8, !dbg !768
  %4 = icmp eq ptr %1, null, !dbg !768
  %5 = call i1 @llvm.expect.i1(i1 %4, i1 false), !dbg !768
  br i1 %5, label %panic, label %checkok, !dbg !768

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !769, !DIExpression(), !770)
  store i64 %2, ptr %size, align 8
    #dbg_declare(ptr %size, !771, !DIExpression(), !770)
  store i64 %3, ptr %alignment, align 8
    #dbg_declare(ptr %alignment, !772, !DIExpression(), !770)
  %6 = load i64, ptr %alignment, align 8
  store i64 %6, ptr %x, align 8
  %7 = load i64, ptr %x, align 8, !dbg !773
  %neq = icmp ne i64 0, %7, !dbg !773
  br i1 %neq, label %and.rhs, label %and.phi, !dbg !773

and.rhs:                                          ; preds = %checkok
  %8 = load i64, ptr %x, align 8, !dbg !773
  %9 = load i64, ptr %x, align 8, !dbg !773
  %sub = sub i64 %9, 1, !dbg !773
  %and = and i64 %8, %sub, !dbg !773
  %eq = icmp eq i64 %and, 0, !dbg !773
  br label %and.phi, !dbg !773

and.phi:                                          ; preds = %and.rhs, %checkok
  %val = phi i1 [ false, %checkok ], [ %eq, %and.rhs ], !dbg !773
  br i1 %val, label %assert_ok, label %assert_fail, !dbg !773

assert_fail:                                      ; preds = %and.phi
  store %"char[]" { ptr @.panic_msg.14, i64 51 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.file.41, i64 16 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.func.52, i64 10 }, ptr %indirectarg5, align 8
  %10 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %10(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, i32 141) #6, !dbg !775
  unreachable, !dbg !775

assert_ok:                                        ; preds = %and.phi
  %11 = load i64, ptr %size, align 8, !dbg !777
  %lt = icmp ult i64 0, %11, !dbg !777
  br i1 %lt, label %assert_ok10, label %assert_fail6, !dbg !777

assert_fail6:                                     ; preds = %assert_ok
  store %"char[]" { ptr @.panic_msg.13, i64 29 }, ptr %indirectarg7, align 8
  store %"char[]" { ptr @.file.41, i64 16 }, ptr %indirectarg8, align 8
  store %"char[]" { ptr @.func.52, i64 10 }, ptr %indirectarg9, align 8
  %12 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %12(ptr align 8 %indirectarg7, ptr align 8 %indirectarg8, ptr align 8 %indirectarg9, i32 142) #6, !dbg !777
  unreachable, !dbg !777

assert_ok10:                                      ; preds = %assert_ok
    #dbg_declare(ptr %page_size, !778, !DIExpression(), !779)
  %13 = load ptr, ptr %self, align 8, !dbg !779
  %ptradd = getelementptr inbounds i8, ptr %13, i64 32, !dbg !779
  %14 = load i64, ptr %ptradd, align 8
  store i64 %14, ptr %x11, align 8
  %15 = load i64, ptr %size, align 8, !dbg !779
  %add = add i64 %15, 8, !dbg !779
  %16 = load i64, ptr %alignment, align 8, !dbg !779
  %add12 = add i64 %add, %16, !dbg !779
  %17 = load i64, ptr %alignment, align 8, !dbg !779
  store i64 %17, ptr %x13, align 8
  %18 = load i64, ptr %x13, align 8, !dbg !780
  %neq14 = icmp ne i64 0, %18, !dbg !780
  br i1 %neq14, label %and.rhs15, label %and.phi19, !dbg !780

and.rhs15:                                        ; preds = %assert_ok10
  %19 = load i64, ptr %x13, align 8, !dbg !780
  %20 = load i64, ptr %x13, align 8, !dbg !780
  %sub16 = sub i64 %20, 1, !dbg !780
  %and17 = and i64 %19, %sub16, !dbg !780
  %eq18 = icmp eq i64 %and17, 0, !dbg !780
  br label %and.phi19, !dbg !780

and.phi19:                                        ; preds = %and.rhs15, %assert_ok10
  %val20 = phi i1 [ false, %assert_ok10 ], [ %eq18, %and.rhs15 ], !dbg !780
  br i1 %val20, label %assert_ok25, label %assert_fail21, !dbg !780

assert_fail21:                                    ; preds = %and.phi19
  store %"char[]" { ptr @.panic_msg.14, i64 51 }, ptr %indirectarg22, align 8
  store %"char[]" { ptr @.file.41, i64 16 }, ptr %indirectarg23, align 8
  store %"char[]" { ptr @.func.52, i64 10 }, ptr %indirectarg24, align 8
  %21 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %21(ptr align 8 %indirectarg22, ptr align 8 %indirectarg23, ptr align 8 %indirectarg24, i32 148) #6, !dbg !779
  unreachable, !dbg !779

assert_ok25:                                      ; preds = %and.phi19
  %22 = call i64 @std.core.mem.aligned_offset(i64 %add12, i64 %17), !dbg !779
  store i64 %22, ptr %.anon, align 8
  %23 = load i64, ptr %x11, align 8
  store i64 %23, ptr %a, align 8
  %24 = load i64, ptr %.anon, align 8
  store i64 %24, ptr %b, align 8
  %25 = load i64, ptr %a, align 8, !dbg !782
  %26 = load i64, ptr %b, align 8, !dbg !782
  %gt = icmp ugt i64 %25, %26, !dbg !782
  br i1 %gt, label %cond.lhs, label %cond.rhs, !dbg !782

cond.lhs:                                         ; preds = %assert_ok25
  %27 = load i64, ptr %x11, align 8, !dbg !785
  br label %cond.phi, !dbg !785

cond.rhs:                                         ; preds = %assert_ok25
  %28 = load i64, ptr %.anon, align 8, !dbg !785
  br label %cond.phi, !dbg !785

cond.phi:                                         ; preds = %cond.rhs, %cond.lhs
  %val26 = phi i64 [ %27, %cond.lhs ], [ %28, %cond.rhs ], !dbg !785
  store i64 %val26, ptr %page_size, align 8, !dbg !785
  %29 = load i64, ptr %page_size, align 8, !dbg !787
  %30 = load i64, ptr %size, align 8, !dbg !787
  %add27 = add i64 %30, 8, !dbg !787
  %gt28 = icmp ugt i64 %29, %add27, !dbg !787
  br i1 %gt28, label %assert_ok33, label %assert_fail29, !dbg !787

assert_fail29:                                    ; preds = %cond.phi
  store %"char[]" { ptr @.panic_msg.53, i64 60 }, ptr %indirectarg30, align 8
  store %"char[]" { ptr @.file.41, i64 16 }, ptr %indirectarg31, align 8
  store %"char[]" { ptr @.func.52, i64 10 }, ptr %indirectarg32, align 8
  %31 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %31(ptr align 8 %indirectarg30, ptr align 8 %indirectarg31, ptr align 8 %indirectarg32, i32 149) #6, !dbg !787
  unreachable, !dbg !787

assert_ok33:                                      ; preds = %cond.phi
    #dbg_declare(ptr %mem, !788, !DIExpression(), !789)
  %32 = load ptr, ptr %self, align 8, !dbg !789
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator, ptr align 8 %32, i32 16, i1 false)
  %33 = load i64, ptr %page_size, align 8
  store i64 %33, ptr %size34, align 8
  %34 = load i64, ptr %size34, align 8, !dbg !790
  %i2nb = icmp eq i64 %34, 0, !dbg !790
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !790

if.then:                                          ; preds = %assert_ok33
  store ptr null, ptr %blockret, align 8, !dbg !790
  br label %expr_block.exit, !dbg !790

if.exit:                                          ; preds = %assert_ok33
  %35 = load i64, ptr %size34, align 8, !dbg !792
  br i1 true, label %or.phi, label %or.rhs, !dbg !793

or.rhs:                                           ; preds = %if.exit
  store i64 0, ptr %x35, align 8
  %36 = load i64, ptr %x35, align 8, !dbg !794
  %neq36 = icmp ne i64 0, %36, !dbg !794
  br i1 %neq36, label %and.rhs37, label %and.phi41, !dbg !794

and.rhs37:                                        ; preds = %or.rhs
  %37 = load i64, ptr %x35, align 8, !dbg !794
  %38 = load i64, ptr %x35, align 8, !dbg !794
  %sub38 = sub i64 %38, 1, !dbg !794
  %and39 = and i64 %37, %sub38, !dbg !794
  %eq40 = icmp eq i64 %and39, 0, !dbg !794
  br label %and.phi41, !dbg !794

and.phi41:                                        ; preds = %and.rhs37, %or.rhs
  %val42 = phi i1 [ false, %or.rhs ], [ %eq40, %and.rhs37 ], !dbg !794
  br label %or.phi, !dbg !794

or.phi:                                           ; preds = %and.phi41, %if.exit
  %val43 = phi i1 [ true, %if.exit ], [ %val42, %and.phi41 ], !dbg !794
  br i1 %val43, label %assert_ok48, label %assert_fail44, !dbg !794

assert_fail44:                                    ; preds = %or.phi
  store %"char[]" { ptr @.panic_msg.11, i64 65 }, ptr %indirectarg45, align 8
  store %"char[]" { ptr @.file.24, i64 16 }, ptr %indirectarg46, align 8
  store %"char[]" { ptr @.func.52, i64 10 }, ptr %indirectarg47, align 8
  %39 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %39(ptr align 8 %indirectarg45, ptr align 8 %indirectarg46, ptr align 8 %indirectarg47, i32 86) #6, !dbg !792
  unreachable, !dbg !792

assert_ok48:                                      ; preds = %or.phi
  br i1 true, label %assert_ok53, label %assert_fail49, !dbg !792

assert_fail49:                                    ; preds = %assert_ok48
  store %"char[]" { ptr @.panic_msg.12, i64 80 }, ptr %indirectarg50, align 8
  store %"char[]" { ptr @.file.24, i64 16 }, ptr %indirectarg51, align 8
  store %"char[]" { ptr @.func.52, i64 10 }, ptr %indirectarg52, align 8
  %40 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %40(ptr align 8 %indirectarg50, ptr align 8 %indirectarg51, ptr align 8 %indirectarg52, i32 86) #6, !dbg !792
  unreachable, !dbg !792

assert_ok53:                                      ; preds = %assert_ok48
  %lt54 = icmp ult i64 0, %35, !dbg !792
  br i1 %lt54, label %assert_ok59, label %assert_fail55, !dbg !792

assert_fail55:                                    ; preds = %assert_ok53
  store %"char[]" { ptr @.panic_msg.25, i64 59 }, ptr %indirectarg56, align 8
  store %"char[]" { ptr @.file.24, i64 16 }, ptr %indirectarg57, align 8
  store %"char[]" { ptr @.func.52, i64 10 }, ptr %indirectarg58, align 8
  %41 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %41(ptr align 8 %indirectarg56, ptr align 8 %indirectarg57, ptr align 8 %indirectarg58, i32 86) #6, !dbg !792
  unreachable, !dbg !792

assert_ok59:                                      ; preds = %assert_ok53
  %ptradd60 = getelementptr inbounds i8, ptr %allocator, i64 8, !dbg !792
  %42 = load i64, ptr %ptradd60, align 8, !dbg !792
  %43 = inttoptr i64 %42 to ptr, !dbg !792
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !768
  %44 = icmp eq ptr %43, %type, !dbg !768
  br i1 %44, label %cache_hit, label %cache_miss, !dbg !768

cache_miss:                                       ; preds = %assert_ok59
  %ptradd61 = getelementptr inbounds i8, ptr %43, i64 16, !dbg !768
  %45 = load ptr, ptr %ptradd61, align 8, !dbg !768
  %46 = call ptr @.dyn_search(ptr %45, ptr @"$sel.acquire"), !dbg !768
  store ptr %46, ptr %.inlinecache, align 8, !dbg !768
  store ptr %43, ptr %.cachedtype, align 8, !dbg !768
  br label %47, !dbg !768

cache_hit:                                        ; preds = %assert_ok59
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !768
  br label %47, !dbg !768

47:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %46, %cache_miss ], !dbg !768
  %48 = icmp eq ptr %fn_phi, null, !dbg !768
  br i1 %48, label %missing_function, label %match, !dbg !768

missing_function:                                 ; preds = %47
  store %"char[]" { ptr @.panic_msg.26, i64 44 }, ptr %indirectarg62, align 8
  store %"char[]" { ptr @.file.24, i64 16 }, ptr %indirectarg63, align 8
  store %"char[]" { ptr @.func.52, i64 10 }, ptr %indirectarg64, align 8
  %49 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %49(ptr align 8 %indirectarg62, ptr align 8 %indirectarg63, ptr align 8 %indirectarg64, i32 86) #6, !dbg !792
  unreachable, !dbg !792

match:                                            ; preds = %47
  %50 = load ptr, ptr %allocator, align 8
  %51 = call i64 %fn_phi(ptr %retparam, ptr %50, i64 %35, i32 0, i64 0), !dbg !792
  %not_err = icmp eq i64 %51, 0, !dbg !792
  %52 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !792
  br i1 %52, label %after_check, label %assign_optional, !dbg !792

assign_optional:                                  ; preds = %match
  store i64 %51, ptr %error_var, align 8, !dbg !792
  br label %guard_block, !dbg !792

after_check:                                      ; preds = %match
  %53 = load ptr, ptr %retparam, align 8, !dbg !792
  store ptr %53, ptr %blockret, align 8, !dbg !792
  br label %expr_block.exit, !dbg !792

expr_block.exit:                                  ; preds = %after_check, %if.then
  br label %noerr_block, !dbg !792

guard_block:                                      ; preds = %assign_optional
  %54 = load i64, ptr %error_var, align 8, !dbg !792
  ret i64 %54, !dbg !792

noerr_block:                                      ; preds = %expr_block.exit
  %55 = load ptr, ptr %blockret, align 8, !dbg !792
  store ptr %55, ptr %mem, align 8, !dbg !792
    #dbg_declare(ptr %page, !796, !DIExpression(), !797)
  %56 = load ptr, ptr %self, align 8, !dbg !797
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator65, ptr align 8 %56, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator67, ptr align 8 %allocator65, i32 16, i1 false)
  store i64 40, ptr %size68, align 8
  %57 = load i64, ptr %size68, align 8, !dbg !798
  %i2nb70 = icmp eq i64 %57, 0, !dbg !798
  br i1 %i2nb70, label %if.then71, label %if.exit72, !dbg !798

if.then71:                                        ; preds = %noerr_block
  store ptr null, ptr %blockret69, align 8, !dbg !798
  br label %expr_block.exit118, !dbg !798

if.exit72:                                        ; preds = %noerr_block
  %58 = load i64, ptr %size68, align 8, !dbg !802
  br i1 true, label %or.phi82, label %or.rhs73, !dbg !803

or.rhs73:                                         ; preds = %if.exit72
  store i64 0, ptr %x74, align 8
  %59 = load i64, ptr %x74, align 8, !dbg !804
  %neq75 = icmp ne i64 0, %59, !dbg !804
  br i1 %neq75, label %and.rhs76, label %and.phi80, !dbg !804

and.rhs76:                                        ; preds = %or.rhs73
  %60 = load i64, ptr %x74, align 8, !dbg !804
  %61 = load i64, ptr %x74, align 8, !dbg !804
  %sub77 = sub i64 %61, 1, !dbg !804
  %and78 = and i64 %60, %sub77, !dbg !804
  %eq79 = icmp eq i64 %and78, 0, !dbg !804
  br label %and.phi80, !dbg !804

and.phi80:                                        ; preds = %and.rhs76, %or.rhs73
  %val81 = phi i1 [ false, %or.rhs73 ], [ %eq79, %and.rhs76 ], !dbg !804
  br label %or.phi82, !dbg !804

or.phi82:                                         ; preds = %and.phi80, %if.exit72
  %val83 = phi i1 [ true, %if.exit72 ], [ %val81, %and.phi80 ], !dbg !804
  br i1 %val83, label %assert_ok88, label %assert_fail84, !dbg !804

assert_fail84:                                    ; preds = %or.phi82
  store %"char[]" { ptr @.panic_msg.11, i64 65 }, ptr %indirectarg85, align 8
  store %"char[]" { ptr @.file.24, i64 16 }, ptr %indirectarg86, align 8
  store %"char[]" { ptr @.func.52, i64 10 }, ptr %indirectarg87, align 8
  %62 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %62(ptr align 8 %indirectarg85, ptr align 8 %indirectarg86, ptr align 8 %indirectarg87, i32 98) #6, !dbg !802
  unreachable, !dbg !802

assert_ok88:                                      ; preds = %or.phi82
  br i1 true, label %assert_ok93, label %assert_fail89, !dbg !802

assert_fail89:                                    ; preds = %assert_ok88
  store %"char[]" { ptr @.panic_msg.12, i64 80 }, ptr %indirectarg90, align 8
  store %"char[]" { ptr @.file.24, i64 16 }, ptr %indirectarg91, align 8
  store %"char[]" { ptr @.func.52, i64 10 }, ptr %indirectarg92, align 8
  %63 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %63(ptr align 8 %indirectarg90, ptr align 8 %indirectarg91, ptr align 8 %indirectarg92, i32 98) #6, !dbg !802
  unreachable, !dbg !802

assert_ok93:                                      ; preds = %assert_ok88
  %lt94 = icmp ult i64 0, %58, !dbg !802
  br i1 %lt94, label %assert_ok99, label %assert_fail95, !dbg !802

assert_fail95:                                    ; preds = %assert_ok93
  store %"char[]" { ptr @.panic_msg.25, i64 59 }, ptr %indirectarg96, align 8
  store %"char[]" { ptr @.file.24, i64 16 }, ptr %indirectarg97, align 8
  store %"char[]" { ptr @.func.52, i64 10 }, ptr %indirectarg98, align 8
  %64 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %64(ptr align 8 %indirectarg96, ptr align 8 %indirectarg97, ptr align 8 %indirectarg98, i32 98) #6, !dbg !802
  unreachable, !dbg !802

assert_ok99:                                      ; preds = %assert_ok93
  %ptradd100 = getelementptr inbounds i8, ptr %allocator67, i64 8, !dbg !802
  %65 = load i64, ptr %ptradd100, align 8, !dbg !802
  %66 = inttoptr i64 %65 to ptr, !dbg !802
  %type103 = load ptr, ptr %.cachedtype102, align 8, !dbg !768
  %67 = icmp eq ptr %66, %type103, !dbg !768
  br i1 %67, label %cache_hit106, label %cache_miss104, !dbg !768

cache_miss104:                                    ; preds = %assert_ok99
  %ptradd105 = getelementptr inbounds i8, ptr %66, i64 16, !dbg !768
  %68 = load ptr, ptr %ptradd105, align 8, !dbg !768
  %69 = call ptr @.dyn_search(ptr %68, ptr @"$sel.acquire"), !dbg !768
  store ptr %69, ptr %.inlinecache101, align 8, !dbg !768
  store ptr %66, ptr %.cachedtype102, align 8, !dbg !768
  br label %70, !dbg !768

cache_hit106:                                     ; preds = %assert_ok99
  %cache_hit_fn107 = load ptr, ptr %.inlinecache101, align 8, !dbg !768
  br label %70, !dbg !768

70:                                               ; preds = %cache_hit106, %cache_miss104
  %fn_phi108 = phi ptr [ %cache_hit_fn107, %cache_hit106 ], [ %69, %cache_miss104 ], !dbg !768
  %71 = icmp eq ptr %fn_phi108, null, !dbg !768
  br i1 %71, label %missing_function109, label %match113, !dbg !768

missing_function109:                              ; preds = %70
  store %"char[]" { ptr @.panic_msg.26, i64 44 }, ptr %indirectarg110, align 8
  store %"char[]" { ptr @.file.24, i64 16 }, ptr %indirectarg111, align 8
  store %"char[]" { ptr @.func.52, i64 10 }, ptr %indirectarg112, align 8
  %72 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %72(ptr align 8 %indirectarg110, ptr align 8 %indirectarg111, ptr align 8 %indirectarg112, i32 98) #6, !dbg !802
  unreachable, !dbg !802

match113:                                         ; preds = %70
  %73 = load ptr, ptr %allocator67, align 8
  %74 = call i64 %fn_phi108(ptr %retparam114, ptr %73, i64 %58, i32 1, i64 0), !dbg !802
  %not_err115 = icmp eq i64 %74, 0, !dbg !802
  %75 = call i1 @llvm.expect.i1(i1 %not_err115, i1 true), !dbg !802
  br i1 %75, label %after_check117, label %assign_optional116, !dbg !802

assign_optional116:                               ; preds = %match113
  store i64 %74, ptr %page.f, align 8, !dbg !802
  br label %after_assign, !dbg !802

after_check117:                                   ; preds = %match113
  %76 = load ptr, ptr %retparam114, align 8, !dbg !802
  store ptr %76, ptr %blockret69, align 8, !dbg !802
  br label %expr_block.exit118, !dbg !802

expr_block.exit118:                               ; preds = %after_check117, %if.then71
  %77 = load ptr, ptr %blockret69, align 8, !dbg !802
  store ptr %77, ptr %page, align 8, !dbg !802
  store i64 0, ptr %page.f, align 8, !dbg !802
  br label %after_assign, !dbg !802

after_assign:                                     ; preds = %expr_block.exit118, %assign_optional116
    #dbg_declare(ptr %err, !806, !DIExpression(), !807)
  br label %testblock, !dbg !807

testblock:                                        ; preds = %after_assign
  %optval = load i64, ptr %page.f, align 8, !dbg !807
  %not_err119 = icmp eq i64 %optval, 0, !dbg !807
  %78 = call i1 @llvm.expect.i1(i1 %not_err119, i1 true), !dbg !807
  br i1 %78, label %after_check121, label %assign_optional120, !dbg !807

assign_optional120:                               ; preds = %testblock
  store i64 %optval, ptr %err, align 8, !dbg !807
  br label %end_block, !dbg !807

after_check121:                                   ; preds = %testblock
  store i64 0, ptr %err, align 8, !dbg !807
  br label %end_block, !dbg !807

end_block:                                        ; preds = %after_check121, %assign_optional120
  %79 = load i64, ptr %err, align 8, !dbg !807
  %i2b = icmp ne i64 %79, 0, !dbg !807
  br i1 %i2b, label %if.then122, label %if.exit148, !dbg !807

if.then122:                                       ; preds = %end_block
  %80 = load ptr, ptr %self, align 8, !dbg !808
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator123, ptr align 8 %80, i32 16, i1 false)
  %81 = load ptr, ptr %mem, align 8
  store ptr %81, ptr %ptr, align 8
  %82 = load ptr, ptr %ptr, align 8, !dbg !810
  %i2nb124 = icmp eq ptr %82, null, !dbg !810
  br i1 %i2nb124, label %if.then125, label %if.exit126, !dbg !810

if.then125:                                       ; preds = %if.then122
  br label %expr_block.exit147, !dbg !810

if.exit126:                                       ; preds = %if.then122
  %83 = load ptr, ptr %ptr, align 8, !dbg !812
  %neq127 = icmp ne ptr %83, null, !dbg !812
  br i1 %neq127, label %assert_ok132, label %assert_fail128, !dbg !812

assert_fail128:                                   ; preds = %if.exit126
  store %"char[]" { ptr @.panic_msg.28, i64 75 }, ptr %indirectarg129, align 8
  store %"char[]" { ptr @.file.24, i64 16 }, ptr %indirectarg130, align 8
  store %"char[]" { ptr @.func.52, i64 10 }, ptr %indirectarg131, align 8
  %84 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %84(ptr align 8 %indirectarg129, ptr align 8 %indirectarg130, ptr align 8 %indirectarg131, i32 123) #6, !dbg !812
  unreachable, !dbg !812

assert_ok132:                                     ; preds = %if.exit126
  %ptradd133 = getelementptr inbounds i8, ptr %allocator123, i64 8, !dbg !812
  %85 = load i64, ptr %ptradd133, align 8, !dbg !812
  %86 = inttoptr i64 %85 to ptr, !dbg !812
  %type136 = load ptr, ptr %.cachedtype135, align 8, !dbg !768
  %87 = icmp eq ptr %86, %type136, !dbg !768
  br i1 %87, label %cache_hit139, label %cache_miss137, !dbg !768

cache_miss137:                                    ; preds = %assert_ok132
  %ptradd138 = getelementptr inbounds i8, ptr %86, i64 16, !dbg !768
  %88 = load ptr, ptr %ptradd138, align 8, !dbg !768
  %89 = call ptr @.dyn_search(ptr %88, ptr @"$sel.release"), !dbg !768
  store ptr %89, ptr %.inlinecache134, align 8, !dbg !768
  store ptr %86, ptr %.cachedtype135, align 8, !dbg !768
  br label %90, !dbg !768

cache_hit139:                                     ; preds = %assert_ok132
  %cache_hit_fn140 = load ptr, ptr %.inlinecache134, align 8, !dbg !768
  br label %90, !dbg !768

90:                                               ; preds = %cache_hit139, %cache_miss137
  %fn_phi141 = phi ptr [ %cache_hit_fn140, %cache_hit139 ], [ %89, %cache_miss137 ], !dbg !768
  %91 = icmp eq ptr %fn_phi141, null, !dbg !768
  br i1 %91, label %missing_function142, label %match146, !dbg !768

missing_function142:                              ; preds = %90
  store %"char[]" { ptr @.panic_msg.29, i64 44 }, ptr %indirectarg143, align 8
  store %"char[]" { ptr @.file.24, i64 16 }, ptr %indirectarg144, align 8
  store %"char[]" { ptr @.func.52, i64 10 }, ptr %indirectarg145, align 8
  %92 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %92(ptr align 8 %indirectarg143, ptr align 8 %indirectarg144, ptr align 8 %indirectarg145, i32 123) #6, !dbg !812
  unreachable, !dbg !812

match146:                                         ; preds = %90
  %93 = load ptr, ptr %allocator123, align 8, !dbg !812
  call void %fn_phi141(ptr %93, ptr %83, i8 zeroext 0), !dbg !812
  br label %expr_block.exit147, !dbg !812

expr_block.exit147:                               ; preds = %match146, %if.then125
  %94 = load i64, ptr %err, align 8, !dbg !813
  ret i64 %94, !dbg !813

if.exit148:                                       ; preds = %end_block
  %95 = load ptr, ptr %page, align 8, !dbg !814
  %96 = load ptr, ptr %mem, align 8, !dbg !814
  store ptr %96, ptr %95, align 8, !dbg !814
    #dbg_declare(ptr %mem_start, !815, !DIExpression(), !816)
  %97 = load ptr, ptr %mem, align 8, !dbg !816
  %ptradd_any = getelementptr i8, ptr %97, i64 8, !dbg !816
  store ptr %ptradd_any, ptr %ptr149, align 8
  %98 = load i64, ptr %alignment, align 8
  store i64 %98, ptr %alignment150, align 8
  %99 = load ptr, ptr %ptr149, align 8, !dbg !817
  %ptrxi = ptrtoint ptr %99 to i64, !dbg !817
  %100 = load i64, ptr %alignment150, align 8, !dbg !817
  store i64 %100, ptr %x151, align 8
  %101 = load i64, ptr %x151, align 8, !dbg !819
  %neq152 = icmp ne i64 0, %101, !dbg !819
  br i1 %neq152, label %and.rhs153, label %and.phi157, !dbg !819

and.rhs153:                                       ; preds = %if.exit148
  %102 = load i64, ptr %x151, align 8, !dbg !819
  %103 = load i64, ptr %x151, align 8, !dbg !819
  %sub154 = sub i64 %103, 1, !dbg !819
  %and155 = and i64 %102, %sub154, !dbg !819
  %eq156 = icmp eq i64 %and155, 0, !dbg !819
  br label %and.phi157, !dbg !819

and.phi157:                                       ; preds = %and.rhs153, %if.exit148
  %val158 = phi i1 [ false, %if.exit148 ], [ %eq156, %and.rhs153 ], !dbg !819
  br i1 %val158, label %assert_ok163, label %assert_fail159, !dbg !819

assert_fail159:                                   ; preds = %and.phi157
  store %"char[]" { ptr @.panic_msg.14, i64 51 }, ptr %indirectarg160, align 8
  store %"char[]" { ptr @.file.15, i64 6 }, ptr %indirectarg161, align 8
  store %"char[]" { ptr @.func.52, i64 10 }, ptr %indirectarg162, align 8
  %104 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %104(ptr align 8 %indirectarg160, ptr align 8 %indirectarg161, ptr align 8 %indirectarg162, i32 313) #6, !dbg !817
  unreachable, !dbg !817

assert_ok163:                                     ; preds = %and.phi157
  %105 = call i64 @std.core.mem.aligned_offset(i64 %ptrxi, i64 %100), !dbg !817
  %intptr = inttoptr i64 %105 to ptr, !dbg !817
  store ptr %intptr, ptr %mem_start, align 8, !dbg !817
  %106 = load ptr, ptr %mem_start, align 8, !dbg !821
  %107 = load i64, ptr %size, align 8, !dbg !821
  %ptradd_any164 = getelementptr i8, ptr %106, i64 %107, !dbg !821
  %108 = load ptr, ptr %mem, align 8, !dbg !821
  %109 = load i64, ptr %page_size, align 8, !dbg !821
  %ptradd_any165 = getelementptr i8, ptr %108, i64 %109, !dbg !821
  %lt166 = icmp ult ptr %ptradd_any164, %ptradd_any165, !dbg !821
  br i1 %lt166, label %assert_ok171, label %assert_fail167, !dbg !821

assert_fail167:                                   ; preds = %assert_ok163
  store %"char[]" { ptr @.panic_msg.54, i64 51 }, ptr %indirectarg168, align 8
  store %"char[]" { ptr @.file.41, i64 16 }, ptr %indirectarg169, align 8
  store %"char[]" { ptr @.func.52, i64 10 }, ptr %indirectarg170, align 8
  %110 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %110(ptr align 8 %indirectarg168, ptr align 8 %indirectarg169, ptr align 8 %indirectarg170, i32 160) #6, !dbg !821
  unreachable, !dbg !821

assert_ok171:                                     ; preds = %assert_ok163
    #dbg_declare(ptr %chunk, !822, !DIExpression(), !827)
  %111 = load ptr, ptr %mem_start, align 8, !dbg !827
  %ptradd_any172 = getelementptr i8, ptr %111, i64 -8, !dbg !827
  store ptr %ptradd_any172, ptr %chunk, align 8, !dbg !827
  %112 = load ptr, ptr %chunk, align 8, !dbg !828
  %113 = load i64, ptr %size, align 8, !dbg !828
  store i64 %113, ptr %112, align 8, !dbg !828
  %114 = load ptr, ptr %self, align 8, !dbg !829
  %ptradd173 = getelementptr inbounds i8, ptr %114, i64 16, !dbg !829
  %115 = load ptr, ptr %ptradd173, align 8, !dbg !829
  %116 = load ptr, ptr %page, align 8, !dbg !829
  %ptradd174 = getelementptr inbounds i8, ptr %116, i64 8, !dbg !829
  store ptr %115, ptr %ptradd174, align 8, !dbg !829
  %117 = load ptr, ptr %page, align 8, !dbg !830
  %ptradd175 = getelementptr inbounds i8, ptr %117, i64 16, !dbg !830
  %118 = load i64, ptr %page_size, align 8, !dbg !830
  store i64 %118, ptr %ptradd175, align 8, !dbg !830
  %119 = load ptr, ptr %mem_start, align 8, !dbg !831
  %120 = load i64, ptr %size, align 8, !dbg !831
  %ptradd_any176 = getelementptr i8, ptr %119, i64 %120, !dbg !831
  %121 = load ptr, ptr %page, align 8, !dbg !831
  %122 = load ptr, ptr %121, align 8, !dbg !831
  %123 = ptrtoint ptr %122 to i64, !dbg !831
  %124 = ptrtoint ptr %ptradd_any176 to i64, !dbg !831
  %125 = sub i64 %124, %123, !dbg !831
  %126 = sdiv exact i64 %125, 1, !dbg !831
  %127 = load ptr, ptr %page, align 8, !dbg !831
  %ptradd177 = getelementptr inbounds i8, ptr %127, i64 24, !dbg !831
  store i64 %126, ptr %ptradd177, align 8, !dbg !831
  %128 = load ptr, ptr %self, align 8, !dbg !832
  %ptradd178 = getelementptr inbounds i8, ptr %128, i64 16, !dbg !832
  %129 = load ptr, ptr %page, align 8, !dbg !832
  store ptr %129, ptr %ptradd178, align 8, !dbg !832
  %130 = load ptr, ptr %page, align 8, !dbg !833
  %ptradd179 = getelementptr inbounds i8, ptr %130, i64 32, !dbg !833
  %131 = load ptr, ptr %mem_start, align 8, !dbg !833
  store ptr %131, ptr %ptradd179, align 8, !dbg !833
  %132 = load ptr, ptr %mem_start, align 8, !dbg !834
  store ptr %132, ptr %0, align 8, !dbg !834
  ret i64 0, !dbg !834

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.41, i64 16 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.52, i64 10 }, ptr %indirectarg2, align 8
  %133 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %133(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 145) #6, !dbg !770
  unreachable, !dbg !770
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.core.mem.allocator.DynamicArenaAllocator.acquire(ptr %0, ptr %1, i64 %2, i32 %3, i64 %4) #0 comdat !dbg !835 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %size = alloca i64, align 8
  %init_type = alloca i32, align 4
  %alignment = alloca i64, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %x = alloca i64, align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %page = alloca ptr, align 8
  %ptr = alloca ptr, align 8
  %error_var = alloca i64, align 8
  %x24 = alloca i64, align 8
  %indirectarg33 = alloca %"char[]", align 8
  %indirectarg34 = alloca %"char[]", align 8
  %indirectarg35 = alloca %"char[]", align 8
  %indirectarg39 = alloca %"char[]", align 8
  %indirectarg40 = alloca %"char[]", align 8
  %indirectarg41 = alloca %"char[]", align 8
  %retparam = alloca ptr, align 8
  %start = alloca ptr, align 8
  %ptr45 = alloca ptr, align 8
  %alignment46 = alloca i64, align 8
  %x47 = alloca i64, align 8
  %indirectarg56 = alloca %"char[]", align 8
  %indirectarg57 = alloca %"char[]", align 8
  %indirectarg58 = alloca %"char[]", align 8
  %new_used = alloca i64, align 8
  %ptr69 = alloca ptr, align 8
  %alignment70 = alloca i64, align 8
  %x72 = alloca i64, align 8
  %indirectarg81 = alloca %"char[]", align 8
  %indirectarg82 = alloca %"char[]", align 8
  %indirectarg83 = alloca %"char[]", align 8
  %error_var96 = alloca i64, align 8
  %x97 = alloca i64, align 8
  %indirectarg106 = alloca %"char[]", align 8
  %indirectarg107 = alloca %"char[]", align 8
  %indirectarg108 = alloca %"char[]", align 8
  %indirectarg112 = alloca %"char[]", align 8
  %indirectarg113 = alloca %"char[]", align 8
  %indirectarg114 = alloca %"char[]", align 8
  %retparam116 = alloca ptr, align 8
  %indirectarg129 = alloca %"char[]", align 8
  %indirectarg130 = alloca %"char[]", align 8
  %indirectarg131 = alloca %"char[]", align 8
  %chunk = alloca ptr, align 8
  %dst = alloca ptr, align 8
  %len = alloca i64, align 8
  %reterr = alloca i64, align 8
  %5 = icmp eq ptr %1, null, !dbg !838
  %6 = call i1 @llvm.expect.i1(i1 %5, i1 false), !dbg !838
  br i1 %6, label %panic, label %checkok, !dbg !838

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !839, !DIExpression(), !840)
  store i64 %2, ptr %size, align 8
    #dbg_declare(ptr %size, !841, !DIExpression(), !840)
  store i32 %3, ptr %init_type, align 4
    #dbg_declare(ptr %init_type, !842, !DIExpression(), !840)
  store i64 %4, ptr %alignment, align 8
    #dbg_declare(ptr %alignment, !843, !DIExpression(), !840)
  %7 = load i64, ptr %size, align 8, !dbg !844
  %lt = icmp ult i64 0, %7, !dbg !844
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !844

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.50, i64 57 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.file.41, i64 16 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg5, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, i32 172) #6, !dbg !844
  unreachable, !dbg !844

assert_ok:                                        ; preds = %checkok
  %9 = load i64, ptr %alignment, align 8, !dbg !846
  %i2nb = icmp eq i64 %9, 0, !dbg !846
  br i1 %i2nb, label %or.phi, label %or.rhs, !dbg !846

or.rhs:                                           ; preds = %assert_ok
  %10 = load i64, ptr %alignment, align 8
  store i64 %10, ptr %x, align 8
  %11 = load i64, ptr %x, align 8, !dbg !847
  %neq = icmp ne i64 0, %11, !dbg !847
  br i1 %neq, label %and.rhs, label %and.phi, !dbg !847

and.rhs:                                          ; preds = %or.rhs
  %12 = load i64, ptr %x, align 8, !dbg !847
  %13 = load i64, ptr %x, align 8, !dbg !847
  %sub = sub i64 %13, 1, !dbg !847
  %and = and i64 %12, %sub, !dbg !847
  %eq = icmp eq i64 %and, 0, !dbg !847
  br label %and.phi, !dbg !847

and.phi:                                          ; preds = %and.rhs, %or.rhs
  %val = phi i1 [ false, %or.rhs ], [ %eq, %and.rhs ], !dbg !847
  br label %or.phi, !dbg !847

or.phi:                                           ; preds = %and.phi, %assert_ok
  %val6 = phi i1 [ true, %assert_ok ], [ %val, %and.phi ], !dbg !847
  br i1 %val6, label %assert_ok11, label %assert_fail7, !dbg !847

assert_fail7:                                     ; preds = %or.phi
  store %"char[]" { ptr @.panic_msg.11, i64 65 }, ptr %indirectarg8, align 8
  store %"char[]" { ptr @.file.41, i64 16 }, ptr %indirectarg9, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg10, align 8
  %14 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %14(ptr align 8 %indirectarg8, ptr align 8 %indirectarg9, ptr align 8 %indirectarg10, i32 173) #6, !dbg !846
  unreachable, !dbg !846

assert_ok11:                                      ; preds = %or.phi
  %15 = load i64, ptr %alignment, align 8, !dbg !849
  %16 = call i64 @std.core.mem.allocator.alignment_for_allocation(i64 %15) #7, !dbg !849
  store i64 %16, ptr %alignment, align 8, !dbg !849
    #dbg_declare(ptr %page, !850, !DIExpression(), !851)
  %17 = load ptr, ptr %self, align 8, !dbg !851
  %ptradd = getelementptr inbounds i8, ptr %17, i64 16, !dbg !851
  %18 = load ptr, ptr %ptradd, align 8, !dbg !851
  store ptr %18, ptr %page, align 8, !dbg !851
    #dbg_declare(ptr %ptr, !852, !DIExpression(), !853)
  %19 = load ptr, ptr %page, align 8, !dbg !854
  %i2nb12 = icmp eq ptr %19, null, !dbg !854
  br i1 %i2nb12, label %and.rhs13, label %and.phi15, !dbg !854

and.rhs13:                                        ; preds = %assert_ok11
  %20 = load ptr, ptr %self, align 8, !dbg !854
  %ptradd14 = getelementptr inbounds i8, ptr %20, i64 24, !dbg !854
  %21 = load ptr, ptr %ptradd14, align 8, !dbg !854
  %i2b = icmp ne ptr %21, null, !dbg !854
  br label %and.phi15, !dbg !854

and.phi15:                                        ; preds = %and.rhs13, %assert_ok11
  %val16 = phi i1 [ false, %assert_ok11 ], [ %i2b, %and.rhs13 ], !dbg !854
  br i1 %val16, label %if.then, label %if.exit, !dbg !854

if.then:                                          ; preds = %and.phi15
  %22 = load ptr, ptr %self, align 8, !dbg !857
  %ptradd17 = getelementptr inbounds i8, ptr %22, i64 24, !dbg !857
  %23 = load ptr, ptr %ptradd17, align 8, !dbg !857
  store ptr %23, ptr %page, align 8, !dbg !857
  %24 = load ptr, ptr %self, align 8, !dbg !857
  %ptradd18 = getelementptr inbounds i8, ptr %24, i64 16, !dbg !857
  store ptr %23, ptr %ptradd18, align 8, !dbg !857
  %25 = load ptr, ptr %page, align 8, !dbg !859
  %ptradd19 = getelementptr inbounds i8, ptr %25, i64 8, !dbg !859
  %26 = load ptr, ptr %ptradd19, align 8, !dbg !859
  %27 = load ptr, ptr %self, align 8, !dbg !859
  %ptradd20 = getelementptr inbounds i8, ptr %27, i64 24, !dbg !859
  store ptr %26, ptr %ptradd20, align 8, !dbg !859
  %28 = load ptr, ptr %page, align 8, !dbg !860
  %ptradd21 = getelementptr inbounds i8, ptr %28, i64 8, !dbg !860
  store ptr null, ptr %ptradd21, align 8, !dbg !860
  br label %if.exit, !dbg !860

if.exit:                                          ; preds = %if.then, %and.phi15
  %29 = load ptr, ptr %page, align 8, !dbg !861
  %i2nb22 = icmp eq ptr %29, null, !dbg !861
  br i1 %i2nb22, label %if.then23, label %if.exit43, !dbg !861

if.then23:                                        ; preds = %if.exit
  %30 = load ptr, ptr %self, align 8, !dbg !862
  %31 = load i64, ptr %size, align 8, !dbg !862
  %32 = load i64, ptr %alignment, align 8, !dbg !862
  store i64 %32, ptr %x24, align 8
  %33 = load i64, ptr %x24, align 8, !dbg !864
  %neq25 = icmp ne i64 0, %33, !dbg !864
  br i1 %neq25, label %and.rhs26, label %and.phi30, !dbg !864

and.rhs26:                                        ; preds = %if.then23
  %34 = load i64, ptr %x24, align 8, !dbg !864
  %35 = load i64, ptr %x24, align 8, !dbg !864
  %sub27 = sub i64 %35, 1, !dbg !864
  %and28 = and i64 %34, %sub27, !dbg !864
  %eq29 = icmp eq i64 %and28, 0, !dbg !864
  br label %and.phi30, !dbg !864

and.phi30:                                        ; preds = %and.rhs26, %if.then23
  %val31 = phi i1 [ false, %if.then23 ], [ %eq29, %and.rhs26 ], !dbg !864
  br i1 %val31, label %assert_ok36, label %assert_fail32, !dbg !864

assert_fail32:                                    ; preds = %and.phi30
  store %"char[]" { ptr @.panic_msg.14, i64 51 }, ptr %indirectarg33, align 8
  store %"char[]" { ptr @.file.41, i64 16 }, ptr %indirectarg34, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg35, align 8
  %36 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %36(ptr align 8 %indirectarg33, ptr align 8 %indirectarg34, ptr align 8 %indirectarg35, i32 192) #6, !dbg !862
  unreachable, !dbg !862

assert_ok36:                                      ; preds = %and.phi30
  %lt37 = icmp ult i64 0, %31, !dbg !862
  br i1 %lt37, label %assert_ok42, label %assert_fail38, !dbg !862

assert_fail38:                                    ; preds = %assert_ok36
  store %"char[]" { ptr @.panic_msg.13, i64 29 }, ptr %indirectarg39, align 8
  store %"char[]" { ptr @.file.41, i64 16 }, ptr %indirectarg40, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg41, align 8
  %37 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %37(ptr align 8 %indirectarg39, ptr align 8 %indirectarg40, ptr align 8 %indirectarg41, i32 192) #6, !dbg !862
  unreachable, !dbg !862

assert_ok42:                                      ; preds = %assert_ok36
  %38 = call i64 @std.core.mem.allocator.DynamicArenaAllocator._alloc_new(ptr %retparam, ptr %30, i64 %31, i64 %32), !dbg !862
  %not_err = icmp eq i64 %38, 0, !dbg !862
  %39 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !862
  br i1 %39, label %after_check, label %assign_optional, !dbg !862

assign_optional:                                  ; preds = %assert_ok42
  store i64 %38, ptr %error_var, align 8, !dbg !862
  br label %guard_block, !dbg !862

after_check:                                      ; preds = %assert_ok42
  br label %noerr_block, !dbg !862

guard_block:                                      ; preds = %assign_optional
  %40 = load i64, ptr %error_var, align 8, !dbg !862
  ret i64 %40, !dbg !862

noerr_block:                                      ; preds = %after_check
  %41 = load ptr, ptr %retparam, align 8, !dbg !862
  store ptr %41, ptr %ptr, align 8, !dbg !862
  br label %loop.exit, !dbg !866

if.exit43:                                        ; preds = %if.exit
    #dbg_declare(ptr %start, !867, !DIExpression(), !868)
  %42 = load ptr, ptr %page, align 8, !dbg !868
  %43 = load ptr, ptr %42, align 8, !dbg !868
  %44 = load ptr, ptr %page, align 8, !dbg !868
  %ptradd44 = getelementptr inbounds i8, ptr %44, i64 24, !dbg !868
  %45 = load i64, ptr %ptradd44, align 8, !dbg !868
  %add = add i64 %45, 8, !dbg !868
  %ptradd_any = getelementptr i8, ptr %43, i64 %add, !dbg !868
  store ptr %ptradd_any, ptr %ptr45, align 8
  %46 = load i64, ptr %alignment, align 8
  store i64 %46, ptr %alignment46, align 8
  %47 = load ptr, ptr %ptr45, align 8, !dbg !869
  %ptrxi = ptrtoint ptr %47 to i64, !dbg !869
  %48 = load i64, ptr %alignment46, align 8, !dbg !869
  store i64 %48, ptr %x47, align 8
  %49 = load i64, ptr %x47, align 8, !dbg !871
  %neq48 = icmp ne i64 0, %49, !dbg !871
  br i1 %neq48, label %and.rhs49, label %and.phi53, !dbg !871

and.rhs49:                                        ; preds = %if.exit43
  %50 = load i64, ptr %x47, align 8, !dbg !871
  %51 = load i64, ptr %x47, align 8, !dbg !871
  %sub50 = sub i64 %51, 1, !dbg !871
  %and51 = and i64 %50, %sub50, !dbg !871
  %eq52 = icmp eq i64 %and51, 0, !dbg !871
  br label %and.phi53, !dbg !871

and.phi53:                                        ; preds = %and.rhs49, %if.exit43
  %val54 = phi i1 [ false, %if.exit43 ], [ %eq52, %and.rhs49 ], !dbg !871
  br i1 %val54, label %assert_ok59, label %assert_fail55, !dbg !871

assert_fail55:                                    ; preds = %and.phi53
  store %"char[]" { ptr @.panic_msg.14, i64 51 }, ptr %indirectarg56, align 8
  store %"char[]" { ptr @.file.15, i64 6 }, ptr %indirectarg57, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg58, align 8
  %52 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %52(ptr align 8 %indirectarg56, ptr align 8 %indirectarg57, ptr align 8 %indirectarg58, i32 313) #6, !dbg !869
  unreachable, !dbg !869

assert_ok59:                                      ; preds = %and.phi53
  %53 = call i64 @std.core.mem.aligned_offset(i64 %ptrxi, i64 %48), !dbg !869
  %intptr = inttoptr i64 %53 to ptr, !dbg !869
  store ptr %intptr, ptr %start, align 8, !dbg !869
    #dbg_declare(ptr %new_used, !873, !DIExpression(), !874)
  %54 = load ptr, ptr %start, align 8, !dbg !874
  %55 = load ptr, ptr %page, align 8, !dbg !874
  %56 = load ptr, ptr %55, align 8, !dbg !874
  %57 = ptrtoint ptr %56 to i64, !dbg !874
  %58 = ptrtoint ptr %54 to i64, !dbg !874
  %59 = sub i64 %58, %57, !dbg !874
  %60 = sdiv exact i64 %59, 1, !dbg !874
  %61 = load i64, ptr %size, align 8, !dbg !874
  %add60 = add i64 %60, %61, !dbg !874
  store i64 %add60, ptr %new_used, align 8, !dbg !874
  %62 = load i64, ptr %new_used, align 8, !dbg !875
  %63 = load ptr, ptr %page, align 8, !dbg !875
  %ptradd61 = getelementptr inbounds i8, ptr %63, i64 16, !dbg !875
  %64 = load i64, ptr %ptradd61, align 8, !dbg !875
  %gt = icmp ugt i64 %62, %64, !dbg !875
  br i1 %gt, label %if.then62, label %if.exit122, !dbg !875

if.then62:                                        ; preds = %assert_ok59
  %65 = load ptr, ptr %self, align 8, !dbg !876
  %ptradd63 = getelementptr inbounds i8, ptr %65, i64 24, !dbg !876
  %66 = load ptr, ptr %ptradd63, align 8, !dbg !876
  store ptr %66, ptr %page, align 8, !dbg !876
  %i2b64 = icmp ne ptr %66, null, !dbg !876
  br i1 %i2b64, label %if.then65, label %if.exit95, !dbg !876

if.then65:                                        ; preds = %if.then62
  %67 = load ptr, ptr %page, align 8, !dbg !878
  %68 = load ptr, ptr %67, align 8, !dbg !878
  %69 = load ptr, ptr %page, align 8, !dbg !878
  %ptradd66 = getelementptr inbounds i8, ptr %69, i64 24, !dbg !878
  %70 = load i64, ptr %ptradd66, align 8, !dbg !878
  %add67 = add i64 %70, 8, !dbg !878
  %ptradd_any68 = getelementptr i8, ptr %68, i64 %add67, !dbg !878
  store ptr %ptradd_any68, ptr %ptr69, align 8
  %71 = load i64, ptr %alignment, align 8
  store i64 %71, ptr %alignment70, align 8
  %72 = load ptr, ptr %ptr69, align 8, !dbg !880
  %ptrxi71 = ptrtoint ptr %72 to i64, !dbg !880
  %73 = load i64, ptr %alignment70, align 8, !dbg !880
  store i64 %73, ptr %x72, align 8
  %74 = load i64, ptr %x72, align 8, !dbg !882
  %neq73 = icmp ne i64 0, %74, !dbg !882
  br i1 %neq73, label %and.rhs74, label %and.phi78, !dbg !882

and.rhs74:                                        ; preds = %if.then65
  %75 = load i64, ptr %x72, align 8, !dbg !882
  %76 = load i64, ptr %x72, align 8, !dbg !882
  %sub75 = sub i64 %76, 1, !dbg !882
  %and76 = and i64 %75, %sub75, !dbg !882
  %eq77 = icmp eq i64 %and76, 0, !dbg !882
  br label %and.phi78, !dbg !882

and.phi78:                                        ; preds = %and.rhs74, %if.then65
  %val79 = phi i1 [ false, %if.then65 ], [ %eq77, %and.rhs74 ], !dbg !882
  br i1 %val79, label %assert_ok84, label %assert_fail80, !dbg !882

assert_fail80:                                    ; preds = %and.phi78
  store %"char[]" { ptr @.panic_msg.14, i64 51 }, ptr %indirectarg81, align 8
  store %"char[]" { ptr @.file.15, i64 6 }, ptr %indirectarg82, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg83, align 8
  %77 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %77(ptr align 8 %indirectarg81, ptr align 8 %indirectarg82, ptr align 8 %indirectarg83, i32 313) #6, !dbg !880
  unreachable, !dbg !880

assert_ok84:                                      ; preds = %and.phi78
  %78 = call i64 @std.core.mem.aligned_offset(i64 %ptrxi71, i64 %73), !dbg !880
  %intptr85 = inttoptr i64 %78 to ptr, !dbg !880
  store ptr %intptr85, ptr %start, align 8, !dbg !880
  %79 = load ptr, ptr %start, align 8, !dbg !884
  %80 = load i64, ptr %size, align 8, !dbg !884
  %ptradd_any86 = getelementptr i8, ptr %79, i64 %80, !dbg !884
  %81 = load ptr, ptr %page, align 8, !dbg !884
  %82 = load ptr, ptr %81, align 8, !dbg !884
  %83 = ptrtoint ptr %82 to i64, !dbg !884
  %84 = ptrtoint ptr %ptradd_any86 to i64, !dbg !884
  %85 = sub i64 %84, %83, !dbg !884
  %86 = sdiv exact i64 %85, 1, !dbg !884
  store i64 %86, ptr %new_used, align 8, !dbg !884
  %87 = load ptr, ptr %page, align 8, !dbg !885
  %ptradd87 = getelementptr inbounds i8, ptr %87, i64 16, !dbg !885
  %88 = load i64, ptr %ptradd87, align 8, !dbg !885
  %89 = load i64, ptr %new_used, align 8, !dbg !885
  %ge = icmp uge i64 %88, %89, !dbg !885
  br i1 %ge, label %if.then88, label %if.exit94, !dbg !885

if.then88:                                        ; preds = %assert_ok84
  %90 = load ptr, ptr %page, align 8, !dbg !886
  %ptradd89 = getelementptr inbounds i8, ptr %90, i64 8, !dbg !886
  %91 = load ptr, ptr %ptradd89, align 8, !dbg !886
  %92 = load ptr, ptr %self, align 8, !dbg !886
  %ptradd90 = getelementptr inbounds i8, ptr %92, i64 24, !dbg !886
  store ptr %91, ptr %ptradd90, align 8, !dbg !886
  %93 = load ptr, ptr %self, align 8, !dbg !888
  %ptradd91 = getelementptr inbounds i8, ptr %93, i64 16, !dbg !888
  %94 = load ptr, ptr %ptradd91, align 8, !dbg !888
  %95 = load ptr, ptr %page, align 8, !dbg !888
  %ptradd92 = getelementptr inbounds i8, ptr %95, i64 8, !dbg !888
  store ptr %94, ptr %ptradd92, align 8, !dbg !888
  %96 = load ptr, ptr %self, align 8, !dbg !889
  %ptradd93 = getelementptr inbounds i8, ptr %96, i64 16, !dbg !889
  %97 = load ptr, ptr %page, align 8, !dbg !889
  store ptr %97, ptr %ptradd93, align 8, !dbg !889
  br label %if.exit122, !dbg !890

if.exit94:                                        ; preds = %assert_ok84
  br label %if.exit95, !dbg !890

if.exit95:                                        ; preds = %if.exit94, %if.then62
  %98 = load ptr, ptr %self, align 8, !dbg !891
  %99 = load i64, ptr %size, align 8, !dbg !891
  %100 = load i64, ptr %alignment, align 8, !dbg !891
  store i64 %100, ptr %x97, align 8
  %101 = load i64, ptr %x97, align 8, !dbg !892
  %neq98 = icmp ne i64 0, %101, !dbg !892
  br i1 %neq98, label %and.rhs99, label %and.phi103, !dbg !892

and.rhs99:                                        ; preds = %if.exit95
  %102 = load i64, ptr %x97, align 8, !dbg !892
  %103 = load i64, ptr %x97, align 8, !dbg !892
  %sub100 = sub i64 %103, 1, !dbg !892
  %and101 = and i64 %102, %sub100, !dbg !892
  %eq102 = icmp eq i64 %and101, 0, !dbg !892
  br label %and.phi103, !dbg !892

and.phi103:                                       ; preds = %and.rhs99, %if.exit95
  %val104 = phi i1 [ false, %if.exit95 ], [ %eq102, %and.rhs99 ], !dbg !892
  br i1 %val104, label %assert_ok109, label %assert_fail105, !dbg !892

assert_fail105:                                   ; preds = %and.phi103
  store %"char[]" { ptr @.panic_msg.14, i64 51 }, ptr %indirectarg106, align 8
  store %"char[]" { ptr @.file.41, i64 16 }, ptr %indirectarg107, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg108, align 8
  %104 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %104(ptr align 8 %indirectarg106, ptr align 8 %indirectarg107, ptr align 8 %indirectarg108, i32 211) #6, !dbg !891
  unreachable, !dbg !891

assert_ok109:                                     ; preds = %and.phi103
  %lt110 = icmp ult i64 0, %99, !dbg !891
  br i1 %lt110, label %assert_ok115, label %assert_fail111, !dbg !891

assert_fail111:                                   ; preds = %assert_ok109
  store %"char[]" { ptr @.panic_msg.13, i64 29 }, ptr %indirectarg112, align 8
  store %"char[]" { ptr @.file.41, i64 16 }, ptr %indirectarg113, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg114, align 8
  %105 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %105(ptr align 8 %indirectarg112, ptr align 8 %indirectarg113, ptr align 8 %indirectarg114, i32 211) #6, !dbg !891
  unreachable, !dbg !891

assert_ok115:                                     ; preds = %assert_ok109
  %106 = call i64 @std.core.mem.allocator.DynamicArenaAllocator._alloc_new(ptr %retparam116, ptr %98, i64 %99, i64 %100), !dbg !891
  %not_err117 = icmp eq i64 %106, 0, !dbg !891
  %107 = call i1 @llvm.expect.i1(i1 %not_err117, i1 true), !dbg !891
  br i1 %107, label %after_check119, label %assign_optional118, !dbg !891

assign_optional118:                               ; preds = %assert_ok115
  store i64 %106, ptr %error_var96, align 8, !dbg !891
  br label %guard_block120, !dbg !891

after_check119:                                   ; preds = %assert_ok115
  br label %noerr_block121, !dbg !891

guard_block120:                                   ; preds = %assign_optional118
  %108 = load i64, ptr %error_var96, align 8, !dbg !891
  ret i64 %108, !dbg !891

noerr_block121:                                   ; preds = %after_check119
  %109 = load ptr, ptr %retparam116, align 8, !dbg !891
  store ptr %109, ptr %ptr, align 8, !dbg !891
  br label %loop.exit, !dbg !894

if.exit122:                                       ; preds = %if.then88, %assert_ok59
  %110 = load ptr, ptr %page, align 8, !dbg !895
  %ptradd123 = getelementptr inbounds i8, ptr %110, i64 24, !dbg !895
  %111 = load i64, ptr %new_used, align 8, !dbg !895
  store i64 %111, ptr %ptradd123, align 8, !dbg !895
  %112 = load ptr, ptr %start, align 8, !dbg !896
  %113 = load i64, ptr %size, align 8, !dbg !896
  %ptradd_any124 = getelementptr i8, ptr %112, i64 %113, !dbg !896
  %114 = load ptr, ptr %page, align 8, !dbg !896
  %115 = load ptr, ptr %114, align 8, !dbg !896
  %116 = load ptr, ptr %page, align 8, !dbg !896
  %ptradd125 = getelementptr inbounds i8, ptr %116, i64 24, !dbg !896
  %117 = load i64, ptr %ptradd125, align 8, !dbg !896
  %ptradd_any126 = getelementptr i8, ptr %115, i64 %117, !dbg !896
  %eq127 = icmp eq ptr %ptradd_any124, %ptradd_any126, !dbg !896
  br i1 %eq127, label %assert_ok132, label %assert_fail128, !dbg !896

assert_fail128:                                   ; preds = %if.exit122
  store %"char[]" { ptr @.panic_msg.55, i64 56 }, ptr %indirectarg129, align 8
  store %"char[]" { ptr @.file.41, i64 16 }, ptr %indirectarg130, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg131, align 8
  %118 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %118(ptr align 8 %indirectarg129, ptr align 8 %indirectarg130, ptr align 8 %indirectarg131, i32 215) #6, !dbg !896
  unreachable, !dbg !896

assert_ok132:                                     ; preds = %if.exit122
  %119 = load ptr, ptr %start, align 8, !dbg !897
  store ptr %119, ptr %ptr, align 8, !dbg !897
    #dbg_declare(ptr %chunk, !898, !DIExpression(), !899)
  %120 = load ptr, ptr %ptr, align 8, !dbg !899
  %ptradd_any133 = getelementptr i8, ptr %120, i64 -8, !dbg !899
  store ptr %ptradd_any133, ptr %chunk, align 8, !dbg !899
  %121 = load ptr, ptr %chunk, align 8, !dbg !900
  %122 = load i64, ptr %size, align 8, !dbg !900
  store i64 %122, ptr %121, align 8, !dbg !900
  br label %loop.exit, !dbg !900

loop.exit:                                        ; preds = %assert_ok132, %noerr_block121, %noerr_block
  %123 = load i32, ptr %init_type, align 4, !dbg !901
  %eq134 = icmp eq i32 %123, 1, !dbg !901
  br i1 %eq134, label %if.then135, label %if.exit136, !dbg !901

if.then135:                                       ; preds = %loop.exit
  %124 = load ptr, ptr %ptr, align 8
  store ptr %124, ptr %dst, align 8
  %125 = load i64, ptr %size, align 8
  store i64 %125, ptr %len, align 8
  %126 = load ptr, ptr %dst, align 8, !dbg !902
  %127 = load i64, ptr %len, align 8, !dbg !902
  call void @llvm.memset.p0.i64(ptr align 16 %126, i8 0, i64 %127, i1 false), !dbg !902
  br label %if.exit136, !dbg !902

if.exit136:                                       ; preds = %if.then135, %loop.exit
  %128 = load ptr, ptr %ptr, align 8, !dbg !904
  store ptr %128, ptr %0, align 8, !dbg !904
  ret i64 0, !dbg !904

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.41, i64 16 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg2, align 8
  %129 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %129(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 176) #6, !dbg !840
  unreachable, !dbg !840
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.core.mem.allocator.SimpleHeapAllocator.init(ptr %0, ptr %1) #0 comdat !dbg !905 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %allocator = alloca ptr, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg7 = alloca %"char[]", align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !928
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !928
  br i1 %3, label %panic, label %checkok, !dbg !928

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !929, !DIExpression(), !930)
  store ptr %1, ptr %allocator, align 8
    #dbg_declare(ptr %allocator, !931, !DIExpression(), !930)
  %4 = load ptr, ptr %allocator, align 8, !dbg !932
  %neq = icmp ne ptr %4, null, !dbg !932
  br i1 %neq, label %assert_ok, label %assert_fail, !dbg !932

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.57, i64 85 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.file.56, i64 17 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg5, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, i32 22) #6, !dbg !932
  unreachable, !dbg !932

assert_ok:                                        ; preds = %checkok
  %6 = load ptr, ptr %self, align 8, !dbg !934
  %ptradd = getelementptr inbounds i8, ptr %6, i64 8, !dbg !934
  %7 = load ptr, ptr %ptradd, align 8, !dbg !934
  %i2nb = icmp eq ptr %7, null, !dbg !934
  br i1 %i2nb, label %assert_ok10, label %assert_fail6, !dbg !934

assert_fail6:                                     ; preds = %assert_ok
  store %"char[]" { ptr @.panic_msg.58, i64 84 }, ptr %indirectarg7, align 8
  store %"char[]" { ptr @.file.56, i64 17 }, ptr %indirectarg8, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg9, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8(ptr align 8 %indirectarg7, ptr align 8 %indirectarg8, ptr align 8 %indirectarg9, i32 23) #6, !dbg !934
  unreachable, !dbg !934

assert_ok10:                                      ; preds = %assert_ok
  %9 = load ptr, ptr %self, align 8, !dbg !935
  %10 = load ptr, ptr %allocator, align 8, !dbg !935
  store ptr %10, ptr %9, align 8, !dbg !935
  %11 = load ptr, ptr %self, align 8, !dbg !936
  %ptradd11 = getelementptr inbounds i8, ptr %11, i64 8, !dbg !936
  store ptr null, ptr %ptradd11, align 8, !dbg !936
  ret void, !dbg !936

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.56, i64 17 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg2, align 8
  %12 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %12(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 25) #6, !dbg !930
  unreachable, !dbg !930
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.core.mem.allocator.SimpleHeapAllocator.acquire(ptr %0, ptr %1, i64 %2, i32 %3, i64 %4) #0 comdat !dbg !937 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %size = alloca i64, align 8
  %init_type = alloca i32, align 4
  %alignment = alloca i64, align 8
  %reterr = alloca i64, align 8
  %bytes = alloca i64, align 8
  %alignment3 = alloca i64, align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg7 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %indirectarg15 = alloca %"char[]", align 8
  %indirectarg16 = alloca %"char[]", align 8
  %indirectarg17 = alloca %"char[]", align 8
  %header = alloca i64, align 8
  %alignsize = alloca i64, align 8
  %data = alloca ptr, align 8
  %error_var = alloca i64, align 8
  %retparam = alloca ptr, align 8
  %mem = alloca ptr, align 8
  %ptr = alloca ptr, align 8
  %alignment22 = alloca i64, align 8
  %x = alloca i64, align 8
  %indirectarg25 = alloca %"char[]", align 8
  %indirectarg26 = alloca %"char[]", align 8
  %indirectarg27 = alloca %"char[]", align 8
  %desc = alloca ptr, align 8
  %indirectarg31 = alloca %"char[]", align 8
  %indirectarg32 = alloca %"char[]", align 8
  %indirectarg33 = alloca %"char[]", align 8
  %.assign_list = alloca %AlignedBlock, align 8
  %indirectarg36 = alloca %"char[]", align 8
  %indirectarg37 = alloca %"char[]", align 8
  %indirectarg38 = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr41 = alloca i64, align 8
  %indirectarg42 = alloca %"char[]", align 8
  %indirectarg43 = alloca %"char[]", align 8
  %indirectarg44 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg46 = alloca %"any[]", align 8
  %retparam48 = alloca ptr, align 8
  %reterr54 = alloca i64, align 8
  %bytes57 = alloca i64, align 8
  %alignment58 = alloca i64, align 8
  %indirectarg61 = alloca %"char[]", align 8
  %indirectarg62 = alloca %"char[]", align 8
  %indirectarg63 = alloca %"char[]", align 8
  %indirectarg67 = alloca %"char[]", align 8
  %indirectarg68 = alloca %"char[]", align 8
  %indirectarg69 = alloca %"char[]", align 8
  %indirectarg73 = alloca %"char[]", align 8
  %indirectarg74 = alloca %"char[]", align 8
  %indirectarg75 = alloca %"char[]", align 8
  %header80 = alloca i64, align 8
  %alignsize82 = alloca i64, align 8
  %data84 = alloca ptr, align 8
  %error_var85 = alloca i64, align 8
  %retparam86 = alloca ptr, align 8
  %mem92 = alloca ptr, align 8
  %ptr94 = alloca ptr, align 8
  %alignment95 = alloca i64, align 8
  %x97 = alloca i64, align 8
  %indirectarg106 = alloca %"char[]", align 8
  %indirectarg107 = alloca %"char[]", align 8
  %indirectarg108 = alloca %"char[]", align 8
  %desc111 = alloca ptr, align 8
  %indirectarg115 = alloca %"char[]", align 8
  %indirectarg116 = alloca %"char[]", align 8
  %indirectarg117 = alloca %"char[]", align 8
  %.assign_list119 = alloca %AlignedBlock, align 8
  %indirectarg123 = alloca %"char[]", align 8
  %indirectarg124 = alloca %"char[]", align 8
  %indirectarg125 = alloca %"char[]", align 8
  %taddr128 = alloca i64, align 8
  %taddr129 = alloca i64, align 8
  %indirectarg130 = alloca %"char[]", align 8
  %indirectarg131 = alloca %"char[]", align 8
  %indirectarg132 = alloca %"char[]", align 8
  %varargslots133 = alloca [2 x %any], align 16
  %indirectarg136 = alloca %"any[]", align 8
  %retparam139 = alloca ptr, align 8
  %5 = icmp eq ptr %1, null, !dbg !940
  %6 = call i1 @llvm.expect.i1(i1 %5, i1 false), !dbg !940
  br i1 %6, label %panic, label %checkok, !dbg !940

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !941, !DIExpression(), !942)
  store i64 %2, ptr %size, align 8
    #dbg_declare(ptr %size, !943, !DIExpression(), !942)
  store i32 %3, ptr %init_type, align 4
    #dbg_declare(ptr %init_type, !944, !DIExpression(), !942)
  store i64 %4, ptr %alignment, align 8
    #dbg_declare(ptr %alignment, !945, !DIExpression(), !942)
  %7 = load i32, ptr %init_type, align 4, !dbg !946
  %eq = icmp eq i32 %7, 1, !dbg !946
  br i1 %eq, label %if.then, label %if.exit53, !dbg !946

if.then:                                          ; preds = %checkok
  %8 = load i64, ptr %alignment, align 8, !dbg !947
  %lt = icmp ult i64 0, %8, !dbg !947
  br i1 %lt, label %cond.lhs, label %cond.rhs, !dbg !947

cond.lhs:                                         ; preds = %if.then
  %9 = load i64, ptr %size, align 8
  store i64 %9, ptr %bytes, align 8
  %10 = load i64, ptr %alignment, align 8
  store i64 %10, ptr %alignment3, align 8
  %11 = load i64, ptr %bytes, align 8, !dbg !949
  %lt4 = icmp ult i64 0, %11, !dbg !952
  br i1 %lt4, label %assert_ok, label %assert_fail, !dbg !952

assert_fail:                                      ; preds = %cond.lhs
  store %"char[]" { ptr @.panic_msg.59, i64 30 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.file.56, i64 17 }, ptr %indirectarg6, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg7, align 8
  %12 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %12(ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, ptr align 8 %indirectarg7, i32 35) #6, !dbg !952
  unreachable, !dbg !952

assert_ok:                                        ; preds = %cond.lhs
  %13 = load i64, ptr %alignment3, align 8, !dbg !953
  %lt8 = icmp ult i64 0, %13, !dbg !952
  br i1 %lt8, label %assert_ok13, label %assert_fail9, !dbg !952

assert_fail9:                                     ; preds = %assert_ok
  store %"char[]" { ptr @.panic_msg.60, i64 34 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.file.56, i64 17 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg12, align 8
  %14 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %14(ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, i32 35) #6, !dbg !952
  unreachable, !dbg !952

assert_ok13:                                      ; preds = %assert_ok
  %15 = load i64, ptr %bytes, align 8, !dbg !954
  %ge = icmp uge i64 9223372036854775807, %15, !dbg !952
  br i1 %ge, label %assert_ok18, label %assert_fail14, !dbg !952

assert_fail14:                                    ; preds = %assert_ok13
  store %"char[]" { ptr @.panic_msg.61, i64 37 }, ptr %indirectarg15, align 8
  store %"char[]" { ptr @.file.56, i64 17 }, ptr %indirectarg16, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg17, align 8
  %16 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %16(ptr align 8 %indirectarg15, ptr align 8 %indirectarg16, ptr align 8 %indirectarg17, i32 35) #6, !dbg !952
  unreachable, !dbg !952

assert_ok18:                                      ; preds = %assert_ok13
  %17 = load i64, ptr %alignment3, align 8, !dbg !955
  %lt19 = icmp ult i64 %17, 8, !dbg !955
  br i1 %lt19, label %if.then20, label %if.exit, !dbg !955

if.then20:                                        ; preds = %assert_ok18
  store i64 8, ptr %alignment3, align 8, !dbg !955
  br label %if.exit, !dbg !955

if.exit:                                          ; preds = %if.then20, %assert_ok18
    #dbg_declare(ptr %header, !956, !DIExpression(), !957)
  %18 = load i64, ptr %alignment3, align 8, !dbg !957
  %add = add i64 16, %18, !dbg !957
  store i64 %add, ptr %header, align 8, !dbg !957
    #dbg_declare(ptr %alignsize, !958, !DIExpression(), !959)
  %19 = load i64, ptr %bytes, align 8, !dbg !959
  %20 = load i64, ptr %header, align 8, !dbg !959
  %add21 = add i64 %19, %20, !dbg !959
  store i64 %add21, ptr %alignsize, align 8, !dbg !959
    #dbg_declare(ptr %data, !960, !DIExpression(), !961)
  %21 = load ptr, ptr %self, align 8
  %22 = load i64, ptr %alignsize, align 8
  %23 = call i64 @std.core.mem.allocator.SimpleHeapAllocator._calloc(ptr %retparam, ptr %21, i64 %22), !dbg !961
  %not_err = icmp eq i64 %23, 0, !dbg !961
  %24 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !961
  br i1 %24, label %after_check, label %assign_optional, !dbg !961

assign_optional:                                  ; preds = %if.exit
  store i64 %23, ptr %error_var, align 8, !dbg !961
  br label %guard_block, !dbg !961

after_check:                                      ; preds = %if.exit
  br label %noerr_block, !dbg !961

guard_block:                                      ; preds = %assign_optional
  %25 = load i64, ptr %error_var, align 8, !dbg !961
  store i64 %25, ptr %reterr, align 8, !dbg !961
  br label %err_retblock, !dbg !961

noerr_block:                                      ; preds = %after_check
  %26 = load ptr, ptr %retparam, align 8, !dbg !961
  store ptr %26, ptr %data, align 8, !dbg !961
    #dbg_declare(ptr %mem, !962, !DIExpression(), !963)
  %27 = load ptr, ptr %data, align 8, !dbg !963
  %ptradd_any = getelementptr i8, ptr %27, i64 16, !dbg !963
  store ptr %ptradd_any, ptr %ptr, align 8
  %28 = load i64, ptr %alignment3, align 8
  store i64 %28, ptr %alignment22, align 8
  %29 = load ptr, ptr %ptr, align 8, !dbg !964
  %ptrxi = ptrtoint ptr %29 to i64, !dbg !964
  %30 = load i64, ptr %alignment22, align 8, !dbg !964
  store i64 %30, ptr %x, align 8
  %31 = load i64, ptr %x, align 8, !dbg !966
  %neq = icmp ne i64 0, %31, !dbg !966
  br i1 %neq, label %and.rhs, label %and.phi, !dbg !966

and.rhs:                                          ; preds = %noerr_block
  %32 = load i64, ptr %x, align 8, !dbg !966
  %33 = load i64, ptr %x, align 8, !dbg !966
  %sub = sub i64 %33, 1, !dbg !966
  %and = and i64 %32, %sub, !dbg !966
  %eq23 = icmp eq i64 %and, 0, !dbg !966
  br label %and.phi, !dbg !966

and.phi:                                          ; preds = %and.rhs, %noerr_block
  %val = phi i1 [ false, %noerr_block ], [ %eq23, %and.rhs ], !dbg !966
  br i1 %val, label %assert_ok28, label %assert_fail24, !dbg !966

assert_fail24:                                    ; preds = %and.phi
  store %"char[]" { ptr @.panic_msg.14, i64 51 }, ptr %indirectarg25, align 8
  store %"char[]" { ptr @.file.15, i64 6 }, ptr %indirectarg26, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg27, align 8
  %34 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %34(ptr align 8 %indirectarg25, ptr align 8 %indirectarg26, ptr align 8 %indirectarg27, i32 313) #6, !dbg !964
  unreachable, !dbg !964

assert_ok28:                                      ; preds = %and.phi
  %35 = call i64 @std.core.mem.aligned_offset(i64 %ptrxi, i64 %30), !dbg !964
  %intptr = inttoptr i64 %35 to ptr, !dbg !964
  store ptr %intptr, ptr %mem, align 8, !dbg !964
    #dbg_declare(ptr %desc, !968, !DIExpression(), !974)
  %36 = load ptr, ptr %mem, align 8, !dbg !974
  %ptradd_any29 = getelementptr i8, ptr %36, i64 -16, !dbg !974
  store ptr %ptradd_any29, ptr %desc, align 8, !dbg !974
  %37 = load ptr, ptr %mem, align 8, !dbg !975
  %38 = load ptr, ptr %data, align 8, !dbg !975
  %gt = icmp ugt ptr %37, %38, !dbg !975
  br i1 %gt, label %assert_ok34, label %assert_fail30, !dbg !975

assert_fail30:                                    ; preds = %assert_ok28
  store %"char[]" { ptr @.panic_msg.62, i64 27 }, ptr %indirectarg31, align 8
  store %"char[]" { ptr @.file.24, i64 16 }, ptr %indirectarg32, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg33, align 8
  %39 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %39(ptr align 8 %indirectarg31, ptr align 8 %indirectarg32, ptr align 8 %indirectarg33, i32 358) #6, !dbg !975
  unreachable, !dbg !975

assert_ok34:                                      ; preds = %assert_ok28
  %40 = load i64, ptr %bytes, align 8, !dbg !976
  store i64 %40, ptr %.assign_list, align 8, !dbg !976
  %ptradd = getelementptr inbounds i8, ptr %.assign_list, i64 8, !dbg !976
  %41 = load ptr, ptr %data, align 8, !dbg !976
  store ptr %41, ptr %ptradd, align 8, !dbg !976
  %42 = load ptr, ptr %desc, align 8, !dbg !976
  %checknull = icmp eq ptr %42, null, !dbg !976
  %43 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !976
  br i1 %43, label %panic35, label %checkok39, !dbg !976

checkok39:                                        ; preds = %assert_ok34
  %44 = ptrtoint ptr %42 to i64, !dbg !976
  %45 = urem i64 %44, 8, !dbg !976
  %46 = icmp ne i64 %45, 0, !dbg !976
  %47 = call i1 @llvm.expect.i1(i1 %46, i1 false), !dbg !976
  br i1 %47, label %panic40, label %checkok47, !dbg !976

checkok47:                                        ; preds = %checkok39
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %42, ptr align 8 %.assign_list, i32 16, i1 false), !dbg !976
  %48 = load ptr, ptr %mem, align 8, !dbg !977
  br label %cond.phi, !dbg !977

cond.rhs:                                         ; preds = %if.then
  %49 = load ptr, ptr %self, align 8
  %50 = load i64, ptr %size, align 8
  %51 = call i64 @std.core.mem.allocator.SimpleHeapAllocator._calloc(ptr %retparam48, ptr %49, i64 %50), !dbg !947
  %not_err49 = icmp eq i64 %51, 0, !dbg !947
  %52 = call i1 @llvm.expect.i1(i1 %not_err49, i1 true), !dbg !947
  br i1 %52, label %after_check51, label %assign_optional50, !dbg !947

assign_optional50:                                ; preds = %cond.rhs
  store i64 %51, ptr %reterr, align 8, !dbg !947
  br label %err_retblock, !dbg !947

after_check51:                                    ; preds = %cond.rhs
  %53 = load ptr, ptr %retparam48, align 8, !dbg !947
  br label %cond.phi, !dbg !947

cond.phi:                                         ; preds = %after_check51, %checkok47
  %val52 = phi ptr [ %48, %checkok47 ], [ %53, %after_check51 ], !dbg !947
  store ptr %val52, ptr %0, align 8, !dbg !947
  ret i64 0, !dbg !947

err_retblock:                                     ; preds = %assign_optional50, %guard_block
  %54 = load i64, ptr %reterr, align 8, !dbg !947
  ret i64 %54, !dbg !947

if.exit53:                                        ; preds = %checkok
  %55 = load i64, ptr %alignment, align 8, !dbg !978
  %lt55 = icmp ult i64 0, %55, !dbg !978
  br i1 %lt55, label %cond.lhs56, label %cond.rhs138, !dbg !978

cond.lhs56:                                       ; preds = %if.exit53
  %56 = load i64, ptr %size, align 8
  store i64 %56, ptr %bytes57, align 8
  %57 = load i64, ptr %alignment, align 8
  store i64 %57, ptr %alignment58, align 8
  %58 = load i64, ptr %bytes57, align 8, !dbg !979
  %lt59 = icmp ult i64 0, %58, !dbg !982
  br i1 %lt59, label %assert_ok64, label %assert_fail60, !dbg !982

assert_fail60:                                    ; preds = %cond.lhs56
  store %"char[]" { ptr @.panic_msg.59, i64 30 }, ptr %indirectarg61, align 8
  store %"char[]" { ptr @.file.56, i64 17 }, ptr %indirectarg62, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg63, align 8
  %59 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %59(ptr align 8 %indirectarg61, ptr align 8 %indirectarg62, ptr align 8 %indirectarg63, i32 37) #6, !dbg !982
  unreachable, !dbg !982

assert_ok64:                                      ; preds = %cond.lhs56
  %60 = load i64, ptr %alignment58, align 8, !dbg !983
  %lt65 = icmp ult i64 0, %60, !dbg !982
  br i1 %lt65, label %assert_ok70, label %assert_fail66, !dbg !982

assert_fail66:                                    ; preds = %assert_ok64
  store %"char[]" { ptr @.panic_msg.60, i64 34 }, ptr %indirectarg67, align 8
  store %"char[]" { ptr @.file.56, i64 17 }, ptr %indirectarg68, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg69, align 8
  %61 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %61(ptr align 8 %indirectarg67, ptr align 8 %indirectarg68, ptr align 8 %indirectarg69, i32 37) #6, !dbg !982
  unreachable, !dbg !982

assert_ok70:                                      ; preds = %assert_ok64
  %62 = load i64, ptr %bytes57, align 8, !dbg !984
  %ge71 = icmp uge i64 9223372036854775807, %62, !dbg !982
  br i1 %ge71, label %assert_ok76, label %assert_fail72, !dbg !982

assert_fail72:                                    ; preds = %assert_ok70
  store %"char[]" { ptr @.panic_msg.61, i64 37 }, ptr %indirectarg73, align 8
  store %"char[]" { ptr @.file.56, i64 17 }, ptr %indirectarg74, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg75, align 8
  %63 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %63(ptr align 8 %indirectarg73, ptr align 8 %indirectarg74, ptr align 8 %indirectarg75, i32 37) #6, !dbg !982
  unreachable, !dbg !982

assert_ok76:                                      ; preds = %assert_ok70
  %64 = load i64, ptr %alignment58, align 8, !dbg !985
  %lt77 = icmp ult i64 %64, 8, !dbg !985
  br i1 %lt77, label %if.then78, label %if.exit79, !dbg !985

if.then78:                                        ; preds = %assert_ok76
  store i64 8, ptr %alignment58, align 8, !dbg !985
  br label %if.exit79, !dbg !985

if.exit79:                                        ; preds = %if.then78, %assert_ok76
    #dbg_declare(ptr %header80, !986, !DIExpression(), !987)
  %65 = load i64, ptr %alignment58, align 8, !dbg !987
  %add81 = add i64 16, %65, !dbg !987
  store i64 %add81, ptr %header80, align 8, !dbg !987
    #dbg_declare(ptr %alignsize82, !988, !DIExpression(), !989)
  %66 = load i64, ptr %bytes57, align 8, !dbg !989
  %67 = load i64, ptr %header80, align 8, !dbg !989
  %add83 = add i64 %66, %67, !dbg !989
  store i64 %add83, ptr %alignsize82, align 8, !dbg !989
    #dbg_declare(ptr %data84, !990, !DIExpression(), !991)
  %68 = load ptr, ptr %self, align 8
  %69 = load i64, ptr %alignsize82, align 8
  %70 = call i64 @std.core.mem.allocator.SimpleHeapAllocator._alloc(ptr %retparam86, ptr %68, i64 %69), !dbg !991
  %not_err87 = icmp eq i64 %70, 0, !dbg !991
  %71 = call i1 @llvm.expect.i1(i1 %not_err87, i1 true), !dbg !991
  br i1 %71, label %after_check89, label %assign_optional88, !dbg !991

assign_optional88:                                ; preds = %if.exit79
  store i64 %70, ptr %error_var85, align 8, !dbg !991
  br label %guard_block90, !dbg !991

after_check89:                                    ; preds = %if.exit79
  br label %noerr_block91, !dbg !991

guard_block90:                                    ; preds = %assign_optional88
  %72 = load i64, ptr %error_var85, align 8, !dbg !991
  store i64 %72, ptr %reterr54, align 8, !dbg !991
  br label %err_retblock145, !dbg !991

noerr_block91:                                    ; preds = %after_check89
  %73 = load ptr, ptr %retparam86, align 8, !dbg !991
  store ptr %73, ptr %data84, align 8, !dbg !991
    #dbg_declare(ptr %mem92, !992, !DIExpression(), !993)
  %74 = load ptr, ptr %data84, align 8, !dbg !993
  %ptradd_any93 = getelementptr i8, ptr %74, i64 16, !dbg !993
  store ptr %ptradd_any93, ptr %ptr94, align 8
  %75 = load i64, ptr %alignment58, align 8
  store i64 %75, ptr %alignment95, align 8
  %76 = load ptr, ptr %ptr94, align 8, !dbg !994
  %ptrxi96 = ptrtoint ptr %76 to i64, !dbg !994
  %77 = load i64, ptr %alignment95, align 8, !dbg !994
  store i64 %77, ptr %x97, align 8
  %78 = load i64, ptr %x97, align 8, !dbg !996
  %neq98 = icmp ne i64 0, %78, !dbg !996
  br i1 %neq98, label %and.rhs99, label %and.phi103, !dbg !996

and.rhs99:                                        ; preds = %noerr_block91
  %79 = load i64, ptr %x97, align 8, !dbg !996
  %80 = load i64, ptr %x97, align 8, !dbg !996
  %sub100 = sub i64 %80, 1, !dbg !996
  %and101 = and i64 %79, %sub100, !dbg !996
  %eq102 = icmp eq i64 %and101, 0, !dbg !996
  br label %and.phi103, !dbg !996

and.phi103:                                       ; preds = %and.rhs99, %noerr_block91
  %val104 = phi i1 [ false, %noerr_block91 ], [ %eq102, %and.rhs99 ], !dbg !996
  br i1 %val104, label %assert_ok109, label %assert_fail105, !dbg !996

assert_fail105:                                   ; preds = %and.phi103
  store %"char[]" { ptr @.panic_msg.14, i64 51 }, ptr %indirectarg106, align 8
  store %"char[]" { ptr @.file.15, i64 6 }, ptr %indirectarg107, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg108, align 8
  %81 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %81(ptr align 8 %indirectarg106, ptr align 8 %indirectarg107, ptr align 8 %indirectarg108, i32 313) #6, !dbg !994
  unreachable, !dbg !994

assert_ok109:                                     ; preds = %and.phi103
  %82 = call i64 @std.core.mem.aligned_offset(i64 %ptrxi96, i64 %77), !dbg !994
  %intptr110 = inttoptr i64 %82 to ptr, !dbg !994
  store ptr %intptr110, ptr %mem92, align 8, !dbg !994
    #dbg_declare(ptr %desc111, !998, !DIExpression(), !999)
  %83 = load ptr, ptr %mem92, align 8, !dbg !999
  %ptradd_any112 = getelementptr i8, ptr %83, i64 -16, !dbg !999
  store ptr %ptradd_any112, ptr %desc111, align 8, !dbg !999
  %84 = load ptr, ptr %mem92, align 8, !dbg !1000
  %85 = load ptr, ptr %data84, align 8, !dbg !1000
  %gt113 = icmp ugt ptr %84, %85, !dbg !1000
  br i1 %gt113, label %assert_ok118, label %assert_fail114, !dbg !1000

assert_fail114:                                   ; preds = %assert_ok109
  store %"char[]" { ptr @.panic_msg.62, i64 27 }, ptr %indirectarg115, align 8
  store %"char[]" { ptr @.file.24, i64 16 }, ptr %indirectarg116, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg117, align 8
  %86 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %86(ptr align 8 %indirectarg115, ptr align 8 %indirectarg116, ptr align 8 %indirectarg117, i32 358) #6, !dbg !1000
  unreachable, !dbg !1000

assert_ok118:                                     ; preds = %assert_ok109
  %87 = load i64, ptr %bytes57, align 8, !dbg !1001
  store i64 %87, ptr %.assign_list119, align 8, !dbg !1001
  %ptradd120 = getelementptr inbounds i8, ptr %.assign_list119, i64 8, !dbg !1001
  %88 = load ptr, ptr %data84, align 8, !dbg !1001
  store ptr %88, ptr %ptradd120, align 8, !dbg !1001
  %89 = load ptr, ptr %desc111, align 8, !dbg !1001
  %checknull121 = icmp eq ptr %89, null, !dbg !1001
  %90 = call i1 @llvm.expect.i1(i1 %checknull121, i1 false), !dbg !1001
  br i1 %90, label %panic122, label %checkok126, !dbg !1001

checkok126:                                       ; preds = %assert_ok118
  %91 = ptrtoint ptr %89 to i64, !dbg !1001
  %92 = urem i64 %91, 8, !dbg !1001
  %93 = icmp ne i64 %92, 0, !dbg !1001
  %94 = call i1 @llvm.expect.i1(i1 %93, i1 false), !dbg !1001
  br i1 %94, label %panic127, label %checkok137, !dbg !1001

checkok137:                                       ; preds = %checkok126
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %89, ptr align 8 %.assign_list119, i32 16, i1 false), !dbg !1001
  %95 = load ptr, ptr %mem92, align 8, !dbg !1002
  br label %cond.phi143, !dbg !1002

cond.rhs138:                                      ; preds = %if.exit53
  %96 = load ptr, ptr %self, align 8
  %97 = load i64, ptr %size, align 8
  %98 = call i64 @std.core.mem.allocator.SimpleHeapAllocator._alloc(ptr %retparam139, ptr %96, i64 %97), !dbg !978
  %not_err140 = icmp eq i64 %98, 0, !dbg !978
  %99 = call i1 @llvm.expect.i1(i1 %not_err140, i1 true), !dbg !978
  br i1 %99, label %after_check142, label %assign_optional141, !dbg !978

assign_optional141:                               ; preds = %cond.rhs138
  store i64 %98, ptr %reterr54, align 8, !dbg !978
  br label %err_retblock145, !dbg !978

after_check142:                                   ; preds = %cond.rhs138
  %100 = load ptr, ptr %retparam139, align 8, !dbg !978
  br label %cond.phi143, !dbg !978

cond.phi143:                                      ; preds = %after_check142, %checkok137
  %val144 = phi ptr [ %95, %checkok137 ], [ %100, %after_check142 ], !dbg !978
  store ptr %val144, ptr %0, align 8, !dbg !978
  ret i64 0, !dbg !978

err_retblock145:                                  ; preds = %assign_optional141, %guard_block90
  %101 = load i64, ptr %reterr54, align 8, !dbg !978
  ret i64 %101, !dbg !978

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.56, i64 17 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg2, align 8
  %102 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %102(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 31) #6, !dbg !942
  unreachable, !dbg !942

panic35:                                          ; preds = %assert_ok34
  store %"char[]" { ptr @.panic_msg.63, i64 45 }, ptr %indirectarg36, align 8
  store %"char[]" { ptr @.file.24, i64 16 }, ptr %indirectarg37, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg38, align 8
  %103 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %103(ptr align 8 %indirectarg36, ptr align 8 %indirectarg37, ptr align 8 %indirectarg38, i32 359) #6, !dbg !976
  unreachable, !dbg !976

panic40:                                          ; preds = %checkok39
  store i64 8, ptr %taddr, align 8
  %104 = insertvalue %any undef, ptr %taddr, 0
  %105 = insertvalue %any %104, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %45, ptr %taddr41, align 8
  %106 = insertvalue %any undef, ptr %taddr41, 0
  %107 = insertvalue %any %106, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.31, i64 94 }, ptr %indirectarg42, align 8
  store %"char[]" { ptr @.file.24, i64 16 }, ptr %indirectarg43, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg44, align 8
  store %any %105, ptr %varargslots, align 16
  %ptradd45 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %107, ptr %ptradd45, align 16
  %108 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %108, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg46, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg42, ptr align 8 %indirectarg43, ptr align 8 %indirectarg44, i32 359, ptr align 8 %indirectarg46) #6, !dbg !976
  unreachable, !dbg !976

panic122:                                         ; preds = %assert_ok118
  store %"char[]" { ptr @.panic_msg.63, i64 45 }, ptr %indirectarg123, align 8
  store %"char[]" { ptr @.file.24, i64 16 }, ptr %indirectarg124, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg125, align 8
  %109 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %109(ptr align 8 %indirectarg123, ptr align 8 %indirectarg124, ptr align 8 %indirectarg125, i32 359) #6, !dbg !1001
  unreachable, !dbg !1001

panic127:                                         ; preds = %checkok126
  store i64 8, ptr %taddr128, align 8
  %110 = insertvalue %any undef, ptr %taddr128, 0
  %111 = insertvalue %any %110, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %92, ptr %taddr129, align 8
  %112 = insertvalue %any undef, ptr %taddr129, 0
  %113 = insertvalue %any %112, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.31, i64 94 }, ptr %indirectarg130, align 8
  store %"char[]" { ptr @.file.24, i64 16 }, ptr %indirectarg131, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg132, align 8
  store %any %111, ptr %varargslots133, align 16
  %ptradd134 = getelementptr inbounds i8, ptr %varargslots133, i64 16
  store %any %113, ptr %ptradd134, align 16
  %114 = insertvalue %"any[]" undef, ptr %varargslots133, 0
  %"$$temp135" = insertvalue %"any[]" %114, i64 2, 1
  store %"any[]" %"$$temp135", ptr %indirectarg136, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg130, ptr align 8 %indirectarg131, ptr align 8 %indirectarg132, i32 359, ptr align 8 %indirectarg136) #6, !dbg !1001
  unreachable, !dbg !1001
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.core.mem.allocator.SimpleHeapAllocator.resize(ptr %0, ptr %1, ptr %2, i64 %3, i64 %4) #0 comdat !dbg !1003 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %old_pointer = alloca ptr, align 8
  %size = alloca i64, align 8
  %alignment = alloca i64, align 8
  %reterr = alloca i64, align 8
  %old_pointer3 = alloca ptr, align 8
  %bytes = alloca i64, align 8
  %alignment4 = alloca i64, align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg7 = alloca %"char[]", align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %indirectarg13 = alloca %"char[]", align 8
  %desc = alloca ptr, align 8
  %data_start = alloca ptr, align 8
  %new_data = alloca ptr, align 8
  %error_var = alloca i64, align 8
  %bytes15 = alloca i64, align 8
  %alignment16 = alloca i64, align 8
  %indirectarg20 = alloca %"char[]", align 8
  %indirectarg21 = alloca %"char[]", align 8
  %indirectarg22 = alloca %"char[]", align 8
  %indirectarg26 = alloca %"char[]", align 8
  %indirectarg27 = alloca %"char[]", align 8
  %indirectarg28 = alloca %"char[]", align 8
  %indirectarg31 = alloca %"char[]", align 8
  %indirectarg32 = alloca %"char[]", align 8
  %indirectarg33 = alloca %"char[]", align 8
  %header = alloca i64, align 8
  %alignsize = alloca i64, align 8
  %data = alloca ptr, align 8
  %error_var37 = alloca i64, align 8
  %retparam = alloca ptr, align 8
  %mem = alloca ptr, align 8
  %ptr = alloca ptr, align 8
  %alignment39 = alloca i64, align 8
  %x = alloca i64, align 8
  %indirectarg41 = alloca %"char[]", align 8
  %indirectarg42 = alloca %"char[]", align 8
  %indirectarg43 = alloca %"char[]", align 8
  %desc45 = alloca ptr, align 8
  %indirectarg48 = alloca %"char[]", align 8
  %indirectarg49 = alloca %"char[]", align 8
  %indirectarg50 = alloca %"char[]", align 8
  %.assign_list = alloca %AlignedBlock, align 8
  %indirectarg54 = alloca %"char[]", align 8
  %indirectarg55 = alloca %"char[]", align 8
  %indirectarg56 = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr59 = alloca i64, align 8
  %indirectarg60 = alloca %"char[]", align 8
  %indirectarg61 = alloca %"char[]", align 8
  %indirectarg62 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg64 = alloca %"any[]", align 8
  %dst = alloca ptr, align 8
  %src = alloca ptr, align 8
  %len = alloca i64, align 8
  %indirectarg73 = alloca %"char[]", align 8
  %indirectarg74 = alloca %"char[]", align 8
  %indirectarg75 = alloca %"char[]", align 8
  %indirectarg81 = alloca %"char[]", align 8
  %indirectarg82 = alloca %"char[]", align 8
  %indirectarg83 = alloca %"char[]", align 8
  %indirectarg96 = alloca %"char[]", align 8
  %indirectarg97 = alloca %"char[]", align 8
  %indirectarg98 = alloca %"char[]", align 8
  %indirectarg106 = alloca %"char[]", align 8
  %indirectarg107 = alloca %"char[]", align 8
  %indirectarg108 = alloca %"char[]", align 8
  %retparam110 = alloca ptr, align 8
  %5 = icmp eq ptr %1, null, !dbg !1006
  %6 = call i1 @llvm.expect.i1(i1 %5, i1 false), !dbg !1006
  br i1 %6, label %panic, label %checkok, !dbg !1006

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !1007, !DIExpression(), !1008)
  store ptr %2, ptr %old_pointer, align 8
    #dbg_declare(ptr %old_pointer, !1009, !DIExpression(), !1008)
  store i64 %3, ptr %size, align 8
    #dbg_declare(ptr %size, !1010, !DIExpression(), !1008)
  store i64 %4, ptr %alignment, align 8
    #dbg_declare(ptr %alignment, !1011, !DIExpression(), !1008)
  %7 = load i64, ptr %alignment, align 8, !dbg !1012
  %lt = icmp ult i64 0, %7, !dbg !1012
  br i1 %lt, label %cond.lhs, label %cond.rhs100, !dbg !1012

cond.lhs:                                         ; preds = %checkok
  %8 = load ptr, ptr %old_pointer, align 8
  store ptr %8, ptr %old_pointer3, align 8
  %9 = load i64, ptr %size, align 8
  store i64 %9, ptr %bytes, align 8
  %10 = load i64, ptr %alignment, align 8
  store i64 %10, ptr %alignment4, align 8
  %11 = load i64, ptr %bytes, align 8, !dbg !1013
  %lt5 = icmp ult i64 0, %11, !dbg !1017
  br i1 %lt5, label %assert_ok, label %assert_fail, !dbg !1017

assert_fail:                                      ; preds = %cond.lhs
  store %"char[]" { ptr @.panic_msg.59, i64 30 }, ptr %indirectarg6, align 8
  store %"char[]" { ptr @.file.56, i64 17 }, ptr %indirectarg7, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg8, align 8
  %12 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %12(ptr align 8 %indirectarg6, ptr align 8 %indirectarg7, ptr align 8 %indirectarg8, i32 43) #6, !dbg !1017
  unreachable, !dbg !1017

assert_ok:                                        ; preds = %cond.lhs
  %13 = load i64, ptr %alignment4, align 8, !dbg !1018
  %lt9 = icmp ult i64 0, %13, !dbg !1017
  br i1 %lt9, label %assert_ok14, label %assert_fail10, !dbg !1017

assert_fail10:                                    ; preds = %assert_ok
  store %"char[]" { ptr @.panic_msg.60, i64 34 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.file.56, i64 17 }, ptr %indirectarg12, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg13, align 8
  %14 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %14(ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, ptr align 8 %indirectarg13, i32 43) #6, !dbg !1017
  unreachable, !dbg !1017

assert_ok14:                                      ; preds = %assert_ok
    #dbg_declare(ptr %desc, !1019, !DIExpression(), !1020)
  %15 = load ptr, ptr %old_pointer3, align 8, !dbg !1020
  %ptradd_any = getelementptr i8, ptr %15, i64 -16, !dbg !1020
  store ptr %ptradd_any, ptr %desc, align 8, !dbg !1020
    #dbg_declare(ptr %data_start, !1021, !DIExpression(), !1022)
  %16 = load ptr, ptr %desc, align 8, !dbg !1022
  %ptradd = getelementptr inbounds i8, ptr %16, i64 8, !dbg !1022
  %17 = load ptr, ptr %ptradd, align 8, !dbg !1022
  store ptr %17, ptr %data_start, align 8, !dbg !1022
    #dbg_declare(ptr %new_data, !1023, !DIExpression(), !1024)
  %18 = load i64, ptr %bytes, align 8
  store i64 %18, ptr %bytes15, align 8
  %19 = load i64, ptr %alignment4, align 8
  store i64 %19, ptr %alignment16, align 8
  %20 = load i64, ptr %bytes15, align 8, !dbg !1025
  %lt18 = icmp ult i64 0, %20, !dbg !1028
  br i1 %lt18, label %assert_ok23, label %assert_fail19, !dbg !1028

assert_fail19:                                    ; preds = %assert_ok14
  store %"char[]" { ptr @.panic_msg.59, i64 30 }, ptr %indirectarg20, align 8
  store %"char[]" { ptr @.file.24, i64 16 }, ptr %indirectarg21, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg22, align 8
  %21 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %21(ptr align 8 %indirectarg20, ptr align 8 %indirectarg21, ptr align 8 %indirectarg22, i32 387) #6, !dbg !1028
  unreachable, !dbg !1028

assert_ok23:                                      ; preds = %assert_ok14
  %22 = load i64, ptr %alignment16, align 8, !dbg !1029
  %lt24 = icmp ult i64 0, %22, !dbg !1028
  br i1 %lt24, label %assert_ok29, label %assert_fail25, !dbg !1028

assert_fail25:                                    ; preds = %assert_ok23
  store %"char[]" { ptr @.panic_msg.60, i64 34 }, ptr %indirectarg26, align 8
  store %"char[]" { ptr @.file.24, i64 16 }, ptr %indirectarg27, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg28, align 8
  %23 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %23(ptr align 8 %indirectarg26, ptr align 8 %indirectarg27, ptr align 8 %indirectarg28, i32 387) #6, !dbg !1028
  unreachable, !dbg !1028

assert_ok29:                                      ; preds = %assert_ok23
  %24 = load i64, ptr %bytes15, align 8, !dbg !1030
  %ge = icmp uge i64 9223372036854775807, %24, !dbg !1028
  br i1 %ge, label %assert_ok34, label %assert_fail30, !dbg !1028

assert_fail30:                                    ; preds = %assert_ok29
  store %"char[]" { ptr @.panic_msg.61, i64 37 }, ptr %indirectarg31, align 8
  store %"char[]" { ptr @.file.24, i64 16 }, ptr %indirectarg32, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg33, align 8
  %25 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %25(ptr align 8 %indirectarg31, ptr align 8 %indirectarg32, ptr align 8 %indirectarg33, i32 387) #6, !dbg !1028
  unreachable, !dbg !1028

assert_ok34:                                      ; preds = %assert_ok29
  %26 = load i64, ptr %alignment16, align 8, !dbg !1031
  %lt35 = icmp ult i64 %26, 8, !dbg !1031
  br i1 %lt35, label %if.then, label %if.exit, !dbg !1031

if.then:                                          ; preds = %assert_ok34
  store i64 8, ptr %alignment16, align 8, !dbg !1031
  br label %if.exit, !dbg !1031

if.exit:                                          ; preds = %if.then, %assert_ok34
    #dbg_declare(ptr %header, !1032, !DIExpression(), !1033)
  %27 = load i64, ptr %alignment16, align 8, !dbg !1033
  %add = add i64 16, %27, !dbg !1033
  store i64 %add, ptr %header, align 8, !dbg !1033
    #dbg_declare(ptr %alignsize, !1034, !DIExpression(), !1035)
  %28 = load i64, ptr %bytes15, align 8, !dbg !1035
  %29 = load i64, ptr %header, align 8, !dbg !1035
  %add36 = add i64 %28, %29, !dbg !1035
  store i64 %add36, ptr %alignsize, align 8, !dbg !1035
    #dbg_declare(ptr %data, !1036, !DIExpression(), !1037)
  %30 = load ptr, ptr %self, align 8
  %31 = load i64, ptr %alignsize, align 8
  %32 = call i64 @std.core.mem.allocator.SimpleHeapAllocator._calloc(ptr %retparam, ptr %30, i64 %31), !dbg !1037
  %not_err = icmp eq i64 %32, 0, !dbg !1037
  %33 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1037
  br i1 %33, label %after_check, label %assign_optional, !dbg !1037

assign_optional:                                  ; preds = %if.exit
  store i64 %32, ptr %error_var37, align 8, !dbg !1037
  br label %guard_block, !dbg !1037

after_check:                                      ; preds = %if.exit
  br label %noerr_block, !dbg !1037

guard_block:                                      ; preds = %assign_optional
  %34 = load i64, ptr %error_var37, align 8, !dbg !1037
  store i64 %34, ptr %error_var, align 8, !dbg !1037
  br label %guard_block66, !dbg !1037

noerr_block:                                      ; preds = %after_check
  %35 = load ptr, ptr %retparam, align 8, !dbg !1037
  store ptr %35, ptr %data, align 8, !dbg !1037
    #dbg_declare(ptr %mem, !1038, !DIExpression(), !1039)
  %36 = load ptr, ptr %data, align 8, !dbg !1039
  %ptradd_any38 = getelementptr i8, ptr %36, i64 16, !dbg !1039
  store ptr %ptradd_any38, ptr %ptr, align 8
  %37 = load i64, ptr %alignment16, align 8
  store i64 %37, ptr %alignment39, align 8
  %38 = load ptr, ptr %ptr, align 8, !dbg !1040
  %ptrxi = ptrtoint ptr %38 to i64, !dbg !1040
  %39 = load i64, ptr %alignment39, align 8, !dbg !1040
  store i64 %39, ptr %x, align 8
  %40 = load i64, ptr %x, align 8, !dbg !1042
  %neq = icmp ne i64 0, %40, !dbg !1042
  br i1 %neq, label %and.rhs, label %and.phi, !dbg !1042

and.rhs:                                          ; preds = %noerr_block
  %41 = load i64, ptr %x, align 8, !dbg !1042
  %42 = load i64, ptr %x, align 8, !dbg !1042
  %sub = sub i64 %42, 1, !dbg !1042
  %and = and i64 %41, %sub, !dbg !1042
  %eq = icmp eq i64 %and, 0, !dbg !1042
  br label %and.phi, !dbg !1042

and.phi:                                          ; preds = %and.rhs, %noerr_block
  %val = phi i1 [ false, %noerr_block ], [ %eq, %and.rhs ], !dbg !1042
  br i1 %val, label %assert_ok44, label %assert_fail40, !dbg !1042

assert_fail40:                                    ; preds = %and.phi
  store %"char[]" { ptr @.panic_msg.14, i64 51 }, ptr %indirectarg41, align 8
  store %"char[]" { ptr @.file.15, i64 6 }, ptr %indirectarg42, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg43, align 8
  %43 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %43(ptr align 8 %indirectarg41, ptr align 8 %indirectarg42, ptr align 8 %indirectarg43, i32 313) #6, !dbg !1040
  unreachable, !dbg !1040

assert_ok44:                                      ; preds = %and.phi
  %44 = call i64 @std.core.mem.aligned_offset(i64 %ptrxi, i64 %39), !dbg !1040
  %intptr = inttoptr i64 %44 to ptr, !dbg !1040
  store ptr %intptr, ptr %mem, align 8, !dbg !1040
    #dbg_declare(ptr %desc45, !1044, !DIExpression(), !1045)
  %45 = load ptr, ptr %mem, align 8, !dbg !1045
  %ptradd_any46 = getelementptr i8, ptr %45, i64 -16, !dbg !1045
  store ptr %ptradd_any46, ptr %desc45, align 8, !dbg !1045
  %46 = load ptr, ptr %mem, align 8, !dbg !1046
  %47 = load ptr, ptr %data, align 8, !dbg !1046
  %gt = icmp ugt ptr %46, %47, !dbg !1046
  br i1 %gt, label %assert_ok51, label %assert_fail47, !dbg !1046

assert_fail47:                                    ; preds = %assert_ok44
  store %"char[]" { ptr @.panic_msg.62, i64 27 }, ptr %indirectarg48, align 8
  store %"char[]" { ptr @.file.24, i64 16 }, ptr %indirectarg49, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg50, align 8
  %48 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %48(ptr align 8 %indirectarg48, ptr align 8 %indirectarg49, ptr align 8 %indirectarg50, i32 358) #6, !dbg !1046
  unreachable, !dbg !1046

assert_ok51:                                      ; preds = %assert_ok44
  %49 = load i64, ptr %bytes15, align 8, !dbg !1047
  store i64 %49, ptr %.assign_list, align 8, !dbg !1047
  %ptradd52 = getelementptr inbounds i8, ptr %.assign_list, i64 8, !dbg !1047
  %50 = load ptr, ptr %data, align 8, !dbg !1047
  store ptr %50, ptr %ptradd52, align 8, !dbg !1047
  %51 = load ptr, ptr %desc45, align 8, !dbg !1047
  %checknull = icmp eq ptr %51, null, !dbg !1047
  %52 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1047
  br i1 %52, label %panic53, label %checkok57, !dbg !1047

checkok57:                                        ; preds = %assert_ok51
  %53 = ptrtoint ptr %51 to i64, !dbg !1047
  %54 = urem i64 %53, 8, !dbg !1047
  %55 = icmp ne i64 %54, 0, !dbg !1047
  %56 = call i1 @llvm.expect.i1(i1 %55, i1 false), !dbg !1047
  br i1 %56, label %panic58, label %checkok65, !dbg !1047

checkok65:                                        ; preds = %checkok57
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %51, ptr align 8 %.assign_list, i32 16, i1 false), !dbg !1047
  br label %noerr_block67, !dbg !1048

guard_block66:                                    ; preds = %guard_block
  %57 = load i64, ptr %error_var, align 8, !dbg !1048
  store i64 %57, ptr %reterr, align 8, !dbg !1048
  br label %err_retblock, !dbg !1048

noerr_block67:                                    ; preds = %checkok65
  %58 = load ptr, ptr %mem, align 8, !dbg !1048
  store ptr %58, ptr %new_data, align 8, !dbg !1048
  %59 = load ptr, ptr %new_data, align 8
  store ptr %59, ptr %dst, align 8
  %60 = load ptr, ptr %old_pointer3, align 8
  store ptr %60, ptr %src, align 8
  %61 = load ptr, ptr %desc, align 8, !dbg !1049
  %62 = load i64, ptr %61, align 8, !dbg !1049
  %63 = load i64, ptr %bytes, align 8, !dbg !1049
  %lt68 = icmp ult i64 %62, %63, !dbg !1049
  br i1 %lt68, label %cond.lhs69, label %cond.rhs, !dbg !1049

cond.lhs69:                                       ; preds = %noerr_block67
  %64 = load ptr, ptr %desc, align 8, !dbg !1049
  %65 = load i64, ptr %64, align 8, !dbg !1049
  br label %cond.phi, !dbg !1049

cond.rhs:                                         ; preds = %noerr_block67
  %66 = load i64, ptr %bytes, align 8, !dbg !1049
  br label %cond.phi, !dbg !1049

cond.phi:                                         ; preds = %cond.rhs, %cond.lhs69
  %val70 = phi i64 [ %65, %cond.lhs69 ], [ %66, %cond.rhs ], !dbg !1049
  store i64 %val70, ptr %len, align 8
  %67 = load ptr, ptr %dst, align 8, !dbg !1050
  %neq71 = icmp ne ptr %67, null, !dbg !1050
  br i1 %neq71, label %assert_ok76, label %assert_fail72, !dbg !1050

assert_fail72:                                    ; preds = %cond.phi
  store %"char[]" { ptr @.panic_msg.18, i64 37 }, ptr %indirectarg73, align 8
  store %"char[]" { ptr @.file.15, i64 6 }, ptr %indirectarg74, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg75, align 8
  %68 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %68(ptr align 8 %indirectarg73, ptr align 8 %indirectarg74, ptr align 8 %indirectarg75, i32 357) #6, !dbg !1050
  unreachable, !dbg !1050

assert_ok76:                                      ; preds = %cond.phi
  %69 = load ptr, ptr %src, align 8, !dbg !1053
  %neq77 = icmp ne ptr %69, null, !dbg !1053
  br i1 %neq77, label %or.phi, label %or.rhs, !dbg !1053

or.rhs:                                           ; preds = %assert_ok76
  %70 = load i64, ptr %len, align 8, !dbg !1053
  %eq78 = icmp eq i64 0, %70, !dbg !1053
  br label %or.phi, !dbg !1053

or.phi:                                           ; preds = %or.rhs, %assert_ok76
  %val79 = phi i1 [ true, %assert_ok76 ], [ %eq78, %or.rhs ], !dbg !1053
  br i1 %val79, label %assert_ok84, label %assert_fail80, !dbg !1053

assert_fail80:                                    ; preds = %or.phi
  store %"char[]" { ptr @.panic_msg.19, i64 94 }, ptr %indirectarg81, align 8
  store %"char[]" { ptr @.file.24, i64 16 }, ptr %indirectarg82, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg83, align 8
  %71 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %71(ptr align 8 %indirectarg81, ptr align 8 %indirectarg82, ptr align 8 %indirectarg83, i32 388) #6, !dbg !1054
  unreachable, !dbg !1054

assert_ok84:                                      ; preds = %or.phi
  %72 = load i64, ptr %len, align 8, !dbg !1055
  %eq85 = icmp eq i64 0, %72, !dbg !1055
  br i1 %eq85, label %or.phi88, label %or.rhs86, !dbg !1055

or.rhs86:                                         ; preds = %assert_ok84
  %73 = load ptr, ptr %dst, align 8, !dbg !1055
  %74 = load i64, ptr %len, align 8, !dbg !1055
  %ptradd_any87 = getelementptr i8, ptr %73, i64 %74, !dbg !1055
  %75 = load ptr, ptr %src, align 8, !dbg !1055
  %le = icmp ule ptr %ptradd_any87, %75, !dbg !1055
  br label %or.phi88, !dbg !1055

or.phi88:                                         ; preds = %or.rhs86, %assert_ok84
  %val89 = phi i1 [ true, %assert_ok84 ], [ %le, %or.rhs86 ], !dbg !1055
  br i1 %val89, label %or.phi93, label %or.rhs90, !dbg !1055

or.rhs90:                                         ; preds = %or.phi88
  %76 = load ptr, ptr %src, align 8, !dbg !1055
  %77 = load i64, ptr %len, align 8, !dbg !1055
  %ptradd_any91 = getelementptr i8, ptr %76, i64 %77, !dbg !1055
  %78 = load ptr, ptr %dst, align 8, !dbg !1055
  %le92 = icmp ule ptr %ptradd_any91, %78, !dbg !1055
  br label %or.phi93, !dbg !1055

or.phi93:                                         ; preds = %or.rhs90, %or.phi88
  %val94 = phi i1 [ true, %or.phi88 ], [ %le92, %or.rhs90 ], !dbg !1055
  br i1 %val94, label %assert_ok99, label %assert_fail95, !dbg !1055

assert_fail95:                                    ; preds = %or.phi93
  store %"char[]" { ptr @.panic_msg.20, i64 95 }, ptr %indirectarg96, align 8
  store %"char[]" { ptr @.file.24, i64 16 }, ptr %indirectarg97, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg98, align 8
  %79 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %79(ptr align 8 %indirectarg96, ptr align 8 %indirectarg97, ptr align 8 %indirectarg98, i32 388) #6, !dbg !1054
  unreachable, !dbg !1054

assert_ok99:                                      ; preds = %or.phi93
  %80 = load ptr, ptr %dst, align 8, !dbg !1056
  %81 = load ptr, ptr %src, align 8, !dbg !1056
  %82 = load i64, ptr %len, align 8, !dbg !1056
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %80, ptr align 1 %81, i64 %82, i1 false), !dbg !1056
  %83 = load ptr, ptr %self, align 8, !dbg !1057
  %84 = load ptr, ptr %data_start, align 8, !dbg !1057
  call void @std.core.mem.allocator.SimpleHeapAllocator._free(ptr %83, ptr %84), !dbg !1057
  %85 = load ptr, ptr %new_data, align 8, !dbg !1058
  br label %cond.phi114, !dbg !1058

cond.rhs100:                                      ; preds = %checkok
  %86 = load ptr, ptr %self, align 8, !dbg !1059
  %87 = load ptr, ptr %old_pointer, align 8, !dbg !1059
  %88 = load i64, ptr %size, align 8, !dbg !1059
  %i2b = icmp ne ptr %87, null, !dbg !1060
  br i1 %i2b, label %and.rhs101, label %and.phi103, !dbg !1060

and.rhs101:                                       ; preds = %cond.rhs100
  %lt102 = icmp ult i64 0, %88, !dbg !1060
  br label %and.phi103, !dbg !1060

and.phi103:                                       ; preds = %and.rhs101, %cond.rhs100
  %val104 = phi i1 [ false, %cond.rhs100 ], [ %lt102, %and.rhs101 ], !dbg !1060
  br i1 %val104, label %assert_ok109, label %assert_fail105, !dbg !1060

assert_fail105:                                   ; preds = %and.phi103
  store %"char[]" { ptr @.panic_msg.64, i64 45 }, ptr %indirectarg106, align 8
  store %"char[]" { ptr @.file.56, i64 17 }, ptr %indirectarg107, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg108, align 8
  %89 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %89(ptr align 8 %indirectarg106, ptr align 8 %indirectarg107, ptr align 8 %indirectarg108, i32 44) #6, !dbg !1059
  unreachable, !dbg !1059

assert_ok109:                                     ; preds = %and.phi103
  %90 = call i64 @std.core.mem.allocator.SimpleHeapAllocator._realloc(ptr %retparam110, ptr %86, ptr %87, i64 %88), !dbg !1059
  %not_err111 = icmp eq i64 %90, 0, !dbg !1059
  %91 = call i1 @llvm.expect.i1(i1 %not_err111, i1 true), !dbg !1059
  br i1 %91, label %after_check113, label %assign_optional112, !dbg !1059

assign_optional112:                               ; preds = %assert_ok109
  store i64 %90, ptr %reterr, align 8, !dbg !1059
  br label %err_retblock, !dbg !1059

after_check113:                                   ; preds = %assert_ok109
  %92 = load ptr, ptr %retparam110, align 8, !dbg !1059
  br label %cond.phi114, !dbg !1059

cond.phi114:                                      ; preds = %after_check113, %assert_ok99
  %val115 = phi ptr [ %85, %assert_ok99 ], [ %92, %after_check113 ], !dbg !1059
  store ptr %val115, ptr %0, align 8, !dbg !1059
  ret i64 0, !dbg !1059

err_retblock:                                     ; preds = %assign_optional112, %guard_block66
  %93 = load i64, ptr %reterr, align 8, !dbg !1059
  ret i64 %93, !dbg !1059

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.56, i64 17 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg2, align 8
  %94 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %94(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 40) #6, !dbg !1008
  unreachable, !dbg !1008

panic53:                                          ; preds = %assert_ok51
  store %"char[]" { ptr @.panic_msg.63, i64 45 }, ptr %indirectarg54, align 8
  store %"char[]" { ptr @.file.24, i64 16 }, ptr %indirectarg55, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg56, align 8
  %95 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %95(ptr align 8 %indirectarg54, ptr align 8 %indirectarg55, ptr align 8 %indirectarg56, i32 359) #6, !dbg !1047
  unreachable, !dbg !1047

panic58:                                          ; preds = %checkok57
  store i64 8, ptr %taddr, align 8
  %96 = insertvalue %any undef, ptr %taddr, 0
  %97 = insertvalue %any %96, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %54, ptr %taddr59, align 8
  %98 = insertvalue %any undef, ptr %taddr59, 0
  %99 = insertvalue %any %98, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.31, i64 94 }, ptr %indirectarg60, align 8
  store %"char[]" { ptr @.file.24, i64 16 }, ptr %indirectarg61, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg62, align 8
  store %any %97, ptr %varargslots, align 16
  %ptradd63 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %99, ptr %ptradd63, align 16
  %100 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %100, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg64, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg60, ptr align 8 %indirectarg61, ptr align 8 %indirectarg62, i32 359, ptr align 8 %indirectarg64) #6, !dbg !1047
  unreachable, !dbg !1047
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.core.mem.allocator.SimpleHeapAllocator.release(ptr %0, ptr %1, i8 zeroext %2) #0 comdat !dbg !1061 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %old_pointer = alloca ptr, align 8
  %aligned = alloca i8, align 1
  %error_var = alloca i64, align 8
  %old_pointer3 = alloca ptr, align 8
  %desc = alloca ptr, align 8
  %3 = icmp eq ptr %0, null, !dbg !1064
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !1064
  br i1 %4, label %panic, label %checkok, !dbg !1064

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1065, !DIExpression(), !1066)
  store ptr %1, ptr %old_pointer, align 8
    #dbg_declare(ptr %old_pointer, !1067, !DIExpression(), !1066)
  store i8 %2, ptr %aligned, align 1
    #dbg_declare(ptr %aligned, !1068, !DIExpression(), !1066)
  %5 = load i8, ptr %aligned, align 1, !dbg !1069
  %6 = trunc i8 %5 to i1, !dbg !1069
  br i1 %6, label %if.then, label %if.else, !dbg !1069

if.then:                                          ; preds = %checkok
  %7 = load ptr, ptr %old_pointer, align 8
  store ptr %7, ptr %old_pointer3, align 8
    #dbg_declare(ptr %desc, !1070, !DIExpression(), !1072)
  %8 = load ptr, ptr %old_pointer3, align 8, !dbg !1072
  %ptradd_any = getelementptr i8, ptr %8, i64 -16, !dbg !1072
  store ptr %ptradd_any, ptr %desc, align 8, !dbg !1072
  %9 = load ptr, ptr %desc, align 8, !dbg !1075
  %ptradd = getelementptr inbounds i8, ptr %9, i64 8, !dbg !1075
  %10 = load ptr, ptr %self, align 8, !dbg !1075
  %11 = load ptr, ptr %ptradd, align 8, !dbg !1075
  call void @std.core.mem.allocator.SimpleHeapAllocator._free(ptr %10, ptr %11), !dbg !1075
  br label %noerr_block, !dbg !1075

noerr_block:                                      ; preds = %if.then
  br label %if.exit, !dbg !1073

if.else:                                          ; preds = %checkok
  %12 = load ptr, ptr %self, align 8, !dbg !1076
  %13 = load ptr, ptr %old_pointer, align 8, !dbg !1076
  call void @std.core.mem.allocator.SimpleHeapAllocator._free(ptr %12, ptr %13), !dbg !1076
  br label %if.exit, !dbg !1076

if.exit:                                          ; preds = %if.else, %noerr_block
  ret void, !dbg !1076

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.56, i64 17 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.6, i64 7 }, ptr %indirectarg2, align 8
  %14 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %14(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 47) #6, !dbg !1066
  unreachable, !dbg !1066
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @std.core.mem.allocator.SimpleHeapAllocator._realloc(ptr %0, ptr %1, ptr %2, i64 %3) #0 !dbg !1078 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %old_pointer = alloca ptr, align 8
  %bytes = alloca i64, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %block = alloca ptr, align 8
  %reterr = alloca i64, align 8
  %new = alloca ptr, align 8
  %error_var = alloca i64, align 8
  %retparam = alloca ptr, align 8
  %max_to_copy = alloca i64, align 8
  %x = alloca i64, align 8
  %y = alloca i64, align 8
  %dst = alloca ptr, align 8
  %src = alloca ptr, align 8
  %len = alloca i64, align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg15 = alloca %"char[]", align 8
  %indirectarg16 = alloca %"char[]", align 8
  %indirectarg17 = alloca %"char[]", align 8
  %indirectarg30 = alloca %"char[]", align 8
  %indirectarg31 = alloca %"char[]", align 8
  %indirectarg32 = alloca %"char[]", align 8
  %reterr34 = alloca i64, align 8
  %4 = icmp eq ptr %1, null, !dbg !1081
  %5 = call i1 @llvm.expect.i1(i1 %4, i1 false), !dbg !1081
  br i1 %5, label %panic, label %checkok, !dbg !1081

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !1082, !DIExpression(), !1083)
  store ptr %2, ptr %old_pointer, align 8
    #dbg_declare(ptr %old_pointer, !1084, !DIExpression(), !1083)
  store i64 %3, ptr %bytes, align 8
    #dbg_declare(ptr %bytes, !1085, !DIExpression(), !1083)
  %6 = load ptr, ptr %old_pointer, align 8, !dbg !1086
  %i2b = icmp ne ptr %6, null, !dbg !1086
  br i1 %i2b, label %and.rhs, label %and.phi, !dbg !1086

and.rhs:                                          ; preds = %checkok
  %7 = load i64, ptr %bytes, align 8, !dbg !1086
  %lt = icmp ult i64 0, %7, !dbg !1086
  br label %and.phi, !dbg !1086

and.phi:                                          ; preds = %and.rhs, %checkok
  %val = phi i1 [ false, %checkok ], [ %lt, %and.rhs ], !dbg !1086
  br i1 %val, label %assert_ok, label %assert_fail, !dbg !1086

assert_fail:                                      ; preds = %and.phi
  store %"char[]" { ptr @.panic_msg.64, i64 45 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.file.56, i64 17 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.func.65, i64 8 }, ptr %indirectarg5, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, i32 60) #6, !dbg !1086
  unreachable, !dbg !1086

assert_ok:                                        ; preds = %and.phi
    #dbg_declare(ptr %block, !1088, !DIExpression(), !1089)
  %9 = load ptr, ptr %old_pointer, align 8, !dbg !1089
  %ptradd_any = getelementptr i8, ptr %9, i64 -16, !dbg !1089
  store ptr %ptradd_any, ptr %block, align 8, !dbg !1089
  %10 = load ptr, ptr %block, align 8, !dbg !1090
  %ptradd = getelementptr inbounds i8, ptr %10, i64 8, !dbg !1090
  %11 = load i64, ptr %ptradd, align 8, !dbg !1090
  %12 = load i64, ptr %bytes, align 8, !dbg !1090
  %ge = icmp uge i64 %11, %12, !dbg !1090
  br i1 %ge, label %if.then, label %if.exit, !dbg !1090

if.then:                                          ; preds = %assert_ok
  %13 = load ptr, ptr %old_pointer, align 8, !dbg !1090
  store ptr %13, ptr %0, align 8, !dbg !1090
  ret i64 0, !dbg !1090

if.exit:                                          ; preds = %assert_ok
    #dbg_declare(ptr %new, !1091, !DIExpression(), !1092)
  %14 = load ptr, ptr %self, align 8
  %15 = load i64, ptr %bytes, align 8
  %16 = call i64 @std.core.mem.allocator.SimpleHeapAllocator._alloc(ptr %retparam, ptr %14, i64 %15), !dbg !1092
  %not_err = icmp eq i64 %16, 0, !dbg !1092
  %17 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1092
  br i1 %17, label %after_check, label %assign_optional, !dbg !1092

assign_optional:                                  ; preds = %if.exit
  store i64 %16, ptr %error_var, align 8, !dbg !1092
  br label %guard_block, !dbg !1092

after_check:                                      ; preds = %if.exit
  br label %noerr_block, !dbg !1092

guard_block:                                      ; preds = %assign_optional
  %18 = load i64, ptr %error_var, align 8, !dbg !1092
  ret i64 %18, !dbg !1092

noerr_block:                                      ; preds = %after_check
  %19 = load ptr, ptr %retparam, align 8, !dbg !1092
  store ptr %19, ptr %new, align 8, !dbg !1092
    #dbg_declare(ptr %max_to_copy, !1093, !DIExpression(), !1094)
  %20 = load ptr, ptr %block, align 8, !dbg !1094
  %ptradd6 = getelementptr inbounds i8, ptr %20, i64 8, !dbg !1094
  %21 = load i64, ptr %ptradd6, align 8
  store i64 %21, ptr %x, align 8
  %22 = load i64, ptr %bytes, align 8
  store i64 %22, ptr %y, align 8
  %23 = load i64, ptr %x, align 8, !dbg !1095
  %24 = load i64, ptr %y, align 8, !dbg !1095
  %25 = call i64 @llvm.umin.i64(i64 %23, i64 %24), !dbg !1095
  store i64 %25, ptr %max_to_copy, align 8, !dbg !1095
  %26 = load ptr, ptr %new, align 8
  store ptr %26, ptr %dst, align 8
  %27 = load ptr, ptr %old_pointer, align 8
  store ptr %27, ptr %src, align 8
  %28 = load i64, ptr %max_to_copy, align 8
  store i64 %28, ptr %len, align 8
  %29 = load ptr, ptr %dst, align 8, !dbg !1097
  %neq = icmp ne ptr %29, null, !dbg !1097
  br i1 %neq, label %assert_ok11, label %assert_fail7, !dbg !1097

assert_fail7:                                     ; preds = %noerr_block
  store %"char[]" { ptr @.panic_msg.18, i64 37 }, ptr %indirectarg8, align 8
  store %"char[]" { ptr @.file.15, i64 6 }, ptr %indirectarg9, align 8
  store %"char[]" { ptr @.func.65, i64 8 }, ptr %indirectarg10, align 8
  %30 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %30(ptr align 8 %indirectarg8, ptr align 8 %indirectarg9, ptr align 8 %indirectarg10, i32 357) #6, !dbg !1097
  unreachable, !dbg !1097

assert_ok11:                                      ; preds = %noerr_block
  %31 = load ptr, ptr %src, align 8, !dbg !1101
  %neq12 = icmp ne ptr %31, null, !dbg !1101
  br i1 %neq12, label %or.phi, label %or.rhs, !dbg !1101

or.rhs:                                           ; preds = %assert_ok11
  %32 = load i64, ptr %len, align 8, !dbg !1101
  %eq = icmp eq i64 0, %32, !dbg !1101
  br label %or.phi, !dbg !1101

or.phi:                                           ; preds = %or.rhs, %assert_ok11
  %val13 = phi i1 [ true, %assert_ok11 ], [ %eq, %or.rhs ], !dbg !1101
  br i1 %val13, label %assert_ok18, label %assert_fail14, !dbg !1101

assert_fail14:                                    ; preds = %or.phi
  store %"char[]" { ptr @.panic_msg.19, i64 94 }, ptr %indirectarg15, align 8
  store %"char[]" { ptr @.file.56, i64 17 }, ptr %indirectarg16, align 8
  store %"char[]" { ptr @.func.65, i64 8 }, ptr %indirectarg17, align 8
  %33 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %33(ptr align 8 %indirectarg15, ptr align 8 %indirectarg16, ptr align 8 %indirectarg17, i32 69) #6, !dbg !1102
  unreachable, !dbg !1102

assert_ok18:                                      ; preds = %or.phi
  %34 = load i64, ptr %len, align 8, !dbg !1103
  %eq19 = icmp eq i64 0, %34, !dbg !1103
  br i1 %eq19, label %or.phi22, label %or.rhs20, !dbg !1103

or.rhs20:                                         ; preds = %assert_ok18
  %35 = load ptr, ptr %dst, align 8, !dbg !1103
  %36 = load i64, ptr %len, align 8, !dbg !1103
  %ptradd_any21 = getelementptr i8, ptr %35, i64 %36, !dbg !1103
  %37 = load ptr, ptr %src, align 8, !dbg !1103
  %le = icmp ule ptr %ptradd_any21, %37, !dbg !1103
  br label %or.phi22, !dbg !1103

or.phi22:                                         ; preds = %or.rhs20, %assert_ok18
  %val23 = phi i1 [ true, %assert_ok18 ], [ %le, %or.rhs20 ], !dbg !1103
  br i1 %val23, label %or.phi27, label %or.rhs24, !dbg !1103

or.rhs24:                                         ; preds = %or.phi22
  %38 = load ptr, ptr %src, align 8, !dbg !1103
  %39 = load i64, ptr %len, align 8, !dbg !1103
  %ptradd_any25 = getelementptr i8, ptr %38, i64 %39, !dbg !1103
  %40 = load ptr, ptr %dst, align 8, !dbg !1103
  %le26 = icmp ule ptr %ptradd_any25, %40, !dbg !1103
  br label %or.phi27, !dbg !1103

or.phi27:                                         ; preds = %or.rhs24, %or.phi22
  %val28 = phi i1 [ true, %or.phi22 ], [ %le26, %or.rhs24 ], !dbg !1103
  br i1 %val28, label %assert_ok33, label %assert_fail29, !dbg !1103

assert_fail29:                                    ; preds = %or.phi27
  store %"char[]" { ptr @.panic_msg.20, i64 95 }, ptr %indirectarg30, align 8
  store %"char[]" { ptr @.file.56, i64 17 }, ptr %indirectarg31, align 8
  store %"char[]" { ptr @.func.65, i64 8 }, ptr %indirectarg32, align 8
  %41 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %41(ptr align 8 %indirectarg30, ptr align 8 %indirectarg31, ptr align 8 %indirectarg32, i32 69) #6, !dbg !1102
  unreachable, !dbg !1102

assert_ok33:                                      ; preds = %or.phi27
  %42 = load ptr, ptr %dst, align 8, !dbg !1104
  %43 = load ptr, ptr %src, align 8, !dbg !1104
  %44 = load i64, ptr %len, align 8, !dbg !1104
  call void @llvm.memcpy.p0.p0.i64(ptr %42, ptr %43, i64 %44, i1 false), !dbg !1104
  %45 = load ptr, ptr %self, align 8, !dbg !1105
  %46 = load ptr, ptr %old_pointer, align 8, !dbg !1105
  call void @std.core.mem.allocator.SimpleHeapAllocator._free(ptr %45, ptr %46), !dbg !1105
  %47 = load ptr, ptr %new, align 8, !dbg !1106
  store ptr %47, ptr %0, align 8, !dbg !1106
  ret i64 0, !dbg !1106

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.56, i64 17 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.65, i64 8 }, ptr %indirectarg2, align 8
  %48 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %48(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 62) #6, !dbg !1083
  unreachable, !dbg !1083
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @std.core.mem.allocator.SimpleHeapAllocator._calloc(ptr %0, ptr %1, i64 %2) #0 !dbg !1107 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %bytes = alloca i64, align 8
  %data = alloca ptr, align 8
  %error_var = alloca i64, align 8
  %retparam = alloca ptr, align 8
  %dst = alloca ptr, align 8
  %len = alloca i64, align 8
  %reterr = alloca i64, align 8
  %3 = icmp eq ptr %1, null, !dbg !1110
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !1110
  br i1 %4, label %panic, label %checkok, !dbg !1110

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !1111, !DIExpression(), !1112)
  store i64 %2, ptr %bytes, align 8
    #dbg_declare(ptr %bytes, !1113, !DIExpression(), !1112)
    #dbg_declare(ptr %data, !1114, !DIExpression(), !1115)
  %5 = load ptr, ptr %self, align 8
  %6 = load i64, ptr %bytes, align 8
  %7 = call i64 @std.core.mem.allocator.SimpleHeapAllocator._alloc(ptr %retparam, ptr %5, i64 %6), !dbg !1115
  %not_err = icmp eq i64 %7, 0, !dbg !1115
  %8 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1115
  br i1 %8, label %after_check, label %assign_optional, !dbg !1115

assign_optional:                                  ; preds = %checkok
  store i64 %7, ptr %error_var, align 8, !dbg !1115
  br label %guard_block, !dbg !1115

after_check:                                      ; preds = %checkok
  br label %noerr_block, !dbg !1115

guard_block:                                      ; preds = %assign_optional
  %9 = load i64, ptr %error_var, align 8, !dbg !1115
  ret i64 %9, !dbg !1115

noerr_block:                                      ; preds = %after_check
  %10 = load ptr, ptr %retparam, align 8, !dbg !1115
  store ptr %10, ptr %data, align 8, !dbg !1115
  %11 = load ptr, ptr %data, align 8
  store ptr %11, ptr %dst, align 8
  %12 = load i64, ptr %bytes, align 8
  store i64 %12, ptr %len, align 8
  %13 = load ptr, ptr %dst, align 8, !dbg !1116
  %14 = load i64, ptr %len, align 8, !dbg !1116
  call void @llvm.memset.p0.i64(ptr align 16 %13, i8 0, i64 %14, i1 false), !dbg !1116
  %15 = load ptr, ptr %data, align 8, !dbg !1119
  store ptr %15, ptr %0, align 8, !dbg !1119
  ret i64 0, !dbg !1119

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.56, i64 17 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.66, i64 7 }, ptr %indirectarg2, align 8
  %16 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %16(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 74) #6, !dbg !1112
  unreachable, !dbg !1112
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @std.core.mem.allocator.SimpleHeapAllocator._alloc(ptr %0, ptr %1, i64 %2) #0 !dbg !1120 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %bytes = alloca i64, align 8
  %aligned_bytes = alloca i64, align 8
  %x = alloca i64, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %error_var = alloca i64, align 8
  %current = alloca ptr, align 8
  %previous = alloca ptr, align 8
  %switch = alloca i8, align 1
  %reterr = alloca i64, align 8
  %unallocated = alloca ptr, align 8
  %reterr35 = alloca i64, align 8
  %error_var38 = alloca i64, align 8
  %reterr44 = alloca i64, align 8
  %retparam = alloca ptr, align 8
  %3 = icmp eq ptr %1, null, !dbg !1121
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !1121
  br i1 %4, label %panic, label %checkok, !dbg !1121

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !1122, !DIExpression(), !1123)
  store i64 %2, ptr %bytes, align 8
    #dbg_declare(ptr %bytes, !1124, !DIExpression(), !1123)
    #dbg_declare(ptr %aligned_bytes, !1125, !DIExpression(), !1126)
  %5 = load i64, ptr %bytes, align 8, !dbg !1126
  store i64 16, ptr %x, align 8
  %6 = load i64, ptr %x, align 8, !dbg !1127
  %neq = icmp ne i64 0, %6, !dbg !1127
  br i1 %neq, label %and.rhs, label %and.phi, !dbg !1127

and.rhs:                                          ; preds = %checkok
  %7 = load i64, ptr %x, align 8, !dbg !1127
  %8 = load i64, ptr %x, align 8, !dbg !1127
  %sub = sub i64 %8, 1, !dbg !1127
  %and = and i64 %7, %sub, !dbg !1127
  %eq = icmp eq i64 %and, 0, !dbg !1127
  br label %and.phi, !dbg !1127

and.phi:                                          ; preds = %and.rhs, %checkok
  %val = phi i1 [ false, %checkok ], [ %eq, %and.rhs ], !dbg !1127
  br i1 %val, label %assert_ok, label %assert_fail, !dbg !1127

assert_fail:                                      ; preds = %and.phi
  store %"char[]" { ptr @.panic_msg.14, i64 51 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.file.56, i64 17 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.func.67, i64 6 }, ptr %indirectarg5, align 8
  %9 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %9(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, i32 83) #6, !dbg !1126
  unreachable, !dbg !1126

assert_ok:                                        ; preds = %and.phi
  %10 = call i64 @std.core.mem.aligned_offset(i64 %5, i64 16), !dbg !1126
  store i64 %10, ptr %aligned_bytes, align 8, !dbg !1126
  %11 = load ptr, ptr %self, align 8, !dbg !1129
  %ptradd = getelementptr inbounds i8, ptr %11, i64 8, !dbg !1129
  %12 = load ptr, ptr %ptradd, align 8, !dbg !1129
  %i2nb = icmp eq ptr %12, null, !dbg !1129
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !1129

if.then:                                          ; preds = %assert_ok
  %13 = load ptr, ptr %self, align 8, !dbg !1130
  %14 = load i64, ptr %aligned_bytes, align 8, !dbg !1130
  %15 = call i64 @std.core.mem.allocator.SimpleHeapAllocator.add_block(ptr %13, i64 %14), !dbg !1130
  %not_err = icmp eq i64 %15, 0, !dbg !1130
  %16 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1130
  br i1 %16, label %after_check, label %assign_optional, !dbg !1130

assign_optional:                                  ; preds = %if.then
  store i64 %15, ptr %error_var, align 8, !dbg !1130
  br label %guard_block, !dbg !1130

after_check:                                      ; preds = %if.then
  br label %noerr_block, !dbg !1130

guard_block:                                      ; preds = %assign_optional
  %17 = load i64, ptr %error_var, align 8, !dbg !1130
  ret i64 %17, !dbg !1130

noerr_block:                                      ; preds = %after_check
  br label %if.exit, !dbg !1130

if.exit:                                          ; preds = %noerr_block, %assert_ok
    #dbg_declare(ptr %current, !1132, !DIExpression(), !1133)
  %18 = load ptr, ptr %self, align 8, !dbg !1133
  %ptradd6 = getelementptr inbounds i8, ptr %18, i64 8, !dbg !1133
  %19 = load ptr, ptr %ptradd6, align 8, !dbg !1133
  store ptr %19, ptr %current, align 8, !dbg !1133
    #dbg_declare(ptr %previous, !1134, !DIExpression(), !1135)
  %20 = load ptr, ptr %current, align 8, !dbg !1135
  store ptr %20, ptr %previous, align 8, !dbg !1135
  br label %loop.cond, !dbg !1136

loop.cond:                                        ; preds = %switch.exit, %if.exit
  %21 = load ptr, ptr %current, align 8, !dbg !1137
  %i2b = icmp ne ptr %21, null, !dbg !1137
  br i1 %i2b, label %loop.body, label %loop.exit, !dbg !1137

loop.body:                                        ; preds = %loop.cond
  store i8 1, ptr %switch, align 1
  br label %switch.entry

switch.entry:                                     ; preds = %loop.body
  %22 = load i8, ptr %switch, align 1
  %23 = trunc i8 %22 to i1
  %24 = load ptr, ptr %current, align 8, !dbg !1139
  %ptradd7 = getelementptr inbounds i8, ptr %24, i64 8, !dbg !1139
  %25 = load i64, ptr %ptradd7, align 8, !dbg !1139
  %26 = load i64, ptr %aligned_bytes, align 8, !dbg !1139
  %ge = icmp uge i64 %25, %26, !dbg !1139
  br i1 %ge, label %and.rhs8, label %and.phi12, !dbg !1139

and.rhs8:                                         ; preds = %switch.entry
  %27 = load ptr, ptr %current, align 8, !dbg !1139
  %ptradd9 = getelementptr inbounds i8, ptr %27, i64 8, !dbg !1139
  %28 = load i64, ptr %ptradd9, align 8, !dbg !1139
  %29 = load i64, ptr %aligned_bytes, align 8, !dbg !1139
  %add = add i64 %29, 16, !dbg !1139
  %add10 = add i64 %add, 64, !dbg !1139
  %ge11 = icmp sge i64 %add10, %28, !dbg !1139
  %check = icmp sge i64 %28, 0, !dbg !1139
  %siui-ge = and i1 %check, %ge11, !dbg !1139
  br label %and.phi12, !dbg !1139

and.phi12:                                        ; preds = %and.rhs8, %switch.entry
  %val13 = phi i1 [ false, %switch.entry ], [ %siui-ge, %and.rhs8 ], !dbg !1139
  %eq14 = icmp eq i1 %val13, %23, !dbg !1139
  br i1 %eq14, label %switch.case, label %next_if, !dbg !1139

switch.case:                                      ; preds = %and.phi12
  %30 = load ptr, ptr %current, align 8, !dbg !1142
  %31 = load ptr, ptr %previous, align 8, !dbg !1142
  %eq15 = icmp eq ptr %30, %31, !dbg !1142
  br i1 %eq15, label %if.then16, label %if.else, !dbg !1142

if.then16:                                        ; preds = %switch.case
  %32 = load ptr, ptr %current, align 8, !dbg !1144
  %33 = load ptr, ptr %self, align 8, !dbg !1144
  %ptradd17 = getelementptr inbounds i8, ptr %33, i64 8, !dbg !1144
  %34 = load ptr, ptr %32, align 8, !dbg !1144
  store ptr %34, ptr %ptradd17, align 8, !dbg !1144
  br label %if.exit18, !dbg !1144

if.else:                                          ; preds = %switch.case
  %35 = load ptr, ptr %current, align 8, !dbg !1146
  %36 = load ptr, ptr %previous, align 8, !dbg !1146
  %37 = load ptr, ptr %35, align 8, !dbg !1146
  store ptr %37, ptr %36, align 8, !dbg !1146
  br label %if.exit18, !dbg !1146

if.exit18:                                        ; preds = %if.else, %if.then16
  %38 = load ptr, ptr %current, align 8, !dbg !1148
  store ptr null, ptr %38, align 8, !dbg !1148
  %39 = load ptr, ptr %current, align 8, !dbg !1149
  %ptradd_any = getelementptr i8, ptr %39, i64 16, !dbg !1149
  store ptr %ptradd_any, ptr %0, align 8, !dbg !1149
  ret i64 0, !dbg !1149

next_if:                                          ; preds = %and.phi12
  %40 = load ptr, ptr %current, align 8, !dbg !1150
  %ptradd19 = getelementptr inbounds i8, ptr %40, i64 8, !dbg !1150
  %41 = load i64, ptr %ptradd19, align 8, !dbg !1150
  %42 = load i64, ptr %aligned_bytes, align 8, !dbg !1150
  %gt = icmp ugt i64 %41, %42, !dbg !1150
  %eq20 = icmp eq i1 %gt, %23, !dbg !1150
  br i1 %eq20, label %switch.case21, label %next_if37, !dbg !1150

switch.case21:                                    ; preds = %next_if
    #dbg_declare(ptr %unallocated, !1151, !DIExpression(), !1153)
  %43 = load ptr, ptr %current, align 8, !dbg !1153
  %44 = load i64, ptr %aligned_bytes, align 8, !dbg !1153
  %add22 = add i64 %44, 16, !dbg !1153
  %ptradd_any23 = getelementptr i8, ptr %43, i64 %add22, !dbg !1153
  store ptr %ptradd_any23, ptr %unallocated, align 8, !dbg !1153
  %45 = load ptr, ptr %current, align 8, !dbg !1154
  %ptradd24 = getelementptr inbounds i8, ptr %45, i64 8, !dbg !1154
  %46 = load i64, ptr %ptradd24, align 8, !dbg !1154
  %47 = load i64, ptr %aligned_bytes, align 8, !dbg !1154
  %sub25 = sub i64 %46, %47, !dbg !1154
  %sub26 = sub i64 %sub25, 16, !dbg !1154
  %48 = load ptr, ptr %unallocated, align 8, !dbg !1154
  %ptradd27 = getelementptr inbounds i8, ptr %48, i64 8, !dbg !1154
  store i64 %sub26, ptr %ptradd27, align 8, !dbg !1154
  %49 = load ptr, ptr %current, align 8, !dbg !1155
  %50 = load ptr, ptr %unallocated, align 8, !dbg !1155
  %51 = load ptr, ptr %49, align 8, !dbg !1155
  store ptr %51, ptr %50, align 8, !dbg !1155
  %52 = load ptr, ptr %current, align 8, !dbg !1156
  %53 = load ptr, ptr %self, align 8, !dbg !1156
  %ptradd28 = getelementptr inbounds i8, ptr %53, i64 8, !dbg !1156
  %54 = load ptr, ptr %ptradd28, align 8, !dbg !1156
  %eq29 = icmp eq ptr %52, %54, !dbg !1156
  br i1 %eq29, label %if.then30, label %if.else32, !dbg !1156

if.then30:                                        ; preds = %switch.case21
  %55 = load ptr, ptr %self, align 8, !dbg !1157
  %ptradd31 = getelementptr inbounds i8, ptr %55, i64 8, !dbg !1157
  %56 = load ptr, ptr %unallocated, align 8, !dbg !1157
  store ptr %56, ptr %ptradd31, align 8, !dbg !1157
  br label %if.exit33, !dbg !1157

if.else32:                                        ; preds = %switch.case21
  %57 = load ptr, ptr %previous, align 8, !dbg !1159
  %58 = load ptr, ptr %unallocated, align 8, !dbg !1159
  store ptr %58, ptr %57, align 8, !dbg !1159
  br label %if.exit33, !dbg !1159

if.exit33:                                        ; preds = %if.else32, %if.then30
  %59 = load ptr, ptr %current, align 8, !dbg !1161
  %ptradd34 = getelementptr inbounds i8, ptr %59, i64 8, !dbg !1161
  %60 = load i64, ptr %aligned_bytes, align 8, !dbg !1161
  store i64 %60, ptr %ptradd34, align 8, !dbg !1161
  %61 = load ptr, ptr %current, align 8, !dbg !1162
  store ptr null, ptr %61, align 8, !dbg !1162
  %62 = load ptr, ptr %current, align 8, !dbg !1163
  %ptradd_any36 = getelementptr i8, ptr %62, i64 16, !dbg !1163
  store ptr %ptradd_any36, ptr %0, align 8, !dbg !1163
  ret i64 0, !dbg !1163

next_if37:                                        ; preds = %next_if
  br label %switch.default, !dbg !1163

switch.default:                                   ; preds = %next_if37
  %63 = load ptr, ptr %current, align 8, !dbg !1164
  store ptr %63, ptr %previous, align 8, !dbg !1164
  %64 = load ptr, ptr %current, align 8, !dbg !1166
  %65 = load ptr, ptr %64, align 8, !dbg !1166
  store ptr %65, ptr %current, align 8, !dbg !1166
  br label %switch.exit, !dbg !1166

switch.exit:                                      ; preds = %switch.default
  br label %loop.cond, !dbg !1166

loop.exit:                                        ; preds = %loop.cond
  %66 = load ptr, ptr %self, align 8, !dbg !1167
  %67 = load i64, ptr %aligned_bytes, align 8, !dbg !1167
  %68 = call i64 @std.core.mem.allocator.SimpleHeapAllocator.add_block(ptr %66, i64 %67), !dbg !1167
  %not_err39 = icmp eq i64 %68, 0, !dbg !1167
  %69 = call i1 @llvm.expect.i1(i1 %not_err39, i1 true), !dbg !1167
  br i1 %69, label %after_check41, label %assign_optional40, !dbg !1167

assign_optional40:                                ; preds = %loop.exit
  store i64 %68, ptr %error_var38, align 8, !dbg !1167
  br label %guard_block42, !dbg !1167

after_check41:                                    ; preds = %loop.exit
  br label %noerr_block43, !dbg !1167

guard_block42:                                    ; preds = %assign_optional40
  %70 = load i64, ptr %error_var38, align 8, !dbg !1167
  ret i64 %70, !dbg !1167

noerr_block43:                                    ; preds = %after_check41
  %71 = load ptr, ptr %self, align 8
  %72 = load i64, ptr %aligned_bytes, align 8
  %73 = call i64 @std.core.mem.allocator.SimpleHeapAllocator._alloc(ptr %retparam, ptr %71, i64 %72), !dbg !1168
  %not_err45 = icmp eq i64 %73, 0, !dbg !1168
  %74 = call i1 @llvm.expect.i1(i1 %not_err45, i1 true), !dbg !1168
  br i1 %74, label %after_check47, label %assign_optional46, !dbg !1168

assign_optional46:                                ; preds = %noerr_block43
  store i64 %73, ptr %reterr44, align 8, !dbg !1168
  br label %err_retblock, !dbg !1168

after_check47:                                    ; preds = %noerr_block43
  %75 = load ptr, ptr %retparam, align 8, !dbg !1168
  store ptr %75, ptr %0, align 8, !dbg !1168
  ret i64 0, !dbg !1168

err_retblock:                                     ; preds = %assign_optional46
  %76 = load i64, ptr %reterr44, align 8, !dbg !1168
  ret i64 %76, !dbg !1168

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.56, i64 17 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.67, i64 6 }, ptr %indirectarg2, align 8
  %77 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %77(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 81) #6, !dbg !1123
  unreachable, !dbg !1123
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @std.core.mem.allocator.SimpleHeapAllocator.add_block(ptr %0, i64 %1) #0 !dbg !1169 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %aligned_bytes = alloca i64, align 8
  %x = alloca i64, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %result = alloca %"char[]", align 8
  %error_var = alloca i64, align 8
  %indirectarg13 = alloca %"char[]", align 8
  %indirectarg14 = alloca %"char[]", align 8
  %indirectarg15 = alloca %"char[]", align 8
  %retparam = alloca %"char[]", align 8
  %new_block = alloca ptr, align 8
  %2 = icmp eq ptr %0, null, !dbg !1172
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !1172
  br i1 %3, label %panic, label %checkok, !dbg !1172

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1173, !DIExpression(), !1174)
  store i64 %1, ptr %aligned_bytes, align 8
    #dbg_declare(ptr %aligned_bytes, !1175, !DIExpression(), !1174)
  %4 = load i64, ptr %aligned_bytes, align 8, !dbg !1176
  store i64 16, ptr %x, align 8
  %5 = load i64, ptr %x, align 8, !dbg !1177
  %neq = icmp ne i64 0, %5, !dbg !1177
  br i1 %neq, label %and.rhs, label %and.phi, !dbg !1177

and.rhs:                                          ; preds = %checkok
  %6 = load i64, ptr %x, align 8, !dbg !1177
  %7 = load i64, ptr %x, align 8, !dbg !1177
  %sub = sub i64 %7, 1, !dbg !1177
  %and = and i64 %6, %sub, !dbg !1177
  %eq = icmp eq i64 %and, 0, !dbg !1177
  br label %and.phi, !dbg !1177

and.phi:                                          ; preds = %and.rhs, %checkok
  %val = phi i1 [ false, %checkok ], [ %eq, %and.rhs ], !dbg !1177
  br i1 %val, label %assert_ok, label %assert_fail, !dbg !1177

assert_fail:                                      ; preds = %and.phi
  store %"char[]" { ptr @.panic_msg.14, i64 51 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.file.56, i64 17 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.func.68, i64 9 }, ptr %indirectarg5, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, i32 132) #6, !dbg !1176
  unreachable, !dbg !1176

assert_ok:                                        ; preds = %and.phi
  %9 = call i64 @std.core.mem.aligned_offset(i64 %4, i64 16), !dbg !1176
  %10 = load i64, ptr %aligned_bytes, align 8, !dbg !1176
  %eq6 = icmp eq i64 %9, %10, !dbg !1176
  br i1 %eq6, label %assert_ok11, label %assert_fail7, !dbg !1176

assert_fail7:                                     ; preds = %assert_ok
  store %"char[]" { ptr @.panic_msg.69, i64 96 }, ptr %indirectarg8, align 8
  store %"char[]" { ptr @.file.56, i64 17 }, ptr %indirectarg9, align 8
  store %"char[]" { ptr @.func.68, i64 9 }, ptr %indirectarg10, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11(ptr align 8 %indirectarg8, ptr align 8 %indirectarg9, ptr align 8 %indirectarg10, i32 132) #6, !dbg !1176
  unreachable, !dbg !1176

assert_ok11:                                      ; preds = %assert_ok
    #dbg_declare(ptr %result, !1179, !DIExpression(), !1180)
  %12 = load ptr, ptr %self, align 8, !dbg !1180
  %13 = load ptr, ptr %12, align 8, !dbg !1180
  %checknull = icmp eq ptr %13, null, !dbg !1180
  %14 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1180
  br i1 %14, label %panic12, label %checkok16, !dbg !1180

checkok16:                                        ; preds = %assert_ok11
  %15 = load i64, ptr %aligned_bytes, align 8, !dbg !1180
  %add = add i64 %15, 16, !dbg !1180
  %16 = call i64 %13(ptr %retparam, i64 %add), !dbg !1180
  %not_err = icmp eq i64 %16, 0, !dbg !1180
  %17 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1180
  br i1 %17, label %after_check, label %assign_optional, !dbg !1180

assign_optional:                                  ; preds = %checkok16
  store i64 %16, ptr %error_var, align 8, !dbg !1180
  br label %guard_block, !dbg !1180

after_check:                                      ; preds = %checkok16
  br label %noerr_block, !dbg !1180

guard_block:                                      ; preds = %assign_optional
  %18 = load i64, ptr %error_var, align 8, !dbg !1180
  ret i64 %18, !dbg !1180

noerr_block:                                      ; preds = %after_check
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %result, ptr align 8 %retparam, i32 16, i1 false), !dbg !1180
    #dbg_declare(ptr %new_block, !1181, !DIExpression(), !1182)
  %19 = load ptr, ptr %result, align 8, !dbg !1182
  store ptr %19, ptr %new_block, align 8, !dbg !1182
  %ptradd = getelementptr inbounds i8, ptr %result, i64 8, !dbg !1183
  %20 = load i64, ptr %ptradd, align 8, !dbg !1183
  %sub17 = sub i64 %20, 16, !dbg !1183
  %21 = load ptr, ptr %new_block, align 8, !dbg !1183
  %ptradd18 = getelementptr inbounds i8, ptr %21, i64 8, !dbg !1183
  store i64 %sub17, ptr %ptradd18, align 8, !dbg !1183
  %22 = load ptr, ptr %new_block, align 8, !dbg !1184
  store ptr null, ptr %22, align 8, !dbg !1184
  %23 = load ptr, ptr %new_block, align 8, !dbg !1185
  %ptradd_any = getelementptr i8, ptr %23, i64 16, !dbg !1185
  %24 = load ptr, ptr %self, align 8, !dbg !1185
  call void @std.core.mem.allocator.SimpleHeapAllocator._free(ptr %24, ptr %ptradd_any), !dbg !1185
  ret i64 0, !dbg !1185

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.56, i64 17 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.68, i64 9 }, ptr %indirectarg2, align 8
  %25 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %25(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 130) #6, !dbg !1174
  unreachable, !dbg !1174

panic12:                                          ; preds = %assert_ok11
  store %"char[]" { ptr @.panic_msg.70, i64 56 }, ptr %indirectarg13, align 8
  store %"char[]" { ptr @.file.56, i64 17 }, ptr %indirectarg14, align 8
  store %"char[]" { ptr @.func.68, i64 9 }, ptr %indirectarg15, align 8
  %26 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %26(ptr align 8 %indirectarg13, ptr align 8 %indirectarg14, ptr align 8 %indirectarg15, i32 133) #6, !dbg !1180
  unreachable, !dbg !1180
}

; Function Attrs: nounwind ssp uwtable
define internal void @std.core.mem.allocator.SimpleHeapAllocator._free(ptr %0, ptr %1) #0 !dbg !1186 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %ptr = alloca ptr, align 8
  %block = alloca ptr, align 8
  %current = alloca ptr, align 8
  %prev = alloca ptr, align 8
  %2 = icmp eq ptr %0, null, !dbg !1189
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !1189
  br i1 %3, label %panic, label %checkok, !dbg !1189

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1190, !DIExpression(), !1191)
  store ptr %1, ptr %ptr, align 8
    #dbg_declare(ptr %ptr, !1192, !DIExpression(), !1191)
  %4 = load ptr, ptr %ptr, align 8, !dbg !1193
  %i2nb = icmp eq ptr %4, null, !dbg !1193
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !1193

if.then:                                          ; preds = %checkok
  ret void, !dbg !1193

if.exit:                                          ; preds = %checkok
    #dbg_declare(ptr %block, !1194, !DIExpression(), !1195)
  %5 = load ptr, ptr %ptr, align 8, !dbg !1195
  %ptradd_any = getelementptr i8, ptr %5, i64 -16, !dbg !1195
  store ptr %ptradd_any, ptr %block, align 8, !dbg !1195
  %6 = load ptr, ptr %self, align 8, !dbg !1196
  %ptradd = getelementptr inbounds i8, ptr %6, i64 8, !dbg !1196
  %7 = load ptr, ptr %ptradd, align 8, !dbg !1196
  %i2nb3 = icmp eq ptr %7, null, !dbg !1196
  br i1 %i2nb3, label %if.then4, label %if.exit6, !dbg !1196

if.then4:                                         ; preds = %if.exit
  %8 = load ptr, ptr %self, align 8, !dbg !1197
  %ptradd5 = getelementptr inbounds i8, ptr %8, i64 8, !dbg !1197
  %9 = load ptr, ptr %block, align 8, !dbg !1197
  store ptr %9, ptr %ptradd5, align 8, !dbg !1197
  ret void, !dbg !1199

if.exit6:                                         ; preds = %if.exit
    #dbg_declare(ptr %current, !1200, !DIExpression(), !1201)
  %10 = load ptr, ptr %self, align 8, !dbg !1201
  %ptradd7 = getelementptr inbounds i8, ptr %10, i64 8, !dbg !1201
  %11 = load ptr, ptr %ptradd7, align 8, !dbg !1201
  store ptr %11, ptr %current, align 8, !dbg !1201
    #dbg_declare(ptr %prev, !1202, !DIExpression(), !1203)
  %12 = load ptr, ptr %current, align 8, !dbg !1203
  store ptr %12, ptr %prev, align 8, !dbg !1203
  br label %loop.cond, !dbg !1204

loop.cond:                                        ; preds = %if.exit13, %if.exit6
  %13 = load ptr, ptr %current, align 8, !dbg !1205
  %i2b = icmp ne ptr %13, null, !dbg !1205
  br i1 %i2b, label %loop.body, label %loop.exit, !dbg !1205

loop.body:                                        ; preds = %loop.cond
  %14 = load ptr, ptr %block, align 8, !dbg !1207
  %15 = load ptr, ptr %current, align 8, !dbg !1207
  %lt = icmp ult ptr %14, %15, !dbg !1207
  br i1 %lt, label %if.then8, label %if.exit13, !dbg !1207

if.then8:                                         ; preds = %loop.body
  %16 = load ptr, ptr %block, align 8, !dbg !1209
  %17 = load ptr, ptr %prev, align 8, !dbg !1209
  %gt = icmp ugt ptr %16, %17, !dbg !1209
  br i1 %gt, label %if.then9, label %if.exit10, !dbg !1209

if.then9:                                         ; preds = %if.then8
  br label %loop.exit, !dbg !1209

if.exit10:                                        ; preds = %if.then8
  %18 = load ptr, ptr %current, align 8, !dbg !1211
  %19 = load ptr, ptr %prev, align 8, !dbg !1211
  %eq = icmp eq ptr %18, %19, !dbg !1211
  br i1 %eq, label %if.then11, label %if.exit12, !dbg !1211

if.then11:                                        ; preds = %if.exit10
  br label %loop.exit, !dbg !1211

if.exit12:                                        ; preds = %if.exit10
  br label %if.exit13, !dbg !1211

if.exit13:                                        ; preds = %if.exit12, %loop.body
  %20 = load ptr, ptr %current, align 8, !dbg !1212
  store ptr %20, ptr %prev, align 8, !dbg !1212
  %21 = load ptr, ptr %prev, align 8, !dbg !1213
  %22 = load ptr, ptr %21, align 8, !dbg !1213
  store ptr %22, ptr %current, align 8, !dbg !1213
  br label %loop.cond, !dbg !1213

loop.exit:                                        ; preds = %if.then11, %if.then9, %loop.cond
  %23 = load ptr, ptr %current, align 8, !dbg !1214
  %i2b14 = icmp ne ptr %23, null, !dbg !1214
  br i1 %i2b14, label %if.then15, label %if.exit25, !dbg !1214

if.then15:                                        ; preds = %loop.exit
  %24 = load ptr, ptr %current, align 8, !dbg !1215
  %25 = load ptr, ptr %block, align 8, !dbg !1215
  %ptradd_any16 = getelementptr i8, ptr %25, i64 16, !dbg !1215
  %26 = load ptr, ptr %block, align 8, !dbg !1215
  %ptradd17 = getelementptr inbounds i8, ptr %26, i64 8, !dbg !1215
  %27 = load i64, ptr %ptradd17, align 8, !dbg !1215
  %ptradd_any18 = getelementptr i8, ptr %ptradd_any16, i64 %27, !dbg !1215
  %eq19 = icmp eq ptr %24, %ptradd_any18, !dbg !1215
  br i1 %eq19, label %if.then20, label %if.else, !dbg !1215

if.then20:                                        ; preds = %if.then15
  %28 = load ptr, ptr %block, align 8, !dbg !1217
  %ptradd21 = getelementptr inbounds i8, ptr %28, i64 8, !dbg !1217
  %29 = load i64, ptr %ptradd21, align 8, !dbg !1217
  %30 = load ptr, ptr %current, align 8, !dbg !1217
  %ptradd22 = getelementptr inbounds i8, ptr %30, i64 8, !dbg !1217
  %31 = load i64, ptr %ptradd22, align 8, !dbg !1217
  %add = add i64 %31, 16, !dbg !1217
  %add23 = add i64 %29, %add, !dbg !1217
  store i64 %add23, ptr %ptradd21, align 8, !dbg !1217
  %32 = load ptr, ptr %current, align 8, !dbg !1219
  %33 = load ptr, ptr %block, align 8, !dbg !1219
  %34 = load ptr, ptr %32, align 8, !dbg !1219
  store ptr %34, ptr %33, align 8, !dbg !1219
  br label %if.exit24, !dbg !1219

if.else:                                          ; preds = %if.then15
  %35 = load ptr, ptr %block, align 8, !dbg !1220
  %36 = load ptr, ptr %current, align 8, !dbg !1220
  store ptr %36, ptr %35, align 8, !dbg !1220
  br label %if.exit24, !dbg !1220

if.exit24:                                        ; preds = %if.else, %if.then20
  br label %if.exit25, !dbg !1220

if.exit25:                                        ; preds = %if.exit24, %loop.exit
  %37 = load ptr, ptr %prev, align 8, !dbg !1222
  %38 = load ptr, ptr %current, align 8, !dbg !1222
  %eq26 = icmp eq ptr %37, %38, !dbg !1222
  br i1 %eq26, label %if.then27, label %if.else29, !dbg !1222

if.then27:                                        ; preds = %if.exit25
  %39 = load ptr, ptr %self, align 8, !dbg !1223
  %ptradd28 = getelementptr inbounds i8, ptr %39, i64 8, !dbg !1223
  %40 = load ptr, ptr %block, align 8, !dbg !1223
  store ptr %40, ptr %ptradd28, align 8, !dbg !1223
  br label %if.exit41, !dbg !1223

if.else29:                                        ; preds = %if.exit25
  %41 = load ptr, ptr %block, align 8, !dbg !1225
  %42 = load ptr, ptr %prev, align 8, !dbg !1225
  %ptradd_any30 = getelementptr i8, ptr %42, i64 16, !dbg !1225
  %43 = load ptr, ptr %prev, align 8, !dbg !1225
  %ptradd31 = getelementptr inbounds i8, ptr %43, i64 8, !dbg !1225
  %44 = load i64, ptr %ptradd31, align 8, !dbg !1225
  %ptradd_any32 = getelementptr i8, ptr %ptradd_any30, i64 %44, !dbg !1225
  %eq33 = icmp eq ptr %41, %ptradd_any32, !dbg !1225
  br i1 %eq33, label %if.then34, label %if.else39, !dbg !1225

if.then34:                                        ; preds = %if.else29
  %45 = load ptr, ptr %prev, align 8, !dbg !1227
  %ptradd35 = getelementptr inbounds i8, ptr %45, i64 8, !dbg !1227
  %46 = load i64, ptr %ptradd35, align 8, !dbg !1227
  %47 = load ptr, ptr %block, align 8, !dbg !1227
  %ptradd36 = getelementptr inbounds i8, ptr %47, i64 8, !dbg !1227
  %48 = load i64, ptr %ptradd36, align 8, !dbg !1227
  %add37 = add i64 %48, 16, !dbg !1227
  %add38 = add i64 %46, %add37, !dbg !1227
  store i64 %add38, ptr %ptradd35, align 8, !dbg !1227
  %49 = load ptr, ptr %block, align 8, !dbg !1229
  %50 = load ptr, ptr %prev, align 8, !dbg !1229
  %51 = load ptr, ptr %49, align 8, !dbg !1229
  store ptr %51, ptr %50, align 8, !dbg !1229
  br label %if.exit40, !dbg !1229

if.else39:                                        ; preds = %if.else29
  %52 = load ptr, ptr %prev, align 8, !dbg !1230
  %53 = load ptr, ptr %block, align 8, !dbg !1230
  store ptr %53, ptr %52, align 8, !dbg !1230
  br label %if.exit40, !dbg !1230

if.exit40:                                        ; preds = %if.else39, %if.then34
  br label %if.exit41, !dbg !1230

if.exit41:                                        ; preds = %if.exit40, %if.then27
  ret void, !dbg !1230

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.56, i64 17 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.71, i64 5 }, ptr %indirectarg2, align 8
  %54 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %54(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 141) #6, !dbg !1191
  unreachable, !dbg !1191
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.core.mem.allocator.LibcAllocator.acquire(ptr %0, ptr %1, i64 %2, i32 %3, i64 %4) #0 comdat !dbg !1232 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %bytes = alloca i64, align 8
  %init_type = alloca i32, align 4
  %alignment = alloca i64, align 8
  %reterr = alloca i64, align 8
  %reterr4 = alloca i64, align 8
  %data = alloca ptr, align 8
  %reterr17 = alloca i64, align 8
  %5 = icmp eq ptr %1, null, !dbg !1236
  %6 = call i1 @llvm.expect.i1(i1 %5, i1 false), !dbg !1236
  br i1 %6, label %panic, label %checkok, !dbg !1236

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !1237, !DIExpression(), !1238)
  store i64 %2, ptr %bytes, align 8
    #dbg_declare(ptr %bytes, !1239, !DIExpression(), !1238)
  store i32 %3, ptr %init_type, align 4
    #dbg_declare(ptr %init_type, !1240, !DIExpression(), !1238)
  store i64 %4, ptr %alignment, align 8
    #dbg_declare(ptr %alignment, !1241, !DIExpression(), !1238)
  %7 = load i32, ptr %init_type, align 4, !dbg !1242
  %eq = icmp eq i32 %7, 1, !dbg !1242
  br i1 %eq, label %if.then, label %if.exit10, !dbg !1242

if.then:                                          ; preds = %checkok
  %8 = load i64, ptr %alignment, align 8, !dbg !1243
  %lt = icmp ult i64 0, %8, !dbg !1243
  br i1 %lt, label %if.then3, label %if.exit, !dbg !1243

if.then3:                                         ; preds = %if.then
  %9 = load i64, ptr %bytes, align 8, !dbg !1245
  %10 = load i64, ptr %alignment, align 8, !dbg !1245
  %11 = call ptr @_aligned_recalloc(ptr null, i64 1, i64 %9, i64 %10), !dbg !1245
  %i2b = icmp ne ptr %11, null, !dbg !1245
  br i1 %i2b, label %cond.lhs, label %cond.rhs, !dbg !1245

cond.lhs:                                         ; preds = %if.then3
  br label %cond.phi, !dbg !1245

cond.rhs:                                         ; preds = %if.then3
  store i64 ptrtoint (ptr @std.core.mem.OUT_OF_MEMORY to i64), ptr %reterr, align 8, !dbg !1245
  br label %err_retblock, !dbg !1245

cond.phi:                                         ; preds = %cond.lhs
  store ptr %11, ptr %0, align 8, !dbg !1245
  ret i64 0, !dbg !1245

err_retblock:                                     ; preds = %cond.rhs
  %12 = load i64, ptr %reterr, align 8, !dbg !1245
  ret i64 %12, !dbg !1245

if.exit:                                          ; preds = %if.then
  %13 = load i64, ptr %bytes, align 8, !dbg !1247
  %14 = call ptr @calloc(i64 1, i64 %13), !dbg !1247
  %i2b5 = icmp ne ptr %14, null, !dbg !1247
  br i1 %i2b5, label %cond.lhs6, label %cond.rhs7, !dbg !1247

cond.lhs6:                                        ; preds = %if.exit
  br label %cond.phi8, !dbg !1247

cond.rhs7:                                        ; preds = %if.exit
  store i64 ptrtoint (ptr @std.core.mem.OUT_OF_MEMORY to i64), ptr %reterr4, align 8, !dbg !1247
  br label %err_retblock9, !dbg !1247

cond.phi8:                                        ; preds = %cond.lhs6
  store ptr %14, ptr %0, align 8, !dbg !1247
  ret i64 0, !dbg !1247

err_retblock9:                                    ; preds = %cond.rhs7
  %15 = load i64, ptr %reterr4, align 8, !dbg !1247
  ret i64 %15, !dbg !1247

if.exit10:                                        ; preds = %checkok
    #dbg_declare(ptr %data, !1248, !DIExpression(), !1249)
  %16 = load i64, ptr %alignment, align 8, !dbg !1249
  %lt11 = icmp ult i64 0, %16, !dbg !1249
  br i1 %lt11, label %cond.lhs12, label %cond.rhs13, !dbg !1249

cond.lhs12:                                       ; preds = %if.exit10
  %17 = load i64, ptr %bytes, align 8, !dbg !1249
  %18 = load i64, ptr %alignment, align 8, !dbg !1249
  %19 = call ptr @_aligned_malloc(i64 %17, i64 %18), !dbg !1249
  br label %cond.phi14, !dbg !1249

cond.rhs13:                                       ; preds = %if.exit10
  %20 = load i64, ptr %bytes, align 8, !dbg !1249
  %21 = call ptr @malloc(i64 %20), !dbg !1249
  br label %cond.phi14, !dbg !1249

cond.phi14:                                       ; preds = %cond.rhs13, %cond.lhs12
  %val = phi ptr [ %19, %cond.lhs12 ], [ %21, %cond.rhs13 ], !dbg !1249
  store ptr %val, ptr %data, align 8, !dbg !1249
  %22 = load ptr, ptr %data, align 8, !dbg !1250
  %i2nb = icmp eq ptr %22, null, !dbg !1250
  br i1 %i2nb, label %if.then15, label %if.exit16, !dbg !1250

if.then15:                                        ; preds = %cond.phi14
  ret i64 ptrtoint (ptr @std.core.mem.OUT_OF_MEMORY to i64), !dbg !1250

if.exit16:                                        ; preds = %cond.phi14
  %23 = load ptr, ptr %data, align 8, !dbg !1251
  store ptr %23, ptr %0, align 8, !dbg !1251
  ret i64 0, !dbg !1251

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg2, align 8
  %24 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %24(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 80) #6, !dbg !1238
  unreachable, !dbg !1238
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.core.mem.allocator.LibcAllocator.resize(ptr %0, ptr %1, ptr %2, i64 %3, i64 %4) #0 comdat !dbg !1252 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %old_ptr = alloca ptr, align 8
  %new_bytes = alloca i64, align 8
  %alignment = alloca i64, align 8
  %reterr = alloca i64, align 8
  %reterr4 = alloca i64, align 8
  %5 = icmp eq ptr %1, null, !dbg !1255
  %6 = call i1 @llvm.expect.i1(i1 %5, i1 false), !dbg !1255
  br i1 %6, label %panic, label %checkok, !dbg !1255

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !1256, !DIExpression(), !1257)
  store ptr %2, ptr %old_ptr, align 8
    #dbg_declare(ptr %old_ptr, !1258, !DIExpression(), !1257)
  store i64 %3, ptr %new_bytes, align 8
    #dbg_declare(ptr %new_bytes, !1259, !DIExpression(), !1257)
  store i64 %4, ptr %alignment, align 8
    #dbg_declare(ptr %alignment, !1260, !DIExpression(), !1257)
  %7 = load i64, ptr %alignment, align 8, !dbg !1261
  %i2b = icmp ne i64 %7, 0, !dbg !1261
  br i1 %i2b, label %if.then, label %if.exit, !dbg !1261

if.then:                                          ; preds = %checkok
  %8 = load ptr, ptr %old_ptr, align 8, !dbg !1262
  %9 = load i64, ptr %new_bytes, align 8, !dbg !1262
  %10 = load i64, ptr %alignment, align 8, !dbg !1262
  %11 = call ptr @_aligned_realloc(ptr %8, i64 %9, i64 %10), !dbg !1262
  %i2b3 = icmp ne ptr %11, null, !dbg !1262
  br i1 %i2b3, label %cond.lhs, label %cond.rhs, !dbg !1262

cond.lhs:                                         ; preds = %if.then
  br label %cond.phi, !dbg !1262

cond.rhs:                                         ; preds = %if.then
  store i64 ptrtoint (ptr @std.core.mem.OUT_OF_MEMORY to i64), ptr %reterr, align 8, !dbg !1262
  br label %err_retblock, !dbg !1262

cond.phi:                                         ; preds = %cond.lhs
  store ptr %11, ptr %0, align 8, !dbg !1262
  ret i64 0, !dbg !1262

err_retblock:                                     ; preds = %cond.rhs
  %12 = load i64, ptr %reterr, align 8, !dbg !1262
  ret i64 %12, !dbg !1262

if.exit:                                          ; preds = %checkok
  %13 = load ptr, ptr %old_ptr, align 8, !dbg !1264
  %14 = load i64, ptr %new_bytes, align 8, !dbg !1264
  %15 = call ptr @realloc(ptr %13, i64 %14), !dbg !1264
  %i2b5 = icmp ne ptr %15, null, !dbg !1264
  br i1 %i2b5, label %cond.lhs6, label %cond.rhs7, !dbg !1264

cond.lhs6:                                        ; preds = %if.exit
  br label %cond.phi8, !dbg !1264

cond.rhs7:                                        ; preds = %if.exit
  store i64 ptrtoint (ptr @std.core.mem.OUT_OF_MEMORY to i64), ptr %reterr4, align 8, !dbg !1264
  br label %err_retblock9, !dbg !1264

cond.phi8:                                        ; preds = %cond.lhs6
  store ptr %15, ptr %0, align 8, !dbg !1264
  ret i64 0, !dbg !1264

err_retblock9:                                    ; preds = %cond.rhs7
  %16 = load i64, ptr %reterr4, align 8, !dbg !1264
  ret i64 %16, !dbg !1264

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg2, align 8
  %17 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %17(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 98) #6, !dbg !1257
  unreachable, !dbg !1257
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.core.mem.allocator.LibcAllocator.release(ptr %0, ptr %1, i8 zeroext %2) #0 comdat !dbg !1265 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %old_ptr = alloca ptr, align 8
  %aligned = alloca i8, align 1
  %3 = icmp eq ptr %0, null, !dbg !1268
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !1268
  br i1 %4, label %panic, label %checkok, !dbg !1268

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1269, !DIExpression(), !1270)
  store ptr %1, ptr %old_ptr, align 8
    #dbg_declare(ptr %old_ptr, !1271, !DIExpression(), !1270)
  store i8 %2, ptr %aligned, align 1
    #dbg_declare(ptr %aligned, !1272, !DIExpression(), !1270)
  %5 = load i8, ptr %aligned, align 1, !dbg !1273
  %6 = trunc i8 %5 to i1, !dbg !1273
  br i1 %6, label %if.then, label %if.exit, !dbg !1273

if.then:                                          ; preds = %checkok
  %7 = load ptr, ptr %old_ptr, align 8, !dbg !1274
  call void @_aligned_free(ptr %7), !dbg !1274
  ret void, !dbg !1276

if.exit:                                          ; preds = %checkok
  %8 = load ptr, ptr %old_ptr, align 8, !dbg !1277
  %9 = call ptr @free(ptr %8), !dbg !1277
  ret void, !dbg !1277

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.6, i64 7 }, ptr %indirectarg2, align 8
  %10 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %10(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 107) #6, !dbg !1270
  unreachable, !dbg !1270
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.core.mem.allocator.OnStackAllocator.init(ptr %0, ptr align 8 %1, ptr align 8 %2) #0 comdat !dbg !1278 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %3 = icmp eq ptr %0, null, !dbg !1295
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !1295
  br i1 %4, label %panic, label %checkok, !dbg !1295

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1296, !DIExpression(), !1297)
    #dbg_declare(ptr %1, !1298, !DIExpression(), !1297)
    #dbg_declare(ptr %2, !1299, !DIExpression(), !1297)
  %5 = load ptr, ptr %self, align 8, !dbg !1300
  %ptradd = getelementptr inbounds i8, ptr %5, i64 16, !dbg !1300
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %ptradd, ptr align 8 %1, i32 16, i1 false), !dbg !1300
  %6 = load ptr, ptr %self, align 8, !dbg !1301
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %6, ptr align 8 %2, i32 16, i1 false), !dbg !1301
  %7 = load ptr, ptr %self, align 8, !dbg !1302
  %ptradd3 = getelementptr inbounds i8, ptr %7, i64 32, !dbg !1302
  store i64 0, ptr %ptradd3, align 8, !dbg !1302
  ret void, !dbg !1302

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.74, i64 21 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 32) #6, !dbg !1297
  unreachable, !dbg !1297
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.core.mem.allocator.OnStackAllocator.free(ptr %0) #0 comdat !dbg !1303 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %chunk = alloca ptr, align 8
  %allocator = alloca %any, align 8
  %ptr = alloca ptr, align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg7 = alloca %"char[]", align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %allocator13 = alloca %any, align 8
  %ptr15 = alloca ptr, align 8
  %indirectarg21 = alloca %"char[]", align 8
  %indirectarg22 = alloca %"char[]", align 8
  %indirectarg23 = alloca %"char[]", align 8
  %.inlinecache26 = alloca ptr, align 8
  %.cachedtype27 = alloca ptr, align 8
  %indirectarg35 = alloca %"char[]", align 8
  %indirectarg36 = alloca %"char[]", align 8
  %indirectarg37 = alloca %"char[]", align 8
  %old = alloca ptr, align 8
  %allocator42 = alloca %any, align 8
  %ptr43 = alloca ptr, align 8
  %indirectarg49 = alloca %"char[]", align 8
  %indirectarg50 = alloca %"char[]", align 8
  %indirectarg51 = alloca %"char[]", align 8
  %.inlinecache54 = alloca ptr, align 8
  %.cachedtype55 = alloca ptr, align 8
  %indirectarg63 = alloca %"char[]", align 8
  %indirectarg64 = alloca %"char[]", align 8
  %indirectarg65 = alloca %"char[]", align 8
  store ptr null, ptr %.cachedtype55, align 8, !dbg !1306
  store ptr null, ptr %.cachedtype27, align 8, !dbg !1306
  store ptr null, ptr %.cachedtype, align 8, !dbg !1306
  %1 = icmp eq ptr %0, null, !dbg !1306
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1306
  br i1 %2, label %panic, label %checkok, !dbg !1306

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1307, !DIExpression(), !1308)
    #dbg_declare(ptr %chunk, !1309, !DIExpression(), !1310)
  %3 = load ptr, ptr %self, align 8, !dbg !1310
  %ptradd = getelementptr inbounds i8, ptr %3, i64 40, !dbg !1310
  %4 = load ptr, ptr %ptradd, align 8, !dbg !1310
  store ptr %4, ptr %chunk, align 8, !dbg !1310
  br label %loop.cond, !dbg !1311

loop.cond:                                        ; preds = %expr_block.exit67, %checkok
  %5 = load ptr, ptr %chunk, align 8, !dbg !1312
  %i2b = icmp ne ptr %5, null, !dbg !1312
  br i1 %i2b, label %loop.body, label %loop.exit, !dbg !1312

loop.body:                                        ; preds = %loop.cond
  %6 = load ptr, ptr %chunk, align 8, !dbg !1314
  %7 = load i8, ptr %6, align 8, !dbg !1314
  %8 = trunc i8 %7 to i1, !dbg !1314
  br i1 %8, label %if.then, label %if.else, !dbg !1314

if.then:                                          ; preds = %loop.body
  %9 = load ptr, ptr %self, align 8, !dbg !1316
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator, ptr align 8 %9, i32 16, i1 false)
  %10 = load ptr, ptr %chunk, align 8, !dbg !1316
  %ptradd3 = getelementptr inbounds i8, ptr %10, i64 16, !dbg !1316
  %11 = load ptr, ptr %ptradd3, align 8
  store ptr %11, ptr %ptr, align 8
  %12 = load ptr, ptr %ptr, align 8, !dbg !1318
  %i2nb = icmp eq ptr %12, null, !dbg !1318
  br i1 %i2nb, label %if.then4, label %if.exit, !dbg !1318

if.then4:                                         ; preds = %if.then
  br label %expr_block.exit, !dbg !1318

if.exit:                                          ; preds = %if.then
  %13 = load ptr, ptr %ptr, align 8, !dbg !1320
  %neq = icmp ne ptr %13, null, !dbg !1320
  br i1 %neq, label %assert_ok, label %assert_fail, !dbg !1320

assert_fail:                                      ; preds = %if.exit
  store %"char[]" { ptr @.panic_msg.28, i64 75 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.file.24, i64 16 }, ptr %indirectarg6, align 8
  store %"char[]" { ptr @.func.43, i64 4 }, ptr %indirectarg7, align 8
  %14 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %14(ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, ptr align 8 %indirectarg7, i32 164) #6, !dbg !1320
  unreachable, !dbg !1320

assert_ok:                                        ; preds = %if.exit
  %ptradd8 = getelementptr inbounds i8, ptr %allocator, i64 8, !dbg !1320
  %15 = load i64, ptr %ptradd8, align 8, !dbg !1320
  %16 = inttoptr i64 %15 to ptr, !dbg !1320
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !1306
  %17 = icmp eq ptr %16, %type, !dbg !1306
  br i1 %17, label %cache_hit, label %cache_miss, !dbg !1306

cache_miss:                                       ; preds = %assert_ok
  %ptradd9 = getelementptr inbounds i8, ptr %16, i64 16, !dbg !1306
  %18 = load ptr, ptr %ptradd9, align 8, !dbg !1306
  %19 = call ptr @.dyn_search(ptr %18, ptr @"$sel.release"), !dbg !1306
  store ptr %19, ptr %.inlinecache, align 8, !dbg !1306
  store ptr %16, ptr %.cachedtype, align 8, !dbg !1306
  br label %20, !dbg !1306

cache_hit:                                        ; preds = %assert_ok
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !1306
  br label %20, !dbg !1306

20:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %19, %cache_miss ], !dbg !1306
  %21 = icmp eq ptr %fn_phi, null, !dbg !1306
  br i1 %21, label %missing_function, label %match, !dbg !1306

missing_function:                                 ; preds = %20
  store %"char[]" { ptr @.panic_msg.29, i64 44 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.file.24, i64 16 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.func.43, i64 4 }, ptr %indirectarg12, align 8
  %22 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %22(ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, i32 164) #6, !dbg !1320
  unreachable, !dbg !1320

match:                                            ; preds = %20
  %23 = load ptr, ptr %allocator, align 8, !dbg !1320
  call void %fn_phi(ptr %23, ptr %13, i8 zeroext 1), !dbg !1320
  br label %expr_block.exit, !dbg !1320

expr_block.exit:                                  ; preds = %match, %if.then4
  br label %if.exit40, !dbg !1320

if.else:                                          ; preds = %loop.body
  %24 = load ptr, ptr %self, align 8, !dbg !1321
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator13, ptr align 8 %24, i32 16, i1 false)
  %25 = load ptr, ptr %chunk, align 8, !dbg !1321
  %ptradd14 = getelementptr inbounds i8, ptr %25, i64 16, !dbg !1321
  %26 = load ptr, ptr %ptradd14, align 8
  store ptr %26, ptr %ptr15, align 8
  %27 = load ptr, ptr %ptr15, align 8, !dbg !1323
  %i2nb16 = icmp eq ptr %27, null, !dbg !1323
  br i1 %i2nb16, label %if.then17, label %if.exit18, !dbg !1323

if.then17:                                        ; preds = %if.else
  br label %expr_block.exit39, !dbg !1323

if.exit18:                                        ; preds = %if.else
  %28 = load ptr, ptr %ptr15, align 8, !dbg !1325
  %neq19 = icmp ne ptr %28, null, !dbg !1325
  br i1 %neq19, label %assert_ok24, label %assert_fail20, !dbg !1325

assert_fail20:                                    ; preds = %if.exit18
  store %"char[]" { ptr @.panic_msg.28, i64 75 }, ptr %indirectarg21, align 8
  store %"char[]" { ptr @.file.24, i64 16 }, ptr %indirectarg22, align 8
  store %"char[]" { ptr @.func.43, i64 4 }, ptr %indirectarg23, align 8
  %29 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %29(ptr align 8 %indirectarg21, ptr align 8 %indirectarg22, ptr align 8 %indirectarg23, i32 123) #6, !dbg !1325
  unreachable, !dbg !1325

assert_ok24:                                      ; preds = %if.exit18
  %ptradd25 = getelementptr inbounds i8, ptr %allocator13, i64 8, !dbg !1325
  %30 = load i64, ptr %ptradd25, align 8, !dbg !1325
  %31 = inttoptr i64 %30 to ptr, !dbg !1325
  %type28 = load ptr, ptr %.cachedtype27, align 8, !dbg !1306
  %32 = icmp eq ptr %31, %type28, !dbg !1306
  br i1 %32, label %cache_hit31, label %cache_miss29, !dbg !1306

cache_miss29:                                     ; preds = %assert_ok24
  %ptradd30 = getelementptr inbounds i8, ptr %31, i64 16, !dbg !1306
  %33 = load ptr, ptr %ptradd30, align 8, !dbg !1306
  %34 = call ptr @.dyn_search(ptr %33, ptr @"$sel.release"), !dbg !1306
  store ptr %34, ptr %.inlinecache26, align 8, !dbg !1306
  store ptr %31, ptr %.cachedtype27, align 8, !dbg !1306
  br label %35, !dbg !1306

cache_hit31:                                      ; preds = %assert_ok24
  %cache_hit_fn32 = load ptr, ptr %.inlinecache26, align 8, !dbg !1306
  br label %35, !dbg !1306

35:                                               ; preds = %cache_hit31, %cache_miss29
  %fn_phi33 = phi ptr [ %cache_hit_fn32, %cache_hit31 ], [ %34, %cache_miss29 ], !dbg !1306
  %36 = icmp eq ptr %fn_phi33, null, !dbg !1306
  br i1 %36, label %missing_function34, label %match38, !dbg !1306

missing_function34:                               ; preds = %35
  store %"char[]" { ptr @.panic_msg.29, i64 44 }, ptr %indirectarg35, align 8
  store %"char[]" { ptr @.file.24, i64 16 }, ptr %indirectarg36, align 8
  store %"char[]" { ptr @.func.43, i64 4 }, ptr %indirectarg37, align 8
  %37 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %37(ptr align 8 %indirectarg35, ptr align 8 %indirectarg36, ptr align 8 %indirectarg37, i32 123) #6, !dbg !1325
  unreachable, !dbg !1325

match38:                                          ; preds = %35
  %38 = load ptr, ptr %allocator13, align 8, !dbg !1325
  call void %fn_phi33(ptr %38, ptr %28, i8 zeroext 0), !dbg !1325
  br label %expr_block.exit39, !dbg !1325

expr_block.exit39:                                ; preds = %match38, %if.then17
  br label %if.exit40, !dbg !1325

if.exit40:                                        ; preds = %expr_block.exit39, %expr_block.exit
    #dbg_declare(ptr %old, !1326, !DIExpression(), !1327)
  %39 = load ptr, ptr %chunk, align 8, !dbg !1327
  store ptr %39, ptr %old, align 8, !dbg !1327
  %40 = load ptr, ptr %chunk, align 8, !dbg !1328
  %ptradd41 = getelementptr inbounds i8, ptr %40, i64 8, !dbg !1328
  %41 = load ptr, ptr %ptradd41, align 8, !dbg !1328
  store ptr %41, ptr %chunk, align 8, !dbg !1328
  %42 = load ptr, ptr %self, align 8, !dbg !1329
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator42, ptr align 8 %42, i32 16, i1 false)
  %43 = load ptr, ptr %old, align 8
  store ptr %43, ptr %ptr43, align 8
  %44 = load ptr, ptr %ptr43, align 8, !dbg !1330
  %i2nb44 = icmp eq ptr %44, null, !dbg !1330
  br i1 %i2nb44, label %if.then45, label %if.exit46, !dbg !1330

if.then45:                                        ; preds = %if.exit40
  br label %expr_block.exit67, !dbg !1330

if.exit46:                                        ; preds = %if.exit40
  %45 = load ptr, ptr %ptr43, align 8, !dbg !1332
  %neq47 = icmp ne ptr %45, null, !dbg !1332
  br i1 %neq47, label %assert_ok52, label %assert_fail48, !dbg !1332

assert_fail48:                                    ; preds = %if.exit46
  store %"char[]" { ptr @.panic_msg.28, i64 75 }, ptr %indirectarg49, align 8
  store %"char[]" { ptr @.file.24, i64 16 }, ptr %indirectarg50, align 8
  store %"char[]" { ptr @.func.43, i64 4 }, ptr %indirectarg51, align 8
  %46 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %46(ptr align 8 %indirectarg49, ptr align 8 %indirectarg50, ptr align 8 %indirectarg51, i32 123) #6, !dbg !1332
  unreachable, !dbg !1332

assert_ok52:                                      ; preds = %if.exit46
  %ptradd53 = getelementptr inbounds i8, ptr %allocator42, i64 8, !dbg !1332
  %47 = load i64, ptr %ptradd53, align 8, !dbg !1332
  %48 = inttoptr i64 %47 to ptr, !dbg !1332
  %type56 = load ptr, ptr %.cachedtype55, align 8, !dbg !1306
  %49 = icmp eq ptr %48, %type56, !dbg !1306
  br i1 %49, label %cache_hit59, label %cache_miss57, !dbg !1306

cache_miss57:                                     ; preds = %assert_ok52
  %ptradd58 = getelementptr inbounds i8, ptr %48, i64 16, !dbg !1306
  %50 = load ptr, ptr %ptradd58, align 8, !dbg !1306
  %51 = call ptr @.dyn_search(ptr %50, ptr @"$sel.release"), !dbg !1306
  store ptr %51, ptr %.inlinecache54, align 8, !dbg !1306
  store ptr %48, ptr %.cachedtype55, align 8, !dbg !1306
  br label %52, !dbg !1306

cache_hit59:                                      ; preds = %assert_ok52
  %cache_hit_fn60 = load ptr, ptr %.inlinecache54, align 8, !dbg !1306
  br label %52, !dbg !1306

52:                                               ; preds = %cache_hit59, %cache_miss57
  %fn_phi61 = phi ptr [ %cache_hit_fn60, %cache_hit59 ], [ %51, %cache_miss57 ], !dbg !1306
  %53 = icmp eq ptr %fn_phi61, null, !dbg !1306
  br i1 %53, label %missing_function62, label %match66, !dbg !1306

missing_function62:                               ; preds = %52
  store %"char[]" { ptr @.panic_msg.29, i64 44 }, ptr %indirectarg63, align 8
  store %"char[]" { ptr @.file.24, i64 16 }, ptr %indirectarg64, align 8
  store %"char[]" { ptr @.func.43, i64 4 }, ptr %indirectarg65, align 8
  %54 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %54(ptr align 8 %indirectarg63, ptr align 8 %indirectarg64, ptr align 8 %indirectarg65, i32 123) #6, !dbg !1332
  unreachable, !dbg !1332

match66:                                          ; preds = %52
  %55 = load ptr, ptr %allocator42, align 8, !dbg !1332
  call void %fn_phi61(ptr %55, ptr %45, i8 zeroext 0), !dbg !1332
  br label %expr_block.exit67, !dbg !1332

expr_block.exit67:                                ; preds = %match66, %if.then45
  br label %loop.cond, !dbg !1332

loop.exit:                                        ; preds = %loop.cond
  %56 = load ptr, ptr %self, align 8, !dbg !1333
  %ptradd68 = getelementptr inbounds i8, ptr %56, i64 40, !dbg !1333
  store ptr null, ptr %ptradd68, align 8, !dbg !1333
  %57 = load ptr, ptr %self, align 8, !dbg !1334
  %ptradd69 = getelementptr inbounds i8, ptr %57, i64 32, !dbg !1334
  store i64 0, ptr %ptradd69, align 8, !dbg !1334
  ret void, !dbg !1334

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.74, i64 21 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.43, i64 4 }, ptr %indirectarg2, align 8
  %58 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %58(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 39) #6, !dbg !1308
  unreachable, !dbg !1308
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.core.mem.allocator.OnStackAllocator.release(ptr %0, ptr %1, i8 zeroext %2) #0 comdat !dbg !1335 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %old_pointer = alloca ptr, align 8
  %aligned = alloca i8, align 1
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %indirectarg13 = alloca %"char[]", align 8
  %indirectarg14 = alloca %"char[]", align 8
  %indirectarg15 = alloca %"char[]", align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !1338
  %3 = icmp eq ptr %0, null, !dbg !1338
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !1338
  br i1 %4, label %panic, label %checkok, !dbg !1338

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1339, !DIExpression(), !1340)
  store ptr %1, ptr %old_pointer, align 8
    #dbg_declare(ptr %old_pointer, !1341, !DIExpression(), !1340)
  store i8 %2, ptr %aligned, align 1
    #dbg_declare(ptr %aligned, !1342, !DIExpression(), !1340)
  %5 = load ptr, ptr %old_pointer, align 8, !dbg !1343
  %neq = icmp ne ptr %5, null, !dbg !1343
  br i1 %neq, label %assert_ok, label %assert_fail, !dbg !1343

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.17, i64 40 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.file.74, i64 21 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.func.6, i64 7 }, ptr %indirectarg5, align 8
  %6 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %6(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, i32 67) #6, !dbg !1343
  unreachable, !dbg !1343

assert_ok:                                        ; preds = %checkok
  %7 = load ptr, ptr %self, align 8, !dbg !1345
  %8 = load ptr, ptr %old_pointer, align 8, !dbg !1345
  %9 = call i8 @std.core.mem.allocator.allocation_in_stack_mem.8338(ptr %7, ptr %8), !dbg !1345
  %10 = trunc i8 %9 to i1, !dbg !1345
  br i1 %10, label %if.then, label %if.exit, !dbg !1345

if.then:                                          ; preds = %assert_ok
  ret void, !dbg !1345

if.exit:                                          ; preds = %assert_ok
  %11 = load ptr, ptr %self, align 8, !dbg !1346
  %12 = load ptr, ptr %old_pointer, align 8, !dbg !1346
  call void @std.core.mem.allocator.on_stack_allocator_remove_chunk.8341(ptr %11, ptr %12), !dbg !1346
  %13 = load ptr, ptr %self, align 8, !dbg !1347
  %14 = load ptr, ptr %old_pointer, align 8, !dbg !1347
  %15 = load i8, ptr %aligned, align 1, !dbg !1347
  %16 = trunc i8 %15 to i1, !dbg !1347
  %neq6 = icmp ne ptr %14, null, !dbg !1347
  br i1 %neq6, label %assert_ok11, label %assert_fail7, !dbg !1347

assert_fail7:                                     ; preds = %if.exit
  store %"char[]" { ptr @.panic_msg.28, i64 75 }, ptr %indirectarg8, align 8
  store %"char[]" { ptr @.file.74, i64 21 }, ptr %indirectarg9, align 8
  store %"char[]" { ptr @.func.6, i64 7 }, ptr %indirectarg10, align 8
  %17 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %17(ptr align 8 %indirectarg8, ptr align 8 %indirectarg9, ptr align 8 %indirectarg10, i32 73) #6, !dbg !1347
  unreachable, !dbg !1347

assert_ok11:                                      ; preds = %if.exit
  %ptradd = getelementptr inbounds i8, ptr %13, i64 8, !dbg !1347
  %18 = load i64, ptr %ptradd, align 8, !dbg !1347
  %19 = inttoptr i64 %18 to ptr, !dbg !1347
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !1338
  %20 = icmp eq ptr %19, %type, !dbg !1338
  br i1 %20, label %cache_hit, label %cache_miss, !dbg !1338

cache_miss:                                       ; preds = %assert_ok11
  %ptradd12 = getelementptr inbounds i8, ptr %19, i64 16, !dbg !1338
  %21 = load ptr, ptr %ptradd12, align 8, !dbg !1338
  %22 = call ptr @.dyn_search(ptr %21, ptr @"$sel.release"), !dbg !1338
  store ptr %22, ptr %.inlinecache, align 8, !dbg !1338
  store ptr %19, ptr %.cachedtype, align 8, !dbg !1338
  br label %23, !dbg !1338

cache_hit:                                        ; preds = %assert_ok11
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !1338
  br label %23, !dbg !1338

23:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %22, %cache_miss ], !dbg !1338
  %24 = icmp eq ptr %fn_phi, null, !dbg !1338
  br i1 %24, label %missing_function, label %match, !dbg !1338

missing_function:                                 ; preds = %23
  store %"char[]" { ptr @.panic_msg.29, i64 44 }, ptr %indirectarg13, align 8
  store %"char[]" { ptr @.file.74, i64 21 }, ptr %indirectarg14, align 8
  store %"char[]" { ptr @.func.6, i64 7 }, ptr %indirectarg15, align 8
  %25 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %25(ptr align 8 %indirectarg13, ptr align 8 %indirectarg14, ptr align 8 %indirectarg15, i32 73) #6, !dbg !1347
  unreachable, !dbg !1347

match:                                            ; preds = %23
  %26 = load ptr, ptr %13, align 8, !dbg !1347
  %27 = zext i1 %16 to i8, !dbg !1347
  call void %fn_phi(ptr %26, ptr %14, i8 zeroext %27), !dbg !1347
  ret void, !dbg !1347

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.74, i64 21 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.6, i64 7 }, ptr %indirectarg2, align 8
  %28 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %28(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 69) #6, !dbg !1340
  unreachable, !dbg !1340
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.core.mem.allocator.OnStackAllocator.resize(ptr %0, ptr %1, ptr %2, i64 %3, i64 %4) #0 comdat !dbg !1348 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %old_pointer = alloca ptr, align 8
  %size = alloca i64, align 8
  %alignment = alloca i64, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg7 = alloca %"char[]", align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %indirectarg13 = alloca %"char[]", align 8
  %indirectarg14 = alloca %"char[]", align 8
  %chunk = alloca ptr, align 8
  %indirectarg17 = alloca %"char[]", align 8
  %indirectarg18 = alloca %"char[]", align 8
  %indirectarg19 = alloca %"char[]", align 8
  %reterr = alloca i64, align 8
  %error_var = alloca i64, align 8
  %x = alloca i64, align 8
  %indirectarg24 = alloca %"char[]", align 8
  %indirectarg25 = alloca %"char[]", align 8
  %indirectarg26 = alloca %"char[]", align 8
  %indirectarg30 = alloca %"char[]", align 8
  %indirectarg31 = alloca %"char[]", align 8
  %indirectarg32 = alloca %"char[]", align 8
  %indirectarg36 = alloca %"char[]", align 8
  %indirectarg37 = alloca %"char[]", align 8
  %indirectarg38 = alloca %"char[]", align 8
  %indirectarg42 = alloca %"char[]", align 8
  %indirectarg43 = alloca %"char[]", align 8
  %indirectarg44 = alloca %"char[]", align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %indirectarg47 = alloca %"char[]", align 8
  %indirectarg48 = alloca %"char[]", align 8
  %indirectarg49 = alloca %"char[]", align 8
  %retparam = alloca ptr, align 8
  %header = alloca ptr, align 8
  %old_size = alloca i64, align 8
  %mem = alloca ptr, align 8
  %error_var51 = alloca i64, align 8
  %indirectarg54 = alloca %"char[]", align 8
  %indirectarg55 = alloca %"char[]", align 8
  %indirectarg56 = alloca %"char[]", align 8
  %indirectarg60 = alloca %"char[]", align 8
  %indirectarg61 = alloca %"char[]", align 8
  %indirectarg62 = alloca %"char[]", align 8
  %retparam64 = alloca ptr, align 8
  %dst = alloca ptr, align 8
  %src = alloca ptr, align 8
  %x70 = alloca i64, align 8
  %y = alloca i64, align 8
  %len = alloca i64, align 8
  %indirectarg73 = alloca %"char[]", align 8
  %indirectarg74 = alloca %"char[]", align 8
  %indirectarg75 = alloca %"char[]", align 8
  %indirectarg83 = alloca %"char[]", align 8
  %indirectarg84 = alloca %"char[]", align 8
  %indirectarg85 = alloca %"char[]", align 8
  %indirectarg99 = alloca %"char[]", align 8
  %indirectarg100 = alloca %"char[]", align 8
  %indirectarg101 = alloca %"char[]", align 8
  %reterr103 = alloca i64, align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !1351
  %5 = icmp eq ptr %1, null, !dbg !1351
  %6 = call i1 @llvm.expect.i1(i1 %5, i1 false), !dbg !1351
  br i1 %6, label %panic, label %checkok, !dbg !1351

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !1352, !DIExpression(), !1353)
  store ptr %2, ptr %old_pointer, align 8
    #dbg_declare(ptr %old_pointer, !1354, !DIExpression(), !1353)
  store i64 %3, ptr %size, align 8
    #dbg_declare(ptr %size, !1355, !DIExpression(), !1353)
  store i64 %4, ptr %alignment, align 8
    #dbg_declare(ptr %alignment, !1356, !DIExpression(), !1353)
  %7 = load i64, ptr %size, align 8, !dbg !1357
  %lt = icmp ult i64 0, %7, !dbg !1357
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !1357

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.13, i64 29 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.file.74, i64 21 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg5, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, i32 111) #6, !dbg !1357
  unreachable, !dbg !1357

assert_ok:                                        ; preds = %checkok
  %9 = load ptr, ptr %old_pointer, align 8, !dbg !1359
  %neq = icmp ne ptr %9, null, !dbg !1359
  br i1 %neq, label %assert_ok10, label %assert_fail6, !dbg !1359

assert_fail6:                                     ; preds = %assert_ok
  store %"char[]" { ptr @.panic_msg.17, i64 40 }, ptr %indirectarg7, align 8
  store %"char[]" { ptr @.file.74, i64 21 }, ptr %indirectarg8, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg9, align 8
  %10 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %10(ptr align 8 %indirectarg7, ptr align 8 %indirectarg8, ptr align 8 %indirectarg9, i32 112) #6, !dbg !1359
  unreachable, !dbg !1359

assert_ok10:                                      ; preds = %assert_ok
  %11 = load i64, ptr %alignment, align 8, !dbg !1360
  %le = icmp ule i64 %11, 268435456, !dbg !1360
  br i1 %le, label %assert_ok15, label %assert_fail11, !dbg !1360

assert_fail11:                                    ; preds = %assert_ok10
  store %"char[]" { ptr @.panic_msg.12, i64 80 }, ptr %indirectarg12, align 8
  store %"char[]" { ptr @.file.74, i64 21 }, ptr %indirectarg13, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg14, align 8
  %12 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %12(ptr align 8 %indirectarg12, ptr align 8 %indirectarg13, ptr align 8 %indirectarg14, i32 113) #6, !dbg !1360
  unreachable, !dbg !1360

assert_ok15:                                      ; preds = %assert_ok10
  %13 = load ptr, ptr %self, align 8, !dbg !1361
  %14 = load ptr, ptr %old_pointer, align 8, !dbg !1361
  %15 = call i8 @std.core.mem.allocator.allocation_in_stack_mem.8338(ptr %13, ptr %14), !dbg !1361
  %16 = trunc i8 %15 to i1, !dbg !1361
  br i1 %16, label %if.exit, label %if.else, !dbg !1361

if.else:                                          ; preds = %assert_ok15
    #dbg_declare(ptr %chunk, !1362, !DIExpression(), !1364)
  %17 = load ptr, ptr %self, align 8, !dbg !1364
  %18 = load ptr, ptr %old_pointer, align 8, !dbg !1364
  %19 = call ptr @std.core.mem.allocator.on_stack_allocator_find_chunk.8346(ptr %17, ptr %18), !dbg !1364
  store ptr %19, ptr %chunk, align 8, !dbg !1364
  %20 = load ptr, ptr %chunk, align 8, !dbg !1365
  %i2b = icmp ne ptr %20, null, !dbg !1365
  br i1 %i2b, label %assert_ok20, label %assert_fail16, !dbg !1365

assert_fail16:                                    ; preds = %if.else
  store %"char[]" { ptr @.panic_msg.80, i64 55 }, ptr %indirectarg17, align 8
  store %"char[]" { ptr @.file.74, i64 21 }, ptr %indirectarg18, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg19, align 8
  %21 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %21(ptr align 8 %indirectarg17, ptr align 8 %indirectarg18, ptr align 8 %indirectarg19, i32 120) #6, !dbg !1365
  unreachable, !dbg !1365

assert_ok20:                                      ; preds = %if.else
  %22 = load ptr, ptr %self, align 8, !dbg !1366
  %23 = load ptr, ptr %old_pointer, align 8, !dbg !1366
  %24 = load i64, ptr %size, align 8, !dbg !1366
  %25 = load i64, ptr %alignment, align 8, !dbg !1366
  %i2nb = icmp eq i64 %25, 0, !dbg !1367
  br i1 %i2nb, label %or.phi, label %or.rhs, !dbg !1367

or.rhs:                                           ; preds = %assert_ok20
  store i64 %25, ptr %x, align 8
  %26 = load i64, ptr %x, align 8, !dbg !1368
  %neq21 = icmp ne i64 0, %26, !dbg !1368
  br i1 %neq21, label %and.rhs, label %and.phi, !dbg !1368

and.rhs:                                          ; preds = %or.rhs
  %27 = load i64, ptr %x, align 8, !dbg !1368
  %28 = load i64, ptr %x, align 8, !dbg !1368
  %sub = sub i64 %28, 1, !dbg !1368
  %and = and i64 %27, %sub, !dbg !1368
  %eq = icmp eq i64 %and, 0, !dbg !1368
  br label %and.phi, !dbg !1368

and.phi:                                          ; preds = %and.rhs, %or.rhs
  %val = phi i1 [ false, %or.rhs ], [ %eq, %and.rhs ], !dbg !1368
  br label %or.phi, !dbg !1368

or.phi:                                           ; preds = %and.phi, %assert_ok20
  %val22 = phi i1 [ true, %assert_ok20 ], [ %val, %and.phi ], !dbg !1368
  br i1 %val22, label %assert_ok27, label %assert_fail23, !dbg !1368

assert_fail23:                                    ; preds = %or.phi
  store %"char[]" { ptr @.panic_msg.11, i64 65 }, ptr %indirectarg24, align 8
  store %"char[]" { ptr @.file.74, i64 21 }, ptr %indirectarg25, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg26, align 8
  %29 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %29(ptr align 8 %indirectarg24, ptr align 8 %indirectarg25, ptr align 8 %indirectarg26, i32 121) #6, !dbg !1366
  unreachable, !dbg !1366

assert_ok27:                                      ; preds = %or.phi
  %le28 = icmp ule i64 %25, 268435456, !dbg !1366
  br i1 %le28, label %assert_ok33, label %assert_fail29, !dbg !1366

assert_fail29:                                    ; preds = %assert_ok27
  store %"char[]" { ptr @.panic_msg.12, i64 80 }, ptr %indirectarg30, align 8
  store %"char[]" { ptr @.file.74, i64 21 }, ptr %indirectarg31, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg32, align 8
  %30 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %30(ptr align 8 %indirectarg30, ptr align 8 %indirectarg31, ptr align 8 %indirectarg32, i32 121) #6, !dbg !1366
  unreachable, !dbg !1366

assert_ok33:                                      ; preds = %assert_ok27
  %neq34 = icmp ne ptr %23, null, !dbg !1366
  br i1 %neq34, label %assert_ok39, label %assert_fail35, !dbg !1366

assert_fail35:                                    ; preds = %assert_ok33
  store %"char[]" { ptr @.panic_msg.7, i64 32 }, ptr %indirectarg36, align 8
  store %"char[]" { ptr @.file.74, i64 21 }, ptr %indirectarg37, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg38, align 8
  %31 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %31(ptr align 8 %indirectarg36, ptr align 8 %indirectarg37, ptr align 8 %indirectarg38, i32 121) #6, !dbg !1366
  unreachable, !dbg !1366

assert_ok39:                                      ; preds = %assert_ok33
  %lt40 = icmp ult i64 0, %24, !dbg !1366
  br i1 %lt40, label %assert_ok45, label %assert_fail41, !dbg !1366

assert_fail41:                                    ; preds = %assert_ok39
  store %"char[]" { ptr @.panic_msg.81, i64 33 }, ptr %indirectarg42, align 8
  store %"char[]" { ptr @.file.74, i64 21 }, ptr %indirectarg43, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg44, align 8
  %32 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %32(ptr align 8 %indirectarg42, ptr align 8 %indirectarg43, ptr align 8 %indirectarg44, i32 121) #6, !dbg !1366
  unreachable, !dbg !1366

assert_ok45:                                      ; preds = %assert_ok39
  %ptradd = getelementptr inbounds i8, ptr %22, i64 8, !dbg !1366
  %33 = load i64, ptr %ptradd, align 8, !dbg !1366
  %34 = inttoptr i64 %33 to ptr, !dbg !1366
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !1351
  %35 = icmp eq ptr %34, %type, !dbg !1351
  br i1 %35, label %cache_hit, label %cache_miss, !dbg !1351

cache_miss:                                       ; preds = %assert_ok45
  %ptradd46 = getelementptr inbounds i8, ptr %34, i64 16, !dbg !1351
  %36 = load ptr, ptr %ptradd46, align 8, !dbg !1351
  %37 = call ptr @.dyn_search(ptr %36, ptr @"$sel.resize"), !dbg !1351
  store ptr %37, ptr %.inlinecache, align 8, !dbg !1351
  store ptr %34, ptr %.cachedtype, align 8, !dbg !1351
  br label %38, !dbg !1351

cache_hit:                                        ; preds = %assert_ok45
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !1351
  br label %38, !dbg !1351

38:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %37, %cache_miss ], !dbg !1351
  %39 = icmp eq ptr %fn_phi, null, !dbg !1351
  br i1 %39, label %missing_function, label %match, !dbg !1351

missing_function:                                 ; preds = %38
  store %"char[]" { ptr @.panic_msg.82, i64 43 }, ptr %indirectarg47, align 8
  store %"char[]" { ptr @.file.74, i64 21 }, ptr %indirectarg48, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg49, align 8
  %40 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %40(ptr align 8 %indirectarg47, ptr align 8 %indirectarg48, ptr align 8 %indirectarg49, i32 121) #6, !dbg !1366
  unreachable, !dbg !1366

match:                                            ; preds = %38
  %41 = load ptr, ptr %22, align 8
  %42 = call i64 %fn_phi(ptr %retparam, ptr %41, ptr %23, i64 %24, i64 %25), !dbg !1366
  %not_err = icmp eq i64 %42, 0, !dbg !1366
  %43 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1366
  br i1 %43, label %after_check, label %assign_optional, !dbg !1366

assign_optional:                                  ; preds = %match
  store i64 %42, ptr %error_var, align 8, !dbg !1366
  br label %guard_block, !dbg !1366

after_check:                                      ; preds = %match
  br label %noerr_block, !dbg !1366

guard_block:                                      ; preds = %assign_optional
  %44 = load i64, ptr %error_var, align 8, !dbg !1366
  ret i64 %44, !dbg !1366

noerr_block:                                      ; preds = %after_check
  %45 = load ptr, ptr %chunk, align 8, !dbg !1366
  %ptradd50 = getelementptr inbounds i8, ptr %45, i64 16, !dbg !1366
  %46 = load ptr, ptr %retparam, align 8, !dbg !1366
  store ptr %46, ptr %ptradd50, align 8, !dbg !1366
  store ptr %46, ptr %0, align 8, !dbg !1366
  ret i64 0, !dbg !1366

if.exit:                                          ; preds = %assert_ok15
    #dbg_declare(ptr %header, !1370, !DIExpression(), !1376)
  %47 = load ptr, ptr %old_pointer, align 8, !dbg !1376
  %ptradd_any = getelementptr i8, ptr %47, i64 -8, !dbg !1376
  store ptr %ptradd_any, ptr %header, align 8, !dbg !1376
    #dbg_declare(ptr %old_size, !1377, !DIExpression(), !1378)
  %48 = load ptr, ptr %header, align 8, !dbg !1378
  %49 = load i64, ptr %48, align 8, !dbg !1378
  store i64 %49, ptr %old_size, align 8, !dbg !1378
    #dbg_declare(ptr %mem, !1379, !DIExpression(), !1380)
  %50 = load ptr, ptr %self, align 8, !dbg !1380
  %51 = load i64, ptr %size, align 8, !dbg !1380
  %52 = load i64, ptr %alignment, align 8, !dbg !1380
  %le52 = icmp ule i64 %52, 268435456, !dbg !1380
  br i1 %le52, label %assert_ok57, label %assert_fail53, !dbg !1380

assert_fail53:                                    ; preds = %if.exit
  store %"char[]" { ptr @.panic_msg.12, i64 80 }, ptr %indirectarg54, align 8
  store %"char[]" { ptr @.file.74, i64 21 }, ptr %indirectarg55, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg56, align 8
  %53 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %53(ptr align 8 %indirectarg54, ptr align 8 %indirectarg55, ptr align 8 %indirectarg56, i32 126) #6, !dbg !1380
  unreachable, !dbg !1380

assert_ok57:                                      ; preds = %if.exit
  %lt58 = icmp ult i64 0, %51, !dbg !1380
  br i1 %lt58, label %assert_ok63, label %assert_fail59, !dbg !1380

assert_fail59:                                    ; preds = %assert_ok57
  store %"char[]" { ptr @.panic_msg.13, i64 29 }, ptr %indirectarg60, align 8
  store %"char[]" { ptr @.file.74, i64 21 }, ptr %indirectarg61, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg62, align 8
  %54 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %54(ptr align 8 %indirectarg60, ptr align 8 %indirectarg61, ptr align 8 %indirectarg62, i32 126) #6, !dbg !1380
  unreachable, !dbg !1380

assert_ok63:                                      ; preds = %assert_ok57
  %55 = call i64 @std.core.mem.allocator.OnStackAllocator.acquire(ptr %retparam64, ptr %50, i64 %51, i32 0, i64 %52), !dbg !1380
  %not_err65 = icmp eq i64 %55, 0, !dbg !1380
  %56 = call i1 @llvm.expect.i1(i1 %not_err65, i1 true), !dbg !1380
  br i1 %56, label %after_check67, label %assign_optional66, !dbg !1380

assign_optional66:                                ; preds = %assert_ok63
  store i64 %55, ptr %error_var51, align 8, !dbg !1380
  br label %guard_block68, !dbg !1380

after_check67:                                    ; preds = %assert_ok63
  br label %noerr_block69, !dbg !1380

guard_block68:                                    ; preds = %assign_optional66
  %57 = load i64, ptr %error_var51, align 8, !dbg !1380
  ret i64 %57, !dbg !1380

noerr_block69:                                    ; preds = %after_check67
  %58 = load ptr, ptr %retparam64, align 8, !dbg !1380
  store ptr %58, ptr %mem, align 8, !dbg !1380
  %59 = load ptr, ptr %mem, align 8
  store ptr %59, ptr %dst, align 8
  %60 = load ptr, ptr %old_pointer, align 8
  store ptr %60, ptr %src, align 8
  %61 = load i64, ptr %old_size, align 8
  store i64 %61, ptr %x70, align 8
  %62 = load i64, ptr %size, align 8
  store i64 %62, ptr %y, align 8
  %63 = load i64, ptr %x70, align 8, !dbg !1381
  %64 = load i64, ptr %y, align 8, !dbg !1381
  %65 = call i64 @llvm.umin.i64(i64 %63, i64 %64), !dbg !1381
  store i64 %65, ptr %len, align 8
  %66 = load ptr, ptr %dst, align 8, !dbg !1384
  %neq71 = icmp ne ptr %66, null, !dbg !1384
  br i1 %neq71, label %assert_ok76, label %assert_fail72, !dbg !1384

assert_fail72:                                    ; preds = %noerr_block69
  store %"char[]" { ptr @.panic_msg.18, i64 37 }, ptr %indirectarg73, align 8
  store %"char[]" { ptr @.file.15, i64 6 }, ptr %indirectarg74, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg75, align 8
  %67 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %67(ptr align 8 %indirectarg73, ptr align 8 %indirectarg74, ptr align 8 %indirectarg75, i32 357) #6, !dbg !1384
  unreachable, !dbg !1384

assert_ok76:                                      ; preds = %noerr_block69
  %68 = load ptr, ptr %src, align 8, !dbg !1387
  %neq77 = icmp ne ptr %68, null, !dbg !1387
  br i1 %neq77, label %or.phi80, label %or.rhs78, !dbg !1387

or.rhs78:                                         ; preds = %assert_ok76
  %69 = load i64, ptr %len, align 8, !dbg !1387
  %eq79 = icmp eq i64 0, %69, !dbg !1387
  br label %or.phi80, !dbg !1387

or.phi80:                                         ; preds = %or.rhs78, %assert_ok76
  %val81 = phi i1 [ true, %assert_ok76 ], [ %eq79, %or.rhs78 ], !dbg !1387
  br i1 %val81, label %assert_ok86, label %assert_fail82, !dbg !1387

assert_fail82:                                    ; preds = %or.phi80
  store %"char[]" { ptr @.panic_msg.19, i64 94 }, ptr %indirectarg83, align 8
  store %"char[]" { ptr @.file.74, i64 21 }, ptr %indirectarg84, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg85, align 8
  %70 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %70(ptr align 8 %indirectarg83, ptr align 8 %indirectarg84, ptr align 8 %indirectarg85, i32 127) #6, !dbg !1388
  unreachable, !dbg !1388

assert_ok86:                                      ; preds = %or.phi80
  %71 = load i64, ptr %len, align 8, !dbg !1389
  %eq87 = icmp eq i64 0, %71, !dbg !1389
  br i1 %eq87, label %or.phi91, label %or.rhs88, !dbg !1389

or.rhs88:                                         ; preds = %assert_ok86
  %72 = load ptr, ptr %dst, align 8, !dbg !1389
  %73 = load i64, ptr %len, align 8, !dbg !1389
  %ptradd_any89 = getelementptr i8, ptr %72, i64 %73, !dbg !1389
  %74 = load ptr, ptr %src, align 8, !dbg !1389
  %le90 = icmp ule ptr %ptradd_any89, %74, !dbg !1389
  br label %or.phi91, !dbg !1389

or.phi91:                                         ; preds = %or.rhs88, %assert_ok86
  %val92 = phi i1 [ true, %assert_ok86 ], [ %le90, %or.rhs88 ], !dbg !1389
  br i1 %val92, label %or.phi96, label %or.rhs93, !dbg !1389

or.rhs93:                                         ; preds = %or.phi91
  %75 = load ptr, ptr %src, align 8, !dbg !1389
  %76 = load i64, ptr %len, align 8, !dbg !1389
  %ptradd_any94 = getelementptr i8, ptr %75, i64 %76, !dbg !1389
  %77 = load ptr, ptr %dst, align 8, !dbg !1389
  %le95 = icmp ule ptr %ptradd_any94, %77, !dbg !1389
  br label %or.phi96, !dbg !1389

or.phi96:                                         ; preds = %or.rhs93, %or.phi91
  %val97 = phi i1 [ true, %or.phi91 ], [ %le95, %or.rhs93 ], !dbg !1389
  br i1 %val97, label %assert_ok102, label %assert_fail98, !dbg !1389

assert_fail98:                                    ; preds = %or.phi96
  store %"char[]" { ptr @.panic_msg.20, i64 95 }, ptr %indirectarg99, align 8
  store %"char[]" { ptr @.file.74, i64 21 }, ptr %indirectarg100, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg101, align 8
  %78 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %78(ptr align 8 %indirectarg99, ptr align 8 %indirectarg100, ptr align 8 %indirectarg101, i32 127) #6, !dbg !1388
  unreachable, !dbg !1388

assert_ok102:                                     ; preds = %or.phi96
  %79 = load ptr, ptr %dst, align 8, !dbg !1390
  %80 = load ptr, ptr %src, align 8, !dbg !1390
  %81 = load i64, ptr %len, align 8, !dbg !1390
  call void @llvm.memcpy.p0.p0.i64(ptr align 16 %79, ptr align 16 %80, i64 %81, i1 false), !dbg !1390
  %82 = load ptr, ptr %mem, align 8, !dbg !1391
  store ptr %82, ptr %0, align 8, !dbg !1391
  ret i64 0, !dbg !1391

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.74, i64 21 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg2, align 8
  %83 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %83(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 115) #6, !dbg !1353
  unreachable, !dbg !1353
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.core.mem.allocator.OnStackAllocator.acquire(ptr %0, ptr %1, i64 %2, i32 %3, i64 %4) #0 comdat !dbg !1392 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %size = alloca i64, align 8
  %init_type = alloca i32, align 4
  %alignment = alloca i64, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg7 = alloca %"char[]", align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %aligned = alloca i8, align 1
  %total_len = alloca i64, align 8
  %start_mem = alloca ptr, align 8
  %unaligned_pointer_to_offset = alloca ptr, align 8
  %mem = alloca ptr, align 8
  %ptr = alloca ptr, align 8
  %alignment15 = alloca i64, align 8
  %x = alloca i64, align 8
  %indirectarg17 = alloca %"char[]", align 8
  %indirectarg18 = alloca %"char[]", align 8
  %indirectarg19 = alloca %"char[]", align 8
  %end = alloca i64, align 8
  %backing_allocator = alloca %any, align 8
  %chunk = alloca ptr, align 8
  %error_var = alloca i64, align 8
  %allocator = alloca %any, align 8
  %allocator23 = alloca %any, align 8
  %size24 = alloca i64, align 8
  %blockret = alloca ptr, align 8
  %x26 = alloca i64, align 8
  %indirectarg36 = alloca %"char[]", align 8
  %indirectarg37 = alloca %"char[]", align 8
  %indirectarg38 = alloca %"char[]", align 8
  %indirectarg41 = alloca %"char[]", align 8
  %indirectarg42 = alloca %"char[]", align 8
  %indirectarg43 = alloca %"char[]", align 8
  %indirectarg47 = alloca %"char[]", align 8
  %indirectarg48 = alloca %"char[]", align 8
  %indirectarg49 = alloca %"char[]", align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %indirectarg53 = alloca %"char[]", align 8
  %indirectarg54 = alloca %"char[]", align 8
  %indirectarg55 = alloca %"char[]", align 8
  %retparam = alloca ptr, align 8
  %.assign_list = alloca %OnStackAllocatorExtraChunk, align 8
  %indirectarg59 = alloca %"char[]", align 8
  %indirectarg60 = alloca %"char[]", align 8
  %indirectarg61 = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr64 = alloca i64, align 8
  %indirectarg65 = alloca %"char[]", align 8
  %indirectarg66 = alloca %"char[]", align 8
  %indirectarg67 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg69 = alloca %"any[]", align 8
  %reterr = alloca i64, align 8
  %error_var71 = alloca i64, align 8
  %x75 = alloca i64, align 8
  %indirectarg86 = alloca %"char[]", align 8
  %indirectarg87 = alloca %"char[]", align 8
  %indirectarg88 = alloca %"char[]", align 8
  %indirectarg92 = alloca %"char[]", align 8
  %indirectarg93 = alloca %"char[]", align 8
  %indirectarg94 = alloca %"char[]", align 8
  %indirectarg98 = alloca %"char[]", align 8
  %indirectarg99 = alloca %"char[]", align 8
  %indirectarg100 = alloca %"char[]", align 8
  %.inlinecache103 = alloca ptr, align 8
  %.cachedtype104 = alloca ptr, align 8
  %indirectarg112 = alloca %"char[]", align 8
  %indirectarg113 = alloca %"char[]", align 8
  %indirectarg114 = alloca %"char[]", align 8
  %retparam116 = alloca ptr, align 8
  %allocator121 = alloca %any, align 8
  %ptr122 = alloca ptr, align 8
  %indirectarg128 = alloca %"char[]", align 8
  %indirectarg129 = alloca %"char[]", align 8
  %indirectarg130 = alloca %"char[]", align 8
  %.inlinecache133 = alloca ptr, align 8
  %.cachedtype134 = alloca ptr, align 8
  %indirectarg142 = alloca %"char[]", align 8
  %indirectarg143 = alloca %"char[]", align 8
  %indirectarg144 = alloca %"char[]", align 8
  %header = alloca ptr, align 8
  %reterr153 = alloca i64, align 8
  store ptr null, ptr %.cachedtype134, align 8, !dbg !1395
  store ptr null, ptr %.cachedtype104, align 8, !dbg !1395
  store ptr null, ptr %.cachedtype, align 8, !dbg !1395
  %5 = icmp eq ptr %1, null, !dbg !1395
  %6 = call i1 @llvm.expect.i1(i1 %5, i1 false), !dbg !1395
  br i1 %6, label %panic, label %checkok, !dbg !1395

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !1396, !DIExpression(), !1397)
  store i64 %2, ptr %size, align 8
    #dbg_declare(ptr %size, !1398, !DIExpression(), !1397)
  store i32 %3, ptr %init_type, align 4
    #dbg_declare(ptr %init_type, !1399, !DIExpression(), !1397)
  store i64 %4, ptr %alignment, align 8
    #dbg_declare(ptr %alignment, !1400, !DIExpression(), !1397)
  %7 = load i64, ptr %alignment, align 8, !dbg !1401
  %le = icmp ule i64 %7, 268435456, !dbg !1401
  br i1 %le, label %assert_ok, label %assert_fail, !dbg !1401

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.12, i64 80 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.file.74, i64 21 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg5, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, i32 132) #6, !dbg !1401
  unreachable, !dbg !1401

assert_ok:                                        ; preds = %checkok
  %9 = load i64, ptr %size, align 8, !dbg !1403
  %lt = icmp ult i64 0, %9, !dbg !1403
  br i1 %lt, label %assert_ok10, label %assert_fail6, !dbg !1403

assert_fail6:                                     ; preds = %assert_ok
  store %"char[]" { ptr @.panic_msg.13, i64 29 }, ptr %indirectarg7, align 8
  store %"char[]" { ptr @.file.74, i64 21 }, ptr %indirectarg8, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg9, align 8
  %10 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %10(ptr align 8 %indirectarg7, ptr align 8 %indirectarg8, ptr align 8 %indirectarg9, i32 133) #6, !dbg !1403
  unreachable, !dbg !1403

assert_ok10:                                      ; preds = %assert_ok
    #dbg_declare(ptr %aligned, !1404, !DIExpression(), !1405)
  %11 = load i64, ptr %alignment, align 8, !dbg !1405
  %lt11 = icmp ult i64 0, %11, !dbg !1405
  %12 = zext i1 %lt11 to i8, !dbg !1405
  store i8 %12, ptr %aligned, align 1, !dbg !1405
  %13 = load i64, ptr %alignment, align 8, !dbg !1406
  %14 = call i64 @std.core.mem.allocator.alignment_for_allocation(i64 %13) #7, !dbg !1406
  store i64 %14, ptr %alignment, align 8, !dbg !1406
    #dbg_declare(ptr %total_len, !1407, !DIExpression(), !1408)
  %15 = load ptr, ptr %self, align 8, !dbg !1408
  %ptradd = getelementptr inbounds i8, ptr %15, i64 16, !dbg !1408
  %ptradd12 = getelementptr inbounds i8, ptr %ptradd, i64 8, !dbg !1408
  %16 = load i64, ptr %ptradd12, align 8, !dbg !1408
  store i64 %16, ptr %total_len, align 8, !dbg !1408
    #dbg_declare(ptr %start_mem, !1409, !DIExpression(), !1410)
  %17 = load ptr, ptr %self, align 8, !dbg !1410
  %ptradd13 = getelementptr inbounds i8, ptr %17, i64 16, !dbg !1410
  %18 = load ptr, ptr %ptradd13, align 8, !dbg !1410
  store ptr %18, ptr %start_mem, align 8, !dbg !1410
    #dbg_declare(ptr %unaligned_pointer_to_offset, !1411, !DIExpression(), !1412)
  %19 = load ptr, ptr %start_mem, align 8, !dbg !1412
  %20 = load ptr, ptr %self, align 8, !dbg !1412
  %ptradd14 = getelementptr inbounds i8, ptr %20, i64 32, !dbg !1412
  %21 = load i64, ptr %ptradd14, align 8, !dbg !1412
  %add = add i64 %21, 8, !dbg !1412
  %ptradd_any = getelementptr i8, ptr %19, i64 %add, !dbg !1412
  store ptr %ptradd_any, ptr %unaligned_pointer_to_offset, align 8, !dbg !1412
    #dbg_declare(ptr %mem, !1413, !DIExpression(), !1414)
  %22 = load ptr, ptr %unaligned_pointer_to_offset, align 8
  store ptr %22, ptr %ptr, align 8
  %23 = load i64, ptr %alignment, align 8
  store i64 %23, ptr %alignment15, align 8
  %24 = load ptr, ptr %ptr, align 8, !dbg !1415
  %ptrxi = ptrtoint ptr %24 to i64, !dbg !1415
  %25 = load i64, ptr %alignment15, align 8, !dbg !1415
  store i64 %25, ptr %x, align 8
  %26 = load i64, ptr %x, align 8, !dbg !1417
  %neq = icmp ne i64 0, %26, !dbg !1417
  br i1 %neq, label %and.rhs, label %and.phi, !dbg !1417

and.rhs:                                          ; preds = %assert_ok10
  %27 = load i64, ptr %x, align 8, !dbg !1417
  %28 = load i64, ptr %x, align 8, !dbg !1417
  %sub = sub i64 %28, 1, !dbg !1417
  %and = and i64 %27, %sub, !dbg !1417
  %eq = icmp eq i64 %and, 0, !dbg !1417
  br label %and.phi, !dbg !1417

and.phi:                                          ; preds = %and.rhs, %assert_ok10
  %val = phi i1 [ false, %assert_ok10 ], [ %eq, %and.rhs ], !dbg !1417
  br i1 %val, label %assert_ok20, label %assert_fail16, !dbg !1417

assert_fail16:                                    ; preds = %and.phi
  store %"char[]" { ptr @.panic_msg.14, i64 51 }, ptr %indirectarg17, align 8
  store %"char[]" { ptr @.file.15, i64 6 }, ptr %indirectarg18, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg19, align 8
  %29 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %29(ptr align 8 %indirectarg17, ptr align 8 %indirectarg18, ptr align 8 %indirectarg19, i32 313) #6, !dbg !1415
  unreachable, !dbg !1415

assert_ok20:                                      ; preds = %and.phi
  %30 = call i64 @std.core.mem.aligned_offset(i64 %ptrxi, i64 %25), !dbg !1415
  %intptr = inttoptr i64 %30 to ptr, !dbg !1415
  store ptr %intptr, ptr %mem, align 8, !dbg !1415
    #dbg_declare(ptr %end, !1419, !DIExpression(), !1420)
  %31 = load ptr, ptr %mem, align 8, !dbg !1420
  %32 = load ptr, ptr %self, align 8, !dbg !1420
  %ptradd21 = getelementptr inbounds i8, ptr %32, i64 16, !dbg !1420
  %33 = load ptr, ptr %ptradd21, align 8, !dbg !1420
  %34 = ptrtoint ptr %33 to i64, !dbg !1420
  %35 = ptrtoint ptr %31 to i64, !dbg !1420
  %36 = sub i64 %35, %34, !dbg !1420
  %37 = sdiv exact i64 %36, 1, !dbg !1420
  %38 = load i64, ptr %size, align 8, !dbg !1420
  %add22 = add i64 %37, %38, !dbg !1420
  store i64 %add22, ptr %end, align 8, !dbg !1420
    #dbg_declare(ptr %backing_allocator, !1421, !DIExpression(), !1422)
  %39 = load ptr, ptr %self, align 8, !dbg !1422
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %backing_allocator, ptr align 8 %39, i32 16, i1 false), !dbg !1422
  %40 = load i64, ptr %end, align 8, !dbg !1423
  %41 = load i64, ptr %total_len, align 8, !dbg !1423
  %gt = icmp ugt i64 %40, %41, !dbg !1423
  br i1 %gt, label %if.then, label %if.exit150, !dbg !1423

if.then:                                          ; preds = %assert_ok20
    #dbg_declare(ptr %chunk, !1424, !DIExpression(), !1426)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator, ptr align 8 %backing_allocator, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator23, ptr align 8 %allocator, i32 16, i1 false)
  store i64 24, ptr %size24, align 8
  %42 = load i64, ptr %size24, align 8, !dbg !1427
  %i2nb = icmp eq i64 %42, 0, !dbg !1427
  br i1 %i2nb, label %if.then25, label %if.exit, !dbg !1427

if.then25:                                        ; preds = %if.then
  store ptr null, ptr %blockret, align 8, !dbg !1427
  br label %expr_block.exit, !dbg !1427

if.exit:                                          ; preds = %if.then
  %43 = load i64, ptr %size24, align 8, !dbg !1431
  br i1 true, label %or.phi, label %or.rhs, !dbg !1432

or.rhs:                                           ; preds = %if.exit
  store i64 0, ptr %x26, align 8
  %44 = load i64, ptr %x26, align 8, !dbg !1433
  %neq27 = icmp ne i64 0, %44, !dbg !1433
  br i1 %neq27, label %and.rhs28, label %and.phi32, !dbg !1433

and.rhs28:                                        ; preds = %or.rhs
  %45 = load i64, ptr %x26, align 8, !dbg !1433
  %46 = load i64, ptr %x26, align 8, !dbg !1433
  %sub29 = sub i64 %46, 1, !dbg !1433
  %and30 = and i64 %45, %sub29, !dbg !1433
  %eq31 = icmp eq i64 %and30, 0, !dbg !1433
  br label %and.phi32, !dbg !1433

and.phi32:                                        ; preds = %and.rhs28, %or.rhs
  %val33 = phi i1 [ false, %or.rhs ], [ %eq31, %and.rhs28 ], !dbg !1433
  br label %or.phi, !dbg !1433

or.phi:                                           ; preds = %and.phi32, %if.exit
  %val34 = phi i1 [ true, %if.exit ], [ %val33, %and.phi32 ], !dbg !1433
  br i1 %val34, label %assert_ok39, label %assert_fail35, !dbg !1433

assert_fail35:                                    ; preds = %or.phi
  store %"char[]" { ptr @.panic_msg.11, i64 65 }, ptr %indirectarg36, align 8
  store %"char[]" { ptr @.file.24, i64 16 }, ptr %indirectarg37, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg38, align 8
  %47 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %47(ptr align 8 %indirectarg36, ptr align 8 %indirectarg37, ptr align 8 %indirectarg38, i32 86) #6, !dbg !1431
  unreachable, !dbg !1431

assert_ok39:                                      ; preds = %or.phi
  br i1 true, label %assert_ok44, label %assert_fail40, !dbg !1431

assert_fail40:                                    ; preds = %assert_ok39
  store %"char[]" { ptr @.panic_msg.12, i64 80 }, ptr %indirectarg41, align 8
  store %"char[]" { ptr @.file.24, i64 16 }, ptr %indirectarg42, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg43, align 8
  %48 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %48(ptr align 8 %indirectarg41, ptr align 8 %indirectarg42, ptr align 8 %indirectarg43, i32 86) #6, !dbg !1431
  unreachable, !dbg !1431

assert_ok44:                                      ; preds = %assert_ok39
  %lt45 = icmp ult i64 0, %43, !dbg !1431
  br i1 %lt45, label %assert_ok50, label %assert_fail46, !dbg !1431

assert_fail46:                                    ; preds = %assert_ok44
  store %"char[]" { ptr @.panic_msg.25, i64 59 }, ptr %indirectarg47, align 8
  store %"char[]" { ptr @.file.24, i64 16 }, ptr %indirectarg48, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg49, align 8
  %49 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %49(ptr align 8 %indirectarg47, ptr align 8 %indirectarg48, ptr align 8 %indirectarg49, i32 86) #6, !dbg !1431
  unreachable, !dbg !1431

assert_ok50:                                      ; preds = %assert_ok44
  %ptradd51 = getelementptr inbounds i8, ptr %allocator23, i64 8, !dbg !1431
  %50 = load i64, ptr %ptradd51, align 8, !dbg !1431
  %51 = inttoptr i64 %50 to ptr, !dbg !1431
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !1395
  %52 = icmp eq ptr %51, %type, !dbg !1395
  br i1 %52, label %cache_hit, label %cache_miss, !dbg !1395

cache_miss:                                       ; preds = %assert_ok50
  %ptradd52 = getelementptr inbounds i8, ptr %51, i64 16, !dbg !1395
  %53 = load ptr, ptr %ptradd52, align 8, !dbg !1395
  %54 = call ptr @.dyn_search(ptr %53, ptr @"$sel.acquire"), !dbg !1395
  store ptr %54, ptr %.inlinecache, align 8, !dbg !1395
  store ptr %51, ptr %.cachedtype, align 8, !dbg !1395
  br label %55, !dbg !1395

cache_hit:                                        ; preds = %assert_ok50
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !1395
  br label %55, !dbg !1395

55:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %54, %cache_miss ], !dbg !1395
  %56 = icmp eq ptr %fn_phi, null, !dbg !1395
  br i1 %56, label %missing_function, label %match, !dbg !1395

missing_function:                                 ; preds = %55
  store %"char[]" { ptr @.panic_msg.26, i64 44 }, ptr %indirectarg53, align 8
  store %"char[]" { ptr @.file.24, i64 16 }, ptr %indirectarg54, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg55, align 8
  %57 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %57(ptr align 8 %indirectarg53, ptr align 8 %indirectarg54, ptr align 8 %indirectarg55, i32 86) #6, !dbg !1431
  unreachable, !dbg !1431

match:                                            ; preds = %55
  %58 = load ptr, ptr %allocator23, align 8
  %59 = call i64 %fn_phi(ptr %retparam, ptr %58, i64 %43, i32 0, i64 0), !dbg !1431
  %not_err = icmp eq i64 %59, 0, !dbg !1431
  %60 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1431
  br i1 %60, label %after_check, label %assign_optional, !dbg !1431

assign_optional:                                  ; preds = %match
  store i64 %59, ptr %error_var, align 8, !dbg !1431
  br label %guard_block, !dbg !1431

after_check:                                      ; preds = %match
  %61 = load ptr, ptr %retparam, align 8, !dbg !1431
  store ptr %61, ptr %blockret, align 8, !dbg !1431
  br label %expr_block.exit, !dbg !1431

expr_block.exit:                                  ; preds = %after_check, %if.then25
  %62 = load ptr, ptr %blockret, align 8, !dbg !1431
  br label %noerr_block, !dbg !1431

guard_block:                                      ; preds = %assign_optional
  %63 = load i64, ptr %error_var, align 8, !dbg !1431
  ret i64 %63, !dbg !1431

noerr_block:                                      ; preds = %expr_block.exit
  store ptr %62, ptr %chunk, align 8, !dbg !1431
  call void @llvm.memset.p0.i64(ptr align 8 %.assign_list, i8 0, i64 24, i1 false)
  %ptradd56 = getelementptr inbounds i8, ptr %.assign_list, i64 8
  %64 = load ptr, ptr %self, align 8, !dbg !1435
  %ptradd57 = getelementptr inbounds i8, ptr %64, i64 40, !dbg !1435
  %65 = load ptr, ptr %ptradd57, align 8, !dbg !1435
  store ptr %65, ptr %ptradd56, align 8, !dbg !1435
  %66 = load i8, ptr %aligned, align 1, !dbg !1435
  store i8 %66, ptr %.assign_list, align 8, !dbg !1435
  %67 = load ptr, ptr %chunk, align 8, !dbg !1435
  %checknull = icmp eq ptr %67, null, !dbg !1435
  %68 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1435
  br i1 %68, label %panic58, label %checkok62, !dbg !1435

checkok62:                                        ; preds = %noerr_block
  %69 = ptrtoint ptr %67 to i64, !dbg !1435
  %70 = urem i64 %69, 8, !dbg !1435
  %71 = icmp ne i64 %70, 0, !dbg !1435
  %72 = call i1 @llvm.expect.i1(i1 %71, i1 false), !dbg !1435
  br i1 %72, label %panic63, label %checkok70, !dbg !1435

checkok70:                                        ; preds = %checkok62
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %67, ptr align 8 %.assign_list, i32 24, i1 false), !dbg !1435
  %73 = load i64, ptr %size, align 8, !dbg !1436
  %74 = load i32, ptr %init_type, align 4, !dbg !1436
  %75 = load i8, ptr %aligned, align 1, !dbg !1436
  %76 = trunc i8 %75 to i1, !dbg !1436
  br i1 %76, label %cond.lhs, label %cond.rhs, !dbg !1436

cond.lhs:                                         ; preds = %checkok70
  %77 = load i64, ptr %alignment, align 8, !dbg !1436
  br label %cond.phi, !dbg !1436

cond.rhs:                                         ; preds = %checkok70
  br label %cond.phi, !dbg !1436

cond.phi:                                         ; preds = %cond.rhs, %cond.lhs
  %val72 = phi i64 [ %77, %cond.lhs ], [ 0, %cond.rhs ], !dbg !1436
  %i2nb73 = icmp eq i64 %val72, 0, !dbg !1437
  br i1 %i2nb73, label %or.phi83, label %or.rhs74, !dbg !1437

or.rhs74:                                         ; preds = %cond.phi
  store i64 %val72, ptr %x75, align 8
  %78 = load i64, ptr %x75, align 8, !dbg !1438
  %neq76 = icmp ne i64 0, %78, !dbg !1438
  br i1 %neq76, label %and.rhs77, label %and.phi81, !dbg !1438

and.rhs77:                                        ; preds = %or.rhs74
  %79 = load i64, ptr %x75, align 8, !dbg !1438
  %80 = load i64, ptr %x75, align 8, !dbg !1438
  %sub78 = sub i64 %80, 1, !dbg !1438
  %and79 = and i64 %79, %sub78, !dbg !1438
  %eq80 = icmp eq i64 %and79, 0, !dbg !1438
  br label %and.phi81, !dbg !1438

and.phi81:                                        ; preds = %and.rhs77, %or.rhs74
  %val82 = phi i1 [ false, %or.rhs74 ], [ %eq80, %and.rhs77 ], !dbg !1438
  br label %or.phi83, !dbg !1438

or.phi83:                                         ; preds = %and.phi81, %cond.phi
  %val84 = phi i1 [ true, %cond.phi ], [ %val82, %and.phi81 ], !dbg !1438
  br i1 %val84, label %assert_ok89, label %assert_fail85, !dbg !1438

assert_fail85:                                    ; preds = %or.phi83
  store %"char[]" { ptr @.panic_msg.11, i64 65 }, ptr %indirectarg86, align 8
  store %"char[]" { ptr @.file.74, i64 21 }, ptr %indirectarg87, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg88, align 8
  %81 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %81(ptr align 8 %indirectarg86, ptr align 8 %indirectarg87, ptr align 8 %indirectarg88, i32 152) #6, !dbg !1436
  unreachable, !dbg !1436

assert_ok89:                                      ; preds = %or.phi83
  %le90 = icmp ule i64 %val72, 268435456, !dbg !1436
  br i1 %le90, label %assert_ok95, label %assert_fail91, !dbg !1436

assert_fail91:                                    ; preds = %assert_ok89
  store %"char[]" { ptr @.panic_msg.12, i64 80 }, ptr %indirectarg92, align 8
  store %"char[]" { ptr @.file.74, i64 21 }, ptr %indirectarg93, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg94, align 8
  %82 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %82(ptr align 8 %indirectarg92, ptr align 8 %indirectarg93, ptr align 8 %indirectarg94, i32 152) #6, !dbg !1436
  unreachable, !dbg !1436

assert_ok95:                                      ; preds = %assert_ok89
  %lt96 = icmp ult i64 0, %73, !dbg !1436
  br i1 %lt96, label %assert_ok101, label %assert_fail97, !dbg !1436

assert_fail97:                                    ; preds = %assert_ok95
  store %"char[]" { ptr @.panic_msg.25, i64 59 }, ptr %indirectarg98, align 8
  store %"char[]" { ptr @.file.74, i64 21 }, ptr %indirectarg99, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg100, align 8
  %83 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %83(ptr align 8 %indirectarg98, ptr align 8 %indirectarg99, ptr align 8 %indirectarg100, i32 152) #6, !dbg !1436
  unreachable, !dbg !1436

assert_ok101:                                     ; preds = %assert_ok95
  %ptradd102 = getelementptr inbounds i8, ptr %backing_allocator, i64 8, !dbg !1436
  %84 = load i64, ptr %ptradd102, align 8, !dbg !1436
  %85 = inttoptr i64 %84 to ptr, !dbg !1436
  %type105 = load ptr, ptr %.cachedtype104, align 8, !dbg !1395
  %86 = icmp eq ptr %85, %type105, !dbg !1395
  br i1 %86, label %cache_hit108, label %cache_miss106, !dbg !1395

cache_miss106:                                    ; preds = %assert_ok101
  %ptradd107 = getelementptr inbounds i8, ptr %85, i64 16, !dbg !1395
  %87 = load ptr, ptr %ptradd107, align 8, !dbg !1395
  %88 = call ptr @.dyn_search(ptr %87, ptr @"$sel.acquire"), !dbg !1395
  store ptr %88, ptr %.inlinecache103, align 8, !dbg !1395
  store ptr %85, ptr %.cachedtype104, align 8, !dbg !1395
  br label %89, !dbg !1395

cache_hit108:                                     ; preds = %assert_ok101
  %cache_hit_fn109 = load ptr, ptr %.inlinecache103, align 8, !dbg !1395
  br label %89, !dbg !1395

89:                                               ; preds = %cache_hit108, %cache_miss106
  %fn_phi110 = phi ptr [ %cache_hit_fn109, %cache_hit108 ], [ %88, %cache_miss106 ], !dbg !1395
  %90 = icmp eq ptr %fn_phi110, null, !dbg !1395
  br i1 %90, label %missing_function111, label %match115, !dbg !1395

missing_function111:                              ; preds = %89
  store %"char[]" { ptr @.panic_msg.26, i64 44 }, ptr %indirectarg112, align 8
  store %"char[]" { ptr @.file.74, i64 21 }, ptr %indirectarg113, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg114, align 8
  %91 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %91(ptr align 8 %indirectarg112, ptr align 8 %indirectarg113, ptr align 8 %indirectarg114, i32 152) #6, !dbg !1436
  unreachable, !dbg !1436

match115:                                         ; preds = %89
  %92 = load ptr, ptr %backing_allocator, align 8
  %93 = call i64 %fn_phi110(ptr %retparam116, ptr %92, i64 %73, i32 %74, i64 %val72), !dbg !1436
  %not_err117 = icmp eq i64 %93, 0, !dbg !1436
  %94 = call i1 @llvm.expect.i1(i1 %not_err117, i1 true), !dbg !1436
  br i1 %94, label %after_check119, label %assign_optional118, !dbg !1436

assign_optional118:                               ; preds = %match115
  store i64 %93, ptr %error_var71, align 8, !dbg !1436
  br label %guard_block120, !dbg !1436

after_check119:                                   ; preds = %match115
  br label %noerr_block147, !dbg !1436

guard_block120:                                   ; preds = %assign_optional118
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator121, ptr align 8 %backing_allocator, i32 16, i1 false)
  %95 = load ptr, ptr %chunk, align 8, !dbg !1440
  store ptr %95, ptr %ptr122, align 8
  %96 = load ptr, ptr %ptr122, align 8, !dbg !1442
  %i2nb123 = icmp eq ptr %96, null, !dbg !1442
  br i1 %i2nb123, label %if.then124, label %if.exit125, !dbg !1442

if.then124:                                       ; preds = %guard_block120
  br label %expr_block.exit146, !dbg !1442

if.exit125:                                       ; preds = %guard_block120
  %97 = load ptr, ptr %ptr122, align 8, !dbg !1444
  %neq126 = icmp ne ptr %97, null, !dbg !1444
  br i1 %neq126, label %assert_ok131, label %assert_fail127, !dbg !1444

assert_fail127:                                   ; preds = %if.exit125
  store %"char[]" { ptr @.panic_msg.28, i64 75 }, ptr %indirectarg128, align 8
  store %"char[]" { ptr @.file.24, i64 16 }, ptr %indirectarg129, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg130, align 8
  %98 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %98(ptr align 8 %indirectarg128, ptr align 8 %indirectarg129, ptr align 8 %indirectarg130, i32 123) #6, !dbg !1444
  unreachable, !dbg !1444

assert_ok131:                                     ; preds = %if.exit125
  %ptradd132 = getelementptr inbounds i8, ptr %allocator121, i64 8, !dbg !1444
  %99 = load i64, ptr %ptradd132, align 8, !dbg !1444
  %100 = inttoptr i64 %99 to ptr, !dbg !1444
  %type135 = load ptr, ptr %.cachedtype134, align 8, !dbg !1395
  %101 = icmp eq ptr %100, %type135, !dbg !1395
  br i1 %101, label %cache_hit138, label %cache_miss136, !dbg !1395

cache_miss136:                                    ; preds = %assert_ok131
  %ptradd137 = getelementptr inbounds i8, ptr %100, i64 16, !dbg !1395
  %102 = load ptr, ptr %ptradd137, align 8, !dbg !1395
  %103 = call ptr @.dyn_search(ptr %102, ptr @"$sel.release"), !dbg !1395
  store ptr %103, ptr %.inlinecache133, align 8, !dbg !1395
  store ptr %100, ptr %.cachedtype134, align 8, !dbg !1395
  br label %104, !dbg !1395

cache_hit138:                                     ; preds = %assert_ok131
  %cache_hit_fn139 = load ptr, ptr %.inlinecache133, align 8, !dbg !1395
  br label %104, !dbg !1395

104:                                              ; preds = %cache_hit138, %cache_miss136
  %fn_phi140 = phi ptr [ %cache_hit_fn139, %cache_hit138 ], [ %103, %cache_miss136 ], !dbg !1395
  %105 = icmp eq ptr %fn_phi140, null, !dbg !1395
  br i1 %105, label %missing_function141, label %match145, !dbg !1395

missing_function141:                              ; preds = %104
  store %"char[]" { ptr @.panic_msg.29, i64 44 }, ptr %indirectarg142, align 8
  store %"char[]" { ptr @.file.24, i64 16 }, ptr %indirectarg143, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg144, align 8
  %106 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %106(ptr align 8 %indirectarg142, ptr align 8 %indirectarg143, ptr align 8 %indirectarg144, i32 123) #6, !dbg !1444
  unreachable, !dbg !1444

match145:                                         ; preds = %104
  %107 = load ptr, ptr %allocator121, align 8, !dbg !1444
  call void %fn_phi140(ptr %107, ptr %97, i8 zeroext 0), !dbg !1444
  br label %expr_block.exit146, !dbg !1444

expr_block.exit146:                               ; preds = %match145, %if.then124
  %108 = load i64, ptr %error_var71, align 8, !dbg !1444
  ret i64 %108, !dbg !1444

noerr_block147:                                   ; preds = %after_check119
  %109 = load ptr, ptr %chunk, align 8, !dbg !1436
  %ptradd148 = getelementptr inbounds i8, ptr %109, i64 16, !dbg !1436
  %110 = load ptr, ptr %retparam116, align 8, !dbg !1436
  store ptr %110, ptr %ptradd148, align 8, !dbg !1436
  %111 = load ptr, ptr %self, align 8, !dbg !1445
  %ptradd149 = getelementptr inbounds i8, ptr %111, i64 40, !dbg !1445
  %112 = load ptr, ptr %chunk, align 8, !dbg !1445
  store ptr %112, ptr %ptradd149, align 8, !dbg !1445
  store ptr %110, ptr %0, align 8, !dbg !1445
  ret i64 0, !dbg !1445

if.exit150:                                       ; preds = %assert_ok20
  %113 = load ptr, ptr %self, align 8, !dbg !1447
  %ptradd151 = getelementptr inbounds i8, ptr %113, i64 32, !dbg !1447
  %114 = load i64, ptr %end, align 8, !dbg !1447
  store i64 %114, ptr %ptradd151, align 8, !dbg !1447
    #dbg_declare(ptr %header, !1448, !DIExpression(), !1449)
  %115 = load ptr, ptr %mem, align 8, !dbg !1449
  %ptradd_any152 = getelementptr i8, ptr %115, i64 -8, !dbg !1449
  store ptr %ptradd_any152, ptr %header, align 8, !dbg !1449
  %116 = load ptr, ptr %header, align 8, !dbg !1450
  %117 = load i64, ptr %size, align 8, !dbg !1450
  store i64 %117, ptr %116, align 8, !dbg !1450
  %118 = load ptr, ptr %mem, align 8, !dbg !1451
  store ptr %118, ptr %0, align 8, !dbg !1451
  ret i64 0, !dbg !1451

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.74, i64 21 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg2, align 8
  %119 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %119(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 135) #6, !dbg !1397
  unreachable, !dbg !1397

panic58:                                          ; preds = %noerr_block
  store %"char[]" { ptr @.panic_msg.83, i64 46 }, ptr %indirectarg59, align 8
  store %"char[]" { ptr @.file.74, i64 21 }, ptr %indirectarg60, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg61, align 8
  %120 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %120(ptr align 8 %indirectarg59, ptr align 8 %indirectarg60, ptr align 8 %indirectarg61, i32 151) #6, !dbg !1435
  unreachable, !dbg !1435

panic63:                                          ; preds = %checkok62
  store i64 8, ptr %taddr, align 8
  %121 = insertvalue %any undef, ptr %taddr, 0
  %122 = insertvalue %any %121, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %70, ptr %taddr64, align 8
  %123 = insertvalue %any undef, ptr %taddr64, 0
  %124 = insertvalue %any %123, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.31, i64 94 }, ptr %indirectarg65, align 8
  store %"char[]" { ptr @.file.74, i64 21 }, ptr %indirectarg66, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg67, align 8
  store %any %122, ptr %varargslots, align 16
  %ptradd68 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %124, ptr %ptradd68, align 16
  %125 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %125, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg69, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg65, ptr align 8 %indirectarg66, ptr align 8 %indirectarg67, i32 151, ptr align 8 %indirectarg69) #6, !dbg !1435
  unreachable, !dbg !1435
}

; Function Attrs: nounwind ssp uwtable
define internal zeroext i8 @std.core.mem.allocator.allocation_in_stack_mem.8338(ptr %0, ptr %1) #0 !dbg !1452 {
entry:
  %a = alloca ptr, align 8
  %ptr = alloca ptr, align 8
  %taddr = alloca i64, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg5 = alloca %"any[]", align 8
  %taddr8 = alloca i64, align 8
  %taddr9 = alloca i64, align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %varargslots13 = alloca [2 x %any], align 16
  %indirectarg16 = alloca %"any[]", align 8
  store ptr %0, ptr %a, align 8
    #dbg_declare(ptr %a, !1455, !DIExpression(), !1456)
  store ptr %1, ptr %ptr, align 8
    #dbg_declare(ptr %ptr, !1457, !DIExpression(), !1456)
  %2 = load ptr, ptr %ptr, align 8, !dbg !1458
  %3 = load ptr, ptr %a, align 8, !dbg !1458
  %ptradd = getelementptr inbounds i8, ptr %3, i64 16, !dbg !1458
  %4 = load ptr, ptr %ptradd, align 8, !dbg !1458
  %ge = icmp uge ptr %2, %4, !dbg !1458
  br i1 %ge, label %and.rhs, label %and.phi, !dbg !1458

and.rhs:                                          ; preds = %entry
  %5 = load ptr, ptr %ptr, align 8, !dbg !1458
  %6 = load ptr, ptr %a, align 8, !dbg !1458
  %ptradd1 = getelementptr inbounds i8, ptr %6, i64 16, !dbg !1458
  %ptradd2 = getelementptr inbounds i8, ptr %ptradd1, i64 8, !dbg !1458
  %7 = load i64, ptr %ptradd2, align 8, !dbg !1458
  %8 = load ptr, ptr %ptradd1, align 8, !dbg !1458
  %9 = sub nuw i64 %7, 1, !dbg !1458
  %lt = icmp slt i64 %9, 0, !dbg !1458
  %10 = call i1 @llvm.expect.i1(i1 %lt, i1 false), !dbg !1458
  br i1 %10, label %panic, label %checkok, !dbg !1458

checkok:                                          ; preds = %and.rhs
  %ge6 = icmp sge i64 %9, %7, !dbg !1458
  %11 = call i1 @llvm.expect.i1(i1 %ge6, i1 false), !dbg !1458
  br i1 %11, label %panic7, label %checkok17, !dbg !1458

checkok17:                                        ; preds = %checkok
  %ptradd18 = getelementptr inbounds i8, ptr %8, i64 %9, !dbg !1458
  %le = icmp ule ptr %5, %ptradd18, !dbg !1458
  br label %and.phi, !dbg !1458

and.phi:                                          ; preds = %checkok17, %entry
  %val = phi i1 [ false, %entry ], [ %le, %checkok17 ], !dbg !1458
  %12 = zext i1 %val to i8, !dbg !1458
  ret i8 %12, !dbg !1458

panic:                                            ; preds = %and.rhs
  store i64 %9, ptr %taddr, align 8
  %13 = insertvalue %any undef, ptr %taddr, 0
  %14 = insertvalue %any %13, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.73, i64 38 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.74, i64 21 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.func.75, i64 23 }, ptr %indirectarg4, align 8
  store %any %14, ptr %varargslots, align 16
  %15 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %15, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg5, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg, ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, i32 78, ptr align 8 %indirectarg5) #6, !dbg !1458
  unreachable, !dbg !1458

panic7:                                           ; preds = %checkok
  store i64 %7, ptr %taddr8, align 8
  %16 = insertvalue %any undef, ptr %taddr8, 0
  %17 = insertvalue %any %16, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %9, ptr %taddr9, align 8
  %18 = insertvalue %any undef, ptr %taddr9, 0
  %19 = insertvalue %any %18, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 59 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.file.74, i64 21 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.func.75, i64 23 }, ptr %indirectarg12, align 8
  store %any %17, ptr %varargslots13, align 16
  %ptradd14 = getelementptr inbounds i8, ptr %varargslots13, i64 16
  store %any %19, ptr %ptradd14, align 16
  %20 = insertvalue %"any[]" undef, ptr %varargslots13, 0
  %"$$temp15" = insertvalue %"any[]" %20, i64 2, 1
  store %"any[]" %"$$temp15", ptr %indirectarg16, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, i32 78, ptr align 8 %indirectarg16) #6, !dbg !1458
  unreachable, !dbg !1458
}

; Function Attrs: nounwind ssp uwtable
define internal void @std.core.mem.allocator.on_stack_allocator_remove_chunk.8341(ptr %0, ptr %1) #0 !dbg !1459 {
entry:
  %a = alloca ptr, align 8
  %ptr = alloca ptr, align 8
  %chunk = alloca ptr, align 8
  %addr = alloca ptr, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr7 = alloca i64, align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg12 = alloca %"any[]", align 8
  %allocator = alloca %any, align 8
  %ptr14 = alloca ptr, align 8
  %indirectarg16 = alloca %"char[]", align 8
  %indirectarg17 = alloca %"char[]", align 8
  %indirectarg18 = alloca %"char[]", align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %indirectarg21 = alloca %"char[]", align 8
  %indirectarg22 = alloca %"char[]", align 8
  %indirectarg23 = alloca %"char[]", align 8
  %indirectarg28 = alloca %"char[]", align 8
  %indirectarg29 = alloca %"char[]", align 8
  %indirectarg30 = alloca %"char[]", align 8
  %taddr33 = alloca i64, align 8
  %taddr34 = alloca i64, align 8
  %indirectarg35 = alloca %"char[]", align 8
  %indirectarg36 = alloca %"char[]", align 8
  %indirectarg37 = alloca %"char[]", align 8
  %varargslots38 = alloca [2 x %any], align 16
  %indirectarg41 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg43 = alloca %"char[]", align 8
  %indirectarg44 = alloca %"char[]", align 8
  %indirectarg45 = alloca %"char[]", align 8
  %indirectarg46 = alloca %"any[]", align 8
  store ptr null, ptr %.cachedtype, align 8
  store ptr %0, ptr %a, align 8
    #dbg_declare(ptr %a, !1462, !DIExpression(), !1463)
  store ptr %1, ptr %ptr, align 8
    #dbg_declare(ptr %ptr, !1464, !DIExpression(), !1463)
    #dbg_declare(ptr %chunk, !1465, !DIExpression(), !1466)
  %2 = load ptr, ptr %a, align 8, !dbg !1466
  %ptradd = getelementptr inbounds i8, ptr %2, i64 40, !dbg !1466
  %3 = load ptr, ptr %ptradd, align 8, !dbg !1466
  store ptr %3, ptr %chunk, align 8, !dbg !1466
    #dbg_declare(ptr %addr, !1467, !DIExpression(), !1469)
  %4 = load ptr, ptr %a, align 8, !dbg !1469
  %ptradd1 = getelementptr inbounds i8, ptr %4, i64 40, !dbg !1469
  store ptr %ptradd1, ptr %addr, align 8, !dbg !1469
  br label %loop.cond, !dbg !1470

loop.cond:                                        ; preds = %checkok42, %entry
  %5 = load ptr, ptr %chunk, align 8, !dbg !1471
  %i2b = icmp ne ptr %5, null, !dbg !1471
  br i1 %i2b, label %loop.body, label %loop.exit, !dbg !1471

loop.body:                                        ; preds = %loop.cond
  %6 = load ptr, ptr %chunk, align 8, !dbg !1473
  %ptradd2 = getelementptr inbounds i8, ptr %6, i64 16, !dbg !1473
  %7 = load ptr, ptr %ptradd2, align 8, !dbg !1473
  %8 = load ptr, ptr %ptr, align 8, !dbg !1473
  %eq = icmp eq ptr %7, %8, !dbg !1473
  br i1 %eq, label %if.then, label %if.exit24, !dbg !1473

if.then:                                          ; preds = %loop.body
  %9 = load ptr, ptr %chunk, align 8, !dbg !1475
  %ptradd3 = getelementptr inbounds i8, ptr %9, i64 8, !dbg !1475
  %10 = load ptr, ptr %addr, align 8, !dbg !1475
  %checknull = icmp eq ptr %10, null, !dbg !1475
  %11 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1475
  br i1 %11, label %panic, label %checkok, !dbg !1475

checkok:                                          ; preds = %if.then
  %12 = ptrtoint ptr %10 to i64, !dbg !1475
  %13 = urem i64 %12, 8, !dbg !1475
  %14 = icmp ne i64 %13, 0, !dbg !1475
  %15 = call i1 @llvm.expect.i1(i1 %14, i1 false), !dbg !1475
  br i1 %15, label %panic6, label %checkok13, !dbg !1475

checkok13:                                        ; preds = %checkok
  %16 = load ptr, ptr %ptradd3, align 8, !dbg !1475
  store ptr %16, ptr %10, align 8, !dbg !1475
  %17 = load ptr, ptr %a, align 8, !dbg !1477
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator, ptr align 8 %17, i32 16, i1 false)
  %18 = load ptr, ptr %chunk, align 8, !dbg !1477
  store ptr %18, ptr %ptr14, align 8
  %19 = load ptr, ptr %ptr14, align 8, !dbg !1478
  %i2nb = icmp eq ptr %19, null, !dbg !1478
  br i1 %i2nb, label %if.then15, label %if.exit, !dbg !1478

if.then15:                                        ; preds = %checkok13
  br label %expr_block.exit, !dbg !1478

if.exit:                                          ; preds = %checkok13
  %20 = load ptr, ptr %ptr14, align 8, !dbg !1480
  %neq = icmp ne ptr %20, null, !dbg !1480
  br i1 %neq, label %assert_ok, label %assert_fail, !dbg !1480

assert_fail:                                      ; preds = %if.exit
  store %"char[]" { ptr @.panic_msg.28, i64 75 }, ptr %indirectarg16, align 8
  store %"char[]" { ptr @.file.24, i64 16 }, ptr %indirectarg17, align 8
  store %"char[]" { ptr @.func.77, i64 31 }, ptr %indirectarg18, align 8
  %21 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %21(ptr align 8 %indirectarg16, ptr align 8 %indirectarg17, ptr align 8 %indirectarg18, i32 123) #6, !dbg !1480
  unreachable, !dbg !1480

assert_ok:                                        ; preds = %if.exit
  %ptradd19 = getelementptr inbounds i8, ptr %allocator, i64 8, !dbg !1480
  %22 = load i64, ptr %ptradd19, align 8, !dbg !1480
  %23 = inttoptr i64 %22 to ptr, !dbg !1480
  %type = load ptr, ptr %.cachedtype, align 8
  %24 = icmp eq ptr %23, %type
  br i1 %24, label %cache_hit, label %cache_miss

cache_miss:                                       ; preds = %assert_ok
  %ptradd20 = getelementptr inbounds i8, ptr %23, i64 16
  %25 = load ptr, ptr %ptradd20, align 8
  %26 = call ptr @.dyn_search(ptr %25, ptr @"$sel.release")
  store ptr %26, ptr %.inlinecache, align 8
  store ptr %23, ptr %.cachedtype, align 8
  br label %27

cache_hit:                                        ; preds = %assert_ok
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8
  br label %27

27:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %26, %cache_miss ]
  %28 = icmp eq ptr %fn_phi, null
  br i1 %28, label %missing_function, label %match

missing_function:                                 ; preds = %27
  store %"char[]" { ptr @.panic_msg.29, i64 44 }, ptr %indirectarg21, align 8
  store %"char[]" { ptr @.file.24, i64 16 }, ptr %indirectarg22, align 8
  store %"char[]" { ptr @.func.77, i64 31 }, ptr %indirectarg23, align 8
  %29 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %29(ptr align 8 %indirectarg21, ptr align 8 %indirectarg22, ptr align 8 %indirectarg23, i32 123) #6, !dbg !1480
  unreachable, !dbg !1480

match:                                            ; preds = %27
  %30 = load ptr, ptr %allocator, align 8, !dbg !1480
  call void %fn_phi(ptr %30, ptr %20, i8 zeroext 0), !dbg !1480
  br label %expr_block.exit, !dbg !1480

expr_block.exit:                                  ; preds = %match, %if.then15
  ret void, !dbg !1481

if.exit24:                                        ; preds = %loop.body
  %31 = load ptr, ptr %chunk, align 8, !dbg !1482
  %ptradd25 = getelementptr inbounds i8, ptr %31, i64 8, !dbg !1482
  store ptr %ptradd25, ptr %addr, align 8, !dbg !1482
  %32 = load ptr, ptr %addr, align 8, !dbg !1483
  %checknull26 = icmp eq ptr %32, null, !dbg !1483
  %33 = call i1 @llvm.expect.i1(i1 %checknull26, i1 false), !dbg !1483
  br i1 %33, label %panic27, label %checkok31, !dbg !1483

checkok31:                                        ; preds = %if.exit24
  %34 = ptrtoint ptr %32 to i64, !dbg !1483
  %35 = urem i64 %34, 8, !dbg !1483
  %36 = icmp ne i64 %35, 0, !dbg !1483
  %37 = call i1 @llvm.expect.i1(i1 %36, i1 false), !dbg !1483
  br i1 %37, label %panic32, label %checkok42, !dbg !1483

checkok42:                                        ; preds = %checkok31
  %38 = load ptr, ptr %32, align 8, !dbg !1483
  store ptr %38, ptr %chunk, align 8, !dbg !1483
  br label %loop.cond, !dbg !1483

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str, i64 13 }, ptr %string, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg43, ptr align 8 %string, i32 16, i1 false)
  store %"char[]" { ptr @.str.78, i64 21 }, ptr %indirectarg44, align 8
  store %"char[]" { ptr @.str.79, i64 31 }, ptr %indirectarg45, align 8
  store %"any[]" zeroinitializer, ptr %indirectarg46, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg43, ptr align 8 %indirectarg44, ptr align 8 %indirectarg45, i32 96, ptr align 8 %indirectarg46), !dbg !1484
  unreachable, !dbg !1484

panic:                                            ; preds = %if.then
  store %"char[]" { ptr @.panic_msg.76, i64 45 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.74, i64 21 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.func.77, i64 31 }, ptr %indirectarg5, align 8
  %39 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %39(ptr align 8 %indirectarg, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, i32 89) #6, !dbg !1475
  unreachable, !dbg !1475

panic6:                                           ; preds = %checkok
  store i64 8, ptr %taddr, align 8
  %40 = insertvalue %any undef, ptr %taddr, 0
  %41 = insertvalue %any %40, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %13, ptr %taddr7, align 8
  %42 = insertvalue %any undef, ptr %taddr7, 0
  %43 = insertvalue %any %42, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.31, i64 94 }, ptr %indirectarg8, align 8
  store %"char[]" { ptr @.file.74, i64 21 }, ptr %indirectarg9, align 8
  store %"char[]" { ptr @.func.77, i64 31 }, ptr %indirectarg10, align 8
  store %any %41, ptr %varargslots, align 16
  %ptradd11 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %43, ptr %ptradd11, align 16
  %44 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %44, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg12, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg8, ptr align 8 %indirectarg9, ptr align 8 %indirectarg10, i32 89, ptr align 8 %indirectarg12) #6, !dbg !1475
  unreachable, !dbg !1475

panic27:                                          ; preds = %if.exit24
  store %"char[]" { ptr @.panic_msg.76, i64 45 }, ptr %indirectarg28, align 8
  store %"char[]" { ptr @.file.74, i64 21 }, ptr %indirectarg29, align 8
  store %"char[]" { ptr @.func.77, i64 31 }, ptr %indirectarg30, align 8
  %45 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %45(ptr align 8 %indirectarg28, ptr align 8 %indirectarg29, ptr align 8 %indirectarg30, i32 94) #6, !dbg !1483
  unreachable, !dbg !1483

panic32:                                          ; preds = %checkok31
  store i64 8, ptr %taddr33, align 8
  %46 = insertvalue %any undef, ptr %taddr33, 0
  %47 = insertvalue %any %46, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %35, ptr %taddr34, align 8
  %48 = insertvalue %any undef, ptr %taddr34, 0
  %49 = insertvalue %any %48, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.31, i64 94 }, ptr %indirectarg35, align 8
  store %"char[]" { ptr @.file.74, i64 21 }, ptr %indirectarg36, align 8
  store %"char[]" { ptr @.func.77, i64 31 }, ptr %indirectarg37, align 8
  store %any %47, ptr %varargslots38, align 16
  %ptradd39 = getelementptr inbounds i8, ptr %varargslots38, i64 16
  store %any %49, ptr %ptradd39, align 16
  %50 = insertvalue %"any[]" undef, ptr %varargslots38, 0
  %"$$temp40" = insertvalue %"any[]" %50, i64 2, 1
  store %"any[]" %"$$temp40", ptr %indirectarg41, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg35, ptr align 8 %indirectarg36, ptr align 8 %indirectarg37, i32 94, ptr align 8 %indirectarg41) #6, !dbg !1483
  unreachable, !dbg !1483
}

; Function Attrs: nounwind ssp uwtable
define internal ptr @std.core.mem.allocator.on_stack_allocator_find_chunk.8346(ptr %0, ptr %1) #0 !dbg !1488 {
entry:
  %a = alloca ptr, align 8
  %ptr = alloca ptr, align 8
  %chunk = alloca ptr, align 8
  store ptr %0, ptr %a, align 8
    #dbg_declare(ptr %a, !1491, !DIExpression(), !1492)
  store ptr %1, ptr %ptr, align 8
    #dbg_declare(ptr %ptr, !1493, !DIExpression(), !1492)
    #dbg_declare(ptr %chunk, !1494, !DIExpression(), !1495)
  %2 = load ptr, ptr %a, align 8, !dbg !1495
  %ptradd = getelementptr inbounds i8, ptr %2, i64 40, !dbg !1495
  %3 = load ptr, ptr %ptradd, align 8, !dbg !1495
  store ptr %3, ptr %chunk, align 8, !dbg !1495
  br label %loop.cond, !dbg !1496

loop.cond:                                        ; preds = %if.exit, %entry
  %4 = load ptr, ptr %chunk, align 8, !dbg !1497
  %i2b = icmp ne ptr %4, null, !dbg !1497
  br i1 %i2b, label %loop.body, label %loop.exit, !dbg !1497

loop.body:                                        ; preds = %loop.cond
  %5 = load ptr, ptr %chunk, align 8, !dbg !1499
  %ptradd1 = getelementptr inbounds i8, ptr %5, i64 16, !dbg !1499
  %6 = load ptr, ptr %ptradd1, align 8, !dbg !1499
  %7 = load ptr, ptr %ptr, align 8, !dbg !1499
  %eq = icmp eq ptr %6, %7, !dbg !1499
  br i1 %eq, label %if.then, label %if.exit, !dbg !1499

if.then:                                          ; preds = %loop.body
  %8 = load ptr, ptr %chunk, align 8, !dbg !1499
  ret ptr %8, !dbg !1499

if.exit:                                          ; preds = %loop.body
  %9 = load ptr, ptr %chunk, align 8, !dbg !1501
  %ptradd2 = getelementptr inbounds i8, ptr %9, i64 8, !dbg !1501
  %10 = load ptr, ptr %ptradd2, align 8, !dbg !1501
  store ptr %10, ptr %chunk, align 8, !dbg !1501
  br label %loop.cond, !dbg !1501

loop.exit:                                        ; preds = %loop.cond
  ret ptr null, !dbg !1502
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.core.mem.allocator.TempAllocator.derive_allocator(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !1503 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %reserve = alloca i64, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %remaining = alloca i64, align 8
  %mem = alloca ptr, align 8
  %size = alloca i64, align 8
  %reterr = alloca i64, align 8
  %error_var = alloca i64, align 8
  %indirectarg17 = alloca %"char[]", align 8
  %indirectarg18 = alloca %"char[]", align 8
  %indirectarg19 = alloca %"char[]", align 8
  %indirectarg23 = alloca %"char[]", align 8
  %indirectarg24 = alloca %"char[]", align 8
  %indirectarg25 = alloca %"char[]", align 8
  %indirectarg28 = alloca %"char[]", align 8
  %indirectarg29 = alloca %"char[]", align 8
  %indirectarg30 = alloca %"char[]", align 8
  %indirectarg33 = alloca %"char[]", align 8
  %indirectarg34 = alloca %"char[]", align 8
  %indirectarg35 = alloca %"char[]", align 8
  %retparam = alloca ptr, align 8
  %indirectarg37 = alloca %any, align 8
  %start = alloca i64, align 8
  %x = alloca i64, align 8
  %indirectarg45 = alloca %"char[]", align 8
  %indirectarg46 = alloca %"char[]", align 8
  %indirectarg47 = alloca %"char[]", align 8
  %ptr = alloca ptr, align 8
  %temp = alloca ptr, align 8
  %reterr68 = alloca i64, align 8
  %3 = icmp eq ptr %1, null, !dbg !1507
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !1507
  br i1 %4, label %panic, label %checkok, !dbg !1507

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !1508, !DIExpression(), !1509)
  store i64 %2, ptr %reserve, align 8
    #dbg_declare(ptr %reserve, !1510, !DIExpression(), !1509)
  %5 = load ptr, ptr %self, align 8, !dbg !1511
  %ptradd = getelementptr inbounds i8, ptr %5, i64 24, !dbg !1511
  %6 = load ptr, ptr %ptradd, align 8, !dbg !1511
  %i2nb = icmp eq ptr %6, null, !dbg !1511
  br i1 %i2nb, label %assert_ok, label %assert_fail, !dbg !1511

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.91, i64 34 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.file.85, i64 17 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.func.90, i64 16 }, ptr %indirectarg5, align 8
  %7 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %7(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, i32 87) #6, !dbg !1511
  unreachable, !dbg !1511

assert_ok:                                        ; preds = %checkok
  %8 = load i64, ptr %reserve, align 8, !dbg !1513
  %i2nb6 = icmp eq i64 %8, 0, !dbg !1513
  br i1 %i2nb6, label %if.then, label %if.exit, !dbg !1513

if.then:                                          ; preds = %assert_ok
  %9 = load ptr, ptr %self, align 8, !dbg !1513
  %ptradd7 = getelementptr inbounds i8, ptr %9, i64 40, !dbg !1513
  %10 = load i64, ptr %ptradd7, align 8, !dbg !1513
  store i64 %10, ptr %reserve, align 8, !dbg !1513
  br label %if.exit, !dbg !1513

if.exit:                                          ; preds = %if.then, %assert_ok
    #dbg_declare(ptr %remaining, !1514, !DIExpression(), !1515)
  %11 = load ptr, ptr %self, align 8, !dbg !1515
  %ptradd8 = getelementptr inbounds i8, ptr %11, i64 72, !dbg !1515
  %12 = load i64, ptr %ptradd8, align 8, !dbg !1515
  %13 = load ptr, ptr %self, align 8, !dbg !1515
  %ptradd9 = getelementptr inbounds i8, ptr %13, i64 64, !dbg !1515
  %14 = load i64, ptr %ptradd9, align 8, !dbg !1515
  %sub = sub i64 %12, %14, !dbg !1515
  store i64 %sub, ptr %remaining, align 8, !dbg !1515
    #dbg_declare(ptr %mem, !1516, !DIExpression(), !1517)
    #dbg_declare(ptr %size, !1518, !DIExpression(), !1519)
  %15 = load ptr, ptr %self, align 8, !dbg !1520
  %ptradd10 = getelementptr inbounds i8, ptr %15, i64 56, !dbg !1520
  %16 = load i64, ptr %ptradd10, align 8, !dbg !1520
  %17 = load i64, ptr %reserve, align 8, !dbg !1520
  %add = add i64 %16, %17, !dbg !1520
  %18 = load i64, ptr %remaining, align 8, !dbg !1520
  %gt = icmp ugt i64 %add, %18, !dbg !1520
  br i1 %gt, label %if.then11, label %if.exit39, !dbg !1520

if.then11:                                        ; preds = %if.exit
  %19 = load ptr, ptr %self, align 8, !dbg !1521
  %20 = load %any, ptr %19, align 8, !dbg !1521
  %21 = load ptr, ptr %self, align 8, !dbg !1521
  %ptradd12 = getelementptr inbounds i8, ptr %21, i64 48, !dbg !1521
  %22 = load i64, ptr %ptradd12, align 8, !dbg !1521
  %23 = load ptr, ptr %self, align 8, !dbg !1521
  %ptradd13 = getelementptr inbounds i8, ptr %23, i64 40, !dbg !1521
  %24 = load i64, ptr %ptradd13, align 8, !dbg !1521
  %25 = load ptr, ptr %self, align 8, !dbg !1521
  %ptradd14 = getelementptr inbounds i8, ptr %25, i64 56, !dbg !1521
  %26 = load i64, ptr %ptradd14, align 8, !dbg !1521
  %27 = load ptr, ptr %self, align 8, !dbg !1521
  %ptradd15 = getelementptr inbounds i8, ptr %27, i64 48, !dbg !1521
  %28 = load i64, ptr %ptradd15, align 8, !dbg !1521
  %le = icmp ule i64 64, %22, !dbg !1521
  br i1 %le, label %assert_ok20, label %assert_fail16, !dbg !1521

assert_fail16:                                    ; preds = %if.then11
  store %"char[]" { ptr @.panic_msg.84, i64 31 }, ptr %indirectarg17, align 8
  store %"char[]" { ptr @.file.85, i64 17 }, ptr %indirectarg18, align 8
  store %"char[]" { ptr @.func.90, i64 16 }, ptr %indirectarg19, align 8
  %29 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %29(ptr align 8 %indirectarg17, ptr align 8 %indirectarg18, ptr align 8 %indirectarg19, i32 97) #6, !dbg !1521
  unreachable, !dbg !1521

assert_ok20:                                      ; preds = %if.then11
  %le21 = icmp ule i64 64, %28, !dbg !1521
  br i1 %le21, label %assert_ok26, label %assert_fail22, !dbg !1521

assert_fail22:                                    ; preds = %assert_ok20
  store %"char[]" { ptr @.panic_msg.87, i64 39 }, ptr %indirectarg23, align 8
  store %"char[]" { ptr @.file.85, i64 17 }, ptr %indirectarg24, align 8
  store %"char[]" { ptr @.func.90, i64 16 }, ptr %indirectarg25, align 8
  %30 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %30(ptr align 8 %indirectarg23, ptr align 8 %indirectarg24, ptr align 8 %indirectarg25, i32 97) #6, !dbg !1521
  unreachable, !dbg !1521

assert_ok26:                                      ; preds = %assert_ok20
  %31 = extractvalue %any %20, 1, !dbg !1523
  %neq = icmp ne i64 %31, ptrtoint (ptr @"$ct.std.core.mem.allocator.TempAllocator" to i64), !dbg !1521
  br i1 %neq, label %assert_ok31, label %assert_fail27, !dbg !1521

assert_fail27:                                    ; preds = %assert_ok26
  store %"char[]" { ptr @.panic_msg.88, i64 145 }, ptr %indirectarg28, align 8
  store %"char[]" { ptr @.file.85, i64 17 }, ptr %indirectarg29, align 8
  store %"char[]" { ptr @.func.90, i64 16 }, ptr %indirectarg30, align 8
  %32 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %32(ptr align 8 %indirectarg28, ptr align 8 %indirectarg29, ptr align 8 %indirectarg30, i32 97) #6, !dbg !1521
  unreachable, !dbg !1521

assert_ok31:                                      ; preds = %assert_ok26
  %lt = icmp ult i64 152, %26, !dbg !1521
  br i1 %lt, label %assert_ok36, label %assert_fail32, !dbg !1521

assert_fail32:                                    ; preds = %assert_ok31
  store %"char[]" { ptr @.panic_msg.89, i64 114 }, ptr %indirectarg33, align 8
  store %"char[]" { ptr @.file.85, i64 17 }, ptr %indirectarg34, align 8
  store %"char[]" { ptr @.func.90, i64 16 }, ptr %indirectarg35, align 8
  %33 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %33(ptr align 8 %indirectarg33, ptr align 8 %indirectarg34, ptr align 8 %indirectarg35, i32 97) #6, !dbg !1521
  unreachable, !dbg !1521

assert_ok36:                                      ; preds = %assert_ok31
  store %any %20, ptr %indirectarg37, align 8
  %34 = call i64 @std.core.mem.allocator.new_temp_allocator(ptr %retparam, ptr align 8 %indirectarg37, i64 %22, i64 %24, i64 %26, i64 %28), !dbg !1521
  %not_err = icmp eq i64 %34, 0, !dbg !1521
  %35 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1521
  br i1 %35, label %after_check, label %assign_optional, !dbg !1521

assign_optional:                                  ; preds = %assert_ok36
  store i64 %34, ptr %error_var, align 8, !dbg !1521
  br label %guard_block, !dbg !1521

after_check:                                      ; preds = %assert_ok36
  br label %noerr_block, !dbg !1521

guard_block:                                      ; preds = %assign_optional
  %36 = load i64, ptr %error_var, align 8, !dbg !1521
  ret i64 %36, !dbg !1521

noerr_block:                                      ; preds = %after_check
  %37 = load ptr, ptr %self, align 8, !dbg !1521
  %ptradd38 = getelementptr inbounds i8, ptr %37, i64 24, !dbg !1521
  %38 = load ptr, ptr %retparam, align 8, !dbg !1521
  store ptr %38, ptr %ptradd38, align 8, !dbg !1521
  store ptr %38, ptr %0, align 8, !dbg !1521
  ret i64 0, !dbg !1521

if.exit39:                                        ; preds = %if.exit
    #dbg_declare(ptr %start, !1524, !DIExpression(), !1525)
  %39 = load ptr, ptr %self, align 8, !dbg !1525
  %ptradd40 = getelementptr inbounds i8, ptr %39, i64 64, !dbg !1525
  %40 = load i64, ptr %ptradd40, align 8, !dbg !1525
  %41 = load i64, ptr %reserve, align 8, !dbg !1525
  %add41 = add i64 %40, %41, !dbg !1525
  store i64 16, ptr %x, align 8
  %42 = load i64, ptr %x, align 8, !dbg !1526
  %neq42 = icmp ne i64 0, %42, !dbg !1526
  br i1 %neq42, label %and.rhs, label %and.phi, !dbg !1526

and.rhs:                                          ; preds = %if.exit39
  %43 = load i64, ptr %x, align 8, !dbg !1526
  %44 = load i64, ptr %x, align 8, !dbg !1526
  %sub43 = sub i64 %44, 1, !dbg !1526
  %and = and i64 %43, %sub43, !dbg !1526
  %eq = icmp eq i64 %and, 0, !dbg !1526
  br label %and.phi, !dbg !1526

and.phi:                                          ; preds = %and.rhs, %if.exit39
  %val = phi i1 [ false, %if.exit39 ], [ %eq, %and.rhs ], !dbg !1526
  br i1 %val, label %assert_ok48, label %assert_fail44, !dbg !1526

assert_fail44:                                    ; preds = %and.phi
  store %"char[]" { ptr @.panic_msg.14, i64 51 }, ptr %indirectarg45, align 8
  store %"char[]" { ptr @.file.85, i64 17 }, ptr %indirectarg46, align 8
  store %"char[]" { ptr @.func.90, i64 16 }, ptr %indirectarg47, align 8
  %45 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %45(ptr align 8 %indirectarg45, ptr align 8 %indirectarg46, ptr align 8 %indirectarg47, i32 99) #6, !dbg !1525
  unreachable, !dbg !1525

assert_ok48:                                      ; preds = %and.phi
  %46 = call i64 @std.core.mem.aligned_offset(i64 %add41, i64 16), !dbg !1525
  store i64 %46, ptr %start, align 8, !dbg !1525
    #dbg_declare(ptr %ptr, !1528, !DIExpression(), !1529)
  %47 = load ptr, ptr %self, align 8, !dbg !1529
  %ptradd49 = getelementptr inbounds i8, ptr %47, i64 88, !dbg !1529
  %48 = load i64, ptr %start, align 8, !dbg !1529
  %ptradd50 = getelementptr inbounds i8, ptr %ptradd49, i64 %48, !dbg !1529
  store ptr %ptradd50, ptr %ptr, align 8, !dbg !1529
    #dbg_declare(ptr %temp, !1530, !DIExpression(), !1531)
  %49 = load ptr, ptr %ptr, align 8, !dbg !1531
  store ptr %49, ptr %temp, align 8, !dbg !1531
  %50 = load ptr, ptr %temp, align 8, !dbg !1532
  %ptradd51 = getelementptr inbounds i8, ptr %50, i64 16, !dbg !1532
  store ptr null, ptr %ptradd51, align 8, !dbg !1532
  %51 = load ptr, ptr %self, align 8, !dbg !1533
  %52 = load ptr, ptr %temp, align 8, !dbg !1533
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %52, ptr align 8 %51, i32 16, i1 false), !dbg !1533
  %53 = load ptr, ptr %temp, align 8, !dbg !1534
  %ptradd52 = getelementptr inbounds i8, ptr %53, i64 64, !dbg !1534
  store i64 0, ptr %ptradd52, align 8, !dbg !1534
  %54 = load ptr, ptr %self, align 8, !dbg !1535
  %ptradd53 = getelementptr inbounds i8, ptr %54, i64 56, !dbg !1535
  %55 = load ptr, ptr %temp, align 8, !dbg !1535
  %ptradd54 = getelementptr inbounds i8, ptr %55, i64 56, !dbg !1535
  %56 = load i64, ptr %ptradd53, align 8, !dbg !1535
  store i64 %56, ptr %ptradd54, align 8, !dbg !1535
  %57 = load ptr, ptr %self, align 8, !dbg !1536
  %ptradd55 = getelementptr inbounds i8, ptr %57, i64 40, !dbg !1536
  %58 = load ptr, ptr %temp, align 8, !dbg !1536
  %ptradd56 = getelementptr inbounds i8, ptr %58, i64 40, !dbg !1536
  %59 = load i64, ptr %ptradd55, align 8, !dbg !1536
  store i64 %59, ptr %ptradd56, align 8, !dbg !1536
  %60 = load ptr, ptr %self, align 8, !dbg !1537
  %ptradd57 = getelementptr inbounds i8, ptr %60, i64 48, !dbg !1537
  %61 = load ptr, ptr %temp, align 8, !dbg !1537
  %ptradd58 = getelementptr inbounds i8, ptr %61, i64 48, !dbg !1537
  %62 = load i64, ptr %ptradd57, align 8, !dbg !1537
  store i64 %62, ptr %ptradd58, align 8, !dbg !1537
  %63 = load ptr, ptr %temp, align 8, !dbg !1538
  %ptradd59 = getelementptr inbounds i8, ptr %63, i64 32, !dbg !1538
  store i8 0, ptr %ptradd59, align 8, !dbg !1538
  %64 = load ptr, ptr %temp, align 8, !dbg !1539
  %ptradd60 = getelementptr inbounds i8, ptr %64, i64 24, !dbg !1539
  store ptr null, ptr %ptradd60, align 8, !dbg !1539
  %65 = load ptr, ptr %self, align 8, !dbg !1540
  %ptradd61 = getelementptr inbounds i8, ptr %65, i64 72, !dbg !1540
  %66 = load i64, ptr %ptradd61, align 8, !dbg !1540
  %67 = load i64, ptr %start, align 8, !dbg !1540
  %sub62 = sub i64 %66, %67, !dbg !1540
  %sub63 = sub i64 %sub62, 88, !dbg !1540
  %68 = load ptr, ptr %temp, align 8, !dbg !1540
  %ptradd64 = getelementptr inbounds i8, ptr %68, i64 72, !dbg !1540
  store i64 %sub63, ptr %ptradd64, align 8, !dbg !1540
  %69 = load ptr, ptr %temp, align 8, !dbg !1540
  %ptradd65 = getelementptr inbounds i8, ptr %69, i64 80, !dbg !1540
  store i64 %sub63, ptr %ptradd65, align 8, !dbg !1540
  %70 = load ptr, ptr %self, align 8, !dbg !1541
  %ptradd66 = getelementptr inbounds i8, ptr %70, i64 72, !dbg !1541
  %71 = load i64, ptr %start, align 8, !dbg !1541
  store i64 %71, ptr %ptradd66, align 8, !dbg !1541
  %72 = load ptr, ptr %self, align 8, !dbg !1542
  %ptradd67 = getelementptr inbounds i8, ptr %72, i64 24, !dbg !1542
  %73 = load ptr, ptr %temp, align 8, !dbg !1542
  store ptr %73, ptr %ptradd67, align 8, !dbg !1542
  %74 = load ptr, ptr %temp, align 8, !dbg !1543
  store ptr %74, ptr %0, align 8, !dbg !1543
  ret i64 0, !dbg !1543

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.85, i64 17 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.90, i64 16 }, ptr %indirectarg2, align 8
  %75 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %75(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 89) #6, !dbg !1509
  unreachable, !dbg !1509
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.core.mem.allocator.TempAllocator.reset(ptr %0) #0 comdat !dbg !1544 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %child = alloca ptr, align 8
  %old = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1547
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1547
  br i1 %2, label %panic, label %checkok, !dbg !1547

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1548, !DIExpression(), !1549)
    #dbg_declare(ptr %child, !1550, !DIExpression(), !1551)
  %3 = load ptr, ptr %self, align 8, !dbg !1551
  %ptradd = getelementptr inbounds i8, ptr %3, i64 24, !dbg !1551
  %4 = load ptr, ptr %ptradd, align 8, !dbg !1551
  store ptr %4, ptr %child, align 8, !dbg !1551
  %5 = load ptr, ptr %child, align 8, !dbg !1552
  %i2nb = icmp eq ptr %5, null, !dbg !1552
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !1552

if.then:                                          ; preds = %checkok
  ret void, !dbg !1552

if.exit:                                          ; preds = %checkok
  br label %loop.cond, !dbg !1553

loop.cond:                                        ; preds = %loop.body, %if.exit
  %6 = load ptr, ptr %child, align 8, !dbg !1554
  %i2b = icmp ne ptr %6, null, !dbg !1554
  br i1 %i2b, label %loop.body, label %loop.exit, !dbg !1554

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %old, !1556, !DIExpression(), !1558)
  %7 = load ptr, ptr %child, align 8, !dbg !1558
  store ptr %7, ptr %old, align 8, !dbg !1558
  %8 = load ptr, ptr %old, align 8, !dbg !1559
  %ptradd3 = getelementptr inbounds i8, ptr %8, i64 24, !dbg !1559
  %9 = load ptr, ptr %ptradd3, align 8, !dbg !1559
  store ptr %9, ptr %child, align 8, !dbg !1559
  %10 = load ptr, ptr %old, align 8, !dbg !1560
  call void @std.core.mem.allocator.TempAllocator.destroy(ptr %10), !dbg !1560
  br label %loop.cond, !dbg !1560

loop.exit:                                        ; preds = %loop.cond
  %11 = load ptr, ptr %self, align 8, !dbg !1561
  %ptradd4 = getelementptr inbounds i8, ptr %11, i64 80, !dbg !1561
  %12 = load ptr, ptr %self, align 8, !dbg !1561
  %ptradd5 = getelementptr inbounds i8, ptr %12, i64 72, !dbg !1561
  %13 = load i64, ptr %ptradd4, align 8, !dbg !1561
  store i64 %13, ptr %ptradd5, align 8, !dbg !1561
  %14 = load ptr, ptr %self, align 8, !dbg !1562
  %ptradd6 = getelementptr inbounds i8, ptr %14, i64 24, !dbg !1562
  store ptr null, ptr %ptradd6, align 8, !dbg !1562
  ret void, !dbg !1562

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.85, i64 17 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.4, i64 5 }, ptr %indirectarg2, align 8
  %15 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %15(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 122) #6, !dbg !1549
  unreachable, !dbg !1549
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.core.mem.allocator.TempAllocator.free(ptr %0) #0 comdat !dbg !1563 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %1 = icmp eq ptr %0, null, !dbg !1564
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1564
  br i1 %2, label %panic, label %checkok, !dbg !1564

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1565, !DIExpression(), !1566)
  %3 = load ptr, ptr %self, align 8, !dbg !1567
  %ptradd = getelementptr inbounds i8, ptr %3, i64 32, !dbg !1567
  %4 = load i8, ptr %ptradd, align 8, !dbg !1567
  %5 = trunc i8 %4 to i1, !dbg !1567
  br i1 %5, label %assert_ok, label %assert_fail, !dbg !1567

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.92, i64 82 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.file.85, i64 17 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.func.43, i64 4 }, ptr %indirectarg5, align 8
  %6 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %6(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, i32 140) #6, !dbg !1567
  unreachable, !dbg !1567

assert_ok:                                        ; preds = %checkok
  %7 = load ptr, ptr %self, align 8, !dbg !1569
  call void @std.core.mem.allocator.TempAllocator.reset(ptr %7), !dbg !1569
  %8 = load ptr, ptr %self, align 8, !dbg !1570
  call void @std.core.mem.allocator.TempAllocator.destroy(ptr %8), !dbg !1570
  ret void, !dbg !1570

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.85, i64 17 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.43, i64 4 }, ptr %indirectarg2, align 8
  %9 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %9(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 142) #6, !dbg !1566
  unreachable, !dbg !1566
}

; Function Attrs: nounwind ssp uwtable
define internal void @std.core.mem.allocator.TempAllocator.destroy(ptr %0) #0 !dbg !1571 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %last_page = alloca ptr, align 8
  %to_free = alloca ptr, align 8
  %error_var = alloca i64, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg6 = alloca %"any[]", align 8
  %allocator = alloca %any, align 8
  %ptr = alloca ptr, align 8
  %indirectarg9 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %indirectarg14 = alloca %"char[]", align 8
  %indirectarg15 = alloca %"char[]", align 8
  %indirectarg16 = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %indirectarg21 = alloca %"char[]", align 8
  %indirectarg22 = alloca %"char[]", align 8
  %indirectarg23 = alloca %"char[]", align 8
  %varargslots24 = alloca [1 x %any], align 16
  %indirectarg26 = alloca %"any[]", align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !1572
  %1 = icmp eq ptr %0, null, !dbg !1572
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1572
  br i1 %2, label %panic, label %checkok, !dbg !1572

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1573, !DIExpression(), !1574)
    #dbg_declare(ptr %last_page, !1575, !DIExpression(), !1576)
  %3 = load ptr, ptr %self, align 8, !dbg !1576
  %ptradd = getelementptr inbounds i8, ptr %3, i64 16, !dbg !1576
  %4 = load ptr, ptr %ptradd, align 8, !dbg !1576
  store ptr %4, ptr %last_page, align 8, !dbg !1576
  br label %loop.cond, !dbg !1577

loop.cond:                                        ; preds = %noerr_block, %checkok
  %5 = load ptr, ptr %last_page, align 8, !dbg !1578
  %i2b = icmp ne ptr %5, null, !dbg !1578
  br i1 %i2b, label %loop.body, label %loop.exit, !dbg !1578

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %to_free, !1580, !DIExpression(), !1582)
  %6 = load ptr, ptr %last_page, align 8, !dbg !1582
  store ptr %6, ptr %to_free, align 8, !dbg !1582
  %7 = load ptr, ptr %last_page, align 8, !dbg !1583
  %8 = load ptr, ptr %7, align 8, !dbg !1583
  store ptr %8, ptr %last_page, align 8, !dbg !1583
  %9 = load ptr, ptr %self, align 8, !dbg !1584
  %10 = load ptr, ptr %to_free, align 8, !dbg !1584
  %11 = call i64 @std.core.mem.allocator.TempAllocator._free_page(ptr %9, ptr %10) #7, !dbg !1584
  %not_err = icmp eq i64 %11, 0, !dbg !1584
  %12 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1584
  br i1 %12, label %after_check, label %assign_optional, !dbg !1584

assign_optional:                                  ; preds = %loop.body
  store i64 %11, ptr %error_var, align 8, !dbg !1584
  br label %panic_block, !dbg !1584

after_check:                                      ; preds = %loop.body
  br label %noerr_block, !dbg !1584

panic_block:                                      ; preds = %assign_optional
  %13 = insertvalue %any undef, ptr %error_var, 0, !dbg !1584
  %14 = insertvalue %any %13, i64 ptrtoint (ptr @"$ct.fault" to i64), 1, !dbg !1584
  store %"char[]" { ptr @.panic_msg.32, i64 36 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.file.85, i64 17 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.func.27, i64 7 }, ptr %indirectarg5, align 8
  store %any %14, ptr %varargslots, align 16
  %15 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %15, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg6, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, i32 155, ptr align 8 %indirectarg6) #6, !dbg !1584
  unreachable, !dbg !1584

noerr_block:                                      ; preds = %after_check
  br label %loop.cond, !dbg !1584

loop.exit:                                        ; preds = %loop.cond
  %16 = load ptr, ptr %self, align 8, !dbg !1585
  %ptradd7 = getelementptr inbounds i8, ptr %16, i64 32, !dbg !1585
  %17 = load i8, ptr %ptradd7, align 8, !dbg !1585
  %18 = trunc i8 %17 to i1, !dbg !1585
  br i1 %18, label %if.then, label %if.exit17, !dbg !1585

if.then:                                          ; preds = %loop.exit
  %19 = load ptr, ptr %self, align 8, !dbg !1586
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator, ptr align 8 %19, i32 16, i1 false)
  %20 = load ptr, ptr %self, align 8, !dbg !1586
  store ptr %20, ptr %ptr, align 8
  %21 = load ptr, ptr %ptr, align 8, !dbg !1588
  %i2nb = icmp eq ptr %21, null, !dbg !1588
  br i1 %i2nb, label %if.then8, label %if.exit, !dbg !1588

if.then8:                                         ; preds = %if.then
  br label %expr_block.exit, !dbg !1588

if.exit:                                          ; preds = %if.then
  %22 = load ptr, ptr %ptr, align 8, !dbg !1590
  %neq = icmp ne ptr %22, null, !dbg !1590
  br i1 %neq, label %assert_ok, label %assert_fail, !dbg !1590

assert_fail:                                      ; preds = %if.exit
  store %"char[]" { ptr @.panic_msg.28, i64 75 }, ptr %indirectarg9, align 8
  store %"char[]" { ptr @.file.24, i64 16 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.func.27, i64 7 }, ptr %indirectarg11, align 8
  %23 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %23(ptr align 8 %indirectarg9, ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, i32 123) #6, !dbg !1590
  unreachable, !dbg !1590

assert_ok:                                        ; preds = %if.exit
  %ptradd12 = getelementptr inbounds i8, ptr %allocator, i64 8, !dbg !1590
  %24 = load i64, ptr %ptradd12, align 8, !dbg !1590
  %25 = inttoptr i64 %24 to ptr, !dbg !1590
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !1572
  %26 = icmp eq ptr %25, %type, !dbg !1572
  br i1 %26, label %cache_hit, label %cache_miss, !dbg !1572

cache_miss:                                       ; preds = %assert_ok
  %ptradd13 = getelementptr inbounds i8, ptr %25, i64 16, !dbg !1572
  %27 = load ptr, ptr %ptradd13, align 8, !dbg !1572
  %28 = call ptr @.dyn_search(ptr %27, ptr @"$sel.release"), !dbg !1572
  store ptr %28, ptr %.inlinecache, align 8, !dbg !1572
  store ptr %25, ptr %.cachedtype, align 8, !dbg !1572
  br label %29, !dbg !1572

cache_hit:                                        ; preds = %assert_ok
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !1572
  br label %29, !dbg !1572

29:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %28, %cache_miss ], !dbg !1572
  %30 = icmp eq ptr %fn_phi, null, !dbg !1572
  br i1 %30, label %missing_function, label %match, !dbg !1572

missing_function:                                 ; preds = %29
  store %"char[]" { ptr @.panic_msg.29, i64 44 }, ptr %indirectarg14, align 8
  store %"char[]" { ptr @.file.24, i64 16 }, ptr %indirectarg15, align 8
  store %"char[]" { ptr @.func.27, i64 7 }, ptr %indirectarg16, align 8
  %31 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %31(ptr align 8 %indirectarg14, ptr align 8 %indirectarg15, ptr align 8 %indirectarg16, i32 123) #6, !dbg !1590
  unreachable, !dbg !1590

match:                                            ; preds = %29
  %32 = load ptr, ptr %allocator, align 8, !dbg !1590
  call void %fn_phi(ptr %32, ptr %22, i8 zeroext 0), !dbg !1590
  br label %expr_block.exit, !dbg !1590

expr_block.exit:                                  ; preds = %match, %if.then8
  ret void, !dbg !1591

if.exit17:                                        ; preds = %loop.exit
  %33 = load ptr, ptr %self, align 8, !dbg !1592
  %ptradd18 = getelementptr inbounds i8, ptr %33, i64 88, !dbg !1592
  %34 = load ptr, ptr %self, align 8, !dbg !1592
  %ptradd19 = getelementptr inbounds i8, ptr %34, i64 64, !dbg !1592
  %35 = load i64, ptr %ptradd19, align 8, !dbg !1592
  %add = add i64 0, %35, !dbg !1592
  %gt = icmp sgt i64 0, %add, !dbg !1592
  %sub = sub i64 %add, 0, !dbg !1592
  %36 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !1592
  br i1 %36, label %panic20, label %checkok27, !dbg !1592

checkok27:                                        ; preds = %if.exit17
  br label %cond, !dbg !1592

cond:                                             ; preds = %assign, %checkok27
  %37 = phi i64 [ 0, %checkok27 ], [ %add29, %assign ], !dbg !1592
  %lt = icmp slt i64 %37, %add, !dbg !1592
  br i1 %lt, label %assign, label %exit, !dbg !1592

assign:                                           ; preds = %cond
  %ptradd28 = getelementptr inbounds i8, ptr %ptradd18, i64 %37, !dbg !1592
  store i8 -86, ptr %ptradd28, align 1, !dbg !1592
  %add29 = add i64 %37, 1, !dbg !1592
  br label %cond, !dbg !1592

exit:                                             ; preds = %cond
  ret void, !dbg !1592

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.85, i64 17 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.27, i64 7 }, ptr %indirectarg2, align 8
  %38 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %38(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 148) #6, !dbg !1574
  unreachable, !dbg !1574

panic20:                                          ; preds = %if.exit17
  store i64 %sub, ptr %taddr, align 8
  %39 = insertvalue %any undef, ptr %taddr, 0
  %40 = insertvalue %any %39, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.33, i64 43 }, ptr %indirectarg21, align 8
  store %"char[]" { ptr @.file.85, i64 17 }, ptr %indirectarg22, align 8
  store %"char[]" { ptr @.func.27, i64 7 }, ptr %indirectarg23, align 8
  store %any %40, ptr %varargslots24, align 16
  %41 = insertvalue %"any[]" undef, ptr %varargslots24, 0
  %"$$temp25" = insertvalue %"any[]" %41, i64 1, 1
  store %"any[]" %"$$temp25", ptr %indirectarg26, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg21, ptr align 8 %indirectarg22, ptr align 8 %indirectarg23, i32 164, ptr align 8 %indirectarg26) #6, !dbg !1592
  unreachable, !dbg !1592
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.core.mem.allocator.TempAllocator.release(ptr %0, ptr %1, i8 zeroext %2) #0 comdat !dbg !1593 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %old_pointer = alloca ptr, align 8
  %.anon = alloca i8, align 1
  %old_size = alloca i64, align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr9 = alloca i64, align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg13 = alloca %"any[]", align 8
  %addr = alloca ptr, align 8
  %size = alloca i64, align 8
  %3 = icmp eq ptr %0, null, !dbg !1596
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !1596
  br i1 %4, label %panic, label %checkok, !dbg !1596

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1597, !DIExpression(), !1598)
  store ptr %1, ptr %old_pointer, align 8
    #dbg_declare(ptr %old_pointer, !1599, !DIExpression(), !1598)
  store i8 %2, ptr %.anon, align 1
    #dbg_declare(ptr %.anon, !1600, !DIExpression(), !1598)
    #dbg_declare(ptr %old_size, !1601, !DIExpression(), !1602)
  %5 = load ptr, ptr %old_pointer, align 8, !dbg !1602
  %ptradd_any = getelementptr i8, ptr %5, i64 -8, !dbg !1602
  %checknull = icmp eq ptr %ptradd_any, null, !dbg !1602
  %6 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1602
  br i1 %6, label %panic3, label %checkok7, !dbg !1602

checkok7:                                         ; preds = %checkok
  %7 = ptrtoint ptr %ptradd_any to i64, !dbg !1602
  %8 = urem i64 %7, 8, !dbg !1602
  %9 = icmp ne i64 %8, 0, !dbg !1602
  %10 = call i1 @llvm.expect.i1(i1 %9, i1 false), !dbg !1602
  br i1 %10, label %panic8, label %checkok14, !dbg !1602

checkok14:                                        ; preds = %checkok7
  %11 = load i64, ptr %ptradd_any, align 8, !dbg !1602
  store i64 %11, ptr %old_size, align 8, !dbg !1602
  %12 = load ptr, ptr %old_pointer, align 8, !dbg !1603
  %13 = load i64, ptr %old_size, align 8, !dbg !1603
  %ptradd_any15 = getelementptr i8, ptr %12, i64 %13, !dbg !1603
  %14 = load ptr, ptr %self, align 8, !dbg !1603
  %ptradd16 = getelementptr inbounds i8, ptr %14, i64 88, !dbg !1603
  %15 = load ptr, ptr %self, align 8, !dbg !1603
  %ptradd17 = getelementptr inbounds i8, ptr %15, i64 64, !dbg !1603
  %16 = load i64, ptr %ptradd17, align 8, !dbg !1603
  %ptradd18 = getelementptr inbounds i8, ptr %ptradd16, i64 %16, !dbg !1603
  %eq = icmp eq ptr %ptradd_any15, %ptradd18, !dbg !1603
  br i1 %eq, label %if.then, label %if.exit, !dbg !1603

if.then:                                          ; preds = %checkok14
  %17 = load ptr, ptr %self, align 8, !dbg !1604
  %ptradd19 = getelementptr inbounds i8, ptr %17, i64 64, !dbg !1604
  %18 = load i64, ptr %ptradd19, align 8, !dbg !1604
  %19 = load i64, ptr %old_size, align 8, !dbg !1604
  %sub = sub i64 %18, %19, !dbg !1604
  store i64 %sub, ptr %ptradd19, align 8, !dbg !1604
  %20 = load ptr, ptr %self, align 8, !dbg !1606
  %ptradd20 = getelementptr inbounds i8, ptr %20, i64 88, !dbg !1606
  %21 = load ptr, ptr %self, align 8, !dbg !1606
  %ptradd21 = getelementptr inbounds i8, ptr %21, i64 64, !dbg !1606
  %22 = load i64, ptr %ptradd21, align 8, !dbg !1606
  %ptradd22 = getelementptr inbounds i8, ptr %ptradd20, i64 %22, !dbg !1606
  store ptr %ptradd22, ptr %addr, align 8
  %23 = load i64, ptr %old_size, align 8
  store i64 %23, ptr %size, align 8
  br label %if.exit, !dbg !1607

if.exit:                                          ; preds = %if.then, %checkok14
  ret void, !dbg !1607

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.85, i64 17 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.6, i64 7 }, ptr %indirectarg2, align 8
  %24 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %24(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 171) #6, !dbg !1598
  unreachable, !dbg !1598

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.30, i64 82 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.85, i64 17 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.6, i64 7 }, ptr %indirectarg6, align 8
  %25 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %25(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 173) #6, !dbg !1602
  unreachable, !dbg !1602

panic8:                                           ; preds = %checkok7
  store i64 8, ptr %taddr, align 8
  %26 = insertvalue %any undef, ptr %taddr, 0
  %27 = insertvalue %any %26, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %8, ptr %taddr9, align 8
  %28 = insertvalue %any undef, ptr %taddr9, 0
  %29 = insertvalue %any %28, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.31, i64 94 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.file.85, i64 17 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.func.6, i64 7 }, ptr %indirectarg12, align 8
  store %any %27, ptr %varargslots, align 16
  %ptradd = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %29, ptr %ptradd, align 16
  %30 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %30, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg13, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, i32 173, ptr align 8 %indirectarg13) #6, !dbg !1602
  unreachable, !dbg !1602
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @std.core.mem.allocator.TempAllocator._free_page(ptr %0, ptr %1) #0 !dbg !1609 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %page = alloca ptr, align 8
  %mem = alloca ptr, align 8
  %reterr = alloca i64, align 8
  %self3 = alloca ptr, align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %indirectarg16 = alloca %"char[]", align 8
  %indirectarg17 = alloca %"char[]", align 8
  %indirectarg18 = alloca %"char[]", align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !1612
  %2 = icmp eq ptr %0, null, !dbg !1612
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !1612
  br i1 %3, label %panic, label %checkok, !dbg !1612

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1613, !DIExpression(), !1614)
  store ptr %1, ptr %page, align 8
    #dbg_declare(ptr %page, !1615, !DIExpression(), !1614)
    #dbg_declare(ptr %mem, !1616, !DIExpression(), !1617)
  %4 = load ptr, ptr %page, align 8, !dbg !1617
  %ptradd = getelementptr inbounds i8, ptr %4, i64 8, !dbg !1617
  %5 = load ptr, ptr %ptradd, align 8, !dbg !1617
  store ptr %5, ptr %mem, align 8, !dbg !1617
  %6 = load ptr, ptr %self, align 8, !dbg !1618
  %7 = load ptr, ptr %mem, align 8, !dbg !1618
  %8 = load ptr, ptr %page, align 8
  store ptr %8, ptr %self3, align 8
  %9 = load ptr, ptr %self3, align 8, !dbg !1619
  %neq = icmp ne ptr %9, null, !dbg !1619
  br i1 %neq, label %assert_ok, label %assert_fail, !dbg !1619

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.35, i64 32 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.85, i64 17 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.34, i64 10 }, ptr %indirectarg6, align 8
  %10 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %10(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 64) #6, !dbg !1619
  unreachable, !dbg !1619

assert_ok:                                        ; preds = %checkok
  %11 = load ptr, ptr %self3, align 8, !dbg !1622
  %ptradd7 = getelementptr inbounds i8, ptr %11, i64 16, !dbg !1622
  %12 = load i64, ptr %ptradd7, align 8, !dbg !1622
  %and = and i64 %12, -9223372036854775808, !dbg !1622
  %eq = icmp eq i64 %and, -9223372036854775808, !dbg !1622
  %neq8 = icmp ne ptr %7, null, !dbg !1618
  br i1 %neq8, label %assert_ok13, label %assert_fail9, !dbg !1618

assert_fail9:                                     ; preds = %assert_ok
  store %"char[]" { ptr @.panic_msg.28, i64 75 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.file.85, i64 17 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.func.34, i64 10 }, ptr %indirectarg12, align 8
  %13 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %13(ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, i32 185) #6, !dbg !1618
  unreachable, !dbg !1618

assert_ok13:                                      ; preds = %assert_ok
  %ptradd14 = getelementptr inbounds i8, ptr %6, i64 8, !dbg !1618
  %14 = load i64, ptr %ptradd14, align 8, !dbg !1618
  %15 = inttoptr i64 %14 to ptr, !dbg !1618
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !1612
  %16 = icmp eq ptr %15, %type, !dbg !1612
  br i1 %16, label %cache_hit, label %cache_miss, !dbg !1612

cache_miss:                                       ; preds = %assert_ok13
  %ptradd15 = getelementptr inbounds i8, ptr %15, i64 16, !dbg !1612
  %17 = load ptr, ptr %ptradd15, align 8, !dbg !1612
  %18 = call ptr @.dyn_search(ptr %17, ptr @"$sel.release"), !dbg !1612
  store ptr %18, ptr %.inlinecache, align 8, !dbg !1612
  store ptr %15, ptr %.cachedtype, align 8, !dbg !1612
  br label %19, !dbg !1612

cache_hit:                                        ; preds = %assert_ok13
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !1612
  br label %19, !dbg !1612

19:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %18, %cache_miss ], !dbg !1612
  %20 = icmp eq ptr %fn_phi, null, !dbg !1612
  br i1 %20, label %missing_function, label %match, !dbg !1612

missing_function:                                 ; preds = %19
  store %"char[]" { ptr @.panic_msg.29, i64 44 }, ptr %indirectarg16, align 8
  store %"char[]" { ptr @.file.85, i64 17 }, ptr %indirectarg17, align 8
  store %"char[]" { ptr @.func.34, i64 10 }, ptr %indirectarg18, align 8
  %21 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %21(ptr align 8 %indirectarg16, ptr align 8 %indirectarg17, ptr align 8 %indirectarg18, i32 185) #6, !dbg !1618
  unreachable, !dbg !1618

match:                                            ; preds = %19
  %22 = load ptr, ptr %6, align 8, !dbg !1618
  %23 = zext i1 %eq to i8, !dbg !1618
  call void %fn_phi(ptr %22, ptr %7, i8 zeroext %23), !dbg !1618
  ret i64 0, !dbg !1618

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.85, i64 17 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.34, i64 10 }, ptr %indirectarg2, align 8
  %24 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %24(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 182) #6, !dbg !1614
  unreachable, !dbg !1614
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @std.core.mem.allocator.TempAllocator._realloc_page(ptr %0, ptr %1, ptr %2, i64 %3, i64 %4) #0 !dbg !1623 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %page = alloca ptr, align 8
  %size = alloca i64, align 8
  %alignment = alloca i64, align 8
  %real_pointer = alloca ptr, align 8
  %pointer_to_prev = alloca ptr, align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg7 = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr10 = alloca i64, align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %indirectarg13 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg15 = alloca %"any[]", align 8
  %indirectarg19 = alloca %"char[]", align 8
  %indirectarg20 = alloca %"char[]", align 8
  %indirectarg21 = alloca %"char[]", align 8
  %taddr24 = alloca i64, align 8
  %taddr25 = alloca i64, align 8
  %indirectarg26 = alloca %"char[]", align 8
  %indirectarg27 = alloca %"char[]", align 8
  %indirectarg28 = alloca %"char[]", align 8
  %varargslots29 = alloca [2 x %any], align 16
  %indirectarg32 = alloca %"any[]", align 8
  %indirectarg36 = alloca %"char[]", align 8
  %indirectarg37 = alloca %"char[]", align 8
  %indirectarg38 = alloca %"char[]", align 8
  %taddr41 = alloca i64, align 8
  %taddr42 = alloca i64, align 8
  %indirectarg43 = alloca %"char[]", align 8
  %indirectarg44 = alloca %"char[]", align 8
  %indirectarg45 = alloca %"char[]", align 8
  %varargslots46 = alloca [2 x %any], align 16
  %indirectarg49 = alloca %"any[]", align 8
  %page_size = alloca i64, align 8
  %self51 = alloca ptr, align 8
  %indirectarg53 = alloca %"char[]", align 8
  %indirectarg54 = alloca %"char[]", align 8
  %indirectarg55 = alloca %"char[]", align 8
  %data = alloca ptr, align 8
  %error_var = alloca i64, align 8
  %indirectarg58 = alloca %"char[]", align 8
  %indirectarg59 = alloca %"char[]", align 8
  %indirectarg60 = alloca %"char[]", align 8
  %x = alloca i64, align 8
  %indirectarg66 = alloca %"char[]", align 8
  %indirectarg67 = alloca %"char[]", align 8
  %indirectarg68 = alloca %"char[]", align 8
  %indirectarg71 = alloca %"char[]", align 8
  %indirectarg72 = alloca %"char[]", align 8
  %indirectarg73 = alloca %"char[]", align 8
  %retparam = alloca ptr, align 8
  %dst = alloca ptr, align 8
  %src = alloca ptr, align 8
  %len = alloca i64, align 8
  %indirectarg78 = alloca %"char[]", align 8
  %indirectarg79 = alloca %"char[]", align 8
  %indirectarg80 = alloca %"char[]", align 8
  %indirectarg88 = alloca %"char[]", align 8
  %indirectarg89 = alloca %"char[]", align 8
  %indirectarg90 = alloca %"char[]", align 8
  %indirectarg103 = alloca %"char[]", align 8
  %indirectarg104 = alloca %"char[]", align 8
  %indirectarg105 = alloca %"char[]", align 8
  %self107 = alloca ptr, align 8
  %indirectarg110 = alloca %"char[]", align 8
  %indirectarg111 = alloca %"char[]", align 8
  %indirectarg112 = alloca %"char[]", align 8
  %indirectarg119 = alloca %"char[]", align 8
  %indirectarg120 = alloca %"char[]", align 8
  %indirectarg121 = alloca %"char[]", align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %indirectarg125 = alloca %"char[]", align 8
  %indirectarg126 = alloca %"char[]", align 8
  %indirectarg127 = alloca %"char[]", align 8
  %reterr = alloca i64, align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !1626
  %5 = icmp eq ptr %1, null, !dbg !1626
  %6 = call i1 @llvm.expect.i1(i1 %5, i1 false), !dbg !1626
  br i1 %6, label %panic, label %checkok, !dbg !1626

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !1627, !DIExpression(), !1628)
  store ptr %2, ptr %page, align 8
    #dbg_declare(ptr %page, !1629, !DIExpression(), !1628)
  store i64 %3, ptr %size, align 8
    #dbg_declare(ptr %size, !1630, !DIExpression(), !1628)
  store i64 %4, ptr %alignment, align 8
    #dbg_declare(ptr %alignment, !1631, !DIExpression(), !1628)
    #dbg_declare(ptr %real_pointer, !1632, !DIExpression(), !1633)
  %7 = load ptr, ptr %page, align 8, !dbg !1633
  %ptradd = getelementptr inbounds i8, ptr %7, i64 8, !dbg !1633
  %8 = load ptr, ptr %ptradd, align 8, !dbg !1633
  store ptr %8, ptr %real_pointer, align 8, !dbg !1633
    #dbg_declare(ptr %pointer_to_prev, !1634, !DIExpression(), !1636)
  %9 = load ptr, ptr %self, align 8, !dbg !1636
  %ptradd3 = getelementptr inbounds i8, ptr %9, i64 16, !dbg !1636
  store ptr %ptradd3, ptr %pointer_to_prev, align 8, !dbg !1636
  br label %loop.cond, !dbg !1637

loop.cond:                                        ; preds = %checkok33, %checkok
  %10 = load ptr, ptr %pointer_to_prev, align 8, !dbg !1638
  %checknull = icmp eq ptr %10, null, !dbg !1638
  %11 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1638
  br i1 %11, label %panic4, label %checkok8, !dbg !1638

checkok8:                                         ; preds = %loop.cond
  %12 = ptrtoint ptr %10 to i64, !dbg !1638
  %13 = urem i64 %12, 8, !dbg !1638
  %14 = icmp ne i64 %13, 0, !dbg !1638
  %15 = call i1 @llvm.expect.i1(i1 %14, i1 false), !dbg !1638
  br i1 %15, label %panic9, label %checkok16, !dbg !1638

checkok16:                                        ; preds = %checkok8
  %16 = load ptr, ptr %10, align 8, !dbg !1638
  %17 = load ptr, ptr %page, align 8, !dbg !1638
  %neq = icmp ne ptr %16, %17, !dbg !1638
  br i1 %neq, label %loop.body, label %loop.exit, !dbg !1638

loop.body:                                        ; preds = %checkok16
  %18 = load ptr, ptr %pointer_to_prev, align 8, !dbg !1640
  %checknull17 = icmp eq ptr %18, null, !dbg !1640
  %19 = call i1 @llvm.expect.i1(i1 %checknull17, i1 false), !dbg !1640
  br i1 %19, label %panic18, label %checkok22, !dbg !1640

checkok22:                                        ; preds = %loop.body
  %20 = ptrtoint ptr %18 to i64, !dbg !1640
  %21 = urem i64 %20, 8, !dbg !1640
  %22 = icmp ne i64 %21, 0, !dbg !1640
  %23 = call i1 @llvm.expect.i1(i1 %22, i1 false), !dbg !1640
  br i1 %23, label %panic23, label %checkok33, !dbg !1640

checkok33:                                        ; preds = %checkok22
  %24 = load ptr, ptr %18, align 8, !dbg !1640
  store ptr %24, ptr %pointer_to_prev, align 8, !dbg !1640
  br label %loop.cond, !dbg !1640

loop.exit:                                        ; preds = %checkok16
  %25 = load ptr, ptr %page, align 8, !dbg !1642
  %26 = load ptr, ptr %pointer_to_prev, align 8, !dbg !1642
  %checknull34 = icmp eq ptr %26, null, !dbg !1642
  %27 = call i1 @llvm.expect.i1(i1 %checknull34, i1 false), !dbg !1642
  br i1 %27, label %panic35, label %checkok39, !dbg !1642

checkok39:                                        ; preds = %loop.exit
  %28 = ptrtoint ptr %26 to i64, !dbg !1642
  %29 = urem i64 %28, 8, !dbg !1642
  %30 = icmp ne i64 %29, 0, !dbg !1642
  %31 = call i1 @llvm.expect.i1(i1 %30, i1 false), !dbg !1642
  br i1 %31, label %panic40, label %checkok50, !dbg !1642

checkok50:                                        ; preds = %checkok39
  %32 = load ptr, ptr %25, align 8, !dbg !1642
  store ptr %32, ptr %26, align 8, !dbg !1642
    #dbg_declare(ptr %page_size, !1643, !DIExpression(), !1644)
  %33 = load ptr, ptr %page, align 8
  store ptr %33, ptr %self51, align 8
  %34 = load ptr, ptr %self51, align 8, !dbg !1645
  %neq52 = icmp ne ptr %34, null, !dbg !1645
  br i1 %neq52, label %assert_ok, label %assert_fail, !dbg !1645

assert_fail:                                      ; preds = %checkok50
  store %"char[]" { ptr @.panic_msg.35, i64 32 }, ptr %indirectarg53, align 8
  store %"char[]" { ptr @.file.85, i64 17 }, ptr %indirectarg54, align 8
  store %"char[]" { ptr @.func.36, i64 13 }, ptr %indirectarg55, align 8
  %35 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %35(ptr align 8 %indirectarg53, ptr align 8 %indirectarg54, ptr align 8 %indirectarg55, i32 63) #6, !dbg !1645
  unreachable, !dbg !1645

assert_ok:                                        ; preds = %checkok50
  %36 = load ptr, ptr %self51, align 8, !dbg !1648
  %ptradd56 = getelementptr inbounds i8, ptr %36, i64 16, !dbg !1648
  %37 = load i64, ptr %ptradd56, align 8, !dbg !1648
  %and = and i64 %37, 9223372036854775807, !dbg !1648
  store i64 %and, ptr %page_size, align 8, !dbg !1648
    #dbg_declare(ptr %data, !1649, !DIExpression(), !1650)
  %38 = load ptr, ptr %self, align 8, !dbg !1650
  %39 = load i64, ptr %size, align 8, !dbg !1650
  %40 = load i64, ptr %alignment, align 8, !dbg !1650
  %lt = icmp ult i64 0, %39, !dbg !1650
  br i1 %lt, label %assert_ok61, label %assert_fail57, !dbg !1650

assert_fail57:                                    ; preds = %assert_ok
  store %"char[]" { ptr @.panic_msg.13, i64 29 }, ptr %indirectarg58, align 8
  store %"char[]" { ptr @.file.85, i64 17 }, ptr %indirectarg59, align 8
  store %"char[]" { ptr @.func.36, i64 13 }, ptr %indirectarg60, align 8
  %41 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %41(ptr align 8 %indirectarg58, ptr align 8 %indirectarg59, ptr align 8 %indirectarg60, i32 203) #6, !dbg !1650
  unreachable, !dbg !1650

assert_ok61:                                      ; preds = %assert_ok
  %i2nb = icmp eq i64 %40, 0, !dbg !1651
  br i1 %i2nb, label %or.phi, label %or.rhs, !dbg !1651

or.rhs:                                           ; preds = %assert_ok61
  store i64 %40, ptr %x, align 8
  %42 = load i64, ptr %x, align 8, !dbg !1652
  %neq62 = icmp ne i64 0, %42, !dbg !1652
  br i1 %neq62, label %and.rhs, label %and.phi, !dbg !1652

and.rhs:                                          ; preds = %or.rhs
  %43 = load i64, ptr %x, align 8, !dbg !1652
  %44 = load i64, ptr %x, align 8, !dbg !1652
  %sub = sub i64 %44, 1, !dbg !1652
  %and63 = and i64 %43, %sub, !dbg !1652
  %eq = icmp eq i64 %and63, 0, !dbg !1652
  br label %and.phi, !dbg !1652

and.phi:                                          ; preds = %and.rhs, %or.rhs
  %val = phi i1 [ false, %or.rhs ], [ %eq, %and.rhs ], !dbg !1652
  br label %or.phi, !dbg !1652

or.phi:                                           ; preds = %and.phi, %assert_ok61
  %val64 = phi i1 [ true, %assert_ok61 ], [ %val, %and.phi ], !dbg !1652
  br i1 %val64, label %assert_ok69, label %assert_fail65, !dbg !1652

assert_fail65:                                    ; preds = %or.phi
  store %"char[]" { ptr @.panic_msg.11, i64 65 }, ptr %indirectarg66, align 8
  store %"char[]" { ptr @.file.85, i64 17 }, ptr %indirectarg67, align 8
  store %"char[]" { ptr @.func.36, i64 13 }, ptr %indirectarg68, align 8
  %45 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %45(ptr align 8 %indirectarg66, ptr align 8 %indirectarg67, ptr align 8 %indirectarg68, i32 203) #6, !dbg !1650
  unreachable, !dbg !1650

assert_ok69:                                      ; preds = %or.phi
  %le = icmp ule i64 %40, 268435456, !dbg !1650
  br i1 %le, label %assert_ok74, label %assert_fail70, !dbg !1650

assert_fail70:                                    ; preds = %assert_ok69
  store %"char[]" { ptr @.panic_msg.12, i64 80 }, ptr %indirectarg71, align 8
  store %"char[]" { ptr @.file.85, i64 17 }, ptr %indirectarg72, align 8
  store %"char[]" { ptr @.func.36, i64 13 }, ptr %indirectarg73, align 8
  %46 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %46(ptr align 8 %indirectarg71, ptr align 8 %indirectarg72, ptr align 8 %indirectarg73, i32 203) #6, !dbg !1650
  unreachable, !dbg !1650

assert_ok74:                                      ; preds = %assert_ok69
  %47 = call i64 @std.core.mem.allocator.TempAllocator.acquire(ptr %retparam, ptr %38, i64 %39, i32 0, i64 %40), !dbg !1650
  %not_err = icmp eq i64 %47, 0, !dbg !1650
  %48 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1650
  br i1 %48, label %after_check, label %assign_optional, !dbg !1650

assign_optional:                                  ; preds = %assert_ok74
  store i64 %47, ptr %error_var, align 8, !dbg !1650
  br label %guard_block, !dbg !1650

after_check:                                      ; preds = %assert_ok74
  br label %noerr_block, !dbg !1650

guard_block:                                      ; preds = %assign_optional
  %49 = load i64, ptr %error_var, align 8, !dbg !1650
  ret i64 %49, !dbg !1650

noerr_block:                                      ; preds = %after_check
  %50 = load ptr, ptr %retparam, align 8, !dbg !1650
  store ptr %50, ptr %data, align 8, !dbg !1650
  %51 = load i64, ptr %page_size, align 8, !dbg !1654
  %52 = load i64, ptr %size, align 8, !dbg !1654
  %gt = icmp ugt i64 %51, %52, !dbg !1654
  br i1 %gt, label %if.then, label %if.exit, !dbg !1654

if.then:                                          ; preds = %noerr_block
  %53 = load i64, ptr %size, align 8, !dbg !1654
  store i64 %53, ptr %page_size, align 8, !dbg !1654
  br label %if.exit, !dbg !1654

if.exit:                                          ; preds = %if.then, %noerr_block
  %54 = load ptr, ptr %data, align 8
  store ptr %54, ptr %dst, align 8
  %55 = load ptr, ptr %page, align 8, !dbg !1655
  %ptradd75 = getelementptr inbounds i8, ptr %55, i64 32, !dbg !1655
  store ptr %ptradd75, ptr %src, align 8
  %56 = load i64, ptr %page_size, align 8
  store i64 %56, ptr %len, align 8
  %57 = load ptr, ptr %dst, align 8, !dbg !1656
  %neq76 = icmp ne ptr %57, null, !dbg !1656
  br i1 %neq76, label %assert_ok81, label %assert_fail77, !dbg !1656

assert_fail77:                                    ; preds = %if.exit
  store %"char[]" { ptr @.panic_msg.18, i64 37 }, ptr %indirectarg78, align 8
  store %"char[]" { ptr @.file.15, i64 6 }, ptr %indirectarg79, align 8
  store %"char[]" { ptr @.func.36, i64 13 }, ptr %indirectarg80, align 8
  %58 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %58(ptr align 8 %indirectarg78, ptr align 8 %indirectarg79, ptr align 8 %indirectarg80, i32 357) #6, !dbg !1656
  unreachable, !dbg !1656

assert_ok81:                                      ; preds = %if.exit
  %59 = load ptr, ptr %src, align 8, !dbg !1659
  %neq82 = icmp ne ptr %59, null, !dbg !1659
  br i1 %neq82, label %or.phi85, label %or.rhs83, !dbg !1659

or.rhs83:                                         ; preds = %assert_ok81
  %60 = load i64, ptr %len, align 8, !dbg !1659
  %eq84 = icmp eq i64 0, %60, !dbg !1659
  br label %or.phi85, !dbg !1659

or.phi85:                                         ; preds = %or.rhs83, %assert_ok81
  %val86 = phi i1 [ true, %assert_ok81 ], [ %eq84, %or.rhs83 ], !dbg !1659
  br i1 %val86, label %assert_ok91, label %assert_fail87, !dbg !1659

assert_fail87:                                    ; preds = %or.phi85
  store %"char[]" { ptr @.panic_msg.19, i64 94 }, ptr %indirectarg88, align 8
  store %"char[]" { ptr @.file.85, i64 17 }, ptr %indirectarg89, align 8
  store %"char[]" { ptr @.func.36, i64 13 }, ptr %indirectarg90, align 8
  %61 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %61(ptr align 8 %indirectarg88, ptr align 8 %indirectarg89, ptr align 8 %indirectarg90, i32 205) #6, !dbg !1660
  unreachable, !dbg !1660

assert_ok91:                                      ; preds = %or.phi85
  %62 = load i64, ptr %len, align 8, !dbg !1661
  %eq92 = icmp eq i64 0, %62, !dbg !1661
  br i1 %eq92, label %or.phi95, label %or.rhs93, !dbg !1661

or.rhs93:                                         ; preds = %assert_ok91
  %63 = load ptr, ptr %dst, align 8, !dbg !1661
  %64 = load i64, ptr %len, align 8, !dbg !1661
  %ptradd_any = getelementptr i8, ptr %63, i64 %64, !dbg !1661
  %65 = load ptr, ptr %src, align 8, !dbg !1661
  %le94 = icmp ule ptr %ptradd_any, %65, !dbg !1661
  br label %or.phi95, !dbg !1661

or.phi95:                                         ; preds = %or.rhs93, %assert_ok91
  %val96 = phi i1 [ true, %assert_ok91 ], [ %le94, %or.rhs93 ], !dbg !1661
  br i1 %val96, label %or.phi100, label %or.rhs97, !dbg !1661

or.rhs97:                                         ; preds = %or.phi95
  %66 = load ptr, ptr %src, align 8, !dbg !1661
  %67 = load i64, ptr %len, align 8, !dbg !1661
  %ptradd_any98 = getelementptr i8, ptr %66, i64 %67, !dbg !1661
  %68 = load ptr, ptr %dst, align 8, !dbg !1661
  %le99 = icmp ule ptr %ptradd_any98, %68, !dbg !1661
  br label %or.phi100, !dbg !1661

or.phi100:                                        ; preds = %or.rhs97, %or.phi95
  %val101 = phi i1 [ true, %or.phi95 ], [ %le99, %or.rhs97 ], !dbg !1661
  br i1 %val101, label %assert_ok106, label %assert_fail102, !dbg !1661

assert_fail102:                                   ; preds = %or.phi100
  store %"char[]" { ptr @.panic_msg.20, i64 95 }, ptr %indirectarg103, align 8
  store %"char[]" { ptr @.file.85, i64 17 }, ptr %indirectarg104, align 8
  store %"char[]" { ptr @.func.36, i64 13 }, ptr %indirectarg105, align 8
  %69 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %69(ptr align 8 %indirectarg103, ptr align 8 %indirectarg104, ptr align 8 %indirectarg105, i32 205) #6, !dbg !1660
  unreachable, !dbg !1660

assert_ok106:                                     ; preds = %or.phi100
  %70 = load ptr, ptr %dst, align 8, !dbg !1662
  %71 = load ptr, ptr %src, align 8, !dbg !1662
  %72 = load i64, ptr %len, align 8, !dbg !1662
  call void @llvm.memcpy.p0.p0.i64(ptr align 16 %70, ptr align 16 %71, i64 %72, i1 false), !dbg !1662
  %73 = load ptr, ptr %self, align 8, !dbg !1663
  %74 = load ptr, ptr %real_pointer, align 8, !dbg !1663
  %75 = load ptr, ptr %page, align 8
  store ptr %75, ptr %self107, align 8
  %76 = load ptr, ptr %self107, align 8, !dbg !1664
  %neq108 = icmp ne ptr %76, null, !dbg !1664
  br i1 %neq108, label %assert_ok113, label %assert_fail109, !dbg !1664

assert_fail109:                                   ; preds = %assert_ok106
  store %"char[]" { ptr @.panic_msg.35, i64 32 }, ptr %indirectarg110, align 8
  store %"char[]" { ptr @.file.85, i64 17 }, ptr %indirectarg111, align 8
  store %"char[]" { ptr @.func.36, i64 13 }, ptr %indirectarg112, align 8
  %77 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %77(ptr align 8 %indirectarg110, ptr align 8 %indirectarg111, ptr align 8 %indirectarg112, i32 64) #6, !dbg !1664
  unreachable, !dbg !1664

assert_ok113:                                     ; preds = %assert_ok106
  %78 = load ptr, ptr %self107, align 8, !dbg !1667
  %ptradd114 = getelementptr inbounds i8, ptr %78, i64 16, !dbg !1667
  %79 = load i64, ptr %ptradd114, align 8, !dbg !1667
  %and115 = and i64 %79, -9223372036854775808, !dbg !1667
  %eq116 = icmp eq i64 %and115, -9223372036854775808, !dbg !1667
  %neq117 = icmp ne ptr %74, null, !dbg !1663
  br i1 %neq117, label %assert_ok122, label %assert_fail118, !dbg !1663

assert_fail118:                                   ; preds = %assert_ok113
  store %"char[]" { ptr @.panic_msg.28, i64 75 }, ptr %indirectarg119, align 8
  store %"char[]" { ptr @.file.85, i64 17 }, ptr %indirectarg120, align 8
  store %"char[]" { ptr @.func.36, i64 13 }, ptr %indirectarg121, align 8
  %80 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %80(ptr align 8 %indirectarg119, ptr align 8 %indirectarg120, ptr align 8 %indirectarg121, i32 206) #6, !dbg !1663
  unreachable, !dbg !1663

assert_ok122:                                     ; preds = %assert_ok113
  %ptradd123 = getelementptr inbounds i8, ptr %73, i64 8, !dbg !1663
  %81 = load i64, ptr %ptradd123, align 8, !dbg !1663
  %82 = inttoptr i64 %81 to ptr, !dbg !1663
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !1626
  %83 = icmp eq ptr %82, %type, !dbg !1626
  br i1 %83, label %cache_hit, label %cache_miss, !dbg !1626

cache_miss:                                       ; preds = %assert_ok122
  %ptradd124 = getelementptr inbounds i8, ptr %82, i64 16, !dbg !1626
  %84 = load ptr, ptr %ptradd124, align 8, !dbg !1626
  %85 = call ptr @.dyn_search(ptr %84, ptr @"$sel.release"), !dbg !1626
  store ptr %85, ptr %.inlinecache, align 8, !dbg !1626
  store ptr %82, ptr %.cachedtype, align 8, !dbg !1626
  br label %86, !dbg !1626

cache_hit:                                        ; preds = %assert_ok122
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !1626
  br label %86, !dbg !1626

86:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %85, %cache_miss ], !dbg !1626
  %87 = icmp eq ptr %fn_phi, null, !dbg !1626
  br i1 %87, label %missing_function, label %match, !dbg !1626

missing_function:                                 ; preds = %86
  store %"char[]" { ptr @.panic_msg.29, i64 44 }, ptr %indirectarg125, align 8
  store %"char[]" { ptr @.file.85, i64 17 }, ptr %indirectarg126, align 8
  store %"char[]" { ptr @.func.36, i64 13 }, ptr %indirectarg127, align 8
  %88 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %88(ptr align 8 %indirectarg125, ptr align 8 %indirectarg126, ptr align 8 %indirectarg127, i32 206) #6, !dbg !1663
  unreachable, !dbg !1663

match:                                            ; preds = %86
  %89 = load ptr, ptr %73, align 8, !dbg !1663
  %90 = zext i1 %eq116 to i8, !dbg !1663
  call void %fn_phi(ptr %89, ptr %74, i8 zeroext %90), !dbg !1663
  %91 = load ptr, ptr %data, align 8, !dbg !1668
  store ptr %91, ptr %0, align 8, !dbg !1668
  ret i64 0, !dbg !1668

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.85, i64 17 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.36, i64 13 }, ptr %indirectarg2, align 8
  %92 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %92(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 188) #6, !dbg !1628
  unreachable, !dbg !1628

panic4:                                           ; preds = %loop.cond
  store %"char[]" { ptr @.panic_msg.37, i64 56 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.file.85, i64 17 }, ptr %indirectarg6, align 8
  store %"char[]" { ptr @.func.36, i64 13 }, ptr %indirectarg7, align 8
  %93 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %93(ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, ptr align 8 %indirectarg7, i32 196) #6, !dbg !1638
  unreachable, !dbg !1638

panic9:                                           ; preds = %checkok8
  store i64 8, ptr %taddr, align 8
  %94 = insertvalue %any undef, ptr %taddr, 0
  %95 = insertvalue %any %94, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %13, ptr %taddr10, align 8
  %96 = insertvalue %any undef, ptr %taddr10, 0
  %97 = insertvalue %any %96, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.31, i64 94 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.file.85, i64 17 }, ptr %indirectarg12, align 8
  store %"char[]" { ptr @.func.36, i64 13 }, ptr %indirectarg13, align 8
  store %any %95, ptr %varargslots, align 16
  %ptradd14 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %97, ptr %ptradd14, align 16
  %98 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %98, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg15, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, ptr align 8 %indirectarg13, i32 196, ptr align 8 %indirectarg15) #6, !dbg !1638
  unreachable, !dbg !1638

panic18:                                          ; preds = %loop.body
  store %"char[]" { ptr @.panic_msg.37, i64 56 }, ptr %indirectarg19, align 8
  store %"char[]" { ptr @.file.85, i64 17 }, ptr %indirectarg20, align 8
  store %"char[]" { ptr @.func.36, i64 13 }, ptr %indirectarg21, align 8
  %99 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %99(ptr align 8 %indirectarg19, ptr align 8 %indirectarg20, ptr align 8 %indirectarg21, i32 198) #6, !dbg !1640
  unreachable, !dbg !1640

panic23:                                          ; preds = %checkok22
  store i64 8, ptr %taddr24, align 8
  %100 = insertvalue %any undef, ptr %taddr24, 0
  %101 = insertvalue %any %100, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %21, ptr %taddr25, align 8
  %102 = insertvalue %any undef, ptr %taddr25, 0
  %103 = insertvalue %any %102, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.31, i64 94 }, ptr %indirectarg26, align 8
  store %"char[]" { ptr @.file.85, i64 17 }, ptr %indirectarg27, align 8
  store %"char[]" { ptr @.func.36, i64 13 }, ptr %indirectarg28, align 8
  store %any %101, ptr %varargslots29, align 16
  %ptradd30 = getelementptr inbounds i8, ptr %varargslots29, i64 16
  store %any %103, ptr %ptradd30, align 16
  %104 = insertvalue %"any[]" undef, ptr %varargslots29, 0
  %"$$temp31" = insertvalue %"any[]" %104, i64 2, 1
  store %"any[]" %"$$temp31", ptr %indirectarg32, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg26, ptr align 8 %indirectarg27, ptr align 8 %indirectarg28, i32 198, ptr align 8 %indirectarg32) #6, !dbg !1640
  unreachable, !dbg !1640

panic35:                                          ; preds = %loop.exit
  store %"char[]" { ptr @.panic_msg.37, i64 56 }, ptr %indirectarg36, align 8
  store %"char[]" { ptr @.file.85, i64 17 }, ptr %indirectarg37, align 8
  store %"char[]" { ptr @.func.36, i64 13 }, ptr %indirectarg38, align 8
  %105 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %105(ptr align 8 %indirectarg36, ptr align 8 %indirectarg37, ptr align 8 %indirectarg38, i32 200) #6, !dbg !1642
  unreachable, !dbg !1642

panic40:                                          ; preds = %checkok39
  store i64 8, ptr %taddr41, align 8
  %106 = insertvalue %any undef, ptr %taddr41, 0
  %107 = insertvalue %any %106, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %29, ptr %taddr42, align 8
  %108 = insertvalue %any undef, ptr %taddr42, 0
  %109 = insertvalue %any %108, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.31, i64 94 }, ptr %indirectarg43, align 8
  store %"char[]" { ptr @.file.85, i64 17 }, ptr %indirectarg44, align 8
  store %"char[]" { ptr @.func.36, i64 13 }, ptr %indirectarg45, align 8
  store %any %107, ptr %varargslots46, align 16
  %ptradd47 = getelementptr inbounds i8, ptr %varargslots46, i64 16
  store %any %109, ptr %ptradd47, align 16
  %110 = insertvalue %"any[]" undef, ptr %varargslots46, 0
  %"$$temp48" = insertvalue %"any[]" %110, i64 2, 1
  store %"any[]" %"$$temp48", ptr %indirectarg49, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg43, ptr align 8 %indirectarg44, ptr align 8 %indirectarg45, i32 200, ptr align 8 %indirectarg49) #6, !dbg !1642
  unreachable, !dbg !1642
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.core.mem.allocator.TempAllocator.resize(ptr %0, ptr %1, ptr %2, i64 %3, i64 %4) #0 comdat !dbg !1669 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %pointer = alloca ptr, align 8
  %size = alloca i64, align 8
  %alignment = alloca i64, align 8
  %chunk = alloca ptr, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %page = alloca ptr, align 8
  %reterr = alloca i64, align 8
  %retparam = alloca ptr, align 8
  %is_realloc_of_last = alloca i8, align 1
  %diff = alloca i64, align 8
  %reterr15 = alloca i64, align 8
  %reterr23 = alloca i64, align 8
  %data = alloca ptr, align 8
  %error_var = alloca i64, align 8
  %indirectarg28 = alloca %"char[]", align 8
  %indirectarg29 = alloca %"char[]", align 8
  %indirectarg30 = alloca %"char[]", align 8
  %x = alloca i64, align 8
  %indirectarg36 = alloca %"char[]", align 8
  %indirectarg37 = alloca %"char[]", align 8
  %indirectarg38 = alloca %"char[]", align 8
  %indirectarg41 = alloca %"char[]", align 8
  %indirectarg42 = alloca %"char[]", align 8
  %indirectarg43 = alloca %"char[]", align 8
  %retparam45 = alloca ptr, align 8
  %len_to_copy = alloca i64, align 8
  %dst = alloca ptr, align 8
  %src = alloca ptr, align 8
  %len = alloca i64, align 8
  %indirectarg52 = alloca %"char[]", align 8
  %indirectarg53 = alloca %"char[]", align 8
  %indirectarg54 = alloca %"char[]", align 8
  %indirectarg62 = alloca %"char[]", align 8
  %indirectarg63 = alloca %"char[]", align 8
  %indirectarg64 = alloca %"char[]", align 8
  %indirectarg78 = alloca %"char[]", align 8
  %indirectarg79 = alloca %"char[]", align 8
  %indirectarg80 = alloca %"char[]", align 8
  %reterr88 = alloca i64, align 8
  %5 = icmp eq ptr %1, null, !dbg !1672
  %6 = call i1 @llvm.expect.i1(i1 %5, i1 false), !dbg !1672
  br i1 %6, label %panic, label %checkok, !dbg !1672

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !1673, !DIExpression(), !1674)
  store ptr %2, ptr %pointer, align 8
    #dbg_declare(ptr %pointer, !1675, !DIExpression(), !1674)
  store i64 %3, ptr %size, align 8
    #dbg_declare(ptr %size, !1676, !DIExpression(), !1674)
  store i64 %4, ptr %alignment, align 8
    #dbg_declare(ptr %alignment, !1677, !DIExpression(), !1674)
    #dbg_declare(ptr %chunk, !1678, !DIExpression(), !1684)
  %7 = load ptr, ptr %pointer, align 8, !dbg !1684
  %ptradd_any = getelementptr i8, ptr %7, i64 -8, !dbg !1684
  store ptr %ptradd_any, ptr %chunk, align 8, !dbg !1684
  %8 = load ptr, ptr %chunk, align 8, !dbg !1685
  %9 = load i64, ptr %8, align 8, !dbg !1685
  %eq = icmp eq i64 %9, -1, !dbg !1685
  br i1 %eq, label %if.then, label %if.exit, !dbg !1685

if.then:                                          ; preds = %checkok
  %10 = load ptr, ptr %self, align 8, !dbg !1686
  %ptradd = getelementptr inbounds i8, ptr %10, i64 16, !dbg !1686
  %11 = load ptr, ptr %ptradd, align 8, !dbg !1686
  %i2b = icmp ne ptr %11, null, !dbg !1686
  br i1 %i2b, label %assert_ok, label %assert_fail, !dbg !1686

assert_fail:                                      ; preds = %if.then
  store %"char[]" { ptr @.panic_msg.93, i64 27 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.file.85, i64 17 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg5, align 8
  %12 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %12(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, i32 215) #6, !dbg !1686
  unreachable, !dbg !1686

assert_ok:                                        ; preds = %if.then
    #dbg_declare(ptr %page, !1688, !DIExpression(), !1689)
  %13 = load ptr, ptr %pointer, align 8, !dbg !1689
  %ptradd_any6 = getelementptr i8, ptr %13, i64 -32, !dbg !1689
  store ptr %ptradd_any6, ptr %page, align 8, !dbg !1689
  %14 = load ptr, ptr %self, align 8
  %15 = load ptr, ptr %page, align 8
  %16 = load i64, ptr %size, align 8
  %17 = load i64, ptr %alignment, align 8
  %18 = call i64 @std.core.mem.allocator.TempAllocator._realloc_page(ptr %retparam, ptr %14, ptr %15, i64 %16, i64 %17) #7, !dbg !1690
  %not_err = icmp eq i64 %18, 0, !dbg !1690
  %19 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1690
  br i1 %19, label %after_check, label %assign_optional, !dbg !1690

assign_optional:                                  ; preds = %assert_ok
  store i64 %18, ptr %reterr, align 8, !dbg !1690
  br label %err_retblock, !dbg !1690

after_check:                                      ; preds = %assert_ok
  %20 = load ptr, ptr %retparam, align 8, !dbg !1690
  store ptr %20, ptr %0, align 8, !dbg !1690
  ret i64 0, !dbg !1690

err_retblock:                                     ; preds = %assign_optional
  %21 = load i64, ptr %reterr, align 8, !dbg !1690
  ret i64 %21, !dbg !1690

if.exit:                                          ; preds = %checkok
    #dbg_declare(ptr %is_realloc_of_last, !1691, !DIExpression(), !1692)
  %22 = load ptr, ptr %pointer, align 8, !dbg !1692
  %23 = load ptr, ptr %chunk, align 8, !dbg !1692
  %24 = load i64, ptr %23, align 8, !dbg !1692
  %ptradd_any7 = getelementptr i8, ptr %22, i64 %24, !dbg !1692
  %25 = load ptr, ptr %self, align 8, !dbg !1692
  %ptradd8 = getelementptr inbounds i8, ptr %25, i64 88, !dbg !1692
  %26 = load ptr, ptr %self, align 8, !dbg !1692
  %ptradd9 = getelementptr inbounds i8, ptr %26, i64 64, !dbg !1692
  %27 = load i64, ptr %ptradd9, align 8, !dbg !1692
  %ptradd10 = getelementptr inbounds i8, ptr %ptradd8, i64 %27, !dbg !1692
  %eq11 = icmp eq ptr %ptradd_any7, %ptradd10, !dbg !1692
  %28 = zext i1 %eq11 to i8, !dbg !1692
  store i8 %28, ptr %is_realloc_of_last, align 1, !dbg !1692
  %29 = load i8, ptr %is_realloc_of_last, align 1, !dbg !1693
  %30 = trunc i8 %29 to i1, !dbg !1693
  br i1 %30, label %if.then12, label %if.exit25, !dbg !1693

if.then12:                                        ; preds = %if.exit
    #dbg_declare(ptr %diff, !1694, !DIExpression(), !1697)
  %31 = load i64, ptr %size, align 8, !dbg !1697
  %32 = load ptr, ptr %chunk, align 8, !dbg !1697
  %33 = load i64, ptr %32, align 8, !dbg !1697
  %sub = sub i64 %31, %33, !dbg !1697
  store i64 %sub, ptr %diff, align 8, !dbg !1697
  %34 = load i64, ptr %diff, align 8, !dbg !1698
  %eq13 = icmp eq i64 %34, 0, !dbg !1698
  br i1 %eq13, label %if.then14, label %if.exit16, !dbg !1698

if.then14:                                        ; preds = %if.then12
  %35 = load ptr, ptr %pointer, align 8, !dbg !1698
  store ptr %35, ptr %0, align 8, !dbg !1698
  ret i64 0, !dbg !1698

if.exit16:                                        ; preds = %if.then12
  %36 = load ptr, ptr %self, align 8, !dbg !1699
  %ptradd17 = getelementptr inbounds i8, ptr %36, i64 72, !dbg !1699
  %37 = load i64, ptr %ptradd17, align 8, !dbg !1699
  %38 = load ptr, ptr %self, align 8, !dbg !1699
  %ptradd18 = getelementptr inbounds i8, ptr %38, i64 64, !dbg !1699
  %39 = load i64, ptr %ptradd18, align 8, !dbg !1699
  %sub19 = sub i64 %37, %39, !dbg !1699
  %40 = load i64, ptr %diff, align 8, !dbg !1699
  %lt = icmp slt i64 %40, %sub19, !dbg !1699
  %check = icmp slt i64 %sub19, 0, !dbg !1699
  %siui-lt = or i1 %check, %lt, !dbg !1699
  br i1 %siui-lt, label %if.then20, label %if.exit24, !dbg !1699

if.then20:                                        ; preds = %if.exit16
  %41 = load ptr, ptr %chunk, align 8, !dbg !1700
  %42 = load i64, ptr %41, align 8, !dbg !1700
  %43 = load i64, ptr %diff, align 8, !dbg !1700
  %add = add i64 %42, %43, !dbg !1700
  store i64 %add, ptr %41, align 8, !dbg !1700
  %44 = load ptr, ptr %self, align 8, !dbg !1702
  %ptradd21 = getelementptr inbounds i8, ptr %44, i64 64, !dbg !1702
  %45 = load i64, ptr %ptradd21, align 8, !dbg !1702
  %46 = load i64, ptr %diff, align 8, !dbg !1702
  %add22 = add i64 %45, %46, !dbg !1702
  store i64 %add22, ptr %ptradd21, align 8, !dbg !1702
  %47 = load ptr, ptr %pointer, align 8, !dbg !1703
  store ptr %47, ptr %0, align 8, !dbg !1703
  ret i64 0, !dbg !1703

if.exit24:                                        ; preds = %if.exit16
  br label %if.exit25, !dbg !1703

if.exit25:                                        ; preds = %if.exit24, %if.exit
    #dbg_declare(ptr %data, !1704, !DIExpression(), !1705)
  %48 = load ptr, ptr %self, align 8, !dbg !1705
  %49 = load i64, ptr %size, align 8, !dbg !1705
  %50 = load i64, ptr %alignment, align 8, !dbg !1705
  %lt26 = icmp ult i64 0, %49, !dbg !1705
  br i1 %lt26, label %assert_ok31, label %assert_fail27, !dbg !1705

assert_fail27:                                    ; preds = %if.exit25
  store %"char[]" { ptr @.panic_msg.13, i64 29 }, ptr %indirectarg28, align 8
  store %"char[]" { ptr @.file.85, i64 17 }, ptr %indirectarg29, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg30, align 8
  %51 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %51(ptr align 8 %indirectarg28, ptr align 8 %indirectarg29, ptr align 8 %indirectarg30, i32 242) #6, !dbg !1705
  unreachable, !dbg !1705

assert_ok31:                                      ; preds = %if.exit25
  %i2nb = icmp eq i64 %50, 0, !dbg !1706
  br i1 %i2nb, label %or.phi, label %or.rhs, !dbg !1706

or.rhs:                                           ; preds = %assert_ok31
  store i64 %50, ptr %x, align 8
  %52 = load i64, ptr %x, align 8, !dbg !1707
  %neq = icmp ne i64 0, %52, !dbg !1707
  br i1 %neq, label %and.rhs, label %and.phi, !dbg !1707

and.rhs:                                          ; preds = %or.rhs
  %53 = load i64, ptr %x, align 8, !dbg !1707
  %54 = load i64, ptr %x, align 8, !dbg !1707
  %sub32 = sub i64 %54, 1, !dbg !1707
  %and = and i64 %53, %sub32, !dbg !1707
  %eq33 = icmp eq i64 %and, 0, !dbg !1707
  br label %and.phi, !dbg !1707

and.phi:                                          ; preds = %and.rhs, %or.rhs
  %val = phi i1 [ false, %or.rhs ], [ %eq33, %and.rhs ], !dbg !1707
  br label %or.phi, !dbg !1707

or.phi:                                           ; preds = %and.phi, %assert_ok31
  %val34 = phi i1 [ true, %assert_ok31 ], [ %val, %and.phi ], !dbg !1707
  br i1 %val34, label %assert_ok39, label %assert_fail35, !dbg !1707

assert_fail35:                                    ; preds = %or.phi
  store %"char[]" { ptr @.panic_msg.11, i64 65 }, ptr %indirectarg36, align 8
  store %"char[]" { ptr @.file.85, i64 17 }, ptr %indirectarg37, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg38, align 8
  %55 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %55(ptr align 8 %indirectarg36, ptr align 8 %indirectarg37, ptr align 8 %indirectarg38, i32 242) #6, !dbg !1705
  unreachable, !dbg !1705

assert_ok39:                                      ; preds = %or.phi
  %le = icmp ule i64 %50, 268435456, !dbg !1705
  br i1 %le, label %assert_ok44, label %assert_fail40, !dbg !1705

assert_fail40:                                    ; preds = %assert_ok39
  store %"char[]" { ptr @.panic_msg.12, i64 80 }, ptr %indirectarg41, align 8
  store %"char[]" { ptr @.file.85, i64 17 }, ptr %indirectarg42, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg43, align 8
  %56 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %56(ptr align 8 %indirectarg41, ptr align 8 %indirectarg42, ptr align 8 %indirectarg43, i32 242) #6, !dbg !1705
  unreachable, !dbg !1705

assert_ok44:                                      ; preds = %assert_ok39
  %57 = call i64 @std.core.mem.allocator.TempAllocator.acquire(ptr %retparam45, ptr %48, i64 %49, i32 0, i64 %50), !dbg !1705
  %not_err46 = icmp eq i64 %57, 0, !dbg !1705
  %58 = call i1 @llvm.expect.i1(i1 %not_err46, i1 true), !dbg !1705
  br i1 %58, label %after_check48, label %assign_optional47, !dbg !1705

assign_optional47:                                ; preds = %assert_ok44
  store i64 %57, ptr %error_var, align 8, !dbg !1705
  br label %guard_block, !dbg !1705

after_check48:                                    ; preds = %assert_ok44
  br label %noerr_block, !dbg !1705

guard_block:                                      ; preds = %assign_optional47
  %59 = load i64, ptr %error_var, align 8, !dbg !1705
  ret i64 %59, !dbg !1705

noerr_block:                                      ; preds = %after_check48
  %60 = load ptr, ptr %retparam45, align 8, !dbg !1705
  store ptr %60, ptr %data, align 8, !dbg !1705
    #dbg_declare(ptr %len_to_copy, !1709, !DIExpression(), !1710)
  %61 = load ptr, ptr %chunk, align 8, !dbg !1710
  %62 = load i64, ptr %61, align 8, !dbg !1710
  %63 = load i64, ptr %size, align 8, !dbg !1710
  %gt = icmp ugt i64 %62, %63, !dbg !1710
  br i1 %gt, label %cond.lhs, label %cond.rhs, !dbg !1710

cond.lhs:                                         ; preds = %noerr_block
  %64 = load i64, ptr %size, align 8, !dbg !1710
  br label %cond.phi, !dbg !1710

cond.rhs:                                         ; preds = %noerr_block
  %65 = load ptr, ptr %chunk, align 8, !dbg !1710
  %66 = load i64, ptr %65, align 8, !dbg !1710
  br label %cond.phi, !dbg !1710

cond.phi:                                         ; preds = %cond.rhs, %cond.lhs
  %val49 = phi i64 [ %64, %cond.lhs ], [ %66, %cond.rhs ], !dbg !1710
  store i64 %val49, ptr %len_to_copy, align 8, !dbg !1710
  %67 = load ptr, ptr %data, align 8
  store ptr %67, ptr %dst, align 8
  %68 = load ptr, ptr %pointer, align 8
  store ptr %68, ptr %src, align 8
  %69 = load i64, ptr %len_to_copy, align 8
  store i64 %69, ptr %len, align 8
  %70 = load ptr, ptr %dst, align 8, !dbg !1711
  %neq50 = icmp ne ptr %70, null, !dbg !1711
  br i1 %neq50, label %assert_ok55, label %assert_fail51, !dbg !1711

assert_fail51:                                    ; preds = %cond.phi
  store %"char[]" { ptr @.panic_msg.18, i64 37 }, ptr %indirectarg52, align 8
  store %"char[]" { ptr @.file.15, i64 6 }, ptr %indirectarg53, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg54, align 8
  %71 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %71(ptr align 8 %indirectarg52, ptr align 8 %indirectarg53, ptr align 8 %indirectarg54, i32 357) #6, !dbg !1711
  unreachable, !dbg !1711

assert_ok55:                                      ; preds = %cond.phi
  %72 = load ptr, ptr %src, align 8, !dbg !1715
  %neq56 = icmp ne ptr %72, null, !dbg !1715
  br i1 %neq56, label %or.phi59, label %or.rhs57, !dbg !1715

or.rhs57:                                         ; preds = %assert_ok55
  %73 = load i64, ptr %len, align 8, !dbg !1715
  %eq58 = icmp eq i64 0, %73, !dbg !1715
  br label %or.phi59, !dbg !1715

or.phi59:                                         ; preds = %or.rhs57, %assert_ok55
  %val60 = phi i1 [ true, %assert_ok55 ], [ %eq58, %or.rhs57 ], !dbg !1715
  br i1 %val60, label %assert_ok65, label %assert_fail61, !dbg !1715

assert_fail61:                                    ; preds = %or.phi59
  store %"char[]" { ptr @.panic_msg.19, i64 94 }, ptr %indirectarg62, align 8
  store %"char[]" { ptr @.file.85, i64 17 }, ptr %indirectarg63, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg64, align 8
  %74 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %74(ptr align 8 %indirectarg62, ptr align 8 %indirectarg63, ptr align 8 %indirectarg64, i32 244) #6, !dbg !1716
  unreachable, !dbg !1716

assert_ok65:                                      ; preds = %or.phi59
  %75 = load i64, ptr %len, align 8, !dbg !1717
  %eq66 = icmp eq i64 0, %75, !dbg !1717
  br i1 %eq66, label %or.phi70, label %or.rhs67, !dbg !1717

or.rhs67:                                         ; preds = %assert_ok65
  %76 = load ptr, ptr %dst, align 8, !dbg !1717
  %77 = load i64, ptr %len, align 8, !dbg !1717
  %ptradd_any68 = getelementptr i8, ptr %76, i64 %77, !dbg !1717
  %78 = load ptr, ptr %src, align 8, !dbg !1717
  %le69 = icmp ule ptr %ptradd_any68, %78, !dbg !1717
  br label %or.phi70, !dbg !1717

or.phi70:                                         ; preds = %or.rhs67, %assert_ok65
  %val71 = phi i1 [ true, %assert_ok65 ], [ %le69, %or.rhs67 ], !dbg !1717
  br i1 %val71, label %or.phi75, label %or.rhs72, !dbg !1717

or.rhs72:                                         ; preds = %or.phi70
  %79 = load ptr, ptr %src, align 8, !dbg !1717
  %80 = load i64, ptr %len, align 8, !dbg !1717
  %ptradd_any73 = getelementptr i8, ptr %79, i64 %80, !dbg !1717
  %81 = load ptr, ptr %dst, align 8, !dbg !1717
  %le74 = icmp ule ptr %ptradd_any73, %81, !dbg !1717
  br label %or.phi75, !dbg !1717

or.phi75:                                         ; preds = %or.rhs72, %or.phi70
  %val76 = phi i1 [ true, %or.phi70 ], [ %le74, %or.rhs72 ], !dbg !1717
  br i1 %val76, label %assert_ok81, label %assert_fail77, !dbg !1717

assert_fail77:                                    ; preds = %or.phi75
  store %"char[]" { ptr @.panic_msg.20, i64 95 }, ptr %indirectarg78, align 8
  store %"char[]" { ptr @.file.85, i64 17 }, ptr %indirectarg79, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg80, align 8
  %82 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %82(ptr align 8 %indirectarg78, ptr align 8 %indirectarg79, ptr align 8 %indirectarg80, i32 244) #6, !dbg !1716
  unreachable, !dbg !1716

assert_ok81:                                      ; preds = %or.phi75
  %83 = load ptr, ptr %dst, align 8, !dbg !1718
  %84 = load ptr, ptr %src, align 8, !dbg !1718
  %85 = load i64, ptr %len, align 8, !dbg !1718
  call void @llvm.memcpy.p0.p0.i64(ptr align 16 %83, ptr align 16 %84, i64 %85, i1 false), !dbg !1718
  %86 = load i8, ptr %is_realloc_of_last, align 1, !dbg !1719
  %87 = trunc i8 %86 to i1, !dbg !1719
  br i1 %87, label %if.then82, label %if.exit87, !dbg !1719

if.then82:                                        ; preds = %assert_ok81
  %88 = load ptr, ptr %chunk, align 8, !dbg !1720
  %ptrxi = ptrtoint ptr %88 to i64, !dbg !1720
  %89 = load ptr, ptr %self, align 8, !dbg !1720
  %ptradd83 = getelementptr inbounds i8, ptr %89, i64 88, !dbg !1720
  %ptrxi84 = ptrtoint ptr %ptradd83 to i64, !dbg !1720
  %sub85 = sub i64 %ptrxi, %ptrxi84, !dbg !1720
  %90 = load ptr, ptr %self, align 8, !dbg !1720
  %ptradd86 = getelementptr inbounds i8, ptr %90, i64 64, !dbg !1720
  store i64 %sub85, ptr %ptradd86, align 8, !dbg !1720
  br label %if.exit87, !dbg !1722

if.exit87:                                        ; preds = %if.then82, %assert_ok81
  %91 = load ptr, ptr %data, align 8, !dbg !1723
  store ptr %91, ptr %0, align 8, !dbg !1723
  ret i64 0, !dbg !1723

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.85, i64 17 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg2, align 8
  %92 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %92(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 210) #6, !dbg !1674
  unreachable, !dbg !1674
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.core.mem.allocator.TempAllocator.acquire(ptr %0, ptr %1, i64 %2, i32 %3, i64 %4) #0 comdat !dbg !1724 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %size = alloca i64, align 8
  %init_type = alloca i32, align 4
  %alignment = alloca i64, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %x = alloca i64, align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg13 = alloca %"char[]", align 8
  %indirectarg14 = alloca %"char[]", align 8
  %indirectarg15 = alloca %"char[]", align 8
  %start_mem = alloca ptr, align 8
  %starting_ptr = alloca ptr, align 8
  %aligned_header_start = alloca ptr, align 8
  %ptr = alloca ptr, align 8
  %alignment18 = alloca i64, align 8
  %x19 = alloca i64, align 8
  %indirectarg28 = alloca %"char[]", align 8
  %indirectarg29 = alloca %"char[]", align 8
  %indirectarg30 = alloca %"char[]", align 8
  %mem = alloca ptr, align 8
  %ptr33 = alloca ptr, align 8
  %alignment34 = alloca i64, align 8
  %x36 = alloca i64, align 8
  %indirectarg45 = alloca %"char[]", align 8
  %indirectarg46 = alloca %"char[]", align 8
  %indirectarg47 = alloca %"char[]", align 8
  %new_usage = alloca i64, align 8
  %addr = alloca ptr, align 8
  %size55 = alloca i64, align 8
  %chunk_start = alloca ptr, align 8
  %dst = alloca ptr, align 8
  %len = alloca i64, align 8
  %reterr = alloca i64, align 8
  %page = alloca ptr, align 8
  %total_alloc_size = alloca i64, align 8
  %x65 = alloca i64, align 8
  %indirectarg74 = alloca %"char[]", align 8
  %indirectarg75 = alloca %"char[]", align 8
  %indirectarg76 = alloca %"char[]", align 8
  %error_var = alloca i64, align 8
  %allocator = alloca %any, align 8
  %size80 = alloca i64, align 8
  %alignment81 = alloca i64, align 8
  %blockret = alloca ptr, align 8
  %x87 = alloca i64, align 8
  %indirectarg98 = alloca %"char[]", align 8
  %indirectarg99 = alloca %"char[]", align 8
  %indirectarg100 = alloca %"char[]", align 8
  %indirectarg104 = alloca %"char[]", align 8
  %indirectarg105 = alloca %"char[]", align 8
  %indirectarg106 = alloca %"char[]", align 8
  %indirectarg110 = alloca %"char[]", align 8
  %indirectarg111 = alloca %"char[]", align 8
  %indirectarg112 = alloca %"char[]", align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %indirectarg116 = alloca %"char[]", align 8
  %indirectarg117 = alloca %"char[]", align 8
  %indirectarg118 = alloca %"char[]", align 8
  %retparam = alloca ptr, align 8
  %error_var119 = alloca i64, align 8
  %allocator120 = alloca %any, align 8
  %size121 = alloca i64, align 8
  %alignment122 = alloca i64, align 8
  %blockret123 = alloca ptr, align 8
  %x129 = alloca i64, align 8
  %indirectarg140 = alloca %"char[]", align 8
  %indirectarg141 = alloca %"char[]", align 8
  %indirectarg142 = alloca %"char[]", align 8
  %indirectarg146 = alloca %"char[]", align 8
  %indirectarg147 = alloca %"char[]", align 8
  %indirectarg148 = alloca %"char[]", align 8
  %indirectarg152 = alloca %"char[]", align 8
  %indirectarg153 = alloca %"char[]", align 8
  %indirectarg154 = alloca %"char[]", align 8
  %.inlinecache157 = alloca ptr, align 8
  %.cachedtype158 = alloca ptr, align 8
  %indirectarg166 = alloca %"char[]", align 8
  %indirectarg167 = alloca %"char[]", align 8
  %indirectarg168 = alloca %"char[]", align 8
  %retparam170 = alloca ptr, align 8
  %start = alloca ptr, align 8
  %x178 = alloca i64, align 8
  %indirectarg187 = alloca %"char[]", align 8
  %indirectarg188 = alloca %"char[]", align 8
  %indirectarg189 = alloca %"char[]", align 8
  %padded_header_size = alloca i64, align 8
  %x196 = alloca i64, align 8
  %indirectarg205 = alloca %"char[]", align 8
  %indirectarg206 = alloca %"char[]", align 8
  %indirectarg207 = alloca %"char[]", align 8
  %total_alloc_size209 = alloca i64, align 8
  %alloc = alloca ptr, align 8
  %error_var211 = alloca i64, align 8
  %x213 = alloca i64, align 8
  %indirectarg224 = alloca %"char[]", align 8
  %indirectarg225 = alloca %"char[]", align 8
  %indirectarg226 = alloca %"char[]", align 8
  %indirectarg230 = alloca %"char[]", align 8
  %indirectarg231 = alloca %"char[]", align 8
  %indirectarg232 = alloca %"char[]", align 8
  %.inlinecache235 = alloca ptr, align 8
  %.cachedtype236 = alloca ptr, align 8
  %indirectarg244 = alloca %"char[]", align 8
  %indirectarg245 = alloca %"char[]", align 8
  %indirectarg246 = alloca %"char[]", align 8
  %retparam248 = alloca ptr, align 8
  %x256 = alloca i64, align 8
  %indirectarg265 = alloca %"char[]", align 8
  %indirectarg266 = alloca %"char[]", align 8
  %indirectarg267 = alloca %"char[]", align 8
  %indirectarg270 = alloca %"char[]", align 8
  %indirectarg271 = alloca %"char[]", align 8
  %indirectarg272 = alloca %"char[]", align 8
  %x275 = alloca i64, align 8
  %indirectarg284 = alloca %"char[]", align 8
  %indirectarg285 = alloca %"char[]", align 8
  %indirectarg286 = alloca %"char[]", align 8
  %indirectarg289 = alloca %"char[]", align 8
  %indirectarg290 = alloca %"char[]", align 8
  %indirectarg291 = alloca %"char[]", align 8
  %reterr299 = alloca i64, align 8
  store ptr null, ptr %.cachedtype236, align 8, !dbg !1727
  store ptr null, ptr %.cachedtype158, align 8, !dbg !1727
  store ptr null, ptr %.cachedtype, align 8, !dbg !1727
  %5 = icmp eq ptr %1, null, !dbg !1727
  %6 = call i1 @llvm.expect.i1(i1 %5, i1 false), !dbg !1727
  br i1 %6, label %panic, label %checkok, !dbg !1727

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !1728, !DIExpression(), !1729)
  store i64 %2, ptr %size, align 8
    #dbg_declare(ptr %size, !1730, !DIExpression(), !1729)
  store i32 %3, ptr %init_type, align 4
    #dbg_declare(ptr %init_type, !1731, !DIExpression(), !1729)
  store i64 %4, ptr %alignment, align 8
    #dbg_declare(ptr %alignment, !1732, !DIExpression(), !1729)
  %7 = load i64, ptr %size, align 8, !dbg !1733
  %lt = icmp ult i64 0, %7, !dbg !1733
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !1733

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.13, i64 29 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.file.85, i64 17 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg5, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, i32 256) #6, !dbg !1733
  unreachable, !dbg !1733

assert_ok:                                        ; preds = %checkok
  %9 = load i64, ptr %alignment, align 8, !dbg !1735
  %i2nb = icmp eq i64 %9, 0, !dbg !1735
  br i1 %i2nb, label %or.phi, label %or.rhs, !dbg !1735

or.rhs:                                           ; preds = %assert_ok
  %10 = load i64, ptr %alignment, align 8
  store i64 %10, ptr %x, align 8
  %11 = load i64, ptr %x, align 8, !dbg !1736
  %neq = icmp ne i64 0, %11, !dbg !1736
  br i1 %neq, label %and.rhs, label %and.phi, !dbg !1736

and.rhs:                                          ; preds = %or.rhs
  %12 = load i64, ptr %x, align 8, !dbg !1736
  %13 = load i64, ptr %x, align 8, !dbg !1736
  %sub = sub i64 %13, 1, !dbg !1736
  %and = and i64 %12, %sub, !dbg !1736
  %eq = icmp eq i64 %and, 0, !dbg !1736
  br label %and.phi, !dbg !1736

and.phi:                                          ; preds = %and.rhs, %or.rhs
  %val = phi i1 [ false, %or.rhs ], [ %eq, %and.rhs ], !dbg !1736
  br label %or.phi, !dbg !1736

or.phi:                                           ; preds = %and.phi, %assert_ok
  %val6 = phi i1 [ true, %assert_ok ], [ %val, %and.phi ], !dbg !1736
  br i1 %val6, label %assert_ok11, label %assert_fail7, !dbg !1736

assert_fail7:                                     ; preds = %or.phi
  store %"char[]" { ptr @.panic_msg.11, i64 65 }, ptr %indirectarg8, align 8
  store %"char[]" { ptr @.file.85, i64 17 }, ptr %indirectarg9, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg10, align 8
  %14 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %14(ptr align 8 %indirectarg8, ptr align 8 %indirectarg9, ptr align 8 %indirectarg10, i32 257) #6, !dbg !1735
  unreachable, !dbg !1735

assert_ok11:                                      ; preds = %or.phi
  %15 = load i64, ptr %alignment, align 8, !dbg !1738
  %le = icmp ule i64 %15, 268435456, !dbg !1738
  br i1 %le, label %assert_ok16, label %assert_fail12, !dbg !1738

assert_fail12:                                    ; preds = %assert_ok11
  store %"char[]" { ptr @.panic_msg.12, i64 80 }, ptr %indirectarg13, align 8
  store %"char[]" { ptr @.file.85, i64 17 }, ptr %indirectarg14, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg15, align 8
  %16 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %16(ptr align 8 %indirectarg13, ptr align 8 %indirectarg14, ptr align 8 %indirectarg15, i32 258) #6, !dbg !1738
  unreachable, !dbg !1738

assert_ok16:                                      ; preds = %assert_ok11
  %17 = load i64, ptr %alignment, align 8, !dbg !1739
  %18 = call i64 @std.core.mem.allocator.alignment_for_allocation(i64 %17) #7, !dbg !1739
  store i64 %18, ptr %alignment, align 8, !dbg !1739
    #dbg_declare(ptr %start_mem, !1740, !DIExpression(), !1741)
  %19 = load ptr, ptr %self, align 8, !dbg !1741
  %ptradd = getelementptr inbounds i8, ptr %19, i64 88, !dbg !1741
  store ptr %ptradd, ptr %start_mem, align 8, !dbg !1741
    #dbg_declare(ptr %starting_ptr, !1742, !DIExpression(), !1743)
  %20 = load ptr, ptr %start_mem, align 8, !dbg !1743
  %21 = load ptr, ptr %self, align 8, !dbg !1743
  %ptradd17 = getelementptr inbounds i8, ptr %21, i64 64, !dbg !1743
  %22 = load i64, ptr %ptradd17, align 8, !dbg !1743
  %ptradd_any = getelementptr i8, ptr %20, i64 %22, !dbg !1743
  store ptr %ptradd_any, ptr %starting_ptr, align 8, !dbg !1743
    #dbg_declare(ptr %aligned_header_start, !1744, !DIExpression(), !1745)
  %23 = load ptr, ptr %starting_ptr, align 8
  store ptr %23, ptr %ptr, align 8
  store i64 8, ptr %alignment18, align 8
  %24 = load ptr, ptr %ptr, align 8, !dbg !1746
  %ptrxi = ptrtoint ptr %24 to i64, !dbg !1746
  %25 = load i64, ptr %alignment18, align 8, !dbg !1746
  store i64 %25, ptr %x19, align 8
  %26 = load i64, ptr %x19, align 8, !dbg !1748
  %neq20 = icmp ne i64 0, %26, !dbg !1748
  br i1 %neq20, label %and.rhs21, label %and.phi25, !dbg !1748

and.rhs21:                                        ; preds = %assert_ok16
  %27 = load i64, ptr %x19, align 8, !dbg !1748
  %28 = load i64, ptr %x19, align 8, !dbg !1748
  %sub22 = sub i64 %28, 1, !dbg !1748
  %and23 = and i64 %27, %sub22, !dbg !1748
  %eq24 = icmp eq i64 %and23, 0, !dbg !1748
  br label %and.phi25, !dbg !1748

and.phi25:                                        ; preds = %and.rhs21, %assert_ok16
  %val26 = phi i1 [ false, %assert_ok16 ], [ %eq24, %and.rhs21 ], !dbg !1748
  br i1 %val26, label %assert_ok31, label %assert_fail27, !dbg !1748

assert_fail27:                                    ; preds = %and.phi25
  store %"char[]" { ptr @.panic_msg.14, i64 51 }, ptr %indirectarg28, align 8
  store %"char[]" { ptr @.file.15, i64 6 }, ptr %indirectarg29, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg30, align 8
  %29 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %29(ptr align 8 %indirectarg28, ptr align 8 %indirectarg29, ptr align 8 %indirectarg30, i32 313) #6, !dbg !1746
  unreachable, !dbg !1746

assert_ok31:                                      ; preds = %and.phi25
  %30 = call i64 @std.core.mem.aligned_offset(i64 %ptrxi, i64 %25), !dbg !1746
  %intptr = inttoptr i64 %30 to ptr, !dbg !1746
  store ptr %intptr, ptr %aligned_header_start, align 8, !dbg !1746
    #dbg_declare(ptr %mem, !1750, !DIExpression(), !1751)
  %31 = load ptr, ptr %aligned_header_start, align 8, !dbg !1751
  %ptradd_any32 = getelementptr i8, ptr %31, i64 8, !dbg !1751
  store ptr %ptradd_any32, ptr %mem, align 8, !dbg !1751
  %32 = load i64, ptr %alignment, align 8, !dbg !1752
  %gt = icmp ugt i64 %32, 8, !dbg !1752
  br i1 %gt, label %if.then, label %if.exit, !dbg !1752

if.then:                                          ; preds = %assert_ok31
  %33 = load ptr, ptr %mem, align 8
  store ptr %33, ptr %ptr33, align 8
  %34 = load i64, ptr %alignment, align 8
  store i64 %34, ptr %alignment34, align 8
  %35 = load ptr, ptr %ptr33, align 8, !dbg !1753
  %ptrxi35 = ptrtoint ptr %35 to i64, !dbg !1753
  %36 = load i64, ptr %alignment34, align 8, !dbg !1753
  store i64 %36, ptr %x36, align 8
  %37 = load i64, ptr %x36, align 8, !dbg !1757
  %neq37 = icmp ne i64 0, %37, !dbg !1757
  br i1 %neq37, label %and.rhs38, label %and.phi42, !dbg !1757

and.rhs38:                                        ; preds = %if.then
  %38 = load i64, ptr %x36, align 8, !dbg !1757
  %39 = load i64, ptr %x36, align 8, !dbg !1757
  %sub39 = sub i64 %39, 1, !dbg !1757
  %and40 = and i64 %38, %sub39, !dbg !1757
  %eq41 = icmp eq i64 %and40, 0, !dbg !1757
  br label %and.phi42, !dbg !1757

and.phi42:                                        ; preds = %and.rhs38, %if.then
  %val43 = phi i1 [ false, %if.then ], [ %eq41, %and.rhs38 ], !dbg !1757
  br i1 %val43, label %assert_ok48, label %assert_fail44, !dbg !1757

assert_fail44:                                    ; preds = %and.phi42
  store %"char[]" { ptr @.panic_msg.14, i64 51 }, ptr %indirectarg45, align 8
  store %"char[]" { ptr @.file.15, i64 6 }, ptr %indirectarg46, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg47, align 8
  %40 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %40(ptr align 8 %indirectarg45, ptr align 8 %indirectarg46, ptr align 8 %indirectarg47, i32 313) #6, !dbg !1753
  unreachable, !dbg !1753

assert_ok48:                                      ; preds = %and.phi42
  %41 = call i64 @std.core.mem.aligned_offset(i64 %ptrxi35, i64 %36), !dbg !1753
  %intptr49 = inttoptr i64 %41 to ptr, !dbg !1753
  store ptr %intptr49, ptr %mem, align 8, !dbg !1753
  br label %if.exit, !dbg !1753

if.exit:                                          ; preds = %assert_ok48, %assert_ok31
    #dbg_declare(ptr %new_usage, !1759, !DIExpression(), !1760)
  %42 = load ptr, ptr %mem, align 8, !dbg !1760
  %43 = load ptr, ptr %start_mem, align 8, !dbg !1760
  %44 = ptrtoint ptr %43 to i64, !dbg !1760
  %45 = ptrtoint ptr %42 to i64, !dbg !1760
  %46 = sub i64 %45, %44, !dbg !1760
  %47 = sdiv exact i64 %46, 1, !dbg !1760
  %48 = load i64, ptr %size, align 8, !dbg !1760
  %add = add i64 %47, %48, !dbg !1760
  store i64 %add, ptr %new_usage, align 8, !dbg !1760
  %49 = load i64, ptr %new_usage, align 8, !dbg !1761
  %50 = load ptr, ptr %self, align 8, !dbg !1761
  %ptradd50 = getelementptr inbounds i8, ptr %50, i64 72, !dbg !1761
  %51 = load i64, ptr %ptradd50, align 8, !dbg !1761
  %le51 = icmp ule i64 %49, %51, !dbg !1761
  br i1 %le51, label %if.then52, label %if.exit61, !dbg !1761

if.then52:                                        ; preds = %if.exit
  %52 = load ptr, ptr %starting_ptr, align 8
  store ptr %52, ptr %addr, align 8
  %53 = load i64, ptr %new_usage, align 8, !dbg !1762
  %54 = load ptr, ptr %self, align 8, !dbg !1762
  %ptradd53 = getelementptr inbounds i8, ptr %54, i64 64, !dbg !1762
  %55 = load i64, ptr %ptradd53, align 8, !dbg !1762
  %sub54 = sub i64 %53, %55, !dbg !1762
  store i64 %sub54, ptr %size55, align 8
    #dbg_declare(ptr %chunk_start, !1764, !DIExpression(), !1765)
  %56 = load ptr, ptr %mem, align 8, !dbg !1765
  %ptradd_any56 = getelementptr i8, ptr %56, i64 -8, !dbg !1765
  store ptr %ptradd_any56, ptr %chunk_start, align 8, !dbg !1765
  %57 = load ptr, ptr %chunk_start, align 8, !dbg !1766
  %58 = load i64, ptr %size, align 8, !dbg !1766
  store i64 %58, ptr %57, align 8, !dbg !1766
  %59 = load ptr, ptr %self, align 8, !dbg !1767
  %ptradd57 = getelementptr inbounds i8, ptr %59, i64 64, !dbg !1767
  %60 = load i64, ptr %new_usage, align 8, !dbg !1767
  store i64 %60, ptr %ptradd57, align 8, !dbg !1767
  %61 = load i32, ptr %init_type, align 4, !dbg !1768
  %eq58 = icmp eq i32 %61, 1, !dbg !1768
  br i1 %eq58, label %if.then59, label %if.exit60, !dbg !1768

if.then59:                                        ; preds = %if.then52
  %62 = load ptr, ptr %mem, align 8
  store ptr %62, ptr %dst, align 8
  %63 = load i64, ptr %size, align 8
  store i64 %63, ptr %len, align 8
  %64 = load ptr, ptr %dst, align 8, !dbg !1769
  %65 = load i64, ptr %len, align 8, !dbg !1769
  call void @llvm.memset.p0.i64(ptr align 16 %64, i8 0, i64 %65, i1 false), !dbg !1769
  br label %if.exit60, !dbg !1769

if.exit60:                                        ; preds = %if.then59, %if.then52
  %66 = load ptr, ptr %mem, align 8, !dbg !1771
  store ptr %66, ptr %0, align 8, !dbg !1771
  ret i64 0, !dbg !1771

if.exit61:                                        ; preds = %if.exit
    #dbg_declare(ptr %page, !1772, !DIExpression(), !1773)
  store ptr null, ptr %page, align 8, !dbg !1773
  %67 = load i64, ptr %alignment, align 8, !dbg !1774
  %lt62 = icmp ult i64 16, %67, !dbg !1774
  br i1 %lt62, label %if.then63, label %if.else195, !dbg !1774

if.then63:                                        ; preds = %if.exit61
    #dbg_declare(ptr %total_alloc_size, !1775, !DIExpression(), !1777)
  %68 = load i64, ptr %size, align 8, !dbg !1777
  %add64 = add i64 32, %68, !dbg !1777
  %69 = load i64, ptr %alignment, align 8, !dbg !1777
  store i64 %69, ptr %x65, align 8
  %70 = load i64, ptr %x65, align 8, !dbg !1778
  %neq66 = icmp ne i64 0, %70, !dbg !1778
  br i1 %neq66, label %and.rhs67, label %and.phi71, !dbg !1778

and.rhs67:                                        ; preds = %if.then63
  %71 = load i64, ptr %x65, align 8, !dbg !1778
  %72 = load i64, ptr %x65, align 8, !dbg !1778
  %sub68 = sub i64 %72, 1, !dbg !1778
  %and69 = and i64 %71, %sub68, !dbg !1778
  %eq70 = icmp eq i64 %and69, 0, !dbg !1778
  br label %and.phi71, !dbg !1778

and.phi71:                                        ; preds = %and.rhs67, %if.then63
  %val72 = phi i1 [ false, %if.then63 ], [ %eq70, %and.rhs67 ], !dbg !1778
  br i1 %val72, label %assert_ok77, label %assert_fail73, !dbg !1778

assert_fail73:                                    ; preds = %and.phi71
  store %"char[]" { ptr @.panic_msg.14, i64 51 }, ptr %indirectarg74, align 8
  store %"char[]" { ptr @.file.85, i64 17 }, ptr %indirectarg75, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg76, align 8
  %73 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %73(ptr align 8 %indirectarg74, ptr align 8 %indirectarg75, ptr align 8 %indirectarg76, i32 291) #6, !dbg !1777
  unreachable, !dbg !1777

assert_ok77:                                      ; preds = %and.phi71
  %74 = call i64 @std.core.mem.aligned_offset(i64 %add64, i64 %69), !dbg !1777
  store i64 %74, ptr %total_alloc_size, align 8, !dbg !1777
  %75 = load i32, ptr %init_type, align 4, !dbg !1780
  %eq78 = icmp eq i32 %75, 1, !dbg !1780
  br i1 %eq78, label %if.then79, label %if.else, !dbg !1780

if.then79:                                        ; preds = %assert_ok77
  %76 = load ptr, ptr %self, align 8, !dbg !1781
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator, ptr align 8 %76, i32 16, i1 false)
  %77 = load i64, ptr %total_alloc_size, align 8
  store i64 %77, ptr %size80, align 8
  %78 = load i64, ptr %alignment, align 8
  store i64 %78, ptr %alignment81, align 8
  %79 = load i64, ptr %size80, align 8, !dbg !1783
  %i2nb82 = icmp eq i64 %79, 0, !dbg !1783
  br i1 %i2nb82, label %if.then83, label %if.exit84, !dbg !1783

if.then83:                                        ; preds = %if.then79
  store ptr null, ptr %blockret, align 8, !dbg !1783
  br label %expr_block.exit, !dbg !1783

if.exit84:                                        ; preds = %if.then79
  %80 = load i64, ptr %size80, align 8, !dbg !1785
  %81 = load i64, ptr %alignment81, align 8, !dbg !1785
  %i2nb85 = icmp eq i64 %81, 0, !dbg !1786
  br i1 %i2nb85, label %or.phi95, label %or.rhs86, !dbg !1786

or.rhs86:                                         ; preds = %if.exit84
  store i64 %81, ptr %x87, align 8
  %82 = load i64, ptr %x87, align 8, !dbg !1787
  %neq88 = icmp ne i64 0, %82, !dbg !1787
  br i1 %neq88, label %and.rhs89, label %and.phi93, !dbg !1787

and.rhs89:                                        ; preds = %or.rhs86
  %83 = load i64, ptr %x87, align 8, !dbg !1787
  %84 = load i64, ptr %x87, align 8, !dbg !1787
  %sub90 = sub i64 %84, 1, !dbg !1787
  %and91 = and i64 %83, %sub90, !dbg !1787
  %eq92 = icmp eq i64 %and91, 0, !dbg !1787
  br label %and.phi93, !dbg !1787

and.phi93:                                        ; preds = %and.rhs89, %or.rhs86
  %val94 = phi i1 [ false, %or.rhs86 ], [ %eq92, %and.rhs89 ], !dbg !1787
  br label %or.phi95, !dbg !1787

or.phi95:                                         ; preds = %and.phi93, %if.exit84
  %val96 = phi i1 [ true, %if.exit84 ], [ %val94, %and.phi93 ], !dbg !1787
  br i1 %val96, label %assert_ok101, label %assert_fail97, !dbg !1787

assert_fail97:                                    ; preds = %or.phi95
  store %"char[]" { ptr @.panic_msg.11, i64 65 }, ptr %indirectarg98, align 8
  store %"char[]" { ptr @.file.24, i64 16 }, ptr %indirectarg99, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg100, align 8
  %85 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %85(ptr align 8 %indirectarg98, ptr align 8 %indirectarg99, ptr align 8 %indirectarg100, i32 141) #6, !dbg !1785
  unreachable, !dbg !1785

assert_ok101:                                     ; preds = %or.phi95
  %le102 = icmp ule i64 %81, 268435456, !dbg !1785
  br i1 %le102, label %assert_ok107, label %assert_fail103, !dbg !1785

assert_fail103:                                   ; preds = %assert_ok101
  store %"char[]" { ptr @.panic_msg.12, i64 80 }, ptr %indirectarg104, align 8
  store %"char[]" { ptr @.file.24, i64 16 }, ptr %indirectarg105, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg106, align 8
  %86 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %86(ptr align 8 %indirectarg104, ptr align 8 %indirectarg105, ptr align 8 %indirectarg106, i32 141) #6, !dbg !1785
  unreachable, !dbg !1785

assert_ok107:                                     ; preds = %assert_ok101
  %lt108 = icmp ult i64 0, %80, !dbg !1785
  br i1 %lt108, label %assert_ok113, label %assert_fail109, !dbg !1785

assert_fail109:                                   ; preds = %assert_ok107
  store %"char[]" { ptr @.panic_msg.25, i64 59 }, ptr %indirectarg110, align 8
  store %"char[]" { ptr @.file.24, i64 16 }, ptr %indirectarg111, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg112, align 8
  %87 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %87(ptr align 8 %indirectarg110, ptr align 8 %indirectarg111, ptr align 8 %indirectarg112, i32 141) #6, !dbg !1785
  unreachable, !dbg !1785

assert_ok113:                                     ; preds = %assert_ok107
  %ptradd114 = getelementptr inbounds i8, ptr %allocator, i64 8, !dbg !1785
  %88 = load i64, ptr %ptradd114, align 8, !dbg !1785
  %89 = inttoptr i64 %88 to ptr, !dbg !1785
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !1727
  %90 = icmp eq ptr %89, %type, !dbg !1727
  br i1 %90, label %cache_hit, label %cache_miss, !dbg !1727

cache_miss:                                       ; preds = %assert_ok113
  %ptradd115 = getelementptr inbounds i8, ptr %89, i64 16, !dbg !1727
  %91 = load ptr, ptr %ptradd115, align 8, !dbg !1727
  %92 = call ptr @.dyn_search(ptr %91, ptr @"$sel.acquire"), !dbg !1727
  store ptr %92, ptr %.inlinecache, align 8, !dbg !1727
  store ptr %89, ptr %.cachedtype, align 8, !dbg !1727
  br label %93, !dbg !1727

cache_hit:                                        ; preds = %assert_ok113
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !1727
  br label %93, !dbg !1727

93:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %92, %cache_miss ], !dbg !1727
  %94 = icmp eq ptr %fn_phi, null, !dbg !1727
  br i1 %94, label %missing_function, label %match, !dbg !1727

missing_function:                                 ; preds = %93
  store %"char[]" { ptr @.panic_msg.26, i64 44 }, ptr %indirectarg116, align 8
  store %"char[]" { ptr @.file.24, i64 16 }, ptr %indirectarg117, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg118, align 8
  %95 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %95(ptr align 8 %indirectarg116, ptr align 8 %indirectarg117, ptr align 8 %indirectarg118, i32 141) #6, !dbg !1785
  unreachable, !dbg !1785

match:                                            ; preds = %93
  %96 = load ptr, ptr %allocator, align 8
  %97 = call i64 %fn_phi(ptr %retparam, ptr %96, i64 %80, i32 1, i64 %81), !dbg !1785
  %not_err = icmp eq i64 %97, 0, !dbg !1785
  %98 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1785
  br i1 %98, label %after_check, label %assign_optional, !dbg !1785

assign_optional:                                  ; preds = %match
  store i64 %97, ptr %error_var, align 8, !dbg !1785
  br label %guard_block, !dbg !1785

after_check:                                      ; preds = %match
  %99 = load ptr, ptr %retparam, align 8, !dbg !1785
  store ptr %99, ptr %blockret, align 8, !dbg !1785
  br label %expr_block.exit, !dbg !1785

expr_block.exit:                                  ; preds = %after_check, %if.then83
  br label %noerr_block, !dbg !1785

guard_block:                                      ; preds = %assign_optional
  %100 = load i64, ptr %error_var, align 8, !dbg !1785
  ret i64 %100, !dbg !1785

noerr_block:                                      ; preds = %expr_block.exit
  %101 = load ptr, ptr %blockret, align 8, !dbg !1785
  store ptr %101, ptr %mem, align 8, !dbg !1785
  br label %if.exit177, !dbg !1785

if.else:                                          ; preds = %assert_ok77
  %102 = load ptr, ptr %self, align 8, !dbg !1789
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator120, ptr align 8 %102, i32 16, i1 false)
  %103 = load i64, ptr %total_alloc_size, align 8
  store i64 %103, ptr %size121, align 8
  %104 = load i64, ptr %alignment, align 8
  store i64 %104, ptr %alignment122, align 8
  %105 = load i64, ptr %size121, align 8, !dbg !1791
  %i2nb124 = icmp eq i64 %105, 0, !dbg !1791
  br i1 %i2nb124, label %if.then125, label %if.exit126, !dbg !1791

if.then125:                                       ; preds = %if.else
  store ptr null, ptr %blockret123, align 8, !dbg !1791
  br label %expr_block.exit174, !dbg !1791

if.exit126:                                       ; preds = %if.else
  %106 = load i64, ptr %size121, align 8, !dbg !1793
  %107 = load i64, ptr %alignment122, align 8, !dbg !1793
  %i2nb127 = icmp eq i64 %107, 0, !dbg !1794
  br i1 %i2nb127, label %or.phi137, label %or.rhs128, !dbg !1794

or.rhs128:                                        ; preds = %if.exit126
  store i64 %107, ptr %x129, align 8
  %108 = load i64, ptr %x129, align 8, !dbg !1795
  %neq130 = icmp ne i64 0, %108, !dbg !1795
  br i1 %neq130, label %and.rhs131, label %and.phi135, !dbg !1795

and.rhs131:                                       ; preds = %or.rhs128
  %109 = load i64, ptr %x129, align 8, !dbg !1795
  %110 = load i64, ptr %x129, align 8, !dbg !1795
  %sub132 = sub i64 %110, 1, !dbg !1795
  %and133 = and i64 %109, %sub132, !dbg !1795
  %eq134 = icmp eq i64 %and133, 0, !dbg !1795
  br label %and.phi135, !dbg !1795

and.phi135:                                       ; preds = %and.rhs131, %or.rhs128
  %val136 = phi i1 [ false, %or.rhs128 ], [ %eq134, %and.rhs131 ], !dbg !1795
  br label %or.phi137, !dbg !1795

or.phi137:                                        ; preds = %and.phi135, %if.exit126
  %val138 = phi i1 [ true, %if.exit126 ], [ %val136, %and.phi135 ], !dbg !1795
  br i1 %val138, label %assert_ok143, label %assert_fail139, !dbg !1795

assert_fail139:                                   ; preds = %or.phi137
  store %"char[]" { ptr @.panic_msg.11, i64 65 }, ptr %indirectarg140, align 8
  store %"char[]" { ptr @.file.24, i64 16 }, ptr %indirectarg141, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg142, align 8
  %111 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %111(ptr align 8 %indirectarg140, ptr align 8 %indirectarg141, ptr align 8 %indirectarg142, i32 134) #6, !dbg !1793
  unreachable, !dbg !1793

assert_ok143:                                     ; preds = %or.phi137
  %le144 = icmp ule i64 %107, 268435456, !dbg !1793
  br i1 %le144, label %assert_ok149, label %assert_fail145, !dbg !1793

assert_fail145:                                   ; preds = %assert_ok143
  store %"char[]" { ptr @.panic_msg.12, i64 80 }, ptr %indirectarg146, align 8
  store %"char[]" { ptr @.file.24, i64 16 }, ptr %indirectarg147, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg148, align 8
  %112 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %112(ptr align 8 %indirectarg146, ptr align 8 %indirectarg147, ptr align 8 %indirectarg148, i32 134) #6, !dbg !1793
  unreachable, !dbg !1793

assert_ok149:                                     ; preds = %assert_ok143
  %lt150 = icmp ult i64 0, %106, !dbg !1793
  br i1 %lt150, label %assert_ok155, label %assert_fail151, !dbg !1793

assert_fail151:                                   ; preds = %assert_ok149
  store %"char[]" { ptr @.panic_msg.25, i64 59 }, ptr %indirectarg152, align 8
  store %"char[]" { ptr @.file.24, i64 16 }, ptr %indirectarg153, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg154, align 8
  %113 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %113(ptr align 8 %indirectarg152, ptr align 8 %indirectarg153, ptr align 8 %indirectarg154, i32 134) #6, !dbg !1793
  unreachable, !dbg !1793

assert_ok155:                                     ; preds = %assert_ok149
  %ptradd156 = getelementptr inbounds i8, ptr %allocator120, i64 8, !dbg !1793
  %114 = load i64, ptr %ptradd156, align 8, !dbg !1793
  %115 = inttoptr i64 %114 to ptr, !dbg !1793
  %type159 = load ptr, ptr %.cachedtype158, align 8, !dbg !1727
  %116 = icmp eq ptr %115, %type159, !dbg !1727
  br i1 %116, label %cache_hit162, label %cache_miss160, !dbg !1727

cache_miss160:                                    ; preds = %assert_ok155
  %ptradd161 = getelementptr inbounds i8, ptr %115, i64 16, !dbg !1727
  %117 = load ptr, ptr %ptradd161, align 8, !dbg !1727
  %118 = call ptr @.dyn_search(ptr %117, ptr @"$sel.acquire"), !dbg !1727
  store ptr %118, ptr %.inlinecache157, align 8, !dbg !1727
  store ptr %115, ptr %.cachedtype158, align 8, !dbg !1727
  br label %119, !dbg !1727

cache_hit162:                                     ; preds = %assert_ok155
  %cache_hit_fn163 = load ptr, ptr %.inlinecache157, align 8, !dbg !1727
  br label %119, !dbg !1727

119:                                              ; preds = %cache_hit162, %cache_miss160
  %fn_phi164 = phi ptr [ %cache_hit_fn163, %cache_hit162 ], [ %118, %cache_miss160 ], !dbg !1727
  %120 = icmp eq ptr %fn_phi164, null, !dbg !1727
  br i1 %120, label %missing_function165, label %match169, !dbg !1727

missing_function165:                              ; preds = %119
  store %"char[]" { ptr @.panic_msg.26, i64 44 }, ptr %indirectarg166, align 8
  store %"char[]" { ptr @.file.24, i64 16 }, ptr %indirectarg167, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg168, align 8
  %121 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %121(ptr align 8 %indirectarg166, ptr align 8 %indirectarg167, ptr align 8 %indirectarg168, i32 134) #6, !dbg !1793
  unreachable, !dbg !1793

match169:                                         ; preds = %119
  %122 = load ptr, ptr %allocator120, align 8
  %123 = call i64 %fn_phi164(ptr %retparam170, ptr %122, i64 %106, i32 0, i64 %107), !dbg !1793
  %not_err171 = icmp eq i64 %123, 0, !dbg !1793
  %124 = call i1 @llvm.expect.i1(i1 %not_err171, i1 true), !dbg !1793
  br i1 %124, label %after_check173, label %assign_optional172, !dbg !1793

assign_optional172:                               ; preds = %match169
  store i64 %123, ptr %error_var119, align 8, !dbg !1793
  br label %guard_block175, !dbg !1793

after_check173:                                   ; preds = %match169
  %125 = load ptr, ptr %retparam170, align 8, !dbg !1793
  store ptr %125, ptr %blockret123, align 8, !dbg !1793
  br label %expr_block.exit174, !dbg !1793

expr_block.exit174:                               ; preds = %after_check173, %if.then125
  br label %noerr_block176, !dbg !1793

guard_block175:                                   ; preds = %assign_optional172
  %126 = load i64, ptr %error_var119, align 8, !dbg !1793
  ret i64 %126, !dbg !1793

noerr_block176:                                   ; preds = %expr_block.exit174
  %127 = load ptr, ptr %blockret123, align 8, !dbg !1793
  store ptr %127, ptr %mem, align 8, !dbg !1793
  br label %if.exit177, !dbg !1793

if.exit177:                                       ; preds = %noerr_block176, %noerr_block
    #dbg_declare(ptr %start, !1797, !DIExpression(), !1798)
  %128 = load ptr, ptr %mem, align 8, !dbg !1798
  store ptr %128, ptr %start, align 8, !dbg !1798
  %129 = load ptr, ptr %mem, align 8, !dbg !1799
  %130 = load i64, ptr %alignment, align 8, !dbg !1799
  store i64 %130, ptr %x178, align 8
  %131 = load i64, ptr %x178, align 8, !dbg !1800
  %neq179 = icmp ne i64 0, %131, !dbg !1800
  br i1 %neq179, label %and.rhs180, label %and.phi184, !dbg !1800

and.rhs180:                                       ; preds = %if.exit177
  %132 = load i64, ptr %x178, align 8, !dbg !1800
  %133 = load i64, ptr %x178, align 8, !dbg !1800
  %sub181 = sub i64 %133, 1, !dbg !1800
  %and182 = and i64 %132, %sub181, !dbg !1800
  %eq183 = icmp eq i64 %and182, 0, !dbg !1800
  br label %and.phi184, !dbg !1800

and.phi184:                                       ; preds = %and.rhs180, %if.exit177
  %val185 = phi i1 [ false, %if.exit177 ], [ %eq183, %and.rhs180 ], !dbg !1800
  br i1 %val185, label %assert_ok190, label %assert_fail186, !dbg !1800

assert_fail186:                                   ; preds = %and.phi184
  store %"char[]" { ptr @.panic_msg.14, i64 51 }, ptr %indirectarg187, align 8
  store %"char[]" { ptr @.file.85, i64 17 }, ptr %indirectarg188, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg189, align 8
  %134 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %134(ptr align 8 %indirectarg187, ptr align 8 %indirectarg188, ptr align 8 %indirectarg189, i32 301) #6, !dbg !1799
  unreachable, !dbg !1799

assert_ok190:                                     ; preds = %and.phi184
  %135 = call i64 @std.core.mem.aligned_offset(i64 32, i64 %130), !dbg !1799
  %ptradd_any191 = getelementptr i8, ptr %129, i64 %135, !dbg !1799
  store ptr %ptradd_any191, ptr %mem, align 8, !dbg !1799
  %136 = load ptr, ptr %mem, align 8, !dbg !1802
  %ptradd_any192 = getelementptr i8, ptr %136, i64 -32, !dbg !1802
  store ptr %ptradd_any192, ptr %page, align 8, !dbg !1802
  %137 = load ptr, ptr %page, align 8, !dbg !1803
  %ptradd193 = getelementptr inbounds i8, ptr %137, i64 8, !dbg !1803
  %138 = load ptr, ptr %start, align 8, !dbg !1803
  store ptr %138, ptr %ptradd193, align 8, !dbg !1803
  %139 = load i64, ptr %size, align 8, !dbg !1804
  %or = or i64 %139, -9223372036854775808, !dbg !1804
  %140 = load ptr, ptr %page, align 8, !dbg !1804
  %ptradd194 = getelementptr inbounds i8, ptr %140, i64 16, !dbg !1804
  store i64 %or, ptr %ptradd194, align 8, !dbg !1804
  br label %if.exit295, !dbg !1804

if.else195:                                       ; preds = %if.exit61
    #dbg_declare(ptr %padded_header_size, !1805, !DIExpression(), !1807)
  store i64 16, ptr %x196, align 8
  %141 = load i64, ptr %x196, align 8, !dbg !1808
  %neq197 = icmp ne i64 0, %141, !dbg !1808
  br i1 %neq197, label %and.rhs198, label %and.phi202, !dbg !1808

and.rhs198:                                       ; preds = %if.else195
  %142 = load i64, ptr %x196, align 8, !dbg !1808
  %143 = load i64, ptr %x196, align 8, !dbg !1808
  %sub199 = sub i64 %143, 1, !dbg !1808
  %and200 = and i64 %142, %sub199, !dbg !1808
  %eq201 = icmp eq i64 %and200, 0, !dbg !1808
  br label %and.phi202, !dbg !1808

and.phi202:                                       ; preds = %and.rhs198, %if.else195
  %val203 = phi i1 [ false, %if.else195 ], [ %eq201, %and.rhs198 ], !dbg !1808
  br i1 %val203, label %assert_ok208, label %assert_fail204, !dbg !1808

assert_fail204:                                   ; preds = %and.phi202
  store %"char[]" { ptr @.panic_msg.14, i64 51 }, ptr %indirectarg205, align 8
  store %"char[]" { ptr @.file.85, i64 17 }, ptr %indirectarg206, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg207, align 8
  %144 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %144(ptr align 8 %indirectarg205, ptr align 8 %indirectarg206, ptr align 8 %indirectarg207, i32 309) #6, !dbg !1807
  unreachable, !dbg !1807

assert_ok208:                                     ; preds = %and.phi202
  %145 = call i64 @std.core.mem.aligned_offset(i64 32, i64 16), !dbg !1807
  store i64 %145, ptr %padded_header_size, align 8, !dbg !1807
    #dbg_declare(ptr %total_alloc_size209, !1810, !DIExpression(), !1811)
  %146 = load i64, ptr %padded_header_size, align 8, !dbg !1811
  %147 = load i64, ptr %size, align 8, !dbg !1811
  %add210 = add i64 %146, %147, !dbg !1811
  store i64 %add210, ptr %total_alloc_size209, align 8, !dbg !1811
    #dbg_declare(ptr %alloc, !1812, !DIExpression(), !1813)
  %148 = load ptr, ptr %self, align 8, !dbg !1813
  %149 = load i64, ptr %total_alloc_size209, align 8, !dbg !1813
  %150 = load i32, ptr %init_type, align 4, !dbg !1813
  br i1 true, label %or.phi221, label %or.rhs212, !dbg !1814

or.rhs212:                                        ; preds = %assert_ok208
  store i64 0, ptr %x213, align 8
  %151 = load i64, ptr %x213, align 8, !dbg !1815
  %neq214 = icmp ne i64 0, %151, !dbg !1815
  br i1 %neq214, label %and.rhs215, label %and.phi219, !dbg !1815

and.rhs215:                                       ; preds = %or.rhs212
  %152 = load i64, ptr %x213, align 8, !dbg !1815
  %153 = load i64, ptr %x213, align 8, !dbg !1815
  %sub216 = sub i64 %153, 1, !dbg !1815
  %and217 = and i64 %152, %sub216, !dbg !1815
  %eq218 = icmp eq i64 %and217, 0, !dbg !1815
  br label %and.phi219, !dbg !1815

and.phi219:                                       ; preds = %and.rhs215, %or.rhs212
  %val220 = phi i1 [ false, %or.rhs212 ], [ %eq218, %and.rhs215 ], !dbg !1815
  br label %or.phi221, !dbg !1815

or.phi221:                                        ; preds = %and.phi219, %assert_ok208
  %val222 = phi i1 [ true, %assert_ok208 ], [ %val220, %and.phi219 ], !dbg !1815
  br i1 %val222, label %assert_ok227, label %assert_fail223, !dbg !1815

assert_fail223:                                   ; preds = %or.phi221
  store %"char[]" { ptr @.panic_msg.11, i64 65 }, ptr %indirectarg224, align 8
  store %"char[]" { ptr @.file.85, i64 17 }, ptr %indirectarg225, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg226, align 8
  %154 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %154(ptr align 8 %indirectarg224, ptr align 8 %indirectarg225, ptr align 8 %indirectarg226, i32 311) #6, !dbg !1813
  unreachable, !dbg !1813

assert_ok227:                                     ; preds = %or.phi221
  %lt228 = icmp ult i64 0, %149, !dbg !1813
  br i1 %lt228, label %assert_ok233, label %assert_fail229, !dbg !1813

assert_fail229:                                   ; preds = %assert_ok227
  store %"char[]" { ptr @.panic_msg.25, i64 59 }, ptr %indirectarg230, align 8
  store %"char[]" { ptr @.file.85, i64 17 }, ptr %indirectarg231, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg232, align 8
  %155 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %155(ptr align 8 %indirectarg230, ptr align 8 %indirectarg231, ptr align 8 %indirectarg232, i32 311) #6, !dbg !1813
  unreachable, !dbg !1813

assert_ok233:                                     ; preds = %assert_ok227
  %ptradd234 = getelementptr inbounds i8, ptr %148, i64 8, !dbg !1813
  %156 = load i64, ptr %ptradd234, align 8, !dbg !1813
  %157 = inttoptr i64 %156 to ptr, !dbg !1813
  %type237 = load ptr, ptr %.cachedtype236, align 8, !dbg !1727
  %158 = icmp eq ptr %157, %type237, !dbg !1727
  br i1 %158, label %cache_hit240, label %cache_miss238, !dbg !1727

cache_miss238:                                    ; preds = %assert_ok233
  %ptradd239 = getelementptr inbounds i8, ptr %157, i64 16, !dbg !1727
  %159 = load ptr, ptr %ptradd239, align 8, !dbg !1727
  %160 = call ptr @.dyn_search(ptr %159, ptr @"$sel.acquire"), !dbg !1727
  store ptr %160, ptr %.inlinecache235, align 8, !dbg !1727
  store ptr %157, ptr %.cachedtype236, align 8, !dbg !1727
  br label %161, !dbg !1727

cache_hit240:                                     ; preds = %assert_ok233
  %cache_hit_fn241 = load ptr, ptr %.inlinecache235, align 8, !dbg !1727
  br label %161, !dbg !1727

161:                                              ; preds = %cache_hit240, %cache_miss238
  %fn_phi242 = phi ptr [ %cache_hit_fn241, %cache_hit240 ], [ %160, %cache_miss238 ], !dbg !1727
  %162 = icmp eq ptr %fn_phi242, null, !dbg !1727
  br i1 %162, label %missing_function243, label %match247, !dbg !1727

missing_function243:                              ; preds = %161
  store %"char[]" { ptr @.panic_msg.26, i64 44 }, ptr %indirectarg244, align 8
  store %"char[]" { ptr @.file.85, i64 17 }, ptr %indirectarg245, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg246, align 8
  %163 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %163(ptr align 8 %indirectarg244, ptr align 8 %indirectarg245, ptr align 8 %indirectarg246, i32 311) #6, !dbg !1813
  unreachable, !dbg !1813

match247:                                         ; preds = %161
  %164 = load ptr, ptr %148, align 8
  %165 = call i64 %fn_phi242(ptr %retparam248, ptr %164, i64 %149, i32 %150, i64 0), !dbg !1813
  %not_err249 = icmp eq i64 %165, 0, !dbg !1813
  %166 = call i1 @llvm.expect.i1(i1 %not_err249, i1 true), !dbg !1813
  br i1 %166, label %after_check251, label %assign_optional250, !dbg !1813

assign_optional250:                               ; preds = %match247
  store i64 %165, ptr %error_var211, align 8, !dbg !1813
  br label %guard_block252, !dbg !1813

after_check251:                                   ; preds = %match247
  br label %noerr_block253, !dbg !1813

guard_block252:                                   ; preds = %assign_optional250
  %167 = load i64, ptr %error_var211, align 8, !dbg !1813
  ret i64 %167, !dbg !1813

noerr_block253:                                   ; preds = %after_check251
  %168 = load ptr, ptr %retparam248, align 8, !dbg !1813
  store ptr %168, ptr %alloc, align 8, !dbg !1813
  %169 = load ptr, ptr %alloc, align 8, !dbg !1817
  %170 = load i64, ptr %padded_header_size, align 8, !dbg !1817
  %sub254 = sub i64 %170, 32, !dbg !1817
  %ptradd_any255 = getelementptr i8, ptr %169, i64 %sub254, !dbg !1817
  store ptr %ptradd_any255, ptr %page, align 8, !dbg !1817
  %171 = load ptr, ptr %page, align 8, !dbg !1818
  store i64 8, ptr %x256, align 8
  %172 = load i64, ptr %x256, align 8, !dbg !1819
  %neq257 = icmp ne i64 0, %172, !dbg !1819
  br i1 %neq257, label %and.rhs258, label %and.phi262, !dbg !1819

and.rhs258:                                       ; preds = %noerr_block253
  %173 = load i64, ptr %x256, align 8, !dbg !1819
  %174 = load i64, ptr %x256, align 8, !dbg !1819
  %sub259 = sub i64 %174, 1, !dbg !1819
  %and260 = and i64 %173, %sub259, !dbg !1819
  %eq261 = icmp eq i64 %and260, 0, !dbg !1819
  br label %and.phi262, !dbg !1819

and.phi262:                                       ; preds = %and.rhs258, %noerr_block253
  %val263 = phi i1 [ false, %noerr_block253 ], [ %eq261, %and.rhs258 ], !dbg !1819
  br i1 %val263, label %assert_ok268, label %assert_fail264, !dbg !1819

assert_fail264:                                   ; preds = %and.phi262
  store %"char[]" { ptr @.panic_msg.14, i64 51 }, ptr %indirectarg265, align 8
  store %"char[]" { ptr @.file.85, i64 17 }, ptr %indirectarg266, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg267, align 8
  %175 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %175(ptr align 8 %indirectarg265, ptr align 8 %indirectarg266, ptr align 8 %indirectarg267, i32 315) #6, !dbg !1818
  unreachable, !dbg !1818

assert_ok268:                                     ; preds = %and.phi262
  %176 = call i8 @std.core.mem.ptr_is_aligned(ptr %171, i64 8) #7, !dbg !1818
  %177 = trunc i8 %176 to i1, !dbg !1818
  br i1 %177, label %assert_ok273, label %assert_fail269, !dbg !1818

assert_fail269:                                   ; preds = %assert_ok268
  store %"char[]" { ptr @.panic_msg.94, i64 65 }, ptr %indirectarg270, align 8
  store %"char[]" { ptr @.file.85, i64 17 }, ptr %indirectarg271, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg272, align 8
  %178 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %178(ptr align 8 %indirectarg270, ptr align 8 %indirectarg271, ptr align 8 %indirectarg272, i32 315) #6, !dbg !1818
  unreachable, !dbg !1818

assert_ok273:                                     ; preds = %assert_ok268
  %179 = load ptr, ptr %page, align 8, !dbg !1821
  %ptradd274 = getelementptr inbounds i8, ptr %179, i64 32, !dbg !1821
  store i64 16, ptr %x275, align 8
  %180 = load i64, ptr %x275, align 8, !dbg !1822
  %neq276 = icmp ne i64 0, %180, !dbg !1822
  br i1 %neq276, label %and.rhs277, label %and.phi281, !dbg !1822

and.rhs277:                                       ; preds = %assert_ok273
  %181 = load i64, ptr %x275, align 8, !dbg !1822
  %182 = load i64, ptr %x275, align 8, !dbg !1822
  %sub278 = sub i64 %182, 1, !dbg !1822
  %and279 = and i64 %181, %sub278, !dbg !1822
  %eq280 = icmp eq i64 %and279, 0, !dbg !1822
  br label %and.phi281, !dbg !1822

and.phi281:                                       ; preds = %and.rhs277, %assert_ok273
  %val282 = phi i1 [ false, %assert_ok273 ], [ %eq280, %and.rhs277 ], !dbg !1822
  br i1 %val282, label %assert_ok287, label %assert_fail283, !dbg !1822

assert_fail283:                                   ; preds = %and.phi281
  store %"char[]" { ptr @.panic_msg.14, i64 51 }, ptr %indirectarg284, align 8
  store %"char[]" { ptr @.file.85, i64 17 }, ptr %indirectarg285, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg286, align 8
  %183 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %183(ptr align 8 %indirectarg284, ptr align 8 %indirectarg285, ptr align 8 %indirectarg286, i32 316) #6, !dbg !1821
  unreachable, !dbg !1821

assert_ok287:                                     ; preds = %and.phi281
  %184 = call i8 @std.core.mem.ptr_is_aligned(ptr %ptradd274, i64 16) #7, !dbg !1821
  %185 = trunc i8 %184 to i1, !dbg !1821
  br i1 %185, label %assert_ok292, label %assert_fail288, !dbg !1821

assert_fail288:                                   ; preds = %assert_ok287
  store %"char[]" { ptr @.panic_msg.40, i64 79 }, ptr %indirectarg289, align 8
  store %"char[]" { ptr @.file.85, i64 17 }, ptr %indirectarg290, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg291, align 8
  %186 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %186(ptr align 8 %indirectarg289, ptr align 8 %indirectarg290, ptr align 8 %indirectarg291, i32 316) #6, !dbg !1821
  unreachable, !dbg !1821

assert_ok292:                                     ; preds = %assert_ok287
  %187 = load ptr, ptr %page, align 8, !dbg !1824
  %ptradd293 = getelementptr inbounds i8, ptr %187, i64 8, !dbg !1824
  %188 = load ptr, ptr %alloc, align 8, !dbg !1824
  store ptr %188, ptr %ptradd293, align 8, !dbg !1824
  %189 = load ptr, ptr %page, align 8, !dbg !1825
  %ptradd294 = getelementptr inbounds i8, ptr %189, i64 16, !dbg !1825
  %190 = load i64, ptr %size, align 8, !dbg !1825
  store i64 %190, ptr %ptradd294, align 8, !dbg !1825
  br label %if.exit295, !dbg !1825

if.exit295:                                       ; preds = %assert_ok292, %assert_ok190
  %191 = load ptr, ptr %page, align 8, !dbg !1826
  %ptradd296 = getelementptr inbounds i8, ptr %191, i64 24, !dbg !1826
  store i64 -1, ptr %ptradd296, align 8, !dbg !1826
  %192 = load ptr, ptr %self, align 8, !dbg !1827
  %ptradd297 = getelementptr inbounds i8, ptr %192, i64 16, !dbg !1827
  %193 = load ptr, ptr %page, align 8, !dbg !1827
  %194 = load ptr, ptr %ptradd297, align 8, !dbg !1827
  store ptr %194, ptr %193, align 8, !dbg !1827
  %195 = load ptr, ptr %self, align 8, !dbg !1828
  %ptradd298 = getelementptr inbounds i8, ptr %195, i64 16, !dbg !1828
  %196 = load ptr, ptr %page, align 8, !dbg !1828
  store ptr %196, ptr %ptradd298, align 8, !dbg !1828
  %197 = load ptr, ptr %page, align 8, !dbg !1829
  %ptradd300 = getelementptr inbounds i8, ptr %197, i64 32, !dbg !1829
  store ptr %ptradd300, ptr %0, align 8, !dbg !1829
  ret i64 0, !dbg !1829

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.85, i64 17 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg2, align 8
  %198 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %198(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 260) #6, !dbg !1729
  unreachable, !dbg !1729
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.core.mem.allocator.new_temp_allocator(ptr %0, ptr align 8 %1, i64 %2, i64 %3, i64 %4, i64 %5) #0 comdat !dbg !1830 {
entry:
  %size = alloca i64, align 8
  %reserve = alloca i64, align 8
  %min_size = alloca i64, align 8
  %realloc_size = alloca i64, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg7 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %indirectarg15 = alloca %"char[]", align 8
  %indirectarg16 = alloca %"char[]", align 8
  %indirectarg17 = alloca %"char[]", align 8
  %temp = alloca ptr, align 8
  %error_var = alloca i64, align 8
  %allocator = alloca %any, align 8
  %padding = alloca i64, align 8
  %allocator19 = alloca %any, align 8
  %size20 = alloca i64, align 8
  %blockret = alloca ptr, align 8
  %x = alloca i64, align 8
  %indirectarg24 = alloca %"char[]", align 8
  %indirectarg25 = alloca %"char[]", align 8
  %indirectarg26 = alloca %"char[]", align 8
  %indirectarg29 = alloca %"char[]", align 8
  %indirectarg30 = alloca %"char[]", align 8
  %indirectarg31 = alloca %"char[]", align 8
  %indirectarg35 = alloca %"char[]", align 8
  %indirectarg36 = alloca %"char[]", align 8
  %indirectarg37 = alloca %"char[]", align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %indirectarg41 = alloca %"char[]", align 8
  %indirectarg42 = alloca %"char[]", align 8
  %indirectarg43 = alloca %"char[]", align 8
  %retparam = alloca ptr, align 8
  %reterr = alloca i64, align 8
    #dbg_declare(ptr %1, !1833, !DIExpression(), !1834)
  store ptr null, ptr %.cachedtype, align 8
  store i64 %2, ptr %size, align 8
    #dbg_declare(ptr %size, !1835, !DIExpression(), !1834)
  store i64 %3, ptr %reserve, align 8
    #dbg_declare(ptr %reserve, !1836, !DIExpression(), !1834)
  store i64 %4, ptr %min_size, align 8
    #dbg_declare(ptr %min_size, !1837, !DIExpression(), !1834)
  store i64 %5, ptr %realloc_size, align 8
    #dbg_declare(ptr %realloc_size, !1838, !DIExpression(), !1834)
  %6 = load i64, ptr %size, align 8, !dbg !1839
  %le = icmp ule i64 64, %6, !dbg !1839
  br i1 %le, label %assert_ok, label %assert_fail, !dbg !1839

assert_fail:                                      ; preds = %entry
  store %"char[]" { ptr @.panic_msg.84, i64 31 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.85, i64 17 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.86, i64 18 }, ptr %indirectarg2, align 8
  %7 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %7(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 67) #6, !dbg !1839
  unreachable, !dbg !1839

assert_ok:                                        ; preds = %entry
  %8 = load i64, ptr %realloc_size, align 8, !dbg !1841
  %le3 = icmp ule i64 64, %8, !dbg !1841
  br i1 %le3, label %assert_ok8, label %assert_fail4, !dbg !1841

assert_fail4:                                     ; preds = %assert_ok
  store %"char[]" { ptr @.panic_msg.87, i64 39 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.file.85, i64 17 }, ptr %indirectarg6, align 8
  store %"char[]" { ptr @.func.86, i64 18 }, ptr %indirectarg7, align 8
  %9 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %9(ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, ptr align 8 %indirectarg7, i32 68) #6, !dbg !1841
  unreachable, !dbg !1841

assert_ok8:                                       ; preds = %assert_ok
  %ptradd = getelementptr inbounds i8, ptr %1, i64 8, !dbg !1842
  %10 = load i64, ptr %ptradd, align 8, !dbg !1842
  %neq = icmp ne i64 %10, ptrtoint (ptr @"$ct.std.core.mem.allocator.TempAllocator" to i64), !dbg !1842
  br i1 %neq, label %assert_ok13, label %assert_fail9, !dbg !1842

assert_fail9:                                     ; preds = %assert_ok8
  store %"char[]" { ptr @.panic_msg.88, i64 145 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.file.85, i64 17 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.func.86, i64 18 }, ptr %indirectarg12, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11(ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, i32 69) #6, !dbg !1842
  unreachable, !dbg !1842

assert_ok13:                                      ; preds = %assert_ok8
  %12 = load i64, ptr %min_size, align 8, !dbg !1843
  %lt = icmp ult i64 152, %12, !dbg !1843
  br i1 %lt, label %assert_ok18, label %assert_fail14, !dbg !1843

assert_fail14:                                    ; preds = %assert_ok13
  store %"char[]" { ptr @.panic_msg.89, i64 114 }, ptr %indirectarg15, align 8
  store %"char[]" { ptr @.file.85, i64 17 }, ptr %indirectarg16, align 8
  store %"char[]" { ptr @.func.86, i64 18 }, ptr %indirectarg17, align 8
  %13 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %13(ptr align 8 %indirectarg15, ptr align 8 %indirectarg16, ptr align 8 %indirectarg17, i32 70) #6, !dbg !1843
  unreachable, !dbg !1843

assert_ok18:                                      ; preds = %assert_ok13
    #dbg_declare(ptr %temp, !1844, !DIExpression(), !1845)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator, ptr align 8 %1, i32 16, i1 false)
  %14 = load i64, ptr %size, align 8
  store i64 %14, ptr %padding, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator19, ptr align 8 %allocator, i32 16, i1 false)
  %15 = load i64, ptr %padding, align 8, !dbg !1846
  %add = add i64 88, %15, !dbg !1846
  store i64 %add, ptr %size20, align 8
  %16 = load i64, ptr %size20, align 8, !dbg !1848
  %i2nb = icmp eq i64 %16, 0, !dbg !1848
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !1848

if.then:                                          ; preds = %assert_ok18
  store ptr null, ptr %blockret, align 8, !dbg !1848
  br label %expr_block.exit, !dbg !1848

if.exit:                                          ; preds = %assert_ok18
  %17 = load i64, ptr %size20, align 8, !dbg !1850
  br i1 true, label %or.phi, label %or.rhs, !dbg !1851

or.rhs:                                           ; preds = %if.exit
  store i64 0, ptr %x, align 8
  %18 = load i64, ptr %x, align 8, !dbg !1852
  %neq21 = icmp ne i64 0, %18, !dbg !1852
  br i1 %neq21, label %and.rhs, label %and.phi, !dbg !1852

and.rhs:                                          ; preds = %or.rhs
  %19 = load i64, ptr %x, align 8, !dbg !1852
  %20 = load i64, ptr %x, align 8, !dbg !1852
  %sub = sub i64 %20, 1, !dbg !1852
  %and = and i64 %19, %sub, !dbg !1852
  %eq = icmp eq i64 %and, 0, !dbg !1852
  br label %and.phi, !dbg !1852

and.phi:                                          ; preds = %and.rhs, %or.rhs
  %val = phi i1 [ false, %or.rhs ], [ %eq, %and.rhs ], !dbg !1852
  br label %or.phi, !dbg !1852

or.phi:                                           ; preds = %and.phi, %if.exit
  %val22 = phi i1 [ true, %if.exit ], [ %val, %and.phi ], !dbg !1852
  br i1 %val22, label %assert_ok27, label %assert_fail23, !dbg !1852

assert_fail23:                                    ; preds = %or.phi
  store %"char[]" { ptr @.panic_msg.11, i64 65 }, ptr %indirectarg24, align 8
  store %"char[]" { ptr @.file.24, i64 16 }, ptr %indirectarg25, align 8
  store %"char[]" { ptr @.func.86, i64 18 }, ptr %indirectarg26, align 8
  %21 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %21(ptr align 8 %indirectarg24, ptr align 8 %indirectarg25, ptr align 8 %indirectarg26, i32 86) #6, !dbg !1850
  unreachable, !dbg !1850

assert_ok27:                                      ; preds = %or.phi
  br i1 true, label %assert_ok32, label %assert_fail28, !dbg !1850

assert_fail28:                                    ; preds = %assert_ok27
  store %"char[]" { ptr @.panic_msg.12, i64 80 }, ptr %indirectarg29, align 8
  store %"char[]" { ptr @.file.24, i64 16 }, ptr %indirectarg30, align 8
  store %"char[]" { ptr @.func.86, i64 18 }, ptr %indirectarg31, align 8
  %22 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %22(ptr align 8 %indirectarg29, ptr align 8 %indirectarg30, ptr align 8 %indirectarg31, i32 86) #6, !dbg !1850
  unreachable, !dbg !1850

assert_ok32:                                      ; preds = %assert_ok27
  %lt33 = icmp ult i64 0, %17, !dbg !1850
  br i1 %lt33, label %assert_ok38, label %assert_fail34, !dbg !1850

assert_fail34:                                    ; preds = %assert_ok32
  store %"char[]" { ptr @.panic_msg.25, i64 59 }, ptr %indirectarg35, align 8
  store %"char[]" { ptr @.file.24, i64 16 }, ptr %indirectarg36, align 8
  store %"char[]" { ptr @.func.86, i64 18 }, ptr %indirectarg37, align 8
  %23 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %23(ptr align 8 %indirectarg35, ptr align 8 %indirectarg36, ptr align 8 %indirectarg37, i32 86) #6, !dbg !1850
  unreachable, !dbg !1850

assert_ok38:                                      ; preds = %assert_ok32
  %ptradd39 = getelementptr inbounds i8, ptr %allocator19, i64 8, !dbg !1850
  %24 = load i64, ptr %ptradd39, align 8, !dbg !1850
  %25 = inttoptr i64 %24 to ptr, !dbg !1850
  %type = load ptr, ptr %.cachedtype, align 8
  %26 = icmp eq ptr %25, %type
  br i1 %26, label %cache_hit, label %cache_miss

cache_miss:                                       ; preds = %assert_ok38
  %ptradd40 = getelementptr inbounds i8, ptr %25, i64 16
  %27 = load ptr, ptr %ptradd40, align 8
  %28 = call ptr @.dyn_search(ptr %27, ptr @"$sel.acquire")
  store ptr %28, ptr %.inlinecache, align 8
  store ptr %25, ptr %.cachedtype, align 8
  br label %29

cache_hit:                                        ; preds = %assert_ok38
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8
  br label %29

29:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %28, %cache_miss ]
  %30 = icmp eq ptr %fn_phi, null
  br i1 %30, label %missing_function, label %match

missing_function:                                 ; preds = %29
  store %"char[]" { ptr @.panic_msg.26, i64 44 }, ptr %indirectarg41, align 8
  store %"char[]" { ptr @.file.24, i64 16 }, ptr %indirectarg42, align 8
  store %"char[]" { ptr @.func.86, i64 18 }, ptr %indirectarg43, align 8
  %31 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %31(ptr align 8 %indirectarg41, ptr align 8 %indirectarg42, ptr align 8 %indirectarg43, i32 86) #6, !dbg !1850
  unreachable, !dbg !1850

match:                                            ; preds = %29
  %32 = load ptr, ptr %allocator19, align 8
  %33 = call i64 %fn_phi(ptr %retparam, ptr %32, i64 %17, i32 0, i64 0), !dbg !1850
  %not_err = icmp eq i64 %33, 0, !dbg !1850
  %34 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1850
  br i1 %34, label %after_check, label %assign_optional, !dbg !1850

assign_optional:                                  ; preds = %match
  store i64 %33, ptr %error_var, align 8, !dbg !1850
  br label %guard_block, !dbg !1850

after_check:                                      ; preds = %match
  %35 = load ptr, ptr %retparam, align 8, !dbg !1850
  store ptr %35, ptr %blockret, align 8, !dbg !1850
  br label %expr_block.exit, !dbg !1850

expr_block.exit:                                  ; preds = %after_check, %if.then
  %36 = load ptr, ptr %blockret, align 8, !dbg !1850
  br label %noerr_block, !dbg !1850

guard_block:                                      ; preds = %assign_optional
  %37 = load i64, ptr %error_var, align 8, !dbg !1850
  ret i64 %37, !dbg !1850

noerr_block:                                      ; preds = %expr_block.exit
  store ptr %36, ptr %temp, align 8, !dbg !1850
  %38 = load ptr, ptr %temp, align 8, !dbg !1854
  %ptradd44 = getelementptr inbounds i8, ptr %38, i64 16, !dbg !1854
  store ptr null, ptr %ptradd44, align 8, !dbg !1854
  %39 = load ptr, ptr %temp, align 8, !dbg !1855
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %39, ptr align 8 %1, i32 16, i1 false), !dbg !1855
  %40 = load ptr, ptr %temp, align 8, !dbg !1856
  %ptradd45 = getelementptr inbounds i8, ptr %40, i64 64, !dbg !1856
  store i64 0, ptr %ptradd45, align 8, !dbg !1856
  %41 = load ptr, ptr %temp, align 8, !dbg !1857
  %ptradd46 = getelementptr inbounds i8, ptr %41, i64 56, !dbg !1857
  %42 = load i64, ptr %min_size, align 8, !dbg !1857
  store i64 %42, ptr %ptradd46, align 8, !dbg !1857
  %43 = load ptr, ptr %temp, align 8, !dbg !1858
  %ptradd47 = getelementptr inbounds i8, ptr %43, i64 48, !dbg !1858
  %44 = load i64, ptr %realloc_size, align 8, !dbg !1858
  store i64 %44, ptr %ptradd47, align 8, !dbg !1858
  %45 = load ptr, ptr %temp, align 8, !dbg !1859
  %ptradd48 = getelementptr inbounds i8, ptr %45, i64 40, !dbg !1859
  %46 = load i64, ptr %reserve, align 8, !dbg !1859
  store i64 %46, ptr %ptradd48, align 8, !dbg !1859
  %47 = load ptr, ptr %temp, align 8, !dbg !1860
  %ptradd49 = getelementptr inbounds i8, ptr %47, i64 32, !dbg !1860
  store i8 1, ptr %ptradd49, align 8, !dbg !1860
  %48 = load ptr, ptr %temp, align 8, !dbg !1861
  %ptradd50 = getelementptr inbounds i8, ptr %48, i64 24, !dbg !1861
  store ptr null, ptr %ptradd50, align 8, !dbg !1861
  %49 = load ptr, ptr %temp, align 8, !dbg !1862
  %ptradd51 = getelementptr inbounds i8, ptr %49, i64 72, !dbg !1862
  %50 = load i64, ptr %size, align 8, !dbg !1862
  store i64 %50, ptr %ptradd51, align 8, !dbg !1862
  %51 = load ptr, ptr %temp, align 8, !dbg !1862
  %ptradd52 = getelementptr inbounds i8, ptr %51, i64 80, !dbg !1862
  store i64 %50, ptr %ptradd52, align 8, !dbg !1862
  %52 = load ptr, ptr %temp, align 8, !dbg !1863
  store ptr %52, ptr %0, align 8, !dbg !1863
  ret i64 0, !dbg !1863
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.core.mem.allocator.TrackingAllocator.init(ptr %0, ptr align 8 %1) #0 comdat !dbg !1864 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %.assign_list = alloca %TrackingAllocator, align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr9 = alloca i64, align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg13 = alloca %"any[]", align 8
  %indirectarg16 = alloca %"char[]", align 8
  %indirectarg17 = alloca %"char[]", align 8
  %indirectarg18 = alloca %"char[]", align 8
  %indirectarg20 = alloca %"char[]", align 8
  %indirectarg21 = alloca %"char[]", align 8
  %indirectarg22 = alloca %"char[]", align 8
  %indirectarg25 = alloca %"char[]", align 8
  %indirectarg26 = alloca %"char[]", align 8
  %indirectarg27 = alloca %"char[]", align 8
  %indirectarg30 = alloca %"char[]", align 8
  %indirectarg31 = alloca %"char[]", align 8
  %indirectarg32 = alloca %"char[]", align 8
  %indirectarg34 = alloca %any, align 8
  %2 = icmp eq ptr %0, null, !dbg !1906
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !1906
  br i1 %3, label %panic, label %checkok, !dbg !1906

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1907, !DIExpression(), !1908)
    #dbg_declare(ptr %1, !1909, !DIExpression(), !1908)
  call void @llvm.memset.p0.i64(ptr align 8 %.assign_list, i8 0, i64 80, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %.assign_list, ptr align 8 %1, i32 16, i1 false), !dbg !1910
  %4 = load ptr, ptr %self, align 8, !dbg !1910
  %checknull = icmp eq ptr %4, null, !dbg !1910
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1910
  br i1 %5, label %panic3, label %checkok7, !dbg !1910

checkok7:                                         ; preds = %checkok
  %6 = ptrtoint ptr %4 to i64, !dbg !1910
  %7 = urem i64 %6, 8, !dbg !1910
  %8 = icmp ne i64 %7, 0, !dbg !1910
  %9 = call i1 @llvm.expect.i1(i1 %8, i1 false), !dbg !1910
  br i1 %9, label %panic8, label %checkok14, !dbg !1910

checkok14:                                        ; preds = %checkok7
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %4, ptr align 8 %.assign_list, i32 80, i1 false), !dbg !1910
  %10 = load ptr, ptr %self, align 8, !dbg !1911
  %ptradd15 = getelementptr inbounds i8, ptr %10, i64 16, !dbg !1911
  %11 = load %any, ptr %1, align 8, !dbg !1911
  br i1 true, label %assert_ok, label %assert_fail, !dbg !1911

assert_fail:                                      ; preds = %checkok14
  store %"char[]" { ptr @.panic_msg.97, i64 69 }, ptr %indirectarg16, align 8
  store %"char[]" { ptr @.file.95, i64 21 }, ptr %indirectarg17, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg18, align 8
  %12 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %12(ptr align 8 %indirectarg16, ptr align 8 %indirectarg17, ptr align 8 %indirectarg18, i32 41) #6, !dbg !1911
  unreachable, !dbg !1911

assert_ok:                                        ; preds = %checkok14
  br i1 true, label %assert_ok23, label %assert_fail19, !dbg !1911

assert_fail19:                                    ; preds = %assert_ok
  store %"char[]" { ptr @.panic_msg.98, i64 79 }, ptr %indirectarg20, align 8
  store %"char[]" { ptr @.file.95, i64 21 }, ptr %indirectarg21, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg22, align 8
  %13 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %13(ptr align 8 %indirectarg20, ptr align 8 %indirectarg21, ptr align 8 %indirectarg22, i32 41) #6, !dbg !1911
  unreachable, !dbg !1911

assert_ok23:                                      ; preds = %assert_ok
  %14 = call i8 @"std_collections_map$ulong$std.core.mem.allocator.Allocation$.HashMap.is_initialized"(ptr %ptradd15), !dbg !1912
  %15 = trunc i8 %14 to i1, !dbg !1912
  %not = xor i1 %15, true, !dbg !1912
  br i1 %not, label %assert_ok28, label %assert_fail24, !dbg !1912

assert_fail24:                                    ; preds = %assert_ok23
  store %"char[]" { ptr @.panic_msg.99, i64 74 }, ptr %indirectarg25, align 8
  store %"char[]" { ptr @.file.95, i64 21 }, ptr %indirectarg26, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg27, align 8
  %16 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %16(ptr align 8 %indirectarg25, ptr align 8 %indirectarg26, ptr align 8 %indirectarg27, i32 41) #6, !dbg !1911
  unreachable, !dbg !1911

assert_ok28:                                      ; preds = %assert_ok23
  br i1 true, label %assert_ok33, label %assert_fail29, !dbg !1911

assert_fail29:                                    ; preds = %assert_ok28
  store %"char[]" { ptr @.panic_msg.100, i64 82 }, ptr %indirectarg30, align 8
  store %"char[]" { ptr @.file.95, i64 21 }, ptr %indirectarg31, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg32, align 8
  %17 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %17(ptr align 8 %indirectarg30, ptr align 8 %indirectarg31, ptr align 8 %indirectarg32, i32 41) #6, !dbg !1911
  unreachable, !dbg !1911

assert_ok33:                                      ; preds = %assert_ok28
  store %any %11, ptr %indirectarg34, align 8
  %18 = call ptr @"std_collections_map$ulong$std.core.mem.allocator.Allocation$.HashMap.init"(ptr %ptradd15, ptr align 8 %indirectarg34, i32 16, float 7.500000e-01), !dbg !1911
  ret void, !dbg !1911

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.95, i64 21 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg2, align 8
  %19 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %19(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 38) #6, !dbg !1908
  unreachable, !dbg !1908

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.96, i64 45 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.95, i64 21 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg6, align 8
  %20 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %20(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 40) #6, !dbg !1910
  unreachable, !dbg !1910

panic8:                                           ; preds = %checkok7
  store i64 8, ptr %taddr, align 8
  %21 = insertvalue %any undef, ptr %taddr, 0
  %22 = insertvalue %any %21, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %7, ptr %taddr9, align 8
  %23 = insertvalue %any undef, ptr %taddr9, 0
  %24 = insertvalue %any %23, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.31, i64 94 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.file.95, i64 21 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg12, align 8
  store %any %22, ptr %varargslots, align 16
  %ptradd = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %24, ptr %ptradd, align 16
  %25 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %25, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg13, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, i32 40, ptr align 8 %indirectarg13) #6, !dbg !1910
  unreachable, !dbg !1910
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.core.mem.allocator.TrackingAllocator.free(ptr %0) #0 comdat !dbg !1913 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr9 = alloca i64, align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg14 = alloca %"any[]", align 8
  %1 = icmp eq ptr %0, null, !dbg !1916
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1916
  br i1 %2, label %panic, label %checkok, !dbg !1916

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1917, !DIExpression(), !1918)
  %3 = load ptr, ptr %self, align 8, !dbg !1919
  %ptradd = getelementptr inbounds i8, ptr %3, i64 16, !dbg !1919
  call void @"std_collections_map$ulong$std.core.mem.allocator.Allocation$.HashMap.free"(ptr %ptradd), !dbg !1919
  %4 = load ptr, ptr %self, align 8, !dbg !1920
  %checknull = icmp eq ptr %4, null, !dbg !1920
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1920
  br i1 %5, label %panic3, label %checkok7, !dbg !1920

checkok7:                                         ; preds = %checkok
  %6 = ptrtoint ptr %4 to i64, !dbg !1920
  %7 = urem i64 %6, 8, !dbg !1920
  %8 = icmp ne i64 %7, 0, !dbg !1920
  %9 = call i1 @llvm.expect.i1(i1 %8, i1 false), !dbg !1920
  br i1 %9, label %panic8, label %checkok15, !dbg !1920

checkok15:                                        ; preds = %checkok7
  call void @llvm.memset.p0.i64(ptr align 8 %4, i8 0, i64 80, i1 false), !dbg !1920
  ret void, !dbg !1920

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.95, i64 21 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.43, i64 4 }, ptr %indirectarg2, align 8
  %10 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %10(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 47) #6, !dbg !1918
  unreachable, !dbg !1918

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.96, i64 45 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.95, i64 21 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.43, i64 4 }, ptr %indirectarg6, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 50) #6, !dbg !1920
  unreachable, !dbg !1920

panic8:                                           ; preds = %checkok7
  store i64 8, ptr %taddr, align 8
  %12 = insertvalue %any undef, ptr %taddr, 0
  %13 = insertvalue %any %12, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %7, ptr %taddr9, align 8
  %14 = insertvalue %any undef, ptr %taddr9, 0
  %15 = insertvalue %any %14, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.31, i64 94 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.file.95, i64 21 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.func.43, i64 4 }, ptr %indirectarg12, align 8
  store %any %13, ptr %varargslots, align 16
  %ptradd13 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %15, ptr %ptradd13, align 16
  %16 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %16, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg14, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, i32 50, ptr align 8 %indirectarg14) #6, !dbg !1920
  unreachable, !dbg !1920
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.core.mem.allocator.TrackingAllocator.allocated(ptr %0) #0 comdat !dbg !1921 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %reserve = alloca i64, align 8
  %state = alloca ptr, align 8
  %allocated = alloca i64, align 8
  %sretparam = alloca %"Allocation[]", align 8
  %.anon = alloca i64, align 8
  %allocation = alloca ptr, align 8
  %taddr = alloca i64, align 8
  %taddr4 = alloca i64, align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg7 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg9 = alloca %"any[]", align 8
  %1 = icmp eq ptr %0, null, !dbg !1924
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1924
  br i1 %2, label %panic, label %checkok, !dbg !1924

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1925, !DIExpression(), !1924)
  store i64 0, ptr %reserve, align 8
    #dbg_declare(ptr %state, !1926, !DIExpression(), !1929)
  %3 = load i64, ptr %reserve, align 8, !dbg !1929
  %4 = call ptr @std.core.mem.allocator.push_pool(i64 %3) #7, !dbg !1929
  store ptr %4, ptr %state, align 8, !dbg !1929
    #dbg_declare(ptr %allocated, !1930, !DIExpression(), !1932)
  store i64 0, ptr %allocated, align 8, !dbg !1932
  %5 = load ptr, ptr %self, align 8, !dbg !1933
  %ptradd = getelementptr inbounds i8, ptr %5, i64 16, !dbg !1933
  call void @"std_collections_map$ulong$std.core.mem.allocator.Allocation$.HashMap.tvalues"(ptr sret(%"Allocation[]") align 8 %sretparam, ptr %ptradd), !dbg !1933
  %6 = load %"Allocation[]", ptr %sretparam, align 8, !dbg !1933
  %7 = extractvalue %"Allocation[]" %6, 1, !dbg !1933
    #dbg_declare(ptr %.anon, !1935, !DIExpression(), !1933)
  store i64 0, ptr %.anon, align 8, !dbg !1933
  br label %loop.cond, !dbg !1933

loop.cond:                                        ; preds = %checkok10, %checkok
  %8 = load i64, ptr %.anon, align 8, !dbg !1933
  %lt = icmp ult i64 %8, %7, !dbg !1933
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !1933

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %allocation, !1936, !DIExpression(), !1939)
  %9 = extractvalue %"Allocation[]" %6, 1, !dbg !1939
  %10 = extractvalue %"Allocation[]" %6, 0, !dbg !1939
  %11 = load i64, ptr %.anon, align 8, !dbg !1939
  %ge = icmp uge i64 %11, %9, !dbg !1939
  %12 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !1939
  br i1 %12, label %panic3, label %checkok10, !dbg !1939

checkok10:                                        ; preds = %loop.body
  %ptroffset = getelementptr inbounds [144 x i8], ptr %10, i64 %11, !dbg !1939
  store ptr %ptroffset, ptr %allocation, align 8, !dbg !1939
  %13 = load i64, ptr %allocated, align 8, !dbg !1939
  %14 = load ptr, ptr %allocation, align 8, !dbg !1939
  %ptradd11 = getelementptr inbounds i8, ptr %14, i64 8, !dbg !1939
  %15 = load i64, ptr %ptradd11, align 8, !dbg !1939
  %add = add i64 %13, %15, !dbg !1939
  store i64 %add, ptr %allocated, align 8, !dbg !1939
  %16 = load i64, ptr %.anon, align 8, !dbg !1933
  %addnuw = add nuw i64 %16, 1, !dbg !1933
  store i64 %addnuw, ptr %.anon, align 8, !dbg !1933
  br label %loop.cond, !dbg !1933

loop.exit:                                        ; preds = %loop.cond
  %17 = load i64, ptr %allocated, align 8, !dbg !1940
  %18 = load ptr, ptr %state, align 8, !dbg !1941
  call void @std.core.mem.allocator.pop_pool(ptr %18) #7, !dbg !1941
  ret i64 %17, !dbg !1941

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.95, i64 21 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.101, i64 9 }, ptr %indirectarg2, align 8
  %19 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %19(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 56) #6, !dbg !1924
  unreachable, !dbg !1924

panic3:                                           ; preds = %loop.body
  store i64 %9, ptr %taddr, align 8
  %20 = insertvalue %any undef, ptr %taddr, 0
  %21 = insertvalue %any %20, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %11, ptr %taddr4, align 8
  %22 = insertvalue %any undef, ptr %taddr4, 0
  %23 = insertvalue %any %22, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 59 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.file.95, i64 21 }, ptr %indirectarg6, align 8
  store %"char[]" { ptr @.func.101, i64 9 }, ptr %indirectarg7, align 8
  store %any %21, ptr %varargslots, align 16
  %ptradd8 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %23, ptr %ptradd8, align 16
  %24 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %24, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg9, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, ptr align 8 %indirectarg7, i32 59, ptr align 8 %indirectarg9) #6, !dbg !1939
  unreachable, !dbg !1939
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.core.mem.allocator.TrackingAllocator.total_allocated(ptr %0) #0 comdat !dbg !1943 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1944
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1944
  br i1 %2, label %panic, label %checkok, !dbg !1944

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1945, !DIExpression(), !1944)
  %3 = load ptr, ptr %self, align 8, !dbg !1944
  %ptradd = getelementptr inbounds i8, ptr %3, i64 64, !dbg !1944
  %4 = load i64, ptr %ptradd, align 8, !dbg !1944
  ret i64 %4, !dbg !1944

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.95, i64 21 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.102, i64 15 }, ptr %indirectarg2, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 66) #6, !dbg !1944
  unreachable, !dbg !1944
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.core.mem.allocator.TrackingAllocator.total_allocation_count(ptr %0) #0 comdat !dbg !1946 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1947
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1947
  br i1 %2, label %panic, label %checkok, !dbg !1947

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1948, !DIExpression(), !1947)
  %3 = load ptr, ptr %self, align 8, !dbg !1947
  %ptradd = getelementptr inbounds i8, ptr %3, i64 72, !dbg !1947
  %4 = load i64, ptr %ptradd, align 8, !dbg !1947
  ret i64 %4, !dbg !1947

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.95, i64 21 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.103, i64 22 }, ptr %indirectarg2, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 71) #6, !dbg !1947
  unreachable, !dbg !1947
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.core.mem.allocator.TrackingAllocator.allocations_tlist(ptr noalias sret(%"Allocation[]") align 8 %0, ptr %1, ptr align 8 %2) #0 comdat !dbg !1949 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %sretparam = alloca %"Allocation[]", align 8
  %3 = icmp eq ptr %1, null, !dbg !1956
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !1956
  br i1 %4, label %panic, label %checkok, !dbg !1956

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !1957, !DIExpression(), !1958)
    #dbg_declare(ptr %2, !1959, !DIExpression(), !1958)
  %5 = load ptr, ptr %self, align 8, !dbg !1960
  %ptradd = getelementptr inbounds i8, ptr %5, i64 16, !dbg !1960
  call void @"std_collections_map$ulong$std.core.mem.allocator.Allocation$.HashMap.tvalues"(ptr sret(%"Allocation[]") align 8 %sretparam, ptr %ptradd), !dbg !1960
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %sretparam, i32 16, i1 false), !dbg !1960
  ret void, !dbg !1960

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.95, i64 21 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.104, i64 17 }, ptr %indirectarg2, align 8
  %6 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %6(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 73) #6, !dbg !1958
  unreachable, !dbg !1958
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.core.mem.allocator.TrackingAllocator.allocation_count(ptr %0) #0 comdat !dbg !1961 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1962
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1962
  br i1 %2, label %panic, label %checkok, !dbg !1962

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1963, !DIExpression(), !1962)
  %3 = load ptr, ptr %self, align 8, !dbg !1962
  %ptradd = getelementptr inbounds i8, ptr %3, i64 16, !dbg !1962
  %ptradd3 = getelementptr inbounds i8, ptr %ptradd, i64 32, !dbg !1962
  %4 = load i32, ptr %ptradd3, align 8, !dbg !1962
  %zext = zext i32 %4 to i64, !dbg !1962
  ret i64 %zext, !dbg !1962

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.95, i64 21 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.105, i64 16 }, ptr %indirectarg2, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 81) #6, !dbg !1962
  unreachable, !dbg !1962
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.core.mem.allocator.TrackingAllocator.acquire(ptr %0, ptr %1, i64 %2, i32 %3, i64 %4) #0 comdat !dbg !1964 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %size = alloca i64, align 8
  %init_type = alloca i32, align 4
  %alignment = alloca i64, align 8
  %data = alloca ptr, align 8
  %error_var = alloca i64, align 8
  %x = alloca i64, align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg13 = alloca %"char[]", align 8
  %indirectarg14 = alloca %"char[]", align 8
  %indirectarg15 = alloca %"char[]", align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %indirectarg18 = alloca %"char[]", align 8
  %indirectarg19 = alloca %"char[]", align 8
  %indirectarg20 = alloca %"char[]", align 8
  %retparam = alloca ptr, align 8
  %bt = alloca [16 x ptr], align 16
  %sretparam = alloca %"void*[]", align 8
  %indirectarg22 = alloca %"void*[]", align 8
  %literal = alloca %Allocation, align 8
  %indirectarg26 = alloca %Allocation, align 8
  %reterr = alloca i64, align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !1967
  %5 = icmp eq ptr %1, null, !dbg !1967
  %6 = call i1 @llvm.expect.i1(i1 %5, i1 false), !dbg !1967
  br i1 %6, label %panic, label %checkok, !dbg !1967

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !1968, !DIExpression(), !1969)
  store i64 %2, ptr %size, align 8
    #dbg_declare(ptr %size, !1970, !DIExpression(), !1969)
  store i32 %3, ptr %init_type, align 4
    #dbg_declare(ptr %init_type, !1971, !DIExpression(), !1969)
  store i64 %4, ptr %alignment, align 8
    #dbg_declare(ptr %alignment, !1972, !DIExpression(), !1969)
    #dbg_declare(ptr %data, !1973, !DIExpression(), !1974)
  %7 = load ptr, ptr %self, align 8, !dbg !1974
  %8 = load i64, ptr %size, align 8, !dbg !1974
  %9 = load i32, ptr %init_type, align 4, !dbg !1974
  %10 = load i64, ptr %alignment, align 8, !dbg !1974
  %i2nb = icmp eq i64 %10, 0, !dbg !1975
  br i1 %i2nb, label %or.phi, label %or.rhs, !dbg !1975

or.rhs:                                           ; preds = %checkok
  store i64 %10, ptr %x, align 8
  %11 = load i64, ptr %x, align 8, !dbg !1976
  %neq = icmp ne i64 0, %11, !dbg !1976
  br i1 %neq, label %and.rhs, label %and.phi, !dbg !1976

and.rhs:                                          ; preds = %or.rhs
  %12 = load i64, ptr %x, align 8, !dbg !1976
  %13 = load i64, ptr %x, align 8, !dbg !1976
  %sub = sub i64 %13, 1, !dbg !1976
  %and = and i64 %12, %sub, !dbg !1976
  %eq = icmp eq i64 %and, 0, !dbg !1976
  br label %and.phi, !dbg !1976

and.phi:                                          ; preds = %and.rhs, %or.rhs
  %val = phi i1 [ false, %or.rhs ], [ %eq, %and.rhs ], !dbg !1976
  br label %or.phi, !dbg !1976

or.phi:                                           ; preds = %and.phi, %checkok
  %val3 = phi i1 [ true, %checkok ], [ %val, %and.phi ], !dbg !1976
  br i1 %val3, label %assert_ok, label %assert_fail, !dbg !1976

assert_fail:                                      ; preds = %or.phi
  store %"char[]" { ptr @.panic_msg.11, i64 65 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.95, i64 21 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg6, align 8
  %14 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %14(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 85) #6, !dbg !1974
  unreachable, !dbg !1974

assert_ok:                                        ; preds = %or.phi
  %le = icmp ule i64 %10, 268435456, !dbg !1974
  br i1 %le, label %assert_ok11, label %assert_fail7, !dbg !1974

assert_fail7:                                     ; preds = %assert_ok
  store %"char[]" { ptr @.panic_msg.12, i64 80 }, ptr %indirectarg8, align 8
  store %"char[]" { ptr @.file.95, i64 21 }, ptr %indirectarg9, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg10, align 8
  %15 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %15(ptr align 8 %indirectarg8, ptr align 8 %indirectarg9, ptr align 8 %indirectarg10, i32 85) #6, !dbg !1974
  unreachable, !dbg !1974

assert_ok11:                                      ; preds = %assert_ok
  %lt = icmp ult i64 0, %8, !dbg !1974
  br i1 %lt, label %assert_ok16, label %assert_fail12, !dbg !1974

assert_fail12:                                    ; preds = %assert_ok11
  store %"char[]" { ptr @.panic_msg.25, i64 59 }, ptr %indirectarg13, align 8
  store %"char[]" { ptr @.file.95, i64 21 }, ptr %indirectarg14, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg15, align 8
  %16 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %16(ptr align 8 %indirectarg13, ptr align 8 %indirectarg14, ptr align 8 %indirectarg15, i32 85) #6, !dbg !1974
  unreachable, !dbg !1974

assert_ok16:                                      ; preds = %assert_ok11
  %ptradd = getelementptr inbounds i8, ptr %7, i64 8, !dbg !1974
  %17 = load i64, ptr %ptradd, align 8, !dbg !1974
  %18 = inttoptr i64 %17 to ptr, !dbg !1974
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !1967
  %19 = icmp eq ptr %18, %type, !dbg !1967
  br i1 %19, label %cache_hit, label %cache_miss, !dbg !1967

cache_miss:                                       ; preds = %assert_ok16
  %ptradd17 = getelementptr inbounds i8, ptr %18, i64 16, !dbg !1967
  %20 = load ptr, ptr %ptradd17, align 8, !dbg !1967
  %21 = call ptr @.dyn_search(ptr %20, ptr @"$sel.acquire"), !dbg !1967
  store ptr %21, ptr %.inlinecache, align 8, !dbg !1967
  store ptr %18, ptr %.cachedtype, align 8, !dbg !1967
  br label %22, !dbg !1967

cache_hit:                                        ; preds = %assert_ok16
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !1967
  br label %22, !dbg !1967

22:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %21, %cache_miss ], !dbg !1967
  %23 = icmp eq ptr %fn_phi, null, !dbg !1967
  br i1 %23, label %missing_function, label %match, !dbg !1967

missing_function:                                 ; preds = %22
  store %"char[]" { ptr @.panic_msg.26, i64 44 }, ptr %indirectarg18, align 8
  store %"char[]" { ptr @.file.95, i64 21 }, ptr %indirectarg19, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg20, align 8
  %24 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %24(ptr align 8 %indirectarg18, ptr align 8 %indirectarg19, ptr align 8 %indirectarg20, i32 85) #6, !dbg !1974
  unreachable, !dbg !1974

match:                                            ; preds = %22
  %25 = load ptr, ptr %7, align 8
  %26 = call i64 %fn_phi(ptr %retparam, ptr %25, i64 %8, i32 %9, i64 %10), !dbg !1974
  %not_err = icmp eq i64 %26, 0, !dbg !1974
  %27 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1974
  br i1 %27, label %after_check, label %assign_optional, !dbg !1974

assign_optional:                                  ; preds = %match
  store i64 %26, ptr %error_var, align 8, !dbg !1974
  br label %guard_block, !dbg !1974

after_check:                                      ; preds = %match
  br label %noerr_block, !dbg !1974

guard_block:                                      ; preds = %assign_optional
  %28 = load i64, ptr %error_var, align 8, !dbg !1974
  ret i64 %28, !dbg !1974

noerr_block:                                      ; preds = %after_check
  %29 = load ptr, ptr %retparam, align 8, !dbg !1974
  store ptr %29, ptr %data, align 8, !dbg !1974
  %30 = load ptr, ptr %self, align 8, !dbg !1978
  %ptradd21 = getelementptr inbounds i8, ptr %30, i64 72, !dbg !1978
  %31 = load i64, ptr %ptradd21, align 8, !dbg !1978
  %add = add i64 %31, 1, !dbg !1978
  store i64 %add, ptr %ptradd21, align 8, !dbg !1978
    #dbg_declare(ptr %bt, !1979, !DIExpression(), !1980)
  call void @llvm.memset.p0.i64(ptr align 16 %bt, i8 0, i64 128, i1 false), !dbg !1980
  %32 = insertvalue %"void*[]" undef, ptr %bt, 0, !dbg !1981
  %33 = insertvalue %"void*[]" %32, i64 16, 1, !dbg !1981
  store %"void*[]" %33, ptr %indirectarg22, align 8
  call void @std.os.backtrace.capture_current(ptr sret(%"void*[]") align 8 %sretparam, ptr align 8 %indirectarg22), !dbg !1981
  %34 = load ptr, ptr %self, align 8, !dbg !1982
  %ptradd23 = getelementptr inbounds i8, ptr %34, i64 16, !dbg !1982
  %35 = load ptr, ptr %data, align 8, !dbg !1982
  %ptrxi = ptrtoint ptr %35 to i64, !dbg !1982
  %36 = load ptr, ptr %data, align 8, !dbg !1982
  store ptr %36, ptr %literal, align 8, !dbg !1982
  %ptradd24 = getelementptr inbounds i8, ptr %literal, i64 8, !dbg !1982
  %37 = load i64, ptr %size, align 8, !dbg !1982
  store i64 %37, ptr %ptradd24, align 8, !dbg !1982
  %ptradd25 = getelementptr inbounds i8, ptr %literal, i64 16, !dbg !1982
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %ptradd25, ptr align 16 %bt, i32 128, i1 false), !dbg !1982
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg26, ptr align 8 %literal, i32 144, i1 false)
  %38 = call i8 @"std_collections_map$ulong$std.core.mem.allocator.Allocation$.HashMap.set"(ptr %ptradd23, i64 %ptrxi, ptr align 8 %indirectarg26), !dbg !1982
  %39 = load ptr, ptr %self, align 8, !dbg !1983
  %ptradd27 = getelementptr inbounds i8, ptr %39, i64 64, !dbg !1983
  %40 = load i64, ptr %ptradd27, align 8, !dbg !1983
  %41 = load i64, ptr %size, align 8, !dbg !1983
  %add28 = add i64 %40, %41, !dbg !1983
  store i64 %add28, ptr %ptradd27, align 8, !dbg !1983
  %42 = load ptr, ptr %data, align 8, !dbg !1984
  store ptr %42, ptr %0, align 8, !dbg !1984
  ret i64 0, !dbg !1984

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.95, i64 21 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg2, align 8
  %43 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %43(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 83) #6, !dbg !1969
  unreachable, !dbg !1969
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.core.mem.allocator.TrackingAllocator.resize(ptr %0, ptr %1, ptr %2, i64 %3, i64 %4) #0 comdat !dbg !1985 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %old_pointer = alloca ptr, align 8
  %size = alloca i64, align 8
  %alignment = alloca i64, align 8
  %data = alloca ptr, align 8
  %error_var = alloca i64, align 8
  %x = alloca i64, align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg14 = alloca %"char[]", align 8
  %indirectarg15 = alloca %"char[]", align 8
  %indirectarg16 = alloca %"char[]", align 8
  %indirectarg19 = alloca %"char[]", align 8
  %indirectarg20 = alloca %"char[]", align 8
  %indirectarg21 = alloca %"char[]", align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %indirectarg24 = alloca %"char[]", align 8
  %indirectarg25 = alloca %"char[]", align 8
  %indirectarg26 = alloca %"char[]", align 8
  %retparam = alloca ptr, align 8
  %bt = alloca [16 x ptr], align 16
  %sretparam = alloca %"void*[]", align 8
  %indirectarg30 = alloca %"void*[]", align 8
  %literal = alloca %Allocation, align 8
  %indirectarg35 = alloca %Allocation, align 8
  %reterr = alloca i64, align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !1988
  %5 = icmp eq ptr %1, null, !dbg !1988
  %6 = call i1 @llvm.expect.i1(i1 %5, i1 false), !dbg !1988
  br i1 %6, label %panic, label %checkok, !dbg !1988

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !1989, !DIExpression(), !1990)
  store ptr %2, ptr %old_pointer, align 8
    #dbg_declare(ptr %old_pointer, !1991, !DIExpression(), !1990)
  store i64 %3, ptr %size, align 8
    #dbg_declare(ptr %size, !1992, !DIExpression(), !1990)
  store i64 %4, ptr %alignment, align 8
    #dbg_declare(ptr %alignment, !1993, !DIExpression(), !1990)
    #dbg_declare(ptr %data, !1994, !DIExpression(), !1995)
  %7 = load ptr, ptr %self, align 8, !dbg !1995
  %8 = load ptr, ptr %old_pointer, align 8, !dbg !1995
  %9 = load i64, ptr %size, align 8, !dbg !1995
  %10 = load i64, ptr %alignment, align 8, !dbg !1995
  %i2nb = icmp eq i64 %10, 0, !dbg !1996
  br i1 %i2nb, label %or.phi, label %or.rhs, !dbg !1996

or.rhs:                                           ; preds = %checkok
  store i64 %10, ptr %x, align 8
  %11 = load i64, ptr %x, align 8, !dbg !1997
  %neq = icmp ne i64 0, %11, !dbg !1997
  br i1 %neq, label %and.rhs, label %and.phi, !dbg !1997

and.rhs:                                          ; preds = %or.rhs
  %12 = load i64, ptr %x, align 8, !dbg !1997
  %13 = load i64, ptr %x, align 8, !dbg !1997
  %sub = sub i64 %13, 1, !dbg !1997
  %and = and i64 %12, %sub, !dbg !1997
  %eq = icmp eq i64 %and, 0, !dbg !1997
  br label %and.phi, !dbg !1997

and.phi:                                          ; preds = %and.rhs, %or.rhs
  %val = phi i1 [ false, %or.rhs ], [ %eq, %and.rhs ], !dbg !1997
  br label %or.phi, !dbg !1997

or.phi:                                           ; preds = %and.phi, %checkok
  %val3 = phi i1 [ true, %checkok ], [ %val, %and.phi ], !dbg !1997
  br i1 %val3, label %assert_ok, label %assert_fail, !dbg !1997

assert_fail:                                      ; preds = %or.phi
  store %"char[]" { ptr @.panic_msg.11, i64 65 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.95, i64 21 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg6, align 8
  %14 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %14(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 96) #6, !dbg !1995
  unreachable, !dbg !1995

assert_ok:                                        ; preds = %or.phi
  %le = icmp ule i64 %10, 268435456, !dbg !1995
  br i1 %le, label %assert_ok11, label %assert_fail7, !dbg !1995

assert_fail7:                                     ; preds = %assert_ok
  store %"char[]" { ptr @.panic_msg.12, i64 80 }, ptr %indirectarg8, align 8
  store %"char[]" { ptr @.file.95, i64 21 }, ptr %indirectarg9, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg10, align 8
  %15 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %15(ptr align 8 %indirectarg8, ptr align 8 %indirectarg9, ptr align 8 %indirectarg10, i32 96) #6, !dbg !1995
  unreachable, !dbg !1995

assert_ok11:                                      ; preds = %assert_ok
  %neq12 = icmp ne ptr %8, null, !dbg !1995
  br i1 %neq12, label %assert_ok17, label %assert_fail13, !dbg !1995

assert_fail13:                                    ; preds = %assert_ok11
  store %"char[]" { ptr @.panic_msg.7, i64 32 }, ptr %indirectarg14, align 8
  store %"char[]" { ptr @.file.95, i64 21 }, ptr %indirectarg15, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg16, align 8
  %16 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %16(ptr align 8 %indirectarg14, ptr align 8 %indirectarg15, ptr align 8 %indirectarg16, i32 96) #6, !dbg !1995
  unreachable, !dbg !1995

assert_ok17:                                      ; preds = %assert_ok11
  %lt = icmp ult i64 0, %9, !dbg !1995
  br i1 %lt, label %assert_ok22, label %assert_fail18, !dbg !1995

assert_fail18:                                    ; preds = %assert_ok17
  store %"char[]" { ptr @.panic_msg.81, i64 33 }, ptr %indirectarg19, align 8
  store %"char[]" { ptr @.file.95, i64 21 }, ptr %indirectarg20, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg21, align 8
  %17 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %17(ptr align 8 %indirectarg19, ptr align 8 %indirectarg20, ptr align 8 %indirectarg21, i32 96) #6, !dbg !1995
  unreachable, !dbg !1995

assert_ok22:                                      ; preds = %assert_ok17
  %ptradd = getelementptr inbounds i8, ptr %7, i64 8, !dbg !1995
  %18 = load i64, ptr %ptradd, align 8, !dbg !1995
  %19 = inttoptr i64 %18 to ptr, !dbg !1995
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !1988
  %20 = icmp eq ptr %19, %type, !dbg !1988
  br i1 %20, label %cache_hit, label %cache_miss, !dbg !1988

cache_miss:                                       ; preds = %assert_ok22
  %ptradd23 = getelementptr inbounds i8, ptr %19, i64 16, !dbg !1988
  %21 = load ptr, ptr %ptradd23, align 8, !dbg !1988
  %22 = call ptr @.dyn_search(ptr %21, ptr @"$sel.resize"), !dbg !1988
  store ptr %22, ptr %.inlinecache, align 8, !dbg !1988
  store ptr %19, ptr %.cachedtype, align 8, !dbg !1988
  br label %23, !dbg !1988

cache_hit:                                        ; preds = %assert_ok22
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !1988
  br label %23, !dbg !1988

23:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %22, %cache_miss ], !dbg !1988
  %24 = icmp eq ptr %fn_phi, null, !dbg !1988
  br i1 %24, label %missing_function, label %match, !dbg !1988

missing_function:                                 ; preds = %23
  store %"char[]" { ptr @.panic_msg.82, i64 43 }, ptr %indirectarg24, align 8
  store %"char[]" { ptr @.file.95, i64 21 }, ptr %indirectarg25, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg26, align 8
  %25 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %25(ptr align 8 %indirectarg24, ptr align 8 %indirectarg25, ptr align 8 %indirectarg26, i32 96) #6, !dbg !1995
  unreachable, !dbg !1995

match:                                            ; preds = %23
  %26 = load ptr, ptr %7, align 8
  %27 = call i64 %fn_phi(ptr %retparam, ptr %26, ptr %8, i64 %9, i64 %10), !dbg !1995
  %not_err = icmp eq i64 %27, 0, !dbg !1995
  %28 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1995
  br i1 %28, label %after_check, label %assign_optional, !dbg !1995

assign_optional:                                  ; preds = %match
  store i64 %27, ptr %error_var, align 8, !dbg !1995
  br label %guard_block, !dbg !1995

after_check:                                      ; preds = %match
  br label %noerr_block, !dbg !1995

guard_block:                                      ; preds = %assign_optional
  %29 = load i64, ptr %error_var, align 8, !dbg !1995
  ret i64 %29, !dbg !1995

noerr_block:                                      ; preds = %after_check
  %30 = load ptr, ptr %retparam, align 8, !dbg !1995
  store ptr %30, ptr %data, align 8, !dbg !1995
  %31 = load ptr, ptr %self, align 8, !dbg !1999
  %ptradd27 = getelementptr inbounds i8, ptr %31, i64 16, !dbg !1999
  %32 = load ptr, ptr %old_pointer, align 8, !dbg !1999
  %ptrxi = ptrtoint ptr %32 to i64, !dbg !1999
  %33 = call i64 @"std_collections_map$ulong$std.core.mem.allocator.Allocation$.HashMap.remove"(ptr %ptradd27, i64 %ptrxi), !dbg !1999
    #dbg_declare(ptr %bt, !2000, !DIExpression(), !2001)
  call void @llvm.memset.p0.i64(ptr align 16 %bt, i8 0, i64 128, i1 false), !dbg !2001
  %34 = insertvalue %"void*[]" undef, ptr %bt, 0, !dbg !2002
  %35 = insertvalue %"void*[]" %34, i64 16, 1, !dbg !2002
  store %"void*[]" %35, ptr %indirectarg30, align 8
  call void @std.os.backtrace.capture_current(ptr sret(%"void*[]") align 8 %sretparam, ptr align 8 %indirectarg30), !dbg !2002
  %36 = load ptr, ptr %self, align 8, !dbg !2003
  %ptradd31 = getelementptr inbounds i8, ptr %36, i64 16, !dbg !2003
  %37 = load ptr, ptr %data, align 8, !dbg !2003
  %ptrxi32 = ptrtoint ptr %37 to i64, !dbg !2003
  %38 = load ptr, ptr %data, align 8, !dbg !2003
  store ptr %38, ptr %literal, align 8, !dbg !2003
  %ptradd33 = getelementptr inbounds i8, ptr %literal, i64 8, !dbg !2003
  %39 = load i64, ptr %size, align 8, !dbg !2003
  store i64 %39, ptr %ptradd33, align 8, !dbg !2003
  %ptradd34 = getelementptr inbounds i8, ptr %literal, i64 16, !dbg !2003
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %ptradd34, ptr align 16 %bt, i32 128, i1 false), !dbg !2003
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg35, ptr align 8 %literal, i32 144, i1 false)
  %40 = call i8 @"std_collections_map$ulong$std.core.mem.allocator.Allocation$.HashMap.set"(ptr %ptradd31, i64 %ptrxi32, ptr align 8 %indirectarg35), !dbg !2003
  %41 = load ptr, ptr %self, align 8, !dbg !2004
  %ptradd36 = getelementptr inbounds i8, ptr %41, i64 64, !dbg !2004
  %42 = load i64, ptr %ptradd36, align 8, !dbg !2004
  %43 = load i64, ptr %size, align 8, !dbg !2004
  %add = add i64 %42, %43, !dbg !2004
  store i64 %add, ptr %ptradd36, align 8, !dbg !2004
  %44 = load ptr, ptr %self, align 8, !dbg !2005
  %ptradd37 = getelementptr inbounds i8, ptr %44, i64 72, !dbg !2005
  %45 = load i64, ptr %ptradd37, align 8, !dbg !2005
  %add38 = add i64 %45, 1, !dbg !2005
  store i64 %add38, ptr %ptradd37, align 8, !dbg !2005
  %46 = load ptr, ptr %data, align 8, !dbg !2006
  store ptr %46, ptr %0, align 8, !dbg !2006
  ret i64 0, !dbg !2006

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.95, i64 21 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg2, align 8
  %47 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %47(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 94) #6, !dbg !1990
  unreachable, !dbg !1990
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.core.mem.allocator.TrackingAllocator.release(ptr %0, ptr %1, i8 zeroext %2) #0 comdat !dbg !2007 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %old_pointer = alloca ptr, align 8
  %is_aligned = alloca i8, align 1
  %temp_err = alloca i64, align 8
  %string = alloca %"char[]", align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"any[]", align 8
  %indirectarg7 = alloca %"char[]", align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %indirectarg12 = alloca %"char[]", align 8
  %indirectarg13 = alloca %"char[]", align 8
  %indirectarg14 = alloca %"char[]", align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !2010
  %3 = icmp eq ptr %0, null, !dbg !2010
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !2010
  br i1 %4, label %panic, label %checkok, !dbg !2010

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2011, !DIExpression(), !2012)
  store ptr %1, ptr %old_pointer, align 8
    #dbg_declare(ptr %old_pointer, !2013, !DIExpression(), !2012)
  store i8 %2, ptr %is_aligned, align 1
    #dbg_declare(ptr %is_aligned, !2014, !DIExpression(), !2012)
  br label %testblock

testblock:                                        ; preds = %checkok
  %5 = load ptr, ptr %self, align 8, !dbg !2015
  %ptradd = getelementptr inbounds i8, ptr %5, i64 16, !dbg !2015
  %6 = load ptr, ptr %old_pointer, align 8, !dbg !2015
  %ptrxi = ptrtoint ptr %6 to i64, !dbg !2015
  %7 = call i64 @"std_collections_map$ulong$std.core.mem.allocator.Allocation$.HashMap.remove"(ptr %ptradd, i64 %ptrxi), !dbg !2015
  %not_err = icmp eq i64 %7, 0, !dbg !2015
  %8 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !2015
  br i1 %8, label %after_check, label %assign_optional, !dbg !2015

assign_optional:                                  ; preds = %testblock
  store i64 %7, ptr %temp_err, align 8, !dbg !2015
  br label %end_block, !dbg !2015

after_check:                                      ; preds = %testblock
  store i64 0, ptr %temp_err, align 8, !dbg !2015
  br label %end_block, !dbg !2015

end_block:                                        ; preds = %after_check, %assign_optional
  %9 = load i64, ptr %temp_err, align 8, !dbg !2015
  %i2b = icmp ne i64 %9, 0, !dbg !2015
  br i1 %i2b, label %if.then, label %if.exit, !dbg !2015

if.then:                                          ; preds = %end_block
  store %"char[]" { ptr @.str.106, i64 62 }, ptr %string, align 8
  %10 = insertvalue %any undef, ptr %old_pointer, 0, !dbg !2016
  %11 = insertvalue %any %10, i64 ptrtoint (ptr @"$ct.p$void" to i64), 1, !dbg !2016
  store %any %11, ptr %varargslots, align 16, !dbg !2016
  %12 = insertvalue %"any[]" undef, ptr %varargslots, 0, !dbg !2016
  %"$$temp" = insertvalue %"any[]" %12, i64 1, 1, !dbg !2016
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg3, ptr align 8 %string, i32 16, i1 false)
  store %"char[]" { ptr @.str.107, i64 21 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.str.108, i64 25 }, ptr %indirectarg5, align 8
  store %"any[]" %"$$temp", ptr %indirectarg6, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, i32 110, ptr align 8 %indirectarg6), !dbg !2020
  unreachable, !dbg !2020

if.exit:                                          ; preds = %end_block
  %13 = load ptr, ptr %self, align 8, !dbg !2021
  %14 = load ptr, ptr %old_pointer, align 8, !dbg !2021
  %15 = load i8, ptr %is_aligned, align 1, !dbg !2021
  %16 = trunc i8 %15 to i1, !dbg !2021
  %neq = icmp ne ptr %14, null, !dbg !2021
  br i1 %neq, label %assert_ok, label %assert_fail, !dbg !2021

assert_fail:                                      ; preds = %if.exit
  store %"char[]" { ptr @.panic_msg.28, i64 75 }, ptr %indirectarg7, align 8
  store %"char[]" { ptr @.file.95, i64 21 }, ptr %indirectarg8, align 8
  store %"char[]" { ptr @.func.6, i64 7 }, ptr %indirectarg9, align 8
  %17 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %17(ptr align 8 %indirectarg7, ptr align 8 %indirectarg8, ptr align 8 %indirectarg9, i32 112) #6, !dbg !2021
  unreachable, !dbg !2021

assert_ok:                                        ; preds = %if.exit
  %ptradd10 = getelementptr inbounds i8, ptr %13, i64 8, !dbg !2021
  %18 = load i64, ptr %ptradd10, align 8, !dbg !2021
  %19 = inttoptr i64 %18 to ptr, !dbg !2021
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !2010
  %20 = icmp eq ptr %19, %type, !dbg !2010
  br i1 %20, label %cache_hit, label %cache_miss, !dbg !2010

cache_miss:                                       ; preds = %assert_ok
  %ptradd11 = getelementptr inbounds i8, ptr %19, i64 16, !dbg !2010
  %21 = load ptr, ptr %ptradd11, align 8, !dbg !2010
  %22 = call ptr @.dyn_search(ptr %21, ptr @"$sel.release"), !dbg !2010
  store ptr %22, ptr %.inlinecache, align 8, !dbg !2010
  store ptr %19, ptr %.cachedtype, align 8, !dbg !2010
  br label %23, !dbg !2010

cache_hit:                                        ; preds = %assert_ok
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !2010
  br label %23, !dbg !2010

23:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %22, %cache_miss ], !dbg !2010
  %24 = icmp eq ptr %fn_phi, null, !dbg !2010
  br i1 %24, label %missing_function, label %match, !dbg !2010

missing_function:                                 ; preds = %23
  store %"char[]" { ptr @.panic_msg.29, i64 44 }, ptr %indirectarg12, align 8
  store %"char[]" { ptr @.file.95, i64 21 }, ptr %indirectarg13, align 8
  store %"char[]" { ptr @.func.6, i64 7 }, ptr %indirectarg14, align 8
  %25 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %25(ptr align 8 %indirectarg12, ptr align 8 %indirectarg13, ptr align 8 %indirectarg14, i32 112) #6, !dbg !2021
  unreachable, !dbg !2021

match:                                            ; preds = %23
  %26 = load ptr, ptr %13, align 8, !dbg !2021
  %27 = zext i1 %16 to i8, !dbg !2021
  call void %fn_phi(ptr %26, ptr %14, i8 zeroext %27), !dbg !2021
  ret void, !dbg !2021

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.95, i64 21 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.6, i64 7 }, ptr %indirectarg2, align 8
  %28 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %28(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 106) #6, !dbg !2012
  unreachable, !dbg !2012
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.core.mem.allocator.TrackingAllocator.clear(ptr %0) #0 comdat !dbg !2022 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2023
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2023
  br i1 %2, label %panic, label %checkok, !dbg !2023

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2024, !DIExpression(), !2025)
  %3 = load ptr, ptr %self, align 8, !dbg !2026
  %ptradd = getelementptr inbounds i8, ptr %3, i64 16, !dbg !2026
  call void @"std_collections_map$ulong$std.core.mem.allocator.Allocation$.HashMap.clear"(ptr %ptradd), !dbg !2026
  ret void, !dbg !2026

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.95, i64 21 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.2, i64 5 }, ptr %indirectarg2, align 8
  %4 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %4(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 115) #6, !dbg !2025
  unreachable, !dbg !2025
}

; Function Attrs: nounwind ssp uwtable
define weak_odr zeroext i8 @std.core.mem.allocator.TrackingAllocator.has_leaks(ptr %0) #0 comdat !dbg !2027 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2030
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2030
  br i1 %2, label %panic, label %checkok, !dbg !2030

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2031, !DIExpression(), !2032)
  %3 = load ptr, ptr %self, align 8, !dbg !2033
  %ptradd = getelementptr inbounds i8, ptr %3, i64 16, !dbg !2033
  %4 = call i64 @"std_collections_map$ulong$std.core.mem.allocator.Allocation$.HashMap.len"(ptr %ptradd) #7, !dbg !2033
  %lt = icmp ult i64 0, %4, !dbg !2033
  %5 = zext i1 %lt to i8, !dbg !2033
  ret i8 %5, !dbg !2033

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.95, i64 21 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.109, i64 9 }, ptr %indirectarg2, align 8
  %6 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %6(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 120) #6, !dbg !2032
  unreachable, !dbg !2032
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.core.mem.allocator.TrackingAllocator.print_report(ptr %0) #0 comdat !dbg !2034 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %error_var = alloca i64, align 8
  %indirectarg3 = alloca %any, align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg7 = alloca %"any[]", align 8
  %1 = icmp eq ptr %0, null, !dbg !2035
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2035
  br i1 %2, label %panic, label %checkok, !dbg !2035

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2036, !DIExpression(), !2035)
  %3 = call ptr @std.io.stdout(), !dbg !2035
  %4 = insertvalue %any undef, ptr %3, 0, !dbg !2035
  %5 = insertvalue %any %4, i64 ptrtoint (ptr @"$ct.std.io.File" to i64), 1, !dbg !2035
  %6 = load ptr, ptr %self, align 8, !dbg !2035
  store %any %5, ptr %indirectarg3, align 8
  %7 = call i64 @std.core.mem.allocator.TrackingAllocator.fprint_report(ptr %6, ptr align 8 %indirectarg3), !dbg !2035
  %not_err = icmp eq i64 %7, 0, !dbg !2035
  %8 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !2035
  br i1 %8, label %after_check, label %assign_optional, !dbg !2035

assign_optional:                                  ; preds = %checkok
  store i64 %7, ptr %error_var, align 8, !dbg !2035
  br label %panic_block, !dbg !2035

after_check:                                      ; preds = %checkok
  br label %noerr_block, !dbg !2035

panic_block:                                      ; preds = %assign_optional
  %9 = insertvalue %any undef, ptr %error_var, 0, !dbg !2035
  %10 = insertvalue %any %9, i64 ptrtoint (ptr @"$ct.fault" to i64), 1, !dbg !2035
  store %"char[]" { ptr @.panic_msg.32, i64 36 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.95, i64 21 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.110, i64 12 }, ptr %indirectarg6, align 8
  store %any %10, ptr %varargslots, align 16
  %11 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %11, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg7, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 125, ptr align 8 %indirectarg7) #6, !dbg !2035
  unreachable, !dbg !2035

noerr_block:                                      ; preds = %after_check
  ret void, !dbg !2035

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.95, i64 21 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.110, i64 12 }, ptr %indirectarg2, align 8
  %12 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %12(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 125) #6, !dbg !2035
  unreachable, !dbg !2035
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.core.mem.allocator.TrackingAllocator.fprint_report(ptr %0, ptr align 8 %1) #0 comdat !dbg !2037 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %reserve = alloca i64, align 8
  %state = alloca ptr, align 8
  %total = alloca i64, align 8
  %entries = alloca i64, align 8
  %leaks = alloca i8, align 1
  %allocs = alloca %"Allocation[]", align 8
  %taddr = alloca i64, align 8
  %taddr6 = alloca i64, align 8
  %indirectarg7 = alloca %"char[]", align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg11 = alloca %"any[]", align 8
  %taddr14 = alloca i64, align 8
  %taddr15 = alloca i64, align 8
  %indirectarg16 = alloca %"char[]", align 8
  %indirectarg17 = alloca %"char[]", align 8
  %indirectarg18 = alloca %"char[]", align 8
  %varargslots19 = alloca [2 x %any], align 16
  %indirectarg22 = alloca %"any[]", align 8
  %error_var = alloca i64, align 8
  %out = alloca %any, align 8
  %x = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %error_var26 = alloca i64, align 8
  %out27 = alloca %any, align 8
  %x28 = alloca %"char[]", align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %indirectarg32 = alloca %"char[]", align 8
  %indirectarg33 = alloca %"char[]", align 8
  %indirectarg34 = alloca %"char[]", align 8
  %retparam = alloca i64, align 8
  %indirectarg35 = alloca %"char[]", align 8
  %error_var36 = alloca i64, align 8
  %.inlinecache38 = alloca ptr, align 8
  %.cachedtype39 = alloca ptr, align 8
  %indirectarg47 = alloca %"char[]", align 8
  %indirectarg48 = alloca %"char[]", align 8
  %indirectarg49 = alloca %"char[]", align 8
  %.inlinecache56 = alloca ptr, align 8
  %.cachedtype57 = alloca ptr, align 8
  %error_var66 = alloca i64, align 8
  %.inlinecache68 = alloca ptr, align 8
  %.cachedtype69 = alloca ptr, align 8
  %indirectarg77 = alloca %"char[]", align 8
  %indirectarg78 = alloca %"char[]", align 8
  %indirectarg79 = alloca %"char[]", align 8
  %error_var88 = alloca i64, align 8
  %out89 = alloca %any, align 8
  %x90 = alloca %"char[]", align 8
  %len91 = alloca i64, align 8
  %error_var92 = alloca i64, align 8
  %out93 = alloca %any, align 8
  %x94 = alloca %"char[]", align 8
  %.inlinecache97 = alloca ptr, align 8
  %.cachedtype98 = alloca ptr, align 8
  %indirectarg106 = alloca %"char[]", align 8
  %indirectarg107 = alloca %"char[]", align 8
  %indirectarg108 = alloca %"char[]", align 8
  %retparam110 = alloca i64, align 8
  %indirectarg111 = alloca %"char[]", align 8
  %error_var117 = alloca i64, align 8
  %.inlinecache119 = alloca ptr, align 8
  %.cachedtype120 = alloca ptr, align 8
  %indirectarg128 = alloca %"char[]", align 8
  %indirectarg129 = alloca %"char[]", align 8
  %indirectarg130 = alloca %"char[]", align 8
  %.inlinecache137 = alloca ptr, align 8
  %.cachedtype138 = alloca ptr, align 8
  %error_var147 = alloca i64, align 8
  %.inlinecache149 = alloca ptr, align 8
  %.cachedtype150 = alloca ptr, align 8
  %indirectarg158 = alloca %"char[]", align 8
  %indirectarg159 = alloca %"char[]", align 8
  %indirectarg160 = alloca %"char[]", align 8
  %.anon = alloca i64, align 8
  %i = alloca i64, align 8
  %allocation = alloca ptr, align 8
  %taddr175 = alloca i64, align 8
  %taddr176 = alloca i64, align 8
  %indirectarg177 = alloca %"char[]", align 8
  %indirectarg178 = alloca %"char[]", align 8
  %indirectarg179 = alloca %"char[]", align 8
  %varargslots180 = alloca [2 x %any], align 16
  %indirectarg183 = alloca %"any[]", align 8
  %error_var188 = alloca i64, align 8
  %varargslots189 = alloca [2 x %any], align 16
  %retparam193 = alloca i64, align 8
  %indirectarg194 = alloca %any, align 8
  %indirectarg195 = alloca %"char[]", align 8
  %indirectarg196 = alloca %"any[]", align 8
  %error_var202 = alloca i64, align 8
  %out203 = alloca %any, align 8
  %x204 = alloca %"char[]", align 8
  %len205 = alloca i64, align 8
  %error_var206 = alloca i64, align 8
  %out207 = alloca %any, align 8
  %x208 = alloca %"char[]", align 8
  %.inlinecache211 = alloca ptr, align 8
  %.cachedtype212 = alloca ptr, align 8
  %indirectarg220 = alloca %"char[]", align 8
  %indirectarg221 = alloca %"char[]", align 8
  %indirectarg222 = alloca %"char[]", align 8
  %retparam224 = alloca i64, align 8
  %indirectarg225 = alloca %"char[]", align 8
  %error_var231 = alloca i64, align 8
  %.inlinecache233 = alloca ptr, align 8
  %.cachedtype234 = alloca ptr, align 8
  %indirectarg242 = alloca %"char[]", align 8
  %indirectarg243 = alloca %"char[]", align 8
  %indirectarg244 = alloca %"char[]", align 8
  %.inlinecache251 = alloca ptr, align 8
  %.cachedtype252 = alloca ptr, align 8
  %error_var261 = alloca i64, align 8
  %.inlinecache263 = alloca ptr, align 8
  %.cachedtype264 = alloca ptr, align 8
  %indirectarg272 = alloca %"char[]", align 8
  %indirectarg273 = alloca %"char[]", align 8
  %indirectarg274 = alloca %"char[]", align 8
  %error_var285 = alloca i64, align 8
  %out286 = alloca %any, align 8
  %x287 = alloca %"char[]", align 8
  %len288 = alloca i64, align 8
  %error_var289 = alloca i64, align 8
  %out290 = alloca %any, align 8
  %x291 = alloca %"char[]", align 8
  %.inlinecache294 = alloca ptr, align 8
  %.cachedtype295 = alloca ptr, align 8
  %indirectarg303 = alloca %"char[]", align 8
  %indirectarg304 = alloca %"char[]", align 8
  %indirectarg305 = alloca %"char[]", align 8
  %retparam307 = alloca i64, align 8
  %indirectarg308 = alloca %"char[]", align 8
  %error_var314 = alloca i64, align 8
  %.inlinecache316 = alloca ptr, align 8
  %.cachedtype317 = alloca ptr, align 8
  %indirectarg325 = alloca %"char[]", align 8
  %indirectarg326 = alloca %"char[]", align 8
  %indirectarg327 = alloca %"char[]", align 8
  %.inlinecache334 = alloca ptr, align 8
  %.cachedtype335 = alloca ptr, align 8
  %error_var344 = alloca i64, align 8
  %.inlinecache346 = alloca ptr, align 8
  %.cachedtype347 = alloca ptr, align 8
  %indirectarg355 = alloca %"char[]", align 8
  %indirectarg356 = alloca %"char[]", align 8
  %indirectarg357 = alloca %"char[]", align 8
  %error_var368 = alloca i64, align 8
  %out369 = alloca %any, align 8
  %x370 = alloca %"char[]", align 8
  %len371 = alloca i64, align 8
  %error_var372 = alloca i64, align 8
  %out373 = alloca %any, align 8
  %x374 = alloca %"char[]", align 8
  %.inlinecache377 = alloca ptr, align 8
  %.cachedtype378 = alloca ptr, align 8
  %indirectarg386 = alloca %"char[]", align 8
  %indirectarg387 = alloca %"char[]", align 8
  %indirectarg388 = alloca %"char[]", align 8
  %retparam390 = alloca i64, align 8
  %indirectarg391 = alloca %"char[]", align 8
  %error_var397 = alloca i64, align 8
  %.inlinecache399 = alloca ptr, align 8
  %.cachedtype400 = alloca ptr, align 8
  %indirectarg408 = alloca %"char[]", align 8
  %indirectarg409 = alloca %"char[]", align 8
  %indirectarg410 = alloca %"char[]", align 8
  %.inlinecache417 = alloca ptr, align 8
  %.cachedtype418 = alloca ptr, align 8
  %error_var427 = alloca i64, align 8
  %.inlinecache429 = alloca ptr, align 8
  %.cachedtype430 = alloca ptr, align 8
  %indirectarg438 = alloca %"char[]", align 8
  %indirectarg439 = alloca %"char[]", align 8
  %indirectarg440 = alloca %"char[]", align 8
  %.anon452 = alloca i64, align 8
  %i456 = alloca i64, align 8
  %allocation457 = alloca ptr, align 8
  %taddr461 = alloca i64, align 8
  %taddr462 = alloca i64, align 8
  %indirectarg463 = alloca %"char[]", align 8
  %indirectarg464 = alloca %"char[]", align 8
  %indirectarg465 = alloca %"char[]", align 8
  %varargslots466 = alloca [2 x %any], align 16
  %indirectarg469 = alloca %"any[]", align 8
  %backtraces = alloca %List, align 8
  %trace = alloca %Backtrace, align 8
  %self479 = alloca ptr, align 8
  %self.f = alloca i64, align 8
  %retparam482 = alloca %List, align 8
  %indirectarg483 = alloca %any, align 8
  %indirectarg484 = alloca %"void*[]", align 8
  %indirectarg491 = alloca %"char[]", align 8
  %indirectarg492 = alloca %"char[]", align 8
  %indirectarg493 = alloca %"char[]", align 8
  %sretparam = alloca %Backtrace, align 8
  %error_var500 = alloca i64, align 8
  %varargslots501 = alloca [4 x %any], align 16
  %taddr509 = alloca %"char[]", align 8
  %taddr518 = alloca i32, align 4
  %retparam521 = alloca i64, align 8
  %indirectarg522 = alloca %any, align 8
  %indirectarg523 = alloca %"char[]", align 8
  %indirectarg524 = alloca %"any[]", align 8
  %error_var532 = alloca i64, align 8
  %out533 = alloca %any, align 8
  %x534 = alloca %"char[]", align 8
  %len535 = alloca i64, align 8
  %error_var536 = alloca i64, align 8
  %out537 = alloca %any, align 8
  %x538 = alloca %"char[]", align 8
  %.inlinecache541 = alloca ptr, align 8
  %.cachedtype542 = alloca ptr, align 8
  %indirectarg550 = alloca %"char[]", align 8
  %indirectarg551 = alloca %"char[]", align 8
  %indirectarg552 = alloca %"char[]", align 8
  %retparam554 = alloca i64, align 8
  %indirectarg555 = alloca %"char[]", align 8
  %error_var561 = alloca i64, align 8
  %.inlinecache563 = alloca ptr, align 8
  %.cachedtype564 = alloca ptr, align 8
  %indirectarg572 = alloca %"char[]", align 8
  %indirectarg573 = alloca %"char[]", align 8
  %indirectarg574 = alloca %"char[]", align 8
  %.inlinecache581 = alloca ptr, align 8
  %.cachedtype582 = alloca ptr, align 8
  %error_var591 = alloca i64, align 8
  %.inlinecache593 = alloca ptr, align 8
  %.cachedtype594 = alloca ptr, align 8
  %indirectarg602 = alloca %"char[]", align 8
  %indirectarg603 = alloca %"char[]", align 8
  %indirectarg604 = alloca %"char[]", align 8
  %error_var617 = alloca i64, align 8
  %out618 = alloca %any, align 8
  %x619 = alloca %"char[]", align 8
  %len620 = alloca i64, align 8
  %error_var621 = alloca i64, align 8
  %out622 = alloca %any, align 8
  %x623 = alloca %"char[]", align 8
  %.inlinecache626 = alloca ptr, align 8
  %.cachedtype627 = alloca ptr, align 8
  %indirectarg635 = alloca %"char[]", align 8
  %indirectarg636 = alloca %"char[]", align 8
  %indirectarg637 = alloca %"char[]", align 8
  %retparam639 = alloca i64, align 8
  %indirectarg640 = alloca %"char[]", align 8
  %error_var646 = alloca i64, align 8
  %.inlinecache648 = alloca ptr, align 8
  %.cachedtype649 = alloca ptr, align 8
  %indirectarg657 = alloca %"char[]", align 8
  %indirectarg658 = alloca %"char[]", align 8
  %indirectarg659 = alloca %"char[]", align 8
  %.inlinecache666 = alloca ptr, align 8
  %.cachedtype667 = alloca ptr, align 8
  %error_var676 = alloca i64, align 8
  %.inlinecache678 = alloca ptr, align 8
  %.cachedtype679 = alloca ptr, align 8
  %indirectarg687 = alloca %"char[]", align 8
  %indirectarg688 = alloca %"char[]", align 8
  %indirectarg689 = alloca %"char[]", align 8
  %error_var701 = alloca i64, align 8
  %varargslots702 = alloca [1 x %any], align 16
  %retparam704 = alloca i64, align 8
  %indirectarg705 = alloca %any, align 8
  %indirectarg706 = alloca %"char[]", align 8
  %indirectarg707 = alloca %"any[]", align 8
  %error_var713 = alloca i64, align 8
  %varargslots714 = alloca [1 x %any], align 16
  %retparam716 = alloca i64, align 8
  %indirectarg717 = alloca %any, align 8
  %indirectarg718 = alloca %"char[]", align 8
  %indirectarg719 = alloca %"any[]", align 8
  %error_var725 = alloca i64, align 8
  %varargslots726 = alloca [1 x %any], align 16
  %retparam729 = alloca i64, align 8
  %indirectarg730 = alloca %any, align 8
  %indirectarg731 = alloca %"char[]", align 8
  %indirectarg732 = alloca %"any[]", align 8
  %error_var738 = alloca i64, align 8
  %varargslots739 = alloca [1 x %any], align 16
  %retparam742 = alloca i64, align 8
  %indirectarg743 = alloca %any, align 8
  %indirectarg744 = alloca %"char[]", align 8
  %indirectarg745 = alloca %"any[]", align 8
  %error_var752 = alloca i64, align 8
  %out753 = alloca %any, align 8
  %x754 = alloca %"char[]", align 8
  %len755 = alloca i64, align 8
  %error_var756 = alloca i64, align 8
  %out757 = alloca %any, align 8
  %x758 = alloca %"char[]", align 8
  %.inlinecache761 = alloca ptr, align 8
  %.cachedtype762 = alloca ptr, align 8
  %indirectarg770 = alloca %"char[]", align 8
  %indirectarg771 = alloca %"char[]", align 8
  %indirectarg772 = alloca %"char[]", align 8
  %retparam774 = alloca i64, align 8
  %indirectarg775 = alloca %"char[]", align 8
  %error_var781 = alloca i64, align 8
  %.inlinecache783 = alloca ptr, align 8
  %.cachedtype784 = alloca ptr, align 8
  %indirectarg792 = alloca %"char[]", align 8
  %indirectarg793 = alloca %"char[]", align 8
  %indirectarg794 = alloca %"char[]", align 8
  %.inlinecache801 = alloca ptr, align 8
  %.cachedtype802 = alloca ptr, align 8
  %error_var811 = alloca i64, align 8
  %.inlinecache813 = alloca ptr, align 8
  %.cachedtype814 = alloca ptr, align 8
  %indirectarg822 = alloca %"char[]", align 8
  %indirectarg823 = alloca %"char[]", align 8
  %indirectarg824 = alloca %"char[]", align 8
  %error_var835 = alloca i64, align 8
  %out836 = alloca %any, align 8
  %x837 = alloca %"char[]", align 8
  %len838 = alloca i64, align 8
  %error_var839 = alloca i64, align 8
  %out840 = alloca %any, align 8
  %x841 = alloca %"char[]", align 8
  %.inlinecache844 = alloca ptr, align 8
  %.cachedtype845 = alloca ptr, align 8
  %indirectarg853 = alloca %"char[]", align 8
  %indirectarg854 = alloca %"char[]", align 8
  %indirectarg855 = alloca %"char[]", align 8
  %retparam857 = alloca i64, align 8
  %indirectarg858 = alloca %"char[]", align 8
  %error_var864 = alloca i64, align 8
  %.inlinecache866 = alloca ptr, align 8
  %.cachedtype867 = alloca ptr, align 8
  %indirectarg875 = alloca %"char[]", align 8
  %indirectarg876 = alloca %"char[]", align 8
  %indirectarg877 = alloca %"char[]", align 8
  %.inlinecache884 = alloca ptr, align 8
  %.cachedtype885 = alloca ptr, align 8
  %error_var894 = alloca i64, align 8
  %.inlinecache896 = alloca ptr, align 8
  %.cachedtype897 = alloca ptr, align 8
  %indirectarg905 = alloca %"char[]", align 8
  %indirectarg906 = alloca %"char[]", align 8
  %indirectarg907 = alloca %"char[]", align 8
  %.anon919 = alloca i64, align 8
  %i923 = alloca i64, align 8
  %allocation924 = alloca ptr, align 8
  %taddr928 = alloca i64, align 8
  %taddr929 = alloca i64, align 8
  %indirectarg930 = alloca %"char[]", align 8
  %indirectarg931 = alloca %"char[]", align 8
  %indirectarg932 = alloca %"char[]", align 8
  %varargslots933 = alloca [2 x %any], align 16
  %indirectarg936 = alloca %"any[]", align 8
  %error_var943 = alloca i64, align 8
  %varargslots944 = alloca [2 x %any], align 16
  %taddr946 = alloca i64, align 8
  %retparam950 = alloca i64, align 8
  %indirectarg951 = alloca %any, align 8
  %indirectarg952 = alloca %"char[]", align 8
  %indirectarg953 = alloca %"any[]", align 8
  %backtraces960 = alloca %List, align 8
  %end = alloca i64, align 8
  %.anon962 = alloca i64, align 8
  %j = alloca i64, align 8
  %val965 = alloca ptr, align 8
  %indirectarg967 = alloca %"char[]", align 8
  %indirectarg968 = alloca %"char[]", align 8
  %indirectarg969 = alloca %"char[]", align 8
  %taddr972 = alloca i64, align 8
  %taddr973 = alloca i64, align 8
  %indirectarg974 = alloca %"char[]", align 8
  %indirectarg975 = alloca %"char[]", align 8
  %indirectarg976 = alloca %"char[]", align 8
  %varargslots977 = alloca [2 x %any], align 16
  %indirectarg980 = alloca %"any[]", align 8
  %taddr984 = alloca i64, align 8
  %taddr985 = alloca i64, align 8
  %indirectarg986 = alloca %"char[]", align 8
  %indirectarg987 = alloca %"char[]", align 8
  %indirectarg988 = alloca %"char[]", align 8
  %varargslots989 = alloca [2 x %any], align 16
  %indirectarg992 = alloca %"any[]", align 8
  %list = alloca %List, align 8
  %error_var1000 = alloca i64, align 8
  %taddr1004 = alloca i64, align 8
  %taddr1005 = alloca i64, align 8
  %indirectarg1006 = alloca %"char[]", align 8
  %indirectarg1007 = alloca %"char[]", align 8
  %indirectarg1008 = alloca %"char[]", align 8
  %varargslots1009 = alloca [2 x %any], align 16
  %indirectarg1012 = alloca %"any[]", align 8
  %taddr1015 = alloca i64, align 8
  %taddr1016 = alloca i64, align 8
  %indirectarg1017 = alloca %"char[]", align 8
  %indirectarg1018 = alloca %"char[]", align 8
  %indirectarg1019 = alloca %"char[]", align 8
  %varargslots1020 = alloca [2 x %any], align 16
  %indirectarg1023 = alloca %"any[]", align 8
  %retparam1026 = alloca %List, align 8
  %indirectarg1027 = alloca %any, align 8
  %indirectarg1028 = alloca %"void*[]", align 8
  %error_var1034 = alloca i64, align 8
  %varargslots1035 = alloca [2 x %any], align 16
  %taddr1037 = alloca i64, align 8
  %retparam1041 = alloca i64, align 8
  %indirectarg1042 = alloca %any, align 8
  %indirectarg1043 = alloca %"char[]", align 8
  %indirectarg1044 = alloca %"any[]", align 8
  %.anon1050 = alloca i64, align 8
  %trace1054 = alloca %Backtrace, align 8
  %self1055 = alloca ptr, align 8
  %index = alloca i64, align 8
  %indirectarg1057 = alloca %"char[]", align 8
  %indirectarg1058 = alloca %"char[]", align 8
  %indirectarg1059 = alloca %"char[]", align 8
  %indirectarg1063 = alloca %"char[]", align 8
  %indirectarg1064 = alloca %"char[]", align 8
  %indirectarg1065 = alloca %"char[]", align 8
  %taddr1070 = alloca i64, align 8
  %taddr1071 = alloca i64, align 8
  %indirectarg1072 = alloca %"char[]", align 8
  %indirectarg1073 = alloca %"char[]", align 8
  %indirectarg1074 = alloca %"char[]", align 8
  %varargslots1075 = alloca [2 x %any], align 16
  %indirectarg1078 = alloca %"any[]", align 8
  %varargslots1081 = alloca [3 x %any], align 16
  %retparam1088 = alloca i64, align 8
  %indirectarg1089 = alloca %any, align 8
  %indirectarg1090 = alloca %"char[]", align 8
  %indirectarg1091 = alloca %"any[]", align 8
  %retparam1096 = alloca i64, align 8
  %indirectarg1097 = alloca %any, align 8
  %indirectarg1098 = alloca %"char[]", align 8
  %indirectarg1099 = alloca %"any[]", align 8
  %varargslots1103 = alloca [1 x %any], align 16
  %retparam1106 = alloca i64, align 8
  %indirectarg1107 = alloca %any, align 8
  %indirectarg1108 = alloca %"char[]", align 8
  %indirectarg1109 = alloca %"any[]", align 8
  store ptr null, ptr %.cachedtype897, align 8, !dbg !2044
  store ptr null, ptr %.cachedtype885, align 8, !dbg !2044
  store ptr null, ptr %.cachedtype867, align 8, !dbg !2044
  store ptr null, ptr %.cachedtype845, align 8, !dbg !2044
  store ptr null, ptr %.cachedtype814, align 8, !dbg !2044
  store ptr null, ptr %.cachedtype802, align 8, !dbg !2044
  store ptr null, ptr %.cachedtype784, align 8, !dbg !2044
  store ptr null, ptr %.cachedtype762, align 8, !dbg !2044
  store ptr null, ptr %.cachedtype679, align 8, !dbg !2044
  store ptr null, ptr %.cachedtype667, align 8, !dbg !2044
  store ptr null, ptr %.cachedtype649, align 8, !dbg !2044
  store ptr null, ptr %.cachedtype627, align 8, !dbg !2044
  store ptr null, ptr %.cachedtype594, align 8, !dbg !2044
  store ptr null, ptr %.cachedtype582, align 8, !dbg !2044
  store ptr null, ptr %.cachedtype564, align 8, !dbg !2044
  store ptr null, ptr %.cachedtype542, align 8, !dbg !2044
  store ptr null, ptr %.cachedtype430, align 8, !dbg !2044
  store ptr null, ptr %.cachedtype418, align 8, !dbg !2044
  store ptr null, ptr %.cachedtype400, align 8, !dbg !2044
  store ptr null, ptr %.cachedtype378, align 8, !dbg !2044
  store ptr null, ptr %.cachedtype347, align 8, !dbg !2044
  store ptr null, ptr %.cachedtype335, align 8, !dbg !2044
  store ptr null, ptr %.cachedtype317, align 8, !dbg !2044
  store ptr null, ptr %.cachedtype295, align 8, !dbg !2044
  store ptr null, ptr %.cachedtype264, align 8, !dbg !2044
  store ptr null, ptr %.cachedtype252, align 8, !dbg !2044
  store ptr null, ptr %.cachedtype234, align 8, !dbg !2044
  store ptr null, ptr %.cachedtype212, align 8, !dbg !2044
  store ptr null, ptr %.cachedtype150, align 8, !dbg !2044
  store ptr null, ptr %.cachedtype138, align 8, !dbg !2044
  store ptr null, ptr %.cachedtype120, align 8, !dbg !2044
  store ptr null, ptr %.cachedtype98, align 8, !dbg !2044
  store ptr null, ptr %.cachedtype69, align 8, !dbg !2044
  store ptr null, ptr %.cachedtype57, align 8, !dbg !2044
  store ptr null, ptr %.cachedtype39, align 8, !dbg !2044
  store ptr null, ptr %.cachedtype, align 8, !dbg !2044
  %2 = icmp eq ptr %0, null, !dbg !2044
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !2044
  br i1 %3, label %panic, label %checkok, !dbg !2044

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2045, !DIExpression(), !2044)
    #dbg_declare(ptr %1, !2046, !DIExpression(), !2044)
  store i64 0, ptr %reserve, align 8
    #dbg_declare(ptr %state, !2047, !DIExpression(), !2049)
  %4 = load i64, ptr %reserve, align 8, !dbg !2049
  %5 = call ptr @std.core.mem.allocator.push_pool(i64 %4) #7, !dbg !2049
  store ptr %5, ptr %state, align 8, !dbg !2049
    #dbg_declare(ptr %total, !2050, !DIExpression(), !2052)
  store i64 0, ptr %total, align 8, !dbg !2052
    #dbg_declare(ptr %entries, !2053, !DIExpression(), !2054)
  store i64 0, ptr %entries, align 8, !dbg !2054
    #dbg_declare(ptr %leaks, !2055, !DIExpression(), !2056)
  store i8 0, ptr %leaks, align 1, !dbg !2056
    #dbg_declare(ptr %allocs, !2057, !DIExpression(), !2058)
  %6 = load ptr, ptr %self, align 8, !dbg !2058
  %ptradd = getelementptr inbounds i8, ptr %6, i64 16, !dbg !2058
  call void @"std_collections_map$ulong$std.core.mem.allocator.Allocation$.HashMap.tvalues"(ptr sret(%"Allocation[]") align 8 %allocs, ptr %ptradd), !dbg !2058
  %ptradd3 = getelementptr inbounds i8, ptr %allocs, i64 8, !dbg !2059
  %7 = load i64, ptr %ptradd3, align 8, !dbg !2059
  %i2b = icmp ne i64 %7, 0, !dbg !2059
  br i1 %i2b, label %if.then, label %if.else616, !dbg !2059

if.then:                                          ; preds = %checkok
  %ptradd4 = getelementptr inbounds i8, ptr %allocs, i64 8, !dbg !2060
  %8 = load i64, ptr %ptradd4, align 8, !dbg !2060
  %9 = load ptr, ptr %allocs, align 8, !dbg !2060
  %ge = icmp sge i64 0, %8, !dbg !2060
  %10 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !2060
  br i1 %10, label %panic5, label %checkok12, !dbg !2060

checkok12:                                        ; preds = %if.then
  %11 = ptrtoint ptr %9 to i64, !dbg !2060
  %12 = urem i64 %11, 8, !dbg !2060
  %13 = icmp ne i64 %12, 0, !dbg !2060
  %14 = call i1 @llvm.expect.i1(i1 %13, i1 false), !dbg !2060
  br i1 %14, label %panic13, label %checkok23, !dbg !2060

checkok23:                                        ; preds = %checkok12
  %ptradd24 = getelementptr inbounds i8, ptr %9, i64 16, !dbg !2060
  %15 = load ptr, ptr %ptradd24, align 8, !dbg !2060
  %i2nb = icmp eq ptr %15, null, !dbg !2060
  br i1 %i2nb, label %if.then25, label %if.else, !dbg !2060

if.then25:                                        ; preds = %checkok23
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %out, ptr align 8 %1, i32 16, i1 false)
  store %"char[]" { ptr @.str.112, i64 31 }, ptr %x, align 8
    #dbg_declare(ptr %len, !2062, !DIExpression(), !2065)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %out27, ptr align 8 %out, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %x28, ptr align 8 %x, i32 16, i1 false)
  %ptradd30 = getelementptr inbounds i8, ptr %out27, i64 8, !dbg !2068
  %16 = load i64, ptr %ptradd30, align 8, !dbg !2068
  %17 = inttoptr i64 %16 to ptr, !dbg !2068
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !2044
  %18 = icmp eq ptr %17, %type, !dbg !2044
  br i1 %18, label %cache_hit, label %cache_miss, !dbg !2044

cache_miss:                                       ; preds = %if.then25
  %ptradd31 = getelementptr inbounds i8, ptr %17, i64 16, !dbg !2044
  %19 = load ptr, ptr %ptradd31, align 8, !dbg !2044
  %20 = call ptr @.dyn_search(ptr %19, ptr @"$sel.write"), !dbg !2044
  store ptr %20, ptr %.inlinecache, align 8, !dbg !2044
  store ptr %17, ptr %.cachedtype, align 8, !dbg !2044
  br label %21, !dbg !2044

cache_hit:                                        ; preds = %if.then25
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !2044
  br label %21, !dbg !2044

21:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %20, %cache_miss ], !dbg !2044
  %22 = icmp eq ptr %fn_phi, null, !dbg !2044
  br i1 %22, label %missing_function, label %match, !dbg !2044

missing_function:                                 ; preds = %21
  store %"char[]" { ptr @.panic_msg.113, i64 42 }, ptr %indirectarg32, align 8
  store %"char[]" { ptr @.file.114, i64 5 }, ptr %indirectarg33, align 8
  store %"char[]" { ptr @.func.111, i64 13 }, ptr %indirectarg34, align 8
  %23 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %23(ptr align 8 %indirectarg32, ptr align 8 %indirectarg33, ptr align 8 %indirectarg34, i32 159) #6, !dbg !2068
  unreachable, !dbg !2068

match:                                            ; preds = %21
  %24 = load ptr, ptr %out27, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg35, ptr align 8 %x28, i32 16, i1 false)
  %25 = call i64 %fn_phi(ptr %retparam, ptr %24, ptr align 8 %indirectarg35), !dbg !2068
  %not_err = icmp eq i64 %25, 0, !dbg !2068
  %26 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !2068
  br i1 %26, label %after_check, label %assign_optional, !dbg !2068

assign_optional:                                  ; preds = %match
  store i64 %25, ptr %error_var26, align 8, !dbg !2068
  br label %guard_block, !dbg !2068

after_check:                                      ; preds = %match
  br label %noerr_block, !dbg !2068

guard_block:                                      ; preds = %assign_optional
  %27 = load i64, ptr %error_var26, align 8, !dbg !2068
  store i64 %27, ptr %error_var, align 8, !dbg !2068
  br label %guard_block86, !dbg !2068

noerr_block:                                      ; preds = %after_check
  %28 = load i64, ptr %retparam, align 8, !dbg !2068
  store i64 %28, ptr %len, align 8, !dbg !2068
  %ptradd37 = getelementptr inbounds i8, ptr %out, i64 8, !dbg !2070
  %29 = load i64, ptr %ptradd37, align 8, !dbg !2070
  %30 = inttoptr i64 %29 to ptr, !dbg !2070
  %type40 = load ptr, ptr %.cachedtype39, align 8, !dbg !2044
  %31 = icmp eq ptr %30, %type40, !dbg !2044
  br i1 %31, label %cache_hit43, label %cache_miss41, !dbg !2044

cache_miss41:                                     ; preds = %noerr_block
  %ptradd42 = getelementptr inbounds i8, ptr %30, i64 16, !dbg !2044
  %32 = load ptr, ptr %ptradd42, align 8, !dbg !2044
  %33 = call ptr @.dyn_search(ptr %32, ptr @"$sel.write_byte"), !dbg !2044
  store ptr %33, ptr %.inlinecache38, align 8, !dbg !2044
  store ptr %30, ptr %.cachedtype39, align 8, !dbg !2044
  br label %34, !dbg !2044

cache_hit43:                                      ; preds = %noerr_block
  %cache_hit_fn44 = load ptr, ptr %.inlinecache38, align 8, !dbg !2044
  br label %34, !dbg !2044

34:                                               ; preds = %cache_hit43, %cache_miss41
  %fn_phi45 = phi ptr [ %cache_hit_fn44, %cache_hit43 ], [ %33, %cache_miss41 ], !dbg !2044
  %35 = icmp eq ptr %fn_phi45, null, !dbg !2044
  br i1 %35, label %missing_function46, label %match50, !dbg !2044

missing_function46:                               ; preds = %34
  store %"char[]" { ptr @.panic_msg.115, i64 47 }, ptr %indirectarg47, align 8
  store %"char[]" { ptr @.file.114, i64 5 }, ptr %indirectarg48, align 8
  store %"char[]" { ptr @.func.111, i64 13 }, ptr %indirectarg49, align 8
  %36 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %36(ptr align 8 %indirectarg47, ptr align 8 %indirectarg48, ptr align 8 %indirectarg49, i32 216) #6, !dbg !2070
  unreachable, !dbg !2070

match50:                                          ; preds = %34
  %37 = load ptr, ptr %out, align 8, !dbg !2070
  %38 = call i64 %fn_phi45(ptr %37, i8 10), !dbg !2070
  %not_err51 = icmp eq i64 %38, 0, !dbg !2070
  %39 = call i1 @llvm.expect.i1(i1 %not_err51, i1 true), !dbg !2070
  br i1 %39, label %after_check53, label %assign_optional52, !dbg !2070

assign_optional52:                                ; preds = %match50
  store i64 %38, ptr %error_var36, align 8, !dbg !2070
  br label %guard_block54, !dbg !2070

after_check53:                                    ; preds = %match50
  br label %noerr_block55, !dbg !2070

guard_block54:                                    ; preds = %assign_optional52
  %40 = load i64, ptr %error_var36, align 8, !dbg !2070
  store i64 %40, ptr %error_var, align 8, !dbg !2070
  br label %guard_block86, !dbg !2070

noerr_block55:                                    ; preds = %after_check53
  %41 = load %any, ptr %out, align 8, !dbg !2071
  %42 = extractvalue %any %41, 1, !dbg !2071
  %43 = inttoptr i64 %42 to ptr, !dbg !2071
  %type58 = load ptr, ptr %.cachedtype57, align 8, !dbg !2044
  %44 = icmp eq ptr %43, %type58, !dbg !2044
  br i1 %44, label %cache_hit61, label %cache_miss59, !dbg !2044

cache_miss59:                                     ; preds = %noerr_block55
  %ptradd60 = getelementptr inbounds i8, ptr %43, i64 16, !dbg !2044
  %45 = load ptr, ptr %ptradd60, align 8, !dbg !2044
  %46 = call ptr @.dyn_search(ptr %45, ptr @"$sel.flush"), !dbg !2044
  store ptr %46, ptr %.inlinecache56, align 8, !dbg !2044
  store ptr %43, ptr %.cachedtype57, align 8, !dbg !2044
  br label %47, !dbg !2044

cache_hit61:                                      ; preds = %noerr_block55
  %cache_hit_fn62 = load ptr, ptr %.inlinecache56, align 8, !dbg !2044
  br label %47, !dbg !2044

47:                                               ; preds = %cache_hit61, %cache_miss59
  %fn_phi63 = phi ptr [ %cache_hit_fn62, %cache_hit61 ], [ %46, %cache_miss59 ], !dbg !2044
  %i2b64 = icmp ne ptr %fn_phi63, null, !dbg !2044
  br i1 %i2b64, label %if.then65, label %if.exit, !dbg !2044

if.then65:                                        ; preds = %47
  %ptradd67 = getelementptr inbounds i8, ptr %out, i64 8, !dbg !2071
  %48 = load i64, ptr %ptradd67, align 8, !dbg !2071
  %49 = inttoptr i64 %48 to ptr, !dbg !2071
  %type70 = load ptr, ptr %.cachedtype69, align 8, !dbg !2044
  %50 = icmp eq ptr %49, %type70, !dbg !2044
  br i1 %50, label %cache_hit73, label %cache_miss71, !dbg !2044

cache_miss71:                                     ; preds = %if.then65
  %ptradd72 = getelementptr inbounds i8, ptr %49, i64 16, !dbg !2044
  %51 = load ptr, ptr %ptradd72, align 8, !dbg !2044
  %52 = call ptr @.dyn_search(ptr %51, ptr @"$sel.flush"), !dbg !2044
  store ptr %52, ptr %.inlinecache68, align 8, !dbg !2044
  store ptr %49, ptr %.cachedtype69, align 8, !dbg !2044
  br label %53, !dbg !2044

cache_hit73:                                      ; preds = %if.then65
  %cache_hit_fn74 = load ptr, ptr %.inlinecache68, align 8, !dbg !2044
  br label %53, !dbg !2044

53:                                               ; preds = %cache_hit73, %cache_miss71
  %fn_phi75 = phi ptr [ %cache_hit_fn74, %cache_hit73 ], [ %52, %cache_miss71 ], !dbg !2044
  %54 = icmp eq ptr %fn_phi75, null, !dbg !2044
  br i1 %54, label %missing_function76, label %match80, !dbg !2044

missing_function76:                               ; preds = %53
  store %"char[]" { ptr @.panic_msg.116, i64 42 }, ptr %indirectarg77, align 8
  store %"char[]" { ptr @.file.114, i64 5 }, ptr %indirectarg78, align 8
  store %"char[]" { ptr @.func.111, i64 13 }, ptr %indirectarg79, align 8
  %55 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %55(ptr align 8 %indirectarg77, ptr align 8 %indirectarg78, ptr align 8 %indirectarg79, i32 219) #6, !dbg !2071
  unreachable, !dbg !2071

match80:                                          ; preds = %53
  %56 = load ptr, ptr %out, align 8, !dbg !2071
  %57 = call i64 %fn_phi75(ptr %56), !dbg !2071
  %not_err81 = icmp eq i64 %57, 0, !dbg !2071
  %58 = call i1 @llvm.expect.i1(i1 %not_err81, i1 true), !dbg !2071
  br i1 %58, label %after_check83, label %assign_optional82, !dbg !2071

assign_optional82:                                ; preds = %match80
  store i64 %57, ptr %error_var66, align 8, !dbg !2071
  br label %guard_block84, !dbg !2071

after_check83:                                    ; preds = %match80
  br label %noerr_block85, !dbg !2071

guard_block84:                                    ; preds = %assign_optional82
  %59 = load i64, ptr %error_var66, align 8, !dbg !2071
  store i64 %59, ptr %error_var, align 8, !dbg !2071
  br label %guard_block86, !dbg !2071

noerr_block85:                                    ; preds = %after_check83
  br label %if.exit, !dbg !2071

if.exit:                                          ; preds = %noerr_block85, %47
  %60 = load i64, ptr %len, align 8, !dbg !2072
  %add = add i64 %60, 1, !dbg !2072
  br label %noerr_block87, !dbg !2072

guard_block86:                                    ; preds = %guard_block84, %guard_block54, %guard_block
  %61 = load ptr, ptr %state, align 8, !dbg !2073
  call void @std.core.mem.allocator.pop_pool(ptr %61) #7, !dbg !2073
  %62 = load i64, ptr %error_var, align 8, !dbg !2073
  ret i64 %62, !dbg !2073

noerr_block87:                                    ; preds = %if.exit
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %out89, ptr align 8 %1, i32 16, i1 false)
  store %"char[]" { ptr @.str.117, i64 23 }, ptr %x90, align 8
    #dbg_declare(ptr %len91, !2075, !DIExpression(), !2077)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %out93, ptr align 8 %out89, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %x94, ptr align 8 %x90, i32 16, i1 false)
  %ptradd96 = getelementptr inbounds i8, ptr %out93, i64 8, !dbg !2079
  %63 = load i64, ptr %ptradd96, align 8, !dbg !2079
  %64 = inttoptr i64 %63 to ptr, !dbg !2079
  %type99 = load ptr, ptr %.cachedtype98, align 8, !dbg !2044
  %65 = icmp eq ptr %64, %type99, !dbg !2044
  br i1 %65, label %cache_hit102, label %cache_miss100, !dbg !2044

cache_miss100:                                    ; preds = %noerr_block87
  %ptradd101 = getelementptr inbounds i8, ptr %64, i64 16, !dbg !2044
  %66 = load ptr, ptr %ptradd101, align 8, !dbg !2044
  %67 = call ptr @.dyn_search(ptr %66, ptr @"$sel.write"), !dbg !2044
  store ptr %67, ptr %.inlinecache97, align 8, !dbg !2044
  store ptr %64, ptr %.cachedtype98, align 8, !dbg !2044
  br label %68, !dbg !2044

cache_hit102:                                     ; preds = %noerr_block87
  %cache_hit_fn103 = load ptr, ptr %.inlinecache97, align 8, !dbg !2044
  br label %68, !dbg !2044

68:                                               ; preds = %cache_hit102, %cache_miss100
  %fn_phi104 = phi ptr [ %cache_hit_fn103, %cache_hit102 ], [ %67, %cache_miss100 ], !dbg !2044
  %69 = icmp eq ptr %fn_phi104, null, !dbg !2044
  br i1 %69, label %missing_function105, label %match109, !dbg !2044

missing_function105:                              ; preds = %68
  store %"char[]" { ptr @.panic_msg.113, i64 42 }, ptr %indirectarg106, align 8
  store %"char[]" { ptr @.file.114, i64 5 }, ptr %indirectarg107, align 8
  store %"char[]" { ptr @.func.111, i64 13 }, ptr %indirectarg108, align 8
  %70 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %70(ptr align 8 %indirectarg106, ptr align 8 %indirectarg107, ptr align 8 %indirectarg108, i32 159) #6, !dbg !2079
  unreachable, !dbg !2079

match109:                                         ; preds = %68
  %71 = load ptr, ptr %out93, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg111, ptr align 8 %x94, i32 16, i1 false)
  %72 = call i64 %fn_phi104(ptr %retparam110, ptr %71, ptr align 8 %indirectarg111), !dbg !2079
  %not_err112 = icmp eq i64 %72, 0, !dbg !2079
  %73 = call i1 @llvm.expect.i1(i1 %not_err112, i1 true), !dbg !2079
  br i1 %73, label %after_check114, label %assign_optional113, !dbg !2079

assign_optional113:                               ; preds = %match109
  store i64 %72, ptr %error_var92, align 8, !dbg !2079
  br label %guard_block115, !dbg !2079

after_check114:                                   ; preds = %match109
  br label %noerr_block116, !dbg !2079

guard_block115:                                   ; preds = %assign_optional113
  %74 = load i64, ptr %error_var92, align 8, !dbg !2079
  store i64 %74, ptr %error_var88, align 8, !dbg !2079
  br label %guard_block169, !dbg !2079

noerr_block116:                                   ; preds = %after_check114
  %75 = load i64, ptr %retparam110, align 8, !dbg !2079
  store i64 %75, ptr %len91, align 8, !dbg !2079
  %ptradd118 = getelementptr inbounds i8, ptr %out89, i64 8, !dbg !2081
  %76 = load i64, ptr %ptradd118, align 8, !dbg !2081
  %77 = inttoptr i64 %76 to ptr, !dbg !2081
  %type121 = load ptr, ptr %.cachedtype120, align 8, !dbg !2044
  %78 = icmp eq ptr %77, %type121, !dbg !2044
  br i1 %78, label %cache_hit124, label %cache_miss122, !dbg !2044

cache_miss122:                                    ; preds = %noerr_block116
  %ptradd123 = getelementptr inbounds i8, ptr %77, i64 16, !dbg !2044
  %79 = load ptr, ptr %ptradd123, align 8, !dbg !2044
  %80 = call ptr @.dyn_search(ptr %79, ptr @"$sel.write_byte"), !dbg !2044
  store ptr %80, ptr %.inlinecache119, align 8, !dbg !2044
  store ptr %77, ptr %.cachedtype120, align 8, !dbg !2044
  br label %81, !dbg !2044

cache_hit124:                                     ; preds = %noerr_block116
  %cache_hit_fn125 = load ptr, ptr %.inlinecache119, align 8, !dbg !2044
  br label %81, !dbg !2044

81:                                               ; preds = %cache_hit124, %cache_miss122
  %fn_phi126 = phi ptr [ %cache_hit_fn125, %cache_hit124 ], [ %80, %cache_miss122 ], !dbg !2044
  %82 = icmp eq ptr %fn_phi126, null, !dbg !2044
  br i1 %82, label %missing_function127, label %match131, !dbg !2044

missing_function127:                              ; preds = %81
  store %"char[]" { ptr @.panic_msg.115, i64 47 }, ptr %indirectarg128, align 8
  store %"char[]" { ptr @.file.114, i64 5 }, ptr %indirectarg129, align 8
  store %"char[]" { ptr @.func.111, i64 13 }, ptr %indirectarg130, align 8
  %83 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %83(ptr align 8 %indirectarg128, ptr align 8 %indirectarg129, ptr align 8 %indirectarg130, i32 216) #6, !dbg !2081
  unreachable, !dbg !2081

match131:                                         ; preds = %81
  %84 = load ptr, ptr %out89, align 8, !dbg !2081
  %85 = call i64 %fn_phi126(ptr %84, i8 10), !dbg !2081
  %not_err132 = icmp eq i64 %85, 0, !dbg !2081
  %86 = call i1 @llvm.expect.i1(i1 %not_err132, i1 true), !dbg !2081
  br i1 %86, label %after_check134, label %assign_optional133, !dbg !2081

assign_optional133:                               ; preds = %match131
  store i64 %85, ptr %error_var117, align 8, !dbg !2081
  br label %guard_block135, !dbg !2081

after_check134:                                   ; preds = %match131
  br label %noerr_block136, !dbg !2081

guard_block135:                                   ; preds = %assign_optional133
  %87 = load i64, ptr %error_var117, align 8, !dbg !2081
  store i64 %87, ptr %error_var88, align 8, !dbg !2081
  br label %guard_block169, !dbg !2081

noerr_block136:                                   ; preds = %after_check134
  %88 = load %any, ptr %out89, align 8, !dbg !2082
  %89 = extractvalue %any %88, 1, !dbg !2082
  %90 = inttoptr i64 %89 to ptr, !dbg !2082
  %type139 = load ptr, ptr %.cachedtype138, align 8, !dbg !2044
  %91 = icmp eq ptr %90, %type139, !dbg !2044
  br i1 %91, label %cache_hit142, label %cache_miss140, !dbg !2044

cache_miss140:                                    ; preds = %noerr_block136
  %ptradd141 = getelementptr inbounds i8, ptr %90, i64 16, !dbg !2044
  %92 = load ptr, ptr %ptradd141, align 8, !dbg !2044
  %93 = call ptr @.dyn_search(ptr %92, ptr @"$sel.flush"), !dbg !2044
  store ptr %93, ptr %.inlinecache137, align 8, !dbg !2044
  store ptr %90, ptr %.cachedtype138, align 8, !dbg !2044
  br label %94, !dbg !2044

cache_hit142:                                     ; preds = %noerr_block136
  %cache_hit_fn143 = load ptr, ptr %.inlinecache137, align 8, !dbg !2044
  br label %94, !dbg !2044

94:                                               ; preds = %cache_hit142, %cache_miss140
  %fn_phi144 = phi ptr [ %cache_hit_fn143, %cache_hit142 ], [ %93, %cache_miss140 ], !dbg !2044
  %i2b145 = icmp ne ptr %fn_phi144, null, !dbg !2044
  br i1 %i2b145, label %if.then146, label %if.exit167, !dbg !2044

if.then146:                                       ; preds = %94
  %ptradd148 = getelementptr inbounds i8, ptr %out89, i64 8, !dbg !2082
  %95 = load i64, ptr %ptradd148, align 8, !dbg !2082
  %96 = inttoptr i64 %95 to ptr, !dbg !2082
  %type151 = load ptr, ptr %.cachedtype150, align 8, !dbg !2044
  %97 = icmp eq ptr %96, %type151, !dbg !2044
  br i1 %97, label %cache_hit154, label %cache_miss152, !dbg !2044

cache_miss152:                                    ; preds = %if.then146
  %ptradd153 = getelementptr inbounds i8, ptr %96, i64 16, !dbg !2044
  %98 = load ptr, ptr %ptradd153, align 8, !dbg !2044
  %99 = call ptr @.dyn_search(ptr %98, ptr @"$sel.flush"), !dbg !2044
  store ptr %99, ptr %.inlinecache149, align 8, !dbg !2044
  store ptr %96, ptr %.cachedtype150, align 8, !dbg !2044
  br label %100, !dbg !2044

cache_hit154:                                     ; preds = %if.then146
  %cache_hit_fn155 = load ptr, ptr %.inlinecache149, align 8, !dbg !2044
  br label %100, !dbg !2044

100:                                              ; preds = %cache_hit154, %cache_miss152
  %fn_phi156 = phi ptr [ %cache_hit_fn155, %cache_hit154 ], [ %99, %cache_miss152 ], !dbg !2044
  %101 = icmp eq ptr %fn_phi156, null, !dbg !2044
  br i1 %101, label %missing_function157, label %match161, !dbg !2044

missing_function157:                              ; preds = %100
  store %"char[]" { ptr @.panic_msg.116, i64 42 }, ptr %indirectarg158, align 8
  store %"char[]" { ptr @.file.114, i64 5 }, ptr %indirectarg159, align 8
  store %"char[]" { ptr @.func.111, i64 13 }, ptr %indirectarg160, align 8
  %102 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %102(ptr align 8 %indirectarg158, ptr align 8 %indirectarg159, ptr align 8 %indirectarg160, i32 219) #6, !dbg !2082
  unreachable, !dbg !2082

match161:                                         ; preds = %100
  %103 = load ptr, ptr %out89, align 8, !dbg !2082
  %104 = call i64 %fn_phi156(ptr %103), !dbg !2082
  %not_err162 = icmp eq i64 %104, 0, !dbg !2082
  %105 = call i1 @llvm.expect.i1(i1 %not_err162, i1 true), !dbg !2082
  br i1 %105, label %after_check164, label %assign_optional163, !dbg !2082

assign_optional163:                               ; preds = %match161
  store i64 %104, ptr %error_var147, align 8, !dbg !2082
  br label %guard_block165, !dbg !2082

after_check164:                                   ; preds = %match161
  br label %noerr_block166, !dbg !2082

guard_block165:                                   ; preds = %assign_optional163
  %106 = load i64, ptr %error_var147, align 8, !dbg !2082
  store i64 %106, ptr %error_var88, align 8, !dbg !2082
  br label %guard_block169, !dbg !2082

noerr_block166:                                   ; preds = %after_check164
  br label %if.exit167, !dbg !2082

if.exit167:                                       ; preds = %noerr_block166, %94
  %107 = load i64, ptr %len91, align 8, !dbg !2083
  %add168 = add i64 %107, 1, !dbg !2083
  br label %noerr_block170, !dbg !2083

guard_block169:                                   ; preds = %guard_block165, %guard_block135, %guard_block115
  %108 = load ptr, ptr %state, align 8, !dbg !2084
  call void @std.core.mem.allocator.pop_pool(ptr %108) #7, !dbg !2084
  %109 = load i64, ptr %error_var88, align 8, !dbg !2084
  ret i64 %109, !dbg !2084

noerr_block170:                                   ; preds = %if.exit167
  %ptradd171 = getelementptr inbounds i8, ptr %allocs, i64 8, !dbg !2086
  %110 = load i64, ptr %ptradd171, align 8, !dbg !2086
    #dbg_declare(ptr %.anon, !2088, !DIExpression(), !2086)
  store i64 0, ptr %.anon, align 8, !dbg !2086
  br label %loop.cond, !dbg !2086

loop.cond:                                        ; preds = %noerr_block201, %noerr_block170
  %111 = load i64, ptr %.anon, align 8, !dbg !2086
  %lt = icmp ult i64 %111, %110, !dbg !2086
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !2086

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %i, !2089, !DIExpression(), !2091)
  %112 = load i64, ptr %.anon, align 8, !dbg !2091
  store i64 %112, ptr %i, align 8, !dbg !2091
    #dbg_declare(ptr %allocation, !2092, !DIExpression(), !2091)
  %ptradd172 = getelementptr inbounds i8, ptr %allocs, i64 8, !dbg !2091
  %113 = load i64, ptr %ptradd172, align 8, !dbg !2091
  %114 = load ptr, ptr %allocs, align 8, !dbg !2091
  %115 = load i64, ptr %.anon, align 8, !dbg !2091
  %ge173 = icmp uge i64 %115, %113, !dbg !2091
  %116 = call i1 @llvm.expect.i1(i1 %ge173, i1 false), !dbg !2091
  br i1 %116, label %panic174, label %checkok184, !dbg !2091

checkok184:                                       ; preds = %loop.body
  %ptroffset = getelementptr inbounds [144 x i8], ptr %114, i64 %115, !dbg !2091
  store ptr %ptroffset, ptr %allocation, align 8, !dbg !2091
  %117 = load i64, ptr %entries, align 8, !dbg !2093
  %add185 = add i64 %117, 1, !dbg !2093
  store i64 %add185, ptr %entries, align 8, !dbg !2093
  %118 = load i64, ptr %total, align 8, !dbg !2095
  %119 = load ptr, ptr %allocation, align 8, !dbg !2095
  %ptradd186 = getelementptr inbounds i8, ptr %119, i64 8, !dbg !2095
  %120 = load i64, ptr %ptradd186, align 8, !dbg !2095
  %add187 = add i64 %118, %120, !dbg !2095
  store i64 %add187, ptr %total, align 8, !dbg !2095
  %121 = load ptr, ptr %allocation, align 8, !dbg !2096
  %ptradd190 = getelementptr inbounds i8, ptr %121, i64 8, !dbg !2096
  %122 = insertvalue %any undef, ptr %ptradd190, 0, !dbg !2096
  %123 = insertvalue %any %122, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1, !dbg !2096
  store %any %123, ptr %varargslots189, align 16, !dbg !2096
  %124 = load ptr, ptr %allocation, align 8, !dbg !2096
  %125 = insertvalue %any undef, ptr %124, 0, !dbg !2096
  %126 = insertvalue %any %125, i64 ptrtoint (ptr @"$ct.p$void" to i64), 1, !dbg !2096
  %ptradd191 = getelementptr inbounds i8, ptr %varargslots189, i64 16, !dbg !2096
  store %any %126, ptr %ptradd191, align 16, !dbg !2096
  %127 = insertvalue %"any[]" undef, ptr %varargslots189, 0, !dbg !2096
  %"$$temp192" = insertvalue %"any[]" %127, i64 2, 1, !dbg !2096
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg194, ptr align 8 %1, i32 16, i1 false)
  store %"char[]" { ptr @.str.118, i64 9 }, ptr %indirectarg195, align 8
  store %"any[]" %"$$temp192", ptr %indirectarg196, align 8
  %128 = call i64 @std.io.fprintfn(ptr %retparam193, ptr align 8 %indirectarg194, ptr align 8 %indirectarg195, ptr align 8 %indirectarg196), !dbg !2096
  %not_err197 = icmp eq i64 %128, 0, !dbg !2096
  %129 = call i1 @llvm.expect.i1(i1 %not_err197, i1 true), !dbg !2096
  br i1 %129, label %after_check199, label %assign_optional198, !dbg !2096

assign_optional198:                               ; preds = %checkok184
  store i64 %128, ptr %error_var188, align 8, !dbg !2096
  br label %guard_block200, !dbg !2096

after_check199:                                   ; preds = %checkok184
  br label %noerr_block201, !dbg !2096

guard_block200:                                   ; preds = %assign_optional198
  %130 = load ptr, ptr %state, align 8, !dbg !2097
  call void @std.core.mem.allocator.pop_pool(ptr %130) #7, !dbg !2097
  %131 = load i64, ptr %error_var188, align 8, !dbg !2097
  ret i64 %131, !dbg !2097

noerr_block201:                                   ; preds = %after_check199
  %132 = load i64, ptr %.anon, align 8, !dbg !2086
  %addnuw = add nuw i64 %132, 1, !dbg !2086
  store i64 %addnuw, ptr %.anon, align 8, !dbg !2086
  br label %loop.cond, !dbg !2086

loop.exit:                                        ; preds = %loop.cond
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %out203, ptr align 8 %1, i32 16, i1 false)
  store %"char[]" { ptr @.str.119, i64 31 }, ptr %x204, align 8
    #dbg_declare(ptr %len205, !2099, !DIExpression(), !2101)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %out207, ptr align 8 %out203, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %x208, ptr align 8 %x204, i32 16, i1 false)
  %ptradd210 = getelementptr inbounds i8, ptr %out207, i64 8, !dbg !2103
  %133 = load i64, ptr %ptradd210, align 8, !dbg !2103
  %134 = inttoptr i64 %133 to ptr, !dbg !2103
  %type213 = load ptr, ptr %.cachedtype212, align 8, !dbg !2044
  %135 = icmp eq ptr %134, %type213, !dbg !2044
  br i1 %135, label %cache_hit216, label %cache_miss214, !dbg !2044

cache_miss214:                                    ; preds = %loop.exit
  %ptradd215 = getelementptr inbounds i8, ptr %134, i64 16, !dbg !2044
  %136 = load ptr, ptr %ptradd215, align 8, !dbg !2044
  %137 = call ptr @.dyn_search(ptr %136, ptr @"$sel.write"), !dbg !2044
  store ptr %137, ptr %.inlinecache211, align 8, !dbg !2044
  store ptr %134, ptr %.cachedtype212, align 8, !dbg !2044
  br label %138, !dbg !2044

cache_hit216:                                     ; preds = %loop.exit
  %cache_hit_fn217 = load ptr, ptr %.inlinecache211, align 8, !dbg !2044
  br label %138, !dbg !2044

138:                                              ; preds = %cache_hit216, %cache_miss214
  %fn_phi218 = phi ptr [ %cache_hit_fn217, %cache_hit216 ], [ %137, %cache_miss214 ], !dbg !2044
  %139 = icmp eq ptr %fn_phi218, null, !dbg !2044
  br i1 %139, label %missing_function219, label %match223, !dbg !2044

missing_function219:                              ; preds = %138
  store %"char[]" { ptr @.panic_msg.113, i64 42 }, ptr %indirectarg220, align 8
  store %"char[]" { ptr @.file.114, i64 5 }, ptr %indirectarg221, align 8
  store %"char[]" { ptr @.func.111, i64 13 }, ptr %indirectarg222, align 8
  %140 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %140(ptr align 8 %indirectarg220, ptr align 8 %indirectarg221, ptr align 8 %indirectarg222, i32 159) #6, !dbg !2103
  unreachable, !dbg !2103

match223:                                         ; preds = %138
  %141 = load ptr, ptr %out207, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg225, ptr align 8 %x208, i32 16, i1 false)
  %142 = call i64 %fn_phi218(ptr %retparam224, ptr %141, ptr align 8 %indirectarg225), !dbg !2103
  %not_err226 = icmp eq i64 %142, 0, !dbg !2103
  %143 = call i1 @llvm.expect.i1(i1 %not_err226, i1 true), !dbg !2103
  br i1 %143, label %after_check228, label %assign_optional227, !dbg !2103

assign_optional227:                               ; preds = %match223
  store i64 %142, ptr %error_var206, align 8, !dbg !2103
  br label %guard_block229, !dbg !2103

after_check228:                                   ; preds = %match223
  br label %noerr_block230, !dbg !2103

guard_block229:                                   ; preds = %assign_optional227
  %144 = load i64, ptr %error_var206, align 8, !dbg !2103
  store i64 %144, ptr %error_var202, align 8, !dbg !2103
  br label %guard_block283, !dbg !2103

noerr_block230:                                   ; preds = %after_check228
  %145 = load i64, ptr %retparam224, align 8, !dbg !2103
  store i64 %145, ptr %len205, align 8, !dbg !2103
  %ptradd232 = getelementptr inbounds i8, ptr %out203, i64 8, !dbg !2105
  %146 = load i64, ptr %ptradd232, align 8, !dbg !2105
  %147 = inttoptr i64 %146 to ptr, !dbg !2105
  %type235 = load ptr, ptr %.cachedtype234, align 8, !dbg !2044
  %148 = icmp eq ptr %147, %type235, !dbg !2044
  br i1 %148, label %cache_hit238, label %cache_miss236, !dbg !2044

cache_miss236:                                    ; preds = %noerr_block230
  %ptradd237 = getelementptr inbounds i8, ptr %147, i64 16, !dbg !2044
  %149 = load ptr, ptr %ptradd237, align 8, !dbg !2044
  %150 = call ptr @.dyn_search(ptr %149, ptr @"$sel.write_byte"), !dbg !2044
  store ptr %150, ptr %.inlinecache233, align 8, !dbg !2044
  store ptr %147, ptr %.cachedtype234, align 8, !dbg !2044
  br label %151, !dbg !2044

cache_hit238:                                     ; preds = %noerr_block230
  %cache_hit_fn239 = load ptr, ptr %.inlinecache233, align 8, !dbg !2044
  br label %151, !dbg !2044

151:                                              ; preds = %cache_hit238, %cache_miss236
  %fn_phi240 = phi ptr [ %cache_hit_fn239, %cache_hit238 ], [ %150, %cache_miss236 ], !dbg !2044
  %152 = icmp eq ptr %fn_phi240, null, !dbg !2044
  br i1 %152, label %missing_function241, label %match245, !dbg !2044

missing_function241:                              ; preds = %151
  store %"char[]" { ptr @.panic_msg.115, i64 47 }, ptr %indirectarg242, align 8
  store %"char[]" { ptr @.file.114, i64 5 }, ptr %indirectarg243, align 8
  store %"char[]" { ptr @.func.111, i64 13 }, ptr %indirectarg244, align 8
  %153 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %153(ptr align 8 %indirectarg242, ptr align 8 %indirectarg243, ptr align 8 %indirectarg244, i32 216) #6, !dbg !2105
  unreachable, !dbg !2105

match245:                                         ; preds = %151
  %154 = load ptr, ptr %out203, align 8, !dbg !2105
  %155 = call i64 %fn_phi240(ptr %154, i8 10), !dbg !2105
  %not_err246 = icmp eq i64 %155, 0, !dbg !2105
  %156 = call i1 @llvm.expect.i1(i1 %not_err246, i1 true), !dbg !2105
  br i1 %156, label %after_check248, label %assign_optional247, !dbg !2105

assign_optional247:                               ; preds = %match245
  store i64 %155, ptr %error_var231, align 8, !dbg !2105
  br label %guard_block249, !dbg !2105

after_check248:                                   ; preds = %match245
  br label %noerr_block250, !dbg !2105

guard_block249:                                   ; preds = %assign_optional247
  %157 = load i64, ptr %error_var231, align 8, !dbg !2105
  store i64 %157, ptr %error_var202, align 8, !dbg !2105
  br label %guard_block283, !dbg !2105

noerr_block250:                                   ; preds = %after_check248
  %158 = load %any, ptr %out203, align 8, !dbg !2106
  %159 = extractvalue %any %158, 1, !dbg !2106
  %160 = inttoptr i64 %159 to ptr, !dbg !2106
  %type253 = load ptr, ptr %.cachedtype252, align 8, !dbg !2044
  %161 = icmp eq ptr %160, %type253, !dbg !2044
  br i1 %161, label %cache_hit256, label %cache_miss254, !dbg !2044

cache_miss254:                                    ; preds = %noerr_block250
  %ptradd255 = getelementptr inbounds i8, ptr %160, i64 16, !dbg !2044
  %162 = load ptr, ptr %ptradd255, align 8, !dbg !2044
  %163 = call ptr @.dyn_search(ptr %162, ptr @"$sel.flush"), !dbg !2044
  store ptr %163, ptr %.inlinecache251, align 8, !dbg !2044
  store ptr %160, ptr %.cachedtype252, align 8, !dbg !2044
  br label %164, !dbg !2044

cache_hit256:                                     ; preds = %noerr_block250
  %cache_hit_fn257 = load ptr, ptr %.inlinecache251, align 8, !dbg !2044
  br label %164, !dbg !2044

164:                                              ; preds = %cache_hit256, %cache_miss254
  %fn_phi258 = phi ptr [ %cache_hit_fn257, %cache_hit256 ], [ %163, %cache_miss254 ], !dbg !2044
  %i2b259 = icmp ne ptr %fn_phi258, null, !dbg !2044
  br i1 %i2b259, label %if.then260, label %if.exit281, !dbg !2044

if.then260:                                       ; preds = %164
  %ptradd262 = getelementptr inbounds i8, ptr %out203, i64 8, !dbg !2106
  %165 = load i64, ptr %ptradd262, align 8, !dbg !2106
  %166 = inttoptr i64 %165 to ptr, !dbg !2106
  %type265 = load ptr, ptr %.cachedtype264, align 8, !dbg !2044
  %167 = icmp eq ptr %166, %type265, !dbg !2044
  br i1 %167, label %cache_hit268, label %cache_miss266, !dbg !2044

cache_miss266:                                    ; preds = %if.then260
  %ptradd267 = getelementptr inbounds i8, ptr %166, i64 16, !dbg !2044
  %168 = load ptr, ptr %ptradd267, align 8, !dbg !2044
  %169 = call ptr @.dyn_search(ptr %168, ptr @"$sel.flush"), !dbg !2044
  store ptr %169, ptr %.inlinecache263, align 8, !dbg !2044
  store ptr %166, ptr %.cachedtype264, align 8, !dbg !2044
  br label %170, !dbg !2044

cache_hit268:                                     ; preds = %if.then260
  %cache_hit_fn269 = load ptr, ptr %.inlinecache263, align 8, !dbg !2044
  br label %170, !dbg !2044

170:                                              ; preds = %cache_hit268, %cache_miss266
  %fn_phi270 = phi ptr [ %cache_hit_fn269, %cache_hit268 ], [ %169, %cache_miss266 ], !dbg !2044
  %171 = icmp eq ptr %fn_phi270, null, !dbg !2044
  br i1 %171, label %missing_function271, label %match275, !dbg !2044

missing_function271:                              ; preds = %170
  store %"char[]" { ptr @.panic_msg.116, i64 42 }, ptr %indirectarg272, align 8
  store %"char[]" { ptr @.file.114, i64 5 }, ptr %indirectarg273, align 8
  store %"char[]" { ptr @.func.111, i64 13 }, ptr %indirectarg274, align 8
  %172 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %172(ptr align 8 %indirectarg272, ptr align 8 %indirectarg273, ptr align 8 %indirectarg274, i32 219) #6, !dbg !2106
  unreachable, !dbg !2106

match275:                                         ; preds = %170
  %173 = load ptr, ptr %out203, align 8, !dbg !2106
  %174 = call i64 %fn_phi270(ptr %173), !dbg !2106
  %not_err276 = icmp eq i64 %174, 0, !dbg !2106
  %175 = call i1 @llvm.expect.i1(i1 %not_err276, i1 true), !dbg !2106
  br i1 %175, label %after_check278, label %assign_optional277, !dbg !2106

assign_optional277:                               ; preds = %match275
  store i64 %174, ptr %error_var261, align 8, !dbg !2106
  br label %guard_block279, !dbg !2106

after_check278:                                   ; preds = %match275
  br label %noerr_block280, !dbg !2106

guard_block279:                                   ; preds = %assign_optional277
  %176 = load i64, ptr %error_var261, align 8, !dbg !2106
  store i64 %176, ptr %error_var202, align 8, !dbg !2106
  br label %guard_block283, !dbg !2106

noerr_block280:                                   ; preds = %after_check278
  br label %if.exit281, !dbg !2106

if.exit281:                                       ; preds = %noerr_block280, %164
  %177 = load i64, ptr %len205, align 8, !dbg !2107
  %add282 = add i64 %177, 1, !dbg !2107
  br label %noerr_block284, !dbg !2107

guard_block283:                                   ; preds = %guard_block279, %guard_block249, %guard_block229
  %178 = load ptr, ptr %state, align 8, !dbg !2108
  call void @std.core.mem.allocator.pop_pool(ptr %178) #7, !dbg !2108
  %179 = load i64, ptr %error_var202, align 8, !dbg !2108
  ret i64 %179, !dbg !2108

noerr_block284:                                   ; preds = %if.exit281
  br label %if.exit615, !dbg !2108

if.else:                                          ; preds = %checkok23
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %out286, ptr align 8 %1, i32 16, i1 false)
  store %"char[]" { ptr @.str.120, i64 83 }, ptr %x287, align 8
    #dbg_declare(ptr %len288, !2110, !DIExpression(), !2112)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %out290, ptr align 8 %out286, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %x291, ptr align 8 %x287, i32 16, i1 false)
  %ptradd293 = getelementptr inbounds i8, ptr %out290, i64 8, !dbg !2115
  %180 = load i64, ptr %ptradd293, align 8, !dbg !2115
  %181 = inttoptr i64 %180 to ptr, !dbg !2115
  %type296 = load ptr, ptr %.cachedtype295, align 8, !dbg !2044
  %182 = icmp eq ptr %181, %type296, !dbg !2044
  br i1 %182, label %cache_hit299, label %cache_miss297, !dbg !2044

cache_miss297:                                    ; preds = %if.else
  %ptradd298 = getelementptr inbounds i8, ptr %181, i64 16, !dbg !2044
  %183 = load ptr, ptr %ptradd298, align 8, !dbg !2044
  %184 = call ptr @.dyn_search(ptr %183, ptr @"$sel.write"), !dbg !2044
  store ptr %184, ptr %.inlinecache294, align 8, !dbg !2044
  store ptr %181, ptr %.cachedtype295, align 8, !dbg !2044
  br label %185, !dbg !2044

cache_hit299:                                     ; preds = %if.else
  %cache_hit_fn300 = load ptr, ptr %.inlinecache294, align 8, !dbg !2044
  br label %185, !dbg !2044

185:                                              ; preds = %cache_hit299, %cache_miss297
  %fn_phi301 = phi ptr [ %cache_hit_fn300, %cache_hit299 ], [ %184, %cache_miss297 ], !dbg !2044
  %186 = icmp eq ptr %fn_phi301, null, !dbg !2044
  br i1 %186, label %missing_function302, label %match306, !dbg !2044

missing_function302:                              ; preds = %185
  store %"char[]" { ptr @.panic_msg.113, i64 42 }, ptr %indirectarg303, align 8
  store %"char[]" { ptr @.file.114, i64 5 }, ptr %indirectarg304, align 8
  store %"char[]" { ptr @.func.111, i64 13 }, ptr %indirectarg305, align 8
  %187 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %187(ptr align 8 %indirectarg303, ptr align 8 %indirectarg304, ptr align 8 %indirectarg305, i32 159) #6, !dbg !2115
  unreachable, !dbg !2115

match306:                                         ; preds = %185
  %188 = load ptr, ptr %out290, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg308, ptr align 8 %x291, i32 16, i1 false)
  %189 = call i64 %fn_phi301(ptr %retparam307, ptr %188, ptr align 8 %indirectarg308), !dbg !2115
  %not_err309 = icmp eq i64 %189, 0, !dbg !2115
  %190 = call i1 @llvm.expect.i1(i1 %not_err309, i1 true), !dbg !2115
  br i1 %190, label %after_check311, label %assign_optional310, !dbg !2115

assign_optional310:                               ; preds = %match306
  store i64 %189, ptr %error_var289, align 8, !dbg !2115
  br label %guard_block312, !dbg !2115

after_check311:                                   ; preds = %match306
  br label %noerr_block313, !dbg !2115

guard_block312:                                   ; preds = %assign_optional310
  %191 = load i64, ptr %error_var289, align 8, !dbg !2115
  store i64 %191, ptr %error_var285, align 8, !dbg !2115
  br label %guard_block366, !dbg !2115

noerr_block313:                                   ; preds = %after_check311
  %192 = load i64, ptr %retparam307, align 8, !dbg !2115
  store i64 %192, ptr %len288, align 8, !dbg !2115
  %ptradd315 = getelementptr inbounds i8, ptr %out286, i64 8, !dbg !2117
  %193 = load i64, ptr %ptradd315, align 8, !dbg !2117
  %194 = inttoptr i64 %193 to ptr, !dbg !2117
  %type318 = load ptr, ptr %.cachedtype317, align 8, !dbg !2044
  %195 = icmp eq ptr %194, %type318, !dbg !2044
  br i1 %195, label %cache_hit321, label %cache_miss319, !dbg !2044

cache_miss319:                                    ; preds = %noerr_block313
  %ptradd320 = getelementptr inbounds i8, ptr %194, i64 16, !dbg !2044
  %196 = load ptr, ptr %ptradd320, align 8, !dbg !2044
  %197 = call ptr @.dyn_search(ptr %196, ptr @"$sel.write_byte"), !dbg !2044
  store ptr %197, ptr %.inlinecache316, align 8, !dbg !2044
  store ptr %194, ptr %.cachedtype317, align 8, !dbg !2044
  br label %198, !dbg !2044

cache_hit321:                                     ; preds = %noerr_block313
  %cache_hit_fn322 = load ptr, ptr %.inlinecache316, align 8, !dbg !2044
  br label %198, !dbg !2044

198:                                              ; preds = %cache_hit321, %cache_miss319
  %fn_phi323 = phi ptr [ %cache_hit_fn322, %cache_hit321 ], [ %197, %cache_miss319 ], !dbg !2044
  %199 = icmp eq ptr %fn_phi323, null, !dbg !2044
  br i1 %199, label %missing_function324, label %match328, !dbg !2044

missing_function324:                              ; preds = %198
  store %"char[]" { ptr @.panic_msg.115, i64 47 }, ptr %indirectarg325, align 8
  store %"char[]" { ptr @.file.114, i64 5 }, ptr %indirectarg326, align 8
  store %"char[]" { ptr @.func.111, i64 13 }, ptr %indirectarg327, align 8
  %200 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %200(ptr align 8 %indirectarg325, ptr align 8 %indirectarg326, ptr align 8 %indirectarg327, i32 216) #6, !dbg !2117
  unreachable, !dbg !2117

match328:                                         ; preds = %198
  %201 = load ptr, ptr %out286, align 8, !dbg !2117
  %202 = call i64 %fn_phi323(ptr %201, i8 10), !dbg !2117
  %not_err329 = icmp eq i64 %202, 0, !dbg !2117
  %203 = call i1 @llvm.expect.i1(i1 %not_err329, i1 true), !dbg !2117
  br i1 %203, label %after_check331, label %assign_optional330, !dbg !2117

assign_optional330:                               ; preds = %match328
  store i64 %202, ptr %error_var314, align 8, !dbg !2117
  br label %guard_block332, !dbg !2117

after_check331:                                   ; preds = %match328
  br label %noerr_block333, !dbg !2117

guard_block332:                                   ; preds = %assign_optional330
  %204 = load i64, ptr %error_var314, align 8, !dbg !2117
  store i64 %204, ptr %error_var285, align 8, !dbg !2117
  br label %guard_block366, !dbg !2117

noerr_block333:                                   ; preds = %after_check331
  %205 = load %any, ptr %out286, align 8, !dbg !2118
  %206 = extractvalue %any %205, 1, !dbg !2118
  %207 = inttoptr i64 %206 to ptr, !dbg !2118
  %type336 = load ptr, ptr %.cachedtype335, align 8, !dbg !2044
  %208 = icmp eq ptr %207, %type336, !dbg !2044
  br i1 %208, label %cache_hit339, label %cache_miss337, !dbg !2044

cache_miss337:                                    ; preds = %noerr_block333
  %ptradd338 = getelementptr inbounds i8, ptr %207, i64 16, !dbg !2044
  %209 = load ptr, ptr %ptradd338, align 8, !dbg !2044
  %210 = call ptr @.dyn_search(ptr %209, ptr @"$sel.flush"), !dbg !2044
  store ptr %210, ptr %.inlinecache334, align 8, !dbg !2044
  store ptr %207, ptr %.cachedtype335, align 8, !dbg !2044
  br label %211, !dbg !2044

cache_hit339:                                     ; preds = %noerr_block333
  %cache_hit_fn340 = load ptr, ptr %.inlinecache334, align 8, !dbg !2044
  br label %211, !dbg !2044

211:                                              ; preds = %cache_hit339, %cache_miss337
  %fn_phi341 = phi ptr [ %cache_hit_fn340, %cache_hit339 ], [ %210, %cache_miss337 ], !dbg !2044
  %i2b342 = icmp ne ptr %fn_phi341, null, !dbg !2044
  br i1 %i2b342, label %if.then343, label %if.exit364, !dbg !2044

if.then343:                                       ; preds = %211
  %ptradd345 = getelementptr inbounds i8, ptr %out286, i64 8, !dbg !2118
  %212 = load i64, ptr %ptradd345, align 8, !dbg !2118
  %213 = inttoptr i64 %212 to ptr, !dbg !2118
  %type348 = load ptr, ptr %.cachedtype347, align 8, !dbg !2044
  %214 = icmp eq ptr %213, %type348, !dbg !2044
  br i1 %214, label %cache_hit351, label %cache_miss349, !dbg !2044

cache_miss349:                                    ; preds = %if.then343
  %ptradd350 = getelementptr inbounds i8, ptr %213, i64 16, !dbg !2044
  %215 = load ptr, ptr %ptradd350, align 8, !dbg !2044
  %216 = call ptr @.dyn_search(ptr %215, ptr @"$sel.flush"), !dbg !2044
  store ptr %216, ptr %.inlinecache346, align 8, !dbg !2044
  store ptr %213, ptr %.cachedtype347, align 8, !dbg !2044
  br label %217, !dbg !2044

cache_hit351:                                     ; preds = %if.then343
  %cache_hit_fn352 = load ptr, ptr %.inlinecache346, align 8, !dbg !2044
  br label %217, !dbg !2044

217:                                              ; preds = %cache_hit351, %cache_miss349
  %fn_phi353 = phi ptr [ %cache_hit_fn352, %cache_hit351 ], [ %216, %cache_miss349 ], !dbg !2044
  %218 = icmp eq ptr %fn_phi353, null, !dbg !2044
  br i1 %218, label %missing_function354, label %match358, !dbg !2044

missing_function354:                              ; preds = %217
  store %"char[]" { ptr @.panic_msg.116, i64 42 }, ptr %indirectarg355, align 8
  store %"char[]" { ptr @.file.114, i64 5 }, ptr %indirectarg356, align 8
  store %"char[]" { ptr @.func.111, i64 13 }, ptr %indirectarg357, align 8
  %219 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %219(ptr align 8 %indirectarg355, ptr align 8 %indirectarg356, ptr align 8 %indirectarg357, i32 219) #6, !dbg !2118
  unreachable, !dbg !2118

match358:                                         ; preds = %217
  %220 = load ptr, ptr %out286, align 8, !dbg !2118
  %221 = call i64 %fn_phi353(ptr %220), !dbg !2118
  %not_err359 = icmp eq i64 %221, 0, !dbg !2118
  %222 = call i1 @llvm.expect.i1(i1 %not_err359, i1 true), !dbg !2118
  br i1 %222, label %after_check361, label %assign_optional360, !dbg !2118

assign_optional360:                               ; preds = %match358
  store i64 %221, ptr %error_var344, align 8, !dbg !2118
  br label %guard_block362, !dbg !2118

after_check361:                                   ; preds = %match358
  br label %noerr_block363, !dbg !2118

guard_block362:                                   ; preds = %assign_optional360
  %223 = load i64, ptr %error_var344, align 8, !dbg !2118
  store i64 %223, ptr %error_var285, align 8, !dbg !2118
  br label %guard_block366, !dbg !2118

noerr_block363:                                   ; preds = %after_check361
  br label %if.exit364, !dbg !2118

if.exit364:                                       ; preds = %noerr_block363, %211
  %224 = load i64, ptr %len288, align 8, !dbg !2119
  %add365 = add i64 %224, 1, !dbg !2119
  br label %noerr_block367, !dbg !2119

guard_block366:                                   ; preds = %guard_block362, %guard_block332, %guard_block312
  %225 = load ptr, ptr %state, align 8, !dbg !2120
  call void @std.core.mem.allocator.pop_pool(ptr %225) #7, !dbg !2120
  %226 = load i64, ptr %error_var285, align 8, !dbg !2120
  ret i64 %226, !dbg !2120

noerr_block367:                                   ; preds = %if.exit364
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %out369, ptr align 8 %1, i32 16, i1 false)
  store %"char[]" { ptr @.str.121, i64 64 }, ptr %x370, align 8
    #dbg_declare(ptr %len371, !2122, !DIExpression(), !2124)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %out373, ptr align 8 %out369, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %x374, ptr align 8 %x370, i32 16, i1 false)
  %ptradd376 = getelementptr inbounds i8, ptr %out373, i64 8, !dbg !2126
  %227 = load i64, ptr %ptradd376, align 8, !dbg !2126
  %228 = inttoptr i64 %227 to ptr, !dbg !2126
  %type379 = load ptr, ptr %.cachedtype378, align 8, !dbg !2044
  %229 = icmp eq ptr %228, %type379, !dbg !2044
  br i1 %229, label %cache_hit382, label %cache_miss380, !dbg !2044

cache_miss380:                                    ; preds = %noerr_block367
  %ptradd381 = getelementptr inbounds i8, ptr %228, i64 16, !dbg !2044
  %230 = load ptr, ptr %ptradd381, align 8, !dbg !2044
  %231 = call ptr @.dyn_search(ptr %230, ptr @"$sel.write"), !dbg !2044
  store ptr %231, ptr %.inlinecache377, align 8, !dbg !2044
  store ptr %228, ptr %.cachedtype378, align 8, !dbg !2044
  br label %232, !dbg !2044

cache_hit382:                                     ; preds = %noerr_block367
  %cache_hit_fn383 = load ptr, ptr %.inlinecache377, align 8, !dbg !2044
  br label %232, !dbg !2044

232:                                              ; preds = %cache_hit382, %cache_miss380
  %fn_phi384 = phi ptr [ %cache_hit_fn383, %cache_hit382 ], [ %231, %cache_miss380 ], !dbg !2044
  %233 = icmp eq ptr %fn_phi384, null, !dbg !2044
  br i1 %233, label %missing_function385, label %match389, !dbg !2044

missing_function385:                              ; preds = %232
  store %"char[]" { ptr @.panic_msg.113, i64 42 }, ptr %indirectarg386, align 8
  store %"char[]" { ptr @.file.114, i64 5 }, ptr %indirectarg387, align 8
  store %"char[]" { ptr @.func.111, i64 13 }, ptr %indirectarg388, align 8
  %234 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %234(ptr align 8 %indirectarg386, ptr align 8 %indirectarg387, ptr align 8 %indirectarg388, i32 159) #6, !dbg !2126
  unreachable, !dbg !2126

match389:                                         ; preds = %232
  %235 = load ptr, ptr %out373, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg391, ptr align 8 %x374, i32 16, i1 false)
  %236 = call i64 %fn_phi384(ptr %retparam390, ptr %235, ptr align 8 %indirectarg391), !dbg !2126
  %not_err392 = icmp eq i64 %236, 0, !dbg !2126
  %237 = call i1 @llvm.expect.i1(i1 %not_err392, i1 true), !dbg !2126
  br i1 %237, label %after_check394, label %assign_optional393, !dbg !2126

assign_optional393:                               ; preds = %match389
  store i64 %236, ptr %error_var372, align 8, !dbg !2126
  br label %guard_block395, !dbg !2126

after_check394:                                   ; preds = %match389
  br label %noerr_block396, !dbg !2126

guard_block395:                                   ; preds = %assign_optional393
  %238 = load i64, ptr %error_var372, align 8, !dbg !2126
  store i64 %238, ptr %error_var368, align 8, !dbg !2126
  br label %guard_block449, !dbg !2126

noerr_block396:                                   ; preds = %after_check394
  %239 = load i64, ptr %retparam390, align 8, !dbg !2126
  store i64 %239, ptr %len371, align 8, !dbg !2126
  %ptradd398 = getelementptr inbounds i8, ptr %out369, i64 8, !dbg !2128
  %240 = load i64, ptr %ptradd398, align 8, !dbg !2128
  %241 = inttoptr i64 %240 to ptr, !dbg !2128
  %type401 = load ptr, ptr %.cachedtype400, align 8, !dbg !2044
  %242 = icmp eq ptr %241, %type401, !dbg !2044
  br i1 %242, label %cache_hit404, label %cache_miss402, !dbg !2044

cache_miss402:                                    ; preds = %noerr_block396
  %ptradd403 = getelementptr inbounds i8, ptr %241, i64 16, !dbg !2044
  %243 = load ptr, ptr %ptradd403, align 8, !dbg !2044
  %244 = call ptr @.dyn_search(ptr %243, ptr @"$sel.write_byte"), !dbg !2044
  store ptr %244, ptr %.inlinecache399, align 8, !dbg !2044
  store ptr %241, ptr %.cachedtype400, align 8, !dbg !2044
  br label %245, !dbg !2044

cache_hit404:                                     ; preds = %noerr_block396
  %cache_hit_fn405 = load ptr, ptr %.inlinecache399, align 8, !dbg !2044
  br label %245, !dbg !2044

245:                                              ; preds = %cache_hit404, %cache_miss402
  %fn_phi406 = phi ptr [ %cache_hit_fn405, %cache_hit404 ], [ %244, %cache_miss402 ], !dbg !2044
  %246 = icmp eq ptr %fn_phi406, null, !dbg !2044
  br i1 %246, label %missing_function407, label %match411, !dbg !2044

missing_function407:                              ; preds = %245
  store %"char[]" { ptr @.panic_msg.115, i64 47 }, ptr %indirectarg408, align 8
  store %"char[]" { ptr @.file.114, i64 5 }, ptr %indirectarg409, align 8
  store %"char[]" { ptr @.func.111, i64 13 }, ptr %indirectarg410, align 8
  %247 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %247(ptr align 8 %indirectarg408, ptr align 8 %indirectarg409, ptr align 8 %indirectarg410, i32 216) #6, !dbg !2128
  unreachable, !dbg !2128

match411:                                         ; preds = %245
  %248 = load ptr, ptr %out369, align 8, !dbg !2128
  %249 = call i64 %fn_phi406(ptr %248, i8 10), !dbg !2128
  %not_err412 = icmp eq i64 %249, 0, !dbg !2128
  %250 = call i1 @llvm.expect.i1(i1 %not_err412, i1 true), !dbg !2128
  br i1 %250, label %after_check414, label %assign_optional413, !dbg !2128

assign_optional413:                               ; preds = %match411
  store i64 %249, ptr %error_var397, align 8, !dbg !2128
  br label %guard_block415, !dbg !2128

after_check414:                                   ; preds = %match411
  br label %noerr_block416, !dbg !2128

guard_block415:                                   ; preds = %assign_optional413
  %251 = load i64, ptr %error_var397, align 8, !dbg !2128
  store i64 %251, ptr %error_var368, align 8, !dbg !2128
  br label %guard_block449, !dbg !2128

noerr_block416:                                   ; preds = %after_check414
  %252 = load %any, ptr %out369, align 8, !dbg !2129
  %253 = extractvalue %any %252, 1, !dbg !2129
  %254 = inttoptr i64 %253 to ptr, !dbg !2129
  %type419 = load ptr, ptr %.cachedtype418, align 8, !dbg !2044
  %255 = icmp eq ptr %254, %type419, !dbg !2044
  br i1 %255, label %cache_hit422, label %cache_miss420, !dbg !2044

cache_miss420:                                    ; preds = %noerr_block416
  %ptradd421 = getelementptr inbounds i8, ptr %254, i64 16, !dbg !2044
  %256 = load ptr, ptr %ptradd421, align 8, !dbg !2044
  %257 = call ptr @.dyn_search(ptr %256, ptr @"$sel.flush"), !dbg !2044
  store ptr %257, ptr %.inlinecache417, align 8, !dbg !2044
  store ptr %254, ptr %.cachedtype418, align 8, !dbg !2044
  br label %258, !dbg !2044

cache_hit422:                                     ; preds = %noerr_block416
  %cache_hit_fn423 = load ptr, ptr %.inlinecache417, align 8, !dbg !2044
  br label %258, !dbg !2044

258:                                              ; preds = %cache_hit422, %cache_miss420
  %fn_phi424 = phi ptr [ %cache_hit_fn423, %cache_hit422 ], [ %257, %cache_miss420 ], !dbg !2044
  %i2b425 = icmp ne ptr %fn_phi424, null, !dbg !2044
  br i1 %i2b425, label %if.then426, label %if.exit447, !dbg !2044

if.then426:                                       ; preds = %258
  %ptradd428 = getelementptr inbounds i8, ptr %out369, i64 8, !dbg !2129
  %259 = load i64, ptr %ptradd428, align 8, !dbg !2129
  %260 = inttoptr i64 %259 to ptr, !dbg !2129
  %type431 = load ptr, ptr %.cachedtype430, align 8, !dbg !2044
  %261 = icmp eq ptr %260, %type431, !dbg !2044
  br i1 %261, label %cache_hit434, label %cache_miss432, !dbg !2044

cache_miss432:                                    ; preds = %if.then426
  %ptradd433 = getelementptr inbounds i8, ptr %260, i64 16, !dbg !2044
  %262 = load ptr, ptr %ptradd433, align 8, !dbg !2044
  %263 = call ptr @.dyn_search(ptr %262, ptr @"$sel.flush"), !dbg !2044
  store ptr %263, ptr %.inlinecache429, align 8, !dbg !2044
  store ptr %260, ptr %.cachedtype430, align 8, !dbg !2044
  br label %264, !dbg !2044

cache_hit434:                                     ; preds = %if.then426
  %cache_hit_fn435 = load ptr, ptr %.inlinecache429, align 8, !dbg !2044
  br label %264, !dbg !2044

264:                                              ; preds = %cache_hit434, %cache_miss432
  %fn_phi436 = phi ptr [ %cache_hit_fn435, %cache_hit434 ], [ %263, %cache_miss432 ], !dbg !2044
  %265 = icmp eq ptr %fn_phi436, null, !dbg !2044
  br i1 %265, label %missing_function437, label %match441, !dbg !2044

missing_function437:                              ; preds = %264
  store %"char[]" { ptr @.panic_msg.116, i64 42 }, ptr %indirectarg438, align 8
  store %"char[]" { ptr @.file.114, i64 5 }, ptr %indirectarg439, align 8
  store %"char[]" { ptr @.func.111, i64 13 }, ptr %indirectarg440, align 8
  %266 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %266(ptr align 8 %indirectarg438, ptr align 8 %indirectarg439, ptr align 8 %indirectarg440, i32 219) #6, !dbg !2129
  unreachable, !dbg !2129

match441:                                         ; preds = %264
  %267 = load ptr, ptr %out369, align 8, !dbg !2129
  %268 = call i64 %fn_phi436(ptr %267), !dbg !2129
  %not_err442 = icmp eq i64 %268, 0, !dbg !2129
  %269 = call i1 @llvm.expect.i1(i1 %not_err442, i1 true), !dbg !2129
  br i1 %269, label %after_check444, label %assign_optional443, !dbg !2129

assign_optional443:                               ; preds = %match441
  store i64 %268, ptr %error_var427, align 8, !dbg !2129
  br label %guard_block445, !dbg !2129

after_check444:                                   ; preds = %match441
  br label %noerr_block446, !dbg !2129

guard_block445:                                   ; preds = %assign_optional443
  %270 = load i64, ptr %error_var427, align 8, !dbg !2129
  store i64 %270, ptr %error_var368, align 8, !dbg !2129
  br label %guard_block449, !dbg !2129

noerr_block446:                                   ; preds = %after_check444
  br label %if.exit447, !dbg !2129

if.exit447:                                       ; preds = %noerr_block446, %258
  %271 = load i64, ptr %len371, align 8, !dbg !2130
  %add448 = add i64 %271, 1, !dbg !2130
  br label %noerr_block450, !dbg !2130

guard_block449:                                   ; preds = %guard_block445, %guard_block415, %guard_block395
  %272 = load ptr, ptr %state, align 8, !dbg !2131
  call void @std.core.mem.allocator.pop_pool(ptr %272) #7, !dbg !2131
  %273 = load i64, ptr %error_var368, align 8, !dbg !2131
  ret i64 %273, !dbg !2131

noerr_block450:                                   ; preds = %if.exit447
  %ptradd451 = getelementptr inbounds i8, ptr %allocs, i64 8, !dbg !2133
  %274 = load i64, ptr %ptradd451, align 8, !dbg !2133
    #dbg_declare(ptr %.anon452, !2135, !DIExpression(), !2133)
  store i64 0, ptr %.anon452, align 8, !dbg !2133
  br label %loop.cond453, !dbg !2133

loop.cond453:                                     ; preds = %noerr_block529, %noerr_block450
  %275 = load i64, ptr %.anon452, align 8, !dbg !2133
  %lt454 = icmp ult i64 %275, %274, !dbg !2133
  br i1 %lt454, label %loop.body455, label %loop.exit531, !dbg !2133

loop.body455:                                     ; preds = %loop.cond453
    #dbg_declare(ptr %i456, !2136, !DIExpression(), !2138)
  %276 = load i64, ptr %.anon452, align 8, !dbg !2138
  store i64 %276, ptr %i456, align 8, !dbg !2138
    #dbg_declare(ptr %allocation457, !2139, !DIExpression(), !2138)
  %ptradd458 = getelementptr inbounds i8, ptr %allocs, i64 8, !dbg !2138
  %277 = load i64, ptr %ptradd458, align 8, !dbg !2138
  %278 = load ptr, ptr %allocs, align 8, !dbg !2138
  %279 = load i64, ptr %.anon452, align 8, !dbg !2138
  %ge459 = icmp uge i64 %279, %277, !dbg !2138
  %280 = call i1 @llvm.expect.i1(i1 %ge459, i1 false), !dbg !2138
  br i1 %280, label %panic460, label %checkok470, !dbg !2138

checkok470:                                       ; preds = %loop.body455
  %ptroffset471 = getelementptr inbounds [144 x i8], ptr %278, i64 %279, !dbg !2138
  store ptr %ptroffset471, ptr %allocation457, align 8, !dbg !2138
  %281 = load i64, ptr %entries, align 8, !dbg !2140
  %add472 = add i64 %281, 1, !dbg !2140
  store i64 %add472, ptr %entries, align 8, !dbg !2140
  %282 = load i64, ptr %total, align 8, !dbg !2142
  %283 = load ptr, ptr %allocation457, align 8, !dbg !2142
  %ptradd473 = getelementptr inbounds i8, ptr %283, i64 8, !dbg !2142
  %284 = load i64, ptr %ptradd473, align 8, !dbg !2142
  %add474 = add i64 %282, %284, !dbg !2142
  store i64 %add474, ptr %total, align 8, !dbg !2142
    #dbg_declare(ptr %backtraces, !2143, !DIExpression(), !2163)
  call void @llvm.memset.p0.i64(ptr align 8 %backtraces, i8 0, i64 40, i1 false), !dbg !2163
    #dbg_declare(ptr %trace, !2164, !DIExpression(), !2165)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %trace, ptr align 8 @std.os.backtrace.BACKTRACE_UNKNOWN, i32 88, i1 false), !dbg !2165
  %285 = load ptr, ptr %allocation457, align 8, !dbg !2166
  %ptradd475 = getelementptr inbounds i8, ptr %285, i64 16, !dbg !2166
  %ptradd476 = getelementptr inbounds i8, ptr %ptradd475, i64 24, !dbg !2166
  %286 = load ptr, ptr %ptradd476, align 8, !dbg !2166
  %i2b477 = icmp ne ptr %286, null, !dbg !2166
  br i1 %i2b477, label %if.then478, label %if.exit494, !dbg !2166

if.then478:                                       ; preds = %checkok470
    #dbg_declare(ptr %self479, !2167, !DIExpression(), !2170)
  %287 = call ptr @llvm.threadlocal.address.p0(ptr @std.core.mem.allocator.current_temp), !dbg !2170
  %288 = load ptr, ptr %allocation457, align 8, !dbg !2170
  %ptradd480 = getelementptr inbounds i8, ptr %288, i64 16, !dbg !2170
  %ptradd481 = getelementptr inbounds i8, ptr %ptradd480, i64 24, !dbg !2170
  %289 = insertvalue %"void*[]" undef, ptr %ptradd481, 0, !dbg !2170
  %290 = insertvalue %"void*[]" %289, i64 1, 1, !dbg !2170
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg483, ptr align 8 %287, i32 16, i1 false)
  store %"void*[]" %290, ptr %indirectarg484, align 8
  %291 = call i64 @std.os.win32.symbolize_backtrace(ptr %retparam482, ptr align 8 %indirectarg483, ptr align 8 %indirectarg484), !dbg !2170
  %not_err485 = icmp eq i64 %291, 0, !dbg !2170
  %292 = call i1 @llvm.expect.i1(i1 %not_err485, i1 true), !dbg !2170
  br i1 %292, label %after_check487, label %assign_optional486, !dbg !2170

assign_optional486:                               ; preds = %if.then478
  store i64 %291, ptr %self.f, align 8, !dbg !2170
  br label %after_assign, !dbg !2170

after_check487:                                   ; preds = %if.then478
  store ptr %retparam482, ptr %self479, align 8, !dbg !2170
  store i64 0, ptr %self.f, align 8, !dbg !2170
  br label %after_assign, !dbg !2170

after_assign:                                     ; preds = %after_check487, %assign_optional486
  %optval = load i64, ptr %self.f, align 8, !dbg !2170
  %not_err488 = icmp eq i64 %optval, 0, !dbg !2170
  %293 = call i1 @llvm.expect.i1(i1 %not_err488, i1 true), !dbg !2170
  br i1 %293, label %after_check489, label %else_block, !dbg !2170

after_check489:                                   ; preds = %after_assign
  %294 = load ptr, ptr %self479, align 8, !dbg !2171
  %295 = load i64, ptr %294, align 8, !dbg !2171
  %lt490 = icmp ult i64 0, %295, !dbg !2170
  br i1 %lt490, label %assert_ok, label %assert_fail, !dbg !2170

assert_fail:                                      ; preds = %after_check489
  store %"char[]" { ptr @.panic_msg.122, i64 62 }, ptr %indirectarg491, align 8
  store %"char[]" { ptr @.file.95, i64 21 }, ptr %indirectarg492, align 8
  store %"char[]" { ptr @.func.111, i64 13 }, ptr %indirectarg493, align 8
  %296 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %296(ptr align 8 %indirectarg491, ptr align 8 %indirectarg492, ptr align 8 %indirectarg493, i32 162) #6, !dbg !2170
  unreachable, !dbg !2170

assert_ok:                                        ; preds = %after_check489
  %297 = load ptr, ptr %self479, align 8
  call void @"std_collections_list$std.os.backtrace.Backtrace$.List.get"(ptr sret(%Backtrace) align 8 %sretparam, ptr %297, i64 0) #7, !dbg !2170
  br label %phi_block, !dbg !2170

else_block:                                       ; preds = %after_assign
  br label %phi_block, !dbg !2170

phi_block:                                        ; preds = %else_block, %assert_ok
  %val = phi ptr [ %sretparam, %assert_ok ], [ @std.os.backtrace.BACKTRACE_UNKNOWN, %else_block ], !dbg !2170
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %trace, ptr align 8 %val, i32 88, i1 false), !dbg !2170
  br label %if.exit494, !dbg !2170

if.exit494:                                       ; preds = %phi_block, %checkok470
  %ptradd495 = getelementptr inbounds i8, ptr %trace, i64 8, !dbg !2172
  %ptradd496 = getelementptr inbounds i8, ptr %ptradd495, i64 8, !dbg !2172
  %298 = load i64, ptr %ptradd496, align 8, !dbg !2172
  %i2b497 = icmp ne i64 %298, 0, !dbg !2172
  br i1 %i2b497, label %if.then498, label %if.exit499, !dbg !2172

if.then498:                                       ; preds = %if.exit494
  store i8 1, ptr %leaks, align 1, !dbg !2172
  br label %if.exit499, !dbg !2172

if.exit499:                                       ; preds = %if.then498, %if.exit494
  %299 = load ptr, ptr %allocation457, align 8, !dbg !2173
  %ptradd502 = getelementptr inbounds i8, ptr %299, i64 8, !dbg !2173
  %300 = insertvalue %any undef, ptr %ptradd502, 0, !dbg !2173
  %301 = insertvalue %any %300, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1, !dbg !2173
  store %any %301, ptr %varargslots501, align 16, !dbg !2173
  %302 = load ptr, ptr %allocation457, align 8, !dbg !2174
  %303 = insertvalue %any undef, ptr %302, 0, !dbg !2174
  %304 = insertvalue %any %303, i64 ptrtoint (ptr @"$ct.p$void" to i64), 1, !dbg !2174
  %ptradd503 = getelementptr inbounds i8, ptr %varargslots501, i64 16, !dbg !2174
  store %any %304, ptr %ptradd503, align 16, !dbg !2174
  %ptradd504 = getelementptr inbounds i8, ptr %trace, i64 8, !dbg !2174
  %ptradd505 = getelementptr inbounds i8, ptr %ptradd504, i64 8, !dbg !2174
  %305 = load i64, ptr %ptradd505, align 8, !dbg !2174
  %i2b506 = icmp ne i64 %305, 0, !dbg !2174
  br i1 %i2b506, label %cond.lhs, label %cond.rhs, !dbg !2174

cond.lhs:                                         ; preds = %if.exit499
  %ptradd507 = getelementptr inbounds i8, ptr %trace, i64 8, !dbg !2174
  %306 = load %"char[]", ptr %ptradd507, align 8, !dbg !2174
  br label %cond.phi, !dbg !2174

cond.rhs:                                         ; preds = %if.exit499
  br label %cond.phi, !dbg !2174

cond.phi:                                         ; preds = %cond.rhs, %cond.lhs
  %val508 = phi %"char[]" [ %306, %cond.lhs ], [ { ptr @.str.124, i64 3 }, %cond.rhs ], !dbg !2174
  store %"char[]" %val508, ptr %taddr509, align 8
  %307 = insertvalue %any undef, ptr %taddr509, 0, !dbg !2174
  %308 = insertvalue %any %307, i64 ptrtoint (ptr @"$ct.String" to i64), 1, !dbg !2174
  %ptradd510 = getelementptr inbounds i8, ptr %varargslots501, i64 32, !dbg !2174
  store %any %308, ptr %ptradd510, align 16, !dbg !2174
  %ptradd511 = getelementptr inbounds i8, ptr %trace, i64 56, !dbg !2175
  %309 = load i32, ptr %ptradd511, align 8, !dbg !2175
  %i2b512 = icmp ne i32 %309, 0, !dbg !2175
  br i1 %i2b512, label %cond.lhs513, label %cond.rhs515, !dbg !2175

cond.lhs513:                                      ; preds = %cond.phi
  %ptradd514 = getelementptr inbounds i8, ptr %trace, i64 56, !dbg !2175
  %310 = load i32, ptr %ptradd514, align 8, !dbg !2175
  br label %cond.phi516, !dbg !2175

cond.rhs515:                                      ; preds = %cond.phi
  br label %cond.phi516, !dbg !2175

cond.phi516:                                      ; preds = %cond.rhs515, %cond.lhs513
  %val517 = phi i32 [ %310, %cond.lhs513 ], [ 0, %cond.rhs515 ], !dbg !2175
  store i32 %val517, ptr %taddr518, align 4
  %311 = insertvalue %any undef, ptr %taddr518, 0, !dbg !2175
  %312 = insertvalue %any %311, i64 ptrtoint (ptr @"$ct.int" to i64), 1, !dbg !2175
  %ptradd519 = getelementptr inbounds i8, ptr %varargslots501, i64 48, !dbg !2175
  store %any %312, ptr %ptradd519, align 16, !dbg !2175
  %313 = insertvalue %"any[]" undef, ptr %varargslots501, 0, !dbg !2175
  %"$$temp520" = insertvalue %"any[]" %313, i64 4, 1, !dbg !2175
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg522, ptr align 8 %1, i32 16, i1 false)
  store %"char[]" { ptr @.str.123, i64 17 }, ptr %indirectarg523, align 8
  store %"any[]" %"$$temp520", ptr %indirectarg524, align 8
  %314 = call i64 @std.io.fprintfn(ptr %retparam521, ptr align 8 %indirectarg522, ptr align 8 %indirectarg523, ptr align 8 %indirectarg524), !dbg !2173
  %not_err525 = icmp eq i64 %314, 0, !dbg !2173
  %315 = call i1 @llvm.expect.i1(i1 %not_err525, i1 true), !dbg !2173
  br i1 %315, label %after_check527, label %assign_optional526, !dbg !2173

assign_optional526:                               ; preds = %cond.phi516
  store i64 %314, ptr %error_var500, align 8, !dbg !2173
  br label %guard_block528, !dbg !2173

after_check527:                                   ; preds = %cond.phi516
  br label %noerr_block529, !dbg !2173

guard_block528:                                   ; preds = %assign_optional526
  %316 = load ptr, ptr %state, align 8, !dbg !2176
  call void @std.core.mem.allocator.pop_pool(ptr %316) #7, !dbg !2176
  %317 = load i64, ptr %error_var500, align 8, !dbg !2176
  ret i64 %317, !dbg !2176

noerr_block529:                                   ; preds = %after_check527
  %318 = load i64, ptr %.anon452, align 8, !dbg !2133
  %addnuw530 = add nuw i64 %318, 1, !dbg !2133
  store i64 %addnuw530, ptr %.anon452, align 8, !dbg !2133
  br label %loop.cond453, !dbg !2133

loop.exit531:                                     ; preds = %loop.cond453
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %out533, ptr align 8 %1, i32 16, i1 false)
  store %"char[]" { ptr @.str.125, i64 83 }, ptr %x534, align 8
    #dbg_declare(ptr %len535, !2178, !DIExpression(), !2180)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %out537, ptr align 8 %out533, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %x538, ptr align 8 %x534, i32 16, i1 false)
  %ptradd540 = getelementptr inbounds i8, ptr %out537, i64 8, !dbg !2182
  %319 = load i64, ptr %ptradd540, align 8, !dbg !2182
  %320 = inttoptr i64 %319 to ptr, !dbg !2182
  %type543 = load ptr, ptr %.cachedtype542, align 8, !dbg !2044
  %321 = icmp eq ptr %320, %type543, !dbg !2044
  br i1 %321, label %cache_hit546, label %cache_miss544, !dbg !2044

cache_miss544:                                    ; preds = %loop.exit531
  %ptradd545 = getelementptr inbounds i8, ptr %320, i64 16, !dbg !2044
  %322 = load ptr, ptr %ptradd545, align 8, !dbg !2044
  %323 = call ptr @.dyn_search(ptr %322, ptr @"$sel.write"), !dbg !2044
  store ptr %323, ptr %.inlinecache541, align 8, !dbg !2044
  store ptr %320, ptr %.cachedtype542, align 8, !dbg !2044
  br label %324, !dbg !2044

cache_hit546:                                     ; preds = %loop.exit531
  %cache_hit_fn547 = load ptr, ptr %.inlinecache541, align 8, !dbg !2044
  br label %324, !dbg !2044

324:                                              ; preds = %cache_hit546, %cache_miss544
  %fn_phi548 = phi ptr [ %cache_hit_fn547, %cache_hit546 ], [ %323, %cache_miss544 ], !dbg !2044
  %325 = icmp eq ptr %fn_phi548, null, !dbg !2044
  br i1 %325, label %missing_function549, label %match553, !dbg !2044

missing_function549:                              ; preds = %324
  store %"char[]" { ptr @.panic_msg.113, i64 42 }, ptr %indirectarg550, align 8
  store %"char[]" { ptr @.file.114, i64 5 }, ptr %indirectarg551, align 8
  store %"char[]" { ptr @.func.111, i64 13 }, ptr %indirectarg552, align 8
  %326 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %326(ptr align 8 %indirectarg550, ptr align 8 %indirectarg551, ptr align 8 %indirectarg552, i32 159) #6, !dbg !2182
  unreachable, !dbg !2182

match553:                                         ; preds = %324
  %327 = load ptr, ptr %out537, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg555, ptr align 8 %x538, i32 16, i1 false)
  %328 = call i64 %fn_phi548(ptr %retparam554, ptr %327, ptr align 8 %indirectarg555), !dbg !2182
  %not_err556 = icmp eq i64 %328, 0, !dbg !2182
  %329 = call i1 @llvm.expect.i1(i1 %not_err556, i1 true), !dbg !2182
  br i1 %329, label %after_check558, label %assign_optional557, !dbg !2182

assign_optional557:                               ; preds = %match553
  store i64 %328, ptr %error_var536, align 8, !dbg !2182
  br label %guard_block559, !dbg !2182

after_check558:                                   ; preds = %match553
  br label %noerr_block560, !dbg !2182

guard_block559:                                   ; preds = %assign_optional557
  %330 = load i64, ptr %error_var536, align 8, !dbg !2182
  store i64 %330, ptr %error_var532, align 8, !dbg !2182
  br label %guard_block613, !dbg !2182

noerr_block560:                                   ; preds = %after_check558
  %331 = load i64, ptr %retparam554, align 8, !dbg !2182
  store i64 %331, ptr %len535, align 8, !dbg !2182
  %ptradd562 = getelementptr inbounds i8, ptr %out533, i64 8, !dbg !2184
  %332 = load i64, ptr %ptradd562, align 8, !dbg !2184
  %333 = inttoptr i64 %332 to ptr, !dbg !2184
  %type565 = load ptr, ptr %.cachedtype564, align 8, !dbg !2044
  %334 = icmp eq ptr %333, %type565, !dbg !2044
  br i1 %334, label %cache_hit568, label %cache_miss566, !dbg !2044

cache_miss566:                                    ; preds = %noerr_block560
  %ptradd567 = getelementptr inbounds i8, ptr %333, i64 16, !dbg !2044
  %335 = load ptr, ptr %ptradd567, align 8, !dbg !2044
  %336 = call ptr @.dyn_search(ptr %335, ptr @"$sel.write_byte"), !dbg !2044
  store ptr %336, ptr %.inlinecache563, align 8, !dbg !2044
  store ptr %333, ptr %.cachedtype564, align 8, !dbg !2044
  br label %337, !dbg !2044

cache_hit568:                                     ; preds = %noerr_block560
  %cache_hit_fn569 = load ptr, ptr %.inlinecache563, align 8, !dbg !2044
  br label %337, !dbg !2044

337:                                              ; preds = %cache_hit568, %cache_miss566
  %fn_phi570 = phi ptr [ %cache_hit_fn569, %cache_hit568 ], [ %336, %cache_miss566 ], !dbg !2044
  %338 = icmp eq ptr %fn_phi570, null, !dbg !2044
  br i1 %338, label %missing_function571, label %match575, !dbg !2044

missing_function571:                              ; preds = %337
  store %"char[]" { ptr @.panic_msg.115, i64 47 }, ptr %indirectarg572, align 8
  store %"char[]" { ptr @.file.114, i64 5 }, ptr %indirectarg573, align 8
  store %"char[]" { ptr @.func.111, i64 13 }, ptr %indirectarg574, align 8
  %339 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %339(ptr align 8 %indirectarg572, ptr align 8 %indirectarg573, ptr align 8 %indirectarg574, i32 216) #6, !dbg !2184
  unreachable, !dbg !2184

match575:                                         ; preds = %337
  %340 = load ptr, ptr %out533, align 8, !dbg !2184
  %341 = call i64 %fn_phi570(ptr %340, i8 10), !dbg !2184
  %not_err576 = icmp eq i64 %341, 0, !dbg !2184
  %342 = call i1 @llvm.expect.i1(i1 %not_err576, i1 true), !dbg !2184
  br i1 %342, label %after_check578, label %assign_optional577, !dbg !2184

assign_optional577:                               ; preds = %match575
  store i64 %341, ptr %error_var561, align 8, !dbg !2184
  br label %guard_block579, !dbg !2184

after_check578:                                   ; preds = %match575
  br label %noerr_block580, !dbg !2184

guard_block579:                                   ; preds = %assign_optional577
  %343 = load i64, ptr %error_var561, align 8, !dbg !2184
  store i64 %343, ptr %error_var532, align 8, !dbg !2184
  br label %guard_block613, !dbg !2184

noerr_block580:                                   ; preds = %after_check578
  %344 = load %any, ptr %out533, align 8, !dbg !2185
  %345 = extractvalue %any %344, 1, !dbg !2185
  %346 = inttoptr i64 %345 to ptr, !dbg !2185
  %type583 = load ptr, ptr %.cachedtype582, align 8, !dbg !2044
  %347 = icmp eq ptr %346, %type583, !dbg !2044
  br i1 %347, label %cache_hit586, label %cache_miss584, !dbg !2044

cache_miss584:                                    ; preds = %noerr_block580
  %ptradd585 = getelementptr inbounds i8, ptr %346, i64 16, !dbg !2044
  %348 = load ptr, ptr %ptradd585, align 8, !dbg !2044
  %349 = call ptr @.dyn_search(ptr %348, ptr @"$sel.flush"), !dbg !2044
  store ptr %349, ptr %.inlinecache581, align 8, !dbg !2044
  store ptr %346, ptr %.cachedtype582, align 8, !dbg !2044
  br label %350, !dbg !2044

cache_hit586:                                     ; preds = %noerr_block580
  %cache_hit_fn587 = load ptr, ptr %.inlinecache581, align 8, !dbg !2044
  br label %350, !dbg !2044

350:                                              ; preds = %cache_hit586, %cache_miss584
  %fn_phi588 = phi ptr [ %cache_hit_fn587, %cache_hit586 ], [ %349, %cache_miss584 ], !dbg !2044
  %i2b589 = icmp ne ptr %fn_phi588, null, !dbg !2044
  br i1 %i2b589, label %if.then590, label %if.exit611, !dbg !2044

if.then590:                                       ; preds = %350
  %ptradd592 = getelementptr inbounds i8, ptr %out533, i64 8, !dbg !2185
  %351 = load i64, ptr %ptradd592, align 8, !dbg !2185
  %352 = inttoptr i64 %351 to ptr, !dbg !2185
  %type595 = load ptr, ptr %.cachedtype594, align 8, !dbg !2044
  %353 = icmp eq ptr %352, %type595, !dbg !2044
  br i1 %353, label %cache_hit598, label %cache_miss596, !dbg !2044

cache_miss596:                                    ; preds = %if.then590
  %ptradd597 = getelementptr inbounds i8, ptr %352, i64 16, !dbg !2044
  %354 = load ptr, ptr %ptradd597, align 8, !dbg !2044
  %355 = call ptr @.dyn_search(ptr %354, ptr @"$sel.flush"), !dbg !2044
  store ptr %355, ptr %.inlinecache593, align 8, !dbg !2044
  store ptr %352, ptr %.cachedtype594, align 8, !dbg !2044
  br label %356, !dbg !2044

cache_hit598:                                     ; preds = %if.then590
  %cache_hit_fn599 = load ptr, ptr %.inlinecache593, align 8, !dbg !2044
  br label %356, !dbg !2044

356:                                              ; preds = %cache_hit598, %cache_miss596
  %fn_phi600 = phi ptr [ %cache_hit_fn599, %cache_hit598 ], [ %355, %cache_miss596 ], !dbg !2044
  %357 = icmp eq ptr %fn_phi600, null, !dbg !2044
  br i1 %357, label %missing_function601, label %match605, !dbg !2044

missing_function601:                              ; preds = %356
  store %"char[]" { ptr @.panic_msg.116, i64 42 }, ptr %indirectarg602, align 8
  store %"char[]" { ptr @.file.114, i64 5 }, ptr %indirectarg603, align 8
  store %"char[]" { ptr @.func.111, i64 13 }, ptr %indirectarg604, align 8
  %358 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %358(ptr align 8 %indirectarg602, ptr align 8 %indirectarg603, ptr align 8 %indirectarg604, i32 219) #6, !dbg !2185
  unreachable, !dbg !2185

match605:                                         ; preds = %356
  %359 = load ptr, ptr %out533, align 8, !dbg !2185
  %360 = call i64 %fn_phi600(ptr %359), !dbg !2185
  %not_err606 = icmp eq i64 %360, 0, !dbg !2185
  %361 = call i1 @llvm.expect.i1(i1 %not_err606, i1 true), !dbg !2185
  br i1 %361, label %after_check608, label %assign_optional607, !dbg !2185

assign_optional607:                               ; preds = %match605
  store i64 %360, ptr %error_var591, align 8, !dbg !2185
  br label %guard_block609, !dbg !2185

after_check608:                                   ; preds = %match605
  br label %noerr_block610, !dbg !2185

guard_block609:                                   ; preds = %assign_optional607
  %362 = load i64, ptr %error_var591, align 8, !dbg !2185
  store i64 %362, ptr %error_var532, align 8, !dbg !2185
  br label %guard_block613, !dbg !2185

noerr_block610:                                   ; preds = %after_check608
  br label %if.exit611, !dbg !2185

if.exit611:                                       ; preds = %noerr_block610, %350
  %363 = load i64, ptr %len535, align 8, !dbg !2186
  %add612 = add i64 %363, 1, !dbg !2186
  br label %noerr_block614, !dbg !2186

guard_block613:                                   ; preds = %guard_block609, %guard_block579, %guard_block559
  %364 = load ptr, ptr %state, align 8, !dbg !2187
  call void @std.core.mem.allocator.pop_pool(ptr %364) #7, !dbg !2187
  %365 = load i64, ptr %error_var532, align 8, !dbg !2187
  ret i64 %365, !dbg !2187

noerr_block614:                                   ; preds = %if.exit611
  br label %if.exit615, !dbg !2187

if.exit615:                                       ; preds = %noerr_block614, %noerr_block284
  br label %if.exit700, !dbg !2187

if.else616:                                       ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %out618, ptr align 8 %1, i32 16, i1 false)
  store %"char[]" { ptr @.str.126, i64 24 }, ptr %x619, align 8
    #dbg_declare(ptr %len620, !2189, !DIExpression(), !2191)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %out622, ptr align 8 %out618, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %x623, ptr align 8 %x619, i32 16, i1 false)
  %ptradd625 = getelementptr inbounds i8, ptr %out622, i64 8, !dbg !2194
  %366 = load i64, ptr %ptradd625, align 8, !dbg !2194
  %367 = inttoptr i64 %366 to ptr, !dbg !2194
  %type628 = load ptr, ptr %.cachedtype627, align 8, !dbg !2044
  %368 = icmp eq ptr %367, %type628, !dbg !2044
  br i1 %368, label %cache_hit631, label %cache_miss629, !dbg !2044

cache_miss629:                                    ; preds = %if.else616
  %ptradd630 = getelementptr inbounds i8, ptr %367, i64 16, !dbg !2044
  %369 = load ptr, ptr %ptradd630, align 8, !dbg !2044
  %370 = call ptr @.dyn_search(ptr %369, ptr @"$sel.write"), !dbg !2044
  store ptr %370, ptr %.inlinecache626, align 8, !dbg !2044
  store ptr %367, ptr %.cachedtype627, align 8, !dbg !2044
  br label %371, !dbg !2044

cache_hit631:                                     ; preds = %if.else616
  %cache_hit_fn632 = load ptr, ptr %.inlinecache626, align 8, !dbg !2044
  br label %371, !dbg !2044

371:                                              ; preds = %cache_hit631, %cache_miss629
  %fn_phi633 = phi ptr [ %cache_hit_fn632, %cache_hit631 ], [ %370, %cache_miss629 ], !dbg !2044
  %372 = icmp eq ptr %fn_phi633, null, !dbg !2044
  br i1 %372, label %missing_function634, label %match638, !dbg !2044

missing_function634:                              ; preds = %371
  store %"char[]" { ptr @.panic_msg.113, i64 42 }, ptr %indirectarg635, align 8
  store %"char[]" { ptr @.file.114, i64 5 }, ptr %indirectarg636, align 8
  store %"char[]" { ptr @.func.111, i64 13 }, ptr %indirectarg637, align 8
  %373 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %373(ptr align 8 %indirectarg635, ptr align 8 %indirectarg636, ptr align 8 %indirectarg637, i32 159) #6, !dbg !2194
  unreachable, !dbg !2194

match638:                                         ; preds = %371
  %374 = load ptr, ptr %out622, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg640, ptr align 8 %x623, i32 16, i1 false)
  %375 = call i64 %fn_phi633(ptr %retparam639, ptr %374, ptr align 8 %indirectarg640), !dbg !2194
  %not_err641 = icmp eq i64 %375, 0, !dbg !2194
  %376 = call i1 @llvm.expect.i1(i1 %not_err641, i1 true), !dbg !2194
  br i1 %376, label %after_check643, label %assign_optional642, !dbg !2194

assign_optional642:                               ; preds = %match638
  store i64 %375, ptr %error_var621, align 8, !dbg !2194
  br label %guard_block644, !dbg !2194

after_check643:                                   ; preds = %match638
  br label %noerr_block645, !dbg !2194

guard_block644:                                   ; preds = %assign_optional642
  %377 = load i64, ptr %error_var621, align 8, !dbg !2194
  store i64 %377, ptr %error_var617, align 8, !dbg !2194
  br label %guard_block698, !dbg !2194

noerr_block645:                                   ; preds = %after_check643
  %378 = load i64, ptr %retparam639, align 8, !dbg !2194
  store i64 %378, ptr %len620, align 8, !dbg !2194
  %ptradd647 = getelementptr inbounds i8, ptr %out618, i64 8, !dbg !2196
  %379 = load i64, ptr %ptradd647, align 8, !dbg !2196
  %380 = inttoptr i64 %379 to ptr, !dbg !2196
  %type650 = load ptr, ptr %.cachedtype649, align 8, !dbg !2044
  %381 = icmp eq ptr %380, %type650, !dbg !2044
  br i1 %381, label %cache_hit653, label %cache_miss651, !dbg !2044

cache_miss651:                                    ; preds = %noerr_block645
  %ptradd652 = getelementptr inbounds i8, ptr %380, i64 16, !dbg !2044
  %382 = load ptr, ptr %ptradd652, align 8, !dbg !2044
  %383 = call ptr @.dyn_search(ptr %382, ptr @"$sel.write_byte"), !dbg !2044
  store ptr %383, ptr %.inlinecache648, align 8, !dbg !2044
  store ptr %380, ptr %.cachedtype649, align 8, !dbg !2044
  br label %384, !dbg !2044

cache_hit653:                                     ; preds = %noerr_block645
  %cache_hit_fn654 = load ptr, ptr %.inlinecache648, align 8, !dbg !2044
  br label %384, !dbg !2044

384:                                              ; preds = %cache_hit653, %cache_miss651
  %fn_phi655 = phi ptr [ %cache_hit_fn654, %cache_hit653 ], [ %383, %cache_miss651 ], !dbg !2044
  %385 = icmp eq ptr %fn_phi655, null, !dbg !2044
  br i1 %385, label %missing_function656, label %match660, !dbg !2044

missing_function656:                              ; preds = %384
  store %"char[]" { ptr @.panic_msg.115, i64 47 }, ptr %indirectarg657, align 8
  store %"char[]" { ptr @.file.114, i64 5 }, ptr %indirectarg658, align 8
  store %"char[]" { ptr @.func.111, i64 13 }, ptr %indirectarg659, align 8
  %386 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %386(ptr align 8 %indirectarg657, ptr align 8 %indirectarg658, ptr align 8 %indirectarg659, i32 216) #6, !dbg !2196
  unreachable, !dbg !2196

match660:                                         ; preds = %384
  %387 = load ptr, ptr %out618, align 8, !dbg !2196
  %388 = call i64 %fn_phi655(ptr %387, i8 10), !dbg !2196
  %not_err661 = icmp eq i64 %388, 0, !dbg !2196
  %389 = call i1 @llvm.expect.i1(i1 %not_err661, i1 true), !dbg !2196
  br i1 %389, label %after_check663, label %assign_optional662, !dbg !2196

assign_optional662:                               ; preds = %match660
  store i64 %388, ptr %error_var646, align 8, !dbg !2196
  br label %guard_block664, !dbg !2196

after_check663:                                   ; preds = %match660
  br label %noerr_block665, !dbg !2196

guard_block664:                                   ; preds = %assign_optional662
  %390 = load i64, ptr %error_var646, align 8, !dbg !2196
  store i64 %390, ptr %error_var617, align 8, !dbg !2196
  br label %guard_block698, !dbg !2196

noerr_block665:                                   ; preds = %after_check663
  %391 = load %any, ptr %out618, align 8, !dbg !2197
  %392 = extractvalue %any %391, 1, !dbg !2197
  %393 = inttoptr i64 %392 to ptr, !dbg !2197
  %type668 = load ptr, ptr %.cachedtype667, align 8, !dbg !2044
  %394 = icmp eq ptr %393, %type668, !dbg !2044
  br i1 %394, label %cache_hit671, label %cache_miss669, !dbg !2044

cache_miss669:                                    ; preds = %noerr_block665
  %ptradd670 = getelementptr inbounds i8, ptr %393, i64 16, !dbg !2044
  %395 = load ptr, ptr %ptradd670, align 8, !dbg !2044
  %396 = call ptr @.dyn_search(ptr %395, ptr @"$sel.flush"), !dbg !2044
  store ptr %396, ptr %.inlinecache666, align 8, !dbg !2044
  store ptr %393, ptr %.cachedtype667, align 8, !dbg !2044
  br label %397, !dbg !2044

cache_hit671:                                     ; preds = %noerr_block665
  %cache_hit_fn672 = load ptr, ptr %.inlinecache666, align 8, !dbg !2044
  br label %397, !dbg !2044

397:                                              ; preds = %cache_hit671, %cache_miss669
  %fn_phi673 = phi ptr [ %cache_hit_fn672, %cache_hit671 ], [ %396, %cache_miss669 ], !dbg !2044
  %i2b674 = icmp ne ptr %fn_phi673, null, !dbg !2044
  br i1 %i2b674, label %if.then675, label %if.exit696, !dbg !2044

if.then675:                                       ; preds = %397
  %ptradd677 = getelementptr inbounds i8, ptr %out618, i64 8, !dbg !2197
  %398 = load i64, ptr %ptradd677, align 8, !dbg !2197
  %399 = inttoptr i64 %398 to ptr, !dbg !2197
  %type680 = load ptr, ptr %.cachedtype679, align 8, !dbg !2044
  %400 = icmp eq ptr %399, %type680, !dbg !2044
  br i1 %400, label %cache_hit683, label %cache_miss681, !dbg !2044

cache_miss681:                                    ; preds = %if.then675
  %ptradd682 = getelementptr inbounds i8, ptr %399, i64 16, !dbg !2044
  %401 = load ptr, ptr %ptradd682, align 8, !dbg !2044
  %402 = call ptr @.dyn_search(ptr %401, ptr @"$sel.flush"), !dbg !2044
  store ptr %402, ptr %.inlinecache678, align 8, !dbg !2044
  store ptr %399, ptr %.cachedtype679, align 8, !dbg !2044
  br label %403, !dbg !2044

cache_hit683:                                     ; preds = %if.then675
  %cache_hit_fn684 = load ptr, ptr %.inlinecache678, align 8, !dbg !2044
  br label %403, !dbg !2044

403:                                              ; preds = %cache_hit683, %cache_miss681
  %fn_phi685 = phi ptr [ %cache_hit_fn684, %cache_hit683 ], [ %402, %cache_miss681 ], !dbg !2044
  %404 = icmp eq ptr %fn_phi685, null, !dbg !2044
  br i1 %404, label %missing_function686, label %match690, !dbg !2044

missing_function686:                              ; preds = %403
  store %"char[]" { ptr @.panic_msg.116, i64 42 }, ptr %indirectarg687, align 8
  store %"char[]" { ptr @.file.114, i64 5 }, ptr %indirectarg688, align 8
  store %"char[]" { ptr @.func.111, i64 13 }, ptr %indirectarg689, align 8
  %405 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %405(ptr align 8 %indirectarg687, ptr align 8 %indirectarg688, ptr align 8 %indirectarg689, i32 219) #6, !dbg !2197
  unreachable, !dbg !2197

match690:                                         ; preds = %403
  %406 = load ptr, ptr %out618, align 8, !dbg !2197
  %407 = call i64 %fn_phi685(ptr %406), !dbg !2197
  %not_err691 = icmp eq i64 %407, 0, !dbg !2197
  %408 = call i1 @llvm.expect.i1(i1 %not_err691, i1 true), !dbg !2197
  br i1 %408, label %after_check693, label %assign_optional692, !dbg !2197

assign_optional692:                               ; preds = %match690
  store i64 %407, ptr %error_var676, align 8, !dbg !2197
  br label %guard_block694, !dbg !2197

after_check693:                                   ; preds = %match690
  br label %noerr_block695, !dbg !2197

guard_block694:                                   ; preds = %assign_optional692
  %409 = load i64, ptr %error_var676, align 8, !dbg !2197
  store i64 %409, ptr %error_var617, align 8, !dbg !2197
  br label %guard_block698, !dbg !2197

noerr_block695:                                   ; preds = %after_check693
  br label %if.exit696, !dbg !2197

if.exit696:                                       ; preds = %noerr_block695, %397
  %410 = load i64, ptr %len620, align 8, !dbg !2198
  %add697 = add i64 %410, 1, !dbg !2198
  br label %noerr_block699, !dbg !2198

guard_block698:                                   ; preds = %guard_block694, %guard_block664, %guard_block644
  %411 = load ptr, ptr %state, align 8, !dbg !2199
  call void @std.core.mem.allocator.pop_pool(ptr %411) #7, !dbg !2199
  %412 = load i64, ptr %error_var617, align 8, !dbg !2199
  ret i64 %412, !dbg !2199

noerr_block699:                                   ; preds = %if.exit696
  br label %if.exit700, !dbg !2199

if.exit700:                                       ; preds = %noerr_block699, %if.exit615
  %413 = insertvalue %any undef, ptr %total, 0, !dbg !2201
  %414 = insertvalue %any %413, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1, !dbg !2201
  store %any %414, ptr %varargslots702, align 16, !dbg !2201
  %415 = insertvalue %"any[]" undef, ptr %varargslots702, 0, !dbg !2201
  %"$$temp703" = insertvalue %"any[]" %415, i64 1, 1, !dbg !2201
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg705, ptr align 8 %1, i32 16, i1 false)
  store %"char[]" { ptr @.str.127, i64 49 }, ptr %indirectarg706, align 8
  store %"any[]" %"$$temp703", ptr %indirectarg707, align 8
  %416 = call i64 @std.io.fprintfn(ptr %retparam704, ptr align 8 %indirectarg705, ptr align 8 %indirectarg706, ptr align 8 %indirectarg707), !dbg !2201
  %not_err708 = icmp eq i64 %416, 0, !dbg !2201
  %417 = call i1 @llvm.expect.i1(i1 %not_err708, i1 true), !dbg !2201
  br i1 %417, label %after_check710, label %assign_optional709, !dbg !2201

assign_optional709:                               ; preds = %if.exit700
  store i64 %416, ptr %error_var701, align 8, !dbg !2201
  br label %guard_block711, !dbg !2201

after_check710:                                   ; preds = %if.exit700
  br label %noerr_block712, !dbg !2201

guard_block711:                                   ; preds = %assign_optional709
  %418 = load ptr, ptr %state, align 8, !dbg !2202
  call void @std.core.mem.allocator.pop_pool(ptr %418) #7, !dbg !2202
  %419 = load i64, ptr %error_var701, align 8, !dbg !2202
  ret i64 %419, !dbg !2202

noerr_block712:                                   ; preds = %after_check710
  %420 = insertvalue %any undef, ptr %entries, 0, !dbg !2204
  %421 = insertvalue %any %420, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1, !dbg !2204
  store %any %421, ptr %varargslots714, align 16, !dbg !2204
  %422 = insertvalue %"any[]" undef, ptr %varargslots714, 0, !dbg !2204
  %"$$temp715" = insertvalue %"any[]" %422, i64 1, 1, !dbg !2204
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg717, ptr align 8 %1, i32 16, i1 false)
  store %"char[]" { ptr @.str.128, i64 49 }, ptr %indirectarg718, align 8
  store %"any[]" %"$$temp715", ptr %indirectarg719, align 8
  %423 = call i64 @std.io.fprintfn(ptr %retparam716, ptr align 8 %indirectarg717, ptr align 8 %indirectarg718, ptr align 8 %indirectarg719), !dbg !2204
  %not_err720 = icmp eq i64 %423, 0, !dbg !2204
  %424 = call i1 @llvm.expect.i1(i1 %not_err720, i1 true), !dbg !2204
  br i1 %424, label %after_check722, label %assign_optional721, !dbg !2204

assign_optional721:                               ; preds = %noerr_block712
  store i64 %423, ptr %error_var713, align 8, !dbg !2204
  br label %guard_block723, !dbg !2204

after_check722:                                   ; preds = %noerr_block712
  br label %noerr_block724, !dbg !2204

guard_block723:                                   ; preds = %assign_optional721
  %425 = load ptr, ptr %state, align 8, !dbg !2205
  call void @std.core.mem.allocator.pop_pool(ptr %425) #7, !dbg !2205
  %426 = load i64, ptr %error_var713, align 8, !dbg !2205
  ret i64 %426, !dbg !2205

noerr_block724:                                   ; preds = %after_check722
  %427 = load ptr, ptr %self, align 8, !dbg !2207
  %ptradd727 = getelementptr inbounds i8, ptr %427, i64 72, !dbg !2207
  %428 = insertvalue %any undef, ptr %ptradd727, 0, !dbg !2207
  %429 = insertvalue %any %428, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1, !dbg !2207
  store %any %429, ptr %varargslots726, align 16, !dbg !2207
  %430 = insertvalue %"any[]" undef, ptr %varargslots726, 0, !dbg !2207
  %"$$temp728" = insertvalue %"any[]" %430, i64 1, 1, !dbg !2207
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg730, ptr align 8 %1, i32 16, i1 false)
  store %"char[]" { ptr @.str.129, i64 49 }, ptr %indirectarg731, align 8
  store %"any[]" %"$$temp728", ptr %indirectarg732, align 8
  %431 = call i64 @std.io.fprintfn(ptr %retparam729, ptr align 8 %indirectarg730, ptr align 8 %indirectarg731, ptr align 8 %indirectarg732), !dbg !2207
  %not_err733 = icmp eq i64 %431, 0, !dbg !2207
  %432 = call i1 @llvm.expect.i1(i1 %not_err733, i1 true), !dbg !2207
  br i1 %432, label %after_check735, label %assign_optional734, !dbg !2207

assign_optional734:                               ; preds = %noerr_block724
  store i64 %431, ptr %error_var725, align 8, !dbg !2207
  br label %guard_block736, !dbg !2207

after_check735:                                   ; preds = %noerr_block724
  br label %noerr_block737, !dbg !2207

guard_block736:                                   ; preds = %assign_optional734
  %433 = load ptr, ptr %state, align 8, !dbg !2208
  call void @std.core.mem.allocator.pop_pool(ptr %433) #7, !dbg !2208
  %434 = load i64, ptr %error_var725, align 8, !dbg !2208
  ret i64 %434, !dbg !2208

noerr_block737:                                   ; preds = %after_check735
  %435 = load ptr, ptr %self, align 8, !dbg !2210
  %ptradd740 = getelementptr inbounds i8, ptr %435, i64 64, !dbg !2210
  %436 = insertvalue %any undef, ptr %ptradd740, 0, !dbg !2210
  %437 = insertvalue %any %436, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1, !dbg !2210
  store %any %437, ptr %varargslots739, align 16, !dbg !2210
  %438 = insertvalue %"any[]" undef, ptr %varargslots739, 0, !dbg !2210
  %"$$temp741" = insertvalue %"any[]" %438, i64 1, 1, !dbg !2210
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg743, ptr align 8 %1, i32 16, i1 false)
  store %"char[]" { ptr @.str.130, i64 49 }, ptr %indirectarg744, align 8
  store %"any[]" %"$$temp741", ptr %indirectarg745, align 8
  %439 = call i64 @std.io.fprintfn(ptr %retparam742, ptr align 8 %indirectarg743, ptr align 8 %indirectarg744, ptr align 8 %indirectarg745), !dbg !2210
  %not_err746 = icmp eq i64 %439, 0, !dbg !2210
  %440 = call i1 @llvm.expect.i1(i1 %not_err746, i1 true), !dbg !2210
  br i1 %440, label %after_check748, label %assign_optional747, !dbg !2210

assign_optional747:                               ; preds = %noerr_block737
  store i64 %439, ptr %error_var738, align 8, !dbg !2210
  br label %guard_block749, !dbg !2210

after_check748:                                   ; preds = %noerr_block737
  br label %noerr_block750, !dbg !2210

guard_block749:                                   ; preds = %assign_optional747
  %441 = load ptr, ptr %state, align 8, !dbg !2211
  call void @std.core.mem.allocator.pop_pool(ptr %441) #7, !dbg !2211
  %442 = load i64, ptr %error_var738, align 8, !dbg !2211
  ret i64 %442, !dbg !2211

noerr_block750:                                   ; preds = %after_check748
  %443 = load i8, ptr %leaks, align 1, !dbg !2213
  %444 = trunc i8 %443 to i1, !dbg !2213
  br i1 %444, label %if.then751, label %if.exit1117, !dbg !2213

if.then751:                                       ; preds = %noerr_block750
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %out753, ptr align 8 %1, i32 16, i1 false)
  store %"char[]" { ptr @.emptystr, i64 0 }, ptr %x754, align 8
    #dbg_declare(ptr %len755, !2214, !DIExpression(), !2216)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %out757, ptr align 8 %out753, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %x758, ptr align 8 %x754, i32 16, i1 false)
  %ptradd760 = getelementptr inbounds i8, ptr %out757, i64 8, !dbg !2219
  %445 = load i64, ptr %ptradd760, align 8, !dbg !2219
  %446 = inttoptr i64 %445 to ptr, !dbg !2219
  %type763 = load ptr, ptr %.cachedtype762, align 8, !dbg !2044
  %447 = icmp eq ptr %446, %type763, !dbg !2044
  br i1 %447, label %cache_hit766, label %cache_miss764, !dbg !2044

cache_miss764:                                    ; preds = %if.then751
  %ptradd765 = getelementptr inbounds i8, ptr %446, i64 16, !dbg !2044
  %448 = load ptr, ptr %ptradd765, align 8, !dbg !2044
  %449 = call ptr @.dyn_search(ptr %448, ptr @"$sel.write"), !dbg !2044
  store ptr %449, ptr %.inlinecache761, align 8, !dbg !2044
  store ptr %446, ptr %.cachedtype762, align 8, !dbg !2044
  br label %450, !dbg !2044

cache_hit766:                                     ; preds = %if.then751
  %cache_hit_fn767 = load ptr, ptr %.inlinecache761, align 8, !dbg !2044
  br label %450, !dbg !2044

450:                                              ; preds = %cache_hit766, %cache_miss764
  %fn_phi768 = phi ptr [ %cache_hit_fn767, %cache_hit766 ], [ %449, %cache_miss764 ], !dbg !2044
  %451 = icmp eq ptr %fn_phi768, null, !dbg !2044
  br i1 %451, label %missing_function769, label %match773, !dbg !2044

missing_function769:                              ; preds = %450
  store %"char[]" { ptr @.panic_msg.113, i64 42 }, ptr %indirectarg770, align 8
  store %"char[]" { ptr @.file.114, i64 5 }, ptr %indirectarg771, align 8
  store %"char[]" { ptr @.func.111, i64 13 }, ptr %indirectarg772, align 8
  %452 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %452(ptr align 8 %indirectarg770, ptr align 8 %indirectarg771, ptr align 8 %indirectarg772, i32 159) #6, !dbg !2219
  unreachable, !dbg !2219

match773:                                         ; preds = %450
  %453 = load ptr, ptr %out757, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg775, ptr align 8 %x758, i32 16, i1 false)
  %454 = call i64 %fn_phi768(ptr %retparam774, ptr %453, ptr align 8 %indirectarg775), !dbg !2219
  %not_err776 = icmp eq i64 %454, 0, !dbg !2219
  %455 = call i1 @llvm.expect.i1(i1 %not_err776, i1 true), !dbg !2219
  br i1 %455, label %after_check778, label %assign_optional777, !dbg !2219

assign_optional777:                               ; preds = %match773
  store i64 %454, ptr %error_var756, align 8, !dbg !2219
  br label %guard_block779, !dbg !2219

after_check778:                                   ; preds = %match773
  br label %noerr_block780, !dbg !2219

guard_block779:                                   ; preds = %assign_optional777
  %456 = load i64, ptr %error_var756, align 8, !dbg !2219
  store i64 %456, ptr %error_var752, align 8, !dbg !2219
  br label %guard_block833, !dbg !2219

noerr_block780:                                   ; preds = %after_check778
  %457 = load i64, ptr %retparam774, align 8, !dbg !2219
  store i64 %457, ptr %len755, align 8, !dbg !2219
  %ptradd782 = getelementptr inbounds i8, ptr %out753, i64 8, !dbg !2221
  %458 = load i64, ptr %ptradd782, align 8, !dbg !2221
  %459 = inttoptr i64 %458 to ptr, !dbg !2221
  %type785 = load ptr, ptr %.cachedtype784, align 8, !dbg !2044
  %460 = icmp eq ptr %459, %type785, !dbg !2044
  br i1 %460, label %cache_hit788, label %cache_miss786, !dbg !2044

cache_miss786:                                    ; preds = %noerr_block780
  %ptradd787 = getelementptr inbounds i8, ptr %459, i64 16, !dbg !2044
  %461 = load ptr, ptr %ptradd787, align 8, !dbg !2044
  %462 = call ptr @.dyn_search(ptr %461, ptr @"$sel.write_byte"), !dbg !2044
  store ptr %462, ptr %.inlinecache783, align 8, !dbg !2044
  store ptr %459, ptr %.cachedtype784, align 8, !dbg !2044
  br label %463, !dbg !2044

cache_hit788:                                     ; preds = %noerr_block780
  %cache_hit_fn789 = load ptr, ptr %.inlinecache783, align 8, !dbg !2044
  br label %463, !dbg !2044

463:                                              ; preds = %cache_hit788, %cache_miss786
  %fn_phi790 = phi ptr [ %cache_hit_fn789, %cache_hit788 ], [ %462, %cache_miss786 ], !dbg !2044
  %464 = icmp eq ptr %fn_phi790, null, !dbg !2044
  br i1 %464, label %missing_function791, label %match795, !dbg !2044

missing_function791:                              ; preds = %463
  store %"char[]" { ptr @.panic_msg.115, i64 47 }, ptr %indirectarg792, align 8
  store %"char[]" { ptr @.file.114, i64 5 }, ptr %indirectarg793, align 8
  store %"char[]" { ptr @.func.111, i64 13 }, ptr %indirectarg794, align 8
  %465 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %465(ptr align 8 %indirectarg792, ptr align 8 %indirectarg793, ptr align 8 %indirectarg794, i32 216) #6, !dbg !2221
  unreachable, !dbg !2221

match795:                                         ; preds = %463
  %466 = load ptr, ptr %out753, align 8, !dbg !2221
  %467 = call i64 %fn_phi790(ptr %466, i8 10), !dbg !2221
  %not_err796 = icmp eq i64 %467, 0, !dbg !2221
  %468 = call i1 @llvm.expect.i1(i1 %not_err796, i1 true), !dbg !2221
  br i1 %468, label %after_check798, label %assign_optional797, !dbg !2221

assign_optional797:                               ; preds = %match795
  store i64 %467, ptr %error_var781, align 8, !dbg !2221
  br label %guard_block799, !dbg !2221

after_check798:                                   ; preds = %match795
  br label %noerr_block800, !dbg !2221

guard_block799:                                   ; preds = %assign_optional797
  %469 = load i64, ptr %error_var781, align 8, !dbg !2221
  store i64 %469, ptr %error_var752, align 8, !dbg !2221
  br label %guard_block833, !dbg !2221

noerr_block800:                                   ; preds = %after_check798
  %470 = load %any, ptr %out753, align 8, !dbg !2222
  %471 = extractvalue %any %470, 1, !dbg !2222
  %472 = inttoptr i64 %471 to ptr, !dbg !2222
  %type803 = load ptr, ptr %.cachedtype802, align 8, !dbg !2044
  %473 = icmp eq ptr %472, %type803, !dbg !2044
  br i1 %473, label %cache_hit806, label %cache_miss804, !dbg !2044

cache_miss804:                                    ; preds = %noerr_block800
  %ptradd805 = getelementptr inbounds i8, ptr %472, i64 16, !dbg !2044
  %474 = load ptr, ptr %ptradd805, align 8, !dbg !2044
  %475 = call ptr @.dyn_search(ptr %474, ptr @"$sel.flush"), !dbg !2044
  store ptr %475, ptr %.inlinecache801, align 8, !dbg !2044
  store ptr %472, ptr %.cachedtype802, align 8, !dbg !2044
  br label %476, !dbg !2044

cache_hit806:                                     ; preds = %noerr_block800
  %cache_hit_fn807 = load ptr, ptr %.inlinecache801, align 8, !dbg !2044
  br label %476, !dbg !2044

476:                                              ; preds = %cache_hit806, %cache_miss804
  %fn_phi808 = phi ptr [ %cache_hit_fn807, %cache_hit806 ], [ %475, %cache_miss804 ], !dbg !2044
  %i2b809 = icmp ne ptr %fn_phi808, null, !dbg !2044
  br i1 %i2b809, label %if.then810, label %if.exit831, !dbg !2044

if.then810:                                       ; preds = %476
  %ptradd812 = getelementptr inbounds i8, ptr %out753, i64 8, !dbg !2222
  %477 = load i64, ptr %ptradd812, align 8, !dbg !2222
  %478 = inttoptr i64 %477 to ptr, !dbg !2222
  %type815 = load ptr, ptr %.cachedtype814, align 8, !dbg !2044
  %479 = icmp eq ptr %478, %type815, !dbg !2044
  br i1 %479, label %cache_hit818, label %cache_miss816, !dbg !2044

cache_miss816:                                    ; preds = %if.then810
  %ptradd817 = getelementptr inbounds i8, ptr %478, i64 16, !dbg !2044
  %480 = load ptr, ptr %ptradd817, align 8, !dbg !2044
  %481 = call ptr @.dyn_search(ptr %480, ptr @"$sel.flush"), !dbg !2044
  store ptr %481, ptr %.inlinecache813, align 8, !dbg !2044
  store ptr %478, ptr %.cachedtype814, align 8, !dbg !2044
  br label %482, !dbg !2044

cache_hit818:                                     ; preds = %if.then810
  %cache_hit_fn819 = load ptr, ptr %.inlinecache813, align 8, !dbg !2044
  br label %482, !dbg !2044

482:                                              ; preds = %cache_hit818, %cache_miss816
  %fn_phi820 = phi ptr [ %cache_hit_fn819, %cache_hit818 ], [ %481, %cache_miss816 ], !dbg !2044
  %483 = icmp eq ptr %fn_phi820, null, !dbg !2044
  br i1 %483, label %missing_function821, label %match825, !dbg !2044

missing_function821:                              ; preds = %482
  store %"char[]" { ptr @.panic_msg.116, i64 42 }, ptr %indirectarg822, align 8
  store %"char[]" { ptr @.file.114, i64 5 }, ptr %indirectarg823, align 8
  store %"char[]" { ptr @.func.111, i64 13 }, ptr %indirectarg824, align 8
  %484 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %484(ptr align 8 %indirectarg822, ptr align 8 %indirectarg823, ptr align 8 %indirectarg824, i32 219) #6, !dbg !2222
  unreachable, !dbg !2222

match825:                                         ; preds = %482
  %485 = load ptr, ptr %out753, align 8, !dbg !2222
  %486 = call i64 %fn_phi820(ptr %485), !dbg !2222
  %not_err826 = icmp eq i64 %486, 0, !dbg !2222
  %487 = call i1 @llvm.expect.i1(i1 %not_err826, i1 true), !dbg !2222
  br i1 %487, label %after_check828, label %assign_optional827, !dbg !2222

assign_optional827:                               ; preds = %match825
  store i64 %486, ptr %error_var811, align 8, !dbg !2222
  br label %guard_block829, !dbg !2222

after_check828:                                   ; preds = %match825
  br label %noerr_block830, !dbg !2222

guard_block829:                                   ; preds = %assign_optional827
  %488 = load i64, ptr %error_var811, align 8, !dbg !2222
  store i64 %488, ptr %error_var752, align 8, !dbg !2222
  br label %guard_block833, !dbg !2222

noerr_block830:                                   ; preds = %after_check828
  br label %if.exit831, !dbg !2222

if.exit831:                                       ; preds = %noerr_block830, %476
  %489 = load i64, ptr %len755, align 8, !dbg !2223
  %add832 = add i64 %489, 1, !dbg !2223
  br label %noerr_block834, !dbg !2223

guard_block833:                                   ; preds = %guard_block829, %guard_block799, %guard_block779
  %490 = load ptr, ptr %state, align 8, !dbg !2224
  call void @std.core.mem.allocator.pop_pool(ptr %490) #7, !dbg !2224
  %491 = load i64, ptr %error_var752, align 8, !dbg !2224
  ret i64 %491, !dbg !2224

noerr_block834:                                   ; preds = %if.exit831
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %out836, ptr align 8 %1, i32 16, i1 false)
  store %"char[]" { ptr @.str.131, i64 17 }, ptr %x837, align 8
    #dbg_declare(ptr %len838, !2226, !DIExpression(), !2228)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %out840, ptr align 8 %out836, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %x841, ptr align 8 %x837, i32 16, i1 false)
  %ptradd843 = getelementptr inbounds i8, ptr %out840, i64 8, !dbg !2230
  %492 = load i64, ptr %ptradd843, align 8, !dbg !2230
  %493 = inttoptr i64 %492 to ptr, !dbg !2230
  %type846 = load ptr, ptr %.cachedtype845, align 8, !dbg !2044
  %494 = icmp eq ptr %493, %type846, !dbg !2044
  br i1 %494, label %cache_hit849, label %cache_miss847, !dbg !2044

cache_miss847:                                    ; preds = %noerr_block834
  %ptradd848 = getelementptr inbounds i8, ptr %493, i64 16, !dbg !2044
  %495 = load ptr, ptr %ptradd848, align 8, !dbg !2044
  %496 = call ptr @.dyn_search(ptr %495, ptr @"$sel.write"), !dbg !2044
  store ptr %496, ptr %.inlinecache844, align 8, !dbg !2044
  store ptr %493, ptr %.cachedtype845, align 8, !dbg !2044
  br label %497, !dbg !2044

cache_hit849:                                     ; preds = %noerr_block834
  %cache_hit_fn850 = load ptr, ptr %.inlinecache844, align 8, !dbg !2044
  br label %497, !dbg !2044

497:                                              ; preds = %cache_hit849, %cache_miss847
  %fn_phi851 = phi ptr [ %cache_hit_fn850, %cache_hit849 ], [ %496, %cache_miss847 ], !dbg !2044
  %498 = icmp eq ptr %fn_phi851, null, !dbg !2044
  br i1 %498, label %missing_function852, label %match856, !dbg !2044

missing_function852:                              ; preds = %497
  store %"char[]" { ptr @.panic_msg.113, i64 42 }, ptr %indirectarg853, align 8
  store %"char[]" { ptr @.file.114, i64 5 }, ptr %indirectarg854, align 8
  store %"char[]" { ptr @.func.111, i64 13 }, ptr %indirectarg855, align 8
  %499 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %499(ptr align 8 %indirectarg853, ptr align 8 %indirectarg854, ptr align 8 %indirectarg855, i32 159) #6, !dbg !2230
  unreachable, !dbg !2230

match856:                                         ; preds = %497
  %500 = load ptr, ptr %out840, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg858, ptr align 8 %x841, i32 16, i1 false)
  %501 = call i64 %fn_phi851(ptr %retparam857, ptr %500, ptr align 8 %indirectarg858), !dbg !2230
  %not_err859 = icmp eq i64 %501, 0, !dbg !2230
  %502 = call i1 @llvm.expect.i1(i1 %not_err859, i1 true), !dbg !2230
  br i1 %502, label %after_check861, label %assign_optional860, !dbg !2230

assign_optional860:                               ; preds = %match856
  store i64 %501, ptr %error_var839, align 8, !dbg !2230
  br label %guard_block862, !dbg !2230

after_check861:                                   ; preds = %match856
  br label %noerr_block863, !dbg !2230

guard_block862:                                   ; preds = %assign_optional860
  %503 = load i64, ptr %error_var839, align 8, !dbg !2230
  store i64 %503, ptr %error_var835, align 8, !dbg !2230
  br label %guard_block916, !dbg !2230

noerr_block863:                                   ; preds = %after_check861
  %504 = load i64, ptr %retparam857, align 8, !dbg !2230
  store i64 %504, ptr %len838, align 8, !dbg !2230
  %ptradd865 = getelementptr inbounds i8, ptr %out836, i64 8, !dbg !2232
  %505 = load i64, ptr %ptradd865, align 8, !dbg !2232
  %506 = inttoptr i64 %505 to ptr, !dbg !2232
  %type868 = load ptr, ptr %.cachedtype867, align 8, !dbg !2044
  %507 = icmp eq ptr %506, %type868, !dbg !2044
  br i1 %507, label %cache_hit871, label %cache_miss869, !dbg !2044

cache_miss869:                                    ; preds = %noerr_block863
  %ptradd870 = getelementptr inbounds i8, ptr %506, i64 16, !dbg !2044
  %508 = load ptr, ptr %ptradd870, align 8, !dbg !2044
  %509 = call ptr @.dyn_search(ptr %508, ptr @"$sel.write_byte"), !dbg !2044
  store ptr %509, ptr %.inlinecache866, align 8, !dbg !2044
  store ptr %506, ptr %.cachedtype867, align 8, !dbg !2044
  br label %510, !dbg !2044

cache_hit871:                                     ; preds = %noerr_block863
  %cache_hit_fn872 = load ptr, ptr %.inlinecache866, align 8, !dbg !2044
  br label %510, !dbg !2044

510:                                              ; preds = %cache_hit871, %cache_miss869
  %fn_phi873 = phi ptr [ %cache_hit_fn872, %cache_hit871 ], [ %509, %cache_miss869 ], !dbg !2044
  %511 = icmp eq ptr %fn_phi873, null, !dbg !2044
  br i1 %511, label %missing_function874, label %match878, !dbg !2044

missing_function874:                              ; preds = %510
  store %"char[]" { ptr @.panic_msg.115, i64 47 }, ptr %indirectarg875, align 8
  store %"char[]" { ptr @.file.114, i64 5 }, ptr %indirectarg876, align 8
  store %"char[]" { ptr @.func.111, i64 13 }, ptr %indirectarg877, align 8
  %512 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %512(ptr align 8 %indirectarg875, ptr align 8 %indirectarg876, ptr align 8 %indirectarg877, i32 216) #6, !dbg !2232
  unreachable, !dbg !2232

match878:                                         ; preds = %510
  %513 = load ptr, ptr %out836, align 8, !dbg !2232
  %514 = call i64 %fn_phi873(ptr %513, i8 10), !dbg !2232
  %not_err879 = icmp eq i64 %514, 0, !dbg !2232
  %515 = call i1 @llvm.expect.i1(i1 %not_err879, i1 true), !dbg !2232
  br i1 %515, label %after_check881, label %assign_optional880, !dbg !2232

assign_optional880:                               ; preds = %match878
  store i64 %514, ptr %error_var864, align 8, !dbg !2232
  br label %guard_block882, !dbg !2232

after_check881:                                   ; preds = %match878
  br label %noerr_block883, !dbg !2232

guard_block882:                                   ; preds = %assign_optional880
  %516 = load i64, ptr %error_var864, align 8, !dbg !2232
  store i64 %516, ptr %error_var835, align 8, !dbg !2232
  br label %guard_block916, !dbg !2232

noerr_block883:                                   ; preds = %after_check881
  %517 = load %any, ptr %out836, align 8, !dbg !2233
  %518 = extractvalue %any %517, 1, !dbg !2233
  %519 = inttoptr i64 %518 to ptr, !dbg !2233
  %type886 = load ptr, ptr %.cachedtype885, align 8, !dbg !2044
  %520 = icmp eq ptr %519, %type886, !dbg !2044
  br i1 %520, label %cache_hit889, label %cache_miss887, !dbg !2044

cache_miss887:                                    ; preds = %noerr_block883
  %ptradd888 = getelementptr inbounds i8, ptr %519, i64 16, !dbg !2044
  %521 = load ptr, ptr %ptradd888, align 8, !dbg !2044
  %522 = call ptr @.dyn_search(ptr %521, ptr @"$sel.flush"), !dbg !2044
  store ptr %522, ptr %.inlinecache884, align 8, !dbg !2044
  store ptr %519, ptr %.cachedtype885, align 8, !dbg !2044
  br label %523, !dbg !2044

cache_hit889:                                     ; preds = %noerr_block883
  %cache_hit_fn890 = load ptr, ptr %.inlinecache884, align 8, !dbg !2044
  br label %523, !dbg !2044

523:                                              ; preds = %cache_hit889, %cache_miss887
  %fn_phi891 = phi ptr [ %cache_hit_fn890, %cache_hit889 ], [ %522, %cache_miss887 ], !dbg !2044
  %i2b892 = icmp ne ptr %fn_phi891, null, !dbg !2044
  br i1 %i2b892, label %if.then893, label %if.exit914, !dbg !2044

if.then893:                                       ; preds = %523
  %ptradd895 = getelementptr inbounds i8, ptr %out836, i64 8, !dbg !2233
  %524 = load i64, ptr %ptradd895, align 8, !dbg !2233
  %525 = inttoptr i64 %524 to ptr, !dbg !2233
  %type898 = load ptr, ptr %.cachedtype897, align 8, !dbg !2044
  %526 = icmp eq ptr %525, %type898, !dbg !2044
  br i1 %526, label %cache_hit901, label %cache_miss899, !dbg !2044

cache_miss899:                                    ; preds = %if.then893
  %ptradd900 = getelementptr inbounds i8, ptr %525, i64 16, !dbg !2044
  %527 = load ptr, ptr %ptradd900, align 8, !dbg !2044
  %528 = call ptr @.dyn_search(ptr %527, ptr @"$sel.flush"), !dbg !2044
  store ptr %528, ptr %.inlinecache896, align 8, !dbg !2044
  store ptr %525, ptr %.cachedtype897, align 8, !dbg !2044
  br label %529, !dbg !2044

cache_hit901:                                     ; preds = %if.then893
  %cache_hit_fn902 = load ptr, ptr %.inlinecache896, align 8, !dbg !2044
  br label %529, !dbg !2044

529:                                              ; preds = %cache_hit901, %cache_miss899
  %fn_phi903 = phi ptr [ %cache_hit_fn902, %cache_hit901 ], [ %528, %cache_miss899 ], !dbg !2044
  %530 = icmp eq ptr %fn_phi903, null, !dbg !2044
  br i1 %530, label %missing_function904, label %match908, !dbg !2044

missing_function904:                              ; preds = %529
  store %"char[]" { ptr @.panic_msg.116, i64 42 }, ptr %indirectarg905, align 8
  store %"char[]" { ptr @.file.114, i64 5 }, ptr %indirectarg906, align 8
  store %"char[]" { ptr @.func.111, i64 13 }, ptr %indirectarg907, align 8
  %531 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %531(ptr align 8 %indirectarg905, ptr align 8 %indirectarg906, ptr align 8 %indirectarg907, i32 219) #6, !dbg !2233
  unreachable, !dbg !2233

match908:                                         ; preds = %529
  %532 = load ptr, ptr %out836, align 8, !dbg !2233
  %533 = call i64 %fn_phi903(ptr %532), !dbg !2233
  %not_err909 = icmp eq i64 %533, 0, !dbg !2233
  %534 = call i1 @llvm.expect.i1(i1 %not_err909, i1 true), !dbg !2233
  br i1 %534, label %after_check911, label %assign_optional910, !dbg !2233

assign_optional910:                               ; preds = %match908
  store i64 %533, ptr %error_var894, align 8, !dbg !2233
  br label %guard_block912, !dbg !2233

after_check911:                                   ; preds = %match908
  br label %noerr_block913, !dbg !2233

guard_block912:                                   ; preds = %assign_optional910
  %535 = load i64, ptr %error_var894, align 8, !dbg !2233
  store i64 %535, ptr %error_var835, align 8, !dbg !2233
  br label %guard_block916, !dbg !2233

noerr_block913:                                   ; preds = %after_check911
  br label %if.exit914, !dbg !2233

if.exit914:                                       ; preds = %noerr_block913, %523
  %536 = load i64, ptr %len838, align 8, !dbg !2234
  %add915 = add i64 %536, 1, !dbg !2234
  br label %noerr_block917, !dbg !2234

guard_block916:                                   ; preds = %guard_block912, %guard_block882, %guard_block862
  %537 = load ptr, ptr %state, align 8, !dbg !2235
  call void @std.core.mem.allocator.pop_pool(ptr %537) #7, !dbg !2235
  %538 = load i64, ptr %error_var835, align 8, !dbg !2235
  ret i64 %538, !dbg !2235

noerr_block917:                                   ; preds = %if.exit914
  %ptradd918 = getelementptr inbounds i8, ptr %allocs, i64 8, !dbg !2237
  %539 = load i64, ptr %ptradd918, align 8, !dbg !2237
    #dbg_declare(ptr %.anon919, !2239, !DIExpression(), !2237)
  store i64 0, ptr %.anon919, align 8, !dbg !2237
  br label %loop.cond920, !dbg !2237

loop.cond920:                                     ; preds = %loop.inc1114, %noerr_block917
  %540 = load i64, ptr %.anon919, align 8, !dbg !2237
  %lt921 = icmp ult i64 %540, %539, !dbg !2237
  br i1 %lt921, label %loop.body922, label %loop.exit1116, !dbg !2237

loop.body922:                                     ; preds = %loop.cond920
    #dbg_declare(ptr %i923, !2240, !DIExpression(), !2242)
  %541 = load i64, ptr %.anon919, align 8, !dbg !2242
  store i64 %541, ptr %i923, align 8, !dbg !2242
    #dbg_declare(ptr %allocation924, !2243, !DIExpression(), !2242)
  %ptradd925 = getelementptr inbounds i8, ptr %allocs, i64 8, !dbg !2242
  %542 = load i64, ptr %ptradd925, align 8, !dbg !2242
  %543 = load ptr, ptr %allocs, align 8, !dbg !2242
  %544 = load i64, ptr %.anon919, align 8, !dbg !2242
  %ge926 = icmp uge i64 %544, %542, !dbg !2242
  %545 = call i1 @llvm.expect.i1(i1 %ge926, i1 false), !dbg !2242
  br i1 %545, label %panic927, label %checkok937, !dbg !2242

checkok937:                                       ; preds = %loop.body922
  %ptroffset938 = getelementptr inbounds [144 x i8], ptr %543, i64 %544, !dbg !2242
  store ptr %ptroffset938, ptr %allocation924, align 8, !dbg !2242
  %546 = load ptr, ptr %allocation924, align 8, !dbg !2244
  %ptradd939 = getelementptr inbounds i8, ptr %546, i64 16, !dbg !2244
  %ptradd940 = getelementptr inbounds i8, ptr %ptradd939, i64 24, !dbg !2244
  %547 = load ptr, ptr %ptradd940, align 8, !dbg !2244
  %i2nb941 = icmp eq ptr %547, null, !dbg !2244
  br i1 %i2nb941, label %if.then942, label %if.exit959, !dbg !2244

if.then942:                                       ; preds = %checkok937
  %548 = load i64, ptr %i923, align 8, !dbg !2246
  %add945 = add i64 %548, 1, !dbg !2246
  store i64 %add945, ptr %taddr946, align 8
  %549 = insertvalue %any undef, ptr %taddr946, 0, !dbg !2246
  %550 = insertvalue %any %549, i64 ptrtoint (ptr @"$ct.long" to i64), 1, !dbg !2246
  store %any %550, ptr %varargslots944, align 16, !dbg !2246
  %551 = load ptr, ptr %allocation924, align 8, !dbg !2246
  %ptradd947 = getelementptr inbounds i8, ptr %551, i64 8, !dbg !2246
  %552 = insertvalue %any undef, ptr %ptradd947, 0, !dbg !2246
  %553 = insertvalue %any %552, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1, !dbg !2246
  %ptradd948 = getelementptr inbounds i8, ptr %varargslots944, i64 16, !dbg !2246
  store %any %553, ptr %ptradd948, align 16, !dbg !2246
  %554 = insertvalue %"any[]" undef, ptr %varargslots944, 0, !dbg !2246
  %"$$temp949" = insertvalue %"any[]" %554, i64 2, 1, !dbg !2246
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg951, ptr align 8 %1, i32 16, i1 false)
  store %"char[]" { ptr @.str.132, i64 50 }, ptr %indirectarg952, align 8
  store %"any[]" %"$$temp949", ptr %indirectarg953, align 8
  %555 = call i64 @std.io.fprintfn(ptr %retparam950, ptr align 8 %indirectarg951, ptr align 8 %indirectarg952, ptr align 8 %indirectarg953), !dbg !2246
  %not_err954 = icmp eq i64 %555, 0, !dbg !2246
  %556 = call i1 @llvm.expect.i1(i1 %not_err954, i1 true), !dbg !2246
  br i1 %556, label %after_check956, label %assign_optional955, !dbg !2246

assign_optional955:                               ; preds = %if.then942
  store i64 %555, ptr %error_var943, align 8, !dbg !2246
  br label %guard_block957, !dbg !2246

after_check956:                                   ; preds = %if.then942
  br label %noerr_block958, !dbg !2246

guard_block957:                                   ; preds = %assign_optional955
  %557 = load ptr, ptr %state, align 8, !dbg !2248
  call void @std.core.mem.allocator.pop_pool(ptr %557) #7, !dbg !2248
  %558 = load i64, ptr %error_var943, align 8, !dbg !2248
  ret i64 %558, !dbg !2248

noerr_block958:                                   ; preds = %after_check956
  br label %loop.inc1114, !dbg !2250

if.exit959:                                       ; preds = %checkok937
    #dbg_declare(ptr %backtraces960, !2251, !DIExpression(), !2252)
  call void @llvm.memset.p0.i64(ptr align 8 %backtraces960, i8 0, i64 40, i1 false), !dbg !2252
    #dbg_declare(ptr %end, !2253, !DIExpression(), !2254)
  store i64 16, ptr %end, align 8, !dbg !2254
  %559 = load ptr, ptr %allocation924, align 8, !dbg !2255
  %ptradd961 = getelementptr inbounds i8, ptr %559, i64 16, !dbg !2255
    #dbg_declare(ptr %.anon962, !2257, !DIExpression(), !2255)
  store i64 0, ptr %.anon962, align 8, !dbg !2255
  br label %loop.cond963, !dbg !2255

loop.cond963:                                     ; preds = %if.exit997, %if.exit959
  %560 = load i64, ptr %.anon962, align 8, !dbg !2255
  %gt = icmp ugt i64 16, %560, !dbg !2255
  br i1 %gt, label %loop.body964, label %loop.exit999, !dbg !2255

loop.body964:                                     ; preds = %loop.cond963
    #dbg_declare(ptr %j, !2258, !DIExpression(), !2260)
  %561 = load i64, ptr %.anon962, align 8, !dbg !2260
  store i64 %561, ptr %j, align 8, !dbg !2260
    #dbg_declare(ptr %val965, !2261, !DIExpression(), !2260)
  %checknull = icmp eq ptr %ptradd961, null, !dbg !2260
  %562 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !2260
  br i1 %562, label %panic966, label %checkok970, !dbg !2260

checkok970:                                       ; preds = %loop.body964
  %563 = ptrtoint ptr %ptradd961 to i64, !dbg !2260
  %564 = urem i64 %563, 8, !dbg !2260
  %565 = icmp ne i64 %564, 0, !dbg !2260
  %566 = call i1 @llvm.expect.i1(i1 %565, i1 false), !dbg !2260
  br i1 %566, label %panic971, label %checkok981, !dbg !2260

checkok981:                                       ; preds = %checkok970
  %567 = load i64, ptr %.anon962, align 8, !dbg !2260
  %ge982 = icmp uge i64 %567, 16, !dbg !2260
  %568 = call i1 @llvm.expect.i1(i1 %ge982, i1 false), !dbg !2260
  br i1 %568, label %panic983, label %checkok993, !dbg !2260

checkok993:                                       ; preds = %checkok981
  %ptroffset994 = getelementptr inbounds [8 x i8], ptr %ptradd961, i64 %567, !dbg !2260
  %569 = load ptr, ptr %ptroffset994, align 8, !dbg !2260
  store ptr %569, ptr %val965, align 8, !dbg !2260
  %570 = load ptr, ptr %val965, align 8, !dbg !2262
  %i2nb995 = icmp eq ptr %570, null, !dbg !2262
  br i1 %i2nb995, label %if.then996, label %if.exit997, !dbg !2262

if.then996:                                       ; preds = %checkok993
  %571 = load i64, ptr %j, align 8, !dbg !2264
  store i64 %571, ptr %end, align 8, !dbg !2264
  br label %loop.exit999, !dbg !2266

if.exit997:                                       ; preds = %checkok993
  %572 = load i64, ptr %.anon962, align 8, !dbg !2255
  %addnuw998 = add nuw i64 %572, 1, !dbg !2255
  store i64 %addnuw998, ptr %.anon962, align 8, !dbg !2255
  br label %loop.cond963, !dbg !2255

loop.exit999:                                     ; preds = %if.then996, %loop.cond963
    #dbg_declare(ptr %list, !2267, !DIExpression(), !2268)
  %573 = call ptr @llvm.threadlocal.address.p0(ptr @std.core.mem.allocator.current_temp), !dbg !2268
  %574 = load ptr, ptr %allocation924, align 8, !dbg !2268
  %ptradd1001 = getelementptr inbounds i8, ptr %574, i64 16, !dbg !2268
  %575 = load i64, ptr %end, align 8, !dbg !2268
  %sub = sub i64 %575, 1, !dbg !2268
  %gt1002 = icmp sgt i64 3, %sub, !dbg !2268
  %576 = call i1 @llvm.expect.i1(i1 %gt1002, i1 false), !dbg !2268
  br i1 %576, label %panic1003, label %checkok1013, !dbg !2268

checkok1013:                                      ; preds = %loop.exit999
  %le = icmp sle i64 16, %sub, !dbg !2268
  %577 = call i1 @llvm.expect.i1(i1 %le, i1 false), !dbg !2268
  br i1 %577, label %panic1014, label %checkok1024, !dbg !2268

checkok1024:                                      ; preds = %checkok1013
  %578 = add i64 %sub, 1, !dbg !2268
  %size = sub i64 %578, 3, !dbg !2268
  %ptradd1025 = getelementptr inbounds i8, ptr %ptradd1001, i64 24, !dbg !2268
  %579 = insertvalue %"void*[]" undef, ptr %ptradd1025, 0, !dbg !2268
  %580 = insertvalue %"void*[]" %579, i64 %size, 1, !dbg !2268
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg1027, ptr align 8 %573, i32 16, i1 false)
  store %"void*[]" %580, ptr %indirectarg1028, align 8
  %581 = call i64 @std.os.win32.symbolize_backtrace(ptr %retparam1026, ptr align 8 %indirectarg1027, ptr align 8 %indirectarg1028), !dbg !2268
  %not_err1029 = icmp eq i64 %581, 0, !dbg !2268
  %582 = call i1 @llvm.expect.i1(i1 %not_err1029, i1 true), !dbg !2268
  br i1 %582, label %after_check1031, label %assign_optional1030, !dbg !2268

assign_optional1030:                              ; preds = %checkok1024
  store i64 %581, ptr %error_var1000, align 8, !dbg !2268
  br label %guard_block1032, !dbg !2268

after_check1031:                                  ; preds = %checkok1024
  br label %noerr_block1033, !dbg !2268

guard_block1032:                                  ; preds = %assign_optional1030
  %583 = load ptr, ptr %state, align 8, !dbg !2269
  call void @std.core.mem.allocator.pop_pool(ptr %583) #7, !dbg !2269
  %584 = load i64, ptr %error_var1000, align 8, !dbg !2269
  ret i64 %584, !dbg !2269

noerr_block1033:                                  ; preds = %after_check1031
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %list, ptr align 8 %retparam1026, i32 40, i1 false), !dbg !2269
  %585 = load i64, ptr %i923, align 8, !dbg !2271
  %add1036 = add i64 %585, 1, !dbg !2271
  store i64 %add1036, ptr %taddr1037, align 8
  %586 = insertvalue %any undef, ptr %taddr1037, 0, !dbg !2271
  %587 = insertvalue %any %586, i64 ptrtoint (ptr @"$ct.long" to i64), 1, !dbg !2271
  store %any %587, ptr %varargslots1035, align 16, !dbg !2271
  %588 = load ptr, ptr %allocation924, align 8, !dbg !2271
  %ptradd1038 = getelementptr inbounds i8, ptr %588, i64 8, !dbg !2271
  %589 = insertvalue %any undef, ptr %ptradd1038, 0, !dbg !2271
  %590 = insertvalue %any %589, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1, !dbg !2271
  %ptradd1039 = getelementptr inbounds i8, ptr %varargslots1035, i64 16, !dbg !2271
  store %any %590, ptr %ptradd1039, align 16, !dbg !2271
  %591 = insertvalue %"any[]" undef, ptr %varargslots1035, 0, !dbg !2271
  %"$$temp1040" = insertvalue %"any[]" %591, i64 2, 1, !dbg !2271
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg1042, ptr align 8 %1, i32 16, i1 false)
  store %"char[]" { ptr @.str.136, i64 26 }, ptr %indirectarg1043, align 8
  store %"any[]" %"$$temp1040", ptr %indirectarg1044, align 8
  %592 = call i64 @std.io.fprintfn(ptr %retparam1041, ptr align 8 %indirectarg1042, ptr align 8 %indirectarg1043, ptr align 8 %indirectarg1044), !dbg !2271
  %not_err1045 = icmp eq i64 %592, 0, !dbg !2271
  %593 = call i1 @llvm.expect.i1(i1 %not_err1045, i1 true), !dbg !2271
  br i1 %593, label %after_check1047, label %assign_optional1046, !dbg !2271

assign_optional1046:                              ; preds = %noerr_block1033
  store i64 %592, ptr %error_var1034, align 8, !dbg !2271
  br label %guard_block1048, !dbg !2271

after_check1047:                                  ; preds = %noerr_block1033
  br label %noerr_block1049, !dbg !2271

guard_block1048:                                  ; preds = %assign_optional1046
  %594 = load ptr, ptr %state, align 8, !dbg !2272
  call void @std.core.mem.allocator.pop_pool(ptr %594) #7, !dbg !2272
  %595 = load i64, ptr %error_var1034, align 8, !dbg !2272
  ret i64 %595, !dbg !2272

noerr_block1049:                                  ; preds = %after_check1047
  %596 = call i64 @"std_collections_list$std.os.backtrace.Backtrace$.List.len"(ptr %list) #7, !dbg !2274
    #dbg_declare(ptr %.anon1050, !2276, !DIExpression(), !2274)
  store i64 0, ptr %.anon1050, align 8, !dbg !2274
  br label %loop.cond1051, !dbg !2274

loop.cond1051:                                    ; preds = %loop.inc, %noerr_block1049
  %597 = load i64, ptr %.anon1050, align 8, !dbg !2274
  %lt1052 = icmp ult i64 %597, %596, !dbg !2274
  br i1 %lt1052, label %loop.body1053, label %loop.exit1113, !dbg !2274

loop.body1053:                                    ; preds = %loop.cond1051
    #dbg_declare(ptr %trace1054, !2277, !DIExpression(), !2279)
  store ptr %list, ptr %self1055, align 8
  %598 = load i64, ptr %.anon1050, align 8
  store i64 %598, ptr %index, align 8
  %599 = load ptr, ptr %self1055, align 8, !dbg !2280
  %neq = icmp ne ptr %599, null, !dbg !2280
  br i1 %neq, label %assert_ok1060, label %assert_fail1056, !dbg !2280

assert_fail1056:                                  ; preds = %loop.body1053
  store %"char[]" { ptr @.panic_msg.35, i64 32 }, ptr %indirectarg1057, align 8
  store %"char[]" { ptr @.file.137, i64 7 }, ptr %indirectarg1058, align 8
  store %"char[]" { ptr @.func.111, i64 13 }, ptr %indirectarg1059, align 8
  %600 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %600(ptr align 8 %indirectarg1057, ptr align 8 %indirectarg1058, ptr align 8 %indirectarg1059, i32 378) #6, !dbg !2280
  unreachable, !dbg !2280

assert_ok1060:                                    ; preds = %loop.body1053
  %601 = load i64, ptr %index, align 8, !dbg !2284
  %602 = load ptr, ptr %self1055, align 8, !dbg !2284
  %603 = load i64, ptr %602, align 8, !dbg !2284
  %lt1061 = icmp ult i64 %601, %603, !dbg !2285
  br i1 %lt1061, label %assert_ok1066, label %assert_fail1062, !dbg !2285

assert_fail1062:                                  ; preds = %assert_ok1060
  store %"char[]" { ptr @.panic_msg.122, i64 62 }, ptr %indirectarg1063, align 8
  store %"char[]" { ptr @.file.95, i64 21 }, ptr %indirectarg1064, align 8
  store %"char[]" { ptr @.func.111, i64 13 }, ptr %indirectarg1065, align 8
  %604 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %604(ptr align 8 %indirectarg1063, ptr align 8 %indirectarg1064, ptr align 8 %indirectarg1065, i32 203) #6, !dbg !2285
  unreachable, !dbg !2285

assert_ok1066:                                    ; preds = %assert_ok1060
  %605 = load ptr, ptr %self1055, align 8, !dbg !2286
  %ptradd1067 = getelementptr inbounds i8, ptr %605, i64 32, !dbg !2286
  %606 = load ptr, ptr %ptradd1067, align 8, !dbg !2286
  %607 = load i64, ptr %index, align 8, !dbg !2286
  %ptroffset1068 = getelementptr inbounds [88 x i8], ptr %606, i64 %607, !dbg !2286
  %608 = ptrtoint ptr %ptroffset1068 to i64, !dbg !2286
  %609 = urem i64 %608, 8, !dbg !2286
  %610 = icmp ne i64 %609, 0, !dbg !2286
  %611 = call i1 @llvm.expect.i1(i1 %610, i1 false), !dbg !2286
  br i1 %611, label %panic1069, label %checkok1079, !dbg !2286

checkok1079:                                      ; preds = %assert_ok1066
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %trace1054, ptr align 8 %ptroffset1068, i32 88, i1 false), !dbg !2286
  %612 = call i8 @std.os.backtrace.Backtrace.has_file(ptr %trace1054), !dbg !2287
  %613 = trunc i8 %612 to i1, !dbg !2287
  br i1 %613, label %if.then1080, label %if.exit1094, !dbg !2287

if.then1080:                                      ; preds = %checkok1079
  %ptradd1082 = getelementptr inbounds i8, ptr %trace1054, i64 8, !dbg !2289
  %614 = insertvalue %any undef, ptr %ptradd1082, 0, !dbg !2289
  %615 = insertvalue %any %614, i64 ptrtoint (ptr @"$ct.String" to i64), 1, !dbg !2289
  store %any %615, ptr %varargslots1081, align 16, !dbg !2289
  %ptradd1083 = getelementptr inbounds i8, ptr %trace1054, i64 40, !dbg !2289
  %616 = insertvalue %any undef, ptr %ptradd1083, 0, !dbg !2289
  %617 = insertvalue %any %616, i64 ptrtoint (ptr @"$ct.String" to i64), 1, !dbg !2289
  %ptradd1084 = getelementptr inbounds i8, ptr %varargslots1081, i64 16, !dbg !2289
  store %any %617, ptr %ptradd1084, align 16, !dbg !2289
  %ptradd1085 = getelementptr inbounds i8, ptr %trace1054, i64 56, !dbg !2289
  %618 = insertvalue %any undef, ptr %ptradd1085, 0, !dbg !2289
  %619 = insertvalue %any %618, i64 ptrtoint (ptr @"$ct.uint" to i64), 1, !dbg !2289
  %ptradd1086 = getelementptr inbounds i8, ptr %varargslots1081, i64 32, !dbg !2289
  store %any %619, ptr %ptradd1086, align 16, !dbg !2289
  %620 = insertvalue %"any[]" undef, ptr %varargslots1081, 0, !dbg !2289
  %"$$temp1087" = insertvalue %"any[]" %620, i64 3, 1, !dbg !2289
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg1089, ptr align 8 %1, i32 16, i1 false)
  store %"char[]" { ptr @.str.138, i64 16 }, ptr %indirectarg1090, align 8
  store %"any[]" %"$$temp1087", ptr %indirectarg1091, align 8
  %621 = call i64 @std.io.fprintfn(ptr %retparam1088, ptr align 8 %indirectarg1089, ptr align 8 %indirectarg1090, ptr align 8 %indirectarg1091), !dbg !2289
  br label %loop.inc, !dbg !2291

if.exit1094:                                      ; preds = %checkok1079
  %622 = call i8 @std.os.backtrace.Backtrace.is_unknown(ptr %trace1054), !dbg !2292
  %623 = trunc i8 %622 to i1, !dbg !2292
  br i1 %623, label %if.then1095, label %if.exit1102, !dbg !2292

if.then1095:                                      ; preds = %if.exit1094
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg1097, ptr align 8 %1, i32 16, i1 false)
  store %"char[]" { ptr @.str.139, i64 19 }, ptr %indirectarg1098, align 8
  store %"any[]" zeroinitializer, ptr %indirectarg1099, align 8
  %624 = call i64 @std.io.fprintfn(ptr %retparam1096, ptr align 8 %indirectarg1097, ptr align 8 %indirectarg1098, ptr align 8 %indirectarg1099), !dbg !2293
  br label %loop.inc, !dbg !2295

if.exit1102:                                      ; preds = %if.exit1094
  %ptradd1104 = getelementptr inbounds i8, ptr %trace1054, i64 8, !dbg !2296
  %625 = insertvalue %any undef, ptr %ptradd1104, 0, !dbg !2296
  %626 = insertvalue %any %625, i64 ptrtoint (ptr @"$ct.String" to i64), 1, !dbg !2296
  store %any %626, ptr %varargslots1103, align 16, !dbg !2296
  %627 = insertvalue %"any[]" undef, ptr %varargslots1103, 0, !dbg !2296
  %"$$temp1105" = insertvalue %"any[]" %627, i64 1, 1, !dbg !2296
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg1107, ptr align 8 %1, i32 16, i1 false)
  store %"char[]" { ptr @.str.140, i64 26 }, ptr %indirectarg1108, align 8
  store %"any[]" %"$$temp1105", ptr %indirectarg1109, align 8
  %628 = call i64 @std.io.fprintfn(ptr %retparam1106, ptr align 8 %indirectarg1107, ptr align 8 %indirectarg1108, ptr align 8 %indirectarg1109), !dbg !2296
  br label %loop.inc, !dbg !2296

loop.inc:                                         ; preds = %if.exit1102, %if.then1095, %if.then1080
  %629 = load i64, ptr %.anon1050, align 8, !dbg !2274
  %addnuw1112 = add nuw i64 %629, 1, !dbg !2274
  store i64 %addnuw1112, ptr %.anon1050, align 8, !dbg !2274
  br label %loop.cond1051, !dbg !2274

loop.exit1113:                                    ; preds = %loop.cond1051
  br label %loop.inc1114, !dbg !2274

loop.inc1114:                                     ; preds = %loop.exit1113, %noerr_block958
  %630 = load i64, ptr %.anon919, align 8, !dbg !2237
  %addnuw1115 = add nuw i64 %630, 1, !dbg !2237
  store i64 %addnuw1115, ptr %.anon919, align 8, !dbg !2237
  br label %loop.cond920, !dbg !2237

loop.exit1116:                                    ; preds = %loop.cond920
  br label %if.exit1117, !dbg !2237

if.exit1117:                                      ; preds = %loop.exit1116, %noerr_block750
  %631 = load ptr, ptr %state, align 8, !dbg !2297
  call void @std.core.mem.allocator.pop_pool(ptr %631) #7, !dbg !2297
  ret i64 0, !dbg !2297

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.95, i64 21 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.111, i64 13 }, ptr %indirectarg2, align 8
  %632 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %632(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 128) #6, !dbg !2044
  unreachable, !dbg !2044

panic5:                                           ; preds = %if.then
  store i64 %8, ptr %taddr, align 8
  %633 = insertvalue %any undef, ptr %taddr, 0
  %634 = insertvalue %any %633, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr6, align 8
  %635 = insertvalue %any undef, ptr %taddr6, 0
  %636 = insertvalue %any %635, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 59 }, ptr %indirectarg7, align 8
  store %"char[]" { ptr @.file.95, i64 21 }, ptr %indirectarg8, align 8
  store %"char[]" { ptr @.func.111, i64 13 }, ptr %indirectarg9, align 8
  store %any %634, ptr %varargslots, align 16
  %ptradd10 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %636, ptr %ptradd10, align 16
  %637 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %637, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg11, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg7, ptr align 8 %indirectarg8, ptr align 8 %indirectarg9, i32 137, ptr align 8 %indirectarg11) #6, !dbg !2060
  unreachable, !dbg !2060

panic13:                                          ; preds = %checkok12
  store i64 8, ptr %taddr14, align 8
  %638 = insertvalue %any undef, ptr %taddr14, 0
  %639 = insertvalue %any %638, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %12, ptr %taddr15, align 8
  %640 = insertvalue %any undef, ptr %taddr15, 0
  %641 = insertvalue %any %640, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.31, i64 94 }, ptr %indirectarg16, align 8
  store %"char[]" { ptr @.file.95, i64 21 }, ptr %indirectarg17, align 8
  store %"char[]" { ptr @.func.111, i64 13 }, ptr %indirectarg18, align 8
  store %any %639, ptr %varargslots19, align 16
  %ptradd20 = getelementptr inbounds i8, ptr %varargslots19, i64 16
  store %any %641, ptr %ptradd20, align 16
  %642 = insertvalue %"any[]" undef, ptr %varargslots19, 0
  %"$$temp21" = insertvalue %"any[]" %642, i64 2, 1
  store %"any[]" %"$$temp21", ptr %indirectarg22, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg16, ptr align 8 %indirectarg17, ptr align 8 %indirectarg18, i32 137, ptr align 8 %indirectarg22) #6, !dbg !2060
  unreachable, !dbg !2060

panic174:                                         ; preds = %loop.body
  store i64 %113, ptr %taddr175, align 8
  %643 = insertvalue %any undef, ptr %taddr175, 0
  %644 = insertvalue %any %643, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %115, ptr %taddr176, align 8
  %645 = insertvalue %any undef, ptr %taddr176, 0
  %646 = insertvalue %any %645, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 59 }, ptr %indirectarg177, align 8
  store %"char[]" { ptr @.file.95, i64 21 }, ptr %indirectarg178, align 8
  store %"char[]" { ptr @.func.111, i64 13 }, ptr %indirectarg179, align 8
  store %any %644, ptr %varargslots180, align 16
  %ptradd181 = getelementptr inbounds i8, ptr %varargslots180, i64 16
  store %any %646, ptr %ptradd181, align 16
  %647 = insertvalue %"any[]" undef, ptr %varargslots180, 0
  %"$$temp182" = insertvalue %"any[]" %647, i64 2, 1
  store %"any[]" %"$$temp182", ptr %indirectarg183, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg177, ptr align 8 %indirectarg178, ptr align 8 %indirectarg179, i32 141, ptr align 8 %indirectarg183) #6, !dbg !2091
  unreachable, !dbg !2091

panic460:                                         ; preds = %loop.body455
  store i64 %277, ptr %taddr461, align 8
  %648 = insertvalue %any undef, ptr %taddr461, 0
  %649 = insertvalue %any %648, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %279, ptr %taddr462, align 8
  %650 = insertvalue %any undef, ptr %taddr462, 0
  %651 = insertvalue %any %650, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 59 }, ptr %indirectarg463, align 8
  store %"char[]" { ptr @.file.95, i64 21 }, ptr %indirectarg464, align 8
  store %"char[]" { ptr @.func.111, i64 13 }, ptr %indirectarg465, align 8
  store %any %649, ptr %varargslots466, align 16
  %ptradd467 = getelementptr inbounds i8, ptr %varargslots466, i64 16
  store %any %651, ptr %ptradd467, align 16
  %652 = insertvalue %"any[]" undef, ptr %varargslots466, 0
  %"$$temp468" = insertvalue %"any[]" %652, i64 2, 1
  store %"any[]" %"$$temp468", ptr %indirectarg469, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg463, ptr align 8 %indirectarg464, ptr align 8 %indirectarg465, i32 154, ptr align 8 %indirectarg469) #6, !dbg !2138
  unreachable, !dbg !2138

panic927:                                         ; preds = %loop.body922
  store i64 %542, ptr %taddr928, align 8
  %653 = insertvalue %any undef, ptr %taddr928, 0
  %654 = insertvalue %any %653, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %544, ptr %taddr929, align 8
  %655 = insertvalue %any undef, ptr %taddr929, 0
  %656 = insertvalue %any %655, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 59 }, ptr %indirectarg930, align 8
  store %"char[]" { ptr @.file.95, i64 21 }, ptr %indirectarg931, align 8
  store %"char[]" { ptr @.func.111, i64 13 }, ptr %indirectarg932, align 8
  store %any %654, ptr %varargslots933, align 16
  %ptradd934 = getelementptr inbounds i8, ptr %varargslots933, i64 16
  store %any %656, ptr %ptradd934, align 16
  %657 = insertvalue %"any[]" undef, ptr %varargslots933, 0
  %"$$temp935" = insertvalue %"any[]" %657, i64 2, 1
  store %"any[]" %"$$temp935", ptr %indirectarg936, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg930, ptr align 8 %indirectarg931, ptr align 8 %indirectarg932, i32 184, ptr align 8 %indirectarg936) #6, !dbg !2242
  unreachable, !dbg !2242

panic966:                                         ; preds = %loop.body964
  store %"char[]" { ptr @.panic_msg.133, i64 61 }, ptr %indirectarg967, align 8
  store %"char[]" { ptr @.file.95, i64 21 }, ptr %indirectarg968, align 8
  store %"char[]" { ptr @.func.111, i64 13 }, ptr %indirectarg969, align 8
  %658 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %658(ptr align 8 %indirectarg967, ptr align 8 %indirectarg968, ptr align 8 %indirectarg969, i32 193) #6, !dbg !2260
  unreachable, !dbg !2260

panic971:                                         ; preds = %checkok970
  store i64 8, ptr %taddr972, align 8
  %659 = insertvalue %any undef, ptr %taddr972, 0
  %660 = insertvalue %any %659, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %564, ptr %taddr973, align 8
  %661 = insertvalue %any undef, ptr %taddr973, 0
  %662 = insertvalue %any %661, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.31, i64 94 }, ptr %indirectarg974, align 8
  store %"char[]" { ptr @.file.95, i64 21 }, ptr %indirectarg975, align 8
  store %"char[]" { ptr @.func.111, i64 13 }, ptr %indirectarg976, align 8
  store %any %660, ptr %varargslots977, align 16
  %ptradd978 = getelementptr inbounds i8, ptr %varargslots977, i64 16
  store %any %662, ptr %ptradd978, align 16
  %663 = insertvalue %"any[]" undef, ptr %varargslots977, 0
  %"$$temp979" = insertvalue %"any[]" %663, i64 2, 1
  store %"any[]" %"$$temp979", ptr %indirectarg980, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg974, ptr align 8 %indirectarg975, ptr align 8 %indirectarg976, i32 193, ptr align 8 %indirectarg980) #6, !dbg !2260
  unreachable, !dbg !2260

panic983:                                         ; preds = %checkok981
  store i64 16, ptr %taddr984, align 8
  %664 = insertvalue %any undef, ptr %taddr984, 0
  %665 = insertvalue %any %664, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %567, ptr %taddr985, align 8
  %666 = insertvalue %any undef, ptr %taddr985, 0
  %667 = insertvalue %any %666, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 59 }, ptr %indirectarg986, align 8
  store %"char[]" { ptr @.file.95, i64 21 }, ptr %indirectarg987, align 8
  store %"char[]" { ptr @.func.111, i64 13 }, ptr %indirectarg988, align 8
  store %any %665, ptr %varargslots989, align 16
  %ptradd990 = getelementptr inbounds i8, ptr %varargslots989, i64 16
  store %any %667, ptr %ptradd990, align 16
  %668 = insertvalue %"any[]" undef, ptr %varargslots989, 0
  %"$$temp991" = insertvalue %"any[]" %668, i64 2, 1
  store %"any[]" %"$$temp991", ptr %indirectarg992, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg986, ptr align 8 %indirectarg987, ptr align 8 %indirectarg988, i32 193, ptr align 8 %indirectarg992) #6, !dbg !2260
  unreachable, !dbg !2260

panic1003:                                        ; preds = %loop.exit999
  store i64 3, ptr %taddr1004, align 8
  %669 = insertvalue %any undef, ptr %taddr1004, 0
  %670 = insertvalue %any %669, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sub, ptr %taddr1005, align 8
  %671 = insertvalue %any undef, ptr %taddr1005, 0
  %672 = insertvalue %any %671, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.134, i64 44 }, ptr %indirectarg1006, align 8
  store %"char[]" { ptr @.file.95, i64 21 }, ptr %indirectarg1007, align 8
  store %"char[]" { ptr @.func.111, i64 13 }, ptr %indirectarg1008, align 8
  store %any %670, ptr %varargslots1009, align 16
  %ptradd1010 = getelementptr inbounds i8, ptr %varargslots1009, i64 16
  store %any %672, ptr %ptradd1010, align 16
  %673 = insertvalue %"any[]" undef, ptr %varargslots1009, 0
  %"$$temp1011" = insertvalue %"any[]" %673, i64 2, 1
  store %"any[]" %"$$temp1011", ptr %indirectarg1012, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1006, ptr align 8 %indirectarg1007, ptr align 8 %indirectarg1008, i32 201, ptr align 8 %indirectarg1012) #6, !dbg !2268
  unreachable, !dbg !2268

panic1014:                                        ; preds = %checkok1013
  store i64 %sub, ptr %taddr1015, align 8
  %674 = insertvalue %any undef, ptr %taddr1015, 0
  %675 = insertvalue %any %674, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 16, ptr %taddr1016, align 8
  %676 = insertvalue %any undef, ptr %taddr1016, 0
  %677 = insertvalue %any %676, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.135, i64 60 }, ptr %indirectarg1017, align 8
  store %"char[]" { ptr @.file.95, i64 21 }, ptr %indirectarg1018, align 8
  store %"char[]" { ptr @.func.111, i64 13 }, ptr %indirectarg1019, align 8
  store %any %675, ptr %varargslots1020, align 16
  %ptradd1021 = getelementptr inbounds i8, ptr %varargslots1020, i64 16
  store %any %677, ptr %ptradd1021, align 16
  %678 = insertvalue %"any[]" undef, ptr %varargslots1020, 0
  %"$$temp1022" = insertvalue %"any[]" %678, i64 2, 1
  store %"any[]" %"$$temp1022", ptr %indirectarg1023, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1017, ptr align 8 %indirectarg1018, ptr align 8 %indirectarg1019, i32 201, ptr align 8 %indirectarg1023) #6, !dbg !2268
  unreachable, !dbg !2268

panic1069:                                        ; preds = %assert_ok1066
  store i64 8, ptr %taddr1070, align 8
  %679 = insertvalue %any undef, ptr %taddr1070, 0
  %680 = insertvalue %any %679, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %609, ptr %taddr1071, align 8
  %681 = insertvalue %any undef, ptr %taddr1071, 0
  %682 = insertvalue %any %681, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.31, i64 94 }, ptr %indirectarg1072, align 8
  store %"char[]" { ptr @.file.137, i64 7 }, ptr %indirectarg1073, align 8
  store %"char[]" { ptr @.func.111, i64 13 }, ptr %indirectarg1074, align 8
  store %any %680, ptr %varargslots1075, align 16
  %ptradd1076 = getelementptr inbounds i8, ptr %varargslots1075, i64 16
  store %any %682, ptr %ptradd1076, align 16
  %683 = insertvalue %"any[]" undef, ptr %varargslots1075, 0
  %"$$temp1077" = insertvalue %"any[]" %683, i64 2, 1
  store %"any[]" %"$$temp1077", ptr %indirectarg1078, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1072, ptr align 8 %indirectarg1073, ptr align 8 %indirectarg1074, i32 380, ptr align 8 %indirectarg1078) #6, !dbg !2286
  unreachable, !dbg !2286
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.core.mem.allocator.Vmem.init(ptr %0, i64 %1, i64 %2, i32 %3, i64 %4) #0 comdat !dbg !2299 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %preferred_size = alloca i64, align 8
  %reserve_page_size = alloca i64, align 8
  %options = alloca i32, align 4
  %min_size = alloca i64, align 8
  %x = alloca i64, align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg14 = alloca %"char[]", align 8
  %indirectarg15 = alloca %"char[]", align 8
  %indirectarg16 = alloca %"char[]", align 8
  %x21 = alloca i64, align 8
  %indirectarg30 = alloca %"char[]", align 8
  %indirectarg31 = alloca %"char[]", align 8
  %indirectarg32 = alloca %"char[]", align 8
  %x36 = alloca i64, align 8
  %.anon = alloca i32, align 4
  %a = alloca i64, align 8
  %b = alloca i32, align 4
  %memory = alloca %VirtualMemory, align 8
  %memory.f = alloca i64, align 8
  %indirectarg42 = alloca %"char[]", align 8
  %indirectarg43 = alloca %"char[]", align 8
  %indirectarg44 = alloca %"char[]", align 8
  %retparam = alloca %VirtualMemory, align 8
  %blockret = alloca i64, align 8
  %f = alloca i64, align 8
  %switch = alloca i64, align 8
  %temp_err = alloca i64, align 8
  %.assign_list = alloca %Vmem, align 8
  %self70 = alloca i64, align 8
  %indirectarg73 = alloca %"char[]", align 8
  %indirectarg74 = alloca %"char[]", align 8
  %indirectarg75 = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr78 = alloca i64, align 8
  %indirectarg79 = alloca %"char[]", align 8
  %indirectarg80 = alloca %"char[]", align 8
  %indirectarg81 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg83 = alloca %"any[]", align 8
  %5 = icmp eq ptr %0, null, !dbg !2303
  %6 = call i1 @llvm.expect.i1(i1 %5, i1 false), !dbg !2303
  br i1 %6, label %panic, label %checkok, !dbg !2303

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2304, !DIExpression(), !2305)
  store i64 %1, ptr %preferred_size, align 8
    #dbg_declare(ptr %preferred_size, !2306, !DIExpression(), !2305)
  store i64 %2, ptr %reserve_page_size, align 8
    #dbg_declare(ptr %reserve_page_size, !2307, !DIExpression(), !2305)
  store i32 %3, ptr %options, align 4
    #dbg_declare(ptr %options, !2308, !DIExpression(), !2305)
  store i64 %4, ptr %min_size, align 8
    #dbg_declare(ptr %min_size, !2309, !DIExpression(), !2305)
  %7 = load i64, ptr %reserve_page_size, align 8, !dbg !2310
  %i2nb = icmp eq i64 %7, 0, !dbg !2310
  br i1 %i2nb, label %or.phi, label %or.rhs, !dbg !2310

or.rhs:                                           ; preds = %checkok
  %8 = load i64, ptr %reserve_page_size, align 8
  store i64 %8, ptr %x, align 8
  %9 = load i64, ptr %x, align 8, !dbg !2312
  %neq = icmp ne i64 0, %9, !dbg !2312
  br i1 %neq, label %and.rhs, label %and.phi, !dbg !2312

and.rhs:                                          ; preds = %or.rhs
  %10 = load i64, ptr %x, align 8, !dbg !2312
  %11 = load i64, ptr %x, align 8, !dbg !2312
  %sub = sub i64 %11, 1, !dbg !2312
  %and = and i64 %10, %sub, !dbg !2312
  %eq = icmp eq i64 %and, 0, !dbg !2312
  br label %and.phi, !dbg !2312

and.phi:                                          ; preds = %and.rhs, %or.rhs
  %val = phi i1 [ false, %or.rhs ], [ %eq, %and.rhs ], !dbg !2312
  br label %or.phi, !dbg !2312

or.phi:                                           ; preds = %and.phi, %checkok
  %val3 = phi i1 [ true, %checkok ], [ %val, %and.phi ], !dbg !2312
  br i1 %val3, label %assert_ok, label %assert_fail, !dbg !2312

assert_fail:                                      ; preds = %or.phi
  store %"char[]" { ptr @.panic_msg.142, i64 81 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.141, i64 7 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg6, align 8
  %12 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %12(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 33) #6, !dbg !2310
  unreachable, !dbg !2310

assert_ok:                                        ; preds = %or.phi
  %13 = load i64, ptr %reserve_page_size, align 8, !dbg !2314
  %14 = load i64, ptr %preferred_size, align 8, !dbg !2314
  %le = icmp ule i64 %13, %14, !dbg !2314
  br i1 %le, label %assert_ok11, label %assert_fail7, !dbg !2314

assert_fail7:                                     ; preds = %assert_ok
  store %"char[]" { ptr @.panic_msg.143, i64 134 }, ptr %indirectarg8, align 8
  store %"char[]" { ptr @.file.141, i64 7 }, ptr %indirectarg9, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg10, align 8
  %15 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %15(ptr align 8 %indirectarg8, ptr align 8 %indirectarg9, ptr align 8 %indirectarg10, i32 34) #6, !dbg !2314
  unreachable, !dbg !2314

assert_ok11:                                      ; preds = %assert_ok
  %16 = load i64, ptr %preferred_size, align 8, !dbg !2315
  %le12 = icmp ule i64 1024, %16, !dbg !2315
  br i1 %le12, label %assert_ok17, label %assert_fail13, !dbg !2315

assert_fail13:                                    ; preds = %assert_ok11
  store %"char[]" { ptr @.panic_msg.144, i64 89 }, ptr %indirectarg14, align 8
  store %"char[]" { ptr @.file.141, i64 7 }, ptr %indirectarg15, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg16, align 8
  %17 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %17(ptr align 8 %indirectarg14, ptr align 8 %indirectarg15, ptr align 8 %indirectarg16, i32 35) #6, !dbg !2315
  unreachable, !dbg !2315

assert_ok17:                                      ; preds = %assert_ok11
  %18 = load i64, ptr @init.page_size, align 8, !dbg !2316
  %i2nb18 = icmp eq i64 %18, 0, !dbg !2316
  br i1 %i2nb18, label %if.then, label %if.exit, !dbg !2316

if.then:                                          ; preds = %assert_ok17
  %19 = call i64 @std.core.mem.os_pagesize(), !dbg !2316
  store i64 %19, ptr @init.page_size, align 8, !dbg !2316
  br label %if.exit, !dbg !2316

if.exit:                                          ; preds = %if.then, %assert_ok17
  %20 = load i64, ptr @init.page_size, align 8, !dbg !2317
  %21 = load i64, ptr %reserve_page_size, align 8, !dbg !2317
  %lt = icmp ult i64 %20, %21, !dbg !2317
  br i1 %lt, label %if.then19, label %if.exit20, !dbg !2317

if.then19:                                        ; preds = %if.exit
  %22 = load i64, ptr %reserve_page_size, align 8, !dbg !2317
  store i64 %22, ptr @init.page_size, align 8, !dbg !2317
  br label %if.exit20, !dbg !2317

if.exit20:                                        ; preds = %if.then19, %if.exit
  %23 = load i64, ptr %preferred_size, align 8, !dbg !2318
  %24 = load i64, ptr @init.page_size, align 8, !dbg !2318
  store i64 %24, ptr %x21, align 8
  %25 = load i64, ptr %x21, align 8, !dbg !2319
  %neq22 = icmp ne i64 0, %25, !dbg !2319
  br i1 %neq22, label %and.rhs23, label %and.phi27, !dbg !2319

and.rhs23:                                        ; preds = %if.exit20
  %26 = load i64, ptr %x21, align 8, !dbg !2319
  %27 = load i64, ptr %x21, align 8, !dbg !2319
  %sub24 = sub i64 %27, 1, !dbg !2319
  %and25 = and i64 %26, %sub24, !dbg !2319
  %eq26 = icmp eq i64 %and25, 0, !dbg !2319
  br label %and.phi27, !dbg !2319

and.phi27:                                        ; preds = %and.rhs23, %if.exit20
  %val28 = phi i1 [ false, %if.exit20 ], [ %eq26, %and.rhs23 ], !dbg !2319
  br i1 %val28, label %assert_ok33, label %assert_fail29, !dbg !2319

assert_fail29:                                    ; preds = %and.phi27
  store %"char[]" { ptr @.panic_msg.14, i64 51 }, ptr %indirectarg30, align 8
  store %"char[]" { ptr @.file.141, i64 7 }, ptr %indirectarg31, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg32, align 8
  %28 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %28(ptr align 8 %indirectarg30, ptr align 8 %indirectarg31, ptr align 8 %indirectarg32, i32 43) #6, !dbg !2318
  unreachable, !dbg !2318

assert_ok33:                                      ; preds = %and.phi27
  %29 = call i64 @std.core.mem.aligned_offset(i64 %23, i64 %24), !dbg !2318
  store i64 %29, ptr %preferred_size, align 8, !dbg !2318
  %30 = load i64, ptr %min_size, align 8, !dbg !2321
  %i2nb34 = icmp eq i64 %30, 0, !dbg !2321
  br i1 %i2nb34, label %if.then35, label %if.exit39, !dbg !2321

if.then35:                                        ; preds = %assert_ok33
  %31 = load i64, ptr %preferred_size, align 8, !dbg !2321
  %sdiv = sdiv i64 %31, 1024, !dbg !2321
  store i64 %sdiv, ptr %x36, align 8
  store i32 1, ptr %.anon, align 4
  %32 = load i64, ptr %x36, align 8
  store i64 %32, ptr %a, align 8
  %33 = load i32, ptr %.anon, align 4
  store i32 %33, ptr %b, align 4
  %34 = load i64, ptr %a, align 8, !dbg !2322
  %35 = load i32, ptr %b, align 4, !dbg !2322
  %sext = sext i32 %35 to i64, !dbg !2322
  %gt = icmp sgt i64 %34, %sext, !dbg !2322
  br i1 %gt, label %cond.lhs, label %cond.rhs, !dbg !2322

cond.lhs:                                         ; preds = %if.then35
  %36 = load i64, ptr %x36, align 8, !dbg !2324
  br label %cond.phi, !dbg !2324

cond.rhs:                                         ; preds = %if.then35
  %37 = load i32, ptr %.anon, align 4, !dbg !2324
  %sext37 = sext i32 %37 to i64, !dbg !2324
  br label %cond.phi, !dbg !2324

cond.phi:                                         ; preds = %cond.rhs, %cond.lhs
  %val38 = phi i64 [ %36, %cond.lhs ], [ %sext37, %cond.rhs ], !dbg !2324
  store i64 %val38, ptr %min_size, align 8, !dbg !2324
  br label %if.exit39, !dbg !2324

if.exit39:                                        ; preds = %cond.phi, %assert_ok33
    #dbg_declare(ptr %memory, !2326, !DIExpression(), !2327)
  store i64 ptrtoint (ptr @std.core.mem.OUT_OF_MEMORY to i64), ptr %memory.f, align 8, !dbg !2327
  br label %loop.cond, !dbg !2328

loop.cond:                                        ; preds = %switch.exit, %switch.case, %if.exit39
  %38 = load i64, ptr %preferred_size, align 8, !dbg !2329
  %39 = load i64, ptr %min_size, align 8, !dbg !2329
  %ge = icmp uge i64 %38, %39, !dbg !2329
  br i1 %ge, label %loop.body, label %loop.exit, !dbg !2329

loop.body:                                        ; preds = %loop.cond
  %40 = load i64, ptr %preferred_size, align 8, !dbg !2331
  %lt40 = icmp ult i64 0, %40, !dbg !2331
  br i1 %lt40, label %assert_ok45, label %assert_fail41, !dbg !2331

assert_fail41:                                    ; preds = %loop.body
  store %"char[]" { ptr @.panic_msg.145, i64 58 }, ptr %indirectarg42, align 8
  store %"char[]" { ptr @.file.141, i64 7 }, ptr %indirectarg43, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg44, align 8
  %41 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %41(ptr align 8 %indirectarg42, ptr align 8 %indirectarg43, ptr align 8 %indirectarg44, i32 48) #6, !dbg !2331
  unreachable, !dbg !2331

assert_ok45:                                      ; preds = %loop.body
  %42 = call i64 @std.core.mem.vm.virtual_alloc(ptr %retparam, i64 %40, i32 0), !dbg !2331
  %not_err = icmp eq i64 %42, 0, !dbg !2331
  %43 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !2331
  br i1 %43, label %after_check, label %assign_optional, !dbg !2331

assign_optional:                                  ; preds = %assert_ok45
  store i64 %42, ptr %memory.f, align 8, !dbg !2331
  br label %after_assign, !dbg !2331

after_check:                                      ; preds = %assert_ok45
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %memory, ptr align 8 %retparam, i32 24, i1 false), !dbg !2331
  store i64 0, ptr %memory.f, align 8, !dbg !2331
  br label %after_assign, !dbg !2331

after_assign:                                     ; preds = %after_check, %assign_optional
  %load.err = load i64, ptr %memory.f, align 8, !dbg !2333
  %result = icmp eq i64 %load.err, 0, !dbg !2333
  br i1 %result, label %if.then46, label %if.exit47, !dbg !2333

if.then46:                                        ; preds = %after_assign
  br label %loop.exit, !dbg !2333

if.exit47:                                        ; preds = %after_assign
    #dbg_declare(ptr %f, !2334, !DIExpression(), !2336)
  br label %testblock, !dbg !2336

testblock:                                        ; preds = %if.exit47
  %optval = load i64, ptr %memory.f, align 8, !dbg !2336
  %not_err48 = icmp eq i64 %optval, 0, !dbg !2336
  %44 = call i1 @llvm.expect.i1(i1 %not_err48, i1 true), !dbg !2336
  br i1 %44, label %after_check50, label %assign_optional49, !dbg !2336

assign_optional49:                                ; preds = %testblock
  store i64 %optval, ptr %f, align 8, !dbg !2336
  br label %end_block, !dbg !2336

after_check50:                                    ; preds = %testblock
  store i64 0, ptr %f, align 8, !dbg !2336
  br label %end_block, !dbg !2336

end_block:                                        ; preds = %after_check50, %assign_optional49
  %45 = load i64, ptr %f, align 8, !dbg !2336
  %i2b = icmp ne i64 %45, 0, !dbg !2336
  br i1 %i2b, label %if.then51, label %if.exit52, !dbg !2336

if.then51:                                        ; preds = %end_block
  %46 = load i64, ptr %f, align 8, !dbg !2336
  store i64 %46, ptr %blockret, align 8, !dbg !2336
  br label %expr_block.exit, !dbg !2336

if.exit52:                                        ; preds = %end_block
  store i64 0, ptr %blockret, align 8, !dbg !2339
  br label %expr_block.exit, !dbg !2339

expr_block.exit:                                  ; preds = %if.exit52, %if.then51
  %47 = load i64, ptr %blockret, align 8
  store i64 %47, ptr %switch, align 8
  br label %switch.entry

switch.entry:                                     ; preds = %expr_block.exit
  %48 = load i64, ptr %switch, align 8
  %eq53 = icmp eq i64 ptrtoint (ptr @std.core.mem.OUT_OF_MEMORY to i64), %48, !dbg !2340
  br i1 %eq53, label %switch.case, label %next_if, !dbg !2340

next_if:                                          ; preds = %switch.entry
  %eq54 = icmp eq i64 ptrtoint (ptr @std.core.mem.vm.RANGE_OVERFLOW to i64), %48, !dbg !2341
  br i1 %eq54, label %switch.case, label %next_if55, !dbg !2341

switch.case:                                      ; preds = %next_if, %switch.entry
  %49 = load i64, ptr %preferred_size, align 8, !dbg !2342
  %udiv = udiv i64 %49, 2, !dbg !2342
  store i64 %udiv, ptr %preferred_size, align 8, !dbg !2342
  br label %loop.cond, !dbg !2344

next_if55:                                        ; preds = %next_if
  br label %switch.default, !dbg !2344

switch.default:                                   ; preds = %next_if55
  br label %switch.exit, !dbg !2345

switch.exit:                                      ; preds = %switch.default
  br label %loop.cond, !dbg !2345

loop.exit:                                        ; preds = %if.then46, %loop.cond
  br label %testblock56

testblock56:                                      ; preds = %loop.exit
  %optval57 = load i64, ptr %memory.f, align 8, !dbg !2347
  %not_err58 = icmp eq i64 %optval57, 0, !dbg !2347
  %50 = call i1 @llvm.expect.i1(i1 %not_err58, i1 true), !dbg !2347
  br i1 %50, label %after_check60, label %assign_optional59, !dbg !2347

assign_optional59:                                ; preds = %testblock56
  store i64 %optval57, ptr %temp_err, align 8, !dbg !2347
  br label %end_block61, !dbg !2347

after_check60:                                    ; preds = %testblock56
  store i64 0, ptr %temp_err, align 8, !dbg !2347
  br label %end_block61, !dbg !2347

end_block61:                                      ; preds = %after_check60, %assign_optional59
  %51 = load i64, ptr %temp_err, align 8, !dbg !2347
  %i2b62 = icmp ne i64 %51, 0, !dbg !2347
  br i1 %i2b62, label %if.then63, label %if.exit64, !dbg !2347

if.then63:                                        ; preds = %end_block61
  ret i64 ptrtoint (ptr @std.core.mem.allocator.VMEM_RESERVE_FAILED to i64), !dbg !2347

if.exit64:                                        ; preds = %end_block61
  %52 = load i64, ptr @init.page_size, align 8, !dbg !2348
  %53 = load i64, ptr %preferred_size, align 8, !dbg !2348
  %gt65 = icmp ugt i64 %52, %53, !dbg !2348
  br i1 %gt65, label %if.then66, label %if.exit67, !dbg !2348

if.then66:                                        ; preds = %if.exit64
  %54 = load i64, ptr %preferred_size, align 8, !dbg !2348
  store i64 %54, ptr @init.page_size, align 8, !dbg !2348
  br label %if.exit67, !dbg !2348

if.exit67:                                        ; preds = %if.then66, %if.exit64
  call void @llvm.memset.p0.i64(ptr align 8 %.assign_list, i8 0, i64 72, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %.assign_list, ptr align 8 %memory, i32 24, i1 false), !dbg !2349
  %ptradd = getelementptr inbounds i8, ptr %.assign_list, i64 56, !dbg !2349
  store i64 0, ptr %ptradd, align 8, !dbg !2350
  %ptradd68 = getelementptr inbounds i8, ptr %.assign_list, i64 32, !dbg !2350
  %55 = load i64, ptr @init.page_size, align 8, !dbg !2351
  store i64 %55, ptr %ptradd68, align 8, !dbg !2351
  %ptradd69 = getelementptr inbounds i8, ptr %.assign_list, i64 40, !dbg !2351
  %56 = load i64, ptr @init.page_size, align 8
  store i64 %56, ptr %self70, align 8
  %57 = load i64, ptr %self70, align 8, !dbg !2352
  %58 = call i64 @llvm.cttz.i64(i64 %57, i1 false), !dbg !2352
  store i64 %58, ptr %ptradd69, align 8, !dbg !2352
  %ptradd71 = getelementptr inbounds i8, ptr %.assign_list, i64 64, !dbg !2352
  %59 = load i32, ptr %options, align 4, !dbg !2356
  store i32 %59, ptr %ptradd71, align 8, !dbg !2356
  %60 = load ptr, ptr %self, align 8, !dbg !2349
  %checknull = icmp eq ptr %60, null, !dbg !2349
  %61 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !2349
  br i1 %61, label %panic72, label %checkok76, !dbg !2349

checkok76:                                        ; preds = %if.exit67
  %62 = ptrtoint ptr %60 to i64, !dbg !2349
  %63 = urem i64 %62, 8, !dbg !2349
  %64 = icmp ne i64 %63, 0, !dbg !2349
  %65 = call i1 @llvm.expect.i1(i1 %64, i1 false), !dbg !2349
  br i1 %65, label %panic77, label %checkok84, !dbg !2349

checkok84:                                        ; preds = %checkok76
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %60, ptr align 8 %.assign_list, i32 72, i1 false), !dbg !2349
  ret i64 0, !dbg !2349

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.141, i64 7 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg2, align 8
  %66 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %66(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 38) #6, !dbg !2305
  unreachable, !dbg !2305

panic72:                                          ; preds = %if.exit67
  store %"char[]" { ptr @.panic_msg.96, i64 45 }, ptr %indirectarg73, align 8
  store %"char[]" { ptr @.file.141, i64 7 }, ptr %indirectarg74, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg75, align 8
  %67 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %67(ptr align 8 %indirectarg73, ptr align 8 %indirectarg74, ptr align 8 %indirectarg75, i32 67) #6, !dbg !2349
  unreachable, !dbg !2349

panic77:                                          ; preds = %checkok76
  store i64 8, ptr %taddr, align 8
  %68 = insertvalue %any undef, ptr %taddr, 0
  %69 = insertvalue %any %68, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %63, ptr %taddr78, align 8
  %70 = insertvalue %any undef, ptr %taddr78, 0
  %71 = insertvalue %any %70, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.31, i64 94 }, ptr %indirectarg79, align 8
  store %"char[]" { ptr @.file.141, i64 7 }, ptr %indirectarg80, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg81, align 8
  store %any %69, ptr %varargslots, align 16
  %ptradd82 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %71, ptr %ptradd82, align 16
  %72 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %72, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg83, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg79, ptr align 8 %indirectarg80, ptr align 8 %indirectarg81, i32 67, ptr align 8 %indirectarg83) #6, !dbg !2349
  unreachable, !dbg !2349
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.core.mem.allocator.Vmem.acquire(ptr %0, ptr %1, i64 %2, i32 %3, i64 %4) #0 comdat !dbg !2357 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %size = alloca i64, align 8
  %init_type = alloca i32, align 4
  %alignment = alloca i64, align 8
  %x = alloca i64, align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg13 = alloca %"char[]", align 8
  %indirectarg14 = alloca %"char[]", align 8
  %indirectarg15 = alloca %"char[]", align 8
  %total_len = alloca i64, align 8
  %start_mem = alloca ptr, align 8
  %unaligned_pointer_to_offset = alloca ptr, align 8
  %mem = alloca ptr, align 8
  %ptr = alloca ptr, align 8
  %alignment18 = alloca i64, align 8
  %x19 = alloca i64, align 8
  %indirectarg28 = alloca %"char[]", align 8
  %indirectarg29 = alloca %"char[]", align 8
  %indirectarg30 = alloca %"char[]", align 8
  %after = alloca i64, align 8
  %error_var = alloca i64, align 8
  %mem45 = alloca ptr, align 8
  %after46 = alloca i64, align 8
  %shift = alloca i64, align 8
  %page_after = alloca i64, align 8
  %taddr = alloca i64, align 8
  %indirectarg52 = alloca %"char[]", align 8
  %indirectarg53 = alloca %"char[]", align 8
  %indirectarg54 = alloca %"char[]", align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg55 = alloca %"any[]", align 8
  %taddr58 = alloca i64, align 8
  %indirectarg59 = alloca %"char[]", align 8
  %indirectarg60 = alloca %"char[]", align 8
  %indirectarg61 = alloca %"char[]", align 8
  %varargslots62 = alloca [1 x %any], align 16
  %indirectarg64 = alloca %"any[]", align 8
  %last_page = alloca i64, align 8
  %over_high_water = alloca i8, align 1
  %page_start = alloca i64, align 8
  %taddr73 = alloca i64, align 8
  %indirectarg74 = alloca %"char[]", align 8
  %indirectarg75 = alloca %"char[]", align 8
  %indirectarg76 = alloca %"char[]", align 8
  %varargslots77 = alloca [1 x %any], align 16
  %indirectarg79 = alloca %"any[]", align 8
  %page_len = alloca i64, align 8
  %taddr84 = alloca i64, align 8
  %indirectarg85 = alloca %"char[]", align 8
  %indirectarg86 = alloca %"char[]", align 8
  %indirectarg87 = alloca %"char[]", align 8
  %varargslots88 = alloca [1 x %any], align 16
  %indirectarg90 = alloca %"any[]", align 8
  %error_var93 = alloca i64, align 8
  %self94 = alloca %VirtualMemory, align 8
  %offset = alloca i64, align 8
  %len = alloca i64, align 8
  %indirectarg97 = alloca %"char[]", align 8
  %indirectarg98 = alloca %"char[]", align 8
  %indirectarg99 = alloca %"char[]", align 8
  %indirectarg104 = alloca %"char[]", align 8
  %indirectarg105 = alloca %"char[]", align 8
  %indirectarg106 = alloca %"char[]", align 8
  %indirectarg111 = alloca %"char[]", align 8
  %indirectarg112 = alloca %"char[]", align 8
  %indirectarg113 = alloca %"char[]", align 8
  %indirectarg119 = alloca %"char[]", align 8
  %indirectarg120 = alloca %"char[]", align 8
  %indirectarg121 = alloca %"char[]", align 8
  %indirectarg126 = alloca %"char[]", align 8
  %indirectarg127 = alloca %"char[]", align 8
  %indirectarg128 = alloca %"char[]", align 8
  %indirectarg132 = alloca %"char[]", align 8
  %indirectarg133 = alloca %"char[]", align 8
  %indirectarg134 = alloca %"char[]", align 8
  %error_var141 = alloca i64, align 8
  %self142 = alloca %VirtualMemory, align 8
  %offset143 = alloca i64, align 8
  %len144 = alloca i64, align 8
  %access = alloca i32, align 4
  %indirectarg147 = alloca %"char[]", align 8
  %indirectarg148 = alloca %"char[]", align 8
  %indirectarg149 = alloca %"char[]", align 8
  %indirectarg154 = alloca %"char[]", align 8
  %indirectarg155 = alloca %"char[]", align 8
  %indirectarg156 = alloca %"char[]", align 8
  %indirectarg161 = alloca %"char[]", align 8
  %indirectarg162 = alloca %"char[]", align 8
  %indirectarg163 = alloca %"char[]", align 8
  %indirectarg169 = alloca %"char[]", align 8
  %indirectarg170 = alloca %"char[]", align 8
  %indirectarg171 = alloca %"char[]", align 8
  %indirectarg175 = alloca %"char[]", align 8
  %indirectarg176 = alloca %"char[]", align 8
  %indirectarg177 = alloca %"char[]", align 8
  %indirectarg181 = alloca %"char[]", align 8
  %indirectarg182 = alloca %"char[]", align 8
  %indirectarg183 = alloca %"char[]", align 8
  %header = alloca ptr, align 8
  %dst = alloca ptr, align 8
  %len203 = alloca i64, align 8
  %reterr = alloca i64, align 8
  %5 = icmp eq ptr %1, null, !dbg !2360
  %6 = call i1 @llvm.expect.i1(i1 %5, i1 false), !dbg !2360
  br i1 %6, label %panic, label %checkok, !dbg !2360

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !2361, !DIExpression(), !2362)
  store i64 %2, ptr %size, align 8
    #dbg_declare(ptr %size, !2363, !DIExpression(), !2362)
  store i32 %3, ptr %init_type, align 4
    #dbg_declare(ptr %init_type, !2364, !DIExpression(), !2362)
  store i64 %4, ptr %alignment, align 8
    #dbg_declare(ptr %alignment, !2365, !DIExpression(), !2362)
  %7 = load i64, ptr %alignment, align 8, !dbg !2366
  %i2nb = icmp eq i64 %7, 0, !dbg !2366
  br i1 %i2nb, label %or.phi, label %or.rhs, !dbg !2366

or.rhs:                                           ; preds = %checkok
  %8 = load i64, ptr %alignment, align 8
  store i64 %8, ptr %x, align 8
  %9 = load i64, ptr %x, align 8, !dbg !2368
  %neq = icmp ne i64 0, %9, !dbg !2368
  br i1 %neq, label %and.rhs, label %and.phi, !dbg !2368

and.rhs:                                          ; preds = %or.rhs
  %10 = load i64, ptr %x, align 8, !dbg !2368
  %11 = load i64, ptr %x, align 8, !dbg !2368
  %sub = sub i64 %11, 1, !dbg !2368
  %and = and i64 %10, %sub, !dbg !2368
  %eq = icmp eq i64 %and, 0, !dbg !2368
  br label %and.phi, !dbg !2368

and.phi:                                          ; preds = %and.rhs, %or.rhs
  %val = phi i1 [ false, %or.rhs ], [ %eq, %and.rhs ], !dbg !2368
  br label %or.phi, !dbg !2368

or.phi:                                           ; preds = %and.phi, %checkok
  %val3 = phi i1 [ true, %checkok ], [ %val, %and.phi ], !dbg !2368
  br i1 %val3, label %assert_ok, label %assert_fail, !dbg !2368

assert_fail:                                      ; preds = %or.phi
  store %"char[]" { ptr @.panic_msg.11, i64 65 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.141, i64 7 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg6, align 8
  %12 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %12(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 78) #6, !dbg !2366
  unreachable, !dbg !2366

assert_ok:                                        ; preds = %or.phi
  %13 = load i64, ptr %alignment, align 8, !dbg !2370
  %le = icmp ule i64 %13, 268435456, !dbg !2370
  br i1 %le, label %assert_ok11, label %assert_fail7, !dbg !2370

assert_fail7:                                     ; preds = %assert_ok
  store %"char[]" { ptr @.panic_msg.12, i64 80 }, ptr %indirectarg8, align 8
  store %"char[]" { ptr @.file.141, i64 7 }, ptr %indirectarg9, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg10, align 8
  %14 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %14(ptr align 8 %indirectarg8, ptr align 8 %indirectarg9, ptr align 8 %indirectarg10, i32 79) #6, !dbg !2370
  unreachable, !dbg !2370

assert_ok11:                                      ; preds = %assert_ok
  %15 = load i64, ptr %size, align 8, !dbg !2371
  %lt = icmp ult i64 0, %15, !dbg !2371
  br i1 %lt, label %assert_ok16, label %assert_fail12, !dbg !2371

assert_fail12:                                    ; preds = %assert_ok11
  store %"char[]" { ptr @.panic_msg.13, i64 29 }, ptr %indirectarg13, align 8
  store %"char[]" { ptr @.file.141, i64 7 }, ptr %indirectarg14, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg15, align 8
  %16 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %16(ptr align 8 %indirectarg13, ptr align 8 %indirectarg14, ptr align 8 %indirectarg15, i32 80) #6, !dbg !2371
  unreachable, !dbg !2371

assert_ok16:                                      ; preds = %assert_ok11
  %17 = load i64, ptr %alignment, align 8, !dbg !2372
  %18 = call i64 @std.core.mem.allocator.alignment_for_allocation(i64 %17) #7, !dbg !2372
  store i64 %18, ptr %alignment, align 8, !dbg !2372
    #dbg_declare(ptr %total_len, !2373, !DIExpression(), !2374)
  %19 = load ptr, ptr %self, align 8, !dbg !2374
  %ptradd = getelementptr inbounds i8, ptr %19, i64 8, !dbg !2374
  %20 = load i64, ptr %ptradd, align 8, !dbg !2374
  store i64 %20, ptr %total_len, align 8, !dbg !2374
  %21 = load i64, ptr %size, align 8, !dbg !2375
  %22 = load i64, ptr %total_len, align 8, !dbg !2375
  %gt = icmp ugt i64 %21, %22, !dbg !2375
  br i1 %gt, label %if.then, label %if.exit, !dbg !2375

if.then:                                          ; preds = %assert_ok16
  ret i64 ptrtoint (ptr @std.core.mem.INVALID_ALLOC_SIZE to i64), !dbg !2375

if.exit:                                          ; preds = %assert_ok16
    #dbg_declare(ptr %start_mem, !2376, !DIExpression(), !2377)
  %23 = load ptr, ptr %self, align 8, !dbg !2377
  %24 = load ptr, ptr %23, align 8, !dbg !2377
  store ptr %24, ptr %start_mem, align 8, !dbg !2377
    #dbg_declare(ptr %unaligned_pointer_to_offset, !2378, !DIExpression(), !2379)
  %25 = load ptr, ptr %start_mem, align 8, !dbg !2379
  %26 = load ptr, ptr %self, align 8, !dbg !2379
  %ptradd17 = getelementptr inbounds i8, ptr %26, i64 24, !dbg !2379
  %27 = load i64, ptr %ptradd17, align 8, !dbg !2379
  %add = add i64 %27, 8, !dbg !2379
  %ptradd_any = getelementptr i8, ptr %25, i64 %add, !dbg !2379
  store ptr %ptradd_any, ptr %unaligned_pointer_to_offset, align 8, !dbg !2379
    #dbg_declare(ptr %mem, !2380, !DIExpression(), !2381)
  %28 = load ptr, ptr %unaligned_pointer_to_offset, align 8
  store ptr %28, ptr %ptr, align 8
  %29 = load i64, ptr %alignment, align 8
  store i64 %29, ptr %alignment18, align 8
  %30 = load ptr, ptr %ptr, align 8, !dbg !2382
  %ptrxi = ptrtoint ptr %30 to i64, !dbg !2382
  %31 = load i64, ptr %alignment18, align 8, !dbg !2382
  store i64 %31, ptr %x19, align 8
  %32 = load i64, ptr %x19, align 8, !dbg !2384
  %neq20 = icmp ne i64 0, %32, !dbg !2384
  br i1 %neq20, label %and.rhs21, label %and.phi25, !dbg !2384

and.rhs21:                                        ; preds = %if.exit
  %33 = load i64, ptr %x19, align 8, !dbg !2384
  %34 = load i64, ptr %x19, align 8, !dbg !2384
  %sub22 = sub i64 %34, 1, !dbg !2384
  %and23 = and i64 %33, %sub22, !dbg !2384
  %eq24 = icmp eq i64 %and23, 0, !dbg !2384
  br label %and.phi25, !dbg !2384

and.phi25:                                        ; preds = %and.rhs21, %if.exit
  %val26 = phi i1 [ false, %if.exit ], [ %eq24, %and.rhs21 ], !dbg !2384
  br i1 %val26, label %assert_ok31, label %assert_fail27, !dbg !2384

assert_fail27:                                    ; preds = %and.phi25
  store %"char[]" { ptr @.panic_msg.14, i64 51 }, ptr %indirectarg28, align 8
  store %"char[]" { ptr @.file.15, i64 6 }, ptr %indirectarg29, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg30, align 8
  %35 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %35(ptr align 8 %indirectarg28, ptr align 8 %indirectarg29, ptr align 8 %indirectarg30, i32 313) #6, !dbg !2382
  unreachable, !dbg !2382

assert_ok31:                                      ; preds = %and.phi25
  %36 = call i64 @std.core.mem.aligned_offset(i64 %ptrxi, i64 %31), !dbg !2382
  %intptr = inttoptr i64 %36 to ptr, !dbg !2382
  store ptr %intptr, ptr %mem, align 8, !dbg !2382
    #dbg_declare(ptr %after, !2386, !DIExpression(), !2387)
  %37 = load ptr, ptr %mem, align 8, !dbg !2387
  %38 = load ptr, ptr %start_mem, align 8, !dbg !2387
  %39 = ptrtoint ptr %38 to i64, !dbg !2387
  %40 = ptrtoint ptr %37 to i64, !dbg !2387
  %41 = sub i64 %40, %39, !dbg !2387
  %42 = sdiv exact i64 %41, 1, !dbg !2387
  %43 = load i64, ptr %size, align 8, !dbg !2387
  %add32 = add i64 %42, %43, !dbg !2387
  store i64 %add32, ptr %after, align 8, !dbg !2387
  %44 = load i64, ptr %after, align 8, !dbg !2388
  %45 = load i64, ptr %total_len, align 8, !dbg !2388
  %gt33 = icmp ugt i64 %44, %45, !dbg !2388
  br i1 %gt33, label %if.then34, label %if.exit35, !dbg !2388

if.then34:                                        ; preds = %assert_ok31
  ret i64 ptrtoint (ptr @std.core.mem.OUT_OF_MEMORY to i64), !dbg !2388

if.exit35:                                        ; preds = %assert_ok31
  %46 = load i32, ptr %init_type, align 4, !dbg !2389
  %eq36 = icmp eq i32 %46, 1, !dbg !2389
  br i1 %eq36, label %and.rhs37, label %and.phi41, !dbg !2389

and.rhs37:                                        ; preds = %if.exit35
  %47 = load ptr, ptr %self, align 8, !dbg !2389
  %ptradd38 = getelementptr inbounds i8, ptr %47, i64 56, !dbg !2389
  %48 = load i64, ptr %ptradd38, align 8, !dbg !2389
  %49 = load ptr, ptr %self, align 8, !dbg !2389
  %ptradd39 = getelementptr inbounds i8, ptr %49, i64 24, !dbg !2389
  %50 = load i64, ptr %ptradd39, align 8, !dbg !2389
  %le40 = icmp ule i64 %48, %50, !dbg !2389
  br label %and.phi41, !dbg !2389

and.phi41:                                        ; preds = %and.rhs37, %if.exit35
  %val42 = phi i1 [ false, %if.exit35 ], [ %le40, %and.rhs37 ], !dbg !2389
  br i1 %val42, label %if.then43, label %if.exit44, !dbg !2389

if.then43:                                        ; preds = %and.phi41
  store i32 0, ptr %init_type, align 4, !dbg !2390
  br label %if.exit44, !dbg !2390

if.exit44:                                        ; preds = %if.then43, %and.phi41
  %51 = load ptr, ptr %self, align 8
  store ptr %51, ptr %mem45, align 8
  %52 = load i64, ptr %after, align 8
  store i64 %52, ptr %after46, align 8
    #dbg_declare(ptr %shift, !2392, !DIExpression(), !2394)
  %53 = load ptr, ptr %mem45, align 8, !dbg !2394
  %ptradd47 = getelementptr inbounds i8, ptr %53, i64 40, !dbg !2394
  %54 = load i64, ptr %ptradd47, align 8, !dbg !2394
  store i64 %54, ptr %shift, align 8, !dbg !2394
    #dbg_declare(ptr %page_after, !2396, !DIExpression(), !2397)
  %55 = load i64, ptr %after46, align 8, !dbg !2397
  %56 = load ptr, ptr %mem45, align 8, !dbg !2397
  %ptradd48 = getelementptr inbounds i8, ptr %56, i64 32, !dbg !2397
  %57 = load i64, ptr %ptradd48, align 8, !dbg !2397
  %add49 = add i64 %55, %57, !dbg !2397
  %sub50 = sub i64 %add49, 1, !dbg !2397
  %58 = load i64, ptr %shift, align 8, !dbg !2397
  %shift_underflow = icmp slt i64 %58, 0, !dbg !2397
  %59 = call i1 @llvm.expect.i1(i1 %shift_underflow, i1 false), !dbg !2397
  br i1 %59, label %panic51, label %checkok56, !dbg !2397

checkok56:                                        ; preds = %if.exit44
  %shift_exceeds = icmp sge i64 %58, 64, !dbg !2397
  %60 = call i1 @llvm.expect.i1(i1 %shift_exceeds, i1 false), !dbg !2397
  br i1 %60, label %panic57, label %checkok65, !dbg !2397

checkok65:                                        ; preds = %checkok56
  %ashr = ashr i64 %sub50, %58, !dbg !2397
  %61 = freeze i64 %ashr, !dbg !2397
  store i64 %61, ptr %page_after, align 8, !dbg !2397
    #dbg_declare(ptr %last_page, !2398, !DIExpression(), !2399)
  %62 = load ptr, ptr %mem45, align 8, !dbg !2399
  %ptradd66 = getelementptr inbounds i8, ptr %62, i64 48, !dbg !2399
  %63 = load i64, ptr %ptradd66, align 8, !dbg !2399
  store i64 %63, ptr %last_page, align 8, !dbg !2399
    #dbg_declare(ptr %over_high_water, !2400, !DIExpression(), !2401)
  %64 = load ptr, ptr %mem45, align 8, !dbg !2401
  %ptradd67 = getelementptr inbounds i8, ptr %64, i64 56, !dbg !2401
  %65 = load i64, ptr %ptradd67, align 8, !dbg !2401
  %66 = load i64, ptr %after46, align 8, !dbg !2401
  %lt68 = icmp ult i64 %65, %66, !dbg !2401
  %67 = zext i1 %lt68 to i8, !dbg !2401
  store i8 %67, ptr %over_high_water, align 1, !dbg !2401
  %68 = load i64, ptr %page_after, align 8, !dbg !2402
  %69 = load i64, ptr %last_page, align 8, !dbg !2402
  %gt69 = icmp ugt i64 %68, %69, !dbg !2402
  br i1 %gt69, label %if.then70, label %if.exit193, !dbg !2402

if.then70:                                        ; preds = %checkok65
    #dbg_declare(ptr %page_start, !2403, !DIExpression(), !2405)
  %70 = load i64, ptr %last_page, align 8, !dbg !2405
  %71 = load i64, ptr %shift, align 8, !dbg !2405
  %shift_exceeds71 = icmp uge i64 %71, 64, !dbg !2405
  %72 = call i1 @llvm.expect.i1(i1 %shift_exceeds71, i1 false), !dbg !2405
  br i1 %72, label %panic72, label %checkok80, !dbg !2405

checkok80:                                        ; preds = %if.then70
  %shl = shl i64 %70, %71, !dbg !2405
  %73 = freeze i64 %shl, !dbg !2405
  store i64 %73, ptr %page_start, align 8, !dbg !2405
    #dbg_declare(ptr %page_len, !2406, !DIExpression(), !2407)
  %74 = load i64, ptr %page_after, align 8, !dbg !2407
  %75 = load i64, ptr %last_page, align 8, !dbg !2407
  %sub81 = sub i64 %74, %75, !dbg !2407
  %76 = load i64, ptr %shift, align 8, !dbg !2407
  %shift_exceeds82 = icmp uge i64 %76, 64, !dbg !2407
  %77 = call i1 @llvm.expect.i1(i1 %shift_exceeds82, i1 false), !dbg !2407
  br i1 %77, label %panic83, label %checkok91, !dbg !2407

checkok91:                                        ; preds = %checkok80
  %shl92 = shl i64 %sub81, %76, !dbg !2407
  %78 = freeze i64 %shl92, !dbg !2407
  store i64 %78, ptr %page_len, align 8, !dbg !2407
  %79 = load ptr, ptr %mem45, align 8, !dbg !2408
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %self94, ptr align 8 %79, i32 24, i1 false)
  %80 = load i64, ptr %page_start, align 8
  store i64 %80, ptr %offset, align 8
  %81 = load i64, ptr %page_len, align 8
  store i64 %81, ptr %len, align 8
  %82 = load ptr, ptr %self94, align 8, !dbg !2409
  %83 = load i64, ptr %offset, align 8, !dbg !2409
  %ptradd_any95 = getelementptr i8, ptr %82, i64 %83, !dbg !2409
  %84 = call i8 @std.core.mem.ptr_is_page_aligned(ptr %ptradd_any95) #7, !dbg !2413
  %85 = trunc i8 %84 to i1, !dbg !2413
  br i1 %85, label %assert_ok100, label %assert_fail96, !dbg !2413

assert_fail96:                                    ; preds = %checkok91
  store %"char[]" { ptr @.panic_msg.147, i64 101 }, ptr %indirectarg97, align 8
  store %"char[]" { ptr @.file.141, i64 7 }, ptr %indirectarg98, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg99, align 8
  %86 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %86(ptr align 8 %indirectarg97, ptr align 8 %indirectarg98, ptr align 8 %indirectarg99, i32 217) #6, !dbg !2413
  unreachable, !dbg !2413

assert_ok100:                                     ; preds = %checkok91
  %87 = load ptr, ptr %self94, align 8, !dbg !2414
  %88 = load i64, ptr %offset, align 8, !dbg !2414
  %89 = load i64, ptr %len, align 8, !dbg !2414
  %add101 = add i64 %88, %89, !dbg !2414
  %ptradd_any102 = getelementptr i8, ptr %87, i64 %add101, !dbg !2414
  %90 = call i8 @std.core.mem.ptr_is_page_aligned(ptr %ptradd_any102) #7, !dbg !2413
  %91 = trunc i8 %90 to i1, !dbg !2413
  br i1 %91, label %assert_ok107, label %assert_fail103, !dbg !2413

assert_fail103:                                   ; preds = %assert_ok100
  store %"char[]" { ptr @.panic_msg.148, i64 105 }, ptr %indirectarg104, align 8
  store %"char[]" { ptr @.file.141, i64 7 }, ptr %indirectarg105, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg106, align 8
  %92 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %92(ptr align 8 %indirectarg104, ptr align 8 %indirectarg105, ptr align 8 %indirectarg106, i32 217) #6, !dbg !2413
  unreachable, !dbg !2413

assert_ok107:                                     ; preds = %assert_ok100
  %93 = load i64, ptr %offset, align 8, !dbg !2415
  %ptradd108 = getelementptr inbounds i8, ptr %self94, i64 8, !dbg !2415
  %94 = load i64, ptr %ptradd108, align 8, !dbg !2415
  %lt109 = icmp ult i64 %93, %94, !dbg !2413
  br i1 %lt109, label %assert_ok114, label %assert_fail110, !dbg !2413

assert_fail110:                                   ; preds = %assert_ok107
  store %"char[]" { ptr @.panic_msg.149, i64 62 }, ptr %indirectarg111, align 8
  store %"char[]" { ptr @.file.141, i64 7 }, ptr %indirectarg112, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg113, align 8
  %95 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %95(ptr align 8 %indirectarg111, ptr align 8 %indirectarg112, ptr align 8 %indirectarg113, i32 217) #6, !dbg !2413
  unreachable, !dbg !2413

assert_ok114:                                     ; preds = %assert_ok107
  %96 = load i64, ptr %offset, align 8, !dbg !2416
  %97 = load i64, ptr %len, align 8, !dbg !2416
  %add115 = add i64 %96, %97, !dbg !2416
  %ptradd116 = getelementptr inbounds i8, ptr %self94, i64 8, !dbg !2416
  %98 = load i64, ptr %ptradd116, align 8, !dbg !2416
  %le117 = icmp ule i64 %add115, %98, !dbg !2413
  br i1 %le117, label %assert_ok122, label %assert_fail118, !dbg !2413

assert_fail118:                                   ; preds = %assert_ok114
  store %"char[]" { ptr @.panic_msg.150, i64 69 }, ptr %indirectarg119, align 8
  store %"char[]" { ptr @.file.141, i64 7 }, ptr %indirectarg120, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg121, align 8
  %99 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %99(ptr align 8 %indirectarg119, ptr align 8 %indirectarg120, ptr align 8 %indirectarg121, i32 217) #6, !dbg !2413
  unreachable, !dbg !2413

assert_ok122:                                     ; preds = %assert_ok114
  %100 = load ptr, ptr %self94, align 8, !dbg !2417
  %101 = load i64, ptr %offset, align 8, !dbg !2417
  %ptradd_any123 = getelementptr i8, ptr %100, i64 %101, !dbg !2417
  %102 = load i64, ptr %len, align 8, !dbg !2417
  %ptradd124 = getelementptr inbounds i8, ptr %self94, i64 16, !dbg !2417
  %103 = load i32, ptr %ptradd124, align 8, !dbg !2417
  %104 = call i8 @std.core.mem.ptr_is_page_aligned(ptr %ptradd_any123) #7, !dbg !2417
  %105 = trunc i8 %104 to i1, !dbg !2417
  br i1 %105, label %assert_ok129, label %assert_fail125, !dbg !2417

assert_fail125:                                   ; preds = %assert_ok122
  store %"char[]" { ptr @.panic_msg.151, i64 88 }, ptr %indirectarg126, align 8
  store %"char[]" { ptr @.file.152, i64 9 }, ptr %indirectarg127, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg128, align 8
  %106 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %106(ptr align 8 %indirectarg126, ptr align 8 %indirectarg127, ptr align 8 %indirectarg128, i32 249) #6, !dbg !2417
  unreachable, !dbg !2417

assert_ok129:                                     ; preds = %assert_ok122
  %ptradd_any130 = getelementptr i8, ptr %ptradd_any123, i64 %102, !dbg !2418
  %107 = call i8 @std.core.mem.ptr_is_page_aligned(ptr %ptradd_any130) #7, !dbg !2417
  %108 = trunc i8 %107 to i1, !dbg !2417
  br i1 %108, label %assert_ok135, label %assert_fail131, !dbg !2417

assert_fail131:                                   ; preds = %assert_ok129
  store %"char[]" { ptr @.panic_msg.153, i64 91 }, ptr %indirectarg132, align 8
  store %"char[]" { ptr @.file.152, i64 9 }, ptr %indirectarg133, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg134, align 8
  %109 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %109(ptr align 8 %indirectarg132, ptr align 8 %indirectarg133, ptr align 8 %indirectarg134, i32 249) #6, !dbg !2417
  unreachable, !dbg !2417

assert_ok135:                                     ; preds = %assert_ok129
  %110 = call i64 @std.core.mem.vm.commit(ptr %ptradd_any123, i64 %102, i32 %103), !dbg !2417
  %not_err = icmp eq i64 %110, 0, !dbg !2417
  %111 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !2417
  br i1 %111, label %after_check, label %assign_optional, !dbg !2417

assign_optional:                                  ; preds = %assert_ok135
  store i64 %110, ptr %error_var93, align 8, !dbg !2417
  br label %guard_block, !dbg !2417

after_check:                                      ; preds = %assert_ok135
  br label %expr_block.exit, !dbg !2417

expr_block.exit:                                  ; preds = %after_check
  br label %noerr_block, !dbg !2417

guard_block:                                      ; preds = %assign_optional
  %112 = load i64, ptr %error_var93, align 8, !dbg !2417
  store i64 %112, ptr %error_var, align 8, !dbg !2417
  br label %guard_block198, !dbg !2417

noerr_block:                                      ; preds = %expr_block.exit
  %113 = load ptr, ptr %mem45, align 8, !dbg !2419
  %ptradd136 = getelementptr inbounds i8, ptr %113, i64 64, !dbg !2419
  %114 = load i32, ptr %ptradd136, align 8, !dbg !2419
  %lshrl = lshr i32 %114, 1, !dbg !2419
  %115 = and i32 1, %lshrl, !dbg !2419
  %trunc = trunc i32 %115 to i8, !dbg !2419
  %116 = trunc i8 %trunc to i1, !dbg !2419
  br i1 %116, label %or.phi138, label %or.rhs137, !dbg !2419

or.rhs137:                                        ; preds = %noerr_block
  %117 = load i8, ptr %over_high_water, align 1, !dbg !2419
  %118 = trunc i8 %117 to i1, !dbg !2419
  br label %or.phi138, !dbg !2419

or.phi138:                                        ; preds = %or.rhs137, %noerr_block
  %val139 = phi i1 [ true, %noerr_block ], [ %118, %or.rhs137 ], !dbg !2419
  br i1 %val139, label %if.then140, label %if.exit191, !dbg !2419

if.then140:                                       ; preds = %or.phi138
  %119 = load ptr, ptr %mem45, align 8, !dbg !2420
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %self142, ptr align 8 %119, i32 24, i1 false)
  %120 = load i64, ptr %page_start, align 8
  store i64 %120, ptr %offset143, align 8
  %121 = load i64, ptr %page_len, align 8
  store i64 %121, ptr %len144, align 8
  store i32 3, ptr %access, align 4
  %122 = load ptr, ptr %self142, align 8, !dbg !2422
  %123 = load i64, ptr %offset143, align 8, !dbg !2422
  %ptradd_any145 = getelementptr i8, ptr %122, i64 %123, !dbg !2422
  %124 = call i8 @std.core.mem.ptr_is_page_aligned(ptr %ptradd_any145) #7, !dbg !2425
  %125 = trunc i8 %124 to i1, !dbg !2425
  br i1 %125, label %assert_ok150, label %assert_fail146, !dbg !2425

assert_fail146:                                   ; preds = %if.then140
  store %"char[]" { ptr @.panic_msg.147, i64 101 }, ptr %indirectarg147, align 8
  store %"char[]" { ptr @.file.141, i64 7 }, ptr %indirectarg148, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg149, align 8
  %126 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %126(ptr align 8 %indirectarg147, ptr align 8 %indirectarg148, ptr align 8 %indirectarg149, i32 220) #6, !dbg !2425
  unreachable, !dbg !2425

assert_ok150:                                     ; preds = %if.then140
  %127 = load ptr, ptr %self142, align 8, !dbg !2426
  %128 = load i64, ptr %offset143, align 8, !dbg !2426
  %129 = load i64, ptr %len144, align 8, !dbg !2426
  %add151 = add i64 %128, %129, !dbg !2426
  %ptradd_any152 = getelementptr i8, ptr %127, i64 %add151, !dbg !2426
  %130 = call i8 @std.core.mem.ptr_is_page_aligned(ptr %ptradd_any152) #7, !dbg !2425
  %131 = trunc i8 %130 to i1, !dbg !2425
  br i1 %131, label %assert_ok157, label %assert_fail153, !dbg !2425

assert_fail153:                                   ; preds = %assert_ok150
  store %"char[]" { ptr @.panic_msg.148, i64 105 }, ptr %indirectarg154, align 8
  store %"char[]" { ptr @.file.141, i64 7 }, ptr %indirectarg155, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg156, align 8
  %132 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %132(ptr align 8 %indirectarg154, ptr align 8 %indirectarg155, ptr align 8 %indirectarg156, i32 220) #6, !dbg !2425
  unreachable, !dbg !2425

assert_ok157:                                     ; preds = %assert_ok150
  %133 = load i64, ptr %offset143, align 8, !dbg !2427
  %ptradd158 = getelementptr inbounds i8, ptr %self142, i64 8, !dbg !2427
  %134 = load i64, ptr %ptradd158, align 8, !dbg !2427
  %lt159 = icmp ult i64 %133, %134, !dbg !2425
  br i1 %lt159, label %assert_ok164, label %assert_fail160, !dbg !2425

assert_fail160:                                   ; preds = %assert_ok157
  store %"char[]" { ptr @.panic_msg.149, i64 62 }, ptr %indirectarg161, align 8
  store %"char[]" { ptr @.file.141, i64 7 }, ptr %indirectarg162, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg163, align 8
  %135 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %135(ptr align 8 %indirectarg161, ptr align 8 %indirectarg162, ptr align 8 %indirectarg163, i32 220) #6, !dbg !2425
  unreachable, !dbg !2425

assert_ok164:                                     ; preds = %assert_ok157
  %136 = load i64, ptr %offset143, align 8, !dbg !2428
  %137 = load i64, ptr %len144, align 8, !dbg !2428
  %add165 = add i64 %136, %137, !dbg !2428
  %ptradd166 = getelementptr inbounds i8, ptr %self142, i64 8, !dbg !2428
  %138 = load i64, ptr %ptradd166, align 8, !dbg !2428
  %lt167 = icmp ult i64 %add165, %138, !dbg !2425
  br i1 %lt167, label %assert_ok172, label %assert_fail168, !dbg !2425

assert_fail168:                                   ; preds = %assert_ok164
  store %"char[]" { ptr @.panic_msg.154, i64 68 }, ptr %indirectarg169, align 8
  store %"char[]" { ptr @.file.141, i64 7 }, ptr %indirectarg170, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg171, align 8
  %139 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %139(ptr align 8 %indirectarg169, ptr align 8 %indirectarg170, ptr align 8 %indirectarg171, i32 220) #6, !dbg !2425
  unreachable, !dbg !2425

assert_ok172:                                     ; preds = %assert_ok164
  %140 = load ptr, ptr %self142, align 8, !dbg !2429
  %141 = load i64, ptr %offset143, align 8, !dbg !2429
  %ptradd_any173 = getelementptr i8, ptr %140, i64 %141, !dbg !2429
  %142 = load i64, ptr %len144, align 8, !dbg !2429
  %143 = load i32, ptr %access, align 4, !dbg !2429
  %144 = call i8 @std.core.mem.ptr_is_page_aligned(ptr %ptradd_any173) #7, !dbg !2429
  %145 = trunc i8 %144 to i1, !dbg !2429
  br i1 %145, label %assert_ok178, label %assert_fail174, !dbg !2429

assert_fail174:                                   ; preds = %assert_ok172
  store %"char[]" { ptr @.panic_msg.151, i64 88 }, ptr %indirectarg175, align 8
  store %"char[]" { ptr @.file.152, i64 9 }, ptr %indirectarg176, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg177, align 8
  %146 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %146(ptr align 8 %indirectarg175, ptr align 8 %indirectarg176, ptr align 8 %indirectarg177, i32 265) #6, !dbg !2429
  unreachable, !dbg !2429

assert_ok178:                                     ; preds = %assert_ok172
  %ptradd_any179 = getelementptr i8, ptr %ptradd_any173, i64 %142, !dbg !2430
  %147 = call i8 @std.core.mem.ptr_is_page_aligned(ptr %ptradd_any179) #7, !dbg !2429
  %148 = trunc i8 %147 to i1, !dbg !2429
  br i1 %148, label %assert_ok184, label %assert_fail180, !dbg !2429

assert_fail180:                                   ; preds = %assert_ok178
  store %"char[]" { ptr @.panic_msg.153, i64 91 }, ptr %indirectarg181, align 8
  store %"char[]" { ptr @.file.152, i64 9 }, ptr %indirectarg182, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg183, align 8
  %149 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %149(ptr align 8 %indirectarg181, ptr align 8 %indirectarg182, ptr align 8 %indirectarg183, i32 265) #6, !dbg !2429
  unreachable, !dbg !2429

assert_ok184:                                     ; preds = %assert_ok178
  %150 = call i64 @std.core.mem.vm.protect(ptr %ptradd_any173, i64 %142, i32 %143), !dbg !2429
  %not_err185 = icmp eq i64 %150, 0, !dbg !2429
  %151 = call i1 @llvm.expect.i1(i1 %not_err185, i1 true), !dbg !2429
  br i1 %151, label %after_check187, label %assign_optional186, !dbg !2429

assign_optional186:                               ; preds = %assert_ok184
  store i64 %150, ptr %error_var141, align 8, !dbg !2429
  br label %guard_block189, !dbg !2429

after_check187:                                   ; preds = %assert_ok184
  br label %expr_block.exit188, !dbg !2429

expr_block.exit188:                               ; preds = %after_check187
  br label %noerr_block190, !dbg !2429

guard_block189:                                   ; preds = %assign_optional186
  %152 = load i64, ptr %error_var141, align 8, !dbg !2429
  store i64 %152, ptr %error_var, align 8, !dbg !2429
  br label %guard_block198, !dbg !2429

noerr_block190:                                   ; preds = %expr_block.exit188
  br label %if.exit191, !dbg !2429

if.exit191:                                       ; preds = %noerr_block190, %or.phi138
  %153 = load ptr, ptr %mem45, align 8, !dbg !2431
  %ptradd192 = getelementptr inbounds i8, ptr %153, i64 48, !dbg !2431
  %154 = load i64, ptr %page_after, align 8, !dbg !2431
  store i64 %154, ptr %ptradd192, align 8, !dbg !2431
  br label %if.exit193, !dbg !2431

if.exit193:                                       ; preds = %if.exit191, %checkok65
  %155 = load ptr, ptr %mem45, align 8, !dbg !2432
  %ptradd194 = getelementptr inbounds i8, ptr %155, i64 24, !dbg !2432
  %156 = load i64, ptr %after46, align 8, !dbg !2432
  store i64 %156, ptr %ptradd194, align 8, !dbg !2432
  %157 = load i8, ptr %over_high_water, align 1, !dbg !2433
  %158 = trunc i8 %157 to i1, !dbg !2433
  br i1 %158, label %if.then195, label %if.exit197, !dbg !2433

if.then195:                                       ; preds = %if.exit193
  %159 = load ptr, ptr %mem45, align 8, !dbg !2433
  %ptradd196 = getelementptr inbounds i8, ptr %159, i64 56, !dbg !2433
  %160 = load i64, ptr %after46, align 8, !dbg !2433
  store i64 %160, ptr %ptradd196, align 8, !dbg !2433
  br label %if.exit197, !dbg !2433

if.exit197:                                       ; preds = %if.then195, %if.exit193
  br label %noerr_block199, !dbg !2433

guard_block198:                                   ; preds = %guard_block189, %guard_block
  %161 = load i64, ptr %error_var, align 8, !dbg !2433
  ret i64 %161, !dbg !2433

noerr_block199:                                   ; preds = %if.exit197
    #dbg_declare(ptr %header, !2434, !DIExpression(), !2440)
  %162 = load ptr, ptr %mem, align 8, !dbg !2440
  %ptradd_any200 = getelementptr i8, ptr %162, i64 -8, !dbg !2440
  store ptr %ptradd_any200, ptr %header, align 8, !dbg !2440
  %163 = load ptr, ptr %header, align 8, !dbg !2441
  %164 = load i64, ptr %size, align 8, !dbg !2441
  store i64 %164, ptr %163, align 8, !dbg !2441
  %165 = load i32, ptr %init_type, align 4, !dbg !2442
  %eq201 = icmp eq i32 %165, 1, !dbg !2442
  br i1 %eq201, label %if.then202, label %if.exit204, !dbg !2442

if.then202:                                       ; preds = %noerr_block199
  %166 = load ptr, ptr %mem, align 8
  store ptr %166, ptr %dst, align 8
  %167 = load i64, ptr %size, align 8
  store i64 %167, ptr %len203, align 8
  %168 = load ptr, ptr %dst, align 8, !dbg !2443
  %169 = load i64, ptr %len203, align 8, !dbg !2443
  call void @llvm.memset.p0.i64(ptr align 16 %168, i8 0, i64 %169, i1 false), !dbg !2443
  br label %if.exit204, !dbg !2443

if.exit204:                                       ; preds = %if.then202, %noerr_block199
  %170 = load ptr, ptr %mem, align 8, !dbg !2445
  store ptr %170, ptr %0, align 8, !dbg !2445
  ret i64 0, !dbg !2445

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.141, i64 7 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg2, align 8
  %171 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %171(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 83) #6, !dbg !2362
  unreachable, !dbg !2362

panic51:                                          ; preds = %if.exit44
  store i64 %58, ptr %taddr, align 8
  %172 = insertvalue %any undef, ptr %taddr, 0
  %173 = insertvalue %any %172, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.146, i64 35 }, ptr %indirectarg52, align 8
  store %"char[]" { ptr @.file.141, i64 7 }, ptr %indirectarg53, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg54, align 8
  store %any %173, ptr %varargslots, align 16
  %174 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %174, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg55, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg52, ptr align 8 %indirectarg53, ptr align 8 %indirectarg54, i32 210, ptr align 8 %indirectarg55) #6, !dbg !2397
  unreachable, !dbg !2397

panic57:                                          ; preds = %checkok56
  store i64 %58, ptr %taddr58, align 8
  %175 = insertvalue %any undef, ptr %taddr58, 0
  %176 = insertvalue %any %175, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.146, i64 35 }, ptr %indirectarg59, align 8
  store %"char[]" { ptr @.file.141, i64 7 }, ptr %indirectarg60, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg61, align 8
  store %any %176, ptr %varargslots62, align 16
  %177 = insertvalue %"any[]" undef, ptr %varargslots62, 0
  %"$$temp63" = insertvalue %"any[]" %177, i64 1, 1
  store %"any[]" %"$$temp63", ptr %indirectarg64, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg59, ptr align 8 %indirectarg60, ptr align 8 %indirectarg61, i32 210, ptr align 8 %indirectarg64) #6, !dbg !2397
  unreachable, !dbg !2397

panic72:                                          ; preds = %if.then70
  store i64 %71, ptr %taddr73, align 8
  %178 = insertvalue %any undef, ptr %taddr73, 0
  %179 = insertvalue %any %178, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.146, i64 35 }, ptr %indirectarg74, align 8
  store %"char[]" { ptr @.file.141, i64 7 }, ptr %indirectarg75, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg76, align 8
  store %any %179, ptr %varargslots77, align 16
  %180 = insertvalue %"any[]" undef, ptr %varargslots77, 0
  %"$$temp78" = insertvalue %"any[]" %180, i64 1, 1
  store %"any[]" %"$$temp78", ptr %indirectarg79, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg74, ptr align 8 %indirectarg75, ptr align 8 %indirectarg76, i32 215, ptr align 8 %indirectarg79) #6, !dbg !2405
  unreachable, !dbg !2405

panic83:                                          ; preds = %checkok80
  store i64 %76, ptr %taddr84, align 8
  %181 = insertvalue %any undef, ptr %taddr84, 0
  %182 = insertvalue %any %181, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.146, i64 35 }, ptr %indirectarg85, align 8
  store %"char[]" { ptr @.file.141, i64 7 }, ptr %indirectarg86, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg87, align 8
  store %any %182, ptr %varargslots88, align 16
  %183 = insertvalue %"any[]" undef, ptr %varargslots88, 0
  %"$$temp89" = insertvalue %"any[]" %183, i64 1, 1
  store %"any[]" %"$$temp89", ptr %indirectarg90, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg85, ptr align 8 %indirectarg86, ptr align 8 %indirectarg87, i32 216, ptr align 8 %indirectarg90) #6, !dbg !2407
  unreachable, !dbg !2407
}

; Function Attrs: nounwind ssp uwtable
define weak_odr zeroext i8 @std.core.mem.allocator.Vmem.owns_pointer(ptr %0, ptr %1) #0 comdat !dbg !2446 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %ptr = alloca ptr, align 8
  %2 = icmp eq ptr %0, null, !dbg !2449
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !2449
  br i1 %3, label %panic, label %checkok, !dbg !2449

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2450, !DIExpression(), !2451)
  store ptr %1, ptr %ptr, align 8
    #dbg_declare(ptr %ptr, !2452, !DIExpression(), !2451)
  %4 = load ptr, ptr %ptr, align 8, !dbg !2453
  %ptrxi = ptrtoint ptr %4 to i64, !dbg !2453
  %5 = load ptr, ptr %self, align 8, !dbg !2453
  %6 = load ptr, ptr %5, align 8, !dbg !2453
  %ptrxi3 = ptrtoint ptr %6 to i64, !dbg !2453
  %ge = icmp uge i64 %ptrxi, %ptrxi3, !dbg !2453
  br i1 %ge, label %and.rhs, label %and.phi, !dbg !2453

and.rhs:                                          ; preds = %checkok
  %7 = load ptr, ptr %ptr, align 8, !dbg !2453
  %ptrxi4 = ptrtoint ptr %7 to i64, !dbg !2453
  %8 = load ptr, ptr %self, align 8, !dbg !2453
  %9 = load ptr, ptr %8, align 8, !dbg !2453
  %ptrxi5 = ptrtoint ptr %9 to i64, !dbg !2453
  %10 = load ptr, ptr %self, align 8, !dbg !2453
  %ptradd = getelementptr inbounds i8, ptr %10, i64 8, !dbg !2453
  %11 = load i64, ptr %ptradd, align 8, !dbg !2453
  %add = add i64 %ptrxi5, %11, !dbg !2453
  %lt = icmp ult i64 %ptrxi4, %add, !dbg !2453
  br label %and.phi, !dbg !2453

and.phi:                                          ; preds = %and.rhs, %checkok
  %val = phi i1 [ false, %checkok ], [ %lt, %and.rhs ], !dbg !2453
  %12 = zext i1 %val to i8, !dbg !2453
  ret i8 %12, !dbg !2453

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.141, i64 7 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.155, i64 12 }, ptr %indirectarg2, align 8
  %13 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %13(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 104) #6, !dbg !2451
  unreachable, !dbg !2451
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.core.mem.allocator.Vmem.resize(ptr %0, ptr %1, ptr %2, i64 %3, i64 %4) #0 comdat !dbg !2454 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %old_pointer = alloca ptr, align 8
  %size = alloca i64, align 8
  %alignment = alloca i64, align 8
  %x = alloca i64, align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg14 = alloca %"char[]", align 8
  %indirectarg15 = alloca %"char[]", align 8
  %indirectarg16 = alloca %"char[]", align 8
  %indirectarg19 = alloca %"char[]", align 8
  %indirectarg20 = alloca %"char[]", align 8
  %indirectarg21 = alloca %"char[]", align 8
  %taddr = alloca ptr, align 8
  %indirectarg25 = alloca %"char[]", align 8
  %indirectarg26 = alloca %"char[]", align 8
  %indirectarg27 = alloca %"char[]", align 8
  %varargslots = alloca [3 x %any], align 16
  %indirectarg30 = alloca %"any[]", align 8
  %header = alloca ptr, align 8
  %old_size = alloca i64, align 8
  %reterr = alloca i64, align 8
  %x41 = alloca i64, align 8
  %indirectarg50 = alloca %"char[]", align 8
  %indirectarg51 = alloca %"char[]", align 8
  %indirectarg52 = alloca %"char[]", align 8
  %mem = alloca ptr, align 8
  %after = alloca i64, align 8
  %shift = alloca i64, align 8
  %last_page = alloca i64, align 8
  %page_after = alloca i64, align 8
  %taddr67 = alloca i64, align 8
  %indirectarg68 = alloca %"char[]", align 8
  %indirectarg69 = alloca %"char[]", align 8
  %indirectarg70 = alloca %"char[]", align 8
  %varargslots71 = alloca [1 x %any], align 16
  %indirectarg73 = alloca %"any[]", align 8
  %taddr76 = alloca i64, align 8
  %indirectarg77 = alloca %"char[]", align 8
  %indirectarg78 = alloca %"char[]", align 8
  %indirectarg79 = alloca %"char[]", align 8
  %varargslots80 = alloca [1 x %any], align 16
  %indirectarg82 = alloca %"any[]", align 8
  %dst = alloca ptr, align 8
  %val88 = alloca i8, align 1
  %len = alloca i64, align 8
  %indirectarg93 = alloca %"char[]", align 8
  %indirectarg94 = alloca %"char[]", align 8
  %indirectarg95 = alloca %"char[]", align 8
  %start = alloca i64, align 8
  %taddr113 = alloca i64, align 8
  %indirectarg114 = alloca %"char[]", align 8
  %indirectarg115 = alloca %"char[]", align 8
  %indirectarg116 = alloca %"char[]", align 8
  %varargslots117 = alloca [1 x %any], align 16
  %indirectarg119 = alloca %"any[]", align 8
  %len121 = alloca i64, align 8
  %taddr125 = alloca i64, align 8
  %indirectarg126 = alloca %"char[]", align 8
  %indirectarg127 = alloca %"char[]", align 8
  %indirectarg128 = alloca %"char[]", align 8
  %varargslots129 = alloca [1 x %any], align 16
  %indirectarg131 = alloca %"any[]", align 8
  %self137 = alloca %VirtualMemory, align 8
  %indirectarg140 = alloca %"char[]", align 8
  %indirectarg141 = alloca %"char[]", align 8
  %indirectarg142 = alloca %"char[]", align 8
  %indirectarg147 = alloca %"char[]", align 8
  %indirectarg148 = alloca %"char[]", align 8
  %indirectarg149 = alloca %"char[]", align 8
  %indirectarg154 = alloca %"char[]", align 8
  %indirectarg155 = alloca %"char[]", align 8
  %indirectarg156 = alloca %"char[]", align 8
  %indirectarg162 = alloca %"char[]", align 8
  %indirectarg163 = alloca %"char[]", align 8
  %indirectarg164 = alloca %"char[]", align 8
  %indirectarg166 = alloca %VirtualMemory, align 8
  %self172 = alloca %VirtualMemory, align 8
  %offset = alloca i64, align 8
  %len173 = alloca i64, align 8
  %access = alloca i32, align 4
  %indirectarg176 = alloca %"char[]", align 8
  %indirectarg177 = alloca %"char[]", align 8
  %indirectarg178 = alloca %"char[]", align 8
  %indirectarg183 = alloca %"char[]", align 8
  %indirectarg184 = alloca %"char[]", align 8
  %indirectarg185 = alloca %"char[]", align 8
  %indirectarg190 = alloca %"char[]", align 8
  %indirectarg191 = alloca %"char[]", align 8
  %indirectarg192 = alloca %"char[]", align 8
  %indirectarg198 = alloca %"char[]", align 8
  %indirectarg199 = alloca %"char[]", align 8
  %indirectarg200 = alloca %"char[]", align 8
  %indirectarg204 = alloca %"char[]", align 8
  %indirectarg205 = alloca %"char[]", align 8
  %indirectarg206 = alloca %"char[]", align 8
  %indirectarg210 = alloca %"char[]", align 8
  %indirectarg211 = alloca %"char[]", align 8
  %indirectarg212 = alloca %"char[]", align 8
  %allocated = alloca i64, align 8
  %error_var = alloca i64, align 8
  %mem224 = alloca ptr, align 8
  %after225 = alloca i64, align 8
  %shift226 = alloca i64, align 8
  %page_after228 = alloca i64, align 8
  %taddr234 = alloca i64, align 8
  %indirectarg235 = alloca %"char[]", align 8
  %indirectarg236 = alloca %"char[]", align 8
  %indirectarg237 = alloca %"char[]", align 8
  %varargslots238 = alloca [1 x %any], align 16
  %indirectarg240 = alloca %"any[]", align 8
  %taddr244 = alloca i64, align 8
  %indirectarg245 = alloca %"char[]", align 8
  %indirectarg246 = alloca %"char[]", align 8
  %indirectarg247 = alloca %"char[]", align 8
  %varargslots248 = alloca [1 x %any], align 16
  %indirectarg250 = alloca %"any[]", align 8
  %last_page253 = alloca i64, align 8
  %over_high_water = alloca i8, align 1
  %page_start = alloca i64, align 8
  %taddr261 = alloca i64, align 8
  %indirectarg262 = alloca %"char[]", align 8
  %indirectarg263 = alloca %"char[]", align 8
  %indirectarg264 = alloca %"char[]", align 8
  %varargslots265 = alloca [1 x %any], align 16
  %indirectarg267 = alloca %"any[]", align 8
  %page_len = alloca i64, align 8
  %taddr273 = alloca i64, align 8
  %indirectarg274 = alloca %"char[]", align 8
  %indirectarg275 = alloca %"char[]", align 8
  %indirectarg276 = alloca %"char[]", align 8
  %varargslots277 = alloca [1 x %any], align 16
  %indirectarg279 = alloca %"any[]", align 8
  %error_var282 = alloca i64, align 8
  %self283 = alloca %VirtualMemory, align 8
  %offset284 = alloca i64, align 8
  %len285 = alloca i64, align 8
  %indirectarg288 = alloca %"char[]", align 8
  %indirectarg289 = alloca %"char[]", align 8
  %indirectarg290 = alloca %"char[]", align 8
  %indirectarg295 = alloca %"char[]", align 8
  %indirectarg296 = alloca %"char[]", align 8
  %indirectarg297 = alloca %"char[]", align 8
  %indirectarg302 = alloca %"char[]", align 8
  %indirectarg303 = alloca %"char[]", align 8
  %indirectarg304 = alloca %"char[]", align 8
  %indirectarg310 = alloca %"char[]", align 8
  %indirectarg311 = alloca %"char[]", align 8
  %indirectarg312 = alloca %"char[]", align 8
  %indirectarg317 = alloca %"char[]", align 8
  %indirectarg318 = alloca %"char[]", align 8
  %indirectarg319 = alloca %"char[]", align 8
  %indirectarg323 = alloca %"char[]", align 8
  %indirectarg324 = alloca %"char[]", align 8
  %indirectarg325 = alloca %"char[]", align 8
  %error_var337 = alloca i64, align 8
  %self338 = alloca %VirtualMemory, align 8
  %offset339 = alloca i64, align 8
  %len340 = alloca i64, align 8
  %access341 = alloca i32, align 4
  %indirectarg344 = alloca %"char[]", align 8
  %indirectarg345 = alloca %"char[]", align 8
  %indirectarg346 = alloca %"char[]", align 8
  %indirectarg351 = alloca %"char[]", align 8
  %indirectarg352 = alloca %"char[]", align 8
  %indirectarg353 = alloca %"char[]", align 8
  %indirectarg358 = alloca %"char[]", align 8
  %indirectarg359 = alloca %"char[]", align 8
  %indirectarg360 = alloca %"char[]", align 8
  %indirectarg366 = alloca %"char[]", align 8
  %indirectarg367 = alloca %"char[]", align 8
  %indirectarg368 = alloca %"char[]", align 8
  %indirectarg372 = alloca %"char[]", align 8
  %indirectarg373 = alloca %"char[]", align 8
  %indirectarg374 = alloca %"char[]", align 8
  %indirectarg378 = alloca %"char[]", align 8
  %indirectarg379 = alloca %"char[]", align 8
  %indirectarg380 = alloca %"char[]", align 8
  %reterr398 = alloca i64, align 8
  %reterr402 = alloca i64, align 8
  %mem404 = alloca ptr, align 8
  %error_var405 = alloca i64, align 8
  %x408 = alloca i64, align 8
  %indirectarg419 = alloca %"char[]", align 8
  %indirectarg420 = alloca %"char[]", align 8
  %indirectarg421 = alloca %"char[]", align 8
  %indirectarg425 = alloca %"char[]", align 8
  %indirectarg426 = alloca %"char[]", align 8
  %indirectarg427 = alloca %"char[]", align 8
  %indirectarg431 = alloca %"char[]", align 8
  %indirectarg432 = alloca %"char[]", align 8
  %indirectarg433 = alloca %"char[]", align 8
  %retparam = alloca ptr, align 8
  %indirectarg442 = alloca %"char[]", align 8
  %indirectarg443 = alloca %"char[]", align 8
  %indirectarg444 = alloca %"char[]", align 8
  %dst446 = alloca ptr, align 8
  %src = alloca ptr, align 8
  %len447 = alloca i64, align 8
  %indirectarg450 = alloca %"char[]", align 8
  %indirectarg451 = alloca %"char[]", align 8
  %indirectarg452 = alloca %"char[]", align 8
  %indirectarg460 = alloca %"char[]", align 8
  %indirectarg461 = alloca %"char[]", align 8
  %indirectarg462 = alloca %"char[]", align 8
  %indirectarg476 = alloca %"char[]", align 8
  %indirectarg477 = alloca %"char[]", align 8
  %indirectarg478 = alloca %"char[]", align 8
  %reterr480 = alloca i64, align 8
  %5 = icmp eq ptr %1, null, !dbg !2457
  %6 = call i1 @llvm.expect.i1(i1 %5, i1 false), !dbg !2457
  br i1 %6, label %panic, label %checkok, !dbg !2457

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !2458, !DIExpression(), !2459)
  store ptr %2, ptr %old_pointer, align 8
    #dbg_declare(ptr %old_pointer, !2460, !DIExpression(), !2459)
  store i64 %3, ptr %size, align 8
    #dbg_declare(ptr %size, !2461, !DIExpression(), !2459)
  store i64 %4, ptr %alignment, align 8
    #dbg_declare(ptr %alignment, !2462, !DIExpression(), !2459)
  %7 = load i64, ptr %alignment, align 8, !dbg !2463
  %i2nb = icmp eq i64 %7, 0, !dbg !2463
  br i1 %i2nb, label %or.phi, label %or.rhs, !dbg !2463

or.rhs:                                           ; preds = %checkok
  %8 = load i64, ptr %alignment, align 8
  store i64 %8, ptr %x, align 8
  %9 = load i64, ptr %x, align 8, !dbg !2465
  %neq = icmp ne i64 0, %9, !dbg !2465
  br i1 %neq, label %and.rhs, label %and.phi, !dbg !2465

and.rhs:                                          ; preds = %or.rhs
  %10 = load i64, ptr %x, align 8, !dbg !2465
  %11 = load i64, ptr %x, align 8, !dbg !2465
  %sub = sub i64 %11, 1, !dbg !2465
  %and = and i64 %10, %sub, !dbg !2465
  %eq = icmp eq i64 %and, 0, !dbg !2465
  br label %and.phi, !dbg !2465

and.phi:                                          ; preds = %and.rhs, %or.rhs
  %val = phi i1 [ false, %or.rhs ], [ %eq, %and.rhs ], !dbg !2465
  br label %or.phi, !dbg !2465

or.phi:                                           ; preds = %and.phi, %checkok
  %val3 = phi i1 [ true, %checkok ], [ %val, %and.phi ], !dbg !2465
  br i1 %val3, label %assert_ok, label %assert_fail, !dbg !2465

assert_fail:                                      ; preds = %or.phi
  store %"char[]" { ptr @.panic_msg.11, i64 65 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.141, i64 7 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg6, align 8
  %12 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %12(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 111) #6, !dbg !2463
  unreachable, !dbg !2463

assert_ok:                                        ; preds = %or.phi
  %13 = load i64, ptr %alignment, align 8, !dbg !2467
  %le = icmp ule i64 %13, 268435456, !dbg !2467
  br i1 %le, label %assert_ok11, label %assert_fail7, !dbg !2467

assert_fail7:                                     ; preds = %assert_ok
  store %"char[]" { ptr @.panic_msg.12, i64 80 }, ptr %indirectarg8, align 8
  store %"char[]" { ptr @.file.141, i64 7 }, ptr %indirectarg9, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg10, align 8
  %14 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %14(ptr align 8 %indirectarg8, ptr align 8 %indirectarg9, ptr align 8 %indirectarg10, i32 112) #6, !dbg !2467
  unreachable, !dbg !2467

assert_ok11:                                      ; preds = %assert_ok
  %15 = load ptr, ptr %old_pointer, align 8, !dbg !2468
  %neq12 = icmp ne ptr %15, null, !dbg !2468
  br i1 %neq12, label %assert_ok17, label %assert_fail13, !dbg !2468

assert_fail13:                                    ; preds = %assert_ok11
  store %"char[]" { ptr @.panic_msg.17, i64 40 }, ptr %indirectarg14, align 8
  store %"char[]" { ptr @.file.141, i64 7 }, ptr %indirectarg15, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg16, align 8
  %16 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %16(ptr align 8 %indirectarg14, ptr align 8 %indirectarg15, ptr align 8 %indirectarg16, i32 113) #6, !dbg !2468
  unreachable, !dbg !2468

assert_ok17:                                      ; preds = %assert_ok11
  %17 = load i64, ptr %size, align 8, !dbg !2469
  %lt = icmp ult i64 0, %17, !dbg !2469
  br i1 %lt, label %assert_ok22, label %assert_fail18, !dbg !2469

assert_fail18:                                    ; preds = %assert_ok17
  store %"char[]" { ptr @.panic_msg.13, i64 29 }, ptr %indirectarg19, align 8
  store %"char[]" { ptr @.file.141, i64 7 }, ptr %indirectarg20, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg21, align 8
  %18 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %18(ptr align 8 %indirectarg19, ptr align 8 %indirectarg20, ptr align 8 %indirectarg21, i32 114) #6, !dbg !2469
  unreachable, !dbg !2469

assert_ok22:                                      ; preds = %assert_ok17
  %19 = load i64, ptr %size, align 8, !dbg !2470
  %20 = load ptr, ptr %self, align 8, !dbg !2470
  %ptradd = getelementptr inbounds i8, ptr %20, i64 8, !dbg !2470
  %21 = load i64, ptr %ptradd, align 8, !dbg !2470
  %gt = icmp ugt i64 %19, %21, !dbg !2470
  br i1 %gt, label %if.then, label %if.exit, !dbg !2470

if.then:                                          ; preds = %assert_ok22
  ret i64 ptrtoint (ptr @std.core.mem.INVALID_ALLOC_SIZE to i64), !dbg !2470

if.exit:                                          ; preds = %assert_ok22
  %22 = load i64, ptr %alignment, align 8, !dbg !2471
  %23 = call i64 @std.core.mem.allocator.alignment_for_allocation(i64 %22) #7, !dbg !2471
  store i64 %23, ptr %alignment, align 8, !dbg !2471
  %24 = load ptr, ptr %self, align 8, !dbg !2472
  %25 = load ptr, ptr %old_pointer, align 8, !dbg !2472
  %26 = call i8 @std.core.mem.allocator.Vmem.owns_pointer(ptr %24, ptr %25) #7, !dbg !2472
  %27 = trunc i8 %26 to i1, !dbg !2472
  br i1 %27, label %assert_ok31, label %assert_fail23, !dbg !2472

assert_fail23:                                    ; preds = %if.exit
  %28 = insertvalue %any undef, ptr %old_pointer, 0, !dbg !2472
  %29 = insertvalue %any %28, i64 ptrtoint (ptr @"$ct.p$void" to i64), 1, !dbg !2472
  %30 = load ptr, ptr %self, align 8, !dbg !2472
  %31 = insertvalue %any undef, ptr %30, 0, !dbg !2472
  %32 = insertvalue %any %31, i64 ptrtoint (ptr @"$ct.p$void" to i64), 1, !dbg !2472
  %33 = load ptr, ptr %self, align 8, !dbg !2472
  %34 = load ptr, ptr %33, align 8, !dbg !2472
  %35 = load ptr, ptr %self, align 8, !dbg !2472
  %ptradd24 = getelementptr inbounds i8, ptr %35, i64 24, !dbg !2472
  %36 = load i64, ptr %ptradd24, align 8, !dbg !2472
  %ptradd_any = getelementptr i8, ptr %34, i64 %36, !dbg !2472
  store ptr %ptradd_any, ptr %taddr, align 8
  %37 = insertvalue %any undef, ptr %taddr, 0
  %38 = insertvalue %any %37, i64 ptrtoint (ptr @"$ct.p$void" to i64), 1
  store %"char[]" { ptr @.panic_msg.156, i64 65 }, ptr %indirectarg25, align 8
  store %"char[]" { ptr @.file.141, i64 7 }, ptr %indirectarg26, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg27, align 8
  store %any %29, ptr %varargslots, align 16
  %ptradd28 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %32, ptr %ptradd28, align 16
  %ptradd29 = getelementptr inbounds i8, ptr %varargslots, i64 32
  store %any %38, ptr %ptradd29, align 16
  %39 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %39, i64 3, 1
  store %"any[]" %"$$temp", ptr %indirectarg30, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg25, ptr align 8 %indirectarg26, ptr align 8 %indirectarg27, i32 121, ptr align 8 %indirectarg30) #6, !dbg !2472
  unreachable, !dbg !2472

assert_ok31:                                      ; preds = %if.exit
    #dbg_declare(ptr %header, !2473, !DIExpression(), !2474)
  %40 = load ptr, ptr %old_pointer, align 8, !dbg !2474
  %ptradd_any32 = getelementptr i8, ptr %40, i64 -8, !dbg !2474
  store ptr %ptradd_any32, ptr %header, align 8, !dbg !2474
    #dbg_declare(ptr %old_size, !2475, !DIExpression(), !2476)
  %41 = load ptr, ptr %header, align 8, !dbg !2476
  %42 = load i64, ptr %41, align 8, !dbg !2476
  store i64 %42, ptr %old_size, align 8, !dbg !2476
  %43 = load i64, ptr %old_size, align 8, !dbg !2477
  %44 = load i64, ptr %size, align 8, !dbg !2477
  %eq33 = icmp eq i64 %43, %44, !dbg !2477
  br i1 %eq33, label %if.then34, label %if.exit35, !dbg !2477

if.then34:                                        ; preds = %assert_ok31
  %45 = load ptr, ptr %old_pointer, align 8, !dbg !2477
  store ptr %45, ptr %0, align 8, !dbg !2477
  ret i64 0, !dbg !2477

if.exit35:                                        ; preds = %assert_ok31
  %46 = load ptr, ptr %self, align 8, !dbg !2478
  %47 = load ptr, ptr %46, align 8, !dbg !2478
  %48 = load ptr, ptr %self, align 8, !dbg !2478
  %ptradd36 = getelementptr inbounds i8, ptr %48, i64 24, !dbg !2478
  %49 = load i64, ptr %ptradd36, align 8, !dbg !2478
  %ptradd_any37 = getelementptr i8, ptr %47, i64 %49, !dbg !2478
  %50 = load ptr, ptr %old_pointer, align 8, !dbg !2478
  %51 = load i64, ptr %old_size, align 8, !dbg !2478
  %ptradd_any38 = getelementptr i8, ptr %50, i64 %51, !dbg !2478
  %eq39 = icmp eq ptr %ptradd_any37, %ptradd_any38, !dbg !2478
  br i1 %eq39, label %and.rhs40, label %and.phi54, !dbg !2478

and.rhs40:                                        ; preds = %if.exit35
  %52 = load ptr, ptr %old_pointer, align 8, !dbg !2478
  %53 = load i64, ptr %alignment, align 8, !dbg !2478
  store i64 %53, ptr %x41, align 8
  %54 = load i64, ptr %x41, align 8, !dbg !2479
  %neq42 = icmp ne i64 0, %54, !dbg !2479
  br i1 %neq42, label %and.rhs43, label %and.phi47, !dbg !2479

and.rhs43:                                        ; preds = %and.rhs40
  %55 = load i64, ptr %x41, align 8, !dbg !2479
  %56 = load i64, ptr %x41, align 8, !dbg !2479
  %sub44 = sub i64 %56, 1, !dbg !2479
  %and45 = and i64 %55, %sub44, !dbg !2479
  %eq46 = icmp eq i64 %and45, 0, !dbg !2479
  br label %and.phi47, !dbg !2479

and.phi47:                                        ; preds = %and.rhs43, %and.rhs40
  %val48 = phi i1 [ false, %and.rhs40 ], [ %eq46, %and.rhs43 ], !dbg !2479
  br i1 %val48, label %assert_ok53, label %assert_fail49, !dbg !2479

assert_fail49:                                    ; preds = %and.phi47
  store %"char[]" { ptr @.panic_msg.14, i64 51 }, ptr %indirectarg50, align 8
  store %"char[]" { ptr @.file.141, i64 7 }, ptr %indirectarg51, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg52, align 8
  %57 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %57(ptr align 8 %indirectarg50, ptr align 8 %indirectarg51, ptr align 8 %indirectarg52, i32 126) #6, !dbg !2478
  unreachable, !dbg !2478

assert_ok53:                                      ; preds = %and.phi47
  %58 = call i8 @std.core.mem.ptr_is_aligned(ptr %52, i64 %53) #7, !dbg !2478
  %59 = trunc i8 %58 to i1, !dbg !2478
  br label %and.phi54, !dbg !2478

and.phi54:                                        ; preds = %assert_ok53, %if.exit35
  %val55 = phi i1 [ false, %if.exit35 ], [ %59, %assert_ok53 ], !dbg !2478
  br i1 %val55, label %if.then56, label %if.exit399, !dbg !2478

if.then56:                                        ; preds = %and.phi54
  %60 = load i64, ptr %old_size, align 8, !dbg !2481
  %61 = load i64, ptr %size, align 8, !dbg !2481
  %gt57 = icmp ugt i64 %60, %61, !dbg !2481
  br i1 %gt57, label %if.then58, label %if.else, !dbg !2481

if.then58:                                        ; preds = %if.then56
  %62 = load ptr, ptr %self, align 8
  store ptr %62, ptr %mem, align 8
  %63 = load ptr, ptr %self, align 8, !dbg !2483
  %ptradd59 = getelementptr inbounds i8, ptr %63, i64 24, !dbg !2483
  %64 = load i64, ptr %ptradd59, align 8, !dbg !2483
  %65 = load i64, ptr %size, align 8, !dbg !2483
  %add = add i64 %64, %65, !dbg !2483
  %66 = load i64, ptr %old_size, align 8, !dbg !2483
  %sub60 = sub i64 %add, %66, !dbg !2483
  store i64 %sub60, ptr %after, align 8
    #dbg_declare(ptr %shift, !2485, !DIExpression(), !2487)
  %67 = load ptr, ptr %mem, align 8, !dbg !2487
  %ptradd61 = getelementptr inbounds i8, ptr %67, i64 40, !dbg !2487
  %68 = load i64, ptr %ptradd61, align 8, !dbg !2487
  store i64 %68, ptr %shift, align 8, !dbg !2487
    #dbg_declare(ptr %last_page, !2488, !DIExpression(), !2489)
  %69 = load ptr, ptr %mem, align 8, !dbg !2489
  %ptradd62 = getelementptr inbounds i8, ptr %69, i64 48, !dbg !2489
  %70 = load i64, ptr %ptradd62, align 8, !dbg !2489
  store i64 %70, ptr %last_page, align 8, !dbg !2489
    #dbg_declare(ptr %page_after, !2490, !DIExpression(), !2491)
  %71 = load i64, ptr %after, align 8, !dbg !2491
  %72 = load ptr, ptr %mem, align 8, !dbg !2491
  %ptradd63 = getelementptr inbounds i8, ptr %72, i64 32, !dbg !2491
  %73 = load i64, ptr %ptradd63, align 8, !dbg !2491
  %add64 = add i64 %71, %73, !dbg !2491
  %sub65 = sub i64 %add64, 1, !dbg !2491
  %74 = load i64, ptr %shift, align 8, !dbg !2491
  %shift_underflow = icmp slt i64 %74, 0, !dbg !2491
  %75 = call i1 @llvm.expect.i1(i1 %shift_underflow, i1 false), !dbg !2491
  br i1 %75, label %panic66, label %checkok74, !dbg !2491

checkok74:                                        ; preds = %if.then58
  %shift_exceeds = icmp sge i64 %74, 64, !dbg !2491
  %76 = call i1 @llvm.expect.i1(i1 %shift_exceeds, i1 false), !dbg !2491
  br i1 %76, label %panic75, label %checkok83, !dbg !2491

checkok83:                                        ; preds = %checkok74
  %ashr = ashr i64 %sub65, %74, !dbg !2491
  %77 = freeze i64 %ashr, !dbg !2491
  %78 = load ptr, ptr %mem, align 8, !dbg !2491
  %ptradd84 = getelementptr inbounds i8, ptr %78, i64 48, !dbg !2491
  store i64 %77, ptr %ptradd84, align 8, !dbg !2491
  store i64 %77, ptr %page_after, align 8, !dbg !2491
  %79 = load ptr, ptr %mem, align 8, !dbg !2492
  %ptradd85 = getelementptr inbounds i8, ptr %79, i64 64, !dbg !2492
  %80 = load i32, ptr %ptradd85, align 8, !dbg !2492
  %lshrl = lshr i32 %80, 2, !dbg !2492
  %81 = and i32 1, %lshrl, !dbg !2492
  %trunc = trunc i32 %81 to i8, !dbg !2492
  %82 = trunc i8 %trunc to i1, !dbg !2492
  br i1 %82, label %if.then86, label %if.exit97, !dbg !2492

if.then86:                                        ; preds = %checkok83
  %83 = load ptr, ptr %mem, align 8, !dbg !2493
  %84 = load ptr, ptr %83, align 8, !dbg !2493
  %85 = load i64, ptr %after, align 8, !dbg !2493
  %ptradd_any87 = getelementptr i8, ptr %84, i64 %85, !dbg !2493
  store ptr %ptradd_any87, ptr %dst, align 8
  store i8 -86, ptr %val88, align 1
  %86 = load ptr, ptr %mem, align 8, !dbg !2493
  %ptradd89 = getelementptr inbounds i8, ptr %86, i64 24, !dbg !2493
  %87 = load i64, ptr %ptradd89, align 8, !dbg !2493
  %88 = load i64, ptr %after, align 8, !dbg !2493
  %sub90 = sub i64 %87, %88, !dbg !2493
  store i64 %sub90, ptr %len, align 8
  %89 = load ptr, ptr %dst, align 8, !dbg !2495
  %neq91 = icmp ne ptr %89, null, !dbg !2495
  br i1 %neq91, label %assert_ok96, label %assert_fail92, !dbg !2495

assert_fail92:                                    ; preds = %if.then86
  store %"char[]" { ptr @.panic_msg.18, i64 37 }, ptr %indirectarg93, align 8
  store %"char[]" { ptr @.file.15, i64 6 }, ptr %indirectarg94, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg95, align 8
  %90 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %90(ptr align 8 %indirectarg93, ptr align 8 %indirectarg94, ptr align 8 %indirectarg95, i32 409) #6, !dbg !2495
  unreachable, !dbg !2495

assert_ok96:                                      ; preds = %if.then86
  %91 = load ptr, ptr %dst, align 8, !dbg !2498
  %92 = load i8, ptr %val88, align 1, !dbg !2498
  %93 = load i64, ptr %len, align 8, !dbg !2498
  call void @llvm.memset.p0.i64(ptr %91, i8 %92, i64 %93, i1 false), !dbg !2498
  br label %if.exit97, !dbg !2498

if.exit97:                                        ; preds = %assert_ok96, %checkok83
  %94 = load ptr, ptr %mem, align 8, !dbg !2499
  %ptradd98 = getelementptr inbounds i8, ptr %94, i64 64, !dbg !2499
  %95 = load i32, ptr %ptradd98, align 8, !dbg !2499
  %96 = and i32 1, %95, !dbg !2499
  %trunc99 = trunc i32 %96 to i8, !dbg !2499
  %97 = trunc i8 %trunc99 to i1, !dbg !2499
  br i1 %97, label %or.phi104, label %or.rhs100, !dbg !2499

or.rhs100:                                        ; preds = %if.exit97
  %98 = load ptr, ptr %mem, align 8, !dbg !2499
  %ptradd101 = getelementptr inbounds i8, ptr %98, i64 64, !dbg !2499
  %99 = load i32, ptr %ptradd101, align 8, !dbg !2499
  %lshrl102 = lshr i32 %99, 1, !dbg !2499
  %100 = and i32 1, %lshrl102, !dbg !2499
  %trunc103 = trunc i32 %100 to i8, !dbg !2499
  %101 = trunc i8 %trunc103 to i1, !dbg !2499
  br label %or.phi104, !dbg !2499

or.phi104:                                        ; preds = %or.rhs100, %if.exit97
  %val105 = phi i1 [ true, %if.exit97 ], [ %101, %or.rhs100 ], !dbg !2499
  br i1 %val105, label %and.rhs106, label %and.phi108, !dbg !2499

and.rhs106:                                       ; preds = %or.phi104
  %102 = load i64, ptr %page_after, align 8, !dbg !2499
  %103 = load i64, ptr %last_page, align 8, !dbg !2499
  %lt107 = icmp ult i64 %102, %103, !dbg !2499
  br label %and.phi108, !dbg !2499

and.phi108:                                       ; preds = %and.rhs106, %or.phi104
  %val109 = phi i1 [ false, %or.phi104 ], [ %lt107, %and.rhs106 ], !dbg !2499
  br i1 %val109, label %if.then110, label %if.exit215, !dbg !2499

if.then110:                                       ; preds = %and.phi108
    #dbg_declare(ptr %start, !2500, !DIExpression(), !2502)
  %104 = load i64, ptr %page_after, align 8, !dbg !2502
  %105 = load i64, ptr %shift, align 8, !dbg !2502
  %shift_exceeds111 = icmp uge i64 %105, 64, !dbg !2502
  %106 = call i1 @llvm.expect.i1(i1 %shift_exceeds111, i1 false), !dbg !2502
  br i1 %106, label %panic112, label %checkok120, !dbg !2502

checkok120:                                       ; preds = %if.then110
  %shl = shl i64 %104, %105, !dbg !2502
  %107 = freeze i64 %shl, !dbg !2502
  store i64 %107, ptr %start, align 8, !dbg !2502
    #dbg_declare(ptr %len121, !2503, !DIExpression(), !2504)
  %108 = load i64, ptr %last_page, align 8, !dbg !2504
  %109 = load i64, ptr %page_after, align 8, !dbg !2504
  %sub122 = sub i64 %108, %109, !dbg !2504
  %110 = load i64, ptr %shift, align 8, !dbg !2504
  %shift_exceeds123 = icmp uge i64 %110, 64, !dbg !2504
  %111 = call i1 @llvm.expect.i1(i1 %shift_exceeds123, i1 false), !dbg !2504
  br i1 %111, label %panic124, label %checkok132, !dbg !2504

checkok132:                                       ; preds = %checkok120
  %shl133 = shl i64 %sub122, %110, !dbg !2504
  %112 = freeze i64 %shl133, !dbg !2504
  store i64 %112, ptr %len121, align 8, !dbg !2504
  %113 = load ptr, ptr %mem, align 8, !dbg !2505
  %ptradd134 = getelementptr inbounds i8, ptr %113, i64 64, !dbg !2505
  %114 = load i32, ptr %ptradd134, align 8, !dbg !2505
  %115 = and i32 1, %114, !dbg !2505
  %trunc135 = trunc i32 %115 to i8, !dbg !2505
  %116 = trunc i8 %trunc135 to i1, !dbg !2505
  br i1 %116, label %if.then136, label %if.exit167, !dbg !2505

if.then136:                                       ; preds = %checkok132
    #dbg_declare(ptr %self137, !2506, !DIExpression(), !2505)
  %117 = load ptr, ptr %mem, align 8, !dbg !2505
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %self137, ptr align 8 %117, i32 24, i1 false), !dbg !2505
  %118 = load i64, ptr %start, align 8, !dbg !2505
  %119 = load i64, ptr %len121, align 8, !dbg !2505
  %120 = load ptr, ptr %self137, align 8, !dbg !2507
  %ptradd_any138 = getelementptr i8, ptr %120, i64 %118, !dbg !2507
  %121 = call i8 @std.core.mem.ptr_is_page_aligned(ptr %ptradd_any138) #7, !dbg !2505
  %122 = trunc i8 %121 to i1, !dbg !2505
  br i1 %122, label %assert_ok143, label %assert_fail139, !dbg !2505

assert_fail139:                                   ; preds = %if.then136
  store %"char[]" { ptr @.panic_msg.147, i64 101 }, ptr %indirectarg140, align 8
  store %"char[]" { ptr @.file.141, i64 7 }, ptr %indirectarg141, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg142, align 8
  %123 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %123(ptr align 8 %indirectarg140, ptr align 8 %indirectarg141, ptr align 8 %indirectarg142, i32 248) #6, !dbg !2505
  unreachable, !dbg !2505

assert_ok143:                                     ; preds = %if.then136
  %124 = load ptr, ptr %self137, align 8, !dbg !2508
  %add144 = add i64 %118, %119, !dbg !2508
  %ptradd_any145 = getelementptr i8, ptr %124, i64 %add144, !dbg !2508
  %125 = call i8 @std.core.mem.ptr_is_page_aligned(ptr %ptradd_any145) #7, !dbg !2505
  %126 = trunc i8 %125 to i1, !dbg !2505
  br i1 %126, label %assert_ok150, label %assert_fail146, !dbg !2505

assert_fail146:                                   ; preds = %assert_ok143
  store %"char[]" { ptr @.panic_msg.148, i64 105 }, ptr %indirectarg147, align 8
  store %"char[]" { ptr @.file.141, i64 7 }, ptr %indirectarg148, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg149, align 8
  %127 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %127(ptr align 8 %indirectarg147, ptr align 8 %indirectarg148, ptr align 8 %indirectarg149, i32 248) #6, !dbg !2505
  unreachable, !dbg !2505

assert_ok150:                                     ; preds = %assert_ok143
  %ptradd151 = getelementptr inbounds i8, ptr %self137, i64 8, !dbg !2509
  %128 = load i64, ptr %ptradd151, align 8, !dbg !2509
  %lt152 = icmp ult i64 %118, %128, !dbg !2505
  br i1 %lt152, label %assert_ok157, label %assert_fail153, !dbg !2505

assert_fail153:                                   ; preds = %assert_ok150
  store %"char[]" { ptr @.panic_msg.149, i64 62 }, ptr %indirectarg154, align 8
  store %"char[]" { ptr @.file.141, i64 7 }, ptr %indirectarg155, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg156, align 8
  %129 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %129(ptr align 8 %indirectarg154, ptr align 8 %indirectarg155, ptr align 8 %indirectarg156, i32 248) #6, !dbg !2505
  unreachable, !dbg !2505

assert_ok157:                                     ; preds = %assert_ok150
  %add158 = add i64 %118, %119, !dbg !2510
  %ptradd159 = getelementptr inbounds i8, ptr %self137, i64 8, !dbg !2510
  %130 = load i64, ptr %ptradd159, align 8, !dbg !2510
  %lt160 = icmp ult i64 %add158, %130, !dbg !2505
  br i1 %lt160, label %assert_ok165, label %assert_fail161, !dbg !2505

assert_fail161:                                   ; preds = %assert_ok157
  store %"char[]" { ptr @.panic_msg.154, i64 68 }, ptr %indirectarg162, align 8
  store %"char[]" { ptr @.file.141, i64 7 }, ptr %indirectarg163, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg164, align 8
  %131 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %131(ptr align 8 %indirectarg162, ptr align 8 %indirectarg163, ptr align 8 %indirectarg164, i32 248) #6, !dbg !2505
  unreachable, !dbg !2505

assert_ok165:                                     ; preds = %assert_ok157
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg166, ptr align 8 %117, i32 24, i1 false)
  %132 = call i64 @std.core.mem.vm.VirtualMemory.decommit(ptr align 8 %indirectarg166, i64 %118, i64 %119, i8 zeroext 0), !dbg !2505
  br label %if.exit167, !dbg !2505

if.exit167:                                       ; preds = %assert_ok165, %checkok132
  %133 = load ptr, ptr %mem, align 8, !dbg !2511
  %ptradd168 = getelementptr inbounds i8, ptr %133, i64 64, !dbg !2511
  %134 = load i32, ptr %ptradd168, align 8, !dbg !2511
  %lshrl169 = lshr i32 %134, 1, !dbg !2511
  %135 = and i32 1, %lshrl169, !dbg !2511
  %trunc170 = trunc i32 %135 to i8, !dbg !2511
  %136 = trunc i8 %trunc170 to i1, !dbg !2511
  br i1 %136, label %if.then171, label %if.exit214, !dbg !2511

if.then171:                                       ; preds = %if.exit167
  %137 = load ptr, ptr %mem, align 8, !dbg !2511
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %self172, ptr align 8 %137, i32 24, i1 false)
  %138 = load i64, ptr %start, align 8
  store i64 %138, ptr %offset, align 8
  %139 = load i64, ptr %len121, align 8
  store i64 %139, ptr %len173, align 8
  store i32 0, ptr %access, align 4
  %140 = load ptr, ptr %self172, align 8, !dbg !2512
  %141 = load i64, ptr %offset, align 8, !dbg !2512
  %ptradd_any174 = getelementptr i8, ptr %140, i64 %141, !dbg !2512
  %142 = call i8 @std.core.mem.ptr_is_page_aligned(ptr %ptradd_any174) #7, !dbg !2515
  %143 = trunc i8 %142 to i1, !dbg !2515
  br i1 %143, label %assert_ok179, label %assert_fail175, !dbg !2515

assert_fail175:                                   ; preds = %if.then171
  store %"char[]" { ptr @.panic_msg.147, i64 101 }, ptr %indirectarg176, align 8
  store %"char[]" { ptr @.file.141, i64 7 }, ptr %indirectarg177, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg178, align 8
  %144 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %144(ptr align 8 %indirectarg176, ptr align 8 %indirectarg177, ptr align 8 %indirectarg178, i32 249) #6, !dbg !2515
  unreachable, !dbg !2515

assert_ok179:                                     ; preds = %if.then171
  %145 = load ptr, ptr %self172, align 8, !dbg !2516
  %146 = load i64, ptr %offset, align 8, !dbg !2516
  %147 = load i64, ptr %len173, align 8, !dbg !2516
  %add180 = add i64 %146, %147, !dbg !2516
  %ptradd_any181 = getelementptr i8, ptr %145, i64 %add180, !dbg !2516
  %148 = call i8 @std.core.mem.ptr_is_page_aligned(ptr %ptradd_any181) #7, !dbg !2515
  %149 = trunc i8 %148 to i1, !dbg !2515
  br i1 %149, label %assert_ok186, label %assert_fail182, !dbg !2515

assert_fail182:                                   ; preds = %assert_ok179
  store %"char[]" { ptr @.panic_msg.148, i64 105 }, ptr %indirectarg183, align 8
  store %"char[]" { ptr @.file.141, i64 7 }, ptr %indirectarg184, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg185, align 8
  %150 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %150(ptr align 8 %indirectarg183, ptr align 8 %indirectarg184, ptr align 8 %indirectarg185, i32 249) #6, !dbg !2515
  unreachable, !dbg !2515

assert_ok186:                                     ; preds = %assert_ok179
  %151 = load i64, ptr %offset, align 8, !dbg !2517
  %ptradd187 = getelementptr inbounds i8, ptr %self172, i64 8, !dbg !2517
  %152 = load i64, ptr %ptradd187, align 8, !dbg !2517
  %lt188 = icmp ult i64 %151, %152, !dbg !2515
  br i1 %lt188, label %assert_ok193, label %assert_fail189, !dbg !2515

assert_fail189:                                   ; preds = %assert_ok186
  store %"char[]" { ptr @.panic_msg.149, i64 62 }, ptr %indirectarg190, align 8
  store %"char[]" { ptr @.file.141, i64 7 }, ptr %indirectarg191, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg192, align 8
  %153 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %153(ptr align 8 %indirectarg190, ptr align 8 %indirectarg191, ptr align 8 %indirectarg192, i32 249) #6, !dbg !2515
  unreachable, !dbg !2515

assert_ok193:                                     ; preds = %assert_ok186
  %154 = load i64, ptr %offset, align 8, !dbg !2518
  %155 = load i64, ptr %len173, align 8, !dbg !2518
  %add194 = add i64 %154, %155, !dbg !2518
  %ptradd195 = getelementptr inbounds i8, ptr %self172, i64 8, !dbg !2518
  %156 = load i64, ptr %ptradd195, align 8, !dbg !2518
  %lt196 = icmp ult i64 %add194, %156, !dbg !2515
  br i1 %lt196, label %assert_ok201, label %assert_fail197, !dbg !2515

assert_fail197:                                   ; preds = %assert_ok193
  store %"char[]" { ptr @.panic_msg.154, i64 68 }, ptr %indirectarg198, align 8
  store %"char[]" { ptr @.file.141, i64 7 }, ptr %indirectarg199, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg200, align 8
  %157 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %157(ptr align 8 %indirectarg198, ptr align 8 %indirectarg199, ptr align 8 %indirectarg200, i32 249) #6, !dbg !2515
  unreachable, !dbg !2515

assert_ok201:                                     ; preds = %assert_ok193
  %158 = load ptr, ptr %self172, align 8, !dbg !2519
  %159 = load i64, ptr %offset, align 8, !dbg !2519
  %ptradd_any202 = getelementptr i8, ptr %158, i64 %159, !dbg !2519
  %160 = load i64, ptr %len173, align 8, !dbg !2519
  %161 = load i32, ptr %access, align 4, !dbg !2519
  %162 = call i8 @std.core.mem.ptr_is_page_aligned(ptr %ptradd_any202) #7, !dbg !2519
  %163 = trunc i8 %162 to i1, !dbg !2519
  br i1 %163, label %assert_ok207, label %assert_fail203, !dbg !2519

assert_fail203:                                   ; preds = %assert_ok201
  store %"char[]" { ptr @.panic_msg.151, i64 88 }, ptr %indirectarg204, align 8
  store %"char[]" { ptr @.file.152, i64 9 }, ptr %indirectarg205, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg206, align 8
  %164 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %164(ptr align 8 %indirectarg204, ptr align 8 %indirectarg205, ptr align 8 %indirectarg206, i32 265) #6, !dbg !2519
  unreachable, !dbg !2519

assert_ok207:                                     ; preds = %assert_ok201
  %ptradd_any208 = getelementptr i8, ptr %ptradd_any202, i64 %160, !dbg !2520
  %165 = call i8 @std.core.mem.ptr_is_page_aligned(ptr %ptradd_any208) #7, !dbg !2519
  %166 = trunc i8 %165 to i1, !dbg !2519
  br i1 %166, label %assert_ok213, label %assert_fail209, !dbg !2519

assert_fail209:                                   ; preds = %assert_ok207
  store %"char[]" { ptr @.panic_msg.153, i64 91 }, ptr %indirectarg210, align 8
  store %"char[]" { ptr @.file.152, i64 9 }, ptr %indirectarg211, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg212, align 8
  %167 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %167(ptr align 8 %indirectarg210, ptr align 8 %indirectarg211, ptr align 8 %indirectarg212, i32 265) #6, !dbg !2519
  unreachable, !dbg !2519

assert_ok213:                                     ; preds = %assert_ok207
  %168 = call i64 @std.core.mem.vm.protect(ptr %ptradd_any202, i64 %160, i32 %161), !dbg !2519
  %not_err = icmp eq i64 %168, 0, !dbg !2519
  %169 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !2519
  br i1 %169, label %after_check, label %expr_block.exit, !dbg !2519

after_check:                                      ; preds = %assert_ok213
  br label %expr_block.exit, !dbg !2519

expr_block.exit:                                  ; preds = %assert_ok213, %after_check
  br label %if.exit214, !dbg !2511

if.exit214:                                       ; preds = %expr_block.exit, %if.exit167
  br label %if.exit215, !dbg !2511

if.exit215:                                       ; preds = %if.exit214, %and.phi108
  %170 = load ptr, ptr %mem, align 8, !dbg !2521
  %ptradd216 = getelementptr inbounds i8, ptr %170, i64 24, !dbg !2521
  %171 = load i64, ptr %after, align 8, !dbg !2521
  store i64 %171, ptr %ptradd216, align 8, !dbg !2521
  br label %if.exit397, !dbg !2521

if.else:                                          ; preds = %if.then56
    #dbg_declare(ptr %allocated, !2522, !DIExpression(), !2524)
  %172 = load ptr, ptr %self, align 8, !dbg !2524
  %ptradd217 = getelementptr inbounds i8, ptr %172, i64 24, !dbg !2524
  %173 = load i64, ptr %ptradd217, align 8, !dbg !2524
  %174 = load i64, ptr %size, align 8, !dbg !2524
  %add218 = add i64 %173, %174, !dbg !2524
  %175 = load i64, ptr %old_size, align 8, !dbg !2524
  %sub219 = sub i64 %add218, %175, !dbg !2524
  store i64 %sub219, ptr %allocated, align 8, !dbg !2524
  %176 = load i64, ptr %allocated, align 8, !dbg !2525
  %177 = load ptr, ptr %self, align 8, !dbg !2525
  %ptradd220 = getelementptr inbounds i8, ptr %177, i64 8, !dbg !2525
  %178 = load i64, ptr %ptradd220, align 8, !dbg !2525
  %gt221 = icmp ugt i64 %176, %178, !dbg !2525
  br i1 %gt221, label %if.then222, label %if.exit223, !dbg !2525

if.then222:                                       ; preds = %if.else
  ret i64 ptrtoint (ptr @std.core.mem.OUT_OF_MEMORY to i64), !dbg !2525

if.exit223:                                       ; preds = %if.else
  %179 = load ptr, ptr %self, align 8
  store ptr %179, ptr %mem224, align 8
  %180 = load i64, ptr %allocated, align 8
  store i64 %180, ptr %after225, align 8
    #dbg_declare(ptr %shift226, !2526, !DIExpression(), !2528)
  %181 = load ptr, ptr %mem224, align 8, !dbg !2528
  %ptradd227 = getelementptr inbounds i8, ptr %181, i64 40, !dbg !2528
  %182 = load i64, ptr %ptradd227, align 8, !dbg !2528
  store i64 %182, ptr %shift226, align 8, !dbg !2528
    #dbg_declare(ptr %page_after228, !2530, !DIExpression(), !2531)
  %183 = load i64, ptr %after225, align 8, !dbg !2531
  %184 = load ptr, ptr %mem224, align 8, !dbg !2531
  %ptradd229 = getelementptr inbounds i8, ptr %184, i64 32, !dbg !2531
  %185 = load i64, ptr %ptradd229, align 8, !dbg !2531
  %add230 = add i64 %183, %185, !dbg !2531
  %sub231 = sub i64 %add230, 1, !dbg !2531
  %186 = load i64, ptr %shift226, align 8, !dbg !2531
  %shift_underflow232 = icmp slt i64 %186, 0, !dbg !2531
  %187 = call i1 @llvm.expect.i1(i1 %shift_underflow232, i1 false), !dbg !2531
  br i1 %187, label %panic233, label %checkok241, !dbg !2531

checkok241:                                       ; preds = %if.exit223
  %shift_exceeds242 = icmp sge i64 %186, 64, !dbg !2531
  %188 = call i1 @llvm.expect.i1(i1 %shift_exceeds242, i1 false), !dbg !2531
  br i1 %188, label %panic243, label %checkok251, !dbg !2531

checkok251:                                       ; preds = %checkok241
  %ashr252 = ashr i64 %sub231, %186, !dbg !2531
  %189 = freeze i64 %ashr252, !dbg !2531
  store i64 %189, ptr %page_after228, align 8, !dbg !2531
    #dbg_declare(ptr %last_page253, !2532, !DIExpression(), !2533)
  %190 = load ptr, ptr %mem224, align 8, !dbg !2533
  %ptradd254 = getelementptr inbounds i8, ptr %190, i64 48, !dbg !2533
  %191 = load i64, ptr %ptradd254, align 8, !dbg !2533
  store i64 %191, ptr %last_page253, align 8, !dbg !2533
    #dbg_declare(ptr %over_high_water, !2534, !DIExpression(), !2535)
  %192 = load ptr, ptr %mem224, align 8, !dbg !2535
  %ptradd255 = getelementptr inbounds i8, ptr %192, i64 56, !dbg !2535
  %193 = load i64, ptr %ptradd255, align 8, !dbg !2535
  %194 = load i64, ptr %after225, align 8, !dbg !2535
  %lt256 = icmp ult i64 %193, %194, !dbg !2535
  %195 = zext i1 %lt256 to i8, !dbg !2535
  store i8 %195, ptr %over_high_water, align 1, !dbg !2535
  %196 = load i64, ptr %page_after228, align 8, !dbg !2536
  %197 = load i64, ptr %last_page253, align 8, !dbg !2536
  %gt257 = icmp ugt i64 %196, %197, !dbg !2536
  br i1 %gt257, label %if.then258, label %if.exit390, !dbg !2536

if.then258:                                       ; preds = %checkok251
    #dbg_declare(ptr %page_start, !2537, !DIExpression(), !2539)
  %198 = load i64, ptr %last_page253, align 8, !dbg !2539
  %199 = load i64, ptr %shift226, align 8, !dbg !2539
  %shift_exceeds259 = icmp uge i64 %199, 64, !dbg !2539
  %200 = call i1 @llvm.expect.i1(i1 %shift_exceeds259, i1 false), !dbg !2539
  br i1 %200, label %panic260, label %checkok268, !dbg !2539

checkok268:                                       ; preds = %if.then258
  %shl269 = shl i64 %198, %199, !dbg !2539
  %201 = freeze i64 %shl269, !dbg !2539
  store i64 %201, ptr %page_start, align 8, !dbg !2539
    #dbg_declare(ptr %page_len, !2540, !DIExpression(), !2541)
  %202 = load i64, ptr %page_after228, align 8, !dbg !2541
  %203 = load i64, ptr %last_page253, align 8, !dbg !2541
  %sub270 = sub i64 %202, %203, !dbg !2541
  %204 = load i64, ptr %shift226, align 8, !dbg !2541
  %shift_exceeds271 = icmp uge i64 %204, 64, !dbg !2541
  %205 = call i1 @llvm.expect.i1(i1 %shift_exceeds271, i1 false), !dbg !2541
  br i1 %205, label %panic272, label %checkok280, !dbg !2541

checkok280:                                       ; preds = %checkok268
  %shl281 = shl i64 %sub270, %204, !dbg !2541
  %206 = freeze i64 %shl281, !dbg !2541
  store i64 %206, ptr %page_len, align 8, !dbg !2541
  %207 = load ptr, ptr %mem224, align 8, !dbg !2542
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %self283, ptr align 8 %207, i32 24, i1 false)
  %208 = load i64, ptr %page_start, align 8
  store i64 %208, ptr %offset284, align 8
  %209 = load i64, ptr %page_len, align 8
  store i64 %209, ptr %len285, align 8
  %210 = load ptr, ptr %self283, align 8, !dbg !2543
  %211 = load i64, ptr %offset284, align 8, !dbg !2543
  %ptradd_any286 = getelementptr i8, ptr %210, i64 %211, !dbg !2543
  %212 = call i8 @std.core.mem.ptr_is_page_aligned(ptr %ptradd_any286) #7, !dbg !2546
  %213 = trunc i8 %212 to i1, !dbg !2546
  br i1 %213, label %assert_ok291, label %assert_fail287, !dbg !2546

assert_fail287:                                   ; preds = %checkok280
  store %"char[]" { ptr @.panic_msg.147, i64 101 }, ptr %indirectarg288, align 8
  store %"char[]" { ptr @.file.141, i64 7 }, ptr %indirectarg289, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg290, align 8
  %214 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %214(ptr align 8 %indirectarg288, ptr align 8 %indirectarg289, ptr align 8 %indirectarg290, i32 217) #6, !dbg !2546
  unreachable, !dbg !2546

assert_ok291:                                     ; preds = %checkok280
  %215 = load ptr, ptr %self283, align 8, !dbg !2547
  %216 = load i64, ptr %offset284, align 8, !dbg !2547
  %217 = load i64, ptr %len285, align 8, !dbg !2547
  %add292 = add i64 %216, %217, !dbg !2547
  %ptradd_any293 = getelementptr i8, ptr %215, i64 %add292, !dbg !2547
  %218 = call i8 @std.core.mem.ptr_is_page_aligned(ptr %ptradd_any293) #7, !dbg !2546
  %219 = trunc i8 %218 to i1, !dbg !2546
  br i1 %219, label %assert_ok298, label %assert_fail294, !dbg !2546

assert_fail294:                                   ; preds = %assert_ok291
  store %"char[]" { ptr @.panic_msg.148, i64 105 }, ptr %indirectarg295, align 8
  store %"char[]" { ptr @.file.141, i64 7 }, ptr %indirectarg296, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg297, align 8
  %220 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %220(ptr align 8 %indirectarg295, ptr align 8 %indirectarg296, ptr align 8 %indirectarg297, i32 217) #6, !dbg !2546
  unreachable, !dbg !2546

assert_ok298:                                     ; preds = %assert_ok291
  %221 = load i64, ptr %offset284, align 8, !dbg !2548
  %ptradd299 = getelementptr inbounds i8, ptr %self283, i64 8, !dbg !2548
  %222 = load i64, ptr %ptradd299, align 8, !dbg !2548
  %lt300 = icmp ult i64 %221, %222, !dbg !2546
  br i1 %lt300, label %assert_ok305, label %assert_fail301, !dbg !2546

assert_fail301:                                   ; preds = %assert_ok298
  store %"char[]" { ptr @.panic_msg.149, i64 62 }, ptr %indirectarg302, align 8
  store %"char[]" { ptr @.file.141, i64 7 }, ptr %indirectarg303, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg304, align 8
  %223 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %223(ptr align 8 %indirectarg302, ptr align 8 %indirectarg303, ptr align 8 %indirectarg304, i32 217) #6, !dbg !2546
  unreachable, !dbg !2546

assert_ok305:                                     ; preds = %assert_ok298
  %224 = load i64, ptr %offset284, align 8, !dbg !2549
  %225 = load i64, ptr %len285, align 8, !dbg !2549
  %add306 = add i64 %224, %225, !dbg !2549
  %ptradd307 = getelementptr inbounds i8, ptr %self283, i64 8, !dbg !2549
  %226 = load i64, ptr %ptradd307, align 8, !dbg !2549
  %le308 = icmp ule i64 %add306, %226, !dbg !2546
  br i1 %le308, label %assert_ok313, label %assert_fail309, !dbg !2546

assert_fail309:                                   ; preds = %assert_ok305
  store %"char[]" { ptr @.panic_msg.150, i64 69 }, ptr %indirectarg310, align 8
  store %"char[]" { ptr @.file.141, i64 7 }, ptr %indirectarg311, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg312, align 8
  %227 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %227(ptr align 8 %indirectarg310, ptr align 8 %indirectarg311, ptr align 8 %indirectarg312, i32 217) #6, !dbg !2546
  unreachable, !dbg !2546

assert_ok313:                                     ; preds = %assert_ok305
  %228 = load ptr, ptr %self283, align 8, !dbg !2550
  %229 = load i64, ptr %offset284, align 8, !dbg !2550
  %ptradd_any314 = getelementptr i8, ptr %228, i64 %229, !dbg !2550
  %230 = load i64, ptr %len285, align 8, !dbg !2550
  %ptradd315 = getelementptr inbounds i8, ptr %self283, i64 16, !dbg !2550
  %231 = load i32, ptr %ptradd315, align 8, !dbg !2550
  %232 = call i8 @std.core.mem.ptr_is_page_aligned(ptr %ptradd_any314) #7, !dbg !2550
  %233 = trunc i8 %232 to i1, !dbg !2550
  br i1 %233, label %assert_ok320, label %assert_fail316, !dbg !2550

assert_fail316:                                   ; preds = %assert_ok313
  store %"char[]" { ptr @.panic_msg.151, i64 88 }, ptr %indirectarg317, align 8
  store %"char[]" { ptr @.file.152, i64 9 }, ptr %indirectarg318, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg319, align 8
  %234 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %234(ptr align 8 %indirectarg317, ptr align 8 %indirectarg318, ptr align 8 %indirectarg319, i32 249) #6, !dbg !2550
  unreachable, !dbg !2550

assert_ok320:                                     ; preds = %assert_ok313
  %ptradd_any321 = getelementptr i8, ptr %ptradd_any314, i64 %230, !dbg !2551
  %235 = call i8 @std.core.mem.ptr_is_page_aligned(ptr %ptradd_any321) #7, !dbg !2550
  %236 = trunc i8 %235 to i1, !dbg !2550
  br i1 %236, label %assert_ok326, label %assert_fail322, !dbg !2550

assert_fail322:                                   ; preds = %assert_ok320
  store %"char[]" { ptr @.panic_msg.153, i64 91 }, ptr %indirectarg323, align 8
  store %"char[]" { ptr @.file.152, i64 9 }, ptr %indirectarg324, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg325, align 8
  %237 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %237(ptr align 8 %indirectarg323, ptr align 8 %indirectarg324, ptr align 8 %indirectarg325, i32 249) #6, !dbg !2550
  unreachable, !dbg !2550

assert_ok326:                                     ; preds = %assert_ok320
  %238 = call i64 @std.core.mem.vm.commit(ptr %ptradd_any314, i64 %230, i32 %231), !dbg !2550
  %not_err327 = icmp eq i64 %238, 0, !dbg !2550
  %239 = call i1 @llvm.expect.i1(i1 %not_err327, i1 true), !dbg !2550
  br i1 %239, label %after_check328, label %assign_optional, !dbg !2550

assign_optional:                                  ; preds = %assert_ok326
  store i64 %238, ptr %error_var282, align 8, !dbg !2550
  br label %guard_block, !dbg !2550

after_check328:                                   ; preds = %assert_ok326
  br label %expr_block.exit329, !dbg !2550

expr_block.exit329:                               ; preds = %after_check328
  br label %noerr_block, !dbg !2550

guard_block:                                      ; preds = %assign_optional
  %240 = load i64, ptr %error_var282, align 8, !dbg !2550
  store i64 %240, ptr %error_var, align 8, !dbg !2550
  br label %guard_block395, !dbg !2550

noerr_block:                                      ; preds = %expr_block.exit329
  %241 = load ptr, ptr %mem224, align 8, !dbg !2552
  %ptradd330 = getelementptr inbounds i8, ptr %241, i64 64, !dbg !2552
  %242 = load i32, ptr %ptradd330, align 8, !dbg !2552
  %lshrl331 = lshr i32 %242, 1, !dbg !2552
  %243 = and i32 1, %lshrl331, !dbg !2552
  %trunc332 = trunc i32 %243 to i8, !dbg !2552
  %244 = trunc i8 %trunc332 to i1, !dbg !2552
  br i1 %244, label %or.phi334, label %or.rhs333, !dbg !2552

or.rhs333:                                        ; preds = %noerr_block
  %245 = load i8, ptr %over_high_water, align 1, !dbg !2552
  %246 = trunc i8 %245 to i1, !dbg !2552
  br label %or.phi334, !dbg !2552

or.phi334:                                        ; preds = %or.rhs333, %noerr_block
  %val335 = phi i1 [ true, %noerr_block ], [ %246, %or.rhs333 ], !dbg !2552
  br i1 %val335, label %if.then336, label %if.exit388, !dbg !2552

if.then336:                                       ; preds = %or.phi334
  %247 = load ptr, ptr %mem224, align 8, !dbg !2553
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %self338, ptr align 8 %247, i32 24, i1 false)
  %248 = load i64, ptr %page_start, align 8
  store i64 %248, ptr %offset339, align 8
  %249 = load i64, ptr %page_len, align 8
  store i64 %249, ptr %len340, align 8
  store i32 3, ptr %access341, align 4
  %250 = load ptr, ptr %self338, align 8, !dbg !2555
  %251 = load i64, ptr %offset339, align 8, !dbg !2555
  %ptradd_any342 = getelementptr i8, ptr %250, i64 %251, !dbg !2555
  %252 = call i8 @std.core.mem.ptr_is_page_aligned(ptr %ptradd_any342) #7, !dbg !2558
  %253 = trunc i8 %252 to i1, !dbg !2558
  br i1 %253, label %assert_ok347, label %assert_fail343, !dbg !2558

assert_fail343:                                   ; preds = %if.then336
  store %"char[]" { ptr @.panic_msg.147, i64 101 }, ptr %indirectarg344, align 8
  store %"char[]" { ptr @.file.141, i64 7 }, ptr %indirectarg345, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg346, align 8
  %254 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %254(ptr align 8 %indirectarg344, ptr align 8 %indirectarg345, ptr align 8 %indirectarg346, i32 220) #6, !dbg !2558
  unreachable, !dbg !2558

assert_ok347:                                     ; preds = %if.then336
  %255 = load ptr, ptr %self338, align 8, !dbg !2559
  %256 = load i64, ptr %offset339, align 8, !dbg !2559
  %257 = load i64, ptr %len340, align 8, !dbg !2559
  %add348 = add i64 %256, %257, !dbg !2559
  %ptradd_any349 = getelementptr i8, ptr %255, i64 %add348, !dbg !2559
  %258 = call i8 @std.core.mem.ptr_is_page_aligned(ptr %ptradd_any349) #7, !dbg !2558
  %259 = trunc i8 %258 to i1, !dbg !2558
  br i1 %259, label %assert_ok354, label %assert_fail350, !dbg !2558

assert_fail350:                                   ; preds = %assert_ok347
  store %"char[]" { ptr @.panic_msg.148, i64 105 }, ptr %indirectarg351, align 8
  store %"char[]" { ptr @.file.141, i64 7 }, ptr %indirectarg352, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg353, align 8
  %260 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %260(ptr align 8 %indirectarg351, ptr align 8 %indirectarg352, ptr align 8 %indirectarg353, i32 220) #6, !dbg !2558
  unreachable, !dbg !2558

assert_ok354:                                     ; preds = %assert_ok347
  %261 = load i64, ptr %offset339, align 8, !dbg !2560
  %ptradd355 = getelementptr inbounds i8, ptr %self338, i64 8, !dbg !2560
  %262 = load i64, ptr %ptradd355, align 8, !dbg !2560
  %lt356 = icmp ult i64 %261, %262, !dbg !2558
  br i1 %lt356, label %assert_ok361, label %assert_fail357, !dbg !2558

assert_fail357:                                   ; preds = %assert_ok354
  store %"char[]" { ptr @.panic_msg.149, i64 62 }, ptr %indirectarg358, align 8
  store %"char[]" { ptr @.file.141, i64 7 }, ptr %indirectarg359, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg360, align 8
  %263 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %263(ptr align 8 %indirectarg358, ptr align 8 %indirectarg359, ptr align 8 %indirectarg360, i32 220) #6, !dbg !2558
  unreachable, !dbg !2558

assert_ok361:                                     ; preds = %assert_ok354
  %264 = load i64, ptr %offset339, align 8, !dbg !2561
  %265 = load i64, ptr %len340, align 8, !dbg !2561
  %add362 = add i64 %264, %265, !dbg !2561
  %ptradd363 = getelementptr inbounds i8, ptr %self338, i64 8, !dbg !2561
  %266 = load i64, ptr %ptradd363, align 8, !dbg !2561
  %lt364 = icmp ult i64 %add362, %266, !dbg !2558
  br i1 %lt364, label %assert_ok369, label %assert_fail365, !dbg !2558

assert_fail365:                                   ; preds = %assert_ok361
  store %"char[]" { ptr @.panic_msg.154, i64 68 }, ptr %indirectarg366, align 8
  store %"char[]" { ptr @.file.141, i64 7 }, ptr %indirectarg367, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg368, align 8
  %267 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %267(ptr align 8 %indirectarg366, ptr align 8 %indirectarg367, ptr align 8 %indirectarg368, i32 220) #6, !dbg !2558
  unreachable, !dbg !2558

assert_ok369:                                     ; preds = %assert_ok361
  %268 = load ptr, ptr %self338, align 8, !dbg !2562
  %269 = load i64, ptr %offset339, align 8, !dbg !2562
  %ptradd_any370 = getelementptr i8, ptr %268, i64 %269, !dbg !2562
  %270 = load i64, ptr %len340, align 8, !dbg !2562
  %271 = load i32, ptr %access341, align 4, !dbg !2562
  %272 = call i8 @std.core.mem.ptr_is_page_aligned(ptr %ptradd_any370) #7, !dbg !2562
  %273 = trunc i8 %272 to i1, !dbg !2562
  br i1 %273, label %assert_ok375, label %assert_fail371, !dbg !2562

assert_fail371:                                   ; preds = %assert_ok369
  store %"char[]" { ptr @.panic_msg.151, i64 88 }, ptr %indirectarg372, align 8
  store %"char[]" { ptr @.file.152, i64 9 }, ptr %indirectarg373, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg374, align 8
  %274 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %274(ptr align 8 %indirectarg372, ptr align 8 %indirectarg373, ptr align 8 %indirectarg374, i32 265) #6, !dbg !2562
  unreachable, !dbg !2562

assert_ok375:                                     ; preds = %assert_ok369
  %ptradd_any376 = getelementptr i8, ptr %ptradd_any370, i64 %270, !dbg !2563
  %275 = call i8 @std.core.mem.ptr_is_page_aligned(ptr %ptradd_any376) #7, !dbg !2562
  %276 = trunc i8 %275 to i1, !dbg !2562
  br i1 %276, label %assert_ok381, label %assert_fail377, !dbg !2562

assert_fail377:                                   ; preds = %assert_ok375
  store %"char[]" { ptr @.panic_msg.153, i64 91 }, ptr %indirectarg378, align 8
  store %"char[]" { ptr @.file.152, i64 9 }, ptr %indirectarg379, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg380, align 8
  %277 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %277(ptr align 8 %indirectarg378, ptr align 8 %indirectarg379, ptr align 8 %indirectarg380, i32 265) #6, !dbg !2562
  unreachable, !dbg !2562

assert_ok381:                                     ; preds = %assert_ok375
  %278 = call i64 @std.core.mem.vm.protect(ptr %ptradd_any370, i64 %270, i32 %271), !dbg !2562
  %not_err382 = icmp eq i64 %278, 0, !dbg !2562
  %279 = call i1 @llvm.expect.i1(i1 %not_err382, i1 true), !dbg !2562
  br i1 %279, label %after_check384, label %assign_optional383, !dbg !2562

assign_optional383:                               ; preds = %assert_ok381
  store i64 %278, ptr %error_var337, align 8, !dbg !2562
  br label %guard_block386, !dbg !2562

after_check384:                                   ; preds = %assert_ok381
  br label %expr_block.exit385, !dbg !2562

expr_block.exit385:                               ; preds = %after_check384
  br label %noerr_block387, !dbg !2562

guard_block386:                                   ; preds = %assign_optional383
  %280 = load i64, ptr %error_var337, align 8, !dbg !2562
  store i64 %280, ptr %error_var, align 8, !dbg !2562
  br label %guard_block395, !dbg !2562

noerr_block387:                                   ; preds = %expr_block.exit385
  br label %if.exit388, !dbg !2562

if.exit388:                                       ; preds = %noerr_block387, %or.phi334
  %281 = load ptr, ptr %mem224, align 8, !dbg !2564
  %ptradd389 = getelementptr inbounds i8, ptr %281, i64 48, !dbg !2564
  %282 = load i64, ptr %page_after228, align 8, !dbg !2564
  store i64 %282, ptr %ptradd389, align 8, !dbg !2564
  br label %if.exit390, !dbg !2564

if.exit390:                                       ; preds = %if.exit388, %checkok251
  %283 = load ptr, ptr %mem224, align 8, !dbg !2565
  %ptradd391 = getelementptr inbounds i8, ptr %283, i64 24, !dbg !2565
  %284 = load i64, ptr %after225, align 8, !dbg !2565
  store i64 %284, ptr %ptradd391, align 8, !dbg !2565
  %285 = load i8, ptr %over_high_water, align 1, !dbg !2566
  %286 = trunc i8 %285 to i1, !dbg !2566
  br i1 %286, label %if.then392, label %if.exit394, !dbg !2566

if.then392:                                       ; preds = %if.exit390
  %287 = load ptr, ptr %mem224, align 8, !dbg !2566
  %ptradd393 = getelementptr inbounds i8, ptr %287, i64 56, !dbg !2566
  %288 = load i64, ptr %after225, align 8, !dbg !2566
  store i64 %288, ptr %ptradd393, align 8, !dbg !2566
  br label %if.exit394, !dbg !2566

if.exit394:                                       ; preds = %if.then392, %if.exit390
  br label %noerr_block396, !dbg !2566

guard_block395:                                   ; preds = %guard_block386, %guard_block
  %289 = load i64, ptr %error_var, align 8, !dbg !2566
  ret i64 %289, !dbg !2566

noerr_block396:                                   ; preds = %if.exit394
  br label %if.exit397, !dbg !2566

if.exit397:                                       ; preds = %noerr_block396, %if.exit215
  %290 = load ptr, ptr %header, align 8, !dbg !2567
  %291 = load i64, ptr %size, align 8, !dbg !2567
  store i64 %291, ptr %290, align 8, !dbg !2567
  %292 = load ptr, ptr %old_pointer, align 8, !dbg !2568
  store ptr %292, ptr %0, align 8, !dbg !2568
  ret i64 0, !dbg !2568

if.exit399:                                       ; preds = %and.phi54
  %293 = load i64, ptr %old_size, align 8, !dbg !2569
  %294 = load i64, ptr %size, align 8, !dbg !2569
  %gt400 = icmp ugt i64 %293, %294, !dbg !2569
  br i1 %gt400, label %if.then401, label %if.exit403, !dbg !2569

if.then401:                                       ; preds = %if.exit399
  %295 = load ptr, ptr %header, align 8, !dbg !2570
  %296 = load i64, ptr %size, align 8, !dbg !2570
  store i64 %296, ptr %295, align 8, !dbg !2570
  %297 = load ptr, ptr %old_pointer, align 8, !dbg !2572
  store ptr %297, ptr %0, align 8, !dbg !2572
  ret i64 0, !dbg !2572

if.exit403:                                       ; preds = %if.exit399
    #dbg_declare(ptr %mem404, !2573, !DIExpression(), !2574)
  %298 = load ptr, ptr %self, align 8, !dbg !2574
  %299 = load i64, ptr %size, align 8, !dbg !2574
  %300 = load i64, ptr %alignment, align 8, !dbg !2574
  %i2nb406 = icmp eq i64 %300, 0, !dbg !2575
  br i1 %i2nb406, label %or.phi416, label %or.rhs407, !dbg !2575

or.rhs407:                                        ; preds = %if.exit403
  store i64 %300, ptr %x408, align 8
  %301 = load i64, ptr %x408, align 8, !dbg !2576
  %neq409 = icmp ne i64 0, %301, !dbg !2576
  br i1 %neq409, label %and.rhs410, label %and.phi414, !dbg !2576

and.rhs410:                                       ; preds = %or.rhs407
  %302 = load i64, ptr %x408, align 8, !dbg !2576
  %303 = load i64, ptr %x408, align 8, !dbg !2576
  %sub411 = sub i64 %303, 1, !dbg !2576
  %and412 = and i64 %302, %sub411, !dbg !2576
  %eq413 = icmp eq i64 %and412, 0, !dbg !2576
  br label %and.phi414, !dbg !2576

and.phi414:                                       ; preds = %and.rhs410, %or.rhs407
  %val415 = phi i1 [ false, %or.rhs407 ], [ %eq413, %and.rhs410 ], !dbg !2576
  br label %or.phi416, !dbg !2576

or.phi416:                                        ; preds = %and.phi414, %if.exit403
  %val417 = phi i1 [ true, %if.exit403 ], [ %val415, %and.phi414 ], !dbg !2576
  br i1 %val417, label %assert_ok422, label %assert_fail418, !dbg !2576

assert_fail418:                                   ; preds = %or.phi416
  store %"char[]" { ptr @.panic_msg.11, i64 65 }, ptr %indirectarg419, align 8
  store %"char[]" { ptr @.file.141, i64 7 }, ptr %indirectarg420, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg421, align 8
  %304 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %304(ptr align 8 %indirectarg419, ptr align 8 %indirectarg420, ptr align 8 %indirectarg421, i32 150) #6, !dbg !2574
  unreachable, !dbg !2574

assert_ok422:                                     ; preds = %or.phi416
  %le423 = icmp ule i64 %300, 268435456, !dbg !2574
  br i1 %le423, label %assert_ok428, label %assert_fail424, !dbg !2574

assert_fail424:                                   ; preds = %assert_ok422
  store %"char[]" { ptr @.panic_msg.12, i64 80 }, ptr %indirectarg425, align 8
  store %"char[]" { ptr @.file.141, i64 7 }, ptr %indirectarg426, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg427, align 8
  %305 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %305(ptr align 8 %indirectarg425, ptr align 8 %indirectarg426, ptr align 8 %indirectarg427, i32 150) #6, !dbg !2574
  unreachable, !dbg !2574

assert_ok428:                                     ; preds = %assert_ok422
  %lt429 = icmp ult i64 0, %299, !dbg !2574
  br i1 %lt429, label %assert_ok434, label %assert_fail430, !dbg !2574

assert_fail430:                                   ; preds = %assert_ok428
  store %"char[]" { ptr @.panic_msg.13, i64 29 }, ptr %indirectarg431, align 8
  store %"char[]" { ptr @.file.141, i64 7 }, ptr %indirectarg432, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg433, align 8
  %306 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %306(ptr align 8 %indirectarg431, ptr align 8 %indirectarg432, ptr align 8 %indirectarg433, i32 150) #6, !dbg !2574
  unreachable, !dbg !2574

assert_ok434:                                     ; preds = %assert_ok428
  %307 = call i64 @std.core.mem.allocator.Vmem.acquire(ptr %retparam, ptr %298, i64 %299, i32 0, i64 %300), !dbg !2574
  %not_err435 = icmp eq i64 %307, 0, !dbg !2574
  %308 = call i1 @llvm.expect.i1(i1 %not_err435, i1 true), !dbg !2574
  br i1 %308, label %after_check437, label %assign_optional436, !dbg !2574

assign_optional436:                               ; preds = %assert_ok434
  store i64 %307, ptr %error_var405, align 8, !dbg !2574
  br label %guard_block438, !dbg !2574

after_check437:                                   ; preds = %assert_ok434
  br label %noerr_block439, !dbg !2574

guard_block438:                                   ; preds = %assign_optional436
  %309 = load i64, ptr %error_var405, align 8, !dbg !2574
  ret i64 %309, !dbg !2574

noerr_block439:                                   ; preds = %after_check437
  %310 = load ptr, ptr %retparam, align 8, !dbg !2574
  store ptr %310, ptr %mem404, align 8, !dbg !2574
  %311 = load i64, ptr %size, align 8, !dbg !2578
  %312 = load i64, ptr %old_size, align 8, !dbg !2578
  %gt440 = icmp ugt i64 %311, %312, !dbg !2578
  br i1 %gt440, label %assert_ok445, label %assert_fail441, !dbg !2578

assert_fail441:                                   ; preds = %noerr_block439
  store %"char[]" { ptr @.panic_msg.49, i64 32 }, ptr %indirectarg442, align 8
  store %"char[]" { ptr @.file.141, i64 7 }, ptr %indirectarg443, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg444, align 8
  %313 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %313(ptr align 8 %indirectarg442, ptr align 8 %indirectarg443, ptr align 8 %indirectarg444, i32 151) #6, !dbg !2578
  unreachable, !dbg !2578

assert_ok445:                                     ; preds = %noerr_block439
  %314 = load ptr, ptr %mem404, align 8
  store ptr %314, ptr %dst446, align 8
  %315 = load ptr, ptr %old_pointer, align 8
  store ptr %315, ptr %src, align 8
  %316 = load i64, ptr %old_size, align 8
  store i64 %316, ptr %len447, align 8
  %317 = load ptr, ptr %dst446, align 8, !dbg !2579
  %neq448 = icmp ne ptr %317, null, !dbg !2579
  br i1 %neq448, label %assert_ok453, label %assert_fail449, !dbg !2579

assert_fail449:                                   ; preds = %assert_ok445
  store %"char[]" { ptr @.panic_msg.18, i64 37 }, ptr %indirectarg450, align 8
  store %"char[]" { ptr @.file.15, i64 6 }, ptr %indirectarg451, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg452, align 8
  %318 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %318(ptr align 8 %indirectarg450, ptr align 8 %indirectarg451, ptr align 8 %indirectarg452, i32 357) #6, !dbg !2579
  unreachable, !dbg !2579

assert_ok453:                                     ; preds = %assert_ok445
  %319 = load ptr, ptr %src, align 8, !dbg !2583
  %neq454 = icmp ne ptr %319, null, !dbg !2583
  br i1 %neq454, label %or.phi457, label %or.rhs455, !dbg !2583

or.rhs455:                                        ; preds = %assert_ok453
  %320 = load i64, ptr %len447, align 8, !dbg !2583
  %eq456 = icmp eq i64 0, %320, !dbg !2583
  br label %or.phi457, !dbg !2583

or.phi457:                                        ; preds = %or.rhs455, %assert_ok453
  %val458 = phi i1 [ true, %assert_ok453 ], [ %eq456, %or.rhs455 ], !dbg !2583
  br i1 %val458, label %assert_ok463, label %assert_fail459, !dbg !2583

assert_fail459:                                   ; preds = %or.phi457
  store %"char[]" { ptr @.panic_msg.19, i64 94 }, ptr %indirectarg460, align 8
  store %"char[]" { ptr @.file.141, i64 7 }, ptr %indirectarg461, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg462, align 8
  %321 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %321(ptr align 8 %indirectarg460, ptr align 8 %indirectarg461, ptr align 8 %indirectarg462, i32 152) #6, !dbg !2584
  unreachable, !dbg !2584

assert_ok463:                                     ; preds = %or.phi457
  %322 = load i64, ptr %len447, align 8, !dbg !2585
  %eq464 = icmp eq i64 0, %322, !dbg !2585
  br i1 %eq464, label %or.phi468, label %or.rhs465, !dbg !2585

or.rhs465:                                        ; preds = %assert_ok463
  %323 = load ptr, ptr %dst446, align 8, !dbg !2585
  %324 = load i64, ptr %len447, align 8, !dbg !2585
  %ptradd_any466 = getelementptr i8, ptr %323, i64 %324, !dbg !2585
  %325 = load ptr, ptr %src, align 8, !dbg !2585
  %le467 = icmp ule ptr %ptradd_any466, %325, !dbg !2585
  br label %or.phi468, !dbg !2585

or.phi468:                                        ; preds = %or.rhs465, %assert_ok463
  %val469 = phi i1 [ true, %assert_ok463 ], [ %le467, %or.rhs465 ], !dbg !2585
  br i1 %val469, label %or.phi473, label %or.rhs470, !dbg !2585

or.rhs470:                                        ; preds = %or.phi468
  %326 = load ptr, ptr %src, align 8, !dbg !2585
  %327 = load i64, ptr %len447, align 8, !dbg !2585
  %ptradd_any471 = getelementptr i8, ptr %326, i64 %327, !dbg !2585
  %328 = load ptr, ptr %dst446, align 8, !dbg !2585
  %le472 = icmp ule ptr %ptradd_any471, %328, !dbg !2585
  br label %or.phi473, !dbg !2585

or.phi473:                                        ; preds = %or.rhs470, %or.phi468
  %val474 = phi i1 [ true, %or.phi468 ], [ %le472, %or.rhs470 ], !dbg !2585
  br i1 %val474, label %assert_ok479, label %assert_fail475, !dbg !2585

assert_fail475:                                   ; preds = %or.phi473
  store %"char[]" { ptr @.panic_msg.20, i64 95 }, ptr %indirectarg476, align 8
  store %"char[]" { ptr @.file.141, i64 7 }, ptr %indirectarg477, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg478, align 8
  %329 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %329(ptr align 8 %indirectarg476, ptr align 8 %indirectarg477, ptr align 8 %indirectarg478, i32 152) #6, !dbg !2584
  unreachable, !dbg !2584

assert_ok479:                                     ; preds = %or.phi473
  %330 = load ptr, ptr %dst446, align 8, !dbg !2586
  %331 = load ptr, ptr %src, align 8, !dbg !2586
  %332 = load i64, ptr %len447, align 8, !dbg !2586
  call void @llvm.memcpy.p0.p0.i64(ptr align 16 %330, ptr align 16 %331, i64 %332, i1 false), !dbg !2586
  %333 = load ptr, ptr %mem404, align 8, !dbg !2587
  store ptr %333, ptr %0, align 8, !dbg !2587
  ret i64 0, !dbg !2587

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.141, i64 7 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg2, align 8
  %334 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %334(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 117) #6, !dbg !2459
  unreachable, !dbg !2459

panic66:                                          ; preds = %if.then58
  store i64 %74, ptr %taddr67, align 8
  %335 = insertvalue %any undef, ptr %taddr67, 0
  %336 = insertvalue %any %335, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.146, i64 35 }, ptr %indirectarg68, align 8
  store %"char[]" { ptr @.file.141, i64 7 }, ptr %indirectarg69, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg70, align 8
  store %any %336, ptr %varargslots71, align 16
  %337 = insertvalue %"any[]" undef, ptr %varargslots71, 0
  %"$$temp72" = insertvalue %"any[]" %337, i64 1, 1
  store %"any[]" %"$$temp72", ptr %indirectarg73, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg68, ptr align 8 %indirectarg69, ptr align 8 %indirectarg70, i32 235, ptr align 8 %indirectarg73) #6, !dbg !2491
  unreachable, !dbg !2491

panic75:                                          ; preds = %checkok74
  store i64 %74, ptr %taddr76, align 8
  %338 = insertvalue %any undef, ptr %taddr76, 0
  %339 = insertvalue %any %338, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.146, i64 35 }, ptr %indirectarg77, align 8
  store %"char[]" { ptr @.file.141, i64 7 }, ptr %indirectarg78, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg79, align 8
  store %any %339, ptr %varargslots80, align 16
  %340 = insertvalue %"any[]" undef, ptr %varargslots80, 0
  %"$$temp81" = insertvalue %"any[]" %340, i64 1, 1
  store %"any[]" %"$$temp81", ptr %indirectarg82, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg77, ptr align 8 %indirectarg78, ptr align 8 %indirectarg79, i32 235, ptr align 8 %indirectarg82) #6, !dbg !2491
  unreachable, !dbg !2491

panic112:                                         ; preds = %if.then110
  store i64 %105, ptr %taddr113, align 8
  %341 = insertvalue %any undef, ptr %taddr113, 0
  %342 = insertvalue %any %341, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.146, i64 35 }, ptr %indirectarg114, align 8
  store %"char[]" { ptr @.file.141, i64 7 }, ptr %indirectarg115, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg116, align 8
  store %any %342, ptr %varargslots117, align 16
  %343 = insertvalue %"any[]" undef, ptr %varargslots117, 0
  %"$$temp118" = insertvalue %"any[]" %343, i64 1, 1
  store %"any[]" %"$$temp118", ptr %indirectarg119, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg114, ptr align 8 %indirectarg115, ptr align 8 %indirectarg116, i32 246, ptr align 8 %indirectarg119) #6, !dbg !2502
  unreachable, !dbg !2502

panic124:                                         ; preds = %checkok120
  store i64 %110, ptr %taddr125, align 8
  %344 = insertvalue %any undef, ptr %taddr125, 0
  %345 = insertvalue %any %344, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.146, i64 35 }, ptr %indirectarg126, align 8
  store %"char[]" { ptr @.file.141, i64 7 }, ptr %indirectarg127, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg128, align 8
  store %any %345, ptr %varargslots129, align 16
  %346 = insertvalue %"any[]" undef, ptr %varargslots129, 0
  %"$$temp130" = insertvalue %"any[]" %346, i64 1, 1
  store %"any[]" %"$$temp130", ptr %indirectarg131, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg126, ptr align 8 %indirectarg127, ptr align 8 %indirectarg128, i32 247, ptr align 8 %indirectarg131) #6, !dbg !2504
  unreachable, !dbg !2504

panic233:                                         ; preds = %if.exit223
  store i64 %186, ptr %taddr234, align 8
  %347 = insertvalue %any undef, ptr %taddr234, 0
  %348 = insertvalue %any %347, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.146, i64 35 }, ptr %indirectarg235, align 8
  store %"char[]" { ptr @.file.141, i64 7 }, ptr %indirectarg236, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg237, align 8
  store %any %348, ptr %varargslots238, align 16
  %349 = insertvalue %"any[]" undef, ptr %varargslots238, 0
  %"$$temp239" = insertvalue %"any[]" %349, i64 1, 1
  store %"any[]" %"$$temp239", ptr %indirectarg240, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg235, ptr align 8 %indirectarg236, ptr align 8 %indirectarg237, i32 210, ptr align 8 %indirectarg240) #6, !dbg !2531
  unreachable, !dbg !2531

panic243:                                         ; preds = %checkok241
  store i64 %186, ptr %taddr244, align 8
  %350 = insertvalue %any undef, ptr %taddr244, 0
  %351 = insertvalue %any %350, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.146, i64 35 }, ptr %indirectarg245, align 8
  store %"char[]" { ptr @.file.141, i64 7 }, ptr %indirectarg246, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg247, align 8
  store %any %351, ptr %varargslots248, align 16
  %352 = insertvalue %"any[]" undef, ptr %varargslots248, 0
  %"$$temp249" = insertvalue %"any[]" %352, i64 1, 1
  store %"any[]" %"$$temp249", ptr %indirectarg250, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg245, ptr align 8 %indirectarg246, ptr align 8 %indirectarg247, i32 210, ptr align 8 %indirectarg250) #6, !dbg !2531
  unreachable, !dbg !2531

panic260:                                         ; preds = %if.then258
  store i64 %199, ptr %taddr261, align 8
  %353 = insertvalue %any undef, ptr %taddr261, 0
  %354 = insertvalue %any %353, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.146, i64 35 }, ptr %indirectarg262, align 8
  store %"char[]" { ptr @.file.141, i64 7 }, ptr %indirectarg263, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg264, align 8
  store %any %354, ptr %varargslots265, align 16
  %355 = insertvalue %"any[]" undef, ptr %varargslots265, 0
  %"$$temp266" = insertvalue %"any[]" %355, i64 1, 1
  store %"any[]" %"$$temp266", ptr %indirectarg267, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg262, ptr align 8 %indirectarg263, ptr align 8 %indirectarg264, i32 215, ptr align 8 %indirectarg267) #6, !dbg !2539
  unreachable, !dbg !2539

panic272:                                         ; preds = %checkok268
  store i64 %204, ptr %taddr273, align 8
  %356 = insertvalue %any undef, ptr %taddr273, 0
  %357 = insertvalue %any %356, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.146, i64 35 }, ptr %indirectarg274, align 8
  store %"char[]" { ptr @.file.141, i64 7 }, ptr %indirectarg275, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg276, align 8
  store %any %357, ptr %varargslots277, align 16
  %358 = insertvalue %"any[]" undef, ptr %varargslots277, 0
  %"$$temp278" = insertvalue %"any[]" %358, i64 1, 1
  store %"any[]" %"$$temp278", ptr %indirectarg279, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg274, ptr align 8 %indirectarg275, ptr align 8 %indirectarg276, i32 216, ptr align 8 %indirectarg279) #6, !dbg !2541
  unreachable, !dbg !2541
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.core.mem.allocator.Vmem.release(ptr %0, ptr %1, i8 zeroext %2) #0 comdat !dbg !2588 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %ptr = alloca ptr, align 8
  %.anon = alloca i8, align 1
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg7 = alloca %"char[]", align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg10 = alloca %"any[]", align 8
  %header = alloca ptr, align 8
  %mem = alloca ptr, align 8
  %after = alloca i64, align 8
  %shift = alloca i64, align 8
  %last_page = alloca i64, align 8
  %page_after = alloca i64, align 8
  %taddr = alloca i64, align 8
  %indirectarg21 = alloca %"char[]", align 8
  %indirectarg22 = alloca %"char[]", align 8
  %indirectarg23 = alloca %"char[]", align 8
  %varargslots24 = alloca [1 x %any], align 16
  %indirectarg26 = alloca %"any[]", align 8
  %taddr29 = alloca i64, align 8
  %indirectarg30 = alloca %"char[]", align 8
  %indirectarg31 = alloca %"char[]", align 8
  %indirectarg32 = alloca %"char[]", align 8
  %varargslots33 = alloca [1 x %any], align 16
  %indirectarg35 = alloca %"any[]", align 8
  %dst = alloca ptr, align 8
  %val = alloca i8, align 1
  %len = alloca i64, align 8
  %indirectarg45 = alloca %"char[]", align 8
  %indirectarg46 = alloca %"char[]", align 8
  %indirectarg47 = alloca %"char[]", align 8
  %start = alloca i64, align 8
  %taddr59 = alloca i64, align 8
  %indirectarg60 = alloca %"char[]", align 8
  %indirectarg61 = alloca %"char[]", align 8
  %indirectarg62 = alloca %"char[]", align 8
  %varargslots63 = alloca [1 x %any], align 16
  %indirectarg65 = alloca %"any[]", align 8
  %len67 = alloca i64, align 8
  %taddr71 = alloca i64, align 8
  %indirectarg72 = alloca %"char[]", align 8
  %indirectarg73 = alloca %"char[]", align 8
  %indirectarg74 = alloca %"char[]", align 8
  %varargslots75 = alloca [1 x %any], align 16
  %indirectarg77 = alloca %"any[]", align 8
  %self83 = alloca %VirtualMemory, align 8
  %indirectarg86 = alloca %"char[]", align 8
  %indirectarg87 = alloca %"char[]", align 8
  %indirectarg88 = alloca %"char[]", align 8
  %indirectarg93 = alloca %"char[]", align 8
  %indirectarg94 = alloca %"char[]", align 8
  %indirectarg95 = alloca %"char[]", align 8
  %indirectarg100 = alloca %"char[]", align 8
  %indirectarg101 = alloca %"char[]", align 8
  %indirectarg102 = alloca %"char[]", align 8
  %indirectarg108 = alloca %"char[]", align 8
  %indirectarg109 = alloca %"char[]", align 8
  %indirectarg110 = alloca %"char[]", align 8
  %indirectarg112 = alloca %VirtualMemory, align 8
  %self118 = alloca %VirtualMemory, align 8
  %offset = alloca i64, align 8
  %len119 = alloca i64, align 8
  %access = alloca i32, align 4
  %indirectarg122 = alloca %"char[]", align 8
  %indirectarg123 = alloca %"char[]", align 8
  %indirectarg124 = alloca %"char[]", align 8
  %indirectarg129 = alloca %"char[]", align 8
  %indirectarg130 = alloca %"char[]", align 8
  %indirectarg131 = alloca %"char[]", align 8
  %indirectarg136 = alloca %"char[]", align 8
  %indirectarg137 = alloca %"char[]", align 8
  %indirectarg138 = alloca %"char[]", align 8
  %indirectarg144 = alloca %"char[]", align 8
  %indirectarg145 = alloca %"char[]", align 8
  %indirectarg146 = alloca %"char[]", align 8
  %indirectarg150 = alloca %"char[]", align 8
  %indirectarg151 = alloca %"char[]", align 8
  %indirectarg152 = alloca %"char[]", align 8
  %indirectarg156 = alloca %"char[]", align 8
  %indirectarg157 = alloca %"char[]", align 8
  %indirectarg158 = alloca %"char[]", align 8
  %3 = icmp eq ptr %0, null, !dbg !2591
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !2591
  br i1 %4, label %panic, label %checkok, !dbg !2591

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2592, !DIExpression(), !2593)
  store ptr %1, ptr %ptr, align 8
    #dbg_declare(ptr %ptr, !2594, !DIExpression(), !2593)
  store i8 %2, ptr %.anon, align 1
    #dbg_declare(ptr %.anon, !2595, !DIExpression(), !2593)
  %5 = load ptr, ptr %ptr, align 8, !dbg !2596
  %neq = icmp ne ptr %5, null, !dbg !2596
  br i1 %neq, label %assert_ok, label %assert_fail, !dbg !2596

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.7, i64 32 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.file.141, i64 7 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.func.6, i64 7 }, ptr %indirectarg5, align 8
  %6 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %6(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, i32 159) #6, !dbg !2596
  unreachable, !dbg !2596

assert_ok:                                        ; preds = %checkok
  %7 = load ptr, ptr %self, align 8, !dbg !2598
  %8 = load ptr, ptr %ptr, align 8, !dbg !2598
  %9 = call i8 @std.core.mem.allocator.Vmem.owns_pointer(ptr %7, ptr %8) #7, !dbg !2598
  %10 = trunc i8 %9 to i1, !dbg !2598
  br i1 %10, label %assert_ok11, label %assert_fail6, !dbg !2598

assert_fail6:                                     ; preds = %assert_ok
  %11 = insertvalue %any undef, ptr %ptr, 0, !dbg !2598
  %12 = insertvalue %any %11, i64 ptrtoint (ptr @"$ct.p$void" to i64), 1, !dbg !2598
  store %"char[]" { ptr @.panic_msg.157, i64 49 }, ptr %indirectarg7, align 8
  store %"char[]" { ptr @.file.141, i64 7 }, ptr %indirectarg8, align 8
  store %"char[]" { ptr @.func.6, i64 7 }, ptr %indirectarg9, align 8
  store %any %12, ptr %varargslots, align 16
  %13 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %13, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg10, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg7, ptr align 8 %indirectarg8, ptr align 8 %indirectarg9, i32 163, ptr align 8 %indirectarg10) #6, !dbg !2598
  unreachable, !dbg !2598

assert_ok11:                                      ; preds = %assert_ok
    #dbg_declare(ptr %header, !2599, !DIExpression(), !2600)
  %14 = load ptr, ptr %ptr, align 8, !dbg !2600
  %ptradd_any = getelementptr i8, ptr %14, i64 -8, !dbg !2600
  store ptr %ptradd_any, ptr %header, align 8, !dbg !2600
  %15 = load ptr, ptr %ptr, align 8, !dbg !2601
  %16 = load ptr, ptr %header, align 8, !dbg !2601
  %17 = load i64, ptr %16, align 8, !dbg !2601
  %ptradd_any12 = getelementptr i8, ptr %15, i64 %17, !dbg !2601
  %18 = load ptr, ptr %self, align 8, !dbg !2601
  %19 = load ptr, ptr %18, align 8, !dbg !2601
  %20 = load ptr, ptr %self, align 8, !dbg !2601
  %ptradd = getelementptr inbounds i8, ptr %20, i64 24, !dbg !2601
  %21 = load i64, ptr %ptradd, align 8, !dbg !2601
  %ptradd_any13 = getelementptr i8, ptr %19, i64 %21, !dbg !2601
  %eq = icmp eq ptr %ptradd_any12, %ptradd_any13, !dbg !2601
  br i1 %eq, label %if.then, label %if.exit163, !dbg !2601

if.then:                                          ; preds = %assert_ok11
  %22 = load ptr, ptr %self, align 8
  store ptr %22, ptr %mem, align 8
  %23 = load ptr, ptr %self, align 8, !dbg !2602
  %ptradd14 = getelementptr inbounds i8, ptr %23, i64 24, !dbg !2602
  %24 = load i64, ptr %ptradd14, align 8, !dbg !2602
  %25 = load ptr, ptr %header, align 8, !dbg !2602
  %26 = load i64, ptr %25, align 8, !dbg !2602
  %sub = sub i64 %24, %26, !dbg !2602
  %sub15 = sub i64 %sub, 8, !dbg !2602
  store i64 %sub15, ptr %after, align 8
    #dbg_declare(ptr %shift, !2604, !DIExpression(), !2606)
  %27 = load ptr, ptr %mem, align 8, !dbg !2606
  %ptradd16 = getelementptr inbounds i8, ptr %27, i64 40, !dbg !2606
  %28 = load i64, ptr %ptradd16, align 8, !dbg !2606
  store i64 %28, ptr %shift, align 8, !dbg !2606
    #dbg_declare(ptr %last_page, !2607, !DIExpression(), !2608)
  %29 = load ptr, ptr %mem, align 8, !dbg !2608
  %ptradd17 = getelementptr inbounds i8, ptr %29, i64 48, !dbg !2608
  %30 = load i64, ptr %ptradd17, align 8, !dbg !2608
  store i64 %30, ptr %last_page, align 8, !dbg !2608
    #dbg_declare(ptr %page_after, !2609, !DIExpression(), !2610)
  %31 = load i64, ptr %after, align 8, !dbg !2610
  %32 = load ptr, ptr %mem, align 8, !dbg !2610
  %ptradd18 = getelementptr inbounds i8, ptr %32, i64 32, !dbg !2610
  %33 = load i64, ptr %ptradd18, align 8, !dbg !2610
  %add = add i64 %31, %33, !dbg !2610
  %sub19 = sub i64 %add, 1, !dbg !2610
  %34 = load i64, ptr %shift, align 8, !dbg !2610
  %shift_underflow = icmp slt i64 %34, 0, !dbg !2610
  %35 = call i1 @llvm.expect.i1(i1 %shift_underflow, i1 false), !dbg !2610
  br i1 %35, label %panic20, label %checkok27, !dbg !2610

checkok27:                                        ; preds = %if.then
  %shift_exceeds = icmp sge i64 %34, 64, !dbg !2610
  %36 = call i1 @llvm.expect.i1(i1 %shift_exceeds, i1 false), !dbg !2610
  br i1 %36, label %panic28, label %checkok36, !dbg !2610

checkok36:                                        ; preds = %checkok27
  %ashr = ashr i64 %sub19, %34, !dbg !2610
  %37 = freeze i64 %ashr, !dbg !2610
  %38 = load ptr, ptr %mem, align 8, !dbg !2610
  %ptradd37 = getelementptr inbounds i8, ptr %38, i64 48, !dbg !2610
  store i64 %37, ptr %ptradd37, align 8, !dbg !2610
  store i64 %37, ptr %page_after, align 8, !dbg !2610
  %39 = load ptr, ptr %mem, align 8, !dbg !2611
  %ptradd38 = getelementptr inbounds i8, ptr %39, i64 64, !dbg !2611
  %40 = load i32, ptr %ptradd38, align 8, !dbg !2611
  %lshrl = lshr i32 %40, 2, !dbg !2611
  %41 = and i32 1, %lshrl, !dbg !2611
  %trunc = trunc i32 %41 to i8, !dbg !2611
  %42 = trunc i8 %trunc to i1, !dbg !2611
  br i1 %42, label %if.then39, label %if.exit, !dbg !2611

if.then39:                                        ; preds = %checkok36
  %43 = load ptr, ptr %mem, align 8, !dbg !2612
  %44 = load ptr, ptr %43, align 8, !dbg !2612
  %45 = load i64, ptr %after, align 8, !dbg !2612
  %ptradd_any40 = getelementptr i8, ptr %44, i64 %45, !dbg !2612
  store ptr %ptradd_any40, ptr %dst, align 8
  store i8 -86, ptr %val, align 1
  %46 = load ptr, ptr %mem, align 8, !dbg !2612
  %ptradd41 = getelementptr inbounds i8, ptr %46, i64 24, !dbg !2612
  %47 = load i64, ptr %ptradd41, align 8, !dbg !2612
  %48 = load i64, ptr %after, align 8, !dbg !2612
  %sub42 = sub i64 %47, %48, !dbg !2612
  store i64 %sub42, ptr %len, align 8
  %49 = load ptr, ptr %dst, align 8, !dbg !2614
  %neq43 = icmp ne ptr %49, null, !dbg !2614
  br i1 %neq43, label %assert_ok48, label %assert_fail44, !dbg !2614

assert_fail44:                                    ; preds = %if.then39
  store %"char[]" { ptr @.panic_msg.18, i64 37 }, ptr %indirectarg45, align 8
  store %"char[]" { ptr @.file.15, i64 6 }, ptr %indirectarg46, align 8
  store %"char[]" { ptr @.func.6, i64 7 }, ptr %indirectarg47, align 8
  %50 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %50(ptr align 8 %indirectarg45, ptr align 8 %indirectarg46, ptr align 8 %indirectarg47, i32 409) #6, !dbg !2614
  unreachable, !dbg !2614

assert_ok48:                                      ; preds = %if.then39
  %51 = load ptr, ptr %dst, align 8, !dbg !2617
  %52 = load i8, ptr %val, align 1, !dbg !2617
  %53 = load i64, ptr %len, align 8, !dbg !2617
  call void @llvm.memset.p0.i64(ptr %51, i8 %52, i64 %53, i1 false), !dbg !2617
  br label %if.exit, !dbg !2617

if.exit:                                          ; preds = %assert_ok48, %checkok36
  %54 = load ptr, ptr %mem, align 8, !dbg !2618
  %ptradd49 = getelementptr inbounds i8, ptr %54, i64 64, !dbg !2618
  %55 = load i32, ptr %ptradd49, align 8, !dbg !2618
  %56 = and i32 1, %55, !dbg !2618
  %trunc50 = trunc i32 %56 to i8, !dbg !2618
  %57 = trunc i8 %trunc50 to i1, !dbg !2618
  br i1 %57, label %or.phi, label %or.rhs, !dbg !2618

or.rhs:                                           ; preds = %if.exit
  %58 = load ptr, ptr %mem, align 8, !dbg !2618
  %ptradd51 = getelementptr inbounds i8, ptr %58, i64 64, !dbg !2618
  %59 = load i32, ptr %ptradd51, align 8, !dbg !2618
  %lshrl52 = lshr i32 %59, 1, !dbg !2618
  %60 = and i32 1, %lshrl52, !dbg !2618
  %trunc53 = trunc i32 %60 to i8, !dbg !2618
  %61 = trunc i8 %trunc53 to i1, !dbg !2618
  br label %or.phi, !dbg !2618

or.phi:                                           ; preds = %or.rhs, %if.exit
  %val54 = phi i1 [ true, %if.exit ], [ %61, %or.rhs ], !dbg !2618
  br i1 %val54, label %and.rhs, label %and.phi, !dbg !2618

and.rhs:                                          ; preds = %or.phi
  %62 = load i64, ptr %page_after, align 8, !dbg !2618
  %63 = load i64, ptr %last_page, align 8, !dbg !2618
  %lt = icmp ult i64 %62, %63, !dbg !2618
  br label %and.phi, !dbg !2618

and.phi:                                          ; preds = %and.rhs, %or.phi
  %val55 = phi i1 [ false, %or.phi ], [ %lt, %and.rhs ], !dbg !2618
  br i1 %val55, label %if.then56, label %if.exit161, !dbg !2618

if.then56:                                        ; preds = %and.phi
    #dbg_declare(ptr %start, !2619, !DIExpression(), !2621)
  %64 = load i64, ptr %page_after, align 8, !dbg !2621
  %65 = load i64, ptr %shift, align 8, !dbg !2621
  %shift_exceeds57 = icmp uge i64 %65, 64, !dbg !2621
  %66 = call i1 @llvm.expect.i1(i1 %shift_exceeds57, i1 false), !dbg !2621
  br i1 %66, label %panic58, label %checkok66, !dbg !2621

checkok66:                                        ; preds = %if.then56
  %shl = shl i64 %64, %65, !dbg !2621
  %67 = freeze i64 %shl, !dbg !2621
  store i64 %67, ptr %start, align 8, !dbg !2621
    #dbg_declare(ptr %len67, !2622, !DIExpression(), !2623)
  %68 = load i64, ptr %last_page, align 8, !dbg !2623
  %69 = load i64, ptr %page_after, align 8, !dbg !2623
  %sub68 = sub i64 %68, %69, !dbg !2623
  %70 = load i64, ptr %shift, align 8, !dbg !2623
  %shift_exceeds69 = icmp uge i64 %70, 64, !dbg !2623
  %71 = call i1 @llvm.expect.i1(i1 %shift_exceeds69, i1 false), !dbg !2623
  br i1 %71, label %panic70, label %checkok78, !dbg !2623

checkok78:                                        ; preds = %checkok66
  %shl79 = shl i64 %sub68, %70, !dbg !2623
  %72 = freeze i64 %shl79, !dbg !2623
  store i64 %72, ptr %len67, align 8, !dbg !2623
  %73 = load ptr, ptr %mem, align 8, !dbg !2624
  %ptradd80 = getelementptr inbounds i8, ptr %73, i64 64, !dbg !2624
  %74 = load i32, ptr %ptradd80, align 8, !dbg !2624
  %75 = and i32 1, %74, !dbg !2624
  %trunc81 = trunc i32 %75 to i8, !dbg !2624
  %76 = trunc i8 %trunc81 to i1, !dbg !2624
  br i1 %76, label %if.then82, label %if.exit113, !dbg !2624

if.then82:                                        ; preds = %checkok78
    #dbg_declare(ptr %self83, !2625, !DIExpression(), !2624)
  %77 = load ptr, ptr %mem, align 8, !dbg !2624
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %self83, ptr align 8 %77, i32 24, i1 false), !dbg !2624
  %78 = load i64, ptr %start, align 8, !dbg !2624
  %79 = load i64, ptr %len67, align 8, !dbg !2624
  %80 = load ptr, ptr %self83, align 8, !dbg !2626
  %ptradd_any84 = getelementptr i8, ptr %80, i64 %78, !dbg !2626
  %81 = call i8 @std.core.mem.ptr_is_page_aligned(ptr %ptradd_any84) #7, !dbg !2624
  %82 = trunc i8 %81 to i1, !dbg !2624
  br i1 %82, label %assert_ok89, label %assert_fail85, !dbg !2624

assert_fail85:                                    ; preds = %if.then82
  store %"char[]" { ptr @.panic_msg.147, i64 101 }, ptr %indirectarg86, align 8
  store %"char[]" { ptr @.file.141, i64 7 }, ptr %indirectarg87, align 8
  store %"char[]" { ptr @.func.6, i64 7 }, ptr %indirectarg88, align 8
  %83 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %83(ptr align 8 %indirectarg86, ptr align 8 %indirectarg87, ptr align 8 %indirectarg88, i32 248) #6, !dbg !2624
  unreachable, !dbg !2624

assert_ok89:                                      ; preds = %if.then82
  %84 = load ptr, ptr %self83, align 8, !dbg !2627
  %add90 = add i64 %78, %79, !dbg !2627
  %ptradd_any91 = getelementptr i8, ptr %84, i64 %add90, !dbg !2627
  %85 = call i8 @std.core.mem.ptr_is_page_aligned(ptr %ptradd_any91) #7, !dbg !2624
  %86 = trunc i8 %85 to i1, !dbg !2624
  br i1 %86, label %assert_ok96, label %assert_fail92, !dbg !2624

assert_fail92:                                    ; preds = %assert_ok89
  store %"char[]" { ptr @.panic_msg.148, i64 105 }, ptr %indirectarg93, align 8
  store %"char[]" { ptr @.file.141, i64 7 }, ptr %indirectarg94, align 8
  store %"char[]" { ptr @.func.6, i64 7 }, ptr %indirectarg95, align 8
  %87 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %87(ptr align 8 %indirectarg93, ptr align 8 %indirectarg94, ptr align 8 %indirectarg95, i32 248) #6, !dbg !2624
  unreachable, !dbg !2624

assert_ok96:                                      ; preds = %assert_ok89
  %ptradd97 = getelementptr inbounds i8, ptr %self83, i64 8, !dbg !2628
  %88 = load i64, ptr %ptradd97, align 8, !dbg !2628
  %lt98 = icmp ult i64 %78, %88, !dbg !2624
  br i1 %lt98, label %assert_ok103, label %assert_fail99, !dbg !2624

assert_fail99:                                    ; preds = %assert_ok96
  store %"char[]" { ptr @.panic_msg.149, i64 62 }, ptr %indirectarg100, align 8
  store %"char[]" { ptr @.file.141, i64 7 }, ptr %indirectarg101, align 8
  store %"char[]" { ptr @.func.6, i64 7 }, ptr %indirectarg102, align 8
  %89 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %89(ptr align 8 %indirectarg100, ptr align 8 %indirectarg101, ptr align 8 %indirectarg102, i32 248) #6, !dbg !2624
  unreachable, !dbg !2624

assert_ok103:                                     ; preds = %assert_ok96
  %add104 = add i64 %78, %79, !dbg !2629
  %ptradd105 = getelementptr inbounds i8, ptr %self83, i64 8, !dbg !2629
  %90 = load i64, ptr %ptradd105, align 8, !dbg !2629
  %lt106 = icmp ult i64 %add104, %90, !dbg !2624
  br i1 %lt106, label %assert_ok111, label %assert_fail107, !dbg !2624

assert_fail107:                                   ; preds = %assert_ok103
  store %"char[]" { ptr @.panic_msg.154, i64 68 }, ptr %indirectarg108, align 8
  store %"char[]" { ptr @.file.141, i64 7 }, ptr %indirectarg109, align 8
  store %"char[]" { ptr @.func.6, i64 7 }, ptr %indirectarg110, align 8
  %91 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %91(ptr align 8 %indirectarg108, ptr align 8 %indirectarg109, ptr align 8 %indirectarg110, i32 248) #6, !dbg !2624
  unreachable, !dbg !2624

assert_ok111:                                     ; preds = %assert_ok103
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg112, ptr align 8 %77, i32 24, i1 false)
  %92 = call i64 @std.core.mem.vm.VirtualMemory.decommit(ptr align 8 %indirectarg112, i64 %78, i64 %79, i8 zeroext 0), !dbg !2624
  br label %if.exit113, !dbg !2624

if.exit113:                                       ; preds = %assert_ok111, %checkok78
  %93 = load ptr, ptr %mem, align 8, !dbg !2630
  %ptradd114 = getelementptr inbounds i8, ptr %93, i64 64, !dbg !2630
  %94 = load i32, ptr %ptradd114, align 8, !dbg !2630
  %lshrl115 = lshr i32 %94, 1, !dbg !2630
  %95 = and i32 1, %lshrl115, !dbg !2630
  %trunc116 = trunc i32 %95 to i8, !dbg !2630
  %96 = trunc i8 %trunc116 to i1, !dbg !2630
  br i1 %96, label %if.then117, label %if.exit160, !dbg !2630

if.then117:                                       ; preds = %if.exit113
  %97 = load ptr, ptr %mem, align 8, !dbg !2630
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %self118, ptr align 8 %97, i32 24, i1 false)
  %98 = load i64, ptr %start, align 8
  store i64 %98, ptr %offset, align 8
  %99 = load i64, ptr %len67, align 8
  store i64 %99, ptr %len119, align 8
  store i32 0, ptr %access, align 4
  %100 = load ptr, ptr %self118, align 8, !dbg !2631
  %101 = load i64, ptr %offset, align 8, !dbg !2631
  %ptradd_any120 = getelementptr i8, ptr %100, i64 %101, !dbg !2631
  %102 = call i8 @std.core.mem.ptr_is_page_aligned(ptr %ptradd_any120) #7, !dbg !2634
  %103 = trunc i8 %102 to i1, !dbg !2634
  br i1 %103, label %assert_ok125, label %assert_fail121, !dbg !2634

assert_fail121:                                   ; preds = %if.then117
  store %"char[]" { ptr @.panic_msg.147, i64 101 }, ptr %indirectarg122, align 8
  store %"char[]" { ptr @.file.141, i64 7 }, ptr %indirectarg123, align 8
  store %"char[]" { ptr @.func.6, i64 7 }, ptr %indirectarg124, align 8
  %104 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %104(ptr align 8 %indirectarg122, ptr align 8 %indirectarg123, ptr align 8 %indirectarg124, i32 249) #6, !dbg !2634
  unreachable, !dbg !2634

assert_ok125:                                     ; preds = %if.then117
  %105 = load ptr, ptr %self118, align 8, !dbg !2635
  %106 = load i64, ptr %offset, align 8, !dbg !2635
  %107 = load i64, ptr %len119, align 8, !dbg !2635
  %add126 = add i64 %106, %107, !dbg !2635
  %ptradd_any127 = getelementptr i8, ptr %105, i64 %add126, !dbg !2635
  %108 = call i8 @std.core.mem.ptr_is_page_aligned(ptr %ptradd_any127) #7, !dbg !2634
  %109 = trunc i8 %108 to i1, !dbg !2634
  br i1 %109, label %assert_ok132, label %assert_fail128, !dbg !2634

assert_fail128:                                   ; preds = %assert_ok125
  store %"char[]" { ptr @.panic_msg.148, i64 105 }, ptr %indirectarg129, align 8
  store %"char[]" { ptr @.file.141, i64 7 }, ptr %indirectarg130, align 8
  store %"char[]" { ptr @.func.6, i64 7 }, ptr %indirectarg131, align 8
  %110 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %110(ptr align 8 %indirectarg129, ptr align 8 %indirectarg130, ptr align 8 %indirectarg131, i32 249) #6, !dbg !2634
  unreachable, !dbg !2634

assert_ok132:                                     ; preds = %assert_ok125
  %111 = load i64, ptr %offset, align 8, !dbg !2636
  %ptradd133 = getelementptr inbounds i8, ptr %self118, i64 8, !dbg !2636
  %112 = load i64, ptr %ptradd133, align 8, !dbg !2636
  %lt134 = icmp ult i64 %111, %112, !dbg !2634
  br i1 %lt134, label %assert_ok139, label %assert_fail135, !dbg !2634

assert_fail135:                                   ; preds = %assert_ok132
  store %"char[]" { ptr @.panic_msg.149, i64 62 }, ptr %indirectarg136, align 8
  store %"char[]" { ptr @.file.141, i64 7 }, ptr %indirectarg137, align 8
  store %"char[]" { ptr @.func.6, i64 7 }, ptr %indirectarg138, align 8
  %113 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %113(ptr align 8 %indirectarg136, ptr align 8 %indirectarg137, ptr align 8 %indirectarg138, i32 249) #6, !dbg !2634
  unreachable, !dbg !2634

assert_ok139:                                     ; preds = %assert_ok132
  %114 = load i64, ptr %offset, align 8, !dbg !2637
  %115 = load i64, ptr %len119, align 8, !dbg !2637
  %add140 = add i64 %114, %115, !dbg !2637
  %ptradd141 = getelementptr inbounds i8, ptr %self118, i64 8, !dbg !2637
  %116 = load i64, ptr %ptradd141, align 8, !dbg !2637
  %lt142 = icmp ult i64 %add140, %116, !dbg !2634
  br i1 %lt142, label %assert_ok147, label %assert_fail143, !dbg !2634

assert_fail143:                                   ; preds = %assert_ok139
  store %"char[]" { ptr @.panic_msg.154, i64 68 }, ptr %indirectarg144, align 8
  store %"char[]" { ptr @.file.141, i64 7 }, ptr %indirectarg145, align 8
  store %"char[]" { ptr @.func.6, i64 7 }, ptr %indirectarg146, align 8
  %117 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %117(ptr align 8 %indirectarg144, ptr align 8 %indirectarg145, ptr align 8 %indirectarg146, i32 249) #6, !dbg !2634
  unreachable, !dbg !2634

assert_ok147:                                     ; preds = %assert_ok139
  %118 = load ptr, ptr %self118, align 8, !dbg !2638
  %119 = load i64, ptr %offset, align 8, !dbg !2638
  %ptradd_any148 = getelementptr i8, ptr %118, i64 %119, !dbg !2638
  %120 = load i64, ptr %len119, align 8, !dbg !2638
  %121 = load i32, ptr %access, align 4, !dbg !2638
  %122 = call i8 @std.core.mem.ptr_is_page_aligned(ptr %ptradd_any148) #7, !dbg !2638
  %123 = trunc i8 %122 to i1, !dbg !2638
  br i1 %123, label %assert_ok153, label %assert_fail149, !dbg !2638

assert_fail149:                                   ; preds = %assert_ok147
  store %"char[]" { ptr @.panic_msg.151, i64 88 }, ptr %indirectarg150, align 8
  store %"char[]" { ptr @.file.152, i64 9 }, ptr %indirectarg151, align 8
  store %"char[]" { ptr @.func.6, i64 7 }, ptr %indirectarg152, align 8
  %124 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %124(ptr align 8 %indirectarg150, ptr align 8 %indirectarg151, ptr align 8 %indirectarg152, i32 265) #6, !dbg !2638
  unreachable, !dbg !2638

assert_ok153:                                     ; preds = %assert_ok147
  %ptradd_any154 = getelementptr i8, ptr %ptradd_any148, i64 %120, !dbg !2639
  %125 = call i8 @std.core.mem.ptr_is_page_aligned(ptr %ptradd_any154) #7, !dbg !2638
  %126 = trunc i8 %125 to i1, !dbg !2638
  br i1 %126, label %assert_ok159, label %assert_fail155, !dbg !2638

assert_fail155:                                   ; preds = %assert_ok153
  store %"char[]" { ptr @.panic_msg.153, i64 91 }, ptr %indirectarg156, align 8
  store %"char[]" { ptr @.file.152, i64 9 }, ptr %indirectarg157, align 8
  store %"char[]" { ptr @.func.6, i64 7 }, ptr %indirectarg158, align 8
  %127 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %127(ptr align 8 %indirectarg156, ptr align 8 %indirectarg157, ptr align 8 %indirectarg158, i32 265) #6, !dbg !2638
  unreachable, !dbg !2638

assert_ok159:                                     ; preds = %assert_ok153
  %128 = call i64 @std.core.mem.vm.protect(ptr %ptradd_any148, i64 %120, i32 %121), !dbg !2638
  %not_err = icmp eq i64 %128, 0, !dbg !2638
  %129 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !2638
  br i1 %129, label %after_check, label %expr_block.exit, !dbg !2638

after_check:                                      ; preds = %assert_ok159
  br label %expr_block.exit, !dbg !2638

expr_block.exit:                                  ; preds = %assert_ok159, %after_check
  br label %if.exit160, !dbg !2630

if.exit160:                                       ; preds = %expr_block.exit, %if.exit113
  br label %if.exit161, !dbg !2630

if.exit161:                                       ; preds = %if.exit160, %and.phi
  %130 = load ptr, ptr %mem, align 8, !dbg !2640
  %ptradd162 = getelementptr inbounds i8, ptr %130, i64 24, !dbg !2640
  %131 = load i64, ptr %after, align 8, !dbg !2640
  store i64 %131, ptr %ptradd162, align 8, !dbg !2640
  br label %if.exit163, !dbg !2640

if.exit163:                                       ; preds = %if.exit161, %assert_ok11
  ret void, !dbg !2640

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.141, i64 7 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.6, i64 7 }, ptr %indirectarg2, align 8
  %132 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %132(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 161) #6, !dbg !2593
  unreachable, !dbg !2593

panic20:                                          ; preds = %if.then
  store i64 %34, ptr %taddr, align 8
  %133 = insertvalue %any undef, ptr %taddr, 0
  %134 = insertvalue %any %133, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.146, i64 35 }, ptr %indirectarg21, align 8
  store %"char[]" { ptr @.file.141, i64 7 }, ptr %indirectarg22, align 8
  store %"char[]" { ptr @.func.6, i64 7 }, ptr %indirectarg23, align 8
  store %any %134, ptr %varargslots24, align 16
  %135 = insertvalue %"any[]" undef, ptr %varargslots24, 0
  %"$$temp25" = insertvalue %"any[]" %135, i64 1, 1
  store %"any[]" %"$$temp25", ptr %indirectarg26, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg21, ptr align 8 %indirectarg22, ptr align 8 %indirectarg23, i32 235, ptr align 8 %indirectarg26) #6, !dbg !2610
  unreachable, !dbg !2610

panic28:                                          ; preds = %checkok27
  store i64 %34, ptr %taddr29, align 8
  %136 = insertvalue %any undef, ptr %taddr29, 0
  %137 = insertvalue %any %136, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.146, i64 35 }, ptr %indirectarg30, align 8
  store %"char[]" { ptr @.file.141, i64 7 }, ptr %indirectarg31, align 8
  store %"char[]" { ptr @.func.6, i64 7 }, ptr %indirectarg32, align 8
  store %any %137, ptr %varargslots33, align 16
  %138 = insertvalue %"any[]" undef, ptr %varargslots33, 0
  %"$$temp34" = insertvalue %"any[]" %138, i64 1, 1
  store %"any[]" %"$$temp34", ptr %indirectarg35, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg30, ptr align 8 %indirectarg31, ptr align 8 %indirectarg32, i32 235, ptr align 8 %indirectarg35) #6, !dbg !2610
  unreachable, !dbg !2610

panic58:                                          ; preds = %if.then56
  store i64 %65, ptr %taddr59, align 8
  %139 = insertvalue %any undef, ptr %taddr59, 0
  %140 = insertvalue %any %139, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.146, i64 35 }, ptr %indirectarg60, align 8
  store %"char[]" { ptr @.file.141, i64 7 }, ptr %indirectarg61, align 8
  store %"char[]" { ptr @.func.6, i64 7 }, ptr %indirectarg62, align 8
  store %any %140, ptr %varargslots63, align 16
  %141 = insertvalue %"any[]" undef, ptr %varargslots63, 0
  %"$$temp64" = insertvalue %"any[]" %141, i64 1, 1
  store %"any[]" %"$$temp64", ptr %indirectarg65, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg60, ptr align 8 %indirectarg61, ptr align 8 %indirectarg62, i32 246, ptr align 8 %indirectarg65) #6, !dbg !2621
  unreachable, !dbg !2621

panic70:                                          ; preds = %checkok66
  store i64 %70, ptr %taddr71, align 8
  %142 = insertvalue %any undef, ptr %taddr71, 0
  %143 = insertvalue %any %142, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.146, i64 35 }, ptr %indirectarg72, align 8
  store %"char[]" { ptr @.file.141, i64 7 }, ptr %indirectarg73, align 8
  store %"char[]" { ptr @.func.6, i64 7 }, ptr %indirectarg74, align 8
  store %any %143, ptr %varargslots75, align 16
  %144 = insertvalue %"any[]" undef, ptr %varargslots75, 0
  %"$$temp76" = insertvalue %"any[]" %144, i64 1, 1
  store %"any[]" %"$$temp76", ptr %indirectarg77, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg72, ptr align 8 %indirectarg73, ptr align 8 %indirectarg74, i32 247, ptr align 8 %indirectarg77) #6, !dbg !2623
  unreachable, !dbg !2623
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.core.mem.allocator.Vmem.mark(ptr %0) #0 comdat !dbg !2641 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2644
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2644
  br i1 %2, label %panic, label %checkok, !dbg !2644

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2645, !DIExpression(), !2646)
  %3 = load ptr, ptr %self, align 8, !dbg !2647
  %ptradd = getelementptr inbounds i8, ptr %3, i64 24, !dbg !2647
  %4 = load i64, ptr %ptradd, align 8, !dbg !2647
  ret i64 %4, !dbg !2647

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.141, i64 7 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.3, i64 4 }, ptr %indirectarg2, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 172) #6, !dbg !2646
  unreachable, !dbg !2646
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.core.mem.allocator.Vmem.reset(ptr %0, i64 %1) #0 comdat !dbg !2648 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %mark = alloca i64, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %mem = alloca ptr, align 8
  %after = alloca i64, align 8
  %shift = alloca i64, align 8
  %last_page = alloca i64, align 8
  %page_after = alloca i64, align 8
  %taddr = alloca i64, align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %indirectarg13 = alloca %"char[]", align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg14 = alloca %"any[]", align 8
  %taddr17 = alloca i64, align 8
  %indirectarg18 = alloca %"char[]", align 8
  %indirectarg19 = alloca %"char[]", align 8
  %indirectarg20 = alloca %"char[]", align 8
  %varargslots21 = alloca [1 x %any], align 16
  %indirectarg23 = alloca %"any[]", align 8
  %dst = alloca ptr, align 8
  %val = alloca i8, align 1
  %len = alloca i64, align 8
  %indirectarg31 = alloca %"char[]", align 8
  %indirectarg32 = alloca %"char[]", align 8
  %indirectarg33 = alloca %"char[]", align 8
  %start = alloca i64, align 8
  %taddr46 = alloca i64, align 8
  %indirectarg47 = alloca %"char[]", align 8
  %indirectarg48 = alloca %"char[]", align 8
  %indirectarg49 = alloca %"char[]", align 8
  %varargslots50 = alloca [1 x %any], align 16
  %indirectarg52 = alloca %"any[]", align 8
  %len54 = alloca i64, align 8
  %taddr58 = alloca i64, align 8
  %indirectarg59 = alloca %"char[]", align 8
  %indirectarg60 = alloca %"char[]", align 8
  %indirectarg61 = alloca %"char[]", align 8
  %varargslots62 = alloca [1 x %any], align 16
  %indirectarg64 = alloca %"any[]", align 8
  %self70 = alloca %VirtualMemory, align 8
  %indirectarg73 = alloca %"char[]", align 8
  %indirectarg74 = alloca %"char[]", align 8
  %indirectarg75 = alloca %"char[]", align 8
  %indirectarg80 = alloca %"char[]", align 8
  %indirectarg81 = alloca %"char[]", align 8
  %indirectarg82 = alloca %"char[]", align 8
  %indirectarg87 = alloca %"char[]", align 8
  %indirectarg88 = alloca %"char[]", align 8
  %indirectarg89 = alloca %"char[]", align 8
  %indirectarg95 = alloca %"char[]", align 8
  %indirectarg96 = alloca %"char[]", align 8
  %indirectarg97 = alloca %"char[]", align 8
  %indirectarg99 = alloca %VirtualMemory, align 8
  %self105 = alloca %VirtualMemory, align 8
  %offset = alloca i64, align 8
  %len106 = alloca i64, align 8
  %access = alloca i32, align 4
  %indirectarg109 = alloca %"char[]", align 8
  %indirectarg110 = alloca %"char[]", align 8
  %indirectarg111 = alloca %"char[]", align 8
  %indirectarg116 = alloca %"char[]", align 8
  %indirectarg117 = alloca %"char[]", align 8
  %indirectarg118 = alloca %"char[]", align 8
  %indirectarg123 = alloca %"char[]", align 8
  %indirectarg124 = alloca %"char[]", align 8
  %indirectarg125 = alloca %"char[]", align 8
  %indirectarg131 = alloca %"char[]", align 8
  %indirectarg132 = alloca %"char[]", align 8
  %indirectarg133 = alloca %"char[]", align 8
  %indirectarg137 = alloca %"char[]", align 8
  %indirectarg138 = alloca %"char[]", align 8
  %indirectarg139 = alloca %"char[]", align 8
  %indirectarg143 = alloca %"char[]", align 8
  %indirectarg144 = alloca %"char[]", align 8
  %indirectarg145 = alloca %"char[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !2651
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !2651
  br i1 %3, label %panic, label %checkok, !dbg !2651

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2652, !DIExpression(), !2653)
  store i64 %1, ptr %mark, align 8
    #dbg_declare(ptr %mark, !2654, !DIExpression(), !2653)
  %4 = load i64, ptr %mark, align 8, !dbg !2655
  %5 = load ptr, ptr %self, align 8, !dbg !2655
  %ptradd = getelementptr inbounds i8, ptr %5, i64 24, !dbg !2655
  %6 = load i64, ptr %ptradd, align 8, !dbg !2655
  %le = icmp ule i64 %4, %6, !dbg !2655
  br i1 %le, label %assert_ok, label %assert_fail, !dbg !2655

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.158, i64 59 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.file.141, i64 7 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.func.4, i64 5 }, ptr %indirectarg5, align 8
  %7 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %7(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, i32 178) #6, !dbg !2655
  unreachable, !dbg !2655

assert_ok:                                        ; preds = %checkok
  %8 = load i64, ptr %mark, align 8, !dbg !2657
  %9 = load ptr, ptr %self, align 8, !dbg !2657
  %ptradd6 = getelementptr inbounds i8, ptr %9, i64 24, !dbg !2657
  %10 = load i64, ptr %ptradd6, align 8, !dbg !2657
  %eq = icmp eq i64 %8, %10, !dbg !2657
  br i1 %eq, label %if.then, label %if.exit, !dbg !2657

if.then:                                          ; preds = %assert_ok
  ret void, !dbg !2657

if.exit:                                          ; preds = %assert_ok
  %11 = load ptr, ptr %self, align 8
  store ptr %11, ptr %mem, align 8
  %12 = load i64, ptr %mark, align 8
  store i64 %12, ptr %after, align 8
    #dbg_declare(ptr %shift, !2658, !DIExpression(), !2660)
  %13 = load ptr, ptr %mem, align 8, !dbg !2660
  %ptradd7 = getelementptr inbounds i8, ptr %13, i64 40, !dbg !2660
  %14 = load i64, ptr %ptradd7, align 8, !dbg !2660
  store i64 %14, ptr %shift, align 8, !dbg !2660
    #dbg_declare(ptr %last_page, !2662, !DIExpression(), !2663)
  %15 = load ptr, ptr %mem, align 8, !dbg !2663
  %ptradd8 = getelementptr inbounds i8, ptr %15, i64 48, !dbg !2663
  %16 = load i64, ptr %ptradd8, align 8, !dbg !2663
  store i64 %16, ptr %last_page, align 8, !dbg !2663
    #dbg_declare(ptr %page_after, !2664, !DIExpression(), !2665)
  %17 = load i64, ptr %after, align 8, !dbg !2665
  %18 = load ptr, ptr %mem, align 8, !dbg !2665
  %ptradd9 = getelementptr inbounds i8, ptr %18, i64 32, !dbg !2665
  %19 = load i64, ptr %ptradd9, align 8, !dbg !2665
  %add = add i64 %17, %19, !dbg !2665
  %sub = sub i64 %add, 1, !dbg !2665
  %20 = load i64, ptr %shift, align 8, !dbg !2665
  %shift_underflow = icmp slt i64 %20, 0, !dbg !2665
  %21 = call i1 @llvm.expect.i1(i1 %shift_underflow, i1 false), !dbg !2665
  br i1 %21, label %panic10, label %checkok15, !dbg !2665

checkok15:                                        ; preds = %if.exit
  %shift_exceeds = icmp sge i64 %20, 64, !dbg !2665
  %22 = call i1 @llvm.expect.i1(i1 %shift_exceeds, i1 false), !dbg !2665
  br i1 %22, label %panic16, label %checkok24, !dbg !2665

checkok24:                                        ; preds = %checkok15
  %ashr = ashr i64 %sub, %20, !dbg !2665
  %23 = freeze i64 %ashr, !dbg !2665
  %24 = load ptr, ptr %mem, align 8, !dbg !2665
  %ptradd25 = getelementptr inbounds i8, ptr %24, i64 48, !dbg !2665
  store i64 %23, ptr %ptradd25, align 8, !dbg !2665
  store i64 %23, ptr %page_after, align 8, !dbg !2665
  %25 = load ptr, ptr %mem, align 8, !dbg !2666
  %ptradd26 = getelementptr inbounds i8, ptr %25, i64 64, !dbg !2666
  %26 = load i32, ptr %ptradd26, align 8, !dbg !2666
  %lshrl = lshr i32 %26, 2, !dbg !2666
  %27 = and i32 1, %lshrl, !dbg !2666
  %trunc = trunc i32 %27 to i8, !dbg !2666
  %28 = trunc i8 %trunc to i1, !dbg !2666
  br i1 %28, label %if.then27, label %if.exit35, !dbg !2666

if.then27:                                        ; preds = %checkok24
  %29 = load ptr, ptr %mem, align 8, !dbg !2667
  %30 = load ptr, ptr %29, align 8, !dbg !2667
  %31 = load i64, ptr %after, align 8, !dbg !2667
  %ptradd_any = getelementptr i8, ptr %30, i64 %31, !dbg !2667
  store ptr %ptradd_any, ptr %dst, align 8
  store i8 -86, ptr %val, align 1
  %32 = load ptr, ptr %mem, align 8, !dbg !2667
  %ptradd28 = getelementptr inbounds i8, ptr %32, i64 24, !dbg !2667
  %33 = load i64, ptr %ptradd28, align 8, !dbg !2667
  %34 = load i64, ptr %after, align 8, !dbg !2667
  %sub29 = sub i64 %33, %34, !dbg !2667
  store i64 %sub29, ptr %len, align 8
  %35 = load ptr, ptr %dst, align 8, !dbg !2669
  %neq = icmp ne ptr %35, null, !dbg !2669
  br i1 %neq, label %assert_ok34, label %assert_fail30, !dbg !2669

assert_fail30:                                    ; preds = %if.then27
  store %"char[]" { ptr @.panic_msg.18, i64 37 }, ptr %indirectarg31, align 8
  store %"char[]" { ptr @.file.15, i64 6 }, ptr %indirectarg32, align 8
  store %"char[]" { ptr @.func.4, i64 5 }, ptr %indirectarg33, align 8
  %36 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %36(ptr align 8 %indirectarg31, ptr align 8 %indirectarg32, ptr align 8 %indirectarg33, i32 409) #6, !dbg !2669
  unreachable, !dbg !2669

assert_ok34:                                      ; preds = %if.then27
  %37 = load ptr, ptr %dst, align 8, !dbg !2672
  %38 = load i8, ptr %val, align 1, !dbg !2672
  %39 = load i64, ptr %len, align 8, !dbg !2672
  call void @llvm.memset.p0.i64(ptr %37, i8 %38, i64 %39, i1 false), !dbg !2672
  br label %if.exit35, !dbg !2672

if.exit35:                                        ; preds = %assert_ok34, %checkok24
  %40 = load ptr, ptr %mem, align 8, !dbg !2673
  %ptradd36 = getelementptr inbounds i8, ptr %40, i64 64, !dbg !2673
  %41 = load i32, ptr %ptradd36, align 8, !dbg !2673
  %42 = and i32 1, %41, !dbg !2673
  %trunc37 = trunc i32 %42 to i8, !dbg !2673
  %43 = trunc i8 %trunc37 to i1, !dbg !2673
  br i1 %43, label %or.phi, label %or.rhs, !dbg !2673

or.rhs:                                           ; preds = %if.exit35
  %44 = load ptr, ptr %mem, align 8, !dbg !2673
  %ptradd38 = getelementptr inbounds i8, ptr %44, i64 64, !dbg !2673
  %45 = load i32, ptr %ptradd38, align 8, !dbg !2673
  %lshrl39 = lshr i32 %45, 1, !dbg !2673
  %46 = and i32 1, %lshrl39, !dbg !2673
  %trunc40 = trunc i32 %46 to i8, !dbg !2673
  %47 = trunc i8 %trunc40 to i1, !dbg !2673
  br label %or.phi, !dbg !2673

or.phi:                                           ; preds = %or.rhs, %if.exit35
  %val41 = phi i1 [ true, %if.exit35 ], [ %47, %or.rhs ], !dbg !2673
  br i1 %val41, label %and.rhs, label %and.phi, !dbg !2673

and.rhs:                                          ; preds = %or.phi
  %48 = load i64, ptr %page_after, align 8, !dbg !2673
  %49 = load i64, ptr %last_page, align 8, !dbg !2673
  %lt = icmp ult i64 %48, %49, !dbg !2673
  br label %and.phi, !dbg !2673

and.phi:                                          ; preds = %and.rhs, %or.phi
  %val42 = phi i1 [ false, %or.phi ], [ %lt, %and.rhs ], !dbg !2673
  br i1 %val42, label %if.then43, label %if.exit148, !dbg !2673

if.then43:                                        ; preds = %and.phi
    #dbg_declare(ptr %start, !2674, !DIExpression(), !2676)
  %50 = load i64, ptr %page_after, align 8, !dbg !2676
  %51 = load i64, ptr %shift, align 8, !dbg !2676
  %shift_exceeds44 = icmp uge i64 %51, 64, !dbg !2676
  %52 = call i1 @llvm.expect.i1(i1 %shift_exceeds44, i1 false), !dbg !2676
  br i1 %52, label %panic45, label %checkok53, !dbg !2676

checkok53:                                        ; preds = %if.then43
  %shl = shl i64 %50, %51, !dbg !2676
  %53 = freeze i64 %shl, !dbg !2676
  store i64 %53, ptr %start, align 8, !dbg !2676
    #dbg_declare(ptr %len54, !2677, !DIExpression(), !2678)
  %54 = load i64, ptr %last_page, align 8, !dbg !2678
  %55 = load i64, ptr %page_after, align 8, !dbg !2678
  %sub55 = sub i64 %54, %55, !dbg !2678
  %56 = load i64, ptr %shift, align 8, !dbg !2678
  %shift_exceeds56 = icmp uge i64 %56, 64, !dbg !2678
  %57 = call i1 @llvm.expect.i1(i1 %shift_exceeds56, i1 false), !dbg !2678
  br i1 %57, label %panic57, label %checkok65, !dbg !2678

checkok65:                                        ; preds = %checkok53
  %shl66 = shl i64 %sub55, %56, !dbg !2678
  %58 = freeze i64 %shl66, !dbg !2678
  store i64 %58, ptr %len54, align 8, !dbg !2678
  %59 = load ptr, ptr %mem, align 8, !dbg !2679
  %ptradd67 = getelementptr inbounds i8, ptr %59, i64 64, !dbg !2679
  %60 = load i32, ptr %ptradd67, align 8, !dbg !2679
  %61 = and i32 1, %60, !dbg !2679
  %trunc68 = trunc i32 %61 to i8, !dbg !2679
  %62 = trunc i8 %trunc68 to i1, !dbg !2679
  br i1 %62, label %if.then69, label %if.exit100, !dbg !2679

if.then69:                                        ; preds = %checkok65
    #dbg_declare(ptr %self70, !2680, !DIExpression(), !2679)
  %63 = load ptr, ptr %mem, align 8, !dbg !2679
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %self70, ptr align 8 %63, i32 24, i1 false), !dbg !2679
  %64 = load i64, ptr %start, align 8, !dbg !2679
  %65 = load i64, ptr %len54, align 8, !dbg !2679
  %66 = load ptr, ptr %self70, align 8, !dbg !2681
  %ptradd_any71 = getelementptr i8, ptr %66, i64 %64, !dbg !2681
  %67 = call i8 @std.core.mem.ptr_is_page_aligned(ptr %ptradd_any71) #7, !dbg !2679
  %68 = trunc i8 %67 to i1, !dbg !2679
  br i1 %68, label %assert_ok76, label %assert_fail72, !dbg !2679

assert_fail72:                                    ; preds = %if.then69
  store %"char[]" { ptr @.panic_msg.147, i64 101 }, ptr %indirectarg73, align 8
  store %"char[]" { ptr @.file.141, i64 7 }, ptr %indirectarg74, align 8
  store %"char[]" { ptr @.func.4, i64 5 }, ptr %indirectarg75, align 8
  %69 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %69(ptr align 8 %indirectarg73, ptr align 8 %indirectarg74, ptr align 8 %indirectarg75, i32 248) #6, !dbg !2679
  unreachable, !dbg !2679

assert_ok76:                                      ; preds = %if.then69
  %70 = load ptr, ptr %self70, align 8, !dbg !2682
  %add77 = add i64 %64, %65, !dbg !2682
  %ptradd_any78 = getelementptr i8, ptr %70, i64 %add77, !dbg !2682
  %71 = call i8 @std.core.mem.ptr_is_page_aligned(ptr %ptradd_any78) #7, !dbg !2679
  %72 = trunc i8 %71 to i1, !dbg !2679
  br i1 %72, label %assert_ok83, label %assert_fail79, !dbg !2679

assert_fail79:                                    ; preds = %assert_ok76
  store %"char[]" { ptr @.panic_msg.148, i64 105 }, ptr %indirectarg80, align 8
  store %"char[]" { ptr @.file.141, i64 7 }, ptr %indirectarg81, align 8
  store %"char[]" { ptr @.func.4, i64 5 }, ptr %indirectarg82, align 8
  %73 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %73(ptr align 8 %indirectarg80, ptr align 8 %indirectarg81, ptr align 8 %indirectarg82, i32 248) #6, !dbg !2679
  unreachable, !dbg !2679

assert_ok83:                                      ; preds = %assert_ok76
  %ptradd84 = getelementptr inbounds i8, ptr %self70, i64 8, !dbg !2683
  %74 = load i64, ptr %ptradd84, align 8, !dbg !2683
  %lt85 = icmp ult i64 %64, %74, !dbg !2679
  br i1 %lt85, label %assert_ok90, label %assert_fail86, !dbg !2679

assert_fail86:                                    ; preds = %assert_ok83
  store %"char[]" { ptr @.panic_msg.149, i64 62 }, ptr %indirectarg87, align 8
  store %"char[]" { ptr @.file.141, i64 7 }, ptr %indirectarg88, align 8
  store %"char[]" { ptr @.func.4, i64 5 }, ptr %indirectarg89, align 8
  %75 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %75(ptr align 8 %indirectarg87, ptr align 8 %indirectarg88, ptr align 8 %indirectarg89, i32 248) #6, !dbg !2679
  unreachable, !dbg !2679

assert_ok90:                                      ; preds = %assert_ok83
  %add91 = add i64 %64, %65, !dbg !2684
  %ptradd92 = getelementptr inbounds i8, ptr %self70, i64 8, !dbg !2684
  %76 = load i64, ptr %ptradd92, align 8, !dbg !2684
  %lt93 = icmp ult i64 %add91, %76, !dbg !2679
  br i1 %lt93, label %assert_ok98, label %assert_fail94, !dbg !2679

assert_fail94:                                    ; preds = %assert_ok90
  store %"char[]" { ptr @.panic_msg.154, i64 68 }, ptr %indirectarg95, align 8
  store %"char[]" { ptr @.file.141, i64 7 }, ptr %indirectarg96, align 8
  store %"char[]" { ptr @.func.4, i64 5 }, ptr %indirectarg97, align 8
  %77 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %77(ptr align 8 %indirectarg95, ptr align 8 %indirectarg96, ptr align 8 %indirectarg97, i32 248) #6, !dbg !2679
  unreachable, !dbg !2679

assert_ok98:                                      ; preds = %assert_ok90
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg99, ptr align 8 %63, i32 24, i1 false)
  %78 = call i64 @std.core.mem.vm.VirtualMemory.decommit(ptr align 8 %indirectarg99, i64 %64, i64 %65, i8 zeroext 0), !dbg !2679
  br label %if.exit100, !dbg !2679

if.exit100:                                       ; preds = %assert_ok98, %checkok65
  %79 = load ptr, ptr %mem, align 8, !dbg !2685
  %ptradd101 = getelementptr inbounds i8, ptr %79, i64 64, !dbg !2685
  %80 = load i32, ptr %ptradd101, align 8, !dbg !2685
  %lshrl102 = lshr i32 %80, 1, !dbg !2685
  %81 = and i32 1, %lshrl102, !dbg !2685
  %trunc103 = trunc i32 %81 to i8, !dbg !2685
  %82 = trunc i8 %trunc103 to i1, !dbg !2685
  br i1 %82, label %if.then104, label %if.exit147, !dbg !2685

if.then104:                                       ; preds = %if.exit100
  %83 = load ptr, ptr %mem, align 8, !dbg !2685
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %self105, ptr align 8 %83, i32 24, i1 false)
  %84 = load i64, ptr %start, align 8
  store i64 %84, ptr %offset, align 8
  %85 = load i64, ptr %len54, align 8
  store i64 %85, ptr %len106, align 8
  store i32 0, ptr %access, align 4
  %86 = load ptr, ptr %self105, align 8, !dbg !2686
  %87 = load i64, ptr %offset, align 8, !dbg !2686
  %ptradd_any107 = getelementptr i8, ptr %86, i64 %87, !dbg !2686
  %88 = call i8 @std.core.mem.ptr_is_page_aligned(ptr %ptradd_any107) #7, !dbg !2689
  %89 = trunc i8 %88 to i1, !dbg !2689
  br i1 %89, label %assert_ok112, label %assert_fail108, !dbg !2689

assert_fail108:                                   ; preds = %if.then104
  store %"char[]" { ptr @.panic_msg.147, i64 101 }, ptr %indirectarg109, align 8
  store %"char[]" { ptr @.file.141, i64 7 }, ptr %indirectarg110, align 8
  store %"char[]" { ptr @.func.4, i64 5 }, ptr %indirectarg111, align 8
  %90 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %90(ptr align 8 %indirectarg109, ptr align 8 %indirectarg110, ptr align 8 %indirectarg111, i32 249) #6, !dbg !2689
  unreachable, !dbg !2689

assert_ok112:                                     ; preds = %if.then104
  %91 = load ptr, ptr %self105, align 8, !dbg !2690
  %92 = load i64, ptr %offset, align 8, !dbg !2690
  %93 = load i64, ptr %len106, align 8, !dbg !2690
  %add113 = add i64 %92, %93, !dbg !2690
  %ptradd_any114 = getelementptr i8, ptr %91, i64 %add113, !dbg !2690
  %94 = call i8 @std.core.mem.ptr_is_page_aligned(ptr %ptradd_any114) #7, !dbg !2689
  %95 = trunc i8 %94 to i1, !dbg !2689
  br i1 %95, label %assert_ok119, label %assert_fail115, !dbg !2689

assert_fail115:                                   ; preds = %assert_ok112
  store %"char[]" { ptr @.panic_msg.148, i64 105 }, ptr %indirectarg116, align 8
  store %"char[]" { ptr @.file.141, i64 7 }, ptr %indirectarg117, align 8
  store %"char[]" { ptr @.func.4, i64 5 }, ptr %indirectarg118, align 8
  %96 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %96(ptr align 8 %indirectarg116, ptr align 8 %indirectarg117, ptr align 8 %indirectarg118, i32 249) #6, !dbg !2689
  unreachable, !dbg !2689

assert_ok119:                                     ; preds = %assert_ok112
  %97 = load i64, ptr %offset, align 8, !dbg !2691
  %ptradd120 = getelementptr inbounds i8, ptr %self105, i64 8, !dbg !2691
  %98 = load i64, ptr %ptradd120, align 8, !dbg !2691
  %lt121 = icmp ult i64 %97, %98, !dbg !2689
  br i1 %lt121, label %assert_ok126, label %assert_fail122, !dbg !2689

assert_fail122:                                   ; preds = %assert_ok119
  store %"char[]" { ptr @.panic_msg.149, i64 62 }, ptr %indirectarg123, align 8
  store %"char[]" { ptr @.file.141, i64 7 }, ptr %indirectarg124, align 8
  store %"char[]" { ptr @.func.4, i64 5 }, ptr %indirectarg125, align 8
  %99 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %99(ptr align 8 %indirectarg123, ptr align 8 %indirectarg124, ptr align 8 %indirectarg125, i32 249) #6, !dbg !2689
  unreachable, !dbg !2689

assert_ok126:                                     ; preds = %assert_ok119
  %100 = load i64, ptr %offset, align 8, !dbg !2692
  %101 = load i64, ptr %len106, align 8, !dbg !2692
  %add127 = add i64 %100, %101, !dbg !2692
  %ptradd128 = getelementptr inbounds i8, ptr %self105, i64 8, !dbg !2692
  %102 = load i64, ptr %ptradd128, align 8, !dbg !2692
  %lt129 = icmp ult i64 %add127, %102, !dbg !2689
  br i1 %lt129, label %assert_ok134, label %assert_fail130, !dbg !2689

assert_fail130:                                   ; preds = %assert_ok126
  store %"char[]" { ptr @.panic_msg.154, i64 68 }, ptr %indirectarg131, align 8
  store %"char[]" { ptr @.file.141, i64 7 }, ptr %indirectarg132, align 8
  store %"char[]" { ptr @.func.4, i64 5 }, ptr %indirectarg133, align 8
  %103 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %103(ptr align 8 %indirectarg131, ptr align 8 %indirectarg132, ptr align 8 %indirectarg133, i32 249) #6, !dbg !2689
  unreachable, !dbg !2689

assert_ok134:                                     ; preds = %assert_ok126
  %104 = load ptr, ptr %self105, align 8, !dbg !2693
  %105 = load i64, ptr %offset, align 8, !dbg !2693
  %ptradd_any135 = getelementptr i8, ptr %104, i64 %105, !dbg !2693
  %106 = load i64, ptr %len106, align 8, !dbg !2693
  %107 = load i32, ptr %access, align 4, !dbg !2693
  %108 = call i8 @std.core.mem.ptr_is_page_aligned(ptr %ptradd_any135) #7, !dbg !2693
  %109 = trunc i8 %108 to i1, !dbg !2693
  br i1 %109, label %assert_ok140, label %assert_fail136, !dbg !2693

assert_fail136:                                   ; preds = %assert_ok134
  store %"char[]" { ptr @.panic_msg.151, i64 88 }, ptr %indirectarg137, align 8
  store %"char[]" { ptr @.file.152, i64 9 }, ptr %indirectarg138, align 8
  store %"char[]" { ptr @.func.4, i64 5 }, ptr %indirectarg139, align 8
  %110 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %110(ptr align 8 %indirectarg137, ptr align 8 %indirectarg138, ptr align 8 %indirectarg139, i32 265) #6, !dbg !2693
  unreachable, !dbg !2693

assert_ok140:                                     ; preds = %assert_ok134
  %ptradd_any141 = getelementptr i8, ptr %ptradd_any135, i64 %106, !dbg !2694
  %111 = call i8 @std.core.mem.ptr_is_page_aligned(ptr %ptradd_any141) #7, !dbg !2693
  %112 = trunc i8 %111 to i1, !dbg !2693
  br i1 %112, label %assert_ok146, label %assert_fail142, !dbg !2693

assert_fail142:                                   ; preds = %assert_ok140
  store %"char[]" { ptr @.panic_msg.153, i64 91 }, ptr %indirectarg143, align 8
  store %"char[]" { ptr @.file.152, i64 9 }, ptr %indirectarg144, align 8
  store %"char[]" { ptr @.func.4, i64 5 }, ptr %indirectarg145, align 8
  %113 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %113(ptr align 8 %indirectarg143, ptr align 8 %indirectarg144, ptr align 8 %indirectarg145, i32 265) #6, !dbg !2693
  unreachable, !dbg !2693

assert_ok146:                                     ; preds = %assert_ok140
  %114 = call i64 @std.core.mem.vm.protect(ptr %ptradd_any135, i64 %106, i32 %107), !dbg !2693
  %not_err = icmp eq i64 %114, 0, !dbg !2693
  %115 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !2693
  br i1 %115, label %after_check, label %expr_block.exit, !dbg !2693

after_check:                                      ; preds = %assert_ok146
  br label %expr_block.exit, !dbg !2693

expr_block.exit:                                  ; preds = %assert_ok146, %after_check
  br label %if.exit147, !dbg !2685

if.exit147:                                       ; preds = %expr_block.exit, %if.exit100
  br label %if.exit148, !dbg !2685

if.exit148:                                       ; preds = %if.exit147, %and.phi
  %116 = load ptr, ptr %mem, align 8, !dbg !2695
  %ptradd149 = getelementptr inbounds i8, ptr %116, i64 24, !dbg !2695
  %117 = load i64, ptr %after, align 8, !dbg !2695
  store i64 %117, ptr %ptradd149, align 8, !dbg !2695
  ret void, !dbg !2695

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.141, i64 7 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.4, i64 5 }, ptr %indirectarg2, align 8
  %118 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %118(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 180) #6, !dbg !2653
  unreachable, !dbg !2653

panic10:                                          ; preds = %if.exit
  store i64 %20, ptr %taddr, align 8
  %119 = insertvalue %any undef, ptr %taddr, 0
  %120 = insertvalue %any %119, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.146, i64 35 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.file.141, i64 7 }, ptr %indirectarg12, align 8
  store %"char[]" { ptr @.func.4, i64 5 }, ptr %indirectarg13, align 8
  store %any %120, ptr %varargslots, align 16
  %121 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %121, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg14, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, ptr align 8 %indirectarg13, i32 235, ptr align 8 %indirectarg14) #6, !dbg !2665
  unreachable, !dbg !2665

panic16:                                          ; preds = %checkok15
  store i64 %20, ptr %taddr17, align 8
  %122 = insertvalue %any undef, ptr %taddr17, 0
  %123 = insertvalue %any %122, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.146, i64 35 }, ptr %indirectarg18, align 8
  store %"char[]" { ptr @.file.141, i64 7 }, ptr %indirectarg19, align 8
  store %"char[]" { ptr @.func.4, i64 5 }, ptr %indirectarg20, align 8
  store %any %123, ptr %varargslots21, align 16
  %124 = insertvalue %"any[]" undef, ptr %varargslots21, 0
  %"$$temp22" = insertvalue %"any[]" %124, i64 1, 1
  store %"any[]" %"$$temp22", ptr %indirectarg23, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg18, ptr align 8 %indirectarg19, ptr align 8 %indirectarg20, i32 235, ptr align 8 %indirectarg23) #6, !dbg !2665
  unreachable, !dbg !2665

panic45:                                          ; preds = %if.then43
  store i64 %51, ptr %taddr46, align 8
  %125 = insertvalue %any undef, ptr %taddr46, 0
  %126 = insertvalue %any %125, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.146, i64 35 }, ptr %indirectarg47, align 8
  store %"char[]" { ptr @.file.141, i64 7 }, ptr %indirectarg48, align 8
  store %"char[]" { ptr @.func.4, i64 5 }, ptr %indirectarg49, align 8
  store %any %126, ptr %varargslots50, align 16
  %127 = insertvalue %"any[]" undef, ptr %varargslots50, 0
  %"$$temp51" = insertvalue %"any[]" %127, i64 1, 1
  store %"any[]" %"$$temp51", ptr %indirectarg52, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg47, ptr align 8 %indirectarg48, ptr align 8 %indirectarg49, i32 246, ptr align 8 %indirectarg52) #6, !dbg !2676
  unreachable, !dbg !2676

panic57:                                          ; preds = %checkok53
  store i64 %56, ptr %taddr58, align 8
  %128 = insertvalue %any undef, ptr %taddr58, 0
  %129 = insertvalue %any %128, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.146, i64 35 }, ptr %indirectarg59, align 8
  store %"char[]" { ptr @.file.141, i64 7 }, ptr %indirectarg60, align 8
  store %"char[]" { ptr @.func.4, i64 5 }, ptr %indirectarg61, align 8
  store %any %129, ptr %varargslots62, align 16
  %130 = insertvalue %"any[]" undef, ptr %varargslots62, 0
  %"$$temp63" = insertvalue %"any[]" %130, i64 1, 1
  store %"any[]" %"$$temp63", ptr %indirectarg64, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg59, ptr align 8 %indirectarg60, ptr align 8 %indirectarg61, i32 247, ptr align 8 %indirectarg64) #6, !dbg !2678
  unreachable, !dbg !2678
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.core.mem.allocator.Vmem.free(ptr %0) #0 comdat !dbg !2696 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %taddr = alloca ptr, align 8
  %taddr4 = alloca i64, align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg7 = alloca %"char[]", align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg8 = alloca %"any[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %indirectarg13 = alloca %"char[]", align 8
  %indirectarg14 = alloca %"char[]", align 8
  %indirectarg16 = alloca %"char[]", align 8
  %indirectarg17 = alloca %"char[]", align 8
  %indirectarg18 = alloca %"char[]", align 8
  %taddr21 = alloca i64, align 8
  %taddr22 = alloca i64, align 8
  %indirectarg23 = alloca %"char[]", align 8
  %indirectarg24 = alloca %"char[]", align 8
  %indirectarg25 = alloca %"char[]", align 8
  %varargslots26 = alloca [2 x %any], align 16
  %indirectarg29 = alloca %"any[]", align 8
  %1 = icmp eq ptr %0, null, !dbg !2699
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2699
  br i1 %2, label %panic, label %checkok, !dbg !2699

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2700, !DIExpression(), !2701)
  %3 = load ptr, ptr %self, align 8, !dbg !2702
  %4 = load ptr, ptr %3, align 8, !dbg !2702
  %i2nb = icmp eq ptr %4, null, !dbg !2702
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !2702

if.then:                                          ; preds = %checkok
  ret void, !dbg !2702

if.exit:                                          ; preds = %checkok
  %5 = load ptr, ptr %self, align 8, !dbg !2703
  %6 = load ptr, ptr %5, align 8, !dbg !2703
  store ptr %6, ptr %taddr, align 8
  %7 = load ptr, ptr %taddr, align 8
  %8 = load ptr, ptr %self, align 8, !dbg !2703
  %ptradd = getelementptr inbounds i8, ptr %8, i64 24, !dbg !2703
  %9 = load i64, ptr %ptradd, align 8, !dbg !2703
  %add = add i64 0, %9, !dbg !2703
  %gt = icmp sgt i64 0, %add, !dbg !2703
  %sub = sub i64 %add, 0, !dbg !2703
  %10 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !2703
  br i1 %10, label %panic3, label %checkok9, !dbg !2703

checkok9:                                         ; preds = %if.exit
  br label %cond, !dbg !2703

cond:                                             ; preds = %assign, %checkok9
  %11 = phi i64 [ 0, %checkok9 ], [ %add11, %assign ], !dbg !2703
  %lt = icmp slt i64 %11, %add, !dbg !2703
  br i1 %lt, label %assign, label %exit, !dbg !2703

assign:                                           ; preds = %cond
  %ptradd10 = getelementptr inbounds i8, ptr %7, i64 %11, !dbg !2703
  store i8 -86, ptr %ptradd10, align 1, !dbg !2703
  %add11 = add i64 %11, 1, !dbg !2703
  br label %cond, !dbg !2703

exit:                                             ; preds = %cond
  %12 = load ptr, ptr %self, align 8, !dbg !2704
  %13 = load ptr, ptr %12, align 8, !dbg !2705
  %neq = icmp ne ptr %13, null, !dbg !2704
  br i1 %neq, label %assert_ok, label %assert_fail, !dbg !2704

assert_fail:                                      ; preds = %exit
  store %"char[]" { ptr @.panic_msg.159, i64 91 }, ptr %indirectarg12, align 8
  store %"char[]" { ptr @.file.141, i64 7 }, ptr %indirectarg13, align 8
  store %"char[]" { ptr @.func.43, i64 4 }, ptr %indirectarg14, align 8
  %14 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %14(ptr align 8 %indirectarg12, ptr align 8 %indirectarg13, ptr align 8 %indirectarg14, i32 195) #6, !dbg !2704
  unreachable, !dbg !2704

assert_ok:                                        ; preds = %exit
  %15 = call i64 @std.core.mem.vm.VirtualMemory.destroy(ptr %12), !dbg !2704
  %16 = load ptr, ptr %self, align 8, !dbg !2706
  %checknull = icmp eq ptr %16, null, !dbg !2706
  %17 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !2706
  br i1 %17, label %panic15, label %checkok19, !dbg !2706

checkok19:                                        ; preds = %assert_ok
  %18 = ptrtoint ptr %16 to i64, !dbg !2706
  %19 = urem i64 %18, 8, !dbg !2706
  %20 = icmp ne i64 %19, 0, !dbg !2706
  %21 = call i1 @llvm.expect.i1(i1 %20, i1 false), !dbg !2706
  br i1 %21, label %panic20, label %checkok30, !dbg !2706

checkok30:                                        ; preds = %checkok19
  call void @llvm.memset.p0.i64(ptr align 8 %16, i8 0, i64 72, i1 false), !dbg !2706
  ret void, !dbg !2706

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.141, i64 7 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.43, i64 4 }, ptr %indirectarg2, align 8
  %22 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %22(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 186) #6, !dbg !2701
  unreachable, !dbg !2701

panic3:                                           ; preds = %if.exit
  store i64 %sub, ptr %taddr4, align 8
  %23 = insertvalue %any undef, ptr %taddr4, 0
  %24 = insertvalue %any %23, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.33, i64 43 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.file.141, i64 7 }, ptr %indirectarg6, align 8
  store %"char[]" { ptr @.func.43, i64 4 }, ptr %indirectarg7, align 8
  store %any %24, ptr %varargslots, align 16
  %25 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %25, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg8, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, ptr align 8 %indirectarg7, i32 193, ptr align 8 %indirectarg8) #6, !dbg !2703
  unreachable, !dbg !2703

panic15:                                          ; preds = %assert_ok
  store %"char[]" { ptr @.panic_msg.96, i64 45 }, ptr %indirectarg16, align 8
  store %"char[]" { ptr @.file.141, i64 7 }, ptr %indirectarg17, align 8
  store %"char[]" { ptr @.func.43, i64 4 }, ptr %indirectarg18, align 8
  %26 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %26(ptr align 8 %indirectarg16, ptr align 8 %indirectarg17, ptr align 8 %indirectarg18, i32 196) #6, !dbg !2706
  unreachable, !dbg !2706

panic20:                                          ; preds = %checkok19
  store i64 8, ptr %taddr21, align 8
  %27 = insertvalue %any undef, ptr %taddr21, 0
  %28 = insertvalue %any %27, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %19, ptr %taddr22, align 8
  %29 = insertvalue %any undef, ptr %taddr22, 0
  %30 = insertvalue %any %29, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.31, i64 94 }, ptr %indirectarg23, align 8
  store %"char[]" { ptr @.file.141, i64 7 }, ptr %indirectarg24, align 8
  store %"char[]" { ptr @.func.43, i64 4 }, ptr %indirectarg25, align 8
  store %any %28, ptr %varargslots26, align 16
  %ptradd27 = getelementptr inbounds i8, ptr %varargslots26, i64 16
  store %any %30, ptr %ptradd27, align 16
  %31 = insertvalue %"any[]" undef, ptr %varargslots26, 0
  %"$$temp28" = insertvalue %"any[]" %31, i64 2, 1
  store %"any[]" %"$$temp28", ptr %indirectarg29, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg23, ptr align 8 %indirectarg24, ptr align 8 %indirectarg25, i32 196, ptr align 8 %indirectarg29) #6, !dbg !2706
  unreachable, !dbg !2706
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.core.mem.allocator.LazyTempAllocator.acquire(ptr %0, ptr %1, i64 %2, i32 %3, i64 %4) #0 comdat !dbg !2707 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %bytes = alloca i64, align 8
  %init_type = alloca i32, align 4
  %alignment = alloca i64, align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %sretparam = alloca %any, align 8
  %reterr = alloca i64, align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %x = alloca i64, align 8
  %indirectarg15 = alloca %"char[]", align 8
  %indirectarg16 = alloca %"char[]", align 8
  %indirectarg17 = alloca %"char[]", align 8
  %indirectarg20 = alloca %"char[]", align 8
  %indirectarg21 = alloca %"char[]", align 8
  %indirectarg22 = alloca %"char[]", align 8
  %retparam = alloca ptr, align 8
  %5 = icmp eq ptr %1, null, !dbg !2711
  %6 = call i1 @llvm.expect.i1(i1 %5, i1 false), !dbg !2711
  br i1 %6, label %panic, label %checkok, !dbg !2711

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !2712, !DIExpression(), !2713)
  store i64 %2, ptr %bytes, align 8
    #dbg_declare(ptr %bytes, !2714, !DIExpression(), !2713)
  store i32 %3, ptr %init_type, align 4
    #dbg_declare(ptr %init_type, !2715, !DIExpression(), !2713)
  store i64 %4, ptr %alignment, align 8
    #dbg_declare(ptr %alignment, !2716, !DIExpression(), !2713)
  %7 = call ptr @llvm.threadlocal.address.p0(ptr @std.core.mem.allocator.top_temp), !dbg !2717
  %8 = load ptr, ptr %7, align 8, !dbg !2717
  %i2nb = icmp eq ptr %8, null, !dbg !2717
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !2717

if.then:                                          ; preds = %checkok
  %9 = call ptr @llvm.threadlocal.address.p0(ptr @std.core.mem.allocator.top_temp), !dbg !2718
  %10 = load ptr, ptr %9, align 8, !dbg !2718
  %i2nb3 = icmp eq ptr %10, null, !dbg !2718
  br i1 %i2nb3, label %assert_ok, label %assert_fail, !dbg !2718

assert_fail:                                      ; preds = %if.then
  store %"char[]" { ptr @.panic_msg.172, i64 86 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.24, i64 16 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg6, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 523) #6, !dbg !2717
  unreachable, !dbg !2717

assert_ok:                                        ; preds = %if.then
  call void @std.core.mem.allocator.create_temp_allocator_on_demand(ptr sret(%any) align 8 %sretparam), !dbg !2717
  br label %if.exit, !dbg !2717

if.exit:                                          ; preds = %assert_ok, %checkok
  %12 = call ptr @llvm.threadlocal.address.p0(ptr @std.core.mem.allocator.top_temp), !dbg !2719
  %13 = load ptr, ptr %12, align 8, !dbg !2719
  %14 = load i64, ptr %bytes, align 8, !dbg !2719
  %15 = load i32, ptr %init_type, align 4, !dbg !2719
  %16 = load i64, ptr %alignment, align 8, !dbg !2719
  %lt = icmp ult i64 0, %14, !dbg !2719
  br i1 %lt, label %assert_ok11, label %assert_fail7, !dbg !2719

assert_fail7:                                     ; preds = %if.exit
  store %"char[]" { ptr @.panic_msg.13, i64 29 }, ptr %indirectarg8, align 8
  store %"char[]" { ptr @.file.24, i64 16 }, ptr %indirectarg9, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg10, align 8
  %17 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %17(ptr align 8 %indirectarg8, ptr align 8 %indirectarg9, ptr align 8 %indirectarg10, i32 524) #6, !dbg !2719
  unreachable, !dbg !2719

assert_ok11:                                      ; preds = %if.exit
  %i2nb12 = icmp eq i64 %16, 0, !dbg !2720
  br i1 %i2nb12, label %or.phi, label %or.rhs, !dbg !2720

or.rhs:                                           ; preds = %assert_ok11
  store i64 %16, ptr %x, align 8
  %18 = load i64, ptr %x, align 8, !dbg !2721
  %neq = icmp ne i64 0, %18, !dbg !2721
  br i1 %neq, label %and.rhs, label %and.phi, !dbg !2721

and.rhs:                                          ; preds = %or.rhs
  %19 = load i64, ptr %x, align 8, !dbg !2721
  %20 = load i64, ptr %x, align 8, !dbg !2721
  %sub = sub i64 %20, 1, !dbg !2721
  %and = and i64 %19, %sub, !dbg !2721
  %eq = icmp eq i64 %and, 0, !dbg !2721
  br label %and.phi, !dbg !2721

and.phi:                                          ; preds = %and.rhs, %or.rhs
  %val = phi i1 [ false, %or.rhs ], [ %eq, %and.rhs ], !dbg !2721
  br label %or.phi, !dbg !2721

or.phi:                                           ; preds = %and.phi, %assert_ok11
  %val13 = phi i1 [ true, %assert_ok11 ], [ %val, %and.phi ], !dbg !2721
  br i1 %val13, label %assert_ok18, label %assert_fail14, !dbg !2721

assert_fail14:                                    ; preds = %or.phi
  store %"char[]" { ptr @.panic_msg.11, i64 65 }, ptr %indirectarg15, align 8
  store %"char[]" { ptr @.file.24, i64 16 }, ptr %indirectarg16, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg17, align 8
  %21 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %21(ptr align 8 %indirectarg15, ptr align 8 %indirectarg16, ptr align 8 %indirectarg17, i32 524) #6, !dbg !2719
  unreachable, !dbg !2719

assert_ok18:                                      ; preds = %or.phi
  %le = icmp ule i64 %16, 268435456, !dbg !2719
  br i1 %le, label %assert_ok23, label %assert_fail19, !dbg !2719

assert_fail19:                                    ; preds = %assert_ok18
  store %"char[]" { ptr @.panic_msg.12, i64 80 }, ptr %indirectarg20, align 8
  store %"char[]" { ptr @.file.24, i64 16 }, ptr %indirectarg21, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg22, align 8
  %22 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %22(ptr align 8 %indirectarg20, ptr align 8 %indirectarg21, ptr align 8 %indirectarg22, i32 524) #6, !dbg !2719
  unreachable, !dbg !2719

assert_ok23:                                      ; preds = %assert_ok18
  %23 = call i64 @std.core.mem.allocator.TempAllocator.acquire(ptr %retparam, ptr %13, i64 %14, i32 %15, i64 %16), !dbg !2719
  %not_err = icmp eq i64 %23, 0, !dbg !2719
  %24 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !2719
  br i1 %24, label %after_check, label %assign_optional, !dbg !2719

assign_optional:                                  ; preds = %assert_ok23
  store i64 %23, ptr %reterr, align 8, !dbg !2719
  br label %err_retblock, !dbg !2719

after_check:                                      ; preds = %assert_ok23
  %25 = load ptr, ptr %retparam, align 8, !dbg !2719
  store ptr %25, ptr %0, align 8, !dbg !2719
  ret i64 0, !dbg !2719

err_retblock:                                     ; preds = %assign_optional
  %26 = load i64, ptr %reterr, align 8, !dbg !2719
  ret i64 %26, !dbg !2719

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.24, i64 16 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg2, align 8
  %27 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %27(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 521) #6, !dbg !2713
  unreachable, !dbg !2713
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.core.mem.allocator.LazyTempAllocator.resize(ptr %0, ptr %1, ptr %2, i64 %3, i64 %4) #0 comdat !dbg !2723 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %old_ptr = alloca ptr, align 8
  %new_bytes = alloca i64, align 8
  %alignment = alloca i64, align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %sretparam = alloca %any, align 8
  %reterr = alloca i64, align 8
  %retparam = alloca ptr, align 8
  %5 = icmp eq ptr %1, null, !dbg !2726
  %6 = call i1 @llvm.expect.i1(i1 %5, i1 false), !dbg !2726
  br i1 %6, label %panic, label %checkok, !dbg !2726

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !2727, !DIExpression(), !2728)
  store ptr %2, ptr %old_ptr, align 8
    #dbg_declare(ptr %old_ptr, !2729, !DIExpression(), !2728)
  store i64 %3, ptr %new_bytes, align 8
    #dbg_declare(ptr %new_bytes, !2730, !DIExpression(), !2728)
  store i64 %4, ptr %alignment, align 8
    #dbg_declare(ptr %alignment, !2731, !DIExpression(), !2728)
  %7 = call ptr @llvm.threadlocal.address.p0(ptr @std.core.mem.allocator.top_temp), !dbg !2732
  %8 = load ptr, ptr %7, align 8, !dbg !2732
  %i2nb = icmp eq ptr %8, null, !dbg !2732
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !2732

if.then:                                          ; preds = %checkok
  %9 = call ptr @llvm.threadlocal.address.p0(ptr @std.core.mem.allocator.top_temp), !dbg !2733
  %10 = load ptr, ptr %9, align 8, !dbg !2733
  %i2nb3 = icmp eq ptr %10, null, !dbg !2733
  br i1 %i2nb3, label %assert_ok, label %assert_fail, !dbg !2733

assert_fail:                                      ; preds = %if.then
  store %"char[]" { ptr @.panic_msg.172, i64 86 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.24, i64 16 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg6, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 529) #6, !dbg !2732
  unreachable, !dbg !2732

assert_ok:                                        ; preds = %if.then
  call void @std.core.mem.allocator.create_temp_allocator_on_demand(ptr sret(%any) align 8 %sretparam), !dbg !2732
  br label %if.exit, !dbg !2732

if.exit:                                          ; preds = %assert_ok, %checkok
  %12 = call ptr @llvm.threadlocal.address.p0(ptr @std.core.mem.allocator.top_temp), !dbg !2734
  %13 = load ptr, ptr %12, align 8
  %14 = load ptr, ptr %old_ptr, align 8
  %15 = load i64, ptr %new_bytes, align 8
  %16 = load i64, ptr %alignment, align 8
  %17 = call i64 @std.core.mem.allocator.TempAllocator.resize(ptr %retparam, ptr %13, ptr %14, i64 %15, i64 %16), !dbg !2734
  %not_err = icmp eq i64 %17, 0, !dbg !2734
  %18 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !2734
  br i1 %18, label %after_check, label %assign_optional, !dbg !2734

assign_optional:                                  ; preds = %if.exit
  store i64 %17, ptr %reterr, align 8, !dbg !2734
  br label %err_retblock, !dbg !2734

after_check:                                      ; preds = %if.exit
  %19 = load ptr, ptr %retparam, align 8, !dbg !2734
  store ptr %19, ptr %0, align 8, !dbg !2734
  ret i64 0, !dbg !2734

err_retblock:                                     ; preds = %assign_optional
  %20 = load i64, ptr %reterr, align 8, !dbg !2734
  ret i64 %20, !dbg !2734

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.24, i64 16 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg2, align 8
  %21 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %21(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 527) #6, !dbg !2728
  unreachable, !dbg !2728
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.core.mem.allocator.LazyTempAllocator.release(ptr %0, ptr %1, i8 zeroext %2) #0 comdat !dbg !2735 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %old_ptr = alloca ptr, align 8
  %aligned = alloca i8, align 1
  %3 = icmp eq ptr %0, null, !dbg !2738
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !2738
  br i1 %4, label %panic, label %checkok, !dbg !2738

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2739, !DIExpression(), !2740)
  store ptr %1, ptr %old_ptr, align 8
    #dbg_declare(ptr %old_ptr, !2741, !DIExpression(), !2740)
  store i8 %2, ptr %aligned, align 1
    #dbg_declare(ptr %aligned, !2742, !DIExpression(), !2740)
  ret void

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.24, i64 16 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.6, i64 7 }, ptr %indirectarg2, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 533) #6, !dbg !2740
  unreachable, !dbg !2740
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.core.mem.allocator.NullAllocator.acquire(ptr %0, ptr %1, i64 %2, i32 %3, i64 %4) #0 comdat !dbg !2743 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %bytes = alloca i64, align 8
  %init_type = alloca i32, align 4
  %alignment = alloca i64, align 8
  %5 = icmp eq ptr %1, null, !dbg !2747
  %6 = call i1 @llvm.expect.i1(i1 %5, i1 false), !dbg !2747
  br i1 %6, label %panic, label %checkok, !dbg !2747

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !2748, !DIExpression(), !2749)
  store i64 %2, ptr %bytes, align 8
    #dbg_declare(ptr %bytes, !2750, !DIExpression(), !2749)
  store i32 %3, ptr %init_type, align 4
    #dbg_declare(ptr %init_type, !2751, !DIExpression(), !2749)
  store i64 %4, ptr %alignment, align 8
    #dbg_declare(ptr %alignment, !2752, !DIExpression(), !2749)
  ret i64 ptrtoint (ptr @std.core.mem.OUT_OF_MEMORY to i64), !dbg !2753

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.24, i64 16 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.10, i64 7 }, ptr %indirectarg2, align 8
  %7 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %7(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 540) #6, !dbg !2749
  unreachable, !dbg !2749
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.core.mem.allocator.NullAllocator.resize(ptr %0, ptr %1, ptr %2, i64 %3, i64 %4) #0 comdat !dbg !2754 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %old_ptr = alloca ptr, align 8
  %new_bytes = alloca i64, align 8
  %alignment = alloca i64, align 8
  %5 = icmp eq ptr %1, null, !dbg !2757
  %6 = call i1 @llvm.expect.i1(i1 %5, i1 false), !dbg !2757
  br i1 %6, label %panic, label %checkok, !dbg !2757

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !2758, !DIExpression(), !2759)
  store ptr %2, ptr %old_ptr, align 8
    #dbg_declare(ptr %old_ptr, !2760, !DIExpression(), !2759)
  store i64 %3, ptr %new_bytes, align 8
    #dbg_declare(ptr %new_bytes, !2761, !DIExpression(), !2759)
  store i64 %4, ptr %alignment, align 8
    #dbg_declare(ptr %alignment, !2762, !DIExpression(), !2759)
  ret i64 ptrtoint (ptr @std.core.mem.OUT_OF_MEMORY to i64), !dbg !2763

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.24, i64 16 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.16, i64 6 }, ptr %indirectarg2, align 8
  %7 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %7(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 545) #6, !dbg !2759
  unreachable, !dbg !2759
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.core.mem.allocator.NullAllocator.release(ptr %0, ptr %1, i8 zeroext %2) #0 comdat !dbg !2764 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %old_ptr = alloca ptr, align 8
  %aligned = alloca i8, align 1
  %3 = icmp eq ptr %0, null, !dbg !2767
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !2767
  br i1 %4, label %panic, label %checkok, !dbg !2767

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2768, !DIExpression(), !2769)
  store ptr %1, ptr %old_ptr, align 8
    #dbg_declare(ptr %old_ptr, !2770, !DIExpression(), !2769)
  store i8 %2, ptr %aligned, align 1
    #dbg_declare(ptr %aligned, !2771, !DIExpression(), !2769)
  ret void

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.24, i64 16 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.6, i64 7 }, ptr %indirectarg2, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 550) #6, !dbg !2769
  unreachable, !dbg !2769
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @std.core.mem.allocator.alignment_for_allocation(i64 %0) #0 !dbg !2772 {
entry:
  %alignment = alloca i64, align 8
  store i64 %0, ptr %alignment, align 8
    #dbg_declare(ptr %alignment, !2775, !DIExpression(), !2776)
  %1 = load i64, ptr %alignment, align 8, !dbg !2777
  %gt = icmp ugt i64 16, %1, !dbg !2777
  br i1 %gt, label %cond.lhs, label %cond.rhs, !dbg !2777

cond.lhs:                                         ; preds = %entry
  br label %cond.phi, !dbg !2777

cond.rhs:                                         ; preds = %entry
  %2 = load i64, ptr %alignment, align 8, !dbg !2777
  br label %cond.phi, !dbg !2777

cond.phi:                                         ; preds = %cond.rhs, %cond.lhs
  %val = phi i64 [ 16, %cond.lhs ], [ %2, %cond.rhs ], !dbg !2777
  ret i64 %val, !dbg !2777
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.core.mem.allocator.clone_any(ptr noalias sret(%any) align 8 %0, ptr align 8 %1, ptr align 8 %2) #0 comdat !dbg !2778 {
entry:
  %size = alloca i64, align 8
  %data = alloca ptr, align 8
  %allocator = alloca %any, align 8
  %size2 = alloca i64, align 8
  %error_var = alloca i64, align 8
  %allocator3 = alloca %any, align 8
  %size4 = alloca i64, align 8
  %blockret = alloca ptr, align 8
  %x = alloca i64, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg7 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg14 = alloca %"char[]", align 8
  %indirectarg15 = alloca %"char[]", align 8
  %indirectarg16 = alloca %"char[]", align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %indirectarg20 = alloca %"char[]", align 8
  %indirectarg21 = alloca %"char[]", align 8
  %indirectarg22 = alloca %"char[]", align 8
  %retparam = alloca ptr, align 8
  %indirectarg23 = alloca %"char[]", align 8
  %indirectarg24 = alloca %"char[]", align 8
  %indirectarg25 = alloca %"char[]", align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg26 = alloca %"any[]", align 8
  %dst = alloca ptr, align 8
  %src = alloca ptr, align 8
  %len = alloca i64, align 8
  %indirectarg29 = alloca %"char[]", align 8
  %indirectarg30 = alloca %"char[]", align 8
  %indirectarg31 = alloca %"char[]", align 8
  %indirectarg39 = alloca %"char[]", align 8
  %indirectarg40 = alloca %"char[]", align 8
  %indirectarg41 = alloca %"char[]", align 8
  %indirectarg53 = alloca %"char[]", align 8
  %indirectarg54 = alloca %"char[]", align 8
  %indirectarg55 = alloca %"char[]", align 8
  %ptr = alloca ptr, align 8
  %type58 = alloca i64, align 8
    #dbg_declare(ptr %1, !2785, !DIExpression(), !2786)
    #dbg_declare(ptr %2, !2787, !DIExpression(), !2786)
    #dbg_declare(ptr %size, !2788, !DIExpression(), !2789)
  store ptr null, ptr %.cachedtype, align 8, !dbg !2789
  %ptradd = getelementptr inbounds i8, ptr %2, i64 8, !dbg !2789
  %3 = load i64, ptr %ptradd, align 8, !dbg !2789
  %"introspect*" = inttoptr i64 %3 to ptr, !dbg !2789
  %typeid.kind = load i8, ptr %"introspect*", align 8, !dbg !2789
  %ptradd1 = getelementptr inbounds i8, ptr %"introspect*", i64 24, !dbg !2789
  %typeid.size = load i64, ptr %ptradd1, align 8, !dbg !2789
  store i64 %typeid.size, ptr %size, align 8, !dbg !2789
    #dbg_declare(ptr %data, !2790, !DIExpression(), !2791)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator, ptr align 8 %1, i32 16, i1 false)
  %4 = load i64, ptr %size, align 8
  store i64 %4, ptr %size2, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator3, ptr align 8 %allocator, i32 16, i1 false)
  %5 = load i64, ptr %size2, align 8
  store i64 %5, ptr %size4, align 8
  %6 = load i64, ptr %size4, align 8, !dbg !2792
  %i2nb = icmp eq i64 %6, 0, !dbg !2792
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !2792

if.then:                                          ; preds = %entry
  store ptr null, ptr %blockret, align 8, !dbg !2792
  br label %expr_block.exit, !dbg !2792

if.exit:                                          ; preds = %entry
  %7 = load i64, ptr %size4, align 8, !dbg !2796
  br i1 true, label %or.phi, label %or.rhs, !dbg !2797

or.rhs:                                           ; preds = %if.exit
  store i64 0, ptr %x, align 8
  %8 = load i64, ptr %x, align 8, !dbg !2798
  %neq = icmp ne i64 0, %8, !dbg !2798
  br i1 %neq, label %and.rhs, label %and.phi, !dbg !2798

and.rhs:                                          ; preds = %or.rhs
  %9 = load i64, ptr %x, align 8, !dbg !2798
  %10 = load i64, ptr %x, align 8, !dbg !2798
  %sub = sub i64 %10, 1, !dbg !2798
  %and = and i64 %9, %sub, !dbg !2798
  %eq = icmp eq i64 %and, 0, !dbg !2798
  br label %and.phi, !dbg !2798

and.phi:                                          ; preds = %and.rhs, %or.rhs
  %val = phi i1 [ false, %or.rhs ], [ %eq, %and.rhs ], !dbg !2798
  br label %or.phi, !dbg !2798

or.phi:                                           ; preds = %and.phi, %if.exit
  %val5 = phi i1 [ true, %if.exit ], [ %val, %and.phi ], !dbg !2798
  br i1 %val5, label %assert_ok, label %assert_fail, !dbg !2798

assert_fail:                                      ; preds = %or.phi
  store %"char[]" { ptr @.panic_msg.11, i64 65 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.24, i64 16 }, ptr %indirectarg6, align 8
  store %"char[]" { ptr @.func.171, i64 9 }, ptr %indirectarg7, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11(ptr align 8 %indirectarg, ptr align 8 %indirectarg6, ptr align 8 %indirectarg7, i32 86) #6, !dbg !2796
  unreachable, !dbg !2796

assert_ok:                                        ; preds = %or.phi
  br i1 true, label %assert_ok12, label %assert_fail8, !dbg !2796

assert_fail8:                                     ; preds = %assert_ok
  store %"char[]" { ptr @.panic_msg.12, i64 80 }, ptr %indirectarg9, align 8
  store %"char[]" { ptr @.file.24, i64 16 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.func.171, i64 9 }, ptr %indirectarg11, align 8
  %12 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %12(ptr align 8 %indirectarg9, ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, i32 86) #6, !dbg !2796
  unreachable, !dbg !2796

assert_ok12:                                      ; preds = %assert_ok
  %lt = icmp ult i64 0, %7, !dbg !2796
  br i1 %lt, label %assert_ok17, label %assert_fail13, !dbg !2796

assert_fail13:                                    ; preds = %assert_ok12
  store %"char[]" { ptr @.panic_msg.25, i64 59 }, ptr %indirectarg14, align 8
  store %"char[]" { ptr @.file.24, i64 16 }, ptr %indirectarg15, align 8
  store %"char[]" { ptr @.func.171, i64 9 }, ptr %indirectarg16, align 8
  %13 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %13(ptr align 8 %indirectarg14, ptr align 8 %indirectarg15, ptr align 8 %indirectarg16, i32 86) #6, !dbg !2796
  unreachable, !dbg !2796

assert_ok17:                                      ; preds = %assert_ok12
  %ptradd18 = getelementptr inbounds i8, ptr %allocator3, i64 8, !dbg !2796
  %14 = load i64, ptr %ptradd18, align 8, !dbg !2796
  %15 = inttoptr i64 %14 to ptr, !dbg !2796
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !2789
  %16 = icmp eq ptr %15, %type, !dbg !2789
  br i1 %16, label %cache_hit, label %cache_miss, !dbg !2789

cache_miss:                                       ; preds = %assert_ok17
  %ptradd19 = getelementptr inbounds i8, ptr %15, i64 16, !dbg !2789
  %17 = load ptr, ptr %ptradd19, align 8, !dbg !2789
  %18 = call ptr @.dyn_search(ptr %17, ptr @"$sel.acquire"), !dbg !2789
  store ptr %18, ptr %.inlinecache, align 8, !dbg !2789
  store ptr %15, ptr %.cachedtype, align 8, !dbg !2789
  br label %19, !dbg !2789

cache_hit:                                        ; preds = %assert_ok17
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !2789
  br label %19, !dbg !2789

19:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %18, %cache_miss ], !dbg !2789
  %20 = icmp eq ptr %fn_phi, null, !dbg !2789
  br i1 %20, label %missing_function, label %match, !dbg !2789

missing_function:                                 ; preds = %19
  store %"char[]" { ptr @.panic_msg.26, i64 44 }, ptr %indirectarg20, align 8
  store %"char[]" { ptr @.file.24, i64 16 }, ptr %indirectarg21, align 8
  store %"char[]" { ptr @.func.171, i64 9 }, ptr %indirectarg22, align 8
  %21 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %21(ptr align 8 %indirectarg20, ptr align 8 %indirectarg21, ptr align 8 %indirectarg22, i32 86) #6, !dbg !2796
  unreachable, !dbg !2796

match:                                            ; preds = %19
  %22 = load ptr, ptr %allocator3, align 8
  %23 = call i64 %fn_phi(ptr %retparam, ptr %22, i64 %7, i32 0, i64 0), !dbg !2796
  %not_err = icmp eq i64 %23, 0, !dbg !2796
  %24 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !2796
  br i1 %24, label %after_check, label %assign_optional, !dbg !2796

assign_optional:                                  ; preds = %match
  store i64 %23, ptr %error_var, align 8, !dbg !2796
  br label %panic_block, !dbg !2796

after_check:                                      ; preds = %match
  %25 = load ptr, ptr %retparam, align 8, !dbg !2796
  store ptr %25, ptr %blockret, align 8, !dbg !2796
  br label %expr_block.exit, !dbg !2796

expr_block.exit:                                  ; preds = %after_check, %if.then
  br label %noerr_block, !dbg !2796

panic_block:                                      ; preds = %assign_optional
  %26 = insertvalue %any undef, ptr %error_var, 0, !dbg !2796
  %27 = insertvalue %any %26, i64 ptrtoint (ptr @"$ct.fault" to i64), 1, !dbg !2796
  store %"char[]" { ptr @.panic_msg.32, i64 36 }, ptr %indirectarg23, align 8
  store %"char[]" { ptr @.file.24, i64 16 }, ptr %indirectarg24, align 8
  store %"char[]" { ptr @.func.171, i64 9 }, ptr %indirectarg25, align 8
  store %any %27, ptr %varargslots, align 16
  %28 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %28, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg26, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg23, ptr align 8 %indirectarg24, ptr align 8 %indirectarg25, i32 75, ptr align 8 %indirectarg26) #6, !dbg !2794
  unreachable, !dbg !2794

noerr_block:                                      ; preds = %expr_block.exit
  %29 = load ptr, ptr %blockret, align 8, !dbg !2794
  store ptr %29, ptr %data, align 8, !dbg !2794
  %30 = load ptr, ptr %data, align 8
  store ptr %30, ptr %dst, align 8
  %31 = load ptr, ptr %2, align 8
  store ptr %31, ptr %src, align 8
  %32 = load i64, ptr %size, align 8
  store i64 %32, ptr %len, align 8
  %33 = load ptr, ptr %dst, align 8, !dbg !2800
  %neq27 = icmp ne ptr %33, null, !dbg !2800
  br i1 %neq27, label %assert_ok32, label %assert_fail28, !dbg !2800

assert_fail28:                                    ; preds = %noerr_block
  store %"char[]" { ptr @.panic_msg.18, i64 37 }, ptr %indirectarg29, align 8
  store %"char[]" { ptr @.file.15, i64 6 }, ptr %indirectarg30, align 8
  store %"char[]" { ptr @.func.171, i64 9 }, ptr %indirectarg31, align 8
  %34 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %34(ptr align 8 %indirectarg29, ptr align 8 %indirectarg30, ptr align 8 %indirectarg31, i32 357) #6, !dbg !2800
  unreachable, !dbg !2800

assert_ok32:                                      ; preds = %noerr_block
  %35 = load ptr, ptr %src, align 8, !dbg !2804
  %neq33 = icmp ne ptr %35, null, !dbg !2804
  br i1 %neq33, label %or.phi36, label %or.rhs34, !dbg !2804

or.rhs34:                                         ; preds = %assert_ok32
  %36 = load i64, ptr %len, align 8, !dbg !2804
  %eq35 = icmp eq i64 0, %36, !dbg !2804
  br label %or.phi36, !dbg !2804

or.phi36:                                         ; preds = %or.rhs34, %assert_ok32
  %val37 = phi i1 [ true, %assert_ok32 ], [ %eq35, %or.rhs34 ], !dbg !2804
  br i1 %val37, label %assert_ok42, label %assert_fail38, !dbg !2804

assert_fail38:                                    ; preds = %or.phi36
  store %"char[]" { ptr @.panic_msg.19, i64 94 }, ptr %indirectarg39, align 8
  store %"char[]" { ptr @.file.24, i64 16 }, ptr %indirectarg40, align 8
  store %"char[]" { ptr @.func.171, i64 9 }, ptr %indirectarg41, align 8
  %37 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %37(ptr align 8 %indirectarg39, ptr align 8 %indirectarg40, ptr align 8 %indirectarg41, i32 336) #6, !dbg !2805
  unreachable, !dbg !2805

assert_ok42:                                      ; preds = %or.phi36
  %38 = load i64, ptr %len, align 8, !dbg !2806
  %eq43 = icmp eq i64 0, %38, !dbg !2806
  br i1 %eq43, label %or.phi45, label %or.rhs44, !dbg !2806

or.rhs44:                                         ; preds = %assert_ok42
  %39 = load ptr, ptr %dst, align 8, !dbg !2806
  %40 = load i64, ptr %len, align 8, !dbg !2806
  %ptradd_any = getelementptr i8, ptr %39, i64 %40, !dbg !2806
  %41 = load ptr, ptr %src, align 8, !dbg !2806
  %le = icmp ule ptr %ptradd_any, %41, !dbg !2806
  br label %or.phi45, !dbg !2806

or.phi45:                                         ; preds = %or.rhs44, %assert_ok42
  %val46 = phi i1 [ true, %assert_ok42 ], [ %le, %or.rhs44 ], !dbg !2806
  br i1 %val46, label %or.phi50, label %or.rhs47, !dbg !2806

or.rhs47:                                         ; preds = %or.phi45
  %42 = load ptr, ptr %src, align 8, !dbg !2806
  %43 = load i64, ptr %len, align 8, !dbg !2806
  %ptradd_any48 = getelementptr i8, ptr %42, i64 %43, !dbg !2806
  %44 = load ptr, ptr %dst, align 8, !dbg !2806
  %le49 = icmp ule ptr %ptradd_any48, %44, !dbg !2806
  br label %or.phi50, !dbg !2806

or.phi50:                                         ; preds = %or.rhs47, %or.phi45
  %val51 = phi i1 [ true, %or.phi45 ], [ %le49, %or.rhs47 ], !dbg !2806
  br i1 %val51, label %assert_ok56, label %assert_fail52, !dbg !2806

assert_fail52:                                    ; preds = %or.phi50
  store %"char[]" { ptr @.panic_msg.20, i64 95 }, ptr %indirectarg53, align 8
  store %"char[]" { ptr @.file.24, i64 16 }, ptr %indirectarg54, align 8
  store %"char[]" { ptr @.func.171, i64 9 }, ptr %indirectarg55, align 8
  %45 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %45(ptr align 8 %indirectarg53, ptr align 8 %indirectarg54, ptr align 8 %indirectarg55, i32 336) #6, !dbg !2805
  unreachable, !dbg !2805

assert_ok56:                                      ; preds = %or.phi50
  %46 = load ptr, ptr %dst, align 8, !dbg !2807
  %47 = load ptr, ptr %src, align 8, !dbg !2807
  %48 = load i64, ptr %len, align 8, !dbg !2807
  call void @llvm.memcpy.p0.p0.i64(ptr %46, ptr %47, i64 %48, i1 false), !dbg !2807
  %49 = load ptr, ptr %data, align 8
  store ptr %49, ptr %ptr, align 8
  %ptradd57 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !2808
  %50 = load i64, ptr %ptradd57, align 8
  store i64 %50, ptr %type58, align 8
  %51 = load ptr, ptr %ptr, align 8, !dbg !2809
  %52 = load i64, ptr %type58, align 8, !dbg !2809
  %53 = insertvalue %any undef, ptr %51, 0, !dbg !2809
  %54 = insertvalue %any %53, i64 %52, 1, !dbg !2809
  store %any %54, ptr %0, align 8, !dbg !2809
  ret void, !dbg !2809
}

; Function Attrs: nounwind ssp uwtable
define weak_odr ptr @std.core.mem.allocator.push_pool(i64 %0) #0 comdat !dbg !2811 {
entry:
  %reserve = alloca i64, align 8
  %old = alloca %any, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %sretparam = alloca %any, align 8
  %error_var = alloca i64, align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg7 = alloca %"char[]", align 8
  %retparam = alloca ptr, align 8
  %indirectarg9 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg12 = alloca %"any[]", align 8
  store i64 %0, ptr %reserve, align 8
    #dbg_declare(ptr %reserve, !2814, !DIExpression(), !2815)
    #dbg_declare(ptr %old, !2816, !DIExpression(), !2817)
  %1 = call ptr @llvm.threadlocal.address.p0(ptr @std.core.mem.allocator.top_temp), !dbg !2817
  %2 = load ptr, ptr %1, align 8, !dbg !2817
  %i2b = icmp ne ptr %2, null, !dbg !2817
  br i1 %i2b, label %cond.lhs, label %cond.rhs, !dbg !2817

cond.lhs:                                         ; preds = %entry
  %3 = call ptr @llvm.threadlocal.address.p0(ptr @std.core.mem.allocator.current_temp), !dbg !2817
  %4 = load %any, ptr %3, align 8, !dbg !2817
  br label %cond.phi, !dbg !2817

cond.rhs:                                         ; preds = %entry
  %5 = call ptr @llvm.threadlocal.address.p0(ptr @std.core.mem.allocator.top_temp), !dbg !2818
  %6 = load ptr, ptr %5, align 8, !dbg !2818
  %i2nb = icmp eq ptr %6, null, !dbg !2818
  br i1 %i2nb, label %assert_ok, label %assert_fail, !dbg !2818

assert_fail:                                      ; preds = %cond.rhs
  store %"char[]" { ptr @.panic_msg.172, i64 86 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.24, i64 16 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.173, i64 9 }, ptr %indirectarg2, align 8
  %7 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %7(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 416) #6, !dbg !2817
  unreachable, !dbg !2817

assert_ok:                                        ; preds = %cond.rhs
  call void @std.core.mem.allocator.create_temp_allocator_on_demand(ptr sret(%any) align 8 %sretparam), !dbg !2817
  %8 = load %any, ptr %sretparam, align 8, !dbg !2817
  br label %cond.phi, !dbg !2817

cond.phi:                                         ; preds = %assert_ok, %cond.lhs
  %val = phi %any [ %4, %cond.lhs ], [ %8, %assert_ok ], !dbg !2817
  store %any %val, ptr %old, align 8, !dbg !2817
  %9 = call ptr @llvm.threadlocal.address.p0(ptr @std.core.mem.allocator.current_temp), !dbg !2819
  %10 = load ptr, ptr %old, align 8, !dbg !2819
  %11 = load i64, ptr %reserve, align 8, !dbg !2819
  %ptradd = getelementptr inbounds i8, ptr %10, i64 24, !dbg !2820
  %12 = load ptr, ptr %ptradd, align 8, !dbg !2820
  %i2nb3 = icmp eq ptr %12, null, !dbg !2820
  br i1 %i2nb3, label %assert_ok8, label %assert_fail4, !dbg !2820

assert_fail4:                                     ; preds = %cond.phi
  store %"char[]" { ptr @.panic_msg.91, i64 34 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.file.24, i64 16 }, ptr %indirectarg6, align 8
  store %"char[]" { ptr @.func.173, i64 9 }, ptr %indirectarg7, align 8
  %13 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %13(ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, ptr align 8 %indirectarg7, i32 417) #6, !dbg !2819
  unreachable, !dbg !2819

assert_ok8:                                       ; preds = %cond.phi
  %14 = call i64 @std.core.mem.allocator.TempAllocator.derive_allocator(ptr %retparam, ptr %10, i64 %11), !dbg !2819
  %not_err = icmp eq i64 %14, 0, !dbg !2819
  %15 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !2819
  br i1 %15, label %after_check, label %assign_optional, !dbg !2819

assign_optional:                                  ; preds = %assert_ok8
  store i64 %14, ptr %error_var, align 8, !dbg !2819
  br label %panic_block, !dbg !2819

after_check:                                      ; preds = %assert_ok8
  br label %noerr_block, !dbg !2819

panic_block:                                      ; preds = %assign_optional
  %16 = insertvalue %any undef, ptr %error_var, 0, !dbg !2819
  %17 = insertvalue %any %16, i64 ptrtoint (ptr @"$ct.fault" to i64), 1, !dbg !2819
  store %"char[]" { ptr @.panic_msg.32, i64 36 }, ptr %indirectarg9, align 8
  store %"char[]" { ptr @.file.24, i64 16 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.func.173, i64 9 }, ptr %indirectarg11, align 8
  store %any %17, ptr %varargslots, align 16
  %18 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %18, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg12, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg9, ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, i32 417, ptr align 8 %indirectarg12) #6, !dbg !2819
  unreachable, !dbg !2819

noerr_block:                                      ; preds = %after_check
  %19 = load ptr, ptr %retparam, align 8, !dbg !2819
  %20 = insertvalue %any undef, ptr %19, 0, !dbg !2819
  %21 = insertvalue %any %20, i64 ptrtoint (ptr @"$ct.std.core.mem.allocator.TempAllocator" to i64), 1, !dbg !2819
  store %any %21, ptr %9, align 8, !dbg !2819
  %22 = load ptr, ptr %old, align 8, !dbg !2821
  ret ptr %22, !dbg !2821
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.core.mem.allocator.pop_pool(ptr %0) #0 comdat !dbg !2822 {
entry:
  %old = alloca ptr, align 8
  %temp = alloca ptr, align 8
  store ptr %0, ptr %old, align 8
    #dbg_declare(ptr %old, !2825, !DIExpression(), !2826)
    #dbg_declare(ptr %temp, !2827, !DIExpression(), !2828)
  %1 = load ptr, ptr %old, align 8, !dbg !2828
  store ptr %1, ptr %temp, align 8, !dbg !2828
  %2 = call ptr @llvm.threadlocal.address.p0(ptr @std.core.mem.allocator.current_temp), !dbg !2829
  %3 = load ptr, ptr %temp, align 8, !dbg !2829
  %4 = insertvalue %any undef, ptr %3, 0, !dbg !2829
  %5 = insertvalue %any %4, i64 ptrtoint (ptr @"$ct.std.core.mem.allocator.TempAllocator" to i64), 1, !dbg !2829
  store %any %5, ptr %2, align 8, !dbg !2829
  %6 = load ptr, ptr %temp, align 8, !dbg !2830
  call void @std.core.mem.allocator.TempAllocator.reset(ptr %6), !dbg !2830
  ret void, !dbg !2830
}

; Function Attrs: nounwind ssp uwtable
define internal void @std.core.mem.allocator.create_temp_allocator_on_demand(ptr noalias sret(%any) align 8 %0) #0 !dbg !2831 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"any[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %sretparam = alloca %any, align 8
  %indirectarg13 = alloca %any, align 8
  %1 = call ptr @llvm.threadlocal.address.p0(ptr @std.core.mem.allocator.top_temp), !dbg !2834
  %2 = load ptr, ptr %1, align 8, !dbg !2834
  %i2nb = icmp eq ptr %2, null, !dbg !2834
  br i1 %i2nb, label %assert_ok, label %assert_fail, !dbg !2834

assert_fail:                                      ; preds = %entry
  store %"char[]" { ptr @.panic_msg.172, i64 86 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.24, i64 16 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.174, i64 31 }, ptr %indirectarg2, align 8
  %3 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %3(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 470) #6, !dbg !2834
  unreachable, !dbg !2834

assert_ok:                                        ; preds = %entry
  %4 = call ptr @llvm.threadlocal.address.p0(ptr @std.core.mem.allocator.auto_create_temp), !dbg !2836
  %5 = load i8, ptr %4, align 1, !dbg !2836
  %6 = trunc i8 %5 to i1, !dbg !2836
  br i1 %6, label %if.exit, label %if.else, !dbg !2836

if.else:                                          ; preds = %assert_ok
  %7 = call ptr @llvm.threadlocal.address.p0(ptr @std.core.mem.allocator.auto_create_temp), !dbg !2837
  store i8 1, ptr %7, align 1, !dbg !2837
  store %"char[]" { ptr @.str.175, i64 128 }, ptr %string, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg3, ptr align 8 %string, i32 16, i1 false)
  store %"char[]" { ptr @.str.176, i64 16 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.str.177, i64 31 }, ptr %indirectarg5, align 8
  store %"any[]" zeroinitializer, ptr %indirectarg6, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, i32 477, ptr align 8 %indirectarg6), !dbg !2839
  call void @llvm.trap(), !dbg !2842
  unreachable, !dbg !2842

if.exit:                                          ; preds = %assert_ok
  %8 = load %any, ptr @std.core.mem.allocator.temp_base_allocator, align 8, !dbg !2843
  %9 = load i64, ptr @std.core.mem.allocator.temp_allocator_reserve_size, align 8, !dbg !2843
  %10 = load i64, ptr @std.core.mem.allocator.temp_allocator_min_size, align 8, !dbg !2843
  %11 = load i64, ptr @std.core.mem.allocator.temp_allocator_realloc_size, align 8, !dbg !2843
  %12 = call ptr @llvm.threadlocal.address.p0(ptr @std.core.mem.allocator.top_temp), !dbg !2844
  %13 = load ptr, ptr %12, align 8, !dbg !2844
  %i2nb7 = icmp eq ptr %13, null, !dbg !2844
  br i1 %i2nb7, label %assert_ok12, label %assert_fail8, !dbg !2844

assert_fail8:                                     ; preds = %if.exit
  store %"char[]" { ptr @.panic_msg.172, i64 86 }, ptr %indirectarg9, align 8
  store %"char[]" { ptr @.file.24, i64 16 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.func.174, i64 31 }, ptr %indirectarg11, align 8
  %14 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %14(ptr align 8 %indirectarg9, ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, i32 479) #6, !dbg !2843
  unreachable, !dbg !2843

assert_ok12:                                      ; preds = %if.exit
  store %any %8, ptr %indirectarg13, align 8
  call void @std.core.mem.allocator.create_temp_allocator(ptr sret(%any) align 8 %sretparam, ptr align 8 %indirectarg13, i64 262144, i64 %9, i64 %10, i64 %11), !dbg !2843
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %sretparam, i32 16, i1 false), !dbg !2843
  ret void, !dbg !2843
}

; Function Attrs: nounwind ssp uwtable
define internal void @std.core.mem.allocator.create_temp_allocator(ptr noalias sret(%any) align 8 %0, ptr align 8 %1, i64 %2, i64 %3, i64 %4, i64 %5) #0 !dbg !2845 {
entry:
  %size = alloca i64, align 8
  %reserve = alloca i64, align 8
  %min_size = alloca i64, align 8
  %realloc_size = alloca i64, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %error_var = alloca i64, align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %indirectarg15 = alloca %"char[]", align 8
  %indirectarg16 = alloca %"char[]", align 8
  %indirectarg17 = alloca %"char[]", align 8
  %indirectarg20 = alloca %"char[]", align 8
  %indirectarg21 = alloca %"char[]", align 8
  %indirectarg22 = alloca %"char[]", align 8
  %retparam = alloca ptr, align 8
  %indirectarg24 = alloca %any, align 8
  %indirectarg25 = alloca %"char[]", align 8
  %indirectarg26 = alloca %"char[]", align 8
  %indirectarg27 = alloca %"char[]", align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg28 = alloca %"any[]", align 8
    #dbg_declare(ptr %1, !2848, !DIExpression(), !2849)
  store i64 %2, ptr %size, align 8
    #dbg_declare(ptr %size, !2850, !DIExpression(), !2849)
  store i64 %3, ptr %reserve, align 8
    #dbg_declare(ptr %reserve, !2851, !DIExpression(), !2849)
  store i64 %4, ptr %min_size, align 8
    #dbg_declare(ptr %min_size, !2852, !DIExpression(), !2849)
  store i64 %5, ptr %realloc_size, align 8
    #dbg_declare(ptr %realloc_size, !2853, !DIExpression(), !2849)
  %6 = call ptr @llvm.threadlocal.address.p0(ptr @std.core.mem.allocator.top_temp), !dbg !2854
  %7 = load ptr, ptr %6, align 8, !dbg !2854
  %i2nb = icmp eq ptr %7, null, !dbg !2854
  br i1 %i2nb, label %assert_ok, label %assert_fail, !dbg !2854

assert_fail:                                      ; preds = %entry
  store %"char[]" { ptr @.panic_msg.172, i64 86 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.24, i64 16 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.178, i64 21 }, ptr %indirectarg2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 483) #6, !dbg !2854
  unreachable, !dbg !2854

assert_ok:                                        ; preds = %entry
  %9 = call ptr @llvm.threadlocal.address.p0(ptr @std.core.mem.allocator.current_temp), !dbg !2856
  %10 = call ptr @llvm.threadlocal.address.p0(ptr @std.core.mem.allocator.top_temp), !dbg !2856
  %11 = load %any, ptr %1, align 8, !dbg !2856
  %12 = load i64, ptr %size, align 8, !dbg !2856
  %13 = load i64, ptr %reserve, align 8, !dbg !2856
  %14 = load i64, ptr %min_size, align 8, !dbg !2856
  %15 = load i64, ptr %realloc_size, align 8, !dbg !2856
  %le = icmp ule i64 64, %12, !dbg !2856
  br i1 %le, label %assert_ok7, label %assert_fail3, !dbg !2856

assert_fail3:                                     ; preds = %assert_ok
  store %"char[]" { ptr @.panic_msg.84, i64 31 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.24, i64 16 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.178, i64 21 }, ptr %indirectarg6, align 8
  %16 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %16(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 487) #6, !dbg !2856
  unreachable, !dbg !2856

assert_ok7:                                       ; preds = %assert_ok
  %le8 = icmp ule i64 64, %15, !dbg !2856
  br i1 %le8, label %assert_ok13, label %assert_fail9, !dbg !2856

assert_fail9:                                     ; preds = %assert_ok7
  store %"char[]" { ptr @.panic_msg.87, i64 39 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.file.24, i64 16 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.func.178, i64 21 }, ptr %indirectarg12, align 8
  %17 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %17(ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, i32 487) #6, !dbg !2856
  unreachable, !dbg !2856

assert_ok13:                                      ; preds = %assert_ok7
  %18 = extractvalue %any %11, 1, !dbg !2857
  %neq = icmp ne i64 %18, ptrtoint (ptr @"$ct.std.core.mem.allocator.TempAllocator" to i64), !dbg !2856
  br i1 %neq, label %assert_ok18, label %assert_fail14, !dbg !2856

assert_fail14:                                    ; preds = %assert_ok13
  store %"char[]" { ptr @.panic_msg.88, i64 145 }, ptr %indirectarg15, align 8
  store %"char[]" { ptr @.file.24, i64 16 }, ptr %indirectarg16, align 8
  store %"char[]" { ptr @.func.178, i64 21 }, ptr %indirectarg17, align 8
  %19 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %19(ptr align 8 %indirectarg15, ptr align 8 %indirectarg16, ptr align 8 %indirectarg17, i32 487) #6, !dbg !2856
  unreachable, !dbg !2856

assert_ok18:                                      ; preds = %assert_ok13
  %lt = icmp ult i64 152, %14, !dbg !2856
  br i1 %lt, label %assert_ok23, label %assert_fail19, !dbg !2856

assert_fail19:                                    ; preds = %assert_ok18
  store %"char[]" { ptr @.panic_msg.89, i64 114 }, ptr %indirectarg20, align 8
  store %"char[]" { ptr @.file.24, i64 16 }, ptr %indirectarg21, align 8
  store %"char[]" { ptr @.func.178, i64 21 }, ptr %indirectarg22, align 8
  %20 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %20(ptr align 8 %indirectarg20, ptr align 8 %indirectarg21, ptr align 8 %indirectarg22, i32 487) #6, !dbg !2856
  unreachable, !dbg !2856

assert_ok23:                                      ; preds = %assert_ok18
  store %any %11, ptr %indirectarg24, align 8
  %21 = call i64 @std.core.mem.allocator.new_temp_allocator(ptr %retparam, ptr align 8 %indirectarg24, i64 %12, i64 %13, i64 %14, i64 %15), !dbg !2856
  %not_err = icmp eq i64 %21, 0, !dbg !2856
  %22 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !2856
  br i1 %22, label %after_check, label %assign_optional, !dbg !2856

assign_optional:                                  ; preds = %assert_ok23
  store i64 %21, ptr %error_var, align 8, !dbg !2856
  br label %panic_block, !dbg !2856

after_check:                                      ; preds = %assert_ok23
  br label %noerr_block, !dbg !2856

panic_block:                                      ; preds = %assign_optional
  %23 = insertvalue %any undef, ptr %error_var, 0, !dbg !2856
  %24 = insertvalue %any %23, i64 ptrtoint (ptr @"$ct.fault" to i64), 1, !dbg !2856
  store %"char[]" { ptr @.panic_msg.32, i64 36 }, ptr %indirectarg25, align 8
  store %"char[]" { ptr @.file.24, i64 16 }, ptr %indirectarg26, align 8
  store %"char[]" { ptr @.func.178, i64 21 }, ptr %indirectarg27, align 8
  store %any %24, ptr %varargslots, align 16
  %25 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %25, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg28, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg25, ptr align 8 %indirectarg26, ptr align 8 %indirectarg27, i32 487, ptr align 8 %indirectarg28) #6, !dbg !2856
  unreachable, !dbg !2856

noerr_block:                                      ; preds = %after_check
  %26 = load ptr, ptr %retparam, align 8, !dbg !2856
  store ptr %26, ptr %10, align 8, !dbg !2856
  %27 = insertvalue %any undef, ptr %26, 0, !dbg !2856
  %28 = insertvalue %any %27, i64 ptrtoint (ptr @"$ct.std.core.mem.allocator.TempAllocator" to i64), 1, !dbg !2856
  store %any %28, ptr %9, align 8, !dbg !2856
  store %any %28, ptr %0, align 8, !dbg !2856
  ret void, !dbg !2856
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.core.mem.allocator.destroy_temp_allocators() #0 comdat !dbg !2858 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %0 = call ptr @llvm.threadlocal.address.p0(ptr @std.core.mem.allocator.top_temp), !dbg !2861
  %1 = load ptr, ptr %0, align 8, !dbg !2861
  %i2nb = icmp eq ptr %1, null, !dbg !2861
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !2861

if.then:                                          ; preds = %entry
  ret void, !dbg !2861

if.exit:                                          ; preds = %entry
  %2 = call ptr @llvm.threadlocal.address.p0(ptr @std.core.mem.allocator.top_temp), !dbg !2862
  %3 = load ptr, ptr %2, align 8, !dbg !2862
  %ptradd = getelementptr inbounds i8, ptr %3, i64 32, !dbg !2863
  %4 = load i8, ptr %ptradd, align 8, !dbg !2863
  %5 = trunc i8 %4 to i1, !dbg !2863
  br i1 %5, label %assert_ok, label %assert_fail, !dbg !2863

assert_fail:                                      ; preds = %if.exit
  store %"char[]" { ptr @.panic_msg.92, i64 82 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.24, i64 16 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.179, i64 23 }, ptr %indirectarg2, align 8
  %6 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %6(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 513) #6, !dbg !2862
  unreachable, !dbg !2862

assert_ok:                                        ; preds = %if.exit
  call void @std.core.mem.allocator.TempAllocator.free(ptr %3), !dbg !2862
  %7 = call ptr @llvm.threadlocal.address.p0(ptr @std.core.mem.allocator.top_temp), !dbg !2864
  store ptr null, ptr %7, align 8, !dbg !2864
  %8 = call ptr @llvm.threadlocal.address.p0(ptr @std.core.mem.allocator.current_temp), !dbg !2865
  store %any { ptr @std.core.mem.allocator.LAZY_TEMP, i64 ptrtoint (ptr @"$ct.std.core.mem.allocator.LazyTempAllocator" to i64) }, ptr %8, align 8, !dbg !2865
  ret void, !dbg !2865
}

; Function Attrs: nounwind ssp uwtable
define internal void @std.core.mem.allocator.allow_implicit_temp_allocator_on_load_thread.10324() #0 !dbg !2866 {
entry:
  %0 = call ptr @llvm.threadlocal.address.p0(ptr @std.core.mem.allocator.auto_create_temp), !dbg !2867
  store i8 1, ptr %0, align 1, !dbg !2867
  ret void, !dbg !2867
}

; Function Attrs: nounwind ssp uwtable
define internal void @std.core.mem.allocator.destroy_temp_allocators_after_exit.10325() #0 !dbg !2868 {
entry:
  call void @std.core.mem.allocator.destroy_temp_allocators(), !dbg !2869
  ret void, !dbg !2869
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.core.mem.allocator.WasmMemory.allocate_block(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !2870 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %bytes = alloca i64, align 8
  %bytes_required = alloca i64, align 8
  %reterr = alloca i64, align 8
  %taddr = alloca ptr, align 8
  %taddr8 = alloca i64, align 8
  %indirectarg9 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg12 = alloca %"any[]", align 8
  %blocks_required = alloca i64, align 8
  %reterr21 = alloca i64, align 8
  %taddr24 = alloca ptr, align 8
  %taddr29 = alloca i64, align 8
  %indirectarg30 = alloca %"char[]", align 8
  %indirectarg31 = alloca %"char[]", align 8
  %indirectarg32 = alloca %"char[]", align 8
  %varargslots33 = alloca [1 x %any], align 16
  %indirectarg35 = alloca %"any[]", align 8
  %3 = icmp eq ptr %1, null, !dbg !2874
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !2874
  br i1 %4, label %panic, label %checkok, !dbg !2874

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !2875, !DIExpression(), !2876)
  store i64 %2, ptr %bytes, align 8
    #dbg_declare(ptr %bytes, !2877, !DIExpression(), !2876)
  %5 = load ptr, ptr %self, align 8, !dbg !2878
  %6 = load i64, ptr %5, align 8, !dbg !2878
  %i2nb = icmp eq i64 %6, 0, !dbg !2878
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !2878

if.then:                                          ; preds = %checkok
  %7 = load ptr, ptr %self, align 8, !dbg !2879
  store i64 0, ptr %7, align 8, !dbg !2879
  br label %if.exit, !dbg !2879

if.exit:                                          ; preds = %if.then, %checkok
    #dbg_declare(ptr %bytes_required, !2881, !DIExpression(), !2882)
  %8 = load i64, ptr %bytes, align 8, !dbg !2882
  %9 = load ptr, ptr %self, align 8, !dbg !2882
  %ptradd = getelementptr inbounds i8, ptr %9, i64 8, !dbg !2882
  %10 = load i64, ptr %ptradd, align 8, !dbg !2882
  %add = add i64 %8, %10, !dbg !2882
  %11 = load ptr, ptr %self, align 8, !dbg !2882
  %12 = load i64, ptr %11, align 8, !dbg !2882
  %sub = sub i64 %add, %12, !dbg !2882
  store i64 %sub, ptr %bytes_required, align 8, !dbg !2882
  %13 = load i64, ptr %bytes_required, align 8, !dbg !2883
  %le = icmp sle i64 %13, 0, !dbg !2883
  br i1 %le, label %if.then3, label %if.exit16, !dbg !2883

if.then3:                                         ; preds = %if.exit
  %14 = load ptr, ptr %self, align 8, !dbg !2884
  %ptradd4 = getelementptr inbounds i8, ptr %14, i64 8, !dbg !2884
  %15 = load i64, ptr %ptradd4, align 8, !dbg !2884
  %intptr = inttoptr i64 %15 to ptr, !dbg !2884
  store ptr %intptr, ptr %taddr, align 8
  %16 = load ptr, ptr %taddr, align 8
  %17 = load i64, ptr %bytes, align 8, !dbg !2884
  %add5 = add i64 0, %17, !dbg !2884
  %gt = icmp ugt i64 0, %add5, !dbg !2884
  %sub6 = sub i64 %add5, 0, !dbg !2884
  %18 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !2884
  br i1 %18, label %panic7, label %checkok13, !dbg !2884

checkok13:                                        ; preds = %if.then3
  %size = sub i64 %add5, 0, !dbg !2884
  %19 = insertvalue %"char[]" undef, ptr %16, 0, !dbg !2884
  %20 = insertvalue %"char[]" %19, i64 %size, 1, !dbg !2884
  %21 = load ptr, ptr %self, align 8, !dbg !2886
  %ptradd14 = getelementptr inbounds i8, ptr %21, i64 8, !dbg !2886
  %22 = load i64, ptr %ptradd14, align 8, !dbg !2886
  %23 = load i64, ptr %bytes, align 8, !dbg !2886
  %add15 = add i64 %22, %23, !dbg !2886
  store i64 %add15, ptr %ptradd14, align 8, !dbg !2886
  store %"char[]" %20, ptr %0, align 8, !dbg !2886
  ret i64 0, !dbg !2886

if.exit16:                                        ; preds = %if.exit
    #dbg_declare(ptr %blocks_required, !2888, !DIExpression(), !2889)
  %24 = load i64, ptr %bytes_required, align 8, !dbg !2889
  %add17 = add i64 %24, 65536, !dbg !2889
  %add18 = add i64 %add17, 1, !dbg !2889
  %sdiv = sdiv i64 %add18, 65536, !dbg !2889
  store i64 %sdiv, ptr %blocks_required, align 8, !dbg !2889
  br label %if.then19, !dbg !2890

if.then19:                                        ; preds = %if.exit16
  ret i64 ptrtoint (ptr @std.core.mem.OUT_OF_MEMORY to i64), !dbg !2890

if.exit20:                                        ; No predecessors!
  %25 = load ptr, ptr %self, align 8, !dbg !2891
  store i64 0, ptr %25, align 8, !dbg !2891
  %26 = load ptr, ptr %self, align 8, !dbg !2892
  %ptradd22 = getelementptr inbounds i8, ptr %26, i64 8, !dbg !2892
  %27 = load i64, ptr %ptradd22, align 8, !dbg !2892
  %intptr23 = inttoptr i64 %27 to ptr, !dbg !2892
  store ptr %intptr23, ptr %taddr24, align 8
  %28 = load ptr, ptr %taddr24, align 8
  %29 = load i64, ptr %bytes, align 8, !dbg !2892
  %add25 = add i64 0, %29, !dbg !2892
  %gt26 = icmp ugt i64 0, %add25, !dbg !2892
  %sub27 = sub i64 %add25, 0, !dbg !2892
  %30 = call i1 @llvm.expect.i1(i1 %gt26, i1 false), !dbg !2892
  br i1 %30, label %panic28, label %checkok36, !dbg !2892

checkok36:                                        ; preds = %if.exit20
  %size37 = sub i64 %add25, 0, !dbg !2892
  %31 = insertvalue %"char[]" undef, ptr %28, 0, !dbg !2892
  %32 = insertvalue %"char[]" %31, i64 %size37, 1, !dbg !2892
  %33 = load ptr, ptr %self, align 8, !dbg !2893
  %ptradd38 = getelementptr inbounds i8, ptr %33, i64 8, !dbg !2893
  %34 = load i64, ptr %ptradd38, align 8, !dbg !2893
  %35 = load i64, ptr %bytes, align 8, !dbg !2893
  %add39 = add i64 %34, %35, !dbg !2893
  store i64 %add39, ptr %ptradd38, align 8, !dbg !2893
  store %"char[]" %32, ptr %0, align 8, !dbg !2893
  ret i64 0, !dbg !2893

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.181, i64 14 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.182, i64 14 }, ptr %indirectarg2, align 8
  %36 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %36(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 14) #6, !dbg !2876
  unreachable, !dbg !2876

panic7:                                           ; preds = %if.then3
  store i64 %sub6, ptr %taddr8, align 8
  %37 = insertvalue %any undef, ptr %taddr8, 0
  %38 = insertvalue %any %37, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.33, i64 43 }, ptr %indirectarg9, align 8
  store %"char[]" { ptr @.file.181, i64 14 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.func.182, i64 14 }, ptr %indirectarg11, align 8
  store %any %38, ptr %varargslots, align 16
  %39 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %39, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg12, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg9, ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, i32 24, ptr align 8 %indirectarg12) #6, !dbg !2884
  unreachable, !dbg !2884

panic28:                                          ; preds = %if.exit20
  store i64 %sub27, ptr %taddr29, align 8
  %40 = insertvalue %any undef, ptr %taddr29, 0
  %41 = insertvalue %any %40, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.33, i64 43 }, ptr %indirectarg30, align 8
  store %"char[]" { ptr @.file.181, i64 14 }, ptr %indirectarg31, align 8
  store %"char[]" { ptr @.func.182, i64 14 }, ptr %indirectarg32, align 8
  store %any %41, ptr %varargslots33, align 16
  %42 = insertvalue %"any[]" undef, ptr %varargslots33, 0
  %"$$temp34" = insertvalue %"any[]" %42, i64 1, 1
  store %"any[]" %"$$temp34", ptr %indirectarg35, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg30, ptr align 8 %indirectarg31, ptr align 8 %indirectarg32, i32 31, ptr align 8 %indirectarg35) #6, !dbg !2892
  unreachable, !dbg !2892
}

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(none)
declare i1 @llvm.expect.i1(i1, i1) #1

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i32(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i32, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
declare void @std.core.builtin.panicf(ptr align 8, ptr align 8, ptr align 8, i32, ptr align 8) #0

; Function Attrs: nounwind ssp uwtable
declare i64 @std.core.mem.aligned_offset(i64, i64) #0

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg) #3

; Function Attrs: nounwind ssp uwtable
declare zeroext i8 @std.core.mem.ptr_is_aligned(ptr, i64) #0

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.umin.i64(i64, i64) #4

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #2

define weak ptr @.dyn_search(ptr %0, ptr %1) unnamed_addr comdat {
entry:
  br label %check

check:                                            ; preds = %no_match, %entry
  %2 = phi ptr [ %0, %entry ], [ %9, %no_match ]
  %3 = icmp eq ptr %2, null
  br i1 %3, label %missing_function, label %compare

missing_function:                                 ; preds = %check
  ret ptr null

compare:                                          ; preds = %check
  %4 = getelementptr inbounds { ptr, ptr, ptr }, ptr %2, i32 0, i32 1
  %5 = load ptr, ptr %4, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %match, label %no_match

match:                                            ; preds = %compare
  %7 = load ptr, ptr %2, align 8
  ret ptr %7

no_match:                                         ; preds = %compare
  %8 = getelementptr inbounds { ptr, ptr, ptr }, ptr %2, i32 0, i32 2
  %9 = load ptr, ptr %8, align 8
  br label %check
}

; Function Attrs: nounwind ssp uwtable
declare ptr @_aligned_recalloc(ptr, i64, i64, i64) #0

; Function Attrs: nounwind ssp uwtable
declare ptr @calloc(i64, i64) #0

; Function Attrs: nounwind ssp uwtable
declare ptr @_aligned_malloc(i64, i64) #0

; Function Attrs: nounwind ssp uwtable
declare ptr @malloc(i64) #0

; Function Attrs: nounwind ssp uwtable
declare ptr @_aligned_realloc(ptr, i64, i64) #0

; Function Attrs: nounwind ssp uwtable
declare ptr @realloc(ptr, i64) #0

; Function Attrs: nounwind ssp uwtable
declare void @_aligned_free(ptr) #0

; Function Attrs: nounwind ssp uwtable
declare ptr @free(ptr) #0

; Function Attrs: nounwind ssp uwtable
declare ptr @"std_collections_map$ulong$std.core.mem.allocator.Allocation$.HashMap.init"(ptr, ptr align 8, i32, float) #0

; Function Attrs: nounwind ssp uwtable
declare zeroext i8 @"std_collections_map$ulong$std.core.mem.allocator.Allocation$.HashMap.is_initialized"(ptr) #0

; Function Attrs: nounwind ssp uwtable
declare void @"std_collections_map$ulong$std.core.mem.allocator.Allocation$.HashMap.free"(ptr) #0

; Function Attrs: nounwind ssp uwtable
declare void @"std_collections_map$ulong$std.core.mem.allocator.Allocation$.HashMap.tvalues"(ptr noalias sret(%"Allocation[]") align 8, ptr) #0

; Function Attrs: nounwind ssp uwtable
declare void @std.os.backtrace.capture_current(ptr noalias sret(%"void*[]") align 8, ptr align 8) #0

; Function Attrs: nounwind ssp uwtable
declare zeroext i8 @"std_collections_map$ulong$std.core.mem.allocator.Allocation$.HashMap.set"(ptr, i64, ptr align 8) #0

; Function Attrs: nounwind ssp uwtable
declare i64 @"std_collections_map$ulong$std.core.mem.allocator.Allocation$.HashMap.remove"(ptr, i64) #0

; Function Attrs: nounwind ssp uwtable
declare void @"std_collections_map$ulong$std.core.mem.allocator.Allocation$.HashMap.clear"(ptr) #0

; Function Attrs: nounwind ssp uwtable
declare i64 @"std_collections_map$ulong$std.core.mem.allocator.Allocation$.HashMap.len"(ptr) #0

; Function Attrs: nounwind ssp uwtable
declare ptr @std.io.stdout() #0

; Function Attrs: nounwind ssp uwtable
declare i64 @std.io.fprintfn(ptr, ptr align 8, ptr align 8, ptr align 8) #0

; Function Attrs: nounwind ssp uwtable
declare void @"std_collections_list$std.os.backtrace.Backtrace$.List.get"(ptr noalias sret(%Backtrace) align 8, ptr, i64) #0

; Function Attrs: nounwind ssp uwtable
declare i64 @std.os.win32.symbolize_backtrace(ptr, ptr align 8, ptr align 8) #0

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare nonnull ptr @llvm.threadlocal.address.p0(ptr nonnull) #4

; Function Attrs: nounwind ssp uwtable
declare i64 @"std_collections_list$std.os.backtrace.Backtrace$.List.len"(ptr) #0

; Function Attrs: nounwind ssp uwtable
declare zeroext i8 @std.os.backtrace.Backtrace.has_file(ptr) #0

; Function Attrs: nounwind ssp uwtable
declare zeroext i8 @std.os.backtrace.Backtrace.is_unknown(ptr) #0

; Function Attrs: nounwind ssp uwtable
declare i64 @std.core.mem.os_pagesize() #0

; Function Attrs: nounwind ssp uwtable
declare i64 @std.core.mem.vm.virtual_alloc(ptr, i64, i32) #0

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.cttz.i64(i64, i1 immarg) #4

; Function Attrs: nounwind ssp uwtable
declare zeroext i8 @std.core.mem.ptr_is_page_aligned(ptr) #0

; Function Attrs: nounwind ssp uwtable
declare i64 @std.core.mem.vm.commit(ptr, i64, i32) #0

; Function Attrs: nounwind ssp uwtable
declare i64 @std.core.mem.vm.protect(ptr, i64, i32) #0

; Function Attrs: nounwind ssp uwtable
declare i64 @std.core.mem.vm.VirtualMemory.decommit(ptr align 8, i64, i64, i8 zeroext) #0

; Function Attrs: nounwind ssp uwtable
declare i64 @std.core.mem.vm.VirtualMemory.destroy(ptr) #0

; Function Attrs: cold noreturn nounwind memory(inaccessiblemem: write)
declare void @llvm.trap() #5

declare void @atexit(ptr)

define weak_odr void @.__c3_atexit_std.core.mem.allocator.destroy_temp_allocators_after_exit.10325() comdat {
entry:
  call void @atexit(ptr @std.core.mem.allocator.destroy_temp_allocators_after_exit.10325)
  ret void
}

define internal void @.c3_dynamic_register() align 8 {
entry:
  %next_val = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.ArenaAllocator.release", i32 0, i32 2), align 8
  %0 = icmp eq ptr %next_val, inttoptr (i64 -1 to ptr)
  br i1 %0, label %dtable_check, label %dtable_skip

dtable_check:                                     ; preds = %dtable_check, %entry
  %dtable_ref = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.core.mem.allocator.ArenaAllocator", i32 0, i32 2), %entry ], [ %next_dtable_ref, %dtable_check ]
  %dtable_ptr = load ptr, ptr %dtable_ref, align 8
  %1 = icmp eq ptr %dtable_ptr, null
  %next_dtable_ref = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr, i32 0, i32 2
  br i1 %1, label %dtable_found, label %dtable_check

dtable_found:                                     ; preds = %dtable_check
  store ptr @"$ct.dyn.std.core.mem.allocator.ArenaAllocator.release", ptr %dtable_ref, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.ArenaAllocator.release", i32 0, i32 2), align 8
  br label %dtable_skip

dtable_skip:                                      ; preds = %dtable_found, %entry
  %next_val1 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.ArenaAllocator.acquire", i32 0, i32 2), align 8
  %2 = icmp eq ptr %next_val1, inttoptr (i64 -1 to ptr)
  br i1 %2, label %dtable_check2, label %dtable_skip7

dtable_check2:                                    ; preds = %dtable_check2, %dtable_skip
  %dtable_ref3 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.core.mem.allocator.ArenaAllocator", i32 0, i32 2), %dtable_skip ], [ %next_dtable_ref5, %dtable_check2 ]
  %dtable_ptr4 = load ptr, ptr %dtable_ref3, align 8
  %3 = icmp eq ptr %dtable_ptr4, null
  %next_dtable_ref5 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr4, i32 0, i32 2
  br i1 %3, label %dtable_found6, label %dtable_check2

dtable_found6:                                    ; preds = %dtable_check2
  store ptr @"$ct.dyn.std.core.mem.allocator.ArenaAllocator.acquire", ptr %dtable_ref3, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.ArenaAllocator.acquire", i32 0, i32 2), align 8
  br label %dtable_skip7

dtable_skip7:                                     ; preds = %dtable_found6, %dtable_skip
  %next_val8 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.ArenaAllocator.resize", i32 0, i32 2), align 8
  %4 = icmp eq ptr %next_val8, inttoptr (i64 -1 to ptr)
  br i1 %4, label %dtable_check9, label %dtable_skip14

dtable_check9:                                    ; preds = %dtable_check9, %dtable_skip7
  %dtable_ref10 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.core.mem.allocator.ArenaAllocator", i32 0, i32 2), %dtable_skip7 ], [ %next_dtable_ref12, %dtable_check9 ]
  %dtable_ptr11 = load ptr, ptr %dtable_ref10, align 8
  %5 = icmp eq ptr %dtable_ptr11, null
  %next_dtable_ref12 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr11, i32 0, i32 2
  br i1 %5, label %dtable_found13, label %dtable_check9

dtable_found13:                                   ; preds = %dtable_check9
  store ptr @"$ct.dyn.std.core.mem.allocator.ArenaAllocator.resize", ptr %dtable_ref10, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.ArenaAllocator.resize", i32 0, i32 2), align 8
  br label %dtable_skip14

dtable_skip14:                                    ; preds = %dtable_found13, %dtable_skip7
  %next_val15 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.BackedArenaAllocator.release", i32 0, i32 2), align 8
  %6 = icmp eq ptr %next_val15, inttoptr (i64 -1 to ptr)
  br i1 %6, label %dtable_check16, label %dtable_skip21

dtable_check16:                                   ; preds = %dtable_check16, %dtable_skip14
  %dtable_ref17 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.core.mem.allocator.BackedArenaAllocator", i32 0, i32 2), %dtable_skip14 ], [ %next_dtable_ref19, %dtable_check16 ]
  %dtable_ptr18 = load ptr, ptr %dtable_ref17, align 8
  %7 = icmp eq ptr %dtable_ptr18, null
  %next_dtable_ref19 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr18, i32 0, i32 2
  br i1 %7, label %dtable_found20, label %dtable_check16

dtable_found20:                                   ; preds = %dtable_check16
  store ptr @"$ct.dyn.std.core.mem.allocator.BackedArenaAllocator.release", ptr %dtable_ref17, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.BackedArenaAllocator.release", i32 0, i32 2), align 8
  br label %dtable_skip21

dtable_skip21:                                    ; preds = %dtable_found20, %dtable_skip14
  %next_val22 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.BackedArenaAllocator.resize", i32 0, i32 2), align 8
  %8 = icmp eq ptr %next_val22, inttoptr (i64 -1 to ptr)
  br i1 %8, label %dtable_check23, label %dtable_skip28

dtable_check23:                                   ; preds = %dtable_check23, %dtable_skip21
  %dtable_ref24 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.core.mem.allocator.BackedArenaAllocator", i32 0, i32 2), %dtable_skip21 ], [ %next_dtable_ref26, %dtable_check23 ]
  %dtable_ptr25 = load ptr, ptr %dtable_ref24, align 8
  %9 = icmp eq ptr %dtable_ptr25, null
  %next_dtable_ref26 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr25, i32 0, i32 2
  br i1 %9, label %dtable_found27, label %dtable_check23

dtable_found27:                                   ; preds = %dtable_check23
  store ptr @"$ct.dyn.std.core.mem.allocator.BackedArenaAllocator.resize", ptr %dtable_ref24, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.BackedArenaAllocator.resize", i32 0, i32 2), align 8
  br label %dtable_skip28

dtable_skip28:                                    ; preds = %dtable_found27, %dtable_skip21
  %next_val29 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.BackedArenaAllocator.acquire", i32 0, i32 2), align 8
  %10 = icmp eq ptr %next_val29, inttoptr (i64 -1 to ptr)
  br i1 %10, label %dtable_check30, label %dtable_skip35

dtable_check30:                                   ; preds = %dtable_check30, %dtable_skip28
  %dtable_ref31 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.core.mem.allocator.BackedArenaAllocator", i32 0, i32 2), %dtable_skip28 ], [ %next_dtable_ref33, %dtable_check30 ]
  %dtable_ptr32 = load ptr, ptr %dtable_ref31, align 8
  %11 = icmp eq ptr %dtable_ptr32, null
  %next_dtable_ref33 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr32, i32 0, i32 2
  br i1 %11, label %dtable_found34, label %dtable_check30

dtable_found34:                                   ; preds = %dtable_check30
  store ptr @"$ct.dyn.std.core.mem.allocator.BackedArenaAllocator.acquire", ptr %dtable_ref31, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.BackedArenaAllocator.acquire", i32 0, i32 2), align 8
  br label %dtable_skip35

dtable_skip35:                                    ; preds = %dtable_found34, %dtable_skip28
  %next_val36 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.DynamicArenaAllocator.release", i32 0, i32 2), align 8
  %12 = icmp eq ptr %next_val36, inttoptr (i64 -1 to ptr)
  br i1 %12, label %dtable_check37, label %dtable_skip42

dtable_check37:                                   ; preds = %dtable_check37, %dtable_skip35
  %dtable_ref38 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.core.mem.allocator.DynamicArenaAllocator", i32 0, i32 2), %dtable_skip35 ], [ %next_dtable_ref40, %dtable_check37 ]
  %dtable_ptr39 = load ptr, ptr %dtable_ref38, align 8
  %13 = icmp eq ptr %dtable_ptr39, null
  %next_dtable_ref40 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr39, i32 0, i32 2
  br i1 %13, label %dtable_found41, label %dtable_check37

dtable_found41:                                   ; preds = %dtable_check37
  store ptr @"$ct.dyn.std.core.mem.allocator.DynamicArenaAllocator.release", ptr %dtable_ref38, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.DynamicArenaAllocator.release", i32 0, i32 2), align 8
  br label %dtable_skip42

dtable_skip42:                                    ; preds = %dtable_found41, %dtable_skip35
  %next_val43 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.DynamicArenaAllocator.resize", i32 0, i32 2), align 8
  %14 = icmp eq ptr %next_val43, inttoptr (i64 -1 to ptr)
  br i1 %14, label %dtable_check44, label %dtable_skip49

dtable_check44:                                   ; preds = %dtable_check44, %dtable_skip42
  %dtable_ref45 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.core.mem.allocator.DynamicArenaAllocator", i32 0, i32 2), %dtable_skip42 ], [ %next_dtable_ref47, %dtable_check44 ]
  %dtable_ptr46 = load ptr, ptr %dtable_ref45, align 8
  %15 = icmp eq ptr %dtable_ptr46, null
  %next_dtable_ref47 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr46, i32 0, i32 2
  br i1 %15, label %dtable_found48, label %dtable_check44

dtable_found48:                                   ; preds = %dtable_check44
  store ptr @"$ct.dyn.std.core.mem.allocator.DynamicArenaAllocator.resize", ptr %dtable_ref45, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.DynamicArenaAllocator.resize", i32 0, i32 2), align 8
  br label %dtable_skip49

dtable_skip49:                                    ; preds = %dtable_found48, %dtable_skip42
  %next_val50 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.DynamicArenaAllocator.acquire", i32 0, i32 2), align 8
  %16 = icmp eq ptr %next_val50, inttoptr (i64 -1 to ptr)
  br i1 %16, label %dtable_check51, label %dtable_skip56

dtable_check51:                                   ; preds = %dtable_check51, %dtable_skip49
  %dtable_ref52 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.core.mem.allocator.DynamicArenaAllocator", i32 0, i32 2), %dtable_skip49 ], [ %next_dtable_ref54, %dtable_check51 ]
  %dtable_ptr53 = load ptr, ptr %dtable_ref52, align 8
  %17 = icmp eq ptr %dtable_ptr53, null
  %next_dtable_ref54 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr53, i32 0, i32 2
  br i1 %17, label %dtable_found55, label %dtable_check51

dtable_found55:                                   ; preds = %dtable_check51
  store ptr @"$ct.dyn.std.core.mem.allocator.DynamicArenaAllocator.acquire", ptr %dtable_ref52, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.DynamicArenaAllocator.acquire", i32 0, i32 2), align 8
  br label %dtable_skip56

dtable_skip56:                                    ; preds = %dtable_found55, %dtable_skip49
  %next_val57 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.SimpleHeapAllocator.acquire", i32 0, i32 2), align 8
  %18 = icmp eq ptr %next_val57, inttoptr (i64 -1 to ptr)
  br i1 %18, label %dtable_check58, label %dtable_skip63

dtable_check58:                                   ; preds = %dtable_check58, %dtable_skip56
  %dtable_ref59 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.core.mem.allocator.SimpleHeapAllocator", i32 0, i32 2), %dtable_skip56 ], [ %next_dtable_ref61, %dtable_check58 ]
  %dtable_ptr60 = load ptr, ptr %dtable_ref59, align 8
  %19 = icmp eq ptr %dtable_ptr60, null
  %next_dtable_ref61 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr60, i32 0, i32 2
  br i1 %19, label %dtable_found62, label %dtable_check58

dtable_found62:                                   ; preds = %dtable_check58
  store ptr @"$ct.dyn.std.core.mem.allocator.SimpleHeapAllocator.acquire", ptr %dtable_ref59, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.SimpleHeapAllocator.acquire", i32 0, i32 2), align 8
  br label %dtable_skip63

dtable_skip63:                                    ; preds = %dtable_found62, %dtable_skip56
  %next_val64 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.SimpleHeapAllocator.resize", i32 0, i32 2), align 8
  %20 = icmp eq ptr %next_val64, inttoptr (i64 -1 to ptr)
  br i1 %20, label %dtable_check65, label %dtable_skip70

dtable_check65:                                   ; preds = %dtable_check65, %dtable_skip63
  %dtable_ref66 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.core.mem.allocator.SimpleHeapAllocator", i32 0, i32 2), %dtable_skip63 ], [ %next_dtable_ref68, %dtable_check65 ]
  %dtable_ptr67 = load ptr, ptr %dtable_ref66, align 8
  %21 = icmp eq ptr %dtable_ptr67, null
  %next_dtable_ref68 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr67, i32 0, i32 2
  br i1 %21, label %dtable_found69, label %dtable_check65

dtable_found69:                                   ; preds = %dtable_check65
  store ptr @"$ct.dyn.std.core.mem.allocator.SimpleHeapAllocator.resize", ptr %dtable_ref66, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.SimpleHeapAllocator.resize", i32 0, i32 2), align 8
  br label %dtable_skip70

dtable_skip70:                                    ; preds = %dtable_found69, %dtable_skip63
  %next_val71 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.SimpleHeapAllocator.release", i32 0, i32 2), align 8
  %22 = icmp eq ptr %next_val71, inttoptr (i64 -1 to ptr)
  br i1 %22, label %dtable_check72, label %dtable_skip77

dtable_check72:                                   ; preds = %dtable_check72, %dtable_skip70
  %dtable_ref73 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.core.mem.allocator.SimpleHeapAllocator", i32 0, i32 2), %dtable_skip70 ], [ %next_dtable_ref75, %dtable_check72 ]
  %dtable_ptr74 = load ptr, ptr %dtable_ref73, align 8
  %23 = icmp eq ptr %dtable_ptr74, null
  %next_dtable_ref75 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr74, i32 0, i32 2
  br i1 %23, label %dtable_found76, label %dtable_check72

dtable_found76:                                   ; preds = %dtable_check72
  store ptr @"$ct.dyn.std.core.mem.allocator.SimpleHeapAllocator.release", ptr %dtable_ref73, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.SimpleHeapAllocator.release", i32 0, i32 2), align 8
  br label %dtable_skip77

dtable_skip77:                                    ; preds = %dtable_found76, %dtable_skip70
  %next_val78 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.LibcAllocator.acquire", i32 0, i32 2), align 8
  %24 = icmp eq ptr %next_val78, inttoptr (i64 -1 to ptr)
  br i1 %24, label %dtable_check79, label %dtable_skip84

dtable_check79:                                   ; preds = %dtable_check79, %dtable_skip77
  %dtable_ref80 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.core.mem.allocator.LibcAllocator", i32 0, i32 2), %dtable_skip77 ], [ %next_dtable_ref82, %dtable_check79 ]
  %dtable_ptr81 = load ptr, ptr %dtable_ref80, align 8
  %25 = icmp eq ptr %dtable_ptr81, null
  %next_dtable_ref82 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr81, i32 0, i32 2
  br i1 %25, label %dtable_found83, label %dtable_check79

dtable_found83:                                   ; preds = %dtable_check79
  store ptr @"$ct.dyn.std.core.mem.allocator.LibcAllocator.acquire", ptr %dtable_ref80, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.LibcAllocator.acquire", i32 0, i32 2), align 8
  br label %dtable_skip84

dtable_skip84:                                    ; preds = %dtable_found83, %dtable_skip77
  %next_val85 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.LibcAllocator.resize", i32 0, i32 2), align 8
  %26 = icmp eq ptr %next_val85, inttoptr (i64 -1 to ptr)
  br i1 %26, label %dtable_check86, label %dtable_skip91

dtable_check86:                                   ; preds = %dtable_check86, %dtable_skip84
  %dtable_ref87 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.core.mem.allocator.LibcAllocator", i32 0, i32 2), %dtable_skip84 ], [ %next_dtable_ref89, %dtable_check86 ]
  %dtable_ptr88 = load ptr, ptr %dtable_ref87, align 8
  %27 = icmp eq ptr %dtable_ptr88, null
  %next_dtable_ref89 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr88, i32 0, i32 2
  br i1 %27, label %dtable_found90, label %dtable_check86

dtable_found90:                                   ; preds = %dtable_check86
  store ptr @"$ct.dyn.std.core.mem.allocator.LibcAllocator.resize", ptr %dtable_ref87, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.LibcAllocator.resize", i32 0, i32 2), align 8
  br label %dtable_skip91

dtable_skip91:                                    ; preds = %dtable_found90, %dtable_skip84
  %next_val92 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.LibcAllocator.release", i32 0, i32 2), align 8
  %28 = icmp eq ptr %next_val92, inttoptr (i64 -1 to ptr)
  br i1 %28, label %dtable_check93, label %dtable_skip98

dtable_check93:                                   ; preds = %dtable_check93, %dtable_skip91
  %dtable_ref94 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.core.mem.allocator.LibcAllocator", i32 0, i32 2), %dtable_skip91 ], [ %next_dtable_ref96, %dtable_check93 ]
  %dtable_ptr95 = load ptr, ptr %dtable_ref94, align 8
  %29 = icmp eq ptr %dtable_ptr95, null
  %next_dtable_ref96 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr95, i32 0, i32 2
  br i1 %29, label %dtable_found97, label %dtable_check93

dtable_found97:                                   ; preds = %dtable_check93
  store ptr @"$ct.dyn.std.core.mem.allocator.LibcAllocator.release", ptr %dtable_ref94, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.LibcAllocator.release", i32 0, i32 2), align 8
  br label %dtable_skip98

dtable_skip98:                                    ; preds = %dtable_found97, %dtable_skip91
  %next_val99 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.OnStackAllocator.release", i32 0, i32 2), align 8
  %30 = icmp eq ptr %next_val99, inttoptr (i64 -1 to ptr)
  br i1 %30, label %dtable_check100, label %dtable_skip105

dtable_check100:                                  ; preds = %dtable_check100, %dtable_skip98
  %dtable_ref101 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.core.mem.allocator.OnStackAllocator", i32 0, i32 2), %dtable_skip98 ], [ %next_dtable_ref103, %dtable_check100 ]
  %dtable_ptr102 = load ptr, ptr %dtable_ref101, align 8
  %31 = icmp eq ptr %dtable_ptr102, null
  %next_dtable_ref103 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr102, i32 0, i32 2
  br i1 %31, label %dtable_found104, label %dtable_check100

dtable_found104:                                  ; preds = %dtable_check100
  store ptr @"$ct.dyn.std.core.mem.allocator.OnStackAllocator.release", ptr %dtable_ref101, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.OnStackAllocator.release", i32 0, i32 2), align 8
  br label %dtable_skip105

dtable_skip105:                                   ; preds = %dtable_found104, %dtable_skip98
  %next_val106 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.OnStackAllocator.resize", i32 0, i32 2), align 8
  %32 = icmp eq ptr %next_val106, inttoptr (i64 -1 to ptr)
  br i1 %32, label %dtable_check107, label %dtable_skip112

dtable_check107:                                  ; preds = %dtable_check107, %dtable_skip105
  %dtable_ref108 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.core.mem.allocator.OnStackAllocator", i32 0, i32 2), %dtable_skip105 ], [ %next_dtable_ref110, %dtable_check107 ]
  %dtable_ptr109 = load ptr, ptr %dtable_ref108, align 8
  %33 = icmp eq ptr %dtable_ptr109, null
  %next_dtable_ref110 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr109, i32 0, i32 2
  br i1 %33, label %dtable_found111, label %dtable_check107

dtable_found111:                                  ; preds = %dtable_check107
  store ptr @"$ct.dyn.std.core.mem.allocator.OnStackAllocator.resize", ptr %dtable_ref108, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.OnStackAllocator.resize", i32 0, i32 2), align 8
  br label %dtable_skip112

dtable_skip112:                                   ; preds = %dtable_found111, %dtable_skip105
  %next_val113 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.OnStackAllocator.acquire", i32 0, i32 2), align 8
  %34 = icmp eq ptr %next_val113, inttoptr (i64 -1 to ptr)
  br i1 %34, label %dtable_check114, label %dtable_skip119

dtable_check114:                                  ; preds = %dtable_check114, %dtable_skip112
  %dtable_ref115 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.core.mem.allocator.OnStackAllocator", i32 0, i32 2), %dtable_skip112 ], [ %next_dtable_ref117, %dtable_check114 ]
  %dtable_ptr116 = load ptr, ptr %dtable_ref115, align 8
  %35 = icmp eq ptr %dtable_ptr116, null
  %next_dtable_ref117 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr116, i32 0, i32 2
  br i1 %35, label %dtable_found118, label %dtable_check114

dtable_found118:                                  ; preds = %dtable_check114
  store ptr @"$ct.dyn.std.core.mem.allocator.OnStackAllocator.acquire", ptr %dtable_ref115, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.OnStackAllocator.acquire", i32 0, i32 2), align 8
  br label %dtable_skip119

dtable_skip119:                                   ; preds = %dtable_found118, %dtable_skip112
  %next_val120 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.TempAllocator.release", i32 0, i32 2), align 8
  %36 = icmp eq ptr %next_val120, inttoptr (i64 -1 to ptr)
  br i1 %36, label %dtable_check121, label %dtable_skip126

dtable_check121:                                  ; preds = %dtable_check121, %dtable_skip119
  %dtable_ref122 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.core.mem.allocator.TempAllocator", i32 0, i32 2), %dtable_skip119 ], [ %next_dtable_ref124, %dtable_check121 ]
  %dtable_ptr123 = load ptr, ptr %dtable_ref122, align 8
  %37 = icmp eq ptr %dtable_ptr123, null
  %next_dtable_ref124 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr123, i32 0, i32 2
  br i1 %37, label %dtable_found125, label %dtable_check121

dtable_found125:                                  ; preds = %dtable_check121
  store ptr @"$ct.dyn.std.core.mem.allocator.TempAllocator.release", ptr %dtable_ref122, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.TempAllocator.release", i32 0, i32 2), align 8
  br label %dtable_skip126

dtable_skip126:                                   ; preds = %dtable_found125, %dtable_skip119
  %next_val127 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.TempAllocator.resize", i32 0, i32 2), align 8
  %38 = icmp eq ptr %next_val127, inttoptr (i64 -1 to ptr)
  br i1 %38, label %dtable_check128, label %dtable_skip133

dtable_check128:                                  ; preds = %dtable_check128, %dtable_skip126
  %dtable_ref129 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.core.mem.allocator.TempAllocator", i32 0, i32 2), %dtable_skip126 ], [ %next_dtable_ref131, %dtable_check128 ]
  %dtable_ptr130 = load ptr, ptr %dtable_ref129, align 8
  %39 = icmp eq ptr %dtable_ptr130, null
  %next_dtable_ref131 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr130, i32 0, i32 2
  br i1 %39, label %dtable_found132, label %dtable_check128

dtable_found132:                                  ; preds = %dtable_check128
  store ptr @"$ct.dyn.std.core.mem.allocator.TempAllocator.resize", ptr %dtable_ref129, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.TempAllocator.resize", i32 0, i32 2), align 8
  br label %dtable_skip133

dtable_skip133:                                   ; preds = %dtable_found132, %dtable_skip126
  %next_val134 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.TempAllocator.acquire", i32 0, i32 2), align 8
  %40 = icmp eq ptr %next_val134, inttoptr (i64 -1 to ptr)
  br i1 %40, label %dtable_check135, label %dtable_skip140

dtable_check135:                                  ; preds = %dtable_check135, %dtable_skip133
  %dtable_ref136 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.core.mem.allocator.TempAllocator", i32 0, i32 2), %dtable_skip133 ], [ %next_dtable_ref138, %dtable_check135 ]
  %dtable_ptr137 = load ptr, ptr %dtable_ref136, align 8
  %41 = icmp eq ptr %dtable_ptr137, null
  %next_dtable_ref138 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr137, i32 0, i32 2
  br i1 %41, label %dtable_found139, label %dtable_check135

dtable_found139:                                  ; preds = %dtable_check135
  store ptr @"$ct.dyn.std.core.mem.allocator.TempAllocator.acquire", ptr %dtable_ref136, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.TempAllocator.acquire", i32 0, i32 2), align 8
  br label %dtable_skip140

dtable_skip140:                                   ; preds = %dtable_found139, %dtable_skip133
  %next_val141 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.TrackingAllocator.acquire", i32 0, i32 2), align 8
  %42 = icmp eq ptr %next_val141, inttoptr (i64 -1 to ptr)
  br i1 %42, label %dtable_check142, label %dtable_skip147

dtable_check142:                                  ; preds = %dtable_check142, %dtable_skip140
  %dtable_ref143 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.core.mem.allocator.TrackingAllocator", i32 0, i32 2), %dtable_skip140 ], [ %next_dtable_ref145, %dtable_check142 ]
  %dtable_ptr144 = load ptr, ptr %dtable_ref143, align 8
  %43 = icmp eq ptr %dtable_ptr144, null
  %next_dtable_ref145 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr144, i32 0, i32 2
  br i1 %43, label %dtable_found146, label %dtable_check142

dtable_found146:                                  ; preds = %dtable_check142
  store ptr @"$ct.dyn.std.core.mem.allocator.TrackingAllocator.acquire", ptr %dtable_ref143, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.TrackingAllocator.acquire", i32 0, i32 2), align 8
  br label %dtable_skip147

dtable_skip147:                                   ; preds = %dtable_found146, %dtable_skip140
  %next_val148 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.TrackingAllocator.resize", i32 0, i32 2), align 8
  %44 = icmp eq ptr %next_val148, inttoptr (i64 -1 to ptr)
  br i1 %44, label %dtable_check149, label %dtable_skip154

dtable_check149:                                  ; preds = %dtable_check149, %dtable_skip147
  %dtable_ref150 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.core.mem.allocator.TrackingAllocator", i32 0, i32 2), %dtable_skip147 ], [ %next_dtable_ref152, %dtable_check149 ]
  %dtable_ptr151 = load ptr, ptr %dtable_ref150, align 8
  %45 = icmp eq ptr %dtable_ptr151, null
  %next_dtable_ref152 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr151, i32 0, i32 2
  br i1 %45, label %dtable_found153, label %dtable_check149

dtable_found153:                                  ; preds = %dtable_check149
  store ptr @"$ct.dyn.std.core.mem.allocator.TrackingAllocator.resize", ptr %dtable_ref150, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.TrackingAllocator.resize", i32 0, i32 2), align 8
  br label %dtable_skip154

dtable_skip154:                                   ; preds = %dtable_found153, %dtable_skip147
  %next_val155 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.TrackingAllocator.release", i32 0, i32 2), align 8
  %46 = icmp eq ptr %next_val155, inttoptr (i64 -1 to ptr)
  br i1 %46, label %dtable_check156, label %dtable_skip161

dtable_check156:                                  ; preds = %dtable_check156, %dtable_skip154
  %dtable_ref157 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.core.mem.allocator.TrackingAllocator", i32 0, i32 2), %dtable_skip154 ], [ %next_dtable_ref159, %dtable_check156 ]
  %dtable_ptr158 = load ptr, ptr %dtable_ref157, align 8
  %47 = icmp eq ptr %dtable_ptr158, null
  %next_dtable_ref159 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr158, i32 0, i32 2
  br i1 %47, label %dtable_found160, label %dtable_check156

dtable_found160:                                  ; preds = %dtable_check156
  store ptr @"$ct.dyn.std.core.mem.allocator.TrackingAllocator.release", ptr %dtable_ref157, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.TrackingAllocator.release", i32 0, i32 2), align 8
  br label %dtable_skip161

dtable_skip161:                                   ; preds = %dtable_found160, %dtable_skip154
  %next_val162 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.Vmem.acquire", i32 0, i32 2), align 8
  %48 = icmp eq ptr %next_val162, inttoptr (i64 -1 to ptr)
  br i1 %48, label %dtable_check163, label %dtable_skip168

dtable_check163:                                  ; preds = %dtable_check163, %dtable_skip161
  %dtable_ref164 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.core.mem.allocator.Vmem", i32 0, i32 2), %dtable_skip161 ], [ %next_dtable_ref166, %dtable_check163 ]
  %dtable_ptr165 = load ptr, ptr %dtable_ref164, align 8
  %49 = icmp eq ptr %dtable_ptr165, null
  %next_dtable_ref166 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr165, i32 0, i32 2
  br i1 %49, label %dtable_found167, label %dtable_check163

dtable_found167:                                  ; preds = %dtable_check163
  store ptr @"$ct.dyn.std.core.mem.allocator.Vmem.acquire", ptr %dtable_ref164, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.Vmem.acquire", i32 0, i32 2), align 8
  br label %dtable_skip168

dtable_skip168:                                   ; preds = %dtable_found167, %dtable_skip161
  %next_val169 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.Vmem.resize", i32 0, i32 2), align 8
  %50 = icmp eq ptr %next_val169, inttoptr (i64 -1 to ptr)
  br i1 %50, label %dtable_check170, label %dtable_skip175

dtable_check170:                                  ; preds = %dtable_check170, %dtable_skip168
  %dtable_ref171 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.core.mem.allocator.Vmem", i32 0, i32 2), %dtable_skip168 ], [ %next_dtable_ref173, %dtable_check170 ]
  %dtable_ptr172 = load ptr, ptr %dtable_ref171, align 8
  %51 = icmp eq ptr %dtable_ptr172, null
  %next_dtable_ref173 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr172, i32 0, i32 2
  br i1 %51, label %dtable_found174, label %dtable_check170

dtable_found174:                                  ; preds = %dtable_check170
  store ptr @"$ct.dyn.std.core.mem.allocator.Vmem.resize", ptr %dtable_ref171, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.Vmem.resize", i32 0, i32 2), align 8
  br label %dtable_skip175

dtable_skip175:                                   ; preds = %dtable_found174, %dtable_skip168
  %next_val176 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.Vmem.release", i32 0, i32 2), align 8
  %52 = icmp eq ptr %next_val176, inttoptr (i64 -1 to ptr)
  br i1 %52, label %dtable_check177, label %dtable_skip182

dtable_check177:                                  ; preds = %dtable_check177, %dtable_skip175
  %dtable_ref178 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.core.mem.allocator.Vmem", i32 0, i32 2), %dtable_skip175 ], [ %next_dtable_ref180, %dtable_check177 ]
  %dtable_ptr179 = load ptr, ptr %dtable_ref178, align 8
  %53 = icmp eq ptr %dtable_ptr179, null
  %next_dtable_ref180 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr179, i32 0, i32 2
  br i1 %53, label %dtable_found181, label %dtable_check177

dtable_found181:                                  ; preds = %dtable_check177
  store ptr @"$ct.dyn.std.core.mem.allocator.Vmem.release", ptr %dtable_ref178, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.Vmem.release", i32 0, i32 2), align 8
  br label %dtable_skip182

dtable_skip182:                                   ; preds = %dtable_found181, %dtable_skip175
  %next_val183 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.LazyTempAllocator.acquire", i32 0, i32 2), align 8
  %54 = icmp eq ptr %next_val183, inttoptr (i64 -1 to ptr)
  br i1 %54, label %dtable_check184, label %dtable_skip189

dtable_check184:                                  ; preds = %dtable_check184, %dtable_skip182
  %dtable_ref185 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.core.mem.allocator.LazyTempAllocator", i32 0, i32 2), %dtable_skip182 ], [ %next_dtable_ref187, %dtable_check184 ]
  %dtable_ptr186 = load ptr, ptr %dtable_ref185, align 8
  %55 = icmp eq ptr %dtable_ptr186, null
  %next_dtable_ref187 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr186, i32 0, i32 2
  br i1 %55, label %dtable_found188, label %dtable_check184

dtable_found188:                                  ; preds = %dtable_check184
  store ptr @"$ct.dyn.std.core.mem.allocator.LazyTempAllocator.acquire", ptr %dtable_ref185, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.LazyTempAllocator.acquire", i32 0, i32 2), align 8
  br label %dtable_skip189

dtable_skip189:                                   ; preds = %dtable_found188, %dtable_skip182
  %next_val190 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.LazyTempAllocator.resize", i32 0, i32 2), align 8
  %56 = icmp eq ptr %next_val190, inttoptr (i64 -1 to ptr)
  br i1 %56, label %dtable_check191, label %dtable_skip196

dtable_check191:                                  ; preds = %dtable_check191, %dtable_skip189
  %dtable_ref192 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.core.mem.allocator.LazyTempAllocator", i32 0, i32 2), %dtable_skip189 ], [ %next_dtable_ref194, %dtable_check191 ]
  %dtable_ptr193 = load ptr, ptr %dtable_ref192, align 8
  %57 = icmp eq ptr %dtable_ptr193, null
  %next_dtable_ref194 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr193, i32 0, i32 2
  br i1 %57, label %dtable_found195, label %dtable_check191

dtable_found195:                                  ; preds = %dtable_check191
  store ptr @"$ct.dyn.std.core.mem.allocator.LazyTempAllocator.resize", ptr %dtable_ref192, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.LazyTempAllocator.resize", i32 0, i32 2), align 8
  br label %dtable_skip196

dtable_skip196:                                   ; preds = %dtable_found195, %dtable_skip189
  %next_val197 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.LazyTempAllocator.release", i32 0, i32 2), align 8
  %58 = icmp eq ptr %next_val197, inttoptr (i64 -1 to ptr)
  br i1 %58, label %dtable_check198, label %dtable_skip203

dtable_check198:                                  ; preds = %dtable_check198, %dtable_skip196
  %dtable_ref199 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.core.mem.allocator.LazyTempAllocator", i32 0, i32 2), %dtable_skip196 ], [ %next_dtable_ref201, %dtable_check198 ]
  %dtable_ptr200 = load ptr, ptr %dtable_ref199, align 8
  %59 = icmp eq ptr %dtable_ptr200, null
  %next_dtable_ref201 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr200, i32 0, i32 2
  br i1 %59, label %dtable_found202, label %dtable_check198

dtable_found202:                                  ; preds = %dtable_check198
  store ptr @"$ct.dyn.std.core.mem.allocator.LazyTempAllocator.release", ptr %dtable_ref199, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.LazyTempAllocator.release", i32 0, i32 2), align 8
  br label %dtable_skip203

dtable_skip203:                                   ; preds = %dtable_found202, %dtable_skip196
  %next_val204 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.NullAllocator.acquire", i32 0, i32 2), align 8
  %60 = icmp eq ptr %next_val204, inttoptr (i64 -1 to ptr)
  br i1 %60, label %dtable_check205, label %dtable_skip210

dtable_check205:                                  ; preds = %dtable_check205, %dtable_skip203
  %dtable_ref206 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.core.mem.allocator.NullAllocator", i32 0, i32 2), %dtable_skip203 ], [ %next_dtable_ref208, %dtable_check205 ]
  %dtable_ptr207 = load ptr, ptr %dtable_ref206, align 8
  %61 = icmp eq ptr %dtable_ptr207, null
  %next_dtable_ref208 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr207, i32 0, i32 2
  br i1 %61, label %dtable_found209, label %dtable_check205

dtable_found209:                                  ; preds = %dtable_check205
  store ptr @"$ct.dyn.std.core.mem.allocator.NullAllocator.acquire", ptr %dtable_ref206, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.NullAllocator.acquire", i32 0, i32 2), align 8
  br label %dtable_skip210

dtable_skip210:                                   ; preds = %dtable_found209, %dtable_skip203
  %next_val211 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.NullAllocator.resize", i32 0, i32 2), align 8
  %62 = icmp eq ptr %next_val211, inttoptr (i64 -1 to ptr)
  br i1 %62, label %dtable_check212, label %dtable_skip217

dtable_check212:                                  ; preds = %dtable_check212, %dtable_skip210
  %dtable_ref213 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.core.mem.allocator.NullAllocator", i32 0, i32 2), %dtable_skip210 ], [ %next_dtable_ref215, %dtable_check212 ]
  %dtable_ptr214 = load ptr, ptr %dtable_ref213, align 8
  %63 = icmp eq ptr %dtable_ptr214, null
  %next_dtable_ref215 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr214, i32 0, i32 2
  br i1 %63, label %dtable_found216, label %dtable_check212

dtable_found216:                                  ; preds = %dtable_check212
  store ptr @"$ct.dyn.std.core.mem.allocator.NullAllocator.resize", ptr %dtable_ref213, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.NullAllocator.resize", i32 0, i32 2), align 8
  br label %dtable_skip217

dtable_skip217:                                   ; preds = %dtable_found216, %dtable_skip210
  %next_val218 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.NullAllocator.release", i32 0, i32 2), align 8
  %64 = icmp eq ptr %next_val218, inttoptr (i64 -1 to ptr)
  br i1 %64, label %dtable_check219, label %dtable_skip224

dtable_check219:                                  ; preds = %dtable_check219, %dtable_skip217
  %dtable_ref220 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.core.mem.allocator.NullAllocator", i32 0, i32 2), %dtable_skip217 ], [ %next_dtable_ref222, %dtable_check219 ]
  %dtable_ptr221 = load ptr, ptr %dtable_ref220, align 8
  %65 = icmp eq ptr %dtable_ptr221, null
  %next_dtable_ref222 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr221, i32 0, i32 2
  br i1 %65, label %dtable_found223, label %dtable_check219

dtable_found223:                                  ; preds = %dtable_check219
  store ptr @"$ct.dyn.std.core.mem.allocator.NullAllocator.release", ptr %dtable_ref220, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.NullAllocator.release", i32 0, i32 2), align 8
  br label %dtable_skip224

dtable_skip224:                                   ; preds = %dtable_found223, %dtable_skip217
  ret void
}

attributes #0 = { nounwind ssp uwtable "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" }
attributes #1 = { nocallback nofree nosync nounwind willreturn memory(none) }
attributes #2 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }
attributes #3 = { nocallback nofree nounwind willreturn memory(argmem: write) }
attributes #4 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #5 = { cold noreturn nounwind memory(inaccessiblemem: write) }
attributes #6 = { noreturn }
attributes #7 = { alwaysinline }

!llvm.module.flags = !{!89, !90, !91, !92, !93, !94}
!llvm.dbg.cu = !{!95}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "PAGE_IS_ALIGNED", linkageName: "std.core.mem.allocator.PAGE_IS_ALIGNED.8054", scope: !2, file: !2, line: 28, type: !3, isLocal: true, isDefinition: true, align: 8)
!2 = !DIFile(filename: "backed_arena_allocator.c3", directory: "C:/Compilers/C3/lib/std/core/allocators")
!3 = !DIDerivedType(tag: DW_TAG_typedef, name: "usz", baseType: !4)
!4 = !DIBasicType(name: "ulong", size: 64, encoding: DW_ATE_unsigned)
!5 = !DIGlobalVariableExpression(var: !6, expr: !DIExpression())
!6 = distinct !DIGlobalVariable(name: "LIBC_ALLOCATOR", linkageName: "std.core.mem.allocator.LIBC_ALLOCATOR", scope: !7, file: !7, line: 12, type: !8, isLocal: false, isDefinition: true, align: 8)
!7 = !DIFile(filename: "libc_allocator.c3", directory: "C:/Compilers/C3/lib/std/core/allocators")
!8 = !DIDerivedType(tag: DW_TAG_typedef, name: "LibcAllocator", scope: !7, file: !7, line: 11, baseType: !4, align: 8)
!9 = !DIGlobalVariableExpression(var: !10, expr: !DIExpression())
!10 = distinct !DIGlobalVariable(name: "PAGE_IS_ALIGNED", linkageName: "std.core.mem.allocator.PAGE_IS_ALIGNED.8390", scope: !11, file: !11, line: 52, type: !3, isLocal: true, isDefinition: true, align: 8)
!11 = !DIFile(filename: "temp_allocator.c3", directory: "C:/Compilers/C3/lib/std/core/allocators")
!12 = !DIGlobalVariableExpression(var: !13, expr: !DIExpression())
!13 = distinct !DIGlobalVariable(name: "MAX_BACKTRACE", linkageName: "std.core.mem.allocator.MAX_BACKTRACE", scope: !14, file: !14, line: 8, type: !15, isLocal: false, isDefinition: true, align: 4)
!14 = !DIFile(filename: "tracking_allocator.c3", directory: "C:/Compilers/C3/lib/std/core/allocators")
!15 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!16 = !DIGlobalVariableExpression(var: !17, expr: !DIExpression())
!17 = distinct !DIGlobalVariable(name: "page_size", linkageName: "init.page_size", scope: !18, file: !18, line: 40, type: !3, isLocal: true, isDefinition: true, align: 8)
!18 = !DIFile(filename: "vmem.c3", directory: "C:/Compilers/C3/lib/std/core/allocators")
!19 = !DIGlobalVariableExpression(var: !20, expr: !DIExpression())
!20 = distinct !DIGlobalVariable(name: "DEFAULT_SIZE_PREFIX", linkageName: "std.core.mem.allocator.DEFAULT_SIZE_PREFIX", scope: !21, file: !21, line: 17, type: !3, isLocal: false, isDefinition: true, align: 8)
!21 = !DIFile(filename: "mem_allocator.c3", directory: "C:/Compilers/C3/lib/std/core")
!22 = !DIGlobalVariableExpression(var: !23, expr: !DIExpression())
!23 = distinct !DIGlobalVariable(name: "DEFAULT_SIZE_PREFIX_ALIGNMENT", linkageName: "std.core.mem.allocator.DEFAULT_SIZE_PREFIX_ALIGNMENT", scope: !21, file: !21, line: 18, type: !3, isLocal: false, isDefinition: true, align: 8)
!24 = !DIGlobalVariableExpression(var: !25, expr: !DIExpression())
!25 = distinct !DIGlobalVariable(name: "thread_allocator", linkageName: "std.core.mem.allocator.thread_allocator", scope: !21, file: !21, line: 400, type: !26, isLocal: false, isDefinition: true, align: 8)
!26 = !DICompositeType(tag: DW_TAG_structure_type, name: "Allocator", size: 128, align: 64, elements: !27, identifier: "Allocator")
!27 = !{!28, !30}
!28 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !26, baseType: !29, size: 64, align: 64)
!29 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "void*", baseType: null, size: 64, align: 64, dwarfAddressSpace: 0)
!30 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !26, baseType: !31, size: 64, align: 64, offset: 64)
!31 = !DIBasicType(name: "typeid", size: 64, encoding: DW_ATE_address)
!32 = !DIGlobalVariableExpression(var: !33, expr: !DIExpression())
!33 = distinct !DIGlobalVariable(name: "temp_base_allocator", linkageName: "std.core.mem.allocator.temp_base_allocator", scope: !21, file: !21, line: 401, type: !26, isLocal: true, isDefinition: true, align: 8)
!34 = !DIGlobalVariableExpression(var: !35, expr: !DIExpression())
!35 = distinct !DIGlobalVariable(name: "LAZY_TEMP", linkageName: "std.core.mem.allocator.LAZY_TEMP", scope: !21, file: !21, line: 405, type: !36, isLocal: true, isDefinition: true, align: 8)
!36 = !DIDerivedType(tag: DW_TAG_typedef, name: "LazyTempAllocator", scope: !21, file: !21, line: 519, baseType: !4, align: 8)
!37 = !DIGlobalVariableExpression(var: !38, expr: !DIExpression())
!38 = distinct !DIGlobalVariable(name: "current_temp", linkageName: "std.core.mem.allocator.current_temp", scope: !21, file: !21, line: 406, type: !26, isLocal: false, isDefinition: true, align: 8)
!39 = !DIGlobalVariableExpression(var: !40, expr: !DIExpression())
!40 = distinct !DIGlobalVariable(name: "top_temp", linkageName: "std.core.mem.allocator.top_temp", scope: !21, file: !21, line: 407, type: !41, isLocal: false, isDefinition: true, align: 8)
!41 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "TempAllocator*", baseType: !42, size: 64, align: 64, dwarfAddressSpace: 0)
!42 = !DICompositeType(tag: DW_TAG_structure_type, name: "TempAllocator", scope: !11, file: !11, line: 31, size: 704, align: 64, elements: !43, identifier: "std.core.mem.allocator.TempAllocator")
!43 = !{!44, !45, !58, !59, !61, !62, !63, !64, !65, !66, !67}
!44 = !DIDerivedType(tag: DW_TAG_member, name: "backing_allocator", scope: !42, file: !11, line: 33, baseType: !26, size: 128, align: 64)
!45 = !DIDerivedType(tag: DW_TAG_member, name: "last_page", scope: !42, file: !11, line: 34, baseType: !46, size: 64, align: 64, offset: 128)
!46 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "TempAllocatorPage*", baseType: !47, size: 64, align: 64, dwarfAddressSpace: 0)
!47 = !DICompositeType(tag: DW_TAG_structure_type, name: "TempAllocatorPage", scope: !11, file: !11, line: 54, size: 256, align: 64, elements: !48, identifier: "std.core.mem.allocator.TempAllocatorPage")
!48 = !{!49, !50, !51, !52, !53}
!49 = !DIDerivedType(tag: DW_TAG_member, name: "prev_page", scope: !47, file: !11, line: 56, baseType: !46, size: 64, align: 64)
!50 = !DIDerivedType(tag: DW_TAG_member, name: "start", scope: !47, file: !11, line: 57, baseType: !29, size: 64, align: 64, offset: 64)
!51 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !47, file: !11, line: 58, baseType: !3, size: 64, align: 64, offset: 128)
!52 = !DIDerivedType(tag: DW_TAG_member, name: "ident", scope: !47, file: !11, line: 59, baseType: !3, size: 64, align: 64, offset: 192)
!53 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !47, file: !11, line: 60, baseType: !54, align: 8, offset: 256)
!54 = !DICompositeType(tag: DW_TAG_array_type, baseType: !55, align: 8, elements: !56)
!55 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_unsigned_char)
!56 = !{!57}
!57 = !DISubrange(count: 0, lowerBound: 0)
!58 = !DIDerivedType(tag: DW_TAG_member, name: "derived", scope: !42, file: !11, line: 35, baseType: !41, size: 64, align: 64, offset: 192)
!59 = !DIDerivedType(tag: DW_TAG_member, name: "allocated", scope: !42, file: !11, line: 36, baseType: !60, size: 8, align: 8, offset: 256)
!60 = !DIBasicType(name: "bool", size: 8, encoding: DW_ATE_boolean)
!61 = !DIDerivedType(tag: DW_TAG_member, name: "reserve_size", scope: !42, file: !11, line: 37, baseType: !3, size: 64, align: 64, offset: 320)
!62 = !DIDerivedType(tag: DW_TAG_member, name: "realloc_size", scope: !42, file: !11, line: 38, baseType: !3, size: 64, align: 64, offset: 384)
!63 = !DIDerivedType(tag: DW_TAG_member, name: "min_size", scope: !42, file: !11, line: 39, baseType: !3, size: 64, align: 64, offset: 448)
!64 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !42, file: !11, line: 40, baseType: !3, size: 64, align: 64, offset: 512)
!65 = !DIDerivedType(tag: DW_TAG_member, name: "capacity", scope: !42, file: !11, line: 41, baseType: !3, size: 64, align: 64, offset: 576)
!66 = !DIDerivedType(tag: DW_TAG_member, name: "original_capacity", scope: !42, file: !11, line: 42, baseType: !3, size: 64, align: 64, offset: 640)
!67 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !42, file: !11, line: 43, baseType: !54, align: 8, offset: 704)
!68 = !DIGlobalVariableExpression(var: !69, expr: !DIExpression())
!69 = distinct !DIGlobalVariable(name: "auto_create_temp", linkageName: "std.core.mem.allocator.auto_create_temp", scope: !21, file: !21, line: 408, type: !60, isLocal: false, isDefinition: true, align: 1)
!70 = !DIGlobalVariableExpression(var: !71, expr: !DIExpression())
!71 = distinct !DIGlobalVariable(name: "temp_allocator_min_size", linkageName: "std.core.mem.allocator.temp_allocator_min_size", scope: !21, file: !21, line: 410, type: !3, isLocal: false, isDefinition: true, align: 8)
!72 = !DIGlobalVariableExpression(var: !73, expr: !DIExpression())
!73 = distinct !DIGlobalVariable(name: "temp_allocator_reserve_size", linkageName: "std.core.mem.allocator.temp_allocator_reserve_size", scope: !21, file: !21, line: 411, type: !3, isLocal: false, isDefinition: true, align: 8)
!74 = !DIGlobalVariableExpression(var: !75, expr: !DIExpression())
!75 = distinct !DIGlobalVariable(name: "temp_allocator_realloc_size", linkageName: "std.core.mem.allocator.temp_allocator_realloc_size", scope: !21, file: !21, line: 412, type: !3, isLocal: false, isDefinition: true, align: 8)
!76 = !DIGlobalVariableExpression(var: !77, expr: !DIExpression())
!77 = distinct !DIGlobalVariable(name: "NULL_ALLOCATOR", linkageName: "std.core.mem.allocator.NULL_ALLOCATOR", scope: !21, file: !21, line: 537, type: !78, isLocal: false, isDefinition: true, align: 8)
!78 = !DIDerivedType(tag: DW_TAG_typedef, name: "NullAllocator", scope: !21, file: !21, line: 538, baseType: !4, align: 8)
!79 = !DIGlobalVariableExpression(var: !80, expr: !DIExpression())
!80 = distinct !DIGlobalVariable(name: "WASM_BLOCK_SIZE", linkageName: "std.core.mem.allocator.WASM_BLOCK_SIZE", scope: !81, file: !81, line: 4, type: !3, isLocal: false, isDefinition: true, align: 8)
!81 = !DIFile(filename: "wasm_memory.c3", directory: "C:/Compilers/C3/lib/std/core/os/wasm")
!82 = !DIGlobalVariableExpression(var: !83, expr: !DIExpression())
!83 = distinct !DIGlobalVariable(name: "wasm_memory", linkageName: "std.core.mem.allocator.wasm_memory", scope: !81, file: !81, line: 6, type: !84, isLocal: false, isDefinition: true, align: 8)
!84 = !DICompositeType(tag: DW_TAG_structure_type, name: "WasmMemory", scope: !81, file: !81, line: 8, size: 128, align: 64, elements: !85, identifier: "std.core.mem.allocator.WasmMemory")
!85 = !{!86, !87}
!86 = !DIDerivedType(tag: DW_TAG_member, name: "allocation", scope: !84, file: !81, line: 10, baseType: !3, size: 64, align: 64)
!87 = !DIDerivedType(tag: DW_TAG_member, name: "use", scope: !84, file: !81, line: 11, baseType: !88, size: 64, align: 64, offset: 64)
!88 = !DIDerivedType(tag: DW_TAG_typedef, name: "uptr", baseType: !4)
!89 = !{i32 1, !"CodeView", i32 1}
!90 = !{i32 2, !"Debug Info Version", i32 3}
!91 = !{i32 2, !"wchar_size", i32 2}
!92 = !{i32 4, !"PIC Level", i32 2}
!93 = !{i32 1, !"uwtable", i32 2}
!94 = !{i32 1, !"MaxTLSAlign", i32 65536}
!95 = distinct !DICompileUnit(language: DW_LANG_C11, file: !96, producer: "c3c", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !97, globals: !126, splitDebugInlining: false)
!96 = !DIFile(filename: "arena_allocator.c3", directory: "C:/Compilers/C3/lib/std/core/allocators")
!97 = !{!98, !102}
!98 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "AllocInitType", scope: !96, file: !96, line: 27, baseType: !15, size: 32, align: 32, elements: !99)
!99 = !{!100, !101}
!100 = !DIEnumerator(name: "NO_ZERO", value: 0)
!101 = !DIEnumerator(name: "ZERO", value: 1)
!102 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "VirtualMemoryAccess", scope: !103, file: !18, line: 20, baseType: !15, size: 32, align: 32, elements: !117)
!103 = !DICompositeType(tag: DW_TAG_structure_type, name: "VirtualMemory", scope: !104, file: !18, line: 11, size: 192, align: 64, elements: !113, identifier: "std.core.mem.vm.VirtualMemory")
!104 = !DICompositeType(tag: DW_TAG_structure_type, name: "Vmem", scope: !18, file: !18, line: 12, size: 576, align: 64, elements: !105, identifier: "std.core.mem.allocator.Vmem")
!105 = !{!106, !107, !108, !109, !110, !111, !112}
!106 = !DIDerivedType(tag: DW_TAG_member, name: "memory", scope: !104, file: !18, line: 14, baseType: !103, size: 192, align: 64)
!107 = !DIDerivedType(tag: DW_TAG_member, name: "allocated", scope: !104, file: !18, line: 15, baseType: !3, size: 64, align: 64, offset: 192)
!108 = !DIDerivedType(tag: DW_TAG_member, name: "pagesize", scope: !104, file: !18, line: 16, baseType: !3, size: 64, align: 64, offset: 256)
!109 = !DIDerivedType(tag: DW_TAG_member, name: "page_pot", scope: !104, file: !18, line: 17, baseType: !3, size: 64, align: 64, offset: 320)
!110 = !DIDerivedType(tag: DW_TAG_member, name: "last_page", scope: !104, file: !18, line: 18, baseType: !3, size: 64, align: 64, offset: 384)
!111 = !DIDerivedType(tag: DW_TAG_member, name: "high_water", scope: !104, file: !18, line: 19, baseType: !3, size: 64, align: 64, offset: 448)
!112 = !DIDerivedType(tag: DW_TAG_member, name: "options", scope: !104, file: !18, line: 20, baseType: !15, size: 32, align: 32, offset: 512)
!113 = !{!114, !115, !116}
!114 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !103, file: !18, line: 13, baseType: !29, size: 64, align: 64)
!115 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !103, file: !18, line: 14, baseType: !3, size: 64, align: 64, offset: 64)
!116 = !DIDerivedType(tag: DW_TAG_member, name: "default_access", scope: !103, file: !18, line: 15, baseType: !102, size: 32, align: 32, offset: 128)
!117 = !{!118, !119, !120, !121, !122, !123, !124, !125}
!118 = !DIEnumerator(name: "PROTECTED", value: 0)
!119 = !DIEnumerator(name: "READ", value: 1)
!120 = !DIEnumerator(name: "WRITE", value: 2)
!121 = !DIEnumerator(name: "READWRITE", value: 3)
!122 = !DIEnumerator(name: "EXEC", value: 4)
!123 = !DIEnumerator(name: "EXECREAD", value: 5)
!124 = !DIEnumerator(name: "EXECWRITE", value: 6)
!125 = !DIEnumerator(name: "ANY", value: 7)
!126 = !{!0, !5, !9, !12, !16, !19, !22, !24, !32, !34, !37, !39, !68, !70, !72, !74, !76, !79, !82}
!127 = distinct !DISubprogram(name: "init", linkageName: "std.core.mem.allocator.ArenaAllocator.init", scope: !96, file: !96, line: 22, type: !128, scopeLine: 22, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !95, retainedNodes: !140)
!128 = !DISubroutineType(types: !129)
!129 = !{!130, !130, !134}
!130 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "ArenaAllocator*", baseType: !131, size: 64, align: 64, dwarfAddressSpace: 0)
!131 = !DICompositeType(tag: DW_TAG_structure_type, name: "ArenaAllocator", scope: !96, file: !96, line: 11, size: 192, align: 64, elements: !132, identifier: "std.core.mem.allocator.ArenaAllocator")
!132 = !{!133, !139}
!133 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !131, file: !96, line: 13, baseType: !134, size: 128, align: 64)
!134 = !DICompositeType(tag: DW_TAG_structure_type, name: "char[]", size: 128, align: 64, elements: !135, identifier: "char[]")
!135 = !{!136, !138}
!136 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !134, baseType: !137, size: 64, align: 64)
!137 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "char*", baseType: !55, size: 64, align: 64, dwarfAddressSpace: 0)
!138 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !134, baseType: !3, size: 64, align: 64, offset: 64)
!139 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !131, file: !96, line: 14, baseType: !3, size: 64, align: 64, offset: 128)
!140 = !{}
!141 = !DILocation(line: 23, scope: !127)
!142 = !DILocalVariable(name: "self", arg: 1, scope: !127, file: !96, line: 22, type: !130)
!143 = !DILocation(line: 22, scope: !127)
!144 = !DILocalVariable(name: "data", arg: 2, scope: !127, file: !96, line: 22, type: !134)
!145 = !DILocation(line: 24, scope: !127)
!146 = !DILocation(line: 25, scope: !127)
!147 = !DILocation(line: 26, scope: !127)
!148 = distinct !DISubprogram(name: "clear", linkageName: "std.core.mem.allocator.ArenaAllocator.clear", scope: !96, file: !96, line: 32, type: !149, scopeLine: 32, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !95, retainedNodes: !140)
!149 = !DISubroutineType(types: !150)
!150 = !{null, !130}
!151 = !DILocation(line: 33, scope: !148)
!152 = !DILocalVariable(name: "self", arg: 1, scope: !148, file: !96, line: 32, type: !130)
!153 = !DILocation(line: 32, scope: !148)
!154 = !DILocation(line: 34, scope: !148)
!155 = distinct !DISubprogram(name: "mark", linkageName: "std.core.mem.allocator.ArenaAllocator.mark", scope: !96, file: !96, line: 54, type: !156, scopeLine: 54, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !95, retainedNodes: !140)
!156 = !DISubroutineType(types: !157)
!157 = !{!3, !130}
!158 = !DILocation(line: 54, scope: !155)
!159 = !DILocalVariable(name: "self", arg: 1, scope: !155, file: !96, line: 54, type: !130)
!160 = distinct !DISubprogram(name: "reset", linkageName: "std.core.mem.allocator.ArenaAllocator.reset", scope: !96, file: !96, line: 62, type: !161, scopeLine: 62, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !95, retainedNodes: !140)
!161 = !DISubroutineType(types: !162)
!162 = !{null, !130, !4}
!163 = !DILocation(line: 62, scope: !160)
!164 = !DILocalVariable(name: "self", arg: 1, scope: !160, file: !96, line: 62, type: !130)
!165 = !DILocalVariable(name: "mark", arg: 2, scope: !160, file: !96, line: 62, type: !3)
!166 = !DILocation(line: 60, scope: !167)
!167 = distinct !DILexicalBlock(scope: !160, file: !96, line: 62, column: 50)
!168 = distinct !DISubprogram(name: "release", linkageName: "std.core.mem.allocator.ArenaAllocator.release", scope: !96, file: !96, line: 69, type: !169, scopeLine: 69, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !95, retainedNodes: !140)
!169 = !DISubroutineType(types: !170)
!170 = !{null, !130, !29, !60}
!171 = !DILocation(line: 70, scope: !168)
!172 = !DILocalVariable(name: "self", arg: 1, scope: !168, file: !96, line: 69, type: !130)
!173 = !DILocation(line: 69, scope: !168)
!174 = !DILocalVariable(name: "ptr", arg: 2, scope: !168, file: !96, line: 69, type: !29)
!175 = !DILocalVariable(name: ".anon", arg: 3, scope: !168, file: !96, line: 69, type: !60)
!176 = !DILocation(line: 67, scope: !177)
!177 = distinct !DILexicalBlock(scope: !168, file: !96, line: 70, column: 1)
!178 = !DILocation(line: 71, scope: !168)
!179 = !DILocalVariable(name: "header", scope: !168, file: !96, line: 72, type: !180, align: 8)
!180 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "ArenaAllocatorHeader*", baseType: !181, size: 64, align: 64, dwarfAddressSpace: 0)
!181 = !DICompositeType(tag: DW_TAG_structure_type, name: "ArenaAllocatorHeader", scope: !96, file: !96, line: 147, size: 64, align: 64, elements: !182, identifier: "std.core.mem.allocator.ArenaAllocatorHeader.8040")
!182 = !{!183, !184}
!183 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !181, file: !96, line: 149, baseType: !3, size: 64, align: 64)
!184 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !181, file: !96, line: 150, baseType: !54, align: 8, offset: 64)
!185 = !DILocation(line: 72, scope: !168)
!186 = !DILocation(line: 74, scope: !168)
!187 = !DILocation(line: 76, scope: !188)
!188 = distinct !DILexicalBlock(scope: !168, file: !96, line: 75, column: 2)
!189 = distinct !DISubprogram(name: "acquire", linkageName: "std.core.mem.allocator.ArenaAllocator.acquire", scope: !96, file: !96, line: 89, type: !190, scopeLine: 89, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !95, retainedNodes: !140)
!190 = !DISubroutineType(types: !191)
!191 = !{!192, !194, !130, !4, !98, !4}
!192 = !DIDerivedType(tag: DW_TAG_typedef, name: "fault", baseType: !193)
!193 = !DIBasicType(name: "long", size: 64, encoding: DW_ATE_signed)
!194 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "void**", baseType: !29, size: 64, align: 64, dwarfAddressSpace: 0)
!195 = !DILocation(line: 90, scope: !189)
!196 = !DILocalVariable(name: "self", arg: 1, scope: !189, file: !96, line: 89, type: !130)
!197 = !DILocation(line: 89, scope: !189)
!198 = !DILocalVariable(name: "size", arg: 2, scope: !189, file: !96, line: 89, type: !3)
!199 = !DILocalVariable(name: "init_type", arg: 3, scope: !189, file: !96, line: 89, type: !98)
!200 = !DILocalVariable(name: "alignment", arg: 4, scope: !189, file: !96, line: 89, type: !3)
!201 = !DILocation(line: 84, scope: !202)
!202 = distinct !DILexicalBlock(scope: !189, file: !96, line: 90, column: 1)
!203 = !DILocation(line: 975, scope: !204, inlinedAt: !201)
!204 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !205, file: !205, line: 973, scopeLine: 973, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!205 = !DIFile(filename: "math.c3", directory: "C:/Compilers/C3/lib/std/math")
!206 = !DILocation(line: 85, scope: !202)
!207 = !DILocation(line: 86, scope: !202)
!208 = !DILocation(line: 91, scope: !189)
!209 = !DILocalVariable(name: "total_len", scope: !189, file: !96, line: 92, type: !3, align: 8)
!210 = !DILocation(line: 92, scope: !189)
!211 = !DILocation(line: 93, scope: !189)
!212 = !DILocalVariable(name: "start_mem", scope: !189, file: !96, line: 94, type: !29, align: 8)
!213 = !DILocation(line: 94, scope: !189)
!214 = !DILocalVariable(name: "unaligned_pointer_to_offset", scope: !189, file: !96, line: 95, type: !29, align: 8)
!215 = !DILocation(line: 95, scope: !189)
!216 = !DILocalVariable(name: "mem", scope: !189, file: !96, line: 96, type: !29, align: 8)
!217 = !DILocation(line: 96, scope: !189)
!218 = !DILocation(line: 313, scope: !219, inlinedAt: !217)
!219 = distinct !DISubprogram(name: "aligned_pointer", linkageName: "aligned_pointer", scope: !220, file: !220, line: 311, scopeLine: 311, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!220 = !DIFile(filename: "mem.c3", directory: "C:/Compilers/C3/lib/std/core")
!221 = !DILocation(line: 975, scope: !222, inlinedAt: !218)
!222 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !205, file: !205, line: 973, scopeLine: 973, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!223 = !DILocalVariable(name: "end", scope: !189, file: !96, line: 97, type: !3, align: 8)
!224 = !DILocation(line: 97, scope: !189)
!225 = !DILocation(line: 98, scope: !189)
!226 = !DILocation(line: 99, scope: !189)
!227 = !DILocalVariable(name: "header", scope: !189, file: !96, line: 100, type: !180, align: 8)
!228 = !DILocation(line: 100, scope: !189)
!229 = !DILocation(line: 101, scope: !189)
!230 = !DILocation(line: 102, scope: !189)
!231 = !DILocation(line: 336, scope: !232, inlinedAt: !230)
!232 = distinct !DISubprogram(name: "clear", linkageName: "clear", scope: !220, file: !220, line: 334, scopeLine: 334, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!233 = !DILocation(line: 103, scope: !189)
!234 = distinct !DISubprogram(name: "resize", linkageName: "std.core.mem.allocator.ArenaAllocator.resize", scope: !96, file: !96, line: 115, type: !235, scopeLine: 115, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !95, retainedNodes: !140)
!235 = !DISubroutineType(types: !236)
!236 = !{!192, !194, !130, !29, !4, !4}
!237 = !DILocation(line: 116, scope: !234)
!238 = !DILocalVariable(name: "self", arg: 1, scope: !234, file: !96, line: 115, type: !130)
!239 = !DILocation(line: 115, scope: !234)
!240 = !DILocalVariable(name: "old_pointer", arg: 2, scope: !234, file: !96, line: 115, type: !29)
!241 = !DILocalVariable(name: "size", arg: 3, scope: !234, file: !96, line: 115, type: !3)
!242 = !DILocalVariable(name: "alignment", arg: 4, scope: !234, file: !96, line: 115, type: !3)
!243 = !DILocation(line: 109, scope: !244)
!244 = distinct !DILexicalBlock(scope: !234, file: !96, line: 116, column: 1)
!245 = !DILocation(line: 975, scope: !246, inlinedAt: !243)
!246 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !205, file: !205, line: 973, scopeLine: 973, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!247 = !DILocation(line: 110, scope: !244)
!248 = !DILocation(line: 111, scope: !244)
!249 = !DILocation(line: 112, scope: !244)
!250 = !DILocation(line: 117, scope: !234)
!251 = !DILocation(line: 118, scope: !234)
!252 = !DILocalVariable(name: "total_len", scope: !234, file: !96, line: 119, type: !3, align: 8)
!253 = !DILocation(line: 119, scope: !234)
!254 = !DILocation(line: 120, scope: !234)
!255 = !DILocalVariable(name: "header", scope: !234, file: !96, line: 121, type: !180, align: 8)
!256 = !DILocation(line: 121, scope: !234)
!257 = !DILocalVariable(name: "old_size", scope: !234, file: !96, line: 122, type: !3, align: 8)
!258 = !DILocation(line: 122, scope: !234)
!259 = !DILocation(line: 124, scope: !234)
!260 = !DILocation(line: 975, scope: !261, inlinedAt: !259)
!261 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !205, file: !205, line: 973, scopeLine: 973, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!262 = !DILocation(line: 126, scope: !263)
!263 = distinct !DILexicalBlock(scope: !234, file: !96, line: 125, column: 2)
!264 = !DILocation(line: 128, scope: !265)
!265 = distinct !DILexicalBlock(scope: !263, file: !96, line: 127, column: 3)
!266 = !DILocalVariable(name: "new_used", scope: !267, file: !96, line: 132, type: !3, align: 8)
!267 = distinct !DILexicalBlock(scope: !263, file: !96, line: 131, column: 3)
!268 = !DILocation(line: 132, scope: !267)
!269 = !DILocation(line: 133, scope: !267)
!270 = !DILocation(line: 134, scope: !267)
!271 = !DILocation(line: 136, scope: !263)
!272 = !DILocation(line: 137, scope: !263)
!273 = !DILocalVariable(name: "mem", scope: !234, file: !96, line: 140, type: !29, align: 8)
!274 = !DILocation(line: 140, scope: !234)
!275 = !DILocation(line: 84, scope: !234)
!276 = !DILocation(line: 975, scope: !277, inlinedAt: !275)
!277 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !205, file: !205, line: 973, scopeLine: 973, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!278 = !DILocation(line: 376, scope: !279, inlinedAt: !280)
!279 = distinct !DISubprogram(name: "min", linkageName: "min", scope: !205, file: !205, line: 373, scopeLine: 373, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!280 = !DILocation(line: 141, scope: !234)
!281 = !DILocation(line: 357, scope: !282, inlinedAt: !280)
!282 = distinct !DILexicalBlock(scope: !283, file: !220, line: 358, column: 1)
!283 = distinct !DISubprogram(name: "copy", linkageName: "copy", scope: !220, file: !220, line: 357, scopeLine: 357, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!284 = !DILocation(line: 354, scope: !282, inlinedAt: !280)
!285 = !DILocation(line: 141, scope: !282, inlinedAt: !280)
!286 = !DILocation(line: 355, scope: !282, inlinedAt: !280)
!287 = !DILocation(line: 359, scope: !283, inlinedAt: !280)
!288 = !DILocation(line: 142, scope: !234)
!289 = distinct !DISubprogram(name: "destroy", linkageName: "std.core.mem.allocator.BackedArenaAllocator.destroy", scope: !2, file: !2, line: 56, type: !290, scopeLine: 56, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !95, retainedNodes: !140)
!290 = !DISubroutineType(types: !291)
!291 = !{null, !292}
!292 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "BackedArenaAllocator*", baseType: !293, size: 64, align: 64, dwarfAddressSpace: 0)
!293 = !DICompositeType(tag: DW_TAG_structure_type, name: "BackedArenaAllocator", scope: !2, file: !2, line: 13, size: 320, align: 64, elements: !294, identifier: "std.core.mem.allocator.BackedArenaAllocator")
!294 = !{!295, !296, !306, !307, !308}
!295 = !DIDerivedType(tag: DW_TAG_member, name: "backing_allocator", scope: !293, file: !2, line: 15, baseType: !26, size: 128, align: 64)
!296 = !DIDerivedType(tag: DW_TAG_member, name: "last_page", scope: !293, file: !2, line: 16, baseType: !297, size: 64, align: 64, offset: 128)
!297 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "ExtraPage*", baseType: !298, size: 64, align: 64, dwarfAddressSpace: 0)
!298 = !DICompositeType(tag: DW_TAG_structure_type, name: "ExtraPage", scope: !2, file: !2, line: 30, size: 320, align: 64, elements: !299, identifier: "std.core.mem.allocator.ExtraPage.8055")
!299 = !{!300, !301, !302, !303, !304, !305}
!300 = !DIDerivedType(tag: DW_TAG_member, name: "prev_page", scope: !298, file: !2, line: 32, baseType: !297, size: 64, align: 64)
!301 = !DIDerivedType(tag: DW_TAG_member, name: "start", scope: !298, file: !2, line: 33, baseType: !29, size: 64, align: 64, offset: 64)
!302 = !DIDerivedType(tag: DW_TAG_member, name: "mark", scope: !298, file: !2, line: 34, baseType: !3, size: 64, align: 64, offset: 128)
!303 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !298, file: !2, line: 35, baseType: !3, size: 64, align: 64, offset: 192)
!304 = !DIDerivedType(tag: DW_TAG_member, name: "ident", scope: !298, file: !2, line: 36, baseType: !3, size: 64, align: 64, offset: 256)
!305 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !298, file: !2, line: 37, baseType: !54, align: 8, offset: 320)
!306 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !293, file: !2, line: 17, baseType: !3, size: 64, align: 64, offset: 192)
!307 = !DIDerivedType(tag: DW_TAG_member, name: "capacity", scope: !293, file: !2, line: 18, baseType: !3, size: 64, align: 64, offset: 256)
!308 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !293, file: !2, line: 19, baseType: !54, align: 8, offset: 320)
!309 = !DILocation(line: 57, scope: !289)
!310 = !DILocalVariable(name: "self", arg: 1, scope: !289, file: !2, line: 56, type: !292)
!311 = !DILocation(line: 56, scope: !289)
!312 = !DILocation(line: 58, scope: !289)
!313 = !DILocation(line: 59, scope: !289)
!314 = !DILocation(line: 60, scope: !289)
!315 = !DILocation(line: 119, scope: !316, inlinedAt: !314)
!316 = distinct !DISubprogram(name: "free", linkageName: "free", scope: !21, file: !21, line: 117, scopeLine: 117, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!317 = !DILocation(line: 123, scope: !316, inlinedAt: !314)
!318 = distinct !DISubprogram(name: "mark", linkageName: "std.core.mem.allocator.BackedArenaAllocator.mark", scope: !2, file: !2, line: 63, type: !319, scopeLine: 63, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !95, retainedNodes: !140)
!319 = !DISubroutineType(types: !320)
!320 = !{!3, !292}
!321 = !DILocation(line: 63, scope: !318)
!322 = !DILocalVariable(name: "self", arg: 1, scope: !318, file: !2, line: 63, type: !292)
!323 = distinct !DISubprogram(name: "release", linkageName: "std.core.mem.allocator.BackedArenaAllocator.release", scope: !2, file: !2, line: 65, type: !324, scopeLine: 65, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !95, retainedNodes: !140)
!324 = !DISubroutineType(types: !325)
!325 = !{null, !292, !29, !60}
!326 = !DILocation(line: 66, scope: !323)
!327 = !DILocalVariable(name: "self", arg: 1, scope: !323, file: !2, line: 65, type: !292)
!328 = !DILocation(line: 65, scope: !323)
!329 = !DILocalVariable(name: "old_pointer", arg: 2, scope: !323, file: !2, line: 65, type: !29)
!330 = !DILocalVariable(name: ".anon", arg: 3, scope: !323, file: !2, line: 65, type: !60)
!331 = !DILocalVariable(name: "old_size", scope: !323, file: !2, line: 67, type: !3, align: 8)
!332 = !DILocation(line: 67, scope: !323)
!333 = !DILocation(line: 68, scope: !323)
!334 = !DILocation(line: 70, scope: !335)
!335 = distinct !DILexicalBlock(scope: !323, file: !2, line: 69, column: 2)
!336 = !DILocation(line: 71, scope: !335)
!337 = !DILocation(line: 34, scope: !338, inlinedAt: !336)
!338 = distinct !DISubprogram(name: "poison_memory_region", linkageName: "poison_memory_region", scope: !339, file: !339, line: 32, scopeLine: 32, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!339 = !DIFile(filename: "asan.c3", directory: "C:/Compilers/C3/lib/std/core/sanitizer")
!340 = distinct !DISubprogram(name: "reset", linkageName: "std.core.mem.allocator.BackedArenaAllocator.reset", scope: !2, file: !2, line: 74, type: !341, scopeLine: 74, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !95, retainedNodes: !140)
!341 = !DISubroutineType(types: !342)
!342 = !{null, !292, !4}
!343 = !DILocation(line: 75, scope: !340)
!344 = !DILocalVariable(name: "self", arg: 1, scope: !340, file: !2, line: 74, type: !292)
!345 = !DILocation(line: 74, scope: !340)
!346 = !DILocalVariable(name: "mark", arg: 2, scope: !340, file: !2, line: 74, type: !3)
!347 = !DILocalVariable(name: "last_page", scope: !340, file: !2, line: 76, type: !297, align: 8)
!348 = !DILocation(line: 76, scope: !340)
!349 = !DILocation(line: 77, scope: !340)
!350 = !DILocation(line: 77, scope: !351)
!351 = distinct !DILexicalBlock(scope: !340, file: !2, line: 77, column: 2)
!352 = !DILocation(line: 79, scope: !353)
!353 = distinct !DILexicalBlock(scope: !351, file: !2, line: 78, column: 2)
!354 = !DILocalVariable(name: "to_free", scope: !353, file: !2, line: 80, type: !297, align: 8)
!355 = !DILocation(line: 80, scope: !353)
!356 = !DILocation(line: 81, scope: !353)
!357 = !DILocation(line: 82, scope: !353)
!358 = !DILocation(line: 84, scope: !340)
!359 = !DILocation(line: 86, scope: !340)
!360 = !DILocalVariable(name: "cleaned", scope: !361, file: !2, line: 88, type: !3, align: 8)
!361 = distinct !DILexicalBlock(scope: !340, file: !2, line: 87, column: 3)
!362 = !DILocation(line: 88, scope: !361)
!363 = !DILocation(line: 89, scope: !361)
!364 = !DILocation(line: 92, scope: !365)
!365 = distinct !DILexicalBlock(scope: !361, file: !2, line: 90, column: 4)
!366 = !DILocation(line: 94, scope: !365)
!367 = !DILocation(line: 34, scope: !368, inlinedAt: !366)
!368 = distinct !DISubprogram(name: "poison_memory_region", linkageName: "poison_memory_region", scope: !339, file: !339, line: 32, scopeLine: 32, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!369 = !DILocation(line: 98, scope: !340)
!370 = distinct !DISubprogram(name: "_free_page", linkageName: "std.core.mem.allocator.BackedArenaAllocator._free_page", scope: !2, file: !2, line: 101, type: !371, scopeLine: 101, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95, retainedNodes: !140)
!371 = !DISubroutineType(types: !372)
!372 = !{!192, !29, !292, !297}
!373 = !DILocation(line: 102, scope: !370)
!374 = !DILocalVariable(name: "self", arg: 1, scope: !370, file: !2, line: 101, type: !292)
!375 = !DILocation(line: 101, scope: !370)
!376 = !DILocalVariable(name: "page", arg: 2, scope: !370, file: !2, line: 101, type: !297)
!377 = !DILocalVariable(name: "mem", scope: !370, file: !2, line: 103, type: !29, align: 8)
!378 = !DILocation(line: 103, scope: !370)
!379 = !DILocation(line: 104, scope: !370)
!380 = !DILocation(line: 41, scope: !381, inlinedAt: !379)
!381 = distinct !DILexicalBlock(scope: !382, file: !2, line: 41, column: 43)
!382 = distinct !DISubprogram(name: "is_aligned", linkageName: "is_aligned", scope: !2, file: !2, line: 41, scopeLine: 41, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!383 = !DILocation(line: 41, scope: !382, inlinedAt: !379)
!384 = distinct !DISubprogram(name: "_realloc_page", linkageName: "std.core.mem.allocator.BackedArenaAllocator._realloc_page", scope: !2, file: !2, line: 107, type: !385, scopeLine: 107, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95, retainedNodes: !140)
!385 = !DISubroutineType(types: !386)
!386 = !{!192, !194, !292, !297, !4, !4}
!387 = !DILocation(line: 108, scope: !384)
!388 = !DILocalVariable(name: "self", arg: 1, scope: !384, file: !2, line: 107, type: !292)
!389 = !DILocation(line: 107, scope: !384)
!390 = !DILocalVariable(name: "page", arg: 2, scope: !384, file: !2, line: 107, type: !297)
!391 = !DILocalVariable(name: "size", arg: 3, scope: !384, file: !2, line: 107, type: !3)
!392 = !DILocalVariable(name: "alignment", arg: 4, scope: !384, file: !2, line: 107, type: !3)
!393 = !DILocalVariable(name: "real_pointer", scope: !384, file: !2, line: 110, type: !29, align: 8)
!394 = !DILocation(line: 110, scope: !384)
!395 = !DILocalVariable(name: "pointer_to_prev", scope: !384, file: !2, line: 113, type: !396, align: 8)
!396 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "ExtraPage**", baseType: !297, size: 64, align: 64, dwarfAddressSpace: 0)
!397 = !DILocation(line: 113, scope: !384)
!398 = !DILocation(line: 115, scope: !384)
!399 = !DILocation(line: 115, scope: !400)
!400 = distinct !DILexicalBlock(scope: !384, file: !2, line: 115, column: 2)
!401 = !DILocation(line: 117, scope: !402)
!402 = distinct !DILexicalBlock(scope: !400, file: !2, line: 116, column: 2)
!403 = !DILocation(line: 119, scope: !384)
!404 = !DILocalVariable(name: "page_size", scope: !384, file: !2, line: 120, type: !3, align: 8)
!405 = !DILocation(line: 120, scope: !384)
!406 = !DILocation(line: 40, scope: !407, inlinedAt: !405)
!407 = distinct !DILexicalBlock(scope: !408, file: !2, line: 40, column: 40)
!408 = distinct !DISubprogram(name: "pagesize", linkageName: "pagesize", scope: !2, file: !2, line: 40, scopeLine: 40, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!409 = !DILocation(line: 40, scope: !408, inlinedAt: !405)
!410 = !DILocalVariable(name: "data", scope: !384, file: !2, line: 122, type: !29, align: 8)
!411 = !DILocation(line: 122, scope: !384)
!412 = !DILocation(line: 147, scope: !384)
!413 = !DILocation(line: 975, scope: !414, inlinedAt: !412)
!414 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !205, file: !205, line: 973, scopeLine: 973, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!415 = !DILocation(line: 123, scope: !384)
!416 = !DILocation(line: 357, scope: !417, inlinedAt: !415)
!417 = distinct !DILexicalBlock(scope: !418, file: !220, line: 358, column: 1)
!418 = distinct !DISubprogram(name: "copy", linkageName: "copy", scope: !220, file: !220, line: 357, scopeLine: 357, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!419 = !DILocation(line: 354, scope: !417, inlinedAt: !415)
!420 = !DILocation(line: 123, scope: !417, inlinedAt: !415)
!421 = !DILocation(line: 355, scope: !417, inlinedAt: !415)
!422 = !DILocation(line: 359, scope: !418, inlinedAt: !415)
!423 = !DILocation(line: 124, scope: !384)
!424 = !DILocation(line: 41, scope: !425, inlinedAt: !423)
!425 = distinct !DILexicalBlock(scope: !426, file: !2, line: 41, column: 43)
!426 = distinct !DISubprogram(name: "is_aligned", linkageName: "is_aligned", scope: !2, file: !2, line: 41, scopeLine: 41, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!427 = !DILocation(line: 41, scope: !426, inlinedAt: !423)
!428 = !DILocation(line: 125, scope: !384)
!429 = distinct !DISubprogram(name: "resize", linkageName: "std.core.mem.allocator.BackedArenaAllocator.resize", scope: !2, file: !2, line: 128, type: !430, scopeLine: 128, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !95, retainedNodes: !140)
!430 = !DISubroutineType(types: !431)
!431 = !{!192, !194, !292, !29, !4, !4}
!432 = !DILocation(line: 129, scope: !429)
!433 = !DILocalVariable(name: "self", arg: 1, scope: !429, file: !2, line: 128, type: !292)
!434 = !DILocation(line: 128, scope: !429)
!435 = !DILocalVariable(name: "pointer", arg: 2, scope: !429, file: !2, line: 128, type: !29)
!436 = !DILocalVariable(name: "size", arg: 3, scope: !429, file: !2, line: 128, type: !3)
!437 = !DILocalVariable(name: "alignment", arg: 4, scope: !429, file: !2, line: 128, type: !3)
!438 = !DILocalVariable(name: "chunk", scope: !429, file: !2, line: 130, type: !439, align: 8)
!439 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "AllocChunk*", baseType: !440, size: 64, align: 64, dwarfAddressSpace: 0)
!440 = !DICompositeType(tag: DW_TAG_structure_type, name: "AllocChunk", scope: !2, file: !2, line: 22, size: 64, align: 64, elements: !441, identifier: "std.core.mem.allocator.AllocChunk.8051")
!441 = !{!442, !443}
!442 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !440, file: !2, line: 24, baseType: !3, size: 64, align: 64)
!443 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !440, file: !2, line: 25, baseType: !54, align: 8, offset: 64)
!444 = !DILocation(line: 130, scope: !429)
!445 = !DILocation(line: 131, scope: !429)
!446 = !DILocation(line: 133, scope: !447)
!447 = distinct !DILexicalBlock(scope: !429, file: !2, line: 132, column: 2)
!448 = !DILocalVariable(name: "page", scope: !447, file: !2, line: 135, type: !297, align: 8)
!449 = !DILocation(line: 135, scope: !447)
!450 = !DILocation(line: 136, scope: !447)
!451 = !DILocalVariable(name: "data", scope: !429, file: !2, line: 139, type: !439, align: 8)
!452 = !DILocation(line: 139, scope: !429)
!453 = !DILocation(line: 147, scope: !429)
!454 = !DILocation(line: 975, scope: !455, inlinedAt: !453)
!455 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !205, file: !205, line: 973, scopeLine: 973, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!456 = !DILocation(line: 140, scope: !429)
!457 = !DILocation(line: 376, scope: !458, inlinedAt: !456)
!458 = distinct !DISubprogram(name: "min", linkageName: "min", scope: !205, file: !205, line: 373, scopeLine: 373, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!459 = !DILocation(line: 357, scope: !460, inlinedAt: !456)
!460 = distinct !DILexicalBlock(scope: !461, file: !220, line: 358, column: 1)
!461 = distinct !DISubprogram(name: "copy", linkageName: "copy", scope: !220, file: !220, line: 357, scopeLine: 357, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!462 = !DILocation(line: 354, scope: !460, inlinedAt: !456)
!463 = !DILocation(line: 140, scope: !460, inlinedAt: !456)
!464 = !DILocation(line: 355, scope: !460, inlinedAt: !456)
!465 = !DILocation(line: 359, scope: !461, inlinedAt: !456)
!466 = !DILocation(line: 142, scope: !429)
!467 = distinct !DISubprogram(name: "acquire", linkageName: "std.core.mem.allocator.BackedArenaAllocator.acquire", scope: !2, file: !2, line: 150, type: !468, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !95, retainedNodes: !140)
!468 = !DISubroutineType(types: !469)
!469 = !{!192, !194, !292, !4, !98, !4}
!470 = !DILocation(line: 151, scope: !467)
!471 = !DILocalVariable(name: "self", arg: 1, scope: !467, file: !2, line: 150, type: !292)
!472 = !DILocation(line: 150, scope: !467)
!473 = !DILocalVariable(name: "size", arg: 2, scope: !467, file: !2, line: 150, type: !3)
!474 = !DILocalVariable(name: "init_type", arg: 3, scope: !467, file: !2, line: 150, type: !98)
!475 = !DILocalVariable(name: "alignment", arg: 4, scope: !467, file: !2, line: 150, type: !3)
!476 = !DILocation(line: 146, scope: !477)
!477 = distinct !DILexicalBlock(scope: !467, file: !2, line: 151, column: 1)
!478 = !DILocation(line: 147, scope: !477)
!479 = !DILocation(line: 975, scope: !480, inlinedAt: !478)
!480 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !205, file: !205, line: 973, scopeLine: 973, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!481 = !DILocation(line: 148, scope: !477)
!482 = !DILocation(line: 152, scope: !467)
!483 = !DILocalVariable(name: "start_mem", scope: !467, file: !2, line: 153, type: !29, align: 8)
!484 = !DILocation(line: 153, scope: !467)
!485 = !DILocalVariable(name: "starting_ptr", scope: !467, file: !2, line: 154, type: !29, align: 8)
!486 = !DILocation(line: 154, scope: !467)
!487 = !DILocalVariable(name: "aligned_header_start", scope: !467, file: !2, line: 155, type: !29, align: 8)
!488 = !DILocation(line: 155, scope: !467)
!489 = !DILocation(line: 313, scope: !490, inlinedAt: !488)
!490 = distinct !DISubprogram(name: "aligned_pointer", linkageName: "aligned_pointer", scope: !220, file: !220, line: 311, scopeLine: 311, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!491 = !DILocation(line: 975, scope: !492, inlinedAt: !489)
!492 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !205, file: !205, line: 973, scopeLine: 973, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!493 = !DILocalVariable(name: "mem", scope: !467, file: !2, line: 156, type: !29, align: 8)
!494 = !DILocation(line: 156, scope: !467)
!495 = !DILocation(line: 157, scope: !467)
!496 = !DILocation(line: 313, scope: !497, inlinedAt: !498)
!497 = distinct !DISubprogram(name: "aligned_pointer", linkageName: "aligned_pointer", scope: !220, file: !220, line: 311, scopeLine: 311, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!498 = !DILocation(line: 159, scope: !499)
!499 = distinct !DILexicalBlock(scope: !467, file: !2, line: 158, column: 2)
!500 = !DILocation(line: 975, scope: !501, inlinedAt: !496)
!501 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !205, file: !205, line: 973, scopeLine: 973, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!502 = !DILocalVariable(name: "new_usage", scope: !467, file: !2, line: 161, type: !3, align: 8)
!503 = !DILocation(line: 161, scope: !467)
!504 = !DILocation(line: 164, scope: !467)
!505 = !DILocation(line: 166, scope: !506)
!506 = distinct !DILexicalBlock(scope: !467, file: !2, line: 165, column: 2)
!507 = !DILocalVariable(name: "chunk_start", scope: !506, file: !2, line: 167, type: !439, align: 8)
!508 = !DILocation(line: 167, scope: !506)
!509 = !DILocation(line: 168, scope: !506)
!510 = !DILocation(line: 169, scope: !506)
!511 = !DILocation(line: 170, scope: !506)
!512 = !DILocation(line: 336, scope: !513, inlinedAt: !511)
!513 = distinct !DISubprogram(name: "clear", linkageName: "clear", scope: !220, file: !220, line: 334, scopeLine: 334, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!514 = !DILocation(line: 171, scope: !506)
!515 = !DILocalVariable(name: "page", scope: !467, file: !2, line: 175, type: !297, align: 8)
!516 = !DILocation(line: 175, scope: !467)
!517 = !DILocation(line: 178, scope: !467)
!518 = !DILocalVariable(name: "total_alloc_size", scope: !519, file: !2, line: 181, type: !3, align: 8)
!519 = distinct !DILexicalBlock(scope: !467, file: !2, line: 179, column: 2)
!520 = !DILocation(line: 181, scope: !519)
!521 = !DILocation(line: 975, scope: !522, inlinedAt: !520)
!522 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !205, file: !205, line: 973, scopeLine: 973, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!523 = !DILocation(line: 182, scope: !519)
!524 = !DILocation(line: 184, scope: !525)
!525 = distinct !DILexicalBlock(scope: !519, file: !2, line: 183, column: 3)
!526 = !DILocation(line: 140, scope: !527, inlinedAt: !524)
!527 = distinct !DISubprogram(name: "calloc_aligned", linkageName: "calloc_aligned", scope: !21, file: !21, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!528 = !DILocation(line: 141, scope: !527, inlinedAt: !524)
!529 = !DILocation(line: 38, scope: !527, inlinedAt: !524)
!530 = !DILocation(line: 975, scope: !531, inlinedAt: !529)
!531 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !205, file: !205, line: 973, scopeLine: 973, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!532 = !DILocation(line: 188, scope: !533)
!533 = distinct !DILexicalBlock(scope: !519, file: !2, line: 187, column: 3)
!534 = !DILocation(line: 128, scope: !535, inlinedAt: !532)
!535 = distinct !DISubprogram(name: "malloc_aligned", linkageName: "malloc_aligned", scope: !21, file: !21, line: 126, scopeLine: 126, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!536 = !DILocation(line: 134, scope: !535, inlinedAt: !532)
!537 = !DILocation(line: 38, scope: !535, inlinedAt: !532)
!538 = !DILocation(line: 975, scope: !539, inlinedAt: !537)
!539 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !205, file: !205, line: 973, scopeLine: 973, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!540 = !DILocalVariable(name: "start", scope: !519, file: !2, line: 190, type: !29, align: 8)
!541 = !DILocation(line: 190, scope: !519)
!542 = !DILocation(line: 191, scope: !519)
!543 = !DILocation(line: 975, scope: !544, inlinedAt: !542)
!544 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !205, file: !205, line: 973, scopeLine: 973, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!545 = !DILocation(line: 192, scope: !519)
!546 = !DILocation(line: 193, scope: !519)
!547 = !DILocation(line: 194, scope: !519)
!548 = !DILocalVariable(name: "padded_header_size", scope: !549, file: !2, line: 199, type: !3, align: 8)
!549 = distinct !DILexicalBlock(scope: !467, file: !2, line: 197, column: 2)
!550 = !DILocation(line: 199, scope: !549)
!551 = !DILocation(line: 975, scope: !552, inlinedAt: !550)
!552 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !205, file: !205, line: 973, scopeLine: 973, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!553 = !DILocalVariable(name: "total_alloc_size", scope: !549, file: !2, line: 200, type: !3, align: 8)
!554 = !DILocation(line: 200, scope: !549)
!555 = !DILocalVariable(name: "alloc", scope: !549, file: !2, line: 201, type: !29, align: 8)
!556 = !DILocation(line: 201, scope: !549)
!557 = !DILocation(line: 38, scope: !549)
!558 = !DILocation(line: 975, scope: !559, inlinedAt: !557)
!559 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !205, file: !205, line: 973, scopeLine: 973, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!560 = !DILocation(line: 204, scope: !549)
!561 = !DILocation(line: 205, scope: !549)
!562 = !DILocation(line: 975, scope: !563, inlinedAt: !561)
!563 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !205, file: !205, line: 973, scopeLine: 973, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!564 = !DILocation(line: 206, scope: !549)
!565 = !DILocation(line: 975, scope: !566, inlinedAt: !564)
!566 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !205, file: !205, line: 973, scopeLine: 973, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!567 = !DILocation(line: 207, scope: !549)
!568 = !DILocation(line: 208, scope: !549)
!569 = !DILocation(line: 212, scope: !467)
!570 = !DILocation(line: 214, scope: !467)
!571 = !DILocation(line: 216, scope: !467)
!572 = !DILocation(line: 217, scope: !467)
!573 = !DILocation(line: 218, scope: !467)
!574 = distinct !DISubprogram(name: "new_backed_allocator", linkageName: "std.core.mem.allocator.new_backed_allocator", scope: !2, file: !2, line: 46, type: !575, scopeLine: 46, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !95, retainedNodes: !140)
!575 = !DISubroutineType(types: !576)
!576 = !{!192, !577, !4, !26}
!577 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "BackedArenaAllocator**", baseType: !292, size: 64, align: 64, dwarfAddressSpace: 0)
!578 = !DILocalVariable(name: "size", arg: 1, scope: !574, file: !2, line: 46, type: !3)
!579 = !DILocation(line: 46, scope: !574)
!580 = !DILocalVariable(name: "allocator", arg: 2, scope: !574, file: !2, line: 46, type: !26)
!581 = !DILocation(line: 44, scope: !582)
!582 = distinct !DILexicalBlock(scope: !574, file: !2, line: 47, column: 1)
!583 = !DILocalVariable(name: "temp", scope: !574, file: !2, line: 48, type: !292, align: 8)
!584 = !DILocation(line: 48, scope: !574)
!585 = !DILocation(line: 254, scope: !586, inlinedAt: !584)
!586 = distinct !DISubprogram(name: "alloc_with_padding", linkageName: "alloc_with_padding", scope: !21, file: !21, line: 252, scopeLine: 252, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!587 = !DILocation(line: 80, scope: !588, inlinedAt: !585)
!588 = distinct !DISubprogram(name: "malloc_try", linkageName: "malloc_try", scope: !21, file: !21, line: 78, scopeLine: 78, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!589 = !DILocation(line: 86, scope: !588, inlinedAt: !585)
!590 = !DILocation(line: 38, scope: !588, inlinedAt: !585)
!591 = !DILocation(line: 975, scope: !592, inlinedAt: !590)
!592 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !205, file: !205, line: 973, scopeLine: 973, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!593 = !DILocation(line: 49, scope: !574)
!594 = !DILocation(line: 50, scope: !574)
!595 = !DILocation(line: 51, scope: !574)
!596 = !DILocation(line: 52, scope: !574)
!597 = !DILocation(line: 53, scope: !574)
!598 = distinct !DISubprogram(name: "init", linkageName: "std.core.mem.allocator.DynamicArenaAllocator.init", scope: !599, file: !599, line: 30, type: !600, scopeLine: 30, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !95, retainedNodes: !140)
!599 = !DIFile(filename: "dynamic_arena.c3", directory: "C:/Compilers/C3/lib/std/core/allocators")
!600 = !DISubroutineType(types: !601)
!601 = !{null, !602, !26, !4}
!602 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "DynamicArenaAllocator*", baseType: !603, size: 64, align: 64, dwarfAddressSpace: 0)
!603 = !DICompositeType(tag: DW_TAG_structure_type, name: "DynamicArenaAllocator", scope: !599, file: !599, line: 18, size: 320, align: 64, elements: !604, identifier: "std.core.mem.allocator.DynamicArenaAllocator")
!604 = !{!605, !606, !615, !616}
!605 = !DIDerivedType(tag: DW_TAG_member, name: "backing_allocator", scope: !603, file: !599, line: 20, baseType: !26, size: 128, align: 64)
!606 = !DIDerivedType(tag: DW_TAG_member, name: "page", scope: !603, file: !599, line: 21, baseType: !607, size: 64, align: 64, offset: 128)
!607 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "DynamicArenaPage*", baseType: !608, size: 64, align: 64, dwarfAddressSpace: 0)
!608 = !DICompositeType(tag: DW_TAG_structure_type, name: "DynamicArenaPage", scope: !599, file: !599, line: 60, size: 320, align: 64, elements: !609, identifier: "std.core.mem.allocator.DynamicArenaPage.8138")
!609 = !{!610, !611, !612, !613, !614}
!610 = !DIDerivedType(tag: DW_TAG_member, name: "memory", scope: !608, file: !599, line: 62, baseType: !29, size: 64, align: 64)
!611 = !DIDerivedType(tag: DW_TAG_member, name: "prev_arena", scope: !608, file: !599, line: 63, baseType: !29, size: 64, align: 64, offset: 64)
!612 = !DIDerivedType(tag: DW_TAG_member, name: "total", scope: !608, file: !599, line: 64, baseType: !3, size: 64, align: 64, offset: 128)
!613 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !608, file: !599, line: 65, baseType: !3, size: 64, align: 64, offset: 192)
!614 = !DIDerivedType(tag: DW_TAG_member, name: "current_stack_ptr", scope: !608, file: !599, line: 66, baseType: !29, size: 64, align: 64, offset: 256)
!615 = !DIDerivedType(tag: DW_TAG_member, name: "unused_page", scope: !603, file: !599, line: 22, baseType: !607, size: 64, align: 64, offset: 192)
!616 = !DIDerivedType(tag: DW_TAG_member, name: "page_size", scope: !603, file: !599, line: 23, baseType: !3, size: 64, align: 64, offset: 256)
!617 = !DILocation(line: 31, scope: !598)
!618 = !DILocalVariable(name: "self", arg: 1, scope: !598, file: !599, line: 30, type: !602)
!619 = !DILocation(line: 30, scope: !598)
!620 = !DILocalVariable(name: "allocator", arg: 2, scope: !598, file: !599, line: 30, type: !26)
!621 = !DILocalVariable(name: "page_size", arg: 3, scope: !598, file: !599, line: 30, type: !3)
!622 = !DILocation(line: 28, scope: !623)
!623 = distinct !DILexicalBlock(scope: !598, file: !599, line: 31, column: 1)
!624 = !DILocation(line: 32, scope: !598)
!625 = !DILocation(line: 33, scope: !598)
!626 = !DILocation(line: 34, scope: !598)
!627 = !DILocation(line: 35, scope: !598)
!628 = distinct !DISubprogram(name: "free", linkageName: "std.core.mem.allocator.DynamicArenaAllocator.free", scope: !599, file: !599, line: 38, type: !629, scopeLine: 38, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !95, retainedNodes: !140)
!629 = !DISubroutineType(types: !630)
!630 = !{null, !602}
!631 = !DILocation(line: 39, scope: !628)
!632 = !DILocalVariable(name: "self", arg: 1, scope: !628, file: !599, line: 38, type: !602)
!633 = !DILocation(line: 38, scope: !628)
!634 = !DILocalVariable(name: "page", scope: !628, file: !599, line: 40, type: !607, align: 8)
!635 = !DILocation(line: 40, scope: !628)
!636 = !DILocation(line: 41, scope: !628)
!637 = !DILocation(line: 41, scope: !638)
!638 = distinct !DILexicalBlock(scope: !628, file: !599, line: 41, column: 2)
!639 = !DILocalVariable(name: "next_page", scope: !640, file: !599, line: 43, type: !607, align: 8)
!640 = distinct !DILexicalBlock(scope: !638, file: !599, line: 42, column: 2)
!641 = !DILocation(line: 43, scope: !640)
!642 = !DILocation(line: 44, scope: !640)
!643 = !DILocation(line: 119, scope: !644, inlinedAt: !642)
!644 = distinct !DISubprogram(name: "free", linkageName: "free", scope: !21, file: !21, line: 117, scopeLine: 117, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!645 = !DILocation(line: 123, scope: !644, inlinedAt: !642)
!646 = !DILocation(line: 45, scope: !640)
!647 = !DILocation(line: 119, scope: !648, inlinedAt: !646)
!648 = distinct !DISubprogram(name: "free", linkageName: "free", scope: !21, file: !21, line: 117, scopeLine: 117, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!649 = !DILocation(line: 123, scope: !648, inlinedAt: !646)
!650 = !DILocation(line: 46, scope: !640)
!651 = !DILocation(line: 48, scope: !628)
!652 = !DILocation(line: 49, scope: !628)
!653 = !DILocation(line: 49, scope: !654)
!654 = distinct !DILexicalBlock(scope: !628, file: !599, line: 49, column: 2)
!655 = !DILocalVariable(name: "next_page", scope: !656, file: !599, line: 51, type: !607, align: 8)
!656 = distinct !DILexicalBlock(scope: !654, file: !599, line: 50, column: 2)
!657 = !DILocation(line: 51, scope: !656)
!658 = !DILocation(line: 52, scope: !656)
!659 = !DILocation(line: 119, scope: !660, inlinedAt: !658)
!660 = distinct !DISubprogram(name: "free", linkageName: "free", scope: !21, file: !21, line: 117, scopeLine: 117, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!661 = !DILocation(line: 123, scope: !660, inlinedAt: !658)
!662 = !DILocation(line: 53, scope: !656)
!663 = !DILocation(line: 119, scope: !664, inlinedAt: !662)
!664 = distinct !DISubprogram(name: "free", linkageName: "free", scope: !21, file: !21, line: 117, scopeLine: 117, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!665 = !DILocation(line: 123, scope: !664, inlinedAt: !662)
!666 = !DILocation(line: 54, scope: !656)
!667 = !DILocation(line: 56, scope: !628)
!668 = !DILocation(line: 57, scope: !628)
!669 = distinct !DISubprogram(name: "release", linkageName: "std.core.mem.allocator.DynamicArenaAllocator.release", scope: !599, file: !599, line: 78, type: !670, scopeLine: 78, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !95, retainedNodes: !140)
!670 = !DISubroutineType(types: !671)
!671 = !{null, !602, !29, !60}
!672 = !DILocation(line: 79, scope: !669)
!673 = !DILocalVariable(name: "self", arg: 1, scope: !669, file: !599, line: 78, type: !602)
!674 = !DILocation(line: 78, scope: !669)
!675 = !DILocalVariable(name: "ptr", arg: 2, scope: !669, file: !599, line: 78, type: !29)
!676 = !DILocalVariable(name: ".anon", arg: 3, scope: !669, file: !599, line: 78, type: !60)
!677 = !DILocation(line: 75, scope: !678)
!678 = distinct !DILexicalBlock(scope: !669, file: !599, line: 79, column: 1)
!679 = !DILocation(line: 76, scope: !678)
!680 = !DILocalVariable(name: "current_page", scope: !669, file: !599, line: 80, type: !607, align: 8)
!681 = !DILocation(line: 80, scope: !669)
!682 = !DILocation(line: 81, scope: !669)
!683 = !DILocation(line: 83, scope: !684)
!684 = distinct !DILexicalBlock(scope: !669, file: !599, line: 82, column: 2)
!685 = !DILocation(line: 85, scope: !669)
!686 = distinct !DISubprogram(name: "resize", linkageName: "std.core.mem.allocator.DynamicArenaAllocator.resize", scope: !599, file: !599, line: 94, type: !687, scopeLine: 94, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !95, retainedNodes: !140)
!687 = !DISubroutineType(types: !688)
!688 = !{!192, !194, !602, !29, !4, !4}
!689 = !DILocation(line: 95, scope: !686)
!690 = !DILocalVariable(name: "self", arg: 1, scope: !686, file: !599, line: 94, type: !602)
!691 = !DILocation(line: 94, scope: !686)
!692 = !DILocalVariable(name: "old_pointer", arg: 2, scope: !686, file: !599, line: 94, type: !29)
!693 = !DILocalVariable(name: "size", arg: 3, scope: !686, file: !599, line: 94, type: !3)
!694 = !DILocalVariable(name: "alignment", arg: 4, scope: !686, file: !599, line: 94, type: !3)
!695 = !DILocation(line: 89, scope: !696)
!696 = distinct !DILexicalBlock(scope: !686, file: !599, line: 95, column: 1)
!697 = !DILocation(line: 90, scope: !696)
!698 = !DILocation(line: 91, scope: !696)
!699 = !DILocalVariable(name: "current_page", scope: !686, file: !599, line: 96, type: !607, align: 8)
!700 = !DILocation(line: 96, scope: !686)
!701 = !DILocation(line: 97, scope: !686)
!702 = !DILocalVariable(name: "old_size_ptr", scope: !686, file: !599, line: 98, type: !703, align: 8)
!703 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "usz*", baseType: !3, size: 64, align: 64, dwarfAddressSpace: 0)
!704 = !DILocation(line: 98, scope: !686)
!705 = !DILocalVariable(name: "old_size", scope: !686, file: !599, line: 99, type: !3, align: 8)
!706 = !DILocation(line: 99, scope: !686)
!707 = !DILocation(line: 101, scope: !686)
!708 = !DILocation(line: 975, scope: !709, inlinedAt: !707)
!709 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !205, file: !205, line: 973, scopeLine: 973, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!710 = !DILocation(line: 103, scope: !711)
!711 = distinct !DILexicalBlock(scope: !686, file: !599, line: 102, column: 2)
!712 = !DILocation(line: 104, scope: !711)
!713 = !DILocation(line: 106, scope: !714)
!714 = distinct !DILexicalBlock(scope: !711, file: !599, line: 105, column: 3)
!715 = !DILocation(line: 108, scope: !711)
!716 = !DILocation(line: 110, scope: !686)
!717 = !DILocation(line: 975, scope: !718, inlinedAt: !716)
!718 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !205, file: !205, line: 973, scopeLine: 973, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!719 = !DILocation(line: 112, scope: !720)
!720 = distinct !DILexicalBlock(scope: !686, file: !599, line: 111, column: 2)
!721 = !DILocalVariable(name: "add_size", scope: !720, file: !599, line: 113, type: !3, align: 8)
!722 = !DILocation(line: 113, scope: !720)
!723 = !DILocation(line: 114, scope: !720)
!724 = !DILocation(line: 115, scope: !720)
!725 = !DILocation(line: 116, scope: !720)
!726 = !DILocation(line: 117, scope: !720)
!727 = !DILocalVariable(name: "new_mem", scope: !686, file: !599, line: 119, type: !29, align: 8)
!728 = !DILocation(line: 119, scope: !686)
!729 = !DILocation(line: 173, scope: !686)
!730 = !DILocation(line: 975, scope: !731, inlinedAt: !729)
!731 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !205, file: !205, line: 973, scopeLine: 973, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!732 = !DILocation(line: 376, scope: !733, inlinedAt: !734)
!733 = distinct !DISubprogram(name: "min", linkageName: "min", scope: !205, file: !205, line: 373, scopeLine: 373, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!734 = !DILocation(line: 120, scope: !686)
!735 = !DILocation(line: 357, scope: !736, inlinedAt: !734)
!736 = distinct !DILexicalBlock(scope: !737, file: !220, line: 358, column: 1)
!737 = distinct !DISubprogram(name: "copy", linkageName: "copy", scope: !220, file: !220, line: 357, scopeLine: 357, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!738 = !DILocation(line: 354, scope: !736, inlinedAt: !734)
!739 = !DILocation(line: 120, scope: !736, inlinedAt: !734)
!740 = !DILocation(line: 355, scope: !736, inlinedAt: !734)
!741 = !DILocation(line: 359, scope: !737, inlinedAt: !734)
!742 = !DILocation(line: 121, scope: !686)
!743 = distinct !DISubprogram(name: "reset", linkageName: "std.core.mem.allocator.DynamicArenaAllocator.reset", scope: !599, file: !599, line: 124, type: !629, scopeLine: 124, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !95, retainedNodes: !140)
!744 = !DILocation(line: 125, scope: !743)
!745 = !DILocalVariable(name: "self", arg: 1, scope: !743, file: !599, line: 124, type: !602)
!746 = !DILocation(line: 124, scope: !743)
!747 = !DILocalVariable(name: "page", scope: !743, file: !599, line: 126, type: !607, align: 8)
!748 = !DILocation(line: 126, scope: !743)
!749 = !DILocalVariable(name: "unused_page_ptr", scope: !743, file: !599, line: 127, type: !750, align: 8)
!750 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "DynamicArenaPage**", baseType: !607, size: 64, align: 64, dwarfAddressSpace: 0)
!751 = !DILocation(line: 127, scope: !743)
!752 = !DILocation(line: 128, scope: !743)
!753 = !DILocation(line: 128, scope: !754)
!754 = distinct !DILexicalBlock(scope: !743, file: !599, line: 128, column: 2)
!755 = !DILocalVariable(name: "next_page", scope: !756, file: !599, line: 130, type: !607, align: 8)
!756 = distinct !DILexicalBlock(scope: !754, file: !599, line: 129, column: 2)
!757 = !DILocation(line: 130, scope: !756)
!758 = !DILocation(line: 131, scope: !756)
!759 = !DILocalVariable(name: "prev_unused", scope: !756, file: !599, line: 132, type: !607, align: 8)
!760 = !DILocation(line: 132, scope: !756)
!761 = !DILocation(line: 133, scope: !756)
!762 = !DILocation(line: 134, scope: !756)
!763 = !DILocation(line: 135, scope: !756)
!764 = !DILocation(line: 137, scope: !743)
!765 = distinct !DISubprogram(name: "_alloc_new", linkageName: "std.core.mem.allocator.DynamicArenaAllocator._alloc_new", scope: !599, file: !599, line: 145, type: !766, scopeLine: 145, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95, retainedNodes: !140)
!766 = !DISubroutineType(types: !767)
!767 = !{!192, !194, !602, !4, !4}
!768 = !DILocation(line: 146, scope: !765)
!769 = !DILocalVariable(name: "self", arg: 1, scope: !765, file: !599, line: 145, type: !602)
!770 = !DILocation(line: 145, scope: !765)
!771 = !DILocalVariable(name: "size", arg: 2, scope: !765, file: !599, line: 145, type: !3)
!772 = !DILocalVariable(name: "alignment", arg: 3, scope: !765, file: !599, line: 145, type: !3)
!773 = !DILocation(line: 975, scope: !774, inlinedAt: !775)
!774 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !205, file: !205, line: 973, scopeLine: 973, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!775 = !DILocation(line: 141, scope: !776)
!776 = distinct !DILexicalBlock(scope: !765, file: !599, line: 146, column: 1)
!777 = !DILocation(line: 142, scope: !776)
!778 = !DILocalVariable(name: "page_size", scope: !765, file: !599, line: 148, type: !3, align: 8)
!779 = !DILocation(line: 148, scope: !765)
!780 = !DILocation(line: 975, scope: !781, inlinedAt: !779)
!781 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !205, file: !205, line: 973, scopeLine: 973, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!782 = !DILocation(line: 47, scope: !783, inlinedAt: !785)
!783 = distinct !DISubprogram(name: "greater", linkageName: "greater", scope: !784, file: !784, line: 39, scopeLine: 39, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!784 = !DIFile(filename: "builtin_comparison.c3", directory: "C:/Compilers/C3/lib/std/core")
!785 = !DILocation(line: 116, scope: !786, inlinedAt: !779)
!786 = distinct !DISubprogram(name: "max", linkageName: "max", scope: !784, file: !784, line: 113, scopeLine: 113, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!787 = !DILocation(line: 149, scope: !765)
!788 = !DILocalVariable(name: "mem", scope: !765, file: !599, line: 151, type: !29, align: 8)
!789 = !DILocation(line: 151, scope: !765)
!790 = !DILocation(line: 80, scope: !791, inlinedAt: !789)
!791 = distinct !DISubprogram(name: "malloc_try", linkageName: "malloc_try", scope: !21, file: !21, line: 78, scopeLine: 78, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!792 = !DILocation(line: 86, scope: !791, inlinedAt: !789)
!793 = !DILocation(line: 38, scope: !791, inlinedAt: !789)
!794 = !DILocation(line: 975, scope: !795, inlinedAt: !793)
!795 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !205, file: !205, line: 973, scopeLine: 973, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!796 = !DILocalVariable(name: "page", scope: !765, file: !599, line: 152, type: !607, align: 8)
!797 = !DILocation(line: 152, scope: !765)
!798 = !DILocation(line: 97, scope: !799, inlinedAt: !800)
!799 = distinct !DISubprogram(name: "calloc_try", linkageName: "calloc_try", scope: !21, file: !21, line: 95, scopeLine: 95, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!800 = !DILocation(line: 191, scope: !801, inlinedAt: !797)
!801 = distinct !DISubprogram(name: "new_try", linkageName: "new_try", scope: !21, file: !21, line: 188, scopeLine: 188, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!802 = !DILocation(line: 98, scope: !799, inlinedAt: !800)
!803 = !DILocation(line: 38, scope: !799, inlinedAt: !800)
!804 = !DILocation(line: 975, scope: !805, inlinedAt: !803)
!805 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !205, file: !205, line: 973, scopeLine: 973, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!806 = !DILocalVariable(name: "err", scope: !765, file: !599, line: 153, type: !192, align: 8)
!807 = !DILocation(line: 153, scope: !765)
!808 = !DILocation(line: 155, scope: !809)
!809 = distinct !DILexicalBlock(scope: !765, file: !599, line: 154, column: 2)
!810 = !DILocation(line: 119, scope: !811, inlinedAt: !808)
!811 = distinct !DISubprogram(name: "free", linkageName: "free", scope: !21, file: !21, line: 117, scopeLine: 117, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!812 = !DILocation(line: 123, scope: !811, inlinedAt: !808)
!813 = !DILocation(line: 156, scope: !809)
!814 = !DILocation(line: 158, scope: !765)
!815 = !DILocalVariable(name: "mem_start", scope: !765, file: !599, line: 159, type: !29, align: 8)
!816 = !DILocation(line: 159, scope: !765)
!817 = !DILocation(line: 313, scope: !818, inlinedAt: !816)
!818 = distinct !DISubprogram(name: "aligned_pointer", linkageName: "aligned_pointer", scope: !220, file: !220, line: 311, scopeLine: 311, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!819 = !DILocation(line: 975, scope: !820, inlinedAt: !817)
!820 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !205, file: !205, line: 973, scopeLine: 973, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!821 = !DILocation(line: 160, scope: !765)
!822 = !DILocalVariable(name: "chunk", scope: !765, file: !599, line: 161, type: !823, align: 8)
!823 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "DynamicArenaChunk*", baseType: !824, size: 64, align: 64, dwarfAddressSpace: 0)
!824 = !DICompositeType(tag: DW_TAG_structure_type, name: "DynamicArenaChunk", scope: !599, file: !599, line: 69, size: 64, align: 64, elements: !825, identifier: "std.core.mem.allocator.DynamicArenaChunk.8144")
!825 = !{!826}
!826 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !824, file: !599, line: 71, baseType: !3, size: 64, align: 64)
!827 = !DILocation(line: 161, scope: !765)
!828 = !DILocation(line: 162, scope: !765)
!829 = !DILocation(line: 163, scope: !765)
!830 = !DILocation(line: 164, scope: !765)
!831 = !DILocation(line: 165, scope: !765)
!832 = !DILocation(line: 166, scope: !765)
!833 = !DILocation(line: 167, scope: !765)
!834 = !DILocation(line: 168, scope: !765)
!835 = distinct !DISubprogram(name: "acquire", linkageName: "std.core.mem.allocator.DynamicArenaAllocator.acquire", scope: !599, file: !599, line: 176, type: !836, scopeLine: 176, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !95, retainedNodes: !140)
!836 = !DISubroutineType(types: !837)
!837 = !{!192, !194, !602, !4, !98, !4}
!838 = !DILocation(line: 177, scope: !835)
!839 = !DILocalVariable(name: "self", arg: 1, scope: !835, file: !599, line: 176, type: !602)
!840 = !DILocation(line: 176, scope: !835)
!841 = !DILocalVariable(name: "size", arg: 2, scope: !835, file: !599, line: 176, type: !3)
!842 = !DILocalVariable(name: "init_type", arg: 3, scope: !835, file: !599, line: 176, type: !98)
!843 = !DILocalVariable(name: "alignment", arg: 4, scope: !835, file: !599, line: 176, type: !3)
!844 = !DILocation(line: 172, scope: !845)
!845 = distinct !DILexicalBlock(scope: !835, file: !599, line: 177, column: 1)
!846 = !DILocation(line: 173, scope: !845)
!847 = !DILocation(line: 975, scope: !848, inlinedAt: !846)
!848 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !205, file: !205, line: 973, scopeLine: 973, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!849 = !DILocation(line: 178, scope: !835)
!850 = !DILocalVariable(name: "page", scope: !835, file: !599, line: 179, type: !607, align: 8)
!851 = !DILocation(line: 179, scope: !835)
!852 = !DILocalVariable(name: "ptr", scope: !835, file: !599, line: 181, type: !29, align: 8)
!853 = !DILocation(line: 181, scope: !835)
!854 = !DILocation(line: 184, scope: !855)
!855 = distinct !DILexicalBlock(scope: !856, file: !599, line: 183, column: 2)
!856 = distinct !DILexicalBlock(scope: !835, file: !599, line: 182, column: 2)
!857 = !DILocation(line: 186, scope: !858)
!858 = distinct !DILexicalBlock(scope: !855, file: !599, line: 185, column: 3)
!859 = !DILocation(line: 187, scope: !858)
!860 = !DILocation(line: 188, scope: !858)
!861 = !DILocation(line: 190, scope: !855)
!862 = !DILocation(line: 192, scope: !863)
!863 = distinct !DILexicalBlock(scope: !855, file: !599, line: 191, column: 3)
!864 = !DILocation(line: 975, scope: !865, inlinedAt: !862)
!865 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !205, file: !205, line: 973, scopeLine: 973, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!866 = !DILocation(line: 193, scope: !863)
!867 = !DILocalVariable(name: "start", scope: !855, file: !599, line: 195, type: !29, align: 8)
!868 = !DILocation(line: 195, scope: !855)
!869 = !DILocation(line: 313, scope: !870, inlinedAt: !868)
!870 = distinct !DISubprogram(name: "aligned_pointer", linkageName: "aligned_pointer", scope: !220, file: !220, line: 311, scopeLine: 311, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!871 = !DILocation(line: 975, scope: !872, inlinedAt: !869)
!872 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !205, file: !205, line: 973, scopeLine: 973, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!873 = !DILocalVariable(name: "new_used", scope: !855, file: !599, line: 196, type: !3, align: 8)
!874 = !DILocation(line: 196, scope: !855)
!875 = !DILocation(line: 197, scope: !855)
!876 = !DILocation(line: 199, scope: !877)
!877 = distinct !DILexicalBlock(scope: !855, file: !599, line: 198, column: 3)
!878 = !DILocation(line: 201, scope: !879)
!879 = distinct !DILexicalBlock(scope: !877, file: !599, line: 200, column: 4)
!880 = !DILocation(line: 313, scope: !881, inlinedAt: !878)
!881 = distinct !DISubprogram(name: "aligned_pointer", linkageName: "aligned_pointer", scope: !220, file: !220, line: 311, scopeLine: 311, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!882 = !DILocation(line: 975, scope: !883, inlinedAt: !880)
!883 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !205, file: !205, line: 973, scopeLine: 973, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!884 = !DILocation(line: 202, scope: !879)
!885 = !DILocation(line: 203, scope: !879)
!886 = !DILocation(line: 205, scope: !887)
!887 = distinct !DILexicalBlock(scope: !879, file: !599, line: 204, column: 5)
!888 = !DILocation(line: 206, scope: !887)
!889 = !DILocation(line: 207, scope: !887)
!890 = !DILocation(line: 208, scope: !887)
!891 = !DILocation(line: 211, scope: !877)
!892 = !DILocation(line: 975, scope: !893, inlinedAt: !891)
!893 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !205, file: !205, line: 973, scopeLine: 973, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!894 = !DILocation(line: 212, scope: !877)
!895 = !DILocation(line: 214, scope: !855)
!896 = !DILocation(line: 215, scope: !855)
!897 = !DILocation(line: 216, scope: !855)
!898 = !DILocalVariable(name: "chunk", scope: !855, file: !599, line: 217, type: !823, align: 8)
!899 = !DILocation(line: 217, scope: !855)
!900 = !DILocation(line: 218, scope: !855)
!901 = !DILocation(line: 220, scope: !835)
!902 = !DILocation(line: 336, scope: !903, inlinedAt: !901)
!903 = distinct !DISubprogram(name: "clear", linkageName: "clear", scope: !220, file: !220, line: 334, scopeLine: 334, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!904 = !DILocation(line: 221, scope: !835)
!905 = distinct !DISubprogram(name: "init", linkageName: "std.core.mem.allocator.SimpleHeapAllocator.init", scope: !906, file: !906, line: 25, type: !907, scopeLine: 25, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !95, retainedNodes: !140)
!906 = !DIFile(filename: "heap_allocator.c3", directory: "C:/Compilers/C3/lib/std/core/allocators")
!907 = !DISubroutineType(types: !908)
!908 = !{null, !909, !914}
!909 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "SimpleHeapAllocator*", baseType: !910, size: 64, align: 64, dwarfAddressSpace: 0)
!910 = !DICompositeType(tag: DW_TAG_structure_type, name: "SimpleHeapAllocator", scope: !906, file: !906, line: 15, size: 128, align: 64, elements: !911, identifier: "std.core.mem.allocator.SimpleHeapAllocator")
!911 = !{!912, !918}
!912 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_fn", scope: !910, file: !906, line: 17, baseType: !913, size: 64, align: 64)
!913 = !DIDerivedType(tag: DW_TAG_typedef, name: "MemoryAllocFn", scope: !906, file: !906, line: 64, baseType: !914, align: 8)
!914 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "MemoryAllocFn", baseType: !915, size: 64, align: 64, dwarfAddressSpace: 0)
!915 = !DISubroutineType(types: !916)
!916 = !{!192, !917, !4}
!917 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "char[]*", baseType: !134, size: 64, align: 64, dwarfAddressSpace: 0)
!918 = !DIDerivedType(tag: DW_TAG_member, name: "free_list", scope: !910, file: !906, line: 18, baseType: !919, size: 64, align: 64, offset: 64)
!919 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Header*", baseType: !920, size: 64, align: 64, dwarfAddressSpace: 0)
!920 = !DICompositeType(tag: DW_TAG_union_type, name: "Header", scope: !906, file: !906, line: 208, size: 128, align: 64, elements: !921, identifier: "std.core.mem.allocator.Header.8239")
!921 = !{!922, !927}
!922 = !DIDerivedType(tag: DW_TAG_member, scope: !920, file: !906, line: 210, baseType: !923, size: 128, align: 64)
!923 = !DICompositeType(tag: DW_TAG_structure_type, name: "$anon", scope: !920, file: !906, line: 210, size: 128, align: 64, elements: !924)
!924 = !{!925, !926}
!925 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !923, file: !906, line: 212, baseType: !919, size: 64, align: 64)
!926 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !923, file: !906, line: 213, baseType: !3, size: 64, align: 64, offset: 64)
!927 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !920, file: !906, line: 215, baseType: !3, size: 64, align: 64)
!928 = !DILocation(line: 26, scope: !905)
!929 = !DILocalVariable(name: "self", arg: 1, scope: !905, file: !906, line: 25, type: !909)
!930 = !DILocation(line: 25, scope: !905)
!931 = !DILocalVariable(name: "allocator", arg: 2, scope: !905, file: !906, line: 25, type: !913)
!932 = !DILocation(line: 22, scope: !933)
!933 = distinct !DILexicalBlock(scope: !905, file: !906, line: 26, column: 1)
!934 = !DILocation(line: 23, scope: !933)
!935 = !DILocation(line: 27, scope: !905)
!936 = !DILocation(line: 28, scope: !905)
!937 = distinct !DISubprogram(name: "acquire", linkageName: "std.core.mem.allocator.SimpleHeapAllocator.acquire", scope: !906, file: !906, line: 31, type: !938, scopeLine: 31, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !95, retainedNodes: !140)
!938 = !DISubroutineType(types: !939)
!939 = !{!192, !194, !909, !4, !98, !4}
!940 = !DILocation(line: 32, scope: !937)
!941 = !DILocalVariable(name: "self", arg: 1, scope: !937, file: !906, line: 31, type: !909)
!942 = !DILocation(line: 31, scope: !937)
!943 = !DILocalVariable(name: "size", arg: 2, scope: !937, file: !906, line: 31, type: !3)
!944 = !DILocalVariable(name: "init_type", arg: 3, scope: !937, file: !906, line: 31, type: !98)
!945 = !DILocalVariable(name: "alignment", arg: 4, scope: !937, file: !906, line: 31, type: !3)
!946 = !DILocation(line: 33, scope: !937)
!947 = !DILocation(line: 35, scope: !948)
!948 = distinct !DILexicalBlock(scope: !937, file: !906, line: 34, column: 2)
!949 = !DILocation(line: 342, scope: !950, inlinedAt: !947)
!950 = distinct !DILexicalBlock(scope: !951, file: !21, line: 347, column: 1)
!951 = distinct !DISubprogram(name: "@aligned_alloc", linkageName: "@aligned_alloc", scope: !21, file: !21, line: 346, scopeLine: 346, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95, retainedNodes: !140)
!952 = !DILocation(line: 35, scope: !950, inlinedAt: !947)
!953 = !DILocation(line: 343, scope: !950, inlinedAt: !947)
!954 = !DILocation(line: 344, scope: !950, inlinedAt: !947)
!955 = !DILocation(line: 348, scope: !951, inlinedAt: !947)
!956 = !DILocalVariable(name: "header", scope: !951, file: !906, line: 349, type: !3, align: 8)
!957 = !DILocation(line: 349, scope: !951, inlinedAt: !947)
!958 = !DILocalVariable(name: "alignsize", scope: !951, file: !906, line: 350, type: !3, align: 8)
!959 = !DILocation(line: 350, scope: !951, inlinedAt: !947)
!960 = !DILocalVariable(name: "data", scope: !951, file: !906, line: 352, type: !29, align: 8)
!961 = !DILocation(line: 352, scope: !951, inlinedAt: !947)
!962 = !DILocalVariable(name: "mem", scope: !951, file: !906, line: 356, type: !29, align: 8)
!963 = !DILocation(line: 356, scope: !951, inlinedAt: !947)
!964 = !DILocation(line: 313, scope: !965, inlinedAt: !963)
!965 = distinct !DISubprogram(name: "aligned_pointer", linkageName: "aligned_pointer", scope: !220, file: !220, line: 311, scopeLine: 311, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!966 = !DILocation(line: 975, scope: !967, inlinedAt: !964)
!967 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !205, file: !205, line: 973, scopeLine: 973, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!968 = !DILocalVariable(name: "desc", scope: !951, file: !906, line: 357, type: !969, align: 8)
!969 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "AlignedBlock*", baseType: !970, size: 64, align: 64, dwarfAddressSpace: 0)
!970 = !DICompositeType(tag: DW_TAG_structure_type, name: "AlignedBlock", scope: !906, file: !906, line: 363, size: 128, align: 64, elements: !971, identifier: "std.core.mem.allocator.AlignedBlock")
!971 = !{!972, !973}
!972 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !970, file: !906, line: 365, baseType: !3, size: 64, align: 64)
!973 = !DIDerivedType(tag: DW_TAG_member, name: "start", scope: !970, file: !906, line: 366, baseType: !29, size: 64, align: 64, offset: 64)
!974 = !DILocation(line: 357, scope: !951, inlinedAt: !947)
!975 = !DILocation(line: 358, scope: !951, inlinedAt: !947)
!976 = !DILocation(line: 359, scope: !951, inlinedAt: !947)
!977 = !DILocation(line: 360, scope: !951, inlinedAt: !947)
!978 = !DILocation(line: 37, scope: !937)
!979 = !DILocation(line: 342, scope: !980, inlinedAt: !978)
!980 = distinct !DILexicalBlock(scope: !981, file: !21, line: 347, column: 1)
!981 = distinct !DISubprogram(name: "@aligned_alloc", linkageName: "@aligned_alloc", scope: !21, file: !21, line: 346, scopeLine: 346, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95, retainedNodes: !140)
!982 = !DILocation(line: 37, scope: !980, inlinedAt: !978)
!983 = !DILocation(line: 343, scope: !980, inlinedAt: !978)
!984 = !DILocation(line: 344, scope: !980, inlinedAt: !978)
!985 = !DILocation(line: 348, scope: !981, inlinedAt: !978)
!986 = !DILocalVariable(name: "header", scope: !981, file: !906, line: 349, type: !3, align: 8)
!987 = !DILocation(line: 349, scope: !981, inlinedAt: !978)
!988 = !DILocalVariable(name: "alignsize", scope: !981, file: !906, line: 350, type: !3, align: 8)
!989 = !DILocation(line: 350, scope: !981, inlinedAt: !978)
!990 = !DILocalVariable(name: "data", scope: !981, file: !906, line: 352, type: !29, align: 8)
!991 = !DILocation(line: 352, scope: !981, inlinedAt: !978)
!992 = !DILocalVariable(name: "mem", scope: !981, file: !906, line: 356, type: !29, align: 8)
!993 = !DILocation(line: 356, scope: !981, inlinedAt: !978)
!994 = !DILocation(line: 313, scope: !995, inlinedAt: !993)
!995 = distinct !DISubprogram(name: "aligned_pointer", linkageName: "aligned_pointer", scope: !220, file: !220, line: 311, scopeLine: 311, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!996 = !DILocation(line: 975, scope: !997, inlinedAt: !994)
!997 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !205, file: !205, line: 973, scopeLine: 973, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!998 = !DILocalVariable(name: "desc", scope: !981, file: !906, line: 357, type: !969, align: 8)
!999 = !DILocation(line: 357, scope: !981, inlinedAt: !978)
!1000 = !DILocation(line: 358, scope: !981, inlinedAt: !978)
!1001 = !DILocation(line: 359, scope: !981, inlinedAt: !978)
!1002 = !DILocation(line: 360, scope: !981, inlinedAt: !978)
!1003 = distinct !DISubprogram(name: "resize", linkageName: "std.core.mem.allocator.SimpleHeapAllocator.resize", scope: !906, file: !906, line: 40, type: !1004, scopeLine: 40, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !95, retainedNodes: !140)
!1004 = !DISubroutineType(types: !1005)
!1005 = !{!192, !194, !909, !29, !4, !4}
!1006 = !DILocation(line: 41, scope: !1003)
!1007 = !DILocalVariable(name: "self", arg: 1, scope: !1003, file: !906, line: 40, type: !909)
!1008 = !DILocation(line: 40, scope: !1003)
!1009 = !DILocalVariable(name: "old_pointer", arg: 2, scope: !1003, file: !906, line: 40, type: !29)
!1010 = !DILocalVariable(name: "size", arg: 3, scope: !1003, file: !906, line: 40, type: !3)
!1011 = !DILocalVariable(name: "alignment", arg: 4, scope: !1003, file: !906, line: 40, type: !3)
!1012 = !DILocation(line: 42, scope: !1003)
!1013 = !DILocation(line: 380, scope: !1014, inlinedAt: !1016)
!1014 = distinct !DILexicalBlock(scope: !1015, file: !21, line: 384, column: 1)
!1015 = distinct !DISubprogram(name: "@aligned_realloc", linkageName: "@aligned_realloc", scope: !21, file: !21, line: 383, scopeLine: 383, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95, retainedNodes: !140)
!1016 = !DILocation(line: 43, scope: !1003)
!1017 = !DILocation(line: 43, scope: !1014, inlinedAt: !1016)
!1018 = !DILocation(line: 381, scope: !1014, inlinedAt: !1016)
!1019 = !DILocalVariable(name: "desc", scope: !1015, file: !906, line: 385, type: !969, align: 8)
!1020 = !DILocation(line: 385, scope: !1015, inlinedAt: !1016)
!1021 = !DILocalVariable(name: "data_start", scope: !1015, file: !906, line: 386, type: !29, align: 8)
!1022 = !DILocation(line: 386, scope: !1015, inlinedAt: !1016)
!1023 = !DILocalVariable(name: "new_data", scope: !1015, file: !906, line: 387, type: !29, align: 8)
!1024 = !DILocation(line: 387, scope: !1015, inlinedAt: !1016)
!1025 = !DILocation(line: 342, scope: !1026, inlinedAt: !1024)
!1026 = distinct !DILexicalBlock(scope: !1027, file: !21, line: 347, column: 1)
!1027 = distinct !DISubprogram(name: "@aligned_alloc", linkageName: "@aligned_alloc", scope: !21, file: !21, line: 346, scopeLine: 346, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95, retainedNodes: !140)
!1028 = !DILocation(line: 387, scope: !1026, inlinedAt: !1024)
!1029 = !DILocation(line: 343, scope: !1026, inlinedAt: !1024)
!1030 = !DILocation(line: 344, scope: !1026, inlinedAt: !1024)
!1031 = !DILocation(line: 348, scope: !1027, inlinedAt: !1024)
!1032 = !DILocalVariable(name: "header", scope: !1027, file: !906, line: 349, type: !3, align: 8)
!1033 = !DILocation(line: 349, scope: !1027, inlinedAt: !1024)
!1034 = !DILocalVariable(name: "alignsize", scope: !1027, file: !906, line: 350, type: !3, align: 8)
!1035 = !DILocation(line: 350, scope: !1027, inlinedAt: !1024)
!1036 = !DILocalVariable(name: "data", scope: !1027, file: !906, line: 352, type: !29, align: 8)
!1037 = !DILocation(line: 352, scope: !1027, inlinedAt: !1024)
!1038 = !DILocalVariable(name: "mem", scope: !1027, file: !906, line: 356, type: !29, align: 8)
!1039 = !DILocation(line: 356, scope: !1027, inlinedAt: !1024)
!1040 = !DILocation(line: 313, scope: !1041, inlinedAt: !1039)
!1041 = distinct !DISubprogram(name: "aligned_pointer", linkageName: "aligned_pointer", scope: !220, file: !220, line: 311, scopeLine: 311, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!1042 = !DILocation(line: 975, scope: !1043, inlinedAt: !1040)
!1043 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !205, file: !205, line: 973, scopeLine: 973, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!1044 = !DILocalVariable(name: "desc", scope: !1027, file: !906, line: 357, type: !969, align: 8)
!1045 = !DILocation(line: 357, scope: !1027, inlinedAt: !1024)
!1046 = !DILocation(line: 358, scope: !1027, inlinedAt: !1024)
!1047 = !DILocation(line: 359, scope: !1027, inlinedAt: !1024)
!1048 = !DILocation(line: 360, scope: !1027, inlinedAt: !1024)
!1049 = !DILocation(line: 388, scope: !1015, inlinedAt: !1016)
!1050 = !DILocation(line: 357, scope: !1051, inlinedAt: !1049)
!1051 = distinct !DILexicalBlock(scope: !1052, file: !220, line: 358, column: 1)
!1052 = distinct !DISubprogram(name: "copy", linkageName: "copy", scope: !220, file: !220, line: 357, scopeLine: 357, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!1053 = !DILocation(line: 354, scope: !1051, inlinedAt: !1049)
!1054 = !DILocation(line: 388, scope: !1051, inlinedAt: !1049)
!1055 = !DILocation(line: 355, scope: !1051, inlinedAt: !1049)
!1056 = !DILocation(line: 359, scope: !1052, inlinedAt: !1049)
!1057 = !DILocation(line: 392, scope: !1015, inlinedAt: !1016)
!1058 = !DILocation(line: 394, scope: !1015, inlinedAt: !1016)
!1059 = !DILocation(line: 44, scope: !1003)
!1060 = !DILocation(line: 60, scope: !1003)
!1061 = distinct !DISubprogram(name: "release", linkageName: "std.core.mem.allocator.SimpleHeapAllocator.release", scope: !906, file: !906, line: 47, type: !1062, scopeLine: 47, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !95, retainedNodes: !140)
!1062 = !DISubroutineType(types: !1063)
!1063 = !{null, !909, !29, !60}
!1064 = !DILocation(line: 48, scope: !1061)
!1065 = !DILocalVariable(name: "self", arg: 1, scope: !1061, file: !906, line: 47, type: !909)
!1066 = !DILocation(line: 47, scope: !1061)
!1067 = !DILocalVariable(name: "old_pointer", arg: 2, scope: !1061, file: !906, line: 47, type: !29)
!1068 = !DILocalVariable(name: "aligned", arg: 3, scope: !1061, file: !906, line: 47, type: !60)
!1069 = !DILocation(line: 49, scope: !1061)
!1070 = !DILocalVariable(name: "desc", scope: !1071, file: !906, line: 371, type: !969, align: 8)
!1071 = distinct !DISubprogram(name: "@aligned_free", linkageName: "@aligned_free", scope: !21, file: !21, line: 369, scopeLine: 369, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95, retainedNodes: !140)
!1072 = !DILocation(line: 371, scope: !1071, inlinedAt: !1073)
!1073 = !DILocation(line: 51, scope: !1074)
!1074 = distinct !DILexicalBlock(scope: !1061, file: !906, line: 50, column: 2)
!1075 = !DILocation(line: 375, scope: !1071, inlinedAt: !1073)
!1076 = !DILocation(line: 55, scope: !1077)
!1077 = distinct !DILexicalBlock(scope: !1061, file: !906, line: 54, column: 2)
!1078 = distinct !DISubprogram(name: "_realloc", linkageName: "std.core.mem.allocator.SimpleHeapAllocator._realloc", scope: !906, file: !906, line: 62, type: !1079, scopeLine: 62, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95, retainedNodes: !140)
!1079 = !DISubroutineType(types: !1080)
!1080 = !{!192, !194, !909, !29, !4}
!1081 = !DILocation(line: 63, scope: !1078)
!1082 = !DILocalVariable(name: "self", arg: 1, scope: !1078, file: !906, line: 62, type: !909)
!1083 = !DILocation(line: 62, scope: !1078)
!1084 = !DILocalVariable(name: "old_pointer", arg: 2, scope: !1078, file: !906, line: 62, type: !29)
!1085 = !DILocalVariable(name: "bytes", arg: 3, scope: !1078, file: !906, line: 62, type: !3)
!1086 = !DILocation(line: 60, scope: !1087)
!1087 = distinct !DILexicalBlock(scope: !1078, file: !906, line: 63, column: 1)
!1088 = !DILocalVariable(name: "block", scope: !1078, file: !906, line: 65, type: !919, align: 8)
!1089 = !DILocation(line: 65, scope: !1078)
!1090 = !DILocation(line: 66, scope: !1078)
!1091 = !DILocalVariable(name: "new", scope: !1078, file: !906, line: 67, type: !29, align: 8)
!1092 = !DILocation(line: 67, scope: !1078)
!1093 = !DILocalVariable(name: "max_to_copy", scope: !1078, file: !906, line: 68, type: !3, align: 8)
!1094 = !DILocation(line: 68, scope: !1078)
!1095 = !DILocation(line: 376, scope: !1096, inlinedAt: !1094)
!1096 = distinct !DISubprogram(name: "min", linkageName: "min", scope: !205, file: !205, line: 373, scopeLine: 373, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!1097 = !DILocation(line: 357, scope: !1098, inlinedAt: !1100)
!1098 = distinct !DILexicalBlock(scope: !1099, file: !220, line: 358, column: 1)
!1099 = distinct !DISubprogram(name: "copy", linkageName: "copy", scope: !220, file: !220, line: 357, scopeLine: 357, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!1100 = !DILocation(line: 69, scope: !1078)
!1101 = !DILocation(line: 354, scope: !1098, inlinedAt: !1100)
!1102 = !DILocation(line: 69, scope: !1098, inlinedAt: !1100)
!1103 = !DILocation(line: 355, scope: !1098, inlinedAt: !1100)
!1104 = !DILocation(line: 359, scope: !1099, inlinedAt: !1100)
!1105 = !DILocation(line: 70, scope: !1078)
!1106 = !DILocation(line: 71, scope: !1078)
!1107 = distinct !DISubprogram(name: "_calloc", linkageName: "std.core.mem.allocator.SimpleHeapAllocator._calloc", scope: !906, file: !906, line: 74, type: !1108, scopeLine: 74, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95, retainedNodes: !140)
!1108 = !DISubroutineType(types: !1109)
!1109 = !{!192, !194, !909, !4}
!1110 = !DILocation(line: 75, scope: !1107)
!1111 = !DILocalVariable(name: "self", arg: 1, scope: !1107, file: !906, line: 74, type: !909)
!1112 = !DILocation(line: 74, scope: !1107)
!1113 = !DILocalVariable(name: "bytes", arg: 2, scope: !1107, file: !906, line: 74, type: !3)
!1114 = !DILocalVariable(name: "data", scope: !1107, file: !906, line: 76, type: !29, align: 8)
!1115 = !DILocation(line: 76, scope: !1107)
!1116 = !DILocation(line: 336, scope: !1117, inlinedAt: !1118)
!1117 = distinct !DISubprogram(name: "clear", linkageName: "clear", scope: !220, file: !220, line: 334, scopeLine: 334, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!1118 = !DILocation(line: 77, scope: !1107)
!1119 = !DILocation(line: 78, scope: !1107)
!1120 = distinct !DISubprogram(name: "_alloc", linkageName: "std.core.mem.allocator.SimpleHeapAllocator._alloc", scope: !906, file: !906, line: 81, type: !1108, scopeLine: 81, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95, retainedNodes: !140)
!1121 = !DILocation(line: 82, scope: !1120)
!1122 = !DILocalVariable(name: "self", arg: 1, scope: !1120, file: !906, line: 81, type: !909)
!1123 = !DILocation(line: 81, scope: !1120)
!1124 = !DILocalVariable(name: "bytes", arg: 2, scope: !1120, file: !906, line: 81, type: !3)
!1125 = !DILocalVariable(name: "aligned_bytes", scope: !1120, file: !906, line: 83, type: !3, align: 8)
!1126 = !DILocation(line: 83, scope: !1120)
!1127 = !DILocation(line: 975, scope: !1128, inlinedAt: !1126)
!1128 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !205, file: !205, line: 973, scopeLine: 973, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!1129 = !DILocation(line: 84, scope: !1120)
!1130 = !DILocation(line: 86, scope: !1131)
!1131 = distinct !DILexicalBlock(scope: !1120, file: !906, line: 85, column: 2)
!1132 = !DILocalVariable(name: "current", scope: !1120, file: !906, line: 89, type: !919, align: 8)
!1133 = !DILocation(line: 89, scope: !1120)
!1134 = !DILocalVariable(name: "previous", scope: !1120, file: !906, line: 90, type: !919, align: 8)
!1135 = !DILocation(line: 90, scope: !1120)
!1136 = !DILocation(line: 91, scope: !1120)
!1137 = !DILocation(line: 91, scope: !1138)
!1138 = distinct !DILexicalBlock(scope: !1120, file: !906, line: 91, column: 2)
!1139 = !DILocation(line: 95, scope: !1140)
!1140 = distinct !DILexicalBlock(scope: !1141, file: !906, line: 93, column: 3)
!1141 = distinct !DILexicalBlock(scope: !1138, file: !906, line: 92, column: 2)
!1142 = !DILocation(line: 96, scope: !1143)
!1143 = distinct !DILexicalBlock(scope: !1140, file: !906, line: 96, column: 5)
!1144 = !DILocation(line: 98, scope: !1145)
!1145 = distinct !DILexicalBlock(scope: !1143, file: !906, line: 97, column: 5)
!1146 = !DILocation(line: 102, scope: !1147)
!1147 = distinct !DILexicalBlock(scope: !1143, file: !906, line: 101, column: 5)
!1148 = !DILocation(line: 104, scope: !1143)
!1149 = !DILocation(line: 105, scope: !1143)
!1150 = !DILocation(line: 106, scope: !1140)
!1151 = !DILocalVariable(name: "unallocated", scope: !1152, file: !906, line: 107, type: !919, align: 8)
!1152 = distinct !DILexicalBlock(scope: !1140, file: !906, line: 107, column: 5)
!1153 = !DILocation(line: 107, scope: !1152)
!1154 = !DILocation(line: 108, scope: !1152)
!1155 = !DILocation(line: 109, scope: !1152)
!1156 = !DILocation(line: 110, scope: !1152)
!1157 = !DILocation(line: 112, scope: !1158)
!1158 = distinct !DILexicalBlock(scope: !1152, file: !906, line: 111, column: 5)
!1159 = !DILocation(line: 116, scope: !1160)
!1160 = distinct !DILexicalBlock(scope: !1152, file: !906, line: 115, column: 5)
!1161 = !DILocation(line: 118, scope: !1152)
!1162 = !DILocation(line: 119, scope: !1152)
!1163 = !DILocation(line: 120, scope: !1152)
!1164 = !DILocation(line: 122, scope: !1165)
!1165 = distinct !DILexicalBlock(scope: !1140, file: !906, line: 122, column: 5)
!1166 = !DILocation(line: 123, scope: !1165)
!1167 = !DILocation(line: 126, scope: !1120)
!1168 = !DILocation(line: 127, scope: !1120)
!1169 = distinct !DISubprogram(name: "add_block", linkageName: "std.core.mem.allocator.SimpleHeapAllocator.add_block", scope: !906, file: !906, line: 130, type: !1170, scopeLine: 130, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95, retainedNodes: !140)
!1170 = !DISubroutineType(types: !1171)
!1171 = !{!192, !29, !909, !4}
!1172 = !DILocation(line: 131, scope: !1169)
!1173 = !DILocalVariable(name: "self", arg: 1, scope: !1169, file: !906, line: 130, type: !909)
!1174 = !DILocation(line: 130, scope: !1169)
!1175 = !DILocalVariable(name: "aligned_bytes", arg: 2, scope: !1169, file: !906, line: 130, type: !3)
!1176 = !DILocation(line: 132, scope: !1169)
!1177 = !DILocation(line: 975, scope: !1178, inlinedAt: !1176)
!1178 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !205, file: !205, line: 973, scopeLine: 973, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!1179 = !DILocalVariable(name: "result", scope: !1169, file: !906, line: 133, type: !134, align: 8)
!1180 = !DILocation(line: 133, scope: !1169)
!1181 = !DILocalVariable(name: "new_block", scope: !1169, file: !906, line: 134, type: !919, align: 8)
!1182 = !DILocation(line: 134, scope: !1169)
!1183 = !DILocation(line: 135, scope: !1169)
!1184 = !DILocation(line: 136, scope: !1169)
!1185 = !DILocation(line: 137, scope: !1169)
!1186 = distinct !DISubprogram(name: "_free", linkageName: "std.core.mem.allocator.SimpleHeapAllocator._free", scope: !906, file: !906, line: 141, type: !1187, scopeLine: 141, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95, retainedNodes: !140)
!1187 = !DISubroutineType(types: !1188)
!1188 = !{null, !909, !29}
!1189 = !DILocation(line: 142, scope: !1186)
!1190 = !DILocalVariable(name: "self", arg: 1, scope: !1186, file: !906, line: 141, type: !909)
!1191 = !DILocation(line: 141, scope: !1186)
!1192 = !DILocalVariable(name: "ptr", arg: 2, scope: !1186, file: !906, line: 141, type: !29)
!1193 = !DILocation(line: 144, scope: !1186)
!1194 = !DILocalVariable(name: "block", scope: !1186, file: !906, line: 147, type: !919, align: 8)
!1195 = !DILocation(line: 147, scope: !1186)
!1196 = !DILocation(line: 150, scope: !1186)
!1197 = !DILocation(line: 152, scope: !1198)
!1198 = distinct !DILexicalBlock(scope: !1186, file: !906, line: 151, column: 2)
!1199 = !DILocation(line: 153, scope: !1198)
!1200 = !DILocalVariable(name: "current", scope: !1186, file: !906, line: 157, type: !919, align: 8)
!1201 = !DILocation(line: 157, scope: !1186)
!1202 = !DILocalVariable(name: "prev", scope: !1186, file: !906, line: 158, type: !919, align: 8)
!1203 = !DILocation(line: 158, scope: !1186)
!1204 = !DILocation(line: 159, scope: !1186)
!1205 = !DILocation(line: 159, scope: !1206)
!1206 = distinct !DILexicalBlock(scope: !1186, file: !906, line: 159, column: 2)
!1207 = !DILocation(line: 161, scope: !1208)
!1208 = distinct !DILexicalBlock(scope: !1206, file: !906, line: 160, column: 2)
!1209 = !DILocation(line: 164, scope: !1210)
!1210 = distinct !DILexicalBlock(scope: !1208, file: !906, line: 162, column: 3)
!1211 = !DILocation(line: 166, scope: !1210)
!1212 = !DILocation(line: 168, scope: !1208)
!1213 = !DILocation(line: 169, scope: !1208)
!1214 = !DILocation(line: 171, scope: !1186)
!1215 = !DILocation(line: 175, scope: !1216)
!1216 = distinct !DILexicalBlock(scope: !1186, file: !906, line: 172, column: 2)
!1217 = !DILocation(line: 178, scope: !1218)
!1218 = distinct !DILexicalBlock(scope: !1216, file: !906, line: 176, column: 3)
!1219 = !DILocation(line: 179, scope: !1218)
!1220 = !DILocation(line: 184, scope: !1221)
!1221 = distinct !DILexicalBlock(scope: !1216, file: !906, line: 182, column: 3)
!1222 = !DILocation(line: 187, scope: !1186)
!1223 = !DILocation(line: 190, scope: !1224)
!1224 = distinct !DILexicalBlock(scope: !1186, file: !906, line: 188, column: 2)
!1225 = !DILocation(line: 195, scope: !1226)
!1226 = distinct !DILexicalBlock(scope: !1186, file: !906, line: 193, column: 2)
!1227 = !DILocation(line: 197, scope: !1228)
!1228 = distinct !DILexicalBlock(scope: !1226, file: !906, line: 196, column: 3)
!1229 = !DILocation(line: 198, scope: !1228)
!1230 = !DILocation(line: 203, scope: !1231)
!1231 = distinct !DILexicalBlock(scope: !1226, file: !906, line: 201, column: 3)
!1232 = distinct !DISubprogram(name: "acquire", linkageName: "std.core.mem.allocator.LibcAllocator.acquire", scope: !7, file: !7, line: 80, type: !1233, scopeLine: 80, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !95, retainedNodes: !140)
!1233 = !DISubroutineType(types: !1234)
!1234 = !{!192, !194, !1235, !4, !98, !4}
!1235 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "LibcAllocator*", baseType: !8, size: 64, align: 64, dwarfAddressSpace: 0)
!1236 = !DILocation(line: 81, scope: !1232)
!1237 = !DILocalVariable(name: "self", arg: 1, scope: !1232, file: !7, line: 80, type: !1235)
!1238 = !DILocation(line: 80, scope: !1232)
!1239 = !DILocalVariable(name: "bytes", arg: 2, scope: !1232, file: !7, line: 80, type: !3)
!1240 = !DILocalVariable(name: "init_type", arg: 3, scope: !1232, file: !7, line: 80, type: !98)
!1241 = !DILocalVariable(name: "alignment", arg: 4, scope: !1232, file: !7, line: 80, type: !3)
!1242 = !DILocation(line: 82, scope: !1232)
!1243 = !DILocation(line: 84, scope: !1244)
!1244 = distinct !DILexicalBlock(scope: !1232, file: !7, line: 83, column: 2)
!1245 = !DILocation(line: 86, scope: !1246)
!1246 = distinct !DILexicalBlock(scope: !1244, file: !7, line: 85, column: 3)
!1247 = !DILocation(line: 88, scope: !1244)
!1248 = !DILocalVariable(name: "data", scope: !1232, file: !7, line: 90, type: !29, align: 8)
!1249 = !DILocation(line: 90, scope: !1232)
!1250 = !DILocation(line: 91, scope: !1232)
!1251 = !DILocation(line: 95, scope: !1232)
!1252 = distinct !DISubprogram(name: "resize", linkageName: "std.core.mem.allocator.LibcAllocator.resize", scope: !7, file: !7, line: 98, type: !1253, scopeLine: 98, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !95, retainedNodes: !140)
!1253 = !DISubroutineType(types: !1254)
!1254 = !{!192, !194, !1235, !29, !4, !4}
!1255 = !DILocation(line: 99, scope: !1252)
!1256 = !DILocalVariable(name: "self", arg: 1, scope: !1252, file: !7, line: 98, type: !1235)
!1257 = !DILocation(line: 98, scope: !1252)
!1258 = !DILocalVariable(name: "old_ptr", arg: 2, scope: !1252, file: !7, line: 98, type: !29)
!1259 = !DILocalVariable(name: "new_bytes", arg: 3, scope: !1252, file: !7, line: 98, type: !3)
!1260 = !DILocalVariable(name: "alignment", arg: 4, scope: !1252, file: !7, line: 98, type: !3)
!1261 = !DILocation(line: 100, scope: !1252)
!1262 = !DILocation(line: 102, scope: !1263)
!1263 = distinct !DILexicalBlock(scope: !1252, file: !7, line: 101, column: 2)
!1264 = !DILocation(line: 104, scope: !1252)
!1265 = distinct !DISubprogram(name: "release", linkageName: "std.core.mem.allocator.LibcAllocator.release", scope: !7, file: !7, line: 107, type: !1266, scopeLine: 107, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !95, retainedNodes: !140)
!1266 = !DISubroutineType(types: !1267)
!1267 = !{null, !1235, !29, !60}
!1268 = !DILocation(line: 108, scope: !1265)
!1269 = !DILocalVariable(name: "self", arg: 1, scope: !1265, file: !7, line: 107, type: !1235)
!1270 = !DILocation(line: 107, scope: !1265)
!1271 = !DILocalVariable(name: "old_ptr", arg: 2, scope: !1265, file: !7, line: 107, type: !29)
!1272 = !DILocalVariable(name: "aligned", arg: 3, scope: !1265, file: !7, line: 107, type: !60)
!1273 = !DILocation(line: 109, scope: !1265)
!1274 = !DILocation(line: 111, scope: !1275)
!1275 = distinct !DILexicalBlock(scope: !1265, file: !7, line: 110, column: 2)
!1276 = !DILocation(line: 112, scope: !1275)
!1277 = !DILocation(line: 114, scope: !1265)
!1278 = distinct !DISubprogram(name: "init", linkageName: "std.core.mem.allocator.OnStackAllocator.init", scope: !1279, file: !1279, line: 32, type: !1280, scopeLine: 32, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !95, retainedNodes: !140)
!1279 = !DIFile(filename: "on_stack_allocator.c3", directory: "C:/Compilers/C3/lib/std/core/allocators")
!1280 = !DISubroutineType(types: !1281)
!1281 = !{null, !1282, !134, !26}
!1282 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "OnStackAllocator*", baseType: !1283, size: 64, align: 64, dwarfAddressSpace: 0)
!1283 = !DICompositeType(tag: DW_TAG_structure_type, name: "OnStackAllocator", scope: !1279, file: !1279, line: 12, size: 384, align: 64, elements: !1284, identifier: "std.core.mem.allocator.OnStackAllocator")
!1284 = !{!1285, !1286, !1287, !1288}
!1285 = !DIDerivedType(tag: DW_TAG_member, name: "backing_allocator", scope: !1283, file: !1279, line: 14, baseType: !26, size: 128, align: 64)
!1286 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1283, file: !1279, line: 15, baseType: !134, size: 128, align: 64, offset: 128)
!1287 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !1283, file: !1279, line: 16, baseType: !3, size: 64, align: 64, offset: 256)
!1288 = !DIDerivedType(tag: DW_TAG_member, name: "chunk", scope: !1283, file: !1279, line: 17, baseType: !1289, size: 64, align: 64, offset: 320)
!1289 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "OnStackAllocatorExtraChunk*", baseType: !1290, size: 64, align: 64, dwarfAddressSpace: 0)
!1290 = !DICompositeType(tag: DW_TAG_structure_type, name: "OnStackAllocatorExtraChunk", scope: !1279, file: !1279, line: 20, size: 192, align: 64, elements: !1291, identifier: "std.core.mem.allocator.OnStackAllocatorExtraChunk.8319")
!1291 = !{!1292, !1293, !1294}
!1292 = !DIDerivedType(tag: DW_TAG_member, name: "is_aligned", scope: !1290, file: !1279, line: 22, baseType: !60, size: 8, align: 8)
!1293 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1290, file: !1279, line: 23, baseType: !1289, size: 64, align: 64, offset: 64)
!1294 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1290, file: !1279, line: 24, baseType: !29, size: 64, align: 64, offset: 128)
!1295 = !DILocation(line: 33, scope: !1278)
!1296 = !DILocalVariable(name: "self", arg: 1, scope: !1278, file: !1279, line: 32, type: !1282)
!1297 = !DILocation(line: 32, scope: !1278)
!1298 = !DILocalVariable(name: "data", arg: 2, scope: !1278, file: !1279, line: 32, type: !134)
!1299 = !DILocalVariable(name: "allocator", arg: 3, scope: !1278, file: !1279, line: 32, type: !26)
!1300 = !DILocation(line: 34, scope: !1278)
!1301 = !DILocation(line: 35, scope: !1278)
!1302 = !DILocation(line: 36, scope: !1278)
!1303 = distinct !DISubprogram(name: "free", linkageName: "std.core.mem.allocator.OnStackAllocator.free", scope: !1279, file: !1279, line: 39, type: !1304, scopeLine: 39, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !95, retainedNodes: !140)
!1304 = !DISubroutineType(types: !1305)
!1305 = !{null, !1282}
!1306 = !DILocation(line: 40, scope: !1303)
!1307 = !DILocalVariable(name: "self", arg: 1, scope: !1303, file: !1279, line: 39, type: !1282)
!1308 = !DILocation(line: 39, scope: !1303)
!1309 = !DILocalVariable(name: "chunk", scope: !1303, file: !1279, line: 41, type: !1289, align: 8)
!1310 = !DILocation(line: 41, scope: !1303)
!1311 = !DILocation(line: 42, scope: !1303)
!1312 = !DILocation(line: 42, scope: !1313)
!1313 = distinct !DILexicalBlock(scope: !1303, file: !1279, line: 42, column: 2)
!1314 = !DILocation(line: 44, scope: !1315)
!1315 = distinct !DILexicalBlock(scope: !1313, file: !1279, line: 43, column: 2)
!1316 = !DILocation(line: 46, scope: !1317)
!1317 = distinct !DILexicalBlock(scope: !1315, file: !1279, line: 45, column: 3)
!1318 = !DILocation(line: 160, scope: !1319, inlinedAt: !1316)
!1319 = distinct !DISubprogram(name: "free_aligned", linkageName: "free_aligned", scope: !21, file: !21, line: 158, scopeLine: 158, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!1320 = !DILocation(line: 164, scope: !1319, inlinedAt: !1316)
!1321 = !DILocation(line: 50, scope: !1322)
!1322 = distinct !DILexicalBlock(scope: !1315, file: !1279, line: 49, column: 3)
!1323 = !DILocation(line: 119, scope: !1324, inlinedAt: !1321)
!1324 = distinct !DISubprogram(name: "free", linkageName: "free", scope: !21, file: !21, line: 117, scopeLine: 117, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!1325 = !DILocation(line: 123, scope: !1324, inlinedAt: !1321)
!1326 = !DILocalVariable(name: "old", scope: !1315, file: !1279, line: 52, type: !29, align: 8)
!1327 = !DILocation(line: 52, scope: !1315)
!1328 = !DILocation(line: 53, scope: !1315)
!1329 = !DILocation(line: 54, scope: !1315)
!1330 = !DILocation(line: 119, scope: !1331, inlinedAt: !1329)
!1331 = distinct !DISubprogram(name: "free", linkageName: "free", scope: !21, file: !21, line: 117, scopeLine: 117, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!1332 = !DILocation(line: 123, scope: !1331, inlinedAt: !1329)
!1333 = !DILocation(line: 56, scope: !1303)
!1334 = !DILocation(line: 57, scope: !1303)
!1335 = distinct !DISubprogram(name: "release", linkageName: "std.core.mem.allocator.OnStackAllocator.release", scope: !1279, file: !1279, line: 69, type: !1336, scopeLine: 69, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !95, retainedNodes: !140)
!1336 = !DISubroutineType(types: !1337)
!1337 = !{null, !1282, !29, !60}
!1338 = !DILocation(line: 70, scope: !1335)
!1339 = !DILocalVariable(name: "self", arg: 1, scope: !1335, file: !1279, line: 69, type: !1282)
!1340 = !DILocation(line: 69, scope: !1335)
!1341 = !DILocalVariable(name: "old_pointer", arg: 2, scope: !1335, file: !1279, line: 69, type: !29)
!1342 = !DILocalVariable(name: "aligned", arg: 3, scope: !1335, file: !1279, line: 69, type: !60)
!1343 = !DILocation(line: 67, scope: !1344)
!1344 = distinct !DILexicalBlock(scope: !1335, file: !1279, line: 70, column: 1)
!1345 = !DILocation(line: 71, scope: !1335)
!1346 = !DILocation(line: 72, scope: !1335)
!1347 = !DILocation(line: 73, scope: !1335)
!1348 = distinct !DISubprogram(name: "resize", linkageName: "std.core.mem.allocator.OnStackAllocator.resize", scope: !1279, file: !1279, line: 115, type: !1349, scopeLine: 115, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !95, retainedNodes: !140)
!1349 = !DISubroutineType(types: !1350)
!1350 = !{!192, !194, !1282, !29, !4, !4}
!1351 = !DILocation(line: 116, scope: !1348)
!1352 = !DILocalVariable(name: "self", arg: 1, scope: !1348, file: !1279, line: 115, type: !1282)
!1353 = !DILocation(line: 115, scope: !1348)
!1354 = !DILocalVariable(name: "old_pointer", arg: 2, scope: !1348, file: !1279, line: 115, type: !29)
!1355 = !DILocalVariable(name: "size", arg: 3, scope: !1348, file: !1279, line: 115, type: !3)
!1356 = !DILocalVariable(name: "alignment", arg: 4, scope: !1348, file: !1279, line: 115, type: !3)
!1357 = !DILocation(line: 111, scope: !1358)
!1358 = distinct !DILexicalBlock(scope: !1348, file: !1279, line: 116, column: 1)
!1359 = !DILocation(line: 112, scope: !1358)
!1360 = !DILocation(line: 113, scope: !1358)
!1361 = !DILocation(line: 117, scope: !1348)
!1362 = !DILocalVariable(name: "chunk", scope: !1363, file: !1279, line: 119, type: !1289, align: 8)
!1363 = distinct !DILexicalBlock(scope: !1348, file: !1279, line: 118, column: 2)
!1364 = !DILocation(line: 119, scope: !1363)
!1365 = !DILocation(line: 120, scope: !1363)
!1366 = !DILocation(line: 121, scope: !1363)
!1367 = !DILocation(line: 48, scope: !1363)
!1368 = !DILocation(line: 975, scope: !1369, inlinedAt: !1367)
!1369 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !205, file: !205, line: 973, scopeLine: 973, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!1370 = !DILocalVariable(name: "header", scope: !1348, file: !1279, line: 124, type: !1371, align: 8)
!1371 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "OnStackAllocatorHeader*", baseType: !1372, size: 64, align: 64, dwarfAddressSpace: 0)
!1372 = !DICompositeType(tag: DW_TAG_structure_type, name: "OnStackAllocatorHeader", scope: !1279, file: !1279, line: 60, size: 64, align: 64, elements: !1373, identifier: "std.core.mem.allocator.OnStackAllocatorHeader")
!1373 = !{!1374, !1375}
!1374 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1372, file: !1279, line: 62, baseType: !3, size: 64, align: 64)
!1375 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1372, file: !1279, line: 63, baseType: !54, align: 8, offset: 64)
!1376 = !DILocation(line: 124, scope: !1348)
!1377 = !DILocalVariable(name: "old_size", scope: !1348, file: !1279, line: 125, type: !3, align: 8)
!1378 = !DILocation(line: 125, scope: !1348)
!1379 = !DILocalVariable(name: "mem", scope: !1348, file: !1279, line: 126, type: !29, align: 8)
!1380 = !DILocation(line: 126, scope: !1348)
!1381 = !DILocation(line: 376, scope: !1382, inlinedAt: !1383)
!1382 = distinct !DISubprogram(name: "min", linkageName: "min", scope: !205, file: !205, line: 373, scopeLine: 373, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!1383 = !DILocation(line: 127, scope: !1348)
!1384 = !DILocation(line: 357, scope: !1385, inlinedAt: !1383)
!1385 = distinct !DILexicalBlock(scope: !1386, file: !220, line: 358, column: 1)
!1386 = distinct !DISubprogram(name: "copy", linkageName: "copy", scope: !220, file: !220, line: 357, scopeLine: 357, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!1387 = !DILocation(line: 354, scope: !1385, inlinedAt: !1383)
!1388 = !DILocation(line: 127, scope: !1385, inlinedAt: !1383)
!1389 = !DILocation(line: 355, scope: !1385, inlinedAt: !1383)
!1390 = !DILocation(line: 359, scope: !1386, inlinedAt: !1383)
!1391 = !DILocation(line: 128, scope: !1348)
!1392 = distinct !DISubprogram(name: "acquire", linkageName: "std.core.mem.allocator.OnStackAllocator.acquire", scope: !1279, file: !1279, line: 135, type: !1393, scopeLine: 135, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !95, retainedNodes: !140)
!1393 = !DISubroutineType(types: !1394)
!1394 = !{!192, !194, !1282, !4, !98, !4}
!1395 = !DILocation(line: 136, scope: !1392)
!1396 = !DILocalVariable(name: "self", arg: 1, scope: !1392, file: !1279, line: 135, type: !1282)
!1397 = !DILocation(line: 135, scope: !1392)
!1398 = !DILocalVariable(name: "size", arg: 2, scope: !1392, file: !1279, line: 135, type: !3)
!1399 = !DILocalVariable(name: "init_type", arg: 3, scope: !1392, file: !1279, line: 135, type: !98)
!1400 = !DILocalVariable(name: "alignment", arg: 4, scope: !1392, file: !1279, line: 135, type: !3)
!1401 = !DILocation(line: 132, scope: !1402)
!1402 = distinct !DILexicalBlock(scope: !1392, file: !1279, line: 136, column: 1)
!1403 = !DILocation(line: 133, scope: !1402)
!1404 = !DILocalVariable(name: "aligned", scope: !1392, file: !1279, line: 137, type: !60, align: 1)
!1405 = !DILocation(line: 137, scope: !1392)
!1406 = !DILocation(line: 138, scope: !1392)
!1407 = !DILocalVariable(name: "total_len", scope: !1392, file: !1279, line: 139, type: !3, align: 8)
!1408 = !DILocation(line: 139, scope: !1392)
!1409 = !DILocalVariable(name: "start_mem", scope: !1392, file: !1279, line: 140, type: !29, align: 8)
!1410 = !DILocation(line: 140, scope: !1392)
!1411 = !DILocalVariable(name: "unaligned_pointer_to_offset", scope: !1392, file: !1279, line: 141, type: !29, align: 8)
!1412 = !DILocation(line: 141, scope: !1392)
!1413 = !DILocalVariable(name: "mem", scope: !1392, file: !1279, line: 142, type: !29, align: 8)
!1414 = !DILocation(line: 142, scope: !1392)
!1415 = !DILocation(line: 313, scope: !1416, inlinedAt: !1414)
!1416 = distinct !DISubprogram(name: "aligned_pointer", linkageName: "aligned_pointer", scope: !220, file: !220, line: 311, scopeLine: 311, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!1417 = !DILocation(line: 975, scope: !1418, inlinedAt: !1415)
!1418 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !205, file: !205, line: 973, scopeLine: 973, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!1419 = !DILocalVariable(name: "end", scope: !1392, file: !1279, line: 143, type: !3, align: 8)
!1420 = !DILocation(line: 143, scope: !1392)
!1421 = !DILocalVariable(name: "backing_allocator", scope: !1392, file: !1279, line: 144, type: !26, align: 8)
!1422 = !DILocation(line: 144, scope: !1392)
!1423 = !DILocation(line: 146, scope: !1392)
!1424 = !DILocalVariable(name: "chunk", scope: !1425, file: !1279, line: 148, type: !1289, align: 8)
!1425 = distinct !DILexicalBlock(scope: !1392, file: !1279, line: 147, column: 2)
!1426 = !DILocation(line: 148, scope: !1425)
!1427 = !DILocation(line: 80, scope: !1428, inlinedAt: !1429)
!1428 = distinct !DISubprogram(name: "malloc_try", linkageName: "malloc_try", scope: !21, file: !21, line: 78, scopeLine: 78, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!1429 = !DILocation(line: 237, scope: !1430, inlinedAt: !1426)
!1430 = distinct !DISubprogram(name: "alloc_try", linkageName: "alloc_try", scope: !21, file: !21, line: 235, scopeLine: 235, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!1431 = !DILocation(line: 86, scope: !1428, inlinedAt: !1429)
!1432 = !DILocation(line: 38, scope: !1428, inlinedAt: !1429)
!1433 = !DILocation(line: 975, scope: !1434, inlinedAt: !1432)
!1434 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !205, file: !205, line: 973, scopeLine: 973, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!1435 = !DILocation(line: 151, scope: !1425)
!1436 = !DILocation(line: 152, scope: !1425)
!1437 = !DILocation(line: 38, scope: !1425)
!1438 = !DILocation(line: 975, scope: !1439, inlinedAt: !1437)
!1439 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !205, file: !205, line: 973, scopeLine: 973, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!1440 = !DILocation(line: 149, scope: !1441)
!1441 = distinct !DILexicalBlock(scope: !1425, file: !1279, line: 149, column: 15)
!1442 = !DILocation(line: 119, scope: !1443, inlinedAt: !1440)
!1443 = distinct !DISubprogram(name: "free", linkageName: "free", scope: !21, file: !21, line: 117, scopeLine: 117, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!1444 = !DILocation(line: 123, scope: !1443, inlinedAt: !1440)
!1445 = !DILocation(line: 150, scope: !1446)
!1446 = distinct !DILexicalBlock(scope: !1425, file: !1279, line: 150, column: 13)
!1447 = !DILocation(line: 154, scope: !1392)
!1448 = !DILocalVariable(name: "header", scope: !1392, file: !1279, line: 155, type: !1371, align: 8)
!1449 = !DILocation(line: 155, scope: !1392)
!1450 = !DILocation(line: 156, scope: !1392)
!1451 = !DILocation(line: 157, scope: !1392)
!1452 = distinct !DISubprogram(name: "allocation_in_stack_mem", linkageName: "std.core.mem.allocator.allocation_in_stack_mem.8338", scope: !1279, file: !1279, line: 76, type: !1453, scopeLine: 76, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95, retainedNodes: !140)
!1453 = !DISubroutineType(types: !1454)
!1454 = !{!60, !1282, !29}
!1455 = !DILocalVariable(name: "a", arg: 1, scope: !1452, file: !1279, line: 76, type: !1282)
!1456 = !DILocation(line: 76, scope: !1452)
!1457 = !DILocalVariable(name: "ptr", arg: 2, scope: !1452, file: !1279, line: 76, type: !29)
!1458 = !DILocation(line: 78, scope: !1452)
!1459 = distinct !DISubprogram(name: "on_stack_allocator_remove_chunk", linkageName: "std.core.mem.allocator.on_stack_allocator_remove_chunk.8341", scope: !1279, file: !1279, line: 81, type: !1460, scopeLine: 81, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95, retainedNodes: !140)
!1460 = !DISubroutineType(types: !1461)
!1461 = !{null, !1282, !29}
!1462 = !DILocalVariable(name: "a", arg: 1, scope: !1459, file: !1279, line: 81, type: !1282)
!1463 = !DILocation(line: 81, scope: !1459)
!1464 = !DILocalVariable(name: "ptr", arg: 2, scope: !1459, file: !1279, line: 81, type: !29)
!1465 = !DILocalVariable(name: "chunk", scope: !1459, file: !1279, line: 83, type: !1289, align: 8)
!1466 = !DILocation(line: 83, scope: !1459)
!1467 = !DILocalVariable(name: "addr", scope: !1459, file: !1279, line: 84, type: !1468, align: 8)
!1468 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "OnStackAllocatorExtraChunk**", baseType: !1289, size: 64, align: 64, dwarfAddressSpace: 0)
!1469 = !DILocation(line: 84, scope: !1459)
!1470 = !DILocation(line: 85, scope: !1459)
!1471 = !DILocation(line: 85, scope: !1472)
!1472 = distinct !DILexicalBlock(scope: !1459, file: !1279, line: 85, column: 2)
!1473 = !DILocation(line: 87, scope: !1474)
!1474 = distinct !DILexicalBlock(scope: !1472, file: !1279, line: 86, column: 2)
!1475 = !DILocation(line: 89, scope: !1476)
!1476 = distinct !DILexicalBlock(scope: !1474, file: !1279, line: 88, column: 3)
!1477 = !DILocation(line: 90, scope: !1476)
!1478 = !DILocation(line: 119, scope: !1479, inlinedAt: !1477)
!1479 = distinct !DISubprogram(name: "free", linkageName: "free", scope: !21, file: !21, line: 117, scopeLine: 117, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!1480 = !DILocation(line: 123, scope: !1479, inlinedAt: !1477)
!1481 = !DILocation(line: 91, scope: !1476)
!1482 = !DILocation(line: 93, scope: !1474)
!1483 = !DILocation(line: 94, scope: !1474)
!1484 = !DILocation(line: 232, scope: !1485, inlinedAt: !1487)
!1485 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !1486, file: !1486, line: 229, scopeLine: 229, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!1486 = !DIFile(filename: "builtin.c3", directory: "C:/Compilers/C3/lib/std/core")
!1487 = !DILocation(line: 96, scope: !1459)
!1488 = distinct !DISubprogram(name: "on_stack_allocator_find_chunk", linkageName: "std.core.mem.allocator.on_stack_allocator_find_chunk.8346", scope: !1279, file: !1279, line: 99, type: !1489, scopeLine: 99, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95, retainedNodes: !140)
!1489 = !DISubroutineType(types: !1490)
!1490 = !{!1289, !1282, !29}
!1491 = !DILocalVariable(name: "a", arg: 1, scope: !1488, file: !1279, line: 99, type: !1282)
!1492 = !DILocation(line: 99, scope: !1488)
!1493 = !DILocalVariable(name: "ptr", arg: 2, scope: !1488, file: !1279, line: 99, type: !29)
!1494 = !DILocalVariable(name: "chunk", scope: !1488, file: !1279, line: 101, type: !1289, align: 8)
!1495 = !DILocation(line: 101, scope: !1488)
!1496 = !DILocation(line: 102, scope: !1488)
!1497 = !DILocation(line: 102, scope: !1498)
!1498 = distinct !DILexicalBlock(scope: !1488, file: !1279, line: 102, column: 2)
!1499 = !DILocation(line: 104, scope: !1500)
!1500 = distinct !DILexicalBlock(scope: !1498, file: !1279, line: 103, column: 2)
!1501 = !DILocation(line: 105, scope: !1500)
!1502 = !DILocation(line: 107, scope: !1488)
!1503 = distinct !DISubprogram(name: "derive_allocator", linkageName: "std.core.mem.allocator.TempAllocator.derive_allocator", scope: !11, file: !11, line: 89, type: !1504, scopeLine: 89, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !95, retainedNodes: !140)
!1504 = !DISubroutineType(types: !1505)
!1505 = !{!192, !1506, !41, !4}
!1506 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "TempAllocator**", baseType: !41, size: 64, align: 64, dwarfAddressSpace: 0)
!1507 = !DILocation(line: 90, scope: !1503)
!1508 = !DILocalVariable(name: "self", arg: 1, scope: !1503, file: !11, line: 89, type: !41)
!1509 = !DILocation(line: 89, scope: !1503)
!1510 = !DILocalVariable(name: "reserve", arg: 2, scope: !1503, file: !11, line: 89, type: !3)
!1511 = !DILocation(line: 87, scope: !1512)
!1512 = distinct !DILexicalBlock(scope: !1503, file: !11, line: 90, column: 1)
!1513 = !DILocation(line: 91, scope: !1503)
!1514 = !DILocalVariable(name: "remaining", scope: !1503, file: !11, line: 92, type: !3, align: 8)
!1515 = !DILocation(line: 92, scope: !1503)
!1516 = !DILocalVariable(name: "mem", scope: !1503, file: !11, line: 93, type: !29, align: 8)
!1517 = !DILocation(line: 93, scope: !1503)
!1518 = !DILocalVariable(name: "size", scope: !1503, file: !11, line: 94, type: !3, align: 8)
!1519 = !DILocation(line: 94, scope: !1503)
!1520 = !DILocation(line: 95, scope: !1503)
!1521 = !DILocation(line: 97, scope: !1522)
!1522 = distinct !DILexicalBlock(scope: !1503, file: !11, line: 96, column: 2)
!1523 = !DILocation(line: 69, scope: !1522)
!1524 = !DILocalVariable(name: "start", scope: !1503, file: !11, line: 99, type: !3, align: 8)
!1525 = !DILocation(line: 99, scope: !1503)
!1526 = !DILocation(line: 975, scope: !1527, inlinedAt: !1525)
!1527 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !205, file: !205, line: 973, scopeLine: 973, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!1528 = !DILocalVariable(name: "ptr", scope: !1503, file: !11, line: 100, type: !29, align: 8)
!1529 = !DILocation(line: 100, scope: !1503)
!1530 = !DILocalVariable(name: "temp", scope: !1503, file: !11, line: 101, type: !41, align: 8)
!1531 = !DILocation(line: 101, scope: !1503)
!1532 = !DILocation(line: 105, scope: !1503)
!1533 = !DILocation(line: 106, scope: !1503)
!1534 = !DILocation(line: 107, scope: !1503)
!1535 = !DILocation(line: 108, scope: !1503)
!1536 = !DILocation(line: 109, scope: !1503)
!1537 = !DILocation(line: 110, scope: !1503)
!1538 = !DILocation(line: 111, scope: !1503)
!1539 = !DILocation(line: 112, scope: !1503)
!1540 = !DILocation(line: 113, scope: !1503)
!1541 = !DILocation(line: 114, scope: !1503)
!1542 = !DILocation(line: 115, scope: !1503)
!1543 = !DILocation(line: 116, scope: !1503)
!1544 = distinct !DISubprogram(name: "reset", linkageName: "std.core.mem.allocator.TempAllocator.reset", scope: !11, file: !11, line: 122, type: !1545, scopeLine: 122, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !95, retainedNodes: !140)
!1545 = !DISubroutineType(types: !1546)
!1546 = !{null, !41}
!1547 = !DILocation(line: 123, scope: !1544)
!1548 = !DILocalVariable(name: "self", arg: 1, scope: !1544, file: !11, line: 122, type: !41)
!1549 = !DILocation(line: 122, scope: !1544)
!1550 = !DILocalVariable(name: "child", scope: !1544, file: !11, line: 124, type: !41, align: 8)
!1551 = !DILocation(line: 124, scope: !1544)
!1552 = !DILocation(line: 125, scope: !1544)
!1553 = !DILocation(line: 126, scope: !1544)
!1554 = !DILocation(line: 126, scope: !1555)
!1555 = distinct !DILexicalBlock(scope: !1544, file: !11, line: 126, column: 2)
!1556 = !DILocalVariable(name: "old", scope: !1557, file: !11, line: 128, type: !41, align: 8)
!1557 = distinct !DILexicalBlock(scope: !1555, file: !11, line: 127, column: 2)
!1558 = !DILocation(line: 128, scope: !1557)
!1559 = !DILocation(line: 129, scope: !1557)
!1560 = !DILocation(line: 130, scope: !1557)
!1561 = !DILocation(line: 132, scope: !1544)
!1562 = !DILocation(line: 136, scope: !1544)
!1563 = distinct !DISubprogram(name: "free", linkageName: "std.core.mem.allocator.TempAllocator.free", scope: !11, file: !11, line: 142, type: !1545, scopeLine: 142, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !95, retainedNodes: !140)
!1564 = !DILocation(line: 143, scope: !1563)
!1565 = !DILocalVariable(name: "self", arg: 1, scope: !1563, file: !11, line: 142, type: !41)
!1566 = !DILocation(line: 142, scope: !1563)
!1567 = !DILocation(line: 140, scope: !1568)
!1568 = distinct !DILexicalBlock(scope: !1563, file: !11, line: 143, column: 1)
!1569 = !DILocation(line: 144, scope: !1563)
!1570 = !DILocation(line: 145, scope: !1563)
!1571 = distinct !DISubprogram(name: "destroy", linkageName: "std.core.mem.allocator.TempAllocator.destroy", scope: !11, file: !11, line: 148, type: !1545, scopeLine: 148, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95, retainedNodes: !140)
!1572 = !DILocation(line: 149, scope: !1571)
!1573 = !DILocalVariable(name: "self", arg: 1, scope: !1571, file: !11, line: 148, type: !41)
!1574 = !DILocation(line: 148, scope: !1571)
!1575 = !DILocalVariable(name: "last_page", scope: !1571, file: !11, line: 150, type: !46, align: 8)
!1576 = !DILocation(line: 150, scope: !1571)
!1577 = !DILocation(line: 151, scope: !1571)
!1578 = !DILocation(line: 151, scope: !1579)
!1579 = distinct !DILexicalBlock(scope: !1571, file: !11, line: 151, column: 2)
!1580 = !DILocalVariable(name: "to_free", scope: !1581, file: !11, line: 153, type: !46, align: 8)
!1581 = distinct !DILexicalBlock(scope: !1579, file: !11, line: 152, column: 2)
!1582 = !DILocation(line: 153, scope: !1581)
!1583 = !DILocation(line: 154, scope: !1581)
!1584 = !DILocation(line: 155, scope: !1581)
!1585 = !DILocation(line: 157, scope: !1571)
!1586 = !DILocation(line: 159, scope: !1587)
!1587 = distinct !DILexicalBlock(scope: !1571, file: !11, line: 158, column: 2)
!1588 = !DILocation(line: 119, scope: !1589, inlinedAt: !1586)
!1589 = distinct !DISubprogram(name: "free", linkageName: "free", scope: !21, file: !21, line: 117, scopeLine: 117, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!1590 = !DILocation(line: 123, scope: !1589, inlinedAt: !1586)
!1591 = !DILocation(line: 160, scope: !1587)
!1592 = !DILocation(line: 164, scope: !1571)
!1593 = distinct !DISubprogram(name: "release", linkageName: "std.core.mem.allocator.TempAllocator.release", scope: !11, file: !11, line: 171, type: !1594, scopeLine: 171, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !95, retainedNodes: !140)
!1594 = !DISubroutineType(types: !1595)
!1595 = !{null, !41, !29, !60}
!1596 = !DILocation(line: 172, scope: !1593)
!1597 = !DILocalVariable(name: "self", arg: 1, scope: !1593, file: !11, line: 171, type: !41)
!1598 = !DILocation(line: 171, scope: !1593)
!1599 = !DILocalVariable(name: "old_pointer", arg: 2, scope: !1593, file: !11, line: 171, type: !29)
!1600 = !DILocalVariable(name: ".anon", arg: 3, scope: !1593, file: !11, line: 171, type: !60)
!1601 = !DILocalVariable(name: "old_size", scope: !1593, file: !11, line: 173, type: !3, align: 8)
!1602 = !DILocation(line: 173, scope: !1593)
!1603 = !DILocation(line: 174, scope: !1593)
!1604 = !DILocation(line: 176, scope: !1605)
!1605 = distinct !DILexicalBlock(scope: !1593, file: !11, line: 175, column: 2)
!1606 = !DILocation(line: 177, scope: !1605)
!1607 = !DILocation(line: 34, scope: !1608, inlinedAt: !1606)
!1608 = distinct !DISubprogram(name: "poison_memory_region", linkageName: "poison_memory_region", scope: !339, file: !339, line: 32, scopeLine: 32, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!1609 = distinct !DISubprogram(name: "_free_page", linkageName: "std.core.mem.allocator.TempAllocator._free_page", scope: !11, file: !11, line: 182, type: !1610, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95, retainedNodes: !140)
!1610 = !DISubroutineType(types: !1611)
!1611 = !{!192, !29, !41, !46}
!1612 = !DILocation(line: 183, scope: !1609)
!1613 = !DILocalVariable(name: "self", arg: 1, scope: !1609, file: !11, line: 182, type: !41)
!1614 = !DILocation(line: 182, scope: !1609)
!1615 = !DILocalVariable(name: "page", arg: 2, scope: !1609, file: !11, line: 182, type: !46)
!1616 = !DILocalVariable(name: "mem", scope: !1609, file: !11, line: 184, type: !29, align: 8)
!1617 = !DILocation(line: 184, scope: !1609)
!1618 = !DILocation(line: 185, scope: !1609)
!1619 = !DILocation(line: 64, scope: !1620, inlinedAt: !1618)
!1620 = distinct !DILexicalBlock(scope: !1621, file: !11, line: 64, column: 51)
!1621 = distinct !DISubprogram(name: "is_aligned", linkageName: "is_aligned", scope: !11, file: !11, line: 64, scopeLine: 64, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!1622 = !DILocation(line: 64, scope: !1621, inlinedAt: !1618)
!1623 = distinct !DISubprogram(name: "_realloc_page", linkageName: "std.core.mem.allocator.TempAllocator._realloc_page", scope: !11, file: !11, line: 188, type: !1624, scopeLine: 188, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95, retainedNodes: !140)
!1624 = !DISubroutineType(types: !1625)
!1625 = !{!192, !194, !41, !46, !4, !4}
!1626 = !DILocation(line: 189, scope: !1623)
!1627 = !DILocalVariable(name: "self", arg: 1, scope: !1623, file: !11, line: 188, type: !41)
!1628 = !DILocation(line: 188, scope: !1623)
!1629 = !DILocalVariable(name: "page", arg: 2, scope: !1623, file: !11, line: 188, type: !46)
!1630 = !DILocalVariable(name: "size", arg: 3, scope: !1623, file: !11, line: 188, type: !3)
!1631 = !DILocalVariable(name: "alignment", arg: 4, scope: !1623, file: !11, line: 188, type: !3)
!1632 = !DILocalVariable(name: "real_pointer", scope: !1623, file: !11, line: 191, type: !29, align: 8)
!1633 = !DILocation(line: 191, scope: !1623)
!1634 = !DILocalVariable(name: "pointer_to_prev", scope: !1623, file: !11, line: 194, type: !1635, align: 8)
!1635 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "TempAllocatorPage**", baseType: !46, size: 64, align: 64, dwarfAddressSpace: 0)
!1636 = !DILocation(line: 194, scope: !1623)
!1637 = !DILocation(line: 196, scope: !1623)
!1638 = !DILocation(line: 196, scope: !1639)
!1639 = distinct !DILexicalBlock(scope: !1623, file: !11, line: 196, column: 2)
!1640 = !DILocation(line: 198, scope: !1641)
!1641 = distinct !DILexicalBlock(scope: !1639, file: !11, line: 197, column: 2)
!1642 = !DILocation(line: 200, scope: !1623)
!1643 = !DILocalVariable(name: "page_size", scope: !1623, file: !11, line: 201, type: !3, align: 8)
!1644 = !DILocation(line: 201, scope: !1623)
!1645 = !DILocation(line: 63, scope: !1646, inlinedAt: !1644)
!1646 = distinct !DILexicalBlock(scope: !1647, file: !11, line: 63, column: 48)
!1647 = distinct !DISubprogram(name: "pagesize", linkageName: "pagesize", scope: !11, file: !11, line: 63, scopeLine: 63, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!1648 = !DILocation(line: 63, scope: !1647, inlinedAt: !1644)
!1649 = !DILocalVariable(name: "data", scope: !1623, file: !11, line: 203, type: !29, align: 8)
!1650 = !DILocation(line: 203, scope: !1623)
!1651 = !DILocation(line: 257, scope: !1623)
!1652 = !DILocation(line: 975, scope: !1653, inlinedAt: !1651)
!1653 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !205, file: !205, line: 973, scopeLine: 973, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!1654 = !DILocation(line: 204, scope: !1623)
!1655 = !DILocation(line: 205, scope: !1623)
!1656 = !DILocation(line: 357, scope: !1657, inlinedAt: !1655)
!1657 = distinct !DILexicalBlock(scope: !1658, file: !220, line: 358, column: 1)
!1658 = distinct !DISubprogram(name: "copy", linkageName: "copy", scope: !220, file: !220, line: 357, scopeLine: 357, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!1659 = !DILocation(line: 354, scope: !1657, inlinedAt: !1655)
!1660 = !DILocation(line: 205, scope: !1657, inlinedAt: !1655)
!1661 = !DILocation(line: 355, scope: !1657, inlinedAt: !1655)
!1662 = !DILocation(line: 359, scope: !1658, inlinedAt: !1655)
!1663 = !DILocation(line: 206, scope: !1623)
!1664 = !DILocation(line: 64, scope: !1665, inlinedAt: !1663)
!1665 = distinct !DILexicalBlock(scope: !1666, file: !11, line: 64, column: 51)
!1666 = distinct !DISubprogram(name: "is_aligned", linkageName: "is_aligned", scope: !11, file: !11, line: 64, scopeLine: 64, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!1667 = !DILocation(line: 64, scope: !1666, inlinedAt: !1663)
!1668 = !DILocation(line: 207, scope: !1623)
!1669 = distinct !DISubprogram(name: "resize", linkageName: "std.core.mem.allocator.TempAllocator.resize", scope: !11, file: !11, line: 210, type: !1670, scopeLine: 210, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !95, retainedNodes: !140)
!1670 = !DISubroutineType(types: !1671)
!1671 = !{!192, !194, !41, !29, !4, !4}
!1672 = !DILocation(line: 211, scope: !1669)
!1673 = !DILocalVariable(name: "self", arg: 1, scope: !1669, file: !11, line: 210, type: !41)
!1674 = !DILocation(line: 210, scope: !1669)
!1675 = !DILocalVariable(name: "pointer", arg: 2, scope: !1669, file: !11, line: 210, type: !29)
!1676 = !DILocalVariable(name: "size", arg: 3, scope: !1669, file: !11, line: 210, type: !3)
!1677 = !DILocalVariable(name: "alignment", arg: 4, scope: !1669, file: !11, line: 210, type: !3)
!1678 = !DILocalVariable(name: "chunk", scope: !1669, file: !11, line: 212, type: !1679, align: 8)
!1679 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "TempAllocatorChunk*", baseType: !1680, size: 64, align: 64, dwarfAddressSpace: 0)
!1680 = !DICompositeType(tag: DW_TAG_structure_type, name: "TempAllocatorChunk", scope: !11, file: !11, line: 46, size: 64, align: 64, elements: !1681, identifier: "std.core.mem.allocator.TempAllocatorChunk.8387")
!1681 = !{!1682, !1683}
!1682 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1680, file: !11, line: 48, baseType: !3, size: 64, align: 64)
!1683 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1680, file: !11, line: 49, baseType: !54, align: 8, offset: 64)
!1684 = !DILocation(line: 212, scope: !1669)
!1685 = !DILocation(line: 213, scope: !1669)
!1686 = !DILocation(line: 215, scope: !1687)
!1687 = distinct !DILexicalBlock(scope: !1669, file: !11, line: 214, column: 2)
!1688 = !DILocalVariable(name: "page", scope: !1687, file: !11, line: 217, type: !46, align: 8)
!1689 = !DILocation(line: 217, scope: !1687)
!1690 = !DILocation(line: 218, scope: !1687)
!1691 = !DILocalVariable(name: "is_realloc_of_last", scope: !1669, file: !11, line: 220, type: !60, align: 1)
!1692 = !DILocation(line: 220, scope: !1669)
!1693 = !DILocation(line: 221, scope: !1669)
!1694 = !DILocalVariable(name: "diff", scope: !1695, file: !11, line: 223, type: !1696, align: 8)
!1695 = distinct !DILexicalBlock(scope: !1669, file: !11, line: 222, column: 2)
!1696 = !DIDerivedType(tag: DW_TAG_typedef, name: "isz", baseType: !193)
!1697 = !DILocation(line: 223, scope: !1695)
!1698 = !DILocation(line: 224, scope: !1695)
!1699 = !DILocation(line: 225, scope: !1695)
!1700 = !DILocation(line: 227, scope: !1701)
!1701 = distinct !DILexicalBlock(scope: !1695, file: !11, line: 226, column: 3)
!1702 = !DILocation(line: 228, scope: !1701)
!1703 = !DILocation(line: 239, scope: !1701)
!1704 = !DILocalVariable(name: "data", scope: !1669, file: !11, line: 242, type: !29, align: 8)
!1705 = !DILocation(line: 242, scope: !1669)
!1706 = !DILocation(line: 257, scope: !1669)
!1707 = !DILocation(line: 975, scope: !1708, inlinedAt: !1706)
!1708 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !205, file: !205, line: 973, scopeLine: 973, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!1709 = !DILocalVariable(name: "len_to_copy", scope: !1669, file: !11, line: 243, type: !3, align: 8)
!1710 = !DILocation(line: 243, scope: !1669)
!1711 = !DILocation(line: 357, scope: !1712, inlinedAt: !1714)
!1712 = distinct !DILexicalBlock(scope: !1713, file: !220, line: 358, column: 1)
!1713 = distinct !DISubprogram(name: "copy", linkageName: "copy", scope: !220, file: !220, line: 357, scopeLine: 357, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!1714 = !DILocation(line: 244, scope: !1669)
!1715 = !DILocation(line: 354, scope: !1712, inlinedAt: !1714)
!1716 = !DILocation(line: 244, scope: !1712, inlinedAt: !1714)
!1717 = !DILocation(line: 355, scope: !1712, inlinedAt: !1714)
!1718 = !DILocation(line: 359, scope: !1713, inlinedAt: !1714)
!1719 = !DILocation(line: 245, scope: !1669)
!1720 = !DILocation(line: 247, scope: !1721)
!1721 = distinct !DILexicalBlock(scope: !1669, file: !11, line: 246, column: 2)
!1722 = !DILocation(line: 248, scope: !1721)
!1723 = !DILocation(line: 252, scope: !1669)
!1724 = distinct !DISubprogram(name: "acquire", linkageName: "std.core.mem.allocator.TempAllocator.acquire", scope: !11, file: !11, line: 260, type: !1725, scopeLine: 260, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !95, retainedNodes: !140)
!1725 = !DISubroutineType(types: !1726)
!1726 = !{!192, !194, !41, !4, !98, !4}
!1727 = !DILocation(line: 261, scope: !1724)
!1728 = !DILocalVariable(name: "self", arg: 1, scope: !1724, file: !11, line: 260, type: !41)
!1729 = !DILocation(line: 260, scope: !1724)
!1730 = !DILocalVariable(name: "size", arg: 2, scope: !1724, file: !11, line: 260, type: !3)
!1731 = !DILocalVariable(name: "init_type", arg: 3, scope: !1724, file: !11, line: 260, type: !98)
!1732 = !DILocalVariable(name: "alignment", arg: 4, scope: !1724, file: !11, line: 260, type: !3)
!1733 = !DILocation(line: 256, scope: !1734)
!1734 = distinct !DILexicalBlock(scope: !1724, file: !11, line: 261, column: 1)
!1735 = !DILocation(line: 257, scope: !1734)
!1736 = !DILocation(line: 975, scope: !1737, inlinedAt: !1735)
!1737 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !205, file: !205, line: 973, scopeLine: 973, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!1738 = !DILocation(line: 258, scope: !1734)
!1739 = !DILocation(line: 262, scope: !1724)
!1740 = !DILocalVariable(name: "start_mem", scope: !1724, file: !11, line: 263, type: !29, align: 8)
!1741 = !DILocation(line: 263, scope: !1724)
!1742 = !DILocalVariable(name: "starting_ptr", scope: !1724, file: !11, line: 264, type: !29, align: 8)
!1743 = !DILocation(line: 264, scope: !1724)
!1744 = !DILocalVariable(name: "aligned_header_start", scope: !1724, file: !11, line: 265, type: !29, align: 8)
!1745 = !DILocation(line: 265, scope: !1724)
!1746 = !DILocation(line: 313, scope: !1747, inlinedAt: !1745)
!1747 = distinct !DISubprogram(name: "aligned_pointer", linkageName: "aligned_pointer", scope: !220, file: !220, line: 311, scopeLine: 311, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!1748 = !DILocation(line: 975, scope: !1749, inlinedAt: !1746)
!1749 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !205, file: !205, line: 973, scopeLine: 973, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!1750 = !DILocalVariable(name: "mem", scope: !1724, file: !11, line: 266, type: !29, align: 8)
!1751 = !DILocation(line: 266, scope: !1724)
!1752 = !DILocation(line: 267, scope: !1724)
!1753 = !DILocation(line: 313, scope: !1754, inlinedAt: !1755)
!1754 = distinct !DISubprogram(name: "aligned_pointer", linkageName: "aligned_pointer", scope: !220, file: !220, line: 311, scopeLine: 311, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!1755 = !DILocation(line: 269, scope: !1756)
!1756 = distinct !DILexicalBlock(scope: !1724, file: !11, line: 268, column: 2)
!1757 = !DILocation(line: 975, scope: !1758, inlinedAt: !1753)
!1758 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !205, file: !205, line: 973, scopeLine: 973, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!1759 = !DILocalVariable(name: "new_usage", scope: !1724, file: !11, line: 271, type: !3, align: 8)
!1760 = !DILocation(line: 271, scope: !1724)
!1761 = !DILocation(line: 274, scope: !1724)
!1762 = !DILocation(line: 276, scope: !1763)
!1763 = distinct !DILexicalBlock(scope: !1724, file: !11, line: 275, column: 2)
!1764 = !DILocalVariable(name: "chunk_start", scope: !1763, file: !11, line: 277, type: !1679, align: 8)
!1765 = !DILocation(line: 277, scope: !1763)
!1766 = !DILocation(line: 278, scope: !1763)
!1767 = !DILocation(line: 279, scope: !1763)
!1768 = !DILocation(line: 280, scope: !1763)
!1769 = !DILocation(line: 336, scope: !1770, inlinedAt: !1768)
!1770 = distinct !DISubprogram(name: "clear", linkageName: "clear", scope: !220, file: !220, line: 334, scopeLine: 334, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!1771 = !DILocation(line: 281, scope: !1763)
!1772 = !DILocalVariable(name: "page", scope: !1724, file: !11, line: 285, type: !46, align: 8)
!1773 = !DILocation(line: 285, scope: !1724)
!1774 = !DILocation(line: 288, scope: !1724)
!1775 = !DILocalVariable(name: "total_alloc_size", scope: !1776, file: !11, line: 291, type: !3, align: 8)
!1776 = distinct !DILexicalBlock(scope: !1724, file: !11, line: 289, column: 2)
!1777 = !DILocation(line: 291, scope: !1776)
!1778 = !DILocation(line: 975, scope: !1779, inlinedAt: !1777)
!1779 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !205, file: !205, line: 973, scopeLine: 973, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!1780 = !DILocation(line: 292, scope: !1776)
!1781 = !DILocation(line: 294, scope: !1782)
!1782 = distinct !DILexicalBlock(scope: !1776, file: !11, line: 293, column: 3)
!1783 = !DILocation(line: 140, scope: !1784, inlinedAt: !1781)
!1784 = distinct !DISubprogram(name: "calloc_aligned", linkageName: "calloc_aligned", scope: !21, file: !21, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!1785 = !DILocation(line: 141, scope: !1784, inlinedAt: !1781)
!1786 = !DILocation(line: 38, scope: !1784, inlinedAt: !1781)
!1787 = !DILocation(line: 975, scope: !1788, inlinedAt: !1786)
!1788 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !205, file: !205, line: 973, scopeLine: 973, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!1789 = !DILocation(line: 298, scope: !1790)
!1790 = distinct !DILexicalBlock(scope: !1776, file: !11, line: 297, column: 3)
!1791 = !DILocation(line: 128, scope: !1792, inlinedAt: !1789)
!1792 = distinct !DISubprogram(name: "malloc_aligned", linkageName: "malloc_aligned", scope: !21, file: !21, line: 126, scopeLine: 126, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!1793 = !DILocation(line: 134, scope: !1792, inlinedAt: !1789)
!1794 = !DILocation(line: 38, scope: !1792, inlinedAt: !1789)
!1795 = !DILocation(line: 975, scope: !1796, inlinedAt: !1794)
!1796 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !205, file: !205, line: 973, scopeLine: 973, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!1797 = !DILocalVariable(name: "start", scope: !1776, file: !11, line: 300, type: !29, align: 8)
!1798 = !DILocation(line: 300, scope: !1776)
!1799 = !DILocation(line: 301, scope: !1776)
!1800 = !DILocation(line: 975, scope: !1801, inlinedAt: !1799)
!1801 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !205, file: !205, line: 973, scopeLine: 973, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!1802 = !DILocation(line: 302, scope: !1776)
!1803 = !DILocation(line: 303, scope: !1776)
!1804 = !DILocation(line: 304, scope: !1776)
!1805 = !DILocalVariable(name: "padded_header_size", scope: !1806, file: !11, line: 309, type: !3, align: 8)
!1806 = distinct !DILexicalBlock(scope: !1724, file: !11, line: 307, column: 2)
!1807 = !DILocation(line: 309, scope: !1806)
!1808 = !DILocation(line: 975, scope: !1809, inlinedAt: !1807)
!1809 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !205, file: !205, line: 973, scopeLine: 973, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!1810 = !DILocalVariable(name: "total_alloc_size", scope: !1806, file: !11, line: 310, type: !3, align: 8)
!1811 = !DILocation(line: 310, scope: !1806)
!1812 = !DILocalVariable(name: "alloc", scope: !1806, file: !11, line: 311, type: !29, align: 8)
!1813 = !DILocation(line: 311, scope: !1806)
!1814 = !DILocation(line: 38, scope: !1806)
!1815 = !DILocation(line: 975, scope: !1816, inlinedAt: !1814)
!1816 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !205, file: !205, line: 973, scopeLine: 973, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!1817 = !DILocation(line: 314, scope: !1806)
!1818 = !DILocation(line: 315, scope: !1806)
!1819 = !DILocation(line: 975, scope: !1820, inlinedAt: !1818)
!1820 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !205, file: !205, line: 973, scopeLine: 973, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!1821 = !DILocation(line: 316, scope: !1806)
!1822 = !DILocation(line: 975, scope: !1823, inlinedAt: !1821)
!1823 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !205, file: !205, line: 973, scopeLine: 973, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!1824 = !DILocation(line: 317, scope: !1806)
!1825 = !DILocation(line: 318, scope: !1806)
!1826 = !DILocation(line: 322, scope: !1724)
!1827 = !DILocation(line: 324, scope: !1724)
!1828 = !DILocation(line: 325, scope: !1724)
!1829 = !DILocation(line: 326, scope: !1724)
!1830 = distinct !DISubprogram(name: "new_temp_allocator", linkageName: "std.core.mem.allocator.new_temp_allocator", scope: !11, file: !11, line: 72, type: !1831, scopeLine: 72, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !95, retainedNodes: !140)
!1831 = !DISubroutineType(types: !1832)
!1832 = !{!192, !1506, !26, !4, !4, !4, !4}
!1833 = !DILocalVariable(name: "allocator", arg: 1, scope: !1830, file: !11, line: 72, type: !26)
!1834 = !DILocation(line: 72, scope: !1830)
!1835 = !DILocalVariable(name: "size", arg: 2, scope: !1830, file: !11, line: 72, type: !3)
!1836 = !DILocalVariable(name: "reserve", arg: 3, scope: !1830, file: !11, line: 72, type: !3)
!1837 = !DILocalVariable(name: "min_size", arg: 4, scope: !1830, file: !11, line: 72, type: !3)
!1838 = !DILocalVariable(name: "realloc_size", arg: 5, scope: !1830, file: !11, line: 72, type: !3)
!1839 = !DILocation(line: 67, scope: !1840)
!1840 = distinct !DILexicalBlock(scope: !1830, file: !11, line: 73, column: 1)
!1841 = !DILocation(line: 68, scope: !1840)
!1842 = !DILocation(line: 69, scope: !1840)
!1843 = !DILocation(line: 70, scope: !1840)
!1844 = !DILocalVariable(name: "temp", scope: !1830, file: !11, line: 74, type: !41, align: 8)
!1845 = !DILocation(line: 74, scope: !1830)
!1846 = !DILocation(line: 254, scope: !1847, inlinedAt: !1845)
!1847 = distinct !DISubprogram(name: "alloc_with_padding", linkageName: "alloc_with_padding", scope: !21, file: !21, line: 252, scopeLine: 252, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!1848 = !DILocation(line: 80, scope: !1849, inlinedAt: !1846)
!1849 = distinct !DISubprogram(name: "malloc_try", linkageName: "malloc_try", scope: !21, file: !21, line: 78, scopeLine: 78, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!1850 = !DILocation(line: 86, scope: !1849, inlinedAt: !1846)
!1851 = !DILocation(line: 38, scope: !1849, inlinedAt: !1846)
!1852 = !DILocation(line: 975, scope: !1853, inlinedAt: !1851)
!1853 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !205, file: !205, line: 973, scopeLine: 973, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!1854 = !DILocation(line: 75, scope: !1830)
!1855 = !DILocation(line: 76, scope: !1830)
!1856 = !DILocation(line: 77, scope: !1830)
!1857 = !DILocation(line: 78, scope: !1830)
!1858 = !DILocation(line: 79, scope: !1830)
!1859 = !DILocation(line: 80, scope: !1830)
!1860 = !DILocation(line: 81, scope: !1830)
!1861 = !DILocation(line: 82, scope: !1830)
!1862 = !DILocation(line: 83, scope: !1830)
!1863 = !DILocation(line: 84, scope: !1830)
!1864 = distinct !DISubprogram(name: "init", linkageName: "std.core.mem.allocator.TrackingAllocator.init", scope: !14, file: !14, line: 38, type: !1865, scopeLine: 38, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !95, retainedNodes: !140)
!1865 = !DISubroutineType(types: !1866)
!1866 = !{null, !1867, !26}
!1867 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "TrackingAllocator*", baseType: !1868, size: 64, align: 64, dwarfAddressSpace: 0)
!1868 = !DICompositeType(tag: DW_TAG_structure_type, name: "TrackingAllocator", scope: !14, file: !14, line: 25, size: 640, align: 64, elements: !1869, identifier: "std.core.mem.allocator.TrackingAllocator")
!1869 = !{!1870, !1871, !1904, !1905}
!1870 = !DIDerivedType(tag: DW_TAG_member, name: "inner_allocator", scope: !1868, file: !14, line: 27, baseType: !26, size: 128, align: 64)
!1871 = !DIDerivedType(tag: DW_TAG_member, name: "map", scope: !1868, file: !14, line: 28, baseType: !1872, size: 384, align: 64, offset: 128)
!1872 = !DIDerivedType(tag: DW_TAG_typedef, name: "AllocMap", scope: !14, file: !14, line: 16, baseType: !1873, align: 8)
!1873 = !DICompositeType(tag: DW_TAG_structure_type, name: "HashMap", scope: !14, file: !14, line: 29, size: 384, align: 64, elements: !1874, identifier: "std_collections_map$ulong$std.core.mem.allocator.Allocation$.HashMap")
!1874 = !{!1875, !1899, !1900, !1901, !1902}
!1875 = !DIDerivedType(tag: DW_TAG_member, name: "table", scope: !1873, file: !14, line: 31, baseType: !1876, size: 128, align: 64)
!1876 = !DICompositeType(tag: DW_TAG_structure_type, name: "Entry*[]", size: 128, align: 64, elements: !1877, identifier: "Entry*[]")
!1877 = !{!1878, !1898}
!1878 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !1876, baseType: !1879, size: 64, align: 64)
!1879 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Entry**", baseType: !1880, size: 64, align: 64, dwarfAddressSpace: 0)
!1880 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Entry*", baseType: !1881, size: 64, align: 64, dwarfAddressSpace: 0)
!1881 = !DICompositeType(tag: DW_TAG_structure_type, name: "Entry", scope: !14, file: !14, line: 21, size: 1344, align: 64, elements: !1882, identifier: "std_collections_map$ulong$std.core.mem.allocator.Allocation$.Entry")
!1882 = !{!1883, !1885, !1887, !1897}
!1883 = !DIDerivedType(tag: DW_TAG_member, name: "hash", scope: !1881, file: !14, line: 23, baseType: !1884, size: 32, align: 32)
!1884 = !DIBasicType(name: "uint", size: 32, encoding: DW_ATE_unsigned)
!1885 = !DIDerivedType(tag: DW_TAG_member, name: "key", scope: !1881, file: !14, line: 24, baseType: !1886, size: 64, align: 64, offset: 64)
!1886 = !DIDerivedType(tag: DW_TAG_typedef, name: "Key", scope: !14, file: !14, line: 16, baseType: !4, align: 8)
!1887 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !1881, file: !14, line: 25, baseType: !1888, size: 1152, align: 64, offset: 128)
!1888 = !DIDerivedType(tag: DW_TAG_typedef, name: "Value", scope: !14, file: !14, line: 16, baseType: !1889, align: 8)
!1889 = !DICompositeType(tag: DW_TAG_structure_type, name: "Allocation", scope: !14, file: !14, line: 9, size: 1152, align: 64, elements: !1890, identifier: "std.core.mem.allocator.Allocation")
!1890 = !{!1891, !1892, !1893}
!1891 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !1889, file: !14, line: 11, baseType: !29, size: 64, align: 64)
!1892 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1889, file: !14, line: 12, baseType: !3, size: 64, align: 64, offset: 64)
!1893 = !DIDerivedType(tag: DW_TAG_member, name: "backtrace", scope: !1889, file: !14, line: 13, baseType: !1894, size: 1024, align: 64, offset: 128)
!1894 = !DICompositeType(tag: DW_TAG_array_type, baseType: !29, size: 1024, align: 64, elements: !1895)
!1895 = !{!1896}
!1896 = !DISubrange(count: 16, lowerBound: 0)
!1897 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1881, file: !14, line: 26, baseType: !1880, size: 64, align: 64, offset: 1280)
!1898 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !1876, baseType: !3, size: 64, align: 64, offset: 64)
!1899 = !DIDerivedType(tag: DW_TAG_member, name: "allocator", scope: !1873, file: !14, line: 32, baseType: !26, size: 128, align: 64, offset: 128)
!1900 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !1873, file: !14, line: 33, baseType: !1884, size: 32, align: 32, offset: 256)
!1901 = !DIDerivedType(tag: DW_TAG_member, name: "threshold", scope: !1873, file: !14, line: 34, baseType: !1884, size: 32, align: 32, offset: 288)
!1902 = !DIDerivedType(tag: DW_TAG_member, name: "load_factor", scope: !1873, file: !14, line: 35, baseType: !1903, size: 32, align: 32, offset: 320)
!1903 = !DIBasicType(name: "float", size: 32, encoding: DW_ATE_float)
!1904 = !DIDerivedType(tag: DW_TAG_member, name: "mem_total", scope: !1868, file: !14, line: 29, baseType: !3, size: 64, align: 64, offset: 512)
!1905 = !DIDerivedType(tag: DW_TAG_member, name: "allocs_total", scope: !1868, file: !14, line: 30, baseType: !3, size: 64, align: 64, offset: 576)
!1906 = !DILocation(line: 39, scope: !1864)
!1907 = !DILocalVariable(name: "self", arg: 1, scope: !1864, file: !14, line: 38, type: !1867)
!1908 = !DILocation(line: 38, scope: !1864)
!1909 = !DILocalVariable(name: "allocator", arg: 2, scope: !1864, file: !14, line: 38, type: !26)
!1910 = !DILocation(line: 40, scope: !1864)
!1911 = !DILocation(line: 41, scope: !1864)
!1912 = !DILocation(line: 43, scope: !1864)
!1913 = distinct !DISubprogram(name: "free", linkageName: "std.core.mem.allocator.TrackingAllocator.free", scope: !14, file: !14, line: 47, type: !1914, scopeLine: 47, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !95, retainedNodes: !140)
!1914 = !DISubroutineType(types: !1915)
!1915 = !{null, !1867}
!1916 = !DILocation(line: 48, scope: !1913)
!1917 = !DILocalVariable(name: "self", arg: 1, scope: !1913, file: !14, line: 47, type: !1867)
!1918 = !DILocation(line: 47, scope: !1913)
!1919 = !DILocation(line: 49, scope: !1913)
!1920 = !DILocation(line: 50, scope: !1913)
!1921 = distinct !DISubprogram(name: "allocated", linkageName: "std.core.mem.allocator.TrackingAllocator.allocated", scope: !14, file: !14, line: 56, type: !1922, scopeLine: 56, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !95, retainedNodes: !140)
!1922 = !DISubroutineType(types: !1923)
!1923 = !{!3, !1867}
!1924 = !DILocation(line: 56, scope: !1921)
!1925 = !DILocalVariable(name: "self", arg: 1, scope: !1921, file: !14, line: 56, type: !1867)
!1926 = !DILocalVariable(name: "state", scope: !1927, file: !14, line: 641, type: !1928, align: 8)
!1927 = distinct !DISubprogram(name: "@pool", linkageName: "@pool", scope: !220, file: !220, line: 639, scopeLine: 639, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95, retainedNodes: !140)
!1928 = !DIDerivedType(tag: DW_TAG_typedef, name: "PoolState", scope: !21, file: !21, line: 403, baseType: !41, align: 8)
!1929 = !DILocation(line: 641, scope: !1927, inlinedAt: !1924)
!1930 = !DILocalVariable(name: "allocated", scope: !1931, file: !14, line: 58, type: !3, align: 8)
!1931 = distinct !DILexicalBlock(scope: !1921, file: !14, line: 57, column: 1)
!1932 = !DILocation(line: 58, scope: !1931)
!1933 = !DILocation(line: 59, scope: !1934)
!1934 = distinct !DILexicalBlock(scope: !1931, file: !14, line: 59, column: 2)
!1935 = !DILocalVariable(name: ".temp", scope: !1934, file: !14, line: 59, type: !3, align: 8)
!1936 = !DILocalVariable(name: "allocation", scope: !1937, file: !14, line: 59, type: !1938, align: 8)
!1937 = distinct !DILexicalBlock(scope: !1934, file: !14, line: 59, column: 45)
!1938 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Allocation*", baseType: !1889, size: 64, align: 64, dwarfAddressSpace: 0)
!1939 = !DILocation(line: 59, scope: !1937)
!1940 = !DILocation(line: 60, scope: !1931)
!1941 = !DILocation(line: 644, scope: !1942, inlinedAt: !1924)
!1942 = distinct !DILexicalBlock(scope: !1927, file: !220, line: 643, column: 2)
!1943 = distinct !DISubprogram(name: "total_allocated", linkageName: "std.core.mem.allocator.TrackingAllocator.total_allocated", scope: !14, file: !14, line: 66, type: !1922, scopeLine: 66, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !95, retainedNodes: !140)
!1944 = !DILocation(line: 66, scope: !1943)
!1945 = !DILocalVariable(name: "self", arg: 1, scope: !1943, file: !14, line: 66, type: !1867)
!1946 = distinct !DISubprogram(name: "total_allocation_count", linkageName: "std.core.mem.allocator.TrackingAllocator.total_allocation_count", scope: !14, file: !14, line: 71, type: !1922, scopeLine: 71, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !95, retainedNodes: !140)
!1947 = !DILocation(line: 71, scope: !1946)
!1948 = !DILocalVariable(name: "self", arg: 1, scope: !1946, file: !14, line: 71, type: !1867)
!1949 = distinct !DISubprogram(name: "allocations_tlist", linkageName: "std.core.mem.allocator.TrackingAllocator.allocations_tlist", scope: !14, file: !14, line: 73, type: !1950, scopeLine: 73, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !95, retainedNodes: !140)
!1950 = !DISubroutineType(types: !1951)
!1951 = !{!1952, !1867, !26}
!1952 = !DICompositeType(tag: DW_TAG_structure_type, name: "Allocation[]", size: 128, align: 64, elements: !1953, identifier: "Allocation[]")
!1953 = !{!1954, !1955}
!1954 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !1952, baseType: !1938, size: 64, align: 64)
!1955 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !1952, baseType: !3, size: 64, align: 64, offset: 64)
!1956 = !DILocation(line: 74, scope: !1949)
!1957 = !DILocalVariable(name: "self", arg: 1, scope: !1949, file: !14, line: 73, type: !1867)
!1958 = !DILocation(line: 73, scope: !1949)
!1959 = !DILocalVariable(name: "allocator", arg: 2, scope: !1949, file: !14, line: 73, type: !26)
!1960 = !DILocation(line: 75, scope: !1949)
!1961 = distinct !DISubprogram(name: "allocation_count", linkageName: "std.core.mem.allocator.TrackingAllocator.allocation_count", scope: !14, file: !14, line: 81, type: !1922, scopeLine: 81, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !95, retainedNodes: !140)
!1962 = !DILocation(line: 81, scope: !1961)
!1963 = !DILocalVariable(name: "self", arg: 1, scope: !1961, file: !14, line: 81, type: !1867)
!1964 = distinct !DISubprogram(name: "acquire", linkageName: "std.core.mem.allocator.TrackingAllocator.acquire", scope: !14, file: !14, line: 83, type: !1965, scopeLine: 83, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !95, retainedNodes: !140)
!1965 = !DISubroutineType(types: !1966)
!1966 = !{!192, !194, !1867, !4, !98, !4}
!1967 = !DILocation(line: 84, scope: !1964)
!1968 = !DILocalVariable(name: "self", arg: 1, scope: !1964, file: !14, line: 83, type: !1867)
!1969 = !DILocation(line: 83, scope: !1964)
!1970 = !DILocalVariable(name: "size", arg: 2, scope: !1964, file: !14, line: 83, type: !3)
!1971 = !DILocalVariable(name: "init_type", arg: 3, scope: !1964, file: !14, line: 83, type: !98)
!1972 = !DILocalVariable(name: "alignment", arg: 4, scope: !1964, file: !14, line: 83, type: !3)
!1973 = !DILocalVariable(name: "data", scope: !1964, file: !14, line: 85, type: !29, align: 8)
!1974 = !DILocation(line: 85, scope: !1964)
!1975 = !DILocation(line: 38, scope: !1964)
!1976 = !DILocation(line: 975, scope: !1977, inlinedAt: !1975)
!1977 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !205, file: !205, line: 973, scopeLine: 973, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!1978 = !DILocation(line: 86, scope: !1964)
!1979 = !DILocalVariable(name: "bt", scope: !1964, file: !14, line: 87, type: !1894, align: 16)
!1980 = !DILocation(line: 87, scope: !1964)
!1981 = !DILocation(line: 88, scope: !1964)
!1982 = !DILocation(line: 89, scope: !1964)
!1983 = !DILocation(line: 90, scope: !1964)
!1984 = !DILocation(line: 91, scope: !1964)
!1985 = distinct !DISubprogram(name: "resize", linkageName: "std.core.mem.allocator.TrackingAllocator.resize", scope: !14, file: !14, line: 94, type: !1986, scopeLine: 94, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !95, retainedNodes: !140)
!1986 = !DISubroutineType(types: !1987)
!1987 = !{!192, !194, !1867, !29, !4, !4}
!1988 = !DILocation(line: 95, scope: !1985)
!1989 = !DILocalVariable(name: "self", arg: 1, scope: !1985, file: !14, line: 94, type: !1867)
!1990 = !DILocation(line: 94, scope: !1985)
!1991 = !DILocalVariable(name: "old_pointer", arg: 2, scope: !1985, file: !14, line: 94, type: !29)
!1992 = !DILocalVariable(name: "size", arg: 3, scope: !1985, file: !14, line: 94, type: !3)
!1993 = !DILocalVariable(name: "alignment", arg: 4, scope: !1985, file: !14, line: 94, type: !3)
!1994 = !DILocalVariable(name: "data", scope: !1985, file: !14, line: 96, type: !29, align: 8)
!1995 = !DILocation(line: 96, scope: !1985)
!1996 = !DILocation(line: 48, scope: !1985)
!1997 = !DILocation(line: 975, scope: !1998, inlinedAt: !1996)
!1998 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !205, file: !205, line: 973, scopeLine: 973, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!1999 = !DILocation(line: 97, scope: !1985)
!2000 = !DILocalVariable(name: "bt", scope: !1985, file: !14, line: 98, type: !1894, align: 16)
!2001 = !DILocation(line: 98, scope: !1985)
!2002 = !DILocation(line: 99, scope: !1985)
!2003 = !DILocation(line: 100, scope: !1985)
!2004 = !DILocation(line: 101, scope: !1985)
!2005 = !DILocation(line: 102, scope: !1985)
!2006 = !DILocation(line: 103, scope: !1985)
!2007 = distinct !DISubprogram(name: "release", linkageName: "std.core.mem.allocator.TrackingAllocator.release", scope: !14, file: !14, line: 106, type: !2008, scopeLine: 106, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !95, retainedNodes: !140)
!2008 = !DISubroutineType(types: !2009)
!2009 = !{null, !1867, !29, !60}
!2010 = !DILocation(line: 107, scope: !2007)
!2011 = !DILocalVariable(name: "self", arg: 1, scope: !2007, file: !14, line: 106, type: !1867)
!2012 = !DILocation(line: 106, scope: !2007)
!2013 = !DILocalVariable(name: "old_pointer", arg: 2, scope: !2007, file: !14, line: 106, type: !29)
!2014 = !DILocalVariable(name: "is_aligned", arg: 3, scope: !2007, file: !14, line: 106, type: !60)
!2015 = !DILocation(line: 108, scope: !2007)
!2016 = !DILocation(line: 110, scope: !2017, inlinedAt: !2018)
!2017 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !1486, file: !1486, line: 229, scopeLine: 229, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!2018 = !DILocation(line: 110, scope: !2019)
!2019 = distinct !DILexicalBlock(scope: !2007, file: !14, line: 109, column: 2)
!2020 = !DILocation(line: 232, scope: !2017, inlinedAt: !2018)
!2021 = !DILocation(line: 112, scope: !2007)
!2022 = distinct !DISubprogram(name: "clear", linkageName: "std.core.mem.allocator.TrackingAllocator.clear", scope: !14, file: !14, line: 115, type: !1914, scopeLine: 115, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !95, retainedNodes: !140)
!2023 = !DILocation(line: 116, scope: !2022)
!2024 = !DILocalVariable(name: "self", arg: 1, scope: !2022, file: !14, line: 115, type: !1867)
!2025 = !DILocation(line: 115, scope: !2022)
!2026 = !DILocation(line: 117, scope: !2022)
!2027 = distinct !DISubprogram(name: "has_leaks", linkageName: "std.core.mem.allocator.TrackingAllocator.has_leaks", scope: !14, file: !14, line: 120, type: !2028, scopeLine: 120, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !95, retainedNodes: !140)
!2028 = !DISubroutineType(types: !2029)
!2029 = !{!60, !1867}
!2030 = !DILocation(line: 121, scope: !2027)
!2031 = !DILocalVariable(name: "self", arg: 1, scope: !2027, file: !14, line: 120, type: !1867)
!2032 = !DILocation(line: 120, scope: !2027)
!2033 = !DILocation(line: 122, scope: !2027)
!2034 = distinct !DISubprogram(name: "print_report", linkageName: "std.core.mem.allocator.TrackingAllocator.print_report", scope: !14, file: !14, line: 125, type: !1914, scopeLine: 125, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !95, retainedNodes: !140)
!2035 = !DILocation(line: 125, scope: !2034)
!2036 = !DILocalVariable(name: "self", arg: 1, scope: !2034, file: !14, line: 125, type: !1867)
!2037 = distinct !DISubprogram(name: "fprint_report", linkageName: "std.core.mem.allocator.TrackingAllocator.fprint_report", scope: !14, file: !14, line: 128, type: !2038, scopeLine: 128, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !95, retainedNodes: !140)
!2038 = !DISubroutineType(types: !2039)
!2039 = !{!192, !29, !1867, !2040}
!2040 = !DICompositeType(tag: DW_TAG_structure_type, name: "OutStream", size: 128, align: 64, elements: !2041, identifier: "OutStream")
!2041 = !{!2042, !2043}
!2042 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !2040, baseType: !29, size: 64, align: 64)
!2043 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !2040, baseType: !31, size: 64, align: 64, offset: 64)
!2044 = !DILocation(line: 128, scope: !2037)
!2045 = !DILocalVariable(name: "self", arg: 1, scope: !2037, file: !14, line: 128, type: !1867)
!2046 = !DILocalVariable(name: "out", arg: 2, scope: !2037, file: !14, line: 128, type: !2040)
!2047 = !DILocalVariable(name: "state", scope: !2048, file: !14, line: 641, type: !1928, align: 8)
!2048 = distinct !DISubprogram(name: "@pool", linkageName: "@pool", scope: !220, file: !220, line: 639, scopeLine: 639, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95, retainedNodes: !140)
!2049 = !DILocation(line: 641, scope: !2048, inlinedAt: !2044)
!2050 = !DILocalVariable(name: "total", scope: !2051, file: !14, line: 130, type: !3, align: 8)
!2051 = distinct !DILexicalBlock(scope: !2037, file: !14, line: 129, column: 1)
!2052 = !DILocation(line: 130, scope: !2051)
!2053 = !DILocalVariable(name: "entries", scope: !2051, file: !14, line: 131, type: !3, align: 8)
!2054 = !DILocation(line: 131, scope: !2051)
!2055 = !DILocalVariable(name: "leaks", scope: !2051, file: !14, line: 132, type: !60, align: 1)
!2056 = !DILocation(line: 132, scope: !2051)
!2057 = !DILocalVariable(name: "allocs", scope: !2051, file: !14, line: 134, type: !1952, align: 8)
!2058 = !DILocation(line: 134, scope: !2051)
!2059 = !DILocation(line: 135, scope: !2051)
!2060 = !DILocation(line: 137, scope: !2061)
!2061 = distinct !DILexicalBlock(scope: !2051, file: !14, line: 136, column: 2)
!2062 = !DILocalVariable(name: "len", scope: !2063, file: !14, line: 215, type: !3, align: 8)
!2063 = distinct !DISubprogram(name: "fprintn", linkageName: "fprintn", scope: !2064, file: !2064, line: 213, scopeLine: 213, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95, retainedNodes: !140)
!2064 = !DIFile(filename: "io.c3", directory: "C:/Compilers/C3/lib/std/io")
!2065 = !DILocation(line: 215, scope: !2063, inlinedAt: !2066)
!2066 = !DILocation(line: 139, scope: !2067)
!2067 = distinct !DILexicalBlock(scope: !2061, file: !14, line: 138, column: 3)
!2068 = !DILocation(line: 159, scope: !2069, inlinedAt: !2065)
!2069 = distinct !DISubprogram(name: "fprint", linkageName: "fprint", scope: !2064, file: !2064, line: 155, scopeLine: 155, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!2070 = !DILocation(line: 216, scope: !2063, inlinedAt: !2066)
!2071 = !DILocation(line: 219, scope: !2063, inlinedAt: !2066)
!2072 = !DILocation(line: 223, scope: !2063, inlinedAt: !2066)
!2073 = !DILocation(line: 644, scope: !2074, inlinedAt: !2044)
!2074 = distinct !DILexicalBlock(scope: !2048, file: !220, line: 643, column: 2)
!2075 = !DILocalVariable(name: "len", scope: !2076, file: !14, line: 215, type: !3, align: 8)
!2076 = distinct !DISubprogram(name: "fprintn", linkageName: "fprintn", scope: !2064, file: !2064, line: 213, scopeLine: 213, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95, retainedNodes: !140)
!2077 = !DILocation(line: 215, scope: !2076, inlinedAt: !2078)
!2078 = !DILocation(line: 140, scope: !2067)
!2079 = !DILocation(line: 159, scope: !2080, inlinedAt: !2077)
!2080 = distinct !DISubprogram(name: "fprint", linkageName: "fprint", scope: !2064, file: !2064, line: 155, scopeLine: 155, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!2081 = !DILocation(line: 216, scope: !2076, inlinedAt: !2078)
!2082 = !DILocation(line: 219, scope: !2076, inlinedAt: !2078)
!2083 = !DILocation(line: 223, scope: !2076, inlinedAt: !2078)
!2084 = !DILocation(line: 644, scope: !2085, inlinedAt: !2044)
!2085 = distinct !DILexicalBlock(scope: !2048, file: !220, line: 643, column: 2)
!2086 = !DILocation(line: 141, scope: !2087)
!2087 = distinct !DILexicalBlock(scope: !2067, file: !14, line: 141, column: 4)
!2088 = !DILocalVariable(name: ".temp", scope: !2087, file: !14, line: 141, type: !3, align: 8)
!2089 = !DILocalVariable(name: "i", scope: !2090, file: !14, line: 141, type: !3, align: 8)
!2090 = distinct !DILexicalBlock(scope: !2087, file: !14, line: 142, column: 4)
!2091 = !DILocation(line: 141, scope: !2090)
!2092 = !DILocalVariable(name: "allocation", scope: !2090, file: !14, line: 141, type: !1938, align: 8)
!2093 = !DILocation(line: 143, scope: !2094)
!2094 = distinct !DILexicalBlock(scope: !2090, file: !14, line: 142, column: 4)
!2095 = !DILocation(line: 144, scope: !2094)
!2096 = !DILocation(line: 145, scope: !2094)
!2097 = !DILocation(line: 644, scope: !2098, inlinedAt: !2044)
!2098 = distinct !DILexicalBlock(scope: !2048, file: !220, line: 643, column: 2)
!2099 = !DILocalVariable(name: "len", scope: !2100, file: !14, line: 215, type: !3, align: 8)
!2100 = distinct !DISubprogram(name: "fprintn", linkageName: "fprintn", scope: !2064, file: !2064, line: 213, scopeLine: 213, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95, retainedNodes: !140)
!2101 = !DILocation(line: 215, scope: !2100, inlinedAt: !2102)
!2102 = !DILocation(line: 147, scope: !2067)
!2103 = !DILocation(line: 159, scope: !2104, inlinedAt: !2101)
!2104 = distinct !DISubprogram(name: "fprint", linkageName: "fprint", scope: !2064, file: !2064, line: 155, scopeLine: 155, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!2105 = !DILocation(line: 216, scope: !2100, inlinedAt: !2102)
!2106 = !DILocation(line: 219, scope: !2100, inlinedAt: !2102)
!2107 = !DILocation(line: 223, scope: !2100, inlinedAt: !2102)
!2108 = !DILocation(line: 644, scope: !2109, inlinedAt: !2044)
!2109 = distinct !DILexicalBlock(scope: !2048, file: !220, line: 643, column: 2)
!2110 = !DILocalVariable(name: "len", scope: !2111, file: !14, line: 215, type: !3, align: 8)
!2111 = distinct !DISubprogram(name: "fprintn", linkageName: "fprintn", scope: !2064, file: !2064, line: 213, scopeLine: 213, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95, retainedNodes: !140)
!2112 = !DILocation(line: 215, scope: !2111, inlinedAt: !2113)
!2113 = !DILocation(line: 152, scope: !2114)
!2114 = distinct !DILexicalBlock(scope: !2061, file: !14, line: 151, column: 3)
!2115 = !DILocation(line: 159, scope: !2116, inlinedAt: !2112)
!2116 = distinct !DISubprogram(name: "fprint", linkageName: "fprint", scope: !2064, file: !2064, line: 155, scopeLine: 155, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!2117 = !DILocation(line: 216, scope: !2111, inlinedAt: !2113)
!2118 = !DILocation(line: 219, scope: !2111, inlinedAt: !2113)
!2119 = !DILocation(line: 223, scope: !2111, inlinedAt: !2113)
!2120 = !DILocation(line: 644, scope: !2121, inlinedAt: !2044)
!2121 = distinct !DILexicalBlock(scope: !2048, file: !220, line: 643, column: 2)
!2122 = !DILocalVariable(name: "len", scope: !2123, file: !14, line: 215, type: !3, align: 8)
!2123 = distinct !DISubprogram(name: "fprintn", linkageName: "fprintn", scope: !2064, file: !2064, line: 213, scopeLine: 213, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95, retainedNodes: !140)
!2124 = !DILocation(line: 215, scope: !2123, inlinedAt: !2125)
!2125 = !DILocation(line: 153, scope: !2114)
!2126 = !DILocation(line: 159, scope: !2127, inlinedAt: !2124)
!2127 = distinct !DISubprogram(name: "fprint", linkageName: "fprint", scope: !2064, file: !2064, line: 155, scopeLine: 155, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!2128 = !DILocation(line: 216, scope: !2123, inlinedAt: !2125)
!2129 = !DILocation(line: 219, scope: !2123, inlinedAt: !2125)
!2130 = !DILocation(line: 223, scope: !2123, inlinedAt: !2125)
!2131 = !DILocation(line: 644, scope: !2132, inlinedAt: !2044)
!2132 = distinct !DILexicalBlock(scope: !2048, file: !220, line: 643, column: 2)
!2133 = !DILocation(line: 154, scope: !2134)
!2134 = distinct !DILexicalBlock(scope: !2114, file: !14, line: 154, column: 4)
!2135 = !DILocalVariable(name: ".temp", scope: !2134, file: !14, line: 154, type: !3, align: 8)
!2136 = !DILocalVariable(name: "i", scope: !2137, file: !14, line: 154, type: !3, align: 8)
!2137 = distinct !DILexicalBlock(scope: !2134, file: !14, line: 155, column: 4)
!2138 = !DILocation(line: 154, scope: !2137)
!2139 = !DILocalVariable(name: "allocation", scope: !2137, file: !14, line: 154, type: !1938, align: 8)
!2140 = !DILocation(line: 156, scope: !2141)
!2141 = distinct !DILexicalBlock(scope: !2137, file: !14, line: 155, column: 4)
!2142 = !DILocation(line: 157, scope: !2141)
!2143 = !DILocalVariable(name: "backtraces", scope: !2141, file: !14, line: 158, type: !2144, align: 8)
!2144 = !DIDerivedType(tag: DW_TAG_typedef, name: "BacktraceList", scope: !14, file: !14, line: 88, baseType: !2145, align: 8)
!2145 = !DICompositeType(tag: DW_TAG_structure_type, name: "List", scope: !14, file: !14, line: 18, size: 320, align: 64, elements: !2146, identifier: "std_collections_list$std.os.backtrace.Backtrace$.List")
!2146 = !{!2147, !2148, !2149, !2150}
!2147 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2145, file: !14, line: 20, baseType: !3, size: 64, align: 64)
!2148 = !DIDerivedType(tag: DW_TAG_member, name: "capacity", scope: !2145, file: !14, line: 21, baseType: !3, size: 64, align: 64, offset: 64)
!2149 = !DIDerivedType(tag: DW_TAG_member, name: "allocator", scope: !2145, file: !14, line: 22, baseType: !26, size: 128, align: 64, offset: 128)
!2150 = !DIDerivedType(tag: DW_TAG_member, name: "entries", scope: !2145, file: !14, line: 23, baseType: !2151, size: 64, align: 64, offset: 256)
!2151 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Type*", baseType: !2152, size: 64, align: 64, dwarfAddressSpace: 0)
!2152 = !DIDerivedType(tag: DW_TAG_typedef, name: "Type", scope: !14, file: !14, line: 88, baseType: !2153, align: 8)
!2153 = !DICompositeType(tag: DW_TAG_structure_type, name: "Backtrace", scope: !14, file: !14, line: 9, size: 704, align: 64, elements: !2154, identifier: "std.os.backtrace.Backtrace")
!2154 = !{!2155, !2156, !2158, !2159, !2160, !2161, !2162}
!2155 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2153, file: !14, line: 11, baseType: !88, size: 64, align: 64)
!2156 = !DIDerivedType(tag: DW_TAG_member, name: "function", scope: !2153, file: !14, line: 12, baseType: !2157, size: 128, align: 64, offset: 64)
!2157 = !DIDerivedType(tag: DW_TAG_typedef, name: "String", baseType: !134)
!2158 = !DIDerivedType(tag: DW_TAG_member, name: "object_file", scope: !2153, file: !14, line: 13, baseType: !2157, size: 128, align: 64, offset: 192)
!2159 = !DIDerivedType(tag: DW_TAG_member, name: "file", scope: !2153, file: !14, line: 14, baseType: !2157, size: 128, align: 64, offset: 320)
!2160 = !DIDerivedType(tag: DW_TAG_member, name: "line", scope: !2153, file: !14, line: 15, baseType: !1884, size: 32, align: 32, offset: 448)
!2161 = !DIDerivedType(tag: DW_TAG_member, name: "allocator", scope: !2153, file: !14, line: 16, baseType: !26, size: 128, align: 64, offset: 512)
!2162 = !DIDerivedType(tag: DW_TAG_member, name: "is_inline", scope: !2153, file: !14, line: 17, baseType: !60, size: 8, align: 8, offset: 640)
!2163 = !DILocation(line: 158, scope: !2141)
!2164 = !DILocalVariable(name: "trace", scope: !2141, file: !14, line: 159, type: !2153, align: 8)
!2165 = !DILocation(line: 159, scope: !2141)
!2166 = !DILocation(line: 160, scope: !2141)
!2167 = !DILocalVariable(name: "self", scope: !2168, file: !14, line: 162, type: !2169, align: 8)
!2168 = distinct !DILexicalBlock(scope: !2141, file: !14, line: 161, column: 5)
!2169 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "List*", baseType: !2145, size: 64, align: 64, dwarfAddressSpace: 0)
!2170 = !DILocation(line: 162, scope: !2168)
!2171 = !DILocation(line: 276, scope: !2168)
!2172 = !DILocation(line: 164, scope: !2141)
!2173 = !DILocation(line: 165, scope: !2141)
!2174 = !DILocation(line: 166, scope: !2141)
!2175 = !DILocation(line: 167, scope: !2141)
!2176 = !DILocation(line: 644, scope: !2177, inlinedAt: !2044)
!2177 = distinct !DILexicalBlock(scope: !2048, file: !220, line: 643, column: 2)
!2178 = !DILocalVariable(name: "len", scope: !2179, file: !14, line: 215, type: !3, align: 8)
!2179 = distinct !DISubprogram(name: "fprintn", linkageName: "fprintn", scope: !2064, file: !2064, line: 213, scopeLine: 213, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95, retainedNodes: !140)
!2180 = !DILocation(line: 215, scope: !2179, inlinedAt: !2181)
!2181 = !DILocation(line: 169, scope: !2114)
!2182 = !DILocation(line: 159, scope: !2183, inlinedAt: !2180)
!2183 = distinct !DISubprogram(name: "fprint", linkageName: "fprint", scope: !2064, file: !2064, line: 155, scopeLine: 155, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!2184 = !DILocation(line: 216, scope: !2179, inlinedAt: !2181)
!2185 = !DILocation(line: 219, scope: !2179, inlinedAt: !2181)
!2186 = !DILocation(line: 223, scope: !2179, inlinedAt: !2181)
!2187 = !DILocation(line: 644, scope: !2188, inlinedAt: !2044)
!2188 = distinct !DILexicalBlock(scope: !2048, file: !220, line: 643, column: 2)
!2189 = !DILocalVariable(name: "len", scope: !2190, file: !14, line: 215, type: !3, align: 8)
!2190 = distinct !DISubprogram(name: "fprintn", linkageName: "fprintn", scope: !2064, file: !2064, line: 213, scopeLine: 213, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95, retainedNodes: !140)
!2191 = !DILocation(line: 215, scope: !2190, inlinedAt: !2192)
!2192 = !DILocation(line: 174, scope: !2193)
!2193 = distinct !DILexicalBlock(scope: !2051, file: !14, line: 173, column: 2)
!2194 = !DILocation(line: 159, scope: !2195, inlinedAt: !2191)
!2195 = distinct !DISubprogram(name: "fprint", linkageName: "fprint", scope: !2064, file: !2064, line: 155, scopeLine: 155, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!2196 = !DILocation(line: 216, scope: !2190, inlinedAt: !2192)
!2197 = !DILocation(line: 219, scope: !2190, inlinedAt: !2192)
!2198 = !DILocation(line: 223, scope: !2190, inlinedAt: !2192)
!2199 = !DILocation(line: 644, scope: !2200, inlinedAt: !2044)
!2200 = distinct !DILexicalBlock(scope: !2048, file: !220, line: 643, column: 2)
!2201 = !DILocation(line: 176, scope: !2051)
!2202 = !DILocation(line: 644, scope: !2203, inlinedAt: !2044)
!2203 = distinct !DILexicalBlock(scope: !2048, file: !220, line: 643, column: 2)
!2204 = !DILocation(line: 177, scope: !2051)
!2205 = !DILocation(line: 644, scope: !2206, inlinedAt: !2044)
!2206 = distinct !DILexicalBlock(scope: !2048, file: !220, line: 643, column: 2)
!2207 = !DILocation(line: 178, scope: !2051)
!2208 = !DILocation(line: 644, scope: !2209, inlinedAt: !2044)
!2209 = distinct !DILexicalBlock(scope: !2048, file: !220, line: 643, column: 2)
!2210 = !DILocation(line: 179, scope: !2051)
!2211 = !DILocation(line: 644, scope: !2212, inlinedAt: !2044)
!2212 = distinct !DILexicalBlock(scope: !2048, file: !220, line: 643, column: 2)
!2213 = !DILocation(line: 180, scope: !2051)
!2214 = !DILocalVariable(name: "len", scope: !2215, file: !14, line: 215, type: !3, align: 8)
!2215 = distinct !DISubprogram(name: "fprintn", linkageName: "fprintn", scope: !2064, file: !2064, line: 213, scopeLine: 213, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95, retainedNodes: !140)
!2216 = !DILocation(line: 215, scope: !2215, inlinedAt: !2217)
!2217 = !DILocation(line: 182, scope: !2218)
!2218 = distinct !DILexicalBlock(scope: !2051, file: !14, line: 181, column: 2)
!2219 = !DILocation(line: 159, scope: !2220, inlinedAt: !2216)
!2220 = distinct !DISubprogram(name: "fprint", linkageName: "fprint", scope: !2064, file: !2064, line: 155, scopeLine: 155, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!2221 = !DILocation(line: 216, scope: !2215, inlinedAt: !2217)
!2222 = !DILocation(line: 219, scope: !2215, inlinedAt: !2217)
!2223 = !DILocation(line: 223, scope: !2215, inlinedAt: !2217)
!2224 = !DILocation(line: 644, scope: !2225, inlinedAt: !2044)
!2225 = distinct !DILexicalBlock(scope: !2048, file: !220, line: 643, column: 2)
!2226 = !DILocalVariable(name: "len", scope: !2227, file: !14, line: 215, type: !3, align: 8)
!2227 = distinct !DISubprogram(name: "fprintn", linkageName: "fprintn", scope: !2064, file: !2064, line: 213, scopeLine: 213, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95, retainedNodes: !140)
!2228 = !DILocation(line: 215, scope: !2227, inlinedAt: !2229)
!2229 = !DILocation(line: 183, scope: !2218)
!2230 = !DILocation(line: 159, scope: !2231, inlinedAt: !2228)
!2231 = distinct !DISubprogram(name: "fprint", linkageName: "fprint", scope: !2064, file: !2064, line: 155, scopeLine: 155, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!2232 = !DILocation(line: 216, scope: !2227, inlinedAt: !2229)
!2233 = !DILocation(line: 219, scope: !2227, inlinedAt: !2229)
!2234 = !DILocation(line: 223, scope: !2227, inlinedAt: !2229)
!2235 = !DILocation(line: 644, scope: !2236, inlinedAt: !2044)
!2236 = distinct !DILexicalBlock(scope: !2048, file: !220, line: 643, column: 2)
!2237 = !DILocation(line: 184, scope: !2238)
!2238 = distinct !DILexicalBlock(scope: !2218, file: !14, line: 184, column: 3)
!2239 = !DILocalVariable(name: ".temp", scope: !2238, file: !14, line: 184, type: !3, align: 8)
!2240 = !DILocalVariable(name: "i", scope: !2241, file: !14, line: 184, type: !3, align: 8)
!2241 = distinct !DILexicalBlock(scope: !2238, file: !14, line: 185, column: 3)
!2242 = !DILocation(line: 184, scope: !2241)
!2243 = !DILocalVariable(name: "allocation", scope: !2241, file: !14, line: 184, type: !1938, align: 8)
!2244 = !DILocation(line: 186, scope: !2245)
!2245 = distinct !DILexicalBlock(scope: !2241, file: !14, line: 185, column: 3)
!2246 = !DILocation(line: 188, scope: !2247)
!2247 = distinct !DILexicalBlock(scope: !2245, file: !14, line: 187, column: 4)
!2248 = !DILocation(line: 644, scope: !2249, inlinedAt: !2044)
!2249 = distinct !DILexicalBlock(scope: !2048, file: !220, line: 643, column: 2)
!2250 = !DILocation(line: 189, scope: !2247)
!2251 = !DILocalVariable(name: "backtraces", scope: !2245, file: !14, line: 191, type: !2144, align: 8)
!2252 = !DILocation(line: 191, scope: !2245)
!2253 = !DILocalVariable(name: "end", scope: !2245, file: !14, line: 192, type: !3, align: 8)
!2254 = !DILocation(line: 192, scope: !2245)
!2255 = !DILocation(line: 193, scope: !2256)
!2256 = distinct !DILexicalBlock(scope: !2245, file: !14, line: 193, column: 4)
!2257 = !DILocalVariable(name: ".temp", scope: !2256, file: !14, line: 193, type: !3, align: 8)
!2258 = !DILocalVariable(name: "j", scope: !2259, file: !14, line: 193, type: !3, align: 8)
!2259 = distinct !DILexicalBlock(scope: !2256, file: !14, line: 194, column: 4)
!2260 = !DILocation(line: 193, scope: !2259)
!2261 = !DILocalVariable(name: "val", scope: !2259, file: !14, line: 193, type: !29, align: 8)
!2262 = !DILocation(line: 195, scope: !2263)
!2263 = distinct !DILexicalBlock(scope: !2259, file: !14, line: 194, column: 4)
!2264 = !DILocation(line: 197, scope: !2265)
!2265 = distinct !DILexicalBlock(scope: !2263, file: !14, line: 196, column: 5)
!2266 = !DILocation(line: 198, scope: !2265)
!2267 = !DILocalVariable(name: "list", scope: !2245, file: !14, line: 201, type: !2144, align: 8)
!2268 = !DILocation(line: 201, scope: !2245)
!2269 = !DILocation(line: 644, scope: !2270, inlinedAt: !2044)
!2270 = distinct !DILexicalBlock(scope: !2048, file: !220, line: 643, column: 2)
!2271 = !DILocation(line: 202, scope: !2245)
!2272 = !DILocation(line: 644, scope: !2273, inlinedAt: !2044)
!2273 = distinct !DILexicalBlock(scope: !2048, file: !220, line: 643, column: 2)
!2274 = !DILocation(line: 203, scope: !2275)
!2275 = distinct !DILexicalBlock(scope: !2245, file: !14, line: 203, column: 4)
!2276 = !DILocalVariable(name: ".temp", scope: !2275, file: !14, line: 203, type: !3, align: 8)
!2277 = !DILocalVariable(name: "trace", scope: !2278, file: !14, line: 203, type: !2152, align: 8)
!2278 = distinct !DILexicalBlock(scope: !2275, file: !14, line: 204, column: 4)
!2279 = !DILocation(line: 203, scope: !2278)
!2280 = !DILocation(line: 378, scope: !2281, inlinedAt: !2279)
!2281 = distinct !DILexicalBlock(scope: !2283, file: !2282, line: 379, column: 1)
!2282 = !DIFile(filename: "list.c3", directory: "C:/Compilers/C3/lib/std/collections")
!2283 = distinct !DISubprogram(name: "@item_at", linkageName: "@item_at", scope: !2282, file: !2282, line: 378, scopeLine: 378, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!2284 = !DILocation(line: 376, scope: !2281, inlinedAt: !2279)
!2285 = !DILocation(line: 203, scope: !2281, inlinedAt: !2279)
!2286 = !DILocation(line: 380, scope: !2283, inlinedAt: !2279)
!2287 = !DILocation(line: 205, scope: !2288)
!2288 = distinct !DILexicalBlock(scope: !2278, file: !14, line: 204, column: 4)
!2289 = !DILocation(line: 207, scope: !2290)
!2290 = distinct !DILexicalBlock(scope: !2288, file: !14, line: 206, column: 5)
!2291 = !DILocation(line: 208, scope: !2290)
!2292 = !DILocation(line: 210, scope: !2288)
!2293 = !DILocation(line: 212, scope: !2294)
!2294 = distinct !DILexicalBlock(scope: !2288, file: !14, line: 211, column: 5)
!2295 = !DILocation(line: 213, scope: !2294)
!2296 = !DILocation(line: 215, scope: !2288)
!2297 = !DILocation(line: 644, scope: !2298, inlinedAt: !2044)
!2298 = distinct !DILexicalBlock(scope: !2048, file: !220, line: 643, column: 2)
!2299 = distinct !DISubprogram(name: "init", linkageName: "std.core.mem.allocator.Vmem.init", scope: !18, file: !18, line: 38, type: !2300, scopeLine: 38, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !95, retainedNodes: !140)
!2300 = !DISubroutineType(types: !2301)
!2301 = !{!192, !29, !2302, !4, !4, !15, !4}
!2302 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Vmem*", baseType: !104, size: 64, align: 64, dwarfAddressSpace: 0)
!2303 = !DILocation(line: 39, scope: !2299)
!2304 = !DILocalVariable(name: "self", arg: 1, scope: !2299, file: !18, line: 38, type: !2302)
!2305 = !DILocation(line: 38, scope: !2299)
!2306 = !DILocalVariable(name: "preferred_size", arg: 2, scope: !2299, file: !18, line: 38, type: !3)
!2307 = !DILocalVariable(name: "reserve_page_size", arg: 3, scope: !2299, file: !18, line: 38, type: !3)
!2308 = !DILocalVariable(name: "options", arg: 4, scope: !2299, file: !18, line: 38, type: !15)
!2309 = !DILocalVariable(name: "min_size", arg: 5, scope: !2299, file: !18, line: 38, type: !3)
!2310 = !DILocation(line: 33, scope: !2311)
!2311 = distinct !DILexicalBlock(scope: !2299, file: !18, line: 39, column: 1)
!2312 = !DILocation(line: 975, scope: !2313, inlinedAt: !2310)
!2313 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !205, file: !205, line: 973, scopeLine: 973, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!2314 = !DILocation(line: 34, scope: !2311)
!2315 = !DILocation(line: 35, scope: !2311)
!2316 = !DILocation(line: 41, scope: !2299)
!2317 = !DILocation(line: 42, scope: !2299)
!2318 = !DILocation(line: 43, scope: !2299)
!2319 = !DILocation(line: 975, scope: !2320, inlinedAt: !2318)
!2320 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !205, file: !205, line: 973, scopeLine: 973, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!2321 = !DILocation(line: 44, scope: !2299)
!2322 = !DILocation(line: 47, scope: !2323, inlinedAt: !2324)
!2323 = distinct !DISubprogram(name: "greater", linkageName: "greater", scope: !784, file: !784, line: 39, scopeLine: 39, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!2324 = !DILocation(line: 116, scope: !2325, inlinedAt: !2321)
!2325 = distinct !DISubprogram(name: "max", linkageName: "max", scope: !784, file: !784, line: 113, scopeLine: 113, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!2326 = !DILocalVariable(name: "memory", scope: !2299, file: !18, line: 45, type: !103, align: 8)
!2327 = !DILocation(line: 45, scope: !2299)
!2328 = !DILocation(line: 46, scope: !2299)
!2329 = !DILocation(line: 46, scope: !2330)
!2330 = distinct !DILexicalBlock(scope: !2299, file: !18, line: 46, column: 2)
!2331 = !DILocation(line: 48, scope: !2332)
!2332 = distinct !DILexicalBlock(scope: !2330, file: !18, line: 47, column: 2)
!2333 = !DILocation(line: 50, scope: !2332)
!2334 = !DILocalVariable(name: "f", scope: !2335, file: !18, line: 422, type: !192, align: 8)
!2335 = distinct !DISubprogram(name: "@catch", linkageName: "@catch", scope: !1486, file: !1486, line: 420, scopeLine: 420, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95, retainedNodes: !140)
!2336 = !DILocation(line: 422, scope: !2335, inlinedAt: !2337)
!2337 = !DILocation(line: 51, scope: !2338)
!2338 = distinct !DILexicalBlock(scope: !2332, file: !18, line: 51, column: 3)
!2339 = !DILocation(line: 423, scope: !2335, inlinedAt: !2337)
!2340 = !DILocation(line: 53, scope: !2338)
!2341 = !DILocation(line: 54, scope: !2338)
!2342 = !DILocation(line: 56, scope: !2343)
!2343 = distinct !DILexicalBlock(scope: !2338, file: !18, line: 56, column: 5)
!2344 = !DILocation(line: 57, scope: !2343)
!2345 = !DILocation(line: 59, scope: !2346)
!2346 = distinct !DILexicalBlock(scope: !2338, file: !18, line: 59, column: 5)
!2347 = !DILocation(line: 62, scope: !2299)
!2348 = !DILocation(line: 63, scope: !2299)
!2349 = !DILocation(line: 67, scope: !2299)
!2350 = !DILocation(line: 68, scope: !2299)
!2351 = !DILocation(line: 69, scope: !2299)
!2352 = !DILocation(line: 142, scope: !2353, inlinedAt: !2355)
!2353 = distinct !DISubprogram(name: "ctz", linkageName: "ctz", scope: !2354, file: !2354, line: 142, scopeLine: 142, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!2354 = !DIFile(filename: "bits.c3", directory: "C:/Compilers/C3/lib/std")
!2355 = !DILocation(line: 70, scope: !2299)
!2356 = !DILocation(line: 71, scope: !2299)
!2357 = distinct !DISubprogram(name: "acquire", linkageName: "std.core.mem.allocator.Vmem.acquire", scope: !18, file: !18, line: 83, type: !2358, scopeLine: 83, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !95, retainedNodes: !140)
!2358 = !DISubroutineType(types: !2359)
!2359 = !{!192, !194, !2302, !4, !98, !4}
!2360 = !DILocation(line: 84, scope: !2357)
!2361 = !DILocalVariable(name: "self", arg: 1, scope: !2357, file: !18, line: 83, type: !2302)
!2362 = !DILocation(line: 83, scope: !2357)
!2363 = !DILocalVariable(name: "size", arg: 2, scope: !2357, file: !18, line: 83, type: !3)
!2364 = !DILocalVariable(name: "init_type", arg: 3, scope: !2357, file: !18, line: 83, type: !98)
!2365 = !DILocalVariable(name: "alignment", arg: 4, scope: !2357, file: !18, line: 83, type: !3)
!2366 = !DILocation(line: 78, scope: !2367)
!2367 = distinct !DILexicalBlock(scope: !2357, file: !18, line: 84, column: 1)
!2368 = !DILocation(line: 975, scope: !2369, inlinedAt: !2366)
!2369 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !205, file: !205, line: 973, scopeLine: 973, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!2370 = !DILocation(line: 79, scope: !2367)
!2371 = !DILocation(line: 80, scope: !2367)
!2372 = !DILocation(line: 85, scope: !2357)
!2373 = !DILocalVariable(name: "total_len", scope: !2357, file: !18, line: 86, type: !3, align: 8)
!2374 = !DILocation(line: 86, scope: !2357)
!2375 = !DILocation(line: 87, scope: !2357)
!2376 = !DILocalVariable(name: "start_mem", scope: !2357, file: !18, line: 88, type: !29, align: 8)
!2377 = !DILocation(line: 88, scope: !2357)
!2378 = !DILocalVariable(name: "unaligned_pointer_to_offset", scope: !2357, file: !18, line: 89, type: !29, align: 8)
!2379 = !DILocation(line: 89, scope: !2357)
!2380 = !DILocalVariable(name: "mem", scope: !2357, file: !18, line: 90, type: !29, align: 8)
!2381 = !DILocation(line: 90, scope: !2357)
!2382 = !DILocation(line: 313, scope: !2383, inlinedAt: !2381)
!2383 = distinct !DISubprogram(name: "aligned_pointer", linkageName: "aligned_pointer", scope: !220, file: !220, line: 311, scopeLine: 311, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!2384 = !DILocation(line: 975, scope: !2385, inlinedAt: !2382)
!2385 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !205, file: !205, line: 973, scopeLine: 973, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!2386 = !DILocalVariable(name: "after", scope: !2357, file: !18, line: 91, type: !3, align: 8)
!2387 = !DILocation(line: 91, scope: !2357)
!2388 = !DILocation(line: 92, scope: !2357)
!2389 = !DILocation(line: 93, scope: !2357)
!2390 = !DILocation(line: 95, scope: !2391)
!2391 = distinct !DILexicalBlock(scope: !2357, file: !18, line: 94, column: 2)
!2392 = !DILocalVariable(name: "shift", scope: !2393, file: !18, line: 209, type: !3, align: 8)
!2393 = distinct !DISubprogram(name: "protect", linkageName: "protect", scope: !18, file: !18, line: 207, scopeLine: 207, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95, retainedNodes: !140)
!2394 = !DILocation(line: 209, scope: !2393, inlinedAt: !2395)
!2395 = !DILocation(line: 97, scope: !2357)
!2396 = !DILocalVariable(name: "page_after", scope: !2393, file: !18, line: 210, type: !3, align: 8)
!2397 = !DILocation(line: 210, scope: !2393, inlinedAt: !2395)
!2398 = !DILocalVariable(name: "last_page", scope: !2393, file: !18, line: 211, type: !3, align: 8)
!2399 = !DILocation(line: 211, scope: !2393, inlinedAt: !2395)
!2400 = !DILocalVariable(name: "over_high_water", scope: !2393, file: !18, line: 212, type: !60, align: 1)
!2401 = !DILocation(line: 212, scope: !2393, inlinedAt: !2395)
!2402 = !DILocation(line: 213, scope: !2393, inlinedAt: !2395)
!2403 = !DILocalVariable(name: "page_start", scope: !2404, file: !18, line: 215, type: !3, align: 8)
!2404 = distinct !DILexicalBlock(scope: !2393, file: !18, line: 214, column: 2)
!2405 = !DILocation(line: 215, scope: !2404, inlinedAt: !2395)
!2406 = !DILocalVariable(name: "page_len", scope: !2404, file: !18, line: 216, type: !3, align: 8)
!2407 = !DILocation(line: 216, scope: !2404, inlinedAt: !2395)
!2408 = !DILocation(line: 217, scope: !2404, inlinedAt: !2395)
!2409 = !DILocation(line: 241, scope: !2410, inlinedAt: !2408)
!2410 = distinct !DILexicalBlock(scope: !2412, file: !2411, line: 248, column: 1)
!2411 = !DIFile(filename: "mem_vm.c3", directory: "C:/Compilers/C3/lib/std/core/os")
!2412 = distinct !DISubprogram(name: "commit", linkageName: "commit", scope: !2411, file: !2411, line: 247, scopeLine: 247, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!2413 = !DILocation(line: 217, scope: !2410, inlinedAt: !2408)
!2414 = !DILocation(line: 242, scope: !2410, inlinedAt: !2408)
!2415 = !DILocation(line: 243, scope: !2410, inlinedAt: !2408)
!2416 = !DILocation(line: 244, scope: !2410, inlinedAt: !2408)
!2417 = !DILocation(line: 249, scope: !2412, inlinedAt: !2408)
!2418 = !DILocation(line: 155, scope: !2412, inlinedAt: !2408)
!2419 = !DILocation(line: 218, scope: !2404, inlinedAt: !2395)
!2420 = !DILocation(line: 220, scope: !2421, inlinedAt: !2395)
!2421 = distinct !DILexicalBlock(scope: !2404, file: !18, line: 219, column: 3)
!2422 = !DILocation(line: 257, scope: !2423, inlinedAt: !2420)
!2423 = distinct !DILexicalBlock(scope: !2424, file: !2411, line: 264, column: 1)
!2424 = distinct !DISubprogram(name: "protect", linkageName: "protect", scope: !2411, file: !2411, line: 263, scopeLine: 263, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!2425 = !DILocation(line: 220, scope: !2423, inlinedAt: !2420)
!2426 = !DILocation(line: 258, scope: !2423, inlinedAt: !2420)
!2427 = !DILocation(line: 259, scope: !2423, inlinedAt: !2420)
!2428 = !DILocation(line: 260, scope: !2423, inlinedAt: !2420)
!2429 = !DILocation(line: 265, scope: !2424, inlinedAt: !2420)
!2430 = !DILocation(line: 117, scope: !2424, inlinedAt: !2420)
!2431 = !DILocation(line: 222, scope: !2404, inlinedAt: !2395)
!2432 = !DILocation(line: 227, scope: !2393, inlinedAt: !2395)
!2433 = !DILocation(line: 228, scope: !2393, inlinedAt: !2395)
!2434 = !DILocalVariable(name: "header", scope: !2357, file: !18, line: 98, type: !2435, align: 8)
!2435 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "VmemHeader*", baseType: !2436, size: 64, align: 64, dwarfAddressSpace: 0)
!2436 = !DICompositeType(tag: DW_TAG_structure_type, name: "VmemHeader", scope: !18, file: !18, line: 201, size: 64, align: 64, elements: !2437, identifier: "std.core.mem.allocator.VmemHeader.8651")
!2437 = !{!2438, !2439}
!2438 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2436, file: !18, line: 203, baseType: !3, size: 64, align: 64)
!2439 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !2436, file: !18, line: 204, baseType: !54, align: 8, offset: 64)
!2440 = !DILocation(line: 98, scope: !2357)
!2441 = !DILocation(line: 99, scope: !2357)
!2442 = !DILocation(line: 100, scope: !2357)
!2443 = !DILocation(line: 336, scope: !2444, inlinedAt: !2442)
!2444 = distinct !DISubprogram(name: "clear", linkageName: "clear", scope: !220, file: !220, line: 334, scopeLine: 334, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!2445 = !DILocation(line: 101, scope: !2357)
!2446 = distinct !DISubprogram(name: "owns_pointer", linkageName: "std.core.mem.allocator.Vmem.owns_pointer", scope: !18, file: !18, line: 104, type: !2447, scopeLine: 104, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !95, retainedNodes: !140)
!2447 = !DISubroutineType(types: !2448)
!2448 = !{!60, !2302, !29}
!2449 = !DILocation(line: 105, scope: !2446)
!2450 = !DILocalVariable(name: "self", arg: 1, scope: !2446, file: !18, line: 104, type: !2302)
!2451 = !DILocation(line: 104, scope: !2446)
!2452 = !DILocalVariable(name: "ptr", arg: 2, scope: !2446, file: !18, line: 104, type: !29)
!2453 = !DILocation(line: 106, scope: !2446)
!2454 = distinct !DISubprogram(name: "resize", linkageName: "std.core.mem.allocator.Vmem.resize", scope: !18, file: !18, line: 117, type: !2455, scopeLine: 117, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !95, retainedNodes: !140)
!2455 = !DISubroutineType(types: !2456)
!2456 = !{!192, !194, !2302, !29, !4, !4}
!2457 = !DILocation(line: 118, scope: !2454)
!2458 = !DILocalVariable(name: "self", arg: 1, scope: !2454, file: !18, line: 117, type: !2302)
!2459 = !DILocation(line: 117, scope: !2454)
!2460 = !DILocalVariable(name: "old_pointer", arg: 2, scope: !2454, file: !18, line: 117, type: !29)
!2461 = !DILocalVariable(name: "size", arg: 3, scope: !2454, file: !18, line: 117, type: !3)
!2462 = !DILocalVariable(name: "alignment", arg: 4, scope: !2454, file: !18, line: 117, type: !3)
!2463 = !DILocation(line: 111, scope: !2464)
!2464 = distinct !DILexicalBlock(scope: !2454, file: !18, line: 118, column: 1)
!2465 = !DILocation(line: 975, scope: !2466, inlinedAt: !2463)
!2466 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !205, file: !205, line: 973, scopeLine: 973, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!2467 = !DILocation(line: 112, scope: !2464)
!2468 = !DILocation(line: 113, scope: !2464)
!2469 = !DILocation(line: 114, scope: !2464)
!2470 = !DILocation(line: 119, scope: !2454)
!2471 = !DILocation(line: 120, scope: !2454)
!2472 = !DILocation(line: 121, scope: !2454)
!2473 = !DILocalVariable(name: "header", scope: !2454, file: !18, line: 122, type: !2435, align: 8)
!2474 = !DILocation(line: 122, scope: !2454)
!2475 = !DILocalVariable(name: "old_size", scope: !2454, file: !18, line: 123, type: !3, align: 8)
!2476 = !DILocation(line: 123, scope: !2454)
!2477 = !DILocation(line: 124, scope: !2454)
!2478 = !DILocation(line: 126, scope: !2454)
!2479 = !DILocation(line: 975, scope: !2480, inlinedAt: !2478)
!2480 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !205, file: !205, line: 973, scopeLine: 973, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!2481 = !DILocation(line: 128, scope: !2482)
!2482 = distinct !DILexicalBlock(scope: !2454, file: !18, line: 127, column: 5)
!2483 = !DILocation(line: 130, scope: !2484)
!2484 = distinct !DILexicalBlock(scope: !2482, file: !18, line: 129, column: 6)
!2485 = !DILocalVariable(name: "shift", scope: !2486, file: !18, line: 233, type: !3, align: 8)
!2486 = distinct !DISubprogram(name: "unprotect", linkageName: "unprotect", scope: !18, file: !18, line: 231, scopeLine: 231, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95, retainedNodes: !140)
!2487 = !DILocation(line: 233, scope: !2486, inlinedAt: !2483)
!2488 = !DILocalVariable(name: "last_page", scope: !2486, file: !18, line: 234, type: !3, align: 8)
!2489 = !DILocation(line: 234, scope: !2486, inlinedAt: !2483)
!2490 = !DILocalVariable(name: "page_after", scope: !2486, file: !18, line: 235, type: !3, align: 8)
!2491 = !DILocation(line: 235, scope: !2486, inlinedAt: !2483)
!2492 = !DILocation(line: 239, scope: !2486, inlinedAt: !2483)
!2493 = !DILocation(line: 241, scope: !2494, inlinedAt: !2483)
!2494 = distinct !DILexicalBlock(scope: !2486, file: !18, line: 240, column: 3)
!2495 = !DILocation(line: 409, scope: !2496, inlinedAt: !2493)
!2496 = distinct !DILexicalBlock(scope: !2497, file: !220, line: 410, column: 1)
!2497 = distinct !DISubprogram(name: "set", linkageName: "set", scope: !220, file: !220, line: 409, scopeLine: 409, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!2498 = !DILocation(line: 411, scope: !2497, inlinedAt: !2493)
!2499 = !DILocation(line: 244, scope: !2486, inlinedAt: !2483)
!2500 = !DILocalVariable(name: "start", scope: !2501, file: !18, line: 246, type: !3, align: 8)
!2501 = distinct !DILexicalBlock(scope: !2486, file: !18, line: 245, column: 2)
!2502 = !DILocation(line: 246, scope: !2501, inlinedAt: !2483)
!2503 = !DILocalVariable(name: "len", scope: !2501, file: !18, line: 247, type: !3, align: 8)
!2504 = !DILocation(line: 247, scope: !2501, inlinedAt: !2483)
!2505 = !DILocation(line: 248, scope: !2501, inlinedAt: !2483)
!2506 = !DILocalVariable(name: "self", scope: !2501, file: !18, line: 248, type: !103, align: 8)
!2507 = !DILocation(line: 273, scope: !2501, inlinedAt: !2483)
!2508 = !DILocation(line: 274, scope: !2501, inlinedAt: !2483)
!2509 = !DILocation(line: 275, scope: !2501, inlinedAt: !2483)
!2510 = !DILocation(line: 276, scope: !2501, inlinedAt: !2483)
!2511 = !DILocation(line: 249, scope: !2501, inlinedAt: !2483)
!2512 = !DILocation(line: 257, scope: !2513, inlinedAt: !2511)
!2513 = distinct !DILexicalBlock(scope: !2514, file: !2411, line: 264, column: 1)
!2514 = distinct !DISubprogram(name: "protect", linkageName: "protect", scope: !2411, file: !2411, line: 263, scopeLine: 263, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!2515 = !DILocation(line: 249, scope: !2513, inlinedAt: !2511)
!2516 = !DILocation(line: 258, scope: !2513, inlinedAt: !2511)
!2517 = !DILocation(line: 259, scope: !2513, inlinedAt: !2511)
!2518 = !DILocation(line: 260, scope: !2513, inlinedAt: !2511)
!2519 = !DILocation(line: 265, scope: !2514, inlinedAt: !2511)
!2520 = !DILocation(line: 117, scope: !2514, inlinedAt: !2511)
!2521 = !DILocation(line: 251, scope: !2486, inlinedAt: !2483)
!2522 = !DILocalVariable(name: "allocated", scope: !2523, file: !18, line: 134, type: !3, align: 8)
!2523 = distinct !DILexicalBlock(scope: !2482, file: !18, line: 133, column: 6)
!2524 = !DILocation(line: 134, scope: !2523)
!2525 = !DILocation(line: 135, scope: !2523)
!2526 = !DILocalVariable(name: "shift", scope: !2527, file: !18, line: 209, type: !3, align: 8)
!2527 = distinct !DISubprogram(name: "protect", linkageName: "protect", scope: !18, file: !18, line: 207, scopeLine: 207, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95, retainedNodes: !140)
!2528 = !DILocation(line: 209, scope: !2527, inlinedAt: !2529)
!2529 = !DILocation(line: 136, scope: !2523)
!2530 = !DILocalVariable(name: "page_after", scope: !2527, file: !18, line: 210, type: !3, align: 8)
!2531 = !DILocation(line: 210, scope: !2527, inlinedAt: !2529)
!2532 = !DILocalVariable(name: "last_page", scope: !2527, file: !18, line: 211, type: !3, align: 8)
!2533 = !DILocation(line: 211, scope: !2527, inlinedAt: !2529)
!2534 = !DILocalVariable(name: "over_high_water", scope: !2527, file: !18, line: 212, type: !60, align: 1)
!2535 = !DILocation(line: 212, scope: !2527, inlinedAt: !2529)
!2536 = !DILocation(line: 213, scope: !2527, inlinedAt: !2529)
!2537 = !DILocalVariable(name: "page_start", scope: !2538, file: !18, line: 215, type: !3, align: 8)
!2538 = distinct !DILexicalBlock(scope: !2527, file: !18, line: 214, column: 2)
!2539 = !DILocation(line: 215, scope: !2538, inlinedAt: !2529)
!2540 = !DILocalVariable(name: "page_len", scope: !2538, file: !18, line: 216, type: !3, align: 8)
!2541 = !DILocation(line: 216, scope: !2538, inlinedAt: !2529)
!2542 = !DILocation(line: 217, scope: !2538, inlinedAt: !2529)
!2543 = !DILocation(line: 241, scope: !2544, inlinedAt: !2542)
!2544 = distinct !DILexicalBlock(scope: !2545, file: !2411, line: 248, column: 1)
!2545 = distinct !DISubprogram(name: "commit", linkageName: "commit", scope: !2411, file: !2411, line: 247, scopeLine: 247, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!2546 = !DILocation(line: 217, scope: !2544, inlinedAt: !2542)
!2547 = !DILocation(line: 242, scope: !2544, inlinedAt: !2542)
!2548 = !DILocation(line: 243, scope: !2544, inlinedAt: !2542)
!2549 = !DILocation(line: 244, scope: !2544, inlinedAt: !2542)
!2550 = !DILocation(line: 249, scope: !2545, inlinedAt: !2542)
!2551 = !DILocation(line: 155, scope: !2545, inlinedAt: !2542)
!2552 = !DILocation(line: 218, scope: !2538, inlinedAt: !2529)
!2553 = !DILocation(line: 220, scope: !2554, inlinedAt: !2529)
!2554 = distinct !DILexicalBlock(scope: !2538, file: !18, line: 219, column: 3)
!2555 = !DILocation(line: 257, scope: !2556, inlinedAt: !2553)
!2556 = distinct !DILexicalBlock(scope: !2557, file: !2411, line: 264, column: 1)
!2557 = distinct !DISubprogram(name: "protect", linkageName: "protect", scope: !2411, file: !2411, line: 263, scopeLine: 263, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!2558 = !DILocation(line: 220, scope: !2556, inlinedAt: !2553)
!2559 = !DILocation(line: 258, scope: !2556, inlinedAt: !2553)
!2560 = !DILocation(line: 259, scope: !2556, inlinedAt: !2553)
!2561 = !DILocation(line: 260, scope: !2556, inlinedAt: !2553)
!2562 = !DILocation(line: 265, scope: !2557, inlinedAt: !2553)
!2563 = !DILocation(line: 117, scope: !2557, inlinedAt: !2553)
!2564 = !DILocation(line: 222, scope: !2538, inlinedAt: !2529)
!2565 = !DILocation(line: 227, scope: !2527, inlinedAt: !2529)
!2566 = !DILocation(line: 228, scope: !2527, inlinedAt: !2529)
!2567 = !DILocation(line: 138, scope: !2482)
!2568 = !DILocation(line: 139, scope: !2482)
!2569 = !DILocation(line: 141, scope: !2454)
!2570 = !DILocation(line: 146, scope: !2571)
!2571 = distinct !DILexicalBlock(scope: !2454, file: !18, line: 142, column: 5)
!2572 = !DILocation(line: 147, scope: !2571)
!2573 = !DILocalVariable(name: "mem", scope: !2454, file: !18, line: 150, type: !29, align: 8)
!2574 = !DILocation(line: 150, scope: !2454)
!2575 = !DILocation(line: 78, scope: !2454)
!2576 = !DILocation(line: 975, scope: !2577, inlinedAt: !2575)
!2577 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !205, file: !205, line: 973, scopeLine: 973, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!2578 = !DILocation(line: 151, scope: !2454)
!2579 = !DILocation(line: 357, scope: !2580, inlinedAt: !2582)
!2580 = distinct !DILexicalBlock(scope: !2581, file: !220, line: 358, column: 1)
!2581 = distinct !DISubprogram(name: "copy", linkageName: "copy", scope: !220, file: !220, line: 357, scopeLine: 357, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!2582 = !DILocation(line: 152, scope: !2454)
!2583 = !DILocation(line: 354, scope: !2580, inlinedAt: !2582)
!2584 = !DILocation(line: 152, scope: !2580, inlinedAt: !2582)
!2585 = !DILocation(line: 355, scope: !2580, inlinedAt: !2582)
!2586 = !DILocation(line: 359, scope: !2581, inlinedAt: !2582)
!2587 = !DILocation(line: 153, scope: !2454)
!2588 = distinct !DISubprogram(name: "release", linkageName: "std.core.mem.allocator.Vmem.release", scope: !18, file: !18, line: 161, type: !2589, scopeLine: 161, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !95, retainedNodes: !140)
!2589 = !DISubroutineType(types: !2590)
!2590 = !{null, !2302, !29, !60}
!2591 = !DILocation(line: 162, scope: !2588)
!2592 = !DILocalVariable(name: "self", arg: 1, scope: !2588, file: !18, line: 161, type: !2302)
!2593 = !DILocation(line: 161, scope: !2588)
!2594 = !DILocalVariable(name: "ptr", arg: 2, scope: !2588, file: !18, line: 161, type: !29)
!2595 = !DILocalVariable(name: ".anon", arg: 3, scope: !2588, file: !18, line: 161, type: !60)
!2596 = !DILocation(line: 159, scope: !2597)
!2597 = distinct !DILexicalBlock(scope: !2588, file: !18, line: 162, column: 1)
!2598 = !DILocation(line: 163, scope: !2588)
!2599 = !DILocalVariable(name: "header", scope: !2588, file: !18, line: 164, type: !2435, align: 8)
!2600 = !DILocation(line: 164, scope: !2588)
!2601 = !DILocation(line: 166, scope: !2588)
!2602 = !DILocation(line: 168, scope: !2603)
!2603 = distinct !DILexicalBlock(scope: !2588, file: !18, line: 167, column: 2)
!2604 = !DILocalVariable(name: "shift", scope: !2605, file: !18, line: 233, type: !3, align: 8)
!2605 = distinct !DISubprogram(name: "unprotect", linkageName: "unprotect", scope: !18, file: !18, line: 231, scopeLine: 231, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95, retainedNodes: !140)
!2606 = !DILocation(line: 233, scope: !2605, inlinedAt: !2602)
!2607 = !DILocalVariable(name: "last_page", scope: !2605, file: !18, line: 234, type: !3, align: 8)
!2608 = !DILocation(line: 234, scope: !2605, inlinedAt: !2602)
!2609 = !DILocalVariable(name: "page_after", scope: !2605, file: !18, line: 235, type: !3, align: 8)
!2610 = !DILocation(line: 235, scope: !2605, inlinedAt: !2602)
!2611 = !DILocation(line: 239, scope: !2605, inlinedAt: !2602)
!2612 = !DILocation(line: 241, scope: !2613, inlinedAt: !2602)
!2613 = distinct !DILexicalBlock(scope: !2605, file: !18, line: 240, column: 3)
!2614 = !DILocation(line: 409, scope: !2615, inlinedAt: !2612)
!2615 = distinct !DILexicalBlock(scope: !2616, file: !220, line: 410, column: 1)
!2616 = distinct !DISubprogram(name: "set", linkageName: "set", scope: !220, file: !220, line: 409, scopeLine: 409, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!2617 = !DILocation(line: 411, scope: !2616, inlinedAt: !2612)
!2618 = !DILocation(line: 244, scope: !2605, inlinedAt: !2602)
!2619 = !DILocalVariable(name: "start", scope: !2620, file: !18, line: 246, type: !3, align: 8)
!2620 = distinct !DILexicalBlock(scope: !2605, file: !18, line: 245, column: 2)
!2621 = !DILocation(line: 246, scope: !2620, inlinedAt: !2602)
!2622 = !DILocalVariable(name: "len", scope: !2620, file: !18, line: 247, type: !3, align: 8)
!2623 = !DILocation(line: 247, scope: !2620, inlinedAt: !2602)
!2624 = !DILocation(line: 248, scope: !2620, inlinedAt: !2602)
!2625 = !DILocalVariable(name: "self", scope: !2620, file: !18, line: 248, type: !103, align: 8)
!2626 = !DILocation(line: 273, scope: !2620, inlinedAt: !2602)
!2627 = !DILocation(line: 274, scope: !2620, inlinedAt: !2602)
!2628 = !DILocation(line: 275, scope: !2620, inlinedAt: !2602)
!2629 = !DILocation(line: 276, scope: !2620, inlinedAt: !2602)
!2630 = !DILocation(line: 249, scope: !2620, inlinedAt: !2602)
!2631 = !DILocation(line: 257, scope: !2632, inlinedAt: !2630)
!2632 = distinct !DILexicalBlock(scope: !2633, file: !2411, line: 264, column: 1)
!2633 = distinct !DISubprogram(name: "protect", linkageName: "protect", scope: !2411, file: !2411, line: 263, scopeLine: 263, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!2634 = !DILocation(line: 249, scope: !2632, inlinedAt: !2630)
!2635 = !DILocation(line: 258, scope: !2632, inlinedAt: !2630)
!2636 = !DILocation(line: 259, scope: !2632, inlinedAt: !2630)
!2637 = !DILocation(line: 260, scope: !2632, inlinedAt: !2630)
!2638 = !DILocation(line: 265, scope: !2633, inlinedAt: !2630)
!2639 = !DILocation(line: 117, scope: !2633, inlinedAt: !2630)
!2640 = !DILocation(line: 251, scope: !2605, inlinedAt: !2602)
!2641 = distinct !DISubprogram(name: "mark", linkageName: "std.core.mem.allocator.Vmem.mark", scope: !18, file: !18, line: 172, type: !2642, scopeLine: 172, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !95, retainedNodes: !140)
!2642 = !DISubroutineType(types: !2643)
!2643 = !{!3, !2302}
!2644 = !DILocation(line: 173, scope: !2641)
!2645 = !DILocalVariable(name: "self", arg: 1, scope: !2641, file: !18, line: 172, type: !2302)
!2646 = !DILocation(line: 172, scope: !2641)
!2647 = !DILocation(line: 174, scope: !2641)
!2648 = distinct !DISubprogram(name: "reset", linkageName: "std.core.mem.allocator.Vmem.reset", scope: !18, file: !18, line: 180, type: !2649, scopeLine: 180, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !95, retainedNodes: !140)
!2649 = !DISubroutineType(types: !2650)
!2650 = !{null, !2302, !4}
!2651 = !DILocation(line: 181, scope: !2648)
!2652 = !DILocalVariable(name: "self", arg: 1, scope: !2648, file: !18, line: 180, type: !2302)
!2653 = !DILocation(line: 180, scope: !2648)
!2654 = !DILocalVariable(name: "mark", arg: 2, scope: !2648, file: !18, line: 180, type: !3)
!2655 = !DILocation(line: 178, scope: !2656)
!2656 = distinct !DILexicalBlock(scope: !2648, file: !18, line: 181, column: 1)
!2657 = !DILocation(line: 182, scope: !2648)
!2658 = !DILocalVariable(name: "shift", scope: !2659, file: !18, line: 233, type: !3, align: 8)
!2659 = distinct !DISubprogram(name: "unprotect", linkageName: "unprotect", scope: !18, file: !18, line: 231, scopeLine: 231, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95, retainedNodes: !140)
!2660 = !DILocation(line: 233, scope: !2659, inlinedAt: !2661)
!2661 = !DILocation(line: 183, scope: !2648)
!2662 = !DILocalVariable(name: "last_page", scope: !2659, file: !18, line: 234, type: !3, align: 8)
!2663 = !DILocation(line: 234, scope: !2659, inlinedAt: !2661)
!2664 = !DILocalVariable(name: "page_after", scope: !2659, file: !18, line: 235, type: !3, align: 8)
!2665 = !DILocation(line: 235, scope: !2659, inlinedAt: !2661)
!2666 = !DILocation(line: 239, scope: !2659, inlinedAt: !2661)
!2667 = !DILocation(line: 241, scope: !2668, inlinedAt: !2661)
!2668 = distinct !DILexicalBlock(scope: !2659, file: !18, line: 240, column: 3)
!2669 = !DILocation(line: 409, scope: !2670, inlinedAt: !2667)
!2670 = distinct !DILexicalBlock(scope: !2671, file: !220, line: 410, column: 1)
!2671 = distinct !DISubprogram(name: "set", linkageName: "set", scope: !220, file: !220, line: 409, scopeLine: 409, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!2672 = !DILocation(line: 411, scope: !2671, inlinedAt: !2667)
!2673 = !DILocation(line: 244, scope: !2659, inlinedAt: !2661)
!2674 = !DILocalVariable(name: "start", scope: !2675, file: !18, line: 246, type: !3, align: 8)
!2675 = distinct !DILexicalBlock(scope: !2659, file: !18, line: 245, column: 2)
!2676 = !DILocation(line: 246, scope: !2675, inlinedAt: !2661)
!2677 = !DILocalVariable(name: "len", scope: !2675, file: !18, line: 247, type: !3, align: 8)
!2678 = !DILocation(line: 247, scope: !2675, inlinedAt: !2661)
!2679 = !DILocation(line: 248, scope: !2675, inlinedAt: !2661)
!2680 = !DILocalVariable(name: "self", scope: !2675, file: !18, line: 248, type: !103, align: 8)
!2681 = !DILocation(line: 273, scope: !2675, inlinedAt: !2661)
!2682 = !DILocation(line: 274, scope: !2675, inlinedAt: !2661)
!2683 = !DILocation(line: 275, scope: !2675, inlinedAt: !2661)
!2684 = !DILocation(line: 276, scope: !2675, inlinedAt: !2661)
!2685 = !DILocation(line: 249, scope: !2675, inlinedAt: !2661)
!2686 = !DILocation(line: 257, scope: !2687, inlinedAt: !2685)
!2687 = distinct !DILexicalBlock(scope: !2688, file: !2411, line: 264, column: 1)
!2688 = distinct !DISubprogram(name: "protect", linkageName: "protect", scope: !2411, file: !2411, line: 263, scopeLine: 263, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!2689 = !DILocation(line: 249, scope: !2687, inlinedAt: !2685)
!2690 = !DILocation(line: 258, scope: !2687, inlinedAt: !2685)
!2691 = !DILocation(line: 259, scope: !2687, inlinedAt: !2685)
!2692 = !DILocation(line: 260, scope: !2687, inlinedAt: !2685)
!2693 = !DILocation(line: 265, scope: !2688, inlinedAt: !2685)
!2694 = !DILocation(line: 117, scope: !2688, inlinedAt: !2685)
!2695 = !DILocation(line: 251, scope: !2659, inlinedAt: !2661)
!2696 = distinct !DISubprogram(name: "free", linkageName: "std.core.mem.allocator.Vmem.free", scope: !18, file: !18, line: 186, type: !2697, scopeLine: 186, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !95, retainedNodes: !140)
!2697 = !DISubroutineType(types: !2698)
!2698 = !{null, !2302}
!2699 = !DILocation(line: 187, scope: !2696)
!2700 = !DILocalVariable(name: "self", arg: 1, scope: !2696, file: !18, line: 186, type: !2302)
!2701 = !DILocation(line: 186, scope: !2696)
!2702 = !DILocation(line: 188, scope: !2696)
!2703 = !DILocation(line: 193, scope: !2696)
!2704 = !DILocation(line: 195, scope: !2696)
!2705 = !DILocation(line: 287, scope: !2696)
!2706 = !DILocation(line: 196, scope: !2696)
!2707 = distinct !DISubprogram(name: "acquire", linkageName: "std.core.mem.allocator.LazyTempAllocator.acquire", scope: !21, file: !21, line: 521, type: !2708, scopeLine: 521, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !95, retainedNodes: !140)
!2708 = !DISubroutineType(types: !2709)
!2709 = !{!192, !194, !2710, !4, !98, !4}
!2710 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "LazyTempAllocator*", baseType: !36, size: 64, align: 64, dwarfAddressSpace: 0)
!2711 = !DILocation(line: 522, scope: !2707)
!2712 = !DILocalVariable(name: "self", arg: 1, scope: !2707, file: !21, line: 521, type: !2710)
!2713 = !DILocation(line: 521, scope: !2707)
!2714 = !DILocalVariable(name: "bytes", arg: 2, scope: !2707, file: !21, line: 521, type: !3)
!2715 = !DILocalVariable(name: "init_type", arg: 3, scope: !2707, file: !21, line: 521, type: !98)
!2716 = !DILocalVariable(name: "alignment", arg: 4, scope: !2707, file: !21, line: 521, type: !3)
!2717 = !DILocation(line: 523, scope: !2707)
!2718 = !DILocation(line: 470, scope: !2707)
!2719 = !DILocation(line: 524, scope: !2707)
!2720 = !DILocation(line: 257, scope: !2707)
!2721 = !DILocation(line: 975, scope: !2722, inlinedAt: !2720)
!2722 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !205, file: !205, line: 973, scopeLine: 973, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!2723 = distinct !DISubprogram(name: "resize", linkageName: "std.core.mem.allocator.LazyTempAllocator.resize", scope: !21, file: !21, line: 527, type: !2724, scopeLine: 527, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !95, retainedNodes: !140)
!2724 = !DISubroutineType(types: !2725)
!2725 = !{!192, !194, !2710, !29, !4, !4}
!2726 = !DILocation(line: 528, scope: !2723)
!2727 = !DILocalVariable(name: "self", arg: 1, scope: !2723, file: !21, line: 527, type: !2710)
!2728 = !DILocation(line: 527, scope: !2723)
!2729 = !DILocalVariable(name: "old_ptr", arg: 2, scope: !2723, file: !21, line: 527, type: !29)
!2730 = !DILocalVariable(name: "new_bytes", arg: 3, scope: !2723, file: !21, line: 527, type: !3)
!2731 = !DILocalVariable(name: "alignment", arg: 4, scope: !2723, file: !21, line: 527, type: !3)
!2732 = !DILocation(line: 529, scope: !2723)
!2733 = !DILocation(line: 470, scope: !2723)
!2734 = !DILocation(line: 530, scope: !2723)
!2735 = distinct !DISubprogram(name: "release", linkageName: "std.core.mem.allocator.LazyTempAllocator.release", scope: !21, file: !21, line: 533, type: !2736, scopeLine: 533, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !95, retainedNodes: !140)
!2736 = !DISubroutineType(types: !2737)
!2737 = !{null, !2710, !29, !60}
!2738 = !DILocation(line: 534, scope: !2735)
!2739 = !DILocalVariable(name: "self", arg: 1, scope: !2735, file: !21, line: 533, type: !2710)
!2740 = !DILocation(line: 533, scope: !2735)
!2741 = !DILocalVariable(name: "old_ptr", arg: 2, scope: !2735, file: !21, line: 533, type: !29)
!2742 = !DILocalVariable(name: "aligned", arg: 3, scope: !2735, file: !21, line: 533, type: !60)
!2743 = distinct !DISubprogram(name: "acquire", linkageName: "std.core.mem.allocator.NullAllocator.acquire", scope: !21, file: !21, line: 540, type: !2744, scopeLine: 540, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !95, retainedNodes: !140)
!2744 = !DISubroutineType(types: !2745)
!2745 = !{!192, !194, !2746, !4, !98, !4}
!2746 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "NullAllocator*", baseType: !78, size: 64, align: 64, dwarfAddressSpace: 0)
!2747 = !DILocation(line: 541, scope: !2743)
!2748 = !DILocalVariable(name: "self", arg: 1, scope: !2743, file: !21, line: 540, type: !2746)
!2749 = !DILocation(line: 540, scope: !2743)
!2750 = !DILocalVariable(name: "bytes", arg: 2, scope: !2743, file: !21, line: 540, type: !3)
!2751 = !DILocalVariable(name: "init_type", arg: 3, scope: !2743, file: !21, line: 540, type: !98)
!2752 = !DILocalVariable(name: "alignment", arg: 4, scope: !2743, file: !21, line: 540, type: !3)
!2753 = !DILocation(line: 542, scope: !2743)
!2754 = distinct !DISubprogram(name: "resize", linkageName: "std.core.mem.allocator.NullAllocator.resize", scope: !21, file: !21, line: 545, type: !2755, scopeLine: 545, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !95, retainedNodes: !140)
!2755 = !DISubroutineType(types: !2756)
!2756 = !{!192, !194, !2746, !29, !4, !4}
!2757 = !DILocation(line: 546, scope: !2754)
!2758 = !DILocalVariable(name: "self", arg: 1, scope: !2754, file: !21, line: 545, type: !2746)
!2759 = !DILocation(line: 545, scope: !2754)
!2760 = !DILocalVariable(name: "old_ptr", arg: 2, scope: !2754, file: !21, line: 545, type: !29)
!2761 = !DILocalVariable(name: "new_bytes", arg: 3, scope: !2754, file: !21, line: 545, type: !3)
!2762 = !DILocalVariable(name: "alignment", arg: 4, scope: !2754, file: !21, line: 545, type: !3)
!2763 = !DILocation(line: 547, scope: !2754)
!2764 = distinct !DISubprogram(name: "release", linkageName: "std.core.mem.allocator.NullAllocator.release", scope: !21, file: !21, line: 550, type: !2765, scopeLine: 550, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !95, retainedNodes: !140)
!2765 = !DISubroutineType(types: !2766)
!2766 = !{null, !2746, !29, !60}
!2767 = !DILocation(line: 551, scope: !2764)
!2768 = !DILocalVariable(name: "self", arg: 1, scope: !2764, file: !21, line: 550, type: !2746)
!2769 = !DILocation(line: 550, scope: !2764)
!2770 = !DILocalVariable(name: "old_ptr", arg: 2, scope: !2764, file: !21, line: 550, type: !29)
!2771 = !DILocalVariable(name: "aligned", arg: 3, scope: !2764, file: !21, line: 550, type: !60)
!2772 = distinct !DISubprogram(name: "alignment_for_allocation", linkageName: "std.core.mem.allocator.alignment_for_allocation", scope: !21, file: !21, line: 68, type: !2773, scopeLine: 68, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95, retainedNodes: !140)
!2773 = !DISubroutineType(types: !2774)
!2774 = !{!3, !4}
!2775 = !DILocalVariable(name: "alignment", arg: 1, scope: !2772, file: !21, line: 68, type: !3)
!2776 = !DILocation(line: 68, scope: !2772)
!2777 = !DILocation(line: 70, scope: !2772)
!2778 = distinct !DISubprogram(name: "clone_any", linkageName: "std.core.mem.allocator.clone_any", scope: !21, file: !21, line: 332, type: !2779, scopeLine: 332, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !95, retainedNodes: !140)
!2779 = !DISubroutineType(types: !2780)
!2780 = !{!2781, !26, !2781}
!2781 = !DICompositeType(tag: DW_TAG_structure_type, name: "any", size: 128, align: 64, elements: !2782, identifier: "any")
!2782 = !{!2783, !2784}
!2783 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !2781, baseType: !29, size: 64, align: 64)
!2784 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !2781, baseType: !31, size: 64, align: 64, offset: 64)
!2785 = !DILocalVariable(name: "allocator", arg: 1, scope: !2778, file: !21, line: 332, type: !26)
!2786 = !DILocation(line: 332, scope: !2778)
!2787 = !DILocalVariable(name: "value", arg: 2, scope: !2778, file: !21, line: 332, type: !2781)
!2788 = !DILocalVariable(name: "size", scope: !2778, file: !21, line: 334, type: !3, align: 8)
!2789 = !DILocation(line: 334, scope: !2778)
!2790 = !DILocalVariable(name: "data", scope: !2778, file: !21, line: 335, type: !29, align: 8)
!2791 = !DILocation(line: 335, scope: !2778)
!2792 = !DILocation(line: 80, scope: !2793, inlinedAt: !2794)
!2793 = distinct !DISubprogram(name: "malloc_try", linkageName: "malloc_try", scope: !21, file: !21, line: 78, scopeLine: 78, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!2794 = !DILocation(line: 75, scope: !2795, inlinedAt: !2791)
!2795 = distinct !DISubprogram(name: "malloc", linkageName: "malloc", scope: !21, file: !21, line: 73, scopeLine: 73, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!2796 = !DILocation(line: 86, scope: !2793, inlinedAt: !2794)
!2797 = !DILocation(line: 38, scope: !2793, inlinedAt: !2794)
!2798 = !DILocation(line: 975, scope: !2799, inlinedAt: !2797)
!2799 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !205, file: !205, line: 973, scopeLine: 973, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!2800 = !DILocation(line: 357, scope: !2801, inlinedAt: !2803)
!2801 = distinct !DILexicalBlock(scope: !2802, file: !220, line: 358, column: 1)
!2802 = distinct !DISubprogram(name: "copy", linkageName: "copy", scope: !220, file: !220, line: 357, scopeLine: 357, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!2803 = !DILocation(line: 336, scope: !2778)
!2804 = !DILocation(line: 354, scope: !2801, inlinedAt: !2803)
!2805 = !DILocation(line: 336, scope: !2801, inlinedAt: !2803)
!2806 = !DILocation(line: 355, scope: !2801, inlinedAt: !2803)
!2807 = !DILocation(line: 359, scope: !2802, inlinedAt: !2803)
!2808 = !DILocation(line: 337, scope: !2778)
!2809 = !DILocation(line: 258, scope: !2810, inlinedAt: !2808)
!2810 = distinct !DISubprogram(name: "any_make", linkageName: "any_make", scope: !1486, file: !1486, line: 256, scopeLine: 256, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!2811 = distinct !DISubprogram(name: "push_pool", linkageName: "std.core.mem.allocator.push_pool", scope: !21, file: !21, line: 414, type: !2812, scopeLine: 414, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !95, retainedNodes: !140)
!2812 = !DISubroutineType(types: !2813)
!2813 = !{!1928, !4}
!2814 = !DILocalVariable(name: "reserve", arg: 1, scope: !2811, file: !21, line: 414, type: !3)
!2815 = !DILocation(line: 414, scope: !2811)
!2816 = !DILocalVariable(name: "old", scope: !2811, file: !21, line: 416, type: !26, align: 8)
!2817 = !DILocation(line: 416, scope: !2811)
!2818 = !DILocation(line: 470, scope: !2811)
!2819 = !DILocation(line: 417, scope: !2811)
!2820 = !DILocation(line: 87, scope: !2811)
!2821 = !DILocation(line: 418, scope: !2811)
!2822 = distinct !DISubprogram(name: "pop_pool", linkageName: "std.core.mem.allocator.pop_pool", scope: !21, file: !21, line: 421, type: !2823, scopeLine: 421, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !95, retainedNodes: !140)
!2823 = !DISubroutineType(types: !2824)
!2824 = !{null, !1928}
!2825 = !DILocalVariable(name: "old", arg: 1, scope: !2822, file: !21, line: 421, type: !1928)
!2826 = !DILocation(line: 421, scope: !2822)
!2827 = !DILocalVariable(name: "temp", scope: !2822, file: !21, line: 423, type: !41, align: 8)
!2828 = !DILocation(line: 423, scope: !2822)
!2829 = !DILocation(line: 424, scope: !2822)
!2830 = !DILocation(line: 425, scope: !2822)
!2831 = distinct !DISubprogram(name: "create_temp_allocator_on_demand", linkageName: "std.core.mem.allocator.create_temp_allocator_on_demand", scope: !21, file: !21, line: 472, type: !2832, scopeLine: 472, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!2832 = !DISubroutineType(types: !2833)
!2833 = !{!26}
!2834 = !DILocation(line: 470, scope: !2835)
!2835 = distinct !DILexicalBlock(scope: !2831, file: !21, line: 473, column: 1)
!2836 = !DILocation(line: 474, scope: !2831)
!2837 = !DILocation(line: 476, scope: !2838)
!2838 = distinct !DILexicalBlock(scope: !2831, file: !21, line: 475, column: 2)
!2839 = !DILocation(line: 174, scope: !2840, inlinedAt: !2841)
!2840 = distinct !DISubprogram(name: "abort", linkageName: "abort", scope: !1486, file: !1486, line: 172, scopeLine: 172, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!2841 = !DILocation(line: 477, scope: !2838)
!2842 = !DILocation(line: 175, scope: !2840, inlinedAt: !2841)
!2843 = !DILocation(line: 479, scope: !2831)
!2844 = !DILocation(line: 483, scope: !2831)
!2845 = distinct !DISubprogram(name: "create_temp_allocator", linkageName: "std.core.mem.allocator.create_temp_allocator", scope: !21, file: !21, line: 485, type: !2846, scopeLine: 485, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95, retainedNodes: !140)
!2846 = !DISubroutineType(types: !2847)
!2847 = !{!26, !26, !4, !4, !4, !4}
!2848 = !DILocalVariable(name: "allocator", arg: 1, scope: !2845, file: !21, line: 485, type: !26)
!2849 = !DILocation(line: 485, scope: !2845)
!2850 = !DILocalVariable(name: "size", arg: 2, scope: !2845, file: !21, line: 485, type: !3)
!2851 = !DILocalVariable(name: "reserve", arg: 3, scope: !2845, file: !21, line: 485, type: !3)
!2852 = !DILocalVariable(name: "min_size", arg: 4, scope: !2845, file: !21, line: 485, type: !3)
!2853 = !DILocalVariable(name: "realloc_size", arg: 5, scope: !2845, file: !21, line: 485, type: !3)
!2854 = !DILocation(line: 483, scope: !2855)
!2855 = distinct !DILexicalBlock(scope: !2845, file: !21, line: 486, column: 1)
!2856 = !DILocation(line: 487, scope: !2845)
!2857 = !DILocation(line: 69, scope: !2845)
!2858 = distinct !DISubprogram(name: "destroy_temp_allocators", linkageName: "std.core.mem.allocator.destroy_temp_allocators", scope: !21, file: !21, line: 510, type: !2859, scopeLine: 510, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !95)
!2859 = !DISubroutineType(types: !2860)
!2860 = !{null}
!2861 = !DILocation(line: 512, scope: !2858)
!2862 = !DILocation(line: 513, scope: !2858)
!2863 = !DILocation(line: 140, scope: !2858)
!2864 = !DILocation(line: 514, scope: !2858)
!2865 = !DILocation(line: 515, scope: !2858)
!2866 = distinct !DISubprogram(name: "allow_implicit_temp_allocator_on_load_thread", linkageName: "std.core.mem.allocator.allow_implicit_temp_allocator_on_load_thread.10324", scope: !21, file: !21, line: 497, type: !2859, scopeLine: 497, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!2867 = !DILocation(line: 499, scope: !2866)
!2868 = distinct !DISubprogram(name: "destroy_temp_allocators_after_exit", linkageName: "std.core.mem.allocator.destroy_temp_allocators_after_exit.10325", scope: !21, file: !21, line: 502, type: !2859, scopeLine: 502, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !95)
!2869 = !DILocation(line: 504, scope: !2868)
!2870 = distinct !DISubprogram(name: "allocate_block", linkageName: "std.core.mem.allocator.WasmMemory.allocate_block", scope: !81, file: !81, line: 14, type: !2871, scopeLine: 14, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !95, retainedNodes: !140)
!2871 = !DISubroutineType(types: !2872)
!2872 = !{!192, !917, !2873, !4}
!2873 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "WasmMemory*", baseType: !84, size: 64, align: 64, dwarfAddressSpace: 0)
!2874 = !DILocation(line: 15, scope: !2870)
!2875 = !DILocalVariable(name: "self", arg: 1, scope: !2870, file: !81, line: 14, type: !2873)
!2876 = !DILocation(line: 14, scope: !2870)
!2877 = !DILocalVariable(name: "bytes", arg: 2, scope: !2870, file: !81, line: 14, type: !3)
!2878 = !DILocation(line: 16, scope: !2870)
!2879 = !DILocation(line: 18, scope: !2880)
!2880 = distinct !DILexicalBlock(scope: !2870, file: !81, line: 17, column: 2)
!2881 = !DILocalVariable(name: "bytes_required", scope: !2870, file: !81, line: 20, type: !1696, align: 8)
!2882 = !DILocation(line: 20, scope: !2870)
!2883 = !DILocation(line: 21, scope: !2870)
!2884 = !DILocation(line: 24, scope: !2885)
!2885 = distinct !DILexicalBlock(scope: !2870, file: !81, line: 22, column: 2)
!2886 = !DILocation(line: 23, scope: !2887)
!2887 = distinct !DILexicalBlock(scope: !2885, file: !81, line: 23, column: 9)
!2888 = !DILocalVariable(name: "blocks_required", scope: !2870, file: !81, line: 27, type: !3, align: 8)
!2889 = !DILocation(line: 27, scope: !2870)
!2890 = !DILocation(line: 28, scope: !2870)
!2891 = !DILocation(line: 29, scope: !2870)
!2892 = !DILocation(line: 31, scope: !2870)
!2893 = !DILocation(line: 30, scope: !2894)
!2894 = distinct !DILexicalBlock(scope: !2870, file: !81, line: 30, column: 8)
